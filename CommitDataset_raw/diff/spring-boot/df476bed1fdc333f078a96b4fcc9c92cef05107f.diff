[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import java.io.File;, +import org.springframework.util.StringUtils;, +		addDefaultCacheAsRespository(repositoryConfiguration);, +	/**, +	 * Add the default local M2 cache directory as a remote repository. Only do this if, +	 * the local cache location has been changed from the default., +	 * , +	 * @param repositoryConfiguration, +	 */, +	public static void addDefaultCacheAsRespository(, +			List<RepositoryConfiguration> repositoryConfiguration) {, +		RepositoryConfiguration repository = new RepositoryConfiguration("local",, +				new File(getM2HomeDirectory(), "repository").toURI(), true);, +		if (!repositoryConfiguration.contains(repository)) {, +			repositoryConfiguration.add(0, repository);, +		}, +	}, +, +	private static File getM2HomeDirectory() {, +		String mavenRoot = System.getProperty("maven.home");, +		if (StringUtils.hasLength(mavenRoot)) {, +			return new File(mavenRoot);, +		}, +		return new File(System.getProperty("user.home"), ".m2");, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import java.io.File;, +import org.springframework.util.StringUtils;, +		addDefaultCacheAsRespository(repositoryConfiguration);, +	/**, +	 * Add the default local M2 cache directory as a remote repository. Only do this if, +	 * the local cache location has been changed from the default., +	 * , +	 * @param repositoryConfiguration, +	 */, +	public static void addDefaultCacheAsRespository(, +			List<RepositoryConfiguration> repositoryConfiguration) {, +		RepositoryConfiguration repository = new RepositoryConfiguration("local",, +				new File(getM2HomeDirectory(), "repository").toURI(), true);, +		if (!repositoryConfiguration.contains(repository)) {, +			repositoryConfiguration.add(0, repository);, +		}, +	}, +, +	private static File getM2HomeDirectory() {, +		String mavenRoot = System.getProperty("maven.home");, +		if (StringUtils.hasLength(mavenRoot)) {, +			return new File(mavenRoot);, +		}, +		return new File(System.getProperty("user.home"), ".m2");, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +import java.util.Collections;, +		List<RemoteRepository> remotes = new ArrayList<RemoteRepository>(, +				remoteRepositories);, +		Collections.reverse(remotes); // priority is reversed in addRepository, +		for (RemoteRepository repository : remotes) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import java.io.File;, +import org.springframework.util.StringUtils;, +		addDefaultCacheAsRespository(repositoryConfiguration);, +	/**, +	 * Add the default local M2 cache directory as a remote repository. Only do this if, +	 * the local cache location has been changed from the default., +	 * , +	 * @param repositoryConfiguration, +	 */, +	public static void addDefaultCacheAsRespository(, +			List<RepositoryConfiguration> repositoryConfiguration) {, +		RepositoryConfiguration repository = new RepositoryConfiguration("local",, +				new File(getM2HomeDirectory(), "repository").toURI(), true);, +		if (!repositoryConfiguration.contains(repository)) {, +			repositoryConfiguration.add(0, repository);, +		}, +	}, +, +	private static File getM2HomeDirectory() {, +		String mavenRoot = System.getProperty("maven.home");, +		if (StringUtils.hasLength(mavenRoot)) {, +			return new File(mavenRoot);, +		}, +		return new File(System.getProperty("user.home"), ".m2");, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +import java.util.Collections;, +		List<RemoteRepository> remotes = new ArrayList<RemoteRepository>(, +				remoteRepositories);, +		Collections.reverse(remotes); // priority is reversed in addRepository, +		for (RemoteRepository repository : remotes) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/RepositoryConfiguration.java, +	@Override, +	public String toString() {]