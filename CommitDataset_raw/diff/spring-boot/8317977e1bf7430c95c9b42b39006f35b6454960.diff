[+++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>spring-webflux</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>spring-webflux</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/WebFluxAnnotationAutoConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.webflux;, +, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.AutoConfigureOrder;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChain;, +import org.springframework.boot.autoconfigure.web.ResourceProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.converter.GenericConverter;, +import org.springframework.format.Formatter;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.http.CacheControl;, +import org.springframework.http.server.reactive.HttpHandler;, +import org.springframework.web.reactive.DispatcherHandler;, +import org.springframework.web.reactive.config.DelegatingWebFluxConfiguration;, +import org.springframework.web.reactive.config.EnableWebFlux;, +import org.springframework.web.reactive.config.ResourceChainRegistration;, +import org.springframework.web.reactive.config.ResourceHandlerRegistration;, +import org.springframework.web.reactive.config.ResourceHandlerRegistry;, +import org.springframework.web.reactive.config.ViewResolverRegistry;, +import org.springframework.web.reactive.config.WebFluxConfigurationSupport;, +import org.springframework.web.reactive.config.WebFluxConfigurer;, +import org.springframework.web.reactive.function.server.RouterFunction;, +import org.springframework.web.reactive.resource.AppCacheManifestTransformer;, +import org.springframework.web.reactive.resource.GzipResourceResolver;, +import org.springframework.web.reactive.resource.ResourceResolver;, +import org.springframework.web.reactive.resource.VersionResourceResolver;, +import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;, +import org.springframework.web.reactive.result.view.ViewResolver;, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for {@link EnableWebFlux WebFlux}., + *, + * @author Brian Clozel, + * @author Rob Winch, + */, +@Configuration, +@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE), +@ConditionalOnClass({DispatcherHandler.class, HttpHandler.class}), +@ConditionalOnMissingBean({RouterFunction.class, HttpHandler.class}), +@AutoConfigureAfter(ReactiveWebServerAutoConfiguration.class), +@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10), +public class WebFluxAnnotationAutoConfiguration {, +, +	@Configuration, +	@ConditionalOnMissingBean(WebFluxConfigurationSupport.class), +	@EnableConfigurationProperties({ResourceProperties.class, WebFluxProperties.class}), +	@Import(DelegatingWebFluxConfiguration.class)]