[+++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +						// Try the profile specific file, +						load(location + name + "-" + profile + "." + ext, profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +						// Try the profile specific file, +						load(location + name + "-" + profile + "." + ext, profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java, +import java.util.Properties;, +		if (profile == null) {, +			Properties properties = PropertiesLoaderUtils.loadProperties(resource);, +			if (!properties.isEmpty()) {, +				return new PropertiesPropertySource(name, properties);, +		}, +		return null;, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +						// Try the profile specific file, +						load(location + name + "-" + profile + "." + ext, profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java, +import java.util.Properties;, +		if (profile == null) {, +			Properties properties = PropertiesLoaderUtils.loadProperties(resource);, +			if (!properties.isEmpty()) {, +				return new PropertiesPropertySource(name, properties);, +		}, +		return null;, +++ b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java, +			if (!properties.isEmpty()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +						// Try the profile specific file, +						load(location + name + "-" + profile + "." + ext, profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java, +import java.util.Properties;, +		if (profile == null) {, +			Properties properties = PropertiesLoaderUtils.loadProperties(resource);, +			if (!properties.isEmpty()) {, +				return new PropertiesPropertySource(name, properties);, +		}, +		return null;, +++ b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java, +			if (!properties.isEmpty()) {, +++ b/spring-boot/src/test/java/org/springframework/boot/config/ConfigFileApplicationListenerTests.java, +	@Test, +	public void profileSubDocumentInProfileSpecificFile() throws Exception {, +		// gh-340, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebEnvironment(false);, +		ConfigurableApplicationContext context = application, +				.run("--spring.profiles.active=activeprofilewithsubdoc");, +		String property = context.getEnvironment().getProperty("foobar");, +		assertThat(property, equalTo("baz"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +						// Try the profile specific file, +						load(location + name + "-" + profile + "." + ext, profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java, +import java.util.Properties;, +		if (profile == null) {, +			Properties properties = PropertiesLoaderUtils.loadProperties(resource);, +			if (!properties.isEmpty()) {, +				return new PropertiesPropertySource(name, properties);, +		}, +		return null;, +++ b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java, +			if (!properties.isEmpty()) {, +++ b/spring-boot/src/test/java/org/springframework/boot/config/ConfigFileApplicationListenerTests.java, +	@Test, +	public void profileSubDocumentInProfileSpecificFile() throws Exception {, +		// gh-340, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebEnvironment(false);, +		ConfigurableApplicationContext context = application, +				.run("--spring.profiles.active=activeprofilewithsubdoc");, +		String property = context.getEnvironment().getProperty("foobar");, +		assertThat(property, equalTo("baz"));, +	}, +, +++ b/spring-boot/src/test/resources/application-activeprofilewithsubdoc.yml, +spring.profiles: activeprofilewithsubdoc, +foobar: baz]