[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +import java.util.Arrays;, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, + * @author Oliver Gierke, +	 * Programmatically registers the auto-configuration package names. Subsequent, +	 * invocations will add the given package names to those that have already been, +	 * registered. You can use this method to manually define the base packages that will, +	 * be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that, +	 * you don't call this method directly, but instead rely on the default convention, +	 * where the package name is set from your {@code @EnableAutoConfiguration}, +	 * configuration class or classes., +	 * @param packageNames the package names to set, +	public static void register(BeanDefinitionRegistry registry, String... packageNames) {, +, +		if (registry.containsBeanDefinition(BEAN)) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);, +			ConstructorArgumentValues constructorArguments = beanDefinition, +					.getConstructorArgumentValues();, +			constructorArguments.addIndexedArgumentValue(0,, +					augmentBasePackages(constructorArguments, packageNames));, +		}, +		else {, +	}, +, +	private static String[] augmentBasePackages(, +			ConstructorArgumentValues constructorArguments, String[] packageNames) {, +, +		ValueHolder valueHolder = constructorArguments.getIndexedArgumentValue(0,, +				List.class);, +, +		List<String> packages = new ArrayList<String>(, +				Arrays.asList((String[]) valueHolder.getValue()));, +		packages.addAll(Arrays.asList(packageNames));, +, +		return packages.toArray(new String[packages.size()]);, +	}, +			register(registry, ClassUtils.getPackageName(metadata.getClassName()));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +import java.util.Arrays;, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, + * @author Oliver Gierke, +	 * Programmatically registers the auto-configuration package names. Subsequent, +	 * invocations will add the given package names to those that have already been, +	 * registered. You can use this method to manually define the base packages that will, +	 * be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that, +	 * you don't call this method directly, but instead rely on the default convention, +	 * where the package name is set from your {@code @EnableAutoConfiguration}, +	 * configuration class or classes., +	 * @param packageNames the package names to set, +	public static void register(BeanDefinitionRegistry registry, String... packageNames) {, +, +		if (registry.containsBeanDefinition(BEAN)) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);, +			ConstructorArgumentValues constructorArguments = beanDefinition, +					.getConstructorArgumentValues();, +			constructorArguments.addIndexedArgumentValue(0,, +					augmentBasePackages(constructorArguments, packageNames));, +		}, +		else {, +	}, +, +	private static String[] augmentBasePackages(, +			ConstructorArgumentValues constructorArguments, String[] packageNames) {, +, +		ValueHolder valueHolder = constructorArguments.getIndexedArgumentValue(0,, +				List.class);, +, +		List<String> packages = new ArrayList<String>(, +				Arrays.asList((String[]) valueHolder.getValue()));, +		packages.addAll(Arrays.asList(packageNames));, +, +		return packages.toArray(new String[packages.size()]);, +	}, +			register(registry, ClassUtils.getPackageName(metadata.getClassName()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationPackagesTests.java, +import java.util.List;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar;, +import org.springframework.boot.autoconfigure.packages.one.FirstConfiguration;, +import org.springframework.boot.autoconfigure.packages.two.SecondConfiguration;, +import static org.hamcrest.Matchers.hasItems;, +import static org.hamcrest.Matchers.hasSize;, + * @author Oliver Gierke, +	@Test, +	public void detectsMultipleAutoConfigurationPackages() {, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				FirstConfiguration.class, SecondConfiguration.class);, +, +		List<String> packages = AutoConfigurationPackages.get(context.getBeanFactory());, +, +		assertThat(, +				packages,, +				hasItems(FirstConfiguration.class.getPackage().getName(),, +						SecondConfiguration.class.getPackage().getName()));, +		assertThat(packages, hasSize(2));, +	}, +, +]