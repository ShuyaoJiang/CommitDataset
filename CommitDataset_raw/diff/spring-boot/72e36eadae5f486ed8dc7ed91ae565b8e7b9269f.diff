[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		return new ReactorClientHttpConnector((options) -> options.sslSupport(, +				(sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), +						.trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		return new ReactorClientHttpConnector((options) -> options.sslSupport(, +				(sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), +						.trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +		this.contextRunner.run((context) -> this.contextRunner.withParent(context), +				.run((child) -> assertThat(child), +						.hasSingleBean(HeaderChannelRegistry.class)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		return new ReactorClientHttpConnector((options) -> options.sslSupport(, +				(sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), +						.trustManager(InsecureTrustManagerFactory.INSTANCE)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +		this.contextRunner.run((context) -> this.contextRunner.withParent(context), +				.run((child) -> assertThat(child), +						.hasSingleBean(HeaderChannelRegistry.class)));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java, +		return new ReactorClientHttpConnector((options) -> options.sslSupport(, +				(sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), +						.trustManager(InsecureTrustManagerFactory.INSTANCE)));, +		return new ReactorClientHttpConnector((options) -> options.sslSupport(, +				(sslContextBuilder) -> sslContextBuilder.sslProvider(SslProvider.JDK), +						.keyManager(clientKeyManagerFactory)));]