[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +	private final EmbeddedWebApplicationContext applicationContext;, +			EmbeddedWebApplicationContext applicationContext,, +			EmbeddedServletContainer source) {, +	public EmbeddedWebApplicationContext getApplicationContext() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +	private final EmbeddedWebApplicationContext applicationContext;, +			EmbeddedWebApplicationContext applicationContext,, +			EmbeddedServletContainer source) {, +	public EmbeddedWebApplicationContext getApplicationContext() {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +	private final EmbeddedWebApplicationContext applicationContext;, +			EmbeddedWebApplicationContext applicationContext,, +			EmbeddedServletContainer source) {, +	public EmbeddedWebApplicationContext getApplicationContext() {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +	private final EmbeddedWebApplicationContext applicationContext;, +			EmbeddedWebApplicationContext applicationContext,, +			EmbeddedServletContainer source) {, +	public EmbeddedWebApplicationContext getApplicationContext() {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, +@TestExecutionListeners(listeners = { DependencyInjectionTestExecutionListener.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		childContext.setNamespace("management");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +	private final EmbeddedWebApplicationContext applicationContext;, +			EmbeddedWebApplicationContext applicationContext,, +			EmbeddedServletContainer source) {, +	public EmbeddedWebApplicationContext getApplicationContext() {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, +@TestExecutionListeners(listeners = { DependencyInjectionTestExecutionListener.class,, +++ b/spring-boot/src/main/java/org/springframework/boot/test/ServerPortInfoApplicationContextInitializer.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test;, +, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.context.embedded.EmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerInitializedEvent;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link ApplicationContextInitializer} that sets {@link Environment} properties for the, + * ports that {@link EmbeddedServletContainer} servers are actually listening on. The, + * property {@literal "local.server.port"} can be injected directly into tests using, + * {@link Value @Value} or obtained via the {@link Environment}., + * <p>, + * If the {@link EmbeddedWebApplicationContext} has a, + * {@link EmbeddedWebApplicationContext#setNamespace(String) namespace} set, it will be, + * used to construct the property name. For example, the "management" actuator context, + * will have the property name {@literal "local.management.port"}., + * <p>, + * Properties are automatically propagated up to any parent context., + * , + * @author Dave Syer, + * @author Phillip Webb, + */, +public class ServerPortInfoApplicationContextInitializer implements, +		ApplicationContextInitializer<ConfigurableApplicationContext> {, +, +	@Override, +	public void initialize(ConfigurableApplicationContext applicationContext) {, +		applicationContext]