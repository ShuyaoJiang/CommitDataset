[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.data.authentication.UserCredentials;, +import org.springframework.data.mongodb.core.convert.CustomConversions;, +import org.springframework.data.mongodb.core.convert.DbRefResolver;, +import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;, +import org.springframework.data.mongodb.core.convert.MappingMongoConverter;, +import org.springframework.data.mongodb.core.convert.MongoConverter;, +import org.springframework.data.mongodb.core.mapping.MongoMappingContext;, + * @author Phillip Webb, +		String database = this.properties.getMongoClientDatabase();, +		String authDatabase = this.properties.getAuthenticationDatabase();, +		if (StringUtils.hasLength(authDatabase)) {, +			String username = this.properties.getUsername();, +			String password = new String(this.properties.getPassword());, +			UserCredentials credentials = new UserCredentials(username, password);, +			return new SimpleMongoDbFactory(mongo, database, credentials, authDatabase);, +		}, +		return new SimpleMongoDbFactory(mongo, database);, +	public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory,, +			MongoConverter converter) throws UnknownHostException {, +		return new MongoTemplate(mongoDbFactory, converter);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(MongoConverter.class), +	public MappingMongoConverter mappingMongoConverter(MongoDbFactory factory,, +			MongoMappingContext context, BeanFactory beanFactory) {, +		DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);, +		MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver,, +				context);, +		try {, +			mappingConverter.setCustomConversions(beanFactory, +					.getBean(CustomConversions.class));, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignore, +		}, +		return mappingConverter;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public MongoMappingContext mongoMappingContext() {, +		return new MongoMappingContext();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.data.authentication.UserCredentials;, +import org.springframework.data.mongodb.core.convert.CustomConversions;, +import org.springframework.data.mongodb.core.convert.DbRefResolver;, +import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;, +import org.springframework.data.mongodb.core.convert.MappingMongoConverter;, +import org.springframework.data.mongodb.core.convert.MongoConverter;, +import org.springframework.data.mongodb.core.mapping.MongoMappingContext;, + * @author Phillip Webb, +		String database = this.properties.getMongoClientDatabase();, +		String authDatabase = this.properties.getAuthenticationDatabase();, +		if (StringUtils.hasLength(authDatabase)) {, +			String username = this.properties.getUsername();, +			String password = new String(this.properties.getPassword());, +			UserCredentials credentials = new UserCredentials(username, password);, +			return new SimpleMongoDbFactory(mongo, database, credentials, authDatabase);, +		}, +		return new SimpleMongoDbFactory(mongo, database);, +	public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory,, +			MongoConverter converter) throws UnknownHostException {, +		return new MongoTemplate(mongoDbFactory, converter);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(MongoConverter.class), +	public MappingMongoConverter mappingMongoConverter(MongoDbFactory factory,, +			MongoMappingContext context, BeanFactory beanFactory) {, +		DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);, +		MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver,, +				context);, +		try {, +			mappingConverter.setCustomConversions(beanFactory, +					.getBean(CustomConversions.class));, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignore, +		}, +		return mappingConverter;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public MongoMappingContext mongoMappingContext() {, +		return new MongoMappingContext();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +	private String authenticationDatabase;, +, +	public String getAuthenticationDatabase() {, +		return this.authenticationDatabase;, +	}, +, +	public void setAuthenticationDatabase(String authenticationDatabase) {]