[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationIntegrationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> assertThat(context).hasSingleBean(Cluster.class), +						.hasSingleBean(Bucket.class));, +		this.contextRunner.withUserConfiguration(CustomConfiguration.class), +					assertThat(context.getBeansOfType(CouchbaseEnvironment.class)), +							.hasSize(1);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationIntegrationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> assertThat(context).hasSingleBean(Cluster.class), +						.hasSingleBean(Bucket.class));, +		this.contextRunner.withUserConfiguration(CustomConfiguration.class), +					assertThat(context.getBeansOfType(CouchbaseEnvironment.class)), +							.hasSize(1);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +		this.contextRunner.run((context) -> assertNoCouchbaseBeans(context));, +				.doesNotHaveBean(ClusterInfo.class).doesNotHaveBean(Cluster.class), +		}, "spring.couchbase.env.endpoints.keyValue=4",, +		}, "spring.couchbase.env.timeouts.connect=100",, +		}, "spring.couchbase.env.ssl.keyStore=foo",, +		}, "spring.couchbase.env.ssl.enabled=false",, +	private void testCouchbaseEnv(, +			Consumer<DefaultCouchbaseEnvironment> environmentConsumer,, +				.withPropertyValues(environment).run((context) -> {, +					CouchbaseProperties properties = context, +							.getBean(CouchbaseProperties.class);, +					DefaultCouchbaseEnvironment env = new CouchbaseConfiguration(, +							properties).couchbaseEnvironment();, +				.withPropertyValues("spring.couchbase.bootstrap-hosts=localhost",, +					DefaultCouchbaseEnvironment env = context, +							.getBean(DefaultCouchbaseEnvironment.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java, + * Copyright 2012-2018 the original author or authors., +		Assert.isTrue(path.length() > 1, "Path must have length greater than 1");, +		Assert.isTrue(path.startsWith("/"), "Path must start with '/'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationIntegrationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> assertThat(context).hasSingleBean(Cluster.class), +						.hasSingleBean(Bucket.class));, +		this.contextRunner.withUserConfiguration(CustomConfiguration.class), +					assertThat(context.getBeansOfType(CouchbaseEnvironment.class)), +							.hasSize(1);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +		this.contextRunner.run((context) -> assertNoCouchbaseBeans(context));, +				.doesNotHaveBean(ClusterInfo.class).doesNotHaveBean(Cluster.class), +		}, "spring.couchbase.env.endpoints.keyValue=4",]