[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +		public void setRole(List<String> role) {, +			this.role = new ArrayList<String>(role);, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +		public void setRole(List<String> role) {, +			this.role = new ArrayList<String>(role);, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityPropertiesTests.java, +import org.junit.Before;, +	private SecurityProperties security = new SecurityProperties();, +	private RelaxedDataBinder binder = new RelaxedDataBinder(this.security, "security");, +, +	@Before, +	public void init() {, +		this.binder.setIgnoreUnknownFields(false);, +		this.binder.setConversionService(new DefaultConversionService());, +	}, +, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals(1, this.security.getIgnored().size());, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals(0, this.security.getIgnored().size());, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals(1, this.security.getIgnored().size());, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals(2, this.security.getIgnored().size());, +		this.binder.bind(new MutablePropertyValues(map));, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals(2, this.security.getIgnored().size());, +		assertTrue(this.security.getIgnored().contains("/foo/**"));, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertTrue(this.security.getUser().isDefaultPassword());, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertTrue(this.security.getUser().isDefaultPassword());, +	}, +, +	@Test, +	public void testRoles() {, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.user.role", "USER,ADMIN")));, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals("[USER, ADMIN]", this.security.getUser().getRole().toString());, +	}, +, +	@Test, +	public void testRole() {, +		this.binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.user.role", "ADMIN")));, +		assertFalse(this.binder.getBindingResult().hasErrors());, +		assertEquals("[ADMIN]", this.security.getUser().getRole().toString());]