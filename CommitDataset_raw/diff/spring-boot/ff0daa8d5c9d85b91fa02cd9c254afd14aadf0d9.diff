[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;, +import org.springframework.context.ApplicationContext;, + * @author Phillip Webb, +	public DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(, +			ApplicationContext applicationContext,, +		DelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(, +				DEFAULT_FILTER_NAME);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;, +import org.springframework.context.ApplicationContext;, + * @author Phillip Webb, +	public DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(, +			ApplicationContext applicationContext,, +		DelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(, +				DEFAULT_FILTER_NAME);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;, +						DelegatingFilterProxyRegistrationBean.class).getOrder());, +						DelegatingFilterProxyRegistrationBean.class).getOrder());, +		assertEquals(12345, this.context.getBean("securityFilterChainRegistration",, +				DelegatingFilterProxyRegistrationBean.class).getOrder());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;, +import org.springframework.context.ApplicationContext;, + * @author Phillip Webb, +	public DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(, +			ApplicationContext applicationContext,, +		DelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(, +				DEFAULT_FILTER_NAME);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;, +						DelegatingFilterProxyRegistrationBean.class).getOrder());, +						DelegatingFilterProxyRegistrationBean.class).getOrder());, +		assertEquals(12345, this.context.getBean("securityFilterChainRegistration",, +				DelegatingFilterProxyRegistrationBean.class).getOrder());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfigurationEarlyInitializationTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.security;, +, +import java.io.IOException;, +, +import org.junit.Test;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;, +import org.springframework.boot.autoconfigure.security.SecurityAutoConfigurationTests.WebSecurity;, +import org.springframework.boot.autoconfigure.test.ImportAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;, +import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.boot.test.TestRestTemplate;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.stereotype.Component;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RestController;, +, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.core.JsonProcessingException;, +import com.fasterxml.jackson.databind.DeserializationContext;, +import com.fasterxml.jackson.databind.deser.std.StdDeserializer;, +import com.fasterxml.jackson.databind.module.SimpleModule;, +, +/**, + * Integration test to ensure {@link SecurityFilterAutoConfiguration} doesn't cause early, + * initialization., + *, + * @author Phillip Webb, + */, +public class SecurityFilterAutoConfigurationEarlyInitializationTests {, +, +	// gh-4154, +, +	@Test, +	public void testSecurityFilterDoesNotCauseEarlyInitialization() throws Exception {, +		AnnotationConfigEmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext();, +		try {]