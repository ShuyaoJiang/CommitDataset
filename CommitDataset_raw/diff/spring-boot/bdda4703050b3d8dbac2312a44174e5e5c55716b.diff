[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +	/**, +	 * Additional properties used to configure the client., +	 */, +	private Map<String, String> properties = new HashMap<String, String>();, +, +	public Map<String, String> getProperties() {, +		return this.properties;, +	}, +, +	public void setProperties(Map<String, String> properties) {, +		this.properties = properties;, +	}, +, +		if (this.properties != null && this.properties.size() > 0) {, +			properties.putAll(this.properties);, +		}, +		/**, +		 * Maximum number of records returned in a single call to poll()., +		 */, +		private Integer maxPollRecords;, +, +		public Integer getMaxPollRecords() {, +			return this.maxPollRecords;, +		}, +, +		public void setMaxPollRecords(Integer maxPollRecords) {, +			this.maxPollRecords = maxPollRecords;, +		}, +, +			if (this.maxPollRecords != null) {, +				properties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, this.maxPollRecords);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +	/**, +	 * Additional properties used to configure the client., +	 */, +	private Map<String, String> properties = new HashMap<String, String>();, +, +	public Map<String, String> getProperties() {, +		return this.properties;, +	}, +, +	public void setProperties(Map<String, String> properties) {, +		this.properties = properties;, +	}, +, +		if (this.properties != null && this.properties.size() > 0) {, +			properties.putAll(this.properties);, +		}, +		/**, +		 * Maximum number of records returned in a single call to poll()., +		 */, +		private Integer maxPollRecords;, +, +		public Integer getMaxPollRecords() {, +			return this.maxPollRecords;, +		}, +, +		public void setMaxPollRecords(Integer maxPollRecords) {, +			this.maxPollRecords = maxPollRecords;, +		}, +, +			if (this.maxPollRecords != null) {, +				properties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, this.maxPollRecords);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +				"spring.kafka.properties.foo=bar",, +				"spring.kafka.properties.baz=qux",, +				"spring.kafka.properties.foo.bar.baz=qux.fiz.buz",, +				"spring.kafka.consumer.max-poll-records=42",, +		assertThat(configs.get(ConsumerConfig.MAX_POLL_RECORDS_CONFIG)), +				.isEqualTo(42);, +		assertThat(configs.get("foo")).isEqualTo("bar");, +		assertThat(configs.get("baz")).isEqualTo("qux");, +		assertThat(configs.get("foo.bar.baz")).isEqualTo("qux.fiz.buz");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +	/**, +	 * Additional properties used to configure the client., +	 */, +	private Map<String, String> properties = new HashMap<String, String>();, +, +	public Map<String, String> getProperties() {, +		return this.properties;, +	}, +, +	public void setProperties(Map<String, String> properties) {, +		this.properties = properties;, +	}, +, +		if (this.properties != null && this.properties.size() > 0) {, +			properties.putAll(this.properties);, +		}, +		/**, +		 * Maximum number of records returned in a single call to poll()., +		 */, +		private Integer maxPollRecords;, +, +		public Integer getMaxPollRecords() {, +			return this.maxPollRecords;]