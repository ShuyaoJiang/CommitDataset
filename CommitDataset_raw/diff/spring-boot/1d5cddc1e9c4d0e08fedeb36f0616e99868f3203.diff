[+++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/SampleDataGemFireApplication.java, + * The GemstoneAppConfiguration class for allowing Spring Boot to pickup additional, + * application Spring configuration meta-data for GemFire, which must be specified in, + * Spring Data GemFire's XML namespace., + * @since 1.1.0, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/SampleDataGemFireApplication.java, + * The GemstoneAppConfiguration class for allowing Spring Boot to pickup additional, + * application Spring configuration meta-data for GemFire, which must be specified in, + * Spring Data GemFire's XML namespace., + * @since 1.1.0, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/domain/Gemstone.java, + * The Gemstone class is an abstract data type modeling a Gemstone, such as a diamond or a, + * ruby., + * , +		return this.id;, +		return this.name;, +		return String.format("{ @type = %1$s, id = %2$d, name = %3$s }", getClass(), +				.getName(), getId(), getName());, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/SampleDataGemFireApplication.java, + * The GemstoneAppConfiguration class for allowing Spring Boot to pickup additional, + * application Spring configuration meta-data for GemFire, which must be specified in, + * Spring Data GemFire's XML namespace., + * @since 1.1.0, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/domain/Gemstone.java, + * The Gemstone class is an abstract data type modeling a Gemstone, such as a diamond or a, + * ruby., + * , +		return this.id;, +		return this.name;, +		return String.format("{ @type = %1$s, id = %2$d, name = %3$s }", getClass(), +				.getName(), getId(), getName());, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneRepository.java, + * The GemstoneRepository interface is an extension of the GemfireRepository abstraction, + * for encapsulating data access and persistence operations (CRUD) on Gemstone domain, + * objects., + * , +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/SampleDataGemFireApplication.java, + * The GemstoneAppConfiguration class for allowing Spring Boot to pickup additional, + * application Spring configuration meta-data for GemFire, which must be specified in, + * Spring Data GemFire's XML namespace., + * @since 1.1.0, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/domain/Gemstone.java, + * The Gemstone class is an abstract data type modeling a Gemstone, such as a diamond or a, + * ruby., + * , +		return this.id;, +		return this.name;, +		return String.format("{ @type = %1$s, id = %2$d, name = %3$s }", getClass(), +				.getName(), getId(), getName());, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneRepository.java, + * The GemstoneRepository interface is an extension of the GemfireRepository abstraction, + * for encapsulating data access and persistence operations (CRUD) on Gemstone domain, + * objects., + * , +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneService.java, + * The GemstoneService interface is a Service interface object contract defining business, + * operations for processing Gemstone domain objects., + * , +	 * @return a Iterable object to iterate over the list of Gemstones currently stored in, +	 * the GemFire Cache., +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/pom.xml, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/SampleDataGemFireApplication.java, + * The GemstoneAppConfiguration class for allowing Spring Boot to pickup additional, + * application Spring configuration meta-data for GemFire, which must be specified in, + * Spring Data GemFire's XML namespace., + * @since 1.1.0, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/domain/Gemstone.java, + * The Gemstone class is an abstract data type modeling a Gemstone, such as a diamond or a, + * ruby., + * , +		return this.id;, +		return this.name;, +		return String.format("{ @type = %1$s, id = %2$d, name = %3$s }", getClass(), +				.getName(), getId(), getName());, +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneRepository.java, + * The GemstoneRepository interface is an extension of the GemfireRepository abstraction, + * for encapsulating data access and persistence operations (CRUD) on Gemstone domain, + * objects., + * , +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneService.java, + * The GemstoneService interface is a Service interface object contract defining business, + * operations for processing Gemstone domain objects., + * , +	 * @return a Iterable object to iterate over the list of Gemstones currently stored in, +	 * the GemFire Cache., +++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneServiceImpl.java, +, + * The GemstoneServiceImpl class is a Service object implementing the GemstoneService, + * interface containing business logic and rules in addition to data services for, + * processing Gemstones., + * , +	protected static final List<String> APPROVED_GEMS = new ArrayList<String>(, +			Arrays.asList("ALEXANDRITE", "AQUAMARINE", "DIAMOND", "OPAL", "PEARL",, +					"RUBY", "SAPPHIRE", "SPINEL", "TOPAZ"));, +		Assert.notNull(this.gemstoneRepo,]