[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateProperties.java, +import org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties;, +public class GroovyTemplateProperties extends AbstractViewResolverProperties {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateProperties.java, +import org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties;, +public class GroovyTemplateProperties extends AbstractViewResolverProperties {, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateProperties.java, +import org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties;, +public class GroovyTemplateProperties extends AbstractViewResolverProperties {, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/AbstractTemplateViewResolverProperties.java, + * Base class for {@link ConfigurationProperties} of a, + * {@link AbstractTemplateViewResolver}., +public abstract class AbstractTemplateViewResolverProperties extends, +		AbstractViewResolverProperties {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateProperties.java, +import org.springframework.boot.autoconfigure.template.AbstractViewResolverProperties;, +public class GroovyTemplateProperties extends AbstractViewResolverProperties {, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/AbstractTemplateViewResolverProperties.java, + * Base class for {@link ConfigurationProperties} of a, + * {@link AbstractTemplateViewResolver}., +public abstract class AbstractTemplateViewResolverProperties extends, +		AbstractViewResolverProperties {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/AbstractViewResolverProperties.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.template;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.web.servlet.ViewResolver;, +, +/**, + * Base class for {@link ConfigurationProperties} of a {@link ViewResolver}., + *, + * @author Andy Wilkinson, + * @author Stephane Nicoll, + * @since 1.2.0, + * @see AbstractTemplateViewResolverProperties, + */, +public abstract class AbstractViewResolverProperties {, +, +	private boolean cache;, +, +	private String contentType = "text/html";, +, +	private String charset = "UTF-8";, +, +	private String[] viewNames;, +, +	private boolean checkTemplateLocation = true;, +, +	public void setCheckTemplateLocation(boolean checkTemplateLocation) {, +		this.checkTemplateLocation = checkTemplateLocation;, +	}, +, +	public boolean isCheckTemplateLocation() {, +		return this.checkTemplateLocation;, +	}, +, +	public String[] getViewNames() {, +		return this.viewNames;, +	}, +, +	public void setViewNames(String[] viewNames) {, +		this.viewNames = viewNames;, +	}, +, +	public boolean isCache() {, +		return this.cache;, +	}, +, +	public void setCache(boolean cache) {, +		this.cache = cache;, +	}, +, +	public String getContentType() {, +		return this.contentType, +				+ (this.contentType.contains(";charset=") ? "" : ";charset=", +						+ this.charset);, +	}, +, +	public void setContentType(String contentType) {, +		this.contentType = contentType;, +	}]