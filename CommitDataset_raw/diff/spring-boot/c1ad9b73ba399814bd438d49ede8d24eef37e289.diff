[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import org.springframework.util.ObjectUtils;, +		if (hasArgument(arguments)) {, +			return this.invoker.invoke(arguments);, +		}, +	private boolean hasArgument(Map<String, Object> arguments) {, +		if (!ObjectUtils.isEmpty(arguments)) {, +			for (Object value : arguments.values()) {, +				if (value != null) {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import org.springframework.util.ObjectUtils;, +		if (hasArgument(arguments)) {, +			return this.invoker.invoke(arguments);, +		}, +	private boolean hasArgument(Map<String, Object> arguments) {, +		if (!ObjectUtils.isEmpty(arguments)) {, +			for (Object value : arguments.values()) {, +				if (value != null) {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisor.java, +import org.springframework.boot.actuate.endpoint.invoke.OperationParameter;, +		if (operationType == OperationType.READ && !hasMandatoryParameter(parameters)) {, +	private boolean hasMandatoryParameter(OperationParameters parameters) {, +		for (OperationParameter parameter : parameters) {, +			if (!parameter.isNullable()) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import org.springframework.util.ObjectUtils;, +		if (hasArgument(arguments)) {, +			return this.invoker.invoke(arguments);, +		}, +	private boolean hasArgument(Map<String, Object> arguments) {, +		if (!ObjectUtils.isEmpty(arguments)) {, +			for (Object value : arguments.values()) {, +				if (value != null) {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisor.java, +import org.springframework.boot.actuate.endpoint.invoke.OperationParameter;, +		if (operationType == OperationType.READ && !hasMandatoryParameter(parameters)) {, +	private boolean hasMandatoryParameter(OperationParameters parameters) {, +		for (OperationParameter parameter : parameters) {, +			if (!parameter.isNullable()) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +import org.springframework.lang.Nullable;, + * @author Stephane Nicoll, +	public void applyWhenHasAtLeaseOneMandatoryParameterShouldNotAddAdvise() {, +		OperationParameters parameters = getParameters("getWithParameter", String.class,, +				String.class);, +		assertAdviseIsApplied(parameters);, +	}, +, +	@Test, +	public void applyWithAllOptionalParameterShouldAddAdvise() {, +		OperationParameters parameters = getParameters("getWithAllOptionalParameters",, +				String.class, String.class);, +		given(this.timeToLive.apply(any())).willReturn(100L);, +		assertAdviseIsApplied(parameters);, +	}, +, +	private void assertAdviseIsApplied(OperationParameters parameters) {, +		public String getWithParameter(@Nullable String foo, String bar) {, +			return "";, +		}, +, +		public String getWithAllOptionalParameters(@Nullable String foo,, +				@Nullable String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import org.springframework.util.ObjectUtils;, +		if (hasArgument(arguments)) {, +			return this.invoker.invoke(arguments);]