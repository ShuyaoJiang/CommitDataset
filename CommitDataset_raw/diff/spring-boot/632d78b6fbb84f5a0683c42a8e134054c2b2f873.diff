[+++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +        <Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%wEx</Property>, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +        <Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%wEx</Property>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.logging.log4j2;, +, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.logging.log4j.Level;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.config.Configuration;, +import org.apache.logging.log4j.core.config.plugins.Plugin;, +import org.apache.logging.log4j.core.layout.PatternLayout;, +import org.apache.logging.log4j.core.pattern.ConverterKeys;, +import org.apache.logging.log4j.core.pattern.LogEventPatternConverter;, +import org.apache.logging.log4j.core.pattern.PatternConverter;, +import org.apache.logging.log4j.core.pattern.PatternFormatter;, +import org.apache.logging.log4j.core.pattern.PatternParser;, +import org.springframework.boot.ansi.AnsiColor;, +import org.springframework.boot.ansi.AnsiElement;, +import org.springframework.boot.ansi.AnsiOutput;, +import org.springframework.boot.ansi.AnsiStyle;, +, +/**, + * Log4j2 {@link LogEventPatternConverter} colors output using the {@link AnsiOutput}, + * class. A single option 'styling' can be provided to the converter, or if not specified, + * color styling will be picked based on the logging level., + *, + * @author Vladimir Tsanev, + * @since 1.3.0, + */, +@Plugin(name = "color", category = PatternConverter.CATEGORY), +@ConverterKeys(value = { "clr", "color" }), +public class ColorConverter extends LogEventPatternConverter {, +, +	private static final Map<String, AnsiElement> ELEMENTS;, +	static {, +		Map<String, AnsiElement> elements = new HashMap<String, AnsiElement>();, +		elements.put("faint", AnsiStyle.FAINT);, +		elements.put("red", AnsiColor.RED);, +		elements.put("green", AnsiColor.GREEN);, +		elements.put("yellow", AnsiColor.YELLOW);, +		elements.put("blue", AnsiColor.BLUE);, +		elements.put("magenta", AnsiColor.MAGENTA);, +		elements.put("cyan", AnsiColor.CYAN);, +		ELEMENTS = Collections.unmodifiableMap(elements);, +	}, +, +	private static final Map<Integer, AnsiElement> LEVELS;, +	static {, +		Map<Integer, AnsiElement> levels = new HashMap<Integer, AnsiElement>();, +		levels.put(Level.FATAL.intLevel(), AnsiColor.RED);, +		levels.put(Level.ERROR.intLevel(), AnsiColor.RED);, +		levels.put(Level.WARN.intLevel(), AnsiColor.YELLOW);, +		LEVELS = Collections.unmodifiableMap(levels);, +	}, +, +	private final List<PatternFormatter> formatters;, +, +	private final AnsiElement styling;, +, +	private ColorConverter(List<PatternFormatter> formatters, AnsiElement styling) {, +		super("style", "style");, +		this.formatters = formatters;, +		this.styling = styling;, +	}, +, +	/**, +	 * Creates a new instance of the class. Required by Log4J2., +	 *, +	 * @param config the configuration, +	 * @param options the options, +	 * @return a new instance, or {@code null} if the options are invalid, +	 */, +	public static ColorConverter newInstance(Configuration config, String[] options) {, +		if (options.length < 1) {, +			LOGGER.error(, +					"Incorrect number of options on style. Expected at least 1, received {}",, +					options.length);, +			return null;]