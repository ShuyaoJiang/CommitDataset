[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,, +					IntegrationAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(TestGateway.class);, +			assertThat(context), +					.hasSingleBean(IntegrationComponentScanAutoConfiguration.class);, +		});, +		this.contextRunner, +				.withUserConfiguration(IntegrationComponentScanConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(TestGateway.class);, +					assertThat(context).doesNotHaveBean(, +							IntegrationComponentScanAutoConfiguration.class);, +				});, +		this.contextRunner.run((context) -> {, +			this.contextRunner.withParent(context), +					.withPropertyValues("spring.jmx.default_domain=org.foo"), +					.run((child) -> {, +						assertThat(child).hasSingleBean(HeaderChannelRegistry.class);, +					});, +		});, +		this.contextRunner.run((context) -> {, +			MBeanServer mBeanServer = context.getBean(MBeanServer.class);, +			assertThat(mBeanServer.getDomains()).contains(, +					"org.springframework.integration",, +			assertThat(context), +					.hasBean(IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME);, +		});, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=false"), +				.run((context) -> {, +					assertThat(context).doesNotHaveBean(MBeanServer.class);, +					assertThat(context), +							.hasSingleBean(IntegrationManagementConfigurer.class);, +				});, +		this.contextRunner.withPropertyValues("spring.jmx.default_domain=org.foo"), +				.run((context) -> {, +					MBeanServer mBeanServer = context.getBean(MBeanServer.class);, +					assertThat(mBeanServer.getDomains()).contains("org.foo"), +							.doesNotContain("org.springframework.integration",, +				});, +		this.contextRunner.withUserConfiguration(CustomMBeanExporter.class), +				.run((context) -> {, +					assertThat(context).getBeans(MBeanExporter.class).hasSize(2);, +					assertThat(context.getBean(MBeanExporter.class)), +							.isSameAs(context.getBean("myMBeanExporter"));, +				});, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withConfiguration(AutoConfigurations.of(, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class)), +				.withPropertyValues("spring.datasource.generate-unique-name=true",, +						"spring.integration.jdbc.initialize-schema=always"), +				.run((context) -> {, +					IntegrationProperties properties = context, +							.getBean(IntegrationProperties.class);, +					assertThat(properties.getJdbc().getInitializeSchema()), +							.isEqualTo(DataSourceInitializationMode.ALWAYS);, +					JdbcOperations jdbc = context.getBean(JdbcOperations.class);, +					assertThat(jdbc.queryForList("select * from INT_MESSAGE")).isEmpty();, +					assertThat(jdbc.queryForList("select * from INT_GROUP_TO_MESSAGE")), +					assertThat(jdbc.queryForList("select * from INT_MESSAGE_GROUP")), +					assertThat(jdbc.queryForList("select * from INT_LOCK")).isEmpty();, +					assertThat(jdbc.queryForList("select * from INT_CHANNEL_MESSAGE")), +				});, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withConfiguration(AutoConfigurations.of(, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class)), +				.withPropertyValues("spring.datasource.generate-unique-name=true",, +						"spring.integration.jdbc.initialize-schema=never"), +				.run((context) -> {, +					IntegrationProperties properties = context, +							.getBean(IntegrationProperties.class);, +					assertThat(properties.getJdbc().getInitializeSchema()), +							.isEqualTo(DataSourceInitializationMode.NEVER);, +					JdbcOperations jdbc = context.getBean(JdbcOperations.class);, +					jdbc.queryForList("select * from INT_MESSAGE");, +				});, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withConfiguration(AutoConfigurations.of(, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class)), +				.withPropertyValues("spring.datasource.generate-unique-name=true"), +				.run((context) -> {, +					IntegrationProperties properties = context, +							.getBean(IntegrationProperties.class);, +					assertThat(properties.getJdbc().getInitializeSchema()), +							.isEqualTo(DataSourceInitializationMode.EMBEDDED);, +					JdbcOperations jdbc = context.getBean(JdbcOperations.class);, +					jdbc.queryForList("select * from INT_MESSAGE").isEmpty();, +				});]