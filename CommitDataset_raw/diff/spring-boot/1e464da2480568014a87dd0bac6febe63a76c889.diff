[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import org.springframework.boot.actuate.condition.ConditionalOnManagementMvcContext;, +import org.springframework.context.annotation.Import;, +public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware, SmartInitializingSingleton {, +	@ConditionalOnManagementMvcContext, +	@Configuration, +	@Import(EndpointWebMvcImportSelector.class), +	protected static class EndpointWebMvcConfiguration {, +	@Bean, +	public ManagementContextResolver managementContextResolver() {, +		return new ManagementContextResolver(this.applicationContext);, +		List<Class<?>> configurations = new ArrayList<Class<?>>();, +		configurations.addAll(Arrays.<Class<?>> asList(, +				EndpointWebMvcChildContextConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class));, +		childContext.register(configurations.toArray(new Class<?>[0]));, +		managementContextResolver().setApplicationContext(childContext);, +	public static class ManagementContextResolver {, +, +		private ApplicationContext applicationContext;, +, +		public ManagementContextResolver(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +		public ApplicationContext getApplicationContext() {, +			return this.applicationContext;, +		}, +, +		public void setApplicationContext(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +		public MvcEndpoints getMvcEndpoints() {, +			try {, +				return applicationContext.getBean(MvcEndpoints.class);, +			}, +			catch (Exception e) {, +				return null;, +			}, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import org.springframework.boot.actuate.condition.ConditionalOnManagementMvcContext;, +import org.springframework.context.annotation.Import;, +public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware, SmartInitializingSingleton {, +	@ConditionalOnManagementMvcContext, +	@Configuration, +	@Import(EndpointWebMvcImportSelector.class), +	protected static class EndpointWebMvcConfiguration {, +	@Bean, +	public ManagementContextResolver managementContextResolver() {, +		return new ManagementContextResolver(this.applicationContext);, +		List<Class<?>> configurations = new ArrayList<Class<?>>();, +		configurations.addAll(Arrays.<Class<?>> asList(, +				EndpointWebMvcChildContextConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class));, +		childContext.register(configurations.toArray(new Class<?>[0]));, +		managementContextResolver().setApplicationContext(childContext);, +	public static class ManagementContextResolver {, +, +		private ApplicationContext applicationContext;, +, +		public ManagementContextResolver(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +		public ApplicationContext getApplicationContext() {, +			return this.applicationContext;, +		}, +, +		public void setApplicationContext(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +		public MvcEndpoints getMvcEndpoints() {, +			try {, +				return applicationContext.getBean(MvcEndpoints.class);, +			}, +			catch (Exception e) {, +				return null;, +			}, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.ArrayList;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;]