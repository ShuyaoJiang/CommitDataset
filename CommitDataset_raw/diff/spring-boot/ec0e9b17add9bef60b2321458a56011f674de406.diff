[+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/CleanCommand.java, +					System.out.println("Deleting: " + file);, +							System.out.println("Deleting: " + candidate);, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/CleanCommand.java, +					System.out.println("Deleting: " + file);, +							System.out.println("Deleting: " + candidate);, +++ b/spring-bootstrap-cli/src/main/scripts/spring, +#!/bin/bash, +else, +    if [ ! -d "${SPRING_HOME}" ]; then, +        echo "Not a directory: SPRING_HOME=${SPRING_HOME}", +	    echo "Please rectify and restart.", +        exit 2, +fi, +for f in "${SPRING_HOME}"/*.jar "${SPRING_HOME}"/lib/*.jar "${SPRING_HOME}"/classes; do, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/CleanCommand.java, +					System.out.println("Deleting: " + file);, +							System.out.println("Deleting: " + candidate);, +++ b/spring-bootstrap-cli/src/main/scripts/spring, +#!/bin/bash, +else, +    if [ ! -d "${SPRING_HOME}" ]; then, +        echo "Not a directory: SPRING_HOME=${SPRING_HOME}", +	    echo "Please rectify and restart.", +        exit 2, +fi, +for f in "${SPRING_HOME}"/*.jar "${SPRING_HOME}"/lib/*.jar "${SPRING_HOME}"/classes; do, +++ b/spring-bootstrap-samples/spring-bootstrap-service-sample/src/test/java/org/springframework/bootstrap/sample/service/ShutdownServiceBootstrapApplicationTests.java, +package org.springframework.bootstrap.sample.service;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +import org.springframework.bootstrap.SpringApplication;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.http.client.InterceptingClientHttpRequestFactory;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.security.crypto.codec.Base64;, +import org.springframework.web.client.DefaultResponseErrorHandler;, +import org.springframework.web.client.RestTemplate;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Integration tests for separate management and main service ports., + * , + * @author Dave Syer, + * , + */, +public class ShutdownServiceBootstrapApplicationTests {, +, +	private static ConfigurableApplicationContext context;, +, +	@BeforeClass, +	public static void start() throws Exception {, +		Future<ConfigurableApplicationContext> future = Executors, +				.newSingleThreadExecutor().submit(, +						new Callable<ConfigurableApplicationContext>() {, +							@Override, +							public ConfigurableApplicationContext call() throws Exception {, +								return (ConfigurableApplicationContext) SpringApplication, +										.run(ServiceBootstrapApplication.class);, +							}, +						});, +		context = future.get(10, TimeUnit.SECONDS);, +	}, +, +	@AfterClass, +	public static void stop() {, +		if (context != null) {, +			context.close();, +		}, +	}, +, +	@Test, +	public void testHome() throws Exception {, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<Map> entity = getRestTemplate("user", "password").getForEntity(, +				"http://localhost:8080", Map.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		@SuppressWarnings("unchecked"), +		Map<String, Object> body = entity.getBody();, +		assertEquals("Hello Phil", body.get("message"));, +	}]