[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +			for (ConnectionFactory connectionFactory : connector, +					.getConnectionFactories()) {, +				if (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {, +					((HttpConfiguration.ConnectionFactory) connectionFactory), +							.getHttpConfiguration().setSendServerVersion(false);, +				}, +			}, +			catch (Exception ex) {, +				throw new RuntimeException("Failed to configure Jetty 8 ThreadPool", ex);, +			}, +			try {, +				ReflectionUtils, +						.findMethod(Server.class, "setSendServerVersion", boolean.class), +						.invoke(server, false);, +			}, +			catch (Exception ex) {, +				throw new RuntimeException("Failed to disable Server header", ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +			for (ConnectionFactory connectionFactory : connector, +					.getConnectionFactories()) {, +				if (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {, +					((HttpConfiguration.ConnectionFactory) connectionFactory), +							.getHttpConfiguration().setSendServerVersion(false);, +				}, +			}, +			catch (Exception ex) {, +				throw new RuntimeException("Failed to configure Jetty 8 ThreadPool", ex);, +			}, +			try {, +				ReflectionUtils, +						.findMethod(Server.class, "setSendServerVersion", boolean.class), +						.invoke(server, false);, +			}, +			catch (Exception ex) {, +				throw new RuntimeException("Failed to disable Server header", ex);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +	public void serverHeaderIsDisabledByDefault() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();, +		this.container = factory, +				.getEmbeddedServletContainer(exampleServletRegistration());, +		this.container.start();, +		ClientHttpResponse response = getClientResponse(getLocalUrl("/hello"));, +		assertThat(response.getHeaders().getFirst("server")).isNull();, +	}, +, +	@Test]