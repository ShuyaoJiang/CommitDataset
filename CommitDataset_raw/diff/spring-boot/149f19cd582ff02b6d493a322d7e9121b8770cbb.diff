[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, +import org.neo4j.ogm.session.event.EventListener;, +import org.springframework.beans.factory.ObjectProvider;, +			ApplicationContext applicationContext,, +			ObjectProvider<List<EventListener>> eventListenersProvider) {, +		SessionFactory sessionFactory = new SessionFactory(configuration,, +				getPackagesToScan(applicationContext));, +		List<EventListener> providedEventListeners = eventListenersProvider, +				.getIfAvailable();, +		if (providedEventListeners != null) {, +			for (EventListener eventListener : providedEventListeners) {, +				sessionFactory.register(eventListener);, +			}, +		}, +		return sessionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, +import org.neo4j.ogm.session.event.EventListener;, +import org.springframework.beans.factory.ObjectProvider;, +			ApplicationContext applicationContext,, +			ObjectProvider<List<EventListener>> eventListenersProvider) {, +		SessionFactory sessionFactory = new SessionFactory(configuration,, +				getPackagesToScan(applicationContext));, +		List<EventListener> providedEventListeners = eventListenersProvider, +				.getIfAvailable();, +		if (providedEventListeners != null) {, +			for (EventListener eventListener : providedEventListeners) {, +				sessionFactory.register(eventListener);, +			}, +		}, +		return sessionFactory;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +import org.neo4j.ogm.session.Session;, +import org.neo4j.ogm.session.event.Event;, +import org.neo4j.ogm.session.event.EventListener;, +import org.neo4j.ogm.session.event.PersistenceEvent;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.verify;, +	@Test, +	public void eventListenersAreAutoRegistered() {, +		load(EventListenerConfiguration.class);, +		Session session = this.context.getBean(SessionFactory.class).openSession();, +		session.notifyListeners(new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +		verify(this.context.getBean("eventListenerOne", EventListener.class)), +				.onPreSave(any(Event.class));, +		verify(this.context.getBean("eventListenerTwo", EventListener.class)), +				.onPreSave(any(Event.class));, +	}, +, +	@Configuration, +	static class EventListenerConfiguration {, +, +		@Bean, +		public EventListener eventListenerOne() {, +			return mock(EventListener.class);, +		}, +, +		@Bean, +		public EventListener eventListenerTwo() {, +			return mock(EventListener.class);, +		}, +, +	}, +]