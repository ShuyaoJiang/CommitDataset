[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java, +import org.springframework.http.HttpStatus;, +	private static final String UNKNOWN_PATH_SUFFIX = "/unknownPath";, +				else if(getStatus(response) == HttpStatus.NOT_FOUND.value()), +				{, +					suffix=UNKNOWN_PATH_SUFFIX;, +				}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java, +import org.springframework.http.HttpStatus;, +	private static final String UNKNOWN_PATH_SUFFIX = "/unknownPath";, +				else if(getStatus(response) == HttpStatus.NOT_FOUND.value()), +				{, +					suffix=UNKNOWN_PATH_SUFFIX;, +				}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +import static org.mockito.Mockito.times;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.PathVariable;, +import org.springframework.web.bind.annotation.ResponseBody;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	public void recordsKnown404HttpInteractionsAsSingleMetricWithPathAndTemplateVariable() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				Config.class, MetricFilterAutoConfiguration.class);, +		Filter filter = context.getBean(Filter.class);, +		MockMvc mvc = MockMvcBuilders.standaloneSetup(new MetricFilterTestController()).addFilter(filter).build();, +		mvc.perform(get("/knownPath/foo")), +		.andExpect(status().isNotFound());, +		, +		verify(context.getBean(CounterService.class)).increment("status.404.knownPath.-someVariable-");, +		verify(context.getBean(GaugeService.class)).submit(eq("response.knownPath.-someVariable-"),, +				anyDouble());, +		context.close();, +	}, +	, +	@Test, +	public void records404HttpInteractionsAsSingleMetric() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				Config.class, MetricFilterAutoConfiguration.class);, +		Filter filter = context.getBean(Filter.class);, +		MockMvc mvc = MockMvcBuilders.standaloneSetup(new MetricFilterTestController()).addFilter(filter).build();, +		mvc.perform(get("/unknownPath/1")), +		.andExpect(status().isNotFound());, +		, +		mvc.perform(get("/unknownPath/2")), +		.andExpect(status().isNotFound());, +		, +		verify(context.getBean(CounterService.class), times(2)).increment("status.404.unknownPath");, +		verify(context.getBean(GaugeService.class), times(2)).submit(eq("response.unknownPath"),, +				anyDouble());, +		context.close();, +	}, +, +	@Test, +	public String testTemplateVariableResolution(@PathVariable String someVariable), +	{, +		return someVariable;, +	}, +	, +	@RequestMapping("knownPath/{someVariable}"), +	@ResponseStatus(HttpStatus.NOT_FOUND), +	@ResponseBody, +	public String testKnownPathWith404Response(@PathVariable String someVariable)]