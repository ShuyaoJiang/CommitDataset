[+++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java, +import java.util.stream.Collectors;, +import org.yaml.snakeyaml.nodes.MappingNode;, +import org.yaml.snakeyaml.nodes.NodeTuple;, +				if (!(node instanceof KeyScalarNode)) {, +			}, +			else if (node instanceof MappingNode) {, +				List<NodeTuple> value = ((MappingNode) node).getValue();, +				List<NodeTuple> updatedValues = value.stream().map(nt -> new NodeTuple(KeyScalarNode.get(nt.getKeyNode()),, +						nt.getValueNode())).collect(Collectors.toList());, +				((MappingNode) node).setValue(updatedValues);, +			}, +	 * {@link ScalarNode} that replaces the key node in a {@link NodeTuple}., +	 */, +	private static class KeyScalarNode extends ScalarNode {, +, +		KeyScalarNode(ScalarNode node) {, +			super(node.getTag(), node.getValue(), node.getStartMark(), node.getEndMark(), node.getStyle());, +		}, +, +		private static Node get(Node node) {, +			if (node instanceof ScalarNode) {, +				return new KeyScalarNode((ScalarNode) node);, +			}, +			return node;, +		}, +, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java, +import java.util.stream.Collectors;, +import org.yaml.snakeyaml.nodes.MappingNode;, +import org.yaml.snakeyaml.nodes.NodeTuple;, +				if (!(node instanceof KeyScalarNode)) {, +			}, +			else if (node instanceof MappingNode) {, +				List<NodeTuple> value = ((MappingNode) node).getValue();, +				List<NodeTuple> updatedValues = value.stream().map(nt -> new NodeTuple(KeyScalarNode.get(nt.getKeyNode()),, +						nt.getValueNode())).collect(Collectors.toList());, +				((MappingNode) node).setValue(updatedValues);, +			}, +	 * {@link ScalarNode} that replaces the key node in a {@link NodeTuple}., +	 */, +	private static class KeyScalarNode extends ScalarNode {, +, +		KeyScalarNode(ScalarNode node) {, +			super(node.getTag(), node.getValue(), node.getStartMark(), node.getEndMark(), node.getStyle());, +		}, +, +		private static Node get(Node node) {, +			if (node instanceof ScalarNode) {, +				return new KeyScalarNode((ScalarNode) node);, +			}, +			return node;, +		}, +, +	}, +, +	/**, +++ b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedYamlLoaderTests.java, +	@Test, +	public void processListOfMaps() throws Exception {, +		OriginTrackedValue name = getValue("example.foo[0].name");, +		OriginTrackedValue url = getValue("example.foo[0].url");, +		OriginTrackedValue bar1 = getValue("example.foo[0].bar[0].bar1");, +		OriginTrackedValue bar2 = getValue("example.foo[0].bar[1].bar2");, +		assertThat(name.toString()).isEqualTo("springboot");, +		assertThat(getLocation(name)).isEqualTo("22:15");, +		assertThat(url.toString()).isEqualTo("http://springboot.com");, +		assertThat(getLocation(url)).isEqualTo("23:14");, +		assertThat(bar1.toString()).isEqualTo("baz");, +		assertThat(getLocation(bar1)).isEqualTo("25:19");, +		assertThat(bar2.toString()).isEqualTo("bling");, +		assertThat(getLocation(bar2)).isEqualTo("26:19");, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java, +import java.util.stream.Collectors;, +import org.yaml.snakeyaml.nodes.MappingNode;, +import org.yaml.snakeyaml.nodes.NodeTuple;, +				if (!(node instanceof KeyScalarNode)) {, +			}, +			else if (node instanceof MappingNode) {, +				List<NodeTuple> value = ((MappingNode) node).getValue();, +				List<NodeTuple> updatedValues = value.stream().map(nt -> new NodeTuple(KeyScalarNode.get(nt.getKeyNode()),, +						nt.getValueNode())).collect(Collectors.toList());, +				((MappingNode) node).setValue(updatedValues);, +			}, +	 * {@link ScalarNode} that replaces the key node in a {@link NodeTuple}., +	 */, +	private static class KeyScalarNode extends ScalarNode {, +, +		KeyScalarNode(ScalarNode node) {, +			super(node.getTag(), node.getValue(), node.getStartMark(), node.getEndMark(), node.getStyle());, +		}, +, +		private static Node get(Node node) {, +			if (node instanceof ScalarNode) {, +				return new KeyScalarNode((ScalarNode) node);]