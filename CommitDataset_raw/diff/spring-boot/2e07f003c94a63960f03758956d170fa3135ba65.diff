[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.Assert;, +	@Override, +	public String getUsageHelp() {, +		return "[options] [location]";, +	}, +, +					"Extract the project archive. Inferred if a location is specified and ends with /");, +			this.projectGenerator.generateProject(request, options.has(this.force));, +, +			List<?> nonOptionArguments = new ArrayList<Object>(, +					options.nonOptionArguments());, +			Assert.isTrue(nonOptionArguments.size() <= 1,, +					"Only the target location may be specified");, +, +			request.setExtract(options.has(this.extract));, +			if (nonOptionArguments.size() == 1) {, +				String output = (String) nonOptionArguments.get(0);, +				request.setOutput(output);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.Assert;, +	@Override, +	public String getUsageHelp() {, +		return "[options] [location]";, +	}, +, +					"Extract the project archive. Inferred if a location is specified and ends with /");, +			this.projectGenerator.generateProject(request, options.has(this.force));, +, +			List<?> nonOptionArguments = new ArrayList<Object>(, +					options.nonOptionArguments());, +			Assert.isTrue(nonOptionArguments.size() <= 1,, +					"Only the target location may be specified");, +, +			request.setExtract(options.has(this.extract));, +			if (nonOptionArguments.size() == 1) {, +				String output = (String) nonOptionArguments.get(0);, +				request.setOutput(output);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +	private boolean extract;, +, +		if (output != null && output.endsWith("/")) {, +			this.output = output.substring(0, output.length() - 1);, +			this.extract = true;, +		} else {, +	}, +, +	/**, +	 * Specify if the project archive should be extract in the output location. If, +	 * the {@link #getOutput() output} ends with "/", the project is extracted, +	 * automatically., +	 */, +	public boolean isExtract() {, +		return extract;, +	}, +, +	public void setExtract(boolean extract) {, +		this.extract = extract;, +	}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.Assert;, +	@Override, +	public String getUsageHelp() {, +		return "[options] [location]";, +	}, +, +					"Extract the project archive. Inferred if a location is specified and ends with /");, +			this.projectGenerator.generateProject(request, options.has(this.force));, +, +			List<?> nonOptionArguments = new ArrayList<Object>(, +					options.nonOptionArguments());, +			Assert.isTrue(nonOptionArguments.size() <= 1,, +					"Only the target location may be specified");, +, +			request.setExtract(options.has(this.extract));, +			if (nonOptionArguments.size() == 1) {, +				String output = (String) nonOptionArguments.get(0);, +				request.setOutput(output);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +	private boolean extract;, +, +		if (output != null && output.endsWith("/")) {, +			this.output = output.substring(0, output.length() - 1);, +			this.extract = true;, +		} else {, +	}, +, +	/**, +	 * Specify if the project archive should be extract in the output location. If, +	 * the {@link #getOutput() output} ends with "/", the project is extracted, +	 * automatically., +	 */, +	public boolean isExtract() {, +		return extract;]