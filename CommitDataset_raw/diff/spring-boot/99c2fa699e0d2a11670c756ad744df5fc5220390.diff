[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractReactiveHealthIndicator.java, +		try {, +					.onErrorResume(this::handleFailure);, +		}, +		catch (Throwable ex) {, +			return handleFailure(ex);, +		}, +	}, +, +	private Mono<Health> handleFailure(Throwable ex) {, +		return Mono.just(new Health.Builder().down(ex).build());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractReactiveHealthIndicator.java, +		try {, +					.onErrorResume(this::handleFailure);, +		}, +		catch (Throwable ex) {, +			return handleFailure(ex);, +		}, +	}, +, +	private Mono<Health> handleFailure(Throwable ex) {, +		return Mono.just(new Health.Builder().down(ex).build());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicatorTests.java, +import io.lettuce.core.RedisConnectionException;, +	public void redisCommandIsDown() throws Exception {, +	@Test, +	public void redisConnectionIsDown() throws Exception {, +		ReactiveRedisConnectionFactory redisConnectionFactory = mock(ReactiveRedisConnectionFactory.class);, +		given(redisConnectionFactory.getReactiveConnection()).willThrow(, +				new RedisConnectionException("Unable to connect to localhost:6379"));, +		RedisReactiveHealthIndicator healthIndicator = new RedisReactiveHealthIndicator(redisConnectionFactory);, +		Mono<Health> health = healthIndicator.health();, +		StepVerifier.create(health), +				.consumeNextWith((h) -> assertThat(h.getStatus()).isEqualTo(Status.DOWN)), +				.verifyComplete();, +	}, +]