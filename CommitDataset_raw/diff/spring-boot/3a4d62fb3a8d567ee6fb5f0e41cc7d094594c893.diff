[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.CannotLoadBeanClassException;, +	static Log logger = LogFactory.getLog(BeanTypeRegistry.class);, +				addBeanTypeForNonAliasDefinition(name);, +			}, +		}, +, +		private void addBeanTypeForNonAliasDefinition(String name) {, +			try {, +			catch (CannotLoadBeanClassException ex) {, +				// Probably contains a placeholder, +				logIgnoredError("bean class loading failure for bean", name, ex);, +			}, +			catch (BeanDefinitionStoreException ex) {, +				// Probably contains a placeholder, +				logIgnoredError("unresolvable metadata in bean definition", name, ex);, +			}, +		}, +, +		private void logIgnoredError(String message, String name, Exception ex) {, +			if (BeanTypeRegistry.logger.isDebugEnabled()) {, +				BeanTypeRegistry.logger.debug("Ignoring " + message + " '" + name + "'",, +						ex);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.CannotLoadBeanClassException;, +	static Log logger = LogFactory.getLog(BeanTypeRegistry.class);, +				addBeanTypeForNonAliasDefinition(name);, +			}, +		}, +, +		private void addBeanTypeForNonAliasDefinition(String name) {, +			try {, +			catch (CannotLoadBeanClassException ex) {, +				// Probably contains a placeholder, +				logIgnoredError("bean class loading failure for bean", name, ex);, +			}, +			catch (BeanDefinitionStoreException ex) {, +				// Probably contains a placeholder, +				logIgnoredError("unresolvable metadata in bean definition", name, ex);, +			}, +		}, +, +		private void logIgnoredError(String message, String name, Exception ex) {, +			if (BeanTypeRegistry.logger.isDebugEnabled()) {, +				BeanTypeRegistry.logger.debug("Ignoring " + message + " '" + name + "'",, +						ex);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +import org.springframework.core.type.AnnotationMetadata;, +	@Test, +	public void withPropertyPlaceholderClassName() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context, "mybeanclass=java.lang.String");, +		this.context.register(PropertySourcesPlaceholderConfigurer.class,, +				WithPropertyPlaceholderClassName.class, OnBeanClassConfiguration.class);, +		this.context.refresh();, +	}, +, +, +	@Configuration, +	@Import(WithPropertyPlaceholderClassNameRegistrar.class), +	protected static class WithPropertyPlaceholderClassName {, +, +	}, +, +	protected static class WithPropertyPlaceholderClassNameRegistrar implements, +			ImportBeanDefinitionRegistrar {, +, +		@Override, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				BeanDefinitionRegistry registry) {, +			RootBeanDefinition bd = new RootBeanDefinition();, +			bd.setBeanClassName("${mybeanclass}");, +			registry.registerBeanDefinition("mybean", bd);, +		}, +, +	}, +]