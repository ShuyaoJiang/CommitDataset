[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointMvcAdapter.java, +	private String path;, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}, +		this.path = path;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointMvcAdapter.java, +	private String path;, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}, +		this.path = path;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	private String path;, +, +			return new ResponseEntity<Map<String, String>>(, +					Collections.singletonMap("message", "This endpoint is disabled"),, +					HttpStatus.NOT_FOUND);, +		return (principal != null, +				&& !principal.getClass().getName().contains("Anonymous"));, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}, +		this.path = path;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointMvcAdapter.java, +	private String path;, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}, +		this.path = path;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	private String path;, +, +			return new ResponseEntity<Map<String, String>>(, +					Collections.singletonMap("message", "This endpoint is disabled"),, +					HttpStatus.NOT_FOUND);, +		return (principal != null, +				&& !principal.getClass().getName().contains("Anonymous"));, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}, +		this.path = path;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpoints.java, +		Collection<Endpoint> delegates = BeanFactoryUtils, +				.beansOfTypeIncludingAncestors(this.applicationContext, Endpoint.class), +				.values();, +				EndpointMvcAdapter adapter = new EndpointMvcAdapter(endpoint);, +				String path = this.applicationContext.getEnvironment(), +						.getProperty("endpoints." + endpoint.getId() + ".path");, +				if (path != null) {, +					adapter.setPath(path);, +				}, +				this.endpoints.add(adapter);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointMvcAdapter.java, +	private String path;, +		return this.path != null ? this.path : "/" + this.delegate.getId();, +	}, +, +	public void setPath(String path) {, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		}, +		while (path.endsWith("/")) {, +			path = path.substring(0, path.length() - 1);, +		}]