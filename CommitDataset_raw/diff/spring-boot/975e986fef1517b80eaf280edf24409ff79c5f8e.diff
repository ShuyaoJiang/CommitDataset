[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +	 * Base class for supported request matchers., +	 */, +	private static abstract class AbstractRequestMatcher, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +, +		private volatile RequestMatcher delegate;, +, +		public AbstractRequestMatcher() {, +			super(WebApplicationContext.class);, +		}, +, +		@Override, +		protected final void initialized(Supplier<WebApplicationContext> context) {, +			this.delegate = createDelegate(context.get());, +		}, +, +		@Override, +		protected final boolean matches(HttpServletRequest request,, +				Supplier<WebApplicationContext> context) {, +			return this.delegate.matches(request);, +		}, +, +		private RequestMatcher createDelegate(WebApplicationContext context) {, +			try {, +				RequestMatcherFactory requestMatcherFactory = new RequestMatcherFactory(, +						context.getBean(DispatcherServletPathProvider.class), +								.getServletPath());, +				return createDelegate(context, requestMatcherFactory);, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return EMPTY_MATCHER;, +			}, +		}, +, +		protected abstract RequestMatcher createDelegate(WebApplicationContext context,, +				RequestMatcherFactory requestMatcherFactory);, +, +	}, +, +	/**, +	public static final class EndpointRequestMatcher extends AbstractRequestMatcher {, +		protected RequestMatcher createDelegate(WebApplicationContext context,, +				RequestMatcherFactory requestMatcherFactory) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(, +					requestMatcherFactory, paths);, +				delegateMatchers.add(, +						requestMatcherFactory.antPath(pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(, +				RequestMatcherFactory requestMatcherFactory, Set<String> paths) {, +					.map((path) -> requestMatcherFactory.antPath(path, "/**")), +	public static final class LinksRequestMatcher extends AbstractRequestMatcher {, +		protected RequestMatcher createDelegate(WebApplicationContext context,, +				RequestMatcherFactory requestMatcherFactory) {, +				return requestMatcherFactory.antPath(properties.getBasePath());, +	/**, +	 * Factory used to create a {@link RequestMatcher}., +	 */, +	private static class RequestMatcherFactory {, +, +		private final String servletPath;, +, +		RequestMatcherFactory(String servletPath) {, +			this.servletPath = servletPath;, +		}, +, +		public RequestMatcher antPath(String... parts) {, +			String pattern = (this.servletPath.equals("/") ? "" : this.servletPath);, +			for (String part : parts) {, +				pattern += part;, +			}, +			return new AntPathRequestMatcher(pattern);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +	 * Base class for supported request matchers., +	 */, +	private static abstract class AbstractRequestMatcher, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +, +		private volatile RequestMatcher delegate;, +, +		public AbstractRequestMatcher() {, +			super(WebApplicationContext.class);, +		}, +, +		@Override, +		protected final void initialized(Supplier<WebApplicationContext> context) {, +			this.delegate = createDelegate(context.get());, +		}, +, +		@Override, +		protected final boolean matches(HttpServletRequest request,, +				Supplier<WebApplicationContext> context) {, +			return this.delegate.matches(request);, +		}, +, +		private RequestMatcher createDelegate(WebApplicationContext context) {, +			try {, +				RequestMatcherFactory requestMatcherFactory = new RequestMatcherFactory(, +						context.getBean(DispatcherServletPathProvider.class), +								.getServletPath());]