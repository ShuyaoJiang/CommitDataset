[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;, +		@Bean, +		@ConditionalOnProperty(name = "management.metrics.binders.fds.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +		public FileDescriptorMetrics fileDescriptorMetrics() {, +			return new FileDescriptorMetrics();, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;, +		@Bean, +		@ConditionalOnProperty(name = "management.metrics.binders.fds.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +		public FileDescriptorMetrics fileDescriptorMetrics() {, +			return new FileDescriptorMetrics();, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;, +	@Test, +	public void autoConfiguresFileDescriptorMetrics() {, +		this.runner.run(, +				(context) -> assertThat(context), +						.hasSingleBean(FileDescriptorMetrics.class));, +	}, +, +	@Test, +	public void allowsFileDescriptorMetricsToBeDisabled() {, +		this.runner.withPropertyValues("management.metrics.binders.fds.enabled=false"), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(FileDescriptorMetrics.class));, +	}, +, +	@Test, +	public void allowsCustomFileDescriptorToBeUsed() {, +		this.runner.withUserConfiguration(CustomFileDescriptorMetricsConfiguration.class), +				.run((context) -> assertThat(context), +						.hasSingleBean(FileDescriptorMetrics.class), +						.hasBean("customFileDescriptorMetrics"));, +	}, +, +	@Configuration, +	static class CustomFileDescriptorMetricsConfiguration {, +, +		@Bean, +		FileDescriptorMetrics customFileDescriptorMetrics() {, +			return new FileDescriptorMetrics();, +		}, +, +	}, +]