[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +	private final MBeanServer server = ManagementFactory.getPlatformMBeanServer();, +			this.server.getObjectInstance(createDefaultObjectName());, +			ObjectInstance objectInstance = this.server.getObjectInstance(objectName);, +		this.contextRunner, +				.withSystemProperties(, +						this.server.getObjectInstance(createObjectName(customJmxName));, +					this.thrown.expect(InstanceNotFoundException.class); // Should not be, +																			// exposed, +					this.server.getObjectInstance(createDefaultObjectName());, +			assertThat(this.server.getAttribute(createDefaultObjectName(),, +		return (String) this.server.invoke(objectName, "getProperty",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +	private final MBeanServer server = ManagementFactory.getPlatformMBeanServer();, +			this.server.getObjectInstance(createDefaultObjectName());, +			ObjectInstance objectInstance = this.server.getObjectInstance(objectName);, +		this.contextRunner, +				.withSystemProperties(, +						this.server.getObjectInstance(createObjectName(customJmxName));, +					this.thrown.expect(InstanceNotFoundException.class); // Should not be, +																			// exposed, +					this.server.getObjectInstance(createDefaultObjectName());, +			assertThat(this.server.getAttribute(createDefaultObjectName(),, +		return (String) this.server.invoke(objectName, "getProperty",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.run((context) -> {, +					assertThat(rabbitTemplate.getConnectionFactory()), +							.isEqualTo(connectionFactory);, +					assertThat(messagingTemplate.getRabbitTemplate()), +							.isEqualTo(rabbitTemplate);, +					assertThat(dfa.getPropertyValue("publisherConfirms")), +							.isEqualTo(false);, +							.as("Listener container factory should be created by default"), +							.isTrue();, +						"spring.rabbitmq.connection-timeout:123"), +				.run((context) -> {, +						"spring.rabbitmq.publisher-returns=true"), +				.run(context -> {, +		this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class), +				.run((context) -> {, +						"spring.rabbitmq.template.replyTimeout:456"), +				.run((context) -> {, +		this.contextRunner.withUserConfiguration(TestConfiguration2.class), +				.run((context) -> {, +					assertThat(connectionFactory), +							.isEqualTo(rabbitTemplate.getConnectionFactory());, +						"spring.rabbitmq.cache.connection.size=2"), +				.run((context) -> {, +					assertThat(dfa.getPropertyValue("cacheMode")), +							.isEqualTo(CacheMode.CONNECTION);, +					assertThat(dfa.getPropertyValue("channelCheckoutTimeout")), +							.isEqualTo(1000L);, +		this.contextRunner.withUserConfiguration(TestConfiguration4.class), +				.run((context) -> {, +					assertThat(messagingTemplate.getDefaultDestination()), +							.isEqualTo("fooBar");, +					// There should NOT be an AmqpAdmin bean when dynamic is switch to, +					// false, +		this.contextRunner.withUserConfiguration(EnableRabbitConfiguration.class), +				.run((context) -> {, +		this.contextRunner.withUserConfiguration(TestConfiguration5.class), +				.run((context) -> {, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							rabbitListenerContainerFactory);, +		this.contextRunner, +				.withUserConfiguration(MessageConvertersConfiguration.class,, +						MessageRecoverersConfiguration.class), +				.withPropertyValues("spring.rabbitmq.listener.simple.retry.enabled:true",, +						"spring.rabbitmq.listener.simple.transactionSize:20"), +				.run((context) -> {, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							rabbitListenerContainerFactory);, +					assertThat(dfa.getPropertyValue("maxConcurrentConsumers")), +							.isEqualTo(10);, +		this.contextRunner, +				.withUserConfiguration(MessageConvertersConfiguration.class,, +						MessageRecoverersConfiguration.class), +				.withPropertyValues("spring.rabbitmq.listener.type:direct",, +						"spring.rabbitmq.listener.direct.idleEventInterval:5"), +				.run((context) -> {, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							rabbitListenerContainerFactory);, +						"spring.rabbitmq.listener.direct.prefetch:40"), +				.run((context) -> {, +						"spring.rabbitmq.listener.simple.prefetch:40"), +				.run((context) -> {, +							.getBean(, +									SimpleRabbitListenerContainerFactoryConfigurer.class);, +						"spring.rabbitmq.listener.direct.prefetch:40"), +				.run((context) -> {, +							.getBean(, +									DirectRabbitListenerContainerFactoryConfigurer.class);, +		this.contextRunner.withUserConfiguration(NoEnableRabbitConfiguration.class), +				.run((context) -> {, +					com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(, +							context);, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.run((context) -> {, +					com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(]