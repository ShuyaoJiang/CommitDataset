[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +			handler = new NoUnboundElementsBindHandler(handler,, +					annotation.ignoreNestedProperties());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +			handler = new NoUnboundElementsBindHandler(handler,, +					annotation.ignoreNestedProperties());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/handler/NoUnboundElementsBindHandler.java, +	private final boolean ignoreNested;, +, +		this.ignoreNested = false;, +	}, +, +	public NoUnboundElementsBindHandler(boolean ignoreNested) {, +		super();, +		this.ignoreNested = ignoreNested;, +		this.ignoreNested = false;, +	}, +, +	public NoUnboundElementsBindHandler(BindHandler parent, boolean ignoreNested) {, +		super(parent);, +		this.ignoreNested = ignoreNested;, +		boolean isParent = candidate.getParent() != null, +				&& name.equals(candidate.getParent());, +		boolean isAncestor = name.isAncestorOf(candidate);, +		return ((this.ignoreNested ? isParent : isAncestor), +				&& !this.boundNames.contains(candidate));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +			handler = new NoUnboundElementsBindHandler(handler,, +					annotation.ignoreNestedProperties());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/handler/NoUnboundElementsBindHandler.java, +	private final boolean ignoreNested;, +, +		this.ignoreNested = false;, +	}, +, +	public NoUnboundElementsBindHandler(boolean ignoreNested) {, +		super();, +		this.ignoreNested = ignoreNested;, +		this.ignoreNested = false;, +	}, +, +	public NoUnboundElementsBindHandler(BindHandler parent, boolean ignoreNested) {, +		super(parent);, +		this.ignoreNested = ignoreNested;, +		boolean isParent = candidate.getParent() != null, +				&& name.equals(candidate.getParent());, +		boolean isAncestor = name.isAncestorOf(candidate);, +		return ((this.ignoreNested ? isParent : isAncestor), +				&& !this.boundNames.contains(candidate));, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/handler/NoUnboundElementsBindHandlerTests.java, +	@Test, +	public void bindWhenUsingNoUnboundElementsHandlerIgnoreNestedAndUnboundChildShouldThrowException(), +			throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("example.foo", "bar");, +		source.put("example.baz", "bar");, +		this.sources.add(source);, +		this.binder = new Binder(this.sources);, +		try {, +			this.binder.bind("example", Bindable.of(Example.class),, +					new NoUnboundElementsBindHandler(true));, +			fail("did not throw");, +		}, +		catch (BindException ex) {, +			assertThat(ex.getCause().getMessage()), +					.contains("The elements [example.baz] were left unbound");, +		}, +	}, +, +	@Test, +	public void bindWhenUsingNoUnboundElementsHandlerIgnoreNestedAndUnboundGrandchildShouldBind(), +			throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("example.foo", "bar");, +		source.put("example.foo.baz", "bar");, +		this.sources.add(source);, +		this.binder = new Binder(this.sources);, +		this.binder.bind("example", Bindable.of(Example.class),, +				new NoUnboundElementsBindHandler(true));, +	}, +]