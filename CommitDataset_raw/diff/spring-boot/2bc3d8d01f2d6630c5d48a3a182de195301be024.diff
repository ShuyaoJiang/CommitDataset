[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +final class BindConverter {, +	private static BindConverter sharedInstance;, +, +	private BindConverter(ConversionService conversionService,, +	public static BindConverter get(ConversionService conversionService,, +			Consumer<PropertyEditorRegistry> propertyEditorInitializer) {, +		if (conversionService == ApplicationConversionService.getSharedInstance(), +				&& propertyEditorInitializer == null) {, +			BindConverter instance = sharedInstance;, +			if (instance == null) {, +				instance = new BindConverter(conversionService,, +						propertyEditorInitializer);, +				sharedInstance = instance;, +			}, +			return instance;, +		}, +		return new BindConverter(conversionService, propertyEditorInitializer);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +final class BindConverter {, +	private static BindConverter sharedInstance;, +, +	private BindConverter(ConversionService conversionService,, +	public static BindConverter get(ConversionService conversionService,, +			Consumer<PropertyEditorRegistry> propertyEditorInitializer) {, +		if (conversionService == ApplicationConversionService.getSharedInstance(), +				&& propertyEditorInitializer == null) {, +			BindConverter instance = sharedInstance;, +			if (instance == null) {, +				instance = new BindConverter(conversionService,, +						propertyEditorInitializer);, +				sharedInstance = instance;, +			}, +			return instance;, +		}, +		return new BindConverter(conversionService, propertyEditorInitializer);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +			this.converter = BindConverter.get(Binder.this.conversionService,, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +final class BindConverter {, +	private static BindConverter sharedInstance;, +, +	private BindConverter(ConversionService conversionService,, +	public static BindConverter get(ConversionService conversionService,, +			Consumer<PropertyEditorRegistry> propertyEditorInitializer) {, +		if (conversionService == ApplicationConversionService.getSharedInstance(), +				&& propertyEditorInitializer == null) {, +			BindConverter instance = sharedInstance;, +			if (instance == null) {, +				instance = new BindConverter(conversionService,, +						propertyEditorInitializer);, +				sharedInstance = instance;, +			}, +			return instance;, +		}, +		return new BindConverter(conversionService, propertyEditorInitializer);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +			this.converter = BindConverter.get(Binder.this.conversionService,, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BindConverterTests.java, +		BindConverter.get(null, null);, +		BindConverter.get(ApplicationConversionService.getSharedInstance(), null);, +		BindConverter.get(ApplicationConversionService.getSharedInstance(),, +		BindConverter bindConverter = BindConverter, +				.get(ApplicationConversionService.getSharedInstance(), null);, +		BindConverter bindConverter = BindConverter, +				.get(ApplicationConversionService.getSharedInstance(), null);, +		BindConverter bindConverter = BindConverter.get(new GenericConversionService(),, +		BindConverter bindConverter = BindConverter.get(new GenericConversionService(),, +		return BindConverter.get(new ThrowingConversionService(),, +		return BindConverter.get(conversionService, null);]