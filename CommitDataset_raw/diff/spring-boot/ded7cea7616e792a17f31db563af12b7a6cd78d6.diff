[+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Enumeration;, +	public URL findResource(String name) {, +		return null;, +	}, +, +	@Override, +	public Enumeration<URL> findResources(String name) throws IOException {, +		return Collections.emptyEnumeration();, +	}, +, +	@Override, +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedWebappClassLoader.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Enumeration;, +	public URL findResource(String name) {, +		return null;, +	}, +, +	@Override, +	public Enumeration<URL> findResources(String name) throws IOException {, +		return Collections.emptyEnumeration();, +	}, +, +	@Override, +++ b/spring-boot/src/test/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedWebappClassLoaderTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.web.embedded.tomcat;, +, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.jar.JarOutputStream;, +import java.util.zip.ZipEntry;, +, +import org.apache.catalina.core.StandardContext;, +import org.apache.catalina.loader.WebappClassLoader;, +import org.apache.catalina.webresources.StandardRoot;, +import org.apache.catalina.webresources.WarResourceSet;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import org.springframework.util.CollectionUtils;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link TomcatEmbeddedWebappClassLoader}., + *, + * @author Andy Wilkinson, + */, +public class TomcatEmbeddedWebappClassLoaderTests {, +, +	@Rule, +	public TemporaryFolder temp = new TemporaryFolder();, +, +	@Test, +	public void getResourceFindsResourceFromParentClassLoader() throws Exception {, +		File war = createWar();, +		withWebappClassLoader(war, (classLoader) -> {, +			assertThat(classLoader.getResource("test.txt")), +					.isEqualTo(new URL(webInfClassesUrlString(war) + "test.txt"));, +		});, +	}, +, +	@Test, +	public void getResourcesOnlyFindsResourcesFromParentClassLoader() throws Exception {, +		File warFile = createWar();, +		withWebappClassLoader(warFile, (classLoader) -> {, +			List<URL> urls = new ArrayList<>();, +			CollectionUtils.toIterator(classLoader.getResources("test.txt")), +					.forEachRemaining(urls::add);, +			assertThat(urls).containsExactly(, +					new URL(webInfClassesUrlString(warFile) + "test.txt"));, +		});, +	}]