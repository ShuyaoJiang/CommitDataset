[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, +		assertEquals(9000, server.getPort().intValue());, +		TestUtils.addEnviroment(this.context, "server.tomcat.basedir:target/foo",, +				"server.port:9000");, +		Mockito.verify(containerFactory).setPort(9000);, +	}, +, +	@Test, +	public void customizeWithContainerFactory() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(CustomContainerConfig.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		containerFactory = this.context, +				.getBean(ConfigurableEmbeddedServletContainerFactory.class);, +		ServerProperties server = this.context.getBean(ServerProperties.class);, +		assertNotNull(server);, +		// The server.port environment property was not explicitly set so the container, +		// factory should take precedence..., +		assertEquals(3000, containerFactory.getPort());, +	}, +, +	@Test, +	public void customizeTomcatWithCustomizer() throws Exception {, +		containerFactory = Mockito.mock(TomcatEmbeddedServletContainerFactory.class);, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(Config.class, CustomizeConfig.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		ServerProperties server = this.context.getBean(ServerProperties.class);, +		assertNotNull(server);, +		// The server.port environment property was not explicitly set so the container, +		// customizer should take precedence..., +		Mockito.verify(containerFactory).setPort(3000);, +	protected static class CustomContainerConfig {, +, +		@Bean, +		public EmbeddedServletContainerFactory containerFactory() {, +			JettyEmbeddedServletContainerFactory factory = new JettyEmbeddedServletContainerFactory();, +			factory.setPort(3000);, +			return factory;, +		}, +, +		@Bean, +		public EmbeddedServletContainerCustomizerBeanPostProcessor embeddedServletContainerCustomizerBeanPostProcessor() {, +			return new EmbeddedServletContainerCustomizerBeanPostProcessor();, +		}, +, +	}, +, +	@Configuration, +	protected static class CustomizeConfig {, +, +		@Bean, +		public EmbeddedServletContainerCustomizer containerCustomizer() {, +			return new EmbeddedServletContainerCustomizer() {, +, +				@Override, +				public void customize(ConfigurableEmbeddedServletContainerFactory factory) {, +					factory.setPort(3000);, +				}, +			};, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, +		assertEquals(9000, server.getPort().intValue());, +		TestUtils.addEnviroment(this.context, "server.tomcat.basedir:target/foo",, +				"server.port:9000");, +		Mockito.verify(containerFactory).setPort(9000);, +	}, +, +	@Test, +	public void customizeWithContainerFactory() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(CustomContainerConfig.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		containerFactory = this.context, +				.getBean(ConfigurableEmbeddedServletContainerFactory.class);, +		ServerProperties server = this.context.getBean(ServerProperties.class);, +		assertNotNull(server);, +		// The server.port environment property was not explicitly set so the container, +		// factory should take precedence..., +		assertEquals(3000, containerFactory.getPort());, +	}, +, +	@Test, +	public void customizeTomcatWithCustomizer() throws Exception {, +		containerFactory = Mockito.mock(TomcatEmbeddedServletContainerFactory.class);, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();]