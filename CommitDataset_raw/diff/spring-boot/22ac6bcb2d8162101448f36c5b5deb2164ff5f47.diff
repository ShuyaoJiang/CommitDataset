[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +	public SchedulingConfigurer metricWritersMetricExporter(, +			MetricExportProperties properties) {, +		MetricExporters exporters = new MetricExporters(properties);, +	@Configuration, +	static class StatsdConfiguration {, +, +		public StatsdMetricWriter statsdMetricWriter(MetricExportProperties properties) {, +			MetricExportProperties.Statsd statsdProperties = properties.getStatsd();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +	public SchedulingConfigurer metricWritersMetricExporter(, +			MetricExportProperties properties) {, +		MetricExporters exporters = new MetricExporters(properties);, +	@Configuration, +	static class StatsdConfiguration {, +, +		public StatsdMetricWriter statsdMetricWriter(MetricExportProperties properties) {, +			MetricExportProperties.Statsd statsdProperties = properties.getStatsd();, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfigurationTests.java, +import java.util.Map;, +, +import org.springframework.boot.actuate.metrics.writer.GaugeWriter;, +import org.springframework.scheduling.annotation.SchedulingConfigurer;, +import org.springframework.test.util.ReflectionTestUtils;, +	@SuppressWarnings("unchecked"), +		this.context.register(MetricEndpointConfiguration.class,, +		StatsdMetricWriter statsdWriter = this.context.getBean(StatsdMetricWriter.class);, +		assertThat(statsdWriter).isNotNull();, +		SchedulingConfigurer schedulingConfigurer = this.context, +				.getBean(SchedulingConfigurer.class);, +		Map<String, GaugeWriter> exporters = (Map<String, GaugeWriter>) ReflectionTestUtils, +				.getField(schedulingConfigurer, "writers");, +		assertThat(exporters).containsValue(statsdWriter);, +]