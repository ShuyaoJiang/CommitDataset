[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/TokenTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.function.Consumer;, +, +import static org.assertj.core.api.Assertions.assertThatExceptionOfType;, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token("invalid-token")), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(token)), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getSignatureAlgorithm()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getIssuer()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getKeyId()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getExpiry()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +	private Consumer<CloudFoundryAuthorizationException> reasonRequirement(, +			Reason reason) {, +		return (ex) -> assertThat(ex.getReason()).isEqualTo(reason);, +	}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/TokenTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.function.Consumer;, +, +import static org.assertj.core.api.Assertions.assertThatExceptionOfType;, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token("invalid-token")), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(token)), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getSignatureAlgorithm()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getIssuer()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getKeyId()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> token.getExpiry()), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +	private Consumer<CloudFoundryAuthorizationException> reasonRequirement(, +			Reason reason) {, +		return (ex) -> assertThat(ex.getReason()).isEqualTo(reason);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThatExceptionOfType;, +					assertThatExceptionOfType(RuntimeException.class), +							.isThrownBy(, +									webClient.get().uri("https://self-signed.badssl.com/"), +											.exchange()::block), +							.withCauseInstanceOf(SSLException.class);, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/TokenTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.function.Consumer;, +, +import static org.assertj.core.api.Assertions.assertThatExceptionOfType;, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token("invalid-token")), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class), +				.isThrownBy(() -> new Token(Base64Utils.encodeToString(header.getBytes()), +						+ "." + Base64Utils.encodeToString(claims.getBytes()))), +				.satisfies(reasonRequirement(Reason.INVALID_TOKEN));, +		assertThatExceptionOfType(CloudFoundryAuthorizationException.class)]