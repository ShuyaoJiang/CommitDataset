[+++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java, + * Copyright 2012-2013 the original author or authors., +		logger.info(event.getAuditEvent());, +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java, + * Copyright 2012-2013 the original author or authors., +		logger.info(event.getAuditEvent());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * <code>shell.auth.spring.roles</code>., + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java, + * Copyright 2012-2013 the original author or authors., +		logger.info(event.getAuditEvent());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * <code>shell.auth.spring.roles</code>., + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * <code>endpoints.jolokia.enabled: false</code> or <code>endpoints.enabled: false</code>., + * <code>jolokia.config.*</code> properties. See the <a, +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java, + * Copyright 2012-2013 the original author or authors., +		logger.info(event.getAuditEvent());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * <code>shell.auth.spring.roles</code>., + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * <code>endpoints.jolokia.enabled: false</code> or <code>endpoints.enabled: false</code>., + * <code>jolokia.config.*</code> properties. See the <a, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}"), +++ b/CONTRIBUTING.adoc, +  `eclipse-code-formatter.xml` file from the `eclipse` folder. If using IntelliJ, you can, +  use the http://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter Plugin], +++ b/pom.xml, +				<module>spring-boot-developer-tools</module>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java, + * Copyright 2012-2013 the original author or authors., +		logger.info(event.getAuditEvent());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * <code>shell.auth.spring.roles</code>., + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * <code>endpoints.jolokia.enabled: false</code> or <code>endpoints.enabled: false</code>., + * <code>jolokia.config.*</code> properties. See the <a, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>, + * or <code>CounterService</code>.]