[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, + * @author Alexander Abramov, +		/**, +		 * The minimum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> minimumExpectedValue = new LinkedHashMap<>();, +, +		/**, +		 * The maximum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> maximumExpectedValue = new LinkedHashMap<>();, +, +		public Map<String, ServiceLevelAgreementBoundary> getMinimumExpectedValue() {, +			return this.minimumExpectedValue;, +		}, +, +		public Map<String, ServiceLevelAgreementBoundary> getMaximumExpectedValue() {, +			return this.maximumExpectedValue;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, + * @author Alexander Abramov, +		/**, +		 * The minimum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> minimumExpectedValue = new LinkedHashMap<>();, +, +		/**, +		 * The maximum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> maximumExpectedValue = new LinkedHashMap<>();, +, +		public Map<String, ServiceLevelAgreementBoundary> getMinimumExpectedValue() {, +			return this.minimumExpectedValue;, +		}, +, +		public Map<String, ServiceLevelAgreementBoundary> getMaximumExpectedValue() {, +			return this.maximumExpectedValue;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, + * @author Alexander Abramov, +				.minimumExpectedValue(convertSla(id.getType(),, +						lookup(distribution.getMinimumExpectedValue(), id, null))), +				.maximumExpectedValue(convertSla(id.getType(),, +						lookup(distribution.getMaximumExpectedValue(), id, null))), +	private Long convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary sla) {, +		return (sla != null) ? sla.getValue(meterType) : null;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, + * @author Alexander Abramov, +		/**, +		 * The minimum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> minimumExpectedValue = new LinkedHashMap<>();, +, +		/**, +		 * The maximum value that this distribution summary is expected to observe., +		 * Controls the number of buckets shipped by percentilesHistogram. Can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private final Map<String, ServiceLevelAgreementBoundary> maximumExpectedValue = new LinkedHashMap<>();, +, +		public Map<String, ServiceLevelAgreementBoundary> getMinimumExpectedValue() {, +			return this.minimumExpectedValue;, +		}, +, +		public Map<String, ServiceLevelAgreementBoundary> getMaximumExpectedValue() {, +			return this.maximumExpectedValue;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, + * @author Alexander Abramov, +				.minimumExpectedValue(convertSla(id.getType(),, +						lookup(distribution.getMinimumExpectedValue(), id, null))), +				.maximumExpectedValue(convertSla(id.getType(),, +						lookup(distribution.getMaximumExpectedValue(), id, null))), +	private Long convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary sla) {, +		return (sla != null) ? sla.getValue(meterType) : null;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, +import java.time.Duration;]