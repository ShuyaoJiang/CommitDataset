[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		addProperySources(environment);, +		bindToSpringApplication(environment, application);, +	}, +, +	private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {, +		addPostProcessors(event.getApplicationContext());, +	}, +, +	/**, +	 * Add config file property sources to the specified environment., +	 * @param environment the environment to add source to, +	 * @see #addPostProcessors(ConfigurableApplicationContext), +	 */, +	protected void addProperySources(ConfigurableEnvironment environment) {, +	/**, +	 * Bind the environment to the {@link SpringApplication}., +	 * @param environment the environment to bind, +	 * @param application the application to bind to, +	 */, +	protected void bindToSpringApplication(ConfigurableEnvironment environment,, +			SpringApplication application) {, +	/**, +	 * Add appropriate post-processors to post-configure the property-sources., +	 * @param context the context to configure, +	 */, +	protected void addPostProcessors(ConfigurableApplicationContext context) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		addProperySources(environment);, +		bindToSpringApplication(environment, application);, +	}, +, +	private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {, +		addPostProcessors(event.getApplicationContext());, +	}, +, +	/**, +	 * Add config file property sources to the specified environment., +	 * @param environment the environment to add source to, +	 * @see #addPostProcessors(ConfigurableApplicationContext), +	 */, +	protected void addProperySources(ConfigurableEnvironment environment) {, +	/**, +	 * Bind the environment to the {@link SpringApplication}., +	 * @param environment the environment to bind, +	 * @param application the application to bind to, +	 */, +	protected void bindToSpringApplication(ConfigurableEnvironment environment,, +			SpringApplication application) {, +	/**, +	 * Add appropriate post-processors to post-configure the property-sources., +	 * @param context the context to configure, +	 */, +	protected void addPostProcessors(ConfigurableApplicationContext context) {, +++ b/spring-boot/src/main/java/org/springframework/boot/test/ConfigFileApplicationContextInitializer.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test;, +, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.test.context.ContextConfiguration;, +, +/**, + * {@link ApplicationContextInitializer} that can be used with the, + * {@link ContextConfiguration#initializers()} to trigger loading of, + * {@literal application.properties}., + * , + * @author Phillip Webb, + * @see ConfigFileApplicationListener, + */, +public class ConfigFileApplicationContextInitializer implements, +		ApplicationContextInitializer<ConfigurableApplicationContext> {, +, +	@Override, +	public void initialize(final ConfigurableApplicationContext applicationContext) {, +		new ConfigFileApplicationListener() {, +			public void apply() {, +				addProperySources(applicationContext.getEnvironment());, +				addPostProcessors(applicationContext);, +			}, +		}.apply();, +	}, +, +}]