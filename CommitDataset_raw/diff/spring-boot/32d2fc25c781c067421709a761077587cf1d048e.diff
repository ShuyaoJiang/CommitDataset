[+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractDependencyFilterMojo.java, +import org.apache.maven.shared.artifact.filter.collection.ArtifactsFilter;, +	 * Collection of artifact definitions to exclude. The {@link Exclude} element defines, +	 * a {@code groupId} and {@code artifactId} mandatory properties and an optional, +	 * {@code classifier} property., +	private String excludeGroupIds;, +	private String excludeArtifactIds;, +	protected Set<Artifact> filterDependencies(Set<Artifact> dependencies,, +			FilterArtifacts filters) throws MojoExecutionException {, +	/**, +	 * Return artifact filters configured for this MOJO., +	 * @param additionalFilters optional additional filters to apply, +	 * @return the filters, +	 */, +	protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {, +		FilterArtifacts filters = new FilterArtifacts();, +		for (ArtifactsFilter additionalFilter : additionalFilters) {, +			filters.addFilter(additionalFilter);, +		}, +		filters.addFilter(new ArtifactIdFilter("",, +				cleanFilterConfig(this.excludeArtifactIds)));, +		filters.addFilter(new GroupIdFilter("", cleanFilterConfig(this.excludeGroupIds)));, +		return filters;, +	private String cleanFilterConfig(String content) {, +		StringBuilder cleaned = new StringBuilder();, +		StringTokenizer tokenizer = new StringTokenizer(content, ",");, +		while (tokenizer.hasMoreElements()) {, +			cleaned.append(tokenizer.nextToken().trim());, +			if (tokenizer.hasMoreElements()) {, +				cleaned.append(",");, +		return cleaned.toString();, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractDependencyFilterMojo.java, +import org.apache.maven.shared.artifact.filter.collection.ArtifactsFilter;, +	 * Collection of artifact definitions to exclude. The {@link Exclude} element defines, +	 * a {@code groupId} and {@code artifactId} mandatory properties and an optional, +	 * {@code classifier} property., +	private String excludeGroupIds;, +	private String excludeArtifactIds;, +	protected Set<Artifact> filterDependencies(Set<Artifact> dependencies,, +			FilterArtifacts filters) throws MojoExecutionException {, +	/**, +	 * Return artifact filters configured for this MOJO., +	 * @param additionalFilters optional additional filters to apply, +	 * @return the filters, +	 */, +	protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {, +		FilterArtifacts filters = new FilterArtifacts();, +		for (ArtifactsFilter additionalFilter : additionalFilters) {, +			filters.addFilter(additionalFilter);, +		}, +		filters.addFilter(new ArtifactIdFilter("",, +				cleanFilterConfig(this.excludeArtifactIds)));, +		filters.addFilter(new GroupIdFilter("", cleanFilterConfig(this.excludeGroupIds)));, +		return filters;, +	private String cleanFilterConfig(String content) {, +		StringBuilder cleaned = new StringBuilder();, +		StringTokenizer tokenizer = new StringTokenizer(content, ",");, +		while (tokenizer.hasMoreElements()) {, +			cleaned.append(tokenizer.nextToken().trim());, +			if (tokenizer.hasMoreElements()) {, +				cleaned.append(",");, +		return cleaned.toString();, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/Exclude.java, +		return this.groupId;, +		return this.artifactId;, +		return this.classifier;, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractDependencyFilterMojo.java, +import org.apache.maven.shared.artifact.filter.collection.ArtifactsFilter;, +	 * Collection of artifact definitions to exclude. The {@link Exclude} element defines, +	 * a {@code groupId} and {@code artifactId} mandatory properties and an optional, +	 * {@code classifier} property., +	private String excludeGroupIds;, +	private String excludeArtifactIds;, +	protected Set<Artifact> filterDependencies(Set<Artifact> dependencies,, +			FilterArtifacts filters) throws MojoExecutionException {, +	/**, +	 * Return artifact filters configured for this MOJO., +	 * @param additionalFilters optional additional filters to apply, +	 * @return the filters, +	 */, +	protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {, +		FilterArtifacts filters = new FilterArtifacts();, +		for (ArtifactsFilter additionalFilter : additionalFilters) {, +			filters.addFilter(additionalFilter);, +		}, +		filters.addFilter(new ArtifactIdFilter("",, +				cleanFilterConfig(this.excludeArtifactIds)));, +		filters.addFilter(new GroupIdFilter("", cleanFilterConfig(this.excludeGroupIds)));, +		return filters;, +	private String cleanFilterConfig(String content) {, +		StringBuilder cleaned = new StringBuilder();, +		StringTokenizer tokenizer = new StringTokenizer(content, ",");, +		while (tokenizer.hasMoreElements()) {, +			cleaned.append(tokenizer.nextToken().trim());, +			if (tokenizer.hasMoreElements()) {, +				cleaned.append(",");, +		return cleaned.toString();, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/Exclude.java, +		return this.groupId;, +		return this.artifactId;]