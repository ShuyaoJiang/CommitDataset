[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.boot.context.logging.LoggingApplicationListener;, +@Order(LoggingApplicationListener.DEFAULT_ORDER + 1), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.boot.context.logging.LoggingApplicationListener;, +@Order(LoggingApplicationListener.DEFAULT_ORDER + 1), +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.context.logging.LoggingApplicationListener;, +		listeners.add(new LoggingApplicationListener());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.boot.context.logging.LoggingApplicationListener;, +@Order(LoggingApplicationListener.DEFAULT_ORDER + 1), +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.context.logging.LoggingApplicationListener;, +		listeners.add(new LoggingApplicationListener());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/ClasspathLoggingApplicationListener.java, + * Copyright 2012-2017 the original author or authors., +	private static final int ORDER = LoggingApplicationListener.DEFAULT_ORDER + 1;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.boot.context.logging.LoggingApplicationListener;, +@Order(LoggingApplicationListener.DEFAULT_ORDER + 1), +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.context.logging.LoggingApplicationListener;, +		listeners.add(new LoggingApplicationListener());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/ClasspathLoggingApplicationListener.java, + * Copyright 2012-2017 the original author or authors., +	private static final int ORDER = LoggingApplicationListener.DEFAULT_ORDER + 1;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.logging;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.boot.context.event.ApplicationStartingEvent;, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.logging.LogFile;, +import org.springframework.boot.logging.LogLevel;, +import org.springframework.boot.logging.LoggingInitializationContext;, +import org.springframework.boot.logging.LoggingSystem;, +import org.springframework.boot.logging.LoggingSystemProperties;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextClosedEvent;, +import org.springframework.context.event.GenericApplicationListener;, +import org.springframework.core.Ordered;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.Environment;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ResourceUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * An {@link ApplicationListener} that configures the {@link LoggingSystem}. If the, + * environment contains a {@code logging.config} property it will be used to bootstrap the, + * logging system, otherwise a default configuration is used. Regardless, logging levels, + * will be customized if the environment contains {@code logging.level.*} entries., + * <p>, + * Debug and trace logging for Spring, Tomcat, Jetty and Hibernate will be enabled when, + * the environment contains {@code debug} or {@code trace} properties that aren't set to, + * {@code "false"} (i.e. if you start your application using, + * {@literal java -jar myapp.jar [--debug | --trace]}). If you prefer to ignore these, + * properties you can set {@link #setParseArgs(boolean) parseArgs} to {@code false}., + * <p>, + * By default, log output is only written to the console. If a log file is required the, + * {@code logging.path} and {@code logging.file} properties can be used., + * <p>, + * Some system properties may be set as side effects, and these can be useful if the]