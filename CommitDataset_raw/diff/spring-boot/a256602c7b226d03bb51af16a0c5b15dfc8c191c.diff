[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +		Assert.state(endpoint != null,, +				() -> "Invalid extension '" + beanType.getName(), +						+ "': no endpoint found with type '" + endpointClass.getName(), +						+ "'");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +		Assert.state(endpoint != null,, +				() -> "Invalid extension '" + beanType.getName(), +						+ "': no endpoint found with type '" + endpointClass.getName(), +						+ "'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +		LettuceClientConfiguration clientConfig = getLettuceClientConfiguration(, +				clientResources, this.properties.getLettuce().getPool());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +		Assert.state(endpoint != null,, +				() -> "Invalid extension '" + beanType.getName(), +						+ "': no endpoint found with type '" + endpointClass.getName(), +						+ "'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +		LettuceClientConfiguration clientConfig = getLettuceClientConfiguration(, +				clientResources, this.properties.getLettuce().getPool());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@ConditionalOnClass({ AuthenticationManager.class, EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +		Assert.state(endpoint != null,, +				() -> "Invalid extension '" + beanType.getName(), +						+ "': no endpoint found with type '" + endpointClass.getName(), +						+ "'");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +		LettuceClientConfiguration clientConfig = getLettuceClientConfiguration(, +				clientResources, this.properties.getLettuce().getPool());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@ConditionalOnClass({ AuthenticationManager.class, EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +		String providerId = (configuredProviderId == null ? registrationId, +				: configuredProviderId);, +			throw new IllegalStateException(, +					getErrorMessage(configuredProviderId, registrationId));, +	private static String getErrorMessage(String configuredProviderId,, +			String registrationId) {, +		return (configuredProviderId == null, +				? "Provider ID must be specified for client registration '", +						+ registrationId + "'", +				: "Unknown provider ID '" + configuredProviderId + "'");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes,, +					getCorsConfiguration(), getSecurityInterceptor(builder, environment));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb(), +			throws Exception {, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping, +				.getEndpoints();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +		Assert.state(endpoint != null,, +				() -> "Invalid extension '" + beanType.getName(), +						+ "': no endpoint found with type '" + endpointClass.getName(), +						+ "'");]