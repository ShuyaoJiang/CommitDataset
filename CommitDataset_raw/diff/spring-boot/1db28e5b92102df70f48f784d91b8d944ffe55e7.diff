[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +	// In case security auto configuration hasn't been included, +	@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties"), +	@ConditionalOnMissingBean, +	public SecurityProperties securityProperties() {, +		return new SecurityProperties();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +	// In case security auto configuration hasn't been included, +	@Bean(name = "org.springframework.autoconfigure.security.SecurityProperties"), +	@ConditionalOnMissingBean, +	public SecurityProperties securityProperties() {, +		return new SecurityProperties();, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		this.context.register(TestConfiguration.class, SecurityAutoConfiguration.class,, +				ManagementSecurityAutoConfiguration.class,, +				EndpointAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(this.context.getBean(TestConfiguration.class).authenticationManager,, +				this.context.getBean(AuthenticationManager.class));, +	}, +	@Test, +	public void testSecurityPropertiesNotAvailable() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(TestConfiguration.class,, +				ManagementSecurityAutoConfiguration.class,]