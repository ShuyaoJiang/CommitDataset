[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(CouchbaseHealthIndicator.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(CouchbaseHealthIndicator.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase., +	 * Determine if Couchbase should be configured. This happens if either the, +	 * user-configuration defines a couchbase configuration or if at least the bucket name, +	 * is specified., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(CouchbaseHealthIndicator.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase., +	 * Determine if Couchbase should be configured. This happens if either the, +	 * user-configuration defines a couchbase configuration or if at least the bucket name, +	 * is specified., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +	 * Automatically create views and indexes. Use the meta-data provided by, +	 * "@ViewIndexed", "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed"., +	private List<String> bootstrapHosts = new ArrayList<String>(, +			Collections.singletonList("localhost"));, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(CouchbaseHealthIndicator.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase., +	 * Determine if Couchbase should be configured. This happens if either the, +	 * user-configuration defines a couchbase configuration or if at least the bucket name, +	 * is specified., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +	 * Automatically create views and indexes. Use the meta-data provided by, +	 * "@ViewIndexed", "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed"., +	private List<String> bootstrapHosts = new ArrayList<String>(, +			Collections.singletonList("localhost"));, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesRegistrar.java, +public class CouchbaseRepositoriesRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +		List<Version> versions = this.couchbaseOperations.getCouchbaseClusterInfo(), +				.getAllVersions();, +		builder.up().withDetail("versions",, +				StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(CouchbaseHealthIndicator.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-Configuration} for Couchbase., +	 * Determine if Couchbase should be configured. This happens if either the, +	 * user-configuration defines a couchbase configuration or if at least the bucket name, +	 * is specified., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +	 * Automatically create views and indexes. Use the meta-data provided by, +	 * "@ViewIndexed", "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed"., +	private List<String> bootstrapHosts = new ArrayList<String>(, +			Collections.singletonList("localhost"));, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesRegistrar.java, +public class CouchbaseRepositoriesRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {]