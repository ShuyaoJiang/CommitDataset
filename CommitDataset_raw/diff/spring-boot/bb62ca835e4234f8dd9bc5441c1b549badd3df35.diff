[+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/RunCommand.java, +import java.util.ArrayList;, + * {@link Command} to 'run' a groovy script or scripts., + * @author Dave Syer, + * , +		return "[options] <files> [--] [args]";, +		File[] files = getFileArguments(nonOptionArguments);, +		List<String> args = nonOptionArguments.subList(files.length,, +				nonOptionArguments.size());, +			Desktop.getDesktop().edit(files[0]);, +		this.runner = new BootstrapRunner(configuration, files,, +	private File[] getFileArguments(List<String> nonOptionArguments) {, +		List<File> files = new ArrayList<File>();, +		for (String filename : nonOptionArguments) {, +			if ("--".equals(filename)) {, +				break;, +			}, +			// TODO: add support for strict Java compilation, +			// TODO: add support for recursive search in directory, +			if (filename.endsWith(".groovy") || filename.endsWith(".java")) {, +				File file = new File(filename);, +				if (file.isFile() && file.canRead()) {, +					files.add(file);, +				}, +			}, +		}, +		if (files.size() == 0) {, +		return files.toArray(new File[files.size()]);, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/RunCommand.java, +import java.util.ArrayList;, + * {@link Command} to 'run' a groovy script or scripts., + * @author Dave Syer, + * , +		return "[options] <files> [--] [args]";, +		File[] files = getFileArguments(nonOptionArguments);, +		List<String> args = nonOptionArguments.subList(files.length,, +				nonOptionArguments.size());, +			Desktop.getDesktop().edit(files[0]);, +		this.runner = new BootstrapRunner(configuration, files,, +	private File[] getFileArguments(List<String> nonOptionArguments) {, +		List<File> files = new ArrayList<File>();, +		for (String filename : nonOptionArguments) {, +			if ("--".equals(filename)) {, +				break;, +			}, +			// TODO: add support for strict Java compilation, +			// TODO: add support for recursive search in directory, +			if (filename.endsWith(".groovy") || filename.endsWith(".java")) {, +				File file = new File(filename);, +				if (file.isFile() && file.canRead()) {, +					files.add(file);, +				}, +			}, +		}, +		if (files.size() == 0) {, +		return files.toArray(new File[files.size()]);, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/ExtendedGroovyClassLoader.java, + * @author Dave Syer, +	private CompilerConfiguration configuration;, +		this.configuration = config;, +	public CompilerConfiguration getConfiguration() {, +		return this.configuration;, +	}, +, +	public ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/RunCommand.java, +import java.util.ArrayList;, + * {@link Command} to 'run' a groovy script or scripts., + * @author Dave Syer, + * , +		return "[options] <files> [--] [args]";, +		File[] files = getFileArguments(nonOptionArguments);, +		List<String> args = nonOptionArguments.subList(files.length,, +				nonOptionArguments.size());, +			Desktop.getDesktop().edit(files[0]);, +		this.runner = new BootstrapRunner(configuration, files,, +	private File[] getFileArguments(List<String> nonOptionArguments) {, +		List<File> files = new ArrayList<File>();, +		for (String filename : nonOptionArguments) {, +			if ("--".equals(filename)) {, +				break;, +			}, +			// TODO: add support for strict Java compilation, +			// TODO: add support for recursive search in directory, +			if (filename.endsWith(".groovy") || filename.endsWith(".java")) {, +				File file = new File(filename);, +				if (file.isFile() && file.canRead()) {, +					files.add(file);, +				}, +			}, +		}, +		if (files.size() == 0) {, +		return files.toArray(new File[files.size()]);, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/ExtendedGroovyClassLoader.java, + * @author Dave Syer, +	private CompilerConfiguration configuration;, +		this.configuration = config;, +	public CompilerConfiguration getConfiguration() {, +		return this.configuration;, +	}]