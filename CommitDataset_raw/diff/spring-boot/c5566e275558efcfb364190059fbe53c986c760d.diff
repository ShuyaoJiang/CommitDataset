[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			List<String> excluded = new ArrayList<String>();, +			excluded.addAll(Arrays.asList(attributes.getStringArray("exclude")));, +			excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")));, +			factories.removeAll(excluded);, +			ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			List<String> excluded = new ArrayList<String>();, +			excluded.addAll(Arrays.asList(attributes.getStringArray("exclude")));, +			excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")));, +			factories.removeAll(excluded);, +			ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +import org.springframework.boot.autoconfigure.velocity.VelocityAutoConfiguration;, +import static org.hamcrest.Matchers.containsInAnyOrder;, + * @author Stephane Nicoll, +		configureExclusions(new String[0], new String[0]);, +	public void classExclusionsAreApplied() {, +		configureExclusions(new String[]{FreeMarkerAutoConfiguration.class.getName()}, new String[0]);, +	@Test, +	public void classNamesExclusionsAreApplied() {, +		configureExclusions(new String[0], new String[]{VelocityAutoConfiguration.class.getName()});, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports.length,, +				is(equalTo(getAutoConfigurationClassNames().size() - 1)));, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions(),, +				contains(VelocityAutoConfiguration.class.getName()));, +	}, +, +	@Test, +	public void bothExclusionsAreApplied() {, +		configureExclusions(new String[]{VelocityAutoConfiguration.class.getName()},, +				new String[]{FreeMarkerAutoConfiguration.class.getName()});, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports.length,, +				is(equalTo(getAutoConfigurationClassNames().size() - 2)));, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions(),, +				containsInAnyOrder(FreeMarkerAutoConfiguration.class.getName(),, +						VelocityAutoConfiguration.class.getName()));, +	}, +, +	private void configureExclusions(String[] classExclusion, String[] nameExclusion) {, +		given(this.annotationAttributes.getStringArray("exclude")).willReturn(classExclusion);, +		given(this.annotationAttributes.getStringArray("excludeName")).willReturn(nameExclusion);]