[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * @author Dave Syer, +@EnableConfigurationProperties(FreeMarkerProperties.class), +public class FreeMarkerAutoConfiguration {, +	@Autowired, +	private FreeMarkerProperties properties;, +		if (this.properties.isCheckTemplateLocation()) {, +			Resource resource = this.resourceLoader, +					.getResource(this.properties.getPath());, +	protected static class FreeMarkerConfiguration {, +		@Autowired, +		protected FreeMarkerProperties properties;, +			factory.setTemplateLoaderPath(this.properties.getPath());, +			factory.setDefaultEncoding(this.properties.getCharSet());, +			settings.putAll(this.properties.getSettings());, +			resolver.setPrefix(this.properties.getPrefix());, +			resolver.setSuffix(this.properties.getSuffix());, +			resolver.setCache(this.properties.isCache());, +			resolver.setContentType(this.properties.getContentType());, +			resolver.setViewNames(this.properties.getViewNames());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeRequestAttributes());, +			resolver.setExposeRequestAttributes(this.properties.isAllowRequestOverride());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeSessionAttributes());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeSpringMacroHelpers());, +			resolver.setRequestContextAttribute(this.properties, +					.getRequestContextAttribute());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * @author Dave Syer, +@EnableConfigurationProperties(FreeMarkerProperties.class), +public class FreeMarkerAutoConfiguration {, +	@Autowired, +	private FreeMarkerProperties properties;, +		if (this.properties.isCheckTemplateLocation()) {, +			Resource resource = this.resourceLoader, +					.getResource(this.properties.getPath());, +	protected static class FreeMarkerConfiguration {, +		@Autowired, +		protected FreeMarkerProperties properties;, +			factory.setTemplateLoaderPath(this.properties.getPath());, +			factory.setDefaultEncoding(this.properties.getCharSet());, +			settings.putAll(this.properties.getSettings());, +			resolver.setPrefix(this.properties.getPrefix());, +			resolver.setSuffix(this.properties.getSuffix());, +			resolver.setCache(this.properties.isCache());, +			resolver.setContentType(this.properties.getContentType());, +			resolver.setViewNames(this.properties.getViewNames());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeRequestAttributes());, +			resolver.setExposeRequestAttributes(this.properties.isAllowRequestOverride());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeSessionAttributes());, +			resolver.setExposeRequestAttributes(this.properties, +					.isExposeSpringMacroHelpers());, +			resolver.setRequestContextAttribute(this.properties, +					.getRequestContextAttribute());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerProperties.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.freemarker;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +, +/**, + * @author Dave Syer, + * , + * @since 1.1.0, + */, +@ConfigurationProperties(prefix = "spring.freemarker"), +public class FreeMarkerProperties {, +, +	public static final String DEFAULT_TEMPLATE_LOADER_PATH = "classpath:/templates/";, +, +	public static final String DEFAULT_PREFIX = "";, +, +	public static final String DEFAULT_SUFFIX = ".ftl";, +, +	private String prefix = DEFAULT_PREFIX;, +]