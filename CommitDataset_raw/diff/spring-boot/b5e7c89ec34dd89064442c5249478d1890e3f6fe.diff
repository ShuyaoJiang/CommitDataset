[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +	 * Convenience method to {@link #setDispatcherTypes(EnumSet) set dispatcher types}, +	 * using the specified elements., +	 */, +	public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {, +		this.dispatcherTypes = EnumSet.of(first, rest);, +	}, +, +	/**, +	 * Sets the dispatcher types that should be used with the registration. If not, +	 * specified the types will be deduced based on the value of, +	 * {@link #isAsyncSupported()}., +	 */, +	public void setDispatcherTypes(EnumSet<DispatcherType> dispatcherTypes) {, +		this.dispatcherTypes = dispatcherTypes;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +	 * Convenience method to {@link #setDispatcherTypes(EnumSet) set dispatcher types}, +	 * using the specified elements., +	 */, +	public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {, +		this.dispatcherTypes = EnumSet.of(first, rest);, +	}, +, +	/**, +	 * Sets the dispatcher types that should be used with the registration. If not, +	 * specified the types will be deduced based on the value of, +	 * {@link #isAsyncSupported()}., +	 */, +	public void setDispatcherTypes(EnumSet<DispatcherType> dispatcherTypes) {, +		this.dispatcherTypes = dispatcherTypes;, +	}, +, +	/**, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/FilterRegistrationBeanTests.java, +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +	@Test, +	public void withSpecificDispatcherTypes() throws Exception {, +		FilterRegistrationBean bean = new FilterRegistrationBean(this.filter);, +		bean.setDispatcherTypes(DispatcherType.INCLUDE, DispatcherType.FORWARD);, +		bean.onStartup(this.servletContext);, +		verify(this.registration).addMappingForUrlPatterns(, +				EnumSet.of(DispatcherType.INCLUDE, DispatcherType.FORWARD), false, "/*");, +	}, +, +	@Test, +	public void withSpecificDispatcherTypesEnumSet() throws Exception {, +		FilterRegistrationBean bean = new FilterRegistrationBean(this.filter);, +		EnumSet<DispatcherType> types = EnumSet.of(DispatcherType.INCLUDE,, +				DispatcherType.FORWARD);, +		bean.setDispatcherTypes(types);, +		bean.onStartup(this.servletContext);, +		verify(this.registration).addMappingForUrlPatterns(types, false, "/*");, +	}, +]