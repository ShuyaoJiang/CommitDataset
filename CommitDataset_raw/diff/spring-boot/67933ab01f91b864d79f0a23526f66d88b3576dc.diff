[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.transaction.PlatformTransactionManager;, +	private PlatformTransactionManager transactionManager;, +			ConnectionFactory connectionFactory, RabbitProperties config) {, +		if (this.transactionManager != null, +				&& config.getListener().isUseTransactionManager()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.transaction.PlatformTransactionManager;, +	private PlatformTransactionManager transactionManager;, +			ConnectionFactory connectionFactory, RabbitProperties config) {, +		if (this.transactionManager != null, +				&& config.getListener().isUseTransactionManager()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +	public RabbitTemplate rabbitTemplate(RabbitProperties config) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.transaction.PlatformTransactionManager;, +	private PlatformTransactionManager transactionManager;, +			ConnectionFactory connectionFactory, RabbitProperties config) {, +		if (this.transactionManager != null, +				&& config.getListener().isUseTransactionManager()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +	public RabbitTemplate rabbitTemplate(RabbitProperties config) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +	private Listener listener = new Listener();, +, +	public Listener getListener() {, +		return this.listener;, +	}, +, +	public static class Listener {, +		private boolean useTransactionManager = false;, +, +		public boolean isUseTransactionManager() {, +			return this.useTransactionManager;, +		}, +, +		public void setUseTransactionManager(boolean useTransactionManager) {, +			this.useTransactionManager = useTransactionManager;, +		}, +	}, +]