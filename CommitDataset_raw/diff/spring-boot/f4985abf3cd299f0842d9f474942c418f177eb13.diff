[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.FactoryBean;, + * @author Andy Wilkinson, +	private static final String FACTORY_BEAN_OBJECT_TYPE = "factoryBeanObjectType";, +, +		Set<String> beans = new LinkedHashSet<String>(, +		for (String beanName : beanFactory.getBeanNamesForType(FactoryBean.class)) {, +			beanName = BeanFactoryUtils.transformedBeanName(beanName);, +			BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);, +			if (type.getName(), +					.equals(beanDefinition.getAttribute(FACTORY_BEAN_OBJECT_TYPE))) {, +				beans.add(beanName);, +			}, +		}, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.FactoryBean;, + * @author Andy Wilkinson, +	private static final String FACTORY_BEAN_OBJECT_TYPE = "factoryBeanObjectType";, +, +		Set<String> beans = new LinkedHashSet<String>(, +		for (String beanName : beanFactory.getBeanNamesForType(FactoryBean.class)) {, +			beanName = BeanFactoryUtils.transformedBeanName(beanName);, +			BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);, +			if (type.getName(), +					.equals(beanDefinition.getAttribute(FACTORY_BEAN_OBJECT_TYPE))) {, +				beans.add(beanName);, +			}, +		}, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessorTests.java, +import org.mockito.internal.util.MockUtil;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import static org.assertj.core.api.Assertions.assertThat;, +, + * @author Andy Wilkinson, +	@Test, +	public void canMockBeanProducedByFactoryBeanWithObjectTypeAttribute() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		MockitoPostProcessor.register(context);, +		RootBeanDefinition factoryBeanDefinition = new RootBeanDefinition(, +				TestFactoryBean.class);, +		factoryBeanDefinition.setAttribute("factoryBeanObjectType",, +				SomeInterface.class.getName());, +		context.registerBeanDefinition("beanToBeMocked", factoryBeanDefinition);, +		context.register(MockedFactoryBean.class);, +		context.refresh();, +		assertThat(new MockUtil().isMock(context.getBean("beanToBeMocked"))).isTrue();, +	}, +, +	@Configuration, +	@MockBean(SomeInterface.class), +	static class MockedFactoryBean {, +, +		@Bean, +		public TestFactoryBean testFactoryBean() {, +			return new TestFactoryBean();, +		}, +, +	}, +, +	static class TestFactoryBean implements FactoryBean<Object> {, +, +		@Override, +		public Object getObject() throws Exception {, +			return new TestBean();, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return null;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return true;, +		}, +, +	}, +, +	interface SomeInterface {, +, +	}, +, +	static class TestBean implements SomeInterface {, +, +	}, +]