[+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void testHealth() throws Exception {, +		String url = "http://localhost:" + this.port + "/bootapp/actuator/health";, +		System.out.println(url);, +		ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url,, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +	}, +, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void testHealth() throws Exception {, +		String url = "http://localhost:" + this.port + "/bootapp/actuator/health";, +		System.out.println(url);, +		ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url,, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +	}, +, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void testHealth() throws Exception {, +		String url = "http://localhost:" + this.port + "/bootapp/actuator/health";, +		System.out.println(url);, +		ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url,, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +	}, +, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void testHealth() throws Exception {, +		String url = "http://localhost:" + this.port + "/bootapp/actuator/health";, +		System.out.println(url);, +		ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url,, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +	}, +, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void testHealth() throws Exception {, +		String url = "http://localhost:" + this.port + "/bootapp/actuator/health";, +		System.out.println(url);, +		ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url,, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +	}, +, +++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/pom.xml, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-actuator</artifactId>, +		</dependency>, +		<dependency>]