[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static final String[] NO_PATHS = new String[0];, +, +	@ConditionalOnExpression("${security.management.enabled:true}"), +		@Autowired(required = false), +		private EndpointHandlerMapping endpointHandlerMapping;, +, +			if (!this.security.getManagement().isEnabled()) {, +				ignored.addAll(Arrays.asList(getEndpointPaths(, +						this.endpointHandlerMapping, true)));, +			}, +			// secure endpoints, +			String[] paths = getEndpointPaths(this.endpointHandlerMapping, true);, +			ignoring.antMatchers(getEndpointPaths(this.endpointHandlerMapping, false));, +		public AuthenticationManager authenticationManager(, +				ObjectPostProcessor<Object> objectPostProcessor) throws Exception {, +	private static String[] getEndpointPaths(, +			EndpointHandlerMapping endpointHandlerMapping, boolean secure) {, +		if (endpointHandlerMapping == null) {, +			return NO_PATHS;, +		}, +, +		List<Endpoint<?>> endpoints = endpointHandlerMapping.getEndpoints();, +		List<String> paths = new ArrayList<String>(endpoints.size());, +		for (Endpoint<?> endpoint : endpoints) {, +			if (endpoint.isSensitive() == secure) {, +				paths.add(endpoint.getPath());, +			}, +		}, +		return paths.toArray(new String[paths.size()]);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static final String[] NO_PATHS = new String[0];, +, +	@ConditionalOnExpression("${security.management.enabled:true}"), +		@Autowired(required = false), +		private EndpointHandlerMapping endpointHandlerMapping;, +, +			if (!this.security.getManagement().isEnabled()) {, +				ignored.addAll(Arrays.asList(getEndpointPaths(, +						this.endpointHandlerMapping, true)));, +			}, +			// secure endpoints, +			String[] paths = getEndpointPaths(this.endpointHandlerMapping, true);, +			ignoring.antMatchers(getEndpointPaths(this.endpointHandlerMapping, false));, +		public AuthenticationManager authenticationManager(, +				ObjectPostProcessor<Object> objectPostProcessor) throws Exception {, +	private static String[] getEndpointPaths(, +			EndpointHandlerMapping endpointHandlerMapping, boolean secure) {, +		if (endpointHandlerMapping == null) {, +			return NO_PATHS;, +		}, +, +		List<Endpoint<?>> endpoints = endpointHandlerMapping.getEndpoints();, +		List<String> paths = new ArrayList<String>(endpoints.size());, +		for (Endpoint<?> endpoint : endpoints) {, +			if (endpoint.isSensitive() == secure) {, +				paths.add(endpoint.getPath());, +			}, +		}, +		return paths.toArray(new String[paths.size()]);, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/logback.xml, +	<!-- logger name="org.springframework.security" level="DEBUG"/-->, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static final String[] NO_PATHS = new String[0];, +, +	@ConditionalOnExpression("${security.management.enabled:true}"), +		@Autowired(required = false), +		private EndpointHandlerMapping endpointHandlerMapping;, +, +			if (!this.security.getManagement().isEnabled()) {, +				ignored.addAll(Arrays.asList(getEndpointPaths(, +						this.endpointHandlerMapping, true)));, +			}, +			// secure endpoints, +			String[] paths = getEndpointPaths(this.endpointHandlerMapping, true);, +			ignoring.antMatchers(getEndpointPaths(this.endpointHandlerMapping, false));, +		public AuthenticationManager authenticationManager(, +				ObjectPostProcessor<Object> objectPostProcessor) throws Exception {, +	private static String[] getEndpointPaths(, +			EndpointHandlerMapping endpointHandlerMapping, boolean secure) {, +		if (endpointHandlerMapping == null) {, +			return NO_PATHS;, +		}, +, +		List<Endpoint<?>> endpoints = endpointHandlerMapping.getEndpoints();, +		List<String> paths = new ArrayList<String>(endpoints.size());, +		for (Endpoint<?> endpoint : endpoints) {, +			if (endpoint.isSensitive() == secure) {, +				paths.add(endpoint.getPath());, +			}, +		}, +		return paths.toArray(new String[paths.size()]);, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/logback.xml, +	<!-- logger name="org.springframework.security" level="DEBUG"/-->]