[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.context.event.ContextRefreshedEvent;, +	public void managementContextFailureCausesMainContextFailure() throws Exception {, +		this.applicationContext.addApplicationListener(, +				(ApplicationListener<ContextRefreshedEvent>) (event) -> {, +					if (event.getApplicationContext().getParent() != null) {, +						throw new RuntimeException();, +				});, +		this.thrown.expect(RuntimeException.class);, +		this.applicationContext.refresh();, +		int server = 0;, +		int management = 0;, +		@Bean, +		public ApplicationListener<WebServerInitializedEvent> serverPortListener() {, +			return (event) -> {, +				int port = event.getWebServer().getPort();, +				if (event.getApplicationContext().getParent() == null) {, +					ports.get().server = port;, +				}, +				else {, +					ports.get().management = port;, +				}, +			};, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.context.event.ContextRefreshedEvent;, +	public void managementContextFailureCausesMainContextFailure() throws Exception {, +		this.applicationContext.addApplicationListener(, +				(ApplicationListener<ContextRefreshedEvent>) (event) -> {, +					if (event.getApplicationContext().getParent() != null) {, +						throw new RuntimeException();, +				});, +		this.thrown.expect(RuntimeException.class);, +		this.applicationContext.refresh();, +		int server = 0;, +		int management = 0;, +		@Bean, +		public ApplicationListener<WebServerInitializedEvent> serverPortListener() {, +			return (event) -> {, +				int port = event.getWebServer().getPort();, +				if (event.getApplicationContext().getParent() == null) {, +					ports.get().server = port;, +				}, +				else {, +					ports.get().management = port;, +				}, +			};, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +			return new TomcatServletWebServerFactory(0);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.context.event.ContextRefreshedEvent;, +	public void managementContextFailureCausesMainContextFailure() throws Exception {, +		this.applicationContext.addApplicationListener(, +				(ApplicationListener<ContextRefreshedEvent>) (event) -> {, +					if (event.getApplicationContext().getParent() != null) {, +						throw new RuntimeException();, +				});, +		this.thrown.expect(RuntimeException.class);, +		this.applicationContext.refresh();, +		int server = 0;, +		int management = 0;, +		@Bean, +		public ApplicationListener<WebServerInitializedEvent> serverPortListener() {, +			return (event) -> {, +				int port = event.getWebServer().getPort();, +				if (event.getApplicationContext().getParent() == null) {, +					ports.get().server = port;, +				}, +				else {, +					ports.get().management = port;, +				}, +			};, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +			return new TomcatServletWebServerFactory(0);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetricsTests.java, +			return new TomcatServletWebServerFactory(0);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.context.event.ContextRefreshedEvent;, +	public void managementContextFailureCausesMainContextFailure() throws Exception {, +		this.applicationContext.addApplicationListener(, +				(ApplicationListener<ContextRefreshedEvent>) (event) -> {, +					if (event.getApplicationContext().getParent() != null) {, +						throw new RuntimeException();, +				});, +		this.thrown.expect(RuntimeException.class);, +		this.applicationContext.refresh();, +		int server = 0;, +		int management = 0;, +		@Bean, +		public ApplicationListener<WebServerInitializedEvent> serverPortListener() {, +			return (event) -> {]