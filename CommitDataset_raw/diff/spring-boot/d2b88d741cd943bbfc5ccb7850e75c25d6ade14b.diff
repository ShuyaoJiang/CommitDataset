[+++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, +		for (ApplicationListener<?> listener : this.application.getListeners()) {, +			context.addApplicationListener(listener);, +		}, +		else {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, +		for (ApplicationListener<?> listener : this.application.getListeners()) {, +			context.addApplicationListener(listener);, +		}, +		else {, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import java.util.LinkedHashSet;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.event.SimpleApplicationEventMulticaster;, +import static org.hamcrest.Matchers.hasItem;, +import static org.hamcrest.Matchers.isA;, +	public void registerListener() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setApplicationContextClass(SpyApplicationContext.class);, +		final LinkedHashSet<ApplicationEvent> events = new LinkedHashSet<ApplicationEvent>();, +		application.addListeners(new ApplicationListener<ApplicationEvent>() {, +			@Override, +			public void onApplicationEvent(ApplicationEvent event) {, +				events.add(event);, +			}, +		});, +		this.context = application.run();, +		assertThat(events, hasItem(isA(ApplicationPreparedEvent.class)));, +		assertThat(events, hasItem(isA(ContextRefreshedEvent.class)));, +	}, +, +	@Test, +	public void registerListenerWithCustomMulticaster() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class,, +				Multicaster.class);, +		application.setApplicationContextClass(SpyApplicationContext.class);, +		final LinkedHashSet<ApplicationEvent> events = new LinkedHashSet<ApplicationEvent>();, +		application.addListeners(new ApplicationListener<ApplicationEvent>() {, +			@Override, +			public void onApplicationEvent(ApplicationEvent event) {, +				events.add(event);, +			}, +		});, +		this.context = application.run();, +		assertThat(events, hasItem(isA(ApplicationPreparedEvent.class)));, +		assertThat(events, hasItem(isA(ContextRefreshedEvent.class)));, +	}, +, +	@Test, +	static class Multicaster {, +, +		@Bean, +		public SimpleApplicationEventMulticaster applicationEventMulticaster() {, +			return new SimpleApplicationEventMulticaster();, +		}, +, +	}, +, +	@Configuration]