[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/SpringSecurityOAuth2ClientConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;, +import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;, +import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;, +import org.springframework.security.oauth2.provider.OAuth2Authentication;, +import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;, +@ConditionalOnExpression("'${spring.oauth2.client.clientId:}'!=''"), +	@Primary, +	public OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext oauth2ClientContext,, +			OAuth2ProtectedResourceDetails details) {, +		OAuth2RestTemplate template = new OAuth2RestTemplate(details, oauth2ClientContext);, +		return template;, +	}, +, +	@Configuration, +	protected abstract static class BaseConfiguration {, +, +		@Bean, +		public AuthorizationCodeResourceDetails oauth2RemoteResource() {, +	}, +, +	@Configuration, +	@ConditionalOnNotWebApplication, +	protected static class SingletonScopedConfiguration {, +, +		@Bean, +		@ConfigurationProperties("spring.oauth2.client"), +		@Primary, +		public ClientCredentialsResourceDetails oauth2RemoteResource() {, +			ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();, +			return details;, +		}, +, +		@Bean, +		public OAuth2ClientContext oauth2ClientContext() {, +			return new DefaultOAuth2ClientContext(new DefaultAccessTokenRequest());, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnBean(OAuth2ClientConfiguration.class), +	@ConditionalOnWebApplication, +	protected static class SessionScopedConfiguration extends BaseConfiguration {, +, +		@Resource, +		@Qualifier("accessTokenRequest"), +		protected AccessTokenRequest accessTokenRequest;, +, +		@Bean, +		@Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES), +		public OAuth2ClientContext oauth2ClientContext() {, +			return new DefaultOAuth2ClientContext(accessTokenRequest);, +		}, +, +			registration.setOrder(-100);, +, +	/*, +	 * When the authentication is per cookie but the stored token is an oauth2 one, we can, +	 * pass that on to a client that wants to call downstream. We don't even need an, +	 * OAuth2ClientContextFilter until we need to refresh the access token. To handle, +	 * refresh tokens you need to <code>@EnableOAuth2Client</code>, +	 */, +	@Configuration, +	@ConditionalOnMissingBean(OAuth2ClientConfiguration.class), +	@ConditionalOnWebApplication, +	protected static class RequestScopedConfiguration extends BaseConfiguration {, +			DefaultOAuth2ClientContext context = new DefaultOAuth2ClientContext(, +					new DefaultAccessTokenRequest());, +			Authentication principal = SecurityContextHolder.getContext(), +					.getAuthentication();, +			if (principal instanceof OAuth2Authentication) {, +				OAuth2Authentication authentication = (OAuth2Authentication) principal;, +				Object details = authentication.getDetails();, +				if (details instanceof OAuth2AuthenticationDetails) {, +					OAuth2AuthenticationDetails oauthsDetails = (OAuth2AuthenticationDetails) details;, +					String token = oauthsDetails.getTokenValue();, +					context.setAccessToken(new DefaultOAuth2AccessToken(token));, +				}, +			}, +			return context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/SpringSecurityOAuth2ClientConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;, +import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;, +import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;, +import org.springframework.security.oauth2.provider.OAuth2Authentication;, +import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;, +@ConditionalOnExpression("'${spring.oauth2.client.clientId:}'!=''")]