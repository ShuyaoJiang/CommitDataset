[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/HikariDataSourceMetricsPostProcessor.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.Ordered;, +class HikariDataSourceMetricsPostProcessor implements BeanPostProcessor, Ordered {, +, +	private static final Log logger = LogFactory, +			.getLog(HikariDataSourceMetricsPostProcessor.class);, +			try {, +			catch (Exception ex) {, +				logger.warn("Failed to bind Hikari metrics: " + ex.getMessage());, +			}, +		}, +	@Override, +	public int getOrder() {, +		return Ordered.HIGHEST_PRECEDENCE;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/HikariDataSourceMetricsPostProcessor.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.Ordered;, +class HikariDataSourceMetricsPostProcessor implements BeanPostProcessor, Ordered {, +, +	private static final Log logger = LogFactory, +			.getLog(HikariDataSourceMetricsPostProcessor.class);, +			try {, +			catch (Exception ex) {, +				logger.warn("Failed to bind Hikari metrics: " + ex.getMessage());, +			}, +		}, +	@Override, +	public int getOrder() {, +		return Ordered.HIGHEST_PRECEDENCE;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java, +import java.sql.SQLException;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.core.Ordered;, +import org.springframework.core.PriorityOrdered;, +	public void autoConfiguredHikariDataSourceIsInstrumentedWhenUsingDataSourceInitialization() {, +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.schema:db/create-custom-schema.sql"), +				.run((context) -> {, +					context.getBean(DataSource.class).getConnection();, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					registry.get("hikaricp.connections").meter();, +				});, +	}, +, +	@Test, +	public void failureToInstrumentHikariDataSourceIsTolerated() {, +		this.contextRunner.withUserConfiguration(HikariSealingConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasNotFailed();, +					context.getBean(DataSource.class).getConnection();, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					assertThat(registry.find("hikaricp.connections").meter()).isNull();, +				});, +	}, +, +	@Test, +	@Configuration, +	static class HikariSealingConfiguration {, +, +		@Bean, +		public static HikariSealer hikariSealer() {, +			return new HikariSealer();, +		}, +, +		static class HikariSealer implements BeanPostProcessor, PriorityOrdered {, +, +			@Override, +			public int getOrder() {, +				return Ordered.HIGHEST_PRECEDENCE;, +			}, +, +			@Override, +			public Object postProcessAfterInitialization(Object bean, String beanName), +					throws BeansException {, +				if (bean instanceof HikariDataSource) {, +					try {, +						((HikariDataSource) bean).getConnection().close();, +					}, +					catch (SQLException ex) {, +						throw new IllegalStateException(ex);, +					}, +				}, +				return bean;, +			}, +, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/HikariDataSourceMetricsPostProcessor.java, +import org.apache.commons.logging.Log;]