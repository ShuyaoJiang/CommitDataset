[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java, +	@Bean, +	@ConditionalOnMissingBean, +	public DispatcherServlet dispatcherServlet(MockMvc mockMvc) {, +		return mockMvc.getDispatcherServlet();, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java, +	@Bean, +	@ConditionalOnMissingBean, +	public DispatcherServlet dispatcherServlet(MockMvc mockMvc) {, +		return mockMvc.getDispatcherServlet();, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/SpringBootMockMvcBuilderCustomizer.java, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.boot.web.servlet.RegistrationBean;, +		FilterRegistrationBeans initializers = new FilterRegistrationBeans(this.context);, +	private static class FilterRegistrationBeans extends ServletContextInitializerBeans {, +, +		FilterRegistrationBeans(ListableBeanFactory beanFactory) {, +			super(beanFactory, FilterRegistrationBean.class,, +					DelegatingFilterProxyRegistrationBean.class);, +		}, +, +		@Override, +		protected void addAdaptableBeans(ListableBeanFactory beanFactory) {, +			addAsRegistrationBean(beanFactory, Filter.class,, +					new FilterRegistrationBeanAdapter());, +		}, +, +		private static class FilterRegistrationBeanAdapter, +				implements RegistrationBeanAdapter<Filter> {, +, +			@Override, +			public RegistrationBean createRegistrationBean(String name, Filter source,, +					int totalNumberOfSourceBeans) {, +				FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<>(, +						source);, +				bean.setName(name);, +				return bean;, +			}, +, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java, +	@Bean, +	@ConditionalOnMissingBean, +	public DispatcherServlet dispatcherServlet(MockMvc mockMvc) {, +		return mockMvc.getDispatcherServlet();, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/SpringBootMockMvcBuilderCustomizer.java, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.boot.web.servlet.RegistrationBean;, +		FilterRegistrationBeans initializers = new FilterRegistrationBeans(this.context);, +	private static class FilterRegistrationBeans extends ServletContextInitializerBeans {, +, +		FilterRegistrationBeans(ListableBeanFactory beanFactory) {, +			super(beanFactory, FilterRegistrationBean.class,, +					DelegatingFilterProxyRegistrationBean.class);, +		}, +, +		@Override, +		protected void addAdaptableBeans(ListableBeanFactory beanFactory) {, +			addAsRegistrationBean(beanFactory, Filter.class,, +					new FilterRegistrationBeanAdapter());, +		}, +, +		private static class FilterRegistrationBeanAdapter, +				implements RegistrationBeanAdapter<Filter> {, +, +			@Override, +			public RegistrationBean createRegistrationBean(String name, Filter source,, +					int totalNumberOfSourceBeans) {, +				FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<>(, +						source);, +				bean.setName(name);, +				return bean;, +			}, +, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfigurationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]