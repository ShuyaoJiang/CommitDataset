[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/Dependency.java, +final class Dependency {, +	private final String id;, +	private final String name;, +	private final String description;, +, +	public Dependency(String id, String name, String description) {, +		this.id = id;, +		this.name = name;, +		this.description = description;, +	}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/Dependency.java, +final class Dependency {, +	private final String id;, +	private final String name;, +	private final String description;, +, +	public Dependency(String id, String name, String description) {, +		this.id = id;, +		this.name = name;, +		this.description = description;, +	}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +import java.io.IOException;, +import java.util.Arrays;, +, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, +, +import org.springframework.boot.cli.command.options.OptionHandler;, +import org.springframework.boot.cli.command.status.ExitStatus;, +import org.springframework.boot.cli.util.Log;, +	public InitCommand() {, +		this(new InitOptionHandler(getInitializrService()));, +	public InitCommand(InitOptionHandler handler) {, +		super("init", "Initialize a new project using Spring ", +				+ "Initialzr (start.spring.io)", handler);, +	}, +, +	private static InitializrService getInitializrService() {, +		return new InitializrService(HttpClientBuilder.create().build());, +	}, +, +	static class InitOptionHandler extends OptionHandler {, +, +		private final ServiceCapabilitiesReportGenerator serviceCapabilitiesReport;, +, +		private final ProjectGenerator projectGenerator;, +, +		private OptionSpec<String> target;, +, +		private OptionSpec<Void> listCapabilities;, +, +		private OptionSpec<String> bootVersion;, +, +		private OptionSpec<String> dependencies;, +, +		private OptionSpec<String> javaVersion;, +, +		private OptionSpec<String> packaging;, +, +		private OptionSpec<String> build;, +, +		private OptionSpec<String> format;, +, +		private OptionSpec<String> type;, +, +		private OptionSpec<Void> extract;, +, +		private OptionSpec<Void> force;, +, +		private OptionSpec<String> output;, +, +		InitOptionHandler(InitializrService initializrService) {, +			this.serviceCapabilitiesReport = new ServiceCapabilitiesReportGenerator(, +					initializrService);, +			this.projectGenerator = new ProjectGenerator(initializrService);, +, +		}, +, +		@Override, +		protected void options() {, +			this.target = option(Arrays.asList("target"), "URL of the service to use"), +					.withRequiredArg().defaultsTo(, +							ProjectGenerationRequest.DEFAULT_SERVICE_URL);, +			this.listCapabilities = option(Arrays.asList("list", "l"),, +					"List the capabilities of the service. Use it to discover the ", +							+ "dependencies and the types that are available");, +			projectGenerationOptions();, +			otherOptions();, +		}, +, +		private void projectGenerationOptions() {, +			this.bootVersion = option(Arrays.asList("boot-version", "b"),, +					"Spring Boot version to use (for example '1.2.0.RELEASE')"), +					.withRequiredArg();, +			this.dependencies = option(, +					Arrays.asList("dependencies", "d"),, +					"Comma separated list of dependencies to include in the ", +							+ "generated project").withRequiredArg();]