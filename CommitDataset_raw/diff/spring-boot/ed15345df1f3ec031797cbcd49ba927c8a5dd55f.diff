[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.util.jar.Manifest;, +	private URL jarFileUrl;, +, +		/*, +		 * The superclass constructor creates a jarFileUrl which is equal to the root URL, +		 * of the containing archive (therefore not unique if we are connecting to, +		 * multiple nested jars in the same archive). Therefore we need to make something, +		 * sensible for #getJarFileURL()., +		 */, +		if (separator + SEPARATOR.length() != spec.length()) {, +			this.jarFileUrl = new URL("jar:" + spec);, +		else {, +			// The root of the archive (!/), +			this.jarFileUrl = new URL("jar:" + spec.substring(0, separator));, +		}, +	}, +, +	@Override, +	public URL getJarFileURL() {, +		return this.jarFileUrl;, +	public Manifest getManifest() throws IOException {, +		try {, +			return super.getManifest();, +		}, +		finally {, +			this.connected = false;, +		}, +	}, +, +	@Override, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.util.jar.Manifest;, +	private URL jarFileUrl;, +, +		/*, +		 * The superclass constructor creates a jarFileUrl which is equal to the root URL, +		 * of the containing archive (therefore not unique if we are connecting to, +		 * multiple nested jars in the same archive). Therefore we need to make something, +		 * sensible for #getJarFileURL()., +		 */, +		if (separator + SEPARATOR.length() != spec.length()) {, +			this.jarFileUrl = new URL("jar:" + spec);, +		else {, +			// The root of the archive (!/), +			this.jarFileUrl = new URL("jar:" + spec.substring(0, separator));, +		}, +	}, +, +	@Override, +	public URL getJarFileURL() {, +		return this.jarFileUrl;, +	public Manifest getManifest() throws IOException {, +		try {, +			return super.getManifest();, +		}, +		finally {, +			this.connected = false;, +		}, +	}, +, +	@Override, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java, +		assertThat(jarURLConnection.getJarFileURL().toString(), equalTo("jar:file:", +				+ this.rootJarFile));, +		JarURLConnection conn = (JarURLConnection) url.openConnection();, +		assertThat(conn.getJarFile(), sameInstance(nestedJarFile));, +		assertThat(conn.getJarFileURL().toString(), equalTo("jar:file:", +				+ this.rootJarFile.getPath() + "!/nested.jar"));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.util.jar.Manifest;, +	private URL jarFileUrl;, +, +		/*, +		 * The superclass constructor creates a jarFileUrl which is equal to the root URL, +		 * of the containing archive (therefore not unique if we are connecting to, +		 * multiple nested jars in the same archive). Therefore we need to make something, +		 * sensible for #getJarFileURL()., +		 */, +		if (separator + SEPARATOR.length() != spec.length()) {, +			this.jarFileUrl = new URL("jar:" + spec);, +		else {, +			// The root of the archive (!/), +			this.jarFileUrl = new URL("jar:" + spec.substring(0, separator));, +		}, +	}, +, +	@Override, +	public URL getJarFileURL() {, +		return this.jarFileUrl;, +	public Manifest getManifest() throws IOException {, +		try {, +			return super.getManifest();, +		}, +		finally {, +			this.connected = false;, +		}, +	}, +, +	@Override]