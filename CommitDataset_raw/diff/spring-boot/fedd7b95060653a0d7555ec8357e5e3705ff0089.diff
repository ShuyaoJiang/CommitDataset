[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +		Set<SimpleGrantedAuthority> authorities = Collections, +				.singleton(new SimpleGrantedAuthority("HERO"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +		Set<SimpleGrantedAuthority> authorities = Collections, +				.singleton(new SimpleGrantedAuthority("HERO"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/NoSpringSecurityHealthMvcEndpointIntegrationTests.java, +	public void healthWhenRightRoleNotPresentShouldExposeHealthDetails(), +			throws Exception {, +		mockMvc.perform(get("/health").with(getRequestPostProcessor())), +				.andExpect(status().isOk()), +, +			public MockHttpServletRequest postProcessRequest(, +					MockHttpServletRequest request) {, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +	protected boolean exposeHealthDetails(HttpServletRequest request,, +			Principal principal) {, +				null) && principal instanceof Authentication;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +		Set<SimpleGrantedAuthority> authorities = Collections, +				.singleton(new SimpleGrantedAuthority("HERO"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/NoSpringSecurityHealthMvcEndpointIntegrationTests.java, +	public void healthWhenRightRoleNotPresentShouldExposeHealthDetails(), +			throws Exception {, +		mockMvc.perform(get("/health").with(getRequestPostProcessor())), +				.andExpect(status().isOk()), +, +			public MockHttpServletRequest postProcessRequest(, +					MockHttpServletRequest request) {, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, + * Copyright 2012-2017 the original author or authors., +		return new MongoClient(Collections.singletonList(new ServerAddress(host, port)),, +				credentials.add(MongoCredential.createCredential(this.username, database,, +						this.password));, +					Collections.singletonList(new ServerAddress(host, port)), credentials,, +					options);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java]