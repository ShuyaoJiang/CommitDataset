[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			if (config.getCache().getChannel().getSize() != null) {, +				connectionFactory.setChannelCacheSize(config.getCache().getChannel().getSize());, +			if (config.getCache().getConnection().getMode() != null) {, +				connectionFactory.setCacheMode(config.getCache().getConnection().getMode());, +			if (config.getCache().getConnection().getSize() != null) {, +				connectionFactory.setConnectionCacheSize(config.getCache().getConnection().getSize());, +			if (config.getCache().getChannel().getCheckoutTimeout() != null) {, +				connectionFactory.setChannelCheckoutTimeout(config.getCache().getChannel().getCheckoutTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			if (config.getCache().getChannel().getSize() != null) {, +				connectionFactory.setChannelCacheSize(config.getCache().getChannel().getSize());, +			if (config.getCache().getConnection().getMode() != null) {, +				connectionFactory.setCacheMode(config.getCache().getConnection().getMode());, +			if (config.getCache().getConnection().getSize() != null) {, +				connectionFactory.setConnectionCacheSize(config.getCache().getConnection().getSize());, +			if (config.getCache().getChannel().getCheckoutTimeout() != null) {, +				connectionFactory.setChannelCheckoutTimeout(config.getCache().getChannel().getCheckoutTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Cache configuration., +	private final Cache cache = new Cache();, +	public Cache getCache() {, +		return this.cache;, +	public static class Cache {, +, +		private final Channel channel = new Channel();, +, +		private final Connection connection = new Connection();, +, +		public Channel getChannel() {, +			return this.channel;, +		}, +, +		public Connection getConnection() {, +			return this.connection;, +		}, +, +		public static class Channel {, +, +			/**, +			 * Number of channels to retain in the cache. When "check-timeout" > 0,  max, +			 * channels per connection., +			 */, +			private Integer size;, +, +			/**, +			 * Number of milliseconds to wait to obtain a channel if the cache size, +			 * has been reached. If 0, always create a new channel., +			 */, +			private Long checkoutTimeout;, +, +			public Integer getSize() {, +				return this.size;, +			}, +, +			public void setSize(Integer size) {, +				this.size = size;, +			}, +, +			public Long getCheckoutTimeout() {, +				return this.checkoutTimeout;, +			}, +, +			public void setCheckoutTimeout(Long checkoutTimeout) {, +				this.checkoutTimeout = checkoutTimeout;, +			}, +, +		}, +, +		public static class Connection {, +, +			/**, +			 * Connection factory cache mode., +			 */, +			private CacheMode mode = CacheMode.CHANNEL;, +, +			/**, +			 * Number of connections to cache. Only applies when mode is CONNECTION., +			 */, +			private Integer size;, +, +			public CacheMode getMode() {, +				return this.mode;, +			}, +, +			public void setMode(CacheMode mode) {, +				this.mode = mode;, +			}, +, +			public Integer getSize() {, +				return this.size;, +			}, +, +			public void setSize(Integer size) {, +				this.size = size;, +			}, +, +		}, +]