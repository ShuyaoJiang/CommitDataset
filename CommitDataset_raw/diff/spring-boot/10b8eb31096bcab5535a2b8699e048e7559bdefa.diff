[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		boolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);, +	private boolean hasKnownBindableProperties(ConfigurationPropertyName name,, +			Context context) {, +		Stream<IterableConfigurationPropertySource> sources = context.streamSources(), +				.filter(IterableConfigurationPropertySource.class::isInstance), +				.map(IterableConfigurationPropertySource.class::cast);, +		return sources.flatMap((s) -> s.filter(name::isAncestorOf).stream()).findAny(), +				.isPresent();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		boolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);, +	private boolean hasKnownBindableProperties(ConfigurationPropertyName name,, +			Context context) {, +		Stream<IterableConfigurationPropertySource> sources = context.streamSources(), +				.filter(IterableConfigurationPropertySource.class::isInstance), +				.map(IterableConfigurationPropertySource.class::cast);, +		return sources.flatMap((s) -> s.filter(name::isAncestorOf).stream()).findAny(), +				.isPresent();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		if (!(source instanceof IterableConfigurationPropertySource)) {, +			return children;, +		}, +		for (ConfigurationPropertyName name : (IterableConfigurationPropertySource) source, +				.filter(root::isAncestorOf)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		boolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);, +	private boolean hasKnownBindableProperties(ConfigurationPropertyName name,, +			Context context) {, +		Stream<IterableConfigurationPropertySource> sources = context.streamSources(), +				.filter(IterableConfigurationPropertySource.class::isInstance), +				.map(IterableConfigurationPropertySource.class::cast);, +		return sources.flatMap((s) -> s.filter(name::isAncestorOf).stream()).findAny(), +				.isPresent();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		if (!(source instanceof IterableConfigurationPropertySource)) {, +			return children;, +		}, +		for (ConfigurationPropertyName name : (IterableConfigurationPropertySource) source, +				.filter(root::isAncestorOf)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +			if (source instanceof IterableConfigurationPropertySource) {, +				for (ConfigurationPropertyName name : (IterableConfigurationPropertySource) source) {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		boolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);, +	private boolean hasKnownBindableProperties(ConfigurationPropertyName name,, +			Context context) {, +		Stream<IterableConfigurationPropertySource> sources = context.streamSources(), +				.filter(IterableConfigurationPropertySource.class::isInstance), +				.map(IterableConfigurationPropertySource.class::cast);, +		return sources.flatMap((s) -> s.filter(name::isAncestorOf).stream()).findAny(), +				.isPresent();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +		if (!(source instanceof IterableConfigurationPropertySource)) {, +			return children;, +		}, +		for (ConfigurationPropertyName name : (IterableConfigurationPropertySource) source, +				.filter(root::isAncestorOf)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +			if (source instanceof IterableConfigurationPropertySource) {, +				for (ConfigurationPropertyName name : (IterableConfigurationPropertySource) source) {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/handler/NoUnboundElementsBindHandler.java, +import org.springframework.boot.context.properties.source.IterableConfigurationPropertySource;, +			if (source instanceof IterableConfigurationPropertySource) {, +				collectUnbound(name, unbound,, +						(IterableConfigurationPropertySource) source);, +	private void collectUnbound(ConfigurationPropertyName name,, +			Set<ConfigurationProperty> unbound,, +			IterableConfigurationPropertySource source) {, +		IterableConfigurationPropertySource filtered = source, +				.filter((candidate) -> isUnbound(name, candidate));, +		for (ConfigurationPropertyName unboundName : filtered) {, +			try {, +				unbound.add(source.filter((candidate) -> isUnbound(name, candidate)), +						.getConfigurationProperty(unboundName));, +			}, +			catch (Exception ex) {, +			}, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java]