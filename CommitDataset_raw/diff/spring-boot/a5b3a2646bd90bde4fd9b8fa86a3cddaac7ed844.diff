[+++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessorTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.test.mock.mockito.example.RealExampleService;, +import org.springframework.context.annotation.Primary;, +	@Test, +	public void canMockPrimaryBean() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		MockitoPostProcessor.register(context);, +		context.register(MockPrimaryBean.class);, +		context.refresh();, +		assertThat(Mockito.mockingDetails(context.getBean(MockPrimaryBean.class).mock), +				.isMock()).isTrue();, +		assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isMock()), +				.isTrue();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("examplePrimary", ExampleService.class)), +				.isMock()).isTrue();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("exampleQualified", ExampleService.class)), +				.isMock()).isFalse();, +	}, +, +	@Test, +	public void canMockQualifiedBeanWithPrimaryBeanPresent() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		MockitoPostProcessor.register(context);, +		context.register(MockQualifiedBean.class);, +		context.refresh();, +		assertThat(Mockito.mockingDetails(context.getBean(MockQualifiedBean.class).mock), +				.isMock()).isTrue();, +		assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isMock()), +				.isFalse();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("examplePrimary", ExampleService.class)), +				.isMock()).isFalse();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("exampleQualified", ExampleService.class)), +				.isMock()).isTrue();, +	}, +, +	@Test, +	public void canSpyPrimaryBean() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		MockitoPostProcessor.register(context);, +		context.register(SpyPrimaryBean.class);, +		context.refresh();, +		assertThat(, +				Mockito.mockingDetails(context.getBean(SpyPrimaryBean.class).spy).isSpy()), +						.isTrue();, +		assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isSpy()), +				.isTrue();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("examplePrimary", ExampleService.class)), +				.isSpy()).isTrue();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("exampleQualified", ExampleService.class)), +				.isSpy()).isFalse();, +	}, +, +	@Test, +	public void canSpyQualifiedBeanWithPrimaryBeanPresent() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		MockitoPostProcessor.register(context);, +		context.register(SpyQualifiedBean.class);, +		context.refresh();, +		assertThat(Mockito.mockingDetails(context.getBean(SpyQualifiedBean.class).spy), +				.isSpy()).isTrue();, +		assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isSpy()), +				.isFalse();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("examplePrimary", ExampleService.class)), +				.isSpy()).isFalse();, +		assertThat(Mockito, +				.mockingDetails(context.getBean("exampleQualified", ExampleService.class)), +				.isSpy()).isTrue();, +	}, +, +	@Configuration, +	static class MockPrimaryBean {, +, +		@MockBean(ExampleService.class), +		private ExampleService mock;, +, +		@Bean, +		@Qualifier("test"), +		public ExampleService exampleQualified() {, +			return new RealExampleService("qualified");, +		}, +, +		@Bean, +		@Primary, +		public ExampleService examplePrimary() {, +			return new RealExampleService("primary");, +		}, +, +	}, +, +	@Configuration, +	static class MockQualifiedBean {, +]