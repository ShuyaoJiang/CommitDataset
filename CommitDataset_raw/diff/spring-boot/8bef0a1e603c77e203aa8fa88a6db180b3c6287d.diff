[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/LdapHealthIndicator.java, + * @author Stephane Nicoll, +	private static final ContextExecutor<String> versionContextExecutor = new VersionContextExecutor();, +, +		String version = this.ldapOperations.executeReadOnly(versionContextExecutor);, +	private static class VersionContextExecutor implements ContextExecutor<String> {, +, +		@Override, +		public String executeWithContext(DirContext ctx) throws NamingException {, +			Object version = ctx.getEnvironment().get("java.naming.ldap.version");, +			if (version != null) {, +				return (String) version;, +			}, +			return null;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/LdapHealthIndicator.java, + * @author Stephane Nicoll, +	private static final ContextExecutor<String> versionContextExecutor = new VersionContextExecutor();, +, +		String version = this.ldapOperations.executeReadOnly(versionContextExecutor);, +	private static class VersionContextExecutor implements ContextExecutor<String> {, +, +		@Override, +		public String executeWithContext(DirContext ctx) throws NamingException {, +			Object version = ctx.getEnvironment().get("java.naming.ldap.version");, +			if (version != null) {, +				return (String) version;, +			}, +			return null;, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +			return mock(LdapOperations.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/LdapHealthIndicator.java, + * @author Stephane Nicoll, +	private static final ContextExecutor<String> versionContextExecutor = new VersionContextExecutor();, +, +		String version = this.ldapOperations.executeReadOnly(versionContextExecutor);, +	private static class VersionContextExecutor implements ContextExecutor<String> {, +, +		@Override, +		public String executeWithContext(DirContext ctx) throws NamingException {, +			Object version = ctx.getEnvironment().get("java.naming.ldap.version");, +			if (version != null) {, +				return (String) version;, +			}, +			return null;, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +			return mock(LdapOperations.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/LdapHealthIndicatorTests.java, +		this.context.register(LdapAutoConfiguration.class,, +				LdapDataAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EndpointAutoConfiguration.class,, +		LdapHealthIndicator healthIndicator = this.context.getBean(, +				LdapHealthIndicator.class);, +				.willThrow(new CommunicationException(, +						new javax.naming.CommunicationException("Connection failed")));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/LdapHealthIndicator.java, + * @author Stephane Nicoll, +	private static final ContextExecutor<String> versionContextExecutor = new VersionContextExecutor();, +, +		String version = this.ldapOperations.executeReadOnly(versionContextExecutor);, +	private static class VersionContextExecutor implements ContextExecutor<String> {, +, +		@Override, +		public String executeWithContext(DirContext ctx) throws NamingException {, +			Object version = ctx.getEnvironment().get("java.naming.ldap.version");, +			if (version != null) {, +				return (String) version;, +			}, +			return null;, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +			return mock(LdapOperations.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/LdapHealthIndicatorTests.java, +		this.context.register(LdapAutoConfiguration.class,, +				LdapDataAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EndpointAutoConfiguration.class,, +		LdapHealthIndicator healthIndicator = this.context.getBean(, +				LdapHealthIndicator.class);, +				.willThrow(new CommunicationException(, +						new javax.naming.CommunicationException("Connection failed")));, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	management.health.ldap.enabled=true # Enable LDAP health check.]