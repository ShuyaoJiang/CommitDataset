[+++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +				this.context = build().run(args);, +	}, +	/**, +	 * Returns a fully configured {@link SpringApplication} that is ready to run., +	 * @return the fully configured {@link SpringApplication}., +	 */, +	public SpringApplication build() {, +		this.application.setSources(this.sources);, +		return this.application;, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +				this.context = build().run(args);, +	}, +	/**, +	 * Returns a fully configured {@link SpringApplication} that is ready to run., +	 * @return the fully configured {@link SpringApplication}., +	 */, +	public SpringApplication build() {, +		this.application.setSources(this.sources);, +		return this.application;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +import javax.servlet.Filter;, +import javax.servlet.Servlet;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.context.embedded.ServletContextInitializer;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, + * An opinionated {@link WebApplicationInitializer} to run a {@link SpringApplication}, + * from a traditional WAR deployment. Binds {@link Servlet}, {@link Filter} and, + * {@link ServletContextInitializer} beans from the application context to the servlet, + * container., + * <p>, + * To configure the application either override the, + * {@link #configure(SpringApplicationBuilder)} method (calling, + * {@link SpringApplicationBuilder#sources(Object...)}) or make the initializer itself a, + * {@code @Configuration}., + * deploying it. If you prefer to run an embedded container then you won't need this at, + * all., + * @author Phillip Webb, + * @see #configure(SpringApplicationBuilder), +		SpringApplicationBuilder builder = new SpringApplicationBuilder();, +		ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);, +		if (parent != null) {, +			builder.initializers(new ParentContextApplicationContextInitializer(parent));, +		builder.initializers(new ServletContextApplicationContextInitializer(, +		builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);, +		builder = configure(builder);, +		SpringApplication application = builder.build();, +		if (application.getSources().isEmpty(), +				&& AnnotationUtils.findAnnotation(getClass(), Configuration.class) != null) {, +			application.getSources().add(getClass());, +		}, +		Assert.state(application.getSources().size() > 0,, +				"No SpringApplication sources have been defined. Either override the ", +						+ "configure method or add an @Configuration annotation");, +		application.getSources().add(ErrorPageFilter.class);, +		return run(application);, +	}, +, +	/**, +	 * Called to run a fully configured {@link SpringApplication}., +	 * @param application the application to run, +	 * @return the {@link WebApplicationContext}, +	 */, +	protected WebApplicationContext run(SpringApplication application) {, +	private ApplicationContext getExistingRootWebApplicationContext(, +			ServletContext servletContext) {, +		Object context = servletContext, +				.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);, +		if (context instanceof ApplicationContext) {, +			return (ApplicationContext) context;, +		}, +		return null;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +				this.context = build().run(args);, +	}, +	/**, +	 * Returns a fully configured {@link SpringApplication} that is ready to run., +	 * @return the fully configured {@link SpringApplication}., +	 */, +	public SpringApplication build() {, +		this.application.setSources(this.sources);, +		return this.application;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +import javax.servlet.Filter;, +import javax.servlet.Servlet;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.context.embedded.ServletContextInitializer;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, + * An opinionated {@link WebApplicationInitializer} to run a {@link SpringApplication}, + * from a traditional WAR deployment. Binds {@link Servlet}, {@link Filter} and, + * {@link ServletContextInitializer} beans from the application context to the servlet, + * container., + * <p>, + * To configure the application either override the]