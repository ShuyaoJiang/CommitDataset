[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +	private final boolean allowRecursiveBinding;, +, +	AggregateBinder(BindContext context, boolean allowRecursiveBinding) {, +		this.allowRecursiveBinding = allowRecursiveBinding;, +	}, +, +	boolean isAllowRecursiveBinding() {, +		return this.allowRecursiveBinding;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +	private final boolean allowRecursiveBinding;, +, +	AggregateBinder(BindContext context, boolean allowRecursiveBinding) {, +		this.allowRecursiveBinding = allowRecursiveBinding;, +	}, +, +	boolean isAllowRecursiveBinding() {, +		return this.allowRecursiveBinding;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +			Object bound = bindObject(name, target, handler, context,, +					allowRecursiveBinding);, +			BindHandler handler, Context context, boolean allowRecursiveBinding), +		return bindBean(name, target, handler, context, allowRecursiveBinding);, +					aggregateBinder.isAllowRecursiveBinding());, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +				name.append(propertyName), propertyTarget, handler, context, false);, +		if (!allowRecursiveBinding && context.hasBoundBean(type)) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +	private final boolean allowRecursiveBinding;, +, +	AggregateBinder(BindContext context, boolean allowRecursiveBinding) {, +		this.allowRecursiveBinding = allowRecursiveBinding;, +	}, +, +	boolean isAllowRecursiveBinding() {, +		return this.allowRecursiveBinding;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +			Object bound = bindObject(name, target, handler, context,, +					allowRecursiveBinding);, +			BindHandler handler, Context context, boolean allowRecursiveBinding), +		return bindBean(name, target, handler, context, allowRecursiveBinding);, +					aggregateBinder.isAllowRecursiveBinding());, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +				name.append(propertyName), propertyTarget, handler, context, false);, +		if (!allowRecursiveBinding && context.hasBoundBean(type)) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +		super(context, false);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +	private final boolean allowRecursiveBinding;, +, +	AggregateBinder(BindContext context, boolean allowRecursiveBinding) {, +		this.allowRecursiveBinding = allowRecursiveBinding;, +	}, +, +	boolean isAllowRecursiveBinding() {, +		return this.allowRecursiveBinding;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +			Object bound = bindObject(name, target, handler, context,, +					allowRecursiveBinding);, +			BindHandler handler, Context context, boolean allowRecursiveBinding), +		return bindBean(name, target, handler, context, allowRecursiveBinding);, +					aggregateBinder.isAllowRecursiveBinding());, +			BindHandler handler, Context context, boolean allowRecursiveBinding) {, +				name.append(propertyName), propertyTarget, handler, context, false);, +		if (!allowRecursiveBinding && context.hasBoundBean(type)) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +		super(context, false);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		super(context, true);]