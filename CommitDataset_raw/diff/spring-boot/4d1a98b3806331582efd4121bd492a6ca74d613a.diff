[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxOperation.java, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("operationName", this.operationName), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxOperation.java, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("operationName", this.operationName), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/reflect/ReflectiveOperationInvoker.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("target", this.target), +				.append("method", this.methodInfo.getMethod().toString()).toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxOperation.java, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("operationName", this.operationName), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/reflect/ReflectiveOperationInvoker.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("target", this.target), +				.append("method", this.methodInfo.getMethod().toString()).toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperation.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("requestPredicate", getRequestPredicate()).append("id", getId()), +				.toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxOperation.java, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("operationName", this.operationName), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/reflect/ReflectiveOperationInvoker.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("target", this.target), +				.append("method", this.methodInfo.getMethod().toString()).toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperation.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("requestPredicate", getRequestPredicate()).append("id", getId()), +				.toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxAnnotationEndpointDiscovererTests.java, +import org.springframework.util.ReflectionUtils;, +			this.thrown.expectMessage(ReflectionUtils, +					.findMethod(ClashingOperationsEndpoint.class, "getAll").toString());, +			this.thrown.expectMessage(ReflectionUtils, +					.findMethod(ClashingOperationsEndpoint.class, "getAll", String.class), +					.toString());, +			this.thrown.expectMessage(ReflectionUtils, +					.findMethod(ClashingOperationsJmxEndpointExtension.class, "getAll"), +					.toString());, +			this.thrown.expectMessage(ReflectionUtils, +					.findMethod(ClashingOperationsJmxEndpointExtension.class, "getAll",, +							String.class), +					.toString());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxOperation.java, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("operationName", this.operationName), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/reflect/ReflectiveOperationInvoker.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("target", this.target), +				.append("method", this.methodInfo.getMethod().toString()).toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperation.java, +import org.springframework.core.style.ToStringCreator;, +	@Override, +	public String toString() {, +		return new ToStringCreator(this).append("type", getType()), +				.append("invoker", getInvoker()).append("blocking", isBlocking()), +				.append("requestPredicate", getRequestPredicate()).append("id", getId()), +				.toString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/annotation/JmxAnnotationEndpointDiscovererTests.java, +import org.springframework.util.ReflectionUtils;, +			this.thrown.expectMessage(ReflectionUtils, +					.findMethod(ClashingOperationsEndpoint.class, "getAll").toString());]