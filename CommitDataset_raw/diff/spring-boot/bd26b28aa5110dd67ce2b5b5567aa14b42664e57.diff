[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, + * restricted to users having roles that match those configured in, + * {@link ManagementServerProperties}. Required roles can be overridden by, + * <code>shell.auth.spring.roles</code>., +@AutoConfigureAfter(ManagementSecurityAutoConfiguration.class), +		private ManagementServerProperties management;, +			if (this.management != null) {, +				authenticationProperties.setRoles(new String[] { this.management, +						.getSecurity().getRole() });, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, + * restricted to users having roles that match those configured in, + * {@link ManagementServerProperties}. Required roles can be overridden by, + * <code>shell.auth.spring.roles</code>., +@AutoConfigureAfter(ManagementSecurityAutoConfiguration.class), +		private ManagementServerProperties management;, +			if (this.management != null) {, +				authenticationProperties.setRoles(new String[] { this.management, +						.getSecurity().getRole() });, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			if (!(beanFactory instanceof WebApplicationContext)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, + * restricted to users having roles that match those configured in, + * {@link ManagementServerProperties}. Required roles can be overridden by, + * <code>shell.auth.spring.roles</code>., +@AutoConfigureAfter(ManagementSecurityAutoConfiguration.class), +		private ManagementServerProperties management;, +			if (this.management != null) {, +				authenticationProperties.setRoles(new String[] { this.management, +						.getSecurity().getRole() });, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			if (!(beanFactory instanceof WebApplicationContext)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import javax.annotation.PostConstruct;, +import javax.servlet.Filter;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.actuate.endpoint.Endpoint;, +import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, +import org.springframework.boot.actuate.web.ErrorController;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration;, +import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;, +import org.springframework.boot.autoconfigure.security.SecurityPrequisite;, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.config.annotation.SecurityConfigurer;, +import org.springframework.security.config.annotation.web.builders.HttpSecurity;, +import org.springframework.security.config.annotation.web.builders.WebSecurity;, +import org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer;, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;, +import org.springframework.security.web.AuthenticationEntryPoint;, +import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for security of framework endpoints., + * Many aspects of the behavior can be controller with {@link ManagementServerProperties}, + * via externalized application properties (or via an bean definition of that type to set, + * the defaults)., + * , + * <p>, + * The framework {@link Endpoint}s (used to expose application information to operations), + * include a {@link Endpoint#isSensitive() sensitive} configuration option which will be, + * used as a security hint by the filter created here., + * ]