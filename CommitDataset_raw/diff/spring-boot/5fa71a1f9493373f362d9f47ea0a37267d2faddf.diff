[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withPropertyValues("spring.datasource.url=", +					+ "jdbc:hsqldb:mem:test-" + UUID.randomUUID()), +			.withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,, +					DataSourceAutoConfiguration.class));, +	public void hikariAutoConfiguredCanUseRegisterMBeans() {, +		this.contextRunner.withPropertyValues(, +				"spring.datasource.type=" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.register-mbeans=true").run((context) -> {, +			assertThat(context).hasSingleBean(HikariDataSource.class);, +			assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()), +			MBeanServer mBeanServer = context.getBean(MBeanServer.class);, +		});, +		this.contextRunner.withPropertyValues(, +				"spring.datasource.type=" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.register-mbeans=true").run((context) -> {, +			assertThat(context).hasSingleBean(HikariDataSource.class);, +			assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()), +		});, +	public void hikariAutoConfiguredUsesJmsFlag() {, +		this.contextRunner.withPropertyValues(, +				"spring.datasource.type=" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.register-mbeans=true").run((context) -> {, +			assertThat(context).hasSingleBean(HikariDataSource.class);, +			assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()), +		});, +		this.contextRunner, +				.withPropertyValues("spring.datasource.type=" + DataSource.class.getName()), +				.run((context) ->, +						assertThat(context).doesNotHaveBean(ConnectionPool.class));, +	public void tomcatAutoConfiguredCanExposeMBeanPool() {, +		this.contextRunner.withPropertyValues(, +				"spring.datasource.type=" + DataSource.class.getName(),, +				"spring.datasource.jmx-enabled=true").run((context) -> {, +			assertThat(context).hasSingleBean(ConnectionPool.class);, +			assertThat(context.getBean(DataSourceProxy.class).createPool().getJmxPool()), +					.isSameAs(context.getBean(ConnectionPool.class));, +		});]