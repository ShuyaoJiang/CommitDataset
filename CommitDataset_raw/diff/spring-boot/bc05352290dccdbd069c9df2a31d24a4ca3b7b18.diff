[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.HashMap;, +import io.micrometer.core.instrument.Tag;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	public Response metric(@Selector String requiredMetricName,, +			@Nullable List<String> tag) {, +		Assert.isTrue(tag == null || tag.stream().allMatch((t) -> t.contains(":")),, +				"Each tag parameter must be in the form key:value");, +		List<Tag> tags = parseTags(tag);, +		Collection<Meter> meters = this.registry.find(requiredMetricName).tags(tags), +				.meters();, +		if (meters.isEmpty()) {, +			return null;, +		Map<Statistic, Double> samples = new HashMap<>();, +		Map<String, List<String>> availableTags = new HashMap<>();, +, +		for (Meter meter : meters) {, +			for (Measurement ms : meter.measure()) {, +				samples.merge(ms.getStatistic(), ms.getValue(), Double::sum);, +			}, +			for (Tag availableTag : meter.getId().getTags()) {, +				availableTags.merge(availableTag.getKey(),, +						Collections.singletonList(availableTag.getValue()),, +						(t1, t2) -> Stream.concat(t1.stream(), t2.stream()), +								.collect(Collectors.toList()));, +			}, +		tags.forEach((t) -> availableTags.remove(t.getKey()));, +, +		return new Response(requiredMetricName,, +				samples.entrySet().stream(), +						.map((sample) -> new Response.Sample(sample.getKey(),, +								sample.getValue())), +				.collect(, +						Collectors.toList()),, +				availableTags.entrySet().stream(), +						.map((tagValues) -> new Response.AvailableTag(tagValues.getKey(),, +								tagValues.getValue())), +						.collect(Collectors.toList()));, +	private List<Tag> parseTags(List<String> tags) {, +		return tags == null ? Collections.emptyList() : tags.stream().map((t) -> {, +			String[] tagParts = t.split(":", 2);, +			return Tag.of(tagParts[0], tagParts[1]);, +		}).collect(Collectors.toList());, +	/**, +	 * Response payload., +	 */, +	static class Response {, +, +		private final String name;, +, +		private final List<Sample> measurements;, +, +		private final List<AvailableTag> availableTags;, +, +		Response(String name, List<Sample> measurements,, +				List<AvailableTag> availableTags) {, +			this.name = name;, +			this.measurements = measurements;, +			this.availableTags = availableTags;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public List<Sample> getMeasurements() {, +			return this.measurements;, +		}, +, +		public List<AvailableTag> getAvailableTags() {, +			return this.availableTags;, +		}, +, +		/**, +		 * A set of tags for further dimensional drilldown and their potential values., +		 */, +		static class AvailableTag {, +, +			private final String tag;, +, +			private final List<String> values;, +, +			AvailableTag(String tag, List<String> values) {, +				this.tag = tag;, +				this.values = values;, +			}, +, +			public String getTag() {, +				return this.tag;, +			}, +, +			public List<String> getValues() {, +				return this.values;, +			}, +		static class Sample {, +			Sample(Statistic statistic, Double value) {, +	}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.HashMap;]