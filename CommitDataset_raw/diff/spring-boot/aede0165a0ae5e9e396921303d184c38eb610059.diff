[+++ b/spring-boot-cli/pom.xml, +			<artifactId>groovy</artifactId>, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy-templates</artifactId>, +			<scope>provided</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/pom.xml, +			<artifactId>groovy</artifactId>, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy-templates</artifactId>, +			<scope>provided</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +		private static final String[] GROOVY_JARS_PREFIXES = { "groovy", "antlr", "asm" };, +, +			this.groovyOnlyClassLoader = new URLClassLoader(getGroovyJars(parent), null);, +		private URL[] getGroovyJars(final ClassLoader parent) {, +			Set<URL> urls = new HashSet<URL>();, +			findGroovyJarsDirectly(parent, urls);, +			if (urls.isEmpty()) {, +				findGroovyJarsFromClassPath(parent, urls);, +			Assert.state(urls.size() > 0, "Unable to find groovy JAR");, +			return new ArrayList<URL>(urls).toArray(new URL[urls.size()]);, +		private void findGroovyJarsDirectly(ClassLoader classLoader, Set<URL> urls) {, +					for (URL url : ((URLClassLoader) classLoader).getURLs()) {, +							urls.add(url);, +		private void findGroovyJarsFromClassPath(ClassLoader parent, Set<URL> urls) {, +							urls.add(file.toURI().toURL());, +			for (String jarPrefix : GROOVY_JARS_PREFIXES) {, +				if (entry.contains("/" + jarPrefix + "-")) {, +					return true;, +				}, +			}, +			return false;, +++ b/spring-boot-cli/pom.xml, +			<artifactId>groovy</artifactId>, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy-templates</artifactId>, +			<scope>provided</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +		private static final String[] GROOVY_JARS_PREFIXES = { "groovy", "antlr", "asm" };, +, +			this.groovyOnlyClassLoader = new URLClassLoader(getGroovyJars(parent), null);, +		private URL[] getGroovyJars(final ClassLoader parent) {, +			Set<URL> urls = new HashSet<URL>();, +			findGroovyJarsDirectly(parent, urls);, +			if (urls.isEmpty()) {, +				findGroovyJarsFromClassPath(parent, urls);, +			Assert.state(urls.size() > 0, "Unable to find groovy JAR");, +			return new ArrayList<URL>(urls).toArray(new URL[urls.size()]);, +		private void findGroovyJarsDirectly(ClassLoader classLoader, Set<URL> urls) {, +					for (URL url : ((URLClassLoader) classLoader).getURLs()) {, +							urls.add(url);, +		private void findGroovyJarsFromClassPath(ClassLoader parent, Set<URL> urls) {, +							urls.add(file.toURI().toURL());, +			for (String jarPrefix : GROOVY_JARS_PREFIXES) {, +				if (entry.contains("/" + jarPrefix + "-")) {, +					return true;, +				}, +			}, +			return false;, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +import java.io.BufferedReader;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.net.URI;, +	public String getHttpOutput() {, +		return getHttpOutput("http://localhost:8080");, +	}, +, +	public String getHttpOutput(String uri) {, +		try {, +			InputStream stream = URI.create(uri).toURL().openStream();, +			BufferedReader reader = new BufferedReader(new InputStreamReader(stream));, +			String line;, +			StringBuilder result = new StringBuilder();, +			while ((line = reader.readLine()) != null) {, +				result.append(line);, +			}, +			return result.toString();, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +++ b/spring-boot-cli/pom.xml, +			<artifactId>groovy</artifactId>, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy-templates</artifactId>]