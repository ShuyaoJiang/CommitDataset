[+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/BuildPropertiesWriter.java, +import java.util.Map.Entry;, +			validateAdditionalProperties(additionalProperties);, +		private static void validateAdditionalProperties(, +				Map<String, String> additionalProperties) {, +			if (additionalProperties != null) {, +				for (Entry<String, String> property : additionalProperties.entrySet()) {, +					if (property.getValue() == null) {, +						throw new NullAdditionalPropertyValueException(property.getKey());, +					}, +				}, +			}, +		}, +, +, +	/**, +	 * Exception thrown when an additional property with a null value is encountered., +	 */, +	public static class NullAdditionalPropertyValueException, +			extends IllegalArgumentException {, +, +		public NullAdditionalPropertyValueException(String name) {, +			super("Additional property '" + name + "' is illegal as its value is null");, +		}, +, +	}, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/BuildPropertiesWriter.java, +import java.util.Map.Entry;, +			validateAdditionalProperties(additionalProperties);, +		private static void validateAdditionalProperties(, +				Map<String, String> additionalProperties) {, +			if (additionalProperties != null) {, +				for (Entry<String, String> property : additionalProperties.entrySet()) {, +					if (property.getValue() == null) {, +						throw new NullAdditionalPropertyValueException(property.getKey());, +					}, +				}, +			}, +		}, +, +, +	/**, +	 * Exception thrown when an additional property with a null value is encountered., +	 */, +	public static class NullAdditionalPropertyValueException, +			extends IllegalArgumentException {, +, +		public NullAdditionalPropertyValueException(String name) {, +			super("Additional property '" + name + "' is illegal as its value is null");, +		}, +, +	}, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java, +import org.springframework.boot.loader.tools.BuildPropertiesWriter.NullAdditionalPropertyValueException;, +	 * Additional properties to store in the build-info.properties. Each entry is prefixed, +	 * by {@code build.} in the generated build-info.properties., +		catch (NullAdditionalPropertyValueException ex) {, +			throw new MojoFailureException(, +					"Failed to generated build-info.properties. " + ex.getMessage(), ex);, +		}]