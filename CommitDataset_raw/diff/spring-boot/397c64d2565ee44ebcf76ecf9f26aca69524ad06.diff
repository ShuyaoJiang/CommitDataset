[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Schema action to take at startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Schema action to take at startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		SchemaAction schemaAction = this.propertyResolver, +				.getProperty("schemaAction", SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Schema action to take at startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		SchemaAction schemaAction = this.propertyResolver, +				.getProperty("schemaAction", SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.data.cassandra.schema-action",, +    "providers": [, +      {, +        "name": "handle-as",, +        "parameters": {, +          "target": "org.springframework.data.cassandra.config.SchemaAction", +        }, +      }, +    ], +  },, +  {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Schema action to take at startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		SchemaAction schemaAction = this.propertyResolver, +				.getProperty("schemaAction", SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.data.cassandra.schema-action",, +    "providers": [, +      {, +        "name": "handle-as",, +        "parameters": {, +          "target": "org.springframework.data.cassandra.config.SchemaAction", +        }, +      }, +    ], +  },, +  {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import com.datastax.driver.core.Session;, +import org.junit.After;, +import org.junit.Rule;, +import org.junit.Test;, +, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.cassandra.city.City;, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.data.cassandra.config.CassandraSessionFactoryBean;, +import org.springframework.data.cassandra.config.SchemaAction;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, + * Tests for {@link CassandraDataAutoConfiguration} that require a Cassandra instance., + * @author Mark Paluch, +, +	@Rule, +	public final CassandraTestServer cassandra = new CassandraTestServer();, +, +	private AnnotationConfigApplicationContext context;, +, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +	@Test, +	public void hasDefaultSchemaActionSet() {, +		this.context = new AnnotationConfigApplicationContext();, +		String cityPackage = City.class.getPackage().getName();, +		AutoConfigurationPackages.register(this.context, cityPackage);, +		this.context.register(CassandraAutoConfiguration.class,, +				CassandraDataAutoConfiguration.class);, +		this.context.refresh();]