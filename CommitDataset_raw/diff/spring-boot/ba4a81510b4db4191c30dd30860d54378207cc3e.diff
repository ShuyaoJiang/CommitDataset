[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		try {, +		finally {, +			enhanceTrace(trace, response);, +			this.traceRepository.add(trace);, +		}, +	}, +, +	protected void enhanceTrace(Map<String, Object> trace, HttpServletResponse response) {, +		Map<String, String> headers = new LinkedHashMap<String, String>();, +		for (String header : response.getHeaderNames()) {, +			String value = response.getHeader(header);, +			headers.put(header, value);, +		}, +		@SuppressWarnings("unchecked"), +		Map<String, Object> allHeaders = (Map<String, Object>) trace.get("headers");, +		allHeaders.put("response", headers);, +	}, +		Map<String, Object> headers = new LinkedHashMap<String, Object>();, +			headers.put(name, value);, +		Map<String, Object> allHeaders = new LinkedHashMap<String, Object>();, +		allHeaders.put("request", headers);, +		trace.put("headers", allHeaders);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		try {, +		finally {, +			enhanceTrace(trace, response);, +			this.traceRepository.add(trace);, +		}, +	}, +, +	protected void enhanceTrace(Map<String, Object> trace, HttpServletResponse response) {, +		Map<String, String> headers = new LinkedHashMap<String, String>();, +		for (String header : response.getHeaderNames()) {, +			String value = response.getHeader(header);, +			headers.put(header, value);, +		}, +		@SuppressWarnings("unchecked"), +		Map<String, Object> allHeaders = (Map<String, Object>) trace.get("headers");, +		allHeaders.put("response", headers);, +	}, +		Map<String, Object> headers = new LinkedHashMap<String, Object>();, +			headers.put(name, value);, +		Map<String, Object> allHeaders = new LinkedHashMap<String, Object>();, +		allHeaders.put("request", headers);, +		trace.put("headers", allHeaders);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, +import org.springframework.mock.web.MockHttpServletResponse;, +		@SuppressWarnings("unchecked"), +		Map<String, Object> map = (Map<String, Object>) trace.get("headers");, +		assertEquals("{Accept=application/json}", map.get("request").toString());, +	}, +, +	@Test, +	public void filterDumpsResponse() {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		response.addHeader("Content-Type", "application/json");, +		Map<String, Object> trace = this.filter.getTrace(request);, +		this.filter.enhanceTrace(trace, response);, +		@SuppressWarnings("unchecked"), +		Map<String, Object> map = (Map<String, Object>) trace.get("headers");, +		assertEquals("{Content-Type=application/json}", map.get("response").toString());]