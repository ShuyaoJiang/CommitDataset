[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +import javax.persistence.EntityManagerFactory;, +	@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,, +			EntityManagerFactory.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +import javax.persistence.EntityManagerFactory;, +	@ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class,, +			EntityManagerFactory.class }), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import javax.persistence.EntityManagerFactory;, +	public void usesManuallyDefinedLocalContainerEntityManagerFactoryBeanIfAvailable() {, +		setupTestConfiguration(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class);, +	public void usesManuallyDefinedEntityManagerFactoryIfAvailable() {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false");, +		setupTestConfiguration(TestConfigurationWithEntityManagerFactory.class);, +		this.context.refresh();, +		EntityManagerFactory factoryBean = this.context, +				.getBean(EntityManagerFactory.class);, +		Map<String, Object> map = factoryBean.getProperties();, +		assertThat(map.get("configured"), equalTo((Object) "manually"));, +	}, +, +	@Test, +	protected static class TestConfigurationWithLocalContainerEntityManagerFactoryBean, +			extends TestConfiguration {, +, +	}, +, +	@Configuration, +	protected static class TestConfigurationWithEntityManagerFactory extends, +			TestConfiguration {, +, +		@Bean, +		public EntityManagerFactory entityManagerFactory(DataSource dataSource,, +				JpaVendorAdapter adapter) {, +			LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();, +			factoryBean.setJpaVendorAdapter(adapter);, +			factoryBean.setDataSource(dataSource);, +			factoryBean.setPersistenceUnitName("manually-configured");, +			Map<String, Object> properties = new HashMap<String, Object>();, +			properties.put("configured", "manually");, +			properties.put("hibernate.transaction.jta.platform", NoJtaPlatform.INSTANCE);, +			factoryBean.setJpaPropertyMap(properties);, +			factoryBean.afterPropertiesSet();, +			return factoryBean.getObject();, +		}, +, +		@Bean, +		public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {, +			JpaTransactionManager transactionManager = new JpaTransactionManager();, +			transactionManager.setEntityManagerFactory(emf);, +			return transactionManager;, +		}, +]