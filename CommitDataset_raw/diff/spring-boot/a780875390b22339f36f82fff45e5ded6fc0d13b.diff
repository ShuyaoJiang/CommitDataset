[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +import org.springframework.beans.factory.support.BeanNameGenerator;, +import org.springframework.context.support.GenericApplicationContext;, +	public SELF withInitializer(ApplicationContextInitializer<? super C> initializer) {, +	 * Register the specified user bean with the {@link ApplicationContext}. The bean name, +	 * is generated from the configured {@link BeanNameGenerator} on the underlying, +	 * context., +	 * <p>, +	 * Such beans are registered after regular {@linkplain #withUserConfiguration(Class[]), +	 * user configurations} in the order of registration., +	 * @param beanType the type of the bean, +	 * @param beanDefinition a supplier for the bean, +	 * @param <T> the type of the bean, +	 * @return a new instance with the updated bean, +	 */, +	public <T> SELF withBean(Class<T> beanType, Supplier<T> beanDefinition) {, +		return withBean(null, beanType, beanDefinition);, +	}, +, +	/**, +	 * Register the specified user bean with the {@link ApplicationContext}. The bean name, +	 * is generated from the configured {@link BeanNameGenerator} on the underlying, +	 * context., +	 * <p>, +	 * Such beans are registered after regular {@linkplain #withUserConfiguration(Class[]), +	 * user configurations} in the order of registration., +	 * @param beanType the type of the bean, +	 * @param beanDefinition a function that accepts the context and return the bean, +	 * @param <T> the type of the bean, +	 * @return a new instance with the updated bean, +	 */, +	public <T> SELF withBean(Class<T> beanType, Function<? super C, T> beanDefinition) {, +		return withBean(null, beanType, beanDefinition);, +	}, +, +	/**, +	 * Register the specified user bean with the {@link ApplicationContext}. If no bean, +	 * name is provided, a default one is generated from the configured, +	 * {@link BeanNameGenerator} on the underlying context., +	 * <p>, +	 * Such beans are registered after regular {@linkplain #withUserConfiguration(Class[]), +	 * user configurations} in the order of registration., +	 * @param beanName the name of the bean (may be {@code null}), +	 * @param beanType the type of the bean, +	 * @param beanDefinition a supplier for the bean, +	 * @param <T> the type of the bean, +	 * @return a new instance with the updated bean, +	 */, +	public <T> SELF withBean(String beanName, Class<T> beanType,, +			Supplier<T> beanDefinition) {, +		return withBean(beanName, beanType, (context) -> beanDefinition.get());, +	}, +, +	/**, +	 * Register the specified user bean with the {@link ApplicationContext}. If no bean, +	 * name is provided, a default one is generated from the configured, +	 * {@link BeanNameGenerator} on the underlying context., +	 * <p>, +	 * Such beans are registered after regular {@linkplain #withUserConfiguration(Class[]), +	 * user configurations} in the order of registration., +	 * @param beanName the name of the bean (may be {@code null}), +	 * @param beanType the type of the bean, +	 * @param beanDefinition a function that accepts the context and return the bean, +	 * @param <T> the type of the bean, +	 * @return a new instance with the updated bean, +	 */, +	public <T> SELF withBean(String beanName, Class<T> beanType,, +			Function<? super C, T> beanDefinition) {, +		return withInitializer(, +				beanDefinitionRegistrar(beanName, beanType, beanDefinition));, +	}, +, +	private <T> ApplicationContextInitializer<? super C> beanDefinitionRegistrar(, +			String beanName, Class<T> beanType, Function<? super C, T> beanDefinition) {, +		return (context) -> {, +			Assert.isInstanceOf(GenericApplicationContext.class, context);, +			((GenericApplicationContext) context).registerBean(beanName, beanType,, +					() -> beanDefinition.apply(context));, +		};, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +import org.springframework.beans.factory.support.BeanNameGenerator;, +import org.springframework.context.support.GenericApplicationContext;, +	public SELF withInitializer(ApplicationContextInitializer<? super C> initializer) {, +	 * Register the specified user bean with the {@link ApplicationContext}. The bean name, +	 * is generated from the configured {@link BeanNameGenerator} on the underlying, +	 * context., +	 * <p>, +	 * Such beans are registered after regular {@linkplain #withUserConfiguration(Class[]), +	 * user configurations} in the order of registration., +	 * @param beanType the type of the bean, +	 * @param beanDefinition a supplier for the bean, +	 * @param <T> the type of the bean, +	 * @return a new instance with the updated bean, +	 */, +	public <T> SELF withBean(Class<T> beanType, Supplier<T> beanDefinition) {, +		return withBean(null, beanType, beanDefinition);, +	}]