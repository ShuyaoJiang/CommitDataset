[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.util.StringUtils;, + * @author Eddú Meléndez, +			List<String> roles = Arrays.asList(StringUtils.trimArrayElements(StringUtils, +					.commaDelimitedListToStringArray(this.roleResolver.getProperty("roles"))));, +			if (roles.isEmpty()) {, +				roles = Collections.singletonList("ROLE_ADMIN");, +			}, +				for (String role : roles) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.util.StringUtils;, + * @author Eddú Meléndez, +			List<String> roles = Arrays.asList(StringUtils.trimArrayElements(StringUtils, +					.commaDelimitedListToStringArray(this.roleResolver.getProperty("roles"))));, +			if (roles.isEmpty()) {, +				roles = Collections.singletonList("ROLE_ADMIN");, +			}, +				for (String role : roles) {, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, + * @author Eddú Meléndez, +	private static final PropertySource<?> SECURITY_ROLES = new MapPropertySource("test",, +			Collections.<String, Object>singletonMap("management.security.roles",, +					"HERO, USER"));, +, +	public void secureCustomRole() {, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +		this.environment.getPropertySources().addLast(SECURITY_ROLES);, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(this.user);, +		assertThat(result instanceof Health).isTrue();, +		assertThat(((Health) result).getStatus() == Status.UP).isTrue();, +		assertThat(((Health) result).getDetails().get("foo")).isEqualTo("bar");, +	}, +, +	@Test]