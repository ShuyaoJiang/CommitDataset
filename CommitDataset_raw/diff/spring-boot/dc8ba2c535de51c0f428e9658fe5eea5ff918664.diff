[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (this.profiles.isEmpty()) {, +				for (String defaultProfile : this.environment.getDefaultProfiles()) {, +					if (!this.profiles.contains(defaultProfile)) {, +						this.profiles.add(defaultProfile);, +					}, +				}, +			}, +, +			if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (this.profiles.isEmpty()) {, +				for (String defaultProfile : this.environment.getDefaultProfiles()) {, +					if (!this.profiles.contains(defaultProfile)) {, +						this.profiles.add(defaultProfile);, +					}, +				}, +			}, +, +			if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, +import java.util.Collections;, +		if (values.isEmpty()) {, +			values = Collections.singleton("");, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (this.profiles.isEmpty()) {, +				for (String defaultProfile : this.environment.getDefaultProfiles()) {, +					if (!this.profiles.contains(defaultProfile)) {, +						this.profiles.add(defaultProfile);, +					}, +				}, +			}, +, +			if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, +import java.util.Collections;, +		if (values.isEmpty()) {, +			values = Collections.singleton("");, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +	private static final String[] DEFAULT_PROFILES = new String[] { "^\\s*$" };, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (this.profiles.isEmpty()) {, +				for (String defaultProfile : this.environment.getDefaultProfiles()) {, +					if (!this.profiles.contains(defaultProfile)) {, +						this.profiles.add(defaultProfile);, +					}, +				}, +			}, +, +			if (resource != null && resource.exists()) {, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, +import java.util.Collections;, +		if (values.isEmpty()) {, +			values = Collections.singleton("");, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +	private static final String[] DEFAULT_PROFILES = new String[] { "^\\s*$" };, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void loadDefaultPropertiesFile() throws Exception {, +		this.environment.setDefaultProfiles("thedefault");, +		this.initializer.setSearchNames("testprofiles");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("the.property");, +		assertThat(property, equalTo("fromdefaultpropertiesfile"));, +	}, +, +	@Test, +	public void loadProfileEmptySameAsNotSpecified() throws Exception {, +		this.initializer.setSearchNames("testprofilesempty");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("fromemptyprofile"));, +	}, +, +	@Test, +	public void loadDefaultYamlDocument() throws Exception {, +		this.environment.setDefaultProfiles("thedefault");, +		this.initializer.setSearchNames("testprofilesdocument");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("fromdefaultprofile"));, +	}, +, +	@Test, +	public void loadDefaultYamlDocumentNotActivated() throws Exception {, +		this.environment.setDefaultProfiles("thedefault");, +		this.environment.setActiveProfiles("other");, +		this.initializer.setSearchNames("testprofilesdocument");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("fromotherprofile"));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (this.profiles.isEmpty()) {, +				for (String defaultProfile : this.environment.getDefaultProfiles()) {, +					if (!this.profiles.contains(defaultProfile)) {]