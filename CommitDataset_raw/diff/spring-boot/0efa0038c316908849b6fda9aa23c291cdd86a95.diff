[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadata.java, + * @param <T> the data source type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadata.java, + * @param <T> the data source type, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/AbstractJsonMarshalTester.java, + *         assertThat(json.read("expected.json")).isEqualTo(object);, + * @param <T> the type under test, +	 * @param value the source value (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * default implementation delegates to {@link #readObject(Reader, ResolvableType)}., +	 * @param inputStream the source input stream (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * @param reader the source reader (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * Utility class used to support field initialization. Used by subclasses to support, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadata.java, + * @param <T> the data source type, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/AbstractJsonMarshalTester.java, + *         assertThat(json.read("expected.json")).isEqualTo(object);, + * @param <T> the type under test, +	 * @param value the source value (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * default implementation delegates to {@link #readObject(Reader, ResolvableType)}., +	 * @param inputStream the source input stream (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * @param reader the source reader (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * Utility class used to support field initialization. Used by subclasses to support, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/BasicJsonTester.java, + * payloads created from any source, for example:<pre class="code">, + *     private BasicJsonTester json = new BasicJsonTester(getClass());, + *     public void testWriteJson() throws IOException {, +	 * @param resourceLoadClass the source class used to load the resource, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadata.java, + * @param <T> the data source type, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/AbstractJsonMarshalTester.java, + *         assertThat(json.read("expected.json")).isEqualTo(object);, + * @param <T> the type under test, +	 * @param value the source value (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * default implementation delegates to {@link #readObject(Reader, ResolvableType)}., +	 * @param inputStream the source input stream (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * @param reader the source reader (never {@code null}), +	 * @param type the resulting type (never {@code null}), +	 * Utility class used to support field initialization. Used by subclasses to support, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/BasicJsonTester.java, + * payloads created from any source, for example:<pre class="code">, + *     private BasicJsonTester json = new BasicJsonTester(getClass());, + *     public void testWriteJson() throws IOException {, +	 * @param resourceLoadClass the source class used to load the resource, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/GsonTester.java, + *     public void testWriteJson() throws IOException {, + * @param <T> the type under test, +	 * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester, +	 * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester, +	 * {@link FieldInitializer} for Gson., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, + * @param <T> the source data type, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/Buffer.java, + * @param <T> the value type, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizer.java, + * @param <T> the type of the {@link CacheManager}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadata.java]