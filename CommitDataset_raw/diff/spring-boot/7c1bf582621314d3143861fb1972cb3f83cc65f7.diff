[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +If several profiles are specified, a last wins strategy applies. For example, profiles, +specified by the `spring.active.profiles` property are added after those configured via, +the `SpringApplication` API and therefore take precedence., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +If several profiles are specified, a last wins strategy applies. For example, profiles, +specified by the `spring.active.profiles` property are added after those configured via, +the `SpringApplication` API and therefore take precedence., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Stephane Nicoll, +, +			Set<String> initialActiveProfiles = null;, +				initialActiveProfiles = maybeActivateProfiles(, +			List<String> list = filterEnvironmentProfiles(initialActiveProfiles != null, +					? initialActiveProfiles : Collections.<String>emptySet());, +		/**, +		 * Return the active profiles that have not been processed yet., +		 * <p>If a profile is enabled via both {@link #ACTIVE_PROFILES_PROPERTY} and, +		 * {@link ConfigurableEnvironment#addActiveProfile(String)} it needs to be, +		 * filtered so that the {@link #ACTIVE_PROFILES_PROPERTY} value takes, +		 * precedence., +		 * <p>Concretely, if the "cloud" profile is enabled via the environment,, +		 * it will take less precedence that any profile set via the, +		 * {@link #ACTIVE_PROFILES_PROPERTY}., +		 * @param initialActiveProfiles the profiles that have been enabled via, +		 * {@link #ACTIVE_PROFILES_PROPERTY}, +		 * @return the additional profiles from the environment to enable, +		 */, +		private List<String> filterEnvironmentProfiles(Set<String> initialActiveProfiles) {, +			List<String> additionalProfiles = new ArrayList<String>();, +			for (String profile : this.environment.getActiveProfiles()) {, +				if (!initialActiveProfiles.contains(profile)) {, +					additionalProfiles.add(profile);, +				}, +			}, +			return additionalProfiles;, +		}, +, +		private Set<String> maybeActivateProfiles(Object value) {, +				return Collections.emptySet();, +			return profiles;, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +If several profiles are specified, a last wins strategy applies. For example, profiles, +specified by the `spring.active.profiles` property are added after those configured via, +the `SpringApplication` API and therefore take precedence., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Stephane Nicoll, +, +			Set<String> initialActiveProfiles = null;, +				initialActiveProfiles = maybeActivateProfiles(, +			List<String> list = filterEnvironmentProfiles(initialActiveProfiles != null, +					? initialActiveProfiles : Collections.<String>emptySet());, +		/**, +		 * Return the active profiles that have not been processed yet., +		 * <p>If a profile is enabled via both {@link #ACTIVE_PROFILES_PROPERTY} and, +		 * {@link ConfigurableEnvironment#addActiveProfile(String)} it needs to be, +		 * filtered so that the {@link #ACTIVE_PROFILES_PROPERTY} value takes, +		 * precedence., +		 * <p>Concretely, if the "cloud" profile is enabled via the environment,, +		 * it will take less precedence that any profile set via the, +		 * {@link #ACTIVE_PROFILES_PROPERTY}., +		 * @param initialActiveProfiles the profiles that have been enabled via, +		 * {@link #ACTIVE_PROFILES_PROPERTY}, +		 * @return the additional profiles from the environment to enable, +		 */, +		private List<String> filterEnvironmentProfiles(Set<String> initialActiveProfiles) {, +			List<String> additionalProfiles = new ArrayList<String>();, +			for (String profile : this.environment.getActiveProfiles()) {, +				if (!initialActiveProfiles.contains(profile)) {, +					additionalProfiles.add(profile);, +				}, +			}, +			return additionalProfiles;, +		}, +, +		private Set<String> maybeActivateProfiles(Object value) {, +				return Collections.emptySet();, +			return profiles;, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + * Copyright 2012-2015 the original author or authors., +import ch.qos.logback.classic.BasicConfigurator;, +import ch.qos.logback.classic.Logger;, +import ch.qos.logback.classic.LoggerContext;, +import org.junit.Before;, +import org.slf4j.LoggerFactory;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.boot.test.OutputCapture;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +	@Rule, +	public OutputCapture out = new OutputCapture();, +, +	@Before, +	public void resetLogging() {, +		LoggerContext loggerContext = ((Logger) LoggerFactory.getLogger(getClass())), +				.getLoggerContext();, +		loggerContext.reset();, +		BasicConfigurator.configure(loggerContext);, +	}]