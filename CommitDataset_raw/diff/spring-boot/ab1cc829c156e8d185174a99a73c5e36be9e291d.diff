[+++ b/spring-boot-samples/pom.xml, +		<module>spring-boot-sample-data-jooq</module>, +++ b/spring-boot-samples/pom.xml, +		<module>spring-boot-sample-data-jooq</module>, +++ b/spring-boot-samples/spring-boot-sample-jooq/README.adoc, +== jOOQ Sample, +, +To rerun the code generator:, +, +[indent=0], +----, +	$ rm -fr gensrc, +	$ mvn clean generate-sources -Pgenerate, +----, +++ b/spring-boot-samples/pom.xml, +		<module>spring-boot-sample-data-jooq</module>, +++ b/spring-boot-samples/spring-boot-sample-jooq/README.adoc, +== jOOQ Sample, +, +To rerun the code generator:, +, +[indent=0], +----, +	$ rm -fr gensrc, +	$ mvn clean generate-sources -Pgenerate, +----, +++ b/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Keys.java, +/**, + * This class is generated by jOOQ, + */, +package sample.jooq.domain;, +, +, +import javax.annotation.Generated;, +, +import org.jooq.ForeignKey;, +import org.jooq.UniqueKey;, +import org.jooq.impl.AbstractKeys;, +, +import sample.jooq.domain.tables.Author;, +import sample.jooq.domain.tables.Book;, +import sample.jooq.domain.tables.BookStore;, +import sample.jooq.domain.tables.BookToBookStore;, +import sample.jooq.domain.tables.Language;, +import sample.jooq.domain.tables.records.AuthorRecord;, +import sample.jooq.domain.tables.records.BookRecord;, +import sample.jooq.domain.tables.records.BookStoreRecord;, +import sample.jooq.domain.tables.records.BookToBookStoreRecord;, +import sample.jooq.domain.tables.records.LanguageRecord;, +, +, +/**, + * A class modelling foreign key relationships between tables of the <code>PUBLIC</code> , + * schema, + */, +@Generated(, +	value = {, +		"http://www.jooq.org",, +		"jOOQ version:3.6.2", +	},, +	comments = "This class is generated by jOOQ", +), +@SuppressWarnings({ "all", "unchecked", "rawtypes" }), +public class Keys {, +, +	// -------------------------------------------------------------------------, +	// IDENTITY definitions, +	// -------------------------------------------------------------------------, +, +, +	// -------------------------------------------------------------------------, +	// UNIQUE and PRIMARY KEY definitions, +	// -------------------------------------------------------------------------, +, +	public static final UniqueKey<LanguageRecord> CONSTRAINT_C = UniqueKeys0.CONSTRAINT_C;, +	public static final UniqueKey<AuthorRecord> CONSTRAINT_7 = UniqueKeys0.CONSTRAINT_7;, +	public static final UniqueKey<BookRecord> CONSTRAINT_1 = UniqueKeys0.CONSTRAINT_1;, +	public static final UniqueKey<BookStoreRecord> CONSTRAINT_F = UniqueKeys0.CONSTRAINT_F;, +	public static final UniqueKey<BookToBookStoreRecord> CONSTRAINT_2 = UniqueKeys0.CONSTRAINT_2;, +, +	// -------------------------------------------------------------------------, +	// FOREIGN KEY definitions, +	// -------------------------------------------------------------------------, +, +	public static final ForeignKey<BookRecord, AuthorRecord> FK_BOOK_AUTHOR = ForeignKeys0.FK_BOOK_AUTHOR;, +	public static final ForeignKey<BookRecord, LanguageRecord> FK_BOOK_LANGUAGE = ForeignKeys0.FK_BOOK_LANGUAGE;, +	public static final ForeignKey<BookToBookStoreRecord, BookStoreRecord> FK_B2BS_BOOK_STORE = ForeignKeys0.FK_B2BS_BOOK_STORE;, +	public static final ForeignKey<BookToBookStoreRecord, BookRecord> FK_B2BS_BOOK = ForeignKeys0.FK_B2BS_BOOK;, +, +	// -------------------------------------------------------------------------, +	// [#1459] distribute members to avoid static initialisers > 64kb, +	// -------------------------------------------------------------------------, +, +	private static class UniqueKeys0 extends AbstractKeys {, +		public static final UniqueKey<LanguageRecord> CONSTRAINT_C = createUniqueKey(Language.LANGUAGE, Language.LANGUAGE.ID);, +		public static final UniqueKey<AuthorRecord> CONSTRAINT_7 = createUniqueKey(Author.AUTHOR, Author.AUTHOR.ID);, +		public static final UniqueKey<BookRecord> CONSTRAINT_1 = createUniqueKey(Book.BOOK, Book.BOOK.ID);, +		public static final UniqueKey<BookStoreRecord> CONSTRAINT_F = createUniqueKey(BookStore.BOOK_STORE, BookStore.BOOK_STORE.NAME);, +		public static final UniqueKey<BookToBookStoreRecord> CONSTRAINT_2 = createUniqueKey(BookToBookStore.BOOK_TO_BOOK_STORE, BookToBookStore.BOOK_TO_BOOK_STORE.NAME, BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID);, +	}]