[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, + * or using a {@code spring.pid.file} property in the Spring {@link Environment}., + * <p>, + * If PID file can not be created no exception is reported. This behavior can be changed, + * by assigning {@code true} to System property or environment variable named, + * {@code PID_FAIL_ON_WRITE_ERROR} (or "pid_fail_on_write_error") or to, + * {@code spring.pid.fail-on-write-error} property in the Spring {@link Environment}., + * <p>, + * Note: access to the Spring {@link Environment} is only possible when the, + * {@link #setTriggerEventType(Class) triggerEventType} is set to, + * {@link ApplicationEnvironmentPreparedEvent} or {@link ApplicationPreparedEvent}., + * @author Tomasz Przybyla, +	private static final List<Property> FILE_PROPERTIES;, +	static {, +		List<Property> properties = new ArrayList<Property>();, +		properties.add(new SpringProperty("spring.pid.", "file"));, +		properties.add(new SpringProperty("spring.", "pidfile"));, +		properties.add(new SystemProperty("PIDFILE"));, +		FILE_PROPERTIES = Collections.unmodifiableList(properties);, +	}, +	private static final List<Property> FAIL_ON_WRITE_ERROR_PROPERTIES;, +	static {, +		List<Property> properties = new ArrayList<Property>();, +		properties.add(new SpringProperty("spring.pid.", "fail-on-write-error"));, +		properties.add(new SystemProperty("PID_FAIL_ON_WRITE_ERROR"));, +		FAIL_ON_WRITE_ERROR_PROPERTIES = Collections.unmodifiableList(properties);, +	}, +					String message = String, +							.format("Cannot create pid file %s", this.file);, +					if (failOnWriteError(event)) {, +						throw new IllegalStateException(message, ex);, +					}, +					logger.warn(message, ex);, +		String override = getProperty(event, FILE_PROPERTIES);, +	private boolean failOnWriteError(SpringApplicationEvent event) {, +		String value = getProperty(event, FAIL_ON_WRITE_ERROR_PROPERTIES);, +		return (value == null ? false : Boolean.parseBoolean(value));, +, +	private String getProperty(SpringApplicationEvent event, List<Property> candidates) {, +		for (Property candidate : candidates) {, +			String value = candidate.getValue(event);, +			if (value != null) {, +				return value;, +			}, +, +	/**, +	 * Provides access to a property value., +	 */, +	private static interface Property {, +, +		String getValue(SpringApplicationEvent event);, +, +	}, +, +	/**, +	 * {@link Property} obtained from Spring's {@link Environment}., +	 */, +	private static class SpringProperty implements Property {, +, +		private final String prexfix;, +, +		private final String key;, +, +		public SpringProperty(String prefix, String key) {, +			this.prexfix = prefix;, +			this.key = key;, +		}, +, +		@Override, +		public String getValue(SpringApplicationEvent event) {, +			Environment environment = getEnvironment(event);, +			if (environment == null) {, +				return null;, +			}, +			return new RelaxedPropertyResolver(environment, this.prexfix), +					.getProperty(this.key);, +		}, +, +		private Environment getEnvironment(SpringApplicationEvent event) {, +			if (event instanceof ApplicationEnvironmentPreparedEvent) {, +				return ((ApplicationEnvironmentPreparedEvent) event).getEnvironment();, +			}, +			if (event instanceof ApplicationPreparedEvent) {, +				return ((ApplicationPreparedEvent) event).getApplicationContext(), +						.getEnvironment();, +			}, +			return null;, +		}, +, +	}, +, +	/**, +	 * {@link Property} obtained from {@link SystemProperties}., +	 */, +	private static class SystemProperty implements Property {, +, +		private final String[] properties;]