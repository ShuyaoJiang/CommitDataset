[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, +		StoreType required = SessionStoreMappings.getType(((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, +		StoreType required = SessionStoreMappings.getType(((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +	static StoreType getType(String configurationClassName) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, +		StoreType required = SessionStoreMappings.getType(((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +	static StoreType getType(String configurationClassName) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +				findGroovyJarsFromClassPath(urls);, +		private void findGroovyJarsFromClassPath(Set<URL> urls) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, +		StoreType required = SessionStoreMappings.getType(((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +	static StoreType getType(String configurationClassName) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +				findGroovyJarsFromClassPath(urls);, +		private void findGroovyJarsFromClassPath(Set<URL> urls) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +			ImportCustomizer importCustomizer = new SmartImportCustomizer(source);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, +		super(message, cause);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName);, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		builder.tags(tags).description(description).register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +			return getDirectFactoryBeanGeneric(beanFactory, definition);]