[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				.properties(vendorProperties).mappingResources(getMappingResources()), +				.jta(isJta()).build();, +	private String[] getMappingResources() {, +		List<String> mappingResources = this.properties.getMappingResources();, +		return mappingResources.toArray(new String[mappingResources.size()]);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				.properties(vendorProperties).mappingResources(getMappingResources()), +				.jta(isJta()).build();, +	private String[] getMappingResources() {, +		List<String> mappingResources = this.properties.getMappingResources();, +		return mappingResources.toArray(new String[mappingResources.size()]);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import java.util.ArrayList;, +import java.util.List;, +	 * Mapping resources (equivalent to "mapping-file" entries in persistence.xml)., +	 */, +	private final List<String> mappingResources = new ArrayList<>();, +, +	/**, +	public List<String> getMappingResources() {, +		return this.mappingResources;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				.properties(vendorProperties).mappingResources(getMappingResources()), +				.jta(isJta()).build();, +	private String[] getMappingResources() {, +		List<String> mappingResources = this.properties.getMappingResources();, +		return mappingResources.toArray(new String[mappingResources.size()]);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import java.util.ArrayList;, +import java.util.List;, +	 * Mapping resources (equivalent to "mapping-file" entries in persistence.xml)., +	 */, +	private final List<String> mappingResources = new ArrayList<>();, +, +	/**, +	public List<String> getMappingResources() {, +		return this.mappingResources;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.orm.jpa.mapping.NonAnnotatedEntity;, +	@Test, +	public void customResourceMapping() {, +		contextRunner(), +				.withClassLoader(new HideDataScriptClassLoader()), +				.withPropertyValues(, +						"spring.datasource.data:classpath:/db/non-annotated-data.sql",, +						"spring.jpa.mapping-resources=META-INF/mappings/non-annotated.xml"), +				.run((context) -> {, +					EntityManager em = context.getBean(EntityManagerFactory.class), +							.createEntityManager();, +					NonAnnotatedEntity found = em.find(NonAnnotatedEntity.class, 2000L);, +					assertThat(found).isNotNull();, +					assertThat(found.getValue()).isEqualTo("Test");, +				});, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				.properties(vendorProperties).mappingResources(getMappingResources()), +				.jta(isJta()).build();, +	private String[] getMappingResources() {, +		List<String> mappingResources = this.properties.getMappingResources();, +		return mappingResources.toArray(new String[mappingResources.size()]);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import java.util.ArrayList;, +import java.util.List;, +	 * Mapping resources (equivalent to "mapping-file" entries in persistence.xml)., +	 */, +	private final List<String> mappingResources = new ArrayList<>();, +, +	/**, +	public List<String> getMappingResources() {, +		return this.mappingResources;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.orm.jpa.mapping.NonAnnotatedEntity;, +	@Test, +	public void customResourceMapping() {, +		contextRunner(), +				.withClassLoader(new HideDataScriptClassLoader()), +				.withPropertyValues(, +						"spring.datasource.data:classpath:/db/non-annotated-data.sql",, +						"spring.jpa.mapping-resources=META-INF/mappings/non-annotated.xml"), +				.run((context) -> {, +					EntityManager em = context.getBean(EntityManagerFactory.class), +							.createEntityManager();, +					NonAnnotatedEntity found = em.find(NonAnnotatedEntity.class, 2000L);, +					assertThat(found).isNotNull();]