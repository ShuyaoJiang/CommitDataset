[+++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.boot.developertools.tunnel.server.HttpTunnelServer;, +import org.springframework.boot.developertools.tunnel.server.HttpTunnelServerHandler;, +import org.springframework.boot.developertools.tunnel.server.RemoteDebugPortProvider;, +import org.springframework.boot.developertools.tunnel.server.SocketTargetServerConnection;, +	/**, +	 * Configuration for remote debug HTTP tunneling., +	 */, +	@ConditionalOnProperty(prefix = "spring.developertools.remote.debug", name = "enabled", matchIfMissing = true), +	static class RemoteDebugTunnelConfiguration {, +, +		@Autowired, +		private DeveloperToolsProperties properties;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteDebugHanderMapper"), +		public UrlHandlerMapper remoteDebugHanderMapper(, +				@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {, +			String url = this.properties.getRemote().getContextPath() + "/debug";, +			logger.warn("Listening for remote debug traffic on " + url);, +			Handler handler = new HttpTunnelServerHandler(server);, +			return new UrlHandlerMapper(url, handler);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer"), +		public HttpTunnelServer remoteDebugHttpTunnelServer() {, +			return new HttpTunnelServer(new SocketTargetServerConnection(, +					new RemoteDebugPortProvider()));, +		}, +, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.boot.developertools.tunnel.server.HttpTunnelServer;, +import org.springframework.boot.developertools.tunnel.server.HttpTunnelServerHandler;, +import org.springframework.boot.developertools.tunnel.server.RemoteDebugPortProvider;, +import org.springframework.boot.developertools.tunnel.server.SocketTargetServerConnection;, +	/**, +	 * Configuration for remote debug HTTP tunneling., +	 */, +	@ConditionalOnProperty(prefix = "spring.developertools.remote.debug", name = "enabled", matchIfMissing = true), +	static class RemoteDebugTunnelConfiguration {, +, +		@Autowired, +		private DeveloperToolsProperties properties;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteDebugHanderMapper"), +		public UrlHandlerMapper remoteDebugHanderMapper(, +				@Qualifier("remoteDebugHttpTunnelServer") HttpTunnelServer server) {, +			String url = this.properties.getRemote().getContextPath() + "/debug";, +			logger.warn("Listening for remote debug traffic on " + url);, +			Handler handler = new HttpTunnelServerHandler(server);, +			return new UrlHandlerMapper(url, handler);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteDebugHttpTunnelServer"), +		public HttpTunnelServer remoteDebugHttpTunnelServer() {, +			return new HttpTunnelServer(new SocketTargetServerConnection(, +					new RemoteDebugPortProvider()));, +		}, +, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsProperties.java, +	private Debug debug = new Debug();, +, +	public Debug getDebug() {, +		return this.debug;, +	}, +, +	public static class Debug {, +, +		public static final Integer DEFAULT_LOCAL_PORT = 8000;, +, +		/**, +		 * Enable remote debug support., +		 */, +		private boolean enabled = true;, +, +		/**, +		 * Local remote debug server port., +		 */, +		private int localPort = DEFAULT_LOCAL_PORT;, +, +		public boolean isEnabled() {, +			return this.enabled;, +		}, +, +		public void setEnabled(boolean enabled) {, +			this.enabled = enabled;, +		}, +, +		public int getLocalPort() {, +			return this.localPort;, +		}]