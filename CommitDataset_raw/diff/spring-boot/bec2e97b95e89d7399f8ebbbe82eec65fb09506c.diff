[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, + * {@link InMemoryUserDetailsManager} with a default user and generated password. This can, + * be disabled by providing a bean of type {@link AuthenticationManager},, +		logger.info(String.format("%n%nUsing default security password: %s%n", password));, +		return new InMemoryUserDetailsManager(, +				User.withUsername("user").password(password).roles().build());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, + * {@link InMemoryUserDetailsManager} with a default user and generated password. This can, + * be disabled by providing a bean of type {@link AuthenticationManager},, +		logger.info(String.format("%n%nUsing default security password: %s%n", password));, +		return new InMemoryUserDetailsManager(, +				User.withUsername("user").password(password).roles().build());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +		this.context.register(TestAuthenticationManagerConfiguration.class,, +				SecurityAutoConfiguration.class,, +		assertThat(listener.event).isInstanceOf(AuthenticationSuccessEvent.class);, +		assertThat(this.outputCapture.toString()), +				.contains("Using default security password:");, +	public void defaultUserNotCreatedIfAuthenticationManagerBeanPresent(), +			throws Exception {, +		assertThat(manager).isEqualTo(this.context.getBean(, +		TestingAuthenticationToken token = new TestingAuthenticationToken("foo", "bar");, +		UserDetailsService userDetailsService = this.context, +				.getBean(UserDetailsService.class);, +	public void defaultUserNotCreatedIfAuthenticationProviderBeanPresent(), +			throws Exception {, +		AuthenticationProvider provider = this.context, +				.getBean(AuthenticationProvider.class);, +		TestingAuthenticationToken token = new TestingAuthenticationToken("foo", "bar");, +			this.authenticationManager = new ProviderManager(, +					Collections.singletonList(authenticationProvider));, +			return new InMemoryUserDetailsManager(, +					User.withUsername("foo").password("bar").roles("USER").build());]