[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +, +import org.apache.commons.lang.ObjectUtils;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.GenericConverter;, +	public StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {, +		return new StringOrNumberToMigrationVersionConverter();, +	 * Convert a String or Number to a {@link MigrationVersion}., +	private static class StringOrNumberToMigrationVersionConverter, +			implements GenericConverter {, +, +		private static final Set<ConvertiblePair> CONVERTIBLE_PAIRS = createConvertiblePairs();, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return CONVERTIBLE_PAIRS;, +		}, +, +		@Override, +		public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			String value = ObjectUtils.toString(source);, +			return MigrationVersion.fromVersion(value);, +		}, +, +		private static Set<ConvertiblePair> createConvertiblePairs() {, +			Set<ConvertiblePair> convertiblePairs = new HashSet<ConvertiblePair>(2);, +			convertiblePairs.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			convertiblePairs.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			return Collections.unmodifiableSet(convertiblePairs);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +, +import org.apache.commons.lang.ObjectUtils;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.GenericConverter;, +	public StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {, +		return new StringOrNumberToMigrationVersionConverter();, +	 * Convert a String or Number to a {@link MigrationVersion}., +	private static class StringOrNumberToMigrationVersionConverter, +			implements GenericConverter {, +, +		private static final Set<ConvertiblePair> CONVERTIBLE_PAIRS = createConvertiblePairs();, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return CONVERTIBLE_PAIRS;, +		}, +, +		@Override, +		public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			String value = ObjectUtils.toString(source);, +			return MigrationVersion.fromVersion(value);, +		}, +, +		private static Set<ConvertiblePair> createConvertiblePairs() {, +			Set<ConvertiblePair> convertiblePairs = new HashSet<ConvertiblePair>(2);, +			convertiblePairs.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			convertiblePairs.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			return Collections.unmodifiableSet(convertiblePairs);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Collections;, +import org.springframework.core.env.MapPropertySource;, +	public void overrideBaselineVersionString() throws Exception {, +	@Test, +	public void overrideBaselineVersionNumber() throws Exception {, +		Map<String, Object> source = Collections.<String, Object>singletonMap("flyway.baseline-version", 1);, +		this.context.getEnvironment().getPropertySources().addLast(new MapPropertySource("flyway", source));, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		Flyway flyway = this.context.getBean(Flyway.class);, +		assertThat(flyway.getBaselineVersion(),, +				equalTo(MigrationVersion.fromVersion("1")));, +	}, +]