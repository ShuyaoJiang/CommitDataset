[+++ b/spring-boot-tools/spring-boot-loader/README.md, +## PropertiesLauncher Features, +, +`PropertiesLauncher` has a few special features that can be enabled, +with external properties (System properties, environment variables,, +manifest entries or `application.properties`)., +, +| Key        | Purpose | Typical value |, +|------------|---------|---------------|, +|loader.path |Classpath (colon-separated) |lib:${HOME}/app/lib|, +|loader.home |Location of additional properties file (defaults to `${user.dir}`) |file:///opt/app|, +|loader.args |Default arguments for the main method (space separated) ||, +|loader.main |Name of main class to launch | com.app.Application |, +|loader.config.name|Name of properties file (default "application") | loader|, +|loader.config.location|Path to properties file (default "application/.properties") | classpath:loader.properties|, +|loader.system|Boolean flag to indicate that all properties should be added to System properties (default false)|true|, +, +Manifest entry keys are formed by capitalizing intial letters of words, +and changing the separator to '-' from '.' (e.g. "Loader-Path"). The, +exception is "loader.main" which is looked up as "Start-Class" in the, +manifest for compatibility with `JarLauncher`)., +, +Environment variables can be capitalized with underscore separators, +instead of periods., +, +* `loader.home` is the directory location of an additional properties, +  file (overriding the default) as long as `loader.config.location` is, +  not specified, +* `loader.path` can contain directories (scanned recursively for jar, +  and zip files), archive paths, or wildcard patterns (for the default, +  JVM behaviour), +* Placeholder replacement is done from System and environment, +  variables plus the properties file itself on all values before use., +, +++ b/spring-boot-tools/spring-boot-loader/README.md, +## PropertiesLauncher Features, +, +`PropertiesLauncher` has a few special features that can be enabled, +with external properties (System properties, environment variables,, +manifest entries or `application.properties`)., +, +| Key        | Purpose | Typical value |, +|------------|---------|---------------|, +|loader.path |Classpath (colon-separated) |lib:${HOME}/app/lib|, +|loader.home |Location of additional properties file (defaults to `${user.dir}`) |file:///opt/app|, +|loader.args |Default arguments for the main method (space separated) ||, +|loader.main |Name of main class to launch | com.app.Application |, +|loader.config.name|Name of properties file (default "application") | loader|, +|loader.config.location|Path to properties file (default "application/.properties") | classpath:loader.properties|, +|loader.system|Boolean flag to indicate that all properties should be added to System properties (default false)|true|, +, +Manifest entry keys are formed by capitalizing intial letters of words, +and changing the separator to '-' from '.' (e.g. "Loader-Path"). The, +exception is "loader.main" which is looked up as "Start-Class" in the, +manifest for compatibility with `JarLauncher`)., +, +Environment variables can be capitalized with underscore separators, +instead of periods., +, +* `loader.home` is the directory location of an additional properties, +  file (overriding the default) as long as `loader.config.location` is, +  not specified, +* `loader.path` can contain directories (scanned recursively for jar, +  and zip files), archive paths, or wildcard patterns (for the default, +  JVM behaviour), +* Placeholder replacement is done from System and environment, +  variables plus the properties file itself on all values before use., +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	 * Properties key for main class. As a manifest entry can also be specified as, +	 * <code>Start-Class</code>., +	 * <code>${user.dir}</code>)., +	 * Properties key for default command line arguments. These arguments (if present) are, +	 * prepended to the main method arguments before launching., +	 */, +	public static final String ARGS = "loader.args";, +, +	/**, +	protected String[] getArgs(String... args) throws Exception {, +		String loaderArgs = getProperty(ARGS);, +		if (loaderArgs != null) {, +			String[] defaultArgs = loaderArgs.split("\\s+");, +			String[] additionalArgs = args;, +			args = new String[defaultArgs.length + additionalArgs.length];, +			System.arraycopy(defaultArgs, 0, args, 0, defaultArgs.length);, +			System.arraycopy(additionalArgs, 0, args, defaultArgs.length,, +					additionalArgs.length);, +		}, +		return args;, +	}, +, +	public static void main(String[] args) throws Exception {, +		PropertiesLauncher launcher = new PropertiesLauncher();, +		args = launcher.getArgs(args);, +		launcher.launch(args);, +++ b/spring-boot-tools/spring-boot-loader/README.md, +## PropertiesLauncher Features, +, +`PropertiesLauncher` has a few special features that can be enabled, +with external properties (System properties, environment variables,]