[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +			this.jarEntryName = decode(spec.substring(separator + 2));, +	private static String decode(String source) {, +		int length = source.length();, +		if ((length == 0) || (source.indexOf('%') < 0)) {, +			return source;, +		}, +		try {, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(length);, +			for (int i = 0; i < length; i++) {, +				int ch = source.charAt(i);, +				if (ch == '%') {, +					if ((i + 2) >= length) {, +						throw new IllegalArgumentException("Invalid encoded sequence \"", +								+ source.substring(i) + "\"");, +					}, +					ch = decodeEscapeSequence(source, i);, +					i += 2;, +				}, +				bos.write(ch);, +			}, +			return new String(bos.toByteArray(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	private static char decodeEscapeSequence(String source, int i) {, +		int hi = Character.digit(source.charAt(i + 1), 16);, +		int lo = Character.digit(source.charAt(i + 2), 16);, +		if (hi == -1 || lo == -1) {, +			throw new IllegalArgumentException("Invalid encoded sequence \"", +					+ source.substring(i) + "\"");, +		}, +		return ((char) ((hi << 4) + lo));, +	}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +			this.jarEntryName = decode(spec.substring(separator + 2));, +	private static String decode(String source) {, +		int length = source.length();, +		if ((length == 0) || (source.indexOf('%') < 0)) {, +			return source;, +		}, +		try {, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(length);, +			for (int i = 0; i < length; i++) {, +				int ch = source.charAt(i);, +				if (ch == '%') {, +					if ((i + 2) >= length) {, +						throw new IllegalArgumentException("Invalid encoded sequence \"", +								+ source.substring(i) + "\"");, +					}, +					ch = decodeEscapeSequence(source, i);, +					i += 2;, +				}, +				bos.write(ch);, +			}, +			return new String(bos.toByteArray(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	private static char decodeEscapeSequence(String source, int i) {, +		int hi = Character.digit(source.charAt(i + 1), 16);, +		int lo = Character.digit(source.charAt(i + 2), 16);, +		if (hi == -1 || lo == -1) {, +			throw new IllegalArgumentException("Invalid encoded sequence \"", +					+ source.substring(i) + "\"");, +		}, +		return ((char) ((hi << 4) + lo));, +	}, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/TestJarCreator.java, +			writeDirEntry(jarOutputStream, "special/");, +			writeEntry(jarOutputStream, "special/\u00EB.dat", '\u00EB');, +		writeEntry(jarOutputStream, "\u00E4.dat", '\u00E4');, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +			this.jarEntryName = decode(spec.substring(separator + 2));, +	private static String decode(String source) {, +		int length = source.length();, +		if ((length == 0) || (source.indexOf('%') < 0)) {, +			return source;, +		}, +		try {, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(length);, +			for (int i = 0; i < length; i++) {, +				int ch = source.charAt(i);, +				if (ch == '%') {, +					if ((i + 2) >= length) {, +						throw new IllegalArgumentException("Invalid encoded sequence \"", +								+ source.substring(i) + "\"");, +					}]