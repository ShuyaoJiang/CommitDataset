[+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +		assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")), +				.isNull();, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +		assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")), +				.isNull();, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(restart.getAllExclude()).containsOnly("META-INF/maven/**",, +				"META-INF/resources/**", "resources/**", "static/**", "public/**",, +				"templates/**", "**/*Test.class", "**/*Tests.class", "git.properties",, +				"foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("biz/**", "foo/**", "bar/**");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +		assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")), +				.isNull();, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(restart.getAllExclude()).containsOnly("META-INF/maven/**",, +				"META-INF/resources/**", "resources/**", "static/**", "public/**",, +				"templates/**", "**/*Test.class", "**/*Tests.class", "git.properties",, +				"foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("biz/**", "foo/**", "bar/**");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(resolver.isCacheable()).isFalse();, +		assertThat(resolver.isCacheable()).isTrue();, +			assertThat(resolver.isCacheable()).isTrue();, +		assertThat(properties.getCachePeriod()).isEqualTo(0);, +		assertThat(server.isStarted()).isTrue();, +		assertThat(watcher).isNotNull();, +		assertThat(filter).isInstanceOf(TriggerFileFilter.class);, +		assertThat(folders).hasSize(2), +				.containsKey(new File("src/main/java").getAbsoluteFile()), +				.containsKey(new File("src/test/java").getAbsoluteFile());, +		assertThat(redisTemplate.getHashKeySerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getHashValueSerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getKeySerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getValueSerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +		assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")), +				.isNull();, +		assertThat(context.getEnvironment().getProperty("remoteUrl")), +				.isEqualTo("http://localhost:8080");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(restart.getAllExclude()).containsOnly("META-INF/maven/**",, +				"META-INF/resources/**", "resources/**", "static/**", "public/**",, +				"templates/**", "**/*Test.class", "**/*Tests.class", "git.properties",, +				"foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("foo/**", "bar/**");, +		assertThat(restart.getAllExclude()).containsOnly("biz/**", "foo/**", "bar/**");, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(resolver.isCacheable()).isFalse();, +		assertThat(resolver.isCacheable()).isTrue();, +			assertThat(resolver.isCacheable()).isTrue();, +		assertThat(properties.getCachePeriod()).isEqualTo(0);, +		assertThat(server.isStarted()).isTrue();, +		assertThat(watcher).isNotNull();, +		assertThat(filter).isInstanceOf(TriggerFileFilter.class);, +		assertThat(folders).hasSize(2), +				.containsKey(new File("src/main/java").getAbsoluteFile()), +				.containsKey(new File("src/test/java").getAbsoluteFile());, +		assertThat(redisTemplate.getHashKeySerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getHashValueSerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getKeySerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +		assertThat(redisTemplate.getValueSerializer()), +				.isInstanceOf(RestartCompatibleRedisSerializer.class);, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.response.getStatus()).isEqualTo(200);, +		assertThat(this.response.getStatus()).isEqualTo(200);]