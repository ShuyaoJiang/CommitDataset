[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * @author Artsiom Yudovin, +	@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * @author Artsiom Yudovin, +	@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.mvc.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * @author Artsiom Yudovin, +	@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.mvc.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java, +import org.springframework.web.filter.HiddenHttpMethodFilter;, + * @author Artsiom Yudovin, +	public void hiddenHttpMethodFilterCanBeDisabled() {, +		this.contextRunner, +				.withPropertyValues("spring.mvc.hiddenmethod.filter.enabled=false"), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +	public void hiddenHttpMethodFilterEnabledByDefault() {, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * @author Artsiom Yudovin, +	@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.mvc.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java, +import org.springframework.web.filter.HiddenHttpMethodFilter;, + * @author Artsiom Yudovin, +	public void hiddenHttpMethodFilterCanBeDisabled() {, +		this.contextRunner, +				.withPropertyValues("spring.mvc.hiddenmethod.filter.enabled=false"), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +	public void hiddenHttpMethodFilterEnabledByDefault() {, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.mvc.hiddenmethod.filter.enabled=true # Whether to enable Spring's HiddenHttpMethodFilter.]