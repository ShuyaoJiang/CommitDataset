[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationPackagesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(AutoConfigurationPackages.get(context.getBeanFactory())), +				.containsExactly(getClass().getPackage().getName());, +		assertThat(packages).containsOnly(package1.getName(), package2.getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationPackagesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(AutoConfigurationPackages.get(context.getBeanFactory())), +				.containsExactly(getClass().getPackage().getName());, +		assertThat(packages).containsOnly(package1.getName(), package2.getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReproTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(bean).isEqualTo("bucket");, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationPackagesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(AutoConfigurationPackages.get(context.getBeanFactory())), +				.containsExactly(getClass().getPackage().getName());, +		assertThat(packages).containsOnly(package1.getName(), package2.getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReproTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(bean).isEqualTo("bucket");, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationSorterTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).containsExactly(HIGHEST, LOWEST);, +		assertThat(actual).containsExactly(C, B, A);, +		assertThat(actual).containsExactly(Z, Y, X);, +		assertThat(actual).containsExactly(C, E, B, A);, +		assertThat(actual).containsExactly(C, W, B, A, X);, +		assertThat(actual).containsExactly(C, W2, B, A2, X);, +		assertThat(actual).containsExactly(C, W, B, A, X);, +		assertThat(actual).containsExactly(B, A);, +, +, +, +, +, +, +, +, +, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationPackagesTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(AutoConfigurationPackages.get(context.getBeanFactory())), +				.containsExactly(getClass().getPackage().getName());, +		assertThat(packages).containsOnly(package1.getName(), package2.getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReproTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(bean).isEqualTo("bucket");, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationSorterTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).containsExactly(HIGHEST, LOWEST);, +		assertThat(actual).containsExactly(C, B, A);, +		assertThat(actual).containsExactly(Z, Y, X);, +		assertThat(actual).containsExactly(C, E, B, A);, +		assertThat(actual).containsExactly(C, W, B, A, X);, +		assertThat(actual).containsExactly(C, W2, B, A2, X);, +		assertThat(actual).containsExactly(C, W, B, A, X);, +		assertThat(actual).containsExactly(B, A);, +, +, +, +, +, +, +, +, +, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(imports).hasSameSizeAs(SpringFactoriesLoader.loadFactoryNames(, +				EnableAutoConfiguration.class, getClass().getClassLoader()));, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.isEmpty();, +		assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1);, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.contains(FreeMarkerAutoConfiguration.class.getName());, +		assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1);, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.contains(VelocityAutoConfiguration.class.getName());, +		assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1);, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.contains(FreeMarkerAutoConfiguration.class.getName());, +		assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 2);, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.contains(FreeMarkerAutoConfiguration.class.getName(),, +						VelocityAutoConfiguration.class.getName());, +		assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 2);, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions()), +				.contains(FreeMarkerAutoConfiguration.class.getName(),]