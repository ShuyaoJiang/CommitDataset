[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>log4j-to-slf4j</artifactId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>log4j-to-slf4j</artifactId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java, +import org.apache.logging.log4j.spi.LoggerContext;, +@ConditionalOnClass(value = { Log4j2Metrics.class,, +		LogManager.class }, name = "org.apache.logging.log4j.core.LoggerContext"), +		return new Log4j2Metrics();, +			LoggerContext loggerContext = LogManager.getContext(false);, +			try {, +				if (Class.forName("org.apache.logging.log4j.core.LoggerContext"), +						.isInstance(loggerContext)) {, +							"LoggerContext was an instance of org.apache.logging.log4j.core.LoggerContext");, +				}, +			}, +			catch (Throwable ex) {, +				// Continue with no match, +					"Logger context was not an instance of org.apache.logging.log4j.core.LoggerContext");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>log4j-to-slf4j</artifactId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java, +import org.apache.logging.log4j.spi.LoggerContext;, +@ConditionalOnClass(value = { Log4j2Metrics.class,, +		LogManager.class }, name = "org.apache.logging.log4j.core.LoggerContext"), +		return new Log4j2Metrics();, +			LoggerContext loggerContext = LogManager.getContext(false);, +			try {, +				if (Class.forName("org.apache.logging.log4j.core.LoggerContext"), +						.isInstance(loggerContext)) {, +							"LoggerContext was an instance of org.apache.logging.log4j.core.LoggerContext");, +				}, +			}, +			catch (Throwable ex) {, +				// Continue with no match, +					"Logger context was not an instance of org.apache.logging.log4j.core.LoggerContext");, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>log4j-to-slf4j</artifactId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java, +import org.apache.logging.log4j.spi.LoggerContext;, +@ConditionalOnClass(value = { Log4j2Metrics.class,, +		LogManager.class }, name = "org.apache.logging.log4j.core.LoggerContext"), +		return new Log4j2Metrics();, +			LoggerContext loggerContext = LogManager.getContext(false);, +			try {, +				if (Class.forName("org.apache.logging.log4j.core.LoggerContext"), +						.isInstance(loggerContext)) {, +							"LoggerContext was an instance of org.apache.logging.log4j.core.LoggerContext");, +				}, +			}, +			catch (Throwable ex) {, +				// Continue with no match, +					"Logger context was not an instance of org.apache.logging.log4j.core.LoggerContext");, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsWithLog4jLoggerContextAutoConfigurationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics;, +, +import io.micrometer.core.instrument.binder.logging.Log4j2Metrics;, +import org.apache.logging.log4j.LogManager;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.boot.actuate.autoconfigure.metrics.test.MetricsRun;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.testsupport.runner.classpath.ClassPathOverrides;, +import org.springframework.boot.testsupport.runner.classpath.ModifiedClassPathRunner;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link Log4J2MetricsAutoConfiguration}., + *, + * @author Andy Wilkinson, + */, +@RunWith(ModifiedClassPathRunner.class), +@ClassPathOverrides("org.apache.logging.log4j:log4j-core:2.11.1"), +public class Log4J2MetricsWithLog4jLoggerContextAutoConfigurationTests {, +, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.with(MetricsRun.simple()).withConfiguration(]