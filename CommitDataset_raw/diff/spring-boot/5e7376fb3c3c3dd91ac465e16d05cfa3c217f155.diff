[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.codehaus.plexus.interpolation.InterpolationException;, +import org.codehaus.plexus.interpolation.Interpolator;, +import org.codehaus.plexus.interpolation.PropertiesBasedValueSource;, +import org.codehaus.plexus.interpolation.RegexBasedInterpolator;, +			List<RepositoryConfiguration> configurations) {, +			Interpolator interpolator = new RegexBasedInterpolator();, +			interpolator.addValueSource(, +					new PropertiesBasedValueSource(activeProfile.getProperties()));, +				configurations.add(getRepositoryConfiguration(interpolator, repository));, +	private static RepositoryConfiguration getRepositoryConfiguration(, +			Interpolator interpolator, Repository repository) {, +		String name = interpolate(interpolator, repository.getId());, +		String url = interpolate(interpolator, repository.getUrl());, +		boolean snapshotsEnabled = false;, +		if (repository.getSnapshots() != null) {, +			snapshotsEnabled = repository.getSnapshots().isEnabled();, +		}, +		return new RepositoryConfiguration(name, URI.create(url), snapshotsEnabled);, +	}, +, +	private static String interpolate(Interpolator interpolator, String value) {, +		try {, +			return interpolator.interpolate(value);, +		}, +		catch (InterpolationException ex) {, +			return value;, +		}, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.codehaus.plexus.interpolation.InterpolationException;, +import org.codehaus.plexus.interpolation.Interpolator;, +import org.codehaus.plexus.interpolation.PropertiesBasedValueSource;, +import org.codehaus.plexus.interpolation.RegexBasedInterpolator;, +			List<RepositoryConfiguration> configurations) {, +			Interpolator interpolator = new RegexBasedInterpolator();, +			interpolator.addValueSource(, +					new PropertiesBasedValueSource(activeProfile.getProperties()));, +				configurations.add(getRepositoryConfiguration(interpolator, repository));, +	private static RepositoryConfiguration getRepositoryConfiguration(, +			Interpolator interpolator, Repository repository) {, +		String name = interpolate(interpolator, repository.getId());, +		String url = interpolate(interpolator, repository.getUrl());, +		boolean snapshotsEnabled = false;, +		if (repository.getSnapshots() != null) {, +			snapshotsEnabled = repository.getSnapshots().isEnabled();, +		}, +		return new RepositoryConfiguration(name, URI.create(url), snapshotsEnabled);, +	}, +, +	private static String interpolate(Interpolator interpolator, String value) {, +		try {, +			return interpolator.interpolate(value);, +		}, +		catch (InterpolationException ex) {, +			return value;, +		}, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactoryTests.java, +	@Test, +	public void interpolationProfileRepositories() {, +		SystemProperties.doWithSystemProperties(new Runnable() {, +			@Override, +			public void run() {, +				List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory, +						.createDefaultRepositoryConfiguration();, +				assertRepositoryConfiguration(repositoryConfiguration, "central", "local",, +						"spring-snapshot", "spring-milestone", "interpolate-releases",, +						"interpolate-snapshots");, +			}, +		}, "user.home:src/test/resources/maven-settings/active-profile-repositories",, +				"interpolate:true");, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.codehaus.plexus.interpolation.InterpolationException;, +import org.codehaus.plexus.interpolation.Interpolator;, +import org.codehaus.plexus.interpolation.PropertiesBasedValueSource;, +import org.codehaus.plexus.interpolation.RegexBasedInterpolator;, +			List<RepositoryConfiguration> configurations) {, +			Interpolator interpolator = new RegexBasedInterpolator();, +			interpolator.addValueSource(, +					new PropertiesBasedValueSource(activeProfile.getProperties()));, +				configurations.add(getRepositoryConfiguration(interpolator, repository));, +	private static RepositoryConfiguration getRepositoryConfiguration(, +			Interpolator interpolator, Repository repository) {, +		String name = interpolate(interpolator, repository.getId());, +		String url = interpolate(interpolator, repository.getUrl());, +		boolean snapshotsEnabled = false;, +		if (repository.getSnapshots() != null) {, +			snapshotsEnabled = repository.getSnapshots().isEnabled();, +		}, +		return new RepositoryConfiguration(name, URI.create(url), snapshotsEnabled);, +	}, +, +	private static String interpolate(Interpolator interpolator, String value) {, +		try {, +			return interpolator.interpolate(value);]