[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, + * @author Josh Thornhill, +		if (listenerConfig.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAcknowledgeMode());, +		if (listenerConfig.getTransactionSize() != null) {, +			factory.setTxSize(listenerConfig.getTransactionSize());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, + * @author Josh Thornhill, +		if (listenerConfig.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAcknowledgeMode());, +		if (listenerConfig.getTransactionSize() != null) {, +			factory.setTxSize(listenerConfig.getTransactionSize());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Josh Thornhill, +		return this.listener;, +		private AcknowledgeMode acknowledgeMode;, +		 * Number of messages to be handled in a single request.  It should be greater than, +		 * or equal to the transaction size (if used)., +		 * Number of messages to be processed in a transaction. For best results it should, +		 * be less than or equal to the prefetch count., +		private Integer transactionSize;, +		public AcknowledgeMode getAcknowledgeMode() {, +			return this.acknowledgeMode;, +		public void setAcknowledgeMode(AcknowledgeMode acknowledgeMode) {, +			this.acknowledgeMode = acknowledgeMode;, +			return this.concurrency;, +			return this.maxConcurrency;, +			return this.prefetch;, +		public Integer getTransactionSize() {, +			return this.transactionSize;, +		public void setTransactionSize(Integer transactionSize) {, +			this.transactionSize = transactionSize;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, + * @author Josh Thornhill, +		if (listenerConfig.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAcknowledgeMode());, +		if (listenerConfig.getTransactionSize() != null) {, +			factory.setTxSize(listenerConfig.getTransactionSize());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Josh Thornhill, +		return this.listener;, +		private AcknowledgeMode acknowledgeMode;, +		 * Number of messages to be handled in a single request.  It should be greater than, +		 * or equal to the transaction size (if used)., +		 * Number of messages to be processed in a transaction. For best results it should, +		 * be less than or equal to the prefetch count., +		private Integer transactionSize;, +		public AcknowledgeMode getAcknowledgeMode() {, +			return this.acknowledgeMode;, +		public void setAcknowledgeMode(AcknowledgeMode acknowledgeMode) {, +			this.acknowledgeMode = acknowledgeMode;, +			return this.concurrency;, +			return this.maxConcurrency;, +			return this.prefetch;, +		public Integer getTransactionSize() {, +			return this.transactionSize;, +		public void setTransactionSize(Integer transactionSize) {, +			this.transactionSize = transactionSize;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +	public void testRabbitListenerContainerFactoryWithCustomSettings() {, +		load(TestConfiguration.class,, +				"spring.rabbitmq.listener.acknowledgeMode:manual",, +				"spring.rabbitmq.listener.concurrency:5",, +				"spring.rabbitmq.listener.maxConcurrency:10",, +				"spring.rabbitmq.listener.prefetch=40",, +				"spring.rabbitmq.listener.transactionSize:20");, +		SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory = this.context, +				.getBean("rabbitListenerContainerFactory",, +						SimpleRabbitListenerContainerFactory.class);, +		DirectFieldAccessor dfa = new DirectFieldAccessor(rabbitListenerContainerFactory);, +		assertEquals(AcknowledgeMode.MANUAL,, +				dfa.getPropertyValue("acknowledgeMode"));, +		assertEquals(5, dfa.getPropertyValue("concurrentConsumers"));, +		assertEquals(10, dfa.getPropertyValue("maxConcurrentConsumers"));, +		assertEquals(40, dfa.getPropertyValue("prefetchCount"));, +		assertEquals(20, dfa.getPropertyValue("txSize"));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, + * @author Josh Thornhill, +		if (listenerConfig.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAcknowledgeMode());, +		if (listenerConfig.getTransactionSize() != null) {, +			factory.setTxSize(listenerConfig.getTransactionSize());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Josh Thornhill, +		return this.listener;, +		private AcknowledgeMode acknowledgeMode;, +		 * Number of messages to be handled in a single request.  It should be greater than, +		 * or equal to the transaction size (if used)., +		 * Number of messages to be processed in a transaction. For best results it should, +		 * be less than or equal to the prefetch count., +		private Integer transactionSize;, +		public AcknowledgeMode getAcknowledgeMode() {, +			return this.acknowledgeMode;, +		public void setAcknowledgeMode(AcknowledgeMode acknowledgeMode) {, +			this.acknowledgeMode = acknowledgeMode;, +			return this.concurrency;, +			return this.maxConcurrency;]