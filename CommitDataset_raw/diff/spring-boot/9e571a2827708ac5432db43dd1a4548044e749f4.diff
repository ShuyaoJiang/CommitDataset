[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +		MemberConditions memberConditions = new MemberConditions(context,, +				this.configurationPhase, className);, +		private final ConfigurationPhase nestedPhase;, +, +		private final String nestedClassName;, +, +		MemberConditions(ConditionContext context, ConfigurationPhase nestedPhase,, +				String className) {, +			this.nestedPhase = nestedPhase;, +			this.nestedClassName = className;, +						validateMemberCondition(condition);, +		private void validateMemberCondition(Condition condition) {, +			if (this.nestedPhase == ConfigurationPhase.PARSE_CONFIGURATION, +					&& condition instanceof ConfigurationCondition) {, +				ConfigurationPhase memberPhase = ((ConfigurationCondition) condition), +						.getConfigurationPhase();, +				if (memberPhase == ConfigurationPhase.REGISTER_BEAN) {, +					throw new IllegalStateException("Nested condition ", +							+ this.nestedClassName + " uses a configuration ", +							+ "phase that is inappropriate for " + condition.getClass());, +				}, +			}, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +		MemberConditions memberConditions = new MemberConditions(context,, +				this.configurationPhase, className);, +		private final ConfigurationPhase nestedPhase;, +, +		private final String nestedClassName;, +, +		MemberConditions(ConditionContext context, ConfigurationPhase nestedPhase,, +				String className) {, +			this.nestedPhase = nestedPhase;, +			this.nestedClassName = className;, +						validateMemberCondition(condition);, +		private void validateMemberCondition(Condition condition) {, +			if (this.nestedPhase == ConfigurationPhase.PARSE_CONFIGURATION, +					&& condition instanceof ConfigurationCondition) {, +				ConfigurationPhase memberPhase = ((ConfigurationCondition) condition), +						.getConfigurationPhase();, +				if (memberPhase == ConfigurationPhase.REGISTER_BEAN) {, +					throw new IllegalStateException("Nested condition ", +							+ this.nestedClassName + " uses a configuration ", +							+ "phase that is inappropriate for " + condition.getClass());, +				}, +			}, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AbstractNestedConditionTest.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import org.junit.Test;, +, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link AbstractNestedCondition}., + *, + * @author Razib Shahriar, + */, +public class AbstractNestedConditionTest {, +, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();, +, +	@Test, +	public void validMemberPhaseEvaluatesCorrectly() {, +		this.contextRunner.withUserConfiguration(ValidConfig.class), +				.run((context) -> assertThat(context).hasBean("myBean"));, +	}, +, +	@Test, +	public void invalidMemberPhaseThrowsIllegalState() {, +		this.contextRunner.withUserConfiguration(InvalidConfig.class).run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context.getStartupFailure().getCause()), +					.isInstanceOf(IllegalStateException.class)]