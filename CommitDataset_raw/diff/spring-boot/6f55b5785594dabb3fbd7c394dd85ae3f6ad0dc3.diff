[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.HashSet;, +	static final String ADDITIONAL_METADATA_LOCATIONS_OPTION = "org.springframework.boot.", +			+ "configurationprocessor.additionalMetadataLocations";, +, +	private static final Set<String> SUPPORTED_OPTIONS = Collections.unmodifiableSet(, +			new HashSet<>(Arrays.asList(ADDITIONAL_METADATA_LOCATIONS_OPTION)));, +, +	public Set<String> getSupportedOptions() {, +		return SUPPORTED_OPTIONS;, +	}, +, +	@Override, +			this.metadataCollector.add(ItemMetadata.newProperty(endpointKey(endpointId),, +					"web.path", String.class.getName(), type, null,, +					String.format("Path of the %s endpoint.", endpointId), endpointId,, +					null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.HashSet;, +	static final String ADDITIONAL_METADATA_LOCATIONS_OPTION = "org.springframework.boot.", +			+ "configurationprocessor.additionalMetadataLocations";, +, +	private static final Set<String> SUPPORTED_OPTIONS = Collections.unmodifiableSet(, +			new HashSet<>(Arrays.asList(ADDITIONAL_METADATA_LOCATIONS_OPTION)));, +, +	public Set<String> getSupportedOptions() {, +		return SUPPORTED_OPTIONS;, +	}, +, +	@Override, +			this.metadataCollector.add(ItemMetadata.newProperty(endpointKey(endpointId),, +					"web.path", String.class.getName(), type, null,, +					String.format("Path of the %s endpoint.", endpointId), endpointId,, +					null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataStore.java, +		String locations = this.environment.getOptions().get(, +				ConfigurationMetadataAnnotationProcessor.ADDITIONAL_METADATA_LOCATIONS_OPTION);, +		if (locations != null) {, +			for (String location : locations.split(",")) {, +				File candidate = new File(location, ADDITIONAL_METADATA_PATH);, +				if (candidate.isFile()) {, +					return candidate;, +				}, +			}, +		}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.HashSet;, +	static final String ADDITIONAL_METADATA_LOCATIONS_OPTION = "org.springframework.boot.", +			+ "configurationprocessor.additionalMetadataLocations";, +, +	private static final Set<String> SUPPORTED_OPTIONS = Collections.unmodifiableSet(, +			new HashSet<>(Arrays.asList(ADDITIONAL_METADATA_LOCATIONS_OPTION)));, +, +	public Set<String> getSupportedOptions() {, +		return SUPPORTED_OPTIONS;, +	}, +, +	@Override, +			this.metadataCollector.add(ItemMetadata.newProperty(endpointKey(endpointId),, +					"web.path", String.class.getName(), type, null,, +					String.format("Path of the %s endpoint.", endpointId), endpointId,, +					null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataStore.java, +		String locations = this.environment.getOptions().get(, +				ConfigurationMetadataAnnotationProcessor.ADDITIONAL_METADATA_LOCATIONS_OPTION);, +		if (locations != null) {, +			for (String location : locations.split(",")) {, +				File candidate = new File(location, ADDITIONAL_METADATA_PATH);, +				if (candidate.isFile()) {, +					return candidate;, +				}, +			}, +		}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/MetadataStoreTests.java, +import java.util.Collections;, +import static org.mockito.BDDMockito.given;, +	private final ProcessingEnvironment environment = mock(ProcessingEnvironment.class);, +, +	private final MetadataStore metadataStore = new MetadataStore(this.environment);, +	@Test, +	public void additionalMetadataIsLocatedUsingLocationsOption() throws IOException {, +		File app = this.temp.newFolder("app");, +		File location = new File(app, "src/main/resources");, +		File metaInf = new File(location, "META-INF");, +		metaInf.mkdirs();, +		File additionalMetadata = new File(metaInf,, +				"additional-spring-configuration-metadata.json");, +		additionalMetadata.createNewFile();, +		given(this.environment.getOptions()).willReturn(Collections.singletonMap(, +				ConfigurationMetadataAnnotationProcessor.ADDITIONAL_METADATA_LOCATIONS_OPTION,, +				location.getAbsolutePath()));, +		assertThat(this.metadataStore.locateAdditionalMetadataFile(new File(app, "foo"))), +				.isEqualTo(additionalMetadata);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.HashSet;, +	static final String ADDITIONAL_METADATA_LOCATIONS_OPTION = "org.springframework.boot.", +			+ "configurationprocessor.additionalMetadataLocations";, +]