[+++ b/README.md, +## Installing the CLI, +, +The Spring Boot command line tool uses, +[Groovy](http://groovy.codehaus.org/) underneath so that we can, +present simple Spring snippets that can 'just run'.  You don't need, +the CLI to get started (see the, +[Java example](#quick-start-java-example) below), but it's the, +quickest way to get a Spring application off the ground.  You need, +[Java SDK v1.6](http://www.java.com) or higher to run the command line, +tool. You should check your current Java installation before you, +begin:, +, +	$ java -version, +	, +Spring Boot CLI can be downloaded from our Maven repository, and then you can use a shell `alias`:, +, +    $ wget http://maven.springframework.org/milestone/org/springframework/boot/spring-boot-cli/0.5.0.M1/spring-boot-cli-0.5.0.M1.jar, +    $ alias spring="java -jar `pwd`/spring-boot-cli-0.5.0.M1.jar", +, +Complete installation including a downloadable `.zip` with a shell script TBD., +, +Here's a really simple web application. Create a file called `app.groovy`:, +Then run it from a shell:, +, +<span id="quick-start-java-example"/>, +an IDE you can. Create a `pom.xml` (or the equivalent with your favourite build system):, +, +`pom.xml`, +, +```xml, +<pom>, +    <artifactId>myproject</myproject>, +    <version>0.0.1-SNAPSHOT</version>, +    <parent>, +        <groupId>org.springframework.boot</groupId>, +        <artifactId>spring-boot-starter-parent</artifactId>, +        <version>0.5.0.M1</version>, +    </parent>, +    <dependencies>, +        <dependency>, +            <groupId>org.springframework.boot</groupId>, +            <artifactId>spring-boot-starter-web</artifactId>, +            <version>${spring.boot.version}</version>, +        </dependency>, +    </dependencies>, +    <build>, +        <plugins>, +            <plugin>, +                <groupId>${project.groupId}</groupId>, +                <artifactId>spring-boot-maven-plugin</artifactId>, +            </plugin>, +        </plugins>, +    </build>, +    <!-- TODO: remove once Spring Boot is in Maven Central -->, +    <repositories>, +        <repository>, +            <id>spring-snapshots</id>, +            <url>http://repo.springsource.org/snapshot</url>, +            <snapshots><enabled>true</enabled></snapshots>, +        </repository>, +    </repositories>, +    <pluginRepositories>, +        <pluginRepository>, +            <id>spring-snapshots</id>, +            <url>http://repo.springsource.org/snapshot</url>, +            <snapshots><enabled>true</enabled></snapshots>, +        </pluginRepository>, +    </pluginRepositories>, +</pom>, +```, +, +Then just add a class in `src/main/java` with a `main()` method that, +calls `SpringApplication` and add `@EnableAutoConfiguration`, e.g:, +You can run this application by building a `jar` and executing it:, +```, +$ mvn package, +$ java -jar target/myproject-0.0.1-SNAPSHOT.jar, +... Spring starting up ..., +```, +and in anonther terminal:, +```, +$ curl localhost:8080, +Hello World!, +```, +, +## Building Spring Boot from source You don't need to build from, +source to use Spring Boot (it's in the Maven repositories), but if you, +want to try out the latest and greatest, Spring Boot can be, +[built with maven](http://maven.apache.org/run-maven/index.html) v3.0, +or above., +, +	$ mvn clean install, +, +_Also see [CONTRIBUTING.md](CONTRIBUTING.md) if you wish to submit pull requests._, +]