[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +your own, and bind it to a set of `Environment` properties as explained in, +<<spring-boot-features.adoc#boot-features-external-config-3rd-party-configuration>>, e.g., +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +your own, and bind it to a set of `Environment` properties as explained in, +<<spring-boot-features.adoc#boot-features-external-config-3rd-party-configuration>>, e.g., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-external-config-3rd-party-configuration]], +==== Third-party configuration, +, +You can also use that feature for third-party components: in that case, you can't obviously, +add a `@ConfigurationProperties` to it if you don't have access to the source code or if that, +component does not know about Spring Boot., +, +To configure a bean from the `Environment` properties, add `@ConfigurationProperties` to its, +bean registration:, +, +[source,java,indent=0], +----, +, +	@ConfigurationProperties(prefix = "foo"), +	@Bean, +	public FooComponent fooComponent() {, +		..., +	}, +----, +, +Any property defined with the `foo` prefix will be mapped onto that `FooComponent` bean in a, +similar manner as the `ConnectionSettings` example above., +'`starter POMs`' you will automatically get a dependency to `tomcat-jdbc`., +for more of the supported options. Note also that you can configure any of the `DataSource`, +implementation specific properties via `+spring.datasource.*+`: refer to the documentation, +of the connection pool implementation you are using for more details.]