[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +		load(AllResources.class,, +				"spring.mvc.messageCodesResolverFormat:POSTFIX_ERROR_CODE");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +		load(AllResources.class,, +				"spring.mvc.messageCodesResolverFormat:POSTFIX_ERROR_CODE");, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, +	 * {@code null} if that information is not yet available. It is preferable to wait for, +	 * the application to be {@link #isReady() ready}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +		load(AllResources.class,, +				"spring.mvc.messageCodesResolverFormat:POSTFIX_ERROR_CODE");, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, +	 * {@code null} if that information is not yet available. It is preferable to wait for, +	 * the application to be {@link #isReady() ready}., +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java, +		EnvironmentAware, InitializingBean, DisposableBean,, +		ApplicationListener<ApplicationReadyEvent> {, +			return (SpringApplicationAdminMXBeanRegistrar.this.applicationContext != null && SpringApplicationAdminMXBeanRegistrar.this.applicationContext instanceof EmbeddedWebApplicationContext);, +			return SpringApplicationAdminMXBeanRegistrar.this.environment, +					.getProperty(key);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +		load(AllResources.class,, +				"spring.mvc.messageCodesResolverFormat:POSTFIX_ERROR_CODE");, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, +	 * {@code null} if that information is not yet available. It is preferable to wait for, +	 * the application to be {@link #isReady() ready}., +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java, +		EnvironmentAware, InitializingBean, DisposableBean,, +		ApplicationListener<ApplicationReadyEvent> {, +			return (SpringApplicationAdminMXBeanRegistrar.this.applicationContext != null && SpringApplicationAdminMXBeanRegistrar.this.applicationContext instanceof EmbeddedWebApplicationContext);, +			return SpringApplicationAdminMXBeanRegistrar.this.environment, +					.getProperty(key);, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +		this.context = new SpringApplicationBuilder().sources(, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, JmxAutoConfiguration.class,, +				SpringApplicationAdminJmxAutoConfiguration.class).run(, +				"--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(),, +				"EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context), +				.getEmbeddedServletContainer().getPort();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +		load(AllResources.class,, +				"spring.mvc.messageCodesResolverFormat:POSTFIX_ERROR_CODE");, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, +	 * {@code null} if that information is not yet available. It is preferable to wait for, +	 * the application to be {@link #isReady() ready}.]