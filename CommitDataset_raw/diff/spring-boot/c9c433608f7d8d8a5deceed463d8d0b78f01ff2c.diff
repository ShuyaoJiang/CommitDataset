[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +import org.springframework.context.ApplicationContext;, +	private ApplicationContext applicationContext;, +, +	public EmbeddedServletContainerInitializedEvent(, +			ApplicationContext applicationContext, EmbeddedServletContainer source) {, +		this.applicationContext = applicationContext;, +	/**, +	 * Access the source of the event (an {@link EmbeddedServletContainer})., +	 * , +	 * @return the embedded servlet container, +	 */, +	/**, +	 * Access the application context that the container was created in. Sometimes it is, +	 * prudent to check that this matches expectations (like being equal to the current, +	 * context) before acting on the server container itself., +	 * , +	 * @return the applicationContext that the container was created from, +	 */, +	public ApplicationContext getApplicationContext() {, +		return this.applicationContext;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +import org.springframework.context.ApplicationContext;, +	private ApplicationContext applicationContext;, +, +	public EmbeddedServletContainerInitializedEvent(, +			ApplicationContext applicationContext, EmbeddedServletContainer source) {, +		this.applicationContext = applicationContext;, +	/**, +	 * Access the source of the event (an {@link EmbeddedServletContainer})., +	 * , +	 * @return the embedded servlet container, +	 */, +	/**, +	 * Access the application context that the container was created in. Sometimes it is, +	 * prudent to check that this matches expectations (like being equal to the current, +	 * context) before acting on the server container itself., +	 * , +	 * @return the applicationContext that the container was created from, +	 */, +	public ApplicationContext getApplicationContext() {, +		return this.applicationContext;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +			publishEvent(new EmbeddedServletContainerInitializedEvent(this,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerInitializedEvent.java, +import org.springframework.context.ApplicationContext;, +	private ApplicationContext applicationContext;, +, +	public EmbeddedServletContainerInitializedEvent(, +			ApplicationContext applicationContext, EmbeddedServletContainer source) {, +		this.applicationContext = applicationContext;, +	/**, +	 * Access the source of the event (an {@link EmbeddedServletContainer})., +	 * , +	 * @return the embedded servlet container, +	 */, +	/**, +	 * Access the application context that the container was created in. Sometimes it is, +	 * prudent to check that this matches expectations (like being equal to the current, +	 * context) before acting on the server container itself., +	 * , +	 * @return the applicationContext that the container was created from, +	 */, +	public ApplicationContext getApplicationContext() {, +		return this.applicationContext;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +			publishEvent(new EmbeddedServletContainerInitializedEvent(this,, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContextTests.java, +import static org.junit.Assert.assertEquals;, +		assertEquals(this.context, event.getApplicationContext());]