[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +					assertThat(restClient), +							.hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +					assertThat(restClient), +							.hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfigurationTests.java, +			assertThat(gson).hasFieldOrPropertyWithValue("lenient", false);, +					assertThat(gson).hasFieldOrPropertyWithValue("lenient", true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +					assertThat(restClient), +							.hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfigurationTests.java, +			assertThat(gson).hasFieldOrPropertyWithValue("lenient", false);, +					assertThat(gson).hasFieldOrPropertyWithValue("lenient", true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +					assertThat(entityManagerFactoryBean).hasFieldOrPropertyWithValue(, +							"persistenceUnitManager",, +							context.getBean(PersistenceUnitManager.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +					assertThat(restClient), +							.hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfigurationTests.java, +			assertThat(gson).hasFieldOrPropertyWithValue("lenient", false);, +					assertThat(gson).hasFieldOrPropertyWithValue("lenient", true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +					assertThat(entityManagerFactoryBean).hasFieldOrPropertyWithValue(, +							"persistenceUnitManager",, +							context.getBean(PersistenceUnitManager.class));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void triggersConfigFileApplicationListenerBeforeBinding() {, +		assertThat(application).hasFieldOrPropertyWithValue("bannerMode",, +				Banner.Mode.OFF);, +	public void bindsSystemPropertyToSpringApplication() {, +		assertThat(application).hasFieldOrPropertyWithValue("bannerMode",, +				Banner.Mode.OFF);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +					assertThat(restClient), +							.hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfigurationTests.java, +			assertThat(gson).hasFieldOrPropertyWithValue("lenient", false);, +					assertThat(gson).hasFieldOrPropertyWithValue("lenient", true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +					assertThat(entityManagerFactoryBean).hasFieldOrPropertyWithValue(, +							"persistenceUnitManager",, +							context.getBean(PersistenceUnitManager.class));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void triggersConfigFileApplicationListenerBeforeBinding() {, +		assertThat(application).hasFieldOrPropertyWithValue("bannerMode",, +				Banner.Mode.OFF);, +	public void bindsSystemPropertyToSpringApplication() {, +		assertThat(application).hasFieldOrPropertyWithValue("bannerMode",, +				Banner.Mode.OFF);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContextTests.java, +	public void doesNotRegistersShutdownHook() {, +		assertThat(this.context).hasFieldOrPropertyWithValue("shutdownHook", null);]