[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java, +	public void targetAlwaysInvokedWithParameters() {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java, +	public void targetAlwaysInvokedWithParameters() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for a Spring Security in-memory {@link AuthenticationManager}. Adds an, +			ObjectProvider<PasswordEncoder> passwordEncoder) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java, +	public void targetAlwaysInvokedWithParameters() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for a Spring Security in-memory {@link AuthenticationManager}. Adds an, +			ObjectProvider<PasswordEncoder> passwordEncoder) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-change-the-user-details-service-and-add-user-accounts]], +=== Change the UserDetailsService and Add User Accounts, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java, +	public void targetAlwaysInvokedWithParameters() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for a Spring Security in-memory {@link AuthenticationManager}. Adds an, +			ObjectProvider<PasswordEncoder> passwordEncoder) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-change-the-user-details-service-and-add-user-accounts]], +=== Change the UserDetailsService and Add User Accounts, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +former is typically used in conjunction with `@Nullable` to provide different behaviour for, +standard annotations Spring MVC and Spring WebFlux annotations such as `@RequestMapping`, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java, +		OperationParameters parameters = getParameters("getWithParameters", String.class,, +	public void applyWithAllOptionalParametersShouldAddAdvise() {, +		public String getWithParameters(@Nullable String foo, String bar) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerTests.java, +	public void targetAlwaysInvokedWithParameters() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for a Spring Security in-memory {@link AuthenticationManager}. Adds an, +			ObjectProvider<PasswordEncoder> passwordEncoder) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-change-the-user-details-service-and-add-user-accounts]], +=== Change the UserDetailsService and Add User Accounts, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +former is typically used in conjunction with `@Nullable` to provide different behaviour for, +standard annotations Spring MVC and Spring WebFlux annotations such as `@RequestMapping`, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`"/webjars/jquery/jquery.min.js"` results in, +`"/webjars/jquery/x.y.z/jquery.min.js"`. where `x.y.z` is the Webjar version., +secured by default. Spring Boot relies on Spring Securityâ€™s content-negotiation strategy to, +The default `UserDetailsService` has a single user. The user name is `user`, and the, +The default security configuration is implemented in `SecurityAutoConfiguration` and, +`UserDetailsServiceAutoConfiguration`. `SecurityAutoConfiguration` imports, +`SpringBootWebSecurityConfiguration` for web security and, +`UserDetailsServiceAutoConfiguration` configures authentication, which is also, +relevant in non-web applications. To switch off the default web application security, +so does not disable the `UserDetailsService` configuration or Actuator's security)., +To also switch off the `UserDetailsService` configuration, you can add a bean of type, +implemented in `ReactiveSecurityAutoConfiguration` and, +`UserDetailsServiceAutoConfiguration`. `ReactiveSecurityAutoConfiguration` imports, +`WebFluxSecurityConfiguration` for web security and `UserDetailsServiceAutoConfiguration`, +configures authentication, which is also relevant in non-web applications. To switch off the default web application security, +not disable the `UserDetailsService` configuration or Actuator's security)., +To also switch off the `UserDetailsService` configuration, you can add a bean of type, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, +	public void runWithNoneLoggingSystemShouldNotHaveEndpointBean() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvokerAdvisorTests.java]