[+++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>spring-integration-jdbc</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>spring-integration-jdbc</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import javax.sql.DataSource;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.integration.jdbc.lock.DefaultLockRepository;, +import org.springframework.integration.jdbc.store.JdbcChannelMessageStore;, +import org.springframework.integration.jdbc.store.JdbcMessageStore;, + * @author Vedran Pavic, +@EnableConfigurationProperties(IntegrationProperties.class), +	/**, +	 * Integration JDBC configuration., +	 */, +	@Configuration, +	@ConditionalOnClass(JdbcMessageStore.class), +	@ConditionalOnSingleCandidate(DataSource.class), +	protected static class IntegrationJdbcConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		@Conditional(IntegrationSchemaCondition.class), +		public IntegrationDatabaseInitializer integrationDatabaseInitializer(, +			DataSource dataSource, ResourceLoader resourceLoader,, +			IntegrationProperties properties) {, +			return new IntegrationDatabaseInitializer(dataSource, resourceLoader,, +				properties);, +		}, +, +	}, +, +	static class IntegrationSchemaCondition extends AnyNestedCondition {, +, +		IntegrationSchemaCondition() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@ConditionalOnBean(JdbcMessageStore.class), +		static class JdbcMessageStoreUsed {, +, +		}, +, +		@ConditionalOnBean(JdbcChannelMessageStore.class), +		static class JdbcChannelMessageStoreUsed {, +, +		}, +, +		@ConditionalOnBean(DefaultLockRepository.class), +		static class DefaultLockRepositoryUsed {, +, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>spring-integration-jdbc</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import javax.sql.DataSource;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.integration.jdbc.lock.DefaultLockRepository;, +import org.springframework.integration.jdbc.store.JdbcChannelMessageStore;, +import org.springframework.integration.jdbc.store.JdbcMessageStore;, + * @author Vedran Pavic, +@EnableConfigurationProperties(IntegrationProperties.class), +	/**, +	 * Integration JDBC configuration., +	 */, +	@Configuration, +	@ConditionalOnClass(JdbcMessageStore.class), +	@ConditionalOnSingleCandidate(DataSource.class), +	protected static class IntegrationJdbcConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		@Conditional(IntegrationSchemaCondition.class)]