[+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.io.InputStream;, +	private static final byte[] ZIP_FILE_HEADER = new byte[] { 'P', 'K', 3, 4 };, +, +			libraries.doWithLibraries(new LibraryCallback() {, +					if (isZip(file)) {, +, +	private boolean isZip(File file) {, +		try {, +			FileInputStream fileInputStream = new FileInputStream(file);, +			try {, +				return isZip(fileInputStream);, +			}, +			finally {, +				fileInputStream.close();, +			}, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	private boolean isZip(InputStream inputStream) throws IOException {, +		for (int i = 0; i < ZIP_FILE_HEADER.length; i++) {, +			if (inputStream.read() != ZIP_FILE_HEADER[i]) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.io.InputStream;, +	private static final byte[] ZIP_FILE_HEADER = new byte[] { 'P', 'K', 3, 4 };, +, +			libraries.doWithLibraries(new LibraryCallback() {, +					if (isZip(file)) {, +, +	private boolean isZip(File file) {, +		try {, +			FileInputStream fileInputStream = new FileInputStream(file);, +			try {, +				return isZip(fileInputStream);, +			}, +			finally {, +				fileInputStream.close();, +			}, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	private boolean isZip(InputStream inputStream) throws IOException {, +		for (int i = 0; i < ZIP_FILE_HEADER.length; i++) {, +			if (inputStream.read() != ZIP_FILE_HEADER[i]) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, + * @author Andy Wilkinson]