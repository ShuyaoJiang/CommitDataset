[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandException.java, +	/**, +	 * Create a new {@link CommandException} with the specified options., +	 * @param cause the underlying cause, +	 * @param options the exception options, +	 */, +	public CommandException(Throwable cause, Option... options) {, +		super(cause);, +		this.options = asEnumSet(options);, +	}, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandException.java, +	/**, +	 * Create a new {@link CommandException} with the specified options., +	 * @param cause the underlying cause, +	 * @param options the exception options, +	 */, +	public CommandException(Throwable cause, Option... options) {, +		super(cause);, +		this.options = asEnumSet(options);, +	}, +, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestFailedException.java, + * Copyright 2012-2014 the original author or authors., +, +import org.springframework.boot.cli.command.CommandException;, +, + * Thrown when tests fail to execute., + * @since 1.2.0, +public class TestFailedException extends CommandException {, +, +		super(cause, Option.HIDE_MESSAGE);, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandException.java, +	/**, +	 * Create a new {@link CommandException} with the specified options., +	 * @param cause the underlying cause, +	 * @param options the exception options, +	 */, +	public CommandException(Throwable cause, Option... options) {, +		super(cause);, +		this.options = asEnumSet(options);, +	}, +, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestFailedException.java, + * Copyright 2012-2014 the original author or authors., +, +import org.springframework.boot.cli.command.CommandException;, +, + * Thrown when tests fail to execute., + * @since 1.2.0, +public class TestFailedException extends CommandException {, +, +		super(cause, Option.HIDE_MESSAGE);, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestRunner.java, +import org.springframework.util.ReflectionUtils;, + * @author Graeme Rocher, +			public void uncaughtException(Thread t, Throwable ex) {, +				TestRunner.this.threadException = ex;, +		if (this.threadException != null) {, +			TestFailedException ex = new TestFailedException(this.threadException);, +			this.threadException = null;, +			throw ex;, +					Class<?> resultClass = contextClassLoader, +							.loadClass("org.junit.runner.Result");, +					Method runMethod = delegateClass.getMethod("run", Class[].class,, +							resultClass);, +					boolean wasSuccessful = (Boolean) resultClass.getMethod(, +							"wasSuccessful").invoke(result);, +			catch (Exception ex) {, +				ReflectionUtils.rethrowRuntimeException(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java, +		factory.setPubSubDomain(this.properties.isPubSubDomain());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandException.java, +	/**, +	 * Create a new {@link CommandException} with the specified options.]