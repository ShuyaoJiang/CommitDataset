[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +	@ConditionalOnMissingBean, +	public DataSourcePublicMetrics dataSourcePublicMetrics() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +	@ConditionalOnMissingBean, +	public DataSourcePublicMetrics dataSourcePublicMetrics() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +import java.util.Set;, +	private Collection<DataSourceMetadataProvider> providers;, +	private final Map<String, DataSourceMetadata> metadataByPrefix = new HashMap<String, DataSourceMetadata>();, +				this.providers);, +		for (Map.Entry<String, DataSource> entry : this.applicationContext, +				.getBeansOfType(DataSource.class).entrySet()) {, +			String beanName = entry.getKey();, +			DataSource bean = entry.getValue();, +			String prefix = createPrefix(beanName, bean, bean.equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(bean);, +				this.metadataByPrefix.put(prefix, dataSourceMetadata);, +		Set<Metric<?>> metrics = new LinkedHashSet<Metric<?>>();, +		for (Map.Entry<String, DataSourceMetadata> entry : this.metadataByPrefix, +			prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +			addMetric(metrics, prefix + "active", dataSourceMetadata.getPoolSize());, +			addMetric(metrics, prefix + "usage", dataSourceMetadata.getPoolUsage());, +		return metrics;, +, +	private <T extends Number> void addMetric(Set<Metric<?>> metrics, String name, T value) {, +		if (value != null) {, +			metrics.add(new Metric<T>(name, value));, +	 * @param name the name of the data source bean, +	protected String createPrefix(String name, DataSource dataSource, boolean primary) {, +			return "datasource.primary";, +		if (name.toLowerCase().endsWith(DATASOURCE_SUFFIX.toLowerCase())) {, +			name = name.substring(0, name.length() - DATASOURCE_SUFFIX.length());, +		return "datasource." + name;, +		catch (NoSuchBeanDefinitionException ex) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +	@ConditionalOnMissingBean, +	public DataSourcePublicMetrics dataSourcePublicMetrics() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +import java.util.Set;, +	private Collection<DataSourceMetadataProvider> providers;, +	private final Map<String, DataSourceMetadata> metadataByPrefix = new HashMap<String, DataSourceMetadata>();, +				this.providers);, +		for (Map.Entry<String, DataSource> entry : this.applicationContext, +				.getBeansOfType(DataSource.class).entrySet()) {, +			String beanName = entry.getKey();, +			DataSource bean = entry.getValue();, +			String prefix = createPrefix(beanName, bean, bean.equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(bean);, +				this.metadataByPrefix.put(prefix, dataSourceMetadata);, +		Set<Metric<?>> metrics = new LinkedHashSet<Metric<?>>();, +		for (Map.Entry<String, DataSourceMetadata> entry : this.metadataByPrefix, +			prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +			addMetric(metrics, prefix + "active", dataSourceMetadata.getPoolSize());, +			addMetric(metrics, prefix + "usage", dataSourceMetadata.getPoolUsage());, +		return metrics;, +, +	private <T extends Number> void addMetric(Set<Metric<?>> metrics, String name, T value) {, +		if (value != null) {, +			metrics.add(new Metric<T>(name, value));, +	 * @param name the name of the data source bean, +	protected String createPrefix(String name, DataSource dataSource, boolean primary) {, +			return "datasource.primary";, +		if (name.toLowerCase().endsWith(DATASOURCE_SUFFIX.toLowerCase())) {, +			name = name.substring(0, name.length() - DATASOURCE_SUFFIX.length());, +		return "datasource." + name;, +		catch (NoSuchBeanDefinitionException ex) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceMetadata.java, +public abstract class AbstractDataSourceMetadata<T extends DataSource> implements, +	private final T dataSource;, +	protected AbstractDataSourceMetadata(T dataSource) {, +		Integer maxSize = getMaxPoolSize();, +		Integer currentSize = getPoolSize();, +		if (maxSize == null || currentSize == null) {, +		if (maxSize < 0) {, +		if (currentSize == 0) {, +		return (float) currentSize / (float) maxSize;, +	protected final T getDataSource() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +	@ConditionalOnMissingBean, +	public DataSourcePublicMetrics dataSourcePublicMetrics() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +import java.util.Set;, +	private Collection<DataSourceMetadataProvider> providers;, +	private final Map<String, DataSourceMetadata> metadataByPrefix = new HashMap<String, DataSourceMetadata>();, +				this.providers);, +		for (Map.Entry<String, DataSource> entry : this.applicationContext, +				.getBeansOfType(DataSource.class).entrySet()) {, +			String beanName = entry.getKey();, +			DataSource bean = entry.getValue();, +			String prefix = createPrefix(beanName, bean, bean.equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(bean);, +				this.metadataByPrefix.put(prefix, dataSourceMetadata);, +		Set<Metric<?>> metrics = new LinkedHashSet<Metric<?>>();, +		for (Map.Entry<String, DataSourceMetadata> entry : this.metadataByPrefix, +			prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +			addMetric(metrics, prefix + "active", dataSourceMetadata.getPoolSize());, +			addMetric(metrics, prefix + "usage", dataSourceMetadata.getPoolUsage());, +		return metrics;, +]