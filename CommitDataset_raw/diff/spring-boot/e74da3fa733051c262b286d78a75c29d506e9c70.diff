[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/DefaultCounterServiceTests.java, +import java.util.Date;, +import org.junit.Test;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private MetricRepository repository = mock(MetricRepository.class);, +, +	private DefaultCounterService service = new DefaultCounterService(this.repository);, +	public void incrementPrependsCounter() {, +		this.service.increment("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(1), any(Date.class));, +	@Test, +	public void decrementPrependsCounter() {, +		this.service.decrement("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(-1), any(Date.class));, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/DefaultCounterServiceTests.java, +import java.util.Date;, +import org.junit.Test;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private MetricRepository repository = mock(MetricRepository.class);, +, +	private DefaultCounterService service = new DefaultCounterService(this.repository);, +	public void incrementPrependsCounter() {, +		this.service.increment("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(1), any(Date.class));, +	@Test, +	public void decrementPrependsCounter() {, +		this.service.decrement("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(-1), any(Date.class));, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/DefaultGaugeServiceTests.java, +import java.util.Date;, +import org.junit.Test;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private MetricRepository repository = mock(MetricRepository.class);, +, +	private DefaultGaugeService service = new DefaultGaugeService(this.repository);, +	public void setPrependsGuager() {, +		this.service.set("foo", 2.3);, +		verify(this.repository).set(eq("gauge.foo"), eq(2.3), any(Date.class));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/DefaultCounterServiceTests.java, +import java.util.Date;, +import org.junit.Test;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private MetricRepository repository = mock(MetricRepository.class);, +, +	private DefaultCounterService service = new DefaultCounterService(this.repository);, +	public void incrementPrependsCounter() {, +		this.service.increment("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(1), any(Date.class));, +	@Test, +	public void decrementPrependsCounter() {, +		this.service.decrement("foo");, +		verify(this.repository).increment(eq("counter.foo"), eq(-1), any(Date.class));, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/DefaultGaugeServiceTests.java, +import java.util.Date;, +import org.junit.Test;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private MetricRepository repository = mock(MetricRepository.class);, +, +	private DefaultGaugeService service = new DefaultGaugeService(this.repository);, +	public void setPrependsGuager() {, +		this.service.set("foo", 2.3);, +		verify(this.repository).set(eq("gauge.foo"), eq(2.3), any(Date.class));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthorizationAuditListenerTests.java, +import java.util.Arrays;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mockito;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationEventPublisher;, +import org.springframework.security.access.AccessDeniedException;, +import org.springframework.security.access.ConfigAttribute;, +import org.springframework.security.access.SecurityConfig;, +import org.springframework.security.access.event.AuthorizationFailureEvent;, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Mockito.verify;]