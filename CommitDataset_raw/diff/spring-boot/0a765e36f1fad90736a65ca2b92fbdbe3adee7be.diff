[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.HashSet;, + * @author Andy Wilkinson, +		collectCandidateConfigurations(source, candidates, new HashSet<Class<?>>());, +	private void collectCandidateConfigurations(Class<?> source, Set<String> candidates,, +			Set<Class<?>> seen) {, +		if (source != null && seen.add(source)) {, +					collectCandidateConfigurations(annotation, candidates, seen);, +			collectCandidateConfigurations(source.getSuperclass(), candidates, seen);, +			Set<String> candidates, Set<Class<?>> seen) {, +		collectCandidateConfigurations(annotation.annotationType(), candidates, seen);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.HashSet;, + * @author Andy Wilkinson, +		collectCandidateConfigurations(source, candidates, new HashSet<Class<?>>());, +	private void collectCandidateConfigurations(Class<?> source, Set<String> candidates,, +			Set<Class<?>> seen) {, +		if (source != null && seen.add(source)) {, +					collectCandidateConfigurations(annotation, candidates, seen);, +			collectCandidateConfigurations(source.getSuperclass(), candidates, seen);, +			Set<String> candidates, Set<Class<?>> seen) {, +		collectCandidateConfigurations(annotation.annotationType(), candidates, seen);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +import java.io.IOException;, + * @author Andy Wilkinson, +	@Test, +	public void selfAnnotatingAnnotationDoesNotCauseStackOverflow() throws IOException {, +		AnnotationMetadata annotationMetadata = new SimpleMetadataReaderFactory(), +				.getMetadataReader(ImportWithSelfAnnotatingAnnotation.class.getName()), +				.getAnnotationMetadata();, +		String[] imports = this.importSelector.selectImports(annotationMetadata);, +		assertThat(imports).containsOnly(ThymeleafAutoConfiguration.class.getName());, +	}, +, +	@SelfAnnotating, +	static class ImportWithSelfAnnotatingAnnotation {, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@ImportAutoConfiguration(ThymeleafAutoConfiguration.class), +	@SelfAnnotating, +	static @interface SelfAnnotating {, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.HashSet;, + * @author Andy Wilkinson, +		collectCandidateConfigurations(source, candidates, new HashSet<Class<?>>());, +	private void collectCandidateConfigurations(Class<?> source, Set<String> candidates,, +			Set<Class<?>> seen) {, +		if (source != null && seen.add(source)) {, +					collectCandidateConfigurations(annotation, candidates, seen);, +			collectCandidateConfigurations(source.getSuperclass(), candidates, seen);, +			Set<String> candidates, Set<Class<?>> seen) {, +		collectCandidateConfigurations(annotation.annotationType(), candidates, seen);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +import java.io.IOException;, + * @author Andy Wilkinson, +	@Test, +	public void selfAnnotatingAnnotationDoesNotCauseStackOverflow() throws IOException {, +		AnnotationMetadata annotationMetadata = new SimpleMetadataReaderFactory(), +				.getMetadataReader(ImportWithSelfAnnotatingAnnotation.class.getName()), +				.getAnnotationMetadata();, +		String[] imports = this.importSelector.selectImports(annotationMetadata);, +		assertThat(imports).containsOnly(ThymeleafAutoConfiguration.class.getName());, +	}, +, +	@SelfAnnotating, +	static class ImportWithSelfAnnotatingAnnotation {, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@ImportAutoConfiguration(ThymeleafAutoConfiguration.class), +	@SelfAnnotating, +	static @interface SelfAnnotating {, +, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.util.HashSet;, +import java.util.Set;, +		collectProperties(source, source, properties, new HashSet<Class<?>>());, +			Map<String, Object> properties, Set<Class<?>> seen) {, +		if (source != null && seen.add(source)) {, +					collectProperties(root, annotation.annotationType(), properties,, +							seen);, +			collectProperties(root, source.getSuperclass(), properties, seen);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.HashSet;, + * @author Andy Wilkinson, +		collectCandidateConfigurations(source, candidates, new HashSet<Class<?>>());, +	private void collectCandidateConfigurations(Class<?> source, Set<String> candidates,, +			Set<Class<?>> seen) {, +		if (source != null && seen.add(source)) {, +					collectCandidateConfigurations(annotation, candidates, seen);, +			collectCandidateConfigurations(source.getSuperclass(), candidates, seen);, +			Set<String> candidates, Set<Class<?>> seen) {]