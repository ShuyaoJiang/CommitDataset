[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +		protected Object getOptionalValue(Environment source, String name) {, +			Object result = source.getProperty(name);, +			if (result != null) {, +				result = ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +			}, +			return result;, +		}, +, +		@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +		protected Object getOptionalValue(Environment source, String name) {, +			Object result = source.getProperty(name);, +			if (result != null) {, +				result = ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +			}, +			return result;, +		}, +, +		@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +				try {, +				catch (NoSuchMetricException ex) {, +					// Metric with null value. Continue., +				}, +			}, +		protected Object getOptionalValue(Map<String, ?> source, String name) {, +			return source.get(name);, +		}, +, +		@Override, +			Object value = getOptionalValue(source, name);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +		protected Object getOptionalValue(Environment source, String name) {, +			Object result = source.getProperty(name);, +			if (result != null) {, +				result = ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +			}, +			return result;, +		}, +, +		@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +				try {, +				catch (NoSuchMetricException ex) {, +					// Metric with null value. Continue., +				}, +			}, +		protected Object getOptionalValue(Map<String, ?> source, String name) {, +			return source.get(name);, +		}, +, +		@Override, +			Object value = getOptionalValue(source, name);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, +	protected abstract Object getOptionalValue(T source, String name);, +, +				Object value = getOptionalValue(NamePatternFilter.this.source, name);, +				if (value != null) {, +					this.results.put(name, value);, +				}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +		protected Object getOptionalValue(Environment source, String name) {, +			Object result = source.getProperty(name);, +			if (result != null) {, +				result = ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +			}, +			return result;, +		}, +, +		@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +				try {, +				catch (NoSuchMetricException ex) {, +					// Metric with null value. Continue., +				}, +			}, +		protected Object getOptionalValue(Map<String, ?> source, String name) {, +			return source.get(name);, +		}, +, +		@Override, +			Object value = getOptionalValue(source, name);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, +	protected abstract Object getOptionalValue(T source, String name);, +, +				Object value = getOptionalValue(NamePatternFilter.this.source, name);, +				if (value != null) {, +					this.results.put(name, value);, +				}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpointTests.java, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put("food", null);, +		((ConfigurableEnvironment) this.context.getEnvironment()).getPropertySources(), +				.addFirst(new MapPropertySource("null-value", map));]