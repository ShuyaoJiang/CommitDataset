[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointManagementContextConfiguration.java, +		private final ReactiveHealthIndicator reactiveHealthIndicator;, +, +		ReactiveWebHealthConfiguration(, +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory(), +			return new ReactiveHealthEndpointWebExtension(this.reactiveHealthIndicator,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointManagementContextConfiguration.java, +		private final ReactiveHealthIndicator reactiveHealthIndicator;, +, +		ReactiveWebHealthConfiguration(, +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory(), +			return new ReactiveHealthEndpointWebExtension(this.reactiveHealthIndicator,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointReactiveManagementContextConfigurationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.actuate.health.Health;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.HealthIndicator;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicator;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	@Test, +	public void regularAndReactiveHealthIndicatorsMatch() {, +		this.contextRunner, +				.withUserConfiguration(HealthIndicatorsConfiguration.class), +				.run((context) -> {, +					HealthEndpoint endpoint = context.getBean(HealthEndpoint.class);, +					ReactiveHealthEndpointWebExtension extension = context, +							.getBean(ReactiveHealthEndpointWebExtension.class);, +					Health endpointHealth = endpoint.health();, +					Health extensionHealth = extension.health(true).block().getBody();, +					assertThat(endpointHealth.getDetails()), +							.containsOnlyKeys("application", "first", "second");, +					assertThat(extensionHealth.getDetails()), +							.containsOnlyKeys("application", "first", "second");, +				});, +	}, +, +	@Configuration, +	static class HealthIndicatorsConfiguration {, +, +		@Bean, +		public HealthIndicator firstHealthIndicator() {, +			return () -> Health.up().build();, +		}, +, +		@Bean, +		public ReactiveHealthIndicator secondHealthIndicator() {, +			return () -> Mono.just(Health.up().build());, +		}, +, +	}, +]