[+++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, search = SearchStrategy.CURRENT), +				Servlet.class }, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, search = SearchStrategy.CURRENT), +				Servlet.class }, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +		SearchStrategy search = (SearchStrategy) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("search");, +		search = search == null ? SearchStrategy.ALL : search;, +		boolean considerHierarchy = search == SearchStrategy.ALL;, +		boolean parentOnly = search == SearchStrategy.PARENTS;, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, search = SearchStrategy.CURRENT), +				Servlet.class }, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +		SearchStrategy search = (SearchStrategy) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("search");, +		search = search == null ? SearchStrategy.ALL : search;, +		boolean considerHierarchy = search == SearchStrategy.ALL;, +		boolean parentOnly = search == SearchStrategy.PARENTS;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnBean.java, +	 * Strategy to decide if the application context hierarchy (parent contexts) should be, +	 * considered., +	SearchStrategy search() default SearchStrategy.ALL;, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, search = SearchStrategy.CURRENT), +				Servlet.class }, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +		SearchStrategy search = (SearchStrategy) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("search");, +		search = search == null ? SearchStrategy.ALL : search;, +		boolean considerHierarchy = search == SearchStrategy.ALL;, +		boolean parentOnly = search == SearchStrategy.PARENTS;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnBean.java, +	 * Strategy to decide if the application context hierarchy (parent contexts) should be, +	 * considered., +	SearchStrategy search() default SearchStrategy.ALL;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnMissingBean.java, +	 * Strategy to decide if the application context hierarchy (parent contexts) should be, +	 * considered., +	SearchStrategy search() default SearchStrategy.ALL;, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnBean(name = "springSecurityFilterChain", search = SearchStrategy.PARENTS), +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import org.springframework.bootstrap.context.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, search = SearchStrategy.CURRENT), +				Servlet.class }, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +		SearchStrategy search = (SearchStrategy) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("search");, +		search = search == null ? SearchStrategy.ALL : search;, +		boolean considerHierarchy = search == SearchStrategy.ALL;, +		boolean parentOnly = search == SearchStrategy.PARENTS;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnBean.java, +	 * Strategy to decide if the application context hierarchy (parent contexts) should be, +	 * considered., +	SearchStrategy search() default SearchStrategy.ALL;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnMissingBean.java, +	 * Strategy to decide if the application context hierarchy (parent contexts) should be, +	 * considered., +	SearchStrategy search() default SearchStrategy.ALL;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/SearchStrategy.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]