[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +		@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +		@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java, + * @author Stephane Nicoll, +			 * Create the required integration tables on startup., +			private boolean enabled = false;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +		@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java, + * @author Stephane Nicoll, +			 * Create the required integration tables on startup., +			private boolean enabled = false;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +	public void integrationJdbcDatabaseInitializerEnabled() {, +						IntegrationAutoConfiguration.class},, +				"spring.datasource.generate-unique-name=true",, +				"spring.integration.jdbc.initializer.enabled=true");, +	public void integrationJdbcDatabaseInitializerDisabled() {, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true",, +	}, +, +	@Test, +	public void integrationJdbcDatabaseInitializerDisabledByDefault() {, +		load(new Class[] { EmbeddedDataSourceConfiguration.class,, +						DataSourceTransactionManagerAutoConfiguration.class,, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true");, +		assertThat(this.context.getBean(IntegrationProperties.class).getJdbc(), +				.getInitializer().isEnabled()).isFalse();, +		JdbcOperations jdbcOperations = this.context.getBean(JdbcOperations.class);, +		jdbcOperations.queryForList("select * from INT_MESSAGE");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +		@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java, + * @author Stephane Nicoll, +			 * Create the required integration tables on startup., +			private boolean enabled = false;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +	public void integrationJdbcDatabaseInitializerEnabled() {, +						IntegrationAutoConfiguration.class},, +				"spring.datasource.generate-unique-name=true",, +				"spring.integration.jdbc.initializer.enabled=true");, +	public void integrationJdbcDatabaseInitializerDisabled() {, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true",, +	}, +, +	@Test, +	public void integrationJdbcDatabaseInitializerDisabledByDefault() {, +		load(new Class[] { EmbeddedDataSourceConfiguration.class,, +						DataSourceTransactionManagerAutoConfiguration.class,, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true");, +		assertThat(this.context.getBean(IntegrationProperties.class).getJdbc(), +				.getInitializer().isEnabled()).isFalse();, +		JdbcOperations jdbcOperations = this.context.getBean(JdbcOperations.class);, +		jdbcOperations.queryForList("select * from INT_MESSAGE");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.integration.jdbc.initializer.enabled=false # Create the required integration tables on startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +		@ConditionalOnProperty(prefix = "spring.integration.jdbc.initializer", name = "enabled"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java, + * @author Stephane Nicoll, +			 * Create the required integration tables on startup., +			private boolean enabled = false;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +	public void integrationJdbcDatabaseInitializerEnabled() {, +						IntegrationAutoConfiguration.class},, +				"spring.datasource.generate-unique-name=true",, +				"spring.integration.jdbc.initializer.enabled=true");, +	public void integrationJdbcDatabaseInitializerDisabled() {, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true",, +	}, +, +	@Test, +	public void integrationJdbcDatabaseInitializerDisabledByDefault() {, +		load(new Class[] { EmbeddedDataSourceConfiguration.class,, +						DataSourceTransactionManagerAutoConfiguration.class,, +						JdbcTemplateAutoConfiguration.class,, +						IntegrationAutoConfiguration.class },, +				"spring.datasource.generate-unique-name=true");, +		assertThat(this.context.getBean(IntegrationProperties.class).getJdbc(), +				.getInitializer().isEnabled()).isFalse();, +		JdbcOperations jdbcOperations = this.context.getBean(JdbcOperations.class);, +		jdbcOperations.queryForList("select * from INT_MESSAGE");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.integration.jdbc.initializer.enabled=false # Create the required integration tables on startup., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`'spring-integration-jdbc'` is available, the default database schema can be created, +on startup:, +]