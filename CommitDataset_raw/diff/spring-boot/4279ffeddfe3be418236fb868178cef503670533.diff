[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, + * beans. Automatically any bean annotated with {@code @ConfigurationProperties}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, + * beans. Automatically any bean annotated with {@code @ConfigurationProperties}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, + * beans. Automatically any bean annotated with {@code @ConfigurationProperties}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +		configureExclusions(new String[0], new String[0],, +				new String[] { FreeMarkerAutoConfiguration.class.getName() });, +				FreeMarkerAutoConfiguration.class.getName(),, +				VelocityAutoConfiguration.class.getName() });, +			this.environment.setProperty("spring.autoconfigure.exclude", value);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, + * beans. Automatically any bean annotated with {@code @ConfigurationProperties}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +		configureExclusions(new String[0], new String[0],, +				new String[] { FreeMarkerAutoConfiguration.class.getName() });, +				FreeMarkerAutoConfiguration.class.getName(),, +				VelocityAutoConfiguration.class.getName() });, +			this.environment.setProperty("spring.autoconfigure.exclude", value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfigurationTests.java, +		load(new Class[] { SampleBean.class,, +				ConfigurationPropertiesAutoConfiguration.class }, "foo.name:test");, +	private void load(Class<?>[] configs, String... environment) {, +	static class SampleBean {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.java, + * beans. Automatically any bean annotated with {@code @ConfigurationProperties}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +		configureExclusions(new String[0], new String[0],, +				new String[] { FreeMarkerAutoConfiguration.class.getName() });, +				FreeMarkerAutoConfiguration.class.getName(),, +				VelocityAutoConfiguration.class.getName() });, +			this.environment.setProperty("spring.autoconfigure.exclude", value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfigurationTests.java, +		load(new Class[] { SampleBean.class,, +				ConfigurationPropertiesAutoConfiguration.class }, "foo.name:test");, +	private void load(Class<?>[] configs, String... environment) {, +	static class SampleBean {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java, +	public void testHiddenHttpMethodFilterOrderedFirst() throws Exception {, +		int port = Integer.parseInt(this.context.getEnvironment().getProperty(, +				"local.server.port"));, +		ResponseEntity<Object> result = rest.postForEntity("http://localhost:" + port, +				+ "/", form, Object.class);, +			http.authorizeRequests().antMatchers(HttpMethod.POST, "/**").denyAll();, +]