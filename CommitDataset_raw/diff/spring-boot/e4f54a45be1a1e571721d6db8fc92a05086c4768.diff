[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportFilter.java, + * Copyright 2012-2018 the original author or authors., +	 * This array may contain {@code null} elements. Implementations should not change the, +	 * values in this array., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportFilter.java, + * Copyright 2012-2018 the original author or authors., +	 * This array may contain {@code null} elements. Implementations should not change the, +	 * values in this array., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +					candidates[i] = null;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportFilter.java, + * Copyright 2012-2018 the original author or authors., +	 * This array may contain {@code null} elements. Implementations should not change the, +	 * values in this array., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +					candidates[i] = null;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	 * Attempt to find the {@link ConditionEvaluationReport} for the specified bean, +	 * factory., +	 * @param beanFactory the bean factory (may be {@code null}), +	 * @return the {@link ConditionEvaluationReport} or {@code null}, +	 */, +	public static ConditionEvaluationReport find(BeanFactory beanFactory) {, +		if (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {, +			return ConditionEvaluationReport, +					.get((ConfigurableListableBeanFactory) beanFactory);, +		}, +		return null;, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportFilter.java, + * Copyright 2012-2018 the original author or authors., +	 * This array may contain {@code null} elements. Implementations should not change the, +	 * values in this array., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +					candidates[i] = null;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	 * Attempt to find the {@link ConditionEvaluationReport} for the specified bean, +	 * factory., +	 * @param beanFactory the bean factory (may be {@code null}), +	 * @return the {@link ConditionEvaluationReport} or {@code null}, +	 */, +	public static ConditionEvaluationReport find(BeanFactory beanFactory) {, +		if (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {, +			return ConditionEvaluationReport, +					.get((ConfigurableListableBeanFactory) beanFactory);, +		}, +		return null;, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/FilteringSpringBootCondition.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.boot.autoconfigure.AutoConfigurationImportFilter;, +import org.springframework.boot.autoconfigure.AutoConfigurationMetadata;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.CollectionUtils;, +, +/**, + * Abstract base class for a {@link SpringBootCondition} that also implements, + * {@link AutoConfigurationImportFilter}., + *, + * @author Phillip Webb, + */, +abstract class FilteringSpringBootCondition extends SpringBootCondition, +		implements AutoConfigurationImportFilter, BeanFactoryAware, BeanClassLoaderAware {, +, +	private BeanFactory beanFactory;, +, +	private ClassLoader beanClassLoader;, +]