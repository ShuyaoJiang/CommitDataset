[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +			ResourceProperties.Cache.Cachecontrol cacheControl = this.resourceProperties, +					.getCache().getCachecontrol();, +				if (cachePeriod != null && cacheControl.getMaxAge() == null) {, +					cacheControl.setMaxAge(cachePeriod);, +				registration.setCacheControl(cacheControl.toHttpCacheControl());, +				if (cachePeriod != null && cacheControl.getMaxAge() == null) {, +					cacheControl.setMaxAge(cachePeriod);, +				registration.setCacheControl(cacheControl.toHttpCacheControl());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +			ResourceProperties.Cache.Cachecontrol cacheControl = this.resourceProperties, +					.getCache().getCachecontrol();, +				if (cachePeriod != null && cacheControl.getMaxAge() == null) {, +					cacheControl.setMaxAge(cachePeriod);, +				registration.setCacheControl(cacheControl.toHttpCacheControl());, +				if (cachePeriod != null && cacheControl.getMaxAge() == null) {, +					cacheControl.setMaxAge(cachePeriod);, +				registration.setCacheControl(cacheControl.toHttpCacheControl());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +import java.util.Collections;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +import org.springframework.boot.test.context.assertj.AssertableReactiveWebApplicationContext;, +import org.springframework.http.CacheControl;, +import org.springframework.web.util.pattern.PathPattern;, +	@Test, +	public void cachePeriod() {, +		this.contextRunner.withPropertyValues("spring.resources.cache.period:5"), +				.run(this::assertCachePeriod);, +	}, +, +	@Test, +	public void cacheControl() {, +		this.contextRunner, +				.withPropertyValues("spring.resources.cache.cachecontrol.max-age:5",, +						"spring.resources.cache.cachecontrol.proxy-revalidate:true"), +				.run(this::assertCacheControl);, +	}, +, +	private void assertCachePeriod(AssertableReactiveWebApplicationContext context) {, +		Map<PathPattern, Object> handlerMap = getHandlerMap(, +				context.getBean("resourceHandlerMapping", HandlerMapping.class));, +		assertThat(handlerMap).hasSize(2);, +		for (Object handler : handlerMap.values()) {, +			if (handler instanceof ResourceWebHandler) {, +				assertThat(((ResourceWebHandler) handler).getCacheControl()), +						.isEqualToComparingFieldByField(, +								CacheControl.maxAge(5, TimeUnit.SECONDS));, +			}, +		}, +	}, +, +	private Map<PathPattern, Object> getHandlerMap(HandlerMapping mapping) {, +		if (mapping instanceof SimpleUrlHandlerMapping) {, +			return ((SimpleUrlHandlerMapping) mapping).getHandlerMap();, +		}, +		return Collections.emptyMap();, +	}, +, +	private void assertCacheControl(AssertableReactiveWebApplicationContext context) {, +		Map<PathPattern, Object> handlerMap = getHandlerMap(, +				context.getBean("resourceHandlerMapping", HandlerMapping.class));, +		assertThat(handlerMap).hasSize(2);, +		for (Object handler : handlerMap.values()) {, +			if (handler instanceof ResourceWebHandler) {, +				assertThat(((ResourceWebHandler) handler).getCacheControl()), +						.isEqualToComparingFieldByField(CacheControl, +								.maxAge(5, TimeUnit.SECONDS).proxyRevalidate());, +			}, +		}, +	}, +]