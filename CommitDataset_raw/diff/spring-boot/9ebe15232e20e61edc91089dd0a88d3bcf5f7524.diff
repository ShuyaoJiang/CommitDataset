[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricExportersTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricExportersTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Tests for {@link SessionAutoConfiguration}., + *, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricExportersTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Tests for {@link SessionAutoConfiguration}., + *, +++ b/spring-boot-tools/spring-boot-configuration-metadata/pom.xml, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricExportersTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Tests for {@link SessionAutoConfiguration}., + *, +++ b/spring-boot-tools/spring-boot-configuration-metadata/pom.xml, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataGroup.java, + * Copyright 2012-2015 the original author or authors., + * Gather a collection of {@link ConfigurationMetadataProperty properties} that are, + * sharing a {@link #getId() common prefix}. Provide access to all the, + * {@link ConfigurationMetadataSource sources} that have contributed properties to the, + * group., +	private final Map<String, ConfigurationMetadataSource> sources = new HashMap<String, ConfigurationMetadataSource>();, +	private final Map<String, ConfigurationMetadataProperty> properties = new HashMap<String, ConfigurationMetadataProperty>();, +	 * Return the id of the group, used as a common prefix for all properties associated, +	 * to it., +	 * @return the id of the group, +	 * Return the {@link ConfigurationMetadataSource sources} defining the properties of, +	 * this group., +	 * @return the sources of the group, +	 * <p>, +	 * A property may appear more than once for a given source, potentially with, +	 * conflicting type or documentation. This is a "merged" view of the properties of, +	 * this group., +	 * @return the properties of the group, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		if (reader == null && this.exporters.isEmpty()) {, +			return new NoOpSchedulingConfigurer();, +		}, +		MetricExporters exporters = new MetricExporters(this.properties);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/export/MetricExportersTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Tests for {@link SessionAutoConfiguration}., + *, +++ b/spring-boot-tools/spring-boot-configuration-metadata/pom.xml, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataGroup.java, + * Copyright 2012-2015 the original author or authors., + * Gather a collection of {@link ConfigurationMetadataProperty properties} that are, + * sharing a {@link #getId() common prefix}. Provide access to all the, + * {@link ConfigurationMetadataSource sources} that have contributed properties to the, + * group., +	private final Map<String, ConfigurationMetadataSource> sources = new HashMap<String, ConfigurationMetadataSource>();, +	private final Map<String, ConfigurationMetadataProperty> properties = new HashMap<String, ConfigurationMetadataProperty>();, +	 * Return the id of the group, used as a common prefix for all properties associated, +	 * to it., +	 * @return the id of the group, +	 * Return the {@link ConfigurationMetadataSource sources} defining the properties of, +	 * this group., +	 * @return the sources of the group, +	 * <p>, +	 * A property may appear more than once for a given source, potentially with]