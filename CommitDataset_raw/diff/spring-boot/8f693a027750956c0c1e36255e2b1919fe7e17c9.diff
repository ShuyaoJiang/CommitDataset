[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java, +import org.springframework.boot.context.properties.ConfigurationPropertiesScan;, + * auto-configuration}, {@link ComponentScan component scanning}, and, + * {@link ConfigurationPropertiesScan configuration properties scanning}. This is a, + * convenience annotation that is equivalent to declaring {@code @Configuration},, + * {@code @EnableAutoConfiguration}, {@code @ComponentScan}, and, + * {@code @ConfigurationPropertiesScan}., +@ConfigurationPropertiesScan, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java, +import org.springframework.boot.context.properties.ConfigurationPropertiesScan;, + * auto-configuration}, {@link ComponentScan component scanning}, and, + * {@link ConfigurationPropertiesScan configuration properties scanning}. This is a, + * convenience annotation that is equivalent to declaring {@code @Configuration},, + * {@code @EnableAutoConfiguration}, {@code @ComponentScan}, and, + * {@code @ConfigurationPropertiesScan}., +@ConfigurationPropertiesScan, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +automatically. If your application uses `@SpringBootApplication`, classes annotated with, +`@ConfigurationProperties` will automatically be scanned and registered as beans. By default,, +scanning will occur from the package of the class that declares this annotation. If you want, +to define specific packages to scan, you can do so using an explicit `@ConfigurationPropertiesScan`, +directive on your `@SpringBootApplication`-annotated class as shown in the following example:, +, +[source,java,indent=0], +----, +	@SpringBootApplication, +	@ConfigurationPropertiesScan({ "com.example.app", "org.acme.another" }), +	public class MyApplication {, +	}, +----, +, +Sometimes, classes annotated with `@ConfigurationProperties` might not be suitable, +for scanning, for example, if you're developing your own auto-configuration. In these, +cases, you can specify the list of types to process on any `@Configuration` class as, +When the `@ConfigurationProperties` bean is registered using scanning or via, +`@EnableConfigurationProperties`, the bean has a conventional name: `<prefix>-<fqn>`,, +where `<prefix>` is the environment key prefix specified in the `@ConfigurationProperties`, +annotation and `<fqn>` is the fully qualified name of the bean. If the annotation does not, +provide any prefix, only the fully qualified name of the bean is used., +The bean name in the example above is `acme-com.example.AcmeProperties`., +NOTE: Annotating a `@ConfigurationProperties` type with `@Component` will result in two, +beans of the same type if the type is also scanned as part of classpath scanning. If you want, +to register the bean yourself using `@Component`, consider disabling scanning of, +`@ConfigurationProperties`., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java, +import org.springframework.boot.context.properties.ConfigurationPropertiesScan;, + * auto-configuration}, {@link ComponentScan component scanning}, and, + * {@link ConfigurationPropertiesScan configuration properties scanning}. This is a, + * convenience annotation that is equivalent to declaring {@code @Configuration},, + * {@code @EnableAutoConfiguration}, {@code @ComponentScan}, and, + * {@code @ConfigurationPropertiesScan}., +@ConfigurationPropertiesScan, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +automatically. If your application uses `@SpringBootApplication`, classes annotated with, +`@ConfigurationProperties` will automatically be scanned and registered as beans. By default,, +scanning will occur from the package of the class that declares this annotation. If you want, +to define specific packages to scan, you can do so using an explicit `@ConfigurationPropertiesScan`, +directive on your `@SpringBootApplication`-annotated class as shown in the following example:, +, +[source,java,indent=0], +----, +	@SpringBootApplication, +	@ConfigurationPropertiesScan({ "com.example.app", "org.acme.another" }), +	public class MyApplication {, +	}, +----, +, +Sometimes, classes annotated with `@ConfigurationProperties` might not be suitable, +for scanning, for example, if you're developing your own auto-configuration. In these, +cases, you can specify the list of types to process on any `@Configuration` class as, +When the `@ConfigurationProperties` bean is registered using scanning or via, +`@EnableConfigurationProperties`, the bean has a conventional name: `<prefix>-<fqn>`,, +where `<prefix>` is the environment key prefix specified in the `@ConfigurationProperties`, +annotation and `<fqn>` is the fully qualified name of the bean. If the annotation does not, +provide any prefix, only the fully qualified name of the bean is used., +The bean name in the example above is `acme-com.example.AcmeProperties`., +NOTE: Annotating a `@ConfigurationProperties` type with `@Component` will result in two, +beans of the same type if the type is also scanned as part of classpath scanning. If you want, +to register the bean yourself using `@Component`, consider disabling scanning of, +`@ConfigurationProperties`., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +the `@ComponentScan`, `@ConfigurationPropertiesScan`, `@EntityScan`, or `@SpringBootApplication`, +annotations, since every class from every jar is read., +`@ComponentScan`, and `@ConfigurationPropertiesScan` annotations that it imports defines, +that behaviour so you can also use those instead., +* `@ConfigurationPropertiesScan`: enable `@ConfigurationProperties` scan on the package, +where the application is located (see <<using-boot-structuring-your-code,the best practices>>), +`@EnableAutoConfiguration`, @ComponentScan`, and `@ConfigurationPropertiesScan` with their default, +attributes, as shown in the following example:, +	@SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan @ConfigurationPropertiesScan, +scan or configuration properties scan in your application:, +`@Component`-annotated classes and `@ConfigurationProperties`-annotated classes are not detected, +automatically and the user-defined beans are imported explicitly (see `@Import`)., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java, +import org.springframework.boot.context.properties.ConfigurationPropertiesScan;, + * auto-configuration}, {@link ComponentScan component scanning}, and, + * {@link ConfigurationPropertiesScan configuration properties scanning}. This is a, + * convenience annotation that is equivalent to declaring {@code @Configuration},, + * {@code @EnableAutoConfiguration}, {@code @ComponentScan}, and, + * {@code @ConfigurationPropertiesScan}.]