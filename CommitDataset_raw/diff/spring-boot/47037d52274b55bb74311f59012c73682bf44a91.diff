[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java, +import reactor.core.publisher.Flux;, +@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class }), +@AutoConfigureAfter(CassandraDataAutoConfiguration.class), +	public ReactiveSession reactiveCassandraSession(Session session) {, +	public ReactiveSessionFactory reactiveCassandraSessionFactory(, +			ReactiveSession reactiveCassandraSession) {, +		return new DefaultReactiveSessionFactory(reactiveCassandraSession);, +	public ReactiveCassandraTemplate reactiveCassandraTemplate(, +			ReactiveSession reactiveCassandraSession,, +			CassandraConverter converter) {, +		return new ReactiveCassandraTemplate(reactiveCassandraSession, converter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java, +import reactor.core.publisher.Flux;, +@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class }), +@AutoConfigureAfter(CassandraDataAutoConfiguration.class), +	public ReactiveSession reactiveCassandraSession(Session session) {, +	public ReactiveSessionFactory reactiveCassandraSessionFactory(, +			ReactiveSession reactiveCassandraSession) {, +		return new DefaultReactiveSessionFactory(reactiveCassandraSession);, +	public ReactiveCassandraTemplate reactiveCassandraTemplate(, +			ReactiveSession reactiveCassandraSession,, +			CassandraConverter converter) {, +		return new ReactiveCassandraTemplate(reactiveCassandraSession, converter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, + * @see EnableReactiveCassandraRepositories, +@AutoConfigureAfter(ReactiveCassandraDataAutoConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java, +import reactor.core.publisher.Flux;, +@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class }), +@AutoConfigureAfter(CassandraDataAutoConfiguration.class), +	public ReactiveSession reactiveCassandraSession(Session session) {, +	public ReactiveSessionFactory reactiveCassandraSessionFactory(, +			ReactiveSession reactiveCassandraSession) {, +		return new DefaultReactiveSessionFactory(reactiveCassandraSession);, +	public ReactiveCassandraTemplate reactiveCassandraTemplate(, +			ReactiveSession reactiveCassandraSession,, +			CassandraConverter converter) {, +		return new ReactiveCassandraTemplate(reactiveCassandraSession, converter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, + * @see EnableReactiveCassandraRepositories, +@AutoConfigureAfter(ReactiveCassandraDataAutoConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfigureRegistrar.java, +class ReactiveCassandraRepositoriesAutoConfigureRegistrar, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java, +import reactor.core.publisher.Flux;, +@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class }), +@AutoConfigureAfter(CassandraDataAutoConfiguration.class), +	public ReactiveSession reactiveCassandraSession(Session session) {, +	public ReactiveSessionFactory reactiveCassandraSessionFactory(, +			ReactiveSession reactiveCassandraSession) {, +		return new DefaultReactiveSessionFactory(reactiveCassandraSession);, +	public ReactiveCassandraTemplate reactiveCassandraTemplate(, +			ReactiveSession reactiveCassandraSession,, +			CassandraConverter converter) {, +		return new ReactiveCassandraTemplate(reactiveCassandraSession, converter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, + * @see EnableReactiveCassandraRepositories, +@AutoConfigureAfter(ReactiveCassandraDataAutoConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfigureRegistrar.java, +class ReactiveCassandraRepositoriesAutoConfigureRegistrar, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfigurationTests.java, + * Tests for {@link ReactiveCassandraDataAutoConfiguration}., + * @author Stephane Nicoll, +		load("spring.data.cassandra.keyspaceName:boot_test");, +		assertThat(this.context.getBeanNamesForType(ReactiveCassandraTemplate.class)), +				.hasSize(1);, +		load(EntityScanConfig.class, "spring.data.cassandra.keyspaceName:boot_test");, +		load("spring.data.cassandra.keyspaceName:boot_test");, +	private void load(String... environment) {, +		load(null, environment);, +	}, +	private void load(Class<?> config, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(ctx, environment);, +		if (config != null) {, +			ctx.register(config);, +		}, +		ctx.register(TestConfiguration.class, CassandraAutoConfiguration.class,, +				CassandraDataAutoConfiguration.class,, +				ReactiveCassandraDataAutoConfiguration.class);, +		ctx.refresh();, +		this.context = ctx;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraDataAutoConfiguration.java, +import reactor.core.publisher.Flux;, +@ConditionalOnClass({ Cluster.class, ReactiveCassandraTemplate.class, Flux.class }), +@AutoConfigureAfter(CassandraDataAutoConfiguration.class), +	public ReactiveSession reactiveCassandraSession(Session session) {, +	public ReactiveSessionFactory reactiveCassandraSessionFactory(, +			ReactiveSession reactiveCassandraSession) {, +		return new DefaultReactiveSessionFactory(reactiveCassandraSession);, +	public ReactiveCassandraTemplate reactiveCassandraTemplate(, +			ReactiveSession reactiveCassandraSession,, +			CassandraConverter converter) {, +		return new ReactiveCassandraTemplate(reactiveCassandraSession, converter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/ReactiveCassandraRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;]