[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, + * @author Phillip Webb, +	private MockableOnJndi condition = new MockableOnJndi();, +, +			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +					this.initialContextFactory);, +	@Test, +	public void jndiLocationNotFound() {, +		ConditionOutcome outcome = this.condition.getMatchOutcome(null,, +				mockMetaData("java:/a"));, +		assertThat(outcome.isMatch(), equalTo(false));, +	}, +, +	@Test, +	public void jndiLocationFound() {, +		this.condition.setFoundLocation("java:/b");, +		ConditionOutcome outcome = this.condition.getMatchOutcome(null,, +				mockMetaData("java:/a", "java:/b"));, +		assertThat(outcome.isMatch(), equalTo(true));, +	}, +, +	private AnnotatedTypeMetadata mockMetaData(String... value) {, +		AnnotatedTypeMetadata metadata = mock(AnnotatedTypeMetadata.class);, +		Map<String, Object> attributes = new HashMap<String, Object>();, +		attributes.put("value", value);, +		given(metadata.getAnnotationAttributes(ConditionalOnJndi.class.getName())), +				.willReturn(attributes);, +		return metadata;, +	}, +, +	private static class MockableOnJndi extends OnJndiCondition {, +, +		private boolean jndiAvailable = true;, +, +		private String foundLocation;, +, +		@Override, +		protected boolean isJndiAvailable() {, +			return this.jndiAvailable;, +		}, +, +		@Override, +		protected JndiLocator getJndiLocator(String[] locations) {, +			return new JndiLocator(locations) {, +				@Override, +				public String lookupFirstLocation() {, +					return MockableOnJndi.this.foundLocation;, +				}, +			};, +		}, +, +		public void setFoundLocation(String foundLocation) {, +			this.foundLocation = foundLocation;, +		}, +	}, +		@Override, +			catch (NamingException ex) {, +				throw new IllegalStateException(ex);, +				catch (NamingException ex) {, +					throw new IllegalStateException(ex);, +			public void bind(String name, Object obj) throws NamingException {, +				return new Hashtable<Object, Object>(); // Used to detect if JNDI is, +														// available, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, + * @author Phillip Webb, +	private MockableOnJndi condition = new MockableOnJndi();, +, +			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +					this.initialContextFactory);, +	@Test, +	public void jndiLocationNotFound() {, +		ConditionOutcome outcome = this.condition.getMatchOutcome(null,, +				mockMetaData("java:/a"));, +		assertThat(outcome.isMatch(), equalTo(false));, +	}, +, +	@Test, +	public void jndiLocationFound() {, +		this.condition.setFoundLocation("java:/b");]