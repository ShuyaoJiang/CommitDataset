[+++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "management.health.cassandra.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable cassandra health check.",, +    "defaultValue": true, +  },, +  {, +    "name": "management.health.couchbase.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable couchbase health check.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "management.health.cassandra.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable cassandra health check.",, +    "defaultValue": true, +  },, +  {, +    "name": "management.health.couchbase.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable couchbase health check.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public void notCassandraHealthIndicator() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.health.diskspace.enabled:false",, +				"management.health.cassandra.enabled:false");, +		this.context.register(CassandraConfiguration.class,, +				ManagementServerProperties.class, HealthIndicatorAutoConfiguration.class);, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertThat(beans).hasSize(1);, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(ApplicationHealthIndicator.class);, +	}, +, +	@Test, +	@Test, +	public void notCouchbaseHealthIndicator() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.health.diskspace.enabled:false",, +				"management.health.couchbase.enabled:false");, +		this.context.register(CouchbaseConfiguration.class,, +				ManagementServerProperties.class, HealthIndicatorAutoConfiguration.class);, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertThat(beans.size()).isEqualTo(1);, +		assertThat(beans.values().iterator().next().getClass()), +				.isEqualTo(ApplicationHealthIndicator.class);, +	}, +]