[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +				configureResourceCaching(registration);, +				configureResourceCaching(registration);, +				customizeResourceHandlerRegistration(registration);, +			}, +		}, +, +		private void configureResourceCaching(ResourceHandlerRegistration registration) {, +			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();, +			ResourceProperties.Cache.Cachecontrol cacheControl = this.resourceProperties, +					.getCache().getCachecontrol();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +				configureResourceCaching(registration);, +				configureResourceCaching(registration);, +				customizeResourceHandlerRegistration(registration);, +			}, +		}, +, +		private void configureResourceCaching(ResourceHandlerRegistration registration) {, +			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();, +			ResourceProperties.Cache.Cachecontrol cacheControl = this.resourceProperties, +					.getCache().getCachecontrol();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +import org.springframework.context.ApplicationContext;, +				.run((context) -> {, +					Map<PathPattern, Object> handlerMap = getHandlerMap(context);, +				});, +	@Test, +	public void cacheControl() {, +		this.contextRunner, +				.withPropertyValues("spring.resources.cache.cachecontrol.max-age:5",, +						"spring.resources.cache.cachecontrol.proxy-revalidate:true"), +				.run((context) -> {, +					Map<PathPattern, Object> handlerMap = getHandlerMap(context);, +									.isEqualToComparingFieldByField(, +											CacheControl.maxAge(5, TimeUnit.SECONDS), +													.proxyRevalidate());, +				});, +	}, +, +	private Map<PathPattern, Object> getHandlerMap(ApplicationContext context) {, +		HandlerMapping mapping = context.getBean("resourceHandlerMapping",, +				HandlerMapping.class);, +		if (mapping instanceof SimpleUrlHandlerMapping) {, +			return ((SimpleUrlHandlerMapping) mapping).getHandlerMap();, +		}, +		return Collections.emptyMap();]