[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +	protected final Environment getEnvironment() {, +		return this.environment;, +	}, +, +			return this.environment.getProperty(ENDPOINTS_ENABLED_PROPERTY,, +					Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +	protected final Environment getEnvironment() {, +		return this.environment;, +	}, +, +			return this.environment.getProperty(ENDPOINTS_ENABLED_PROPERTY,, +					Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +public class EnvironmentEndpoint extends AbstractEndpoint<Map<String, Object>> {, +		result.put("profiles", getEnvironment().getActiveProfiles());, +		Environment environment = getEnvironment();, +		if (environment != null && environment instanceof ConfigurableEnvironment) {, +			sources = ((ConfigurableEnvironment) environment).getPropertySources();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +	protected final Environment getEnvironment() {, +		return this.environment;, +	}, +, +			return this.environment.getProperty(ENDPOINTS_ENABLED_PROPERTY,, +					Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +public class EnvironmentEndpoint extends AbstractEndpoint<Map<String, Object>> {, +		result.put("profiles", getEnvironment().getActiveProfiles());, +		Environment environment = getEnvironment();, +		if (environment != null && environment instanceof ConfigurableEnvironment) {, +			sources = ((ConfigurableEnvironment) environment).getPropertySources();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, +import java.util.HashMap;, +import java.util.Map;, +	@Test, +	public void isAllEndpointsDisabled() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		PropertySource<?> propertySource = new MapPropertySource("test",, +				Collections.<String, Object> singletonMap("endpoints.enabled", false));, +		this.context.getEnvironment().getPropertySources().addFirst(propertySource);, +		this.context.register(this.configClass);, +		this.context.refresh();, +		assertThat(getEndpointBean().isEnabled(), equalTo(false));, +	}, +, +	@Test, +	public void isOptIn() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		Map<String, Object> source = new HashMap<String, Object>();, +		source.put("endpoints.enabled", false);, +		source.put(this.property + ".enabled", true);, +		PropertySource<?> propertySource = new MapPropertySource("test", source);, +		this.context.getEnvironment().getPropertySources().addFirst(propertySource);, +		this.context.register(this.configClass);, +		this.context.refresh();, +		assertThat(getEndpointBean().isEnabled(), equalTo(true));, +	}, +]