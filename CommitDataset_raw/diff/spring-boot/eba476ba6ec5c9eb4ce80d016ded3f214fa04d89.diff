[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	@Conditional(OnEnabledLoggingSystemCondition.class), +, +	static class OnEnabledLoggingSystemCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Logging System");, +			String loggingSystem = System.getProperty(LoggingSystem.SYSTEM_PROPERTY);, +			if (LoggingSystem.NONE.equals(loggingSystem)) {, +				return ConditionOutcome.noMatch(message.because("system property ", +						+ LoggingSystem.SYSTEM_PROPERTY + " is set to none"));, +			}, +			return ConditionOutcome.match(message.because("enabled"));, +		}, +, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	@Conditional(OnEnabledLoggingSystemCondition.class), +, +	static class OnEnabledLoggingSystemCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Logging System");, +			String loggingSystem = System.getProperty(LoggingSystem.SYSTEM_PROPERTY);, +			if (LoggingSystem.NONE.equals(loggingSystem)) {, +				return ConditionOutcome.noMatch(message.because("system property ", +						+ LoggingSystem.SYSTEM_PROPERTY + " is set to none"));, +			}, +			return ConditionOutcome.match(message.because("enabled"));, +		}, +, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void runWithNoneLoggerEndpointShouldNotHaveEndpointBean() {, +		this.contextRunner, +				.withSystemProperties("org.springframework.boot.logging.LoggingSystem=none"), +				.run((context) -> {, +					System.out.println(context.getBean(LoggingSystem.class));, +					assertThat(context), +							.doesNotHaveBean(LoggersEndpoint.class);, +				});, +	}, +]