[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java, +	 * @param mem, +		memoryUsage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();, +		result.add(, +				new Metric<Long>("nonheap.committed", memoryUsage.getCommitted() / 1024));, +		result.add(new Metric<Long>("nonheap.init", memoryUsage.getInit() / 1024));, +		result.add(new Metric<Long>("nonheap.used", memoryUsage.getUsed() / 1024));, +		result.add(new Metric<Long>("nonheap", memoryUsage.getMax() / 1024));, +		Metric<Long> mem = findMemory(result);, +		if (mem != null) {, +			mem.increment(new Long(memoryUsage.getUsed() / 1024).intValue());, +		}, +	}, +, +	private Metric<Long> findMemory(Collection<Metric<?>> result) {, +		for (Metric<?> metric : result) {, +			if ("mem".equals(metric.getName())) {, +				@SuppressWarnings("unchecked"), +				Metric<Long> value = (Metric<Long>) metric;, +				return value;, +			}, +		}, +		return null;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java, +	 * @param mem, +		memoryUsage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();, +		result.add(, +				new Metric<Long>("nonheap.committed", memoryUsage.getCommitted() / 1024));, +		result.add(new Metric<Long>("nonheap.init", memoryUsage.getInit() / 1024));, +		result.add(new Metric<Long>("nonheap.used", memoryUsage.getUsed() / 1024));, +		result.add(new Metric<Long>("nonheap", memoryUsage.getMax() / 1024));, +		Metric<Long> mem = findMemory(result);, +		if (mem != null) {, +			mem.increment(new Long(memoryUsage.getUsed() / 1024).intValue());, +		}, +	}, +, +	private Metric<Long> findMemory(Collection<Metric<?>> result) {, +		for (Metric<?> metric : result) {, +			if ("mem".equals(metric.getName())) {, +				@SuppressWarnings("unchecked"), +				Metric<Long> value = (Metric<Long>) metric;, +				return value;, +			}, +		}, +		return null;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/SystemPublicMetricsTests.java, +		assertTrue(results.containsKey("nonheap.committed"));, +		assertTrue(results.containsKey("nonheap.init"));, +		assertTrue(results.containsKey("nonheap.used"));, +		assertTrue(results.containsKey("nonheap"));, +]