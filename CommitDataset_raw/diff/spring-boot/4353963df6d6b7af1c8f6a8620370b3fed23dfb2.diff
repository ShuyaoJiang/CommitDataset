[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Eddú Meléndez, +					.asList(StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(value != null, +							? this.environment.resolvePlaceholders(value) : fallback)));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Eddú Meléndez, +					.asList(StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(value != null, +							? this.environment.resolvePlaceholders(value) : fallback)));, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + * @author Eddú Meléndez, +	public void yamlSetsMultiProfiles() throws Exception {, +		this.initializer.setSearchNames("testsetmultiprofiles");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		assertThat(this.environment.getActiveProfiles()).containsExactly("dev", "healthcheck");, +		String property = this.environment.getProperty("my.property");, +		String property2 = this.environment.getProperty("my.property2");, +		assertThat(property).isEqualTo("fromdevprofile");, +		assertThat(property2).isEqualTo("fromhealthcheckprofile");, +		ConfigurationPropertySources propertySource = (ConfigurationPropertySources) this.environment, +				.getPropertySources(), +				.get(ConfigFileApplicationListener.APPLICATION_CONFIGURATION_PROPERTY_SOURCE_NAME);, +		Collection<org.springframework.core.env.PropertySource<?>> sources = propertySource, +				.getSource();, +		assertThat(sources).hasSize(3);, +		List<String> names = new ArrayList<String>();, +		for (org.springframework.core.env.PropertySource<?> source : sources) {, +			if (source instanceof EnumerableCompositePropertySource) {, +				for (org.springframework.core.env.PropertySource<?> nested : ((EnumerableCompositePropertySource) source), +						.getSource()) {, +					names.add(nested.getName());, +				}, +			}, +			else {, +				names.add(source.getName());, +			}, +		}, +		assertThat(names).contains(, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]#healthcheck",, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]#dev",, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]");, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Eddú Meléndez, +					.asList(StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(value != null, +							? this.environment.resolvePlaceholders(value) : fallback)));, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, + * @author Eddú Meléndez, +	public void yamlSetsMultiProfiles() throws Exception {, +		this.initializer.setSearchNames("testsetmultiprofiles");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		assertThat(this.environment.getActiveProfiles()).containsExactly("dev", "healthcheck");, +		String property = this.environment.getProperty("my.property");, +		String property2 = this.environment.getProperty("my.property2");, +		assertThat(property).isEqualTo("fromdevprofile");, +		assertThat(property2).isEqualTo("fromhealthcheckprofile");, +		ConfigurationPropertySources propertySource = (ConfigurationPropertySources) this.environment, +				.getPropertySources(), +				.get(ConfigFileApplicationListener.APPLICATION_CONFIGURATION_PROPERTY_SOURCE_NAME);, +		Collection<org.springframework.core.env.PropertySource<?>> sources = propertySource, +				.getSource();, +		assertThat(sources).hasSize(3);, +		List<String> names = new ArrayList<String>();, +		for (org.springframework.core.env.PropertySource<?> source : sources) {, +			if (source instanceof EnumerableCompositePropertySource) {, +				for (org.springframework.core.env.PropertySource<?> nested : ((EnumerableCompositePropertySource) source), +						.getSource()) {, +					names.add(nested.getName());, +				}, +			}, +			else {, +				names.add(source.getName());, +			}, +		}, +		assertThat(names).contains(, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]#healthcheck",, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]#dev",, +				"applicationConfig: [classpath:/testsetmultiprofiles.yml]");, +	}, +, +	@Test, +++ b/spring-boot/src/test/resources/testsetmultiprofiles.yml, +---, +spring:, +  profiles:, +    active: dev, healthcheck, +my:, +  property: fromyamlfile, +  property2: fromyamlfile, +---, +spring:, +  profiles: dev, +my:, +  property: fromdevprofile, +---, +spring:, +  profiles: healthcheck, +my:, +  property2: fromhealthcheckprofile]