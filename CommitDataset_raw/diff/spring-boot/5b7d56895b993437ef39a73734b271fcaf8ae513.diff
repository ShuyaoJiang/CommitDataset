[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/RandomAccessJarFile.java, +			inputStream = new ZipInflaterInputStream(inputStream, (int) ze.getSize());, +	 * {@link InflaterInputStream} that supports the writing of an extra "dummy" byte, +	 * (which is required with JDK 6) and returns accurate available() results., +		private int available;, +, +		public ZipInflaterInputStream(InputStream inputStream, int size) {, +			this.available = size;, +		}, +, +		@Override, +		public int available() throws IOException {, +			if (this.available < 0) {, +				return super.available();, +			}, +			return this.available;, +		}, +, +		@Override, +		public int read(byte[] b, int off, int len) throws IOException {, +			int result = super.read(b, off, len);, +			if (result != -1) {, +				this.available -= result;, +			}, +			return result;, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/RandomAccessJarFile.java, +			inputStream = new ZipInflaterInputStream(inputStream, (int) ze.getSize());, +	 * {@link InflaterInputStream} that supports the writing of an extra "dummy" byte, +	 * (which is required with JDK 6) and returns accurate available() results., +		private int available;, +, +		public ZipInflaterInputStream(InputStream inputStream, int size) {, +			this.available = size;, +		}, +, +		@Override, +		public int available() throws IOException {, +			if (this.available < 0) {, +				return super.available();, +			}, +			return this.available;, +		}, +, +		@Override, +		public int read(byte[] b, int off, int len) throws IOException {, +			int result = super.read(b, off, len);, +			if (result != -1) {, +				this.available -= result;, +			}, +			return result;, +, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/RandomAccessJarFileTests.java, +		assertThat(inputStream.available(), equalTo(1));, +		assertThat(inputStream.available(), equalTo(0));]