[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.contextPath, "ContextPath must not be null");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.contextPath, "ContextPath must not be null");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import java.util.regex.Pattern;, +, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	private static final Pattern ID_PATTERN = Pattern.compile("\\w+");, +, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.id, "Id must not be null");, +		Assert.isTrue(ID_PATTERN.matcher(this.id).matches(),, +				"ID must only contains letters, numbers and '_'");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.contextPath, "ContextPath must not be null");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import java.util.regex.Pattern;, +, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	private static final Pattern ID_PATTERN = Pattern.compile("\\w+");, +, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.id, "Id must not be null");, +		Assert.isTrue(ID_PATTERN.matcher(this.id).matches(),, +				"ID must only contains letters, numbers and '_'");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java, +				JdbcConnection connection = new JdbcConnection(, +						dataSource.getConnection());, +					Database database = factory, +							.findCorrectDatabaseImplementation(connection);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.contextPath, "ContextPath must not be null");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import java.util.regex.Pattern;, +, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	private static final Pattern ID_PATTERN = Pattern.compile("\\w+");, +, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.id, "Id must not be null");, +		Assert.isTrue(ID_PATTERN.matcher(this.id).matches(),, +				"ID must only contains letters, numbers and '_'");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java, +				JdbcConnection connection = new JdbcConnection(, +						dataSource.getConnection());, +					Database database = factory, +							.findCorrectDatabaseImplementation(connection);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.path, "Path must not be null");, +		Assert.isTrue(this.path.length() == 0 || this.path.startsWith("/"),, +				"Path must start with / or be empty");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	private void validate() {, +		Assert.notNull(this.contextPath, "ContextPath must not be null");]