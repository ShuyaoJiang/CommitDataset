[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReport.java, +import java.util.*;, +		private Set<ConditionAndOutcome> outcomes = new HashSet<ConditionAndOutcome>();, +			return Collections.unmodifiableSet(this.outcomes).iterator();, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o), +				return true;, +			if (o == null || getClass() != o.getClass()), +				return false;, +, +			if (this.outcome == null || this.outcome.getMessage() == null) {, +				return false;, +			}, +, +			ConditionAndOutcome that = (ConditionAndOutcome) o;, +, +			if (that.getOutcome() == null || this.getOutcome().getMessage() == null) {, +				return false;, +			}, +, +			return this.getOutcome().getMessage().equals(that.getOutcome().getMessage());, +		}, +, +		@Override, +		public int hashCode() {, +			return outcome != null && outcome.getMessage() != null ? outcome.getMessage().hashCode() : 0;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReport.java, +import java.util.*;, +		private Set<ConditionAndOutcome> outcomes = new HashSet<ConditionAndOutcome>();, +			return Collections.unmodifiableSet(this.outcomes).iterator();, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o), +				return true;, +			if (o == null || getClass() != o.getClass()), +				return false;, +, +			if (this.outcome == null || this.outcome.getMessage() == null) {, +				return false;, +			}, +, +			ConditionAndOutcome that = (ConditionAndOutcome) o;, +, +			if (that.getOutcome() == null || this.getOutcome().getMessage() == null) {, +				return false;, +			}, +, +			return this.getOutcome().getMessage().equals(that.getOutcome().getMessage());, +		}, +, +		@Override, +		public int hashCode() {, +			return outcome != null && outcome.getMessage() != null ? outcome.getMessage().hashCode() : 0;, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration;, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +		AutoConfigurationReport.get((ConfigurableListableBeanFactory) this.beanFactory.getParentBeanFactory());, +		given(this.outcome1.getMessage()).willReturn("Message 1");, +		given(this.outcome2.getMessage()).willReturn("Message 2");, +		given(this.outcome3.getMessage()).willReturn("Message 3");, +, +		Map<String, ConditionAndOutcomes> map = this.report.getConditionAndOutcomesBySource();, +		AutoConfigurationReport report = AutoConfigurationReport.get(new AnnotationConfigApplicationContext(, +				Config.class).getBeanFactory());, +	@Test, +	public void testDuplicateConditionAndOutcomes() {, +		Condition condition1 = mock(Condition.class);, +		ConditionOutcome conditionOutcome1 = mock(ConditionOutcome.class);, +		given(conditionOutcome1.getMessage()).willReturn("This is message 1");, +, +		Condition condition2 = mock(Condition.class);, +		ConditionOutcome conditionOutcome2 = mock(ConditionOutcome.class);, +		given(conditionOutcome2.getMessage()).willReturn("This is message 2");, +, +		Condition condition3 = mock(Condition.class);, +		ConditionOutcome conditionOutcome3 = mock(ConditionOutcome.class);, +		given(conditionOutcome3.getMessage()).willReturn("This is message 2"); // identical in value to #2, +, +		ConditionAndOutcome outcome1 = new ConditionAndOutcome(condition1,, +				conditionOutcome1);, +		assertThat(outcome1, equalTo(outcome1));, +, +		ConditionAndOutcome outcome2 = new ConditionAndOutcome(condition2,, +				conditionOutcome2);, +		assertThat(outcome1, not(equalTo(outcome2)));, +, +		ConditionAndOutcome outcome3 = new ConditionAndOutcome(condition3,, +				conditionOutcome3);, +		assertThat(outcome2, equalTo(outcome3));]