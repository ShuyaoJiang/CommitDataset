[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import org.springframework.util.Assert;, + * @author Christian Dupuis, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +, +	public void setKeysToSanitize(String... keysToSanitize) {, +		Assert.notNull(keysToSanitize, "KeysToSanitize must not be null");, +		this.keysToSanitize = keysToSanitize;, +	}, +, +	public Object sanitize(String name, Object object) {, +		for (String keyToSanitize : this.keysToSanitize) {, +			if (name.toLowerCase().endsWith(keyToSanitize)) {, +				return (object == null ? null : "******");, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import org.springframework.util.Assert;, + * @author Christian Dupuis, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +, +	public void setKeysToSanitize(String... keysToSanitize) {, +		Assert.notNull(keysToSanitize, "KeysToSanitize must not be null");, +		this.keysToSanitize = keysToSanitize;, +	}, +, +	public Object sanitize(String name, Object object) {, +		for (String keyToSanitize : this.keysToSanitize) {, +			if (name.toLowerCase().endsWith(keyToSanitize)) {, +				return (object == null ? null : "******");, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, + * @author Christian Dupuis, +		return ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import org.springframework.util.Assert;, + * @author Christian Dupuis, +	private String[] keysToSanitize = new String[] { "password", "secret", "key" };, +, +	public void setKeysToSanitize(String... keysToSanitize) {, +		Assert.notNull(keysToSanitize, "KeysToSanitize must not be null");, +		this.keysToSanitize = keysToSanitize;, +	}, +, +	public Object sanitize(String name, Object object) {, +		for (String keyToSanitize : this.keysToSanitize) {, +			if (name.toLowerCase().endsWith(keyToSanitize)) {, +				return (object == null ? null : "******");, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, + * @author Christian Dupuis, +		return ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java, + * Copyright 2012-2014 the original author or authors., +import java.util.Map;, +, +import static org.junit.Assert.assertEquals;, + * @author Christian Dupuis, +	@SuppressWarnings("unchecked"), +	@Test, +	public void testKeySanitization() throws Exception {, +		System.setProperty("dbPassword", "123456");, +		System.setProperty("apiKey", "123456");, +		EnvironmentEndpoint report = getEndpointBean();, +		Map<String, Object> env = report.invoke();, +		assertEquals("******",, +				((Map<String, Object>) env.get("systemProperties")).get("dbPassword"));, +		assertEquals("******",, +				((Map<String, Object>) env.get("systemProperties")).get("apiKey"));, +	}, +]