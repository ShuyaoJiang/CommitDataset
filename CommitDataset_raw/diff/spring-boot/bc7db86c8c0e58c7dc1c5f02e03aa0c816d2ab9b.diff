[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import java.util.Collection;, +import java.util.HashSet;, +import org.springframework.context.annotation.Configuration;, +	private static final AutoConfigurationEntry EMPTY_ENTRY = new AutoConfigurationEntry();, +, +		AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(, +				autoConfigurationMetadata, annotationMetadata);, +		return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());, +	}, +, +	/**, +	 * Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}, +	 * of the importing @{@link Configuration} class., +	 * @param autoConfigurationMetadata the auto-configuration metadata, +	 * @param annotationMetadata the annotation metadata of the configuration class, +	 * @return the auto-configurations that should be imported, +	 */, +	protected AutoConfigurationEntry getAutoConfigurationEntry(, +			AutoConfigurationMetadata autoConfigurationMetadata,, +			AnnotationMetadata annotationMetadata) {, +		if (!isEnabled(annotationMetadata)) {, +			return EMPTY_ENTRY;, +		}, +		return new AutoConfigurationEntry(configurations, exclusions);, +		private final Map<String, AnnotationMetadata> entries = new LinkedHashMap<>();, +, +		private final List<AutoConfigurationEntry> autoConfigurationEntries = new ArrayList<>();, +, +		private AutoConfigurationMetadata autoConfigurationMetadata;, +			Assert.state(, +					deferredImportSelector instanceof AutoConfigurationImportSelector,, +					String.format(, +							"AutoConfigurationImportSelector only supports %s implementations, got %s",, +							AutoConfigurationImportSelector.class.getSimpleName(),, +							deferredImportSelector.getClass().getName()));, +			AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector), +					.getAutoConfigurationEntry(getAutoConfigurationMetadata(),, +							annotationMetadata);, +			this.autoConfigurationEntries.add(autoConfigurationEntry);, +			for (String importClassName : autoConfigurationEntry.getConfigurations()) {, +				this.entries.putIfAbsent(importClassName, annotationMetadata);, +			if (this.autoConfigurationEntries.isEmpty()) {, +				return Collections.emptyList();, +			}, +			Set<String> allExclusions = this.autoConfigurationEntries.stream(), +					.map(AutoConfigurationEntry::getExclusions), +					.flatMap(Collection::stream).collect(Collectors.toSet());, +			Set<String> processedConfigurations = new LinkedHashSet<>();, +			Set<String> processedExclusions = new LinkedHashSet<>();, +			this.autoConfigurationEntries.forEach((entry) -> {, +				List<String> configurations = new ArrayList<>(entry.getConfigurations());, +				configurations.removeAll(allExclusions);, +				configurations.removeIf(processedConfigurations::contains);, +				Set<String> exclusions = new HashSet<>(entry.getExclusions());, +				exclusions.removeIf(processedExclusions::contains);, +				// This now represents the exact state of this entry based on the, +				// state of all other entries, +				processedConfigurations.addAll(configurations);, +				processedExclusions.addAll(exclusions);, +			});, +, +			return sortAutoConfigurations(processedConfigurations,, +					getAutoConfigurationMetadata()), +							.stream(), +							.map((importClassName) -> new Entry(, +									this.entries.get(importClassName), importClassName)), +		private AutoConfigurationMetadata getAutoConfigurationMetadata() {, +			if (this.autoConfigurationMetadata == null) {, +				this.autoConfigurationMetadata = AutoConfigurationMetadataLoader, +			}, +			return this.autoConfigurationMetadata;, +		}, +, +		private List<String> sortAutoConfigurations(Set<String> configurations,, +				AutoConfigurationMetadata autoConfigurationMetadata) {, +					autoConfigurationMetadata).getInPriorityOrder(configurations);, +	protected static class AutoConfigurationEntry {, +, +		private final List<String> configurations;, +, +		private final Set<String> exclusions;, +, +		private AutoConfigurationEntry() {, +			this.configurations = Collections.EMPTY_LIST;, +			this.exclusions = Collections.EMPTY_SET;, +		}, +, +		/**, +		 * Create an entry with the configurations that were contributed and their, +		 * exclusions., +		 * @param configurations the configurations that should be imported, +		 * @param exclusions the exclusions that were applied to the original list, +		 */, +		AutoConfigurationEntry(Collection<String> configurations,, +				Collection<String> exclusions) {, +			this.configurations = new ArrayList<>(configurations);, +			this.exclusions = new HashSet<>(exclusions);, +		}, +]