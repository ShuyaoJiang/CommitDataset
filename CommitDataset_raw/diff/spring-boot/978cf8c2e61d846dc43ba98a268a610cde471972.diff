[+++ b/spring-boot-samples/spring-boot-sample-tomcat/src/test/java/sample/tomcat/SampleTomcatApplicationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.boot.test.WebIntegrationTest;, +@WebIntegrationTest(randomPort = true), +++ b/spring-boot-samples/spring-boot-sample-tomcat/src/test/java/sample/tomcat/SampleTomcatApplicationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.boot.test.WebIntegrationTest;, +@WebIntegrationTest(randomPort = true), +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, + * require full startup in the same way as a production application. Normally used in, + * conjunction with {@code @SpringApplicationConfiguration}., +++ b/spring-boot-samples/spring-boot-sample-tomcat/src/test/java/sample/tomcat/SampleTomcatApplicationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.boot.test.WebIntegrationTest;, +@WebIntegrationTest(randomPort = true), +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, + * require full startup in the same way as a production application. Normally used in, + * conjunction with {@code @SpringApplicationConfiguration}., +++ b/spring-boot/src/main/java/org/springframework/boot/test/MergedContextConfigurationProperties.java, +	public void add(String[] properties, String... additional) {, +		merged.addAll(Arrays.asList(additional));, +++ b/spring-boot-samples/spring-boot-sample-tomcat/src/test/java/sample/tomcat/SampleTomcatApplicationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.boot.test.WebIntegrationTest;, +@WebIntegrationTest(randomPort = true), +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, + * require full startup in the same way as a production application. Normally used in, + * conjunction with {@code @SpringApplicationConfiguration}., +++ b/spring-boot/src/main/java/org/springframework/boot/test/MergedContextConfigurationProperties.java, +	public void add(String[] properties, String... additional) {, +		merged.addAll(Arrays.asList(additional));, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.util.Assert;, + * normally startup using {@link SpringApplication}). Can be used to test non-web features, + * (like a repository layer) or start an fully-configured embedded servlet container., + * Use {@code @WebIntegrationTest} (or {@code @IntegrationTest} with, + * {@code @WebAppConfiguration}) to indicate that you want to use a real servlet container, + * or {@code @WebAppConfiguration} alone to use a {@link MockServletContext}., + * @author Phillip Webb, + * @see TestRestTemplate, +		assertValidAnnotations(config.getTestClass());, +			setActiveProfiles(environment, config.getActiveProfiles());, +		Map<String, Object> properties = getEnvironmentProperties(config);, +		addProperties(environment, properties);, +	private void assertValidAnnotations(Class<?> testClass) {, +		boolean hasWebAppConfiguration = AnnotationUtils.findAnnotation(testClass,, +				WebAppConfiguration.class) != null;, +		boolean hasWebIntegrationTest = AnnotationUtils.findAnnotation(testClass,, +				WebIntegrationTest.class) != null;, +		if (hasWebAppConfiguration && hasWebIntegrationTest) {, +			throw new IllegalStateException("@WebIntegrationTest and ", +					+ "@WebAppConfiguration cannot be used together");, +		Assert.state(sources.size() > 0, "No configuration classes ", +				+ "or locations found in @SpringApplicationConfiguration. ", +				+ "For default configuration detection to work you need ", +				+ "Spring 4.0.3 or better (found " + SpringVersion.getVersion() + ").");, +	private void setActiveProfiles(ConfigurableEnvironment environment, String[] profiles) {, +		EnvironmentTestUtils.addEnvironment(environment, "spring.profiles.active=", +				+ StringUtils.arrayToCommaDelimitedString(profiles));, +		if (!isIntegrationTest(config.getTestClass())) {, +	final Map<String, Object> extractEnvironmentProperties(String[] values) {, +	private Map<String, String> getDefaultEnvironmentProperties() {, +		return Collections.singletonMap("server.port", "-1");, +	}, +, +	private void addProperties(ConfigurableEnvironment environment,, +			Map<String, Object> properties) {, +		// @IntegrationTest properties go before external configuration and after system, +		environment.getPropertySources().addAfter(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +				new MapPropertySource("integrationTest", properties));, +	}, +, +	public void processContextConfiguration(, +			ContextConfigurationAttributes configAttributes) {, +		if (!configAttributes.hasLocations() && !configAttributes.hasClasses()) {, +			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes, +					.getDeclaringClass());, +			configAttributes.setClasses(defaultConfigClasses);, +		}, +	}, +, +	/**, +	 * Detect the default configuration classes for the supplied test class. By default, +	 * simply delegates to, +	 * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses} ., +	 * @param declaringClass the test class that declared {@code @ContextConfiguration}, +	 * @return an array of default configuration classes, potentially empty but never, +	 * {@code null}, +	 * @see AnnotationConfigContextLoaderUtils, +	 */, +	protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {, +		return AnnotationConfigContextLoaderUtils, +				.detectDefaultConfigurationClasses(declaringClass);, +	}, +, +	@Override, +		throw new UnsupportedOperationException("SpringApplicationContextLoader ", +				+ "does not support the loadContext(String...) method");, +	/**]