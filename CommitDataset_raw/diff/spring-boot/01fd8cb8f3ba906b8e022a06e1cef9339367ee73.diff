[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/AtomikosJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			properties.setProperty("com.atomikos.icatch.tm_unique_name",, +					this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/AtomikosJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			properties.setProperty("com.atomikos.icatch.tm_unique_name",, +					this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			config.setServerId(this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/AtomikosJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			properties.setProperty("com.atomikos.icatch.tm_unique_name",, +					this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			config.setServerId(this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaProperties.java, + * @author Andy Wilkinson, +	private String transactionManagerId;, +, +	public String getTransactionManagerId() {, +		return this.transactionManagerId;, +	}, +, +	public void setTransactionManagerId(String transactionManagerId) {, +		this.transactionManagerId = transactionManagerId;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/AtomikosJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			properties.setProperty("com.atomikos.icatch.tm_unique_name",, +					this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, + * @author Andy Wilkinson, +		if (StringUtils.hasText(this.jtaProperties.getTransactionManagerId())) {, +			config.setServerId(this.jtaProperties.getTransactionManagerId());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaProperties.java, + * @author Andy Wilkinson, +	private String transactionManagerId;, +, +	public String getTransactionManagerId() {, +		return this.transactionManagerId;, +	}, +, +	public void setTransactionManagerId(String transactionManagerId) {, +		this.transactionManagerId = transactionManagerId;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfigurationTests.java, +import java.io.File;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +import org.junit.Before;, +import org.springframework.beans.BeansException;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.util.FileSystemUtils;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, + * @author Andy Wilkinson, +	@Before, +	public void cleanUpLogs() {, +		FileSystemUtils.deleteRecursively(new File("target/transaction-logs"));, +	}, +, +	@Test, +	public void defaultBitronixServerId() throws UnknownHostException {, +		this.context = new AnnotationConfigApplicationContext(, +				JtaPropertiesConfiguration.class, BitronixJtaConfiguration.class);, +		String serverId = this.context.getBean(bitronix.tm.Configuration.class), +				.getServerId();, +		assertThat(serverId, is(equalTo(InetAddress.getLocalHost().getHostAddress())));, +	}, +, +	@Test, +	public void customBitronixServerId() throws UnknownHostException {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.transactionManagerId:custom");, +		this.context.register(JtaPropertiesConfiguration.class,, +				BitronixJtaConfiguration.class);, +		this.context.refresh();]