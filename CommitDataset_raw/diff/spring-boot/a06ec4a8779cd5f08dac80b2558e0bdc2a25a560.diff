[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +			return new MongoClient(, +					new MongoClientURI(this.properties.getUri(), builder(options)));, +		if (hasCustomAddress() || hasCustomCredentials()) {, +				new MongoClientURI(MongoProperties.DEFAULT_URI, builder(options)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +			return new MongoClient(, +					new MongoClientURI(this.properties.getUri(), builder(options)));, +		if (hasCustomAddress() || hasCustomCredentials()) {, +				new MongoClientURI(MongoProperties.DEFAULT_URI, builder(options)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +			return new MongoClient(, +					new MongoClientURI(this.properties.getUri(), builder(options)));, +		if (hasCustomAddress() || hasCustomCredentials()) {, +				new MongoClientURI(MongoProperties.DEFAULT_URI, builder(options)));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java, +import java.net.UnknownHostException;, +import java.util.List;, +, +import com.mongodb.ServerAddress;, +import com.mongodb.connection.Cluster;, +import com.mongodb.connection.ClusterSettings;, +import org.springframework.test.util.ReflectionTestUtils;, +	@Test, +	public void uriOverridesHostAndPort() throws UnknownHostException {, +		MongoProperties properties = new MongoProperties();, +		properties.setHost("localhost");, +		properties.setPort(27017);, +		properties.setUri("mongodb://mongo1.example.com:12345");, +		MongoClient client = new MongoClientFactory(properties, null), +				.createMongoClient(null);, +		List<ServerAddress> allAddresses = extractServerAddresses(client);, +		assertThat(allAddresses).hasSize(1);, +		assertServerAddress(allAddresses.get(0), "mongo1.example.com", 12345);, +	}, +, +	@Test, +	public void onlyHostAndPortSetShouldUseThat() throws UnknownHostException {, +		MongoProperties properties = new MongoProperties();, +		properties.setHost("localhost");, +		properties.setPort(27017);, +		MongoClient client = new MongoClientFactory(properties, null), +				.createMongoClient(null);, +		List<ServerAddress> allAddresses = extractServerAddresses(client);, +		assertThat(allAddresses).hasSize(1);, +		assertServerAddress(allAddresses.get(0), "localhost", 27017);, +	}, +, +	@Test, +	public void onlyUriSetShouldUseThat() throws UnknownHostException {, +		MongoProperties properties = new MongoProperties();, +		properties.setUri("mongodb://mongo1.example.com:12345");, +		MongoClient client = new MongoClientFactory(properties, null), +				.createMongoClient(null);, +		List<ServerAddress> allAddresses = extractServerAddresses(client);, +		assertThat(allAddresses).hasSize(1);, +		assertServerAddress(allAddresses.get(0), "mongo1.example.com", 12345);, +	}, +, +	@Test, +	public void noCustomAddressAndNoUriUsesDefaultUri() throws UnknownHostException {, +		MongoProperties properties = new MongoProperties();, +		MongoClient client = new MongoClientFactory(properties, null), +				.createMongoClient(null);, +		List<ServerAddress> allAddresses = extractServerAddresses(client);, +		assertThat(allAddresses).hasSize(1);, +		assertServerAddress(allAddresses.get(0), "localhost", 27017);, +	}, +, +	private List<ServerAddress> extractServerAddresses(MongoClient client) {, +		Cluster cluster = (Cluster) ReflectionTestUtils.getField(client, "cluster");, +		ClusterSettings clusterSettings = (ClusterSettings) ReflectionTestUtils, +				.getField(cluster, "settings");, +		List<ServerAddress> allAddresses = clusterSettings.getHosts();, +		return allAddresses;, +	}, +, +	private void assertServerAddress(ServerAddress serverAddress, String expectedHost,, +			int expectedPort) {, +		assertThat(serverAddress.getHost()).isEqualTo(expectedHost);, +		assertThat(serverAddress.getPort()).isEqualTo(expectedPort);, +	}, +]