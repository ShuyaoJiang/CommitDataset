[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletContextInitializerBeans.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +	private final Log log = LogFactory.getLog(getClass());, +, +			addServletContextInitializerBean(initializerBean.getKey(),, +					initializerBean.getValue(), beanFactory);, +	private void addServletContextInitializerBean(String beanName,, +			ServletContextInitializer initializer, ListableBeanFactory beanFactory) {, +			addServletContextInitializerBean(Servlet.class, beanName, initializer,, +					beanFactory, ((ServletRegistrationBean) initializer).getServlet());, +			addServletContextInitializerBean(Filter.class, beanName, initializer,, +					beanFactory, ((FilterRegistrationBean) initializer).getFilter());, +			addServletContextInitializerBean(EventListener.class, beanName, initializer,, +					beanFactory,, +			addServletContextInitializerBean(ServletContextInitializer.class, beanName,, +					initializer, beanFactory, null);, +	private void addServletContextInitializerBean(Class<?> type, String beanName,, +			ServletContextInitializer initializer, ListableBeanFactory beanFactory,, +			Object source) {, +		if (this.log.isDebugEnabled()) {, +			String resourceDescription = getResourceDescription(beanName, beanFactory);, +			int order = getOrder(initializer);, +			this.log.debug("Added existing " + type.getSimpleName(), +					+ " initializer bean '" + beanName + "'; order=" + order, +					+ ", resource=" + resourceDescription);, +		}, +	}, +, +	private String getResourceDescription(String beanName, ListableBeanFactory beanFactory) {, +		if (beanFactory instanceof BeanDefinitionRegistry) {, +			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;, +			return registry.getBeanDefinition(beanName).getResourceDescription();, +		}, +		return "unknown";, +				int order = getOrder(bean.getValue());, +				String beanName = bean.getKey();, +				RegistrationBean registration = adapter.createRegistrationBean(beanName,, +						bean.getValue(), beans.size());, +				registration.setName(beanName);, +				registration.setOrder(order);, +, +				if (this.log.isDebugEnabled()) {, +					this.log.debug("Created " + type.getSimpleName(), +							+ " initializer for bean '" + beanName + "'; order=" + order, +							+ ", resource=", +							+ getResourceDescription(beanName, beanFactory));, +				}]