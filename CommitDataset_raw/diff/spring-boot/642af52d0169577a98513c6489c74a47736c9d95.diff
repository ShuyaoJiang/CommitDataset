[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Configure {@link ConcurrentKafkaListenerContainerFactory} with sensible defaults., + * @since 1.5.0, +	 * @param listenerContainerFactory the {@link ConcurrentKafkaListenerContainerFactory}, +	 * instance to configure, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Configure {@link ConcurrentKafkaListenerContainerFactory} with sensible defaults., + * @since 1.5.0, +	 * @param listenerContainerFactory the {@link ConcurrentKafkaListenerContainerFactory}, +	 * instance to configure, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Configuration for Kafka annotation-driven support., + * @since 1.5.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Configure {@link ConcurrentKafkaListenerContainerFactory} with sensible defaults., + * @since 1.5.0, +	 * @param listenerContainerFactory the {@link ConcurrentKafkaListenerContainerFactory}, +	 * instance to configure, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Configuration for Kafka annotation-driven support., + * @since 1.5.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka., + * @since 1.5.0, +	public KafkaTemplate<?, ?> kafkaTemplate(, +			ProducerFactory<Object, Object> kafkaProducerFactory,, +		KafkaTemplate<Object, Object> kafkaTemplate =, +				new KafkaTemplate<Object, Object>(kafkaProducerFactory);, +	public ConsumerFactory<?, ?> kafkaConsumerFactory() {, +		return new DefaultKafkaConsumerFactory<Object, Object>(, +				this.properties.buildConsumerProperties());, +	public ProducerFactory<?, ?> kafkaProducerFactory() {, +		return new DefaultKafkaProducerFactory<Object, Object>(, +				this.properties.buildProducerProperties());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Configure {@link ConcurrentKafkaListenerContainerFactory} with sensible defaults., + * @since 1.5.0, +	 * @param listenerContainerFactory the {@link ConcurrentKafkaListenerContainerFactory}, +	 * instance to configure, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Configuration for Kafka annotation-driven support., + * @since 1.5.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for Apache Kafka., + * @since 1.5.0, +	public KafkaTemplate<?, ?> kafkaTemplate(, +			ProducerFactory<Object, Object> kafkaProducerFactory,, +		KafkaTemplate<Object, Object> kafkaTemplate =, +				new KafkaTemplate<Object, Object>(kafkaProducerFactory);, +	public ConsumerFactory<?, ?> kafkaConsumerFactory() {, +		return new DefaultKafkaConsumerFactory<Object, Object>(, +				this.properties.buildConsumerProperties());, +	public ProducerFactory<?, ?> kafkaProducerFactory() {, +		return new DefaultKafkaProducerFactory<Object, Object>(, +				this.properties.buildProducerProperties());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, + * Configuration properties for Spring for Apache Kafka., + * <p/>, + * @author Stephane Nicoll, + * @since 1.5.0, +	private List<String> bootstrapServers = new ArrayList<String>(Collections.singletonList(, +			"localhost:9092"));, +			properties.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,, +					resourceToPath(this.ssl.getKeystoreLocation()));, +			properties.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,, +					this.ssl.getKeystorePassword());, +			properties.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,, +					resourceToPath(this.ssl.getTruststoreLocation()));, +			properties.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,, +					this.ssl.getTruststorePassword());, +	 * Create an initial map of consumer properties from the state of this instance., +	 * <p>This allows you to add additional properties, if necessary, and override the, +	 * default kafkaConsumerFactory bean., +	 * @return the consumer properties initialized with the customizations defined on, +	 * this instance, +	 * Create an initial map of producer properties from the state of this instance., +	 * <p>This allows you to add additional properties, if necessary, and override the, +	 * default kafkaProducerFactory bean., +	 * @return the producer properties initialized with the customizations defined on, +	 * this instance, +	private static String resourceToPath(Resource resource) {, +		catch (IOException ex) {, +			throw new IllegalStateException(String.format(, +					"Resource '%s' must be on a file system", resource), ex);, +		private Long autoCommitInterval;, +		 * Maximum amount of time in milliseconds the server will block before answering, +		 * the fetch request if there isn't sufficient data to immediately satisfy the, +		 * requirement given by "fetch.min.bytes"., +		private Integer fetchMaxWait;, +		 * Minimum amount of data the server should return for a fetch request in bytes., +		private Integer fetchMinSize;, +		 * Expected time in milliseconds between heartbeats to the consumer coordinator., +		private Integer heartbeatInterval;, +		 * Deserializer class for keys., +		 * Deserializer class for values., +		public Long getAutoCommitInterval() {, +			return this.autoCommitInterval;, +		public void setAutoCommitInterval(Long autoCommitInterval) {]