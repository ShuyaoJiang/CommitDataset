[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/DefaultEndpointObjectNameFactory.java, +import java.util.Map;, +, +import javax.management.MBeanServer;, +import org.springframework.util.ObjectUtils;, +	private final JmxEndpointExporterProperties properties;, +, +	private final MBeanServer mBeanServer;, +, +	private final String contextId;, +, +	DefaultEndpointObjectNameFactory(JmxEndpointExporterProperties properties,, +			MBeanServer mBeanServer, String contextId) {, +		this.properties = properties;, +		this.mBeanServer = mBeanServer;, +		this.contextId = contextId;, +	}, +		String baseObjectName = this.properties.getDomain() +, +				":type=Endpoint" +, +				",name=" + StringUtils.capitalize(mBean.getEndpointId());, +		StringBuilder builder = new StringBuilder(baseObjectName);, +		if (this.mBeanServer != null && hasMBean(baseObjectName)) {, +			builder.append(",context=").append(this.contextId);, +		}, +		if (this.properties.isUniqueNames()) {, +			builder.append(",identity=").append(ObjectUtils.getIdentityHexString(mBean));, +		}, +		builder.append(getStaticNames());, +	private boolean hasMBean(String baseObjectName) throws MalformedObjectNameException {, +		ObjectName query = new ObjectName(baseObjectName + ",*");, +		return this.mBeanServer.queryNames(query, null).size() > 0;, +	}, +, +	private String getStaticNames() {, +		if (this.properties.getStaticNames().isEmpty()) {, +			return "";, +		}, +		StringBuilder builder = new StringBuilder();, +, +		for (Map.Entry<Object, Object> name : this.properties.getStaticNames().entrySet()) {, +			builder.append(",").append(name.getKey()).append("=").append(name.getValue());, +		}, +		return builder.toString();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/DefaultEndpointObjectNameFactory.java, +import java.util.Map;, +, +import javax.management.MBeanServer;, +import org.springframework.util.ObjectUtils;, +	private final JmxEndpointExporterProperties properties;, +, +	private final MBeanServer mBeanServer;, +, +	private final String contextId;, +, +	DefaultEndpointObjectNameFactory(JmxEndpointExporterProperties properties,, +			MBeanServer mBeanServer, String contextId) {, +		this.properties = properties;, +		this.mBeanServer = mBeanServer;, +		this.contextId = contextId;, +	}, +		String baseObjectName = this.properties.getDomain() +, +				":type=Endpoint" +, +				",name=" + StringUtils.capitalize(mBean.getEndpointId());, +		StringBuilder builder = new StringBuilder(baseObjectName);, +		if (this.mBeanServer != null && hasMBean(baseObjectName)) {, +			builder.append(",context=").append(this.contextId);, +		}, +		if (this.properties.isUniqueNames()) {, +			builder.append(",identity=").append(ObjectUtils.getIdentityHexString(mBean));, +		}, +		builder.append(getStaticNames());, +	private boolean hasMBean(String baseObjectName) throws MalformedObjectNameException {, +		ObjectName query = new ObjectName(baseObjectName + ",*");, +		return this.mBeanServer.queryNames(query, null).size() > 0;, +	}, +, +	private String getStaticNames() {, +		if (this.properties.getStaticNames().isEmpty()) {, +			return "";, +		}, +		StringBuilder builder = new StringBuilder();, +, +		for (Map.Entry<Object, Object> name : this.properties.getStaticNames().entrySet()) {, +			builder.append(",").append(name.getKey()).append("=").append(name.getValue());, +		}, +		return builder.toString();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/EndpointInfrastructureAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.util.ObjectUtils;, +@EnableConfigurationProperties(JmxEndpointExporterProperties.class), +	public JmxEndpointExporter jmxMBeanExporter(JmxEndpointExporterProperties properties,, +			MBeanServer mBeanServer, JmxAnnotationEndpointDiscoverer endpointDiscoverer,, +				mBeanServer, new DefaultEndpointObjectNameFactory(properties,, +				mBeanServer, ObjectUtils.getIdentityHexString(this.applicationContext)));, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/DefaultEndpointObjectNameFactory.java]