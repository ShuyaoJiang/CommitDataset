[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/Token.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/Token.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/TokenValidator.java, +	private boolean hasValidKeyId(String tokenKey) {, +		for (String candidate : this.tokenKeys.keySet()) {, +			if (tokenKey.equals(candidate)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/Token.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/TokenValidator.java, +	private boolean hasValidKeyId(String tokenKey) {, +		for (String candidate : this.tokenKeys.keySet()) {, +			if (tokenKey.equals(candidate)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/TokenValidatorTests.java, +	private static final Map<String, String> VALID_KEYS = Collections, +			.singletonMap("valid-key", VALID_KEY);, +		this.thrown, +				.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_KEY_ID));, +	public void validateTokenWhenValidShouldNotFetchTokenKeys() throws Exception {, +		ReflectionTestUtils.setField(this.tokenValidator, "tokenKeys",, +				Collections.singletonMap("valid-key", INVALID_KEY));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/Token.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/TokenValidator.java, +	private boolean hasValidKeyId(String tokenKey) {, +		for (String candidate : this.tokenKeys.keySet()) {, +			if (tokenKey.equals(candidate)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/TokenValidatorTests.java, +	private static final Map<String, String> VALID_KEYS = Collections, +			.singletonMap("valid-key", VALID_KEY);, +		this.thrown, +				.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_KEY_ID));, +	public void validateTokenWhenValidShouldNotFetchTokenKeys() throws Exception {, +		ReflectionTestUtils.setField(this.tokenValidator, "tokenKeys",, +				Collections.singletonMap("valid-key", INVALID_KEY));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +		setSchema(config);, +	private void setSchema(InMemoryDirectoryServerConfig config) {, +		if (!this.embeddedProperties.getValidation().isEnabled()) {, +			config.setSchema(null);, +			return;, +		}, +		Resource schema = this.embeddedProperties.getValidation().getSchema();, +		if (schema != null) {, +			setSchema(config, schema);, +		}, +	}, +, +	private void setSchema(InMemoryDirectoryServerConfig config, Resource resource) {, +		try {, +			Schema defaultSchema = Schema.getDefaultStandardSchema();, +			Schema schema = Schema.getSchema(resource.getInputStream());, +			config.setSchema(Schema.mergeSchemas(defaultSchema, schema));, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(, +					"Unable to load schema " + resource.getDescription(), ex);, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		for (Object key : (List<?>) response.get("keys")) {, +			tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/Token.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/TokenValidator.java, +	private boolean hasValidKeyId(String tokenKey) {, +		for (String candidate : this.tokenKeys.keySet()) {, +			if (tokenKey.equals(candidate)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/TokenValidatorTests.java, +	private static final Map<String, String> VALID_KEYS = Collections, +			.singletonMap("valid-key", VALID_KEY);, +		this.thrown, +				.expect(AuthorizationExceptionMatcher.withReason(Reason.INVALID_KEY_ID));, +	public void validateTokenWhenValidShouldNotFetchTokenKeys() throws Exception {, +		ReflectionTestUtils.setField(this.tokenValidator, "tokenKeys",, +				Collections.singletonMap("valid-key", INVALID_KEY));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +		setSchema(config);, +	private void setSchema(InMemoryDirectoryServerConfig config) {, +		if (!this.embeddedProperties.getValidation().isEnabled()) {, +			config.setSchema(null);, +			return;, +		}, +		Resource schema = this.embeddedProperties.getValidation().getSchema();, +		if (schema != null) {, +			setSchema(config, schema);, +		}, +	}]