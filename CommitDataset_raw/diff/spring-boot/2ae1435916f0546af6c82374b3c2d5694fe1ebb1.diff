[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +		return new PropertySourcesBinder(propertySource).extractAll("");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +		return new PropertySourcesBinder(propertySource).extractAll("");, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +		return new PropertySourcesBinder(propertySource).extractAll("");, +++ /dev/null, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +import org.springframework.core.env.PropertiesPropertySource;, +			private Map<String, Object> content = new LinkedHashMap<String, Object>();, +					PropertiesPropertySource gitPropertySource =, +							new PropertiesPropertySource("git", gitInfoProperties);, +					this.content = new PropertySourcesBinder(gitPropertySource).extractAll("git");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +		return new PropertySourcesBinder(propertySource).extractAll("");, +++ /dev/null, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import org.springframework.boot.bind.PropertySourcesBinder;, +import org.springframework.core.env.PropertiesPropertySource;, +			private Map<String, Object> content = new LinkedHashMap<String, Object>();, +					PropertiesPropertySource gitPropertySource =, +							new PropertiesPropertySource("git", gitInfoProperties);, +					this.content = new PropertySourcesBinder(gitPropertySource).extractAll("git");, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesBinder.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.bind;, +, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.PropertySources;, +import org.springframework.util.StringUtils;, +import org.springframework.validation.BindException;, +, +/**, + * Helper extracting info from {@link PropertySources}., + *, + * @author Stephane Nicoll, + * @since 1.4.0, + */, +public class PropertySourcesBinder {, +, +	private PropertySources propertySources;, +, +	private ConversionService conversionService;, +, +	/**, +	 * Create a new instance., +	 * @param propertySources the {@link PropertySources} to use, +	 */, +	public PropertySourcesBinder(PropertySources propertySources) {, +		this.propertySources = propertySources;, +	}, +, +	/**, +	 * Create a new instance from a single {@link PropertySource}., +	 * @param propertySource the {@link PropertySource} to use, +	 */, +	public PropertySourcesBinder(PropertySource<?> propertySource) {, +		this(createPropertySources(propertySource));, +	}, +, +	/**, +	 * Create a new instance using the {@link Environment} as the property sources.]