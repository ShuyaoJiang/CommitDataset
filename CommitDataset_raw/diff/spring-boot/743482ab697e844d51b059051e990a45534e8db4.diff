[+++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(MetricRegistryMetricReader.class);, +, +		if (gauge.getValue() instanceof Number) {, +			return;, +		}, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Ignoring gauge '" + name + "' (" + gauge, +					+ ") as its value is not a Number");, +		}, +		if (keys != null) {, +	}, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(MetricRegistryMetricReader.class);, +, +		if (gauge.getValue() instanceof Number) {, +			return;, +		}, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Ignoring gauge '" + name + "' (" + gauge, +					+ ") as its value is not a Number");, +		}, +		if (keys != null) {, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReaderTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.metrics.reader;, +, +import java.util.HashSet;, +import java.util.Set;, +, +import org.junit.Test;, +import org.springframework.boot.actuate.metrics.Metric;, +, +import com.codahale.metrics.Gauge;, +import com.codahale.metrics.MetricRegistry;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +import static org.junit.Assert.assertThat;, +, +/**, + * Tests for {@link MetricRegistryMetricReader}, + *, + * @author Andy Wilkinson, + */, +public class MetricRegistryMetricReaderTests {, +, +	private final MetricRegistry metricRegistry = new MetricRegistry();, +, +	private final MetricRegistryMetricReader metricReader = new MetricRegistryMetricReader(, +			this.metricRegistry);, +, +	@Test, +	public void nonNumberGaugesAreTolerated() {, +		this.metricRegistry.register("test", new Gauge<Set<String>>() {, +, +			@Override, +			public Set<String> getValue() {, +				return new HashSet<String>();, +			}, +, +		});, +		assertThat(this.metricReader.findOne("test"), is(nullValue()));]