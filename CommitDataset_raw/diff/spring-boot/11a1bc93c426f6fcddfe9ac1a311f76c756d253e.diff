[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, + * Copyright 2012-2015 the original author or authors., + * @see ApplicationReadyEvent, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, + * Copyright 2012-2015 the original author or authors., + * @see ApplicationReadyEvent, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.boot.SpringApplication;, + * ready to service requests.  The source of the event is the {@link SpringApplication}, + * itself, but beware of modifying its internal state since since all initialization, + * steps will have been completed by then., + * @see ApplicationFailedEvent, +public class ApplicationReadyEvent extends SpringApplicationEvent {, +	 * @param application the current application, +	public ApplicationReadyEvent(SpringApplication application, String[] args) {, +		super(application, args);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, + * Copyright 2012-2015 the original author or authors., + * @see ApplicationReadyEvent, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.boot.SpringApplication;, + * ready to service requests.  The source of the event is the {@link SpringApplication}, + * itself, but beware of modifying its internal state since since all initialization, + * steps will have been completed by then., + * @see ApplicationFailedEvent, +public class ApplicationReadyEvent extends SpringApplicationEvent {, +	 * @param application the current application, +	public ApplicationReadyEvent(SpringApplication application, String[] args) {, +		super(application, args);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, + * Copyright 2012-2015 the original author or authors., +		else {, +			ApplicationReadyEvent event = new ApplicationReadyEvent(this.application,, +					this.args);, +			publishEvent(event);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, + * Copyright 2012-2015 the original author or authors., + * @see ApplicationReadyEvent, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.boot.SpringApplication;, + * ready to service requests.  The source of the event is the {@link SpringApplication}, + * itself, but beware of modifying its internal state since since all initialization, + * steps will have been completed by then., + * @see ApplicationFailedEvent, +public class ApplicationReadyEvent extends SpringApplicationEvent {, +	 * @param application the current application, +	public ApplicationReadyEvent(SpringApplication application, String[] args) {, +		super(application, args);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, + * Copyright 2012-2015 the original author or authors., +		else {, +			ApplicationReadyEvent event = new ApplicationReadyEvent(this.application,, +					this.args);, +			publishEvent(event);, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +		final AtomicReference<SpringApplication> reference = new AtomicReference<SpringApplication>();, +				reference.set(event.getSpringApplication());, +		assertThat(application, sameInstance(reference.get()));]