[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;, + * @author Sébastien Deleuze, +		@Override, +		public void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +			Long timeout = this.mvcProperties.getAsync().getRequestTimeout();, +			if (timeout != null) {, +				configurer.setDefaultTimeout(timeout);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;, + * @author Sébastien Deleuze, +		@Override, +		public void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +			Long timeout = this.mvcProperties.getAsync().getRequestTimeout();, +			if (timeout != null) {, +				configurer.setDefaultTimeout(timeout);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, + * @author Sébastien Deleuze, +	private final Async async = new Async();, +, +	public Async getAsync() {, +		return this.async;, +	}, +, +	public static class Async {, +, +		/**, +		 * The amount of time (in milliseconds) before asynchronous request handling times, +		 * out. If this value is not set, the default timeout of the underlying, +		 * implementation is used, e.g. 10 seconds on Tomcat with Servlet 3., +		 */, +		private Long requestTimeout;, +, +		public Long getRequestTimeout() {, +			return this.requestTimeout;, +		}, +, +		public void setRequestTimeout(Long requestTimeout) {, +			this.requestTimeout = requestTimeout;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;, + * @author Sébastien Deleuze, +		@Override, +		public void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +			Long timeout = this.mvcProperties.getAsync().getRequestTimeout();, +			if (timeout != null) {, +				configurer.setDefaultTimeout(timeout);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, + * @author Sébastien Deleuze, +	private final Async async = new Async();, +, +	public Async getAsync() {, +		return this.async;, +	}, +, +	public static class Async {, +, +		/**, +		 * The amount of time (in milliseconds) before asynchronous request handling times, +		 * out. If this value is not set, the default timeout of the underlying, +		 * implementation is used, e.g. 10 seconds on Tomcat with Servlet 3., +		 */, +		private Long requestTimeout;, +, +		public Long getRequestTimeout() {, +			return this.requestTimeout;, +		}, +, +		public void setRequestTimeout(Long requestTimeout) {, +			this.requestTimeout = requestTimeout;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +	@Test, +	public void defaultAsyncRequestTimeout() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		RequestMappingHandlerAdapter adapter = this.context, +				.getBean(RequestMappingHandlerAdapter.class);, +		assertNull(ReflectionTestUtils.getField(adapter, "asyncRequestTimeout"));, +	}, +, +	@Test, +	public void customAsyncRequestTimeout() throws Exception {]