[+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java, +import java.time.Duration;, + * @author Dmytro Nosan, +	public void customizerShouldBeAppliedAtTheEnd() {, +				.setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.requestFactory(SimpleClientHttpRequestFactory.class), +				.setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory();, +				.setConnectTimeout(Duration.ofMillis(1234)).build();, +				.setReadTimeout(Duration.ofMillis(1234)).build();, +	@Test, +	@SuppressWarnings("deprecation"), +	public void deprecatedReadTimeout() {, +		ClientHttpRequestFactory requestFactory = this.builder, +				.requestFactory(SimpleClientHttpRequestFactory.class).setReadTimeout(1234), +				.build().getRequestFactory();, +		assertThat(ReflectionTestUtils.getField(requestFactory, "readTimeout")), +				.isEqualTo(1234);, +	}, +, +	@Test, +	@SuppressWarnings("deprecation"), +	public void deprecatedConnectTimeout() {, +		ClientHttpRequestFactory requestFactory = this.builder, +				.requestFactory(SimpleClientHttpRequestFactory.class), +				.setConnectTimeout(1234).build().getRequestFactory();, +		assertThat(ReflectionTestUtils.getField(requestFactory, "connectTimeout")), +				.isEqualTo(1234);, +	}, +, +	@Test, +	public void readTimeoutShouldBeIgnored() {, +		ClientHttpRequestFactory requestFactory = this.builder, +				.requestFactory(SimpleClientHttpRequestFactory.class), +				.setReadTimeout(Duration.ofSeconds(5)).setReadTimeout(null).build(), +				.getRequestFactory();, +		assertThat(ReflectionTestUtils.getField(requestFactory, "readTimeout")), +				.isEqualTo(-1);, +	}, +, +	@Test, +	public void connectionTimeoutShouldBeIgnored() {, +		ClientHttpRequestFactory requestFactory = this.builder, +				.requestFactory(SimpleClientHttpRequestFactory.class), +				.setConnectTimeout(Duration.ofSeconds(5)).setConnectTimeout(null).build(), +				.getRequestFactory();, +		assertThat(ReflectionTestUtils.getField(requestFactory, "connectTimeout")), +				.isEqualTo(-1);, +	}, +]