[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +import java.util.LinkedHashMap;, +		List<Status> statusCandidates = new ArrayList<Status>();, +		Map<String, Object> details = new LinkedHashMap<String, Object>();, +			details.put(entry.getKey(), entry.getValue());, +			statusCandidates.add(entry.getValue().getStatus());, +		return new Health(aggregateStatus(statusCandidates), details);, +	 * Return the single 'aggregate' status that should be used from the specified, +	 * candidates., +	 * @param candidates, +	 * @return a single status, +	protected abstract Status aggregateStatus(List<Status> candidates);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +import java.util.LinkedHashMap;, +		List<Status> statusCandidates = new ArrayList<Status>();, +		Map<String, Object> details = new LinkedHashMap<String, Object>();, +			details.put(entry.getKey(), entry.getValue());, +			statusCandidates.add(entry.getValue().getStatus());, +		return new Health(aggregateStatus(statusCandidates), details);, +	 * Return the single 'aggregate' status that should be used from the specified, +	 * candidates., +	 * @param candidates, +	 * @return a single status, +	protected abstract Status aggregateStatus(List<Status> candidates);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * {@link #doHealthCheck()} should create a {@link Status#DOWN} health status., +			return doHealthCheck();, +			return Health.down(ex);, +	 * @return the {@link Health}, +	protected abstract Health doHealthCheck() throws Exception;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +import java.util.LinkedHashMap;, +		List<Status> statusCandidates = new ArrayList<Status>();, +		Map<String, Object> details = new LinkedHashMap<String, Object>();, +			details.put(entry.getKey(), entry.getValue());, +			statusCandidates.add(entry.getValue().getStatus());, +		return new Health(aggregateStatus(statusCandidates), details);, +	 * Return the single 'aggregate' status that should be used from the specified, +	 * candidates., +	 * @param candidates, +	 * @return a single status, +	protected abstract Status aggregateStatus(List<Status> candidates);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * {@link #doHealthCheck()} should create a {@link Status#DOWN} health status., +			return doHealthCheck();, +			return Health.down(ex);, +	 * @return the {@link Health}, +	protected abstract Health doHealthCheck() throws Exception;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +import java.util.Collections;, + * Carries information about the health of a component or subsystem., + * 	return Health.up(&quot;version&quot;, &quot;1.1.2&quot;);, + * 	return Health.down(ex);, + * @author Phillip Webb, +public final class Health {, +	private static final Map<String, Object> NO_DETAILS = Collections, +			.<String, Object> emptyMap();, +	private final Status status;, +	private final Map<String, Object> details;, +	/**, +	 * Create a new {@link Health} instance with the specified status and details., +	 * @param status the status, +	 * @param details the details or {@code null}, +	 */, +	public Health(Status status, Map<String, ?> details) {, +		this.details = Collections.unmodifiableMap(details == null ? NO_DETAILS, +				: new LinkedHashMap<String, Object>(details));, +	/**, +	 * @return the status of the health (never {@code null}), +	 */, +	/**, +	 * @return the details of the health or an empty map., +	 */, +			Health other = (Health) obj;, +			return this.status.equals(other.status) && this.details.equals(other.details);, +		int hashCode = this.status.hashCode();, +	@Override, +	public String toString() {, +		return getStatus() + " " + getDetails();, +	}, +, +	/**, +	 * Create a new {@link Health} object from this one, containing an additional, +	 * exception detail., +	 * @param ex the exception, +	 * @return a new {@link Health} instance, +	 */, +	public Health withException(Exception ex) {, +		Assert.notNull(ex, "Exception must not be null");, +		return withDetail("error", ex.getClass().getName() + ": " + ex.getMessage());, +	}, +, +	/**, +	 * Create a new {@link Health} object from this one, containing an additional detail., +	 * @param key the detail key, +	 * @param data the detail data, +	 * @return a new {@link Health} instance, +	 */, +	@JsonAnySetter, +	public Health withDetail(String key, Object data) {]