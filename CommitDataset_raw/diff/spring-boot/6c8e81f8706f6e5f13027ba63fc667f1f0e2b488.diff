[+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.web;, +, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.FilterConfig;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import javax.servlet.http.HttpServletResponseWrapper;, +, +import org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.ErrorPage;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +import org.springframework.stereotype.Component;, +, +/**, + * A special {@link AbstractConfigurableEmbeddedServletContainer} for non-embedded, + * applications (i.e. deployed WAR files). It registers error pages and handles, + * application errors by filtering requests and forwarding to the error pages instead of, + * letting the container handle them. Error pages are a feature of the servlet spec but, + * there is no Java API for registering them in the spec. This filter works around that by, + * accepting error page registrations from Spring Boot's, + * {@link EmbeddedServletContainerCustomizer} (any beans of that type in the context will, + * be applied to this container)., + * , + * @author Dave Syer, + * @author Phillip Webb, + */, +@Component, +@Order(Ordered.HIGHEST_PRECEDENCE), +class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer implements, +		Filter {, +, +	// From RequestDispatcher but not referenced to remain compatible with Servlet 2.5, +, +	private static final String ERROR_EXCEPTION = "javax.servlet.error.exception";, +, +	private static final String ERROR_EXCEPTION_TYPE = "javax.servlet.error.exception_type";, +, +	private static final String ERROR_MESSAGE = "javax.servlet.error.message";, +, +	private static final String ERROR_STATUS_CODE = "javax.servlet.error.status_code";, +, +	private String global;, +, +	private final Map<Integer, String> statuses = new HashMap<Integer, String>();, +, +	private final Map<Class<?>, String> exceptions = new HashMap<Class<?>, String>();, +, +	@Override, +	public void init(FilterConfig filterConfig) throws ServletException {, +	}, +, +	@Override, +	public void doFilter(ServletRequest request, ServletResponse response,, +			FilterChain chain) throws IOException, ServletException {, +		if (request instanceof HttpServletRequest, +				&& response instanceof HttpServletResponse) {, +			doFilter((HttpServletRequest) request, (HttpServletResponse) response, chain);, +		}, +		else {, +			chain.doFilter(request, response);, +		}, +	}, +, +	private void doFilter(HttpServletRequest request, HttpServletResponse response,, +			FilterChain chain) throws IOException, ServletException {, +		ErrorWrapperResponse wrapped = new ErrorWrapperResponse(response);, +		try {, +			chain.doFilter(request, wrapped);, +			int status = wrapped.getStatus();, +			if (status >= 400) {, +				handleErrorStatus(request, response, status, wrapped.getMessage());, +			}, +		}]