[+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		assertThat(invocation.getStandardOutput(),, +				containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		assertThat(invocation.getStandardOutput(),, +				containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/resources/jar-command/jar.groovy, +@EnableGroovyTemplates, +		println template('template.txt', [world:'Mama']), +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		assertThat(invocation.getStandardOutput(),, +				containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/resources/jar-command/jar.groovy, +@EnableGroovyTemplates, +		println template('template.txt', [world:'Mama']), +++ b/spring-boot-cli/src/it/resources/jar-command/templates/template.txt, +Goodbye ${world}, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		assertThat(invocation.getStandardOutput(),, +				containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/resources/jar-command/jar.groovy, +@EnableGroovyTemplates, +		println template('template.txt', [world:'Mama']), +++ b/spring-boot-cli/src/it/resources/jar-command/templates/template.txt, +Goodbye ${world}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +import org.springframework.util.ClassUtils;, +			Resource[] resources = new PathMatchingResourcePatternResolver().getResources("org/springframework/boot/groovy/**");, +			for (Resource resource : resources) {, +				String url = resource.getURL().toString();, +				addResource(writer, resource, url.substring(url.indexOf("org/springframework/boot/groovy/")));, +			}, +		private void addResource(JarWriter writer, Resource resource, String name) throws IOException {, +			InputStream stream = resource.getInputStream();, +			writer.writeEntry(name, stream);, +		}, +, +				// We only need to do it at most once, +				break;, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		assertThat(invocation.getStandardOutput(),, +				containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/resources/jar-command/jar.groovy, +@EnableGroovyTemplates, +		println template('template.txt', [world:'Mama']), +++ b/spring-boot-cli/src/it/resources/jar-command/templates/template.txt, +Goodbye ${world}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +import org.springframework.util.ClassUtils;, +			Resource[] resources = new PathMatchingResourcePatternResolver().getResources("org/springframework/boot/groovy/**");, +			for (Resource resource : resources) {, +				String url = resource.getURL().toString();, +				addResource(writer, resource, url.substring(url.indexOf("org/springframework/boot/groovy/")));, +			}, +		private void addResource(JarWriter writer, Resource resource, String name) throws IOException {, +			InputStream stream = resource.getInputStream();, +			writer.writeEntry(name, stream);, +		}, +, +				// We only need to do it at most once, +				break;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/GroovyTemplatesCompilerAutoConfiguration.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler.autoconfigure;, +, +import org.codehaus.groovy.ast.ClassNode;, +import org.codehaus.groovy.control.customizers.ImportCustomizer;, +import org.springframework.boot.cli.compiler.AstUtils;, +import org.springframework.boot.cli.compiler.CompilerAutoConfiguration;, +import org.springframework.boot.cli.compiler.DependencyCustomizer;, +import org.springframework.boot.groovy.EnableGroovyTemplates;, +import org.springframework.boot.groovy.GroovyTemplate;, +, +/**, + * {@link CompilerAutoConfiguration} for Groovy Templates (outside MVC)., + * , + * @author Dave Syer, + * , + * @since 1.1, + */, +public class GroovyTemplatesCompilerAutoConfiguration extends CompilerAutoConfiguration {]