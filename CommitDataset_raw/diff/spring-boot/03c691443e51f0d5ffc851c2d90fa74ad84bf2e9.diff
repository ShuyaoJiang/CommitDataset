[+++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.3.0.BUILD-SNAPSHOT</version>, +			<groupId>com.sun.mail</groupId>, +			<artifactId>javax.mail</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.activemq</groupId>, +			<artifactId>activemq-broker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.3.0.BUILD-SNAPSHOT</version>, +			<groupId>com.sun.mail</groupId>, +			<artifactId>javax.mail</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.activemq</groupId>, +			<artifactId>activemq-broker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.3.0.BUILD-SNAPSHOT</version>, +			<groupId>com.sun.mail</groupId>, +			<artifactId>javax.mail</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.activemq</groupId>, +			<artifactId>activemq-broker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import javax.jms.ConnectionFactory;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.boot.actuate.health.JmsHealthIndicator;, +import org.springframework.boot.actuate.health.MailHealthIndicator;, +import org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;, +import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;, +import org.springframework.core.ResolvableType;, +import org.springframework.mail.javamail.JavaMailSenderImpl;, + * @author Phillip Webb, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class }), +	/**, +	 * Base class for configurations that can combine source beans using a, +	 * {@link CompositeHealthIndicator}., +	 * @param <H> The health indicator type, +	 * @param <S> The bean source type, +	 */, +	protected static abstract class CompositeHealthIndicatorConfiguration<H extends HealthIndicator, S> {, +		protected HealthIndicator createHealthIndicator(Map<String, S> beans) {, +			if (beans.size() == 1) {, +				return createHealthIndicator(beans.values().iterator().next());, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, S> entry : beans.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(),, +						createHealthIndicator(entry.getValue()));, +			}, +			return composite;, +		}, +, +		@SuppressWarnings("unchecked"), +		protected H createHealthIndicator(S source) {, +			Class<?>[] generics = ResolvableType.forClass(, +					CompositeHealthIndicatorConfiguration.class, getClass()), +					.resolveGenerics();, +			Class<H> indicatorClass = (Class<H>) generics[0];, +			Class<S> sourceClass = (Class<S>) generics[1];, +			try {, +				return indicatorClass.getConstructor(sourceClass).newInstance(source);, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException("Unable to create indicator ", +						+ indicatorClass + " for source " + sourceClass, ex);, +			}, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnBean(DataSource.class)]