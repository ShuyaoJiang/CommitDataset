[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +	private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +			DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +	public Set<DispatcherType> getFilterDispatcherTypes() {, +	public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +	private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +			DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +	public Set<DispatcherType> getFilterDispatcherTypes() {, +	public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +		private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +				DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +		public Set<DispatcherType> getFilterDispatcherTypes() {, +		public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +	private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +			DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +	public Set<DispatcherType> getFilterDispatcherTypes() {, +	public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +		private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +				DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +		public Set<DispatcherType> getFilterDispatcherTypes() {, +		public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionRepositoryFilterConfiguration.java, +		SessionProperties.Servlet servletProperties = sessionProperties.getServlet();, +		if (servletProperties.getFilterDispatcherTypes() == null) {, +		return servletProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +	private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +			DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +	public Set<DispatcherType> getFilterDispatcherTypes() {, +	public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.web.servlet.DispatcherType;, +		private Set<DispatcherType> filterDispatcherTypes = new HashSet<>(Arrays.asList(, +				DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));, +		public Set<DispatcherType> getFilterDispatcherTypes() {, +		public void setFilterDispatcherTypes(Set<DispatcherType> filterDispatcherTypes) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionRepositoryFilterConfiguration.java, +		SessionProperties.Servlet servletProperties = sessionProperties.getServlet();, +		if (servletProperties.getFilterDispatcherTypes() == null) {, +		return servletProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "security.filter-dispatcher-types",, +    "defaultValue": ["async", "error", "request"], +  },, +  {, +    "name": "spring.session.servlet.filter-dispatcher-types",, +    "defaultValue": ["async", "error", "request"], +  },, +  {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +import java.util.stream.Collectors;, +		return securityProperties.getFilterDispatcherTypes().stream(), +				.map((type) -> DispatcherType.valueOf(type.name())), +				.collect(Collectors, +						.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java]