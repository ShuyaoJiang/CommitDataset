[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +public class ResourceProperties {, +	 * /resources/, /static/, /public/]., +	private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +public class ResourceProperties {, +	 * /resources/, /static/, /public/]., +	private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Optional;, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.ResourceLoader;, +	private static final String[] SERVLET_LOCATIONS = { "/" };, +, +	public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer, ResourceLoaderAware {, +		private ResourceLoader resourceLoader;, +, +		public void setResourceLoader(ResourceLoader resourceLoader) {, +			this.resourceLoader = resourceLoader;, +		}, +, +		@Override, +										getResourceLocations(this.resourceProperties.getStaticLocations())), +		public WelcomePageHandlerMapping welcomePageHandlerMapping() {, +			return new WelcomePageHandlerMapping(getWelcomePage(),, +		static String[] getResourceLocations(String[] staticLocations) {, +			String[] locations = new String[staticLocations.length + SERVLET_LOCATIONS.length];, +			System.arraycopy(staticLocations, 0, locations, 0, staticLocations.length);, +			System.arraycopy(SERVLET_LOCATIONS, 0, locations,, +					staticLocations.length, SERVLET_LOCATIONS.length);, +			return locations;, +		}, +, +		private Optional<Resource> getWelcomePage() {, +			return Arrays.stream(getResourceLocations(this.resourceProperties.getStaticLocations())), +					.map(location -> this.resourceLoader.getResource(location + "index.html")), +					.filter(resource -> {, +						try {, +							if (resource.exists()) {, +								resource.getURL();, +								return true;, +							}, +						}, +						catch (Exception ex) {, +							// Ignore, +						}, +						return false;, +					}), +					.findFirst();, +		}, +, +		public static class FaviconConfiguration implements ResourceLoaderAware {, +			private ResourceLoader resourceLoader;, +, +			@Override, +			public void setResourceLoader(ResourceLoader resourceLoader) {, +				this.resourceLoader = resourceLoader;, +			}, +, +				requestHandler.setLocations(resolveFaviconLocations());, +			private List<Resource> resolveFaviconLocations() {, +				String[] resourceLocations = getResourceLocations(this.resourceProperties.getStaticLocations());, +				List<Resource> locations = new ArrayList<>(resourceLocations.length + 1);, +				Arrays.stream(resourceLocations), +						.forEach(location -> locations.add(this.resourceLoader.getResource(location)));, +				locations.add(new ClassPathResource("/"));, +				return Collections.unmodifiableList(locations);, +			}, +, +		private WelcomePageHandlerMapping(Optional<Resource> welcomePage,, +			if (welcomePage.isPresent() && "/**".equals(staticPathPattern)) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +public class ResourceProperties {, +	 * /resources/, /static/, /public/]., +	private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Optional;, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.ResourceLoader;, +	private static final String[] SERVLET_LOCATIONS = { "/" };, +, +	public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer, ResourceLoaderAware {, +		private ResourceLoader resourceLoader;, +, +		public void setResourceLoader(ResourceLoader resourceLoader) {, +			this.resourceLoader = resourceLoader;, +		}, +, +		@Override, +										getResourceLocations(this.resourceProperties.getStaticLocations())), +		public WelcomePageHandlerMapping welcomePageHandlerMapping() {, +			return new WelcomePageHandlerMapping(getWelcomePage(),, +		static String[] getResourceLocations(String[] staticLocations) {, +			String[] locations = new String[staticLocations.length + SERVLET_LOCATIONS.length];]