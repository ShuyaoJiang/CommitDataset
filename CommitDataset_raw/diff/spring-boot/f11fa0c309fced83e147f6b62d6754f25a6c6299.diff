[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/GitInfo.java, +import java.util.Date;, +, +		private Date time;, +		public Date getTime() {, +		public void setTime(Date time) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/GitInfo.java, +import java.util.Date;, +, +		private Date time;, +		public Date getTime() {, +		public void setTime(Date time) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +import java.io.IOException;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.core.io.Resource;, +import org.springframework.validation.BindException;, +	@Autowired, +	private ProjectInfoProperties properties;, +	private final ConversionService conversionService = createConversionService();, +, +	@Conditional(GitResourceAvailableCondition.class), +	public GitInfo gitInfo() throws Exception {, +		GitInfo gitInfo = new GitInfo();, +		bindPropertiesTo(gitInfo, this.properties.getGit().getLocation(), "git");, +		return gitInfo;, +	protected void bindPropertiesTo(Object target, Resource location, String prefix), +			throws BindException, IOException {, +		PropertiesConfigurationFactory<Object> factory =, +				new PropertiesConfigurationFactory<Object>(target);, +		factory.setConversionService(this.conversionService);, +		factory.setTargetName(prefix);, +		Properties gitInfoProperties = PropertiesLoaderUtils.loadProperties(location);, +		factory.setProperties(gitInfoProperties);, +		factory.bindPropertiesToTarget();, +	private static ConversionService createConversionService() {, +		DefaultConversionService conversionService = new DefaultConversionService();, +		conversionService.addConverter(new StringToDateConverter());, +		return conversionService;, +	}, +, +, +	private static class StringToDateConverter implements Converter<String, Date> {, +, +		@Override, +		public Date convert(String s) {, +			Long epoch = parseEpochSecond(s);, +			if (epoch != null) {, +				return new Date(epoch);, +			}, +			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX", Locale.US);, +			try {, +				return format.parse(s);, +			}, +			catch (ParseException ex) {, +				throw new ConversionFailedException(TypeDescriptor.valueOf(String.class),, +						TypeDescriptor.valueOf(Date.class), s, ex);, +			}, +		}, +, +		/**, +		 * Attempt to parse a {@code Long} from the specified input, representing the, +		 * epoch time in seconds., +		 * @param s the input, +		 * @return the epoch time in msec, +		 */, +		private Long parseEpochSecond(String s) {, +			try {, +				return Long.parseLong(s) * 1000;, +			}, +			catch (NumberFormatException e) {, +				return null;, +			}, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/GitInfo.java, +import java.util.Date;, +, +		private Date time;, +		public Date getTime() {, +		public void setTime(Date time) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +import java.io.IOException;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.ConversionService;]