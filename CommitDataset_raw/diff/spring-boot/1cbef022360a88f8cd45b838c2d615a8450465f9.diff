[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.validation.DefaultMessageCodesResolver;, +import org.springframework.validation.MessageCodesResolver;, +		@Value("${spring.mvc.message-codes-resolver.format:}"), +		private String messageCodesResolverFormat = "";, +, +		@Bean, +		@ConditionalOnMissingBean(MessageCodesResolver.class), +		@ConditionalOnExpression("'${spring.mvc.message-codes-resolver.format:}' != ''"), +		public MessageCodesResolver messageCodesResolver() {, +			DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();, +			resolver.setMessageCodeFormatter(DefaultMessageCodesResolver.Format.valueOf(messageCodesResolverFormat));, +			return resolver;, +		}, +		, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.validation.DefaultMessageCodesResolver;, +import org.springframework.validation.MessageCodesResolver;, +		@Value("${spring.mvc.message-codes-resolver.format:}"), +		private String messageCodesResolverFormat = "";, +, +		@Bean, +		@ConditionalOnMissingBean(MessageCodesResolver.class), +		@ConditionalOnExpression("'${spring.mvc.message-codes-resolver.format:}' != ''"), +		public MessageCodesResolver messageCodesResolver() {, +			DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();, +			resolver.setMessageCodeFormatter(DefaultMessageCodesResolver.Format.valueOf(messageCodesResolverFormat));, +			return resolver;, +		}, +		, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertThat;, +, +import org.springframework.validation.MessageCodesResolver;, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void noMessageCodeResolver() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		this.context.getBean(MessageCodesResolver.class);, +	}, +, +	@Test, +	public void overrideMessageCodesFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.mvc.message-codes-resolver.format:POSTFIX_ERROR_CODE");, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		this.context.getBean(MessageCodesResolver.class);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.validation.DefaultMessageCodesResolver;, +import org.springframework.validation.MessageCodesResolver;, +		@Value("${spring.mvc.message-codes-resolver.format:}"), +		private String messageCodesResolverFormat = "";, +, +		@Bean, +		@ConditionalOnMissingBean(MessageCodesResolver.class), +		@ConditionalOnExpression("'${spring.mvc.message-codes-resolver.format:}' != ''"), +		public MessageCodesResolver messageCodesResolver() {, +			DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();, +			resolver.setMessageCodeFormatter(DefaultMessageCodesResolver.Format.valueOf(messageCodesResolverFormat));, +			return resolver;, +		}, +		, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertThat;, +, +import org.springframework.validation.MessageCodesResolver;, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void noMessageCodeResolver() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		this.context.getBean(MessageCodesResolver.class);, +	}, +, +	@Test, +	public void overrideMessageCodesFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,]