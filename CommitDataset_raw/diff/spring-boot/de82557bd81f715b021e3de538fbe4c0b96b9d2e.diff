[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	 * The name of this tool when printed by the help command., +	 * , +	 * @return the displayName, +	 */, +	public String getDisplayName() {, +		return this.displayName;, +	}, +, +	/**, +	public final Command find(String name) {, +			String candidateName = candidate.getName();, +			if (candidateName.equals(name), +					|| (candidate.isOptionCommand() && ("--" + candidateName), +	public void register(Command command) {, +		Command existing = find(command.getName());, +		int index = this.commands.indexOf(find("hint")) - 1;, +		index = index >= 0 ? index : 0;, +		if (existing != null) {, +			index = this.commands.indexOf(existing);, +			this.commands.remove(index);, +		}, +		this.commands.add(index, command);, +	}, +, +	public void unregister(String name) {, +		this.commands.remove(find(name));, +	}, +, +	public List<Command> getCommands() {, +		return Collections.unmodifiableList(this.commands);, +	}, +, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	 * The name of this tool when printed by the help command., +	 * , +	 * @return the displayName, +	 */, +	public String getDisplayName() {, +		return this.displayName;, +	}, +, +	/**, +	public final Command find(String name) {, +			String candidateName = candidate.getName();, +			if (candidateName.equals(name), +					|| (candidate.isOptionCommand() && ("--" + candidateName), +	public void register(Command command) {, +		Command existing = find(command.getName());, +		int index = this.commands.indexOf(find("hint")) - 1;, +		index = index >= 0 ? index : 0;, +		if (existing != null) {, +			index = this.commands.indexOf(existing);, +			this.commands.remove(index);, +		}, +		this.commands.add(index, command);, +	}, +, +	public void unregister(String name) {, +		this.commands.remove(find(name));, +	}, +, +	public List<Command> getCommands() {, +		return Collections.unmodifiableList(this.commands);, +	}, +, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandCompleter.java, +		this.commands.addAll(cli.getCommands());, +		for (Command c : this.commands) {, +			this.optionCompleters.put(c.getName(), new ArgumentCompleter(, +					new StringsCompleter(c.getName()), new StringsCompleter(opts),, +					new NullCompleter()));, +, +		for (Command c : this.commands) {, +			if (buffer.equals(this.lastBuffer)) {, +				this.lastBuffer = buffer;, +					this.console.println();, +					this.console.println("Usage:");, +					this.console.println(c.getName() + " " + c.getUsageHelp());, +						String opts = StringUtils, +								.collectionToDelimitedString(cols, " | ");, +						this.console.println(sb.toString());, +					this.console.drawLine();, +				}, +				catch (IOException e) {, +			Completer completer = this.optionCompleters.get(c.getName());, +		this.lastBuffer = buffer;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	 * The name of this tool when printed by the help command., +	 * , +	 * @return the displayName, +	 */, +	public String getDisplayName() {, +		return this.displayName;, +	}, +, +	/**, +	public final Command find(String name) {]