[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.lang.reflect.Field;, +			if (isValueMapped(value)) {, +	}, +	private boolean isValueMapped(Object value) {, +		if (value != null && value instanceof Enum) {, +			Field field = ReflectionUtils.findField(value.getClass(),, +					((Enum<?>) value).name());, +			if (AnnotatedElementUtils.isAnnotated(field, UnmappedPropertyValue.class)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.lang.reflect.Field;, +			if (isValueMapped(value)) {, +	}, +	private boolean isValueMapped(Object value) {, +		if (value != null && value instanceof Enum) {, +			Field field = ReflectionUtils.findField(value.getClass(),, +					((Enum<?>) value).name());, +			if (AnnotatedElementUtils.isAnnotated(field, UnmappedPropertyValue.class)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMapping.java, + * @see UnmappedPropertyValue, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.lang.reflect.Field;, +			if (isValueMapped(value)) {, +	}, +	private boolean isValueMapped(Object value) {, +		if (value != null && value instanceof Enum) {, +			Field field = ReflectionUtils.findField(value.getClass(),, +					((Enum<?>) value).name());, +			if (AnnotatedElementUtils.isAnnotated(field, UnmappedPropertyValue.class)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMapping.java, + * @see UnmappedPropertyValue, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/UnmappedPropertyValue.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.autoconfigure.properties;, +, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * Indicates that a single value should not be mapped when referenced from a, + * {@link PropertyMapping @PropertyMapping} annotation., + *, + * @author Phillip Webb, + * @since 1.4.0, + * @see PropertyMapping, + */, +@Retention(RetentionPolicy.RUNTIME), +@Target({ ElementType.FIELD }), +public @interface UnmappedPropertyValue {, +, +}, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.lang.reflect.Field;, +			if (isValueMapped(value)) {, +	}, +	private boolean isValueMapped(Object value) {, +		if (value != null && value instanceof Enum) {, +			Field field = ReflectionUtils.findField(value.getClass(),, +					((Enum<?>) value).name());, +			if (AnnotatedElementUtils.isAnnotated(field, UnmappedPropertyValue.class)) {, +				return false;, +			}, +		}, +		return true;, +	}]