[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * @author Stephane Nicoll, + * @since 2.0.0, +	protected final RabbitProperties getRabbitProperties() {, +		return this.rabbitProperties;, +	}, +, +	public abstract void configure(T factory, ConnectionFactory connectionFactory);, +, +, +	protected void configure(T factory, ConnectionFactory connectionFactory,, +			RabbitProperties.AmqpContainer configuration) {, +		Assert.notNull(configuration, "Configuration must not be null");, +		factory.setAutoStartup(configuration.isAutoStartup());, +		if (configuration.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(configuration.getAcknowledgeMode());, +		if (configuration.getPrefetch() != null) {, +			factory.setPrefetchCount(configuration.getPrefetch());, +		if (configuration.getDefaultRequeueRejected() != null) {, +			factory.setDefaultRequeueRejected(configuration.getDefaultRequeueRejected());, +		if (configuration.getIdleEventInterval() != null) {, +			factory.setIdleEventInterval(configuration.getIdleEventInterval());, +		ListenerRetry retryConfig = configuration.getRetry();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * @author Stephane Nicoll, + * @since 2.0.0, +	protected final RabbitProperties getRabbitProperties() {, +		return this.rabbitProperties;, +	}, +, +	public abstract void configure(T factory, ConnectionFactory connectionFactory);, +, +, +	protected void configure(T factory, ConnectionFactory connectionFactory,, +			RabbitProperties.AmqpContainer configuration) {, +		Assert.notNull(configuration, "Configuration must not be null");, +		factory.setAutoStartup(configuration.isAutoStartup());, +		if (configuration.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(configuration.getAcknowledgeMode());, +		if (configuration.getPrefetch() != null) {, +			factory.setPrefetchCount(configuration.getPrefetch());, +		if (configuration.getDefaultRequeueRejected() != null) {, +			factory.setDefaultRequeueRejected(configuration.getDefaultRequeueRejected());, +		if (configuration.getIdleEventInterval() != null) {, +			factory.setIdleEventInterval(configuration.getIdleEventInterval());, +		ListenerRetry retryConfig = configuration.getRetry();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.amqp.rabbit.connection.ConnectionFactory;, + * Configure {@link DirectRabbitListenerContainerFactoryConfigurer} with sensible defaults., + * @author Stephane Nicoll, +	public void configure(DirectRabbitListenerContainerFactory factory, ConnectionFactory connectionFactory) {, +		RabbitProperties.DirectContainer config = getRabbitProperties().getListener(), +				.getDirect();, +		configure(factory, connectionFactory, config);, +		if (config.getConsumersPerQueue() != null) {, +			factory.setConsumersPerQueue(config.getConsumersPerQueue());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * @author Stephane Nicoll, + * @since 2.0.0, +	protected final RabbitProperties getRabbitProperties() {, +		return this.rabbitProperties;, +	}, +, +	public abstract void configure(T factory, ConnectionFactory connectionFactory);, +, +, +	protected void configure(T factory, ConnectionFactory connectionFactory,, +			RabbitProperties.AmqpContainer configuration) {, +		Assert.notNull(configuration, "Configuration must not be null");, +		factory.setAutoStartup(configuration.isAutoStartup());, +		if (configuration.getAcknowledgeMode() != null) {, +			factory.setAcknowledgeMode(configuration.getAcknowledgeMode());, +		if (configuration.getPrefetch() != null) {, +			factory.setPrefetchCount(configuration.getPrefetch());, +		if (configuration.getDefaultRequeueRejected() != null) {, +			factory.setDefaultRequeueRejected(configuration.getDefaultRequeueRejected());, +		if (configuration.getIdleEventInterval() != null) {, +			factory.setIdleEventInterval(configuration.getIdleEventInterval());, +		ListenerRetry retryConfig = configuration.getRetry();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.amqp.rabbit.connection.ConnectionFactory;, + * Configure {@link DirectRabbitListenerContainerFactoryConfigurer} with sensible defaults., + * @author Stephane Nicoll, +	public void configure(DirectRabbitListenerContainerFactory factory, ConnectionFactory connectionFactory) {, +		RabbitProperties.DirectContainer config = getRabbitProperties().getListener(), +				.getDirect();, +		configure(factory, connectionFactory, config);, +		if (config.getConsumersPerQueue() != null) {, +			factory.setConsumersPerQueue(config.getConsumersPerQueue());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +	private final ObjectProvider<MessageConverter> messageConverter;, +	private final ObjectProvider<MessageRecoverer> messageRecoverer;, +	private final RabbitProperties properties;, +	public SimpleRabbitListenerContainerFactoryConfigurer simpleRabbitListenerContainerFactoryConfigurer() {, +		SimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer();, +	@Bean(name = "rabbitListenerContainerFactory"), +	@ConditionalOnProperty(prefix = "spring.rabbitmq.listener", name = "type", havingValue = "simple", matchIfMissing = true), +	public SimpleRabbitListenerContainerFactory simpleRabbitListenerContainerFactory(, +	public DirectRabbitListenerContainerFactoryConfigurer directRabbitListenerContainerFactoryConfigurer() {, +	@Bean(name = "rabbitListenerContainerFactory")]