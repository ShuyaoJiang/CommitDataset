[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +@Order(Ordered.HIGHEST_PRECEDENCE + 1), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +@Order(Ordered.HIGHEST_PRECEDENCE + 1), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-webflux-web-filters]], +==== Web Filters, +Spring WebFlux provides a `WebFilter` interface that can be implemented to filter HTTP, +request-response exchanges. `WebFilter` beans found in the application context will, +be automatically used to filter each exchange., +, +Where the order of the filters is important they can implemented `Ordered` or be annotated, +with `@Order`. Spring Boot auto-configuration may configure web filters for you. When it, +does so, the orders shown in the following table will be used:, +, +|===, +| Web Filter | Order, +, +|`MetricsWebFilter`, +|`Ordered.HIGHEST_PRECEDENCE + 1`, +, +|`WebFilterChainProxy` (Spring Security), +|`-100`, +, +|===, +, +, +]