[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +		BeanFactoryAware, ApplicationContextAware {, +	private ApplicationContext applicationContext;, +, +	public void setApplicationContext(ApplicationContext applicationContext), +			throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +, +	@Override, +			if (parentContextContainsSameBean(this.applicationContext, beanKey)) {, +				builder.append(",context=", +						+ ObjectUtils.getIdentityHexString(this.applicationContext));, +			}, +	private boolean parentContextContainsSameBean(ApplicationContext applicationContext,, +			String beanKey) {, +		if (applicationContext.getParent() != null) {, +			try {, +				this.applicationContext.getParent().getBean(beanKey, Endpoint.class);, +				return true;, +			}, +			catch (BeansException ex) {, +				return parentContextContainsSameBean(applicationContext.getParent(),, +						beanKey);, +			}, +		}, +		return false;, +	}, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +		BeanFactoryAware, ApplicationContextAware {, +	private ApplicationContext applicationContext;, +, +	public void setApplicationContext(ApplicationContext applicationContext), +			throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +, +	@Override, +			if (parentContextContainsSameBean(this.applicationContext, beanKey)) {, +				builder.append(",context=", +						+ ObjectUtils.getIdentityHexString(this.applicationContext));, +			}, +	private boolean parentContextContainsSameBean(ApplicationContext applicationContext,, +			String beanKey) {, +		if (applicationContext.getParent() != null) {, +			try {, +				this.applicationContext.getParent().getBean(beanKey, Endpoint.class);, +				return true;, +			}, +			catch (BeansException ex) {, +				return parentContextContainsSameBean(applicationContext.getParent(),, +						beanKey);, +			}, +		}, +		return false;, +	}, +, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfigurationTests.java, +	@Test, +	public void testEndpointMBeanExporterInParentChild() throws IntrospectionException,, +			InstanceNotFoundException, MalformedObjectNameException, ReflectionException {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(EndpointAutoConfiguration.class,, +				EndpointMBeanExportAutoConfiguration.class);, +, +		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();, +		parent.register(EndpointAutoConfiguration.class,, +				EndpointMBeanExportAutoConfiguration.class);, +		this.context.setParent(parent);, +, +		parent.refresh();, +		this.context.refresh();, +, +		parent.close();, +, +		System.out.println("parent " + ObjectUtils.getIdentityHexString(parent));, +		System.out.println("child " + ObjectUtils.getIdentityHexString(this.context));, +	}, +, +		if (applicationContext.getParent() != null) {, +			return ObjectNameManager, +					.getInstance(String.format(, +							"%s:type=Endpoint,name=%s,context=%s,identity=%s", domain,, +							beanKey,, +							ObjectUtils.getIdentityHexString(applicationContext),, +							ObjectUtils.getIdentityHexString(applicationContext, +									.getBean(beanKey))));, +		}, +		else {, +			return ObjectNameManager, +					.getInstance(String.format("%s:type=Endpoint,name=%s,identity=%s",]