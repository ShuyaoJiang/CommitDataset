[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RichGaugeReaderPublicMetrics.java, +	private List<Metric<?>> convert(RichGauge gauge) {, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.AVG, gauge.getAverage()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.VAL, gauge.getValue()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MIN, gauge.getMin()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MAX, gauge.getMax()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.ALPHA, gauge.getAlpha()));, +		result.add(new Metric<Long>(gauge.getName() + RichGauge.COUNT, gauge.getCount()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RichGaugeReaderPublicMetrics.java, +	private List<Metric<?>> convert(RichGauge gauge) {, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.AVG, gauge.getAverage()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.VAL, gauge.getValue()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MIN, gauge.getMin()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MAX, gauge.getMax()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.ALPHA, gauge.getAlpha()));, +		result.add(new Metric<Long>(gauge.getName() + RichGauge.COUNT, gauge.getCount()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/rich/RichGauge.java, +, +, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RichGaugeReaderPublicMetrics.java, +	private List<Metric<?>> convert(RichGauge gauge) {, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.AVG, gauge.getAverage()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.VAL, gauge.getValue()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MIN, gauge.getMin()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MAX, gauge.getMax()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.ALPHA, gauge.getAlpha()));, +		result.add(new Metric<Long>(gauge.getName() + RichGauge.COUNT, gauge.getCount()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/rich/RichGauge.java, +, +, +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import org.springframework.util.Assert;, + * @author Sebastien Deleuze, +		private JacksonProperties jacksonProperties;, +		private HttpMapperProperties httpMapperProperties;, +					Class<?> dateFormatClass = ClassUtils.forName(dateFormat, null);, +					builder.dateFormat((DateFormat) BeanUtils, +							.instantiateClass(dateFormatClass));, +				catch (ClassNotFoundException ex) {, +		private void configurePropertyNamingStrategy(Jackson2ObjectMapperBuilder builder) {, +			// We support a fully qualified class name extending Jackson's, +			// PropertyNamingStrategy or a string value corresponding to the constant, +			// names in PropertyNamingStrategy which hold default provided implementations, +			String strategy = this.jacksonProperties.getPropertyNamingStrategy();, +			if (strategy != null) {, +				try {, +					configurePropertyNamingStrategyClass(builder,, +							ClassUtils.forName(strategy, null));, +				}, +				catch (ClassNotFoundException ex) {, +					configurePropertyNamingStrategyField(builder, strategy);, +				}, +			}, +		}, +, +		private void configurePropertyNamingStrategyClass(, +				Jackson2ObjectMapperBuilder builder, Class<?> propertyNamingStrategyClass) {, +			builder.propertyNamingStrategy((PropertyNamingStrategy) BeanUtils, +					.instantiateClass(propertyNamingStrategyClass));, +		}, +, +		private void configurePropertyNamingStrategyField(, +				Jackson2ObjectMapperBuilder builder, String fieldName) {, +			// Find the field (this way we automatically support new constants, +			// that may be added by Jackson in the future), +			Field field = ReflectionUtils.findField(PropertyNamingStrategy.class,, +					fieldName, PropertyNamingStrategy.class);, +			Assert.notNull(field, "Constant named '" + fieldName + "' not found on ", +					+ PropertyNamingStrategy.class.getName());, +			try {, +				builder.propertyNamingStrategy((PropertyNamingStrategy) field.get(null));, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RichGaugeReaderPublicMetrics.java, +	private List<Metric<?>> convert(RichGauge gauge) {, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.AVG, gauge.getAverage()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.VAL, gauge.getValue()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MIN, gauge.getMin()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.MAX, gauge.getMax()));, +		result.add(new Metric<Double>(gauge.getName() + RichGauge.ALPHA, gauge.getAlpha()));, +		result.add(new Metric<Long>(gauge.getName() + RichGauge.COUNT, gauge.getCount()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/rich/RichGauge.java, +, +, +]