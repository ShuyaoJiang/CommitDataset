[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClass.java, +	 * The classes names that must be present., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClass.java, +	 * The classes names that must be present., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpression.java, +	 * The SpEL expression to evaluate. Expression should return {@code true} if the, +	 * condition passes or {@code false} if it fails., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClass.java, +	 * The classes names that must be present., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpression.java, +	 * The SpEL expression to evaluate. Expression should return {@code true} if the, +	 * condition passes or {@code false} if it fails., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java, + * {@link Conditional} that only matches when the specified classes are not on the, + * classpath., +	 * The classes that must not be present. Since this annotation parsed by loading class, +	 * bytecode it is safe to specify classes here that may ultimately not be on the, +	 * classpath., +	 * @return the classes that must be present, +	public Class<?>[] value() default {};, +, +	/**, +	 * The classes names that must not be present., +	 * @return the class names that must be present., +	 */, +	public String[] name() default {};, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClass.java, +	 * The classes names that must be present., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpression.java, +	 * The SpEL expression to evaluate. Expression should return {@code true} if the, +	 * condition passes or {@code false} if it fails., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java, + * {@link Conditional} that only matches when the specified classes are not on the, + * classpath., +	 * The classes that must not be present. Since this annotation parsed by loading class, +	 * bytecode it is safe to specify classes here that may ultimately not be on the, +	 * classpath., +	 * @return the classes that must be present, +	public Class<?>[] value() default {};, +, +	/**, +	 * The classes names that must not be present., +	 * @return the class names that must be present., +	 */, +	public String[] name() default {};, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.context.annotation.ImportResource;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Tests for {@link ConditionalOnBean}., + * , + * @author Dave Syer, + */, +@Ignore, +public class ConditionalOnBeanTests {, +, +	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +, +	@Test, +	public void testNameOnBeanCondition() {, +		this.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("bar"));, +		assertEquals("bar", this.context.getBean("bar"));, +	}, +, +	@Test, +	public void testNameOnBeanConditionReverseOrder() {, +		this.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("bar"));]