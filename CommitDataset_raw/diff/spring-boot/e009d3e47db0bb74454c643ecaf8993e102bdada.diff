[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ShellProperties.CrshShellProperties;, +	public CrshShellProperties jaasAuthenticationProperties() {, +	public CrshShellProperties keyAuthenticationProperties() {, +	public CrshShellProperties simpleAuthenticationProperties() {, +	public CrshShellProperties SpringAuthenticationProperties() {, +		bootstrapBean.setConfig(this.properties.asCrshShellConfig());, +				// Authenticate first to make sure credentials are valid, +				if (isEnabled(p)) {, +				if (isEnabled(pluginBean)) {, +		protected boolean isEnabled(CRaSHPlugin<?> plugin) {, +			Assert.notNull(plugin, "Plugin must not be null");, +				return true;, +				if (isEnabled(pluginClass)) {, +		private boolean isEnabled(Class<?> pluginClass) {, +			return true;, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ShellProperties.CrshShellProperties;, +	public CrshShellProperties jaasAuthenticationProperties() {, +	public CrshShellProperties keyAuthenticationProperties() {, +	public CrshShellProperties simpleAuthenticationProperties() {, +	public CrshShellProperties SpringAuthenticationProperties() {, +		bootstrapBean.setConfig(this.properties.asCrshShellConfig());, +				// Authenticate first to make sure credentials are valid, +				if (isEnabled(p)) {, +				if (isEnabled(pluginBean)) {, +		protected boolean isEnabled(CRaSHPlugin<?> plugin) {, +			Assert.notNull(plugin, "Plugin must not be null");, +				return true;, +				if (isEnabled(pluginClass)) {, +		private boolean isEnabled(Class<?> pluginClass) {, +			return true;, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/ShellProperties.java, +	private CrshShellProperties[] additionalProperties = new CrshShellProperties[] { new SimpleAuthenticationProperties() };, +	public void setAdditionalProperties(CrshShellProperties[] additionalProperties) {, +		Assert.notNull(additionalProperties, "additionalProperties must not be null");, +		this.additionalProperties = additionalProperties;, +	public CrshShellProperties[] getAdditionalProperties() {, +		return this.additionalProperties;, +	public Properties asCrshShellConfig() {, +		this.ssh.applyToCrshShellConfig(properties);, +		this.telnet.applyToCrshShellConfig(properties);, +		for (CrshShellProperties shellProperties : this.additionalProperties) {, +			shellProperties.applyToCrshShellConfig(properties);, +	 * Base class for Auth specific properties., +	 */, +	public static abstract class CrshShellProperties {, +, +		/**, +		 * Apply the properties to a CRaSH configuration., +		 */, +		protected abstract void applyToCrshShellConfig(Properties config);, +, +	}, +, +	/**, +	public static class Ssh extends CrshShellProperties {, +		@Override, +		protected void applyToCrshShellConfig(Properties config) {, +			Assert.hasText(keyPath, "keyPath must have text");, +			Assert.notNull(port, "port must not be null");, +	public static class Telnet extends CrshShellProperties {, +		@Override, +		protected void applyToCrshShellConfig(Properties config) {, +			Assert.notNull(port, "port must not be null");, +	public static class JaasAuthenticationProperties extends CrshShellProperties {, +		protected void applyToCrshShellConfig(Properties config) {, +			Assert.hasText(domain, "domain must have text");, +	public static class KeyAuthenticationProperties extends CrshShellProperties {, +		protected void applyToCrshShellConfig(Properties config) {, +			Assert.hasText(path, "path must have text");, +	public static class SimpleAuthenticationProperties extends CrshShellProperties {, +		protected void applyToCrshShellConfig(Properties config) {, +			Assert.hasLength(username, "username must have text");, +	public static class SpringAuthenticationProperties extends CrshShellProperties {, +		protected void applyToCrshShellConfig(Properties config) {, +			// 'roles' can be empty. This means no special to access right to connect to, +			// shell is required., +			Assert.notNull(roles, "roles must not be null");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.ShellProperties.CrshShellProperties;, +	public CrshShellProperties jaasAuthenticationProperties() {, +	public CrshShellProperties keyAuthenticationProperties() {, +	public CrshShellProperties simpleAuthenticationProperties() {, +	public CrshShellProperties SpringAuthenticationProperties() {, +		bootstrapBean.setConfig(this.properties.asCrshShellConfig());, +				// Authenticate first to make sure credentials are valid, +				if (isEnabled(p)) {, +				if (isEnabled(pluginBean)) {, +		protected boolean isEnabled(CRaSHPlugin<?> plugin) {, +			Assert.notNull(plugin, "Plugin must not be null");, +				return true;, +				if (isEnabled(pluginClass)) {, +		private boolean isEnabled(Class<?> pluginClass) {, +			return true;, +		}]