[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, + * @author Eddú Meléndez, +				configureVisibility(builder, this.jacksonProperties.getAccessor());, +			private void configureVisibility(Jackson2ObjectMapperBuilder builder,, +					Map<PropertyAccessor, JsonAutoDetect.Visibility> accessors) {, +				accessors.forEach(builder::visibility);, +			}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, + * @author Eddú Meléndez, +				configureVisibility(builder, this.jacksonProperties.getAccessor());, +			private void configureVisibility(Jackson2ObjectMapperBuilder builder,, +					Map<PropertyAccessor, JsonAutoDetect.Visibility> accessors) {, +				accessors.forEach(builder::visibility);, +			}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, +	/**, +	 * Jackson visibilities to auto-detect properties., +	 */, +	private Map<PropertyAccessor, JsonAutoDetect.Visibility> accessor = new EnumMap<>(, +			PropertyAccessor.class);, +, +	public Map<PropertyAccessor, JsonAutoDetect.Visibility> getAccessor() {, +		return this.accessor;, +	}, +, +	public void setAccessor(Map<PropertyAccessor, JsonAutoDetect.Visibility> accessor) {, +		this.accessor = accessor;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, + * @author Eddú Meléndez, +				configureVisibility(builder, this.jacksonProperties.getAccessor());, +			private void configureVisibility(Jackson2ObjectMapperBuilder builder,, +					Map<PropertyAccessor, JsonAutoDetect.Visibility> accessors) {, +				accessors.forEach(builder::visibility);, +			}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, +	/**, +	 * Jackson visibilities to auto-detect properties., +	 */, +	private Map<PropertyAccessor, JsonAutoDetect.Visibility> accessor = new EnumMap<>(, +			PropertyAccessor.class);, +, +	public Map<PropertyAccessor, JsonAutoDetect.Visibility> getAccessor() {, +		return this.accessor;, +	}, +, +	public void setAccessor(Map<PropertyAccessor, JsonAutoDetect.Visibility> accessor) {, +		this.accessor = accessor;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +	@Test, +	public void writeWithVisibility() {, +		this.contextRunner.withPropertyValues("spring.jackson.accessor.getter:NONE",, +				"spring.jackson.accessor.field:ANY"), +				.run((context) -> {, +					ObjectMapper mapper = context.getBean(ObjectMapper.class);, +					String json = mapper.writeValueAsString(new VisibilityBean());, +					assertThat(json).contains("property1");, +					assertThat(json).contains("property2");, +					assertThat(json).doesNotContain("property3");, +		});, +	}, +, +	private static class VisibilityBean {, +, +		private String property1;, +, +		public String property2;, +, +		public String getProperty3() {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;, + * @author Eddú Meléndez, +				configureVisibility(builder, this.jacksonProperties.getAccessor());, +			private void configureVisibility(Jackson2ObjectMapperBuilder builder,, +					Map<PropertyAccessor, JsonAutoDetect.Visibility> accessors) {, +				accessors.forEach(builder::visibility);, +			}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.annotation.PropertyAccessor;]