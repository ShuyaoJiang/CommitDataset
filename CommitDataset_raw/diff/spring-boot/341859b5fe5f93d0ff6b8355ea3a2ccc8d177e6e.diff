[+++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +		<spring.version>5.2.0.BUILD-SNAPSHOT</spring.version>, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +		<spring.version>5.2.0.BUILD-SNAPSHOT</spring.version>, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebApplicationContext.java, + * Copyright 2012-2019 the original author or authors., +import java.lang.annotation.Annotation;, +import java.util.function.Supplier;, +	private final Set<BeanRegistration> registeredBeans = new LinkedHashSet<>();, +, +	@Override, +	@SafeVarargs, +	@SuppressWarnings("varargs"), +	public final <T> void registerBean(Class<T> annotatedClass,, +			Class<? extends Annotation>... qualifiers) {, +		this.registeredBeans.add(new BeanRegistration(annotatedClass, null, qualifiers));, +	}, +, +	@Override, +	@SafeVarargs, +	@SuppressWarnings("varargs"), +	public final <T> void registerBean(Class<T> annotatedClass, Supplier<T> supplier,, +			Class<? extends Annotation>... qualifiers) {, +		this.registeredBeans, +				.add(new BeanRegistration(annotatedClass, supplier, qualifiers));, +	}, +, +		if (!this.registeredBeans.isEmpty()) {, +			registerBeans(reader);, +		}, +	private void registerBeans(AnnotatedBeanDefinitionReader reader) {, +		if (this.logger.isDebugEnabled()) {, +			this.logger.debug("Registering supplied beans: [", +					+ StringUtils.collectionToCommaDelimitedString(this.registeredBeans), +					+ "]");, +		}, +		this.registeredBeans.forEach((reg) -> reader.registerBean(reg.getAnnotatedClass(),, +				reg.getSupplier(), reg.getQualifiers()));, +	}, +, +	/**, +	 * Holder for a programmatic bean registration., +	 *, +	 * @see #registerBean(Class, Class[]), +	 * @see #registerBean(Class, Supplier, Class[]), +	 */, +	private static class BeanRegistration {, +, +		private final Class<?> annotatedClass;, +, +		private final Supplier<?> supplier;, +, +		private final Class<? extends Annotation>[] qualifiers;, +, +		BeanRegistration(Class<?> annotatedClass, Supplier<?> supplier,, +				Class<? extends Annotation>[] qualifiers) {, +			this.annotatedClass = annotatedClass;, +			this.supplier = supplier;, +			this.qualifiers = qualifiers;, +		}, +, +		public Class<?> getAnnotatedClass() {, +			return this.annotatedClass;, +		}, +, +		@SuppressWarnings("rawtypes"), +		public Supplier getSupplier() {, +			return this.supplier;, +		}, +, +		public Class<? extends Annotation>[] getQualifiers() {, +			return this.qualifiers;, +		}, +, +		@Override, +		public String toString() {, +			return this.annotatedClass.getName();, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +		<spring.version>5.2.0.BUILD-SNAPSHOT</spring.version>, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebApplicationContext.java, + * Copyright 2012-2019 the original author or authors., +import java.lang.annotation.Annotation;, +import java.util.function.Supplier;, +	private final Set<BeanRegistration> registeredBeans = new LinkedHashSet<>();, +, +	@Override, +	@SafeVarargs, +	@SuppressWarnings("varargs"), +	public final <T> void registerBean(Class<T> annotatedClass,, +			Class<? extends Annotation>... qualifiers) {, +		this.registeredBeans.add(new BeanRegistration(annotatedClass, null, qualifiers));, +	}, +, +	@Override, +	@SafeVarargs, +	@SuppressWarnings("varargs")]