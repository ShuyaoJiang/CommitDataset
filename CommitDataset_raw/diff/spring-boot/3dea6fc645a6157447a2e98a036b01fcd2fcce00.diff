[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.Collections;, +import java.util.Set;, +import org.springframework.boot.convert.ApplicationConversionService;, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, +import org.springframework.core.convert.support.GenericConversionService;, +	private final ConversionService typeConverterConversionService;, +	private final ConversionService conversionService;, +		this.typeConverterConversionService = new TypeConverterConversionService(, +				propertyEditorInitializer);, +		TypeDescriptor sourceType = TypeDescriptor.forObject(value);, +		TypeDescriptor targetType = new ResolvableTypeDescriptor(type, annotations);, +		return this.typeConverterConversionService.canConvert(sourceType, targetType), +				|| this.conversionService.canConvert(sourceType, targetType);, +		TypeDescriptor sourceType = TypeDescriptor.forObject(value);, +		TypeDescriptor targetType = new ResolvableTypeDescriptor(type, annotations);, +		if (this.typeConverterConversionService.canConvert(sourceType, targetType)) {, +			return (T) this.typeConverterConversionService.convert(value, sourceType,, +					targetType);, +		return (T) this.conversionService.convert(value, sourceType, targetType);, +	}, +, +	/**, +	 * A {@link TypeDescriptor} backed by a {@link ResolvableType}., +	 */, +	private static class ResolvableTypeDescriptor extends TypeDescriptor {, +, +		ResolvableTypeDescriptor(ResolvableType resolvableType,, +				Annotation[] annotations) {, +			super(resolvableType, null, annotations);, +		}, +, +	}, +, +	/**, +	 * A {@link ConversionService} implementation that delegates to a, +	 * {@link SimpleTypeConverter}. Allows {@link PropertyEditor} based conversion for, +	 * simple types, arrays and collections., +	 */, +	private static class TypeConverterConversionService extends GenericConversionService {, +, +		private SimpleTypeConverter typeConverter;, +, +		TypeConverterConversionService(Consumer<PropertyEditorRegistry> initializer) {, +			this.typeConverter = new SimpleTypeConverter();, +			if (initializer != null) {, +				initializer.accept(this.typeConverter);, +			}, +			addConverter(new TypeConverterConverter(this.typeConverter));, +			ApplicationConversionService.addDelimitedStringConverters(this);, +		}, +, +		@Override, +		public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			// Prefer conversion service to handle things like String to char[]., +			if (targetType.isArray(), +					&& targetType.getElementTypeDescriptor().isPrimitive()) {, +				return false;, +			}, +			return super.canConvert(sourceType, targetType);, +		}, +, +	}, +, +	/**, +	 * {@link ConditionalGenericConverter} that delegates to {@link SimpleTypeConverter}., +	 */, +	private static class TypeConverterConverter implements ConditionalGenericConverter {, +, +		private SimpleTypeConverter typeConverter;, +, +		TypeConverterConverter(SimpleTypeConverter typeConverter) {, +			this.typeConverter = typeConverter;, +		}, +, +		@Override, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(String.class, Object.class));, +		}, +, +		@Override, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return getPropertyEditor(targetType.getType()) != null;, +		}, +, +		@Override, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +			return this.typeConverter.convertIfNecessary(source, targetType.getType());, +			PropertyEditor editor = this.typeConverter.getDefaultEditor(type);, +				editor = this.typeConverter.findCustomEditor(type, null);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.Collections;, +import java.util.Set;, +import org.springframework.boot.convert.ApplicationConversionService;, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, +import org.springframework.core.convert.support.GenericConversionService;, +	private final ConversionService typeConverterConversionService;, +	private final ConversionService conversionService;, +		this.typeConverterConversionService = new TypeConverterConversionService(]