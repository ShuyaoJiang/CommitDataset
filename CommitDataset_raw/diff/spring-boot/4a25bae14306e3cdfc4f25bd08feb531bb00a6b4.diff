[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +		/**, +		 * Additional paths to watch for changes., +		 */, +		private List<File> additionalPaths = new ArrayList<File>();, +, +		public List<File> getAdditionalPaths() {, +			return this.additionalPaths;, +		}, +, +		public void setAdditionalPaths(List<File> additionalPaths) {, +			this.additionalPaths = additionalPaths;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +		/**, +		 * Additional paths to watch for changes., +		 */, +		private List<File> additionalPaths = new ArrayList<File>();, +, +		public List<File> getAdditionalPaths() {, +			return this.additionalPaths;, +		}, +, +		public void setAdditionalPaths(List<File> additionalPaths) {, +			this.additionalPaths = additionalPaths;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import java.io.File;, +import java.util.List;, +			List<File> additionalPaths = restartProperties.getAdditionalPaths();, +			for (File path : additionalPaths) {, +				watcher.addSourceFolder(path.getAbsoluteFile());, +			}, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +		/**, +		 * Additional paths to watch for changes., +		 */, +		private List<File> additionalPaths = new ArrayList<File>();, +, +		public List<File> getAdditionalPaths() {, +			return this.additionalPaths;, +		}, +, +		public void setAdditionalPaths(List<File> additionalPaths) {, +			this.additionalPaths = additionalPaths;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import java.io.File;, +import java.util.List;, +			List<File> additionalPaths = restartProperties.getAdditionalPaths();, +			for (File path : additionalPaths) {, +				watcher.addSourceFolder(path.getAbsoluteFile());, +			}, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java, +import java.io.File;, +import static org.hamcrest.Matchers.hasKey;, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void watchingAdditionalPaths() throws Exception {, +		Map<String, Object> properties = new HashMap<String, Object>();, +		properties.put("spring.devtools.restart.additional-paths",, +				"src/main/java,src/test/java");, +		this.context = initializeAndRun(Config.class, properties);, +		ClassPathFileSystemWatcher classPathWatcher = this.context, +				.getBean(ClassPathFileSystemWatcher.class);, +		Object watcher = ReflectionTestUtils.getField(classPathWatcher,, +				"fileSystemWatcher");, +		@SuppressWarnings("unchecked"), +		Map<File, Object> folders = (Map<File, Object>) ReflectionTestUtils.getField(, +				watcher, "folders");, +		assertThat(folders.size(), is(equalTo(2)));, +		assertThat(folders, hasKey(new File("src/main/java").getAbsoluteFile()));, +		assertThat(folders, hasKey(new File("src/test/java").getAbsoluteFile()));, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +		/**, +		 * Additional paths to watch for changes., +		 */, +		private List<File> additionalPaths = new ArrayList<File>();, +]