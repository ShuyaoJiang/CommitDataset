[+++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +#java.util.logging.ConsoleHandler.level = FINE, +#sun.net.www.protocol.http.HttpURLConnection.level = ALL, +#org.springframework.bootstrap.level = ALL, +#org.springframework.security.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +#java.util.logging.ConsoleHandler.level = FINE, +#sun.net.www.protocol.http.HttpURLConnection.level = ALL, +#org.springframework.bootstrap.level = ALL, +#org.springframework.security.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementAddressServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +#java.util.logging.ConsoleHandler.level = FINE, +#sun.net.www.protocol.http.HttpURLConnection.level = ALL, +#org.springframework.bootstrap.level = ALL, +#org.springframework.security.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementAddressServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +#java.util.logging.ConsoleHandler.level = FINE, +#sun.net.www.protocol.http.HttpURLConnection.level = ALL, +#org.springframework.bootstrap.level = ALL, +#org.springframework.security.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementAddressServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnMissingBean(DataSource.class), +	@Value("${spring.database.schema:classpath*:schema-${spring.database.platform:all}.sql}"), +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +#java.util.logging.ConsoleHandler.level = FINE, +#sun.net.www.protocol.http.HttpURLConnection.level = ALL, +#org.springframework.bootstrap.level = ALL, +#org.springframework.security.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementAddressServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/test/ManagementServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnMissingBean(DataSource.class), +	@Value("${spring.database.schema:classpath*:schema-${spring.database.platform:all}.sql}"), +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import org.apache.commons.dbcp.BasicDataSource;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	public void testDefaultDataSourceCanBeOverridden() throws Exception {, +		this.context.register(TestDataSourceConfiguration.class,, +				DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue("DataSource is wrong type: " + dataSource,, +				dataSource instanceof BasicDataSource);, +	}, +, +	@Test, +	@Configuration, +	static class TestDataSourceConfiguration {, +, +		private BasicDataSource pool;, +, +		@Bean, +		public DataSource dataSource() {, +			this.pool = new BasicDataSource();, +			this.pool.setDriverClassName("org.hsqldb.jdbcDriver");, +			this.pool.setUrl("jdbc:hsqldb:overridedb");, +			this.pool.setUsername("sa");, +			return this.pool;, +		}, +, +	}, +]