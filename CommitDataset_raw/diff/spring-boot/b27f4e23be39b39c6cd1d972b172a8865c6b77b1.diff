[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		List<String> invalidExcludes = new ArrayList<String>();, +				invalidExcludes.add(exclusion);, +		if (!invalidExcludes.isEmpty()) {, +			handleInvalidExcludes(invalidExcludes);, +		}, +	/**, +	 * Handle any invalid excludes that have been specified., +	 * @param invalidExcludes the list of invalid excludes (will always have at least on, +	 * element), +	 */, +	protected void handleInvalidExcludes(List<String> invalidExcludes) {, +		StringBuilder message = new StringBuilder();, +		for (String exclude : invalidExcludes) {, +			message.append("\t- ").append(exclude).append(String.format("%n"));, +		}, +		throw new IllegalStateException(String, +				.format("The following classes could not be excluded because they are", +						+ " not auto-configuration classes:%n%s", message));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		List<String> invalidExcludes = new ArrayList<String>();, +				invalidExcludes.add(exclusion);, +		if (!invalidExcludes.isEmpty()) {, +			handleInvalidExcludes(invalidExcludes);, +		}, +	/**, +	 * Handle any invalid excludes that have been specified., +	 * @param invalidExcludes the list of invalid excludes (will always have at least on, +	 * element), +	 */, +	protected void handleInvalidExcludes(List<String> invalidExcludes) {, +		StringBuilder message = new StringBuilder();, +		for (String exclude : invalidExcludes) {, +			message.append("\t- ").append(exclude).append(String.format("%n"));, +		}, +		throw new IllegalStateException(String, +				.format("The following classes could not be excluded because they are", +						+ " not auto-configuration classes:%n%s", message));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +	@Override, +	protected void handleInvalidExcludes(List<String> invalidExcludes) {, +		// Ignore for test, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		List<String> invalidExcludes = new ArrayList<String>();, +				invalidExcludes.add(exclusion);, +		if (!invalidExcludes.isEmpty()) {, +			handleInvalidExcludes(invalidExcludes);, +		}, +	/**, +	 * Handle any invalid excludes that have been specified., +	 * @param invalidExcludes the list of invalid excludes (will always have at least on, +	 * element), +	 */, +	protected void handleInvalidExcludes(List<String> invalidExcludes) {, +		StringBuilder message = new StringBuilder();, +		for (String exclude : invalidExcludes) {, +			message.append("\t- ").append(exclude).append(String.format("%n"));, +		}, +		throw new IllegalStateException(String, +				.format("The following classes could not be excluded because they are", +						+ " not auto-configuration classes:%n%s", message));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +	@Override, +	protected void handleInvalidExcludes(List<String> invalidExcludes) {, +		// Ignore for test, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +	public void exclusionsWithoutImport() throws Exception {, +		AnnotationMetadata annotationMetadata = new SimpleMetadataReaderFactory(), +				.getMetadataReader(ExclusionWithoutImport.class.getName()), +				.getAnnotationMetadata();, +		String[] imports = this.importSelector.selectImports(annotationMetadata);, +		assertThat(imports).containsOnly(FreeMarkerAutoConfiguration.class.getName());, +	}, +, +	@Test, +	@ImportOne, +	@ImportAutoConfiguration(exclude = ThymeleafAutoConfiguration.class), +	static class ExclusionWithoutImport {, +, +	}, +]