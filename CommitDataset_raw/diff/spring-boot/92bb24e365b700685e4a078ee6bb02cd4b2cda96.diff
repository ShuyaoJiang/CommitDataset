[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	private final Object monitor = new Object();, +, +	public void setCapacity(int capacity) {, +		synchronized (this.monitor) {, +	}, +	public void add(AuditEvent event) {, +		synchronized (this.monitor) {, +	}, +	public List<AuditEvent> find(Date after) {, +	public List<AuditEvent> find(String principal, Date after) {, +	public List<AuditEvent> find(String principal, Date after, String type) {, +		synchronized (this.events) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	private final Object monitor = new Object();, +, +	public void setCapacity(int capacity) {, +		synchronized (this.monitor) {, +	}, +	public void add(AuditEvent event) {, +		synchronized (this.monitor) {, +	}, +	public List<AuditEvent> find(Date after) {, +	public List<AuditEvent> find(String principal, Date after) {, +	public List<AuditEvent> find(String principal, Date after, String type) {, +		synchronized (this.events) {, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +		public void connect(String host, int port, String user, String password), +				throws MessagingException {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	private final Object monitor = new Object();, +, +	public void setCapacity(int capacity) {, +		synchronized (this.monitor) {, +	}, +	public void add(AuditEvent event) {, +		synchronized (this.monitor) {, +	}, +	public List<AuditEvent> find(Date after) {, +	public List<AuditEvent> find(String principal, Date after) {, +	public List<AuditEvent> find(String principal, Date after, String type) {, +		synchronized (this.events) {, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +		public void connect(String host, int port, String user, String password), +				throws MessagingException {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +		private final Object monitor = new Object();, +, +		public void stop() {, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	private final Object monitor = new Object();, +, +	public void setCapacity(int capacity) {, +		synchronized (this.monitor) {, +	}, +	public void add(AuditEvent event) {, +		synchronized (this.monitor) {, +	}, +	public List<AuditEvent> find(Date after) {, +	public List<AuditEvent> find(String principal, Date after) {, +	public List<AuditEvent> find(String principal, Date after, String type) {, +		synchronized (this.events) {, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +		public void connect(String host, int port, String user, String password), +				throws MessagingException {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +		private final Object monitor = new Object();, +, +		public void stop() {, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, + * Copyright 2012-2016 the original author or authors., +	private final Object monitor = new Object();, +, +	 * Compile and run the application., +	 *, +	public void compileAndRun() throws Exception {, +		synchronized (this.monitor) {, +	}, +		synchronized (this.monitor) {, +	}, +		private final Object monitor = new Object();, +, +			synchronized (this.monitor) {, +		}, +		public void shutdown() {, +			synchronized (this.monitor) {, +						Method method = this.applicationContext.getClass(), +								.getMethod("close");]