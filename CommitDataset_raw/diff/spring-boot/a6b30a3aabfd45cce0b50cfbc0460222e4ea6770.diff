[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java, + * {@link Endpoint} to expose details of an application's beans, grouped by application, +	public ApplicationContextDescriptor beans() {, +		return ApplicationContextDescriptor.describing(this.context);, +	/**, +	 * Response produced by the {@link BeansEndpoint}, primarily intended for, +	 * serialization to JSON., +	 */, +	public static class BeansEndpointResponse {, +, +		private List<ApplicationContextDescriptor> contexts;, +, +		public BeansEndpointResponse(List<ApplicationContextDescriptor> contexts) {, +			this.contexts = contexts;, +, +		public List<ApplicationContextDescriptor> getContexts() {, +			return this.contexts;, +		}, +, +	public static final class ApplicationContextDescriptor {, +		private final ApplicationContextDescriptor parent;, +, +		private ApplicationContextDescriptor(String id, Map<String, BeanDescriptor> beans,, +				ApplicationContextDescriptor parent) {, +			this.parent = parent;, +		public ApplicationContextDescriptor getParent() {, +			return this.parent;, +			if (context == null) {, +				return null;, +			}, +					describeBeans(context.getBeanFactory()),, +					describing(getConfigurableParent(context)));, +		private static ConfigurableApplicationContext getConfigurableParent(, +				ConfigurableApplicationContext context) {, +			ApplicationContext parent = context.getParent();, +			if (parent instanceof ConfigurableApplicationContext) {, +				return (ConfigurableApplicationContext) parent;, +			}, +			return null;, +		}, +, +	public static final class BeanDescriptor {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java, + * {@link Endpoint} to expose details of an application's beans, grouped by application, +	public ApplicationContextDescriptor beans() {, +		return ApplicationContextDescriptor.describing(this.context);, +	/**, +	 * Response produced by the {@link BeansEndpoint}, primarily intended for, +	 * serialization to JSON., +	 */, +	public static class BeansEndpointResponse {, +, +		private List<ApplicationContextDescriptor> contexts;, +, +		public BeansEndpointResponse(List<ApplicationContextDescriptor> contexts) {, +			this.contexts = contexts;, +, +		public List<ApplicationContextDescriptor> getContexts() {, +			return this.contexts;, +		}, +, +	public static final class ApplicationContextDescriptor {, +		private final ApplicationContextDescriptor parent;, +, +		private ApplicationContextDescriptor(String id, Map<String, BeanDescriptor> beans,, +				ApplicationContextDescriptor parent) {, +			this.parent = parent;, +		public ApplicationContextDescriptor getParent() {, +			return this.parent;, +			if (context == null) {, +				return null;, +			}, +					describeBeans(context.getBeanFactory()),, +					describing(getConfigurableParent(context)));, +		private static ConfigurableApplicationContext getConfigurableParent(, +				ConfigurableApplicationContext context) {, +			ApplicationContext parent = context.getParent();, +			if (parent instanceof ConfigurableApplicationContext) {, +				return (ConfigurableApplicationContext) parent;, +			}, +			return null;, +		}, +, +	public static final class BeanDescriptor {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/BeansEndpointTests.java, +			ApplicationContextDescriptor result = context.getBean(BeansEndpoint.class), +					.beans();, +			assertThat(result.getParent()).isNull();, +			assertThat(result.getId()).isEqualTo(context.getId());, +			Map<String, BeanDescriptor> beans = result.getBeans();, +			assertThat(beans).containsKey("endpoint");, +			ApplicationContextDescriptor result = context.getBean(BeansEndpoint.class), +					.beans();, +			Map<String, BeanDescriptor> beans = result.getBeans();, +			ApplicationContextDescriptor result = context.getBean(BeansEndpoint.class), +					.beans();, +			assertThat(result.getBeans()).doesNotContainKey("lazyBean");, +				ApplicationContextDescriptor result = endpoint.beans();, +				assertThat(result.getParent().getBeans()).containsKey("bean");, +				assertThat(result.getBeans()).containsKey("endpoint");]