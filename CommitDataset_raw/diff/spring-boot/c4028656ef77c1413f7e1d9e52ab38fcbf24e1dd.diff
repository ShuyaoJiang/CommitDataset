[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java, +/*, + * Copyright 2010-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.bootstrap.context.initializer;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Properties;, +import java.util.Set;, +, +import org.springframework.bootstrap.config.YamlProcessor.ArrayDocumentMatcher;, +import org.springframework.bootstrap.config.YamlProcessor.DocumentMatcher;, +import org.springframework.bootstrap.config.YamlPropertiesFactoryBean;, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.PropertySource;, +import org.springframework.core.Ordered;, +import org.springframework.core.env.CommandLinePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertiesPropertySource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PropertiesLoaderUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link ApplicationContextInitializer} that configures the context environment by, + * loading properties from well known file locations. By default properties will be loaded, + * from 'application.properties' and/or 'application.yaml' files in the following, + * locations:, + * <ul>, + * <li>classpath:</li>, + * <li>file:./</li>, + * <li>classpath:config/</li>, + * <li>file:./config/:</li>, + * </ul>, + * <p>, + * Alternative locations and names can be specified using, + * {@link #setSearchLocations(String[])} and {@link #setName(String)}., + * , + * <p>, + * Additional files will also be loaded based on active profiles. For example if a 'web', + * profile is active 'application-web.properties' and 'application-web.yaml' will be, + * considered., + * , + * <p>, + * The 'spring.config.name' property can be used to specify an alternative name to load or, + * alternatively the 'spring.config.location' property can be used to specify an exact, + * resource location., + * , + * @author Dave Syer, + * @author Phillip Webb, + */, +public class ConfigFileApplicationContextInitializer implements, +		ApplicationContextInitializer<ConfigurableApplicationContext>, Ordered {, +, +	private static final Loader[] LOADERS = { new PropertiesLoader(), new YamlLoader() };, +, +	private static final String LOCATION_VARIABLE = "${spring.config.location}";, +, +	private String[] searchLocations = new String[] { "classpath:", "file:./",, +			"classpath:config/", "file:./config/" };, +, +	private String name = "${spring.config.name:application}";, +, +	private int order = Integer.MIN_VALUE;, +, +	@Override, +	public void initialize(ConfigurableApplicationContext applicationContext) {, +		List<String> candidates = getCandidateLocations(applicationContext);, +, +		// Initial load allows profiles to be activated, +		for (String candidate : candidates) {, +			load(applicationContext, candidate, null);, +		}, +, +		// Second load for specific profiles, +		for (String profile : applicationContext.getEnvironment().getActiveProfiles()) {, +			for (String candidate : candidates) {, +				load(applicationContext, candidate, profile);, +			}]