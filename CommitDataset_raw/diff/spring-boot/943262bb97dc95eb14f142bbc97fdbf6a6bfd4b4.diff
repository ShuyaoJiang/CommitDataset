[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		 * When not specified will default to "false" for backwards compatibility., +			getNaming().applyNamingStrategies(result);, +			else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {, +		 * Fully qualfied name of the implicit naming strategy., +		 * Fully qualified name of the physical naming strategy., +		private void applyNamingStrategies(Map<String, String> properties) {, +			applyNamingStrategy(properties, "hibernate.implicit_naming_strategy",, +					this.implicitStrategy, DEFAULT_IMPLICIT_STRATEGY);, +			applyNamingStrategy(properties, "hibernate.physical_naming_strategy",, +					this.physicalStrategy, DEFAULT_PHYSICAL_STRATEGY);, +		private void applyNamingStrategy(Map<String, String> properties, String key,, +				String strategy, String defaultStrategy) {, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		 * When not specified will default to "false" for backwards compatibility., +			getNaming().applyNamingStrategies(result);, +			else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {, +		 * Fully qualfied name of the implicit naming strategy., +		 * Fully qualified name of the physical naming strategy., +		private void applyNamingStrategies(Map<String, String> properties) {, +			applyNamingStrategy(properties, "hibernate.implicit_naming_strategy",, +					this.implicitStrategy, DEFAULT_IMPLICIT_STRATEGY);, +			applyNamingStrategy(properties, "hibernate.physical_naming_strategy",, +					this.physicalStrategy, DEFAULT_PHYSICAL_STRATEGY);, +		private void applyNamingStrategy(Map<String, String> properties, String key,, +				String strategy, String defaultStrategy) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import static org.mockito.Mockito.mock;, +			return mock(TransactionManager.class);, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		 * When not specified will default to "false" for backwards compatibility., +			getNaming().applyNamingStrategies(result);, +			else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {, +		 * Fully qualfied name of the implicit naming strategy., +		 * Fully qualified name of the physical naming strategy., +		private void applyNamingStrategies(Map<String, String> properties) {, +			applyNamingStrategy(properties, "hibernate.implicit_naming_strategy",, +					this.implicitStrategy, DEFAULT_IMPLICIT_STRATEGY);, +			applyNamingStrategy(properties, "hibernate.physical_naming_strategy",, +					this.physicalStrategy, DEFAULT_PHYSICAL_STRATEGY);, +		private void applyNamingStrategy(Map<String, String> properties, String key,, +				String strategy, String defaultStrategy) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import static org.mockito.Mockito.mock;, +			return mock(TransactionManager.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +	public void noCustomNamingStrategy() throws Exception {, +		JpaProperties properties = load();, +		JpaProperties properties = load(, +		JpaProperties properties = load(, +	public void useNewIdGeneratorMappingsDefault() throws Exception {, +		JpaProperties properties = load();, +		JpaProperties properties = load(, +	private JpaProperties load(String... environment) {, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		 * When not specified will default to "false" for backwards compatibility., +			getNaming().applyNamingStrategies(result);, +			else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {, +		 * Fully qualfied name of the implicit naming strategy., +		 * Fully qualified name of the physical naming strategy., +		private void applyNamingStrategies(Map<String, String> properties) {, +			applyNamingStrategy(properties, "hibernate.implicit_naming_strategy",, +					this.implicitStrategy, DEFAULT_IMPLICIT_STRATEGY);, +			applyNamingStrategy(properties, "hibernate.physical_naming_strategy",, +					this.physicalStrategy, DEFAULT_PHYSICAL_STRATEGY);, +		private void applyNamingStrategy(Map<String, String> properties, String key,, +				String strategy, String defaultStrategy) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import static org.mockito.Mockito.mock;, +			return mock(TransactionManager.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +	public void noCustomNamingStrategy() throws Exception {, +		JpaProperties properties = load();, +		JpaProperties properties = load(, +		JpaProperties properties = load(, +	public void useNewIdGeneratorMappingsDefault() throws Exception {, +		JpaProperties properties = load();, +		JpaProperties properties = load(, +	private JpaProperties load(String... environment) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfigurationWithHibernateValidatorMissingElImplTests.java, +@ClassPathExclusions({ "tomcat-embed-el-*.jar", "el-api-*.jar" }), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		 * When not specified will default to "false" for backwards compatibility., +			getNaming().applyNamingStrategies(result);, +			else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {, +		 * Fully qualfied name of the implicit naming strategy., +		 * Fully qualified name of the physical naming strategy., +		private void applyNamingStrategies(Map<String, String> properties) {, +			applyNamingStrategy(properties, "hibernate.implicit_naming_strategy",, +					this.implicitStrategy, DEFAULT_IMPLICIT_STRATEGY);, +			applyNamingStrategy(properties, "hibernate.physical_naming_strategy",, +					this.physicalStrategy, DEFAULT_PHYSICAL_STRATEGY);, +		private void applyNamingStrategy(Map<String, String> properties, String key,, +				String strategy, String defaultStrategy) {]