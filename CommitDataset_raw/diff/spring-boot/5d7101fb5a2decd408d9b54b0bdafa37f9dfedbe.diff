[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +import org.springframework.boot.TestUtils;, +import org.springframework.security.web.FilterChainProxy;, +		// 4 for static resources, one for management endpoints and one for the rest, +		assertEquals(6, this.context.getBean(FilterChainProxy.class).getFilterChains(), +				.size());, +	}, +, +	@Test, +	public void testDisableIgnoredStaticApplicationPaths() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,, +				EndpointAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		TestUtils.addEnviroment(this.context, "security.ignored:");, +		this.context.refresh();, +		// Just the application and\ management endpoints now, +		assertEquals(2, this.context.getBean(FilterChainProxy.class).getFilterChains(), +				.size());, +	}, +, +	@Test, +	public void testDisableBasicAuthOnApplicationPaths() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,, +				EndpointAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		TestUtils.addEnviroment(this.context, "security.basic.enabled:false");, +		this.context.refresh();, +		// Just the management endpoints now, +		assertEquals(1, this.context.getBean(FilterChainProxy.class).getFilterChains(), +				.size());]