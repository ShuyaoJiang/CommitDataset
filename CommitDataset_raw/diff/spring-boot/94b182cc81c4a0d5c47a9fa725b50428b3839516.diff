[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	@Value("${spring.jpa.hibernate.namingstrategy:org.hibernate.cfg.ImprovedNamingStrategy}"), +	private String namingStrategy;, +, +		if (StringUtils.hasLength(this.namingStrategy)) {, +			properties.put("hibernate.ejb.naming_strategy", this.namingStrategy);, +		}, +		else {, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	@Value("${spring.jpa.hibernate.namingstrategy:org.hibernate.cfg.ImprovedNamingStrategy}"), +	private String namingStrategy;, +, +		if (StringUtils.hasLength(this.namingStrategy)) {, +			properties.put("hibernate.ejb.naming_strategy", this.namingStrategy);, +		}, +		else {, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void testCustomNamingStrategy() throws Exception {, +		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +		TestUtils, +				.addEnviroment(context,, +						"spring.jpa.hibernate.namingstrategy:org.hibernate.cfg.EJB3NamingStrategy");, +		context.register(TestConfiguration.class,, +				ComponentScanDetectorConfiguration.class,, +				EmbeddedDatabaseConfiguration.class, HibernateJpaAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context = context;, +		this.context.refresh();, +		LocalContainerEntityManagerFactoryBean bean = this.context, +				.getBean(LocalContainerEntityManagerFactoryBean.class);, +		String actual = (String) bean.getJpaPropertyMap().get(, +				"hibernate.ejb.naming_strategy");, +		assertThat(actual, equalTo("org.hibernate.cfg.EJB3NamingStrategy"));, +	}, +]