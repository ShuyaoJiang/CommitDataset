[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory;, +	@Autowired(required = false), +	private ReservoirFactory reservoirFactory;, +, +		if (this.reservoirFactory == null) {, +		else {, +			return new DropwizardMetricServices(metricRegistry, this.reservoirFactory);, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory;, +	@Autowired(required = false), +	private ReservoirFactory reservoirFactory;, +, +		if (this.reservoirFactory == null) {, +		else {, +			return new DropwizardMetricServices(metricRegistry, this.reservoirFactory);, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java, +import com.codahale.metrics.Metric;, +import com.codahale.metrics.Reservoir;, +	private ReservoirFactory reservoirFactory;, +, +	/**, +	 * Create a new {@link DropwizardMetricServices} instance., +	 * @param registry the underlying metric registry, +	 * @param reservoirFactory the factory that instantiates the {@link Reservoir} that, +	 *                            will be used on Timers and Histograms, +	 */, +	public DropwizardMetricServices(MetricRegistry registry,, +			ReservoirFactory reservoirFactory) {, +		this.registry = registry;, +		this.reservoirFactory = reservoirFactory;, +	}, +, +			Histogram metric = registerHistogram(name);, +			Timer metric = registerTimer(name);, +	private Histogram registerHistogram(String name) {, +		if (this.reservoirFactory == null) {, +			return this.registry.histogram(name);, +		}, +		else {, +			Histogram histogram = new Histogram(this.reservoirFactory.getObject());, +			return getOrAddMetric(name, histogram);, +		}, +	}, +, +	private Timer registerTimer(String name) {, +		if (this.reservoirFactory == null) {, +			return this.registry.timer(name);, +		}, +		else {, +			Timer timer = new Timer(this.reservoirFactory.getObject());, +			return getOrAddMetric(name, timer);, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +	private <T extends Metric> T getOrAddMetric(String name, T newMetric) {, +		Metric metric = this.registry.getMetrics().get(name);, +		if (metric == null) {, +			return this.registry.register(name, newMetric);, +		}, +		else {, +			if (metric.getClass().equals(newMetric.getClass())) {, +				return (T) metric;, +			}, +			else {, +				throw new IllegalArgumentException(, +						name + " is already used for a different type of metric");, +			}, +		}, +	}, +, +	void setReservoirFactory(ReservoirFactory reservoirFactory) {, +		this.reservoirFactory = reservoirFactory;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory;, +	@Autowired(required = false), +	private ReservoirFactory reservoirFactory;, +, +		if (this.reservoirFactory == null) {, +		else {, +			return new DropwizardMetricServices(metricRegistry, this.reservoirFactory);, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java, +import com.codahale.metrics.Metric;, +import com.codahale.metrics.Reservoir;, +	private ReservoirFactory reservoirFactory;, +, +	/**, +	 * Create a new {@link DropwizardMetricServices} instance.]