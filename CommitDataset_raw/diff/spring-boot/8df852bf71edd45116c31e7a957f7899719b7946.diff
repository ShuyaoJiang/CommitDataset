[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +						"AutoConfigureOrder", AutoConfigureOrder.DEFAULT_ORDER);, +			return (attributes == null ? AutoConfigureOrder.DEFAULT_ORDER, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +						"AutoConfigureOrder", AutoConfigureOrder.DEFAULT_ORDER);, +			return (attributes == null ? AutoConfigureOrder.DEFAULT_ORDER, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureOrder.java, + * Copyright 2012-2017 the original author or authors., +	int DEFAULT_ORDER = 0;, +, +	 * The order value. Default is {@code 0}., +	int value() default DEFAULT_ORDER;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +						"AutoConfigureOrder", AutoConfigureOrder.DEFAULT_ORDER);, +			return (attributes == null ? AutoConfigureOrder.DEFAULT_ORDER, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureOrder.java, + * Copyright 2012-2017 the original author or authors., +	int DEFAULT_ORDER = 0;, +, +	 * The order value. Default is {@code 0}., +	int value() default DEFAULT_ORDER;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationSorterTests.java, + * @author Andy Wilkinson, +	private static final String DEFAULT = OrderUnspecified.class.getName();, +, +				.getInPriorityOrder(Arrays.asList(LOWEST, HIGHEST, DEFAULT));, +		assertThat(actual).containsExactly(HIGHEST, DEFAULT, LOWEST);, +	@AutoConfigureOrder, +	public static class OrderUnspecified {, +, +	}, +]