[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;, +import org.springframework.boot.bind.PropertySourcesPropertyValues;, +import org.springframework.boot.bind.RelaxedDataBinder;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.context.annotation.DeferredImportSelector;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.support.SpringFactoriesLoader;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.classreading.CachingMetadataReaderFactory;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * {@link DeferredImportSelector} to handle {@link EnableAutoConfiguration, + * auto-configuration}. This class can also be subclassed if a custom variant of, + * {@link EnableAutoConfiguration @EnableAutoConfiguration}. is needed., + *, + * @author Phillip Webb, + * @author Andy Wilkinson, + * @author Stephane Nicoll, + * @author Madhura Bhave, + * @since 1.3.0, + * @see EnableAutoConfiguration, + */, +public class AutoConfigurationImportSelector, +		implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware,, +		BeanFactoryAware, EnvironmentAware, Ordered {, +, +	private static final String[] NO_IMPORTS = {};, +, +	private ConfigurableListableBeanFactory beanFactory;, +, +	private Environment environment;, +, +	private ClassLoader beanClassLoader;, +, +	private ResourceLoader resourceLoader;, +, +	@Override, +	public String[] selectImports(AnnotationMetadata metadata) {, +		if (!isEnabled(metadata)) {, +			return NO_IMPORTS;, +		}, +		try {, +			AnnotationAttributes attributes = getAttributes(metadata);, +			List<String> configurations = getCandidateConfigurations(metadata,, +					attributes);, +			configurations = removeDuplicates(configurations);, +			Set<String> exclusions = getExclusions(metadata, attributes);, +			checkExcludedClasses(configurations, exclusions);, +			configurations.removeAll(exclusions);, +			configurations = sort(configurations);, +			recordWithConditionEvaluationReport(configurations, exclusions);, +			return configurations.toArray(new String[configurations.size()]);, +		}, +		catch (IOException ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +]