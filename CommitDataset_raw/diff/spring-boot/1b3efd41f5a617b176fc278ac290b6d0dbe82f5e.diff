[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import net.sf.ehcache.CacheManager;, + * @author Stephane Nicoll, +@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class), +	public EhCacheCacheManager cacheManager(CacheManager ehCacheCacheManager) {, +		return new EhCacheCacheManager(ehCacheCacheManager);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public CacheManager ehCacheCacheManager() {, +			return EhCacheManagerUtils.buildCacheManager(location);, +		return EhCacheManagerUtils.buildCacheManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import net.sf.ehcache.CacheManager;, + * @author Stephane Nicoll, +@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class), +	public EhCacheCacheManager cacheManager(CacheManager ehCacheCacheManager) {, +		return new EhCacheCacheManager(ehCacheCacheManager);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public CacheManager ehCacheCacheManager() {, +			return EhCacheManagerUtils.buildCacheManager(location);, +		return EhCacheManagerUtils.buildCacheManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance hazelcastInstance) {, +		return new HazelcastCacheManager(hazelcastInstance);, +	@Bean, +	@ConditionalOnMissingBean, +	public HazelcastInstance hazelcastInstance() throws IOException {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import net.sf.ehcache.CacheManager;, + * @author Stephane Nicoll, +@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class), +	public EhCacheCacheManager cacheManager(CacheManager ehCacheCacheManager) {, +		return new EhCacheCacheManager(ehCacheCacheManager);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public CacheManager ehCacheCacheManager() {, +			return EhCacheManagerUtils.buildCacheManager(location);, +		return EhCacheManagerUtils.buildCacheManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance hazelcastInstance) {, +		return new HazelcastCacheManager(hazelcastInstance);, +	@Bean, +	@ConditionalOnMissingBean, +	public HazelcastInstance hazelcastInstance() throws IOException {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	public JCacheCacheManager cacheManager(CacheManager jCacheCacheManager) {, +		return new JCacheCacheManager(jCacheCacheManager);, +	@Bean, +	@ConditionalOnMissingBean, +	public CacheManager jCacheCacheManager() throws IOException {, +		CacheManager jCacheCacheManager = cachingProvider.getCacheManager();, +		List<String> cacheNames = this.cacheProperties.getCacheNames();, +		if (!CollectionUtils.isEmpty(cacheNames)) {, +			for (String cacheName : cacheNames) {, +				jCacheCacheManager.createCache(cacheName, getDefaultCacheConfiguration());, +			}, +		}, +		customize(jCacheCacheManager);, +		return jCacheCacheManager;, +	 * Determine if JCache is available. This either kick in if a provider is available, +	 * as defined per {@link JCacheProviderAvailableCondition} or if a {@link CacheManager}, +	 * has already been defined., +	 */, +	@Order(Ordered.LOWEST_PRECEDENCE), +	static class JCacheAvailableCondition extends AnyNestedCondition {, +, +		public JCacheAvailableCondition() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@Conditional(JCacheProviderAvailableCondition.class), +		static class JCacheProvider {}, +, +		@ConditionalOnSingleCandidate(CacheManager.class), +		static class CustomJCacheCacheManager {}, +, +	}, +, +	/**, +	 * Determine if a JCache provider is available. This either kick in if a default, +	static class JCacheProviderAvailableCondition extends SpringBootCondition {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import net.sf.ehcache.CacheManager;, + * @author Stephane Nicoll, +@ConditionalOnMissingBean(org.springframework.cache.CacheManager.class), +	public EhCacheCacheManager cacheManager(CacheManager ehCacheCacheManager) {, +		return new EhCacheCacheManager(ehCacheCacheManager);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean]