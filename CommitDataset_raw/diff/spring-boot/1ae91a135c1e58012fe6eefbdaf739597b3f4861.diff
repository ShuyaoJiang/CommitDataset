[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +		return this.multipartProperties.createMultipartConfig();, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +		return this.multipartProperties.createMultipartConfig();, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, +import javax.servlet.MultipartConfigElement;, +, +import org.springframework.boot.context.embedded.MultipartConfigFactory;, +import org.springframework.util.StringUtils;, + * Properties to be used in configuring a {@link MultipartConfigElement}., + * <ul>, + * <li>{@literal multipart.location} specifies the directory where files will be stored., + * The default is "". A common value is to use the system's temporary directory, which can, + * be obtained.</li>, + * <li>{@literal multipart.maxFileSize} specifies the maximum size permitted for uploaded, + * files. The default is 1Mb.</li>, + * <li>, + * {@literal multipart.maxRequestSize} specifies the maximum size allowed for, + * {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>, + * {@literal multipart.fileSizeThreshold} specifies the size threshold after which files, + * will be written to disk. Default is 0, which means that the file will be written to, + * disk immediately.</li>, + * </ul>, + * <p>, + * These properties are ultimately passed through, + * {@link org.springframework.boot.context.embedded.MultipartConfigFactory} which means, + * you may specify the values using {@literal long} values or using more readable, + * {@literal String} variants that accept {@literal Kb} or {@literal Mb} suffixes., + * @since 1.1.0, +	private String location;, +, +	private String fileSizeThreshold = "0";, +		return this.maxFileSize;, +		return this.maxRequestSize;, +		return this.fileSizeThreshold;, +		return this.location;, +	/**, +	 * Create a new {@link MultipartConfigElement} using the, +	 * @return a new {@link MultipartConfigElement} configured using there properties, +	 */, +	public MultipartConfigElement createMultipartConfig() {, +		MultipartConfigFactory factory = new MultipartConfigFactory();, +		if (StringUtils.hasText(this.fileSizeThreshold)) {, +			factory.setFileSizeThreshold(this.fileSizeThreshold);, +		}, +		if (StringUtils.hasText(this.location)) {, +			factory.setLocation(this.location);, +		}, +		if (StringUtils.hasText(this.maxRequestSize)) {, +			factory.setMaxRequestSize(this.maxRequestSize);, +		}, +		if (StringUtils.hasText(this.maxFileSize)) {, +			factory.setMaxFileSize(this.maxFileSize);, +		}, +		return factory.createMultipartConfig();, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +		return this.multipartProperties.createMultipartConfig();, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, +import javax.servlet.MultipartConfigElement;, +, +import org.springframework.boot.context.embedded.MultipartConfigFactory;, +import org.springframework.util.StringUtils;, + * Properties to be used in configuring a {@link MultipartConfigElement}., + * <ul>, + * <li>{@literal multipart.location} specifies the directory where files will be stored., + * The default is "". A common value is to use the system's temporary directory, which can, + * be obtained.</li>, + * <li>{@literal multipart.maxFileSize} specifies the maximum size permitted for uploaded, + * files. The default is 1Mb.</li>, + * <li>, + * {@literal multipart.maxRequestSize} specifies the maximum size allowed for, + * {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>, + * {@literal multipart.fileSizeThreshold} specifies the size threshold after which files, + * will be written to disk. Default is 0, which means that the file will be written to, + * disk immediately.</li>, + * </ul>, + * <p>, + * These properties are ultimately passed through, + * {@link org.springframework.boot.context.embedded.MultipartConfigFactory} which means, + * you may specify the values using {@literal long} values or using more readable, + * {@literal String} variants that accept {@literal Kb} or {@literal Mb} suffixes., + * @since 1.1.0, +	private String location;, +, +	private String fileSizeThreshold = "0";, +		return this.maxFileSize;, +		return this.maxRequestSize;, +		return this.fileSizeThreshold;, +		return this.location;, +	/**, +	 * Create a new {@link MultipartConfigElement} using the, +	 * @return a new {@link MultipartConfigElement} configured using there properties, +	 */, +	public MultipartConfigElement createMultipartConfig() {]