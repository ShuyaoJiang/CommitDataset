[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, + * @author Eddú Meléndez, +			container.setServerHeader(this.server.getServerHeader());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, + * @author Eddú Meléndez, +			container.setServerHeader(this.server.getServerHeader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Value to use for the server header., +	 */, +	private String serverHeader;, +, +		container.setServerHeader(getServerHeader());, +	public String getServerHeader() {, +		return this.serverHeader;, +	}, +, +	public void setServerHeader(String serverHeader) {, +		this.serverHeader = serverHeader;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, + * @author Eddú Meléndez, +			container.setServerHeader(this.server.getServerHeader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Value to use for the server header., +	 */, +	private String serverHeader;, +, +		container.setServerHeader(getServerHeader());, +	public String getServerHeader() {, +		return this.serverHeader;, +	}, +, +	public void setServerHeader(String serverHeader) {, +		this.serverHeader = serverHeader;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +import static org.junit.Assert.assertNull;, + * @author Eddú Meléndez, +	public void testServerHeaderDefault() throws Exception {, +		assertNull(this.properties.getServerHeader());, +	}, +, +	@Test, +	public void testServerHeader() throws Exception {, +		RelaxedDataBinder binder = new RelaxedDataBinder(this.properties, "server");, +		binder.bind(new MutablePropertyValues(, +				Collections.singletonMap("server.server-header", "Custom Server")));, +		assertEquals("Custom Server", this.properties.getServerHeader());, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, + * @author Eddú Meléndez, +			container.setServerHeader(this.server.getServerHeader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Value to use for the server header., +	 */, +	private String serverHeader;, +, +		container.setServerHeader(getServerHeader());, +	public String getServerHeader() {, +		return this.serverHeader;, +	}, +, +	public void setServerHeader(String serverHeader) {, +		this.serverHeader = serverHeader;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +import static org.junit.Assert.assertNull;, + * @author Eddú Meléndez, +	public void testServerHeaderDefault() throws Exception {, +		assertNull(this.properties.getServerHeader());, +	}, +, +	@Test, +	public void testServerHeader() throws Exception {, +		RelaxedDataBinder binder = new RelaxedDataBinder(this.properties, "server");, +		binder.bind(new MutablePropertyValues(, +				Collections.singletonMap("server.server-header", "Custom Server")));, +		assertEquals("Custom Server", this.properties.getServerHeader());, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.server-header= # The value sent in the server response header, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, + * @author Eddú Meléndez, +			container.setServerHeader(this.server.getServerHeader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Eddú Meléndez, +	/**]