[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (this.properties.getDatabase() != null) {, +			adapter.setDatabase(this.properties.getDatabase());, +		}, +		if (this.properties.getDatabasePlatform() != null) {, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (this.properties.getDatabase() != null) {, +			adapter.setDatabase(this.properties.getDatabase());, +		}, +		if (this.properties.getDatabasePlatform() != null) {, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, + * Copyright 2012-2019 the original author or authors., +	 * @deprecated since 2.2.0 in favor of letting the JPA container detect the database, +	 * to use., +	@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (this.properties.getDatabase() != null) {, +			adapter.setDatabase(this.properties.getDatabase());, +		}, +		if (this.properties.getDatabasePlatform() != null) {, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, + * Copyright 2012-2019 the original author or authors., +	 * @deprecated since 2.2.0 in favor of letting the JPA container detect the database, +	 * to use., +	@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, +	public void defaultDatabaseIsSet() {, +					assertThat(database).isEqualTo(Database.DEFAULT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (this.properties.getDatabase() != null) {, +			adapter.setDatabase(this.properties.getDatabase());, +		}, +		if (this.properties.getDatabasePlatform() != null) {, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, + * Copyright 2012-2019 the original author or authors., +	 * @deprecated since 2.2.0 in favor of letting the JPA container detect the database, +	 * to use., +	@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, +	public void defaultDatabaseIsSet() {, +					assertThat(database).isEqualTo(Database.DEFAULT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateDefaultDdlAutoProviderTests.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (this.properties.getDatabase() != null) {, +			adapter.setDatabase(this.properties.getDatabase());, +		}, +		if (this.properties.getDatabasePlatform() != null) {, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, + * Copyright 2012-2019 the original author or authors., +	 * @deprecated since 2.2.0 in favor of letting the JPA container detect the database, +	 * to use., +	@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, +	public void defaultDatabaseIsSet() {, +					assertThat(database).isEqualTo(Database.DEFAULT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateDefaultDdlAutoProviderTests.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import java.util.function.Consumer;, +import org.hibernate.dialect.H2Dialect;, +import org.springframework.orm.jpa.JpaVendorAdapter;, +import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;, +	public void hibernateDialectIsNotSetByDefault() {, +		contextRunner().run(assertJpaVendorAdapter(, +				(adapter) -> assertThat(adapter.getJpaPropertyMap()), +						.doesNotContainKeys("hibernate.dialect")));, +	}, +, +	@Test, +	public void hibernateDialectIsSetWhenDatabaseIsSet() {, +		contextRunner().withPropertyValues("spring.jpa.database=H2"), +				.run(assertJpaVendorAdapter(, +						(adapter) -> assertThat(adapter.getJpaPropertyMap()).contains(, +								entry("hibernate.dialect", H2Dialect.class.getName()))));, +	}, +, +	@Test, +	public void hibernateDialectIsSetWhenDatabasePlatformIsSet() {, +		String databasePlatform = TestH2Dialect.class.getName();, +		contextRunner(), +				.withPropertyValues("spring.jpa.database-platform=" + databasePlatform), +				.run(assertJpaVendorAdapter(, +						(adapter) -> assertThat(adapter.getJpaPropertyMap()), +								.contains(entry("hibernate.dialect", databasePlatform))));, +	}, +, +	private ContextConsumer<AssertableApplicationContext> assertJpaVendorAdapter(, +			Consumer<HibernateJpaVendorAdapter> adapter) {, +		return (context) -> {, +			assertThat(context).hasSingleBean(JpaVendorAdapter.class);, +			assertThat(context).hasSingleBean(HibernateJpaVendorAdapter.class);, +			adapter.accept(context.getBean(HibernateJpaVendorAdapter.class));, +		};, +	}]