[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +The buildpack wraps your deployed code in whatever is needed to _start_ your application:, +it might be a JDK and a call to `java`, it might be an embedded web server, or it might be, +a full-fledged application server. A buildpack is pluggable, but ideally you should be, +able to get by with as few customizations to it as possible. This reduces the footprint of, +unctionality that is not under your control. It minimizes divergence between development, +and production environments., +specified. The Cloud Foundry https://github.com/cloudfoundry/java-buildpack[Java, +buildpack] has excellent support for Spring applications, including Spring Boot. You can, +deploy stand-alone executable jar applications as well as traditional `.war` packaged, +command line tool], deploy your application by using the `cf push` command, substituting, +the path to your compiled `.jar`. Be sure to have, +http://docs.cloudfoundry.org/devguide/installcf/whats-new-v6.html#login[logged in with, +your `cf` command line client] before pushing an application. The following line shows, +using the `cf push` command to deploy an application:, +NOTE: In the preceding example, we substitute `acloudyspringtime` for whatever value you, +give `cf` as the name of your application., +`$VCAP_SERVICES`). This architecture decision is due to Cloud Foundry's polyglot (any, +language and platform can be supported as a buildpack) nature. Process-scoped environment, +variables are language agnostic., +extracts them and flattens the data into properties that can be accessed through Spring's, +`Environment` abstraction, as shown in the following example:, +This should be everything you need. The most common deployment workflow for Heroku, +deployments is to `git push` the code to production, as shown in the following example:, +https://www.openshift.com/[OpenShift] is the Red Hat public (and enterprise) extension of, +the Kubernetes container orchestration platform.  Similarly to Kubernetes, OpenShift has, +many options for installing Spring Boot based applications., +OpenShift has many resources describing how to deploy Spring Boot applications, which, +include:, +As described in the official, +http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html[Elastic, +This option applies to Spring Boot projects that produce a war file. There is no any, +special configuration required. You need only follow the official guide., +http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-create-wizard.html#environments-create-wizard-capacity[the, +Amazon documentation]. You can also create single instance environments by using the CLI, +and the following command:, +This is one of the easiest ways to get to AWS, but there are more things to cover, such as, +how to integrate Elastic Beanstalk into any CI / CD tool, use the Elastic Beanstalk Maven, +plugin instead of the CLI, and others. There is a, +https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/, +[blog post] covering these topics more in detail., +TIP: By default, Boxfuse activates a Spring profile named `boxfuse` on startup. If your, +executable jar or war contains an, +[`application-boxfuse.properties`] file, Boxfuse bases its configuration based on the, +properties it contains., +At this point, `boxfuse` creates an image for your application, uploads it, and configures, +and starts the necessary resources on AWS resulting in output similar to the following, +example:, +You can deploy the app (for example, with a Maven plugin) by adding the project ID to the, +build configuration, as shown in the following example:, +In additional to running Spring Boot applications by using `java -jar`, it is also, +possible to make fully executable applications for Unix systems. A fully executable jar, +can be executed like any other executable binary or it can be, +<<deployment-service,registered with `init.d` or `systemd`>>. This makes it very easy to, +install and manage Spring Boot applications in common production environments., +WARNING: Fully executable jars work by embedding an extra script at the front of the file., +Currently, some tools do not accept this format, so you may not always be able to use this, +technique. For example, `jar -xf` may silently fail to extract a jar or war that has been, +made fully executable. It is recommended that you only make your jar or war fully, +executable if you intend to execute it directly, rather than running it with `java -jar`, +or deploying it to a servlet container., +You can then run your application by typing `./my-application.jar` (where `my-application`, +is the name of your artifact). The directory containing the jar is used as your, +application's working directory., +The default script supports most Linux distributions and is tested on CentOS and Ubuntu., +Other platforms, such as OS X and FreeBSD, require the use of a custom, +Spring Boot application can be easily started as Unix/Linux services by using either, +`init.d` or `systemd`., +If you configured Spring Boot's Maven or Gradle plugin to generate a <<deployment-install,, +fully executable jar>>, and you do not use a custom `embeddedLaunchScript`, your, +application can be used as an `init.d` service. To do so, symlink the jar to `init.d` to, +support the standard `start`, `stop`, `restart` and `status` commands., +NOTE: The following is a set of guidelines on how to secure a Spring Boot application that, +runs as an init.d service. It is not intended to be an exhaustive list of everything that, +should be done to harden an application and the environment in which it runs., +the default executable script runs the application as the user who owns the jar file. You, +should never run a Spring Boot application as `root`, so your application's jar file, +should never be owned by root. Instead, create a specific user to run your application and, +use `chown` to make it the owner of the jar file, as shown in the following example:, +Second, you should also take steps to limit the damage if your application or the account, +that's running it is compromised. If an attacker does gain access, they could make the jar, +file writable and change its contents. One way to protect against this is to make it, +immutable by using `chattr`, as shown in the following example:, +startup, the `.conf` file is read and evaluated by the root user. It should be secured, +accordingly. Use `chmod` so that the file can only be read by the owner and use `chown` to, +make root the owner, as shown in the following example:, +`systemd` is the successor of the System V init system and is now being used by many, +modern Linux distributions. Although you can continue to use `init.d` scripts with, +`systemd`, it is also possible to launch Spring Boot applications by using `systemd`, +'`service`' scripts., +Spring Boot application as a `systemd` service, create a script named `myapp.service` and, +place it in `/etc/systemd/system` directory. The following script offers an example:, +NOTE: The `ExecStart` field does not declare the script action command, which means that, +the `run` command is used by default., +Note that, unlike when running as an `init.d` service, the user that runs the application,, +the PID file, and the console log file are managed by `systemd` itself and therefore must, +be configured by using appropriate fields in the '`service`' script. Consult the, +customized in a number of ways. For most people, using the default script along with a few, +customizations is usually enough. If you find you cannot customize something that you need, +to, you can always use the `embeddedLaunchScript` option to write your own file entirely.]