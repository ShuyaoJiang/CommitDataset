[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean secure = (security != null && security.isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean secure = (security != null && security.isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +		return !this.secure && !Boolean.TRUE.equals(sensitive);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean secure = (security != null && security.isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +		return !this.secure && !Boolean.TRUE.equals(sensitive);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.junit.Assert.assertNull;, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof Health);, +		assertTrue(((Health) result).getStatus() == Status.UP);, +		assertEquals("bar", ((Health) result).getDetails().get("foo"));, +	}, +, +	@Test, +	public void unsensitiveAnonymousAccessRestricted() {, +		this.environment.getPropertySources().addLast(NON_SENSITIVE);, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof Health);, +		assertTrue(((Health) result).getStatus() == Status.UP);, +		assertNull(((Health) result).getDetails().get("foo"));, +	}, +, +	@Test, +	public void unsecureUnsensitiveAnonymousAccessUnrestricted() {, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean secure = (security != null && security.isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +		return !this.secure && !Boolean.TRUE.equals(sensitive);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.junit.Assert.assertNull;, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof Health);, +		assertTrue(((Health) result).getStatus() == Status.UP);, +		assertEquals("bar", ((Health) result).getDetails().get("foo"));, +	}, +, +	@Test, +	public void unsensitiveAnonymousAccessRestricted() {, +		this.environment.getPropertySources().addLast(NON_SENSITIVE);, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof Health);, +		assertTrue(((Health) result).getStatus() == Status.UP);, +		assertNull(((Health) result).getDetails().get("foo"));, +	}, +, +	@Test, +	public void unsecureUnsensitiveAnonymousAccessUnrestricted() {, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/test/java/sample/actuator/log4j/SampleActuatorApplicationTests.java, +import static org.junit.Assert.assertNotNull;, +				"http://localhost:" + this.port, Map.class);, +	@Test, +	public void testHealth() throws Exception {, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(, +				"http://localhost:" + this.port + "/health", Map.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		@SuppressWarnings("unchecked"), +		Map<String, Object> body = entity.getBody();, +		assertNotNull(body.get("diskSpace"));, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean secure = (security != null && security.isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +		return !this.secure && !Boolean.TRUE.equals(sensitive);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.junit.Assert.assertNull;, +		this.mvc = new HealthMvcEndpoint(this.endpoint, false);, +		this.mvc.setEnvironment(this.environment);, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof Health);, +		assertTrue(((Health) result).getStatus() == Status.UP);, +		assertEquals("bar", ((Health) result).getDetails().get("foo"));, +	}, +, +	@Test, +	public void unsensitiveAnonymousAccessRestricted() {]