[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +		addDownloadingLogSupport(ivy);, +		setupResolver(settings);, +	}, +	private void addDownloadingLogSupport(Ivy ivy) {, +	@SuppressWarnings("unchecked"), +	private void setupResolver(IvySettings settings) {, +		ChainResolver grapesResolver = (ChainResolver) settings, +				.getResolver("downloadGrapes");, +, +		SpringBootResolver springBootResolver = new SpringBootResolver(, +				grapesResolver.getResolvers());, +		springBootResolver.setSettings(settings);, +		springBootResolver.setName("springBoot");, +, +		springBootResolver.addSpringSnapshotResolver(newResolver("spring-snapshot",, +				"http://repo.springsource.org/snapshot"));, +		springBootResolver.addSpringSnapshotResolver(newResolver("spring-milestone",, +, +		grapesResolver.getResolvers().clear();, +		grapesResolver.getResolvers().add(springBootResolver);, +	 * {@link DependencyResolver} that is optimized for Spring Boot., +	 */, +	private static class SpringBootResolver extends ChainResolver {, +, +		private static final Object SPRING_BOOT_GROUP_ID = "org.springframework.boot";, +, +		private static final String STARTER_PREFIX = "spring-boot-starter";, +, +		private static final Object SOURCE_TYPE = "source";, +, +		private static final Object JAVADOC_TYPE = "javadoc";, +, +		private static final Set<String> POM_ONLY_DEPENDENCIES;, +		static {, +			Set<String> dependencies = new HashSet<String>();, +			dependencies.add("spring-boot-dependencies");, +			dependencies.add("spring-boot-parent");, +			dependencies.add("spring-boot-starters");, +			POM_ONLY_DEPENDENCIES = Collections.unmodifiableSet(dependencies);, +		}, +, +		private final List<DependencyResolver> springSnapshotResolvers = new ArrayList<DependencyResolver>();, +, +		public SpringBootResolver(List<DependencyResolver> resolvers) {, +			for (DependencyResolver resolver : resolvers) {, +				add(resolver);, +			}, +		}, +, +		public void addSpringSnapshotResolver(DependencyResolver resolver) {, +			add(resolver);, +			this.springSnapshotResolvers.add(resolver);, +		}, +, +		@Override, +		public ArtifactOrigin locate(Artifact artifact) {, +			if (isUnresolvable(artifact)) {, +				return null;, +			}, +			if (isSpringSnapshot(artifact)) {, +				for (DependencyResolver resolver : this.springSnapshotResolvers) {, +					ArtifactOrigin origin = resolver.locate(artifact);, +					if (origin != null) {, +						return origin;, +					}, +				}, +			}, +			return super.locate(artifact);, +		}, +, +		private boolean isUnresolvable(Artifact artifact) {, +			try {, +				ModuleId moduleId = artifact.getId().getArtifactId().getModuleId();, +				if (SPRING_BOOT_GROUP_ID.equals(moduleId.getOrganisation())) {, +					// Skip any POM only deps if they are not pom ext, +					if (POM_ONLY_DEPENDENCIES.contains(moduleId.getName()), +							&& !("pom".equalsIgnoreCase(artifact.getId().getExt()))) {, +						return true;, +					}, +, +					// Skip starter javadoc and source, +					if (moduleId.getName().startsWith(STARTER_PREFIX), +							&& (SOURCE_TYPE.equals(artifact.getType()) || JAVADOC_TYPE, +									.equals(artifact.getType()))) {, +						return true;, +					}, +				}, +				return false;, +			}, +			catch (Exception ex) {, +				return false;, +			}, +		}, +]