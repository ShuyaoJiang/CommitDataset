[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final QualifierDefinition qualifier;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware,, +			QualifierDefinition qualifier) {, +		this.qualifier = qualifier;, +	/**, +	 * Return the qualifier or {@code null}., +	 * @return the qualifier, +	 */, +	public QualifierDefinition getQualifier() {, +		return this.qualifier;, +	}, +, +		result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.qualifier);, +		result &= ObjectUtils.nullSafeEquals(this.qualifier, other.qualifier);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final QualifierDefinition qualifier;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware,, +			QualifierDefinition qualifier) {, +		this.qualifier = qualifier;, +	/**, +	 * Return the qualifier or {@code null}., +	 * @return the qualifier, +	 */, +	public QualifierDefinition getQualifier() {, +		return this.qualifier;, +	}, +, +		result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.qualifier);, +		result &= ObjectUtils.nullSafeEquals(this.qualifier, other.qualifier);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +			MockDefinition definition = new MockDefinition(annotation.name(), typeToMock,, +					annotation.extraInterfaces(), annotation.answer(),, +					annotation.serializable(), annotation.reset(),, +					QualifierDefinition.forElement(element));, +			addDefinition(element, definition, "mock");, +			SpyDefinition definition = new SpyDefinition(annotation.name(), typeToSpy,, +					annotation.reset(), annotation.proxyTargetAware(),, +					QualifierDefinition.forElement(element));, +			addDefinition(element, definition, "spy");, +	private void addDefinition(AnnotatedElement element, Definition definition,, +			String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final QualifierDefinition qualifier;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware,, +			QualifierDefinition qualifier) {, +		this.qualifier = qualifier;, +	/**, +	 * Return the qualifier or {@code null}., +	 * @return the qualifier, +	 */, +	public QualifierDefinition getQualifier() {, +		return this.qualifier;, +	}, +, +		result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.qualifier);, +		result &= ObjectUtils.nullSafeEquals(this.qualifier, other.qualifier);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +			MockDefinition definition = new MockDefinition(annotation.name(), typeToMock,, +					annotation.extraInterfaces(), annotation.answer(),, +					annotation.serializable(), annotation.reset(),, +					QualifierDefinition.forElement(element));, +			addDefinition(element, definition, "mock");, +			SpyDefinition definition = new SpyDefinition(annotation.name(), typeToSpy,, +					annotation.reset(), annotation.proxyTargetAware(),, +					QualifierDefinition.forElement(element));, +			addDefinition(element, definition, "spy");, +	private void addDefinition(AnnotatedElement element, Definition definition,, +			String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(String name, ResolvableType typeToMock, Class<?>[] extraInterfaces,, +			Answers answer, boolean serializable, MockReset reset,, +			QualifierDefinition qualifier) {, +		super(name, reset, false, qualifier);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final QualifierDefinition qualifier;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware,, +			QualifierDefinition qualifier) {, +		this.qualifier = qualifier;, +	/**, +	 * Return the qualifier or {@code null}., +	 * @return the qualifier, +	 */, +	public QualifierDefinition getQualifier() {, +		return this.qualifier;, +	}, +, +		result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.qualifier);, +		result &= ObjectUtils.nullSafeEquals(this.qualifier, other.qualifier);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +			MockDefinition definition = new MockDefinition(annotation.name(), typeToMock,, +					annotation.extraInterfaces(), annotation.answer(),, +					annotation.serializable(), annotation.reset(),, +					QualifierDefinition.forElement(element));, +			addDefinition(element, definition, "mock");, +			SpyDefinition definition = new SpyDefinition(annotation.name(), typeToSpy,]