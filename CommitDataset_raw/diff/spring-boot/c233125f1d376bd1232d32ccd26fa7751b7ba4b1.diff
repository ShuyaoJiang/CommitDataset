[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +		private static final Log logger = LogFactory.getLog(SpelView.class);, +, +			if (response.isCommitted()) {, +				String message = getMessage(model);, +				logger.error(message);, +				return;, +			}, +			PlaceholderResolver resolver = new ExpressionResolver(getExpressions(), model);, +		private String getMessage(Map<String, ?> model) {, +			StringBuilder builder = new StringBuilder();, +			builder.append("Cannot render error page for request ["), +					.append(model.get("path")).append("]");, +			if (model.get("message") != null) {, +				builder.append(" and exception [").append(model.get("message")), +						.append("]");, +			}, +			return builder.append("] as the response has already been committed."), +					.append("As a result, the response may have the wrong status code."), +					.toString();, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +		private static final Log logger = LogFactory.getLog(SpelView.class);, +, +			if (response.isCommitted()) {, +				String message = getMessage(model);, +				logger.error(message);, +				return;, +			}, +			PlaceholderResolver resolver = new ExpressionResolver(getExpressions(), model);, +		private String getMessage(Map<String, ?> model) {, +			StringBuilder builder = new StringBuilder();, +			builder.append("Cannot render error page for request ["), +					.append(model.get("path")).append("]");, +			if (model.get("message") != null) {, +				builder.append(" and exception [").append(model.get("message")), +						.append("]");, +			}, +			return builder.append("] as the response has already been committed."), +					.append("As a result, the response may have the wrong status code."), +					.toString();, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfigurationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web.servlet.error;, +, +import org.junit.Rule;, +import org.junit.Test;, +, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +import org.springframework.boot.test.rule.OutputCapture;, +import org.springframework.boot.web.servlet.error.ErrorAttributes;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.web.context.request.WebRequest;, +import org.springframework.web.servlet.View;, +import org.springframework.web.servlet.handler.DispatcherServletWebRequest;, +, +import static org.hamcrest.Matchers.allOf;, +import static org.hamcrest.Matchers.containsString;, +, +/**, + * Tests for {@link ErrorMvcAutoConfiguration}., + *, + * @author Brian Clozel, + */, +public class ErrorMvcAutoConfigurationTests {, +, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(ErrorMvcAutoConfiguration.class));, +, +	@Rule, +	public OutputCapture outputCapture = new OutputCapture();, +]