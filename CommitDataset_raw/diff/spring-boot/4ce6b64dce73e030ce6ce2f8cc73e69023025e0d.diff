[+++ /dev/null, +++ /dev/null, +++ b/spring-autoconfigure/src/test/java/org/springframework/autoconfigure/AdhocTestSuite.java, +import org.springframework.bootstrap.SimpleMainTests;, +++ /dev/null, +++ b/spring-autoconfigure/src/test/java/org/springframework/autoconfigure/AdhocTestSuite.java, +import org.springframework.bootstrap.SimpleMainTests;, +++ /dev/null, +++ /dev/null, +++ b/spring-autoconfigure/src/test/java/org/springframework/autoconfigure/AdhocTestSuite.java, +import org.springframework.bootstrap.SimpleMainTests;, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/BeanDefinitionLoader.java, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +import org.springframework.core.io.support.ResourcePatternResolver;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +		Package packageResource = findPackage(source);, +	private Package findPackage(CharSequence source) {, +		Package pkg = Package.getPackage(source.toString());, +		if (pkg != null) {, +			return pkg;, +		}, +		try {, +			// Attempt to find a class in this package, +			ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(, +					getClass().getClassLoader());, +			Resource[] resources = resolver.getResources(ClassUtils, +					.convertClassNameToResourcePath(source.toString()) + "/*.class");, +			for (Resource resource : resources) {, +				String className = StringUtils.stripFilenameExtension(resource, +						.getFilename());, +				load(Class.forName(source.toString() + "." + className));, +				break;, +			}, +		}, +		catch (Exception ex) {, +			// swallow exception and continue, +		}, +		return Package.getPackage(source.toString());, +	}, +, +++ /dev/null, +++ b/spring-autoconfigure/src/test/java/org/springframework/autoconfigure/AdhocTestSuite.java, +import org.springframework.bootstrap.SimpleMainTests;, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/BeanDefinitionLoader.java, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +import org.springframework.core.io.support.ResourcePatternResolver;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +		Package packageResource = findPackage(source);, +	private Package findPackage(CharSequence source) {, +		Package pkg = Package.getPackage(source.toString());, +		if (pkg != null) {, +			return pkg;, +		}, +		try {, +			// Attempt to find a class in this package, +			ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(, +					getClass().getClassLoader());, +			Resource[] resources = resolver.getResources(ClassUtils, +					.convertClassNameToResourcePath(source.toString()) + "/*.class");, +			for (Resource resource : resources) {, +				String className = StringUtils.stripFilenameExtension(resource, +						.getFilename());, +				load(Class.forName(source.toString() + "." + className));, +				break;, +			}, +		}, +		catch (Exception ex) {, +			// swallow exception and continue, +		}, +		return Package.getPackage(source.toString());, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.StringUtils;, +	private Set<Object> sources = new LinkedHashSet<Object>();, +		addSources(sources);, +		addSources(sources);, +	private void addSources(Object[] sources) {, +		if (sources == null) {, +			return;, +		}, +		for (Object source : sources) {, +			this.sources.add(source);, +		}, +	}, +, +	 * A basic main that can be used to launch an application., +	 * , +	 * @param args command line arguments, +	 * @see SpringApplication#run(Object[], String[]), +	 * @see SpringApplication#run(Object, String...), +	 */, +	public static void main(String[] args) throws Exception {]