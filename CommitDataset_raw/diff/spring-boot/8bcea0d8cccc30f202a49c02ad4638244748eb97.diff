[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfiguration.java, + * @since 2.1.0, +@ConditionalOnClass({ WebServiceTemplate.class, Unmarshaller.class, Marshaller.class }), +			builder = builder.customizers(customizers);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfiguration.java, + * @since 2.1.0, +@ConditionalOnClass({ WebServiceTemplate.class, Unmarshaller.class, Marshaller.class }), +			builder = builder.customizers(customizers);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfigurationTests.java, +import java.util.function.Consumer;, +, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +import org.springframework.oxm.Marshaller;, +import org.springframework.oxm.Unmarshaller;, +import org.springframework.ws.transport.WebServiceMessageSender;, +import org.springframework.ws.transport.http.ClientHttpRequestMessageSender;, + * Tests for {@link WebServiceTemplateAutoConfiguration}., + * @author Stephane Nicoll, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(, +					AutoConfigurations.of(WebServiceTemplateAutoConfiguration.class));, +	public void autoConfiguredBuilderShouldNotHaveMarshallerAndUnmarshaller() {, +		this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {, +			WebServiceTemplate webServiceTemplate = builder.build();, +		}));, +	public void autoConfiguredBuilderShouldHaveHttpMessageSenderByDefault() {, +		this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {, +			WebServiceTemplate webServiceTemplate = builder.build();, +			assertThat(webServiceTemplate.getMessageSenders()).hasSize(1);, +			WebServiceMessageSender messageSender = webServiceTemplate, +					.getMessageSenders()[0];, +			assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class);, +		}));, +	}, +, +	@Test, +	public void webServiceTemplateWhenHasCustomBuilderShouldUseCustomBuilder() {, +		this.contextRunner, +				.withUserConfiguration(CustomWebServiceTemplateBuilderConfig.class), +				.run(assertWebServiceTemplateBuilder((builder) -> {, +					WebServiceTemplate webServiceTemplate = builder.build();, +					assertThat(webServiceTemplate.getMarshaller()), +							.isSameAs(CustomWebServiceTemplateBuilderConfig.marshaller);, +				}));, +		this.contextRunner.withUserConfiguration(WebServiceTemplateCustomizerConfig.class), +				.run(assertWebServiceTemplateBuilder((builder) -> {, +					WebServiceTemplate webServiceTemplate = builder.build();, +					assertThat(webServiceTemplate.getUnmarshaller()), +							.isSameAs(WebServiceTemplateCustomizerConfig.unmarshaller);, +				}));, +		this.contextRunner.withUserConfiguration(DirtyWebServiceTemplateConfig.class), +				.run((context) -> {, +					assertThat(context).hasNotFailed();, +				});, +	private ContextConsumer<AssertableApplicationContext> assertWebServiceTemplateBuilder(, +			Consumer<WebServiceTemplateBuilder> builder) {, +		return (context) -> {, +			assertThat(context).hasSingleBean(WebServiceTemplateBuilder.class);, +			builder.accept(context.getBean(WebServiceTemplateBuilder.class));, +		};, +			builder.additionalCustomizers((webServiceTemplate) -> {, +		private static final Marshaller marshaller = new Jaxb2Marshaller();, +, +			return new WebServiceTemplateBuilder().setMarshaller(marshaller);, +		private static final Unmarshaller unmarshaller = new Jaxb2Marshaller();, +, +			return (ws) -> ws.setUnmarshaller(unmarshaller);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfiguration.java, + * @since 2.1.0, +@ConditionalOnClass({ WebServiceTemplate.class, Unmarshaller.class, Marshaller.class }), +			builder = builder.customizers(customizers);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/webservices/client/WebServiceTemplateAutoConfigurationTests.java, +import java.util.function.Consumer;, +, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +import org.springframework.oxm.Marshaller;, +import org.springframework.oxm.Unmarshaller;, +import org.springframework.ws.transport.WebServiceMessageSender;, +import org.springframework.ws.transport.http.ClientHttpRequestMessageSender;, + * Tests for {@link WebServiceTemplateAutoConfiguration}., + * @author Stephane Nicoll, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(, +					AutoConfigurations.of(WebServiceTemplateAutoConfiguration.class));, +	public void autoConfiguredBuilderShouldNotHaveMarshallerAndUnmarshaller() {, +		this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {, +			WebServiceTemplate webServiceTemplate = builder.build();, +		}));, +	public void autoConfiguredBuilderShouldHaveHttpMessageSenderByDefault() {, +		this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {, +			WebServiceTemplate webServiceTemplate = builder.build();, +			assertThat(webServiceTemplate.getMessageSenders()).hasSize(1);, +			WebServiceMessageSender messageSender = webServiceTemplate, +					.getMessageSenders()[0];]