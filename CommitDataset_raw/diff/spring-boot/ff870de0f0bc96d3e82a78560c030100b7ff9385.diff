[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.core.annotation.AnnotationUtils;, +@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		for (String name : getJndiLocations()) {, +			try {, +				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);, +			}, +			catch (NamingException ex) {, +				// Swallow and continue, +			}, +		}, +		throw new IllegalStateException(, +				"Unable to find ConnectionFactory in JNDI locations ", +						+ Arrays.asList(getJndiLocations()));, +	}, +, +	private String[] getJndiLocations() {, +		return AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.core.annotation.AnnotationUtils;, +@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		for (String name : getJndiLocations()) {, +			try {, +				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);, +			}, +			catch (NamingException ex) {, +				// Swallow and continue, +			}, +		}, +		throw new IllegalStateException(, +				"Unable to find ConnectionFactory in JNDI locations ", +						+ Arrays.asList(getJndiLocations()));, +	}, +, +	private String[] getJndiLocations() {, +		return AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, +	public bitronix.tm.Configuration bitronixConfiguration() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.core.annotation.AnnotationUtils;, +@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		for (String name : getJndiLocations()) {, +			try {, +				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);, +			}, +			catch (NamingException ex) {, +				// Swallow and continue, +			}, +		}, +		throw new IllegalStateException(, +				"Unable to find ConnectionFactory in JNDI locations ", +						+ Arrays.asList(getJndiLocations()));, +	}, +, +	private String[] getJndiLocations() {, +		return AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, +	public bitronix.tm.Configuration bitronixConfiguration() {, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.core.annotation.AnnotationUtils;, +@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		for (String name : getJndiLocations()) {, +			try {, +				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);, +			}, +			catch (NamingException ex) {, +				// Swallow and continue, +			}, +		}, +		throw new IllegalStateException(, +				"Unable to find ConnectionFactory in JNDI locations ", +						+ Arrays.asList(getJndiLocations()));, +	}, +, +	private String[] getJndiLocations() {, +		return AnnotationUtils.getAnnotation(getClass(), ConditionalOnJndi.class).value();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java, +	public bitronix.tm.Configuration bitronixConfiguration() {, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +JMS by looking for a `ConnectionFactory` at the JNDI path `java:/JmsXA` or, +`java:/XAConnectionFactory` and you can use the, +<<boot-features-connecting-to-a-jndi-datasource, `spring.datasource.jndi-name` property>>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.core.annotation.AnnotationUtils;, +@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		for (String name : getJndiLocations()) {, +			try {, +				return new JndiLocatorDelegate().lookup(name, ConnectionFactory.class);]