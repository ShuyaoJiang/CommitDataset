[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		"endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		"endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/actuator").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		"endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/actuator").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMvcEndpoint;, + * @author Andy Wilkinson, +	@ConditionalOnProperty(prefix = "endpoints.actuator", name = "enabled", matchIfMissing = true), +	public ActuatorMvcEndpoint actuatorMvcEndpoint(ManagementServerProperties management,, +			ResourceProperties resources) {, +		return new ActuatorMvcEndpoint(management);, +	@ConditionalOnProperty(prefix = "endpoints.docs", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false), +	 * Controller advice that adds links to the actuator endpoint's path., +	public static class ActuatorEndpointLinksAdvice implements ResponseBodyAdvice<Object> {, +		private ActuatorMvcEndpoint actuatorEndpoint;, +			return ResourceSupport.class.isAssignableFrom(returnType.getParameterType()), +			if (isActuatorEndpointPath(path)) {, +				this.linksEnhancer, +						.addEndpointLinks(body, this.actuatorEndpoint.getPath());, +		private boolean isActuatorEndpointPath(String path) {, +			return this.actuatorEndpoint != null, +					&& (this.management.getContextPath() + this.actuatorEndpoint, +	 * Controller advice that adds links to the existing Actuator endpoints. By default, +	 * all the top-level resources are enhanced with a "self" link. Those resources that, +	 * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are, +	 * ignored. Those that have values of type Collection (e.g. /trace) are transformed in, +	 * to maps, and the original collection value is added with a key equal to the, +	 * endpoint name., +			return !ActuatorMvcEndpoint.class.isAssignableFrom(controllerType);, +			HttpMessageConverter<Object> converter = findConverter(selectedConverterType,, +					selectedContentType);, +				converter.write(new EndpointResource(body, path), selectedContentType,, +						response);, +				return (HttpMessageConverter<Object>) this.converterCache.get(mediaType);, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		"endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/actuator").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMvcEndpoint;, + * @author Andy Wilkinson, +	@ConditionalOnProperty(prefix = "endpoints.actuator", name = "enabled", matchIfMissing = true), +	public ActuatorMvcEndpoint actuatorMvcEndpoint(ManagementServerProperties management,, +			ResourceProperties resources) {, +		return new ActuatorMvcEndpoint(management);, +	@ConditionalOnProperty(prefix = "endpoints.docs", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false), +	 * Controller advice that adds links to the actuator endpoint's path., +	public static class ActuatorEndpointLinksAdvice implements ResponseBodyAdvice<Object> {, +		private ActuatorMvcEndpoint actuatorEndpoint;, +			return ResourceSupport.class.isAssignableFrom(returnType.getParameterType()), +			if (isActuatorEndpointPath(path)) {, +				this.linksEnhancer, +						.addEndpointLinks(body, this.actuatorEndpoint.getPath());, +		private boolean isActuatorEndpointPath(String path) {, +			return this.actuatorEndpoint != null, +					&& (this.management.getContextPath() + this.actuatorEndpoint, +	 * Controller advice that adds links to the existing Actuator endpoints. By default, +	 * all the top-level resources are enhanced with a "self" link. Those resources that, +	 * could not be enhanced (e.g. "/env/{name}") because their values are "primitive" are, +	 * ignored. Those that have values of type Collection (e.g. /trace) are transformed in, +	 * to maps, and the original collection value is added with a key equal to the, +	 * endpoint name., +			return !ActuatorMvcEndpoint.class.isAssignableFrom(controllerType);, +			HttpMessageConverter<Object> converter = findConverter(selectedConverterType,, +					selectedContentType);, +				converter.write(new EndpointResource(body, path), selectedContentType,, +						response);, +				return (HttpMessageConverter<Object>) this.converterCache.get(mediaType);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, + * Adds endpoint links to {@link ResourceSupport}., +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		"endpoints.health.sensitive=true", "endpoints.actuator.enabled=false" }), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/actuator").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMvcEndpoint;, + * @author Andy Wilkinson, +	@ConditionalOnProperty(prefix = "endpoints.actuator", name = "enabled", matchIfMissing = true), +	public ActuatorMvcEndpoint actuatorMvcEndpoint(ManagementServerProperties management,, +			ResourceProperties resources) {, +		return new ActuatorMvcEndpoint(management);, +	@ConditionalOnProperty(prefix = "endpoints.docs", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.docs.curies", name = "enabled", matchIfMissing = false), +	 * Controller advice that adds links to the actuator endpoint's path., +	public static class ActuatorEndpointLinksAdvice implements ResponseBodyAdvice<Object> {, +		private ActuatorMvcEndpoint actuatorEndpoint;, +			return ResourceSupport.class.isAssignableFrom(returnType.getParameterType()), +			if (isActuatorEndpointPath(path)) {, +				this.linksEnhancer, +						.addEndpointLinks(body, this.actuatorEndpoint.getPath());, +		private boolean isActuatorEndpointPath(String path) {, +			return this.actuatorEndpoint != null]