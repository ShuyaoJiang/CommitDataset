[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +			if (this.halJsonMvcEndpoint != null) {, +				String toMatch = this.management.getContextPath(), +						+ this.halJsonMvcEndpoint.getPath();, +				return toMatch.equals(path) || (toMatch + "/").equals(path);, +			}, +			return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +			if (this.halJsonMvcEndpoint != null) {, +				String toMatch = this.management.getContextPath(), +						+ this.halJsonMvcEndpoint.getPath();, +				return toMatch.equals(path) || (toMatch + "/").equals(path);, +			}, +			return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +			if (this.halJsonMvcEndpoint != null) {, +				String toMatch = this.management.getContextPath(), +						+ this.halJsonMvcEndpoint.getPath();, +				return toMatch.equals(path) || (toMatch + "/").equals(path);, +			}, +			return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointManagementContextPathIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	public void actuatorHomeWithTrailingSlashJson() throws Exception {, +				.andExpect(status().isOk()).andExpect(jsonPath("$._links").exists());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +			if (this.halJsonMvcEndpoint != null) {, +				String toMatch = this.management.getContextPath(), +						+ this.halJsonMvcEndpoint.getPath();, +				return toMatch.equals(path) || (toMatch + "/").equals(path);, +			}, +			return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointManagementContextPathIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	public void actuatorHomeWithTrailingSlashJson() throws Exception {, +				.andExpect(status().isOk()).andExpect(jsonPath("$._links").exists());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	@Test, +	public void actuatorLinksWithTrailingSlash() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));, +		ResponseEntity<String> entity = new TestRestTemplate().exchange(, +				"http://localhost:" + this.port + "/spring/actuator/", HttpMethod.GET,, +				new HttpEntity<Void>(null, headers), String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		assertTrue("Wrong body: " + entity.getBody(),, +				entity.getBody().contains("\"_links\":"));, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +			if (this.halJsonMvcEndpoint != null) {, +				String toMatch = this.management.getContextPath(), +						+ this.halJsonMvcEndpoint.getPath();, +				return toMatch.equals(path) || (toMatch + "/").equals(path);, +			}, +			return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointManagementContextPathIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	public void actuatorHomeWithTrailingSlashJson() throws Exception {, +				.andExpect(status().isOk()).andExpect(jsonPath("$._links").exists());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	@Test, +	public void actuatorLinksWithTrailingSlash() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));, +		ResponseEntity<String> entity = new TestRestTemplate().exchange(, +				"http://localhost:" + this.port + "/spring/actuator/", HttpMethod.GET,, +				new HttpEntity<Void>(null, headers), String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		assertTrue("Wrong body: " + entity.getBody(),, +				entity.getBody().contains("\"_links\":"));, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerPortIntegrationTests.java, + * Copyright 2012-2016 the original author or authors., +	public void linksWithTrailingSlash() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));, +		ResponseEntity<String> entity = new TestRestTemplate().exchange(, +				"http://localhost:" + this.port + "/actuator/", HttpMethod.GET,, +				new HttpEntity<Void>(null, headers), String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		assertTrue("Wrong body: " + entity.getBody(),, +				entity.getBody().contains("\"_links\":"));, +		assertTrue("Wrong body: " + entity.getBody(),]