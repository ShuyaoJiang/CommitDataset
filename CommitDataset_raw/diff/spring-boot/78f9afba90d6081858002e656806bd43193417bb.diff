[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +extracts them and flattens the data into properties that can be accessed through, +features that a PaaS can offer. These are just three of the most popular Java PaaS, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +extracts them and flattens the data into properties that can be accessed through, +features that a PaaS can offer. These are just three of the most popular Java PaaS, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +developing a specific type of application. Since we are developing a web application, we, +will add a `spring-boot-starter-web` dependency -- but before that, lets look at what we, +You can see that `spring-boot-starter-parent` has already provided some useful test, +from `src/main/java` by default so you need to create that folder structure, then add a, +file named `src/main/java/Example.java`:, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +extracts them and flattens the data into properties that can be accessed through, +features that a PaaS can offer. These are just three of the most popular Java PaaS, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +developing a specific type of application. Since we are developing a web application, we, +will add a `spring-boot-starter-web` dependency -- but before that, lets look at what we, +You can see that `spring-boot-starter-parent` has already provided some useful test, +from `src/main/java` by default so you need to create that folder structure, then add a, +file named `src/main/java/Example.java`:, +++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:spring-javadoc: http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +extracts them and flattens the data into properties that can be accessed through, +features that a PaaS can offer. These are just three of the most popular Java PaaS, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +developing a specific type of application. Since we are developing a web application, we, +will add a `spring-boot-starter-web` dependency -- but before that, lets look at what we, +You can see that `spring-boot-starter-parent` has already provided some useful test, +from `src/main/java` by default so you need to create that folder structure, then add a, +file named `src/main/java/Example.java`:, +++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:spring-javadoc: http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +The `spring-boot-actuator` module provides all of Spring Boot's production-ready, +features. The simplest way to enable the features is to add a dependency to the, +You can customize the data exposed by the `info` endpoint by setting `info.*` Spring, +all non-sensitive endpoints to be exposed over HTTP. The default convention is to use the, +using Maven you would add the following:, +	endpoints.jolokia.enabled=false, +	import org.crsh.cli.Usage, +	import org.crsh.cli.Command, +TIP: You can use any string as a metric name but you should follow guidelines of your chosen, +Tracing is automatically enabled for all HTTP requests. You can view the `trace` endpoint, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +variety of features, including the packaging of executable jars. This section provides, +|Classifier to add to the generated artifact. If given, the artifact will be attached. If, + `finalName`. Attaching the artifact allows to deploy it alongside to the original one,, + see http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html[, + the maven documentation for more details], +for configuration. Simply set the appropriate properties as you would with any other Gradle, +however, if the plan is to explode a jar file and run the main class manually, you may already, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +extracts them and flattens the data into properties that can be accessed through, +features that a PaaS can offer. These are just three of the most popular Java PaaS, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +developing a specific type of application. Since we are developing a web application, we, +will add a `spring-boot-starter-web` dependency -- but before that, lets look at what we, +You can see that `spring-boot-starter-parent` has already provided some useful test]