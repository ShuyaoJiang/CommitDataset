[+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java, +import java.util.List;, +import org.springframework.boot.logging.LogLevel;, +import org.springframework.core.env.SimpleCommandLinePropertySource;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ObjectUtils;, +	private static MultiValueMap<LogLevel, String> LOG_LEVEL_LOGGERS;, +	static {, +		LOG_LEVEL_LOGGERS = new LinkedMultiValueMap<LogLevel, String>();, +		LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.springframework.boot");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.springframework");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.tomcat");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.eclipse.jetty");, +	}, +, +	private boolean parseArgs = true;, +, +	private LogLevel springBootLogging = null;, +, +		LoggingSystem loggingSystem = LoggingSystem.get(springApplication.getClass(), +				.getClassLoader());, +		loggingSystem.beforeInitialize();, +		if (this.parseArgs && this.springBootLogging == null, +				&& !ObjectUtils.isEmpty(args)) {, +			SimpleCommandLinePropertySource parsedArgs = new SimpleCommandLinePropertySource(, +					args);, +			if (parsedArgs.containsProperty("debug")) {, +				this.springBootLogging = LogLevel.DEBUG;, +			}, +			if (parsedArgs.containsProperty("trace")) {, +				this.springBootLogging = LogLevel.TRACE;, +			}, +		}, +		if (this.springBootLogging != null) {, +			initializeLogLeve(system, this.springBootLogging);, +		}, +	}, +, +	protected void initializeLogLeve(LoggingSystem system, LogLevel level) {, +		List<String> loggers = LOG_LEVEL_LOGGERS.get(level);, +		if (loggers != null) {, +			for (String logger : loggers) {, +				system.setLogLevel(logger, level);, +			}, +		}, +	/**, +	 * Sets a custom logging level to be used for Spring Boot and related libraries., +	 * @param springBootLogging the logging level, +	 */, +	public void setSpringBootLogging(LogLevel springBootLogging) {, +		this.springBootLogging = springBootLogging;, +	}, +, +	/**, +	 * Sets if initialization arguments should be parsed for {@literal --debug} and, +	 * {@literal --trace} options. Defaults to {@code true}., +	 * @param parseArgs if arguments should be parsed, +	 */, +	public void setParseArgs(boolean parseArgs) {, +		this.parseArgs = parseArgs;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java, +import java.util.List;, +import org.springframework.boot.logging.LogLevel;, +import org.springframework.core.env.SimpleCommandLinePropertySource;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ObjectUtils;, +	private static MultiValueMap<LogLevel, String> LOG_LEVEL_LOGGERS;, +	static {, +		LOG_LEVEL_LOGGERS = new LinkedMultiValueMap<LogLevel, String>();, +		LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.springframework.boot");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.springframework");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.tomcat");, +		LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.eclipse.jetty");, +	}, +, +	private boolean parseArgs = true;, +, +	private LogLevel springBootLogging = null;, +, +		LoggingSystem loggingSystem = LoggingSystem.get(springApplication.getClass(), +				.getClassLoader());, +		loggingSystem.beforeInitialize();, +		if (this.parseArgs && this.springBootLogging == null, +				&& !ObjectUtils.isEmpty(args)) {, +			SimpleCommandLinePropertySource parsedArgs = new SimpleCommandLinePropertySource(, +					args);, +			if (parsedArgs.containsProperty("debug")) {, +				this.springBootLogging = LogLevel.DEBUG;, +			}, +			if (parsedArgs.containsProperty("trace")) {, +				this.springBootLogging = LogLevel.TRACE;, +			}, +		}, +		if (this.springBootLogging != null) {, +			initializeLogLeve(system, this.springBootLogging);, +		}, +	}]