[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +			if (name.startsWith("get") && parameterCount == 0 && name.length() > 3) {, +			else if (name.startsWith("is") && parameterCount == 0 && name.length() > 2) {, +			else if (name.startsWith("set") && parameterCount == 1 && name.length() > 3) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +			if (name.startsWith("get") && parameterCount == 0 && name.length() > 3) {, +			else if (name.startsWith("is") && parameterCount == 0 && name.length() > 2) {, +			else if (name.startsWith("set") && parameterCount == 1 && name.length() > 3) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java, +	@Test, +	public void bindToClassShouldIgnoreInvalidAccessors() {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.name", "something");, +		this.sources.add(source);, +		ExampleWithInvalidAccessors bean = this.binder, +				.bind("foo", Bindable.of(ExampleWithInvalidAccessors.class)).get();, +		assertThat(bean.getName()).isEqualTo("something");, +	}, +, +	public static class ExampleWithInvalidAccessors {, +, +		private String name;, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String get() {, +			throw new IllegalArgumentException("should not be invoked");, +		}, +, +		public boolean is() {, +			throw new IllegalArgumentException("should not be invoked");, +		}, +, +	}, +]