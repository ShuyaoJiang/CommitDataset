[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +	private ConfigurationPropertySource convertToConfigurationPropertySource(, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +	private ConfigurationPropertySource convertToConfigurationPropertySource(, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Binder binder = new Binder(ConfigurationPropertySources.from(propertySource),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +	private ConfigurationPropertySource convertToConfigurationPropertySource(, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Binder binder = new Binder(ConfigurationPropertySources.from(propertySource),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +import org.springframework.core.env.PropertySource;, +	private Iterable<PropertySource<?>> propertySources;, +	private Iterable<ConfigurationPropertySource> configurationSources;, +	public void setPropertySources(Iterable<PropertySource<?>> propertySources) {, +				.from(this.propertySources);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +	private ConfigurationPropertySource convertToConfigurationPropertySource(, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Binder binder = new Binder(ConfigurationPropertySources.from(propertySource),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +import org.springframework.core.env.PropertySource;, +	private Iterable<PropertySource<?>> propertySources;, +	private Iterable<ConfigurationPropertySource> configurationSources;, +	public void setPropertySources(Iterable<PropertySource<?>> propertySources) {, +				.from(this.propertySources);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +	 * @param environment the environment source (must have attached, +	 * {@link ConfigurationPropertySources}), +		return new Binder(ConfigurationPropertySources.get(environment),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +	private ConfigurationPropertySource convertToConfigurationPropertySource(, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Binder binder = new Binder(ConfigurationPropertySources.from(propertySource),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +import org.springframework.core.env.PropertySource;, +	private Iterable<PropertySource<?>> propertySources;, +	private Iterable<ConfigurationPropertySource> configurationSources;, +	public void setPropertySources(Iterable<PropertySource<?>> propertySources) {, +				.from(this.propertySources);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +	 * @param environment the environment source (must have attached, +	 * {@link ConfigurationPropertySources}), +		return new Binder(ConfigurationPropertySources.get(environment),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolver.java, +	private final Iterable<PropertySource<?>> sources;, +	public PropertySourcesPlaceholdersResolver(Iterable<PropertySource<?>> sources) {, +	public PropertySourcesPlaceholdersResolver(Iterable<PropertySource<?>> sources,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java, +		return new Binder(ConfigurationPropertySources.from(propertySource)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Properties;, +				Properties properties = PropertiesLoaderUtils.loadProperties(location);, +				new Binder(new MapConfigurationPropertySource(properties)).bind("info",]