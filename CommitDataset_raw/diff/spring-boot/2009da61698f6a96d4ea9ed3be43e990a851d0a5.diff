[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		context.clearConfigurationProperty();, +		void clearConfigurationProperty() {, +			this.configurationProperty = null;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		context.clearConfigurationProperty();, +		void clearConfigurationProperty() {, +			this.configurationProperty = null;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +import org.assertj.core.matcher.AssertionMatcher;, +	@Test, +	public void bindExceptionWhenBeanBindingFailsShouldHaveNullConfigurationProperty() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.value", "hello");, +		source.put("foo.items", "bar,baz");, +		this.sources, +				.add(source);, +		Bindable<JavaBean> target = Bindable.of(JavaBean.class);, +		this.thrown.expect(BindException.class);, +		this.thrown.expect(new AssertionMatcher<BindException>() {, +			@Override, +			public void assertion(BindException ex) throws AssertionError {, +				assertThat(ex.getCause().getMessage()).isEqualTo("No setter found for property: items");, +				assertThat(ex.getProperty()).isNull();, +			}, +		});, +		this.binder.bind("foo", target);, +	}, +, +		private List<String> items = Collections.emptyList();, +, +		public List<String> getItems() {, +			return this.items;, +		}]