[+++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.env;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.LineNumberReader;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.boot.env.TextResourcePropertyOrigin.Location;, +import org.springframework.core.io.Resource;, +import org.springframework.util.Assert;, +, +/**, + * Class to load {@code .properties} files into a map of {@code String} ->, + * {@link OriginTrackedValue}. Also supports expansion of {@code name[]=a,b,c} list style, + * values., + *, + * @author Madhura Bhave, + * @author Phillip Webb, + */, +class OriginTrackedPropertiesLoader {, +, +	private final Resource resource;, +, +	/**, +	 * Create a new {@link OriginTrackedPropertiesLoader} instance., +	 * @param resource the resource of the {@code .properties} data, +	 */, +	OriginTrackedPropertiesLoader(Resource resource) {, +		Assert.notNull(resource, "Resource must not be null");, +		this.resource = resource;, +	}, +, +	/**, +	 * Load {@code .properties} data and return a map of {@code String} ->, +	 * {@link OriginTrackedValue}., +	 * @return the loaded properties, +	 * @throws IOException on read error, +	 */, +	public Map<String, OriginTrackedValue> load() throws IOException {, +		return load(true);, +	}, +, +	/**, +	 * Load {@code .properties} data and return a map of {@code String} ->, +	 * {@link OriginTrackedValue}., +	 * @param expandLists if list {@code name[]=a,b,c} shorcuts should be expanded, +	 * @return the loaded properties, +	 * @throws IOException on read error, +	 */, +	public Map<String, OriginTrackedValue> load(boolean expandLists) throws IOException {, +		try (CharacterReader reader = new CharacterReader(this.resource)) {, +			Map<String, OriginTrackedValue> result = new LinkedHashMap<>();, +			StringBuilder buffer = new StringBuilder();, +			while (reader.read()) {, +				String key = loadKey(buffer, reader).trim();, +				if (expandLists && key.endsWith("[]")) {, +					key = key.substring(0, key.length() - 2);, +					int index = 0;, +					do {, +						OriginTrackedValue value = loadValue(buffer, reader, true);, +						put(result, key + "[" + (index++) + "]", value);, +						if (!reader.isEndOfLine()) {, +							reader.read();, +						}, +					}, +					while (!reader.isEndOfLine());, +				}, +				else {, +					OriginTrackedValue value = loadValue(buffer, reader, false);, +					put(result, key, value);, +				}, +			}, +			return result;, +		}, +	}, +, +	private void put(Map<String, OriginTrackedValue> result, String key,, +			OriginTrackedValue value) {, +		if (!key.isEmpty()) {, +			result.put(key, value);, +		}]