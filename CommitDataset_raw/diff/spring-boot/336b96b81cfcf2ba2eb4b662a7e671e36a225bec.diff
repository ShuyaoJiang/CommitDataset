[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +		private ServerProperties server;, +, +				this.server = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ServerProperties.class);, +			// Customize as per the parent context first (so e.g. the access logs go to the same place), +			server.customize(container);, +			// Then reset the error pages, +			container.setErrorPages(Collections.<ErrorPage>emptySet());, +			// and add the management-specific bits, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +		private ServerProperties server;, +, +				this.server = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ServerProperties.class);, +			// Customize as per the parent context first (so e.g. the access logs go to the same place), +			server.customize(container);, +			// Then reset the error pages, +			container.setErrorPages(Collections.<ErrorPage>emptySet());, +			// and add the management-specific bits, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;, +		assertThat(applicationContext.getBean(ServerPortConfig.class).getCount(), equalTo(2));, +		private int count = 0;, +		, +		public int getCount() {, +			return count;, +		}, +, +			ServerProperties properties = new ServerProperties() {, +				@Override, +				public void customize(ConfigurableEmbeddedServletContainer container) {, +					count++;, +					super.customize(container);, +				}, +			};, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +		private ServerProperties server;, +, +				this.server = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ServerProperties.class);, +			// Customize as per the parent context first (so e.g. the access logs go to the same place), +			server.customize(container);, +			// Then reset the error pages, +			container.setErrorPages(Collections.<ErrorPage>emptySet());, +			// and add the management-specific bits, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;, +		assertThat(applicationContext.getBean(ServerPortConfig.class).getCount(), equalTo(2));, +		private int count = 0;, +		, +		public int getCount() {, +			return count;, +		}, +, +			ServerProperties properties = new ServerProperties() {, +				@Override, +				public void customize(ConfigurableEmbeddedServletContainer container) {, +					count++;, +					super.customize(container);, +				}, +			};, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/main/resources/application.properties, +#management.port: 8181]