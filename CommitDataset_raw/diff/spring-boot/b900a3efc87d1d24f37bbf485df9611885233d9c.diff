[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +	private static final Set<String> SKIPPED = Collections, +			.<String>unmodifiableSet(new HashSet<String>(, +					Arrays.asList("/docs", "/logfile", "/heapdump", "/auditevents")));, +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +		this.mockMvc, +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				this.mockMvc, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +	private static final Set<String> SKIPPED = Collections, +			.<String>unmodifiableSet(new HashSet<String>(, +					Arrays.asList("/docs", "/logfile", "/heapdump", "/auditevents")));, +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +		this.mockMvc, +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				this.mockMvc, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +		this.mockMvc, +				.perform(get("/health"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +	private static final Set<String> SKIPPED = Collections, +			.<String>unmodifiableSet(new HashSet<String>(, +					Arrays.asList("/docs", "/logfile", "/heapdump", "/auditevents")));, +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +		this.mockMvc, +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				this.mockMvc, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +		this.mockMvc, +				.perform(get("/health"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +import org.springframework.boot.actuate.endpoint.mvc.ActuatorMediaTypes;, +		this.mockMvc, +				.perform(get("/beans"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/metrics"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		this.mockMvc, +				.perform(get("/actuator"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/.settings-template.xml]