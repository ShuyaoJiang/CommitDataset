[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import com.hazelcast.core.IMap;, +import com.hazelcast.spring.cache.HazelcastCache;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import com.hazelcast.core.IMap;, +import com.hazelcast.spring.cache.HazelcastCache;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +, + * Base {@link CacheStatisticsProvider} implementation that uses JMX to retrieve the cache, + * statistics., + * @param <C> The cache type, +public abstract class AbstractJmxCacheStatisticsProvider<C extends Cache> implements, +		CacheStatisticsProvider<C> {, +	private Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +			return (objectName == null ? null : getCacheStatistics(objectName));, +	 * @throws MalformedObjectNameException, +	protected abstract ObjectName getObjectName(C cache), +			throws MalformedObjectNameException;, +	 * Return the current {@link CacheStatistics} snapshot from the MBean identified by, +	 * the specified {@link ObjectName}., +	private ObjectName internalGetObjectName(C cache) throws MalformedObjectNameException {, +	protected <T> T getAttribute(ObjectName objectName, String attributeName,, +			Class<T> type) {, +			throw new IllegalStateException("Unexpected: MBean with name '" + objectName, +					+ "' " + "does not expose attribute with name " + attributeName, ex);, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import com.hazelcast.core.IMap;, +import com.hazelcast.spring.cache.HazelcastCache;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +, + * Base {@link CacheStatisticsProvider} implementation that uses JMX to retrieve the cache, + * statistics., + * @param <C> The cache type, +public abstract class AbstractJmxCacheStatisticsProvider<C extends Cache> implements, +		CacheStatisticsProvider<C> {, +	private Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +			return (objectName == null ? null : getCacheStatistics(objectName));, +	 * @throws MalformedObjectNameException, +	protected abstract ObjectName getObjectName(C cache), +			throws MalformedObjectNameException;, +	 * Return the current {@link CacheStatistics} snapshot from the MBean identified by, +	 * the specified {@link ObjectName}., +	private ObjectName internalGetObjectName(C cache) throws MalformedObjectNameException {, +	protected <T> T getAttribute(ObjectName objectName, String attributeName,, +			Class<T> type) {, +			throw new IllegalStateException("Unexpected: MBean with name '" + objectName, +					+ "' " + "does not expose attribute with name " + attributeName, ex);, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/DefaultCacheStatistics.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import com.hazelcast.core.IMap;, +import com.hazelcast.spring.cache.HazelcastCache;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +, + * Base {@link CacheStatisticsProvider} implementation that uses JMX to retrieve the cache, + * statistics., + * @param <C> The cache type, +public abstract class AbstractJmxCacheStatisticsProvider<C extends Cache> implements, +		CacheStatisticsProvider<C> {, +	private Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +			return (objectName == null ? null : getCacheStatistics(objectName));, +	 * @throws MalformedObjectNameException, +	protected abstract ObjectName getObjectName(C cache), +			throws MalformedObjectNameException;, +	 * Return the current {@link CacheStatistics} snapshot from the MBean identified by, +	 * the specified {@link ObjectName}., +	private ObjectName internalGetObjectName(C cache) throws MalformedObjectNameException {, +	protected <T> T getAttribute(ObjectName objectName, String attributeName,, +			Class<T> type) {, +			throw new IllegalStateException("Unexpected: MBean with name '" + objectName, +					+ "' " + "does not expose attribute with name " + attributeName, ex);, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/DefaultCacheStatistics.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/InfinispanCacheStatisticsProvider.java, +, +public class InfinispanCacheStatisticsProvider extends, +		AbstractJmxCacheStatisticsProvider<SpringCache> {, +	protected ObjectName getObjectName(SpringCache cache), +			throws MalformedObjectNameException {, +		ObjectName name = new ObjectName(, +				"org.infinispan:component=Statistics,type=Cache,name=\"", +						+ cache.getName() + "(local)\",*");, +		Set<ObjectInstance> instances = getMBeanServer().queryMBeans(name, null);, +		// None or more than one, +		return null;, +	@Override]