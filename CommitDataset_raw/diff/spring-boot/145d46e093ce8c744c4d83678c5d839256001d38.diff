[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.apache.commons.pool2.impl.GenericObjectPoolConfig;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +			assertThat(context.getBean("redisTemplate", RedisOperations.class)), +			assertThat(context.getBean(StringRedisTemplate.class)).isNotNull();, +		});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.database:1",, +						"spring.redis.lettuce.shutdown-timeout:500"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +				});, +		this.contextRunner, +				.withUserConfiguration(CustomConfiguration.class), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.url:redis://user:password@example:33"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo", "spring.redis.password:xyz",, +						"spring.redis.url:rediss://user:password@example:33"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.lettuce.pool.min-idle:1",, +						"spring.redis.lettuce.shutdown-timeout:1000"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +					GenericObjectPoolConfig poolConfig =, +							getPoolingClientConfiguration(cf).getPoolConfig();, +					assertThat(poolConfig.getMinIdle()).isEqualTo(1);, +					assertThat(poolConfig.getMaxIdle()).isEqualTo(4);, +					assertThat(poolConfig.getMaxTotal()).isEqualTo(16);, +					assertThat(poolConfig.getMaxWaitMillis()).isEqualTo(2000);, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.timeout:100"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.sentinel.master:mymaster",, +						"spring.redis.sentinel.nodes:", +								+ StringUtils.collectionToCommaDelimitedString(sentinels)), +				.run((context) -> {, +					assertThat(context.getBean(LettuceConnectionFactory.class), +, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.password=password",, +						"spring.redis.sentinel.master:mymaster",, +						"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380"), +				.run((context) -> {, +					LettuceConnectionFactory connectionFactory = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.cluster.nodes[0]:" + clusterNodes.get(0),, +						"spring.redis.cluster.nodes[1]:" + clusterNodes.get(1)), +				.run((context) -> {, +					assertThat(context.getBean(LettuceConnectionFactory.class), +, +				});, +		this.contextRunner, +				.withPropertyValues("spring.redis.password=password",, +						"spring.redis.cluster.nodes[1]:" + clusterNodes.get(1)), +				.run((context) -> {, +					assertThat(context.getBean(LettuceConnectionFactory.class).getPassword()), +, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.apache.commons.pool2.impl.GenericObjectPoolConfig;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +			assertThat(context.getBean("redisTemplate", RedisOperations.class)), +			assertThat(context.getBean(StringRedisTemplate.class)).isNotNull();, +		});, +		this.contextRunner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.database:1",, +						"spring.redis.lettuce.shutdown-timeout:500"), +				.run((context) -> {, +					LettuceConnectionFactory cf = context]