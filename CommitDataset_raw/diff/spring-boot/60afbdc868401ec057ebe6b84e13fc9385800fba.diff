[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +		return this.securityInterceptor.preHandle(exchange, ""), +				.map((securityResponse) -> {, +					return new ResponseEntity<>(, +							Collections.singletonMap("_links",, +									getAccessibleLinks(accessLevel, links)),, +							HttpStatus.OK);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +		return this.securityInterceptor.preHandle(exchange, ""), +				.map((securityResponse) -> {, +					return new ResponseEntity<>(, +							Collections.singletonMap("_links",, +									getAccessibleLinks(accessLevel, links)),, +							HttpStatus.OK);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java, +				.filter((tokenKeys) -> tokenKeys.containsKey(keyId)), +				.filter((tokenKeys) -> hasValidSignature(token, tokenKeys.get(keyId))), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +		return this.securityInterceptor.preHandle(exchange, ""), +				.map((securityResponse) -> {, +					return new ResponseEntity<>(, +							Collections.singletonMap("_links",, +									getAccessibleLinks(accessLevel, links)),, +							HttpStatus.OK);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java, +				.filter((tokenKeys) -> tokenKeys.containsKey(keyId)), +				.filter((tokenKeys) -> hasValidSignature(token, tokenKeys.get(keyId))), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +				.consumeNextWith((response) -> assertThat(response.getStatus()), +						.isEqualTo(Reason.ACCESS_DENIED.getStatus())), +				.verifyComplete();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +		return this.securityInterceptor.preHandle(exchange, ""), +				.map((securityResponse) -> {, +					return new ResponseEntity<>(, +							Collections.singletonMap("_links",, +									getAccessibleLinks(accessLevel, links)),, +							HttpStatus.OK);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java, +				.filter((tokenKeys) -> tokenKeys.containsKey(keyId)), +				.filter((tokenKeys) -> hasValidSignature(token, tokenKeys.get(keyId))), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +				.consumeNextWith((response) -> assertThat(response.getStatus()), +						.isEqualTo(Reason.ACCESS_DENIED.getStatus())), +				.verifyComplete();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java, +		prepareResponse((response) -> response.setBody(responseBody), +				.consumeNextWith((accessLevel) -> assertThat(accessLevel), +		expectRequest((request) -> {, +		prepareResponse((response) -> response.setBody(responseBody), +				.consumeNextWith((accessLevel) -> assertThat(accessLevel), +		expectRequest((request) -> {, +		prepareResponse((response) -> response.setResponseCode(401));, +				.consumeErrorWith((throwable) -> {, +		expectRequest((request) -> {, +		prepareResponse((response) -> response.setResponseCode(403));, +				.consumeErrorWith((throwable) -> {, +		expectRequest((request) -> {, +		prepareResponse((response) -> response.setResponseCode(500));, +				.consumeErrorWith((throwable) -> {, +		expectRequest((request) -> {, +		prepareResponse((response) -> {, +		prepareResponse((response) -> {, +				.consumeNextWith((tokenKeys) -> assertThat(tokenKeys.get("test-key")), +		expectRequest((request) -> assertThat(request.getPath()), +		expectRequest((request) -> assertThat(request.getPath()), +		prepareResponse((response) -> {, +		prepareResponse((response) -> {, +				.consumeNextWith((tokenKeys) -> assertThat(tokenKeys).hasSize(0)), +		expectRequest((request) -> assertThat(request.getPath()), +		expectRequest((request) -> assertThat(request.getPath()), +		prepareResponse((response) -> {, +		prepareResponse((response) -> response.setResponseCode(500));, +				.consumeErrorWith((throwable) -> assertThat(, +		expectRequest((request) -> assertThat(request.getPath()), +		expectRequest((request) -> assertThat(request.getPath()), +		prepareResponse((response) -> {, +				.consumeNextWith((uaaUrl) -> assertThat(uaaUrl).isEqualTo(UAA_URL)), +		expectRequest((request) -> assertThat(request.getPath()), +		prepareResponse((response) -> response.setResponseCode(500));, +				.consumeErrorWith((throwable) -> {, +		expectRequest((request) -> assertThat(request.getPath()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +		return this.securityInterceptor.preHandle(exchange, ""), +				.map((securityResponse) -> {, +					return new ResponseEntity<>(, +							Collections.singletonMap("_links",, +									getAccessibleLinks(accessLevel, links)),, +							HttpStatus.OK);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java, +				.filter((tokenKeys) -> tokenKeys.containsKey(keyId)), +				.filter((tokenKeys) -> hasValidSignature(token, tokenKeys.get(keyId))), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +				.consumeNextWith((response) -> assertThat(response.getStatus()), +						.isEqualTo(Reason.ACCESS_DENIED.getStatus())), +				.verifyComplete();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityServiceTests.java, +		prepareResponse((response) -> response.setBody(responseBody), +				.consumeNextWith((accessLevel) -> assertThat(accessLevel), +		expectRequest((request) -> {]