[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +					assertThat(loaded), +							.hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		this.context, +				.withPropertyValues("spring.transaction.default-timeout=30",, +						"spring.transaction.rollback-on-commit-failure:true"), +				.run((loaded) -> {, +				.run((loaded) -> assertThat(loaded), +						.doesNotHaveBean(OpenSessionInViewInterceptor.class));, +					session.notifyListeners(, +							new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +					assertThat(loaded), +							.hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		this.context, +				.withPropertyValues("spring.transaction.default-timeout=30",, +						"spring.transaction.rollback-on-commit-failure:true"), +				.run((loaded) -> {, +				.run((loaded) -> assertThat(loaded), +						.doesNotHaveBean(OpenSessionInViewInterceptor.class));, +					session.notifyListeners(, +							new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java, +		return new Condition<>((o) -> o.getName().startsWith(prefix),, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +					assertThat(loaded), +							.hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		this.context, +				.withPropertyValues("spring.transaction.default-timeout=30",, +						"spring.transaction.rollback-on-commit-failure:true"), +				.run((loaded) -> {, +				.run((loaded) -> assertThat(loaded), +						.doesNotHaveBean(OpenSessionInViewInterceptor.class));, +					session.notifyListeners(, +							new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java, +		return new Condition<>((o) -> o.getName().startsWith(prefix),, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfigurationTests.java, +		this.context.run(, +				(loaded) -> assertThat(loaded.getBeansOfType(InfluxDB.class)).isEmpty());, +		this.context, +				.withPropertyValues("spring.influx.url=http://localhost",, +				.run((loaded -> assertThat(loaded.getBeansOfType(InfluxDB.class)), +						.hasSize(1)));, +				.withPropertyValues("spring.influx.url=http://localhost"), +				.run((loaded) -> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +					assertThat(loaded), +							.hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		this.context, +				.withPropertyValues("spring.transaction.default-timeout=30",, +						"spring.transaction.rollback-on-commit-failure:true"), +				.run((loaded) -> {, +				.run((loaded) -> assertThat(loaded), +						.doesNotHaveBean(OpenSessionInViewInterceptor.class));, +					session.notifyListeners(, +							new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java, +		return new Condition<>((o) -> o.getName().startsWith(prefix),, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfigurationTests.java, +		this.context.run(, +				(loaded) -> assertThat(loaded.getBeansOfType(InfluxDB.class)).isEmpty());, +		this.context, +				.withPropertyValues("spring.influx.url=http://localhost",, +				.run((loaded -> assertThat(loaded.getBeansOfType(InfluxDB.class)), +						.hasSize(1)));, +				.withPropertyValues("spring.influx.url=http://localhost"), +				.run((loaded) -> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +				"spring.kafka.producer.acks=all", "spring.kafka.producer.batch-size=20",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +					assertThat(loaded), +							.hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		this.context, +				.withPropertyValues("spring.transaction.default-timeout=30",, +						"spring.transaction.rollback-on-commit-failure:true"), +				.run((loaded) -> {, +				.run((loaded) -> assertThat(loaded), +						.doesNotHaveBean(OpenSessionInViewInterceptor.class));, +					session.notifyListeners(, +							new PersistenceEvent(null, Event.TYPE.PRE_SAVE));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java, +		return new Condition<>((o) -> o.getName().startsWith(prefix),, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfigurationTests.java, +		this.context.run(, +				(loaded) -> assertThat(loaded.getBeansOfType(InfluxDB.class)).isEmpty());, +		this.context, +				.withPropertyValues("spring.influx.url=http://localhost",]