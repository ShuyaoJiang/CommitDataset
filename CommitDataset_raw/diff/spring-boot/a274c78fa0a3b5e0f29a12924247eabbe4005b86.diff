[+++ b/spring-boot-actuator/pom.xml, +			<groupId>io.projectreactor</groupId>, +			<artifactId>reactor-test</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>io.projectreactor</groupId>, +			<artifactId>reactor-test</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import java.util.LinkedHashMap;, +import java.util.function.Supplier;, +import org.springframework.boot.actuate.health.CompositeHealthIndicatorFactory;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicator;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.context.annotation.Import;, +import org.springframework.util.ObjectUtils;, +	@Import(HealthIndicatorsSupplierConfiguration.class), +				Supplier<Map<String, HealthIndicator>> healthIndicatorsSupplier) {, +			this.healthIndicator = new CompositeHealthIndicatorFactory().createHealthIndicator(, +					healthIndicatorsSupplier.get());, +	static class HealthIndicatorsSupplierConfiguration {, +, +		@Configuration, +		@ConditionalOnMissingClass("reactor.core.publisher.Flux"), +		static class SimpleHealthIndicatorsSupplierConfiguration {, +, +			@Bean, +			public Supplier<Map<String, HealthIndicator>> allHealthIndicators(, +					ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +				return () -> healthIndicators.getIfAvailable(Collections::emptyMap);, +			}, +, +		}, +, +		@Configuration, +		@ConditionalOnClass(name = "reactor.core.publisher.Flux"), +		static class ReactiveHealthIndicatorsSupplierConfiguration {, +, +			@Bean, +			public Supplier<Map<String, HealthIndicator>> allHealthIndicators(, +					ObjectProvider<Map<String, HealthIndicator>> healthIndicators,, +					ObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators) {, +				return () -> merge(healthIndicators.getIfAvailable(Collections::emptyMap),, +						reactiveHealthIndicators.getIfAvailable(Collections::emptyMap));, +			}, +, +			private Map<String, HealthIndicator> merge(, +					Map<String, HealthIndicator> healthIndicators,, +					Map<String, ReactiveHealthIndicator> reactiveHealthIndicators) {, +				if (ObjectUtils.isEmpty(reactiveHealthIndicators)) {, +					return healthIndicators;, +				}, +				Map<String, HealthIndicator> allIndicators = new LinkedHashMap<>(, +						healthIndicators);, +				reactiveHealthIndicators.forEach((beanName, indicator) -> {, +					allIndicators.computeIfAbsent(beanName, n -> adapt(indicator));, +				});, +				return allIndicators;, +			}, +, +			private HealthIndicator adapt(ReactiveHealthIndicator healthIndicator) {, +				return () -> healthIndicator.health().block();, +			}, +, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/pom.xml, +			<groupId>io.projectreactor</groupId>, +			<artifactId>reactor-test</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import java.util.LinkedHashMap;, +import java.util.function.Supplier;, +import org.springframework.boot.actuate.health.CompositeHealthIndicatorFactory;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicator;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;]