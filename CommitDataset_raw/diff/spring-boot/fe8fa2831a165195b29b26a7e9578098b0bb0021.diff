[+++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, +				System.out.println(key);, +			return read(false);, +		}, +, +		public boolean read(boolean wrappedLine) throws IOException {, +			if (this.columnNumber == 0) {, +				if (!wrappedLine) {, +				}, +			}, +				read(true);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, +				System.out.println(key);, +			return read(false);, +		}, +, +		public boolean read(boolean wrappedLine) throws IOException {, +			if (this.columnNumber == 0) {, +				if (!wrappedLine) {, +				}, +			}, +				read(true);, +++ b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java, +		assertThat(ours).isEqualTo(java);, +	public void getPropertyWithBang() throws Exception {, +		OriginTrackedValue value = this.properties.get("test-bang-property");, +		assertThat(getValue(value)).isEqualTo("foo!");, +		assertThat(getLocation(value)).isEqualTo("34:20");, +	}, +, +	@Test, +	public void getPropertyWithValueComment() throws Exception {, +		OriginTrackedValue value = this.properties.get("test-property-value-comment");, +		assertThat(getValue(value)).isEqualTo("foo !bar #foo");, +		assertThat(getLocation(value)).isEqualTo("36:29");, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java, +				System.out.println(key);, +			return read(false);, +		}, +, +		public boolean read(boolean wrappedLine) throws IOException {, +			if (this.columnNumber == 0) {, +				if (!wrappedLine) {, +				}, +			}, +				read(true);, +++ b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java, +		assertThat(ours).isEqualTo(java);, +	public void getPropertyWithBang() throws Exception {, +		OriginTrackedValue value = this.properties.get("test-bang-property");, +		assertThat(getValue(value)).isEqualTo("foo!");, +		assertThat(getLocation(value)).isEqualTo("34:20");, +	}, +, +	@Test, +	public void getPropertyWithValueComment() throws Exception {, +		OriginTrackedValue value = this.properties.get("test-property-value-comment");, +		assertThat(getValue(value)).isEqualTo("foo !bar #foo");, +		assertThat(getLocation(value)).isEqualTo("36:29");, +	}, +, +	@Test, +++ b/spring-boot/src/test/resources/org/springframework/boot/env/test-properties.properties, +test-bang-property=foo!, +another=bar, +test-property-value-comment=foo \, +!bar #foo, +test-multiline-immediate-bang=\, +!foo]