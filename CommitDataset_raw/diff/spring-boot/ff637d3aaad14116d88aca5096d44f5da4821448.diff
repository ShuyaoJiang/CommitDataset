[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			String current = extractIndexedPaths(path, nodes);, +			for (String name : StringUtils.delimitedListToStringArray(current, ".")) {, +				if (StringUtils.hasText(name)) {, +					nodes.add(new PropertyNode(name));, +				}, +			}, +			return nodes;, +		}, +, +		private String extractIndexedPaths(String path, List<PathNode> nodes) {, +			int begin = 0;, +			int startRef = path.indexOf("[");, +			String current = path;, +			while (startRef >= 0) {, +				if (startRef > begin) {, +					nodes.addAll(splitPath(current.substring(begin, startRef)));, +				}, +				int endRef = current.indexOf("]", startRef);, +				if (endRef > 0) {, +					String sub = current.substring(startRef + 1, endRef);, +				begin = endRef + 1;, +				current = current.substring(begin);, +				startRef = current.indexOf("[");, +			return current;, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			String current = extractIndexedPaths(path, nodes);, +			for (String name : StringUtils.delimitedListToStringArray(current, ".")) {, +				if (StringUtils.hasText(name)) {, +					nodes.add(new PropertyNode(name));, +				}, +			}, +			return nodes;, +		}, +, +		private String extractIndexedPaths(String path, List<PathNode> nodes) {, +			int begin = 0;, +			int startRef = path.indexOf("[");, +			String current = path;, +			while (startRef >= 0) {, +				if (startRef > begin) {, +					nodes.addAll(splitPath(current.substring(begin, startRef)));, +				}, +				int endRef = current.indexOf("]", startRef);, +				if (endRef > 0) {, +					String sub = current.substring(startRef + 1, endRef);, +				begin = endRef + 1;, +				current = current.substring(begin);, +				startRef = current.indexOf("[");, +			return current;, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +	public void testBindNestedMapOfStringReferenced() throws Exception {, +		TargetWithNestedMapOfString target = new TargetWithNestedMapOfString();, +		bind(target, "nested.foo: bar\n" + "nested[value.foo]: 123");, +		assertEquals("bar", target.getNested().get("foo"));, +		assertEquals("123", target.getNested().get("value.foo"));, +	}, +, +	@Test, +	@Test, +	public void testBindNestedMapBracketReferencedAndPeriods() throws Exception {, +		TargetWithNestedMap target = new TargetWithNestedMap();, +		bind(target, "nested[foo]: bar\n" + "nested[foo.value]: 123");, +		assertEquals("123", target.getNested().get("foo.value"));, +	}, +]