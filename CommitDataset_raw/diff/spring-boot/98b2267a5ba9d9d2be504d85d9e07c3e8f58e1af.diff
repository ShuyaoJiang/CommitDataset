[+++ b/spring-boot-dependencies/pom.xml, +		<rest-assured.version>3.0.2</rest-assured.version>, +				<groupId>io.rest-assured</groupId>, +				<artifactId>rest-assured</artifactId>, +				<version>${rest-assured.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-dependencies/pom.xml, +		<rest-assured.version>3.0.2</rest-assured.version>, +				<groupId>io.rest-assured</groupId>, +				<artifactId>rest-assured</artifactId>, +				<version>${rest-assured.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-parent/src/checkstyle/checkstyle.xml, +				value="io.restassured.RestAssured.*, org.assertj.core.api.Assertions.*, org.junit.Assert.*, org.junit.Assume.*, org.junit.internal.matchers.ThrowableMessageMatcher.*, org.hamcrest.CoreMatchers.*, org.hamcrest.Matchers.*, org.springframework.boot.configurationprocessor.ConfigurationMetadataMatchers.*, org.springframework.boot.configurationprocessor.TestCompiler.*, org.springframework.boot.test.autoconfigure.AutoConfigurationImportedCondition.*, org.mockito.Mockito.*, org.mockito.BDDMockito.*, org.mockito.ArgumentMatchers.*, org.mockito.Matchers.*, org.springframework.restdocs.hypermedia.HypermediaDocumentation.*, org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.*, org.springframework.restdocs.operation.preprocess.Preprocessors.*, org.springframework.restdocs.restassured3.operation.preprocess.RestAssuredPreprocessors.*, org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.*, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*, org.springframework.test.web.servlet.result.MockMvcResultMatchers.*, org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*, org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*, org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo, org.springframework.test.web.client.ExpectedCount.*, org.springframework.test.web.client.match.MockRestRequestMatchers.*, org.springframework.test.web.client.response.MockRestResponseCreators.*" />, +++ b/spring-boot-dependencies/pom.xml, +		<rest-assured.version>3.0.2</rest-assured.version>, +				<groupId>io.rest-assured</groupId>, +				<artifactId>rest-assured</artifactId>, +				<version>${rest-assured.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-parent/src/checkstyle/checkstyle.xml, +				value="io.restassured.RestAssured.*, org.assertj.core.api.Assertions.*, org.junit.Assert.*, org.junit.Assume.*, org.junit.internal.matchers.ThrowableMessageMatcher.*, org.hamcrest.CoreMatchers.*, org.hamcrest.Matchers.*, org.springframework.boot.configurationprocessor.ConfigurationMetadataMatchers.*, org.springframework.boot.configurationprocessor.TestCompiler.*, org.springframework.boot.test.autoconfigure.AutoConfigurationImportedCondition.*, org.mockito.Mockito.*, org.mockito.BDDMockito.*, org.mockito.ArgumentMatchers.*, org.mockito.Matchers.*, org.springframework.restdocs.hypermedia.HypermediaDocumentation.*, org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.*, org.springframework.restdocs.operation.preprocess.Preprocessors.*, org.springframework.restdocs.restassured3.operation.preprocess.RestAssuredPreprocessors.*, org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.*, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*, org.springframework.test.web.servlet.result.MockMvcResultMatchers.*, org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*, org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*, org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo, org.springframework.test.web.client.ExpectedCount.*, org.springframework.test.web.client.match.MockRestRequestMatchers.*, org.springframework.test.web.client.response.MockRestResponseCreators.*" />, +++ b/spring-boot-test-autoconfigure/pom.xml, +			<groupId>io.rest-assured</groupId>, +			<artifactId>rest-assured</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.restdocs</groupId>, +			<artifactId>spring-restdocs-restassured</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-dependencies/pom.xml, +		<rest-assured.version>3.0.2</rest-assured.version>, +				<groupId>io.rest-assured</groupId>, +				<artifactId>rest-assured</artifactId>, +				<version>${rest-assured.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-parent/src/checkstyle/checkstyle.xml, +				value="io.restassured.RestAssured.*, org.assertj.core.api.Assertions.*, org.junit.Assert.*, org.junit.Assume.*, org.junit.internal.matchers.ThrowableMessageMatcher.*, org.hamcrest.CoreMatchers.*, org.hamcrest.Matchers.*, org.springframework.boot.configurationprocessor.ConfigurationMetadataMatchers.*, org.springframework.boot.configurationprocessor.TestCompiler.*, org.springframework.boot.test.autoconfigure.AutoConfigurationImportedCondition.*, org.mockito.Mockito.*, org.mockito.BDDMockito.*, org.mockito.ArgumentMatchers.*, org.mockito.Matchers.*, org.springframework.restdocs.hypermedia.HypermediaDocumentation.*, org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.*, org.springframework.restdocs.operation.preprocess.Preprocessors.*, org.springframework.restdocs.restassured3.operation.preprocess.RestAssuredPreprocessors.*, org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.*, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*, org.springframework.test.web.servlet.result.MockMvcResultMatchers.*, org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*, org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*, org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo, org.springframework.test.web.client.ExpectedCount.*, org.springframework.test.web.client.match.MockRestRequestMatchers.*, org.springframework.test.web.client.response.MockRestResponseCreators.*" />, +++ b/spring-boot-test-autoconfigure/pom.xml, +			<groupId>io.rest-assured</groupId>, +			<artifactId>rest-assured</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.restdocs</groupId>, +			<artifactId>spring-restdocs-restassured</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java, +import io.restassured.builder.RequestSpecBuilder;, +import io.restassured.specification.RequestSpecification;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.restdocs.restassured3.RestAssuredRestDocumentation;, +import org.springframework.restdocs.restassured3.RestAssuredRestDocumentationConfigurer;, + * @author Eddú Meléndez, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	@ConditionalOnClass(MockMvcRestDocumentation.class), +	static class RestDocsMockMvcAutoConfiguration {, +, +, +	@Configuration, +	@ConditionalOnClass({ RequestSpecification.class, RestAssuredRestDocumentation.class }), +	static class RestDocsRestAssuredAutoConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(RequestSpecification.class), +		public RequestSpecification restDocsRestAssuredConfigurer(, +				ObjectProvider<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizerProvider,, +				RestDocumentationContextProvider contextProvider) {, +			RestAssuredRestDocumentationConfigurer configurer = RestAssuredRestDocumentation, +					.documentationConfiguration(contextProvider);, +			RestDocsRestAssuredConfigurationCustomizer configurationCustomizer = configurationCustomizerProvider.getIfAvailable();, +			if (configurationCustomizer != null) {, +				configurationCustomizer.customize(configurer);, +			}, +			return new RequestSpecBuilder().addFilter(configurer).build();, +		}, +, +		@Bean, +		@ConfigurationProperties(prefix = "spring.test.restdocs")]