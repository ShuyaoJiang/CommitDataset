[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupConfig;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;, + * can override that by providing your own {@link GroovyMarkupConfig} or even a, + * {@link MarkupTemplateEngine} of a different type., + * @author Brian Clozel, +	@Configuration, +	@ConditionalOnClass({ MarkupTemplateEngine.class, GroovyMarkupConfigurer.class }), +	public static class GroovyMarkupConfiguration {, +, +		@Autowired(required = false), +		private MarkupTemplateEngine templateEngine;, +, +		@PostConstruct, +		public void checkTemplateLocationExists() {, +			if (this.properties.isCheckTemplateLocation()) {, +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getPrefix());, +				Assert.state(resource.exists(), "Cannot find template location: ", +						+ resource + " (please add some templates, ", +						+ "check your Groovy configuration, or set ", +						+ "spring.groovy.template.check-template-location=false)");, +			}, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(GroovyMarkupConfig.class), +		@ConfigurationProperties(prefix = "spring.groovy.template.configuration"), +		public GroovyMarkupConfigurer groovyMarkupConfigurer() {, +			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();, +			configurer.setResourceLoaderPath(this.properties.getPrefix());, +			configurer.setCacheTemplates(this.properties.isCache());, +			if (this.templateEngine != null) {, +				configurer.setTemplateEngine(this.templateEngine);, +			}, +			return configurer;, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnMissingClass(name = "groovy.text.markup.MarkupTemplateEngine"), +	public static class GroovySimpleTemplateEngineConfiguration implements, +		public SimpleTemplateEngine groovyTemplateEngine() throws Exception {, +		@ConditionalOnMissingBean(name = "groovyMarkupViewResolver"), +		@ConditionalOnClass(MarkupTemplateEngine.class), +		public GroovyMarkupViewResolver groovyMarkupViewResolver() {, +			GroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();, +			configureViewResolver(resolver);, +			return resolver;, +		}, +, +		@Bean, +		@ConditionalOnMissingClass(MarkupTemplateEngine.class), +			configureViewResolver(resolver);, +			resolver.setTemplateEngine(engine);, +			return resolver;, +		}, +, +		private void configureViewResolver(UrlBasedViewResolver resolver) {, +			resolver.setRequestContextAttribute("spring");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupConfig;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;, + * can override that by providing your own {@link GroovyMarkupConfig} or even a, + * {@link MarkupTemplateEngine} of a different type., + * @author Brian Clozel, +	@Configuration, +	@ConditionalOnClass({ MarkupTemplateEngine.class, GroovyMarkupConfigurer.class }), +	public static class GroovyMarkupConfiguration {, +, +		@Autowired(required = false), +		private MarkupTemplateEngine templateEngine;, +, +		@PostConstruct, +		public void checkTemplateLocationExists() {, +			if (this.properties.isCheckTemplateLocation()) {, +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getPrefix());, +				Assert.state(resource.exists(), "Cannot find template location: ", +						+ resource + " (please add some templates, ", +						+ "check your Groovy configuration, or set ", +						+ "spring.groovy.template.check-template-location=false)");, +			}, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(GroovyMarkupConfig.class), +		@ConfigurationProperties(prefix = "spring.groovy.template.configuration"), +		public GroovyMarkupConfigurer groovyMarkupConfigurer() {, +			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();, +			configurer.setResourceLoaderPath(this.properties.getPrefix());, +			configurer.setCacheTemplates(this.properties.isCache());, +			if (this.templateEngine != null) {]