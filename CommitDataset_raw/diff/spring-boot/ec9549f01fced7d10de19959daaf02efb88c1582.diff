[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +import io.searchbox.core.Index;, +import io.searchbox.core.Search;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;, +import org.springframework.util.SocketUtils;, + * @author Andy Wilkinson, +		load(CustomJestClient.class,, +				"spring.elasticsearch.jest.uris=http://localhost:9200");, +	@Test, +	public void jestCanCommunicateWithElasticsearchInstance() throws IOException {, +		int port = SocketUtils.findAvailableTcpPort();, +		load(ElasticsearchAutoConfiguration.class,, +				"spring.data.elasticsearch.properties.path.home:target/elastic",, +				"spring.data.elasticsearch.properties.http.enabled:true",, +				"spring.data.elasticsearch.properties.http.port:" + port,, +				"spring.elasticsearch.jest.uris:http://localhost:" + port);, +		JestClient client = this.context.getBean(JestClient.class);, +		Map<String, String> source = new HashMap<String, String>();, +		source.put("a", "alpha");, +		source.put("b", "bravo");, +		Index index = new Index.Builder(source).index("foo").type("bar").build();, +		client.execute(index);, +		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +		searchSourceBuilder.query(QueryBuilders.matchQuery("a", "alpha"));, +		assertThat(client.execute(new Search.Builder(searchSourceBuilder.toString()), +				.addIndex("foo").build()).getResponseCode()).isEqualTo(200);, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +import io.searchbox.core.Index;, +import io.searchbox.core.Search;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;, +import org.springframework.util.SocketUtils;, + * @author Andy Wilkinson, +		load(CustomJestClient.class,, +				"spring.elasticsearch.jest.uris=http://localhost:9200");, +	@Test, +	public void jestCanCommunicateWithElasticsearchInstance() throws IOException {, +		int port = SocketUtils.findAvailableTcpPort();, +		load(ElasticsearchAutoConfiguration.class,, +				"spring.data.elasticsearch.properties.path.home:target/elastic",, +				"spring.data.elasticsearch.properties.http.enabled:true",, +				"spring.data.elasticsearch.properties.http.port:" + port,, +				"spring.elasticsearch.jest.uris:http://localhost:" + port);, +		JestClient client = this.context.getBean(JestClient.class);, +		Map<String, String> source = new HashMap<String, String>();, +		source.put("a", "alpha");, +		source.put("b", "bravo");, +		Index index = new Index.Builder(source).index("foo").type("bar").build();, +		client.execute(index);, +		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +		searchSourceBuilder.query(QueryBuilders.matchQuery("a", "alpha"));, +		assertThat(client.execute(new Search.Builder(searchSourceBuilder.toString()), +				.addIndex("foo").build()).getResponseCode()).isEqualTo(200);, +	}, +++ b/spring-boot-dependencies/pom.xml, +		<jackson.version>2.7.6</jackson.version>]