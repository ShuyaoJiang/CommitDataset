[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +		map.from(config::getMissingQueuesFatal).whenNonNull(), +				.to(factory::setMissingQueuesFatal);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +		map.from(config::getMissingQueuesFatal).whenNonNull(), +				.to(factory::setMissingQueuesFatal);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker or the container should be stopped if queues have been, +		 * removed while the container is running., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(Boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(Boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +		map.from(config::getMissingQueuesFatal).whenNonNull(), +				.to(factory::setMissingQueuesFatal);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker or the container should be stopped if queues have been, +		 * removed while the container is running., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(Boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(Boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/SimpleRabbitListenerContainerFactoryConfigurer.java, +		map.from(config::getMissingQueuesFatal).whenNonNull(), +				.to(factory::setMissingQueuesFatal);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +		map.from(config::getMissingQueuesFatal).whenNonNull(), +				.to(factory::setMissingQueuesFatal);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker or the container should be stopped if queues have been, +		 * removed while the container is running., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(Boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +		/**, +		 * Whether the context should be ended up with failure if there are no any queues, +		 * available on the broker., +		 */, +		private Boolean missingQueuesFatal;, +, +		public Boolean getMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}]