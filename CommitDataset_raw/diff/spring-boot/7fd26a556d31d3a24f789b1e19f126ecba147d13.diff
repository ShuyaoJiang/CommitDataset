[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Environment} and not "false"., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Environment} and not "false"., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.social.connect.ConnectionFactory;, +			SocialAutoConfigurerAdapter {, +		protected String getPropertyPrefix() {, +			return "spring.social.facebook.";, +		protected ConnectionFactory<?> createConnectionFactory(, +				RelaxedPropertyResolver properties) {, +			return new FacebookConnectionFactory(, +					properties.getRequiredProperty("app-id"),, +					properties.getRequiredProperty("app-secret"));, +		@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Environment} and not "false"., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.social.connect.ConnectionFactory;, +			SocialAutoConfigurerAdapter {, +		protected String getPropertyPrefix() {, +			return "spring.social.facebook.";, +		protected ConnectionFactory<?> createConnectionFactory(, +				RelaxedPropertyResolver properties) {, +			return new FacebookConnectionFactory(, +					properties.getRequiredProperty("app-id"),, +					properties.getRequiredProperty("app-secret"));, +		@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/LinkedInAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.social.connect.ConnectionFactory;, +			SocialAutoConfigurerAdapter {, +		protected String getPropertyPrefix() {, +			return "spring.social.linkedin.";, +		protected ConnectionFactory<?> createConnectionFactory(, +				RelaxedPropertyResolver properties) {, +			return new LinkedInConnectionFactory(, +					properties.getRequiredProperty("app-id"),, +					properties.getRequiredProperty("app-secret"));, +		@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Environment} and not "false"., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.social.connect.ConnectionFactory;, +			SocialAutoConfigurerAdapter {, +		protected String getPropertyPrefix() {, +			return "spring.social.facebook.";, +		protected ConnectionFactory<?> createConnectionFactory(, +				RelaxedPropertyResolver properties) {, +			return new FacebookConnectionFactory(, +					properties.getRequiredProperty("app-id"),, +					properties.getRequiredProperty("app-secret"));, +		@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/LinkedInAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.social.connect.ConnectionFactory;, +			SocialAutoConfigurerAdapter {, +		protected String getPropertyPrefix() {, +			return "spring.social.linkedin.";, +		protected ConnectionFactory<?> createConnectionFactory(, +				RelaxedPropertyResolver properties) {, +			return new LinkedInConnectionFactory(, +					properties.getRequiredProperty("app-id"),, +					properties.getRequiredProperty("app-secret"));, +		@ConditionalOnProperty(prefix = "spring.social.", value = "auto-connection-views"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.social;, +, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;, +import org.springframework.social.config.annotation.SocialConfigurerAdapter;, +import org.springframework.social.connect.ConnectionFactory;, +, +/**, + * Base class for auto-configured {@link SocialConfigurerAdapter}s., + * , + * @author Phillip Webb, + * @author Craig Walls, + * @since 1.1.0]