[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.context;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AnnotatedElement;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.context.annotation.ImportSelector;, +import org.springframework.context.support.AbstractApplicationContext;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.annotation.Order;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.test.context.ContextCustomizer;, +import org.springframework.test.context.MergedContextConfiguration;, +, +/**, + * {@link ContextCustomizer} to allow {@code @Import} annotations to be used directly on, + * test classes., + *, + * @author Phillip Webb, + * @see ImportsContextCustomizerFactory, + */, +class ImportsContextCustomizer implements ContextCustomizer {, +, +	static final String TEST_CLASS_ATTRIBUTE = "testClass";, +, +	private final Class<?> testClass;, +, +	private final ContextCustomizerKey key;, +, +	ImportsContextCustomizer(Class<?> testClass) {, +		this.testClass = testClass;, +		this.key = new ContextCustomizerKey(testClass);, +	}, +, +	@Override, +	public void customizeContext(ConfigurableApplicationContext context,, +			MergedContextConfiguration mergedContextConfiguration) {, +		BeanDefinitionRegistry registry = getBeanDefinitionRegistry(context);, +		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(, +				registry);, +		registerCleanupPostProcessor(registry, reader);, +		registerImportsConfiguration(registry, reader);, +	}, +, +	private void registerCleanupPostProcessor(BeanDefinitionRegistry registry,, +			AnnotatedBeanDefinitionReader reader) {, +		BeanDefinition definition = registerBean(registry, reader,, +				ImportsCleanupPostProcessor.BEAN_NAME, ImportsCleanupPostProcessor.class);, +		definition.getConstructorArgumentValues().addIndexedArgumentValue(0,, +				this.testClass);, +	}, +, +	private void registerImportsConfiguration(BeanDefinitionRegistry registry,, +			AnnotatedBeanDefinitionReader reader) {, +		BeanDefinition definition = registerBean(registry, reader,, +				ImportsConfiguration.BEAN_NAME, ImportsConfiguration.class);, +		definition.setAttribute(TEST_CLASS_ATTRIBUTE, this.testClass);, +	}, +, +	private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {, +		if (context instanceof BeanDefinitionRegistry) {, +			return (BeanDefinitionRegistry) context;, +		}, +		if (context instanceof AbstractApplicationContext) {, +			return (BeanDefinitionRegistry) ((AbstractApplicationContext) context), +					.getBeanFactory();, +		}]