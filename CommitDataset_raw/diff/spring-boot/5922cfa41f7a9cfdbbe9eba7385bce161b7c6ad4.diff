[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +import org.springframework.boot.autoconfigure.jndi.JndiPropertiesHidingClassLoader;, +import org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +import org.springframework.boot.autoconfigure.jndi.JndiPropertiesHidingClassLoader;, +import org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfigurationTests.java, +import javax.naming.Context;, +import org.junit.Before;, +import org.springframework.boot.autoconfigure.jndi.JndiPropertiesHidingClassLoader;, +import org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory;, +	private ClassLoader threadContextClassLoader;, +, +	private String initialContextFactory;, +, +	@Before, +	public void setupJndi() {, +		this.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);, +		System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +				TestableInitialContextFactory.class.getName());, +	}, +, +	@Before, +	public void setupThreadContextClassLoader() {, +		this.threadContextClassLoader = Thread.currentThread().getContextClassLoader();, +		Thread.currentThread().setContextClassLoader(, +				new JndiPropertiesHidingClassLoader(getClass().getClassLoader()));, +	}, +	public void close() {, +		TestableInitialContextFactory.clearAll();, +		if (this.initialContextFactory != null) {, +			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +					this.initialContextFactory);, +		}, +		else {, +			System.clearProperty(Context.INITIAL_CONTEXT_FACTORY);, +		Thread.currentThread().setContextClassLoader(this.threadContextClassLoader);, +		configureJndi("foo", dataSource);, +		configureJndi("foo", dataSource);, +		configureJndi("foo", dataSource);, +	private void configureJndi(String name, DataSource dataSource), +		TestableInitialContextFactory.bind(name, dataSource);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +import org.springframework.boot.autoconfigure.jndi.JndiPropertiesHidingClassLoader;, +import org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfigurationTests.java, +import javax.naming.Context;, +import org.junit.Before;, +import org.springframework.boot.autoconfigure.jndi.JndiPropertiesHidingClassLoader;, +import org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory;, +	private ClassLoader threadContextClassLoader;, +, +	private String initialContextFactory;, +, +	@Before, +	public void setupJndi() {, +		this.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);, +		System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +				TestableInitialContextFactory.class.getName());, +	}, +, +	@Before, +	public void setupThreadContextClassLoader() {, +		this.threadContextClassLoader = Thread.currentThread().getContextClassLoader();, +		Thread.currentThread().setContextClassLoader(, +				new JndiPropertiesHidingClassLoader(getClass().getClassLoader()));, +	}, +	public void close() {, +		TestableInitialContextFactory.clearAll();, +		if (this.initialContextFactory != null) {, +			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,, +					this.initialContextFactory);, +		}, +		else {, +			System.clearProperty(Context.INITIAL_CONTEXT_FACTORY);, +		Thread.currentThread().setContextClassLoader(this.threadContextClassLoader);, +		configureJndi("foo", dataSource);, +		configureJndi("foo", dataSource);, +		configureJndi("foo", dataSource);, +	private void configureJndi(String name, DataSource dataSource), +		TestableInitialContextFactory.bind(name, dataSource);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jndi/JndiPropertiesHidingClassLoader.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jndi;, +]