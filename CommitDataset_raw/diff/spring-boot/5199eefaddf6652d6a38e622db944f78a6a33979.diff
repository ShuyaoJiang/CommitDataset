[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.logging;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +, +/**, + * Deferred {@link Log} that can be used to store messages that shouldn't be written until, + * the logging system is fully initialized., + *, + * @author Phillip Webb, + * @since 1.3.0, + */, +public class DeferredLog implements Log {, +, +	private List<Line> lines = new ArrayList<Line>();, +, +	@Override, +	public boolean isTraceEnabled() {, +		return true;, +	}, +, +	@Override, +	public boolean isDebugEnabled() {, +		return true;, +	}, +, +	@Override, +	public boolean isInfoEnabled() {, +		return true;, +	}, +, +	@Override, +	public boolean isWarnEnabled() {, +		return true;, +	}, +, +	@Override, +	public boolean isErrorEnabled() {, +		return true;, +	}, +, +	@Override, +	public boolean isFatalEnabled() {, +		return true;, +	}, +, +	@Override, +	public void trace(Object message) {, +		log(LogLevel.TRACE, message, null);, +	}, +, +	@Override, +	public void trace(Object message, Throwable t) {, +		log(LogLevel.TRACE, message, t);, +	}, +, +	@Override, +	public void debug(Object message) {, +		log(LogLevel.DEBUG, message, null);, +	}, +, +	@Override, +	public void debug(Object message, Throwable t) {, +		log(LogLevel.DEBUG, message, t);, +	}, +, +	@Override, +	public void info(Object message) {, +		log(LogLevel.INFO, message, null);, +	}, +, +	@Override, +	public void info(Object message, Throwable t) {, +		log(LogLevel.INFO, message, t);, +	}, +, +	@Override, +	public void warn(Object message) {, +		log(LogLevel.WARN, message, null);, +	}, +]