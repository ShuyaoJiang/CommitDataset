[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * @author Artsiom Yudovin, +, +		boolean uniqueName = this.environment.getProperty("spring.jmx.unique-names",, +				Boolean.class, false);, +		namingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueName);, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * @author Artsiom Yudovin, +, +		boolean uniqueName = this.environment.getProperty("spring.jmx.unique-names",, +				Boolean.class, false);, +		namingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueName);, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.jmx.unique-names",, +      "type": "java.lang.Boolean",, +      "description": "Whether to ensure that ObjectNames are modified in case of conflict.",, +      "defaultValue": false, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * @author Artsiom Yudovin, +, +		boolean uniqueName = this.environment.getProperty("spring.jmx.unique-names",, +				Boolean.class, false);, +		namingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueName);, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.jmx.unique-names",, +      "type": "java.lang.Boolean",, +      "description": "Whether to ensure that ObjectNames are modified in case of conflict.",, +      "defaultValue": false, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java, + * @author Artsiom Yudovin, +		env.setProperty("spring.jmx.unique-names", "true");, +		assertThat(ReflectionTestUtils.getField(naming, "ensureUniqueRuntimeObjectNames")), +				.isEqualTo(true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * @author Artsiom Yudovin, +, +		boolean uniqueName = this.environment.getProperty("spring.jmx.unique-names",, +				Boolean.class, false);, +		namingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueName);, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.jmx.unique-names",, +      "type": "java.lang.Boolean",, +      "description": "Whether to ensure that ObjectNames are modified in case of conflict.",, +      "defaultValue": false, +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java, + * @author Artsiom Yudovin, +		env.setProperty("spring.jmx.unique-names", "true");, +		assertThat(ReflectionTestUtils.getField(naming, "ensureUniqueRuntimeObjectNames")), +				.isEqualTo(true);, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.jmx.unique-names=false # Set if unique runtime object names should be ensured.]