[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, +	private static final String[] REGEX_PARTS = { "*", "$", "^", "+", "[" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilter.java, +	private static final String[] REGEX_PARTS = { "*", "$", "^", "+", "[" };, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/NamePatternFilterTests.java, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +	public void regexRepetitionZeroOrMore() {, +	}, +	@Test, +	public void regexRepetitionOneOrMore() {, +		MockNamePatternFilter filter = new MockNamePatternFilter();, +		Map<String, Object> results = filter.getResults("fo.+");, +		assertThat(results.get("foo"), equalTo((Object) "foo"));, +		assertThat(results.get("fool"), equalTo((Object) "fool"));, +		assertThat(filter.isGetNamesCalled(), equalTo(true));, +	}, +, +	@Test, +	public void regexEndAnchor() {, +		MockNamePatternFilter filter = new MockNamePatternFilter();, +		Map<String, Object> results = filter.getResults("foo$");, +		assertThat(results.get("foo"), equalTo((Object) "foo"));, +		assertThat(results.get("fool"), is(nullValue()));, +		assertThat(filter.isGetNamesCalled(), equalTo(true));, +	}, +, +	@Test, +	public void regexStartAnchor() {, +		MockNamePatternFilter filter = new MockNamePatternFilter();, +		Map<String, Object> results = filter.getResults("^foo");, +		assertThat(results.get("foo"), equalTo((Object) "foo"));, +		assertThat(results.get("fool"), is(nullValue()));, +		assertThat(filter.isGetNamesCalled(), equalTo(true));, +	}, +, +	@Test, +	public void regexCharacterClass() {, +		MockNamePatternFilter filter = new MockNamePatternFilter();, +		Map<String, Object> results = filter.getResults("fo[a-z]l");, +		assertThat(results.get("foo"), is(nullValue()));, +		assertThat(results.get("fool"), equalTo((Object) "fool"));, +		assertThat(filter.isGetNamesCalled(), equalTo(true));]