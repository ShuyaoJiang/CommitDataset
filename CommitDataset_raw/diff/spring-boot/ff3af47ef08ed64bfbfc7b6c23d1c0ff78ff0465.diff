[+++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +import java.util.LinkedHashMap;, +		// YAML can have numbers as keys, +		Map<String, Object> result = new LinkedHashMap<String, Object>();, +		Map<Object, Object> map = (Map<Object, Object>) object;, +		for (Entry<Object, Object> entry : map.entrySet()) {, +			Object key = entry.getKey();, +			if (key instanceof CharSequence) {, +				result.put(key.toString(), entry.getValue());, +			}, +			else {, +				// It has to be a map key in this case, +				result.put("[" + key.toString() + "]", entry.getValue());, +			}, +		}, +		return result;, +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +import java.util.LinkedHashMap;, +		// YAML can have numbers as keys, +		Map<String, Object> result = new LinkedHashMap<String, Object>();, +		Map<Object, Object> map = (Map<Object, Object>) object;, +		for (Entry<Object, Object> entry : map.entrySet()) {, +			Object key = entry.getKey();, +			if (key instanceof CharSequence) {, +				result.put(key.toString(), entry.getValue());, +			}, +			else {, +				// It has to be a map key in this case, +				result.put("[" + key.toString() + "]", entry.getValue());, +			}, +		}, +		return result;, +++ b/spring-boot/src/test/java/org/springframework/boot/config/YamlProcessorTests.java, +	@Test, +	public void integerKeyBehaves() {, +		this.processor.setResources(new Resource[] { new ByteArrayResource(, +				"foo: bar\n1: bar".getBytes()) });, +		this.processor.process(new MatchCallback() {, +			@Override, +			public void process(Properties properties, Map<String, Object> map) {, +				assertEquals("bar", properties.get("[1]"));, +				assertEquals(2, properties.size());, +			}, +		});, +	}, +]