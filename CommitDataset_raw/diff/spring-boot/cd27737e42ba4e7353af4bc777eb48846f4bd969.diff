[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		return bean;, +	}, +, +	private ConfigurationProperties getAnnotation(Object bean, String beanName) {, +		ConfigurationProperties annotation = this.beans.findFactoryAnnotation(beanName,, +		if (annotation == null) {, +			annotation = AnnotationUtils.findAnnotation(bean.getClass(),, +					ConfigurationProperties.class);, +		return annotation;, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		return bean;, +	}, +, +	private ConfigurationProperties getAnnotation(Object bean, String beanName) {, +		ConfigurationProperties annotation = this.beans.findFactoryAnnotation(beanName,, +		if (annotation == null) {, +			annotation = AnnotationUtils.findAnnotation(bean.getClass(),, +					ConfigurationProperties.class);, +		return annotation;, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		ConfigurationProperty property = findProperty(name, context);, +		if (property == null && containsNoDescendantOf(context.streamSources(), name)) {, +			return null;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		return bean;, +	}, +, +	private ConfigurationProperties getAnnotation(Object bean, String beanName) {, +		ConfigurationProperties annotation = this.beans.findFactoryAnnotation(beanName,, +		if (annotation == null) {, +			annotation = AnnotationUtils.findAnnotation(bean.getClass(),, +					ConfigurationProperties.class);, +		return annotation;, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		ConfigurationProperty property = findProperty(name, context);, +		if (property == null && containsNoDescendantOf(context.streamSources(), name)) {, +			return null;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +				.map(this::adapt).iterator();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		return bean;, +	}, +, +	private ConfigurationProperties getAnnotation(Object bean, String beanName) {, +		ConfigurationProperties annotation = this.beans.findFactoryAnnotation(beanName,, +		if (annotation == null) {, +			annotation = AnnotationUtils.findAnnotation(bean.getClass(),, +					ConfigurationProperties.class);, +		return annotation;, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		ConfigurationProperty property = findProperty(name, context);, +		if (property == null && containsNoDescendantOf(context.streamSources(), name)) {, +			return null;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +				.map(this::adapt).iterator();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +			this.configurationPropertySourceCache.put(configurationPropertyName, mapping);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		return bean;, +	}, +, +	private ConfigurationProperties getAnnotation(Object bean, String beanName) {, +		ConfigurationProperties annotation = this.beans.findFactoryAnnotation(beanName,, +		if (annotation == null) {, +			annotation = AnnotationUtils.findAnnotation(bean.getClass(),, +					ConfigurationProperties.class);, +		return annotation;, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		ConfigurationProperty property = findProperty(name, context);, +		if (property == null && containsNoDescendantOf(context.streamSources(), name)) {, +			return null;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +				.map(this::adapt).iterator();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +			this.configurationPropertySourceCache.put(configurationPropertyName, mapping);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/FilteredIterableConfigurationPropertiesSource.java, +		return Optional.of(stream().anyMatch(name::isAncestorOf));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		ConfigurationProperties annotation = getAnnotation(bean, beanName);, +			postProcessBeforeInitialization(bean, beanName, annotation);]