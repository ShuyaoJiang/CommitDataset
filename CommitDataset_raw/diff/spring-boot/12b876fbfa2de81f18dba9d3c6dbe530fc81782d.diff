[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcher.java, + * {@link PropertyNamePatternsMatcher} that matches when a property name exactly matches, + * one of the given names, or starts with one of the given names followed by a delimiter., + * This implementation is optimized for frequent calls., +	private final char[] delimiters;, +, +	private final boolean ignoreCase;, +, +	protected DefaultPropertyNamePatternsMatcher(char[] delimiters, String... names) {, +		this(delimiters, false, names);, +	protected DefaultPropertyNamePatternsMatcher(char[] delimiters, boolean ignoreCase,, +			String... names) {, +		this(delimiters, ignoreCase, new HashSet<String>(Arrays.asList(names)));, +	}, +, +	public DefaultPropertyNamePatternsMatcher(char[] delimiters, boolean ignoreCase,, +			Set<String> names) {, +		this.delimiters = delimiters;, +		this.ignoreCase = ignoreCase;, +					match[nameIndex] = false;, +						if (isCharMatch(this.names[nameIndex].charAt(charIndex),, +								propertyNameChars[charIndex])) {, +						if (isDelimeter(charAfter)) {, +	private boolean isCharMatch(char c1, char c2) {, +		if (this.ignoreCase) {, +			return Character.toLowerCase(c1) == Character.toLowerCase(c2);, +		}, +		return c1 == c2;, +	}, +, +	private boolean isDelimeter(char c) {, +		for (char delimiter : this.delimiters) {, +			if (c == delimiter) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcher.java, + * {@link PropertyNamePatternsMatcher} that matches when a property name exactly matches, + * one of the given names, or starts with one of the given names followed by a delimiter., + * This implementation is optimized for frequent calls., +	private final char[] delimiters;, +, +	private final boolean ignoreCase;, +, +	protected DefaultPropertyNamePatternsMatcher(char[] delimiters, String... names) {, +		this(delimiters, false, names);, +	protected DefaultPropertyNamePatternsMatcher(char[] delimiters, boolean ignoreCase,, +			String... names) {, +		this(delimiters, ignoreCase, new HashSet<String>(Arrays.asList(names)));, +	}, +, +	public DefaultPropertyNamePatternsMatcher(char[] delimiters, boolean ignoreCase,, +			Set<String> names) {, +		this.delimiters = delimiters;, +		this.ignoreCase = ignoreCase;, +					match[nameIndex] = false;, +						if (isCharMatch(this.names[nameIndex].charAt(charIndex),, +								propertyNameChars[charIndex])) {, +						if (isDelimeter(charAfter)) {, +	private boolean isCharMatch(char c1, char c2) {, +		if (this.ignoreCase) {, +			return Character.toLowerCase(c1) == Character.toLowerCase(c2);, +		}, +		return c1 == c2;, +	}, +, +	private boolean isDelimeter(char c) {, +		for (char delimiter : this.delimiters) {, +			if (c == delimiter) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PatternPropertyNamePatternsMatcher.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.bind;, +, +import java.util.Collection;, +, +import org.springframework.util.PatternMatchUtils;]