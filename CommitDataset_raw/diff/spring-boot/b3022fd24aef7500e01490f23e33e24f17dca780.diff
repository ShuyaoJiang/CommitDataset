[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.validation.BindException;, +		PropertiesConfigurationFactory<SpringApplication> binder = new PropertiesConfigurationFactory<SpringApplication>(, +				application);, +		binder.setTargetName("spring.main");, +		binder.setPropertySources(environment.getPropertySources());, +		try {, +			binder.bindPropertiesToTarget();, +		}, +		catch (BindException e) {, +			throw new IllegalStateException("Cannot bind to SpringApplication", e);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.validation.BindException;, +		PropertiesConfigurationFactory<SpringApplication> binder = new PropertiesConfigurationFactory<SpringApplication>(, +				application);, +		binder.setTargetName("spring.main");, +		binder.setPropertySources(environment.getPropertySources());, +		try {, +			binder.bindPropertiesToTarget();, +		}, +		catch (BindException e) {, +			throw new IllegalStateException("Cannot bind to SpringApplication", e);, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +		System.clearProperty("spring.main.showBanner");, +	@Test, +	public void bindsSystemPropertyToSpringApplication() throws Exception {, +		// gh-951, +		System.setProperty("spring.main.showBanner", "false");, +		this.initializer.onApplicationEvent(this.event);, +		SpringApplication application = this.event.getSpringApplication();, +		Field field = ReflectionUtils.findField(SpringApplication.class, "showBanner");, +		field.setAccessible(true);, +		assertThat((Boolean) field.get(application), equalTo(false));, +	}, +]