[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +			groovyCompiler.compile(fileOptions.getSourcesArray());, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +			groovyCompiler.compile(fileOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions fileOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] files = fileOptions.getSourcesArray();, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +			groovyCompiler.compile(fileOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions fileOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] files = fileOptions.getSourcesArray();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(fileOptions.getSources().get(0)));, +					fileOptions.getSourcesArray(), fileOptions.getArgsArray());, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +			groovyCompiler.compile(fileOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions fileOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] files = fileOptions.getSourcesArray();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions fileOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(fileOptions.getSources().get(0)));, +					fileOptions.getSourcesArray(), fileOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/SourceOptions.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.command;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +import joptsimple.OptionSet;, +, +import org.springframework.boot.cli.util.ResourceUtils;, +, +/**, + * Extract source file options (anything following '--' in an {@link OptionSet})., + * , + * @author Phillip Webb, + * @author Dave Syer, + * @author Greg Turnquist, + */, +public class SourceOptions {, +, +	private List<String> sources;, +, +	private List<?> args;, +, +	/**, +	 * Create a new {@link SourceOptions} instance., +	 * @param options the source option set, +	 */, +	public SourceOptions(OptionSet options) {, +		this(options, null);, +	}, +, +	/**, +	 * Create a new {@link SourceOptions} instance. If it is an error to pass options that, +	 * specify non-existent sources, but the default paths are allowed not to exist (the, +	 * paths are tested before use). If default paths are provided and the option set, +	 * contains no source file arguments it is not an error even if none of the default, +	 * paths exist)., +	 * , +	 * @param optionSet the source option set, +	 * @param classLoader an optional classloader used to try and load files that are not, +	 * found in the local filesystem, +	 * @param defaultPaths the default paths to use if no files are provided in the option, +	 * set, +	 */, +	public SourceOptions(OptionSet optionSet, ClassLoader classLoader,, +			String... defaultPaths) {, +		List<?> nonOptionArguments = optionSet.nonOptionArguments();, +		List<String> sources = new ArrayList<String>();, +		for (Object option : nonOptionArguments) {]