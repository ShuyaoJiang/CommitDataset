[+++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java, +	protected Class<?> getConfigClass() {, +		return SampleWebSocketsApplication.class;, +++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java, +	protected Class<?> getConfigClass() {, +		return SampleWebSocketsApplication.class;, +++ b/spring-boot/src/main/java/org/springframework/boot/web/SpringBootServletInitializer.java, +import org.springframework.util.ObjectUtils;, +		SpringApplication application = new SpringApplication(getConfigClasses());, +	private Object[] getConfigClasses() {, +		Class<?>[] additionalConfigClasses = getAdditionalConfigClasses();, +		if (ObjectUtils.isEmpty(additionalConfigClasses)) {, +			return new Object[] { getConfigClass() };, +		}, +		Object[] configClasses = new Object[additionalConfigClasses.length + 1];, +		configClasses[0] = getConfigClass();, +		System.arraycopy(additionalConfigClasses, 0, configClasses, 1,, +				additionalConfigClasses.length);, +		return configClasses;, +	}, +, +	/**, +	 * Returns the main configuration class to load. If you need additional configuration, +	 * classes you can also override {@link #getAdditionalConfigClasses()}., +	 */, +	protected abstract Class<?> getConfigClass();, +, +	/**, +	 * Returns configuration classes that should be loaded in addition to the, +	 * {@link #getConfigClass() main configuration class}., +	 */, +	protected Class<?>[] getAdditionalConfigClasses() {, +		return null;, +	}]