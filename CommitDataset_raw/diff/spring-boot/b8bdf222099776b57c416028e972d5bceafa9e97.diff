[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<String> values = new LinkedHashSet<String>();, +, +		initialize(RelaxedNames.this.name, this.values);, +		return this.values.iterator();, +	private void initialize(String name, Set<String> values) {, +		if (values.contains(name)) {, +			return;, +		for (Variation variation : Variation.values()) {, +			for (Manipulation manipulation : Manipulation.values()) {, +				String result = name;, +				result = manipulation.apply(result);, +				result = variation.apply(result);, +				values.add(result);, +				initialize(result, values);, +		UNCAMELCASE {, +			@Override, +			public String apply(String value) {, +				value = value.replaceAll("([^A-Z-])([A-Z])", "$1_$2");, +				StringBuilder builder = new StringBuilder();, +				for (String field : value.split("_")) {, +					if (builder.length() == 0) {, +						builder.append(field);, +					}, +					else {, +						builder.append("_").append(StringUtils.uncapitalize(field));, +					}, +				}, +				return builder.toString();, +			}, +		},, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<String> values = new LinkedHashSet<String>();, +, +		initialize(RelaxedNames.this.name, this.values);, +		return this.values.iterator();, +	private void initialize(String name, Set<String> values) {, +		if (values.contains(name)) {, +			return;, +		for (Variation variation : Variation.values()) {, +			for (Manipulation manipulation : Manipulation.values()) {, +				String result = name;, +				result = manipulation.apply(result);, +				result = variation.apply(result);, +				values.add(result);, +				initialize(result, values);, +		UNCAMELCASE {, +			@Override, +			public String apply(String value) {, +				value = value.replaceAll("([^A-Z-])([A-Z])", "$1_$2");, +				StringBuilder builder = new StringBuilder();, +				for (String field : value.split("_")) {, +					if (builder.length() == 0) {, +						builder.append(field);, +					}, +					else {, +						builder.append("_").append(StringUtils.uncapitalize(field));, +					}, +				}, +				return builder.toString();, +			}, +		},, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, + * @author Dave Syer, +	}, +	@Test, +	public void fromUnderscores() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("nes_ted").iterator();, +	@Test, +	public void fromPlain() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("plain").iterator();, +		assertThat(iterator.next(), equalTo("plain"));, +		assertThat(iterator.next(), equalTo("PLAIN"));, +		assertThat(iterator.hasNext(), equalTo(false));, +	}, +, +	@Test, +	public void fromCamelCase() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("caMel").iterator();, +		assertThat(iterator.next(), equalTo("caMel"));, +		assertThat(iterator.next(), equalTo("ca_mel"));, +		assertThat(iterator.next(), equalTo("camel"));, +		assertThat(iterator.next(), equalTo("CAMEL"));, +		assertThat(iterator.next(), equalTo("CA_MEL"));, +		assertThat(iterator.hasNext(), equalTo(false));, +	}, +]