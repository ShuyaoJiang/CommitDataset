[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +		List<EnvironmentPostProcessor> postProcessors = loadPostProcessors();, +		AnnotationAwareOrderComparator.sort(postProcessors);, +	List<EnvironmentPostProcessor> loadPostProcessors() {, +		return SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,, +				getClass().getClassLoader());, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +		List<EnvironmentPostProcessor> postProcessors = loadPostProcessors();, +		AnnotationAwareOrderComparator.sort(postProcessors);, +	List<EnvironmentPostProcessor> loadPostProcessors() {, +		return SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,, +				getClass().getClassLoader());, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;, +import org.springframework.boot.env.EnvironmentPostProcessor;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void postProcessorsAreOrderedCorrectly() {, +		TestConfigFileApplicationListener testListener = new TestConfigFileApplicationListener();, +		testListener.onApplicationEvent(new ApplicationEnvironmentPreparedEvent(, +				this.application, new String[0], this.environment));, +	}, +, +	private static class TestConfigFileApplicationListener, +			extends ConfigFileApplicationListener {, +, +		@Override, +		List<EnvironmentPostProcessor> loadPostProcessors() {, +			return new ArrayList<EnvironmentPostProcessor>(, +					Arrays.asList(new LowestPrecedenceEnvironmentPostProcessor()));, +		}, +, +	}, +, +	@Order(Ordered.LOWEST_PRECEDENCE), +	private static class LowestPrecedenceEnvironmentPostProcessor, +			implements EnvironmentPostProcessor {, +, +		@Override, +		public void postProcessEnvironment(ConfigurableEnvironment environment,, +				SpringApplication application) {, +			assertThat(environment.getPropertySources().size(), is(equalTo(4)));, +		}, +, +	}, +]