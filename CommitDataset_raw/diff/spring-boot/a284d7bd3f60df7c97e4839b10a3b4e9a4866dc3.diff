[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader;, +		@Bean, +		public PublicMetrics codahalePublicMetrics(MetricRegistry metricRegistry) {, +			MetricRegistryMetricReader reader = new MetricRegistryMetricReader(metricRegistry);, +			return new MetricReaderPublicMetrics(reader);, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader;, +		@Bean, +		public PublicMetrics codahalePublicMetrics(MetricRegistry metricRegistry) {, +			MetricRegistryMetricReader reader = new MetricRegistryMetricReader(metricRegistry);, +			return new MetricReaderPublicMetrics(reader);, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +/*, + * Copyright 2013-2104 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.actuate.metrics.reader;, +, +import java.beans.PropertyDescriptor;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.TimeUnit;, +, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.BeanWrapperImpl;, +import org.springframework.boot.actuate.metrics.Metric;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +import com.codahale.metrics.Counter;, +import com.codahale.metrics.Gauge;, +import com.codahale.metrics.Histogram;, +import com.codahale.metrics.Meter;, +import com.codahale.metrics.MetricRegistry;, +import com.codahale.metrics.MetricRegistryListener;, +import com.codahale.metrics.Sampling;, +import com.codahale.metrics.Timer;, +, +/**, + * A Spring Boot {@link MetricReader} that reads metrics from a Codahale, + * {@link MetricRegistry}. Gauges and Counters are reflected as a single value. Timers,, + * Meters and Histograms are expanded into sets of metrics containing all the properties, + * of type Number., + * , + * @author Dave Syer, + *, + */, +public class MetricRegistryMetricReader implements MetricReader, MetricRegistryListener {, +, +	private static Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +, +	private MetricRegistry registry;, +, +	private Map<String, String> names = new HashMap<String, String>();, +, +	private MultiValueMap<String, String> reverse = new LinkedMultiValueMap<String, String>();, +, +	public MetricRegistryMetricReader(MetricRegistry registry) {, +		this.registry = registry;, +		registry.addListener(this);, +	}, +, +	@Override, +	public Metric<?> findOne(String metricName) {, +		if (!names.containsKey(metricName)) {, +			return null;, +		}, +		com.codahale.metrics.Metric metric = registry.getMetrics().get(, +				names.get(metricName));, +		if (metric instanceof Counter) {, +			Counter counter = (Counter) metric;, +			return new Metric<Number>(metricName, counter.getCount());, +		}, +		if (metric instanceof Gauge) {, +			@SuppressWarnings("unchecked"), +			Gauge<Number> value = (Gauge<Number>) metric;]