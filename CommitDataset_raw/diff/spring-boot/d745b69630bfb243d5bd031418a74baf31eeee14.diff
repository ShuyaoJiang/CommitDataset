[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(properties).applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(properties).applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of("info.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.info.git.location:classpath:nonexistent").applyTo(this.context);, +		TestPropertyValues.of("info.name:foo").applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(properties).applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of("info.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.info.git.location:classpath:nonexistent").applyTo(this.context);, +		TestPropertyValues.of("info.name:foo").applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(, +				"server.servlet.context-path=", "server.port=" + ports.get().server).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.security.enabled=false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.add-application-context-header:true").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.context-path=/admin").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.context-path=/admin").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=0",, +				"management.security.enabled=false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=-1").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.security.enabled:false").applyTo(this.applicationContext);, +			TestPropertyValues.of("server.port:" + ports.get().server,, +					"management.port:" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of("management.context-path:/test", "management.security.enabled:false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"server.displayName:foo").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"endpoints.enabled:false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"endpoints.shutdown.enabled:true").applyTo(this.applicationContext);, +		TestPropertyValues.of("endpoints.enabled:false", "endpoints.actuator.enabled:true").applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management,, +				"management.ssl.key-password=password").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.ssl.key-password=password").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"server.ssl.key-password=password", "management.ssl.enabled=false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"server.tomcat.accesslog.enabled: true").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"server.undertow.accesslog.enabled: true").applyTo(this.applicationContext);, +		TestPropertyValues.of(String.format("endpoints.%s.enabled:false", name)).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				String.format("endpoints.%s.enabled:true", name)).applyTo(this.applicationContext);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(properties).applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of("info.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.info.git.location:classpath:nonexistent").applyTo(this.context);, +		TestPropertyValues.of("info.name:foo").applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.test.util.TestPropertyValues;, +		TestPropertyValues.of(, +				"server.servlet.context-path=", "server.port=" + ports.get().server).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.security.enabled=false").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.add-application-context-header:true").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.context-path=/admin").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.context-path=/admin").applyTo(this.applicationContext);, +		TestPropertyValues.of(, +				"management.port=" + ports.get().management).applyTo(this.applicationContext);, +		TestPropertyValues.of(]