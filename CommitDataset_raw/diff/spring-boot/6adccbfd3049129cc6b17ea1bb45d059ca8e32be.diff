[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java, +import java.io.File;, +		return new File(this.path, "spring.log").getPath();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java, +import java.io.File;, +		return new File(this.path, "spring.log").getPath();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.context.ConfigurableApplicationContext;, +		addPropertiesToEnvironment(this.context,, +				.startsWith("null ").endsWith("BOOTBOOT");, +		addPropertiesToEnvironment(this.context, "logging.config=doesnotexist.xml");, +		addPropertiesToEnvironment(this.context,, +				"logging.config=-Djava.util.logging.config.file=\"d:\\home\\site\\wwwroot\\bin\\apache-tomcat-7.0.52\\conf\\logging.properties\"");, +		addPropertiesToEnvironment(this.context, "LOGGING_CONFIG=-Dnop");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "logging.file.name=" + this.logFile);, +		addPropertiesToEnvironment(this.context, "logging.file=" + this.logFile);, +		addPropertiesToEnvironment(this.context,, +				"logging.file.path=" + this.temp.getRoot());, +		assertThat(output).startsWith(, +				new File(this.temp.getRoot(), "spring.log").getAbsolutePath());, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "debug");, +		addPropertiesToEnvironment(this.context, "trace");, +		addPropertiesToEnvironment(this.context, environment);, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "foo=TRACE",, +				"logging.level.org.springframework.boot=${foo}");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "debug");, +		addPropertiesToEnvironment(this.context, "logging.exceptionConversionWord=%rEx");, +		addPropertiesToEnvironment(this.context, "logging.register_shutdown_hook=true");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "logging.file=" + this.logFile,, +				"logging.path=path");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "logging.file.name=", +				+ this.temp.getRoot().getAbsolutePath() + "${PID}.log");, +		addPropertiesToEnvironment(this.context, "logging.level.web=TRACE");, +		addPropertiesToEnvironment(this.context,, +	private void addPropertiesToEnvironment(ConfigurableApplicationContext context,, +			String... pairs) {, +		ConfigurableEnvironment environment = context.getEnvironment();, +		Map<String, Object> properties = new HashMap<>();, +		for (String pair : pairs) {, +			String[] split = pair.split("=", 2);, +			properties.put(split[0], (split.length == 2) ? split[1] : "");, +		}, +		MapPropertySource propertySource = new MapPropertySource("logging-config",, +				properties);, +		environment.getPropertySources().addFirst(propertySource);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java, +import java.io.File;, +		return new File(this.path, "spring.log").getPath();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.context.ConfigurableApplicationContext;, +		addPropertiesToEnvironment(this.context,, +				.startsWith("null ").endsWith("BOOTBOOT");, +		addPropertiesToEnvironment(this.context, "logging.config=doesnotexist.xml");, +		addPropertiesToEnvironment(this.context,, +				"logging.config=-Djava.util.logging.config.file=\"d:\\home\\site\\wwwroot\\bin\\apache-tomcat-7.0.52\\conf\\logging.properties\"");, +		addPropertiesToEnvironment(this.context, "LOGGING_CONFIG=-Dnop");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "logging.file.name=" + this.logFile);, +		addPropertiesToEnvironment(this.context, "logging.file=" + this.logFile);, +		addPropertiesToEnvironment(this.context,, +				"logging.file.path=" + this.temp.getRoot());, +		assertThat(output).startsWith(, +				new File(this.temp.getRoot(), "spring.log").getAbsolutePath());, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "debug");, +		addPropertiesToEnvironment(this.context, "trace");, +		addPropertiesToEnvironment(this.context, environment);, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "foo=TRACE",, +				"logging.level.org.springframework.boot=${foo}");, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context,, +		addPropertiesToEnvironment(this.context, "debug");, +		addPropertiesToEnvironment(this.context, "logging.exceptionConversionWord=%rEx");, +		addPropertiesToEnvironment(this.context, "logging.register_shutdown_hook=true");, +		addPropertiesToEnvironment(this.context,]