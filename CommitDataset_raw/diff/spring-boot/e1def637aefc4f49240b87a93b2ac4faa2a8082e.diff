[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +			ObjectProvider<Collection<MetricsExporter>> exporters,, +			ObjectProvider<Collection<MeterRegistryConfigurer>> configurers) {, +		configurers.getIfAvailable(Collections::emptyList), +				.forEach((configurer) -> configurer.configureRegistry(composite));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +			ObjectProvider<Collection<MetricsExporter>> exporters,, +			ObjectProvider<Collection<MeterRegistryConfigurer>> configurers) {, +		configurers.getIfAvailable(Collections::emptyList), +				.forEach((configurer) -> configurer.configureRegistry(composite));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java, +	@Test, +	public void commonTagsAreAppliedBeforeRegistryIsInjectableElsewhere() {, +		new ApplicationContextRunner(), +				.withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class)), +				.withConfiguration(, +						UserConfigurations.of(MeterRegistryConfigurerConfiguration.class)), +				.withPropertyValues("metrics.use-global-registry=false"), +				.run((context) -> assertThat(context.getBean(MeterRegistry.class), +						.find("my.thing").tags("region", "us-east-1").gauge()), +						.isPresent());, +	}, +, +		private class MyThing {}, +, +		@Bean, +		public MyThing myThing(MeterRegistry registry) {, +			registry.gauge("my.thing", 0);, +			return new MyThing();, +		}, +]