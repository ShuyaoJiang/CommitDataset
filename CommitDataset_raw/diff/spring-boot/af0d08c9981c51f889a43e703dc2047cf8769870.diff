[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +	public interface TestInterface {, +, +		public abstract void foo();, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +	public interface TestInterface {, +, +		public abstract void foo();, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ArtifactCoordinatesResolver.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +	public interface TestInterface {, +, +		public abstract void foo();, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ArtifactCoordinatesResolver.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +	 * Determine if a {@link ClassNode} has one or more of the specified annotations on, +	 * the class or any of its methods. N.B. the type names are not normally fully, +	 * qualified., +	 */, +	public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {, +		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {, +			return true;, +		}, +		for (MethodNode method : node.getMethods()) {, +			if (hasAtLeastOneAnnotation(method, annotations)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +		Set<String> typesSet = new HashSet<String>(Arrays.asList(types));, +		for (FieldNode field : node.getFields()) {, +			if (typesSet.contains(field.getType().getName())) {, +		for (MethodNode method : node.getMethods()) {, +			if (typesSet.contains(method.getReturnType().getName())) {, +	 * Determine if a {@link ClassNode} subclasses any of the specified types N.B. the, +	 * type names are not normally fully qualified., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +	public interface TestInterface {, +, +		public abstract void foo();, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ArtifactCoordinatesResolver.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +	 * Determine if a {@link ClassNode} has one or more of the specified annotations on, +	 * the class or any of its methods. N.B. the type names are not normally fully, +	 * qualified., +	 */, +	public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {, +		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {, +			return true;, +		}, +		for (MethodNode method : node.getMethods()) {, +			if (hasAtLeastOneAnnotation(method, annotations)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +		Set<String> typesSet = new HashSet<String>(Arrays.asList(types));, +		for (FieldNode field : node.getFields()) {, +			if (typesSet.contains(field.getType().getName())) {, +		for (MethodNode method : node.getMethods()) {, +			if (typesSet.contains(method.getReturnType().getName())) {, +	 * Determine if a {@link ClassNode} subclasses any of the specified types N.B. the, +	 * type names are not normally fully qualified., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, + * @author Andy Wilkinson, +	private final ASTTransformation dependencyCoordinatesTransformation = new DefaultDependencyCoordinatesAstTransformation();, +, +						GroovyCompiler.this.dependencyCoordinatesTransformation.visit(, +								new ASTNode[] { source.getAST() }, source);, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +	public interface TestInterface {, +, +		public abstract void foo();, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ArtifactCoordinatesResolver.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +	 * Determine if a {@link ClassNode} has one or more of the specified annotations on, +	 * the class or any of its methods. N.B. the type names are not normally fully, +	 * qualified.]