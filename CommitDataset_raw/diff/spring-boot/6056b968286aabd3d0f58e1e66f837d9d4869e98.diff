[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, + * Copyright 2012-2015 the original author or authors., +				return separatedToCamelCase(value, false);, +			}, +		},, +, +		CASE_INSENSITIVE_SEPARATED_TO_CAMELCASE {, +			@Override, +			public String apply(String value) {, +				return separatedToCamelCase(value, true);, +			}, +		};, +, +		public abstract String apply(String value);, +, +		private static String separatedToCamelCase(String value, boolean caseInsensitive) {, +				field = (caseInsensitive ? field.toLowerCase() : field);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, + * Copyright 2012-2015 the original author or authors., +				return separatedToCamelCase(value, false);, +			}, +		},, +, +		CASE_INSENSITIVE_SEPARATED_TO_CAMELCASE {, +			@Override, +			public String apply(String value) {, +				return separatedToCamelCase(value, true);, +			}, +		};, +, +		public abstract String apply(String value);, +, +		private static String separatedToCamelCase(String value, boolean caseInsensitive) {, +				field = (caseInsensitive ? field.toLowerCase() : field);, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, + * Copyright 2012-2015 the original author or authors., +		assertThat(iterator.next(), equalTo("myRelaxedProperty"));, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, + * Copyright 2012-2015 the original author or authors., +				return separatedToCamelCase(value, false);, +			}, +		},, +, +		CASE_INSENSITIVE_SEPARATED_TO_CAMELCASE {, +			@Override, +			public String apply(String value) {, +				return separatedToCamelCase(value, true);, +			}, +		};, +, +		public abstract String apply(String value);, +, +		private static String separatedToCamelCase(String value, boolean caseInsensitive) {, +				field = (caseInsensitive ? field.toLowerCase() : field);, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, + * Copyright 2012-2015 the original author or authors., +		assertThat(iterator.next(), equalTo("myRelaxedProperty"));, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, + * Copyright 2012-2015 the original author or authors., +		EnvironmentTestUtils.addEnvironment(this.context, "test.the-value:foo");, +		assertThat(this.context.getBean(PropertyWithEnum.class).getTheValue(),, +				equalTo(FooEnum.FOO));, +	}, +, +	@Test, +	public void testRelaxedPropertyWithEnum() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "TEST_THE_VALUE:FoO");, +		this.context.register(PropertyWithEnum.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(PropertyWithEnum.class).getTheValue(),, +		private FooEnum theValue;, +		public void setTheValue(FooEnum value) {, +			this.theValue = value;, +		public FooEnum getTheValue() {, +			return this.theValue;]