[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +		/**, +		 * Enable resolution of already gzipped resources. Checks for a resource, +		 * name variant with the *.gz extension., +		 */, +		private boolean gzipped = false;, +, +		public boolean isGzipped() {, +			return this.gzipped;, +		}, +, +		public void setGzipped(boolean gzipped) {, +			this.gzipped = gzipped;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +		/**, +		 * Enable resolution of already gzipped resources. Checks for a resource, +		 * name variant with the *.gz extension., +		 */, +		private boolean gzipped = false;, +, +		public boolean isGzipped() {, +			return this.gzipped;, +		}, +, +		public void setGzipped(boolean gzipped) {, +			this.gzipped = gzipped;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.resource.GzipResourceResolver;, +			if (properties.isGzipped()) {, +				chain.addResolver(new GzipResourceResolver());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +		/**, +		 * Enable resolution of already gzipped resources. Checks for a resource, +		 * name variant with the *.gz extension., +		 */, +		private boolean gzipped = false;, +, +		public boolean isGzipped() {, +			return this.gzipped;, +		}, +, +		public void setGzipped(boolean gzipped) {, +			this.gzipped = gzipped;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.resource.GzipResourceResolver;, +			if (properties.isGzipped()) {, +				chain.addResolver(new GzipResourceResolver());, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import org.springframework.web.servlet.resource.GzipResourceResolver;, +				"spring.resources.chain.html-application-cache:true",, +				"spring.resources.chain.gzipped:true");, +		assertThat(getResourceResolvers("/webjars/**")).hasSize(3);, +				.containsOnly(VersionResourceResolver.class, GzipResourceResolver.class,, +						PathResourceResolver.class);]