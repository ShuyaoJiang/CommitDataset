[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;, +import org.springframework.boot.actuate.endpoint.web.PathMapper;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;, +import org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;, +, +	@Test, +	public void webApplicationConfiguresPathMapper() {, +		new WebApplicationContextRunner(), +				.withPropertyValues("management.endpoints.web.path-mapping.health=healthcheck"), +				.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class,, +						WebEndpointAutoConfiguration.class)), +				.run((context) -> {, +					assertThat(context).hasSingleBean(PathMapper.class);, +					String pathMapping = context.getBean(PathMapper.class).getRootPath("health");, +					assertThat(pathMapping).isEqualTo("healthcheck");, +				});, +	}, +, +	@Test, +	public void webApplicationConfiguresEndpointDiscoverer() {, +		new WebApplicationContextRunner(), +				.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class,, +						WebEndpointAutoConfiguration.class)), +				.run((context) -> {, +					assertThat(context).hasSingleBean(ControllerEndpointDiscoverer.class);, +					assertThat(context).hasSingleBean(WebEndpointDiscoverer.class);, +				});, +	}, +, +	@Test, +	public void webApplicationConfiguresExposeExcludePropertyEndpointFilter() {, +		new WebApplicationContextRunner(), +				.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class,, +						WebEndpointAutoConfiguration.class)), +				.run((context) -> {, +					assertThat(context).getBeans(ExposeExcludePropertyEndpointFilter.class).containsKeys(, +									"webIncludeExcludePropertyEndpointFilter",, +									"controllerIncludeExcludePropertyEndpointFilter", +					);, +				});, +	}, +]