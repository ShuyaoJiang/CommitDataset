[+++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, + * @deprecated as of 1.4.1 in favor of exact String-based matching, +@Deprecated, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, + * @deprecated as of 1.4.1 in favor of exact String-based matching, +@Deprecated, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +import java.util.HashSet;, +import java.util.Set;, +		return this.activeProfiles.length == 0 ? new EmptyProfileDocumentMatcher(), +				: new ActiveProfilesDocumentMatcher(, +						new HashSet<String>(Arrays.asList(this.activeProfiles)));, +	/**, +	 * Base class for profile-based {@link DocumentMatcher DocumentMatchers}., +	 */, +	private static abstract class AbstractProfileDocumentMatcher, +			implements DocumentMatcher {, +, +		@Override, +		public final MatchStatus matches(Properties properties) {, +			if (!properties.containsKey(SPRING_PROFILES)) {, +				return MatchStatus.ABSTAIN;, +			}, +			Set<String> profiles = StringUtils, +					.commaDelimitedListToSet(properties.getProperty(SPRING_PROFILES));, +			return matches(profiles);, +		}, +, +		protected abstract MatchStatus matches(Set<String> profiles);, +, +	}, +, +	/**, +	 * {@link AbstractProfileDocumentMatcher} that matches a document when a value in, +	 * {@code spring.profiles} is also in {@code spring.profiles.active}., +	 */, +	private static class ActiveProfilesDocumentMatcher, +			extends AbstractProfileDocumentMatcher {, +, +		private final Set<String> activeProfiles;, +, +		ActiveProfilesDocumentMatcher(Set<String> activeProfiles) {, +			this.activeProfiles = activeProfiles;, +		}, +, +		@Override, +		protected MatchStatus matches(Set<String> profiles) {, +			if (profiles.isEmpty()) {, +				return MatchStatus.NOT_FOUND;, +			}, +			for (String activeProfile : this.activeProfiles) {, +				if (profiles.contains(activeProfile)) {, +					return MatchStatus.FOUND;, +				}, +			}, +			return MatchStatus.NOT_FOUND;, +		}, +, +	}, +, +	/**, +	 * {@link AbstractProfileDocumentMatcher} that matches a document when {@code, +	 * spring.profiles} is empty or contains a value with no text., +	 *, +	 * @see StringUtils#hasText(String), +	 */, +	private static class EmptyProfileDocumentMatcher, +			extends AbstractProfileDocumentMatcher {, +, +		@Override, +		public MatchStatus matches(Set<String> profiles) {, +			if (profiles.isEmpty()) {, +				return MatchStatus.FOUND;, +			}, +			for (String profile : profiles) {, +				if (!StringUtils.hasText(profile)) {, +					return MatchStatus.FOUND;, +				}, +			}, +			return MatchStatus.NOT_FOUND;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/ArrayDocumentMatcher.java, + * @deprecated as of 1.4.1 in favor of exact String-based matching, +@Deprecated, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +import java.util.HashSet;, +import java.util.Set;, +		return this.activeProfiles.length == 0 ? new EmptyProfileDocumentMatcher(), +				: new ActiveProfilesDocumentMatcher(, +						new HashSet<String>(Arrays.asList(this.activeProfiles)));, +	/**, +	 * Base class for profile-based {@link DocumentMatcher DocumentMatchers}., +	 */, +	private static abstract class AbstractProfileDocumentMatcher, +			implements DocumentMatcher {, +, +		@Override]