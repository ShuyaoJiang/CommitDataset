[+++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-couchbase</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-couchbase</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import com.couchbase.client.java.Bucket;, +import org.springframework.boot.actuate.health.CouchbaseHealthIndicator;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;, +import org.springframework.data.couchbase.core.CouchbaseOperations;, + * @author Eddú Meléndez, +@AutoConfigureAfter({ CouchbaseAutoConfiguration.class, CassandraAutoConfiguration.class,, +	@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class}), +	@ConditionalOnBean(CouchbaseOperations.class), +	@ConditionalOnEnabledHealthIndicator("couchbase"), +	public static class CouchbaseHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {, +, +		@Autowired, +		private Map<String, CouchbaseOperations> couchbaseOperations;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "couchbaseHealthIndicator"), +		public HealthIndicator couchbaseHealthIndicator() {, +			return createHealthIndicator(this.couchbaseOperations);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-couchbase</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import com.couchbase.client.java.Bucket;, +import org.springframework.boot.actuate.health.CouchbaseHealthIndicator;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;, +import org.springframework.data.couchbase.core.CouchbaseOperations;, + * @author Eddú Meléndez, +@AutoConfigureAfter({ CouchbaseAutoConfiguration.class, CassandraAutoConfiguration.class,, +	@ConditionalOnClass({ CouchbaseOperations.class, Bucket.class}), +	@ConditionalOnBean(CouchbaseOperations.class), +	@ConditionalOnEnabledHealthIndicator("couchbase"), +	public static class CouchbaseHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<CouchbaseHealthIndicator, CouchbaseOperations> {, +, +		@Autowired, +		private Map<String, CouchbaseOperations> couchbaseOperations;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "couchbaseHealthIndicator"), +		public HealthIndicator couchbaseHealthIndicator() {, +			return createHealthIndicator(this.couchbaseOperations);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.health;, +, +import java.util.List;, +, +import com.couchbase.client.java.util.features.Version;, +, +import org.springframework.data.couchbase.core.CouchbaseOperations;, +import org.springframework.util.Assert;, +, +/**, + * {@link HealthIndicator} for Couchbase., + *, + * @author Eddú Meléndez, + * @since 1.4.0, + */]