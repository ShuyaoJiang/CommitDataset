[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.health.HealthEndpointWebExtension;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;, +import org.springframework.boot.cloud.CloudPlatform;, +@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY), +@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class,, +		CloudFoundryActuatorAutoConfiguration.class }), +		@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }), +				HealthEndpointWebExtension healthEndpointWebExtension) {, +			return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);, +		@ConditionalOnBean({ HealthEndpoint.class,, +				ReactiveHealthEndpointWebExtension.class }), +				ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +			return new CloudFoundryReactiveHealthEndpointWebExtension(, +					reactiveHealthEndpointWebExtension);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.health.HealthEndpointWebExtension;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;, +import org.springframework.boot.cloud.CloudPlatform;, +@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY), +@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class,, +		CloudFoundryActuatorAutoConfiguration.class }), +		@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }), +				HealthEndpointWebExtension healthEndpointWebExtension) {, +			return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);, +		@ConditionalOnBean({ HealthEndpoint.class,, +				ReactiveHealthEndpointWebExtension.class }), +				ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +			return new CloudFoundryReactiveHealthEndpointWebExtension(, +					reactiveHealthEndpointWebExtension);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebAnnotationEndpointDiscoverer.java, +import org.springframework.boot.actuate.endpoint.EndpointInfo;, + * {@link WebAnnotationEndpointDiscoverer} for Cloud Foundry that uses Cloud Foundry, + * specific extensions for the {@link HealthEndpoint}., +public class CloudFoundryWebAnnotationEndpointDiscoverer, +		extends WebAnnotationEndpointDiscoverer {, +	public CloudFoundryWebAnnotationEndpointDiscoverer(, +			ApplicationContext applicationContext, ParameterMapper parameterMapper,, +			EndpointMediaTypes endpointMediaTypes,, +			EndpointPathResolver endpointPathResolver,, +			Collection<? extends OperationMethodInvokerAdvisor> invokerAdvisors,, +			Collection<? extends EndpointFilter<WebOperation>> filters,, +			Class<?> requiredExtensionType) {, +		super(applicationContext, parameterMapper, endpointMediaTypes,, +				endpointPathResolver, invokerAdvisors, filters);, +	protected boolean isExtensionExposed(Class<?> endpointType, Class<?> extensionType,, +			EndpointInfo<WebOperation> endpointInfo) {, +		if (HealthEndpoint.class.equals(endpointType), +				&& !this.requiredExtensionType.equals(extensionType)) {, +			return false;, +		return super.isExtensionExposed(endpointType, extensionType, endpointInfo);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.health.HealthEndpointWebExtension;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;, +import org.springframework.boot.cloud.CloudPlatform;, +@ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY), +@AutoConfigureBefore({ ReactiveCloudFoundryActuatorAutoConfiguration.class,, +		CloudFoundryActuatorAutoConfiguration.class }), +		@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }), +				HealthEndpointWebExtension healthEndpointWebExtension) {, +			return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);, +		@ConditionalOnBean({ HealthEndpoint.class,, +				ReactiveHealthEndpointWebExtension.class }), +				ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +			return new CloudFoundryReactiveHealthEndpointWebExtension(, +					reactiveHealthEndpointWebExtension);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebAnnotationEndpointDiscoverer.java, +import org.springframework.boot.actuate.endpoint.EndpointInfo;, + * {@link WebAnnotationEndpointDiscoverer} for Cloud Foundry that uses Cloud Foundry, + * specific extensions for the {@link HealthEndpoint}., +public class CloudFoundryWebAnnotationEndpointDiscoverer, +		extends WebAnnotationEndpointDiscoverer {, +	public CloudFoundryWebAnnotationEndpointDiscoverer(, +			ApplicationContext applicationContext, ParameterMapper parameterMapper,, +			EndpointMediaTypes endpointMediaTypes,, +			EndpointPathResolver endpointPathResolver,, +			Collection<? extends OperationMethodInvokerAdvisor> invokerAdvisors,, +			Collection<? extends EndpointFilter<WebOperation>> filters,, +			Class<?> requiredExtensionType) {, +		super(applicationContext, parameterMapper, endpointMediaTypes,, +				endpointPathResolver, invokerAdvisors, filters);, +	protected boolean isExtensionExposed(Class<?> endpointType, Class<?> extensionType,, +			EndpointInfo<WebOperation> endpointInfo) {, +		if (HealthEndpoint.class.equals(endpointType), +				&& !this.requiredExtensionType.equals(extensionType)) {, +			return false;, +		return super.isExtensionExposed(endpointType, extensionType, endpointInfo);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, + * Reactive {@link EndpointWebExtension} for the {@link HealthEndpoint} that always, + * exposes full health details., + * @since 2.0.0, +	private final ReactiveHealthEndpointWebExtension delegate;, +	public CloudFoundryReactiveHealthEndpointWebExtension(, +			ReactiveHealthEndpointWebExtension delegate) {, +		return this.delegate.health(true);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointManagementContextConfiguration.java]