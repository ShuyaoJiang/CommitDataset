[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}., +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}., +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true"), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "defaultValue": false, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}., +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true"), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "defaultValue": false, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +	public void enableJmxIntegration() {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true"), +				.run((context) -> {, +					assertThat(context).hasBean(, +							IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME);, +	public void jmxIntegrationIsDisabledByDefault() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(IntegrationManagementConfigurer.class);, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true",, +				"spring.jmx.default_domain=org.foo").run((context) -> {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true"), +				.withUserConfiguration(CustomMBeanExporter.class).run((context) -> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}., +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true"), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "defaultValue": false, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +	public void enableJmxIntegration() {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true"), +				.run((context) -> {, +					assertThat(context).hasBean(, +							IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME);, +	public void jmxIntegrationIsDisabledByDefault() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(IntegrationManagementConfigurer.class);, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true",, +				"spring.jmx.default_domain=org.foo").run((context) -> {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true"), +				.withUserConfiguration(CustomMBeanExporter.class).run((context) -> {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +				.withPropertyValues("spring.jmx.enabled=true",, +				.withPropertyValues("spring.jmx.enabled=true",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +			.withPropertyValues("spring.jmx.enabled=true").withConfiguration(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/KafkaMetricsAutoConfigurationTests.java, +			.with(MetricsRun.simple()).withPropertyValues("spring.jmx.enabled=true"), +			.withConfiguration(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, + * To enable auto export of annotation beans set {@code spring.jmx.enabled: true}., +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true"), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "defaultValue": false, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +	public void enableJmxIntegration() {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true"), +				.run((context) -> {, +					assertThat(context).hasBean(, +							IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME);, +	public void jmxIntegrationIsDisabledByDefault() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(IntegrationManagementConfigurer.class);, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true",, +				"spring.jmx.default_domain=org.foo").run((context) -> {, +		this.contextRunner.withPropertyValues("spring.jmx.enabled=true")]