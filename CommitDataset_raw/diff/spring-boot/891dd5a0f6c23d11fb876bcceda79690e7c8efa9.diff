[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java, +	private static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class, +			.getName();, +	@Override, +	public ConditionOutcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		AnnotationAttributes annotationAttributes = AnnotationAttributes.fromMap(metadata, +				.getAnnotationAttributes(ANNOTATION_CLASS));, +		ConditionOutcome outcome = getHealthIndicatorOutcome(context, endpointName);, +		return getDefaultIndicatorsOutcome(context);, +	private ConditionOutcome getHealthIndicatorOutcome(ConditionContext context,, +			String endpointName) {, +			boolean match = resolver.getProperty("enabled", Boolean.class, true);, +			return new ConditionOutcome(match, "The health indicator " + endpointName, +					+ " is " + (match ? "enabled" : "disabled"));, +	private ConditionOutcome getDefaultIndicatorsOutcome(ConditionContext context) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java, +	private static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class, +			.getName();, +	@Override, +	public ConditionOutcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		AnnotationAttributes annotationAttributes = AnnotationAttributes.fromMap(metadata, +				.getAnnotationAttributes(ANNOTATION_CLASS));, +		ConditionOutcome outcome = getHealthIndicatorOutcome(context, endpointName);, +		return getDefaultIndicatorsOutcome(context);, +	private ConditionOutcome getHealthIndicatorOutcome(ConditionContext context,, +			String endpointName) {, +			boolean match = resolver.getProperty("enabled", Boolean.class, true);, +			return new ConditionOutcome(match, "The health indicator " + endpointName, +					+ " is " + (match ? "enabled" : "disabled"));, +	private ConditionOutcome getDefaultIndicatorsOutcome(ConditionContext context) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/util/SimpleInMemoryRepository.java, +	public interface Callback<T> {, +		T modify(T current);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java, +	private static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class, +			.getName();, +	@Override, +	public ConditionOutcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		AnnotationAttributes annotationAttributes = AnnotationAttributes.fromMap(metadata, +				.getAnnotationAttributes(ANNOTATION_CLASS));, +		ConditionOutcome outcome = getHealthIndicatorOutcome(context, endpointName);, +		return getDefaultIndicatorsOutcome(context);, +	private ConditionOutcome getHealthIndicatorOutcome(ConditionContext context,, +			String endpointName) {, +			boolean match = resolver.getProperty("enabled", Boolean.class, true);, +			return new ConditionOutcome(match, "The health indicator " + endpointName, +					+ " is " + (match ? "enabled" : "disabled"));, +	private ConditionOutcome getDefaultIndicatorsOutcome(ConditionContext context) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/util/SimpleInMemoryRepository.java, +	public interface Callback<T> {, +		T modify(T current);, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +, +				HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +		assertSame(this.context.getBean("customHealthIndicator"), beans.values(), +				.iterator().next());, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ConditionalOnEnablednHealthIndicator.java, +import java.lang.annotation.Documented;, +@Documented, +@Conditional(OnEnabledHealthIndicatorCondition.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java, +	private static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class]