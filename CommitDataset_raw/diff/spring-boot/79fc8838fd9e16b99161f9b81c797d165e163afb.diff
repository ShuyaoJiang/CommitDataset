[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, + * Copyright 2012-2018 the original author or authors., +				ConfigurationProperty property = source.getConfigurationProperty(name);, +				if (property != null) {, +					Object value = getContext().getPlaceholdersResolver(), +							.resolvePlaceholders(property.getValue());, +					return ResolvableTypeDescriptor.forType(target.getType()), +							.convert(getContext().getConversionService(), value);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, + * Copyright 2012-2018 the original author or authors., +				ConfigurationProperty property = source.getConfigurationProperty(name);, +				if (property != null) {, +					Object value = getContext().getPlaceholdersResolver(), +							.resolvePlaceholders(property.getValue());, +					return ResolvableTypeDescriptor.forType(target.getType()), +							.convert(getContext().getConversionService(), value);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, + * Copyright 2012-2018 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +		this.thrown.expect(BindException.class);, +		this.binder.bind("foo", STRING_STRING_MAP);, +, +]