[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.Collection;, +			candidates.addAll(getConfigurationsForAnnotation(source, annotation));, +		}, +		collectCandidateConfigurations(annotation.annotationType(), candidates, seen);, +	}, +, +	private Collection<String> getConfigurationsForAnnotation(Class<?> source,, +			Annotation annotation) {, +			return Arrays.asList(value);, +		return SpringFactoriesLoader.loadFactoryNames(source,, +				getClass().getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import java.util.Collection;, +			candidates.addAll(getConfigurationsForAnnotation(source, annotation));, +		}, +		collectCandidateConfigurations(annotation.annotationType(), candidates, seen);, +	}, +, +	private Collection<String> getConfigurationsForAnnotation(Class<?> source,, +			Annotation annotation) {, +			return Arrays.asList(value);, +		return SpringFactoriesLoader.loadFactoryNames(source,, +				getClass().getClassLoader());, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. {spring-javadoc}/test/context/TestPropertySource.{dc-ext}[`@TestPropertySource`], +  annotations on your tests., +. Properties from `SPRING_APPLICATION_JSON` (inline JSON embedded in an environment, +  variable or system property), +. {spring-javadoc}/context/annotation/PropertySource.{dc-ext}[`@PropertySource`], +  annotations on your `@Configuration` classes., +and Spring Boot) are configured to output more information. Enabling the debug mode does, +_not_ configure your application to log all messages with `DEBUG` level., +Alternatively, you can enable a "`trace`" mode by starting your application with a, +`--trace` flag (or `trace=true` in your `application.properties`). This will enable trace, +logging for a selection of core loggers (embedded container, Hibernate schema generation, +and the whole Spring portfolio)., +|The format to use to render the log level (default `%5p`). (The `logging.pattern.level`, + form is only supported by Logback.), +2015-09-30 12:30:04.031 user:juergen INFO 22174 --- [  nio-8080-exec-0] demo.Controller, +Handling authenticated request, +Any `HttpMessageConverter` bean that is present in the context will be added to the list, +of converters. You can also override default converters that way., +All `@JsonComponent` beans in the `ApplicationContext` will be automatically registered, +with Jackson, and since `@JsonComponent` is meta-annotated with `@Component`, the usual, +This is particularly useful if you want to add a handler for a new content type (the, +default is to handle `text/html` specifically and provide a fallback for everything else)., +To do that just extend `BasicErrorController` and add a public method with a, +`@RequestMapping` that has a `produces` attribute, and create a bean of your new type., +marshal responses into the desired representation. The `ObjectMapper` will be customized, +based on the `spring.jackson.*` properties or a `Jackson2ObjectMapperBuilder` bean if one, +exists., +a method in one of your `@Configuration` classes. There are several secure applications in, +the {github-code}/spring-boot-samples/[Spring Boot samples] to get you started with common, +is now a Neo4j OGM `@NodeEntity` rather than a JPA `@Entity`, it will work in the same, +way., +To enable repository support (and optionally support for `@Transactional`), add the, +following two annotations to your Spring configuration:, +* Caches can be created on startup via the `spring.cache.cache-names` property. If a, +  custom `javax.cache.configuration.Configuration` bean is defined, it is used to, +  customize them., +you can associate your local data store transaction to the processing of an incoming, +message by adding `@Transactional` on your listener method (or a delegate thereof). This, +will make sure that the incoming message is acknowledged once the local transaction has, +completed. This also includes sending response messages that have been performed on the, +same JMS session., +TIP: Check {spring-javadoc}/jms/annotation/EnableJms.{dc-ext}[the Javadoc of `@EnableJms`], +for more details., +If you need to create more `JmsListenerContainerFactory` instances or if you want to, +override the default, Spring Boot provides a `DefaultJmsListenerContainerFactoryConfigurer`, +that you can use to initialize a `DefaultJmsListenerContainerFactory` with the same, +settings as the one that is auto-configured., +For instance, the following exposes another factory that uses a specific, +`MessageConverter`:, +can be injected in a similar manner. If a `MessageConverter` bean is defined, it is, +associated automatically to the auto-configured `AmqpTemplate`., +If you need to create more `RabbitListenerContainerFactory` instances or if you want to, +override the default, Spring Boot provides a, +`SimpleRabbitListenerContainerFactoryConfigurer` that you can use to initialize a, +`SimpleRabbitListenerContainerFactory` with the same settings as the one that is, +auto-configured., +For instance, the following exposes another factory that uses a specific, +`MessageConverter`:, +When retries are exhausted, the message will be rejected and either dropped or routed to a, +dead-letter exchange if the broker is configured so. Retries are disabled by default., +IMPORTANT: If retries are not enabled and the listener throws an exception, by default the, +delivery will be retried indefinitely. You can modify this behavior in two ways; set the, +`defaultRequeueRejected` property to `false` and zero re-deliveries will be attempted; or,, +throw an `AmqpRejectAndDontRequeueException` to signal the message should be rejected., +This is the mechanism used when retries are enabled and the maximum delivery attempts are, +reached., +* {spring-reference}/#integration-testing.html[Spring Test] & Spring Boot Test --, +  Utilities and integration test support for Spring Boot applications., +filters should be applied) you can use attributes in the `@AutoConfigureMockMvc`, +annotation., +`TestRestTemplate` is a convenience alternative to Spring's `RestTemplate` that is useful, +in integration tests. You can get a vanilla template or one that sends Basic HTTP, +	private TestRestTemplate template = new TestRestTemplate();]