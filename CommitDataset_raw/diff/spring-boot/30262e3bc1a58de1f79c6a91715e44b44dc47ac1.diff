[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +	private static final AutoConfigurationSorter SORTER = new AutoConfigurationSorter(, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +	private static final AutoConfigurationSorter SORTER = new AutoConfigurationSorter(, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/RepositoryConfiguration.java, +	 * @param name the name of the repository, +	 * @param uri the uri of the repository, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +	private static final AutoConfigurationSorter SORTER = new AutoConfigurationSorter(, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/RepositoryConfiguration.java, +	 * @param name the name of the repository, +	 * @param uri the uri of the repository, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +	 * @param pairs the property pairs to add, +	 * duration of the {@code call}, restoring previous values when the call completes., +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * Return an empty {@link TestPropertyValues} instance., +			String name = (index > 0 ? pair.substring(0, index) : pair);, +			return of(name.trim(), value.trim());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +	private static final AutoConfigurationSorter SORTER = new AutoConfigurationSorter(, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/RepositoryConfiguration.java, +	 * @param name the name of the repository, +	 * @param uri the uri of the repository, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +	 * @param pairs the property pairs to add, +	 * duration of the {@code call}, restoring previous values when the call completes., +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * Return an empty {@link TestPropertyValues} instance., +			String name = (index > 0 ? pair.substring(0, index) : pair);, +			return of(name.trim(), value.trim());, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java, +	 * @param name the metric name, +	 * @return the sanitized metric name, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicatorFactoryTests.java, +		ReactiveHealthIndicator reactiveHealthIndicator = mock(, +		given(reactiveHealthIndicator.health()).willReturn(Mono.just(UP));, +				Collections.singletonMap("test", reactiveHealthIndicator),, +		verify(reactiveHealthIndicator, times(1)).health();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +	private static final AutoConfigurationSorter SORTER = new AutoConfigurationSorter(, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/RepositoryConfiguration.java, +	 * @param name the name of the repository, +	 * @param uri the uri of the repository, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +	 * @param pairs the property pairs to add, +	 * duration of the {@code call}, restoring previous values when the call completes., +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * @param pairs the name-value pairs for properties that need to be added to the, +	 * Return an empty {@link TestPropertyValues} instance., +			String name = (index > 0 ? pair.substring(0, index) : pair);]