[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(sourceOptions.getSources().get(0)));, +					sourceOptions.getSourcesArray(), sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(sourceOptions.getSources().get(0)));, +					sourceOptions.getSourcesArray(), sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/SourceOptions.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(sourceOptions.getSources().get(0)));, +					sourceOptions.getSourcesArray(), sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/SourceOptions.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/TestCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			this.runner = new TestRunner(configuration, sourceOptions.getSourcesArray(),, +					sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(sourceOptions.getSources().get(0)));, +					sourceOptions.getSourcesArray(), sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/SourceOptions.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/TestCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			this.runner = new TestRunner(configuration, sourceOptions.getSourcesArray(),, +					sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/GrabCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			groovyCompiler.compile(sourceOptions.getSourcesArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options, loader, "init.groovy",, +			String[] sources = sourceOptions.getSourcesArray();, +			if (this.compiler != null && sources.length > 0) {, +				Class<?>[] classes = this.compiler.compile(sources);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +				Desktop.getDesktop().edit(new File(sourceOptions.getSources().get(0)));, +					sourceOptions.getSourcesArray(), sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/SourceOptions.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/TestCommand.java, +			SourceOptions sourceOptions = new SourceOptions(options);, +			this.runner = new TestRunner(configuration, sourceOptions.getSourcesArray(),, +					sourceOptions.getArgsArray());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/runner/SpringApplicationRunner.java, + * Takes care of threading and class-loading issues and can optionally monitor sources for, +	private final String[] sources;, +	 * @param sources the files to compile/watch, +			final SpringApplicationRunnerConfiguration configuration, String[] sources,, +		this.sources = sources.clone();, +			Object[] compiledSources = this.compiler.sources(this.sources);, +			if (compiledSources.length == 0) {, +				throw new RuntimeException("No classes found in '" + this.sources + "'");]