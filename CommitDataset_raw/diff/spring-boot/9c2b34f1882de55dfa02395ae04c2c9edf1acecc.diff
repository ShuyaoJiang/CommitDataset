[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import java.util.List;, +			List<String> servlets = Arrays.asList(beanFactory.getBeanNamesForType(, +					DispatcherServlet.class, false, false));, +			boolean containsDispatcherBean = beanFactory, +					.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			if (servlets.isEmpty()) {, +				if (containsDispatcherBean) {, +					return ConditionOutcome, +							.noMatch("found no DispatcherServlet but a non-DispatcherServlet named ", +									+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +				}, +			if (servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +			if (containsDispatcherBean) {, +				return ConditionOutcome.noMatch("found non-DispatcherServlet named ", +						+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import java.util.List;, +			List<String> servlets = Arrays.asList(beanFactory.getBeanNamesForType(, +					DispatcherServlet.class, false, false));, +			boolean containsDispatcherBean = beanFactory, +					.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			if (servlets.isEmpty()) {, +				if (containsDispatcherBean) {, +					return ConditionOutcome, +							.noMatch("found no DispatcherServlet but a non-DispatcherServlet named ", +									+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +				}, +			if (servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +			if (containsDispatcherBean) {, +				return ConditionOutcome.noMatch("found non-DispatcherServlet named ", +						+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.web.servlet.FrameworkServlet;, +	public void contextAlreadyHasNonDispatcherServlet() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				NonSpringServletConfiguration.class,, +				EmbeddedContainerConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		verifyContext(); // the non default servlet is still registered, +		assertEquals(0, this.context.getBeanNamesForType(DispatcherServlet.class).length);, +	}, +, +	@Test, +	public void contextAlreadyHasNonServlet() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				NonServletConfiguration.class, EmbeddedContainerConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		assertEquals(0, this.context.getBeanNamesForType(DispatcherServlet.class).length);, +		assertEquals(0, this.context.getBeanNamesForType(Servlet.class).length);, +	}, +, +	@Test, +	public static class NonSpringServletConfiguration {, +, +		@Bean, +		public Servlet dispatcherServlet() {, +			return new FrameworkServlet() {, +				@Override, +				protected void doService(HttpServletRequest request,, +						HttpServletResponse response) throws Exception {, +				}, +			};, +		}, +, +	}, +, +	@Configuration, +	public static class NonServletConfiguration {, +, +		@Bean, +		public String dispatcherServlet() {, +			return "foo";, +		}, +, +	}, +, +	@Configuration]