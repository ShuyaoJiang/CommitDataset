[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Configuration, +	@ConditionalOnMissingBean(DataSourceInitializer.class), +	protected static class DataSourceInitializerConfiguration {, +, +		@Bean, +		public DataSourceInitializer dataSourceInitializer() {, +			return new DataSourceInitializer();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Configuration, +	@ConditionalOnMissingBean(DataSourceInitializer.class), +	protected static class DataSourceInitializerConfiguration {, +, +		@Bean, +		public DataSourceInitializer dataSourceInitializer() {, +			return new DataSourceInitializer();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerTests.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Primary;, +	public void testTwoDataSources() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"datasource.one.url=jdbc:hsqldb:mem:/one",, +				"datasource.one.driverClassName=org.hsqldb.Driver",, +				"datasource.two.url=jdbc:hsqldb:mem:/two",, +				"datasource.two.driverClassName=org.hsqldb.Driver");, +		this.context.register(TwoDataSources.class, DataSourceInitializer.class,, +				PropertyPlaceholderAutoConfiguration.class, DataSourceProperties.class);, +		this.context.refresh();, +		assertEquals(2, this.context.getBeanNamesForType(DataSource.class).length);, +	}, +, +	@Test, +	@Configuration, +	@EnableConfigurationProperties, +	protected static class TwoDataSources {, +, +		@Bean, +		@Primary, +		@ConfigurationProperties(prefix = "datasource.one"), +		public DataSource oneDataSource() {, +			return DataSourceBuilder.create().build();, +		}, +, +		@Bean, +		@ConfigurationProperties(prefix = "datasource.two"), +		public DataSource twoDataSource() {, +			return DataSourceBuilder.create().build();, +		}, +, +	}, +]