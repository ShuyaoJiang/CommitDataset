[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +		registration.setDispatcherTypes(securityProperties.getFilterDispatcherTypes());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +		registration.setDispatcherTypes(securityProperties.getFilterDispatcherTypes());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +, +@ConfigurationProperties(prefix = "security", ignoreUnknownFields = false), +	/**, +	 * Security filter chain dispatcher types., +	 */, +	private EnumSet<DispatcherType> filterDispatcherTypes;, +, +	public EnumSet<DispatcherType> getFilterDispatcherTypes() {, +		return this.filterDispatcherTypes;, +	}, +, +	public void setFilterDispatcherTypes(EnumSet<DispatcherType> filterDispatcherTypes) {, +		this.filterDispatcherTypes = filterDispatcherTypes;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +		registration.setDispatcherTypes(securityProperties.getFilterDispatcherTypes());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +, +@ConfigurationProperties(prefix = "security", ignoreUnknownFields = false), +	/**, +	 * Security filter chain dispatcher types., +	 */, +	private EnumSet<DispatcherType> filterDispatcherTypes;, +, +	public EnumSet<DispatcherType> getFilterDispatcherTypes() {, +		return this.filterDispatcherTypes;, +	}, +, +	public void setFilterDispatcherTypes(EnumSet<DispatcherType> filterDispatcherTypes) {, +		this.filterDispatcherTypes = filterDispatcherTypes;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import java.util.EnumSet;, +, +import javax.servlet.DispatcherType;, +, +import org.springframework.test.util.ReflectionTestUtils;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +	@Test, +	public void defaultFilterDispatcherTypes() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,, +				SecurityFilterAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		DelegatingFilterProxyRegistrationBean bean = this.context.getBean(, +				"securityFilterChainRegistration",, +				DelegatingFilterProxyRegistrationBean.class);, +		@SuppressWarnings("unchecked"), +		EnumSet<DispatcherType> dispatcherTypes = (EnumSet<DispatcherType>) ReflectionTestUtils, +				.getField(bean, "dispatcherTypes");, +		assertThat(dispatcherTypes, is(nullValue()));, +	}, +, +	@Test, +	public void customFilterDispatcherTypes() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,, +				SecurityFilterAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"security.filter-dispatcher-types:INCLUDE,ERROR");, +		this.context.refresh();, +		DelegatingFilterProxyRegistrationBean bean = this.context.getBean(, +				"securityFilterChainRegistration",, +				DelegatingFilterProxyRegistrationBean.class);, +		@SuppressWarnings("unchecked"), +		EnumSet<DispatcherType> dispatcherTypes = (EnumSet<DispatcherType>) ReflectionTestUtils, +				.getField(bean, "dispatcherTypes");, +		assertThat(dispatcherTypes,, +				is(EnumSet.of(DispatcherType.INCLUDE, DispatcherType.ERROR)));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java, +		registration.setDispatcherTypes(securityProperties.getFilterDispatcherTypes());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +, +@ConfigurationProperties(prefix = "security", ignoreUnknownFields = false), +	/**, +	 * Security filter chain dispatcher types.]