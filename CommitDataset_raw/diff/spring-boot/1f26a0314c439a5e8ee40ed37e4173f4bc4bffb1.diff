[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.util.HtmlUtils;, +				.append(HtmlUtils.htmlEscape(error.get("error").toString())).append(", status="), +				.append(HtmlUtils.htmlEscape(error.get("status").toString())), +				.append(").</div>").append("<div>"), +				.append(HtmlUtils.htmlEscape(error.get("message").toString())), +				.append("</div>").append("</body></html>");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.util.HtmlUtils;, +				.append(HtmlUtils.htmlEscape(error.get("error").toString())).append(", status="), +				.append(HtmlUtils.htmlEscape(error.get("status").toString())), +				.append(").</div>").append("<div>"), +				.append(HtmlUtils.htmlEscape(error.get("message").toString())), +				.append("</div>").append("</body></html>");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, +	public void escapeHtmlInDefaultErrorView() throws Exception {, +		this.contextRunner, +				.withPropertyValues("spring.mustache.prefix=classpath:/unknown/"), +				.run((context) -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context), +							.build();, +					String body = client.get().uri("/html").accept(MediaType.TEXT_HTML), +							.exchange().expectStatus(), +							.isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectHeader(), +							.contentType(MediaType.TEXT_HTML).expectBody(String.class), +							.returnResult().getResponseBody();, +					assertThat(body).contains("Whitelabel Error Page"), +							.doesNotContain("<script>"), +							.contains("&lt;script&gt;");, +					this.output.expect(, +							allOf(containsString("Failed to handle request [GET /html]"),, +									containsString("IllegalStateException")));, +				});, +	}, +, +	@Test, +			@GetMapping("/html"), +			public String htmlEscape() {, +				throw new IllegalStateException("<script>");, +			}, +]