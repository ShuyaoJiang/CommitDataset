[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourceUtils.java, +					if (key != null && !subProperties.containsKey(key)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourceUtils.java, +					if (key != null && !subProperties.containsKey(key)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedPropertyResolverTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +, +import java.util.Properties;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertiesPropertySource;, +, +	@Test, +	public void testPropertySource() throws Exception {, +		Properties properties;, +		PropertiesPropertySource propertySource;, +		String propertyPrefix = "spring.datasource.";, +		String propertyName = "password";, +		String fullPropertyName = propertyPrefix + propertyName;, +		StandardEnvironment environment = new StandardEnvironment();, +		MutablePropertySources sources = environment.getPropertySources();, +		properties = new Properties();, +		properties.put(fullPropertyName, "systemPassword");, +		propertySource = new PropertiesPropertySource("system", properties);, +		sources.addLast(propertySource);, +		properties = new Properties();, +		properties.put(fullPropertyName, "propertiesPassword");, +		propertySource = new PropertiesPropertySource("properties", properties);, +		sources.addLast(propertySource);, +		RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(, +				environment, propertyPrefix);, +		String directProperty = propertyResolver.getProperty(propertyName);, +		Map<String, Object> subProperties = propertyResolver.getSubProperties("");, +		String subProperty = (String) subProperties.get(propertyName);, +		assertEquals(directProperty, subProperty);, +	}, +]