[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;, +import org.springframework.web.context.WebApplicationContext;, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			this.delegate = createDelegate(webApplicationContext);, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebApplicationContext context = webApplicationContext.get();, +				PathMappedEndpoints pathMappedEndpoints = context.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				return createDelegate(pathMappedEndpoints, pathProvider.getServletPath());, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints, String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath, paths);, +						new AntPathRequestMatcher(servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath, Set<String> paths) {, +			return paths.stream().map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +				Supplier<WebApplicationContext> context) {, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			try {, +				WebApplicationContext context = webApplicationContext.get();, +				WebEndpointProperties properties = context.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				this.delegate = createDelegate(pathProvider.getServletPath(), properties);, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				this.delegate = EMPTY_MATCHER;, +			}, +		private RequestMatcher createDelegate(String path, WebEndpointProperties properties) {, +				return new AntPathRequestMatcher(path + properties.getBasePath());, +				Supplier<WebApplicationContext> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;, +import org.springframework.web.context.WebApplicationContext;, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			this.delegate = createDelegate(webApplicationContext);, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebApplicationContext context = webApplicationContext.get();, +				PathMappedEndpoints pathMappedEndpoints = context.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				return createDelegate(pathMappedEndpoints, pathProvider.getServletPath());, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints, String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath, paths);, +						new AntPathRequestMatcher(servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath, Set<String> paths) {, +			return paths.stream().map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +				Supplier<WebApplicationContext> context) {, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			try {, +				WebApplicationContext context = webApplicationContext.get();, +				WebEndpointProperties properties = context.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				this.delegate = createDelegate(pathProvider.getServletPath(), properties);, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				this.delegate = EMPTY_MATCHER;, +			}, +		private RequestMatcher createDelegate(String path, WebEndpointProperties properties) {, +				return new AntPathRequestMatcher(path + properties.getBasePath());, +				Supplier<WebApplicationContext> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;, +	@Bean, +	public DispatcherServletPathProvider childDispatcherServletPathProvider() {, +		return () -> "";, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPathProvider;, +import org.springframework.web.context.WebApplicationContext;, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			this.delegate = createDelegate(webApplicationContext);, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebApplicationContext context = webApplicationContext.get();, +				PathMappedEndpoints pathMappedEndpoints = context.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				return createDelegate(pathMappedEndpoints, pathProvider.getServletPath());, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints, String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath, paths);, +						new AntPathRequestMatcher(servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath, Set<String> paths) {, +			return paths.stream().map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +				Supplier<WebApplicationContext> context) {, +			extends ApplicationContextRequestMatcher<WebApplicationContext> {, +			super(WebApplicationContext.class);, +		protected void initialized(Supplier<WebApplicationContext> webApplicationContext) {, +			try {, +				WebApplicationContext context = webApplicationContext.get();, +				WebEndpointProperties properties = context.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context.getBean(DispatcherServletPathProvider.class);, +				this.delegate = createDelegate(pathProvider.getServletPath(), properties);, +			}]