[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * @author Stephane Nicoll, +			this.transactionManager = buildTransactionManager();, +		String isolationLevel = determineIsolationLevel();, +		if (isolationLevel != null) {, +			factory.setIsolationLevelForCreate(isolationLevel);, +	/**, +	 * Determine the isolation level for create* operation of the {@link JobRepository}., +	 * @return the isolation level or {@code null} to use the default, +	 */, +	protected String determineIsolationLevel() {, +		return null;, +	}, +, +		return new DataSourceTransactionManager(this.dataSource);, +	}, +, +	private PlatformTransactionManager buildTransactionManager() {, +		PlatformTransactionManager transactionManager = createTransactionManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * @author Stephane Nicoll, +			this.transactionManager = buildTransactionManager();, +		String isolationLevel = determineIsolationLevel();, +		if (isolationLevel != null) {, +			factory.setIsolationLevelForCreate(isolationLevel);, +	/**, +	 * Determine the isolation level for create* operation of the {@link JobRepository}., +	 * @return the isolation level or {@code null} to use the default, +	 */, +	protected String determineIsolationLevel() {, +		return null;, +	}, +, +		return new DataSourceTransactionManager(this.dataSource);, +	}, +, +	private PlatformTransactionManager buildTransactionManager() {, +		PlatformTransactionManager transactionManager = createTransactionManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +@Import(BatchConfigurerConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * @author Stephane Nicoll, +			this.transactionManager = buildTransactionManager();, +		String isolationLevel = determineIsolationLevel();, +		if (isolationLevel != null) {, +			factory.setIsolationLevelForCreate(isolationLevel);, +	/**, +	 * Determine the isolation level for create* operation of the {@link JobRepository}., +	 * @return the isolation level or {@code null} to use the default, +	 */, +	protected String determineIsolationLevel() {, +		return null;, +	}, +, +		return new DataSourceTransactionManager(this.dataSource);, +	}, +, +	private PlatformTransactionManager buildTransactionManager() {, +		PlatformTransactionManager transactionManager = createTransactionManager();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +@Import(BatchConfigurerConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchConfigurerConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.batch;, +, +import javax.persistence.EntityManagerFactory;, +import javax.sql.DataSource;, +, +import org.springframework.batch.core.configuration.annotation.BatchConfigurer;, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.transaction.PlatformTransactionManager;, +, +/**, + *  Provide a {@link BatchConfigurer} according to the current environment., + *, + * @author Stephane Nicoll, + */]