[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public PrefixMetricGroupExporter(PrefixMetricReader reader, PrefixMetricWriter writer) {, +	public PrefixMetricGroupExporter(PrefixMetricReader reader,, +			PrefixMetricWriter writer, String prefix) {, +		if ((this.reader instanceof MultiMetricRepository) && this.groups.isEmpty()) {, +			return ((MultiMetricRepository) this.reader).groups();, +		}, +		this.writer.save(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public PrefixMetricGroupExporter(PrefixMetricReader reader, PrefixMetricWriter writer) {, +	public PrefixMetricGroupExporter(PrefixMetricReader reader,, +			PrefixMetricWriter writer, String prefix) {, +		if ((this.reader instanceof MultiMetricRepository) && this.groups.isEmpty()) {, +			return ((MultiMetricRepository) this.reader).groups();, +		}, +		this.writer.save(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java, +		String prefix = group;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +			if (!metric.getName().startsWith(prefix)) {, +				metric = new Metric<Number>(prefix + metric.getName(), metric.getValue(),, +						metric.getTimestamp());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public PrefixMetricGroupExporter(PrefixMetricReader reader, PrefixMetricWriter writer) {, +	public PrefixMetricGroupExporter(PrefixMetricReader reader,, +			PrefixMetricWriter writer, String prefix) {, +		if ((this.reader instanceof MultiMetricRepository) && this.groups.isEmpty()) {, +			return ((MultiMetricRepository) this.reader).groups();, +		}, +		this.writer.save(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java, +		String prefix = group;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +			if (!metric.getName().startsWith(prefix)) {, +				metric = new Metric<Number>(prefix + metric.getName(), metric.getValue(),, +						metric.getTimestamp());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/MultiMetricRepository.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +public interface MultiMetricRepository extends PrefixMetricReader, PrefixMetricWriter {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public PrefixMetricGroupExporter(PrefixMetricReader reader, PrefixMetricWriter writer) {, +	public PrefixMetricGroupExporter(PrefixMetricReader reader,, +			PrefixMetricWriter writer, String prefix) {, +		if ((this.reader instanceof MultiMetricRepository) && this.groups.isEmpty()) {, +			return ((MultiMetricRepository) this.reader).groups();, +		}, +		this.writer.save(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java, +		String prefix = group;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +			if (!metric.getName().startsWith(prefix)) {, +				metric = new Metric<Number>(prefix + metric.getName(), metric.getValue(),, +						metric.getTimestamp());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/MultiMetricRepository.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +public interface MultiMetricRepository extends PrefixMetricReader, PrefixMetricWriter {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepository.java, +	private String keys = "keys." + this.prefix;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +		this.keys = "keys." + this.prefix;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +				if (!values.isEmpty()) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;]