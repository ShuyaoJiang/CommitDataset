[+++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:spring-amqp-javadoc: http://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp, +++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:spring-amqp-javadoc: http://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +The Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol, +for message-oriented middleware. The Spring AMQP project applies core Spring concepts to, +the development of AMQP-based messaging solutions., +RabbitMQ is a lightweight, reliable, scalable and portable message broker based on the, +AMQP protocol. Spring uses `RabbitMQ` to communicate using the AMQP protocol., +	spring.rabbitmq.username=admin, +	spring.rabbitmq.password=secret, +Spring's `AmqpTemplate` and `AmqpAdmin` are auto-configured and you can autowire them, +directly into your own beans:, +	import org.springframework.beans.factory.annotation.Autowired;, +NOTE: {spring-amqp-javadoc}/rabbit/core/RabbitMessagingTemplate.{dc-ext}[`RabbitMessagingTemplate`], +can be injected in a similar manner., +Any `org.springframework.amqp.core.Queue` that is defined as a bean will be automatically, +used to declare a corresponding queue on the RabbitMQ instance if necessary., +When the Rabbit infrastructure is present, any bean can be annotated with `@RabbitListener`, +to create a listener endpoint. If no `RabbitListenerContainerFactory` has been defined, a, +default one is configured automatically., +, +The following component creates a listener endpoint on the `someQueue` queue:, +, +	@Component, +	public class MyBean {, +		@RabbitListener(queues = "someQueue"), +		public void processMessage(String content) {, +		}, +TIP: Check {spring-amqp-javadoc}/rabbit/annotation/EnableRabbit.{dc-ext}[the Javadoc of `@EnableRabbit`], +for more details.]