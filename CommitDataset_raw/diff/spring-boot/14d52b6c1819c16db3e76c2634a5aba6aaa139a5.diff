[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, + * <p>, + * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration, + * Auto-configuration} for Spring's AOP support. Equivalent to enabling, + * {@link org.springframework.context.annotation.EnableAspectJAutoProxy} in your, + * configuration. The configuration will not be activated if, + * {@literal spring.aop.auto=false}. The {@literal proxyTargetClass} attribute will be, + * {@literal false}, by default, but can be overridden by specifying, + * {@literal spring.aop.proxyTargetClass=true}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, + * <p>, + * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration, + * Auto-configuration} for Spring's AOP support. Equivalent to enabling, + * {@link org.springframework.context.annotation.EnableAspectJAutoProxy} in your, + * configuration. The configuration will not be activated if, + * {@literal spring.aop.auto=false}. The {@literal proxyTargetClass} attribute will be, + * {@literal false}, by default, but can be overridden by specifying, + * {@literal spring.aop.proxyTargetClass=true}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	private String contextPath;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, + * <p>, + * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration, + * Auto-configuration} for Spring's AOP support. Equivalent to enabling, + * {@link org.springframework.context.annotation.EnableAspectJAutoProxy} in your, + * configuration. The configuration will not be activated if, + * {@literal spring.aop.auto=false}. The {@literal proxyTargetClass} attribute will be, + * {@literal false}, by default, but can be overridden by specifying, + * {@literal spring.aop.proxyTargetClass=true}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	private String contextPath;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;, +	@ConditionalOnMissingBean(name = "websocketContainerCustomizer"), +	public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {, +, +		EmbeddedServletContainerCustomizer customizer = new EmbeddedServletContainerCustomizer() {, +, +			public void customize(ConfigurableEmbeddedServletContainer container) {, +				if (!(container instanceof TomcatEmbeddedServletContainerFactory)) {, +					throw new IllegalStateException(, +							"Websockets are currently only supported in Tomcat (found ", +									+ container.getClass() + ")");, +				}, +				((TomcatEmbeddedServletContainerFactory) container), +						.addContextCustomizers(new TomcatContextCustomizer() {, +							@Override, +							public void customize(Context context) {, +						});, +			}, +, +, +		return customizer;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, + * <p>, + * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration, + * Auto-configuration} for Spring's AOP support. Equivalent to enabling, + * {@link org.springframework.context.annotation.EnableAspectJAutoProxy} in your, + * configuration. The configuration will not be activated if, + * {@literal spring.aop.auto=false}. The {@literal proxyTargetClass} attribute will be, + * {@literal false}, by default, but can be overridden by specifying, + * {@literal spring.aop.proxyTargetClass=true}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	private String contextPath;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.tomcat.TomcatContextCustomizer;, +	@ConditionalOnMissingBean(name = "websocketContainerCustomizer"), +	public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {, +, +		EmbeddedServletContainerCustomizer customizer = new EmbeddedServletContainerCustomizer() {, +, +			public void customize(ConfigurableEmbeddedServletContainer container) {, +				if (!(container instanceof TomcatEmbeddedServletContainerFactory)) {, +					throw new IllegalStateException(, +							"Websockets are currently only supported in Tomcat (found ", +									+ container.getClass() + ")");, +				}, +				((TomcatEmbeddedServletContainerFactory) container), +						.addContextCustomizers(new TomcatContextCustomizer() {, +							@Override, +							public void customize(Context context) {, +						});, +			}, +, +, +		return customizer;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +import static org.mockito.Mockito.times;, +		verify(factory, times(0)).setContextPath("");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, + * <p>, + * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration]