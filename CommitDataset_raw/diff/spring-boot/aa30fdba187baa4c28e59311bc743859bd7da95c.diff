[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.jmx.support.MBeanServerFactoryBean;, +	@Bean, +	@ConditionalOnMissingBean(MBeanServer.class), +	public MBeanServerFactoryBean mbeanServer() {, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		return factory;, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.jmx.support.MBeanServerFactoryBean;, +	@Bean, +	@ConditionalOnMissingBean(MBeanServer.class), +	public MBeanServerFactoryBean mbeanServer() {, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		return factory;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +import javax.management.MBeanServer;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.jmx.support.MBeanServerFactoryBean;, +	@Bean, +	@ConditionalOnMissingBean(MBeanServer.class), +	public MBeanServerFactoryBean mbeanServer() {, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		return factory;, +	}, +]