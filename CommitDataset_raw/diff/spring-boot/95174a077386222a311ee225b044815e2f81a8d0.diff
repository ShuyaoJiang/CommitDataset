[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Collection<Object> existingCollection = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Collection<Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Collection<Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Collection<Object> existingCollection = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Collection<Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Collection<Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		Map<Object, Object> existingMap = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Map<Object, Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Map<Object, Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Collection<Object> existingCollection = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Collection<Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Collection<Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		Map<Object, Object> existingMap = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Map<Object, Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Map<Object, Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java, +	@Test, +	public void bindToBeanWithExceptionInGetterForExistingValue() {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.values", "a,b,c");, +		this.sources.add(source);, +		BeanWithGetterException result = this.binder, +				.bind("foo", Bindable.of(BeanWithGetterException.class)).get();, +		assertThat(result.getValues()).containsExactly("a", "b", "c");, +	}, +, +	public static class BeanWithGetterException {, +, +		private List<String> values;, +, +		public void setValues(List<String> values) {, +			this.values = values;, +		}, +, +		public List<String> getValues() {, +			return Collections.unmodifiableList(this.values);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Collection<Object> existingCollection = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked"), +	private Collection<Object> getExistingIfPossible(Supplier<?> existing) {, +		try {, +			return (Collection<Object>) existing.get();, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		Map<Object, Object> existingMap = getExistingIfPossible(existing);, +	@SuppressWarnings("unchecked")]