[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +		SpecificPlatform platform = SpecificPlatform.get();, +		if (platform != null) {, +			return platform.getMBeanServer();, +		}, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		factory.afterPropertiesSet();, +		return factory.getObject();, +, +				FactoryBean<?> factory = getMBeanServerFactory();, +				if (factory instanceof InitializingBean) {, +					((InitializingBean) factory).afterPropertiesSet();, +				}, +				Object server = factory.getObject();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +		SpecificPlatform platform = SpecificPlatform.get();, +		if (platform != null) {, +			return platform.getMBeanServer();, +		}, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		factory.afterPropertiesSet();, +		return factory.getObject();, +, +				FactoryBean<?> factory = getMBeanServerFactory();, +				if (factory instanceof InitializingBean) {, +					((InitializingBean) factory).afterPropertiesSet();, +				}, +				Object server = factory.getObject();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +			if (result != null && result.isHangup()) {, +				return (result.getCode() > 0 ? result.getCode() : 0);, +			}, +			return 0;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +		SpecificPlatform platform = SpecificPlatform.get();, +		if (platform != null) {, +			return platform.getMBeanServer();, +		}, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		factory.afterPropertiesSet();, +		return factory.getObject();, +, +				FactoryBean<?> factory = getMBeanServerFactory();, +				if (factory instanceof InitializingBean) {, +					((InitializingBean) factory).afterPropertiesSet();, +				}, +				Object server = factory.getObject();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +			if (result != null && result.isHangup()) {, +				return (result.getCode() > 0 ? result.getCode() : 0);, +			}, +			return 0;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/status/ExitStatus.java, +	 * Generic "OK" exit status with zero exit code and {@literal hangup=false}, +	 * Generic "not OK" exit status with non-zero exit code and {@literal hangup=true}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +		SpecificPlatform platform = SpecificPlatform.get();, +		if (platform != null) {, +			return platform.getMBeanServer();, +		}, +		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();, +		factory.setLocateExistingServerIfPossible(true);, +		factory.afterPropertiesSet();, +		return factory.getObject();, +, +				FactoryBean<?> factory = getMBeanServerFactory();, +				if (factory instanceof InitializingBean) {, +					((InitializingBean) factory).afterPropertiesSet();, +				}, +				Object server = factory.getObject();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +			if (result != null && result.isHangup()) {, +				return (result.getCode() > 0 ? result.getCode() : 0);, +			}, +			return 0;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/status/ExitStatus.java, +	 * Generic "OK" exit status with zero exit code and {@literal hangup=false}, +	 * Generic "not OK" exit status with non-zero exit code and {@literal hangup=true}, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-cli.adoc, +The resulting jar will contain the classes produced by compiling the application and all, +of the application's dependencies so that it can then be run using `java -jar`. The jar, +file will also contain entries from the application's classpath. You can add explicit, +paths to the jar using `--include` and `--exclude` (both are comma separated, and both, +accept prefixes to the values ``+'' and ``-'' to signify that they should be removed from, +the defaults). The default includes are]