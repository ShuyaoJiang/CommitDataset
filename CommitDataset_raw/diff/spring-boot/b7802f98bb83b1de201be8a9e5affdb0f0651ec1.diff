[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +			String prefix = this.targetName != null ? this.targetName + "." : "";, +					for(String relaxedName : new RelaxedNames(prefix + name)) {, +						names.add(relaxedName);, +						patterns.add(relaxedName);, +							patterns.add(relaxedName + suffix);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +			String prefix = this.targetName != null ? this.targetName + "." : "";, +					for(String relaxedName : new RelaxedNames(prefix + name)) {, +						names.add(relaxedName);, +						patterns.add(relaxedName);, +							patterns.add(relaxedName + suffix);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java, +	public void testNestedOsEnvironmentVariableWithUnderscore() {, +		EnvironmentTestUtils.addEnvironment(this.context, "NAME:foo", "NESTED_NAME:bar");, +		this.context.register(NestedConfiguration.class);, +		this.context.refresh();, +		assertEquals(1, this.context.getBeanNamesForType(NestedProperties.class).length);, +		assertEquals("foo", this.context.getBean(NestedProperties.class).name);, +		assertEquals("bar", this.context.getBean(NestedProperties.class).nested.name);, +	}, +, +	@Test, +	public void testOsEnvironmentVariableEmbeddedBinding() {, +		EnvironmentTestUtils.addEnvironment(this.context, "SPRING_FOO_NAME:foo");, +		this.context.register(EmbeddedTestConfiguration.class);, +		this.context.refresh();, +		assertEquals(1,, +				this.context.getBeanNamesForType(EmbeddedTestProperties.class).length);, +		assertEquals("foo", this.context.getBean(TestProperties.class).name);, +	}, +, +	@Test]