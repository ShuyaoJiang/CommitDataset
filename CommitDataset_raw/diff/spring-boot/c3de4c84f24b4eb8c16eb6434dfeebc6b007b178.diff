[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java, +			if (applicationName == null) {, +			streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationName);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java, +			if (applicationName == null) {, +			streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationName);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +		TaskExecutorBuilder builder = new TaskExecutorBuilder();, +		builder = builder.queueCapacity(pool.getQueueCapacity());, +		builder = builder.corePoolSize(pool.getCoreSize());, +		builder = builder.maxPoolSize(pool.getMaxSize());, +		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());, +		builder = builder.keepAlive(pool.getKeepAlive());, +		builder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());, +		builder = builder.customizers(this.taskExecutorCustomizers);, +		builder = builder.taskDecorator(this.taskDecorator.getIfUnique());, +		return builder;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java, +			if (applicationName == null) {, +			streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationName);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +		TaskExecutorBuilder builder = new TaskExecutorBuilder();, +		builder = builder.queueCapacity(pool.getQueueCapacity());, +		builder = builder.corePoolSize(pool.getCoreSize());, +		builder = builder.maxPoolSize(pool.getMaxSize());, +		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());, +		builder = builder.keepAlive(pool.getKeepAlive());, +		builder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());, +		builder = builder.customizers(this.taskExecutorCustomizers);, +		builder = builder.taskDecorator(this.taskDecorator.getIfUnique());, +		return builder;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java, +		TaskSchedulerBuilder builder = new TaskSchedulerBuilder();, +		builder = builder.poolSize(properties.getPool().getSize());, +		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());, +		builder = builder.customizers(taskSchedulerCustomizers);, +		return builder;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java, +			if (applicationName == null) {, +			streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationName);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +		TaskExecutorBuilder builder = new TaskExecutorBuilder();, +		builder = builder.queueCapacity(pool.getQueueCapacity());, +		builder = builder.corePoolSize(pool.getCoreSize());, +		builder = builder.maxPoolSize(pool.getMaxSize());, +		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());, +		builder = builder.keepAlive(pool.getKeepAlive());, +		builder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());, +		builder = builder.customizers(this.taskExecutorCustomizers);, +		builder = builder.taskDecorator(this.taskDecorator.getIfUnique());, +		return builder;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java, +		TaskSchedulerBuilder builder = new TaskSchedulerBuilder();, +		builder = builder.poolSize(properties.getPool().getSize());, +		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());, +		builder = builder.customizers(taskSchedulerCustomizers);, +		return builder;, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +			return (configurer) -> configurer.defaultCodecs().enableLoggingRequestDetails(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaStreamsAnnotationDrivenConfiguration.java, +			if (applicationName == null) {, +			streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationName);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +		TaskExecutorBuilder builder = new TaskExecutorBuilder();, +		builder = builder.queueCapacity(pool.getQueueCapacity());, +		builder = builder.corePoolSize(pool.getCoreSize());, +		builder = builder.maxPoolSize(pool.getMaxSize());, +		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());, +		builder = builder.keepAlive(pool.getKeepAlive());, +		builder = builder.threadNamePrefix(this.properties.getThreadNamePrefix());, +		builder = builder.customizers(this.taskExecutorCustomizers);, +		builder = builder.taskDecorator(this.taskDecorator.getIfUnique());, +		return builder;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java, +		TaskSchedulerBuilder builder = new TaskSchedulerBuilder();, +		builder = builder.poolSize(properties.getPool().getSize());, +		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());, +		builder = builder.customizers(taskSchedulerCustomizers);, +		return builder;, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc]