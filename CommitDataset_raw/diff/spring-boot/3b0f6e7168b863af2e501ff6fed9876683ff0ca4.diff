[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameters.java, +				() -> "Failed to extract parameter names for " + method);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameters.java, +				() -> "Failed to extract parameter names for " + method);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +				() -> "No auto-configuration attributes found. Is ", +						+ metadata.getClassName() + " annotated with ", +						+ ClassUtils.getShortName(name) + "?");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameters.java, +				() -> "Failed to extract parameter names for " + method);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +				() -> "No auto-configuration attributes found. Is ", +						+ metadata.getClassName() + " annotated with ", +						+ ClassUtils.getShortName(name) + "?");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +					() -> "No cache manager could ", +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameters.java, +				() -> "Failed to extract parameter names for " + method);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +				() -> "No auto-configuration attributes found. Is ", +						+ metadata.getClassName() + " annotated with ", +						+ ClassUtils.getShortName(name) + "?");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +					() -> "No cache manager could ", +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, + * Copyright 2012-2018 the original author or authors., +			Assert.isTrue(config.exists(), () -> "Cache configuration does not exist '", +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +					() -> "No @Endpoint id attribute specified for ", +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameters.java, +				() -> "Failed to extract parameter names for " + method);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +				() -> "No auto-configuration attributes found. Is ", +						+ metadata.getClassName() + " annotated with ", +						+ ClassUtils.getShortName(name) + "?");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +					() -> "No cache manager could ", +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, + * Copyright 2012-2018 the original author or authors., +			Assert.isTrue(config.exists(), () -> "Cache configuration does not exist '", +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			Assert.isTrue(getTypes().size() == 1, () -> annotationName(), +					+ " annotations must specify only one type (got " + getTypes() + ")");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), () -> "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), () -> "Path '" + path + "' cannot be read");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/test/MetricsRun.java, +					() -> "Unknown export auto-configuration " + configuration.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java]