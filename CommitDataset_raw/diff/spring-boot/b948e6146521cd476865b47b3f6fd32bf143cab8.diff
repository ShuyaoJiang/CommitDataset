[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +	private static final Pattern CAMEL_CASE_PATTERN = Pattern.compile("([^A-Z-])([A-Z])");, +, +				Matcher matcher = CAMEL_CASE_PATTERN.matcher(value);, +				StringBuffer result = new StringBuffer();, +				while (matcher.find()) {, +					matcher.appendReplacement(result, matcher.group(1) + '_', +							+ StringUtils.uncapitalize(matcher.group(2)));, +				matcher.appendTail(result);, +				return result.toString();, +		},, +, +		CAMELCASE_TO_HYPHEN {, +			@Override, +			public String apply(String value) {, +				Matcher matcher = CAMEL_CASE_PATTERN.matcher(value);, +				StringBuffer result = new StringBuffer();, +				while (matcher.find()) {, +					matcher.appendReplacement(result, matcher.group(1) + '-', +							+ StringUtils.uncapitalize(matcher.group(2)));, +				matcher.appendTail(result);, +				return result.toString();, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +	private static final Pattern CAMEL_CASE_PATTERN = Pattern.compile("([^A-Z-])([A-Z])");, +, +				Matcher matcher = CAMEL_CASE_PATTERN.matcher(value);, +				StringBuffer result = new StringBuffer();, +				while (matcher.find()) {, +					matcher.appendReplacement(result, matcher.group(1) + '_', +							+ StringUtils.uncapitalize(matcher.group(2)));, +				matcher.appendTail(result);, +				return result.toString();, +		},, +, +		CAMELCASE_TO_HYPHEN {, +			@Override, +			public String apply(String value) {, +				Matcher matcher = CAMEL_CASE_PATTERN.matcher(value);, +				StringBuffer result = new StringBuffer();, +				while (matcher.find()) {, +					matcher.appendReplacement(result, matcher.group(1) + '-', +							+ StringUtils.uncapitalize(matcher.group(2)));, +				matcher.appendTail(result);, +				return result.toString();, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, +		assertThat(iterator.next(), equalTo("ca-mel"));, +		assertThat(iterator.next(), equalTo("CA-MEL"));, +		assertThat(iterator.hasNext(), equalTo(false));, +	}, +, +	@Test, +	public void fromCompoundCamelCase() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("caMelCase").iterator();, +		assertThat(iterator.next(), equalTo("caMelCase"));, +		assertThat(iterator.next(), equalTo("ca_mel_case"));, +		assertThat(iterator.next(), equalTo("ca-mel-case"));, +		assertThat(iterator.next(), equalTo("camelcase"));, +		assertThat(iterator.next(), equalTo("CAMELCASE"));, +		assertThat(iterator.next(), equalTo("CA_MEL_CASE"));, +		assertThat(iterator.next(), equalTo("CA-MEL-CASE"));]