[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.StringUtils;, +	},, +, +	/**, +	 * Kubernetes platform., +	 */, +	KUBERNETES {, +		@Override, +		public boolean isActive(Environment environment) {, +			if (environment instanceof ConfigurableEnvironment) {, +				MapPropertySource propertySource = (MapPropertySource) ((ConfigurableEnvironment) environment), +						.getPropertySources(), +						.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);, +				if (propertySource != null) {, +					for (String name : propertySource.getPropertyNames()) {, +						if (name.endsWith("_SERVICE_HOST")) {, +							String serviceName = StringUtils.split(name,, +									"_SERVICE_HOST")[0];, +							if (propertySource, +									.getProperty(serviceName + "_SERVICE_PORT") != null) {, +								return true;, +							}, +						}, +					}, +				}, +			}, +			return false;, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.StringUtils;, +	},, +, +	/**, +	 * Kubernetes platform., +	 */, +	KUBERNETES {, +		@Override, +		public boolean isActive(Environment environment) {, +			if (environment instanceof ConfigurableEnvironment) {, +				MapPropertySource propertySource = (MapPropertySource) ((ConfigurableEnvironment) environment), +						.getPropertySources(), +						.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);, +				if (propertySource != null) {, +					for (String name : propertySource.getPropertyNames()) {, +						if (name.endsWith("_SERVICE_HOST")) {, +							String serviceName = StringUtils.split(name,, +									"_SERVICE_HOST")[0];, +							if (propertySource, +									.getProperty(serviceName + "_SERVICE_PORT") != null) {, +								return true;, +							}, +						}, +					}, +				}, +			}, +			return false;, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.env.SystemEnvironmentPropertySource;, +	@Test, +	public void getActiveWhenHasServiceHostAndServicePortShouldReturnKubernetes() {, +		MockEnvironment environment = new MockEnvironment();, +		Map<String, Object> source = new HashMap<>();, +		source.put("EXAMPLE_SERVICE_HOST", "---");, +		source.put("EXAMPLE_SERVICE_PORT", "8080");, +		PropertySource propertySource = new SystemEnvironmentPropertySource(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, source);, +		environment.getPropertySources().addFirst(propertySource);, +		CloudPlatform platform = CloudPlatform.getActive(environment);, +		assertThat(platform).isEqualTo(CloudPlatform.KUBERNETES);, +		assertThat(platform.isActive(environment)).isTrue();, +	}, +, +	@Test, +	public void getActiveWhenHasServiceHostAndNoServicePortShouldNotReturnKubernetes() {, +		MockEnvironment environment = new MockEnvironment();, +		PropertySource propertySource = new SystemEnvironmentPropertySource(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +				Collections.singletonMap("EXAMPLE_SERVICE_HOST", "---"));, +		environment.getPropertySources().addFirst(propertySource);, +		CloudPlatform platform = CloudPlatform.getActive(environment);, +		assertThat(platform).isNull();, +	}, +]