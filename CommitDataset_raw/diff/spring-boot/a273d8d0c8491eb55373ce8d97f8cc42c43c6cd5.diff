[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java, +import org.springframework.util.StringUtils;, +		T connectionFactory = constructor.newInstance(false,, +		String user = this.properties.getUser();, +		if (StringUtils.hasText(user)) {, +			connectionFactory.setUser(user);, +			connectionFactory.setPassword(this.properties.getPassword());, +		}, +		return connectionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java, +import org.springframework.util.StringUtils;, +		T connectionFactory = constructor.newInstance(false,, +		String user = this.properties.getUser();, +		if (StringUtils.hasText(user)) {, +			connectionFactory.setUser(user);, +			connectionFactory.setPassword(this.properties.getPassword());, +		}, +		return connectionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java, + * Copyright 2012-2016 the original author or authors., +	/**, +	 * Login user of the broker., +	 */, +	private String user;, +, +	/**, +	 * Login password of the broker., +	 */, +	private String password;, +, +	public String getUser() {, +		return this.user;, +	}, +, +	public void setUser(String user) {, +		this.user = user;, +	}, +, +	public String getPassword() {, +		return this.password;, +	}, +, +	public void setPassword(String password) {, +		this.password = password;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java, +import org.springframework.util.StringUtils;, +		T connectionFactory = constructor.newInstance(false,, +		String user = this.properties.getUser();, +		if (StringUtils.hasText(user)) {, +			connectionFactory.setUser(user);, +			connectionFactory.setPassword(this.properties.getPassword());, +		}, +		return connectionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java, + * Copyright 2012-2016 the original author or authors., +	/**, +	 * Login user of the broker., +	 */, +	private String user;, +, +	/**, +	 * Login password of the broker., +	 */, +	private String password;, +, +	public String getUser() {, +		return this.user;, +	}, +, +	public void setUser(String user) {, +		this.user = user;, +	}, +, +	public String getPassword() {, +		return this.password;, +	}, +, +	public void setPassword(String password) {, +		this.password = password;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +		assertThat(connectionFactory.getUser()).isNull();, +		assertThat(connectionFactory.getPassword()).isNull();, +	public void nativeConnectionFactoryCredentials() {, +		load(EmptyConfiguration.class, "spring.artemis.mode:native",, +				"spring.artemis.user:user", "spring.artemis.password:secret");, +		JmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);, +		ActiveMQConnectionFactory connectionFactory = this.context, +				.getBean(ActiveMQConnectionFactory.class);, +		assertThat(connectionFactory).isEqualTo(jmsTemplate.getConnectionFactory());, +		assertNettyConnectionFactory(connectionFactory, "localhost", 61616);, +		assertThat(connectionFactory.getUser()).isEqualTo("user");, +		assertThat(connectionFactory.getPassword()).isEqualTo("secret");, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java]