[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +		return getValue(" with PID ", () -> new ApplicationPid().toString());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +		return getValue(" with PID ", () -> new ApplicationPid().toString());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN,, +				environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN,, +				environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +		return getValue(" with PID ", () -> new ApplicationPid().toString());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN,, +				environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN,, +				environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console");, +		assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)), +				.isEqualTo("file");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("target/log");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)), +				.isEqualTo("level");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("path");, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console ${pid}");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +		return getValue(" with PID ", () -> new ApplicationPid().toString());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN,, +				environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN,, +				environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console");, +		assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)), +				.isEqualTo("file");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("target/log");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)), +				.isEqualTo("level");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("path");, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console ${pid}");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("log.file");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("logpath/spring.log");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("logpath");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("log.file");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("logpath");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +		return getValue(" with PID ", () -> new ApplicationPid().toString());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN,, +				environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN,, +				environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console");, +		assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)), +				.isEqualTo("file");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("target/log");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)), +				.isEqualTo("level");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("path");, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)), +				.isEqualTo("console ${pid}");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("log.file");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("logpath/spring.log");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("logpath");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)), +				.isEqualTo("log.file");, +		assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)), +				.isEqualTo("logpath");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +				.endsWith("example.log");]