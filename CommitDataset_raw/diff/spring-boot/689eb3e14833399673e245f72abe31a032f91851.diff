[+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml, +							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml, +							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml, +							<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml, +							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml, +							<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	@Override, +	protected ClassLoader createClassLoader(URL[] urls) throws Exception {, +		Set<URL> copy = new LinkedHashSet<URL>();, +		ClassLoader loader = getDefaultClassLoader();, +		if (loader instanceof URLClassLoader) {, +			for (URL url : ((URLClassLoader) loader).getURLs()) {, +				copy.add(url);, +			}, +		}, +		for (URL url : urls) {, +			copy.add(url);, +		}, +		return super.createClassLoader(copy.toArray(new URL[copy.size()]));, +	}, +, +	private static ClassLoader getDefaultClassLoader() {, +		ClassLoader cl = null;, +		try {, +			cl = Thread.currentThread().getContextClassLoader();, +		}, +		catch (Throwable ex) {, +			// Cannot access thread context ClassLoader - falling back to system class, +			// loader..., +		}, +		if (cl == null) {, +			// No thread context class loader -> use class loader of this class., +			cl = ExecutableArchiveLauncher.class.getClassLoader();, +		}, +		return cl;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml, +							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml, +							<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	@Override, +	protected ClassLoader createClassLoader(URL[] urls) throws Exception {, +		Set<URL> copy = new LinkedHashSet<URL>();, +		ClassLoader loader = getDefaultClassLoader();, +		if (loader instanceof URLClassLoader) {, +			for (URL url : ((URLClassLoader) loader).getURLs()) {, +				copy.add(url);, +			}, +		}, +		for (URL url : urls) {, +			copy.add(url);, +		}, +		return super.createClassLoader(copy.toArray(new URL[copy.size()]));, +	}, +, +	private static ClassLoader getDefaultClassLoader() {, +		ClassLoader cl = null;, +		try {, +			cl = Thread.currentThread().getContextClassLoader();, +		}, +		catch (Throwable ex) {, +			// Cannot access thread context ClassLoader - falling back to system class, +			// loader..., +		}, +		if (cl == null) {, +			// No thread context class loader -> use class loader of this class., +			cl = ExecutableArchiveLauncher.class.getClassLoader();, +		}, +		return cl;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar]