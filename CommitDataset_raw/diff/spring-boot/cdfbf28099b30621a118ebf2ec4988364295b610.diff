[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final boolean proxyTargetAware;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware) {, +		this.proxyTargetAware = proxyTargetAware;, +	/**, +	 * Return if AOP advised beans should be proxy target aware., +	 * @return if proxy target aware, +	 */, +	public boolean isProxyTargetAware() {, +		return this.proxyTargetAware;, +	}, +, +		result = MULTIPLIER * result, +				+ ObjectUtils.nullSafeHashCode(this.proxyTargetAware);, +		result &= ObjectUtils.nullSafeEquals(this.proxyTargetAware,, +				other.proxyTargetAware);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final boolean proxyTargetAware;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware) {, +		this.proxyTargetAware = proxyTargetAware;, +	/**, +	 * Return if AOP advised beans should be proxy target aware., +	 * @return if proxy target aware, +	 */, +	public boolean isProxyTargetAware() {, +		return this.proxyTargetAware;, +	}, +, +		result = MULTIPLIER * result, +				+ ObjectUtils.nullSafeHashCode(this.proxyTargetAware);, +		result &= ObjectUtils.nullSafeEquals(this.proxyTargetAware,, +				other.proxyTargetAware);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +					annotation.serializable(), annotation.reset(),, +					annotation.proxyTargetAware());, +					annotation.reset(), annotation.proxyTargetAware());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final boolean proxyTargetAware;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware) {, +		this.proxyTargetAware = proxyTargetAware;, +	/**, +	 * Return if AOP advised beans should be proxy target aware., +	 * @return if proxy target aware, +	 */, +	public boolean isProxyTargetAware() {, +		return this.proxyTargetAware;, +	}, +, +		result = MULTIPLIER * result, +				+ ObjectUtils.nullSafeHashCode(this.proxyTargetAware);, +		result &= ObjectUtils.nullSafeEquals(this.proxyTargetAware,, +				other.proxyTargetAware);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +					annotation.serializable(), annotation.reset(),, +					annotation.proxyTargetAware());, +					annotation.reset(), annotation.proxyTargetAware());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, +import org.mockito.Mockito;, +	/**, +	 * Indicates that Mockito methods such as {@link Mockito#verify(Object) verify(mock)}, +	 * should use the {@code target} of AOP advised beans, rather than the proxy itself., +	 * If set to {@code false} you may need to use the result of, +	 * {@link org.springframework.test.util.AopTestUtils#getUltimateTargetObject(Object), +	 * AopTestUtils.getUltimateTargetObject(...)} when calling Mockito methods., +	 * @return {@code true} if the target of AOP advised beans is used or {@code false} if, +	 * the proxy is used directly, +	 */, +	boolean proxyTargetAware() default true;, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	private final boolean proxyTargetAware;, +, +	Definition(String name, MockReset reset, boolean proxyTargetAware) {, +		this.proxyTargetAware = proxyTargetAware;, +	/**, +	 * Return if AOP advised beans should be proxy target aware., +	 * @return if proxy target aware, +	 */, +	public boolean isProxyTargetAware() {, +		return this.proxyTargetAware;, +	}, +, +		result = MULTIPLIER * result, +				+ ObjectUtils.nullSafeHashCode(this.proxyTargetAware);, +		result &= ObjectUtils.nullSafeEquals(this.proxyTargetAware,, +				other.proxyTargetAware);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +					annotation.serializable(), annotation.reset(),, +					annotation.proxyTargetAware());, +					annotation.reset(), annotation.proxyTargetAware());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, +import org.mockito.Mockito;, +	/**, +	 * Indicates that Mockito methods such as {@link Mockito#verify(Object) verify(mock)}, +	 * should use the {@code target} of AOP advised beans, rather than the proxy itself., +	 * If set to {@code false} you may need to use the result of, +	 * {@link org.springframework.test.util.AopTestUtils#getUltimateTargetObject(Object)]