[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, + * Auto-configuration} to integrate with an HornetQ broker. If the necessary, + * classes are present, embed the broker in the application by default. Otherwise,, + * connect to a broker available on the local machine with the default settings., + * @see HornetQProperties, +	 * {@linkplain HornetQProperties#getMode() mode} has been explicitly set, start an, +	 * embedded server unless it has been explicitly disabled, connect to a broker, +	 * available on the local machine with the default settings otherwise., +	@ConditionalOnExpression("'${spring.hornetq.embedded.enabled:true}' == 'true'"), +			customize(configuration);, +		private void customize(org.hornetq.core.config.Configuration configuration) {, +			addTopics(configuration, this.properties.getEmbedded().getTopics());, +		private void addTopics(JMSConfiguration configuration, String[] topics) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, + * Auto-configuration} to integrate with an HornetQ broker. If the necessary, + * classes are present, embed the broker in the application by default. Otherwise,, + * connect to a broker available on the local machine with the default settings., + * @see HornetQProperties, +	 * {@linkplain HornetQProperties#getMode() mode} has been explicitly set, start an, +	 * embedded server unless it has been explicitly disabled, connect to a broker, +	 * available on the local machine with the default settings otherwise., +	@ConditionalOnExpression("'${spring.hornetq.embedded.enabled:true}' == 'true'"), +			customize(configuration);, +		private void customize(org.hornetq.core.config.Configuration configuration) {, +			addTopics(configuration, this.properties.getEmbedded().getTopics());, +		private void addTopics(JMSConfiguration configuration, String[] topics) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +		private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, + * Auto-configuration} to integrate with an HornetQ broker. If the necessary, + * classes are present, embed the broker in the application by default. Otherwise,, + * connect to a broker available on the local machine with the default settings., + * @see HornetQProperties, +	 * {@linkplain HornetQProperties#getMode() mode} has been explicitly set, start an, +	 * embedded server unless it has been explicitly disabled, connect to a broker, +	 * available on the local machine with the default settings otherwise., +	@ConditionalOnExpression("'${spring.hornetq.embedded.enabled:true}' == 'true'"), +			customize(configuration);, +		private void customize(org.hornetq.core.config.Configuration configuration) {, +			addTopics(configuration, this.properties.getEmbedded().getTopics());, +		private void addTopics(JMSConfiguration configuration, String[] topics) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +		private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfigurationTests.java, +		load(EmptyConfiguration.class, "spring.hornetq.mode:native",, +				"spring.hornetq.host:192.168.1.144",, +		load(EmptyConfiguration.class, "spring.hornetq.mode:embedded");, +	public void embeddedConnectionFactoryByDefault() {, +		assertEquals(1, this.context.getBeansOfType(EmbeddedJMS.class).size());, +		org.hornetq.core.config.Configuration configuration = this.context, +				.getBean(org.hornetq.core.config.Configuration.class);, +		assertFalse("Persistence disabled by default",, +				configuration.isPersistenceEnabled());, +		assertFalse("Security disabled by default", configuration.isSecurityEnabled());, +, +	public void nativeConnectionFactoryIfEmbeddedServiceDisabledExplicitly() {, +		// No mode is specified, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.enabled:false");, +, +		assertEquals(0, this.context.getBeansOfType(EmbeddedJMS.class).size());, +, +		HornetQConnectionFactory connectionFactory = this.context, +				.getBean(HornetQConnectionFactory.class);, +		assertNettyConnectionFactory(connectionFactory, "localhost", 5445);, +	}, +, +	@Test, +	public void embeddedConnectionFactorEvenIfEmbeddedServiceDisabled() {, +		// No mode is specified, +		load(EmptyConfiguration.class,, +				"spring.hornetq.mode:embedded",, +				"spring.hornetq.embedded.enabled:false");, +, +		assertEquals(0, this.context.getBeansOfType(EmbeddedJMS.class).size());, +, +		HornetQConnectionFactory connectionFactory = this.context, +				.getBean(HornetQConnectionFactory.class);, +		assertInVmConnectionFactory(connectionFactory);, +	}, +, +, +	@Test, +		load(EmptyConfiguration.class,, +		load(DestinationConfiguration.class);, +		load(CustomJmsConfiguration.class,, +		load(CustomHornetQConfiguration.class);, +		load(EmptyConfiguration.class,, +		load(EmptyConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, + * Auto-configuration} to integrate with an HornetQ broker. If the necessary, + * classes are present, embed the broker in the application by default. Otherwise,, + * connect to a broker available on the local machine with the default settings., + * @see HornetQProperties, +	 * {@linkplain HornetQProperties#getMode() mode} has been explicitly set, start an, +	 * embedded server unless it has been explicitly disabled, connect to a broker, +	 * available on the local machine with the default settings otherwise.]