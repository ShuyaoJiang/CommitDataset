[+++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/AbstractConfigurationMetadataTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).isNotNull();, +		assertThat(actual.getGroupId()).isEqualTo(groupId);, +		assertThat(actual.getType()).isEqualTo(type);, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getId()).isEqualTo(id);, +		assertThat(actual.getName()).isEqualTo(name);, +		assertThat(actual.getType()).isEqualTo(typeName);, +		assertThat(actual.getDefaultValue()).isEqualTo(defaultValue);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/AbstractConfigurationMetadataTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).isNotNull();, +		assertThat(actual.getGroupId()).isEqualTo(groupId);, +		assertThat(actual.getType()).isEqualTo(type);, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getId()).isEqualTo(id);, +		assertThat(actual.getName()).isEqualTo(name);, +		assertThat(actual.getType()).isEqualTo(typeName);, +		assertThat(actual.getDefaultValue()).isEqualTo(defaultValue);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilderTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +			assertThat(repo.getAllGroups()).hasSize(1);, +			assertThat(repo.getAllProperties()).hasSize(3);, +			assertThat(repo.getAllGroups()).hasSize(2);, +			assertThat(repo.getAllProperties()).hasSize(6);, +			assertThat(repo.getAllGroups()).hasSize(2);, +			assertThat(repo.getAllProperties()).hasSize(5);, +			assertThat(repo.getAllGroups()).hasSize(1);, +			assertThat(group.getSources()).hasSize(3);, +			assertThat(group.getProperties()).hasSize(5);, +			assertThat(repo.getAllProperties()).hasSize(5);, +			assertThat(secondRepo).isNotEqualTo(firstRepo);, +			assertThat(firstRepo.getAllGroups()).hasSize(1);, +			assertThat(firstRepo.getAllProperties()).hasSize(3);, +			assertThat(secondRepo.getAllGroups()).hasSize(2);, +			assertThat(secondRepo.getAllProperties()).hasSize(6);, +		assertThat(source.getProperties()).hasSize(2);, +		assertThat(source2.getProperties()).hasSize(2);, +		assertThat(source.getProperties()).hasSize(2);, +		assertThat(source2.getProperties()).hasSize(2);, +		assertThat(property.getValueHints().size()).isEqualTo(valueHints);, +		assertThat(property.getValueHints().size()).isEqualTo(valueProviders);, +			assertThat(source).containsKey(key);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/AbstractConfigurationMetadataTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).isNotNull();, +		assertThat(actual.getGroupId()).isEqualTo(groupId);, +		assertThat(actual.getType()).isEqualTo(type);, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getId()).isEqualTo(id);, +		assertThat(actual.getName()).isEqualTo(name);, +		assertThat(actual.getType()).isEqualTo(typeName);, +		assertThat(actual.getDefaultValue()).isEqualTo(defaultValue);, +		assertThat(actual).isNotNull();, +		assertThat(actual.getSourceType()).isEqualTo(sourceType);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilderTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +			assertThat(repo.getAllGroups()).hasSize(1);, +			assertThat(repo.getAllProperties()).hasSize(3);, +			assertThat(repo.getAllGroups()).hasSize(2);, +			assertThat(repo.getAllProperties()).hasSize(6);, +			assertThat(repo.getAllGroups()).hasSize(2);, +			assertThat(repo.getAllProperties()).hasSize(5);, +			assertThat(repo.getAllGroups()).hasSize(1);, +			assertThat(group.getSources()).hasSize(3);, +			assertThat(group.getProperties()).hasSize(5);, +			assertThat(repo.getAllProperties()).hasSize(5);, +			assertThat(secondRepo).isNotEqualTo(firstRepo);, +			assertThat(firstRepo.getAllGroups()).hasSize(1);, +			assertThat(firstRepo.getAllProperties()).hasSize(3);, +			assertThat(secondRepo.getAllGroups()).hasSize(2);, +			assertThat(secondRepo.getAllProperties()).hasSize(6);, +		assertThat(source.getProperties()).hasSize(2);, +		assertThat(source2.getProperties()).hasSize(2);, +		assertThat(source.getProperties()).hasSize(2);, +		assertThat(source2.getProperties()).hasSize(2);, +		assertThat(property.getValueHints().size()).isEqualTo(valueHints);, +		assertThat(property.getValueHints().size()).isEqualTo(valueProviders);, +			assertThat(source).containsKey(key);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/DescriptionExtractorTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(description).isEqualTo("My short description.");, +		assertThat(description).isEqualTo("My short description.");, +		assertThat(description).isEqualTo("My short description.");, +		assertThat(description).isEqualTo("My short description");, +		assertThat(description).isEqualTo("My short description");, +		assertThat(this.extractor.getShortDescription(null)).isEqualTo(null);, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/AbstractConfigurationMetadataTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(actual).isNotNull();, +		assertThat(actual.getGroupId()).isEqualTo(groupId);, +		assertThat(actual.getType()).isEqualTo(type);]