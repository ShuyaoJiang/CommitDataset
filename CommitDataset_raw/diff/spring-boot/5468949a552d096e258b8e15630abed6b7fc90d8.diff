[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +			List<AccessDecisionVoter> voters = new ArrayList<AccessDecisionVoter>();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +			List<AccessDecisionVoter> voters = new ArrayList<AccessDecisionVoter>();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.type.StandardAnnotationMetadata;, +	public static boolean evaluateForClass(Class<?> annotated, ConditionContext context) {, +		Conditional conditional = AnnotationUtils.findAnnotation(annotated, Conditional.class);, +		StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(annotated);, +		for (Class<? extends Condition> type  : conditional.value()) {, +			Condition condition = BeanUtils.instantiateClass(type);, +			if (condition.matches(context, metadata)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +			List<AccessDecisionVoter> voters = new ArrayList<AccessDecisionVoter>();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.type.StandardAnnotationMetadata;, +	public static boolean evaluateForClass(Class<?> annotated, ConditionContext context) {, +		Conditional conditional = AnnotationUtils.findAnnotation(annotated, Conditional.class);, +		StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(annotated);, +		for (Class<? extends Condition> type  : conditional.value()) {, +			Condition condition = BeanUtils.instantiateClass(type);, +			if (condition.matches(context, metadata)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSecurityOAuth2ResourceServerConfiguration.java, +				if (SpringBootCondition.evaluateForClass(ResourceServerCondition.class, context)) {, +							.match("found authorization server endpoints configuration");]