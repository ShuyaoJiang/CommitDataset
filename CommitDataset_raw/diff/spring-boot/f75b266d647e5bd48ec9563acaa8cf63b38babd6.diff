[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +				boolean deprecated = hasDeprecateAnnotation(getter), +						|| hasDeprecateAnnotation(setter);, +						sourceType, null, description, defaultValue, deprecated));, +	private boolean hasDeprecateAnnotation(Element element) {, +		return getAnnotation(element, "java.lang.Deprecated") != null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +				boolean deprecated = hasDeprecateAnnotation(getter), +						|| hasDeprecateAnnotation(setter);, +						sourceType, null, description, defaultValue, deprecated));, +	private boolean hasDeprecateAnnotation(Element element) {, +		return getAnnotation(element, "java.lang.Deprecated") != null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +	private final String sourceMethod;, +	private final Object defaultValue;, +, +	private final boolean deprecated;, +			Object defaultValue, boolean deprecated) {, +		this.deprecated = deprecated;, +	public boolean isDeprecated() {, +		return this.deprecated;, +	}, +, +		buildToStringProperty(string, "deprecated", this.deprecated);, +				sourceMethod, null, null, false);, +			Object defaultValue, boolean deprecated) {, +				sourceMethod, description, defaultValue, deprecated);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +				boolean deprecated = hasDeprecateAnnotation(getter), +						|| hasDeprecateAnnotation(setter);, +						sourceType, null, description, defaultValue, deprecated));, +	private boolean hasDeprecateAnnotation(Element element) {, +		return getAnnotation(element, "java.lang.Deprecated") != null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +	private final String sourceMethod;, +	private final Object defaultValue;, +, +	private final boolean deprecated;, +			Object defaultValue, boolean deprecated) {, +		this.deprecated = deprecated;, +	public boolean isDeprecated() {, +		return this.deprecated;, +	}, +, +		buildToStringProperty(string, "deprecated", this.deprecated);, +				sourceMethod, null, null, false);, +			Object defaultValue, boolean deprecated) {, +				sourceMethod, description, defaultValue, deprecated);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java, +		if (item.isDeprecated()) {, +			jsonObject.put("deprecated", true);, +		}, +		boolean deprecated = object.optBoolean("deprecated");, +				description, defaultValue, deprecated);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +				boolean deprecated = hasDeprecateAnnotation(getter), +						|| hasDeprecateAnnotation(setter);, +						sourceType, null, description, defaultValue, deprecated));, +	private boolean hasDeprecateAnnotation(Element element) {, +		return getAnnotation(element, "java.lang.Deprecated") != null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +	private final String sourceMethod;, +	private final Object defaultValue;, +, +	private final boolean deprecated;, +			Object defaultValue, boolean deprecated) {, +		this.deprecated = deprecated;, +	public boolean isDeprecated() {, +		return this.deprecated;, +	}, +, +		buildToStringProperty(string, "deprecated", this.deprecated);, +				sourceMethod, null, null, false);, +			Object defaultValue, boolean deprecated) {, +				sourceMethod, description, defaultValue, deprecated);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java, +		if (item.isDeprecated()) {, +			jsonObject.put("deprecated", true);, +		}, +		boolean deprecated = object.optBoolean("deprecated");, +				description, defaultValue, deprecated);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +						.withDefaultValue("boot").withDeprecated());, +				containsProperty("simple.flag", Boolean.class), +						.fromSource(SimpleProperties.class), +						.withDescription("A simple flag.").withDeprecated());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +				boolean deprecated = hasDeprecateAnnotation(getter), +						|| hasDeprecateAnnotation(setter);, +						sourceType, null, description, defaultValue, deprecated));, +	private boolean hasDeprecateAnnotation(Element element) {, +		return getAnnotation(element, "java.lang.Deprecated") != null;]