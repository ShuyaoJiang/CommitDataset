[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.util.ClassUtils;, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	private static class ErrorTemplateMissingCondition extends SpringBootCondition {, +		@Override, +		public Outcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			if (ClassUtils.isPresent("org.thymeleaf.spring3.SpringTemplateEngine",, +					context.getClassLoader())) {, +				if (DefaultTemplateResolverConfiguration.templateExists(, +						context.getEnvironment(), context.getResourceLoader(), "error")) {, +					return Outcome.noMatch("Thymeleaf template found for error view");, +				}, +			}, +			// FIXME: add matcher for JSP view if Jasper detected, +			return Outcome.match("no error template view detected");, +		};, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.util.ClassUtils;, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	private static class ErrorTemplateMissingCondition extends SpringBootCondition {, +		@Override, +		public Outcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			if (ClassUtils.isPresent("org.thymeleaf.spring3.SpringTemplateEngine",, +					context.getClassLoader())) {, +				if (DefaultTemplateResolverConfiguration.templateExists(, +						context.getEnvironment(), context.getResourceLoader(), "error")) {, +					return Outcome.noMatch("Thymeleaf template found for error view");, +				}, +			}, +			// FIXME: add matcher for JSP view if Jasper detected, +			return Outcome.match("no error template view detected");, +		};, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +	public static final String DEFAULT_PREFIX = "classpath:/templates/";, +	public static final String DEFAULT_SUFFIX = ".html";, +, +	public static class DefaultTemplateResolverConfiguration implements EnvironmentAware {, +			resolver.setPrefix(this.environment.getProperty("prefix", DEFAULT_PREFIX));, +			resolver.setSuffix(this.environment.getProperty("suffix", DEFAULT_SUFFIX));, +		public static boolean templateExists(Environment environment,, +				ResourceLoader resourceLoader, String view) {, +			String prefix = environment.getProperty("spring.thymeleaf.prefix",, +					ThymeleafAutoConfiguration.DEFAULT_PREFIX);, +			String suffix = environment.getProperty("spring.thymeleaf.suffix",, +					ThymeleafAutoConfiguration.DEFAULT_SUFFIX);, +			return resourceLoader.getResource(prefix + view + suffix).exists();, +		}, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.util.ClassUtils;, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	private static class ErrorTemplateMissingCondition extends SpringBootCondition {, +		@Override, +		public Outcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			if (ClassUtils.isPresent("org.thymeleaf.spring3.SpringTemplateEngine",, +					context.getClassLoader())) {, +				if (DefaultTemplateResolverConfiguration.templateExists(, +						context.getEnvironment(), context.getResourceLoader(), "error")) {, +					return Outcome.noMatch("Thymeleaf template found for error view");, +				}, +			}, +			// FIXME: add matcher for JSP view if Jasper detected, +			return Outcome.match("no error template view detected");, +		};, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +	public static final String DEFAULT_PREFIX = "classpath:/templates/";, +	public static final String DEFAULT_SUFFIX = ".html";, +, +	public static class DefaultTemplateResolverConfiguration implements EnvironmentAware {]