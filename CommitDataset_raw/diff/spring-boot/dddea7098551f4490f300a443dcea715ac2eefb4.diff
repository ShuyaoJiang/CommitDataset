[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfiguration.java, +import org.springframework.boot.actuate.info.BuildInfoContributor;, +import org.springframework.boot.info.BuildProperties;, +	@Bean, +	@ConditionalOnEnabledInfoContributor("build"), +	@ConditionalOnSingleCandidate(BuildProperties.class), +	@Order(DEFAULT_ORDER), +	public InfoContributor buildInfoContributor(BuildProperties buildProperties) {, +		return new BuildInfoContributor(buildProperties, this.properties.getBuild().getMode());, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfiguration.java, +import org.springframework.boot.actuate.info.BuildInfoContributor;, +import org.springframework.boot.info.BuildProperties;, +	@Bean, +	@ConditionalOnEnabledInfoContributor("build"), +	@ConditionalOnSingleCandidate(BuildProperties.class), +	@Order(DEFAULT_ORDER), +	public InfoContributor buildInfoContributor(BuildProperties buildProperties) {, +		return new BuildInfoContributor(buildProperties, this.properties.getBuild().getMode());, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +import org.springframework.boot.actuate.info.BuildInfoContributor;, +	private final Build build = new Build();, +, +	public Build getBuild() {, +		return this.build;, +	}, +, +	public static class Build {, +, +		/**, +		 * Mode to use to expose build information., +		 */, +		private BuildInfoContributor.Mode mode = BuildInfoContributor.Mode.SIMPLE;, +, +		public BuildInfoContributor.Mode getMode() {, +			return this.mode;, +		}, +, +		public void setMode(BuildInfoContributor.Mode mode) {, +			this.mode = mode;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfiguration.java, +import org.springframework.boot.actuate.info.BuildInfoContributor;, +import org.springframework.boot.info.BuildProperties;, +	@Bean, +	@ConditionalOnEnabledInfoContributor("build"), +	@ConditionalOnSingleCandidate(BuildProperties.class), +	@Order(DEFAULT_ORDER), +	public InfoContributor buildInfoContributor(BuildProperties buildProperties) {, +		return new BuildInfoContributor(buildProperties, this.properties.getBuild().getMode());, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +import org.springframework.boot.actuate.info.BuildInfoContributor;, +	private final Build build = new Build();, +, +	public Build getBuild() {, +		return this.build;, +	}, +, +	public static class Build {, +, +		/**, +		 * Mode to use to expose build information., +		 */, +		private BuildInfoContributor.Mode mode = BuildInfoContributor.Mode.SIMPLE;, +, +		public BuildInfoContributor.Mode getMode() {, +			return this.mode;, +		}, +, +		public void setMode(BuildInfoContributor.Mode mode) {, +			this.mode = mode;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/BuildInfoContributor.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +]