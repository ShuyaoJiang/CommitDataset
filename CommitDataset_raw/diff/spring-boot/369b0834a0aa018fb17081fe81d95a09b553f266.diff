[+++ /dev/null, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/data/JpaRepositoriesAutoConfiguration.java, +@Import(JpaRepositoriesAutoConfigureRegistrar.class), +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/data/JpaRepositoriesAutoConfiguration.java, +@Import(JpaRepositoriesAutoConfigureRegistrar.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, + * recommended in high volume environments (the Tomcat DataSource is more reliable)., +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/data/JpaRepositoriesAutoConfiguration.java, +@Import(JpaRepositoriesAutoConfigureRegistrar.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, + * recommended in high volume environments (the Tomcat DataSource is more reliable)., +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	// FIXME: make this @ConditionalOnBean(DataSource.class), +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/data/JpaRepositoriesAutoConfiguration.java, +@Import(JpaRepositoriesAutoConfigureRegistrar.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, + * recommended in high volume environments (the Tomcat DataSource is more reliable)., +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	// FIXME: make this @ConditionalOnBean(DataSource.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.context.annotation.Import;, +import org.springframework.orm.jpa.vendor.Database;, +import org.springframework.util.StringUtils;, +@Import(JpaComponentScanDetector.class), +	@Value("${spring.jpa.databasePlatform:${spring.jpa.database_platform:}}"), +	private String databasePlatform;, +, +	@Value("${spring.jpa.database:DEFAULT}"), +	private Database database = Database.DEFAULT;, +, +	@Value("${spring.jpa.showSql:${spring.jpa.show_sql:false}}"), +	private boolean showSql;, +, +	@Value("${spring.jpa.generateDdl:${spring.jpa.generate_ddl:false}}"), +	private boolean generateDdl;, +, +		HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();, +		adapter.setShowSql(this.showSql);, +		adapter.setGenerateDdl(this.generateDdl);, +		if (StringUtils.hasText(this.databasePlatform)) {, +			adapter.setDatabasePlatform(this.databasePlatform);, +		}, +		adapter.setDatabase(this.database);, +		return adapter;, +		// FIXME: detect EhCache, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/data/JpaRepositoriesAutoConfiguration.java, +@Import(JpaRepositoriesAutoConfigureRegistrar.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, + * recommended in high volume environments (the Tomcat DataSource is more reliable)., +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	// FIXME: make this @ConditionalOnBean(DataSource.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.context.annotation.Import;, +import org.springframework.orm.jpa.vendor.Database;, +import org.springframework.util.StringUtils;, +@Import(JpaComponentScanDetector.class), +	@Value("${spring.jpa.databasePlatform:${spring.jpa.database_platform:}}"), +	private String databasePlatform;, +, +	@Value("${spring.jpa.database:DEFAULT}"), +	private Database database = Database.DEFAULT;, +, +	@Value("${spring.jpa.showSql:${spring.jpa.show_sql:false}}"), +	private boolean showSql;, +, +	@Value("${spring.jpa.generateDdl:${spring.jpa.generate_ddl:false}}"), +	private boolean generateDdl;, +, +		HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();, +		adapter.setShowSql(this.showSql);, +		adapter.setGenerateDdl(this.generateDdl);, +		if (StringUtils.hasText(this.databasePlatform)) {, +			adapter.setDatabasePlatform(this.databasePlatform);, +		}, +		adapter.setDatabase(this.database);, +		return adapter;, +		// FIXME: detect EhCache, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/orm/jpa/JpaComponentScanDetector.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]