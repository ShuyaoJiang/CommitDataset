[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	public void validateBaseDns() {, +		Assert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	public void validateBaseDns() {, +		Assert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, +	 * List of base DN., +	private String[] baseDn = new String[0];, +	public String[] getBaseDn() {, +	public void setBaseDn(String[] baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	public void validateBaseDns() {, +		Assert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, +	 * List of base DN., +	private String[] baseDn = new String[0];, +	public String[] getBaseDn() {, +	public void setBaseDn(String[] baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfigurationTests.java, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.port:1234",, +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.run(context -> {, +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +		TestPropertyValues.of("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org",, +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +		this.contextRunner, +				.withPropertyValues(, +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.run(context -> {, +	@Test, +	public void testMultiBaseDn() {, +		this.contextRunner, +				.withPropertyValues(, +						"spring.ldap.embedded.ldif:classpath:schema-multi-basedn.ldif",, +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org",, +						"spring.ldap.embedded.base-dn[1]:dc=pivotal,dc=io"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +							.getBean(InMemoryDirectoryServer.class);, +					assertThat(server, +							.countEntriesBelow("ou=company1,c=Sweden,dc=spring,dc=org")), +									.isEqualTo(5);, +					assertThat(server.countEntriesBelow("c=Sweden,dc=pivotal,dc=io")), +							.isEqualTo(2);, +				});, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import org.springframework.util.Assert;, +	@PostConstruct, +	public void validateBaseDns() {, +		Assert.notEmpty(this.embeddedProperties.getBaseDn(), "No baseDn found.");, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, +	 * List of base DN., +	private String[] baseDn = new String[0];, +	public String[] getBaseDn() {, +	public void setBaseDn(String[] baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfigurationTests.java, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.port:1234",, +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.run(context -> {, +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +		TestPropertyValues.of("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org",, +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +		this.contextRunner, +				.withPropertyValues(, +						"spring.ldap.embedded.base-dn[0]:dc=spring,dc=org"), +				.run(context -> {, +	@Test, +	public void testMultiBaseDn() {, +		this.contextRunner]