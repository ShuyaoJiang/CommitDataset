[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessor.java, +import io.micrometer.core.instrument.config.MeterFilter;, + * {@link BeanPostProcessor} to apply {@link MeterRegistryCustomizer customizers},, + * {@link MeterFilter filters}, {@link MeterBinder binders} and {@link Metrics#addRegistry, + * global registration} to {@link MeterRegistry meter registries}. This post processor, + * intentionally skips {@link CompositeMeterRegistry} with the assumptions that the, + * registries it contains are beans and will be customized directly., +	private final Collection<MeterFilter> filters;, +, +	MeterRegistryPostProcessor(Collection<MeterBinder> binders,, +			Collection<MeterFilter> filters,, +			Collection<MeterRegistryCustomizer<?>> customizers,, +		this.binders = (binders != null ? binders : Collections.emptyList());, +		this.filters = (filters != null ? filters : Collections.emptyList());, +		this.customizers = (customizers != null ? customizers : Collections.emptyList());, +		addFilters(registry);, +	private void addFilters(MeterRegistry registry) {, +		this.filters.forEach(registry.config()::meterFilter);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessor.java, +import io.micrometer.core.instrument.config.MeterFilter;, + * {@link BeanPostProcessor} to apply {@link MeterRegistryCustomizer customizers},, + * {@link MeterFilter filters}, {@link MeterBinder binders} and {@link Metrics#addRegistry, + * global registration} to {@link MeterRegistry meter registries}. This post processor, + * intentionally skips {@link CompositeMeterRegistry} with the assumptions that the, + * registries it contains are beans and will be customized directly., +	private final Collection<MeterFilter> filters;, +, +	MeterRegistryPostProcessor(Collection<MeterBinder> binders,, +			Collection<MeterFilter> filters,, +			Collection<MeterRegistryCustomizer<?>> customizers,, +		this.binders = (binders != null ? binders : Collections.emptyList());, +		this.filters = (filters != null ? filters : Collections.emptyList());, +		this.customizers = (customizers != null ? customizers : Collections.emptyList());, +		addFilters(registry);, +	private void addFilters(MeterRegistry registry) {, +		this.filters.forEach(registry.config()::meterFilter);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import io.micrometer.core.instrument.config.MeterFilter;, +			ObjectProvider<Collection<MeterFilter>> filters,, +		return new MeterRegistryPostProcessor(binders.getIfAvailable(),, +				filters.getIfAvailable(), customizers.getIfAvailable(),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessor.java, +import io.micrometer.core.instrument.config.MeterFilter;, + * {@link BeanPostProcessor} to apply {@link MeterRegistryCustomizer customizers},, + * {@link MeterFilter filters}, {@link MeterBinder binders} and {@link Metrics#addRegistry, + * global registration} to {@link MeterRegistry meter registries}. This post processor, + * intentionally skips {@link CompositeMeterRegistry} with the assumptions that the, + * registries it contains are beans and will be customized directly., +	private final Collection<MeterFilter> filters;, +, +	MeterRegistryPostProcessor(Collection<MeterBinder> binders,, +			Collection<MeterFilter> filters,, +			Collection<MeterRegistryCustomizer<?>> customizers,, +		this.binders = (binders != null ? binders : Collections.emptyList());, +		this.filters = (filters != null ? filters : Collections.emptyList());, +		this.customizers = (customizers != null ? customizers : Collections.emptyList());, +		addFilters(registry);, +	private void addFilters(MeterRegistry registry) {, +		this.filters.forEach(registry.config()::meterFilter);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import io.micrometer.core.instrument.config.MeterFilter;, +			ObjectProvider<Collection<MeterFilter>> filters,, +		return new MeterRegistryPostProcessor(binders.getIfAvailable(),, +				filters.getIfAvailable(), customizers.getIfAvailable(),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryPostProcessorTests.java, +import io.micrometer.core.instrument.MeterRegistry.Config;, +import io.micrometer.core.instrument.config.MeterFilter;, +import static org.mockito.BDDMockito.given;, +	private List<MeterBinder> binders = new ArrayList<>();, +	private List<MeterFilter> filters = new ArrayList<>();, +	private List<MeterRegistryCustomizer<?>> customizers = new ArrayList<>();, +	private MeterFilter mockFilter;, +, +	@Mock, +	@Mock, +	private Config mockConfig;, +, +		given(this.mockRegistry.config()).willReturn(this.mockConfig);, +				this.binders, this.filters, this.customizers, false);, +		this.binders.add(this.mockBinder);, +		this.customizers.add(this.mockCustomizer);, +				this.binders, this.filters, this.customizers, false);, +		this.customizers.add(this.mockCustomizer);, +				this.binders, this.filters, this.customizers, false);, +	public void postProcessShouldApplyFilter() {, +		this.filters.add(this.mockFilter);, +				this.binders, this.filters, this.customizers, false);, +		assertThat(processor.postProcessAfterInitialization(this.mockRegistry, "name"));, +		verify(this.mockConfig).meterFilter(this.mockFilter);, +	}, +, +	@Test, +	public void postProcessShouldApplyBinder() {, +		this.binders.add(this.mockBinder);]