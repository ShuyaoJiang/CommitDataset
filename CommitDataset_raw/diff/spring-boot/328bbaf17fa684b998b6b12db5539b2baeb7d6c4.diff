[+++ b/spring-boot/src/main/java/org/springframework/boot/system/EmbeddedServerPortFileWriter.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext;, +import org.springframework.context.ApplicationContext;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +		implements ApplicationListener<WebServerInitializedEvent> {, +	public void onApplicationEvent(WebServerInitializedEvent event) {, +	 * application context namespace if available., +	protected File getPortFile(ApplicationContext applicationContext) {, +		String contextName = getContextName(applicationContext);, +	private String getContextName(ApplicationContext applicationContext) {, +		if (applicationContext instanceof ConfigurableWebApplicationContext) {, +			return ((ConfigurableWebApplicationContext) applicationContext), +					.getNamespace();, +		}, +		if (applicationContext instanceof ReactiveWebApplicationContext) {, +			return ((ReactiveWebApplicationContext) applicationContext).getNamespace();, +		}, +		return null;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/system/EmbeddedServerPortFileWriter.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext;, +import org.springframework.context.ApplicationContext;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +		implements ApplicationListener<WebServerInitializedEvent> {, +	public void onApplicationEvent(WebServerInitializedEvent event) {, +	 * application context namespace if available., +	protected File getPortFile(ApplicationContext applicationContext) {, +		String contextName = getContextName(applicationContext);, +	private String getContextName(ApplicationContext applicationContext) {, +		if (applicationContext instanceof ConfigurableWebApplicationContext) {, +			return ((ConfigurableWebApplicationContext) applicationContext), +					.getNamespace();, +		}, +		if (applicationContext instanceof ReactiveWebApplicationContext) {, +			return ((ReactiveWebApplicationContext) applicationContext).getNamespace();, +		}, +		return null;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/GenericReactiveWebApplicationContext.java, +	private String namespace;, +, +	@Override, +	public void setNamespace(String namespace) {, +		this.namespace = namespace;, +	}, +, +	@Override, +	public String getNamespace() {, +		return this.namespace;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/system/EmbeddedServerPortFileWriter.java, +import org.springframework.boot.web.context.WebServerInitializedEvent;, +import org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext;, +import org.springframework.context.ApplicationContext;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +		implements ApplicationListener<WebServerInitializedEvent> {, +	public void onApplicationEvent(WebServerInitializedEvent event) {, +	 * application context namespace if available., +	protected File getPortFile(ApplicationContext applicationContext) {, +		String contextName = getContextName(applicationContext);, +	private String getContextName(ApplicationContext applicationContext) {, +		if (applicationContext instanceof ConfigurableWebApplicationContext) {, +			return ((ConfigurableWebApplicationContext) applicationContext), +					.getNamespace();, +		}, +		if (applicationContext instanceof ReactiveWebApplicationContext) {, +			return ((ReactiveWebApplicationContext) applicationContext).getNamespace();, +		}, +		return null;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/GenericReactiveWebApplicationContext.java, +	private String namespace;, +, +	@Override, +	public void setNamespace(String namespace) {, +		this.namespace = namespace;, +	}, +, +	@Override, +	public String getNamespace() {, +		return this.namespace;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebApplicationContext.java, +	/**, +	 * Set the namespace for this reactive web application context., +	 * @param namespace the namespace for the context, +	 */, +	void setNamespace(String namespace);, +, +	/**, +	 * Return the namespace for this reactive web application context, if any., +	 * @return the namespace or {@code null}, +	 */]