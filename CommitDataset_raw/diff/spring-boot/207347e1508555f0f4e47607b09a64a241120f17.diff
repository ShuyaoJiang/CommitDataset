[+++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.springframework.boot.developertools.remote.server.HttpHeaderAccessManager;, +@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "secret"), +	@ConditionalOnMissingBean, +	public AccessManager remoteDeveloperToolsAccessManager() {, +		RemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();, +		return new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),, +				remoteProperties.getSecret());, +	}, +, +	@Bean, +			AccessManager accessManager, Collection<HandlerMapper> mappers) {, +		Dispatcher dispatcher = new Dispatcher(accessManager, mappers);, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.springframework.boot.developertools.remote.server.HttpHeaderAccessManager;, +@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "secret"), +	@ConditionalOnMissingBean, +	public AccessManager remoteDeveloperToolsAccessManager() {, +		RemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();, +		return new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),, +				remoteProperties.getSecret());, +	}, +, +	@Bean, +			AccessManager accessManager, Collection<HandlerMapper> mappers) {, +		Dispatcher dispatcher = new Dispatcher(accessManager, mappers);, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsProperties.java, +	public static final String DEFAULT_SECRET_HEADER_NAME = "X-AUTH-TOKEN";, +, +	/**, +	 * A shared secret required to establish a connection (required to enable remote, +	 * support)., +	 */, +	private String secret;, +, +	/**, +	 * HTTP header used to transfer the shared secret., +	 */, +	private String secretHeaderName = DEFAULT_SECRET_HEADER_NAME;, +, +	public String getSecret() {, +		return this.secret;, +	}, +, +	public void setSecret(String secret) {, +		this.secret = secret;, +	}, +, +	public String getSecretHeaderName() {, +		return this.secretHeaderName;, +	}, +, +	public void setSecretHeaderName(String secretHeaderName) {, +		this.secretHeaderName = secretHeaderName;, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.springframework.boot.developertools.remote.server.HttpHeaderAccessManager;, +@ConditionalOnProperty(prefix = "spring.developertools.remote", name = "secret"), +	@ConditionalOnMissingBean, +	public AccessManager remoteDeveloperToolsAccessManager() {, +		RemoteDeveloperToolsProperties remoteProperties = this.properties.getRemote();, +		return new HttpHeaderAccessManager(remoteProperties.getSecretHeaderName(),, +				remoteProperties.getSecret());, +	}, +, +	@Bean, +			AccessManager accessManager, Collection<HandlerMapper> mappers) {, +		Dispatcher dispatcher = new Dispatcher(accessManager, mappers);, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsProperties.java, +	public static final String DEFAULT_SECRET_HEADER_NAME = "X-AUTH-TOKEN";, +, +	/**, +	 * A shared secret required to establish a connection (required to enable remote, +	 * support)., +	 */, +	private String secret;, +, +	/**, +	 * HTTP header used to transfer the shared secret., +	 */, +	private String secretHeaderName = DEFAULT_SECRET_HEADER_NAME;, +, +	public String getSecret() {, +		return this.secret;, +	}, +, +	public void setSecret(String secret) {, +		this.secret = secret;, +	}, +, +	public String getSecretHeaderName() {, +		return this.secretHeaderName;, +	}, +, +	public void setSecretHeaderName(String secretHeaderName) {, +		this.secretHeaderName = secretHeaderName;, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/remote/client/HttpHeaderInterceptor.java]