[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontProperties.java, +	 * environment that forwards metrics data to the Wavefront API host. If publishing, +	 * metrics to a Wavefront proxy (as described in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontProperties.java, +	 * environment that forwards metrics data to the Wavefront API host. If publishing, +	 * metrics to a Wavefront proxy (as described in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontProperties.java, +	 * environment that forwards metrics data to the Wavefront API host. If publishing, +	 * metrics to a Wavefront proxy (as described in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaEndpointAutoConfigurationTests.java, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.endpoint.jolokia.enabled=false"), +		this.contextRunner, +				.withPropertyValues("management.endpoint.jolokia.config.debug=true"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontProperties.java, +	 * environment that forwards metrics data to the Wavefront API host. If publishing, +	 * metrics to a Wavefront proxy (as described in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaEndpointAutoConfigurationTests.java, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.endpoint.jolokia.enabled=false"), +		this.contextRunner, +				.withPropertyValues("management.endpoint.jolokia.config.debug=true"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context).hasSingleBean(Clock.class));, +		this.contextRunner.withUserConfiguration(CustomClockConfiguration.class), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withUserConfiguration(MeterRegistryConfiguration.class), +		this.contextRunner.run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class), +		this.contextRunner.withPropertyValues("management.metrics.binders.jvm.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomJvmGcMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomJvmMemoryMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomJvmThreadMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomClassLoaderMetricsConfiguration.class), +		this.contextRunner.run(, +		this.contextRunner.withPropertyValues("management.metrics.binders.logback.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomLogbackMetricsConfiguration.class), +		this.contextRunner, +		this.contextRunner.withPropertyValues("management.metrics.binders.uptime.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomUptimeMetricsConfiguration.class), +		this.contextRunner.run(, +		this.contextRunner, +		this.contextRunner.withUserConfiguration(CustomProcessorMetricsConfiguration.class), +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withPropertyValues("management.metrics.binders.files.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomFileDescriptorMetricsConfiguration.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/wavefront/WavefrontProperties.java, +	 * environment that forwards metrics data to the Wavefront API host. If publishing, +	 * metrics to a Wavefront proxy (as described in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfigurationTests.java, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaEndpointAutoConfigurationTests.java, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.endpoint.jolokia.enabled=false"), +		this.contextRunner, +				.withPropertyValues("management.endpoint.jolokia.config.debug=true"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context).hasSingleBean(Clock.class));, +		this.contextRunner.withUserConfiguration(CustomClockConfiguration.class), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withUserConfiguration(MeterRegistryConfiguration.class), +		this.contextRunner.run((context) -> assertThat(context).hasSingleBean(JvmGcMetrics.class), +		this.contextRunner.withPropertyValues("management.metrics.binders.jvm.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomJvmGcMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomJvmMemoryMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomJvmThreadMetricsConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomClassLoaderMetricsConfiguration.class), +		this.contextRunner.run(, +		this.contextRunner.withPropertyValues("management.metrics.binders.logback.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomLogbackMetricsConfiguration.class), +		this.contextRunner, +		this.contextRunner.withPropertyValues("management.metrics.binders.uptime.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomUptimeMetricsConfiguration.class), +		this.contextRunner.run(, +		this.contextRunner, +		this.contextRunner.withUserConfiguration(CustomProcessorMetricsConfiguration.class), +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withPropertyValues("management.metrics.binders.files.enabled=false"), +		this.contextRunner.withUserConfiguration(CustomFileDescriptorMetricsConfiguration.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasMetricsExportAutoConfigurationTests.java, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withUserConfiguration(BaseConfiguration.class), +		this.contextRunner.withUserConfiguration(BaseConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class), +		this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class)]