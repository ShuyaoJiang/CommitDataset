[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.context.ConfigurableApplicationContext;, +import static org.mockito.ArgumentMatchers.contains;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +	private ConfigurableApplicationContext context;, +	public void close() {, +		if (this.context != null) {, +	}, +		load();, +		load();, +	@Test, +		try {, +			this.thrown.expect(BeanCreationException.class);, +			load("spring.datasource.url:jdbc:not-going-to-work");, +		}, +		finally {, +			EmbeddedDatabaseConnection.override = null;, +		}, +	@Test, +		this.thrown.expect(BeanCreationException.class);, +		this.thrown.expectMessage(contains("org.none.jdbcDriver"));, +		load("spring.datasource.driverClassName:org.none.jdbcDriver");, +		assertThat(dataSource.getUrl()).startsWith("jdbc:hsqldb:mem:testdb");, +		assertThat(dataSource.getUrl()).startsWith("jdbc:hsqldb:mem:testdb");, +		load("spring.datasource.driverClassName:org.hsqldb.jdbcDriver",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb");, +		load(null, new HidePackagesClassLoader("org.apache.tomcat", "com.zaxxer.hikari",, +						"org.apache.commons.dbcp", "org.apache.commons.dbcp2"),, +				"spring.datasource.driverClassName:org.hsqldb.jdbcDriver",, +						+ SimpleDriverDataSource.class.getName());, +		load("spring.datasource.driverClassName:org.hsqldb.jdbcDriver",, +						+ SimpleDriverDataSource.class.getName());, +		load("spring.datasource.driverClassName:" + DatabaseTestDriver.class.getName(),, +				"spring.datasource.url:jdbc:foo://localhost");, +		load(TestDataSourceConfiguration.class);, +		load(null, new HidePackagesClassLoader(hiddenPackages));, +	public void load(String... environment) {, +		load(null, environment);, +	}, +, +	public void load(Class<?> config, String... environment) {, +		load(config, null, environment);, +	}, +, +	public void load(Class<?> config, ClassLoader classLoader, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		if (classLoader != null) {, +			ctx.setClassLoader(classLoader);, +		}, +		TestPropertyValues, +				.of("spring.datasource.initialize=false",, +						"spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt()), +				.applyTo(ctx);, +		TestPropertyValues.of(environment).applyTo(ctx);, +		if (config != null) {, +			ctx.register(config);, +		}, +		ctx.register(DataSourceAutoConfiguration.class);, +		ctx.refresh();, +		this.context = ctx;, +	}, +]