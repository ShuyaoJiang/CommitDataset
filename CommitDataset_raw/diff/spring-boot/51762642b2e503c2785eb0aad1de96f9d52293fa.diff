[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T11:00:00Z", "user", "AUTHENTICATION_FAILURE"));, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T12:00:00Z", "admin", "AUTHENTICATION_SUCCESS"));, +	}, +, +	@UsesJava8, +	private AuditEvent createEvent(String instant, String principal, String type) {, +		return new AuditEvent(Date.from(Instant.parse(instant)), principal, type,, +				Collections.<String, Object>emptyMap());, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T11:00:00Z", "user", "AUTHENTICATION_FAILURE"));, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T12:00:00Z", "admin", "AUTHENTICATION_SUCCESS"));, +	}, +, +	@UsesJava8, +	private AuditEvent createEvent(String instant, String principal, String type) {, +		return new AuditEvent(Date.from(Instant.parse(instant)), principal, type,, +				Collections.<String, Object>emptyMap());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AuditEventsMvcEndpoint.java, +import java.util.LinkedHashMap;, +import java.util.Map;, + * @author Phillip Webb, +	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE), +	public ResponseEntity<?> findByPrincipalAndAfterAndType(, +			@RequestParam(required = false) String principal,, +			@RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssZ") Date after,, +			@RequestParam(required = false) String type) {, +		Map<Object, Object> result = new LinkedHashMap<Object, Object>();, +		result.put("events", this.auditEventRepository.find(principal, after, type));, +		return ResponseEntity.ok(result);, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T11:00:00Z", "user", "AUTHENTICATION_FAILURE"));, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T12:00:00Z", "admin", "AUTHENTICATION_SUCCESS"));, +	}, +, +	@UsesJava8, +	private AuditEvent createEvent(String instant, String principal, String type) {, +		return new AuditEvent(Date.from(Instant.parse(instant)), principal, type,, +				Collections.<String, Object>emptyMap());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AuditEventsMvcEndpoint.java, +import java.util.LinkedHashMap;, +import java.util.Map;, + * @author Phillip Webb, +	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE), +	public ResponseEntity<?> findByPrincipalAndAfterAndType(, +			@RequestParam(required = false) String principal,, +			@RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssZ") Date after,, +			@RequestParam(required = false) String type) {, +		Map<Object, Object> result = new LinkedHashMap<Object, Object>();, +		result.put("events", this.auditEventRepository.find(principal, after, type));, +		return ResponseEntity.ok(result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java, +		public Application(ObjectProvider<List<HttpMessageConverter<?>>> converters) {, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/SpringBootHypermediaApplication.java, +import org.springframework.lang.UsesJava8;, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T11:00:00Z", "user", "AUTHENTICATION_FAILURE"));, +		this.auditEventRepository.add(, +				createEvent("2016-11-01T12:00:00Z", "admin", "AUTHENTICATION_SUCCESS"));, +	}, +, +	@UsesJava8, +	private AuditEvent createEvent(String instant, String principal, String type) {, +		return new AuditEvent(Date.from(Instant.parse(instant)), principal, type,, +				Collections.<String, Object>emptyMap());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AuditEventsMvcEndpoint.java, +import java.util.LinkedHashMap;, +import java.util.Map;, + * @author Phillip Webb, +	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE), +	public ResponseEntity<?> findByPrincipalAndAfterAndType(, +			@RequestParam(required = false) String principal,, +			@RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssZ") Date after,, +			@RequestParam(required = false) String type) {, +		Map<Object, Object> result = new LinkedHashMap<Object, Object>();, +		result.put("events", this.auditEventRepository.find(principal, after, type));, +		return ResponseEntity.ok(result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java, +		public Application(ObjectProvider<List<HttpMessageConverter<?>>> converters) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AuditEventsMvcEndpointTests.java, +import org.springframework.test.context.TestPropertySource;, +@TestPropertySource(properties = "management.security.enabled=false"), +				.andExpect(status().isOk()), +				.andExpect(content().string("{\"events\":[]}"));, +		this.mvc.perform(get("/auditevents").param("principal", "user").param("after",, +				"2016-11-01T10:00:00+0000")), +				.andExpect(content().string(, +						containsString("\"principal\":\"user\",\"type\":\"login\""))), +				.param("after", "2016-11-01T10:00:00+0000").param("type", "logout")), +				.andExpect(status().isOk()), +				.andExpect(content().string(]