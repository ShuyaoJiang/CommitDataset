[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		binCopySpec.setFileMode(0755);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		binCopySpec.setFileMode(0755);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests.java, +import java.util.function.Consumer;, +	@Test, +	public void scriptsHaveCorrectPermissions() throws IOException {, +		assertThat(, +				this.gradleBuild.build("bootDistTar").task(":bootDistTar").getOutcome()), +						.isEqualTo(TaskOutcome.SUCCESS);, +		String name = this.gradleBuild.getProjectDir().getName();, +		File distribution = new File(this.gradleBuild.getProjectDir(),, +				"build/distributions/" + name + "-boot.tar");, +		assertThat(distribution).isFile();, +		tarEntries(distribution, (entry) -> {, +			int filePermissions = entry.getMode() & 0777;, +			if (entry.isFile() && !entry.getName().startsWith(name + "-boot/bin/")) {, +				assertThat(filePermissions).isEqualTo(0644);, +			}, +			else {, +				assertThat(filePermissions).isEqualTo(0755);, +			}, +		});, +	}, +, +	private void tarEntries(File distribution, Consumer<TarArchiveEntry> consumer), +			throws IOException {, +		try (TarArchiveInputStream input = new TarArchiveInputStream(, +				new FileInputStream(distribution))) {, +			TarArchiveEntry entry;, +			while ((entry = input.getNextTarEntry()) != null) {, +				consumer.accept(entry);, +			}, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		binCopySpec.setFileMode(0755);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests.java, +import java.util.function.Consumer;, +	@Test, +	public void scriptsHaveCorrectPermissions() throws IOException {, +		assertThat(, +				this.gradleBuild.build("bootDistTar").task(":bootDistTar").getOutcome()), +						.isEqualTo(TaskOutcome.SUCCESS);, +		String name = this.gradleBuild.getProjectDir().getName();, +		File distribution = new File(this.gradleBuild.getProjectDir(),, +				"build/distributions/" + name + "-boot.tar");, +		assertThat(distribution).isFile();, +		tarEntries(distribution, (entry) -> {, +			int filePermissions = entry.getMode() & 0777;, +			if (entry.isFile() && !entry.getName().startsWith(name + "-boot/bin/")) {, +				assertThat(filePermissions).isEqualTo(0644);, +			}, +			else {, +				assertThat(filePermissions).isEqualTo(0755);, +			}, +		});, +	}, +, +	private void tarEntries(File distribution, Consumer<TarArchiveEntry> consumer), +			throws IOException {, +		try (TarArchiveInputStream input = new TarArchiveInputStream(, +				new FileInputStream(distribution))) {, +			TarArchiveEntry entry;, +			while ((entry = input.getNextTarEntry()) != null) {, +				consumer.accept(entry);, +			}, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/resources/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests-scriptsHaveCorrectPermissions.gradle, +buildscript {, +	dependencies {, +		classpath files(pluginClasspath.split(',')), +	}, +}, +, +apply plugin: 'org.springframework.boot', +apply plugin: 'application', +apply plugin: 'java', +, +bootJar {, +	mainClassName = 'com.example.ExampleApplication', +}]