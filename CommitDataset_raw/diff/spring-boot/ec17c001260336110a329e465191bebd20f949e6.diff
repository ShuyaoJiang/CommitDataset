[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * Copyright 2012-2015 the original author or authors., +		/**, +		 * Controls response compression. Acceptable values are "off" to disable, +		 * compression, "on" to enable compression of responses over 2048 bytes, "force", +		 * to force response compression, or an integer value to enable compression of, +		 * responses with content length that is at least that value., +		 */, +		private String compression = "off";, +, +		/**, +		 * A comma-separated list of MIME types for which compression is used., +		 */, +		private String compressableMimeTypes = "text/html,text/xml,text/plain";, +, +		public String getCompressableMimeTypes() {, +			return this.compressableMimeTypes;, +		}, +, +		public void setCompressableMimeTypes(String compressableMimeTypes) {, +			this.compressableMimeTypes = compressableMimeTypes;, +		}, +, +		public String getCompression() {, +			return this.compression;, +		}, +, +		public void setCompression(String compression) {, +			this.compression = compression;, +		}, +, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +					ProtocolHandler handler = connector.getProtocolHandler();, +					if (handler instanceof AbstractHttp11Protocol) {, +						@SuppressWarnings("rawtypes"), +						AbstractHttp11Protocol protocol = (AbstractHttp11Protocol) handler;, +						protocol.setCompression(Tomcat.this.compression);, +						protocol.setCompressableMimeTypes(Tomcat.this.compressableMimeTypes);, +					}, +				}, +			});, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * Copyright 2012-2015 the original author or authors., +		/**, +		 * Controls response compression. Acceptable values are "off" to disable, +		 * compression, "on" to enable compression of responses over 2048 bytes, "force", +		 * to force response compression, or an integer value to enable compression of, +		 * responses with content length that is at least that value., +		 */, +		private String compression = "off";, +, +		/**, +		 * A comma-separated list of MIME types for which compression is used., +		 */, +		private String compressableMimeTypes = "text/html,text/xml,text/plain";, +, +		public String getCompressableMimeTypes() {, +			return this.compressableMimeTypes;, +		}, +, +		public void setCompressableMimeTypes(String compressableMimeTypes) {, +			this.compressableMimeTypes = compressableMimeTypes;, +		}, +, +		public String getCompression() {, +			return this.compression;, +		}, +, +		public void setCompression(String compression) {, +			this.compression = compression;, +		}, +, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +					ProtocolHandler handler = connector.getProtocolHandler();, +					if (handler instanceof AbstractHttp11Protocol) {, +						@SuppressWarnings("rawtypes"), +						AbstractHttp11Protocol protocol = (AbstractHttp11Protocol) handler;, +						protocol.setCompression(Tomcat.this.compression);, +						protocol.setCompressableMimeTypes(Tomcat.this.compressableMimeTypes);, +					}, +				}, +			});, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, + * Copyright 2012-2015 the original author or authors., +import org.apache.coyote.http11.AbstractHttp11Protocol;, +import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer;, +	@Test, +	public void customTomcatCompression() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.port", "0");, +		map.put("server.tomcat.compression", "on");, +		bindProperties(map);, +, +		TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory();]