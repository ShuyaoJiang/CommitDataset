[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryEndRecord.java, +	 * Returns the location in the data that the archive actually starts. For most files, +	 * the archive data will start at 0, however, it is possible to have prefixed bytes, +	 * (often used for startup scripts) at the beginning of the data., +	 * @param data the source data, +	 * @return the offset within the data where the archive begins, +	 */, +	public long getStartOfArchive(RandomAccessData data) {, +		long length = Bytes.littleEndianValue(this.block, this.offset + 12, 4);, +		long specifiedOffset = Bytes.littleEndianValue(this.block, this.offset + 16, 4);, +		long actualOffset = data.getSize() - this.size - length;, +		return actualOffset - specifiedOffset;, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryEndRecord.java, +	 * Returns the location in the data that the archive actually starts. For most files, +	 * the archive data will start at 0, however, it is possible to have prefixed bytes, +	 * (often used for startup scripts) at the beginning of the data., +	 * @param data the source data, +	 * @return the offset within the data where the archive begins, +	 */, +	public long getStartOfArchive(RandomAccessData data) {, +		long length = Bytes.littleEndianValue(this.block, this.offset + 12, 4);, +		long specifiedOffset = Bytes.littleEndianValue(this.block, this.offset + 16, 4);, +		long actualOffset = data.getSize() - this.size - length;, +		return actualOffset - specifiedOffset;, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +		CentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);, +		this.data = getArchiveData(endRecord, data);, +		loadJarEntries(endRecord, filters);, +	private RandomAccessData getArchiveData(CentralDirectoryEndRecord endRecord,, +			RandomAccessData data) {, +		long offset = endRecord.getStartOfArchive(data);, +		if (offset == 0) {, +			return data;, +		}, +		return data.getSubsection(offset, data.getSize() - offset);, +	}, +, +	private void loadJarEntries(CentralDirectoryEndRecord endRecord,, +			JarEntryFilter[] filters) throws IOException {, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryEndRecord.java, +	 * Returns the location in the data that the archive actually starts. For most files, +	 * the archive data will start at 0, however, it is possible to have prefixed bytes, +	 * (often used for startup scripts) at the beginning of the data., +	 * @param data the source data, +	 * @return the offset within the data where the archive begins, +	 */, +	public long getStartOfArchive(RandomAccessData data) {, +		long length = Bytes.littleEndianValue(this.block, this.offset + 12, 4);, +		long specifiedOffset = Bytes.littleEndianValue(this.block, this.offset + 16, 4);, +		long actualOffset = data.getSize() - this.size - length;, +		return actualOffset - specifiedOffset;, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +		CentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);, +		this.data = getArchiveData(endRecord, data);, +		loadJarEntries(endRecord, filters);, +	private RandomAccessData getArchiveData(CentralDirectoryEndRecord endRecord,, +			RandomAccessData data) {, +		long offset = endRecord.getStartOfArchive(data);, +		if (offset == 0) {, +			return data;, +		}, +		return data.getSubsection(offset, data.getSize() - offset);, +	}, +, +	private void loadJarEntries(CentralDirectoryEndRecord endRecord,, +			JarEntryFilter[] filters) throws IOException {, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java, +import java.io.FileInputStream;, +import java.io.FileOutputStream;, +import java.nio.charset.Charset;, +import org.springframework.util.FileCopyUtils;, +import org.springframework.util.StreamUtils;, +, +	@Test, +	public void jarFileWithScriptAtTheStart() throws Exception {, +		File file = this.temporaryFolder.newFile();, +		InputStream sourceJarContent = new FileInputStream(this.rootJarFile);, +		FileOutputStream outputStream = new FileOutputStream(file);, +		StreamUtils.copy("#/bin/bash", Charset.defaultCharset(), outputStream);, +		FileCopyUtils.copy(sourceJarContent, outputStream);, +		this.rootJarFile = file;, +		this.jarFile = new JarFile(file);, +		// Call some other tests to verify, +		getEntries();, +		getNestedJarFile();, +	}]