[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.context.request.RequestContextListener;, +		@ConditionalOnMissingBean(RequestContextListener.class), +		public RequestContextListener requestContextListener() {, +			return new RequestContextListener();, +		}, +, +		@Bean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.context.request.RequestContextListener;, +		@ConditionalOnMissingBean(RequestContextListener.class), +		public RequestContextListener requestContextListener() {, +			return new RequestContextListener();, +		}, +, +		@Bean, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +		Set<Class<?>> listenerTypes = ServletListenerRegistrationBean.getSupportedTypes();, +		for (Class<?> type : listenerTypes) {, +			for (Entry<String, ?> listenerBean : getOrderedBeansOfType(type)) {, +				EventListener listener = (EventListener) listenerBean.getValue();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.context.request.RequestContextListener;, +		@ConditionalOnMissingBean(RequestContextListener.class), +		public RequestContextListener requestContextListener() {, +			return new RequestContextListener();, +		}, +, +		@Bean, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +		Set<Class<?>> listenerTypes = ServletListenerRegistrationBean.getSupportedTypes();, +		for (Class<?> type : listenerTypes) {, +			for (Entry<String, ?> listenerBean : getOrderedBeansOfType(type)) {, +				EventListener listener = (EventListener) listenerBean.getValue();, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletListenerRegistrationBean.java, +	/**, +	 * @return the supportedTypes for this registration, +	 */, +	public static Set<Class<?>> getSupportedTypes() {, +		return SUPPORTED_TYPES;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.context.request.RequestContextListener;, +		@ConditionalOnMissingBean(RequestContextListener.class), +		public RequestContextListener requestContextListener() {, +			return new RequestContextListener();, +		}, +, +		@Bean, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +		Set<Class<?>> listenerTypes = ServletListenerRegistrationBean.getSupportedTypes();, +		for (Class<?> type : listenerTypes) {, +			for (Entry<String, ?> listenerBean : getOrderedBeansOfType(type)) {, +				EventListener listener = (EventListener) listenerBean.getValue();, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletListenerRegistrationBean.java, +	/**, +	 * @return the supportedTypes for this registration, +	 */, +	public static Set<Class<?>> getSupportedTypes() {, +		return SUPPORTED_TYPES;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContextTests.java, +import javax.servlet.ServletContextListener;, +	public void servletContextListenerBeans() throws Exception {, +		addEmbeddedServletContainerFactoryBean();, +		ServletContextListener initializer = mock(ServletContextListener.class);, +		this.context.registerBeanDefinition("initializerBean",, +				beanDefinition(initializer));, +		this.context.refresh();, +		ServletContext servletContext = getEmbeddedServletContainerFactory(), +				.getServletContext();, +		verify(servletContext).addListener(initializer);, +	}, +, +	@Test]