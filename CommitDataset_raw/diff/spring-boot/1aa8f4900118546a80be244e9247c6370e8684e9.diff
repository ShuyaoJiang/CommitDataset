[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryConfiguration.java, +				.createConnectionFactory(HornetQSecuredConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryConfiguration.java, +				.createConnectionFactory(HornetQSecuredConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryFactory.java, +			return factoryClass.getConstructor(HornetQProperties.class, ServerLocator.class), +					.newInstance(this.properties, serviceLocator);, +		Constructor<T> constructor = factoryClass.getConstructor(HornetQProperties.class,, +				boolean.class, TransportConfiguration[].class);, +		return constructor.newInstance(this.properties, false,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryConfiguration.java, +				.createConnectionFactory(HornetQSecuredConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryFactory.java, +			return factoryClass.getConstructor(HornetQProperties.class, ServerLocator.class), +					.newInstance(this.properties, serviceLocator);, +		Constructor<T> constructor = factoryClass.getConstructor(HornetQProperties.class,, +				boolean.class, TransportConfiguration[].class);, +		return constructor.newInstance(this.properties, false,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +	/**, +	 * User for a secured connection., +	 */, +	private String user;, +, +	/**, +	 * Password for a secured connection., +	 */, +	private String password;, +, +	public String getUser() {, +		return this.user;, +	}, +, +	public void setUser(String user) {, +		this.user = user;, +	}, +, +	public String getPassword() {, +		return this.password;, +	}, +, +	public void setPassword(String password) {, +		this.password = password;, +	}, +, +		 *, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryConfiguration.java, +				.createConnectionFactory(HornetQSecuredConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQConnectionFactoryFactory.java, +			return factoryClass.getConstructor(HornetQProperties.class, ServerLocator.class), +					.newInstance(this.properties, serviceLocator);, +		Constructor<T> constructor = factoryClass.getConstructor(HornetQProperties.class,, +				boolean.class, TransportConfiguration[].class);, +		return constructor.newInstance(this.properties, false,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +	/**, +	 * User for a secured connection., +	 */, +	private String user;, +, +	/**, +	 * Password for a secured connection., +	 */, +	private String password;, +, +	public String getUser() {, +		return this.user;, +	}, +, +	public void setUser(String user) {, +		this.user = user;, +	}, +, +	public String getPassword() {, +		return this.password;, +	}, +, +	public void setPassword(String password) {, +		this.password = password;, +	}, +, +		 *, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQSecuredConnectionFactory.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jms.hornetq;]