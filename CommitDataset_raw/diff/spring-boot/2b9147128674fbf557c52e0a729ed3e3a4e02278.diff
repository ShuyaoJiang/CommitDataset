[+++ b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java, +		String appVersion = getApplicationVersion(sourceClass);, +		String bootVersion = getBootVersion();, +		versions.put("application.version", getVersionString(appVersion, false));, +		versions.put("spring-boot.version", getVersionString(bootVersion, false));, +		versions.put("spring-boot.formatted-version", getVersionString(bootVersion, true));, +		versions.put("application.formatted-version", getVersionString(appVersion, true));, +	protected String getApplicationVersion(Class<?> sourceClass) {, +		return (sourceClass == null ? null : sourceClass.getPackage(), +				.getImplementationVersion());, +	}, +, +	protected String getBootVersion() {, +		return Banner.class.getPackage().getImplementationVersion();, +	}, +, +	private String getVersionString(String version, boolean format) {, +		if (version == null) {, +			return "";, +		}, +		return (format ? " (v" + version + ")" : version);, +++ b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java, +		String appVersion = getApplicationVersion(sourceClass);, +		String bootVersion = getBootVersion();, +		versions.put("application.version", getVersionString(appVersion, false));, +		versions.put("spring-boot.version", getVersionString(bootVersion, false));, +		versions.put("spring-boot.formatted-version", getVersionString(bootVersion, true));, +		versions.put("application.formatted-version", getVersionString(appVersion, true));, +	protected String getApplicationVersion(Class<?> sourceClass) {, +		return (sourceClass == null ? null : sourceClass.getPackage(), +				.getImplementationVersion());, +	}, +, +	protected String getBootVersion() {, +		return Banner.class.getPackage().getImplementationVersion();, +	}, +, +	private String getVersionString(String version, boolean format) {, +		if (version == null) {, +			return "";, +		}, +		return (format ? " (v" + version + ")" : version);, +++ b/spring-boot/src/test/java/org/springframework/boot/ResourceBannerTests.java, +import static org.hamcrest.Matchers.equalTo;, +	public void renderVersions() throws Exception {, +		String banner = printBanner(resource, "10.2", "2.0");, +		assertThat(banner, equalTo("banner 1 10.2 2.0\n"));, +	}, +, +	@Test, +	public void renderWithoutVersions() throws Exception {, +		Resource resource = new ByteArrayResource(, +				"banner ${a} ${spring-boot.version} ${application.version}".getBytes());, +		String banner = printBanner(resource, null, null);, +		assertThat(banner, equalTo("banner 1  \n"));, +	}, +, +	@Test, +	public void renderFormattedVersions() throws Exception {, +		Resource resource = new ByteArrayResource(, +				"banner ${a}${spring-boot.formatted-version}${application.formatted-version}", +						.getBytes());, +		String banner = printBanner(resource, "10.2", "2.0");, +		assertThat(banner, equalTo("banner 1 (v10.2) (v2.0)\n"));, +	}, +, +	@Test, +	public void renderWithoutFormattedVersions() throws Exception {, +		Resource resource = new ByteArrayResource(, +				"banner ${a}${spring-boot.formatted-version}${application.formatted-version}", +						.getBytes());, +		String banner = printBanner(resource, null, null);, +		assertThat(banner, equalTo("banner 1\n"));, +	}, +, +	private String printBanner(Resource resource, String bootVersion,, +			String applicationVersion) {, +		ResourceBanner banner = new MockResourceBanner(resource, bootVersion,, +				applicationVersion);, +		return out.toString();, +	}, +, +	private static class MockResourceBanner extends ResourceBanner {, +, +		private final String bootVersion;, +, +		private final String applicationVersion;, +, +		public MockResourceBanner(Resource resource, String bootVersion,, +				String applicationVersion) {, +			super(resource);, +			this.bootVersion = bootVersion;, +			this.applicationVersion = applicationVersion;, +		}, +, +		@Override, +		protected String getBootVersion() {, +			return this.bootVersion;, +		}, +]