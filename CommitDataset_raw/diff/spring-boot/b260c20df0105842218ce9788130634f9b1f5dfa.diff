[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import org.springframework.boot.jackson.JsonComponentModule;, +	@Bean, +	public JsonComponentModule jsonComponentModule() {, +		return new JsonComponentModule();, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import org.springframework.boot.jackson.JsonComponentModule;, +	@Bean, +	public JsonComponentModule jsonComponentModule() {, +		return new JsonComponentModule();, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +import org.springframework.boot.jackson.JsonComponent;, +import org.springframework.boot.jackson.JsonObjectSerializer;, +import org.springframework.context.annotation.Import;, +		assertThat(objectMapper.canSerialize(Baz.class)).isTrue();, +	@Import(BazSerializer.class), +, +	@JsonComponent, +	private static class BazSerializer extends JsonObjectSerializer<Baz> {, +, +		@Override, +		protected void serializeObject(Baz value, JsonGenerator jgen,, +				SerializerProvider provider) throws IOException {, +		}, +, +	}, +, +	private static class Baz {, +, +	}, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import org.springframework.boot.jackson.JsonComponentModule;, +	@Bean, +	public JsonComponentModule jsonComponentModule() {, +		return new JsonComponentModule();, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +import org.springframework.boot.jackson.JsonComponent;, +import org.springframework.boot.jackson.JsonObjectSerializer;, +import org.springframework.context.annotation.Import;, +		assertThat(objectMapper.canSerialize(Baz.class)).isTrue();, +	@Import(BazSerializer.class), +, +	@JsonComponent, +	private static class BazSerializer extends JsonObjectSerializer<Baz> {, +, +		@Override, +		protected void serializeObject(Baz value, JsonGenerator jgen,, +				SerializerProvider provider) throws IOException {, +		}, +, +	}, +, +	private static class Baz {, +, +	}, +, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-json-components]], +==== Custom JSON Serializers and Deserializers, +If you're using Jackson to serialize and deserialize JSON data, you might want to write, +your own `JsonSerializer` and `JsonDeserializer` classes. Custom serializers are usually, +http://wiki.fasterxml.com/JacksonHowToCustomDeserializers[registered with Jackson via a Module],, +but Spring Boot provides an alternative `@JsonComponent` annotation which makes it easier, +to directly register Spring Beans., +, +You can use `@JsonComponent` directly on `JsonSerializer` or `JsonDeserializer`, +implementations. You can also use it on classes that contains serializers/deserializers as, +inner-classes. For example:, +, +[source,java,indent=0], +----, +	import java.io.*;, +	import com.fasterxml.jackson.core.*;, +	import com.fasterxml.jackson.databind.*;, +	import org.springframework.boot.jackson.*;, +, +	@JsonComponent, +	public class Example {, +, +		public static class Serializer extends JsonSerializer<SomeObject> {, +			// ..., +		}, +, +		public static class Deserializer extends JsonDeserializer<SomeObject> {, +			// ..., +		}, +, +	}, +----, +, +All `@JsonComponent` beans in the `ApplicationContext` will be automatically registered with]