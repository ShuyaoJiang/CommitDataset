[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +	@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +	@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +		@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +	@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +		@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java, +		load(FilterRegistrationOtherConfiguration.class,, +	@Test, +	@SuppressWarnings("rawtypes"), +	public void registerResourceHandlingFilterWithResourceRegistrationBean() {, +		// gh-14926, +		load(FilterRegistrationResourceConfiguration.class,, +				"spring.resources.chain.enabled:true");, +		Map<String, FilterRegistrationBean> beans = this.context, +				.getBeansOfType(FilterRegistrationBean.class);, +		assertThat(beans).hasSize(1);, +		FilterRegistrationBean registration = beans.values().stream(), +				.filter((r) -> r.getFilter() instanceof ResourceUrlEncodingFilter), +				.findFirst().get();, +		assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes",, +				EnumSet.of(DispatcherType.INCLUDE));, +	}, +, +	static class FilterRegistrationResourceConfiguration {, +, +		@Bean, +		public FilterRegistrationBean<ResourceUrlEncodingFilter> filterRegisration() {, +			FilterRegistrationBean<ResourceUrlEncodingFilter> bean = new FilterRegistrationBean<ResourceUrlEncodingFilter>(, +					new ResourceUrlEncodingFilter());, +			bean.setDispatcherTypes(EnumSet.of(DispatcherType.INCLUDE));, +			return bean;, +		}, +, +	}, +, +	@Configuration, +	@Import(BaseConfiguration.class), +	static class FilterRegistrationOtherConfiguration {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +	@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.servlet.ConditionalOnMissingFilterBean;, +		@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java, +		load(FilterRegistrationOtherConfiguration.class,, +	@Test, +	@SuppressWarnings("rawtypes"), +	public void registerResourceHandlingFilterWithResourceRegistrationBean() {, +		// gh-14926, +		load(FilterRegistrationResourceConfiguration.class,, +				"spring.resources.chain.enabled:true");, +		Map<String, FilterRegistrationBean> beans = this.context, +				.getBeansOfType(FilterRegistrationBean.class);, +		assertThat(beans).hasSize(1);, +		FilterRegistrationBean registration = beans.values().stream(), +				.filter((r) -> r.getFilter() instanceof ResourceUrlEncodingFilter), +				.findFirst().get();, +		assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes",, +				EnumSet.of(DispatcherType.INCLUDE));, +	}, +, +	static class FilterRegistrationResourceConfiguration {, +, +		@Bean, +		public FilterRegistrationBean<ResourceUrlEncodingFilter> filterRegisration() {, +			FilterRegistrationBean<ResourceUrlEncodingFilter> bean = new FilterRegistrationBean<ResourceUrlEncodingFilter>(, +					new ResourceUrlEncodingFilter());, +			bean.setDispatcherTypes(EnumSet.of(DispatcherType.INCLUDE));, +			return bean;, +		}, +, +	}, +, +	@Configuration, +	@Import(BaseConfiguration.class), +	static class FilterRegistrationOtherConfiguration {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafServletAutoConfigurationTests.java, +		load(FilterRegistrationOtherConfiguration.class,, +	@SuppressWarnings("rawtypes"), +	public void registerResourceHandlingFilterWithResourceRegistrationBean() {, +		// gh-14926, +		load(FilterRegistrationResourceConfiguration.class,, +				"spring.resources.chain.enabled:true");, +		Map<String, FilterRegistrationBean> beans = this.context, +				.getBeansOfType(FilterRegistrationBean.class);, +		assertThat(beans).hasSize(1);, +		FilterRegistrationBean registration = beans.values().stream(), +				.filter((r) -> r.getFilter() instanceof ResourceUrlEncodingFilter), +				.findFirst().get();]