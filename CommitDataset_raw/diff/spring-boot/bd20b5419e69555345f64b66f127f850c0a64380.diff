[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			root.put("properties", sanitize(prefix, safeSerialize(mapper, bean, prefix)));, +	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {, +			String qualifiedKey = (prefix.length() == 0 ? prefix : prefix + ".") + key;, +				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value));, +				value = this.sanitizer.sanitize(key, value);, +				value = this.sanitizer.sanitize(qualifiedKey, value);, +				map.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			root.put("properties", sanitize(prefix, safeSerialize(mapper, bean, prefix)));, +	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {, +			String qualifiedKey = (prefix.length() == 0 ? prefix : prefix + ".") + key;, +				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value));, +				value = this.sanitizer.sanitize(key, value);, +				value = this.sanitizer.sanitize(qualifiedKey, value);, +				map.put(key, value);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointTests.java, +import java.util.HashMap;, +	@SuppressWarnings("unchecked"), +	public void testKeySanitizationWithCustomPatternUsingCompositeKeys(), +			throws Exception {, +		// gh-4415, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"endpoints.configprops.keys-to-sanitize: .*\\.secrets\\..*, .*\\.hidden\\..*");, +		this.context.register(Config.class);, +		this.context.refresh();, +		ConfigurationPropertiesReportEndpoint report = getEndpointBean();, +		Map<String, Object> properties = report.invoke();, +		Map<String, Object> nestedProperties = (Map<String, Object>) ((Map<String, Object>) properties, +				.get("testProperties")).get("properties");, +		assertNotNull(nestedProperties);, +		Map<String, Object> secrets = (Map<String, Object>) nestedProperties, +				.get("secrets");, +		Map<String, Object> hidden = (Map<String, Object>) nestedProperties.get("hidden");, +		assertEquals("******", secrets.get("mine"));, +		assertEquals("******", secrets.get("yours"));, +		assertEquals("******", hidden.get("mine"));, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +		private Map<String, Object> secrets = new HashMap<String, Object>();, +, +		private Hidden hidden = new Hidden();, +, +		public TestProperties() {, +			this.secrets.put("mine", "myPrivateThing");, +			this.secrets.put("yours", "yourPrivateThing");, +		}, +, +		public Map<String, Object> getSecrets() {, +			return this.secrets;, +		}, +, +		public void setSecrets(Map<String, Object> secrets) {, +			this.secrets = secrets;, +		}, +, +		public Hidden getHidden() {, +			return this.hidden;, +		}, +, +		public void setHidden(Hidden hidden) {, +			this.hidden = hidden;, +		}, +, +		public static class Hidden {, +, +			private String mine = "mySecret";, +, +			public String getMine() {, +				return this.mine;, +			}, +, +			public void setMine(String mine) {, +				this.mine = mine;, +			}, +, +		}, +]