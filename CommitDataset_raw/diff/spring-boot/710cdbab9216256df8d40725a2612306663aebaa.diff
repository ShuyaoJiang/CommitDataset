[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.allow-bean-definition-overriding=false # Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.allow-bean-definition-overriding=false # Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +	private boolean allowBeanDefinitionOverriding;, +, +		ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +		beanFactory.registerSingleton("springApplicationArguments", applicationArguments);, +			beanFactory.registerSingleton("springBootBanner", printedBanner);, +		if (beanFactory instanceof DefaultListableBeanFactory) {, +			((DefaultListableBeanFactory) beanFactory), +					.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);, +		}, +	 * Sets if bean definition overriding, by registering a definition with the same name, +	 * as an existing definition, should be allowed. Defaults to {@code false}., +	 * @param allowBeanDefinitionOverriding if overriding is allowed, +	 * @since 2.1, +	 * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding(boolean), +	 */, +	public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {, +		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding;, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.allow-bean-definition-overriding=false # Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +	private boolean allowBeanDefinitionOverriding;, +, +		ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +		beanFactory.registerSingleton("springApplicationArguments", applicationArguments);, +			beanFactory.registerSingleton("springBootBanner", printedBanner);, +		if (beanFactory instanceof DefaultListableBeanFactory) {, +			((DefaultListableBeanFactory) beanFactory), +					.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);, +		}, +	 * Sets if bean definition overriding, by registering a definition with the same name, +	 * as an existing definition, should be allowed. Defaults to {@code false}., +	 * @param allowBeanDefinitionOverriding if overriding is allowed, +	 * @since 2.1, +	 * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding(boolean), +	 */, +	public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {, +		this.allowBeanDefinitionOverriding = allowBeanDefinitionOverriding;, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BeanDefinitionOverrideFailureAnalyzer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.diagnostics.analyzer;, +, +import java.io.PrintWriter;, +import java.io.StringWriter;, +, +import org.springframework.beans.factory.support.BeanDefinitionOverrideException;, +import org.springframework.boot.diagnostics.AbstractFailureAnalyzer;, +import org.springframework.boot.diagnostics.FailureAnalysis;, +, +/**, + * An {@link AbstractFailureAnalyzer} that performs analysis of failures caused by a, + * {@link BeanDefinitionOverrideException}., + *, + * @author Andy Wilkinson, + */, +class BeanDefinitionOverrideFailureAnalyzer, +		extends AbstractFailureAnalyzer<BeanDefinitionOverrideException> {, +, +	private static final String ACTION = "Consider renaming one of the beans or enabling ", +			+ "overriding by setting spring.main.allow-bean-definition-overriding=true";, +, +	@Override, +	protected FailureAnalysis analyze(Throwable rootFailure,, +			BeanDefinitionOverrideException cause) {, +		return new FailureAnalysis(getDescription(cause), ACTION, cause);, +	}, +, +	private String getDescription(BeanDefinitionOverrideException ex) {, +		StringWriter description = new StringWriter();, +		PrintWriter printer = new PrintWriter(description);, +		printer.printf(]