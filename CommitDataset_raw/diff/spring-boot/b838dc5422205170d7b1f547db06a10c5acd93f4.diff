[+++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/properties/ManagementServerProperties.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/properties/ManagementServerProperties.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-autoconfigure/src/main/java/org/springframework/zero/autoconfigure/web/ServerPropertiesAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/properties/ManagementServerProperties.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-autoconfigure/src/main/java/org/springframework/zero/autoconfigure/web/ServerPropertiesAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-autoconfigure/src/test/java/org/springframework/zero/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-actuator/src/main/java/org/springframework/zero/actuate/properties/ManagementServerProperties.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-autoconfigure/src/main/java/org/springframework/zero/autoconfigure/web/ServerPropertiesAutoConfiguration.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-autoconfigure/src/test/java/org/springframework/zero/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +import org.springframework.zero.context.embedded.properties.ServerProperties;, +++ b/spring-zero-core/src/main/java/org/springframework/zero/bind/PropertiesConfigurationFactory.java, +	private T target;, +	private boolean hasBeenBound = false;, +		this.target = target;, +		this.target = (T) BeanUtils.instantiate(type);, +		bindPropertiesToTarget();, +		if (this.target == null) {, +		return this.target.getClass();, +		if (!this.hasBeenBound) {, +			bindPropertiesToTarget();, +		return this.target;, +	}, +, +	public void bindPropertiesToTarget() throws BindException {, +		Assert.state(this.properties != null || this.propertySources != null,, +				"Properties or propertySources should not be null");, +		try {, +			if (logger.isTraceEnabled()) {, +				if (this.properties != null) {, +					logger.trace("Properties:\n" + this.properties);, +				}, +				else {, +					logger.trace("Property Sources: " + this.propertySources);, +				}, +			}, +			this.hasBeenBound = true;, +			doBindPropertiesToTarget();, +		}, +		catch (BindException e) {, +			if (this.exceptionIfInvalid) {, +				throw e;, +			}, +			logger.error("Failed to load Properties validation bean. ", +					+ "Your Properties may be invalid.", e);, +		}, +	}, +, +	private void doBindPropertiesToTarget() throws BindException {, +, +		RelaxedDataBinder dataBinder = (this.targetName != null ? new RelaxedDataBinder(, +				this.target, this.targetName) : new RelaxedDataBinder(this.target));, +		if (this.validator != null) {, +			dataBinder.setValidator(this.validator);, +		}, +		if (this.conversionService != null) {, +			dataBinder.setConversionService(this.conversionService);, +		}, +		dataBinder.setIgnoreInvalidFields(this.ignoreInvalidFields);, +		dataBinder.setIgnoreUnknownFields(this.ignoreUnknownFields);, +		customizeBinder(dataBinder);, +, +		PropertyValues propertyValues = (this.properties != null ? new MutablePropertyValues(, +				this.properties), +				: new PropertySourcesPropertyValues(this.propertySources));, +		dataBinder.bind(propertyValues);, +, +		if (this.validator != null) {, +			validate(dataBinder);, +		}, +	}, +, +	private void validate(RelaxedDataBinder dataBinder) throws BindException {, +		dataBinder.validate();, +		BindingResult errors = dataBinder.getBindingResult();, +		if (errors.hasErrors()) {, +			logger.error("Properties configuration failed validation");, +			for (ObjectError error : errors.getAllErrors()) {, +				logger.error(this.messageSource != null ? this.messageSource.getMessage(, +						error, Locale.getDefault()) + " (" + error + ")" : error);, +			}, +			if (this.exceptionIfInvalid) {, +				BindException summary = new BindException(errors);]