[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/**, + * @author Phillip Webb, + */, +abstract class AbstractNestedCondition extends SpringBootCondition implements, +		String className = getClass().getName();, +		MemberConditions memberConditions = new MemberConditions(context, className);, +		MemberMatchOutcomes memberOutcomes = new MemberMatchOutcomes(memberConditions);, +		return getFinalMatchOutcome(memberOutcomes);, +	protected abstract ConditionOutcome getFinalMatchOutcome(, +			MemberMatchOutcomes memberOutcomes);, +, +	protected static class MemberMatchOutcomes {, +, +		private final List<ConditionOutcome> all;, +, +		private final List<ConditionOutcome> matches;, +, +		private final List<ConditionOutcome> nonMatches;, +, +		public MemberMatchOutcomes(MemberConditions memberConditions) {, +			this.all = Collections.unmodifiableList(memberConditions.getMatchOutcomes());, +			List<ConditionOutcome> matches = new ArrayList<ConditionOutcome>();, +			List<ConditionOutcome> nonMatches = new ArrayList<ConditionOutcome>();, +			for (ConditionOutcome outcome : this.all) {, +				(outcome.isMatch() ? matches : nonMatches).add(outcome);, +			}, +			this.matches = Collections.unmodifiableList(matches);, +			this.nonMatches = Collections.unmodifiableList(nonMatches);, +		}, +, +		public List<ConditionOutcome> getAll() {, +			return this.all;, +		}, +, +		public List<ConditionOutcome> getMatches() {, +			return this.matches;, +		}, +, +		public List<ConditionOutcome> getNonMatches() {, +			return this.nonMatches;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/**, + * @author Phillip Webb, + */, +abstract class AbstractNestedCondition extends SpringBootCondition implements, +		String className = getClass().getName();, +		MemberConditions memberConditions = new MemberConditions(context, className);, +		MemberMatchOutcomes memberOutcomes = new MemberMatchOutcomes(memberConditions);, +		return getFinalMatchOutcome(memberOutcomes);, +	protected abstract ConditionOutcome getFinalMatchOutcome(, +			MemberMatchOutcomes memberOutcomes);, +, +	protected static class MemberMatchOutcomes {, +, +		private final List<ConditionOutcome> all;, +, +		private final List<ConditionOutcome> matches;, +, +		private final List<ConditionOutcome> nonMatches;, +, +		public MemberMatchOutcomes(MemberConditions memberConditions) {, +			this.all = Collections.unmodifiableList(memberConditions.getMatchOutcomes());, +			List<ConditionOutcome> matches = new ArrayList<ConditionOutcome>();, +			List<ConditionOutcome> nonMatches = new ArrayList<ConditionOutcome>();]