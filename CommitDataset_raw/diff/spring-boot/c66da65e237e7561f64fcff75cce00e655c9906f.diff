[+++ b/.gitignore, +transaction-logs, +++ b/.gitignore, +transaction-logs, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, + * Copyright 2012-2016 the original author or authors., +import java.io.InputStream;, +import java.util.Enumeration;, +import java.util.jar.JarFile;, +import java.util.jar.Manifest;, +import org.springframework.util.ClassUtils;, +		this.source = findSource(sourceClass == null ? getStartClass() : sourceClass);, +	private Class<?> getStartClass() {, +		try {, +			ClassLoader classLoader = getClass().getClassLoader();, +			return getStartClass(classLoader.getResources("META-INF/MANIFEST.MF"));, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +	private Class<?> getStartClass(Enumeration<URL> manifestResources) {, +		while (manifestResources.hasMoreElements()) {, +			try {, +				InputStream inputStream = manifestResources.nextElement().openStream();, +				try {, +					Manifest manifest = new Manifest(inputStream);, +					String startClass = manifest.getMainAttributes(), +							.getValue("Start-Class");, +					if (startClass != null) {, +						return ClassUtils.forName(startClass,, +								getClass().getClassLoader());, +					}, +				}, +				finally {, +					inputStream.close();, +				}, +			}, +			catch (Exception ex) {, +			}, +		}, +		return null;, +	}, +, +			ProtectionDomain domain = (sourceClass == null ? null, +					: sourceClass.getProtectionDomain());, +			CodeSource codeSource = (domain == null ? null : domain.getCodeSource());, +			if (source != null && source.exists() && !isUnitTest()) {, +	private boolean isUnitTest() {, +		try {, +			for (StackTraceElement element : Thread.currentThread().getStackTrace()) {, +				if (element.getClassName().startsWith("org.junit.")) {, +					return true;, +				}, +			}, +		}, +		catch (Exception ex) {, +		}, +		return false;, +	}, +, +			return getRootJarFile(((JarURLConnection) connection).getJarFile());, +	private File getRootJarFile(JarFile jarFile) {, +		String name = jarFile.getName();, +		int separator = name.indexOf("!/");, +		if (separator > 0) {, +			name = name.substring(0, separator);, +		}, +		return new File(name);, +	}, +]