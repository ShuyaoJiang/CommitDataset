[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.web.reactive.function.server.RouterFunctions;, +	 * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern from, +	 * WebFlux annotation or {@link RouterFunctions#MATCHING_PATTERN_ATTRIBUTE} from, +	 * WebFlux Fn., +		String matchingPattern = exchange, +				.getAttribute(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);, +		if (matchingPattern != null) {, +			return Tag.of("uri", matchingPattern);, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.web.reactive.function.server.RouterFunctions;, +	 * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern from, +	 * WebFlux annotation or {@link RouterFunctions#MATCHING_PATTERN_ATTRIBUTE} from, +	 * WebFlux Fn., +		String matchingPattern = exchange, +				.getAttribute(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);, +		if (matchingPattern != null) {, +			return Tag.of("uri", matchingPattern);, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsTests.java, +import org.springframework.web.reactive.function.server.RouterFunctions;, +	public void uriTagValueIsFnMatchingPatternWhenAvailable() {, +		this.exchange.getAttributes().put(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE,, +				"/spring");, +		this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY);, +		Tag tag = WebFluxTags.uri(this.exchange);, +		assertThat(tag.getValue()).isEqualTo("/spring");, +	}, +, +	@Test]