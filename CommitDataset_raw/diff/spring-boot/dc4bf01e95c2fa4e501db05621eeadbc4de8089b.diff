[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +		List<Exclusion> exclusions = createExclusions(args);, +		List<Dependency> dependencies = createDependencies(dependencyMaps, exclusions);, +	@SuppressWarnings("unchecked"), +	private List<Exclusion> createExclusions(Map<?, ?> args) {, +		List<Exclusion> exclusions = new ArrayList<Exclusion>();, +		List<Map<String, Object>> exclusionMaps = (List<Map<String, Object>>) args, +				.get("excludes");, +		if (exclusionMaps != null) {, +			for (Map<String, Object> exclusionMap : exclusionMaps) {, +				exclusions.add(createExclusion(exclusionMap));, +			}, +		}, +		return exclusions;, +	private Exclusion createExclusion(Map<String, Object> exclusionMap) {, +		String group = (String) exclusionMap.get("group");, +		String module = (String) exclusionMap.get("module");, +		return new Exclusion(group, module, "*", "*");, +	}, +, +	private List<Dependency> createDependencies(Map<?, ?>[] dependencyMaps,, +			List<Exclusion> exclusions) {, +			dependencies.add(createDependency(dependencyMap, exclusions));, +	private Dependency createDependency(Map<?, ?> dependencyMap,, +			List<Exclusion> exclusions) {, +			return new Dependency(artifact, JavaScopes.COMPILE, false, exclusions);, +		else {, +	}, +	private GroovyClassLoader getClassLoader(Map args) {, +		GroovyClassLoader classLoader = (GroovyClassLoader) args.get("classLoader");, +		return (classLoader == null ? this.classLoader : classLoader);, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +		List<Exclusion> exclusions = createExclusions(args);, +		List<Dependency> dependencies = createDependencies(dependencyMaps, exclusions);, +	@SuppressWarnings("unchecked"), +	private List<Exclusion> createExclusions(Map<?, ?> args) {, +		List<Exclusion> exclusions = new ArrayList<Exclusion>();, +		List<Map<String, Object>> exclusionMaps = (List<Map<String, Object>>) args, +				.get("excludes");, +		if (exclusionMaps != null) {, +			for (Map<String, Object> exclusionMap : exclusionMaps) {, +				exclusions.add(createExclusion(exclusionMap));, +			}, +		}, +		return exclusions;, +	private Exclusion createExclusion(Map<String, Object> exclusionMap) {, +		String group = (String) exclusionMap.get("group");, +		String module = (String) exclusionMap.get("module");, +		return new Exclusion(group, module, "*", "*");, +	}, +, +	private List<Dependency> createDependencies(Map<?, ?>[] dependencyMaps,, +			List<Exclusion> exclusions) {, +			dependencies.add(createDependency(dependencyMap, exclusions));, +	private Dependency createDependency(Map<?, ?> dependencyMap,, +			List<Exclusion> exclusions) {, +			return new Dependency(artifact, JavaScopes.COMPILE, false, exclusions);, +		else {, +	}, +	private GroovyClassLoader getClassLoader(Map args) {, +		GroovyClassLoader classLoader = (GroovyClassLoader) args.get("classLoader");, +		return (classLoader == null ? this.classLoader : classLoader);, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java, +import java.util.Arrays;, +	@SuppressWarnings("unchecked"), +	@Test, +	public void dependencyResolutionWithExclusions() {, +		Map<String, Object> args = new HashMap<String, Object>();, +		args.put("excludes",, +				Arrays.asList(createExclusion("org.springframework", "spring-core")));, +, +		this.grapeEngine.grab(args,, +				createDependency("org.springframework", "spring-jdbc", "3.2.4.RELEASE"),, +				createDependency("org.springframework", "spring-beans", "3.2.4.RELEASE"));, +, +		assertEquals(4, this.groovyClassLoader.getURLs().length);, +	}, +, +, +	private Map<String, Object> createExclusion(String group, String module) {, +		Map<String, Object> exclusion = new HashMap<String, Object>();, +		exclusion.put("group", group);, +		exclusion.put("module", module);, +		return exclusion;, +	}]