[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java, +import java.util.Collections;, +		try {, +		catch (Exception e) {, +			this.logger.info("Could not fetch user details: " + e.getClass() + ", ", +					+ e.getMessage());, +			return Collections.<String, Object> singletonMap("error",, +					"Could not fetch user details");, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java, +import java.util.Collections;, +		try {, +		catch (Exception e) {, +			this.logger.info("Could not fetch user details: " + e.getClass() + ", ", +					+ e.getMessage());, +			return Collections.<String, Object> singletonMap("error",, +					"Could not fetch user details");, +		}, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServicesTests.java, +import java.util.Collections;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.security.oauth2.client.resource.UserRedirectRequiredException;, +import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;, +	@Rule, +	public ExpectedException expected = ExpectedException.none();, +, +	@SuppressWarnings("unchecked"), +	@Test, +	public void badToken() {, +		this.services.setRestTemplate(this.template);, +		given(this.template.getForEntity(any(String.class), any(Class.class))).willThrow(, +				new UserRedirectRequiredException("foo:bar", Collections, +						.<String, String> emptyMap()));, +		this.expected.expect(InvalidTokenException.class);, +		assertEquals("unknown", this.services.loadAuthentication("FOO").getName());, +	}, +]