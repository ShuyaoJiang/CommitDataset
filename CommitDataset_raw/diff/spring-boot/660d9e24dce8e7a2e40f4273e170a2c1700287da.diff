[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet(), this.server.getServletMapping());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet(), this.server.getServletMapping());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +@Configuration, +	@Autowired, +	private ServerProperties properties;, +, +		container.addErrorPages(new ErrorPage(this.properties.getServletPrefix(), +				+ this.errorPath));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet(), this.server.getServletMapping());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +@Configuration, +	@Autowired, +	private ServerProperties properties;, +, +		container.addErrorPages(new ErrorPage(this.properties.getServletPrefix(), +				+ this.errorPath));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public String getServletMapping() {, +		if (this.servletPath.equals("") || this.servletPath.equals("/")) {, +			return "/";, +		}, +		if (this.servletPath.contains("*")) {, +			if (this.servletPath.endsWith("*")) {, +				return this.servletPath;, +			}, +			return this.servletPath;, +		}, +		if (this.servletPath.endsWith("/")) {, +			return this.servletPath + "*";, +		}, +		return this.servletPath + "/*";, +	}, +, +	public String getServletPrefix() {, +		String result = this.servletPath;, +		if (result.contains("*")) {, +			result = result.substring(0, result.indexOf("*"));, +		}, +		if (result.endsWith("/")) {, +			result = result.substring(0, result.length() - 1);, +		}, +		return result;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet(), this.server.getServletMapping());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +@Configuration, +	@Autowired, +	private ServerProperties properties;, +, +		container.addErrorPages(new ErrorPage(this.properties.getServletPrefix(), +				+ this.errorPath));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public String getServletMapping() {, +		if (this.servletPath.equals("") || this.servletPath.equals("/")) {, +			return "/";, +		}, +		if (this.servletPath.contains("*")) {, +			if (this.servletPath.endsWith("*")) {, +				return this.servletPath;, +			}, +			return this.servletPath;, +		}, +		if (this.servletPath.endsWith("/")) {, +			return this.servletPath + "*";, +		}, +		return this.servletPath + "/*";, +	}, +, +	public String getServletPrefix() {, +		String result = this.servletPath;, +		if (result.contains("*")) {, +			result = result.substring(0, result.indexOf("*"));, +		}, +		if (result.endsWith("/")) {, +			result = result.substring(0, result.length() - 1);, +		}, +		return result;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfigurationTests.java, +		assertEquals("[/spring/*]", registration.getUrlMappings().toString());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet(), this.server.getServletMapping());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +@Configuration, +	@Autowired, +	private ServerProperties properties;, +, +		container.addErrorPages(new ErrorPage(this.properties.getServletPrefix(), +				+ this.errorPath));]