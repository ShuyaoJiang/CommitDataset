[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +	public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {, +		PropertyMapping[] mapping = {, +				new PropertyMapping(convertedName, configurationPropertyName) };, +	public PropertyMapping[] map(String propertySourceName) {, +		PropertyMapping[] mapping = tryMap(propertySourceName);, +	private PropertyMapping[] tryMap(String propertySourceName) {, +				return new PropertyMapping[] {, +						new PropertyMapping(propertySourceName, convertedName) };, +		return NO_MAPPINGS;, +		private final PropertyMapping[] mapping;, +		LastMapping(T from, PropertyMapping[] mapping) {, +		public PropertyMapping[] getMapping() {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +	public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {, +		PropertyMapping[] mapping = {, +				new PropertyMapping(convertedName, configurationPropertyName) };, +	public PropertyMapping[] map(String propertySourceName) {, +		PropertyMapping[] mapping = tryMap(propertySourceName);, +	private PropertyMapping[] tryMap(String propertySourceName) {, +				return new PropertyMapping[] {, +						new PropertyMapping(propertySourceName, convertedName) };, +		return NO_MAPPINGS;, +		private final PropertyMapping[] mapping;, +		LastMapping(T from, PropertyMapping[] mapping) {, +		public PropertyMapping[] getMapping() {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/PropertyMapper.java, +	PropertyMapping[] NO_MAPPINGS = {};, +, +	PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName);, +	PropertyMapping[] map(String propertySourceName);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +	public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {, +		PropertyMapping[] mapping = {, +				new PropertyMapping(convertedName, configurationPropertyName) };, +	public PropertyMapping[] map(String propertySourceName) {, +		PropertyMapping[] mapping = tryMap(propertySourceName);, +	private PropertyMapping[] tryMap(String propertySourceName) {, +				return new PropertyMapping[] {, +						new PropertyMapping(propertySourceName, convertedName) };, +		return NO_MAPPINGS;, +		private final PropertyMapping[] mapping;, +		LastMapping(T from, PropertyMapping[] mapping) {, +		public PropertyMapping[] getMapping() {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/PropertyMapper.java, +	PropertyMapping[] NO_MAPPINGS = {};, +, +	PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName);, +	PropertyMapping[] map(String propertySourceName);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java, +		PropertyMapping[] mappings = getMapper().map(name);, +	protected final ConfigurationProperty find(PropertyMapping[] mappings,, +		for (PropertyMapping candidate : mappings) {, +			if (candidate.isApplicable(name)) {, +				ConfigurationProperty result = find(candidate);, +				if (result != null) {, +					return result;, +				}, +			}, +		}, +		return null;, +		public PropertyMapping[] map(, +				return NO_MAPPINGS;, +		public PropertyMapping[] map(String propertySourceName) {, +				return NO_MAPPINGS;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java, +	public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {, +		PropertyMapping[] mapping = {, +				new PropertyMapping(convertedName, configurationPropertyName) };, +	public PropertyMapping[] map(String propertySourceName) {, +		PropertyMapping[] mapping = tryMap(propertySourceName);, +	private PropertyMapping[] tryMap(String propertySourceName) {, +				return new PropertyMapping[] {, +						new PropertyMapping(propertySourceName, convertedName) };, +		return NO_MAPPINGS;, +		private final PropertyMapping[] mapping;, +		LastMapping(T from, PropertyMapping[] mapping) {, +		public PropertyMapping[] getMapping() {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/PropertyMapper.java, +	PropertyMapping[] NO_MAPPINGS = {};, +, +	PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName);, +	PropertyMapping[] map(String propertySourceName);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java, +		PropertyMapping[] mappings = getMapper().map(name);, +	protected final ConfigurationProperty find(PropertyMapping[] mappings,, +		for (PropertyMapping candidate : mappings) {, +			if (candidate.isApplicable(name)) {, +				ConfigurationProperty result = find(candidate);, +				if (result != null) {, +					return result;, +				}, +			}, +		}, +		return null;, +		public PropertyMapping[] map(, +				return NO_MAPPINGS;, +		public PropertyMapping[] map(String propertySourceName) {, +				return NO_MAPPINGS;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySource.java]