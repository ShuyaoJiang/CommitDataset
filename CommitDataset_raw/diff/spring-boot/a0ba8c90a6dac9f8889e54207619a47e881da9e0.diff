[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import javax.servlet.MultipartConfigElement;, +		@Autowired(required = false), +		private MultipartConfigElement multipartConfig;, +, +			ServletRegistrationBean registration = new ServletRegistrationBean(, +					dispatcherServlet(), this.server.getServletPath());, +			if (this.multipartConfig != null) {, +				registration.setMultipartConfig(this.multipartConfig);, +			}, +			return registration;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import javax.servlet.MultipartConfigElement;, +		@Autowired(required = false), +		private MultipartConfigElement multipartConfig;, +, +			ServletRegistrationBean registration = new ServletRegistrationBean(, +					dispatcherServlet(), this.server.getServletPath());, +			if (this.multipartConfig != null) {, +				registration.setMultipartConfig(this.multipartConfig);, +			}, +			return registration;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfigurationTests.java, +import javax.servlet.MultipartConfigElement;, +, +import org.springframework.boot.context.embedded.MultiPartConfigFactory;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import static org.junit.Assert.assertNull;, +		assertNull(registration.getMultipartConfig());, +	}, +, +	@Test, +	public void multipartConfig() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(MultipartConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		this.context.refresh();, +		ServletRegistrationBean registration = this.context, +				.getBean(ServletRegistrationBean.class);, +		assertNotNull(registration.getMultipartConfig());, +	}, +, +	@Configuration, +	protected static class MultipartConfiguration {, +, +		@Bean, +		public MultipartConfigElement multipartConfig() {, +			MultiPartConfigFactory factory = new MultiPartConfigFactory();, +			factory.setMaxFileSize("128KB");, +			factory.setMaxRequestSize("128KB");, +			return factory.createMultipartConfig();, +		}, +]