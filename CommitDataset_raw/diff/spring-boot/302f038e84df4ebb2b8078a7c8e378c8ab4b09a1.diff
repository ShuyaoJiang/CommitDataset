[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			List<MediaType> mediaTypes = this.properties.getReactive().getMediaTypes();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			List<MediaType> mediaTypes = this.properties.getReactive().getMediaTypes();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java, +			return WebHttpHandlerBuilder.applicationContext(this.applicationContext), +					.build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			List<MediaType> mediaTypes = this.properties.getReactive().getMediaTypes();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java, +			return WebHttpHandlerBuilder.applicationContext(this.applicationContext), +					.build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/reactive/WebSocketReactiveAutoConfiguration.java, + * Auto configuration for WebSocket reactive server in Tomcat, Jetty or Undertow. Requires, + * the appropriate WebSocket modules to be on the classpath., + * @since 2.0.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			List<MediaType> mediaTypes = this.properties.getReactive().getMediaTypes();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java, +			return WebHttpHandlerBuilder.applicationContext(this.applicationContext), +					.build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/reactive/WebSocketReactiveAutoConfiguration.java, + * Auto configuration for WebSocket reactive server in Tomcat, Jetty or Undertow. Requires, + * the appropriate WebSocket modules to be on the classpath., + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/servlet/TomcatWebSocketServletWebServerCustomizer.java, +		factory.addContextCustomizers((context) -> context, +				.addApplicationListener(WsContextListener.class.getName()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag = KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +		public void setControlFlag(, +				KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			List<MediaType> mediaTypes = this.properties.getReactive().getMediaTypes();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java, +			return WebHttpHandlerBuilder.applicationContext(this.applicationContext), +					.build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/reactive/WebSocketReactiveAutoConfiguration.java, + * Auto configuration for WebSocket reactive server in Tomcat, Jetty or Undertow. Requires, + * the appropriate WebSocket modules to be on the classpath., + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/servlet/TomcatWebSocketServletWebServerCustomizer.java, +		factory.addContextCustomizers((context) -> context, +				.addApplicationListener(WsContextListener.class.getName()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilderTests.java, +		this.dataSource = DataSourceBuilder.create().url("jdbc:h2:test").build();, +		this.dataSource = DataSourceBuilder, +				.create(new HidePackagesClassLoader("com.zaxxer.hikari")), +		assertThat(this.dataSource), +				.isInstanceOf(org.apache.tomcat.jdbc.pool.DataSource.class);]