[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import com.rabbitmq.client.Channel;, +import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;, +import org.springframework.amqp.rabbit.core.RabbitTemplate;, +import org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, + * @author Arnaud Cogoluègnes, +	@ConditionalOnClass({ RabbitTemplate.class, Channel.class }), +	@ConditionalOnBean(AbstractConnectionFactory.class), +	@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "metrics", matchIfMissing = true), +	static class MetricsRabbitConfiguration {, +, +		@Bean, +		public RabbitMetrics rabbitMetrics(AbstractConnectionFactory connectionFactory) {, +			return new RabbitMetrics(connectionFactory.getRabbitConnectionFactory());, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import com.rabbitmq.client.Channel;, +import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;, +import org.springframework.amqp.rabbit.core.RabbitTemplate;, +import org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, + * @author Arnaud Cogoluègnes, +	@ConditionalOnClass({ RabbitTemplate.class, Channel.class }), +	@ConditionalOnBean(AbstractConnectionFactory.class), +	@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "metrics", matchIfMissing = true), +	static class MetricsRabbitConfiguration {, +, +		@Bean, +		public RabbitMetrics rabbitMetrics(AbstractConnectionFactory connectionFactory) {, +			return new RabbitMetrics(connectionFactory.getRabbitConnectionFactory());, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, + * @author Arnaud Cogoluègnes, +	@Test, +	public void rabbitmqNativeConnectionFactoryIsInstrumented() {, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class)), +				.run((context) -> {, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					assertThat(registry.find("rabbitmq.connections").meter()).isPresent();, +				});, +	}, +, +	@Test, +	public void rabbitmqNativeConnectionFactoryInstrumentationCanBeDisabled() {, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class)), +				.withPropertyValues("spring.rabbitmq.metrics=false"), +				.run((context) -> {, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					assertThat(registry.find("rabbitmq.connections").meter()).isNotPresent();, +				});, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import com.rabbitmq.client.Channel;, +import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;, +import org.springframework.amqp.rabbit.core.RabbitTemplate;, +import org.springframework.boot.actuate.metrics.amqp.RabbitMetrics;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, + * @author Arnaud Cogoluègnes, +	@ConditionalOnClass({ RabbitTemplate.class, Channel.class }), +	@ConditionalOnBean(AbstractConnectionFactory.class), +	@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "metrics", matchIfMissing = true), +	static class MetricsRabbitConfiguration {, +, +		@Bean, +		public RabbitMetrics rabbitMetrics(AbstractConnectionFactory connectionFactory) {, +			return new RabbitMetrics(connectionFactory.getRabbitConnectionFactory());, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, + * @author Arnaud Cogoluègnes, +	@Test, +	public void rabbitmqNativeConnectionFactoryIsInstrumented() {, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class)), +				.run((context) -> {, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					assertThat(registry.find("rabbitmq.connections").meter()).isPresent();, +				});, +	}, +]