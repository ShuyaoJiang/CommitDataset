[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		postProcessRequestHeaders(headers);, +	/**, +	 * Post process request headers before they are added to the trace., +	 * @param headers a mutable map containing the request headers to trace, +	 * @since 1.4.0, +	 */, +	protected void postProcessRequestHeaders(Map<String, Object> headers) {, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		postProcessRequestHeaders(headers);, +	/**, +	 * Post process request headers before they are added to the trace., +	 * @param headers a mutable map containing the request headers to trace, +	 * @since 1.4.0, +	 */, +	protected void postProcessRequestHeaders(Map<String, Object> headers) {, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +import java.util.Map;, +, +import org.springframework.boot.actuate.trace.TraceProperties;, +import org.springframework.boot.actuate.trace.TraceRepository;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	@Test, +	public void overrideTraceFilter() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				CustomTraceFilterConfig.class, PropertyPlaceholderAutoConfiguration.class,, +				TraceRepositoryAutoConfiguration.class,, +				TraceWebFilterAutoConfiguration.class);, +		WebRequestTraceFilter filter = context.getBean(WebRequestTraceFilter.class);, +		assertThat(filter).isInstanceOf(TestWebRequestTraceFilter.class);, +		context.close();, +	}, +, +	@Configuration, +	static class CustomTraceFilterConfig {, +, +		@Bean, +		public TestWebRequestTraceFilter testWebRequestTraceFilter(, +				TraceRepository repository, TraceProperties properties) {, +			return new TestWebRequestTraceFilter(repository, properties);, +		}, +, +	}, +, +	static class TestWebRequestTraceFilter extends WebRequestTraceFilter {, +, +		TestWebRequestTraceFilter(TraceRepository repository,, +				TraceProperties properties) {, +			super(repository, properties);, +		}, +, +		@Override, +		protected void postProcessRequestHeaders(Map<String, Object> headers) {, +			headers.clear();, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		postProcessRequestHeaders(headers);, +	/**, +	 * Post process request headers before they are added to the trace., +	 * @param headers a mutable map containing the request headers to trace, +	 * @since 1.4.0, +	 */, +	protected void postProcessRequestHeaders(Map<String, Object> headers) {, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +import java.util.Map;, +, +import org.springframework.boot.actuate.trace.TraceProperties;, +import org.springframework.boot.actuate.trace.TraceRepository;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	@Test, +	public void overrideTraceFilter() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				CustomTraceFilterConfig.class, PropertyPlaceholderAutoConfiguration.class,, +				TraceRepositoryAutoConfiguration.class,, +				TraceWebFilterAutoConfiguration.class);, +		WebRequestTraceFilter filter = context.getBean(WebRequestTraceFilter.class);, +		assertThat(filter).isInstanceOf(TestWebRequestTraceFilter.class);]