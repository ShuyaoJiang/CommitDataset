[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +		private static final String DEFAULT_TABLE_NAME = "SPRING_SESSION";, +, +		private String tableName = DEFAULT_TABLE_NAME;, +		public class Initializer {, +				boolean isDefaultTableName = DEFAULT_TABLE_NAME.equals(, +						Jdbc.this.getTableName());, +				boolean isDefaultSchema = DEFAULT_SCHEMA_LOCATION.equals(, +						Jdbc.this.getSchema());, +				return this.enabled && (isDefaultTableName || !isDefaultSchema);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +		private static final String DEFAULT_TABLE_NAME = "SPRING_SESSION";, +, +		private String tableName = DEFAULT_TABLE_NAME;, +		public class Initializer {, +				boolean isDefaultTableName = DEFAULT_TABLE_NAME.equals(, +						Jdbc.this.getTableName());, +				boolean isDefaultSchema = DEFAULT_SCHEMA_LOCATION.equals(, +						Jdbc.this.getSchema());, +				return this.enabled && (isDefaultTableName || !isDefaultSchema);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		assertThat(this.context.getBean(SessionProperties.class), +				.getJdbc().getInitializer().isEnabled()).isTrue();, +		assertThat(this.context.getBean(SessionProperties.class), +				.getJdbc().getInitializer().isEnabled()).isFalse();, +		assertThat(this.context.getBean(SessionProperties.class), +				.getJdbc().getInitializer().isEnabled()).isTrue();, +	@Test, +	public void customTableNameWithDefaultSchemaDisablesInitializer() {, +		load(Arrays.asList(EmbeddedDataSourceConfiguration.class,, +				DataSourceTransactionManagerAutoConfiguration.class),, +				"spring.session.store-type=jdbc",, +				"spring.session.jdbc.table-name=FOO_BAR");, +		JdbcOperationsSessionRepository repository = validateSessionRepository(, +				JdbcOperationsSessionRepository.class);, +		assertThat(new DirectFieldAccessor(repository).getPropertyValue("tableName")), +				.isEqualTo("FOO_BAR");, +		assertThat(this.context.getBean(SessionProperties.class), +				.getJdbc().getInitializer().isEnabled()).isFalse();, +		this.thrown.expect(BadSqlGrammarException.class);, +		assertThat(this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION")).isEmpty();, +	}, +]