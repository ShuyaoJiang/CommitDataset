[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		@ConditionalOnProperty(value = "spring.favicon.enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		@ConditionalOnProperty(value = "spring.favicon.enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, + * @author Andy Wilkinson, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +	protected Map<String, List<Resource>> getFaviconMappingLocations(), +			throws IllegalAccessException {, +		HandlerMapping mapping = (HandlerMapping) this.context, +				.getBean("faviconHandlerMapping");, +		return getMappingLocations(mapping);, +	}, +, +	protected Map<String, List<Resource>> getResourceMappingLocations(), +		return getMappingLocations(mapping);, +	}, +, +	@SuppressWarnings("unchecked"), +	protected Map<String, List<Resource>> getMappingLocations(HandlerMapping mapping), +			throws IllegalAccessException {, +	@Test, +	public void faviconMapping() throws IllegalAccessException {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(, +				this.context.getBeansOfType(ResourceHttpRequestHandler.class).get(, +						"faviconRequestHandler"), is(notNullValue()));, +		assertThat(, +				this.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(, +						"faviconHandlerMapping"), is(notNullValue()));, +		Map<String, List<Resource>> mappingLocations = getFaviconMappingLocations();, +		assertThat(mappingLocations.get("/**/favicon.ico").size(), equalTo(5));, +	}, +, +	@Test, +	public void faviconMappingDisabled() throws IllegalAccessException {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "spring.favicon.enabled:false");, +		this.context.refresh();, +		assertThat(, +				this.context.getBeansOfType(ResourceHttpRequestHandler.class).get(, +						"faviconRequestHandler"), is(nullValue()));, +		assertThat(, +				this.context.getBeansOfType(SimpleUrlHandlerMapping.class).get(, +						"faviconHandlerMapping"), is(nullValue()));, +	}, +]