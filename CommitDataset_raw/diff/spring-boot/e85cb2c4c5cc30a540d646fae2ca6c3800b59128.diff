[+++ b/.travis.yml, +  - cassandra, +++ b/.travis.yml, +  - cassandra, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * @author Mark Paluch, +	 * Action to take at startup., +	 */, +	private String schemaAction = "none";, +, +	/**, +	public String getSchemaAction() {, +		return this.schemaAction;, +	}, +, +	public void setSchemaAction(String schemaAction) {, +		this.schemaAction = schemaAction;, +	}, +, +++ b/.travis.yml, +  - cassandra, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * @author Mark Paluch, +	 * Action to take at startup., +	 */, +	private String schemaAction = "none";, +, +	/**, +	public String getSchemaAction() {, +		return this.schemaAction;, +	}, +, +	public void setSchemaAction(String schemaAction) {, +		this.schemaAction = schemaAction;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.PropertyResolver;, + * @author Mark Paluch, +	private final PropertyResolver propertyResolver;, +, +			CassandraProperties properties, Cluster cluster, Environment environment) {, +		this.propertyResolver = new RelaxedPropertyResolver(environment, "spring.data.cassandra.");, +, +, +		SchemaAction schemaAction = propertyResolver.getProperty("schemaAction", SchemaAction.class, SchemaAction.NONE);, +		session.setSchemaAction(schemaAction);, +++ b/.travis.yml, +  - cassandra, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * @author Mark Paluch, +	 * Action to take at startup., +	 */, +	private String schemaAction = "none";, +, +	/**, +	public String getSchemaAction() {, +		return this.schemaAction;, +	}, +, +	public void setSchemaAction(String schemaAction) {, +		this.schemaAction = schemaAction;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.PropertyResolver;, + * @author Mark Paluch, +	private final PropertyResolver propertyResolver;, +, +			CassandraProperties properties, Cluster cluster, Environment environment) {, +		this.propertyResolver = new RelaxedPropertyResolver(environment, "spring.data.cassandra.");, +, +, +		SchemaAction schemaAction = propertyResolver.getProperty("schemaAction", SchemaAction.class, SchemaAction.NONE);, +		session.setSchemaAction(schemaAction);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java, +package org.springframework.boot.autoconfigure.data.cassandra;, +, +/**, + *, + * @author Stephane Nicoll, + */, +public class CassandraDataAutoConfigurationIntegrationTests {, +}, +++ b/.travis.yml, +  - cassandra, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * @author Mark Paluch, +	 * Action to take at startup., +	 */, +	private String schemaAction = "none";, +, +	/**, +	public String getSchemaAction() {, +		return this.schemaAction;, +	}]