[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +	@Configuration, +	@ConditionalOnExpression("${health.diskspace.enabled:true}"), +	public static class DiskSpaceHealthIndicatorConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator"), +		public HealthIndicator diskSpaceHealthIndicator(, +				DiskSpaceHealthIndicatorProperties properties) {, +			return new DiskSpaceHealthIndicator(properties);, +		}, +, +		@Bean, +		@ConfigurationProperties("health.diskspace"), +		public DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {, +			return new DiskSpaceHealthIndicatorProperties();, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +	@Configuration, +	@ConditionalOnExpression("${health.diskspace.enabled:true}"), +	public static class DiskSpaceHealthIndicatorConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator"), +		public HealthIndicator diskSpaceHealthIndicator(, +				DiskSpaceHealthIndicatorProperties properties) {, +			return new DiskSpaceHealthIndicator(properties);, +		}, +, +		@Bean, +		@ConfigurationProperties("health.diskspace"), +		public DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {, +			return new DiskSpaceHealthIndicatorProperties();, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java, + * A {@link HealthIndicator} that checks available disk space and reports a status of, + * {@link Status#DOWN} when it drops below a configurable threshold., + * @author Andy Wilkinson, +, +	private final DiskSpaceHealthIndicatorProperties properties;, +	 * Create a new {@code DiskSpaceHealthIndicator}, +	public DiskSpaceHealthIndicator(DiskSpaceHealthIndicatorProperties properties) {, +		this.properties = properties;, +		long diskFreeInBytes = this.properties.getPath().getFreeSpace();, +		if (diskFreeInBytes >= this.properties.getThreshold()) {, +		}, +		else {, +			logger.warn(String.format("Free disk space below threshold. ", +					+ "Available: %d bytes (threshold: %d bytes)", diskFreeInBytes,, +					this.properties.getThreshold()));, +		builder.withDetail("free", diskFreeInBytes).withDetail("threshold",, +				this.properties.getThreshold());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicator;, +import org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +	@Configuration, +	@ConditionalOnExpression("${health.diskspace.enabled:true}"), +	public static class DiskSpaceHealthIndicatorConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "diskSpaceHealthIndicator"), +		public HealthIndicator diskSpaceHealthIndicator(, +				DiskSpaceHealthIndicatorProperties properties) {, +			return new DiskSpaceHealthIndicator(properties);, +		}, +, +		@Bean, +		@ConfigurationProperties("health.diskspace"), +		public DiskSpaceHealthIndicatorProperties diskSpaceHealthIndicatorProperties() {, +			return new DiskSpaceHealthIndicatorProperties();, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java, + * A {@link HealthIndicator} that checks available disk space and reports a status of, + * {@link Status#DOWN} when it drops below a configurable threshold., + * @author Andy Wilkinson, +, +	private final DiskSpaceHealthIndicatorProperties properties;, +	 * Create a new {@code DiskSpaceHealthIndicator}, +	public DiskSpaceHealthIndicator(DiskSpaceHealthIndicatorProperties properties) {, +		this.properties = properties;, +		long diskFreeInBytes = this.properties.getPath().getFreeSpace();, +		if (diskFreeInBytes >= this.properties.getThreshold()) {, +		}, +		else {, +			logger.warn(String.format("Free disk space below threshold. ", +					+ "Available: %d bytes (threshold: %d bytes)", diskFreeInBytes,, +					this.properties.getThreshold()));]