[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.context.annotation.Import;, + * @author Brian Clozel, +		public DispatcherServletConfiguration(WebMvcProperties webMvcProperties) {, +		@Bean, +		@ConditionalOnBean(MultipartResolver.class), +		@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +		public MultipartResolver multipartResolver(MultipartResolver resolver) {, +			// Detect if the user has created a MultipartResolver but named it incorrectly, +			return resolver;, +		}, +, +	}, +, +	@Configuration, +	@Conditional(DispatcherServletRegistrationCondition.class), +	@ConditionalOnClass(ServletRegistration.class), +	@EnableConfigurationProperties(WebMvcProperties.class), +	@Import(DispatcherServletConfiguration.class), +	protected static class DispatcherServletRegistrationConfiguration {, +, +		private final ServerProperties serverProperties;, +, +		private final WebMvcProperties webMvcProperties;, +, +		private final MultipartConfigElement multipartConfig;, +, +		public DispatcherServletRegistrationConfiguration(, +				ServerProperties serverProperties, WebMvcProperties webMvcProperties,, +				ObjectProvider<MultipartConfigElement> multipartConfigProvider) {, +			this.serverProperties = serverProperties;, +			this.webMvcProperties = webMvcProperties;, +			this.multipartConfig = multipartConfigProvider.getIfAvailable();, +		}, +, +		@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME), +		public ServletRegistrationBean dispatcherServletRegistration(, +				DispatcherServlet dispatcherServlet) {, +					dispatcherServlet, this.serverProperties.getServletMapping());, +			List<String> dispatchServletBeans = Arrays.asList(beanFactory, +					.getBeanNamesForType(DispatcherServlet.class, false, false));, +			if (dispatchServletBeans.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +				return ConditionOutcome.noMatch("found DispatcherServlet named ", +						+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			}, +			if (beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +				return ConditionOutcome.noMatch("found non-DispatcherServlet named ", +						+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +			}, +			if (dispatchServletBeans.isEmpty()) {, +				return ConditionOutcome.match("no DispatcherServlet found");, +			}, +			return ConditionOutcome, +					.match("one or more DispatcherServlets found and none is named ", +							+ DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +		}, +, +	}, +, +	@Order(Ordered.LOWEST_PRECEDENCE - 10), +	private static class DispatcherServletRegistrationCondition, +			extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +			ConditionOutcome outcome = checkDefaultDispatcherName(beanFactory);, +			return checkServletRegistration(beanFactory);, +		private ConditionOutcome checkDefaultDispatcherName(, +			if (containsDispatcherBean, +					&& !servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +			return ConditionOutcome.match();, +		private ConditionOutcome checkServletRegistration(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.context.annotation.Import;, + * @author Brian Clozel, +		public DispatcherServletConfiguration(WebMvcProperties webMvcProperties) {, +		@Bean, +		@ConditionalOnBean(MultipartResolver.class), +		@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +		public MultipartResolver multipartResolver(MultipartResolver resolver) {, +			// Detect if the user has created a MultipartResolver but named it incorrectly, +			return resolver;, +		}, +, +	}, +, +	@Configuration, +	@Conditional(DispatcherServletRegistrationCondition.class), +	@ConditionalOnClass(ServletRegistration.class), +	@EnableConfigurationProperties(WebMvcProperties.class), +	@Import(DispatcherServletConfiguration.class), +	protected static class DispatcherServletRegistrationConfiguration {, +, +		private final ServerProperties serverProperties;, +, +		private final WebMvcProperties webMvcProperties;, +, +		private final MultipartConfigElement multipartConfig;]