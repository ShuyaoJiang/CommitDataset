[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.Collection;, +			String[] locations = new LocationResolver(flyway.getDataSource()), +					.resolveLocations(this.properties.getLocations());, +						() -> "Cannot find migrations location in: " + Arrays.asList(, +								locations), +			super.setLocations(, +					new LocationResolver(getDataSource()).resolveLocations(locations));, +		}, +, +	}, +, +	private static class LocationResolver {, +, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +		private final DataSource dataSource;, +, +		public LocationResolver(DataSource dataSource) {, +			this.dataSource = dataSource;, +		}, +, +		public String[] resolveLocations(Collection<String> locations) {, +			return resolveLocations(locations.toArray(new String[locations.size()]));, +		}, +, +		public String[] resolveLocations(String[] locations) {, +			if (usesVendorLocation(locations)) {, +				DatabaseDriver databaseDriver = getDatabaseDriver();, +				return replaceVendorLocations(locations, databaseDriver);, +			}, +			return locations;, +		}, +, +		private String[] replaceVendorLocations(String[] locations,, +				DatabaseDriver databaseDriver) {, +			if (databaseDriver == DatabaseDriver.UNKNOWN) {, +				return locations;, +			}, +			String vendor = databaseDriver.getId();, +			return Arrays.stream(locations), +					.map((location) -> location.replace(VENDOR_PLACEHOLDER, vendor)), +					.toArray(String[]::new);, +		}, +, +		private DatabaseDriver getDatabaseDriver() {, +			try {, +				String url = (String) JdbcUtils.extractDatabaseMetaData(this.dataSource,, +						"getURL");, +				return DatabaseDriver.fromJdbcUrl(url);, +			}, +			catch (MetaDataAccessException ex) {, +				throw new IllegalStateException(ex);, +			}, +, +		}, +, +		private boolean usesVendorLocation(String... locations) {, +			for (String location : locations) {, +				if (location.contains(VENDOR_PLACEHOLDER)) {, +					return true;, +				}, +			}, +			return false;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.Collection;, +			String[] locations = new LocationResolver(flyway.getDataSource()), +					.resolveLocations(this.properties.getLocations());, +						() -> "Cannot find migrations location in: " + Arrays.asList(, +								locations), +			super.setLocations(, +					new LocationResolver(getDataSource()).resolveLocations(locations));, +		}, +, +	}, +, +	private static class LocationResolver {, +, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +		private final DataSource dataSource;, +, +		public LocationResolver(DataSource dataSource) {, +			this.dataSource = dataSource;, +		}, +, +		public String[] resolveLocations(Collection<String> locations) {, +			return resolveLocations(locations.toArray(new String[locations.size()]));, +		}, +, +		public String[] resolveLocations(String[] locations) {, +			if (usesVendorLocation(locations)) {, +				DatabaseDriver databaseDriver = getDatabaseDriver();, +				return replaceVendorLocations(locations, databaseDriver);, +			}, +			return locations;, +		}, +, +		private String[] replaceVendorLocations(String[] locations,, +				DatabaseDriver databaseDriver) {]