[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import com.couchbase.client.java.Bucket;, +import com.couchbase.client.java.Cluster;, +import com.couchbase.client.java.CouchbaseCluster;, +import com.couchbase.client.java.cluster.ClusterInfo;, +import com.couchbase.client.java.env.CouchbaseEnvironment;, +import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;, +import org.springframework.context.annotation.Primary;, +import org.springframework.data.couchbase.config.CouchbaseConfigurer;, +@ConditionalOnClass({CouchbaseBucket.class, Cluster.class}), +	@ConditionalOnMissingBean(CouchbaseConfigurer.class), +	public static class CouchbaseConfiguration {, +		@Bean, +		@Primary, +		public CouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return DefaultCouchbaseEnvironment.create();, +		@Bean, +		@Primary, +		public Cluster couchbaseCluster() throws Exception {, +			return CouchbaseCluster.create(couchbaseEnvironment(),, +					this.properties.getBootstrapHosts());, +		@Bean, +		@Primary, +		public ClusterInfo couchbaseClusterInfo() throws Exception {, +			return couchbaseCluster().clusterManager(this.properties.getBucket().getName(),, +					this.properties.getBucket().getPassword()).info();, +		@Bean, +		@Primary, +		public Bucket couchbaseClient() throws Exception {, +			return couchbaseCluster().openBucket(this.properties.getBucket().getName(),, +					this.properties.getBucket().getPassword());, +	 * user-configuration defines a {@link CouchbaseConfigurer} or if at least, +	 * the "bootstrapHosts" property is specified., +		@ConditionalOnProperty(prefix = "spring.couchbase", name = "bootstrapHosts"), +		static class BootstrapHostsProperty {, +		@ConditionalOnBean(CouchbaseConfigurer.class), +		static class CouchbaseConfigurerAvailable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import com.couchbase.client.java.Bucket;, +import com.couchbase.client.java.Cluster;, +import com.couchbase.client.java.CouchbaseCluster;, +import com.couchbase.client.java.cluster.ClusterInfo;, +import com.couchbase.client.java.env.CouchbaseEnvironment;, +import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;, +import org.springframework.context.annotation.Primary;, +import org.springframework.data.couchbase.config.CouchbaseConfigurer;, +@ConditionalOnClass({CouchbaseBucket.class, Cluster.class}), +	@ConditionalOnMissingBean(CouchbaseConfigurer.class), +	public static class CouchbaseConfiguration {, +		@Bean, +		@Primary, +		public CouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return DefaultCouchbaseEnvironment.create();, +		@Bean, +		@Primary, +		public Cluster couchbaseCluster() throws Exception {, +			return CouchbaseCluster.create(couchbaseEnvironment(),, +					this.properties.getBootstrapHosts());, +		@Bean, +		@Primary, +		public ClusterInfo couchbaseClusterInfo() throws Exception {, +			return couchbaseCluster().clusterManager(this.properties.getBucket().getName(),, +					this.properties.getBucket().getPassword()).info();, +		@Bean, +		@Primary, +		public Bucket couchbaseClient() throws Exception {, +			return couchbaseCluster().openBucket(this.properties.getBucket().getName(),, +					this.properties.getBucket().getPassword());, +	 * user-configuration defines a {@link CouchbaseConfigurer} or if at least, +	 * the "bootstrapHosts" property is specified., +		@ConditionalOnProperty(prefix = "spring.couchbase", name = "bootstrapHosts"), +		static class BootstrapHostsProperty {, +		@ConditionalOnBean(CouchbaseConfigurer.class), +		static class CouchbaseConfigurerAvailable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +@ConfigurationProperties(prefix = "spring.couchbase"), +	private List<String> bootstrapHosts;, +		private String name = "default";, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import com.couchbase.client.java.Bucket;, +import com.couchbase.client.java.Cluster;, +import com.couchbase.client.java.CouchbaseCluster;, +import com.couchbase.client.java.cluster.ClusterInfo;, +import com.couchbase.client.java.env.CouchbaseEnvironment;, +import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;, +import org.springframework.context.annotation.Primary;, +import org.springframework.data.couchbase.config.CouchbaseConfigurer;, +@ConditionalOnClass({CouchbaseBucket.class, Cluster.class}), +	@ConditionalOnMissingBean(CouchbaseConfigurer.class), +	public static class CouchbaseConfiguration {, +		@Bean, +		@Primary, +		public CouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return DefaultCouchbaseEnvironment.create();, +		@Bean, +		@Primary, +		public Cluster couchbaseCluster() throws Exception {, +			return CouchbaseCluster.create(couchbaseEnvironment(),, +					this.properties.getBootstrapHosts());, +		@Bean]