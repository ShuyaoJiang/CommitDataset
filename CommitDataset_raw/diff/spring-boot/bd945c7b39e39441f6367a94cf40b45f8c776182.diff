[+++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/restart/Restarter.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import org.springframework.boot.developertools.restart.classloader.ClassLoaderFiles;, +	private URL[] initialUrls;, +	private final Set<URL> urls = new LinkedHashSet<URL>();, +, +	private final ClassLoaderFiles classLoaderFiles = new ClassLoaderFiles();, +, +		this.initialUrls = initializer.getInitialUrls(thread);, +		if (this.initialUrls != null) {, +			this.urls.addAll(Arrays.asList(this.initialUrls));, +	 * Add additional URLs to be includes in the next restart., +	 * @param urls the urls to add, +	 */, +	public void addUrls(Collection<URL> urls) {, +		Assert.notNull(urls, "Urls must not be null");, +		this.urls.addAll(ChangeableUrls.fromUrls(urls).toList());, +	}, +, +	/**, +	 * Add additional {@link ClassLoaderFiles} to be included in the next restart., +	 * @param classLoaderFiles the files to add, +	 */, +	public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {, +		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null");, +		this.classLoaderFiles.addAll(classLoaderFiles);, +	}, +, +	/**, +		URL[] urls = this.urls.toArray(new URL[this.urls.size()]);, +		ClassLoaderFiles updatedFiles = new ClassLoaderFiles(this.classLoaderFiles);, +		ClassLoader classLoader = new RestartClassLoader(parent, urls, updatedFiles,, +				this.logger);, +					+ " with URLs " + Arrays.asList(urls));, +		return this.initialUrls;, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/restart/Restarter.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import org.springframework.boot.developertools.restart.classloader.ClassLoaderFiles;, +	private URL[] initialUrls;, +	private final Set<URL> urls = new LinkedHashSet<URL>();, +, +	private final ClassLoaderFiles classLoaderFiles = new ClassLoaderFiles();, +, +		this.initialUrls = initializer.getInitialUrls(thread);, +		if (this.initialUrls != null) {, +			this.urls.addAll(Arrays.asList(this.initialUrls));, +	 * Add additional URLs to be includes in the next restart., +	 * @param urls the urls to add, +	 */, +	public void addUrls(Collection<URL> urls) {, +		Assert.notNull(urls, "Urls must not be null");, +		this.urls.addAll(ChangeableUrls.fromUrls(urls).toList());, +	}, +, +	/**, +	 * Add additional {@link ClassLoaderFiles} to be included in the next restart., +	 * @param classLoaderFiles the files to add, +	 */, +	public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {, +		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null");, +		this.classLoaderFiles.addAll(classLoaderFiles);, +	}, +, +	/**, +		URL[] urls = this.urls.toArray(new URL[this.urls.size()]);, +		ClassLoaderFiles updatedFiles = new ClassLoaderFiles(this.classLoaderFiles);, +		ClassLoader classLoader = new RestartClassLoader(parent, urls, updatedFiles,, +				this.logger);, +					+ " with URLs " + Arrays.asList(urls));, +		return this.initialUrls;, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/restart/classloader/ClassLoaderFile.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.developertools.restart.classloader;, +, +import java.io.Serializable;, +, +import org.springframework.util.Assert;, +, +/**, + * A single file that may be served from a {@link ClassLoader}. Can be used to represent, + * files that have been added, modified or deleted since the original JAR was created., + *, + * @author Phillip Webb]