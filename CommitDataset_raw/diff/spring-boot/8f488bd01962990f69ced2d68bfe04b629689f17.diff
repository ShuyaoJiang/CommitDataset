[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, "application/vnd.initializr.v2+json"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, "application/vnd.initializr.v2+json"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import java.util.Iterator;, +	private static final String TYPE_EL = "type";, +	private static final String VALUES_EL = "values";, +		JSONObject dependencies = root.getJSONObject(DEPENDENCIES_EL);, +		JSONArray array = dependencies.getJSONArray(VALUES_EL);, +		if (!root.has(TYPE_EL)) {, +		JSONObject type = root.getJSONObject(TYPE_EL);, +		JSONArray array = type.getJSONArray(VALUES_EL);, +		String defaultType = type.has(DEFAULT_ATTRIBUTE) ? type.getString(DEFAULT_ATTRIBUTE) : null;, +			ProjectType projectType = parseType(typeJson, defaultType);, +		Iterator<?> keys = root.keys();, +		while (keys.hasNext()) {, +			String key = (String) keys.next();, +			Object o = root.get(key);, +			if (o instanceof JSONObject) {, +				JSONObject child = (JSONObject) o;, +				if (child.has(DEFAULT_ATTRIBUTE)) {, +					result.put(key, child.getString(DEFAULT_ATTRIBUTE));, +			}, +		}, +		if (group.has(VALUES_EL)) {, +			JSONArray content = group.getJSONArray(VALUES_EL);, +	private ProjectType parseType(JSONObject object, String defaultId) {, +		boolean defaultType = id.equals(defaultId);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, "application/vnd.initializr.v2+json"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import java.util.Iterator;, +	private static final String TYPE_EL = "type";, +	private static final String VALUES_EL = "values";, +		JSONObject dependencies = root.getJSONObject(DEPENDENCIES_EL);, +		JSONArray array = dependencies.getJSONArray(VALUES_EL);, +		if (!root.has(TYPE_EL)) {, +		JSONObject type = root.getJSONObject(TYPE_EL);, +		JSONArray array = type.getJSONArray(VALUES_EL);, +		String defaultType = type.has(DEFAULT_ATTRIBUTE) ? type.getString(DEFAULT_ATTRIBUTE) : null;, +			ProjectType projectType = parseType(typeJson, defaultType);, +		Iterator<?> keys = root.keys();, +		while (keys.hasNext()) {, +			String key = (String) keys.next();, +			Object o = root.get(key);, +			if (o instanceof JSONObject) {, +				JSONObject child = (JSONObject) o;, +				if (child.has(DEFAULT_ATTRIBUTE)) {, +					result.put(key, child.getString(DEFAULT_ATTRIBUTE));, +			}, +		}, +		if (group.has(VALUES_EL)) {, +			JSONArray content = group.getJSONArray(VALUES_EL);, +	private ProjectType parseType(JSONObject object, String defaultId) {, +		boolean defaultType = id.equals(defaultId);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +import org.springframework.util.StringUtils;, +, +, +			if (!this.dependencies.isEmpty()) {, +				builder.setParameter("dependencies", StringUtils.collectionToCommaDelimitedString(this.dependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, "application/vnd.initializr.v2+json"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import java.util.Iterator;, +	private static final String TYPE_EL = "type";, +	private static final String VALUES_EL = "values";, +		JSONObject dependencies = root.getJSONObject(DEPENDENCIES_EL);, +		JSONArray array = dependencies.getJSONArray(VALUES_EL);, +		if (!root.has(TYPE_EL)) {, +		JSONObject type = root.getJSONObject(TYPE_EL);, +		JSONArray array = type.getJSONArray(VALUES_EL);, +		String defaultType = type.has(DEFAULT_ATTRIBUTE) ? type.getString(DEFAULT_ATTRIBUTE) : null;, +			ProjectType projectType = parseType(typeJson, defaultType);, +		Iterator<?> keys = root.keys();, +		while (keys.hasNext()) {, +			String key = (String) keys.next();, +			Object o = root.get(key);, +			if (o instanceof JSONObject) {, +				JSONObject child = (JSONObject) o;, +				if (child.has(DEFAULT_ATTRIBUTE)) {, +					result.put(key, child.getString(DEFAULT_ATTRIBUTE));, +			}, +		}, +		if (group.has(VALUES_EL)) {, +			JSONArray content = group.getJSONArray(VALUES_EL);, +	private ProjectType parseType(JSONObject object, String defaultId) {, +		boolean defaultType = id.equals(defaultId);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +import org.springframework.util.StringUtils;, +, +, +			if (!this.dependencies.isEmpty()) {, +				builder.setParameter("dependencies", StringUtils.collectionToCommaDelimitedString(this.dependencies));, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/AbstractHttpClientMockTests.java, +		mockSuccessfulMetadataGet("2.0.0");, +		mockHttpEntity(response, content, "application/vnd.initializr.v2+json");, +		given(this.http.execute(argThat(getForJsonMetadata()))).willReturn(response);, +		given(this.http.execute(argThat(getForNonJsonMetadata()))).willReturn(response);]