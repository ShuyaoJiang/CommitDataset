[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java, + * Copyright 2012-2017 the original author or authors., +		boolean match = result != null && (boolean) result;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java, + * Copyright 2012-2017 the original author or authors., +		boolean match = result != null && (boolean) result;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpressionTests.java, + * Copyright 2012-2017 the original author or authors., + * @author Stephane Nicoll, +	public void expressionIsTrue() {, +	public void expressionIsFalse() {, +	@Test, +	public void expressionIsNull() {, +		this.context.register(NullConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.containsBean("foo")).isFalse();, +	}, +, +	@Configuration, +	@ConditionalOnExpression("true ? null : false"), +	protected static class NullConfiguration {, +, +		@Bean, +		public String foo() {, +			return "foo";, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java, + * Copyright 2012-2017 the original author or authors., +		boolean match = result != null && (boolean) result;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpressionTests.java, + * Copyright 2012-2017 the original author or authors., + * @author Stephane Nicoll, +	public void expressionIsTrue() {, +	public void expressionIsFalse() {, +	@Test, +	public void expressionIsNull() {, +		this.context.register(NullConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.containsBean("foo")).isFalse();, +	}, +, +	@Configuration, +	@ConditionalOnExpression("true ? null : false"), +	protected static class NullConfiguration {, +, +		@Bean, +		public String foo() {, +			return "foo";, +		}, +, +	}, +, +++ /dev/null]