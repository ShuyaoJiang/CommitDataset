[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +					.commaDelimitedListToStringArray(this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +					.commaDelimitedListToStringArray(this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken user = createAuthenticationToken("ROLE_USER");, +	private UsernamePasswordAuthenticationToken admin = createAuthenticationToken("ROLE_ADMIN");, +, +	private UsernamePasswordAuthenticationToken hero = createAuthenticationToken("ROLE_HERO");, +, +	private UsernamePasswordAuthenticationToken createAuthenticationToken(String authority) {, +		return new UsernamePasswordAuthenticationToken(, +				AuthorityUtils.commaSeparatedStringToAuthorityList(authority));, +	}, +		Object result = this.mvc.invoke(this.hero);, +	public void secureCustomRoleNoAccess() {, +		this.environment.getPropertySources().addLast(SECURITY_ROLES);, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(this.admin);, +		assertThat(result instanceof Health).isTrue();, +		assertThat(((Health) result).getStatus() == Status.UP).isTrue();, +		assertThat(((Health) result).getDetails().get("foo")).isNull();, +	}, +, +	@Test]