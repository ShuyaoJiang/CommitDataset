[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +, +{dc-spring-boot}/builder/SpringApplicationBuilder.{dc-ext}[`SpringApplicationBuilder`, +Javadoc] for full details., +TIP: It is often desirable to call `setWebEnvironment(false)` when using, +`SpringApplication` within a JUnit test., +If you want access to the raw command line arguments, or you need to run some specific, +code once the `SpringApplication` has started you can implement the `CommandLineRunner`, +property descriptors, just like in Spring MVC. They are mandatory for immutable types or, +those that are directly coercible from `String`. As long as they are initialized, maps,, +collections, and arrays need a getter but not necessarily a setter since they can be, +mutated by the binder. If there is a setter, Maps, collections, and arrays can be created., +Maps and collections can be expanded with only a getter, whereas arrays require a setter., +Nested POJO properties can also be created (so a setter is not mandatory) if they have a, +default constructor, or a constructor accepting a single value that can be coerced from, +String. Some people use Project Lombok to add getters and setters automatically., +any beans annotated with `@ConfigurationProperties` will be automatically configured from, +the `Environment` properties. This style of configuration works particularly well with the, +`SpringApplication` external YAML configuration:, +|Writes `spring.log` to the specified directory. Names can be an exact location or, +relative to the current directory., +`Environment` (so for example in `application.properties`) using, +'`+logging.level.*=LEVEL+`' where '`LEVEL`' is one of TRACE, DEBUG, INFO, WARN, ERROR,, +FATAL, OFF. Example `application.properties`:, +, +In addition to the '`standard`' static resource locations above, a special case is made, +for http://www.webjars.org/[Webjars content]. Any resources with a path in `+/webjars/**+`, +will be served from jar files if they are packaged in the Webjars format., +If you're affected by this problem you can reorder the classpath in the IDE to place the, +module's classes and resources first. Alternatively, you can configure the template prefix, +to search every templates directory on the classpath: `classpath*:/templates/`., +Spring Boot provides an `/error` mapping by default that handles all errors in a sensible, +way, and it is registered as a '`global`' error page in the servlet container. For machine, +clients it will produce a JSON response with details of the error, the HTTP status and the, +exception message. For browser clients there is a '`whitelabel`' error view that renders, +the same data in HTML format (to customize it just add a `View` that resolves to, +'`error`'). To replace the default behaviour completely you can implement, +`ErrorController` and register a bean definition of that type, or simply add a bean of, +type `ErrorAttributes` to use the existing mechanism but replace the contents., +, +, +When deployed to a servlet container, a Spring Boot uses its error page filter to forward, +a request with an error status to the appropriate error page. The request can only be, +forwarded to the correct error page if the response has not already been committed. By, +default, WebSphere Application Server 8.0 and later commits the response upon successful, +completion of a servlet's service method. You should disable this behaviour by setting, +`com.ibm.ws.webcontainer.invokeFlushAfterService` to `false`, +`LinkDiscoverer` and an `ObjectMapper` configured to correctly marshal responses into the, +desired representation. The `ObjectMapper` will be customized based on the, +available implementations instead of Spring MVC. Jersey 1.x and Apache Celtix work quite, +well out of the box if you just register their `Servlet` or `Filter` as a `@Bean` in your, +application context. Jersey 2.x has some native Spring support so we also provide, +auto-configuration support for it in Spring Boot together with a starter., +you can see how to set things up. There is also a, +{github-code}/spring-boot-samples/spring-boot-sample-jersey1[Jersey 1.x sample]. Note that, +in the Jersey 1.x sample that the spring-boot maven plugin has been configured to unpack, +some Jersey jars so they can be scanned by the JAX-RS implementation (because the sample, +asks for them to be scanned in its `Filter` registration). You may need to do the same if, +any of your JAX-RS resources are packages as nested jars., +By default, if the context contains only a single Servlet it will be mapped to `/`. In the, +case of multiple Servlet beans the bean name will be used as a path prefix. Filters will, +map to `+/*+`., +Under the hood Spring Boot uses a new type of `ApplicationContext` for embedded servlet, +container support.  The `EmbeddedWebApplicationContext` is a special type of, +`WebApplicationContext` that bootstraps itself by searching for a single, +If you need to configure your embdedded servlet container programmatically you can, +register a Spring bean that implements the `EmbeddedServletContainerCustomizer` interface., +There is a {github-code}/spring-boot-samples/spring-boot-sample-web-jsp[JSP sample] so you, +can see how to set things up., +You can change the password by providing a `security.user.password`. This and other useful, +properties are externalized via, +TIP: The '`How-to`' section includes a _<<howto.adoc#howto-database-initialization,, +section on how to initialize a database>>_, +http://hsqldb.org/[HSQL] and http://db.apache.org/derby/[Derby] databases. You don't need, +to provide any connection URLs, simply include a build dependency to the embedded database, +that you want to use., +Production database connections can also be auto-configured using a pooling `DataSource`., +Here's the algorithm for choosing a specific implementation:, +`+spring.datasource.*+`. For example, you might declare the following section in, +`application.properties`:, +for more of the supported options. Note also that you can configure any of the, +`DataSource` implementation specific properties via `+spring.datasource.*+`: refer to the, +documentation of the connection pool implementation you are using for more details., +Spring Boot this file is not necessary and instead '`Entity Scanning`' is used. By default, +all packages below your main configuration class (the one annotated with, +TIP: You can customize entity scanning locations using the `@EntityScan` annotation. See, +the _<<howto.adoc#howto-separate-entity-definitions-from-spring-configuration>>_ how-to., +, +interface might declare a `findAllByState(String state)` method to find all cities in a, +given state., +{spring-data-commons-javadoc}/repository/CrudRepository.html[`CrudRepository`] interfaces., +If you are using auto-configuration, repositories will be searched from the package, +containing your main configuration class (the one annotated with, +`@EnableAutoConfiguration` or `@SpringBootApplication`) down., +By default the DDL execution (or validation) is deferred until the `ApplicationContext`, +has started. There is also a `spring.jpa.generate-ddl` flag, but it is not used if, +Hibernate autoconfig is active because the `ddl-auto` settings are more fine-grained., +Spring Boot provides auto-configuration for Redis, MongoDB, Elasticsearch, and Solr; you, +can make use of the other projects, but you will need to configure them yourself. Refer to, +the appropriate reference documentation at]