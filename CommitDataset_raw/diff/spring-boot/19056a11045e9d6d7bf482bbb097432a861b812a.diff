[+++ b/spring-boot/src/main/java/org/springframework/boot/context/ConfigurationWarningsApplicationContextInitializer.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +, +		return new Check[] { new ComponentScanPackageCheck() };, +	 * {@link Check} for {@code @ComponentScan} on problematic package., +	protected static class ComponentScanPackageCheck implements Check {, +, +		private static final Set<String> PROBLEM_PACKAGES;, +, +		static {, +			Set<String> pacakges = new HashSet<String>();, +			pacakges.add("org.springframework");, +			pacakges.add("org");, +			PROBLEM_PACKAGES = Collections.unmodifiableSet(pacakges);, +		}, +			Set<String> scannedPackages = getComponentScanningPackages(registry);, +			List<String> problematicPackages = getProblematicPackages(scannedPackages);, +			if (problematicPackages.isEmpty()) {, +			return "Your ApplicationContext is unlikely to ", +					+ "start due to a @ComponentScan of ", +					+ StringUtils.collectionToDelimitedString(problematicPackages, ", "), +					+ ".";, +		}, +		protected Set<String> getComponentScanningPackages(, +			Set<String> packages = new LinkedHashSet<String>();, +					addComponentScanningPackages(packages,, +							annotatedDefinition.getMetadata());, +			return packages;, +		private void addComponentScanningPackages(Set<String> packages,, +				AnnotationMetadata metadata) {, +			if (attributes != null) {, +				addPackages(packages, attributes.getStringArray("value"));, +				addPackages(packages, attributes.getStringArray("basePackages"));, +				addClasses(packages, attributes.getStringArray("basePackageClasses"));, +				if (packages.isEmpty()) {, +					packages.add(ClassUtils.getPackageName(metadata.getClassName()));, +				}, +			}, +		}, +, +		private void addPackages(Set<String> packages, String[] values) {, +			if (values != null) {, +				for (String value : values) {, +					packages.add(value);, +				}, +			}, +		}, +, +		private void addClasses(Set<String> packages, String[] values) {, +			if (values != null) {, +				for (String value : values) {, +					packages.add(ClassUtils.getPackageName(value));, +				}, +			}, +		}, +, +		private List<String> getProblematicPackages(Set<String> scannedPackages) {, +			List<String> problematicPackages = new ArrayList<String>();, +			for (String scannedPackage : scannedPackages) {, +				if (isProblematicPackage(scannedPackage)) {, +					problematicPackages.add(getDisplayName(scannedPackage));, +				}, +			}, +			return problematicPackages;, +		}, +, +		private boolean isProblematicPackage(String scannedPackage) {, +			if (scannedPackage == null || scannedPackage.length() == 0) {, +			return PROBLEM_PACKAGES.contains(scannedPackage);, +		private String getDisplayName(String scannedPackage) {, +			if (scannedPackage == null || scannedPackage.length() == 0) {, +				return "the default package";, +			}, +			return "'" + scannedPackage + "'";, +++ b/spring-boot/src/main/java/org/springframework/boot/context/ConfigurationWarningsApplicationContextInitializer.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +, +		return new Check[] { new ComponentScanPackageCheck() };, +	 * {@link Check} for {@code @ComponentScan} on problematic package., +	protected static class ComponentScanPackageCheck implements Check {, +, +		private static final Set<String> PROBLEM_PACKAGES;, +, +		static {, +			Set<String> pacakges = new HashSet<String>();, +			pacakges.add("org.springframework");, +			pacakges.add("org");, +			PROBLEM_PACKAGES = Collections.unmodifiableSet(pacakges);, +		}, +			Set<String> scannedPackages = getComponentScanningPackages(registry);]