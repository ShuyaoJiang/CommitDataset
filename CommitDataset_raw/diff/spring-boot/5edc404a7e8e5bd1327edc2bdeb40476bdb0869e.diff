[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + * If Spring Messaging is on the classpath and a {@link MessageChannel} called, + * "metricsChannel" is also available, all metric update events are published additionally, + * as messages on that channel. Additional analysis or actions can be taken by clients, + * subscribing to that channel., + * In addition if Dropwizard's metrics library is on the classpath a, + * {@link MetricRegistry} will be created and the default counter and gauge services will, + * switch to using it instead of the default repository. Users can create "special", + * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g., + * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>, + * or <code>CounterService</code>., + * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable, + * this by setting <code>spring.metrics.export.enabled=false</code>)., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + * If Spring Messaging is on the classpath and a {@link MessageChannel} called, + * "metricsChannel" is also available, all metric update events are published additionally, + * as messages on that channel. Additional analysis or actions can be taken by clients, + * subscribing to that channel., + * In addition if Dropwizard's metrics library is on the classpath a, + * {@link MetricRegistry} will be created and the default counter and gauge services will, + * switch to using it instead of the default repository. Users can create "special", + * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g., + * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>, + * or <code>CounterService</code>., + * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable, + * this by setting <code>spring.metrics.export.enabled=false</code>)., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + * If Spring Messaging is on the classpath and a {@link MessageChannel} called, + * "metricsChannel" is also available, all metric update events are published additionally, + * as messages on that channel. Additional analysis or actions can be taken by clients, + * subscribing to that channel., + * In addition if Dropwizard's metrics library is on the classpath a, + * {@link MetricRegistry} will be created and the default counter and gauge services will, + * switch to using it instead of the default repository. Users can create "special", + * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g., + * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>, + * or <code>CounterService</code>., + * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable, + * this by setting <code>spring.metrics.export.enabled=false</code>)., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +	private class NamePatternMapFilter extends NamePatternFilter<Map<String, ?>> {, +		public NamePatternMapFilter(Map<String, ?> source) {, +		protected void getNames(Map<String, ?> source, NameCallback callback) {, +		protected Object getValue(Map<String, ?> source, String name) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, + * If Spring Messaging is on the classpath and a {@link MessageChannel} called, + * "metricsChannel" is also available, all metric update events are published additionally, + * as messages on that channel. Additional analysis or actions can be taken by clients, + * subscribing to that channel., + * In addition if Dropwizard's metrics library is on the classpath a, + * {@link MetricRegistry} will be created and the default counter and gauge services will, + * switch to using it instead of the default repository. Users can create "special", + * Dropwizard metrics by prefixing their metric names with the appropriate type (e.g., + * "histogram.*", "meter.*". "timer.*") and sending them to the <code>GaugeService</code>, + * or <code>CounterService</code>., + * application context via a {@link MetricCopyExporter} firing every 5 seconds (disable, + * this by setting <code>spring.metrics.export.enabled=false</code>)., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsDropwizardAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +	private class NamePatternMapFilter extends NamePatternFilter<Map<String, ?>> {, +		public NamePatternMapFilter(Map<String, ?> source) {, +		protected void getNames(Map<String, ?> source, NameCallback callback) {, +		protected Object getValue(Map<String, ?> source, String name) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.metrics.dropwizard;, +, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.TimeUnit;, +, +import org.springframework.boot.actuate.metrics.CounterService;, +import org.springframework.boot.actuate.metrics.GaugeService;, +, +import com.codahale.metrics.Counter;, +import com.codahale.metrics.Gauge;, +import com.codahale.metrics.Histogram;, +import com.codahale.metrics.Meter;, +import com.codahale.metrics.MetricRegistry;, +import com.codahale.metrics.Timer;]