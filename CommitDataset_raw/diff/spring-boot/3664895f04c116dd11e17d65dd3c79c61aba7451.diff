[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +| ValueProvider[], +| A list of providers as defined by the `ValueProvider` object (see below). Each entry defines, +==== Value hint, +==== Value provider, +|Permit any additional value to be provided., +|Auto-complete the available Spring profile names in the project., +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +| ValueProvider[], +| A list of providers as defined by the `ValueProvider` object (see below). Each entry defines, +==== Value hint, +==== Value provider, +|Permit any additional value to be provided., +|Auto-complete the available Spring profile names in the project., +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemHint.java, +	private final List<ValueProvider> providers;, +	public ItemHint(String name, List<ValueHint> values, List<ValueProvider> providers) {, +		this.providers = (providers != null ? new ArrayList<ValueProvider>(providers), +				: new ArrayList<ValueProvider>());, +	public List<ValueProvider> getProviders() {, +				Collections.<ValueProvider> emptyList());, +	public static class ValueProvider {, +		public ValueProvider(String name, Map<String, Object> parameters) {, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +| ValueProvider[], +| A list of providers as defined by the `ValueProvider` object (see below). Each entry defines, +==== Value hint, +==== Value provider, +|Permit any additional value to be provided., +|Auto-complete the available Spring profile names in the project., +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemHint.java, +	private final List<ValueProvider> providers;, +	public ItemHint(String name, List<ValueHint> values, List<ValueProvider> providers) {, +		this.providers = (providers != null ? new ArrayList<ValueProvider>(providers), +				: new ArrayList<ValueProvider>());, +	public List<ValueProvider> getProviders() {, +				Collections.<ValueProvider> emptyList());, +	public static class ValueProvider {, +		public ValueProvider(String name, Map<String, Object> parameters) {, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java, +			for (ItemHint.ValueProvider valueProvider : hint.getProviders()) {, +				JSONObject valueProviderObject = new JSONOrderedObject();, +				valueProviderObject.put("name", valueProvider.getName());, +				if (valueProvider.getParameters() != null, +						&& !valueProvider.getParameters().isEmpty()) {, +					for (Map.Entry<String, Object> entry : valueProvider.getParameters(), +					valueProviderObject.put("parameters", parametersObject);, +				providersArray.put(valueProviderObject);, +		List<ItemHint.ValueProvider> providers = new ArrayList<ItemHint.ValueProvider>();, +				providers.add(toValueProvider((JSONObject) providersObject.get(i)));, +	private ItemHint.ValueProvider toValueProvider(JSONObject object) {, +		return new ItemHint.ValueProvider(name, parameters);, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +| ValueProvider[], +| A list of providers as defined by the `ValueProvider` object (see below). Each entry defines, +==== Value hint, +==== Value provider, +|Permit any additional value to be provided., +|Auto-complete the available Spring profile names in the project., +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemHint.java, +	private final List<ValueProvider> providers;, +	public ItemHint(String name, List<ValueHint> values, List<ValueProvider> providers) {, +		this.providers = (providers != null ? new ArrayList<ValueProvider>(providers), +				: new ArrayList<ValueProvider>());, +	public List<ValueProvider> getProviders() {, +				Collections.<ValueProvider> emptyList());, +	public static class ValueProvider {, +		public ValueProvider(String name, Map<String, Object> parameters) {, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java, +			for (ItemHint.ValueProvider valueProvider : hint.getProviders()) {, +				JSONObject valueProviderObject = new JSONOrderedObject();, +				valueProviderObject.put("name", valueProvider.getName());, +				if (valueProvider.getParameters() != null, +						&& !valueProvider.getParameters().isEmpty()) {, +					for (Map.Entry<String, Object> entry : valueProvider.getParameters(), +					valueProviderObject.put("parameters", parametersObject);, +				providersArray.put(valueProviderObject);, +		List<ItemHint.ValueProvider> providers = new ArrayList<ItemHint.ValueProvider>();, +				providers.add(toValueProvider((JSONObject) providersObject.get(i)));, +	private ItemHint.ValueProvider toValueProvider(JSONObject object) {, +		return new ItemHint.ValueProvider(name, parameters);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +						new ItemHint.ValueProvider("first", Collections, +						new ItemHint.ValueProvider("second", null))));, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +| ValueProvider[], +| A list of providers as defined by the `ValueProvider` object (see below). Each entry defines, +==== Value hint, +==== Value provider, +|Permit any additional value to be provided., +|Auto-complete the available Spring profile names in the project., +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemHint.java, +	private final List<ValueProvider> providers;, +	public ItemHint(String name, List<ValueHint> values, List<ValueProvider> providers) {, +		this.providers = (providers != null ? new ArrayList<ValueProvider>(providers), +				: new ArrayList<ValueProvider>());, +	public List<ValueProvider> getProviders() {, +				Collections.<ValueProvider> emptyList());, +	public static class ValueProvider {, +		public ValueProvider(String name, Map<String, Object> parameters) {]