[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. Properties from `SPRING_APPLICATION_JSON` (inline JSON embedded in an environment variable or system property), +[TIP], +====, +, +The `SPRING_APPLICATION_JSON` properties can be supplied on the, +command line with an environment variable. For example in a, +UN{asterisk}X shell:, +, +----, +$ SPRING_APPLICATION_JSON='{"foo":{"bar":"spam"}}' java -jar myapp.jar, +----, +, +In this example you will end up with `foo.bar=spam` in the Spring, +`Environment`. You can also supply the JSON as, +`spring.application.json` in a System variable:, +, +----, +$ java -Dspring.application.json='{"foo":"bar"}' -jar myapp.jar, +----, +, +or command line argument:, +, +----, +$ java -jar myapp.jar --spring.application.json='{"foo":"bar"}', +----, +, +or as a JNDI variable `java:comp/env/spring.application.json`., +====, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. Properties from `SPRING_APPLICATION_JSON` (inline JSON embedded in an environment variable or system property), +[TIP], +====, +, +The `SPRING_APPLICATION_JSON` properties can be supplied on the, +command line with an environment variable. For example in a, +UN{asterisk}X shell:, +, +----, +$ SPRING_APPLICATION_JSON='{"foo":{"bar":"spam"}}' java -jar myapp.jar, +----, +, +In this example you will end up with `foo.bar=spam` in the Spring, +`Environment`. You can also supply the JSON as, +`spring.application.json` in a System variable:, +, +----, +$ java -Dspring.application.json='{"foo":"bar"}' -jar myapp.jar, +----, +, +or command line argument:, +, +----, +$ java -jar myapp.jar --spring.application.json='{"foo":"bar"}', +----, +, +or as a JNDI variable `java:comp/env/spring.application.json`., +====, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.env;, +, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.json.JsonParser;, +import org.springframework.boot.json.JsonParserFactory;, +import org.springframework.core.Ordered;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.support.StandardServletEnvironment;, +, +/**, + * An {@link EnvironmentPostProcessor} that parses JSON from, + * <code>spring.application.json</code> or equivalently, + * {@link SpringApplicationJsonEnvironmentPostProcessor} and adds it as a map property]