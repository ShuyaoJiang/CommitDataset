[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.HashSet;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +		final AutoConfigurationClasses classes = new AutoConfigurationClasses(, +				this.metadataReaderFactory, classNames);, +, +		List<String> orderedClassNames = new ArrayList<String>(classNames);, +		Collections.sort(orderedClassNames, new Comparator<String>() {, +			@Override, +			public int compare(String o1, String o2) {, +				int i1 = classes.get(o1).getOrder();, +				int i2 = classes.get(o2).getOrder();, +				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;, +		});, +, +		// Then respect @AutoConfigureBefore @AutoConfigureAfter, +		orderedClassNames = sortByAnnotation(classes, orderedClassNames);, +, +	private List<String> sortByAnnotation(AutoConfigurationClasses classes,, +			List<String> classNames) {, +		List<String> tosort = new ArrayList<String>(classNames);, +		Set<String> sorted = new LinkedHashSet<String>();, +		Set<String> processing = new LinkedHashSet<String>();, +			doSortByAfterAnnotation(classes, tosort, sorted, processing, null);, +		}, +		return new ArrayList<String>(sorted);, +	private void doSortByAfterAnnotation(AutoConfigurationClasses classes,, +			List<String> tosort, Set<String> sorted, Set<String> processing,, +			String current) {, +			current = tosort.remove(0);, +		for (String after : classes.getClassesRequestedAfter(current)) {, +					"AutoConfigure cycle detected between " + current + " and " + after);, +			if (!sorted.contains(after) && tosort.contains(after)) {, +				doSortByAfterAnnotation(classes, tosort, sorted, processing, after);, +	private static class AutoConfigurationClasses {, +		private final Map<String, AutoConfigurationClass> classes = new HashMap<String, AutoConfigurationClass>();, +		public AutoConfigurationClasses(MetadataReaderFactory metadataReaderFactory,, +				Collection<String> classNames) throws IOException {, +			for (String className : classNames) {, +				MetadataReader metadataReader = metadataReaderFactory, +				this.classes.put(className, new AutoConfigurationClass(metadataReader));, +			}, +		public AutoConfigurationClass get(String className) {, +			return this.classes.get(className);, +		}, +, +		public Set<String> getClassesRequestedAfter(String className) {, +			Set<String> rtn = new HashSet<String>();, +			rtn.addAll(get(className).getAfter());, +			for (Map.Entry<String, AutoConfigurationClass> entry : this.classes, +					.entrySet()) {, +				if (entry.getValue().getBefore().contains(className)) {, +					rtn.add(entry.getKey());, +				}, +			}, +			return rtn;, +		}, +	}, +, +	private static class AutoConfigurationClass {, +, +		private final AnnotationMetadata metadata;, +, +		public AutoConfigurationClass(MetadataReader metadataReader) {, +			this.metadata = metadataReader.getAnnotationMetadata();, +		}, +, +			Map<String, Object> orderedAnnotation = this.metadata, +					.getAnnotationAttributes(Order.class.getName());, +			return (orderedAnnotation == null ? Ordered.LOWEST_PRECEDENCE, +					: (Integer) orderedAnnotation.get("value"));, +		public Set<String> getBefore() {, +			return getAnnotationValue(AutoConfigureBefore.class);, +		public Set<String> getAfter() {, +			return getAnnotationValue(AutoConfigureAfter.class);, +		private Set<String> getAnnotationValue(Class<?> annotation) {, +			Map<String, Object> attributes = this.metadata.getAnnotationAttributes(, +					annotation.getName(), true);, +			if (attributes == null) {, +				return Collections.emptySet();, +			return new HashSet<String>(Arrays.asList((String[]) attributes.get("value")));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.HashSet;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +		final AutoConfigurationClasses classes = new AutoConfigurationClasses(, +				this.metadataReaderFactory, classNames);, +, +		List<String> orderedClassNames = new ArrayList<String>(classNames);, +		Collections.sort(orderedClassNames, new Comparator<String>() {, +			@Override, +			public int compare(String o1, String o2) {, +				int i1 = classes.get(o1).getOrder();, +				int i2 = classes.get(o2).getOrder();, +				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;]