[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java, +	private JarEntryData(JarEntryData master, JarFile source, AsciiBytes name) {, +		this.header = master.header;, +		this.extra = master.extra;, +		this.comment = master.comment;, +		this.localHeaderOffset = master.localHeaderOffset;, +		this.source = source;, +		this.name = name;, +	}, +, +	JarEntryData createFilteredCopy(JarFile jarFile, AsciiBytes name) {, +		return new JarEntryData(this, jarFile, name);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java, +	private JarEntryData(JarEntryData master, JarFile source, AsciiBytes name) {, +		this.header = master.header;, +		this.extra = master.extra;, +		this.comment = master.comment;, +		this.localHeaderOffset = master.localHeaderOffset;, +		this.source = source;, +		this.name = name;, +	}, +, +	JarEntryData createFilteredCopy(JarFile jarFile, AsciiBytes name) {, +		return new JarEntryData(this, jarFile, name);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private final RandomAccessData data;, +	private final List<JarEntryData> entries;, +	private boolean signed;, +, +	private JarFile(RandomAccessDataFile rootFile, String name, RandomAccessData data), +			throws IOException {, +		this.data = getArchiveData(endRecord, data);, +		this.entries = loadJarEntries(endRecord);, +	}, +, +	private JarFile(RandomAccessDataFile rootFile, String name, RandomAccessData data,, +			List<JarEntryData> entries, JarEntryFilter... filters) throws IOException {, +		super(rootFile.getFile());, +		this.rootFile = rootFile;, +		this.name = name;, +		this.data = data;, +		this.entries = filterEntries(entries, filters);, +	private List<JarEntryData> loadJarEntries(CentralDirectoryEndRecord endRecord), +			throws IOException {, +		List<JarEntryData> entries = new ArrayList<JarEntryData>(numberOfRecords);, +				entries.add(entry);, +				processEntry(entry);, +		return entries;, +	private List<JarEntryData> filterEntries(List<JarEntryData> entries,, +			JarEntryFilter[] filters) {, +		List<JarEntryData> filteredEntries = new ArrayList<JarEntryData>(entries.size());, +		for (JarEntryData entry : entries) {, +				JarEntryData filteredCopy = entry.createFilteredCopy(this, name);, +				filteredEntries.add(filteredCopy);, +				processEntry(filteredCopy);, +			}, +		}, +		return filteredEntries;, +	}, +, +	private void processEntry(JarEntryData entry) {, +		AsciiBytes name = entry.getName();, +		JarEntryFilter filter = new JarEntryFilter() {, +				this.entries, filter);, +		return new JarFile(this.rootFile, getName(), this.data, this.entries, filters);, +		return (int) this.data.getSize();]