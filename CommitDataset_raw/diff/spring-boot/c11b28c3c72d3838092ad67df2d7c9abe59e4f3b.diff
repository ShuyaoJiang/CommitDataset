[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +	private boolean dispatchOptionsRequest = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +	private boolean dispatchOptionsRequest = true;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfigurationTests.java, + * @author Andy Wilkinson, +	public void dispatcherServletDefaultConfig() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		this.context.refresh();, +		DispatcherServlet bean = this.context.getBean(DispatcherServlet.class);, +		assertThat(bean).extracting("throwExceptionIfNoHandlerFound"), +				.containsExactly(false);, +		assertThat(bean).extracting("dispatchOptionsRequest").containsExactly(true);, +		assertThat(bean).extracting("dispatchTraceRequest").containsExactly(false);, +		assertThat(new DirectFieldAccessor(, +				this.context.getBean("dispatcherServletRegistration")), +						.getPropertyValue("loadOnStartup")).isEqualTo(-1);, +	}, +, +	@Test, +	public void dispatcherServletCustomConfig() {, +				"spring.mvc.dispatch-options-request:false",, +		assertThat(bean).extracting("dispatchOptionsRequest").containsExactly(false);]