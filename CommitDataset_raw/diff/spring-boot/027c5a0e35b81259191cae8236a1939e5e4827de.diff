[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyDefinition.java, +import org.mockito.listeners.VerificationStartedEvent;, +import org.mockito.listeners.VerificationStartedListener;, +import org.springframework.test.util.AopTestUtils;, +		if (this.isProxyTargetAware()) {, +			settings.verificationStartedListeners(, +					new SpringAopBypassingVerificationStartedListener());, +		}, +	/**, +	 * A {@link VerificationStartedListener} that bypasses any proxy created by Spring AOP, +	 * when the verification of a spy starts., +	 */, +	private static final class SpringAopBypassingVerificationStartedListener, +			implements VerificationStartedListener {, +, +		@Override, +		public void onVerificationStarted(VerificationStartedEvent event) {, +			event.setMock(AopTestUtils.getUltimateTargetObject(event.getMock()));, +		}, +, +	}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyDefinition.java, +import org.mockito.listeners.VerificationStartedEvent;, +import org.mockito.listeners.VerificationStartedListener;, +import org.springframework.test.util.AopTestUtils;, +		if (this.isProxyTargetAware()) {, +			settings.verificationStartedListeners(, +					new SpringAopBypassingVerificationStartedListener());, +		}, +	/**, +	 * A {@link VerificationStartedListener} that bypasses any proxy created by Spring AOP, +	 * when the verification of a spy starts., +	 */, +	private static final class SpringAopBypassingVerificationStartedListener, +			implements VerificationStartedListener {, +, +		@Override, +		public void onVerificationStarted(VerificationStartedEvent event) {, +			event.setMock(AopTestUtils.getUltimateTargetObject(event.getMock()));, +		}, +, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyDefinition.java, +import org.mockito.listeners.VerificationStartedEvent;, +import org.mockito.listeners.VerificationStartedListener;, +import org.springframework.test.util.AopTestUtils;, +		if (this.isProxyTargetAware()) {, +			settings.verificationStartedListeners(, +					new SpringAopBypassingVerificationStartedListener());, +		}, +	/**, +	 * A {@link VerificationStartedListener} that bypasses any proxy created by Spring AOP, +	 * when the verification of a spy starts., +	 */, +	private static final class SpringAopBypassingVerificationStartedListener, +			implements VerificationStartedListener {, +, +		@Override, +		public void onVerificationStarted(VerificationStartedEvent event) {, +			event.setMock(AopTestUtils.getUltimateTargetObject(event.getMock()));, +		}, +, +	}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanOnTestFieldForMultipleExistingBeansWithOnePrimaryIntegrationTests.java, +import org.mockito.Mockito;, +		assertThat(Mockito.mockingDetails(this.spy).getMockCreationSettings(), +				.getMockName().toString()).isEqualTo("two");, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyDefinition.java, +import org.mockito.listeners.VerificationStartedEvent;, +import org.mockito.listeners.VerificationStartedListener;, +import org.springframework.test.util.AopTestUtils;, +		if (this.isProxyTargetAware()) {, +			settings.verificationStartedListeners(, +					new SpringAopBypassingVerificationStartedListener());, +		}, +	/**, +	 * A {@link VerificationStartedListener} that bypasses any proxy created by Spring AOP, +	 * when the verification of a spy starts., +	 */, +	private static final class SpringAopBypassingVerificationStartedListener, +			implements VerificationStartedListener {, +, +		@Override, +		public void onVerificationStarted(VerificationStartedEvent event) {]