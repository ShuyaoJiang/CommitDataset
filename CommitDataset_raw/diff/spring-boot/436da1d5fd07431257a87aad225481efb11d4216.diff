[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import de.flapdoodle.embed.mongo.config.Storage;, + * @author Yogesh Lonkar, +			builder.replication(, +					new Storage(this.embeddedProperties.getStorage().getDatabaseDir(),, +							this.embeddedProperties.getStorage().getReplSetName(),, +							this.embeddedProperties.getStorage().getOplogSize() != null, +									? this.embeddedProperties.getStorage().getOplogSize(), +									: 0));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import de.flapdoodle.embed.mongo.config.Storage;, + * @author Yogesh Lonkar, +			builder.replication(, +					new Storage(this.embeddedProperties.getStorage().getDatabaseDir(),, +							this.embeddedProperties.getStorage().getReplSetName(),, +							this.embeddedProperties.getStorage().getOplogSize() != null, +									? this.embeddedProperties.getStorage().getOplogSize(), +									: 0));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Yogesh Lonkar, +		return this.storage;, +	public static class Storage {, +		/**, +		 * Maximum size of the oplog in megabytes., +		 */, +		private Integer oplogSize;, +, +		/**, +		 * Name of the replica set., +		 */, +, +		/**, +		 * Directory used for data storage., +		 */, +		public Integer getOplogSize() {, +			return this.oplogSize;, +		public void setOplogSize(Integer oplogSize) {, +			return this.replSetName;, +			return this.databaseDir;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import de.flapdoodle.embed.mongo.config.Storage;, + * @author Yogesh Lonkar, +			builder.replication(, +					new Storage(this.embeddedProperties.getStorage().getDatabaseDir(),, +							this.embeddedProperties.getStorage().getReplSetName(),, +							this.embeddedProperties.getStorage().getOplogSize() != null, +									? this.embeddedProperties.getStorage().getOplogSize(), +									: 0));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Yogesh Lonkar, +		return this.storage;, +	public static class Storage {, +		/**, +		 * Maximum size of the oplog in megabytes., +		 */, +		private Integer oplogSize;, +, +		/**, +		 * Name of the replica set., +		 */, +, +		/**, +		 * Directory used for data storage., +		 */, +		public Integer getOplogSize() {, +			return this.oplogSize;, +		public void setOplogSize(Integer oplogSize) {, +			return this.replSetName;, +			return this.databaseDir;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfigurationTests.java, +import java.io.File;, +import de.flapdoodle.embed.mongo.config.Storage;, +import org.springframework.util.FileSystemUtils;, +	public void defaultStorageConfiguration() {, +		EnvironmentTestUtils.addEnvironment(this.context, "spring.data.mongodb.port=0");, +		this.context.register(EmbeddedMongoAutoConfiguration.class,, +				MongoClientConfiguration.class,, +		Storage replication = this.context.getBean(IMongodConfig.class).replication();, +		assertThat(replication.getOplogSize()).isEqualTo(0);, +		assertThat(replication.getDatabaseDir()).isNull();, +		assertThat(replication.getReplSetName()).isNull();, +, +	@Test, +	public void mongoWritesToCustomDatabaseDir() {, +		File customDatabaseDir = new File("target/custom-database-dir");, +		FileSystemUtils.deleteRecursively(customDatabaseDir);, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "spring.data.mongodb.port=0",, +				"spring.mongodb.embedded.storage.databaseDir=", +						+ customDatabaseDir.getPath());, +		this.context.register(EmbeddedMongoAutoConfiguration.class,, +				MongoClientConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(customDatabaseDir).isDirectory();, +		assertThat(customDatabaseDir.listFiles()).isNotEmpty();, +, +	@Test]