[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +import org.eclipse.aether.repository.ProxySelector;, +	private ProxySelector proxySelector = new JreProxySelector();, +, +		session.setProxySelector(this.proxySelector);, +		this.repositories = new ArrayList<RemoteRepository>();, +		for (RemoteRepository repository : remoteRepositories) {, +			addRepository(repository);, +		}, +		RemoteRepository repository = builder.build();, +		addRepository(repository);, +	}, +	protected void addRepository(RemoteRepository repository) {, +		if (repository.getProxy() == null) {, +			RemoteRepository.Builder builder = new RemoteRepository.Builder(repository);, +			builder.setProxy(this.proxySelector.getProxy(repository));, +			repository = builder.build();, +		}, +		this.repositories.add(repository);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +import org.eclipse.aether.repository.ProxySelector;, +	private ProxySelector proxySelector = new JreProxySelector();, +, +		session.setProxySelector(this.proxySelector);, +		this.repositories = new ArrayList<RemoteRepository>();, +		for (RemoteRepository repository : remoteRepositories) {, +			addRepository(repository);, +		}, +		RemoteRepository repository = builder.build();, +		addRepository(repository);, +	}, +	protected void addRepository(RemoteRepository repository) {, +		if (repository.getProxy() == null) {, +			RemoteRepository.Builder builder = new RemoteRepository.Builder(repository);, +			builder.setProxy(this.proxySelector.getProxy(repository));, +			repository = builder.build();, +		}, +		this.repositories.add(repository);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/JreProxySelector.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler.grape;, +, +import java.net.Authenticator;, +import java.net.InetSocketAddress;, +import java.net.PasswordAuthentication;, +import java.net.SocketAddress;, +import java.net.URI;, +import java.net.URL;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +, +import org.eclipse.aether.repository.Authentication;, +import org.eclipse.aether.repository.AuthenticationContext;, +import org.eclipse.aether.repository.AuthenticationDigest;, +import org.eclipse.aether.repository.Proxy;, +import org.eclipse.aether.repository.ProxySelector;, +import org.eclipse.aether.repository.RemoteRepository;, +, +/**, + * (Copied from aether source code - not available yet in Maven repo.), + * , + * @author dsyer, + */, +public final class JreProxySelector implements ProxySelector {, +, +	/**, +	 * Creates a new proxy selector that delegates to, +	 * {@link java.net.ProxySelector#getDefault()}., +	 */, +	public JreProxySelector() {, +	}, +, +	public Proxy getProxy(RemoteRepository repository) {, +		List<java.net.Proxy> proxies = null;, +		try {, +			URI uri = new URI(repository.getUrl()).parseServerAuthority();, +			proxies = java.net.ProxySelector.getDefault().select(uri);, +		}, +		catch (Exception e) {, +			// URL invalid or not accepted by selector or no selector at all, simply use, +			// no proxy]