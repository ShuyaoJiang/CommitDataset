[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, + * @author Andy Wilkinson, +			for (Annotation annotation : AnnotationUtils.getAnnotations(source)) {, +					annotation.annotationType().getAnnotation(PropertyMapping.class);, +					PropertyMapping typeMapping = annotation.annotationType(), +							.getAnnotation(PropertyMapping.class);, +					collectProperties(annotation.annotationType(), properties);, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, + * @author Andy Wilkinson, +			for (Annotation annotation : AnnotationUtils.getAnnotations(source)) {, +					annotation.annotationType().getAnnotation(PropertyMapping.class);, +					PropertyMapping typeMapping = annotation.annotationType(), +							.getAnnotation(PropertyMapping.class);, +					collectProperties(annotation.annotationType(), properties);, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySourceTests.java, + * @author Andy Wilkinson, +	@Test, +	public void propertiesFromMetaAnnotationsAreMapped() throws Exception {, +		AnnotationsPropertySource source = new AnnotationsPropertySource(, +				PropertiesFromSingleMetaAnnotation.class);, +		assertThat(source.getPropertyNames()).containsExactly("value");, +		assertThat(source.getProperty("value")).isEqualTo("foo");, +	}, +, +	@Test, +	public void propertiesFromMultipleMetaAnnotationsAreMappedUsingTheirOwnPropertyMapping(), +			throws Exception {, +		AnnotationsPropertySource source = new AnnotationsPropertySource(, +				PropertiesFromMultipleMetaAnnotations.class);, +		assertThat(source.getPropertyNames()).containsExactly("value", "test.value",, +				"test.example");, +		assertThat(source.getProperty("value")).isEqualTo("alpha");, +		assertThat(source.getProperty("test.value")).isEqualTo("bravo");, +		assertThat(source.getProperty("test.example")).isEqualTo("charlie");, +	}, +, +	@PropertiesFromSingleMetaAnnotationAnnotation, +	static class PropertiesFromSingleMetaAnnotation {, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@TypeLevelAnnotation("foo"), +	static @interface PropertiesFromSingleMetaAnnotationAnnotation {, +, +	}, +, +	@PropertiesFromMultipleMetaAnnotationsAnnotation, +	static class PropertiesFromMultipleMetaAnnotations {, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@TypeLevelAnnotation("alpha"), +	@TypeLevelWithPrefixAnnotation("bravo"), +	@TypeAndAttributeLevelWithPrefixAnnotation("charlie"), +	static @interface PropertiesFromMultipleMetaAnnotationsAnnotation {, +, +	}, +]