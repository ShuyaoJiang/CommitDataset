[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +	public int run(boolean waitForProcess, Collection<String> args,, +			Map<String, String> environmentVariables) throws IOException {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +	public int run(boolean waitForProcess, Collection<String> args,, +			Map<String, String> environmentVariables) throws IOException {, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-envargs/src/main/java/org/test/SampleApplication.java, +	private static void assertEnvValue(String envKey, String expectedValue) {, +			throw new IllegalStateException("env property [" + envKey + "] mismatch ", +					+ "(got [" + actual + "], expected [" + expectedValue + "]");, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +	public int run(boolean waitForProcess, Collection<String> args,, +			Map<String, String> environmentVariables) throws IOException {, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-envargs/src/main/java/org/test/SampleApplication.java, +	private static void assertEnvValue(String envKey, String expectedValue) {, +			throw new IllegalStateException("env property [" + envKey + "] mismatch ", +					+ "(got [" + actual + "], expected [" + expectedValue + "]");, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * List of Environment variables that should be associated with the forked process, +	 * used to run the application. NOTE: the use of Environment variables means that, +	 * processes will be started by forking a new JVM., +	 * @since 2.1, +	@Parameter, +		runWithForkedJvm(this.workingDirectory, args, determineEnvironmentVariables());, +	 * @param environmentVariables the environment variables, +	private Map<String, String> determineEnvironmentVariables() {, +		return envVariables.asMap();, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +	public int run(boolean waitForProcess, Collection<String> args,, +			Map<String, String> environmentVariables) throws IOException {, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-envargs/src/main/java/org/test/SampleApplication.java, +	private static void assertEnvValue(String envKey, String expectedValue) {, +			throw new IllegalStateException("env property [" + envKey + "] mismatch ", +					+ "(got [" + actual + "], expected [" + expectedValue + "]");, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * List of Environment variables that should be associated with the forked process, +	 * used to run the application. NOTE: the use of Environment variables means that, +	 * processes will be started by forking a new JVM., +	 * @since 2.1, +	@Parameter, +		runWithForkedJvm(this.workingDirectory, args, determineEnvironmentVariables());, +	 * @param environmentVariables the environment variables, +	private Map<String, String> determineEnvironmentVariables() {, +		return envVariables.asMap();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/EnvVariables.java, +	private final Map<String, String> variables;, +	EnvVariables(Map<String, String> variables) {, +		this.variables = parseEnvVariables(variables);, +	private static Map<String, String> parseEnvVariables(Map<String, String> args) {, +			if (e.getKey() != null) {, +	private static String getValue(String value) {, +		return (value != null ? value : "");, +	public Map<String, String> asMap() {, +		return Collections.unmodifiableMap(this.variables);, +	public String[] asArray() {, +		List<String> args = new ArrayList<>(this.variables.size());, +		for (Map.Entry<String, String> arg : this.variables.entrySet()) {, +			args.add(arg.getKey() + "=" + arg.getValue());, +		}, +		return args.toArray(new String[0]);, +	}, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +	public int run(boolean waitForProcess, Collection<String> args,, +			Map<String, String> environmentVariables) throws IOException {, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-envargs/src/main/java/org/test/SampleApplication.java, +	private static void assertEnvValue(String envKey, String expectedValue) {, +			throw new IllegalStateException("env property [" + envKey + "] mismatch ", +					+ "(got [" + actual + "], expected [" + expectedValue + "]");, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * List of Environment variables that should be associated with the forked process, +	 * used to run the application. NOTE: the use of Environment variables means that, +	 * processes will be started by forking a new JVM., +	 * @since 2.1, +	@Parameter, +		runWithForkedJvm(this.workingDirectory, args, determineEnvironmentVariables());, +	 * @param environmentVariables the environment variables, +	private Map<String, String> determineEnvironmentVariables() {, +		return envVariables.asMap();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/EnvVariables.java, +	private final Map<String, String> variables;, +	EnvVariables(Map<String, String> variables) {, +		this.variables = parseEnvVariables(variables);, +	private static Map<String, String> parseEnvVariables(Map<String, String> args) {, +			if (e.getKey() != null) {, +	private static String getValue(String value) {, +		return (value != null ? value : "");, +	public Map<String, String> asMap() {, +		return Collections.unmodifiableMap(this.variables);, +	public String[] asArray() {, +		List<String> args = new ArrayList<>(this.variables.size());, +		for (Map.Entry<String, String> arg : this.variables.entrySet()) {, +			args.add(arg.getKey() + "=" + arg.getValue());, +		}, +		return args.toArray(new String[0]);]