[+++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +|Shows full application health information when accessed securely or a simple '`status`', +message when accessed over an insecure HTTP connection., +|true, +=== Health information, +Health information can be used to check the status of your running application. It is, +often used by monitoring software to alert someone if a production system goes down., +The default information exposed by the `health` endpoint depends on how it is accessed., +For an insecure unauthenticated connection a simple '`status`' message is returned, for a, +secure or authenticated connection additional details are also displayed (see, +<<production-ready-health-access-restrictions>> for HTTP details)., +Heath information is collected from all, +{sc-spring-boot-actuator}/health/HealthIndicator.{sc-ext}[`HealthIndicator`] beans defined, +in your `ApplicationContext`. Spring Boot includes a number of auto-configured, +`HealthIndicators` and you can also write your own., +, +, +, +=== Security with HealthIndicators, +Information returned by `HealthIndicators` is often somewhat sensitive in nature. For, +example and you probably don't want to publish details of your database server to the, +world. For this reason, by default, only the health status is exposed on an insecure HTTP, +connection. If you are happy for complete heath information to always be exposed you can, +set `endpoints.health.sensitive` to `false`., +, +Heath responses are also cached to prevent "`denial of service`" attacks. Use the, +`endpoints.health.time-to-live` property if you want to change the default cache period, +of 1000 milliseconds., +, +, +, +==== Auto-configured HealthIndicators, +The following `HealthIndicators` are auto-configured by Spring Boot when appropriate:, +, +|===, +|Name |Description, +, +|{sc-spring-boot-actuator}/health/DiskSpaceHealthIndicator.{sc-ext}[`DiskSpaceHealthIndicator`], +|Checks for low disk space., +, +|{sc-spring-boot-actuator}/health/DataSourceHealthIndicator.{sc-ext}[`DataSourceHealthIndicator`], +|Checks that a connection to `DataSource` can be obtained., +, +|{sc-spring-boot-actuator}/health/MongoHealthIndicator.{sc-ext}[`MongoHealthIndicator`], +|Checks that a Mongo database is up., +, +|{sc-spring-boot-actuator}/health/RabbitHealthIndicator.{sc-ext}[`RabbitHealthIndicator`], +|Checks that a Rabbit server is up., +, +|{sc-spring-boot-actuator}/health/SolrHealthIndicator.{sc-ext}[`RedisHealthIndicator`], +|Checks that a Redis server is up., +, +|{sc-spring-boot-actuator}/health/SolrHealthIndicator.{sc-ext}[`SolrHealthIndicator`], +|Checks that a Solr server is up., +|===, +, +, +, +==== Writing custom HealthIndicators, +To provide custom health information you can register Spring beans that implement the, +You need to provide an implementation of the `health()` method and return a `Health`, +response. The `Health` response should include a status and can optionally include, +additional details to be displayed., +			int errorCode = check(); // perform some specific health check, +			if (errorCode != 0) {, +				return Health.down().withDetail("Error Code", errorCode);, +			}, +			return Health.up();, +In addition to Spring Boot's default {sc-spring-boot-actuator}/health/Status.{sc-ext}[`Status`], +types, it is also possible to introduce custom `Status` types to represent more, +complex system states. In such cases a custom implementation of the, +{sc-spring-boot-actuator}/health/HealthAggregator.{sc-ext}[`HealthAggregator`], +interface also needs to be provided, or the default implementation has to be configured, +using the `management.health.status.order` configuration property., +For example, assuming a new `Status` with code `FATAL` is being used in one of your, +`HealthIndicator` implementations. To configure the severity order add the following, +to your application properties:, +[source,properties,indent=0], +----, +	management.health.status.order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP, +----, +, +You might also want to register custom status mappings with the `HealthMvcEndpoint`, +if you access the health endpoint over HTTP. For example you could map `FATAL` to, +`HttpStatus.SERVICE_UNAVAILABLE`., +=== HTTP Health endpoint access restrictions]