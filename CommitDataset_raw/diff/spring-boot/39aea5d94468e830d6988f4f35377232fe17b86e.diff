[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java, +import java.io.File;, +import java.io.FileFilter;, +import java.io.IOException;, +import java.net.URL;, +import java.util.HashMap;, +import java.util.Map;, +import org.apache.ivy.plugins.parser.m2.PomReader;, +import org.apache.ivy.plugins.repository.Resource;, +import org.apache.ivy.plugins.repository.url.URLRepository;, +import org.apache.ivy.plugins.repository.url.URLResource;, +		List<DependencyResolver> grapesResolvers = grapesResolver.getResolvers();, +		// Replace localm2 resolver to fix missing artifact errors, +		for (int i = 0; i < grapesResolvers.size(); i++) {, +			DependencyResolver resolver = grapesResolvers.get(i);, +			if ("localm2".equals(resolver.getName())) {, +				((IBiblioResolver) resolver).setRepository(new LocalM2Repository());, +			}, +		}, +, +		// Create a new top level resolver, encapsulating the default resolvers, +		SpringBootResolver springBootResolver = new SpringBootResolver(grapesResolvers);, +		// Add support for spring snapshots and milestones if required, +		// Replace the original resolvers, +		grapesResolvers.clear();, +		grapesResolvers.add(springBootResolver);, +	private IBiblioResolver newResolver(String name, String root) {, +	 * Variant of {@link URLRepository} used to fix the 'localm2' so that when the local, +	 * repo contains a POM but not an artifact we continue to maven central., +	 * @see "http://issues.gradle.org/browse/GRADLE-2034", +	 */, +	private static class LocalM2Repository extends URLRepository {, +, +		private Map<String, Resource> resourcesCache = new HashMap<String, Resource>();, +, +		@Override, +		public Resource getResource(String source) throws IOException {, +			Resource resource = this.resourcesCache.get(source);, +			if (resource == null) {, +				URL url = new URL(source);, +				resource = new LocalM2Resource(url);, +				this.resourcesCache.put(source, resource);, +			}, +			return resource;, +		}, +, +		private static class LocalM2Resource extends URLResource {, +, +			private Boolean artifactExists;, +, +			public LocalM2Resource(URL url) {, +				super(url);, +			}, +, +			@Override, +			public boolean exists() {, +				if (getURL().getPath().endsWith(".pom")) {, +					return super.exists() && artifactExists();, +				}, +				return super.exists();, +			}, +, +			private boolean artifactExists() {, +				if (this.artifactExists == null) {, +					try {, +						PomReader reader = new PomReader(getURL(), this);, +						final String packaging = reader.getPackaging();, +						if ("pom".equals(packaging)) {, +							this.artifactExists = true;, +						}, +						else {, +							File parent = new File(getURL().toURI()).getParentFile();, +							File[] artifactFiles = parent.listFiles(new FileFilter() {, +								@Override, +								public boolean accept(File file) {, +									return file.getName().endsWith("." + packaging);, +								}, +							});, +							this.artifactExists = artifactFiles.length > 0;, +						}, +					}, +					catch (Exception ex) {, +						throw new IllegalStateException(ex);, +					}, +				}, +				return this.artifactExists;, +			}, +		}, +	}, +, +	/**]