[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +		FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +				new ResourceUrlEncodingFilter());, +		registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +		return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +		FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +				new ResourceUrlEncodingFilter());, +		registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +		return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +		public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +			FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +			registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +			return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +		FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +				new ResourceUrlEncodingFilter());, +		registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +		return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +		public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +			FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +			registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +			return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +		assertThat(this.context.getBeansOfType(FilterRegistrationBean.class)).isEmpty();, +		FilterRegistrationBean<?> registration = this.context, +				.getBean(FilterRegistrationBean.class);, +		assertThat(registration.getFilter()), +				.isInstanceOf(ResourceUrlEncodingFilter.class);, +		assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes",, +				EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerServletWebConfiguration.java, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +		FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +				new ResourceUrlEncodingFilter());, +		registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +		return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +		public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {, +			FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(, +			registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);, +			return registration;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.EnumSet;, +import javax.servlet.DispatcherType;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +		assertThat(this.context.getBeansOfType(FilterRegistrationBean.class)).isEmpty();, +		FilterRegistrationBean<?> registration = this.context, +				.getBean(FilterRegistrationBean.class);, +		assertThat(registration.getFilter()), +				.isInstanceOf(ResourceUrlEncodingFilter.class);, +		assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes",, +				EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafServletAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;, +		assertThat(registration.getFilter()), +				.isInstanceOf(ResourceUrlEncodingFilter.class);]