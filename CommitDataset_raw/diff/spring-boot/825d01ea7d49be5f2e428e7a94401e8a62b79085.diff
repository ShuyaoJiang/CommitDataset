[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +		Map<String, List<String>> cacheManagerNamesByCacheName = getCacheManagerNamesByCacheName();, +					String prefix = cleanPrefix(createPrefix(, +							cacheManagerNamesByCacheName, cacheName, cacheManagerName));, +	private Map<String, List<String>> getCacheManagerNamesByCacheName() {, +		Map<String, List<String>> cacheManagerNamesByCacheName = new HashMap<String, List<String>>();, +		for (Map.Entry<String, CacheManager> entry : this.cacheManagers.entrySet()) {, +			for (String cacheName : entry.getValue().getCacheNames()) {, +				List<String> cacheManagerNames = cacheManagerNamesByCacheName, +						.get(cacheName);, +				if (cacheManagerNames == null) {, +					cacheManagerNames = new ArrayList<String>();, +					cacheManagerNamesByCacheName.put(cacheName, cacheManagerNames);, +				}, +				cacheManagerNames.add(entry.getKey());, +			}, +		}, +		return cacheManagerNamesByCacheName;, +	}, +, +	 * Create the prefix to use for the specified cache. The generated prefix should be, +	 * unique among those that will be generated for the given map of cache names, +	 * @param cacheManagerNamesByCacheName a mapping of cache names to the names of the, +	 * cache managers that have a cache with that name, +	protected String createPrefix(Map<String, List<String>> cacheManagerNamesByCacheName,, +			String cacheName, String cacheManagerName) {, +		if (cacheManagerNamesByCacheName.get(cacheName).size() > 1) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +		Map<String, List<String>> cacheManagerNamesByCacheName = getCacheManagerNamesByCacheName();, +					String prefix = cleanPrefix(createPrefix(, +							cacheManagerNamesByCacheName, cacheName, cacheManagerName));, +	private Map<String, List<String>> getCacheManagerNamesByCacheName() {, +		Map<String, List<String>> cacheManagerNamesByCacheName = new HashMap<String, List<String>>();, +		for (Map.Entry<String, CacheManager> entry : this.cacheManagers.entrySet()) {, +			for (String cacheName : entry.getValue().getCacheNames()) {, +				List<String> cacheManagerNames = cacheManagerNamesByCacheName, +						.get(cacheName);, +				if (cacheManagerNames == null) {, +					cacheManagerNames = new ArrayList<String>();, +					cacheManagerNamesByCacheName.put(cacheName, cacheManagerNames);, +				}, +				cacheManagerNames.add(entry.getKey());, +			}, +		}, +		return cacheManagerNamesByCacheName;, +	}, +, +	 * Create the prefix to use for the specified cache. The generated prefix should be, +	 * unique among those that will be generated for the given map of cache names, +	 * @param cacheManagerNamesByCacheName a mapping of cache names to the names of the, +	 * cache managers that have a cache with that name, +	protected String createPrefix(Map<String, List<String>> cacheManagerNamesByCacheName,, +			String cacheName, String cacheManagerName) {, +		if (cacheManagerNamesByCacheName.get(cacheName).size() > 1) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +				"cache.first_speakers.size", "cache.users.size");]