[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfigurationTests.java, +				TestExecuteListenerProvider.class, TestVisitListenerProvider.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfigurationTests.java, +				TestExecuteListenerProvider.class, TestVisitListenerProvider.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ArchiveCommand.java, +			Assert.isTrue(nonOptionArguments.size() >= 2,, +					() -> "The name of the " + "resulting " + this.type, +							+ " and at least one source file must be " + "specified");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfigurationTests.java, +				TestExecuteListenerProvider.class, TestVisitListenerProvider.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ArchiveCommand.java, +			Assert.isTrue(nonOptionArguments.size() >= 2,, +					() -> "The name of the " + "resulting " + this.type, +							+ " and at least one source file must be " + "specified");, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java, +					Assert.state(statusCode == HttpStatus.OK, () -> "Unexpected ", +							+ statusCode + " response uploading class files");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfigurationTests.java, +				TestExecuteListenerProvider.class, TestVisitListenerProvider.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ArchiveCommand.java, +			Assert.isTrue(nonOptionArguments.size() >= 2,, +					() -> "The name of the " + "resulting " + this.type, +							+ " and at least one source file must be " + "specified");, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java, +					Assert.state(statusCode == HttpStatus.OK, () -> "Unexpected ", +							+ statusCode + " response uploading class files");, +++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/runner/classpath/ModifiedClassPathRunner.java, +	private static final Pattern INTELLIJ_CLASSPATH_JAR_PATTERN = Pattern, +			.compile(".*classpath(\\d+)?.jar");, +		return StringUtils.delimitedListToStringArray(, +				attributes.getValue(Attributes.Name.CLASS_PATH), " ");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +		String pathInfo = request.getPathInfo();, +		String uri = (StringUtils.hasText(pathInfo) ? pathInfo : "/");, +		return uri.replaceAll("//+", "/").replaceAll("/$", "");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/WebMvcTagsTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfigurationTests.java, +				TestExecuteListenerProvider.class, TestVisitListenerProvider.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ArchiveCommand.java, +			Assert.isTrue(nonOptionArguments.size() >= 2,, +					() -> "The name of the " + "resulting " + this.type, +							+ " and at least one source file must be " + "specified");]