[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +such as build systems, auto-configuration, and how to run your applications. We also cover, +recommendations that, when followed, make your development process a, +If you are starting out with Spring Boot, you should probably read the, +== Build Systems, +<<using-boot-dependency-management,_dependency management_>> and, +work with other build systems (Ant, for example), but they are not particularly well, +=== Dependency Management, +Each release of Spring Boot provides a curated list of dependencies that it supports. In, +build configuration, as Spring Boot is managing that for you. When you upgrade Spring, +Boot itself, these dependencies are upgraded as well in a consistent way., +need to do so., +Framework. We **highly** recommend that you not specify its version., +* A <<using-boot-dependency-management,Dependency Management section>>, inherited from, +the spring-boot-dependencies pom, that manages the versions of common dependencies. This, +dependency management lets you omit <version> tags for those dependencies when used, +in your own pom., +  https://github.com/ktoso/maven-git-commit-id-plugin[Git commit ID], and, +  profile-specific files (for example, `application-foo.properties` and `application-foo.yml`), +Note that, since the `application.properties` and `application.yml` files accept, +Spring style placeholders (`${...}`), the Maven filtering is changed to, +use `@..@` placeholders. (You can override that by setting a Maven property called, +`resource.delimiter`.), +==== Inheriting the Starter Parent, +To configure your project to inherit from the `spring-boot-starter-parent` set, +the `parent`, as follows:, +NOTE: You should need to specify only the Spring Boot version number on this dependency., +in your own project. For instance, to upgrade to another Spring Data release train, you would, +add the following to your `pom.xml`:, +==== Using Spring Boot without the Parent POM, +own corporate standard parent that you need to use or you may prefer to explicitly, +If you do not want to use the `spring-boot-starter-parent`, you can still keep the benefit, +dependency, as follows:, +The preceding sample setup does not let you override individual dependencies by using a property, as, +explained above. To achieve the same result, you need to add an entry in the, +entry. For instance, to upgrade to another Spring Data release train, you could add the, +following element to your `pom.xml`:, +NOTE: In the preceding example, we specify a _BOM_, but any dependency type can be overridden, +in the same way., +==== Using the Spring Boot Maven Plugin, +section if you want to use it, as shown in the following example:, +NOTE: If you use the Spring Boot starter parent pom, you need to add only the plugin., +There is no need to configure it unless you want to change the settings defined in, +To declare dependencies, a typical `ivy.xml` file looks something like the following example:, +A typical `build.xml` looks like the following example:, +TIP: If you do not want to use the `spring-boot-antlib` module, see the, +_<<howto.adoc#howto-build-an-executable-archive-with-ant>>_ "`How-to`" ., +application. You get a one-stop shop for all the Spring and related technology that you, +need without having to hunt through sample code and copy-paste loads of dependency, +access, include the `spring-boot-starter-data-jpa` dependency in your project., +As explained in the <<spring-boot-features#boot-features-custom-starter,Creating Your Own Starter>>, +section, third party starters should not start with `spring-boot`, as it is reserved for, +official Spring Boot artifacts. Rather, a third-party starter typically starts with the, +name of the project. For example, a third-party starter project called `thirdpartyproject`, +would typically be named `thirdpartyproject-spring-boot-starter`., +Finally, Spring Boot also includes the following starters that can be used if you want to exclude, +== Structuring Your Code, +Spring Boot does not require any specific code layout to work. However, there are some, +=== Using the "`default`" Package, +When a class does not include a `package` declaration, it is considered to be in the, +"`default package`". The use of the "`default package`" is generally discouraged and, +use the `@ComponentScan`, `@EntityScan`, or `@SpringBootApplication` annotations, since every, +class from every jar is read., +=== Locating the Main Application Class, +`@EnableAutoConfiguration` annotated class is used to search for `@Entity` items., +Using a root package also lets the `@ComponentScan` annotation be used without, +The following listing shows a typical layout:, +`@Configuration`, as follows:, +== Configuration Classes, +`SpringApplication` with XML sources, we generally recommend that your primary, +source be a single `@Configuration` class. Usually the class that defines the `main`, +method is a good candidate as the primary `@Configuration`., +configuration. If possible, always try to use the equivalent Java-based configuration., +=== Importing Additional Configuration Classes, +You need not put all your `@Configuration` into a single class. The `@Import`, +=== Importing XML Configuration, +with a `@Configuration` class. You can then use an `@ImportResource`, +connection beans, then Spring Boot auto-configures an in-memory database., +=== Gradually Replacing Auto-configuration, +Auto-configuration is noninvasive. At any point, you can start to define your own, +you add your own `DataSource` bean, the default embedded database support backs away., +start your application with the `--debug` switch. Doing so enables debug logs for a, +selection of core loggers and logs an auto-configuration report to the console., +=== Disabling Specific Auto-configuration Classes, +If you find that specific auto-configuration classes that you do not want are being applied,, +you can use the exclude attribute of `@EnableAutoConfiguration` to disable them, as shown, +in the following example:, +control the list of auto-configuration classes to exclude by using the, +TIP: You can define exclusions both at the annotation level and by using the property., +== Spring Beans and Dependency Injection, +(to find your beans) and using `@Autowired` (to do constructor injection) works well., +components (`@Component`, `@Service`, `@Repository`, `@Controller` etc.) are, +The following example shows a `@Service` Bean that uses constructor injection to obtain a, +required `RiskAssessor` bean:, +If a bean has one constructor, you can omit the `@Autowired`, as shown in the following, +example:, +TIP: Notice how using constructor injection lets the `riskAssessor` field be marked, +== Using the @SpringBootApplication Annotation, +`@EnableAutoConfiguration`, and `@ComponentScan`. Since these annotations are so frequently, +`@EnableAutoConfiguration`, and `@ComponentScan` with their default attributes, as shown]