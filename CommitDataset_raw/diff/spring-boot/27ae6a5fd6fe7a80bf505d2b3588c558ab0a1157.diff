[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.boot.SpringApplicationErrorEvent;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.event.ApplicationContextEvent;, +import org.springframework.context.event.SmartApplicationListener;, +import org.springframework.core.Ordered;, + * {@link ApplicationContextInitializer} and {@link SmartApplicationListener} that writes, + * the {@link AutoConfigurationReport} to the log. Reports are logged at the, +		SmartApplicationListener {, +	public int getOrder() {, +		return Ordered.LOWEST_PRECEDENCE;, +	}, +, +	@Override, +	public boolean supportsEventType(Class<? extends ApplicationEvent> type) {, +		return ContextRefreshedEvent.class.isAssignableFrom(type), +				|| SpringApplicationErrorEvent.class.isAssignableFrom(type);, +	public boolean supportsSourceType(Class<?> sourceType) {, +		return true;, +	}, +, +	@Override, +	public void onApplicationEvent(ApplicationEvent event) {, +		if (event instanceof ContextRefreshedEvent) {, +			if (((ApplicationContextEvent) event).getApplicationContext() == this.applicationContext) {, +		else if (event instanceof SpringApplicationErrorEvent) {, +			if (((SpringApplicationErrorEvent) event).getApplicationContext() == this.applicationContext) {, +				logAutoConfigurationReport(true);, +			}, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.boot.SpringApplicationErrorEvent;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.event.ApplicationContextEvent;, +import org.springframework.context.event.SmartApplicationListener;, +import org.springframework.core.Ordered;, + * {@link ApplicationContextInitializer} and {@link SmartApplicationListener} that writes, + * the {@link AutoConfigurationReport} to the log. Reports are logged at the, +		SmartApplicationListener {, +	public int getOrder() {, +		return Ordered.LOWEST_PRECEDENCE;, +	}, +, +	@Override, +	public boolean supportsEventType(Class<? extends ApplicationEvent> type) {, +		return ContextRefreshedEvent.class.isAssignableFrom(type), +				|| SpringApplicationErrorEvent.class.isAssignableFrom(type);, +	public boolean supportsSourceType(Class<?> sourceType) {, +		return true;, +	}, +, +	@Override, +	public void onApplicationEvent(ApplicationEvent event) {, +		if (event instanceof ContextRefreshedEvent) {, +			if (((ApplicationContextEvent) event).getApplicationContext() == this.applicationContext) {, +		else if (event instanceof SpringApplicationErrorEvent) {, +			if (((SpringApplicationErrorEvent) event).getApplicationContext() == this.applicationContext) {, +				logAutoConfigurationReport(true);, +			}, +		}, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializerTests.java, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.SpringApplicationErrorEvent;, +			this.initializer.onApplicationEvent(new SpringApplicationErrorEvent(, +					new SpringApplication(), context, new String[] {}, ex));, +		this.initializer.onApplicationEvent(new SpringApplicationErrorEvent(, +				new SpringApplication(), null, new String[0], new RuntimeException(, +						"Planned")));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.boot.SpringApplicationErrorEvent;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.event.ApplicationContextEvent;, +import org.springframework.context.event.SmartApplicationListener;, +import org.springframework.core.Ordered;, + * {@link ApplicationContextInitializer} and {@link SmartApplicationListener} that writes, + * the {@link AutoConfigurationReport} to the log. Reports are logged at the, +		SmartApplicationListener {, +	public int getOrder() {, +		return Ordered.LOWEST_PRECEDENCE;, +	}, +, +	@Override, +	public boolean supportsEventType(Class<? extends ApplicationEvent> type) {, +		return ContextRefreshedEvent.class.isAssignableFrom(type), +				|| SpringApplicationErrorEvent.class.isAssignableFrom(type);, +	public boolean supportsSourceType(Class<?> sourceType) {, +		return true;, +	}, +, +	@Override, +	public void onApplicationEvent(ApplicationEvent event) {, +		if (event instanceof ContextRefreshedEvent) {, +			if (((ApplicationContextEvent) event).getApplicationContext() == this.applicationContext) {, +		else if (event instanceof SpringApplicationErrorEvent) {, +			if (((SpringApplicationErrorEvent) event).getApplicationContext() == this.applicationContext) {, +				logAutoConfigurationReport(true);, +			}, +		}]