[+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +import java.util.stream.StreamSupport;, +import org.springframework.boot.origin.OriginTrackedValue;, +import org.springframework.boot.origin.PropertySourceOrigin;, + * @author Madhura Bhave, +		MutablePropertySources propertySources = environment.getPropertySources();, +		PropertySource<?> source = StreamSupport.stream(propertySources.spliterator(), false), +				.filter(s -> getProperty(s) != null), +				.findFirst().orElse(null);, +		if (source != null) {, +			String json = (String) getProperty(source);, +			processJson(environment, json, source);, +	private Object getProperty(PropertySource<?> source) {, +		if (source.containsProperty("spring.application.json")) {, +			return source.getProperty("spring.application.json");, +		}, +		return source.getProperty("SPRING_APPLICATION_JSON");, +	}, +, +	private void processJson(ConfigurableEnvironment environment, String json, PropertySource source) {, +						new OriginTrackedMapPropertySource("spring.application.json", flatten(map, source)));, +	 * @param source The property source for spring.application.json or SPRING_APPLICATION_JSON, +	private Map<String, Object> flatten(Map<String, Object> map, PropertySource source) {, +		flatten(null, result, map, source);, +			Map<String, Object> map, PropertySource source) {, +			extract(prefix + entry.getKey(), result, entry.getValue(), source);, +	private void extract(String name, Map<String, Object> result, Object value, PropertySource source) {, +			flatten(name, result, (Map<String, Object>) value, source);, +				extract(name + "[" + index + "]", result, object, source);, +			OriginTrackedValue originTrackedValue = OriginTrackedValue.of(value, PropertySourceOrigin.get(source, name));, +			result.put(name, originTrackedValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +import java.util.stream.StreamSupport;, +import org.springframework.boot.origin.OriginTrackedValue;, +import org.springframework.boot.origin.PropertySourceOrigin;, + * @author Madhura Bhave, +		MutablePropertySources propertySources = environment.getPropertySources();, +		PropertySource<?> source = StreamSupport.stream(propertySources.spliterator(), false), +				.filter(s -> getProperty(s) != null), +				.findFirst().orElse(null);, +		if (source != null) {, +			String json = (String) getProperty(source);, +			processJson(environment, json, source);, +	private Object getProperty(PropertySource<?> source) {, +		if (source.containsProperty("spring.application.json")) {, +			return source.getProperty("spring.application.json");, +		}, +		return source.getProperty("SPRING_APPLICATION_JSON");, +	}, +, +	private void processJson(ConfigurableEnvironment environment, String json, PropertySource source) {, +						new OriginTrackedMapPropertySource("spring.application.json", flatten(map, source)));, +	 * @param source The property source for spring.application.json or SPRING_APPLICATION_JSON, +	private Map<String, Object> flatten(Map<String, Object> map, PropertySource source) {, +		flatten(null, result, map, source);, +			Map<String, Object> map, PropertySource source) {, +			extract(prefix + entry.getKey(), result, entry.getValue(), source);, +	private void extract(String name, Map<String, Object> result, Object value, PropertySource source) {, +			flatten(name, result, (Map<String, Object>) value, source);, +				extract(name + "[" + index + "]", result, object, source);, +			OriginTrackedValue originTrackedValue = OriginTrackedValue.of(value, PropertySourceOrigin.get(source, name));, +			result.put(name, originTrackedValue);, +++ b/spring-boot/src/test/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessorTests.java, +import org.springframework.boot.origin.PropertySourceOrigin;, +import org.springframework.core.env.PropertySource;, +	@Test, +	public void propertySourceShouldTrackOrigin() throws Exception {, +		assertThat(this.environment.resolvePlaceholders("${foo:}")).isEmpty();, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,, +				"spring.application.json={\"foo\":\"bar\"}");, +		this.processor.postProcessEnvironment(this.environment, null);, +		PropertySource<?> propertySource = this.environment.getPropertySources().get("spring.application.json");, +		PropertySourceOrigin origin = (PropertySourceOrigin) PropertySourceOrigin.get(propertySource, "foo");, +		assertThat(origin.getPropertySource().getName()).isEqualTo("Inlined Test Properties");, +		assertThat(this.environment.resolvePlaceholders("${foo:}")).isEqualTo("bar");, +	}]