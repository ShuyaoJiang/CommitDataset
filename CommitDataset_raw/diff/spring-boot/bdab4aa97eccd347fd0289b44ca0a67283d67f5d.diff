[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;, +@ConditionalOnWebApplication, +		MongoReactiveAutoConfiguration.class, RedisAutoConfiguration.class,, +		RedisReactiveAutoConfiguration.class }), +@AutoConfigureBefore(HttpHandlerAutoConfiguration.class), +public class SessionAutoConfiguration {, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	static class ServletSessionConfiguration {, +, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	static class ReactiveSessionConfiguration {, +, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;, +@ConditionalOnWebApplication, +		MongoReactiveAutoConfiguration.class, RedisAutoConfiguration.class,, +		RedisReactiveAutoConfiguration.class }), +@AutoConfigureBefore(HttpHandlerAutoConfiguration.class), +public class SessionAutoConfiguration {, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	static class ServletSessionConfiguration {, +, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	static class ReactiveSessionConfiguration {, +, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +	static String getConfigurationClass(StoreType sessionStoreType) {, +	static StoreType getType(String configurationClassName) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration;, +@ConditionalOnWebApplication, +		MongoReactiveAutoConfiguration.class, RedisAutoConfiguration.class,, +		RedisReactiveAutoConfiguration.class }), +@AutoConfigureBefore(HttpHandlerAutoConfiguration.class), +public class SessionAutoConfiguration {, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	static class ServletSessionConfiguration {, +, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	static class ReactiveSessionConfiguration {, +, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +	static String getConfigurationClass(StoreType sessionStoreType) {, +	static StoreType getType(String configurationClassName) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.web.server.session.WebSessionManager;, + * @author Andy Wilkinson, +		public HttpHandler httpHandler(, +				ObjectProvider<WebSessionManager> webSessionManagerProvider) {, +			WebHttpHandlerBuilder builder = WebHttpHandlerBuilder, +					.applicationContext(this.applicationContext);, +			WebSessionManager webSessionManager = webSessionManagerProvider, +					.getIfAvailable();, +			if (webSessionManager != null) {, +				builder.sessionManager(webSessionManager);, +			}, +			return builder.build();]