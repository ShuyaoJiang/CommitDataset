[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String NESTED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.NestedConfigurationProperty";, +, +	protected String nestedConfigurationPropertyAnnotation() {, +		return NESTED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +			boolean isCollection = this.typeUtils.isCollectionOrMap(getter, +					.getReturnType());, +			if (!isNested && (setter != null || isCollection)) {, +			String name = entry.getKey();, +			VariableElement field = members.getFields().get(name);, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +				if (this.typeUtils.isEnclosedIn(returnType, element) || isNested) {, +					String nestedPrefix = ConfigurationMetadata, +							.nestedPrefix(prefix, name);, +		if (element != null) {, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String NESTED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.NestedConfigurationProperty";, +, +	protected String nestedConfigurationPropertyAnnotation() {, +		return NESTED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +			boolean isCollection = this.typeUtils.isCollectionOrMap(getter, +					.getReturnType());, +			if (!isNested && (setter != null || isCollection)) {, +			String name = entry.getKey();, +			VariableElement field = members.getFields().get(name);, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +				if (this.typeUtils.isEnclosedIn(returnType, element) || isNested) {, +					String nestedPrefix = ConfigurationMetadata, +							.nestedPrefix(prefix, name);, +		if (element != null) {, +		}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.SimplePojo;, +		assertThat(metadata, containsGroup("config.third").ofType(SimplePojo.class), +				.fromSource(InnerClassProperties.class));, +		static final String NESTED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.configurationsample.NestedConfigurationProperty";, +, +		protected String nestedConfigurationPropertyAnnotation() {, +			return NESTED_CONFIGURATION_PROPERTY_ANNOTATION;, +		}, +, +		@Override, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String NESTED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.NestedConfigurationProperty";, +, +	protected String nestedConfigurationPropertyAnnotation() {, +		return NESTED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +			boolean isCollection = this.typeUtils.isCollectionOrMap(getter, +					.getReturnType());, +			if (!isNested && (setter != null || isCollection)) {, +			String name = entry.getKey();, +			VariableElement field = members.getFields().get(name);, +			boolean isNested = getAnnotation(field,, +					nestedConfigurationPropertyAnnotation()) != null;, +				if (this.typeUtils.isEnclosedIn(returnType, element) || isNested) {, +					String nestedPrefix = ConfigurationMetadata, +							.nestedPrefix(prefix, name);, +		if (element != null) {, +		}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.SimplePojo;, +		assertThat(metadata, containsGroup("config.third").ofType(SimplePojo.class), +				.fromSource(InnerClassProperties.class));, +		static final String NESTED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.configurationsample.NestedConfigurationProperty";, +, +		protected String nestedConfigurationPropertyAnnotation() {, +			return NESTED_CONFIGURATION_PROPERTY_ANNOTATION;, +		}, +, +		@Override]