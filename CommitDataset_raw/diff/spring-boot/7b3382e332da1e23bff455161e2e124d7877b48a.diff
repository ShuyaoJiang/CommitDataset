[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +import java.lang.annotation.Annotation;, +		verifyConfiguration(context.getTestClass());, +	protected void verifyConfiguration(Class<?> testClass) {, +		SpringBootTest springBootTest = getAnnotation(testClass);, +		if (springBootTest != null, +				&& (springBootTest.webEnvironment() == WebEnvironment.DEFINED_PORT, +						|| springBootTest.webEnvironment() == WebEnvironment.RANDOM_PORT), +				&& getAnnotation(WebAppConfiguration.class, testClass) != null) {, +			throw new IllegalStateException("@WebAppConfiguration should only be used ", +					+ "with @SpringBootTest when @SpringBootTest is configured with a ", +					+ "mock web environment. Please remove @WebAppConfiguration or ", +					+ "reconfigure @SpringBootTest.");, +		}, +	}, +, +	private <T extends Annotation> T getAnnotation(Class<T> annotationType,, +			Class<?> testClass) {, +		return AnnotatedElementUtils.getMergedAnnotation(testClass, annotationType);, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +import java.lang.annotation.Annotation;, +		verifyConfiguration(context.getTestClass());, +	protected void verifyConfiguration(Class<?> testClass) {, +		SpringBootTest springBootTest = getAnnotation(testClass);, +		if (springBootTest != null, +				&& (springBootTest.webEnvironment() == WebEnvironment.DEFINED_PORT, +						|| springBootTest.webEnvironment() == WebEnvironment.RANDOM_PORT), +				&& getAnnotation(WebAppConfiguration.class, testClass) != null) {, +			throw new IllegalStateException("@WebAppConfiguration should only be used ", +					+ "with @SpringBootTest when @SpringBootTest is configured with a ", +					+ "mock web environment. Please remove @WebAppConfiguration or ", +					+ "reconfigure @SpringBootTest.");, +		}, +	}, +, +	private <T extends Annotation> T getAnnotation(Class<T> annotationType,, +			Class<?> testClass) {, +		return AnnotatedElementUtils.getMergedAnnotation(testClass, annotationType);, +	}, +, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/bootstrap/SpringBootTestContextBootstrapperExampleConfig.java, + * Example configuration used in {@link SpringBootTestContextBootstrapperIntegrationTests}., +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +import java.lang.annotation.Annotation;, +		verifyConfiguration(context.getTestClass());, +	protected void verifyConfiguration(Class<?> testClass) {, +		SpringBootTest springBootTest = getAnnotation(testClass);, +		if (springBootTest != null, +				&& (springBootTest.webEnvironment() == WebEnvironment.DEFINED_PORT, +						|| springBootTest.webEnvironment() == WebEnvironment.RANDOM_PORT), +				&& getAnnotation(WebAppConfiguration.class, testClass) != null) {, +			throw new IllegalStateException("@WebAppConfiguration should only be used ", +					+ "with @SpringBootTest when @SpringBootTest is configured with a ", +					+ "mock web environment. Please remove @WebAppConfiguration or ", +					+ "reconfigure @SpringBootTest.");, +		}, +	}, +, +	private <T extends Annotation> T getAnnotation(Class<T> annotationType,, +			Class<?> testClass) {, +		return AnnotatedElementUtils.getMergedAnnotation(testClass, annotationType);, +	}, +, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/bootstrap/SpringBootTestContextBootstrapperExampleConfig.java, + * Example configuration used in {@link SpringBootTestContextBootstrapperIntegrationTests}., +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/bootstrap/SpringBootTestContextBootstrapperIntegrationTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.context.bootstrap;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.test.context.SpringBootTestContextBootstrapper;, +import org.springframework.boot.test.context.TestConfiguration;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.stereotype.Component;, +import org.springframework.test.context.BootstrapWith;, +import org.springframework.test.context.junit4.SpringRunner;, +, +import static org.assertj.core.api.Assertions.assertThat;, +]