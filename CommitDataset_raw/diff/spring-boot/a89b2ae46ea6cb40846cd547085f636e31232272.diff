[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		profiles: production & eu-central, +property is `127.0.0.1`. Similarly, if the `production` *and* `eu-central` profiles are, +active, the `server.address` property is `192.168.1.120`. If the `development` and, +`production` and `eu-central` profiles are *not* enabled, then the value for the property, +is `192.168.1.100`., +, +[NOTE], +====, +`spring.profiles` can therefore contains a simple profile name (for example `production`), +or a profile expression. A profile expression allows for more complicated profile logic, +to be expressed, for example `production & (eu-central | eu-west)`. Check the, +{spring-reference}core.html#beans-definition-profiles-java[reference guide] for more, +details., +====, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		profiles: production & eu-central, +property is `127.0.0.1`. Similarly, if the `production` *and* `eu-central` profiles are, +active, the `server.address` property is `192.168.1.120`. If the `development` and, +`production` and `eu-central` profiles are *not* enabled, then the value for the property, +is `192.168.1.100`., +, +[NOTE], +====, +`spring.profiles` can therefore contains a simple profile name (for example `production`), +or a profile expression. A profile expression allows for more complicated profile logic, +to be expressed, for example `production & (eu-central | eu-west)`. Check the, +{spring-reference}core.html#beans-definition-profiles-java[reference guide] for more, +details., +====, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.Profiles;, +						&& this.environment, +								.acceptsProfiles(Profiles.of(document.getProfiles()));, +					&& !ObjectUtils.isEmpty(document.getProfiles()) && this.environment, +							.acceptsProfiles(Profiles.of(document.getProfiles())));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		profiles: production & eu-central, +property is `127.0.0.1`. Similarly, if the `production` *and* `eu-central` profiles are, +active, the `server.address` property is `192.168.1.120`. If the `development` and, +`production` and `eu-central` profiles are *not* enabled, then the value for the property, +is `192.168.1.100`., +, +[NOTE], +====, +`spring.profiles` can therefore contains a simple profile name (for example `production`), +or a profile expression. A profile expression allows for more complicated profile logic, +to be expressed, for example `production & (eu-central | eu-west)`. Check the, +{spring-reference}core.html#beans-definition-profiles-java[reference guide] for more, +details., +====, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.Profiles;, +						&& this.environment, +								.acceptsProfiles(Profiles.of(document.getProfiles()));, +					&& !ObjectUtils.isEmpty(document.getProfiles()) && this.environment, +							.acceptsProfiles(Profiles.of(document.getProfiles())));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ReproTests.java, +import org.springframework.core.env.Profiles;, +		assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("dev"))), +				.isTrue();, +		assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("a"))), +				.isTrue();, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		profiles: production & eu-central, +property is `127.0.0.1`. Similarly, if the `production` *and* `eu-central` profiles are, +active, the `server.address` property is `192.168.1.120`. If the `development` and, +`production` and `eu-central` profiles are *not* enabled, then the value for the property, +is `192.168.1.100`., +, +[NOTE], +====, +`spring.profiles` can therefore contains a simple profile name (for example `production`), +or a profile expression. A profile expression allows for more complicated profile logic, +to be expressed, for example `production & (eu-central | eu-west)`. Check the, +{spring-reference}core.html#beans-definition-profiles-java[reference guide] for more, +details., +====, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.Profiles;, +						&& this.environment, +								.acceptsProfiles(Profiles.of(document.getProfiles()));, +					&& !ObjectUtils.isEmpty(document.getProfiles()) && this.environment, +							.acceptsProfiles(Profiles.of(document.getProfiles())));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/ReproTests.java, +import org.springframework.core.env.Profiles;, +		assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("dev"))), +				.isTrue();, +		assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("a"))), +				.isTrue();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import org.springframework.core.env.Profiles;, +		assertThat(environment.acceptsProfiles(Profiles.of("foo"))).isTrue();, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		profiles: production & eu-central, +property is `127.0.0.1`. Similarly, if the `production` *and* `eu-central` profiles are, +active, the `server.address` property is `192.168.1.120`. If the `development` and, +`production` and `eu-central` profiles are *not* enabled, then the value for the property, +is `192.168.1.100`., +]