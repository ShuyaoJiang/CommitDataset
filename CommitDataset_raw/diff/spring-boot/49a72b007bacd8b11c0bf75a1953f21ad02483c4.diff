[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, + * must be lower-case and must start with an alpha-numeric character. The "{@code -}" is used purely for, +			return isAlpha(ch) || isNumeric(ch) || (index != 0 && ch == '-');, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, + * must be lower-case and must start with an alpha-numeric character. The "{@code -}" is used purely for, +			return isAlpha(ch) || isNumeric(ch) || (index != 0 && ch == '-');, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +	@Test, +	public void bindToMapWithNumericKey() {, +		this.context = new AnnotationConfigApplicationContext();, +		MutablePropertySources sources = this.context.getEnvironment(), +				.getPropertySources();, +		Map<String, Object> source = new LinkedHashMap<>();, +		source.put("sample.foos.1.name", "One");, +		sources.addFirst(new MapPropertySource("test-source", source));, +		this.context.register(NumericKeyConfiguration.class);, +		this.context.refresh();, +		NumericKeyConfiguration foo = this.context.getBean(NumericKeyConfiguration.class);, +		assertThat(foo.getFoos().get("1")).isNotNull();, +	}, +, +	@Configuration, +	@EnableConfigurationProperties, +	@ConfigurationProperties(prefix = "sample"), +	static class NumericKeyConfiguration {, +, +		private Map<String, Foo> foos = new LinkedHashMap<>();, +, +		public Map<String, Foo> getFoos() {, +			return this.foos;, +		}, +, +		static class Foo {, +, +			private String name;, +, +			public String getName() {, +				return this.name;, +			}, +, +			public void setName(String name) {, +				this.name = name;, +			}, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, + * must be lower-case and must start with an alpha-numeric character. The "{@code -}" is used purely for, +			return isAlpha(ch) || isNumeric(ch) || (index != 0 && ch == '-');, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +	@Test, +	public void bindToMapWithNumericKey() {, +		this.context = new AnnotationConfigApplicationContext();, +		MutablePropertySources sources = this.context.getEnvironment(), +				.getPropertySources();, +		Map<String, Object> source = new LinkedHashMap<>();, +		source.put("sample.foos.1.name", "One");, +		sources.addFirst(new MapPropertySource("test-source", source));, +		this.context.register(NumericKeyConfiguration.class);, +		this.context.refresh();, +		NumericKeyConfiguration foo = this.context.getBean(NumericKeyConfiguration.class);, +		assertThat(foo.getFoos().get("1")).isNotNull();, +	}, +, +	@Configuration, +	@EnableConfigurationProperties, +	@ConfigurationProperties(prefix = "sample"), +	static class NumericKeyConfiguration {, +, +		private Map<String, Foo> foos = new LinkedHashMap<>();, +, +		public Map<String, Foo> getFoos() {, +			return this.foos;, +		}, +, +		static class Foo {, +, +			private String name;, +, +			public String getName() {, +				return this.name;, +			}, +, +			public void setName(String name) {, +				this.name = name;, +			}, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java, +	public void ofNameWhenStartsWithNumber() {, +		ConfigurationPropertyName name = ConfigurationPropertyName.of("1foo");, +		assertThat(name.toString()).isEqualTo("1foo");, +		assertThat(name.getNumberOfElements()).isEqualTo(1);, +		assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo("1foo");, +		assertThat(name.isIndexed(0)).isFalse();, +	}, +, +	@Test, +		this.thrown.expectMessage("Configuration property name '-bar' is not valid");]