[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;, +	public DistributionStatisticConfig configure(Meter.Id id,, +			DistributionStatisticConfig config) {, +		DistributionStatisticConfig.Builder builder = DistributionStatisticConfig, +				.builder();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;, +	public DistributionStatisticConfig configure(Meter.Id id,, +			DistributionStatisticConfig config) {, +		DistributionStatisticConfig.Builder builder = DistributionStatisticConfig, +				.builder();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, +import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;, +	private DistributionStatisticConfig config;, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isTrue();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isFalse();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isTrue();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isFalse();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isFalse();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isTrue();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).isPercentileHistogram()).isTrue();, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getPercentiles()).containsExactly(1,, +						1.5, 2);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getPercentiles()).containsExactly(1,, +						1.5, 2);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getPercentiles()).containsExactly(3,, +						3.5, 4);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getPercentiles()).containsExactly(1,, +						1.5, 2);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getSlaBoundaries()), +						.containsExactly(1000000, 2000000, 3000000);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getSlaBoundaries()), +						.containsExactly(1000000, 2000000, 3000000);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getSlaBoundaries()), +						.containsExactly(4000000, 5000000, 6000000);, +		assertThat(filter.configure(createMeterId("spring.boot"),, +				DistributionStatisticConfig.DEFAULT).getSlaBoundaries()), +						.containsExactly(1000000, 2000000, 3000000);, +		assertThat(filter.configure(timer, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).containsExactly(1000000, 2000000, 3000000);, +		assertThat(filter.configure(summary, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).isEmpty();, +		assertThat(filter.configure(counter, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).isEmpty();, +		assertThat(filter.configure(timer, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).containsExactly(1000000, 2000000, 3000000);, +		assertThat(filter.configure(summary, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).containsExactly(1, 2, 3);, +		assertThat(filter.configure(counter, DistributionStatisticConfig.DEFAULT), +				.getSlaBoundaries()).isEmpty();]