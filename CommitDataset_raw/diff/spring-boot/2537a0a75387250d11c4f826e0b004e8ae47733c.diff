[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private RecordMessageConverter messageConverter;, +	 * Set the {@link RecordMessageConverter} to use., +	void setMessageConverter(RecordMessageConverter messageConverter) {, +		listenerContainerFactory.setConsumerFactory(consumerFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private RecordMessageConverter messageConverter;, +	 * Set the {@link RecordMessageConverter} to use., +	void setMessageConverter(RecordMessageConverter messageConverter) {, +		listenerContainerFactory.setConsumerFactory(consumerFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private final RecordMessageConverter messageConverter;, +			ObjectProvider<RecordMessageConverter> messageConverter) {, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private RecordMessageConverter messageConverter;, +	 * Set the {@link RecordMessageConverter} to use., +	void setMessageConverter(RecordMessageConverter messageConverter) {, +		listenerContainerFactory.setConsumerFactory(consumerFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private final RecordMessageConverter messageConverter;, +			ObjectProvider<RecordMessageConverter> messageConverter) {, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private RecordMessageConverter messageConverter;, +	 * Set the {@link RecordMessageConverter} to use., +	void setMessageConverter(RecordMessageConverter messageConverter) {, +		listenerContainerFactory.setConsumerFactory(consumerFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private final RecordMessageConverter messageConverter;, +			ObjectProvider<RecordMessageConverter> messageConverter) {, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +						"spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.IntegerDeserializer", +				).run((context) -> {, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +						"spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.IntegerSerializer", +				).run((context) -> {, +						"spring.kafka.jaas.options.useKeyTab=true", +				).run((context) -> {, +		this.contextRunner.withUserConfiguration(MessageConverterConfiguration.class), +							.isSameAs(context.getBean("myMessageConverter"));, +		this.contextRunner.withUserConfiguration(MessageConverterConfiguration.class), +	protected static class MessageConverterConfiguration {, +		public RecordMessageConverter myMessageConverter() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private RecordMessageConverter messageConverter;, +	 * Set the {@link RecordMessageConverter} to use., +	void setMessageConverter(RecordMessageConverter messageConverter) {, +		listenerContainerFactory.setConsumerFactory(consumerFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.support.converter.RecordMessageConverter;, +	private final RecordMessageConverter messageConverter;, +			ObjectProvider<RecordMessageConverter> messageConverter) {, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +		this.messageConverter = messageConverter.getIfUnique();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +						"spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.IntegerDeserializer", +				).run((context) -> {, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +						"spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.IntegerSerializer", +				).run((context) -> {, +						"spring.kafka.jaas.options.useKeyTab=true", +				).run((context) -> {, +		this.contextRunner.withUserConfiguration(MessageConverterConfiguration.class), +							.isSameAs(context.getBean("myMessageConverter"));, +		this.contextRunner.withUserConfiguration(MessageConverterConfiguration.class), +	protected static class MessageConverterConfiguration {, +		public RecordMessageConverter myMessageConverter() {, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: If a `RecordMessageConverter` bean is defined, it is associated automatically to the, +auto-configured `KafkaTemplate`., +`spring.kafka.listener.*`. Also, if a `RecordMessageConverter` bean is defined, it is, +associated automatically to the default factory.]