[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.util.List;, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(SecurityProperties properties,, +		SecurityProperties.User user = properties.getUser();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));, +		}, +				.encode(user.getPassword());, +		List<String> roles = user.getRoles();, +				User.withUsername(user.getName()).password(encodedPassword), +						.roles(roles.toArray(new String[roles.size()])).build());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.util.List;, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(SecurityProperties properties,, +		SecurityProperties.User user = properties.getUser();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));, +		}, +				.encode(user.getPassword());, +		List<String> roles = user.getRoles();, +				User.withUsername(user.getName()).password(encodedPassword), +						.roles(roles.toArray(new String[roles.size()])).build());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.UUID;, +import org.springframework.util.StringUtils;, + * @author Madhura Bhave, +	private User user = new User();, +, +	public User getUser() {, +		return this.user;, +	}, +, +	public static class User {, +, +		/**, +		 * Default user name., +		 */, +		private String name = "user";, +, +		/**, +		 * Password for the default user name., +		 */, +		private String password = UUID.randomUUID().toString();, +, +		/**, +		 * Granted roles for the default user name., +		 */, +		private List<String> roles = new ArrayList<>();, +, +		private boolean passwordGenerated = true;, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getPassword() {, +			return this.password;, +		}, +, +		public void setPassword(String password) {, +			if (!StringUtils.hasLength(password)) {, +				return;, +			}, +			this.passwordGenerated = false;, +			this.password = password;, +		}, +, +		public List<String> getRoles() {, +			return this.roles;, +		}, +, +		public void setRoles(List<String> roles) {, +			this.roles = new ArrayList<>(roles);, +		}, +, +		public boolean isPasswordGenerated() {, +			return this.passwordGenerated;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.util.List;, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(SecurityProperties properties,, +		SecurityProperties.User user = properties.getUser();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));, +		}, +				.encode(user.getPassword());, +		List<String> roles = user.getRoles();, +				User.withUsername(user.getName()).password(encodedPassword), +						.roles(roles.toArray(new String[roles.size()])).build());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +import java.util.ArrayList;, +import java.util.List;]