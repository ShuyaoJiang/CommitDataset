[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpTrace.java, +import java.util.LinkedHashMap;, +	private final Instant timestamp;, +	/**, +	 * Creates a fully-configured {@code HttpTrace} instance. Primarly for use by, +	 * {@link HttpTraceRepository} implementations when recreating a trace from a, +	 * persistent store., +	 * @param request the request, +	 * @param response the response, +	 * @param timestamp the timestamp of the request-response exchange, +	 * @param principal the principal, if any, +	 * @param session the session, if any, +	 * @param timeTaken the time taken, in milliseconds, to complete the request-response, +	 * exchange, if known, +	 * @since 2.1.0, +	 */, +	public HttpTrace(Request request, Response response, Instant timestamp,, +			Principal principal, Session session, Long timeTaken) {, +		this.request = request;, +		this.response = response;, +		this.timestamp = timestamp;, +		this.principal = principal;, +		this.session = session;, +		this.timeTaken = timeTaken;, +	}, +, +		this.timestamp = Instant.now();, +			this(request.getMethod(), request.getUri(), request.getHeaders(),, +					request.getRemoteAddress());, +		}, +, +		/**, +		 * Creates a fully-configured {@code Request} instance. Primarly for use by, +		 * {@link HttpTraceRepository} implementations when recreating a request from a, +		 * persistent store., +		 * @param method the HTTP method of the request, +		 * @param uri the URI of the request, +		 * @param headers the request headers, +		 * @param remoteAddress remote address from which the request was sent, if known, +		 * @since 2.1.0, +		 */, +		public Request(String method, URI uri, Map<String, List<String>> headers,, +				String remoteAddress) {, +			this.method = method;, +			this.uri = uri;, +			this.headers = new LinkedHashMap<>(headers);, +			this.remoteAddress = remoteAddress;, +			this(response.getStatus(), response.getHeaders());, +		}, +, +		/**, +		 * Creates a fully-configured {@code Response} instance. Primarly for use by, +		 * {@link HttpTraceRepository} implementations when recreating a response from a, +		 * persistent store., +		 * @param status the status of the response, +		 * @param headers the response headers, +		 * @since 2.1.0, +		 */, +		public Response(int status, Map<String, List<String>> headers) {, +			this.status = status;, +			this.headers = new LinkedHashMap<>(headers);, +		/**, +		 * Creates a {@code Session}., +		 * @param id the session id, +		 * @since 2.1.0, +		 */, +		public Session(String id) {, +		/**, +		 * Creates a {@code Principal}., +		 * @param name the name of the principal, +		 * @since 2.1.0, +		 */, +		public Principal(String name) {]