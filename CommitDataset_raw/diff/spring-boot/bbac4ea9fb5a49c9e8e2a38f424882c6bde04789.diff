[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.ManagementErrorEndpoint;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +	@Value("${error.path:/error}"), +	private String errorPath = "/error";, +, +	public HandlerAdapter handlerAdapter() {, +		// TODO: maybe this needs more configuration for non-basic response use cases, +		RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();, +		adapter.setMessageConverters(new RestTemplate().getMessageConverters());, +		return adapter;, +	public HandlerMapping handlerMapping() {, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping();, +		// In a child context we definitely want to see the parent endpoints, +		mapping.setDetectHandlerMethodsInAncestorContexts(true);, +		return mapping;, +	public ManagementErrorEndpoint errorEndpoint(final ErrorController controller) {, +		return new ManagementErrorEndpoint(this.errorPath, controller);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.ManagementErrorEndpoint;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +	@Value("${error.path:/error}"), +	private String errorPath = "/error";, +, +	public HandlerAdapter handlerAdapter() {, +		// TODO: maybe this needs more configuration for non-basic response use cases, +		RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();, +		adapter.setMessageConverters(new RestTemplate().getMessageConverters());, +		return adapter;, +	public HandlerMapping handlerMapping() {, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping();, +		// In a child context we definitely want to see the parent endpoints, +		mapping.setDetectHandlerMethodsInAncestorContexts(true);, +		return mapping;, +	public ManagementErrorEndpoint errorEndpoint(final ErrorController controller) {, +		return new ManagementErrorEndpoint(this.errorPath, controller);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.ManagementErrorEndpoint;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +	@Value("${error.path:/error}"), +	private String errorPath = "/error";, +, +	public HandlerAdapter handlerAdapter() {, +		// TODO: maybe this needs more configuration for non-basic response use cases, +		RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();, +		adapter.setMessageConverters(new RestTemplate().getMessageConverters());, +		return adapter;, +	public HandlerMapping handlerMapping() {, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping();, +		// In a child context we definitely want to see the parent endpoints, +		mapping.setDetectHandlerMethodsInAncestorContexts(true);, +		return mapping;, +	public ManagementErrorEndpoint errorEndpoint(final ErrorController controller) {, +		return new ManagementErrorEndpoint(this.errorPath, controller);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.actuate.endpoint.mvc.FrameworkEndpoint;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.ResponseBody;, +@FrameworkEndpoint, +	@RequestMapping, +	@ResponseBody, +	public Report invoke() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.ManagementErrorEndpoint;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +	@Value("${error.path:/error}"), +	private String errorPath = "/error";, +, +	public HandlerAdapter handlerAdapter() {, +		// TODO: maybe this needs more configuration for non-basic response use cases, +		RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();, +		adapter.setMessageConverters(new RestTemplate().getMessageConverters());, +		return adapter;, +	public HandlerMapping handlerMapping() {, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping();, +		// In a child context we definitely want to see the parent endpoints, +		mapping.setDetectHandlerMethodsInAncestorContexts(true);, +		return mapping;, +	public ManagementErrorEndpoint errorEndpoint(final ErrorController controller) {, +		return new ManagementErrorEndpoint(this.errorPath, controller);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import org.springframework.boot.actuate.endpoint.mvc.FrameworkEndpoint;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.ResponseBody;, +@FrameworkEndpoint, +	@RequestMapping, +	@ResponseBody, +	public Report invoke() {]