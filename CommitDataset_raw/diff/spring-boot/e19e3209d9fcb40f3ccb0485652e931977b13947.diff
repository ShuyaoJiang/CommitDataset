[+++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationPidTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new ApplicationPid("123").toString()).isEqualTo("123");, +		assertThat(new ApplicationPid(null).toString()).isEqualTo("???");, +		assertThat(actual).isEqualTo("123");, +		assertThat(new ApplicationPid().toString()).isNotEmpty();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationPidTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new ApplicationPid("123").toString()).isEqualTo("123");, +		assertThat(new ApplicationPid(null).toString()).isEqualTo("???");, +		assertThat(actual).isEqualTo("123");, +		assertThat(new ApplicationPid().toString()).isNotEmpty();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(t1.getDir()).isNotNull();, +		assertThat(t1.getDir()).isEqualTo(t2.getDir());, +			assertThat(t1).isNotEqualTo(t2);, +		assertThat(temp.getDir("abc")).isEqualTo(new File(temp.getDir(), "abc"));, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationPidTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new ApplicationPid("123").toString()).isEqualTo("123");, +		assertThat(new ApplicationPid(null).toString()).isEqualTo("???");, +		assertThat(actual).isEqualTo("123");, +		assertThat(new ApplicationPid().toString()).isNotEmpty();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(t1.getDir()).isNotNull();, +		assertThat(t1.getDir()).isEqualTo(t2.getDir());, +			assertThat(t1).isNotEqualTo(t2);, +		assertThat(temp.getDir("abc")).isEqualTo(new File(temp.getDir(), "abc"));, +++ b/spring-boot/src/test/java/org/springframework/boot/BannerTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains("My Banner");, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationPidTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new ApplicationPid("123").toString()).isEqualTo("123");, +		assertThat(new ApplicationPid(null).toString()).isEqualTo("???");, +		assertThat(actual).isEqualTo("123");, +		assertThat(new ApplicationPid().toString()).isNotEmpty();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(t1.getDir()).isNotNull();, +		assertThat(t1.getDir()).isEqualTo(t2.getDir());, +			assertThat(t1).isNotEqualTo(t2);, +		assertThat(temp.getDir("abc")).isEqualTo(new File(temp.getDir(), "abc"));, +++ b/spring-boot/src/test/java/org/springframework/boot/BannerTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains("My Banner");, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myXmlComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myGroovyComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myGroovyComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myXmlComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myGroovyComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationPidTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new ApplicationPid("123").toString()).isEqualTo("123");, +		assertThat(new ApplicationPid(null).toString()).isEqualTo("???");, +		assertThat(actual).isEqualTo("123");, +		assertThat(new ApplicationPid().toString()).isNotEmpty();, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(t1.getDir()).isNotNull();, +		assertThat(t1.getDir()).isEqualTo(t2.getDir());, +			assertThat(t1).isNotEqualTo(t2);, +		assertThat(temp.getDir("abc")).isEqualTo(new File(temp.getDir(), "abc"));, +++ b/spring-boot/src/test/java/org/springframework/boot/BannerTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains(":: Spring Boot ::");, +		assertThat(this.out.toString()).contains("My Banner");, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myXmlComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);, +		assertThat(this.registry.containsBean("myGroovyComponent")).isTrue();, +		assertThat(loader.load()).isEqualTo(1);]