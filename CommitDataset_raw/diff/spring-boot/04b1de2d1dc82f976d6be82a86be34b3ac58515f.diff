[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> packageName;, +		private OptionSpec<String> packaging;, +, +			this.packageName = option("package-name", "Package name").withRequiredArg();, +			this.packaging = option(Arrays.asList("packaging", "p"),, +					"Project packaging (for example 'jar')").withRequiredArg();, +			if (options.has(this.packageName)) {, +				request.setPackageName(options.valueOf(this.packageName));, +			if (options.has(this.packaging)) {, +				request.setPackaging(options.valueOf(this.packaging));, +			}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> packageName;, +		private OptionSpec<String> packaging;, +, +			this.packageName = option("package-name", "Package name").withRequiredArg();, +			this.packaging = option(Arrays.asList("packaging", "p"),, +					"Project packaging (for example 'jar')").withRequiredArg();, +			if (options.has(this.packageName)) {, +				request.setPackageName(options.valueOf(this.packageName));, +			if (options.has(this.packaging)) {, +				request.setPackaging(options.valueOf(this.packaging));, +			}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +	private String packageName;, +	private String packaging;, +, +	 * Return the package name or {@code null} if it should not be customized., +	 * @return the package name or {@code null}, +	public String getPackageName() {, +		return packageName;, +	public void setPackageName(String packageName) {, +		this.packageName = packageName;, +	 * The packaging type or {@code null} if it should not be customized., +	 * @return the packaging type or {@code null}, +	 */, +	public String getPackaging() {, +		return this.packaging;, +	}, +, +	public void setPackaging(String packaging) {, +		this.packaging = packaging;, +	}, +, +	/**, +			if (this.packageName != null) {, +				builder.setParameter("packageName", this.packageName);, +			if (this.packaging != null) {, +				builder.setParameter("packaging", this.packaging);, +			}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> packageName;, +		private OptionSpec<String> packaging;, +, +			this.packageName = option("package-name", "Package name").withRequiredArg();, +			this.packaging = option(Arrays.asList("packaging", "p"),, +					"Project packaging (for example 'jar')").withRequiredArg();, +			if (options.has(this.packageName)) {, +				request.setPackageName(options.valueOf(this.packageName));, +			if (options.has(this.packaging)) {, +				request.setPackaging(options.valueOf(this.packaging));, +			}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +	private String packageName;, +	private String packaging;, +, +	 * Return the package name or {@code null} if it should not be customized., +	 * @return the package name or {@code null}, +	public String getPackageName() {, +		return packageName;, +	public void setPackageName(String packageName) {, +		this.packageName = packageName;, +	 * The packaging type or {@code null} if it should not be customized., +	 * @return the packaging type or {@code null}, +	 */, +	public String getPackaging() {, +		return this.packaging;, +	}, +, +	public void setPackaging(String packaging) {, +		this.packaging = packaging;, +	}, +, +	/**, +			if (this.packageName != null) {, +				builder.setParameter("packageName", this.packageName);, +			if (this.packaging != null) {, +				builder.setParameter("packaging", this.packaging);, +			}, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java, +				"--description=Acme sample project", "--package-name=demo.foo", "-t=ant-project",, +				"--build=grunt", "--format=web", "-p=war", "-j=1.9", "-l=groovy",, +		assertEquals("demo.foo", this.handler.lastRequest.getPackageName());, +		assertEquals("war", this.handler.lastRequest.getPackaging());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> packageName;, +		private OptionSpec<String> packaging;, +, +			this.packageName = option("package-name", "Package name").withRequiredArg();]