[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, + * @author Andy Wilkinson, +	@ConditionalOnBean(ObjectMapper.class), +	protected static class MappingJackson2HttpMessageConverterConfiguration {, +	@ConditionalOnBean(Gson.class), +	protected static class GsonHttpMessageConverterConfiguration {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, + * @author Andy Wilkinson, +	@ConditionalOnBean(ObjectMapper.class), +	protected static class MappingJackson2HttpMessageConverterConfiguration {, +	@ConditionalOnBean(Gson.class), +	protected static class GsonHttpMessageConverterConfiguration {, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\, +org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, + * @author Andy Wilkinson, +	@ConditionalOnBean(ObjectMapper.class), +	protected static class MappingJackson2HttpMessageConverterConfiguration {, +	@ConditionalOnBean(Gson.class), +	protected static class GsonHttpMessageConverterConfiguration {, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\, +org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java, +import java.util.Arrays;, +import java.util.List;, +, + * @author Andy Wilkinson, +	public void noObjectMapperMeansNoConverter() throws Exception {, +		this.context.register(HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.getBeansOfType(ObjectMapper.class).isEmpty());, +		assertTrue(this.context.getBeansOfType(MappingJackson2HttpMessageConverter.class), +				.isEmpty());, +	}, +, +	@Test, +	public void defaultJacksonConverter() throws Exception {, +, +		assertConverterBeanExists(MappingJackson2HttpMessageConverter.class,, +				"mappingJackson2HttpMessageConverter");, +, +		assertConverterBeanRegisteredWithHttpMessageConverters(MappingJackson2HttpMessageConverter.class);, +	}, +, +	@Test, +	public void customJacksonConverter() throws Exception {, +		this.context.register(JacksonConfig.class, JacksonConverterConfig.class,, +				HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +, +		assertConverterBeanExists(MappingJackson2HttpMessageConverter.class,, +				"customJacksonMessageConverter");, +	}, +, +	@Test, +	public void noGson() throws Exception {, +		this.context.register(HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.getBeansOfType(Gson.class).isEmpty());, +		assertTrue(this.context.getBeansOfType(GsonHttpMessageConverter.class).isEmpty());, +	}, +, +	@Test, +	public void defaultGsonConverter() throws Exception {, +		this.context.register(GsonConfig.class,, +				HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +		assertConverterBeanExists(GsonHttpMessageConverter.class,, +				"gsonHttpMessageConverter");, +, +		assertConverterBeanRegisteredWithHttpMessageConverters(GsonHttpMessageConverter.class);, +	}, +, +	@Test, +	public void customGsonConverter() throws Exception {, +		this.context.register(GsonConfig.class, GsonConverterConfig.class,, +				HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +		assertConverterBeanExists(GsonHttpMessageConverter.class,, +				"customGsonMessageConverter");, +, +		assertConverterBeanRegisteredWithHttpMessageConverters(GsonHttpMessageConverter.class);, +	}, +, +	private void assertConverterBeanExists(Class<?> type, String beanName) {, +		assertEquals(1, this.context.getBeansOfType(type).size());, +		List<String> beanNames = Arrays.asList(this.context.getBeanDefinitionNames());, +		assertTrue(beanName + " not found in " + beanNames, beanNames.contains(beanName));, +	}, +, +	private void assertConverterBeanRegisteredWithHttpMessageConverters(Class<?> type) {, +, +		Object converter = this.context.getBean(type);, +	@Configuration, +	protected static class JacksonConverterConfig {]