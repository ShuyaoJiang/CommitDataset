[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.context.ApplicationContext;, +	private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(ReactiveSecurityAutoConfiguration.class,, +					ReactiveUserDetailsServiceAutoConfiguration.class,, +					WebFluxAutoConfiguration.class, JacksonAutoConfiguration.class,, +					HttpMessageConvertersAutoConfiguration.class,, +					PropertyPlaceholderAutoConfiguration.class,, +					WebClientCustomizerConfig.class, WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class, EndpointAutoConfiguration.class,, +					WebEndpointAutoConfiguration.class, HealthEndpointAutoConfiguration.class,, +					ReactiveCloudFoundryActuatorAutoConfiguration.class));, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +			CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +		});, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +			WebTestClient webTestClient = WebTestClient.bindToApplicationContext(context), +		});, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +			CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +		});, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +			CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +		});, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id"), +				.run(context -> {, +			CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = context.getBean(, +		});, +		this.contextRunner, +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +			WebFilterChainProxy chainProxy = context.getBean(WebFilterChainProxy.class);, +		});, +, +		this.contextRunner, +				.run(context -> assertThat(, +						context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")), +						.isFalse());, +		this.contextRunner.withPropertyValues("VCAP_APPLICATION=---", "management.cloudfoundry.enabled:false"), +				.run(context -> assertThat(context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")), +						.isFalse());, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +					CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +				});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +					CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +				});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)), +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +					Collection<ExposableWebEndpoint> endpoints = getHandlerMapping(context).getEndpoints();, +				});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)), +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com",, +						"management.cloudfoundry.skip-ssl-validation:true"), +				.run(context -> {, +					CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +				});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(HealthEndpointAutoConfiguration.class)), +				.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.run(context -> {, +					CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping(context);, +				});, +	private CloudFoundryWebFluxEndpointHandlerMapping getHandlerMapping(ApplicationContext context) {, +		return context.getBean("cloudFoundryWebFluxEndpointHandlerMapping",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.context.ApplicationContext;, +	private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(ReactiveSecurityAutoConfiguration.class,, +					ReactiveUserDetailsServiceAutoConfiguration.class,, +					WebFluxAutoConfiguration.class, JacksonAutoConfiguration.class,, +					HttpMessageConvertersAutoConfiguration.class,, +					PropertyPlaceholderAutoConfiguration.class,]