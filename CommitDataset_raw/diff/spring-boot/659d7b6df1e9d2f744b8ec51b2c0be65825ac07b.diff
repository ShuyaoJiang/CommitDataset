[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +	/*, +	 * The bean name for a ServletRegistrationBean for the DispatcherServlet "/", +	 */, +	public static final String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME = "dispatcherServletRegistration";, +, +		@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME), +			registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +, +			ConditionOutcome outcome = checkServlets(beanFactory);, +, +			if (!outcome.isMatch()) {, +				return outcome;, +			}, +, +			return checkServletRegistrations(beanFactory);, +		}, +, +		private ConditionOutcome checkServlets(ConfigurableListableBeanFactory beanFactory) {, +, +, +		}, +, +		/**, +		 */, +		protected ConditionOutcome checkServletRegistrations(, +				ConfigurableListableBeanFactory beanFactory) {, +, +			List<String> registrations = Arrays.asList(beanFactory.getBeanNamesForType(, +					ServletRegistrationBean.class, false, false));, +			boolean containsDispatcherRegistrationBean = beanFactory, +					.containsBean(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +, +			if (registrations.isEmpty()) {, +				if (containsDispatcherRegistrationBean) {, +					return ConditionOutcome, +							.noMatch("found no ServletRegistrationBean but a non-ServletRegistrationBean named ", +									+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +				}, +				return ConditionOutcome.match("no ServletRegistrationBean found");, +			}, +, +			if (registrations.contains(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)) {, +				return ConditionOutcome.noMatch("found ServletRegistrationBean named ", +						+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +			}, +			if (containsDispatcherRegistrationBean) {, +				return ConditionOutcome, +						.noMatch("found non-ServletRegistrationBean named ", +								+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +			}, +, +			return ConditionOutcome, +					.match("one or more ServletRegistrationBeans is found and none is named ", +							+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +	/*, +	 * The bean name for a ServletRegistrationBean for the DispatcherServlet "/", +	 */, +	public static final String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME = "dispatcherServletRegistration";, +, +		@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME), +			registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);, +, +			ConditionOutcome outcome = checkServlets(beanFactory);, +, +			if (!outcome.isMatch()) {, +				return outcome;, +			}, +, +			return checkServletRegistrations(beanFactory);, +		}, +, +		private ConditionOutcome checkServlets(ConfigurableListableBeanFactory beanFactory) {, +, +, +		}, +, +		/**, +		 */, +		protected ConditionOutcome checkServletRegistrations(, +				ConfigurableListableBeanFactory beanFactory) {, +, +			List<String> registrations = Arrays.asList(beanFactory.getBeanNamesForType(, +					ServletRegistrationBean.class, false, false));, +			boolean containsDispatcherRegistrationBean = beanFactory, +					.containsBean(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +, +			if (registrations.isEmpty()) {, +				if (containsDispatcherRegistrationBean) {, +					return ConditionOutcome, +							.noMatch("found no ServletRegistrationBean but a non-ServletRegistrationBean named ", +									+ DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);, +				}, +				return ConditionOutcome.match("no ServletRegistrationBean found");, +			}, +, +			if (registrations.contains(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)) {, +				return ConditionOutcome.noMatch("found ServletRegistrationBean named "]