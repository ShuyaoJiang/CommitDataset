[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +		if (StringUtils.hasLength(this.jersey.getApplicationPath())) {, +			this.path = parseApplicationPath(this.jersey.getApplicationPath());, +			this.path = findApplicationPath(AnnotationUtils.findAnnotation(this.config.getClass(),, +	private static String findApplicationPath(ApplicationPath annotation) {, +		return parseApplicationPath(annotation.value());, +	private static String parseApplicationPath(String applicationPath) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +		if (StringUtils.hasLength(this.jersey.getApplicationPath())) {, +			this.path = parseApplicationPath(this.jersey.getApplicationPath());, +			this.path = findApplicationPath(AnnotationUtils.findAnnotation(this.config.getClass(),, +	private static String findApplicationPath(ApplicationPath annotation) {, +		return parseApplicationPath(annotation.value());, +	private static String parseApplicationPath(String applicationPath) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java, +	 * Path that serves as the base URI for the application. Overrides, +	 * the value of "@ApplicationPath" if specified., +	private String applicationPath;, +	public String getApplicationPath() {, +		return this.applicationPath;, +	public void setApplicationPath(String applicationPath) {, +		this.applicationPath = applicationPath;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +		if (StringUtils.hasLength(this.jersey.getApplicationPath())) {, +			this.path = parseApplicationPath(this.jersey.getApplicationPath());, +			this.path = findApplicationPath(AnnotationUtils.findAnnotation(this.config.getClass(),, +	private static String findApplicationPath(ApplicationPath annotation) {, +		return parseApplicationPath(annotation.value());, +	private static String parseApplicationPath(String applicationPath) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java, +	 * Path that serves as the base URI for the application. Overrides, +	 * the value of "@ApplicationPath" if specified., +	private String applicationPath;, +	public String getApplicationPath() {, +		return this.applicationPath;, +	public void setApplicationPath(String applicationPath) {, +		this.applicationPath = applicationPath;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationWithoutApplicationPathTests.java, +, +@IntegrationTest({ "server.port=0", "spring.jersey.application-path=/api" }), +				"http://localhost:" + this.port + "/api/hello", String.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +		if (StringUtils.hasLength(this.jersey.getApplicationPath())) {, +			this.path = parseApplicationPath(this.jersey.getApplicationPath());, +			this.path = findApplicationPath(AnnotationUtils.findAnnotation(this.config.getClass(),, +	private static String findApplicationPath(ApplicationPath annotation) {, +		return parseApplicationPath(annotation.value());, +	private static String parseApplicationPath(String applicationPath) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java, +	 * Path that serves as the base URI for the application. Overrides, +	 * the value of "@ApplicationPath" if specified., +	private String applicationPath;, +	public String getApplicationPath() {, +		return this.applicationPath;, +	public void setApplicationPath(String applicationPath) {, +		this.applicationPath = applicationPath;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationWithoutApplicationPathTests.java, +, +@IntegrationTest({ "server.port=0", "spring.jersey.application-path=/api" }), +				"http://localhost:" + this.port + "/api/hello", String.class);, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.jersey.application-path # path that serves as the base URI for the application]