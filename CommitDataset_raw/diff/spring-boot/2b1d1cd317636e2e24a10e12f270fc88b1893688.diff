[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +		if (welcomePage.isPresent() && "/**".equals(staticPathPattern)) {, +			logger.info("Adding welcome page: " + welcomePage.get());, +			setRootViewName("forward:index.html");, +		}, +		else if (welcomeTemplateExists(templateAvailabilityProviders,, +				applicationContext)) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +		if (welcomePage.isPresent() && "/**".equals(staticPathPattern)) {, +			logger.info("Adding welcome page: " + welcomePage.get());, +			setRootViewName("forward:index.html");, +		}, +		else if (welcomeTemplateExists(templateAvailabilityProviders,, +				applicationContext)) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMappingTests.java, +import java.util.Collections;, +import java.util.Map;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;, +import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;, +import org.springframework.test.web.servlet.MockMvc;, +import org.springframework.web.servlet.ViewResolver;, +import org.springframework.web.servlet.view.AbstractView;, +import org.springframework.web.servlet.view.InternalResourceView;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +	@Test, +	public void handlesRequestForTemplateThatAcceptsTextHtml() {, +		this.contextRunner.withUserConfiguration(TemplateConfiguration.class), +				.run((context) -> {, +					MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build();, +					mockMvc.perform(get("/").accept(MediaType.TEXT_HTML)), +							.andExpect(status().isOk()), +							.andExpect(content().string("index template"));, +				});, +	}, +, +	@Test, +	public void handlesRequestForTemplateThatAcceptsAll() {, +		this.contextRunner.withUserConfiguration(TemplateConfiguration.class), +				.run((context) -> {, +					MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build();, +					mockMvc.perform(get("/").accept(MediaType.ALL)), +							.andExpect(status().isOk()), +							.andExpect(content().string("index template"));, +				});, +	}, +, +	@Test, +	public void prefersAStaticResourceToATemplate() {, +		this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class,, +				TemplateConfiguration.class).run((context) -> {, +					MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build();, +					mockMvc.perform(get("/").accept(MediaType.ALL)), +							.andExpect(status().isOk()), +							.andExpect(forwardedUrl("index.html"));, +				});, +	}, +, +				ObjectProvider<TemplateAvailabilityProviders> templateAvailabilityProviders,, +					templateAvailabilityProviders.getIfAvailable(, +							() -> new TemplateAvailabilityProviders(applicationContext)),, +					applicationContext,, +, +	@Configuration, +	static class TemplateConfiguration {, +, +		@Bean, +		public TemplateAvailabilityProviders templateAvailabilityProviders() {, +			return new TestTemplateAvailabilityProviders((view, environment, classLoader,, +					resourceLoader) -> view.equals("index"));, +		}, +, +		@Bean, +		public ViewResolver viewResolver() {, +			return (name, locale) -> {, +				if (name.startsWith("forward:")) {, +					return new InternalResourceView(name.substring("forward:".length()));, +				}, +				return new AbstractView() {, +, +					@Override, +					protected void renderMergedOutputModel(Map<String, Object> model,, +							HttpServletRequest request, HttpServletResponse response), +									throws Exception {, +						response.getWriter().print(name + " template");, +					}, +, +				};, +			};, +		}, +, +	}, +, +	private static class TestTemplateAvailabilityProviders, +			extends TemplateAvailabilityProviders {, +, +		TestTemplateAvailabilityProviders(TemplateAvailabilityProvider provider) {, +			super(Collections.singletonList(provider));]