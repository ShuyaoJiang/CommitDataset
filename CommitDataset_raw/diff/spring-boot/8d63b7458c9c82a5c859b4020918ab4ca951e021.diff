[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java, +	@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class), +	private static class PreferGsonOrJacksonAndJsonbUnavailableCondition, +			extends AnyNestedCondition {, +		PreferGsonOrJacksonAndJsonbUnavailableCondition() {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson"), +		@Conditional(JacksonAndJsonbUnavailable.class), +		static class JacksonJsonbUnavailable {, +	private static class JacksonAndJsonbUnavailable extends NoneNestedConditions {, +		JacksonAndJsonbUnavailable() {, +		static class JsonbPreferred {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java, +	@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class), +	private static class PreferGsonOrJacksonAndJsonbUnavailableCondition, +			extends AnyNestedCondition {, +		PreferGsonOrJacksonAndJsonbUnavailableCondition() {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson"), +		@Conditional(JacksonAndJsonbUnavailable.class), +		static class JacksonJsonbUnavailable {, +	private static class JacksonAndJsonbUnavailable extends NoneNestedConditions {, +		JacksonAndJsonbUnavailable() {, +		static class JsonbPreferred {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +	private static class PreferJsonbOrMissingJacksonAndGsonCondition, +			extends AnyNestedCondition {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb"), +		@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class, GsonHttpMessageConverter.class }), +		static class JacksonAndGsonMissing {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java, +	@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class), +	private static class PreferGsonOrJacksonAndJsonbUnavailableCondition, +			extends AnyNestedCondition {, +		PreferGsonOrJacksonAndJsonbUnavailableCondition() {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson"), +		@Conditional(JacksonAndJsonbUnavailable.class), +		static class JacksonJsonbUnavailable {, +	private static class JacksonAndJsonbUnavailable extends NoneNestedConditions {, +		JacksonAndJsonbUnavailable() {, +		static class JsonbPreferred {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +	private static class PreferJsonbOrMissingJacksonAndGsonCondition, +			extends AnyNestedCondition {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb"), +		@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class, GsonHttpMessageConverter.class }), +		static class JacksonAndGsonMissing {, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "description": "Preferred JSON mapper to use for HTTP message conversion, auto-detected according to the environment by default.", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.java, +	@Conditional(PreferGsonOrJacksonAndJsonbUnavailableCondition.class), +	private static class PreferGsonOrJacksonAndJsonbUnavailableCondition, +			extends AnyNestedCondition {, +		PreferGsonOrJacksonAndJsonbUnavailableCondition() {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "gson"), +		@Conditional(JacksonAndJsonbUnavailable.class), +		static class JacksonJsonbUnavailable {, +	private static class JacksonAndJsonbUnavailable extends NoneNestedConditions {, +		JacksonAndJsonbUnavailable() {, +		static class JsonbPreferred {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +	private static class PreferJsonbOrMissingJacksonAndGsonCondition, +			extends AnyNestedCondition {, +		@ConditionalOnProperty(name = HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY, havingValue = "jsonb"), +		@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class, GsonHttpMessageConverter.class }), +		static class JacksonAndGsonMissing {, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "description": "Preferred JSON mapper to use for HTTP message conversion, auto-detected according to the environment by default.", +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.HidePackagesClassLoader;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.http.converter.HttpMessageConverter;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(, +					HttpMessageConvertersAutoConfiguration.class));, +	@Test, +	public void jacksonNotAvailable() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).doesNotHaveBean(ObjectMapper.class);, +			assertThat(context).doesNotHaveBean(MappingJackson2HttpMessageConverter.class);, +			assertThat(context).doesNotHaveBean(MappingJackson2XmlHttpMessageConverter.class);, +		});, +	public void jacksonDefaultConverter() {, +		this.contextRunner.withUserConfiguration(JacksonObjectMapperConfig.class), +				.run(assertConverter(MappingJackson2HttpMessageConverter.class,, +						"mappingJackson2HttpMessageConverter"));, +	public void jacksonConverterWithBuilder() {, +		this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class), +				.run(assertConverter(MappingJackson2HttpMessageConverter.class,, +						"mappingJackson2HttpMessageConverter"));, +	public void jacksonXmlConverterWithBuilder() {, +		this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class), +				.run(assertConverter(MappingJackson2XmlHttpMessageConverter.class,, +						"mappingJackson2XmlHttpMessageConverter"));, +	public void jacksonCustomConverter() {]