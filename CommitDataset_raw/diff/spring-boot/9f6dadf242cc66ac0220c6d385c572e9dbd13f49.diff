[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, += Deploying Spring Boot Applications, +deploying your application. You can deploy Spring Boot applications to a variety, +of cloud platforms, to container images (such as Docker), or to virtual/real machines., +== Deploying to the Cloud, +(Platform-as-a-Service) providers. These providers tend to require that you, +"`bring your own container`". They manage application processes (not Java applications, +In this section, we look at what it takes to get the, +stand-alone executable jar applications as well as traditional `.war` packaged, +Once you have built your application (by using, for example, `mvn clean package`) and have, +command line tool], deploy your application by using the `cf push` command,, +`cf` command line client] before pushing an application. The following line shows using, +the `cf push` command to deploy an application:, +NOTE: In the preceding example, we substitute `acloudyspringtime` for whatever value you give `cf`, +as the name of your application., +, +file present in the same directory, it is considered., +At this point, `cf` starts uploading your application, producing output similar to the, +following example:, +Once your application is live, you can verify the status of the deployed application by, +using the `cf apps` command, as shown in the following example:, +able to find the application at the URI given. In the preceding example, you could find, +it at `\http://acloudyspringtime.cfapps.io/`., +==== Binding to Services, +(any language and platform can be supported as a buildpack) nature. Process-scoped, +Environment variables do not always make for the easiest API, so Spring Boot automatically, +Spring's `Environment` abstraction, as shown in the following example:, +All Cloud Foundry properties are prefixed with `vcap`. You can use `vcap` properties to, +information (such as database credentials). See, +{dc-spring-boot}/cloud/CloudFoundryVcapEnvironmentPostProcessor.html['`CloudFoundryVcapEnvironmentPostProcessor`'], +You must configure your application to listen on the correct port. The following example, +shows the `Procfile` for our starter REST application:, +Tomcat, Jetty, or Undertow instance which, then uses the port when it starts up. The `$PORT`, +This should be everything you need. The most common deployment workflow for Heroku deployments is to, +`git push` the code to production, as shown in the following example:, +Kubernetes container orchestration platform.  Similarly to Kubernetes, OpenShift has many, +* https://blog.openshift.com/using-spring-boot-on-openshift/[Running as a traditional web application on Wildfly], +Amazon Web Services offers multiple ways to install Spring Boot-based applications, either, +server. The options include:, +Each has different features and pricing model. In this document, we describe only the, +simplest option: AWS Elastic Beanstalk., +Beanstalk Java guide], there are two main options to deploy a Java application. You can, +===== Using the Tomcat Platform, +This option applies to Spring Boot projects that produce a war file. There is no any special, +configuration required. You need only follow the official guide., +===== Using the Java SE Platform, +This option applies to Spring Boot projects that produce a jar file and run an embedded, +the actual application, running on port 5000. To configure it, add the following line to, +your `application.properties` file:, +[TIP], +.Upload binaries instead of sources, +====, +By default, Elastic Beanstalk uploads sources and compiles them in AWS. However, it is, +best to upload the binaries instead. To do so, add the following lines to your, +`.elasticbeanstalk/config.yml` file:, +====, +[TIP], +.Reduce costs by setting the environment type, +====, +By default an Elastic Beanstalk environment is load balanced. The load balancer has a, +significant cost. To avoid that cost, set the environment type to "`Single instance`", as, +described in, +http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-create-wizard.html#environments-create-wizard-capacity[the Amazon documentation]., +You can also create single instance environments by using the CLI and the, +following command:, +====, +to cover, such as how to integrate Elastic Beanstalk into any CI / CD tool, use the, +Elastic Beanstalk maven plugin instead of the CLI, and others. There is a, +https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/[blog post], +Boxfuse comes with deep integration for Spring Boot and uses the information from your, +resources it provisions (instances, security groups, elastic load balancers, and so on)., +Once you have created a https://console.boxfuse.com[Boxfuse account], connected it to, +your AWS account, installed the latest version of the Boxfuse Client, and ensured that, +the application has been built by Maven or Gradle (by using, for example, `mvn clean, +package`), you can deploy your Spring Boot application to AWS with a command similar to, +the following:, +[`boxfuse.conf`] file present in the current directory, it is considered., +TIP: By default, Boxfuse activates a Spring profile named `boxfuse` on startup. If, +file, Boxfuse bases its configuration based on the properties it contains., +At this point, `boxfuse` creates an image for your application, uploads it, and, +configures and starts the necessary resources on AWS resulting in output similar to the, +following example:, +See the blog post on https://boxfuse.com/blog/spring-boot-ec2.html[deploying Spring Boot, +apps on EC2] as well as the, +https://boxfuse.com/docs/payloads/springboot.html[documentation for the Boxfuse Spring, +Boot integration] to get started with a Maven build to run the app., +Google Cloud has several options that can be used to launch Spring Boot applications., +run Spring Boot in a container with Container Engine or on a virtual machine with, +To run in App Engine, you can create a project in the UI first, which sets up a unique, +identifier for you and also sets up HTTP routes. Add a Java app to the project and leave, +it empty and then use the https://cloud.google.com/sdk/downloads[Google Cloud SDK] to, +push your Spring Boot app into that slot from the command line or CI build., +requires. Normally you put this file in `src/main/appengine`, and it should resemble the, +following file:, +You can deploy the app (for example, with a Maven plugin) by adding the project ID, +to the build configuration, as shown in the following example:, +Then deploy with `mvn appengine:deploy` (if you need to authenticate first, the build, +fails)., +NOTE: Google App Engine Classic is tied to the Servlet 2.5 API, so you cannot deploy a, +== Installing Spring Boot Applications]