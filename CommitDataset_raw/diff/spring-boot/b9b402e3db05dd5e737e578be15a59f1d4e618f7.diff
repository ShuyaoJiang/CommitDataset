[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +import org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties;, +			this.project.afterEvaluate(evaluated -> {, +				BuildInfoProperties properties = bootBuildInfo.getProperties();, +				if (properties.getArtifact() == null) {, +					properties.setArtifact(determineArtifactBaseName());, +				}, +			});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +import org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties;, +			this.project.afterEvaluate(evaluated -> {, +				BuildInfoProperties properties = bootBuildInfo.getProperties();, +				if (properties.getArtifact() == null) {, +					properties.setArtifact(determineArtifactBaseName());, +				}, +			});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfo.java, +import org.gradle.api.Action;, +import org.gradle.api.Project;, + * {@code Project}., +	private final BuildInfoProperties properties = new BuildInfoProperties(getProject());, +, +	/**, +	 * Generates the {@code build-info.properties} file in the configured, +	 * {@link #setDestinationDir(File) destination}., +	 */, +							.writeBuildProperties(new ProjectDetails(, +									this.properties.getGroup(),, +									this.properties.getArtifact() == null ? "unspecified", +											: this.properties.getArtifact(),, +									this.properties.getVersion(),, +									this.properties.getName(), coerceToStringValues(, +											this.properties.getAdditional())));, +	/**, +	 * Returns the directory to which the {@code build-info.properties} file will be, +	 * written. Defaults to the {@link Project#getBuildDir() Project's build directory}., +	 *, +	 * @return the destination directory, +	 */, +		return this.destinationDir != null ? this.destinationDir, +				: getProject().getBuildDir();, +	/**, +	 * Sets the directory to which the {@code build-info.properties} file will be written., +	 *, +	 * @param destinationDir the destination directory, +	 */, +	/**, +	 * Returns the {@link BuildInfoProperties properties} that will be included in the, +	 * {@code build-info.properties} file., +	 *, +	 * @return the properties, +	 */, +	public BuildInfoProperties getProperties() {, +		return this.properties;, +	/**, +	 * Executes the given {@code action} on the {@link #getProperties()} properties., +	 *, +	 * @param action the action, +	 */, +	public void properties(Action<BuildInfoProperties> action) {, +		action.execute(this.properties);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +import org.springframework.boot.gradle.tasks.buildinfo.BuildInfoProperties;, +			this.project.afterEvaluate(evaluated -> {, +				BuildInfoProperties properties = bootBuildInfo.getProperties();, +				if (properties.getArtifact() == null) {, +					properties.setArtifact(determineArtifactBaseName());, +				}, +			});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfo.java, +import org.gradle.api.Action;, +import org.gradle.api.Project;, + * {@code Project}., +	private final BuildInfoProperties properties = new BuildInfoProperties(getProject());, +, +	/**, +	 * Generates the {@code build-info.properties} file in the configured, +	 * {@link #setDestinationDir(File) destination}., +	 */, +							.writeBuildProperties(new ProjectDetails(, +									this.properties.getGroup(),, +									this.properties.getArtifact() == null ? "unspecified", +											: this.properties.getArtifact(),, +									this.properties.getVersion(),, +									this.properties.getName(), coerceToStringValues(, +											this.properties.getAdditional())));, +	/**, +	 * Returns the directory to which the {@code build-info.properties} file will be, +	 * written. Defaults to the {@link Project#getBuildDir() Project's build directory}., +	 *, +	 * @return the destination directory, +	 */, +		return this.destinationDir != null ? this.destinationDir, +				: getProject().getBuildDir();, +	/**, +	 * Sets the directory to which the {@code build-info.properties} file will be written., +	 *, +	 * @param destinationDir the destination directory, +	 */, +	/**]