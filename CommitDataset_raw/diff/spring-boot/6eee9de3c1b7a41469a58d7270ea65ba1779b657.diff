[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/running.adoc, +The `bootRun` task is automatically configured to use the runtime classpath of the, +main source set. By default, the main class will be discovered by looking for a class, +with a `public static void main(String[])` method in directories on the task's, +classpath. The main class can also be configured explicitly using the task's `main`, +property:, +Two properties, `args` and `jvmArgs`, are also provided for configuring the, +arguments and JVM arguments that are used to run the application., +, +For more advanced configuration the `JavaExecSpec` that is used can be customized:, +, +[source,groovy,indent=0,subs="verbatim"], +----, +include::../gradle/running/boot-run-custom-exec-spec.gradle[tags=customization], +----, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/running.adoc, +The `bootRun` task is automatically configured to use the runtime classpath of the, +main source set. By default, the main class will be discovered by looking for a class, +with a `public static void main(String[])` method in directories on the task's, +classpath. The main class can also be configured explicitly using the task's `main`, +property:, +Two properties, `args` and `jvmArgs`, are also provided for configuring the, +arguments and JVM arguments that are used to run the application., +, +For more advanced configuration the `JavaExecSpec` that is used can be customized:, +, +[source,groovy,indent=0,subs="verbatim"], +----, +include::../gradle/running/boot-run-custom-exec-spec.gradle[tags=customization], +----, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/gradle/running/boot-run-custom-exec-spec.gradle, +buildscript {, +	dependencies {, +		classpath files(pluginClasspath.split(',')), +	}, +}, +, +apply plugin: 'org.springframework.boot', +apply plugin: 'java', +, +// tag::customization[], +bootRun {, +	execSpec {, +		systemProperty 'com.example.foo', 'bar', +	}, +}, +// end::customization[], +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/running.adoc, +The `bootRun` task is automatically configured to use the runtime classpath of the, +main source set. By default, the main class will be discovered by looking for a class, +with a `public static void main(String[])` method in directories on the task's, +classpath. The main class can also be configured explicitly using the task's `main`, +property:, +Two properties, `args` and `jvmArgs`, are also provided for configuring the, +arguments and JVM arguments that are used to run the application., +, +For more advanced configuration the `JavaExecSpec` that is used can be customized:, +, +[source,groovy,indent=0,subs="verbatim"], +----, +include::../gradle/running/boot-run-custom-exec-spec.gradle[tags=customization], +----, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/gradle/running/boot-run-custom-exec-spec.gradle, +buildscript {, +	dependencies {, +		classpath files(pluginClasspath.split(',')), +	}, +}, +, +apply plugin: 'org.springframework.boot', +apply plugin: 'java', +, +// tag::customization[], +bootRun {, +	execSpec {, +		systemProperty 'com.example.foo', 'bar', +	}, +}, +// end::customization[], +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +	@SuppressWarnings("unchecked"), +		run.setJvmArgs(project.provider(() -> {, +				return (List<String>) project.property("applicationDefaultJvmArgs");, +		}));, +		run.setMain(, +				project.provider(new MainClassConvention(project, run::getClasspath)));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/running.adoc, +The `bootRun` task is automatically configured to use the runtime classpath of the, +main source set. By default, the main class will be discovered by looking for a class, +with a `public static void main(String[])` method in directories on the task's, +classpath. The main class can also be configured explicitly using the task's `main`, +property:, +Two properties, `args` and `jvmArgs`, are also provided for configuring the, +arguments and JVM arguments that are used to run the application., +, +For more advanced configuration the `JavaExecSpec` that is used can be customized:, +, +[source,groovy,indent=0,subs="verbatim"], +----, +include::../gradle/running/boot-run-custom-exec-spec.gradle[tags=customization]]