[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(prefix = "spring.jta", value = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(prefix = "spring.jta", value = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.jta.enabled",, +    "dataType": "java.lang.Boolean",, +    "description": "Enable JTA support.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(prefix = "spring.jta", value = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.jta.enabled",, +    "dataType": "java.lang.Boolean",, +    "description": "Enable JTA support.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +	public void disableJtaSupport() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.enabled:false");, +		this.context.register(JtaAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(0, this.context.getBeansOfType(JtaTransactionManager.class).size());, +		assertEquals(0, this.context.getBeansOfType(XADataSourceWrapper.class).size());, +		assertEquals(0, this.context.getBeansOfType(XAConnectionFactoryWrapper.class).size());, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(prefix = "spring.jta", value = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.jta.enabled",, +    "dataType": "java.lang.Boolean",, +    "description": "Enable JTA support.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +	public void disableJtaSupport() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.enabled:false");, +		this.context.register(JtaAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(0, this.context.getBeansOfType(JtaTransactionManager.class).size());, +		assertEquals(0, this.context.getBeansOfType(XADataSourceWrapper.class).size());, +		assertEquals(0, this.context.getBeansOfType(XAConnectionFactoryWrapper.class).size());, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +participate in a distributed transaction. If you are within a JTA environment and still, +want to use local transactions you can set the `spring.jta.enabled` property to `false` to, +disable the JTA auto-configuration.]