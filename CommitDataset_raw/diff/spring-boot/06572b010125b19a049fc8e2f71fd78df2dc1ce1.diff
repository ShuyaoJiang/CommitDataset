[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class));, +		this.contextRunner.run((context) ->, +				assertThat(context).hasSingleBean(MongoClient.class));, +		this.contextRunner.withPropertyValues("spring.data.mongodb.host:localhost"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getMongoClientOptions(), +						.getSocketTimeout()).isEqualTo(300));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getMongoClientOptions(), +						.getSocketTimeout()).isEqualTo(300));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(SslOptionsConfig.class).run((context) -> {, +			assertThat(context).hasSingleBean(MongoClient.class);, +			MongoClient mongo = context.getBean(MongoClient.class);, +					.isSameAs(context.getBean("mySocketFactory"));, +		});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class));, +		this.contextRunner.run((context) ->, +				assertThat(context).hasSingleBean(MongoClient.class));, +		this.contextRunner.withPropertyValues("spring.data.mongodb.host:localhost"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getMongoClientOptions(), +						.getSocketTimeout()).isEqualTo(300));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getMongoClientOptions(), +						.getSocketTimeout()).isEqualTo(300));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(SslOptionsConfig.class).run((context) -> {, +			assertThat(context).hasSingleBean(MongoClient.class);, +			MongoClient mongo = context.getBean(MongoClient.class);, +					.isSameAs(context.getBean("mySocketFactory"));, +		});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, + * @author Stephane Nicoll, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(, +					MongoReactiveAutoConfiguration.class));, +		this.contextRunner.run((context) ->, +				assertThat(context).hasSingleBean(MongoClient.class));, +		this.contextRunner.withPropertyValues("spring.data.mongodb.host:localhost"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getSettings(), +						.getSocketSettings().getReadTimeout(TimeUnit.SECONDS)), +						.isEqualTo(300));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(OptionsConfig.class).run((context) ->, +				assertThat(context.getBean(MongoClient.class).getSettings(), +						.getReadPreference()).isEqualTo(ReadPreference.nearest()));, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test"), +				.withUserConfiguration(SslOptionsConfig.class).run((context) -> {, +			assertThat(context).hasSingleBean(MongoClient.class);, +			MongoClient mongo = context.getBean(MongoClient.class);, +					.isSameAs(context.getBean("myStreamFactoryFactory"));, +		});, +		this.contextRunner, +				.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test?appname=auto-config"), +				.withUserConfiguration(SimpleCustomizerConfig.class).run((context) -> {, +			assertThat(context).hasSingleBean(MongoClient.class);, +			MongoClient client = context.getBean(MongoClient.class);, +		});]