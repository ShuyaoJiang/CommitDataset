[+++ b/docs/howto.md, +## Use Jetty 9, +, +Jetty 9 works with Spring Boot, but the default is to use Jetty 8 (so, +we can support Java 1.6 out of the box). You should only need to, +change the classpath to use Jetty 9 for it to work., +, +If you are using the starter poms and parent you can just add the, +Jetty starter and change the version properties, e.g. for a simple, +webapp or service:, +, +	<properties>, +		<java.version>1.7</java.version>, +		<jetty.version>9.1.0.v20131115</jetty.version>, +		<servlet-api.version>3.1.0</servlet-api.version>, +	</properties>, +	<dependencies>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-web</artifactId>, +			<exclusions>, +				<exclusion>, +					<groupId>org.springframework.boot</groupId>, +					<artifactId>spring-boot-starter-tomcat</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-jetty</artifactId>, +		</dependency, +	</dependencies>, +    , +, +A value set this way is replaced by the System property or environment, +change the behaviour:, +* `config.location` (`CONFIG_LOCATION`) is file to load (e.g. a, +  classpath resource or a URL). A separate `Environment` property, +  source is set up for this document and it can be overridden by, +  system properties, environment variables or the command line., +  , +No matter what you set in the environment, Spring Boot will always, +load `application.properties` as described above. If YAML is used then, +files with the ".yml" extension are also added to the list by default., +++ b/docs/howto.md, +## Use Jetty 9, +, +Jetty 9 works with Spring Boot, but the default is to use Jetty 8 (so, +we can support Java 1.6 out of the box). You should only need to, +change the classpath to use Jetty 9 for it to work., +, +If you are using the starter poms and parent you can just add the, +Jetty starter and change the version properties, e.g. for a simple, +webapp or service:, +, +	<properties>, +		<java.version>1.7</java.version>, +		<jetty.version>9.1.0.v20131115</jetty.version>, +		<servlet-api.version>3.1.0</servlet-api.version>, +	</properties>, +	<dependencies>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-web</artifactId>, +			<exclusions>, +				<exclusion>, +					<groupId>org.springframework.boot</groupId>, +					<artifactId>spring-boot-starter-tomcat</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +			<artifactId>spring-boot-starter-jetty</artifactId>, +		</dependency, +	</dependencies>, +    , +, +A value set this way is replaced by the System property or environment, +change the behaviour:, +* `config.location` (`CONFIG_LOCATION`) is file to load (e.g. a, +  classpath resource or a URL). A separate `Environment` property, +  source is set up for this document and it can be overridden by, +  system properties, environment variables or the command line., +  , +No matter what you set in the environment, Spring Boot will always, +load `application.properties` as described above. If YAML is used then, +files with the ".yml" extension are also added to the list by default., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java, +import org.springframework.util.ReflectionUtils;, +				this.logger.info("Jetty started on port: " + getLocalPort(connector));, +	private String getLocalPort(Connector connector) {, +		try {, +			// Jetty 9 internals are different, but the method name is the same, +			return ((Integer) ReflectionUtils.invokeMethod(, +					ReflectionUtils.findMethod(connector.getClass(), "getLocalPort"),, +					connector)).toString();, +		}, +		catch (Exception e) {, +			return "could not determine port ( " + e.getMessage() + ")";]