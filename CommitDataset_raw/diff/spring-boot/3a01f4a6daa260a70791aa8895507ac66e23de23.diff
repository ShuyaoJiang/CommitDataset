[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addServerCustomizers((server) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addServerCustomizers((server) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +	 * Maps file extensions to media types for content negotiation, e.g. yml to text/yaml., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addServerCustomizers((server) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +	 * Maps file extensions to media types for content negotiation, e.g. yml to text/yaml., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.run((loaded) -> assertThat(loaded).hasSingleBean(DataSource.class));, +				Collections.singletonList("org.apache.tomcat"), (dataSource) ->, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addServerCustomizers((server) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +	 * Maps file extensions to media types for content negotiation, e.g. yml to text/yaml., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.run((loaded) -> assertThat(loaded).hasSingleBean(DataSource.class));, +				Collections.singletonList("org.apache.tomcat"), (dataSource) ->, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfigurationTests.java, +			return (factory) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addServerCustomizers((server) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +	 * Maps file extensions to media types for content negotiation, e.g. yml to text/yaml., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.run((loaded) -> assertThat(loaded).hasSingleBean(DataSource.class));, +				Collections.singletonList("org.apache.tomcat"), (dataSource) ->, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfigurationTests.java, +			return (factory) -> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +							.run((secondContext) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java, +				.map((className) -> ClassUtils.resolveClassName(className, null)), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +			return (schedulerFactoryBean) -> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, +					.forEach((customizer) -> customizer.customize(this.webClientBuilder));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java]