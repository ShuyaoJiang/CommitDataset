[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +import org.springframework.core.env.Environment;, +	private final boolean uniqueNames;, +, +			Environment environment, MBeanServer mBeanServer, String contextId) {, +		this.uniqueNames = determineUniqueNames(environment, properties);, +	}, +, +	@SuppressWarnings("deprecation"), +	private static boolean determineUniqueNames(Environment environment,, +			JmxEndpointProperties properties) {, +		Boolean uniqueName = environment.getProperty("spring.jmx.unique-names",, +				Boolean.class);, +		Boolean endpointUniqueNames = properties.getUniqueNames();, +		if (uniqueName == null) {, +			return (endpointUniqueNames != null) ? endpointUniqueNames : false;, +		}, +		else if (endpointUniqueNames != null & !uniqueName.equals(endpointUniqueNames)) {, +			throw new IllegalArgumentException(, +					"Configuration mismatch, 'management.endpoints.jmx.unique-names' is deprecated, use only 'spring.jmx.unique-names'");, +		}, +		return uniqueName;, +		if (this.uniqueNames) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +import org.springframework.core.env.Environment;, +	private final boolean uniqueNames;, +, +			Environment environment, MBeanServer mBeanServer, String contextId) {, +		this.uniqueNames = determineUniqueNames(environment, properties);, +	}, +, +	@SuppressWarnings("deprecation"), +	private static boolean determineUniqueNames(Environment environment,, +			JmxEndpointProperties properties) {, +		Boolean uniqueName = environment.getProperty("spring.jmx.unique-names",, +				Boolean.class);, +		Boolean endpointUniqueNames = properties.getUniqueNames();, +		if (uniqueName == null) {, +			return (endpointUniqueNames != null) ? endpointUniqueNames : false;, +		}, +		else if (endpointUniqueNames != null & !uniqueName.equals(endpointUniqueNames)) {, +			throw new IllegalArgumentException(, +					"Configuration mismatch, 'management.endpoints.jmx.unique-names' is deprecated, use only 'spring.jmx.unique-names'");, +		}, +		return uniqueName;, +		if (this.uniqueNames) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/JmxEndpointAutoConfiguration.java, +import org.springframework.core.env.Environment;, +			Environment environment, ObjectProvider<ObjectMapper> objectMapper,, +				this.properties, environment, mBeanServer, contextId);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +import org.springframework.core.env.Environment;, +	private final boolean uniqueNames;, +, +			Environment environment, MBeanServer mBeanServer, String contextId) {, +		this.uniqueNames = determineUniqueNames(environment, properties);, +	}, +, +	@SuppressWarnings("deprecation"), +	private static boolean determineUniqueNames(Environment environment,, +			JmxEndpointProperties properties) {, +		Boolean uniqueName = environment.getProperty("spring.jmx.unique-names",, +				Boolean.class);, +		Boolean endpointUniqueNames = properties.getUniqueNames();, +		if (uniqueName == null) {, +			return (endpointUniqueNames != null) ? endpointUniqueNames : false;, +		}, +		else if (endpointUniqueNames != null & !uniqueName.equals(endpointUniqueNames)) {, +			throw new IllegalArgumentException(, +					"Configuration mismatch, 'management.endpoints.jmx.unique-names' is deprecated, use only 'spring.jmx.unique-names'");, +		}, +		return uniqueName;, +		if (this.uniqueNames) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/JmxEndpointAutoConfiguration.java, +import org.springframework.core.env.Environment;, +			Environment environment, ObjectProvider<ObjectMapper> objectMapper,, +				this.properties, environment, mBeanServer, contextId);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/JmxEndpointProperties.java, +import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;, +	 * Whether unique runtime object names should be ensured., +	private Boolean uniqueNames;, +	@Deprecated, +	@DeprecatedConfigurationProperty(replacement = "spring.jmx.unique-names"), +	public Boolean getUniqueNames() {, +	@Deprecated, +	public void setUniqueNames(Boolean uniqueNames) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +import org.springframework.core.env.Environment;, +	private final boolean uniqueNames;, +, +			Environment environment, MBeanServer mBeanServer, String contextId) {, +		this.uniqueNames = determineUniqueNames(environment, properties);, +	}, +, +	@SuppressWarnings("deprecation"), +	private static boolean determineUniqueNames(Environment environment,, +			JmxEndpointProperties properties) {, +		Boolean uniqueName = environment.getProperty("spring.jmx.unique-names",, +				Boolean.class);, +		Boolean endpointUniqueNames = properties.getUniqueNames();]