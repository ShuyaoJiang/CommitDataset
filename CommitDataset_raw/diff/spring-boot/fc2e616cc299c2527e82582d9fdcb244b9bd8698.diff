[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +want to write log files in addition to the console output you need to set a, +`logging.file` or `logging.path` property (for example in your `application.properties`)., +|`logging.file` |`logging.path` |Example |Description, +|, +|Console only logging., +, +|Specific file, +|_(none)_, +|Writes to the specified log file. Names can be an exact location or relative to the, +current directory., +|Specific folder, +|`/var/log`, +|Writes `spring.log` the specified folder. Names can be an exact location or relative to the, +current directory., +Log files will rotate when they reach 10 Mb and as with console output, `ERROR`, `WARN`, +and `INFO` level messages are logged by default., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +want to write log files in addition to the console output you need to set a, +`logging.file` or `logging.path` property (for example in your `application.properties`)., +|`logging.file` |`logging.path` |Example |Description, +|, +|Console only logging., +, +|Specific file, +|_(none)_, +|Writes to the specified log file. Names can be an exact location or relative to the, +current directory., +|Specific folder, +|`/var/log`, +|Writes `spring.log` the specified folder. Names can be an exact location or relative to the, +current directory., +Log files will rotate when they reach 10 Mb and as with console output, `ERROR`, `WARN`, +and `INFO` level messages are logged by default., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public void initialize(String configLocation, LogFile logFile) {, +			else if (logFile != null) {, +	protected abstract void loadDefaults(LogFile logFile);, +	protected abstract void loadConfiguration(String location, LogFile logFile);, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +want to write log files in addition to the console output you need to set a, +`logging.file` or `logging.path` property (for example in your `application.properties`)., +|`logging.file` |`logging.path` |Example |Description, +|, +|Console only logging., +, +|Specific file, +|_(none)_, +|Writes to the specified log file. Names can be an exact location or relative to the, +current directory., +|Specific folder, +|`/var/log`, +|Writes `spring.log` the specified folder. Names can be an exact location or relative to the, +current directory., +Log files will rotate when they reach 10 Mb and as with console output, `ERROR`, `WARN`, +and `INFO` level messages are logged by default., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public void initialize(String configLocation, LogFile logFile) {, +			else if (logFile != null) {, +	protected abstract void loadDefaults(LogFile logFile);, +	protected abstract void loadConfiguration(String location, LogFile logFile);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.logging;, +, +import java.util.Properties;, +, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.PropertyResolver;, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * A reference to a log output file. Log output files are specified using, + * {@code logging.file} or {@code logging.path} {@link Environment} properties. If the, + * {@code logging.file} property is not specified {@code "spring.log"} will be written in, + * the {@code logging.path} directory., + *, + * @author Phillip Webb, + * @since 1.2.1, + * @see #get(PropertyResolver), + */, +public class LogFile {, +, +	/**]