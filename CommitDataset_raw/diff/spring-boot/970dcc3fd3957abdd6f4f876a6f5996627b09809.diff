[+++ b/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPidFileWriter.java, +import org.springframework.boot.context.event.ApplicationReadyEvent;, + * {@link ApplicationEnvironmentPreparedEvent}, {@link ApplicationReadyEvent}, or, + * {@link ApplicationPreparedEvent}., +			if (event instanceof ApplicationReadyEvent) {, +				return ((ApplicationReadyEvent) event).getApplicationContext(), +						.getEnvironment();, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPidFileWriter.java, +import org.springframework.boot.context.event.ApplicationReadyEvent;, + * {@link ApplicationEnvironmentPreparedEvent}, {@link ApplicationReadyEvent}, or, + * {@link ApplicationPreparedEvent}., +			if (event instanceof ApplicationReadyEvent) {, +				return ((ApplicationReadyEvent) event).getApplicationContext(), +						.getEnvironment();, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/system/ApplicationPidFileWriterTests.java, +import org.springframework.boot.context.event.ApplicationReadyEvent;, +	public void tryEnvironmentPreparedEvent() throws Exception {, +	public void tryReadyEvent() throws Exception {, +		File file = this.temporaryFolder.newFile();, +		SpringApplicationEvent event = createReadyEvent("spring.pid.file",, +				file.getAbsolutePath());, +		ApplicationPidFileWriter listener = new ApplicationPidFileWriter();, +		listener.onApplicationEvent(event);, +		assertThat(FileCopyUtils.copyToString(new FileReader(file))).isEmpty();, +		listener.setTriggerEventType(ApplicationReadyEvent.class);, +		listener.onApplicationEvent(event);, +		assertThat(FileCopyUtils.copyToString(new FileReader(file))).isNotEmpty();, +	}, +, +	@Test, +	private SpringApplicationEvent createReadyEvent(String propName, String propValue) {, +		ConfigurableEnvironment environment = createEnvironment(propName, propValue);, +		ConfigurableApplicationContext context = mock(, +				ConfigurableApplicationContext.class);, +		given(context.getEnvironment()).willReturn(environment);, +		return new ApplicationReadyEvent(new SpringApplication(), new String[] {},, +				context);, +	}, +]