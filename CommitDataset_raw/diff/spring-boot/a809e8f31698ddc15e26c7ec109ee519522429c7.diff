[+++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java, +	public static final TemporaryFolder temporaryFolder = new TemporaryFolder() {, +, +		@Override, +		public void delete() {, +, +		}, +, +	};, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java, +	public static final TemporaryFolder temporaryFolder = new TemporaryFolder() {, +, +		@Override, +		public void delete() {, +, +		}, +, +	};, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/org/springframework/boot/context/embedded/ApplicationBuilder.java, +import org.springframework.util.StringUtils;, +		File settingsXml = writeSettingsXml(appFolder);, +		packageApplication(appFolder, settingsXml);, +	private File writeSettingsXml(File appFolder) throws IOException {, +		String repository = System.getProperty("repository");, +		if (!StringUtils.hasText(repository)) {, +			return null;, +		}, +		context.put("repository", repository);, +		File settingsXml = new File(appFolder, "settings.xml");, +		try (FileWriter out = new FileWriter(settingsXml)) {, +		}, +		return settingsXml;, +	private void packageApplication(File appFolder, File settingsXml), +			throws MavenInvocationException {, +		if (settingsXml != null) {, +			invocation.setUserSettingsFile(settingsXml);, +		}, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java, +	public static final TemporaryFolder temporaryFolder = new TemporaryFolder() {, +, +		@Override, +		public void delete() {, +, +		}, +, +	};, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/java/org/springframework/boot/context/embedded/ApplicationBuilder.java, +import org.springframework.util.StringUtils;, +		File settingsXml = writeSettingsXml(appFolder);, +		packageApplication(appFolder, settingsXml);, +	private File writeSettingsXml(File appFolder) throws IOException {, +		String repository = System.getProperty("repository");, +		if (!StringUtils.hasText(repository)) {, +			return null;, +		}, +		context.put("repository", repository);, +		File settingsXml = new File(appFolder, "settings.xml");, +		try (FileWriter out = new FileWriter(settingsXml)) {, +		}, +		return settingsXml;, +	private void packageApplication(File appFolder, File settingsXml), +			throws MavenInvocationException {, +		if (settingsXml != null) {, +			invocation.setUserSettingsFile(settingsXml);, +		}, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/test/resources/settings-template.xml, +				<activeByDefault>true</activeByDefault>, +					<url>{{repository}}</url>, +					<url>{{repository}}</url>]