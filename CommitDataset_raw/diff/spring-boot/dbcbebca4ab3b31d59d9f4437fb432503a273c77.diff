[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +import org.springframework.boot.cli.command.test.TestFailedException;, +		catch(TestFailedException e) {, +			return 1;, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +import org.springframework.boot.cli.command.test.TestFailedException;, +		catch(TestFailedException e) {, +			return 1;, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestFailedException.java, +/*, + * Copyright 2014 original authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.cli.command.test;, +, +/**, + * Thrown when tests fail to execute, + *, + * @author Graeme Rocher, + * @since 1.2, + */, +public class TestFailedException extends RuntimeException {, +    public TestFailedException(Throwable cause) {, +        super(cause);, +    }, +}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +import org.springframework.boot.cli.command.test.TestFailedException;, +		catch(TestFailedException e) {, +			return 1;, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestFailedException.java, +/*, + * Copyright 2014 original authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.cli.command.test;, +, +/**, + * Thrown when tests fail to execute, + *, + * @author Graeme Rocher, + * @since 1.2, + */, +public class TestFailedException extends RuntimeException {, +    public TestFailedException(Throwable cause) {, +        super(cause);, +    }, +}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestRunner.java, +import java.lang.reflect.InvocationTargetException;, +	private volatile Throwable threadException;, +, +		runThread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +			@Override, +			public void uncaughtException(Thread t, Throwable e) {, +				// rethrow exception, +				threadException = e;, +			}, +		});, +, +		if(threadException != null) {, +			Throwable t = threadException;, +			threadException = null;, +			throw new TestFailedException(t);, +		}, +					ClassLoader contextClassLoader = Thread.currentThread(), +							.getContextClassLoader();, +					Class<?> delegateClass = contextClassLoader, +					Class resultClass = contextClassLoader.loadClass("org.junit.runner.Result");, +					Method runMethod = delegateClass.getMethod("run", Class[].class, resultClass);, +					Object result = resultClass.newInstance();, +					runMethod.invoke(null, this.testClasses, result);, +					Boolean wasSuccessful = (Boolean)resultClass.getMethod("wasSuccessful").invoke(result);, +					if(!wasSuccessful) {, +						try {]