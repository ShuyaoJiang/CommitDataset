[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-add-a-servlet-filter-or-listener]], +=== Add a Servlet, Filter or Listener to an application, +There are two ways to add `Servlet`, `Filter`, `ServletContextListener` and the other, +listeners supported by the Servlet spec to your application. You can either provide, +Spring beans for them, or enable scanning for Servlet components., +, +, +, +[[howto-add-a-servlet-filter-or-listener-as-spring-bean]], +==== Add a Servlet, Filter or Listener using a Spring bean, +To add a `Servlet`, `Filter`, or Servlet `*Listener` provide a `@Bean` definition for it., +This can be very useful when you want to inject configuration or dependencies. However,, +you must be very careful that they don't cause eager initialization of too many other, +beans because they have to be installed in the container very early in the application, +lifecycle (e.g. it's not a good idea to have them depend on your `DataSource` or JPA, +configuration). You can work around restrictions like that by initializing them lazily, +when first used instead of on initialization., +===== Disable registration of a Servlet or Filter, +[[howto-add-a-servlet-filter-or-listener-using-scanning]], +==== Add Servlets, Filters, and Listeners using classpath scanning, +`@WebServlet`, `@WebFilter`, and `@WebListener` annotated classes can be automatically, +registered with an embedded servlet container by annotating a `@Configuration` class, +with `@ServletComponentScan` and specifying the package(s) containing the components, +that you want to register. By default, `@ServletComponentScan` will scan from the package, +of the annotated class., +, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-add-a-servlet-filter-or-listener]], +=== Add a Servlet, Filter or Listener to an application, +There are two ways to add `Servlet`, `Filter`, `ServletContextListener` and the other, +listeners supported by the Servlet spec to your application. You can either provide, +Spring beans for them, or enable scanning for Servlet components., +, +, +, +[[howto-add-a-servlet-filter-or-listener-as-spring-bean]], +==== Add a Servlet, Filter or Listener using a Spring bean, +To add a `Servlet`, `Filter`, or Servlet `*Listener` provide a `@Bean` definition for it., +This can be very useful when you want to inject configuration or dependencies. However,, +you must be very careful that they don't cause eager initialization of too many other, +beans because they have to be installed in the container very early in the application, +lifecycle (e.g. it's not a good idea to have them depend on your `DataSource` or JPA, +configuration). You can work around restrictions like that by initializing them lazily, +when first used instead of on initialization., +===== Disable registration of a Servlet or Filter, +[[howto-add-a-servlet-filter-or-listener-using-scanning]], +==== Add Servlets, Filters, and Listeners using classpath scanning, +`@WebServlet`, `@WebFilter`, and `@WebListener` annotated classes can be automatically, +registered with an embedded servlet container by annotating a `@Configuration` class, +with `@ServletComponentScan` and specifying the package(s) containing the components, +that you want to register. By default, `@ServletComponentScan` will scan from the package, +of the annotated class., +, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-embedded-container-servlets-filters-listeners]], +==== Servlets, Filters, and listeners, +listeners from the Servlet spec (e.g. `HttpSessionListener`) either by using Spring beans, +or by scanning for Servlet components., +, +, +[[boot-features-embedded-container-servlets-filters-listeners-beans]], +===== Registering Servlets, Filters, and listeners as Spring beans, +Any `Servlet`, `Filter` or Servlet `*Listener` instance that is a Spring bean will be, +registered with the embedded container. This can be particularly convenient if you want to, +refer to a value from your `application.properties` during configuration., +[[boot-features-embedded-container-servlets-filters-listeners-scanning]], +===== Scanning for Servlets, Filters, and listeners, +When using an embedded container, automatic registration of `@WebServlet`, `@WebFilter`,, +and `@WebListener` annotated classes can be enabled using `@ServletComponentScan`., +, +TIP: `@ServletComponentScan` will have no effect in a standalone container, where the, +container's built-in discovery mechanisms will be used instead., +, +, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-add-a-servlet-filter-or-listener]], +=== Add a Servlet, Filter or Listener to an application, +There are two ways to add `Servlet`, `Filter`, `ServletContextListener` and the other, +listeners supported by the Servlet spec to your application. You can either provide, +Spring beans for them, or enable scanning for Servlet components., +, +, +, +[[howto-add-a-servlet-filter-or-listener-as-spring-bean]], +==== Add a Servlet, Filter or Listener using a Spring bean, +To add a `Servlet`, `Filter`, or Servlet `*Listener` provide a `@Bean` definition for it., +This can be very useful when you want to inject configuration or dependencies. However,, +you must be very careful that they don't cause eager initialization of too many other, +beans because they have to be installed in the container very early in the application, +lifecycle (e.g. it's not a good idea to have them depend on your `DataSource` or JPA, +configuration). You can work around restrictions like that by initializing them lazily, +when first used instead of on initialization., +===== Disable registration of a Servlet or Filter, +[[howto-add-a-servlet-filter-or-listener-using-scanning]], +==== Add Servlets, Filters, and Listeners using classpath scanning, +`@WebServlet`, `@WebFilter`, and `@WebListener` annotated classes can be automatically]