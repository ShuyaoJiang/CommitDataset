[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.propertySources.stream().flatMap(PropertySources::stream), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.propertySources.stream().flatMap(PropertySources::stream), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/FilteredPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.delegate.stream().filter(this::included).iterator();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.propertySources.stream().flatMap(PropertySources::stream), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/FilteredPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.delegate.stream().filter(this::included).iterator();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +import org.springframework.core.env.PropertySources;, +			PropertySources sources) {, +		return sources.stream().flatMap(ConfigurationPropertySources::flatten), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.propertySources.stream().flatMap(PropertySources::stream), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/FilteredPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.delegate.stream().filter(this::included).iterator();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +import org.springframework.core.env.PropertySources;, +			PropertySources sources) {, +		return sources.stream().flatMap(ConfigurationPropertySources::flatten), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +		if (this.environment == null) {, +			return Stream.empty();, +		}, +		return this.environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/EnvironmentEndpointDocumentationTests.java, +					environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.propertySources.stream().flatMap(PropertySources::stream), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/FilteredPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		return this.delegate.stream().filter(this::included).iterator();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +import org.springframework.core.env.PropertySources;, +			PropertySources sources) {, +		return sources.stream().flatMap(ConfigurationPropertySources::flatten), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +		if (this.environment == null) {, +			return Stream.empty();, +		}, +		return this.environment.getPropertySources().stream(), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +		propertySources.stream().map(JsonPropertyValue::get).filter(Objects::nonNull), +				.findFirst().ifPresent((v) -> processJson(environment, v));]