[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.SecurityProperties;, +import org.springframework.boot.actuate.properties.SecurityProperties.Management;, +import org.springframework.boot.actuate.properties.ShellProperties.CrshShellProperties;, + * into a Spring Boot enabled application. By default a SSH daemon is started on port, + * 2000. If the CRaSH Telnet plugin is available on the classpath, Telnet deamon will be, + * launched on port 5000., + * The default shell authentication method uses a username and password combination. If no, + * configuration is provided the default username is 'user' and the password will be, + * printed to console during application startup. Those default values can be overridden, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * , + * <p>, + * If a Spring Security {@link AuthenticationManager} is detected, this configuration will, + * create a {@link CRaSHPlugin} to forward shell authentication requests to Spring, + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * {@link AuthenticationManager} is available. In the latter case shell access will be, + * restricted to users having roles that match those configured in {@link Management}., + * Required roles can be overridden by <code>shell.auth.spring.roles</code>., + * registered with the underlying shell infrastructure. To configure plugins and the CRaSH, + * infrastructure add beans of type {@link CrshShellProperties} to the application, + * context., + * @see ShellProperties, +	/**, +	 * Class to configure CRaSH to authenticate against Spring Security., +	 */, +	@AutoConfigureAfter(CrshAutoConfiguration.class), +		@Autowired(required = false), +		private SecurityProperties securityProperties;, +, +		@Bean, +		@ConditionalOnExpression("'${shell.auth:default_spring}' == 'default_spring'"), +		@ConditionalOnMissingBean({ CrshShellAuthenticationProperties.class }), +		public CrshShellAuthenticationProperties springAuthenticationProperties() {, +			// In case no shell.auth property is provided fall back to Spring Security, +			// based authentication and get role to access shell from SecurityProperties., +			SpringAuthenticationProperties authenticationProperties = new SpringAuthenticationProperties();, +			if (this.securityProperties != null) {, +				authenticationProperties.setRoles(new String[] { this.securityProperties, +						.getManagement().getRole() });, +			}, +			return authenticationProperties;, +		}, +, +		private String[] roles = new String[] { "ADMIN" };, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.actuate.properties.SecurityProperties;, +import org.springframework.boot.actuate.properties.SecurityProperties.Management;, +import org.springframework.boot.actuate.properties.ShellProperties.CrshShellProperties;, + * into a Spring Boot enabled application. By default a SSH daemon is started on port, + * 2000. If the CRaSH Telnet plugin is available on the classpath, Telnet deamon will be, + * launched on port 5000., + * The default shell authentication method uses a username and password combination. If no, + * configuration is provided the default username is 'user' and the password will be, + * printed to console during application startup. Those default values can be overridden, + * by using <code>shell.auth.simple.username</code> and, + * <code>shell.auth.simple.password</code>., + * , + * <p>, + * If a Spring Security {@link AuthenticationManager} is detected, this configuration will, + * create a {@link CRaSHPlugin} to forward shell authentication requests to Spring, + * Security. This authentication method will get enabled if <code>shell.auth</code> is set, + * to <code>spring</code> or if no explicit <code>shell.auth</code> is provided and a, + * {@link AuthenticationManager} is available. In the latter case shell access will be, + * restricted to users having roles that match those configured in {@link Management}., + * Required roles can be overridden by <code>shell.auth.spring.roles</code>., + * registered with the underlying shell infrastructure. To configure plugins and the CRaSH, + * infrastructure add beans of type {@link CrshShellProperties} to the application, + * context., + * @see ShellProperties, +	/**, +	 * Class to configure CRaSH to authenticate against Spring Security., +	 */, +	@AutoConfigureAfter(CrshAutoConfiguration.class), +		@Autowired(required = false), +		private SecurityProperties securityProperties;, +, +		@Bean, +		@ConditionalOnExpression("'${shell.auth:default_spring}' == 'default_spring'"), +		@ConditionalOnMissingBean({ CrshShellAuthenticationProperties.class }), +		public CrshShellAuthenticationProperties springAuthenticationProperties() {, +			// In case no shell.auth property is provided fall back to Spring Security, +			// based authentication and get role to access shell from SecurityProperties., +			SpringAuthenticationProperties authenticationProperties = new SpringAuthenticationProperties();, +			if (this.securityProperties != null) {, +				authenticationProperties.setRoles(new String[] { this.securityProperties, +						.getManagement().getRole() });, +			}, +			return authenticationProperties;, +		}, +, +		private String[] roles = new String[] { "ADMIN" };, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +	@Test, +	public void testSpringAuthenticationProviderAsDefaultConfiguration() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(ManagementServerPropertiesAutoConfiguration.class);]