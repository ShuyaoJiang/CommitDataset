[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, + * Copyright 2012-2018 the original author or authors., +		AutoConfigurationClasses classes = new AutoConfigurationClasses(, +		toSort.addAll(classes.getAllNames());, +		sorted.retainAll(classNames);, +			addToClasses(metadataReaderFactory, autoConfigurationMetadata, classNames,, +					true);, +		}, +, +		public Set<String> getAllNames() {, +			return this.classes.keySet();, +		}, +, +		private void addToClasses(MetadataReaderFactory metadataReaderFactory,, +				AutoConfigurationMetadata autoConfigurationMetadata,, +				Collection<String> classNames, boolean required) {, +				if (!this.classes.containsKey(className)) {, +					AutoConfigurationClass autoConfigurationClass = new AutoConfigurationClass(, +							className, metadataReaderFactory, autoConfigurationMetadata);, +					boolean available = autoConfigurationClass.isAvailable();, +					if (required || available) {, +						this.classes.put(className, autoConfigurationClass);, +					}, +					if (available) {, +						addToClasses(metadataReaderFactory, autoConfigurationMetadata,, +								autoConfigurationClass.getBefore(), false);, +						addToClasses(metadataReaderFactory, autoConfigurationMetadata,, +								autoConfigurationClass.getAfter(), false);, +					}, +				}, +		private volatile AnnotationMetadata annotationMetadata;, +		private volatile Set<String> before;, +		private volatile Set<String> after;, +		}, +, +		public boolean isAvailable() {, +			try {, +				if (!wasProcessed()) {, +					getAnnotationMetadata();, +				}, +				return true;, +			}, +			catch (Exception ex) {, +				return false;, +			}, +			if (this.before == null) {, +				this.before = (wasProcessed(), +						? this.autoConfigurationMetadata.getSet(this.className,, +								"AutoConfigureBefore", Collections.emptySet()), +						: getAnnotationValue(AutoConfigureBefore.class));, +			}, +			if (this.after == null) {, +				this.after = (wasProcessed(), +						? this.autoConfigurationMetadata.getSet(this.className,, +								"AutoConfigureAfter", Collections.emptySet()), +						: getAnnotationValue(AutoConfigureAfter.class));, +			}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, + * Copyright 2012-2018 the original author or authors., +		AutoConfigurationClasses classes = new AutoConfigurationClasses(, +		toSort.addAll(classes.getAllNames());, +		sorted.retainAll(classNames);, +			addToClasses(metadataReaderFactory, autoConfigurationMetadata, classNames,, +					true);, +		}, +, +		public Set<String> getAllNames() {, +			return this.classes.keySet();, +		}, +, +		private void addToClasses(MetadataReaderFactory metadataReaderFactory,, +				AutoConfigurationMetadata autoConfigurationMetadata,, +				Collection<String> classNames, boolean required) {, +				if (!this.classes.containsKey(className)) {, +					AutoConfigurationClass autoConfigurationClass = new AutoConfigurationClass(, +							className, metadataReaderFactory, autoConfigurationMetadata);, +					boolean available = autoConfigurationClass.isAvailable();, +					if (required || available) {, +						this.classes.put(className, autoConfigurationClass);, +					}, +					if (available) {, +						addToClasses(metadataReaderFactory, autoConfigurationMetadata,, +								autoConfigurationClass.getBefore(), false);, +						addToClasses(metadataReaderFactory, autoConfigurationMetadata,, +								autoConfigurationClass.getAfter(), false);, +					}, +				}, +		private volatile AnnotationMetadata annotationMetadata;, +		private volatile Set<String> before;, +		private volatile Set<String> after;, +		}, +, +		public boolean isAvailable() {, +			try {, +				if (!wasProcessed()) {, +					getAnnotationMetadata();, +				}, +				return true;, +			}, +			catch (Exception ex) {]