[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.listener.AfterRollbackProcessor;, +import org.springframework.kafka.listener.ErrorHandler;, +import org.springframework.kafka.transaction.KafkaAwareTransactionManager;, +	private KafkaAwareTransactionManager<Object, Object> transactionManager;, +, +	private ErrorHandler errorHandler;, +, +	private AfterRollbackProcessor<Object, Object> afterRollbackProcessor;, +, +	 * Set the {@link KafkaAwareTransactionManager} to use., +	 * @param transactionManager the transaction manager, +	 */, +	public void setTransactionManager(, +			KafkaAwareTransactionManager<Object, Object> transactionManager) {, +		this.transactionManager = transactionManager;, +	}, +, +	/**, +	 * Set the {@link ErrorHandler} to use., +	 * @param errorHandler the error handler, +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		this.errorHandler = errorHandler;, +	}, +, +	/**, +	 * Set the {@link AfterRollbackProcessor} to use., +	 * @param afterRollbackProcessor the after rollback processor, +	 */, +	public void setAfterRollbackProcessor(, +			AfterRollbackProcessor<Object, Object> afterRollbackProcessor) {, +		this.afterRollbackProcessor = afterRollbackProcessor;, +	}, +, +	/**, +		map.from(this.errorHandler).whenNonNull().to(factory::setErrorHandler);, +		map.from(this.afterRollbackProcessor).whenNonNull(), +				.to(factory::setAfterRollbackProcessor);, +		map.from(this.transactionManager).whenNonNull(), +				.to(container::setTransactionManager);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.listener.AfterRollbackProcessor;, +import org.springframework.kafka.listener.ErrorHandler;, +import org.springframework.kafka.transaction.KafkaAwareTransactionManager;, +	private KafkaAwareTransactionManager<Object, Object> transactionManager;, +, +	private ErrorHandler errorHandler;, +, +	private AfterRollbackProcessor<Object, Object> afterRollbackProcessor;, +, +	 * Set the {@link KafkaAwareTransactionManager} to use., +	 * @param transactionManager the transaction manager, +	 */, +	public void setTransactionManager(, +			KafkaAwareTransactionManager<Object, Object> transactionManager) {, +		this.transactionManager = transactionManager;, +	}, +, +	/**, +	 * Set the {@link ErrorHandler} to use., +	 * @param errorHandler the error handler, +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		this.errorHandler = errorHandler;, +	}, +, +	/**, +	 * Set the {@link AfterRollbackProcessor} to use., +	 * @param afterRollbackProcessor the after rollback processor, +	 */, +	public void setAfterRollbackProcessor(, +			AfterRollbackProcessor<Object, Object> afterRollbackProcessor) {, +		this.afterRollbackProcessor = afterRollbackProcessor;, +	}, +, +	/**, +		map.from(this.errorHandler).whenNonNull().to(factory::setErrorHandler);, +		map.from(this.afterRollbackProcessor).whenNonNull(), +				.to(factory::setAfterRollbackProcessor);, +		map.from(this.transactionManager).whenNonNull(), +				.to(container::setTransactionManager);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.listener.AfterRollbackProcessor;, +import org.springframework.kafka.listener.ErrorHandler;, +import org.springframework.kafka.transaction.KafkaAwareTransactionManager;, +	private final KafkaAwareTransactionManager<Object, Object> transactionManager;, +, +	private final ErrorHandler errorHandler;, +, +	private final AfterRollbackProcessor<Object, Object> afterRollbackProcessor;, +, +			ObjectProvider<KafkaTemplate<Object, Object>> kafkaTemplate,, +			ObjectProvider<KafkaAwareTransactionManager<Object, Object>> kafkaTransactionManager,, +			ObjectProvider<ErrorHandler> errorHandler,, +			ObjectProvider<AfterRollbackProcessor<Object, Object>> afterRollbackProcessor) {, +		this.transactionManager = kafkaTransactionManager.getIfUnique();, +		this.errorHandler = errorHandler.getIfUnique();, +		this.afterRollbackProcessor = afterRollbackProcessor.getIfUnique();, +		configurer.setErrorHandler(this.errorHandler);]