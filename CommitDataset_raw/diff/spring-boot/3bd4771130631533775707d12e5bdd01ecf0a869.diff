[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java, +			return Math.abs(getSource().nextLong() % Long.parseLong(tokens[0]));, +		return lowerBound + Math.abs(getSource().nextLong() % upperBound);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java, +			return Math.abs(getSource().nextLong() % Long.parseLong(tokens[0]));, +		return lowerBound + Math.abs(getSource().nextLong() % upperBound);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/RandomValuePropertySourceTests.java, +import java.util.Random;, +, +import org.mockito.Mockito;, +, +	@Test, +	public void longOverflow() {, +		RandomValuePropertySource source = Mockito.spy(this.source);, +		Mockito.when(source.getSource()).thenReturn(new Random() {, +, +			@Override, +			public long nextLong() {, +				// constant that used to become -8, now becomes 8, +				return Long.MIN_VALUE;, +			}, +, +		});, +		Long value = (Long) source.getProperty("random.long(10)");, +		assertNotNull(value);, +		assertTrue(value + " is less than 0", value >= 0L);, +		assertTrue(value + " is more than 10", value < 10L);, +, +		value = (Long) source.getProperty("random.long[4,10]");, +		assertNotNull(value);, +		assertTrue(value + " is less than 4", value >= 4L);, +		assertTrue(value + " is more than 10", value < 10L);, +	}]