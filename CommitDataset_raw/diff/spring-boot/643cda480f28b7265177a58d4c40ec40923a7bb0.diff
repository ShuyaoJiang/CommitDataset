[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		ConnectionFactory rabbitConnectionFactory = connectionFactory, +				.getRabbitConnectionFactory();, +		String connectionFactoryName = getConnectionFactoryName(beanName);, +		new RabbitMetrics(rabbitConnectionFactory, this.metricName,, +				Tags.of("name", connectionFactoryName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		ConnectionFactory rabbitConnectionFactory = connectionFactory, +				.getRabbitConnectionFactory();, +		String connectionFactoryName = getConnectionFactoryName(beanName);, +		new RabbitMetrics(rabbitConnectionFactory, this.metricName,, +				Tags.of("name", connectionFactoryName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		String dataSourceName = getDataSourceName(beanName);, +				Tags.of("name", dataSourceName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		ConnectionFactory rabbitConnectionFactory = connectionFactory, +				.getRabbitConnectionFactory();, +		String connectionFactoryName = getConnectionFactoryName(beanName);, +		new RabbitMetrics(rabbitConnectionFactory, this.metricName,, +				Tags.of("name", connectionFactoryName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		String dataSourceName = getDataSourceName(beanName);, +				Tags.of("name", dataSourceName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +		MeterBinder meterBinder = getMeterBinder(cache, Tags.of(tags));, +	private MeterBinder getMeterBinder(Cache cache, Tags tags) {, +		tags = tags.and(getAdditionalTags(cache));, +							.getMeterBinder(cache, this.metricName, tags);, +		return Tags.of("name", cache.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		ConnectionFactory rabbitConnectionFactory = connectionFactory, +				.getRabbitConnectionFactory();, +		String connectionFactoryName = getConnectionFactoryName(beanName);, +		new RabbitMetrics(rabbitConnectionFactory, this.metricName,, +				Tags.of("name", connectionFactoryName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		String dataSourceName = getDataSourceName(beanName);, +				Tags.of("name", dataSourceName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +		MeterBinder meterBinder = getMeterBinder(cache, Tags.of(tags));, +	private MeterBinder getMeterBinder(Cache cache, Tags tags) {, +		tags = tags.and(getAdditionalTags(cache));, +							.getMeterBinder(cache, this.metricName, tags);, +		return Tags.of("name", cache.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, + * Copyright 2012-2018 the original author or authors., +	private final Tags tags;, +			Iterable<? extends Tag> tags) {, +		this.tags = Tags.of(tags);, +			Iterable<Tag> tagsWithSource = this.tags.and("source", source);, +			Iterable<Tag> tagsWithHandler = this.tags.and("handler", handler);, +			Iterable<Tag> tagsWithChannel = this.tags.and("channel", channel);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		ConnectionFactory rabbitConnectionFactory = connectionFactory, +				.getRabbitConnectionFactory();, +		String connectionFactoryName = getConnectionFactoryName(beanName);, +		new RabbitMetrics(rabbitConnectionFactory, this.metricName,, +				Tags.of("name", connectionFactoryName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		String dataSourceName = getDataSourceName(beanName);, +				Tags.of("name", dataSourceName)).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +		MeterBinder meterBinder = getMeterBinder(cache, Tags.of(tags));, +	private MeterBinder getMeterBinder(Cache cache, Tags tags) {, +		tags = tags.and(getAdditionalTags(cache));, +							.getMeterBinder(cache, this.metricName, tags);, +		return Tags.of("name", cache.getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, + * Copyright 2012-2018 the original author or authors., +	private final Tags tags;, +			Iterable<? extends Tag> tags) {, +		this.tags = Tags.of(tags);, +			Iterable<Tag> tagsWithSource = this.tags.and("source", source);, +			Iterable<Tag> tagsWithHandler = this.tags.and("handler", handler);, +			Iterable<Tag> tagsWithChannel = this.tags.and("channel", channel);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/RouterFunctionMetrics.java, +import reactor.core.publisher.Mono;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.function.server.HandlerFunction;, +	private final BiFunction<ServerRequest, ServerResponse, Iterable<Tag>> defaultTags;, +		Assert.notNull(registry, "Registry must not be null");, +		this.defaultTags = this::defaultTags;, +	}, +, +	private RouterFunctionMetrics(MeterRegistry registry,, +			BiFunction<ServerRequest, ServerResponse, Iterable<Tag>> defaultTags) {, +		Assert.notNull(registry, "Registry must not be null");, +		Assert.notNull(defaultTags, "DefaultTags must not be null");, +		this.registry = registry;, +		this.defaultTags = defaultTags;, +	}, +, +	private Iterable<Tag> defaultTags(ServerRequest request, ServerResponse response) {, +		if (response == null) {, +			return Tags.of(getMethodTag(request));, +		}, +		return Tags.of(getMethodTag(request), getStatusTag(response));, +	 * Returns a new {@link RouterFunctionMetrics} instance with the specified default, +	 * tags.]