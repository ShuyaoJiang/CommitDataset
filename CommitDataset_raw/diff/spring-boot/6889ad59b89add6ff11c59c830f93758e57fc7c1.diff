[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.core.annotation.Order;, +	@Bean, +	@Order(0), +	public PropertiesMeterFilter propertiesMeterFilter(MetricsProperties properties) {, +		return new PropertiesMeterFilter(properties);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.core.annotation.Order;, +	@Bean, +	@Order(0), +	public PropertiesMeterFilter propertiesMeterFilter(MetricsProperties properties) {, +		return new PropertiesMeterFilter(properties);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +	/**, +	 * Whether meter IDs starting-with the specified name should be enabled. The longest, +	 * match wins, the key `all` can also be used to configure all meters., +	 */, +	private Map<String, Boolean> enable = new LinkedHashMap<>();, +, +	private final Web web = new Web();, +, +	private final Distribution distribution = new Distribution();, +, +	public Map<String, Boolean> getEnable() {, +		return this.enable;, +	}, +, +	public void setEnable(Map<String, Boolean> enable) {, +		Assert.notNull(enable, "enable must not be null");, +		this.enable = enable;, +	}, +, +	public Distribution getDistribution() {, +		return this.distribution;, +	}, +, +	public static class Distribution {, +, +		/**, +		 * Whether meter IDs starting-with the specified name should be publish percentile, +		 * histograms. Monitoring systems that support aggregable percentile calculation, +		 * based on a histogram be set to true. For other systems, this has no effect. The, +		 * longest match wins, the key `all` can also be used to configure all meters., +		 */, +		private Map<String, Boolean> percentilesHistogram = new LinkedHashMap<>();, +, +		/**, +		 * Specific computed non-aggregable percentiles to ship to the backend for meter, +		 * IDs starting-with the specified name. The longest match wins, the key `all` can, +		 * also be used to configure all meters., +		 */, +		private Map<String, double[]> percentiles = new LinkedHashMap<>();, +, +		/**, +		 * Specific SLA boundaries for meter IDs starting-with the specified name. The, +		 * longest match wins, the key `all` can also be used to configure all meters., +		 * Counters will be published for each sepecified boundary. Values can be, +		 * specified as a long or as a Duration value (for timer meters, defaulting to ms, +		 * if no unit specified)., +		 */, +		private Map<String, ServiceLevelAgreementBoundary[]> sla = new LinkedHashMap<>();, +, +		public Map<String, Boolean> getPercentilesHistogram() {, +			return this.percentilesHistogram;, +		}, +, +		public void setPercentilesHistogram(Map<String, Boolean> percentilesHistogram) {, +			Assert.notNull(percentilesHistogram, "PercentilesHistogram must not be null");, +			this.percentilesHistogram = percentilesHistogram;, +		}, +, +		public Map<String, double[]> getPercentiles() {, +			return this.percentiles;, +		}, +, +		public void setPercentiles(Map<String, double[]> percentiles) {, +			Assert.notNull(percentiles, "Percentiles must not be null");, +			this.percentiles = percentiles;, +		}, +, +		public Map<String, ServiceLevelAgreementBoundary[]> getSla() {, +			return this.sla;, +		}, +, +		public void setSla(Map<String, ServiceLevelAgreementBoundary[]> sla) {, +			Assert.notNull(sla, "SLA must not be null");, +			this.sla = sla;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java]