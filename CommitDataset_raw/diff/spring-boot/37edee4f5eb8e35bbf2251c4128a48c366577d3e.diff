[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			ConditionEvaluationReport.get(this.beanFactory).recordEvaluationCandidates(, +					factories);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			ConditionEvaluationReport.get(this.beanFactory).recordEvaluationCandidates(, +					factories);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, +import java.util.HashSet;, +	private Set<String> unconditionalClasses = new HashSet<String>();, +, +		this.unconditionalClasses.remove(source);, +	 * Records the names of the classes that are candidates for condition evaluation, +	 * @param evaluationCandidates the names of the classes whose conditions will be, +	 * evaluated, +	 */, +	public void recordEvaluationCandidates(List<String> evaluationCandidates) {, +		Assert.notNull(evaluationCandidates, "evaluationCandidates must not be null");, +		this.unconditionalClasses = new HashSet<String>(evaluationCandidates);, +	}, +, +	/**, +	 * Returns the name of the classes that were evaluated but were not conditional., +	 * @return the names of the unconditional classes, +	 */, +	public Set<String> getUnconditionalClasses() {, +		return Collections.unmodifiableSet(this.unconditionalClasses);, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			ConditionEvaluationReport.get(this.beanFactory).recordEvaluationCandidates(, +					factories);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java, +import java.util.HashSet;, +	private Set<String> unconditionalClasses = new HashSet<String>();, +, +		this.unconditionalClasses.remove(source);, +	 * Records the names of the classes that are candidates for condition evaluation, +	 * @param evaluationCandidates the names of the classes whose conditions will be, +	 * evaluated, +	 */, +	public void recordEvaluationCandidates(List<String> evaluationCandidates) {, +		Assert.notNull(evaluationCandidates, "evaluationCandidates must not be null");, +		this.unconditionalClasses = new HashSet<String>(evaluationCandidates);, +	}, +, +	/**, +	 * Returns the name of the classes that were evaluated but were not conditional., +	 * @return the names of the unconditional classes, +	 */, +	public Set<String> getUnconditionalClasses() {, +		return Collections.unmodifiableSet(this.unconditionalClasses);, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java, +		message.append("Unconditional classes:\n");, +		message.append("----------------------\n");, +		if (report.getUnconditionalClasses().isEmpty()) {, +			message.append("\n    None\n");, +		}, +		else {, +			for (String unconditionalClass : report.getUnconditionalClasses()) {, +				message.append("\n   " + unconditionalClass + "\n");, +			}, +		}, +		message.append("\n\n");]