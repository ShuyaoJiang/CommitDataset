[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * @author Madhura Bhave, +		 * Include authorization header (if any)., +		 */, +		AUTHORIZATION_HEADER,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * @author Madhura Bhave, +		 * Include authorization header (if any)., +		 */, +		AUTHORIZATION_HEADER,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import java.util.HashSet;, +import java.util.Set;, + * @author Madhura Bhave, +		Set<String> excludedHeaders = new HashSet<String>();, +		if (!isIncluded(Include.COOKIES)) {, +			excludedHeaders.add("cookie");, +		}, +		if (!isIncluded(Include.AUTHORIZATION_HEADER)) {, +			excludedHeaders.add("authorization");, +		}, +			if (excludedHeaders.contains(name.toLowerCase())) {, +				continue;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * @author Madhura Bhave, +		 * Include authorization header (if any)., +		 */, +		AUTHORIZATION_HEADER,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import java.util.HashSet;, +import java.util.Set;, + * @author Madhura Bhave, +		Set<String> excludedHeaders = new HashSet<String>();, +		if (!isIncluded(Include.COOKIES)) {, +			excludedHeaders.add("cookie");, +		}, +		if (!isIncluded(Include.AUTHORIZATION_HEADER)) {, +			excludedHeaders.add("authorization");, +		}, +			if (excludedHeaders.contains(name.toLowerCase())) {, +				continue;, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, + * @author Madhura Bhave, +	public void filterDoesNotAddAuthorizationHeaderWithoutAuthorizationHeaderInclude(), +			throws ServletException, IOException {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.addHeader("Authorization", "my-auth-header");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		this.filter.doFilterInternal(request, response, new FilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +			}, +		});, +		Map<String, Object> info = this.repository.findAll().iterator().next().getInfo();, +		Map<String, Object> headers = (Map<String, Object>) info.get("headers");, +		assertThat(((Map) headers.get("request"))).hasSize(0);, +	}, +, +	@Test, +	@SuppressWarnings({ "unchecked" }), +	public void filterAddsAuthorizationHeaderWhenAuthorizationHeaderIncluded(), +			throws ServletException, IOException {, +		this.properties.setInclude(EnumSet.of(Include.REQUEST_HEADERS, Include.AUTHORIZATION_HEADER));, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.addHeader("Authorization", "my-auth-header");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		this.filter.doFilterInternal(request, response, new FilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +			}, +		});, +		Map<String, Object> info = this.repository.findAll().iterator().next().getInfo();, +		Map<String, Object> headers = (Map<String, Object>) info.get("headers");, +		assertThat(((Map) headers.get("request"))).containsKey("Authorization");, +	}, +, +	@Test, +	@SuppressWarnings({ "unchecked" })]