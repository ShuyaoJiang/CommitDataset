[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		if (isPersistSession()) {, +			configurePersistSession(manager);, +		}, +		else {, +			disablePersistSession(manager);, +		}, +	}, +, +	private void configurePersistSession(Manager manager) {, +, +	private void disablePersistSession(Manager manager) {, +		if (manager instanceof StandardManager) {, +			((StandardManager) manager).setPathname(null);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		if (isPersistSession()) {, +			configurePersistSession(manager);, +		}, +		else {, +			disablePersistSession(manager);, +		}, +	}, +, +	private void configurePersistSession(Manager manager) {, +, +	private void disablePersistSession(Manager manager) {, +		if (manager instanceof StandardManager) {, +			((StandardManager) manager).setPathname(null);, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +	protected final ServletContextInitializer sessionServletRegistration() {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		if (isPersistSession()) {, +			configurePersistSession(manager);, +		}, +		else {, +			disablePersistSession(manager);, +		}, +	}, +, +	private void configurePersistSession(Manager manager) {, +, +	private void disablePersistSession(Manager manager) {, +		if (manager instanceof StandardManager) {, +			((StandardManager) manager).setPathname(null);, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +	protected final ServletContextInitializer sessionServletRegistration() {, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java, +import java.io.File;, +import static org.hamcrest.Matchers.not;, +	@Test, +	public void disableDoesNotSaveSessionFiles() throws Exception {, +		File baseDir = this.temporaryFolder.newFolder();, +		TomcatEmbeddedServletContainerFactory factory = getFactory();, +		// If baseDir is not set SESSIONS.ser is written to a different temp folder, +		// each time. By setting it we can really ensure that data isn't saved, +		factory.setBaseDirectory(baseDir);, +		this.container = factory, +				.getEmbeddedServletContainer(sessionServletRegistration());, +		this.container.start();, +		String s1 = getResponse(getLocalUrl("/session"));, +		String s2 = getResponse(getLocalUrl("/session"));, +		this.container.stop();, +		this.container = factory, +				.getEmbeddedServletContainer(sessionServletRegistration());, +		this.container.start();, +		String s3 = getResponse(getLocalUrl("/session"));, +		System.out.println(s1);, +		System.out.println(s2);, +		System.out.println(s3);, +		String message = "Session error s1=" + s1 + " s2=" + s2 + " s3=" + s3;, +		assertThat(message, s2.split(":")[0], equalTo(s1.split(":")[1]));, +		assertThat(message, s3.split(":")[0], not(equalTo(s2.split(":")[1])));, +	}, +]