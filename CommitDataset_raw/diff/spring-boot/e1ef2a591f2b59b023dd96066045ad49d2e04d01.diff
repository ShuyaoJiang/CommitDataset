[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.assertj.core.api.Condition;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.test.context.ApplicationContextTester;, +import org.springframework.boot.test.context.AssertableApplicationContext;, +	public final ApplicationContextTester context = new ApplicationContextTester(), +			.withConfiguration(, +					AutoConfigurations.of(HealthIndicatorAutoConfiguration.class,, +							ManagementServerProperties.class));, +		this.context.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context.withPropertyValues("management.health.defaults.enabled:false"), +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context.withUserConfiguration(CustomHealthIndicator.class), +				.withPropertyValues("management.health.defaults.enabled:false"), +				.run((loaded) -> {, +					Map<String, HealthIndicator> beans = loaded, +					assertThat(loaded.getBean("customHealthIndicator")), +		this.context, +				.withPropertyValues("management.health.defaults.enabled:false",, +				.run(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(RedisHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class)), +				.withPropertyValues("management.health.redis.enabled:false",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,, +						MongoDataAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(MongoHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,, +						MongoDataAutoConfiguration.class)), +				.withPropertyValues("management.health.mongo.enabled:false",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,, +				SolrAutoConfiguration.class)).run((loaded) -> {, +					Map<String, HealthIndicator> beans = loaded, +		this.context, +				.withConfiguration(, +						AutoConfigurations.of(DataSourceAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(DataSourceHealthIndicator.class));, +		this.context, +				.withUserConfiguration(EmbeddedDataSourceConfiguration.class,, +						DataSourceConfig.class), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run((loaded) -> {, +					Map<String, HealthIndicator> beans = loaded, +		this.context, +				.withUserConfiguration(EmbeddedDataSourceConfiguration.class,, +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(DataSourceHealthIndicator.class));, +		this.context, +				.withUserConfiguration(DataSourceConfig.class,, +				.withPropertyValues(, +						"spring.datasource.test.validation-query:SELECT from FOOBAR",, +				.run((loaded) -> {, +					Map<String, HealthIndicator> beans = loaded, +		this.context.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("management.health.db.enabled:false",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(RabbitHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class)), +				.withPropertyValues("management.health.rabbit.enabled:false",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(SolrHealthIndicator.class));, +		this.context.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +				.withPropertyValues("management.health.solr.enabled:false",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context.run(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.context, +				.withConfiguration(, +						AutoConfigurations.of(MailSenderAutoConfiguration.class)), +				.withPropertyValues("spring.mail.host:smtp.acme.org",, +				.run(hasSingleHealthIndicator(MailHealthIndicator.class));, +		this.context, +				.withConfiguration(, +						AutoConfigurations.of(MailSenderAutoConfiguration.class)), +				.withPropertyValues("spring.mail.host:smtp.acme.org",, +				.run(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(ActiveMQAutoConfiguration.class)), +				.withPropertyValues("management.health.diskspace.enabled:false"), +				.run(hasSingleHealthIndicator(JmsHealthIndicator.class));, +		this.context, +				.withConfiguration(AutoConfigurations.of(ActiveMQAutoConfiguration.class)), +				.withPropertyValues("management.health.jms.enabled:false",]