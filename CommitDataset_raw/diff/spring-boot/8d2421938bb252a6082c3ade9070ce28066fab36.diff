[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +				reportFailure(exception, context);, +	private void reportFailure(Throwable failure,, +			ConfigurableApplicationContext context) {, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader(),, +					context)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +				reportFailure(exception, context);, +	private void reportFailure(Throwable failure,, +			ConfigurableApplicationContext context) {, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader(),, +					context)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.context.ConfigurableApplicationContext;, + * <p>, + * A {@code FailureAnalyzer} that requires access to the {@link BeanFactory} in order to, + * perform its analysis can implement {@code BeanFactoryAware} to have the, + * {@code BeanFactory} injected prior to {@link FailureAnalyzer#analyze(Throwable)} being, + * called., +	public static boolean analyzeAndReport(Throwable failure, ClassLoader classLoader,, +			ConfigurableApplicationContext context) {, +		FailureAnalysis analysis = analyze(failure, analyzers, context);, +			List<FailureAnalyzer> analyzers, ConfigurableApplicationContext context) {, +			prepareAnalyzer(context, analyzer);, +	private static void prepareAnalyzer(ConfigurableApplicationContext context,, +			FailureAnalyzer analyzer) {, +		if (analyzer instanceof BeanFactoryAware) {, +			((BeanFactoryAware) analyzer).setBeanFactory(context.getBeanFactory());, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +				reportFailure(exception, context);, +	private void reportFailure(Throwable failure,, +			ConfigurableApplicationContext context) {, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader(),, +					context)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.context.ConfigurableApplicationContext;, + * <p>, + * A {@code FailureAnalyzer} that requires access to the {@link BeanFactory} in order to, + * perform its analysis can implement {@code BeanFactoryAware} to have the, + * {@code BeanFactory} injected prior to {@link FailureAnalyzer#analyze(Throwable)} being, + * called., +	public static boolean analyzeAndReport(Throwable failure, ClassLoader classLoader,, +			ConfigurableApplicationContext context) {, +		FailureAnalysis analysis = analyze(failure, analyzers, context);, +			List<FailureAnalyzer> analyzers, ConfigurableApplicationContext context) {, +			prepareAnalyzer(context, analyzer);, +	private static void prepareAnalyzer(ConfigurableApplicationContext context,, +			FailureAnalyzer analyzer) {, +		if (analyzer instanceof BeanFactoryAware) {, +			((BeanFactoryAware) analyzer).setBeanFactory(context.getBeanFactory());, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BeanCurrentlyInCreationFailureAnalyzer.java, + * An {@link AbstractFailureAnalyzer} the performs analysis of failures caused by a, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +				reportFailure(exception, context);, +	private void reportFailure(Throwable failure,, +			ConfigurableApplicationContext context) {, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader(),, +					context)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.context.ConfigurableApplicationContext;, + * <p>, + * A {@code FailureAnalyzer} that requires access to the {@link BeanFactory} in order to, + * perform its analysis can implement {@code BeanFactoryAware} to have the, + * {@code BeanFactory} injected prior to {@link FailureAnalyzer#analyze(Throwable)} being, + * called., +	public static boolean analyzeAndReport(Throwable failure, ClassLoader classLoader,, +			ConfigurableApplicationContext context) {, +		FailureAnalysis analysis = analyze(failure, analyzers, context);, +			List<FailureAnalyzer> analyzers, ConfigurableApplicationContext context) {, +			prepareAnalyzer(context, analyzer);, +	private static void prepareAnalyzer(ConfigurableApplicationContext context,, +			FailureAnalyzer analyzer) {, +		if (analyzer instanceof BeanFactoryAware) {, +			((BeanFactoryAware) analyzer).setBeanFactory(context.getBeanFactory());, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BeanCurrentlyInCreationFailureAnalyzer.java, + * An {@link AbstractFailureAnalyzer} the performs analysis of failures caused by a, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]