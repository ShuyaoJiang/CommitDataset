[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		eventListeners.stream().forEach(sessionFactory::register);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		eventListeners.stream().forEach(sessionFactory::register);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +@ConfigurationProperties(prefix = "spring.data.neo4j"), +	 * Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		eventListeners.stream().forEach(sessionFactory::register);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +@ConfigurationProperties(prefix = "spring.data.neo4j"), +	 * Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +import org.neo4j.ogm.driver.NativeTypesNotAvailableException;, +import org.neo4j.ogm.driver.NativeTypesNotSupportedException;, +	public void shouldFailWhenNativeTypesAreNotAvailable() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotAvailableException.class);, +				});, +	public void shouldFailWhenNativeTypesAreNotSupported() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotSupportedException.class);, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		eventListeners.stream().forEach(sessionFactory::register);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +@ConfigurationProperties(prefix = "spring.data.neo4j"), +	 * Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +import org.neo4j.ogm.driver.NativeTypesNotAvailableException;, +import org.neo4j.ogm.driver.NativeTypesNotSupportedException;, +	public void shouldFailWhenNativeTypesAreNotAvailable() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotAvailableException.class);, +				});, +	public void shouldFailWhenNativeTypesAreNotSupported() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotSupportedException.class);, +				});, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	spring.data.neo4j.use-native-types=false # Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		eventListeners.stream().forEach(sessionFactory::register);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +@ConfigurationProperties(prefix = "spring.data.neo4j"), +	 * Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +import org.neo4j.ogm.driver.NativeTypesNotAvailableException;, +import org.neo4j.ogm.driver.NativeTypesNotSupportedException;, +	public void shouldFailWhenNativeTypesAreNotAvailable() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotAvailableException.class);, +				});, +	public void shouldFailWhenNativeTypesAreNotSupported() {, +				.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure()).hasRootCauseInstanceOf(, +							NativeTypesNotSupportedException.class);, +				});, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	spring.data.neo4j.use-native-types=false # Whether to use Neo4j native types wherever possible., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +==== Using Native Types, +Neo4j-OGM can map some types, like those in `java.time.*`, to `String`-based properties, +or to one of the native types that Neo4j provides. For backwards compatibility reasons, +the default for Neo4j-OGM is to use a `String`-based representation. To use native types,, +add a dependency on either `org.neo4j:neo4j-ogm-bolt-native-types` or, +`org.neo4j:neo4j-ogm-embedded-native-types`, and configure the, +`spring.data.neo4j.use-native-types` property as shown in the following example:]