[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration;, +@Import({ OAuth2AuthorizationServerConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration;, +@Import({ OAuth2AuthorizationServerConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.security.oauth2.authserver;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.UUID;, +, +import javax.annotation.PostConstruct;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.security.authentication.AuthenticationManager;, +import org.springframework.security.core.authority.AuthorityUtils;, +import org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder;, +import org.springframework.security.oauth2.config.annotation.builders.InMemoryClientDetailsServiceBuilder;, +import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;, +import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurer;, +import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;, +import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;, +import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;, +import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;, +import org.springframework.security.oauth2.provider.client.BaseClientDetails;, +import org.springframework.security.oauth2.provider.token.TokenStore;, +, +/**, + * Configuration for a Spring Security OAuth2 authorization server. Back off if another, + * {@link AuthorizationServerConfigurer} already exists or if authorization server is not, + * enabled., + *, + * @author Greg Turnquist, + * @author Dave Syer, + * @since 1.3.0, + */, +@Configuration, +@ConditionalOnClass(EnableAuthorizationServer.class), +@ConditionalOnMissingBean(AuthorizationServerConfigurer.class), +@ConditionalOnBean(AuthorizationServerEndpointsConfiguration.class), +@EnableConfigurationProperties, +public class OAuth2AuthorizationServerConfiguration extends, +		AuthorizationServerConfigurerAdapter {, +, +	private static final Log logger = LogFactory, +			.getLog(OAuth2AuthorizationServerConfiguration.class);, +, +	@Autowired, +	private BaseClientDetails details;, +, +	@Autowired, +	private AuthenticationManager authenticationManager;, +, +	@Autowired(required = false), +	private TokenStore tokenStore;, +, +	@Configuration, +	protected static class ClientDetailsLogger {, +, +		@Autowired, +		private OAuth2ClientProperties credentials;, +, +		@PostConstruct, +		public void init() {, +			String prefix = "spring.oauth2.client";, +			boolean defaultSecret = this.credentials.isDefaultSecret();, +			logger.info(String.format(, +					"Initialized OAuth2 Client\n\n%s.clientId = %s\n%s.secret = %s\n\n",, +					prefix, this.credentials.getClientId(), prefix,, +					defaultSecret ? this.credentials.getClientSecret() : "****"));, +		}, +]