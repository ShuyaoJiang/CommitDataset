[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataStore.java, +import java.io.FileNotFoundException;, +		FileObject fileObject = this.environment.getFiler(), +				.getResource(StandardLocation.CLASS_OUTPUT, "", ADDITIONAL_METADATA_PATH);, +		File file = locateAdditionalMetadataFile(new File(fileObject.toUri()));, +	File locateAdditionalMetadataFile(File standardLocation) throws IOException {, +		if (standardLocation.exists()) {, +			return standardLocation;, +		}, +		return new File(locateGradleResourcesFolder(standardLocation),, +				ADDITIONAL_METADATA_PATH);, +	}, +, +	private File locateGradleResourcesFolder(File standardAdditionalMetadataLocation), +			throws FileNotFoundException {, +		String path = standardAdditionalMetadataLocation.getPath();, +		int index = path.lastIndexOf(CLASSES_FOLDER);, +		if (index < 0) {, +			throw new FileNotFoundException();, +		}, +		String buildFolderPath = path.substring(0, index);, +		File classOutputLocation = standardAdditionalMetadataLocation.getParentFile(), +				.getParentFile();, +		return new File(buildFolderPath,, +				RESOURCES_FOLDER + '/' + classOutputLocation.getName());, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataStore.java, +import java.io.FileNotFoundException;, +		FileObject fileObject = this.environment.getFiler(), +				.getResource(StandardLocation.CLASS_OUTPUT, "", ADDITIONAL_METADATA_PATH);, +		File file = locateAdditionalMetadataFile(new File(fileObject.toUri()));, +	File locateAdditionalMetadataFile(File standardLocation) throws IOException {, +		if (standardLocation.exists()) {, +			return standardLocation;, +		}, +		return new File(locateGradleResourcesFolder(standardLocation),, +				ADDITIONAL_METADATA_PATH);, +	}, +, +	private File locateGradleResourcesFolder(File standardAdditionalMetadataLocation), +			throws FileNotFoundException {, +		String path = standardAdditionalMetadataLocation.getPath();, +		int index = path.lastIndexOf(CLASSES_FOLDER);, +		if (index < 0) {, +			throw new FileNotFoundException();, +		}, +		String buildFolderPath = path.substring(0, index);, +		File classOutputLocation = standardAdditionalMetadataLocation.getParentFile(), +				.getParentFile();, +		return new File(buildFolderPath,, +				RESOURCES_FOLDER + '/' + classOutputLocation.getName());, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/MetadataStoreTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor;, +, +import java.io.File;, +import java.io.IOException;, +, +import javax.annotation.processing.ProcessingEnvironment;, +, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.mockito.Mockito.mock;, +, +/**, + * Tests for {@link MetadataStore}., + *, + * @author Andy Wilkinson, + */, +public class MetadataStoreTests {, +, +	@Rule, +	public final TemporaryFolder temp = new TemporaryFolder();, +, +	private final MetadataStore metadataStore = new MetadataStore(, +			mock(ProcessingEnvironment.class));, +, +	@Test, +	public void additionalMetadataIsLocatedInMavenBuild() throws IOException {]