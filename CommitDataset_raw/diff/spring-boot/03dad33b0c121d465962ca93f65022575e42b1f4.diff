[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java, +import org.springframework.core.ResolvableType;, +, + * @param <T> The type of exception to analyze, + * @author Phillip Webb, +public abstract class AbstractFailureAnalyzer<T extends Throwable>, +		implements FailureAnalyzer {, +, +	@Override, +	public FailureAnalysis analyze(Throwable failure) {, +		T cause = findCause(failure, getCauseType());, +		if (cause != null) {, +			return analyze(failure, cause);, +		}, +		return null;, +	}, +, +	/**, +	 * Returns an analysis of the given {@code failure}, or {@code null} if no analysis, +	 * was possible., +	 * @param rootFailure the root failure passed to the analyzer, +	 * @param cause the actual found cause, +	 * @return the analysis or {@code null}, +	 */, +	protected abstract FailureAnalysis analyze(Throwable rootFailure, T cause);, +, +	/**, +	 * Return the cause type being handled by the analyzer. By default the class generic, +	 * is used., +	 * @return the cause type, +	 */, +	@SuppressWarnings("unchecked"), +	protected Class<? extends T> getCauseType() {, +		return (Class<? extends T>) ResolvableType, +				.forClass(AbstractFailureAnalyzer.class, getClass()).resolveGeneric();, +	}, +	protected final <E extends Throwable> T findCause(Throwable failure, Class<E> type) {, +		while (failure != null) {, +			if (type.isInstance(failure)) {, +				return (T) failure;, +			failure = failure.getCause();, +		return null;, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalyzers;, +			if (FailureAnalyzers.analyzeAndReport(failure, getClass().getClassLoader())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java, +import org.springframework.core.ResolvableType;, +, + * @param <T> The type of exception to analyze, + * @author Phillip Webb, +public abstract class AbstractFailureAnalyzer<T extends Throwable>, +		implements FailureAnalyzer {, +, +	@Override, +	public FailureAnalysis analyze(Throwable failure) {, +		T cause = findCause(failure, getCauseType());, +		if (cause != null) {, +			return analyze(failure, cause);, +		}, +		return null;, +	}, +, +	/**, +	 * Returns an analysis of the given {@code failure}, or {@code null} if no analysis, +	 * was possible., +	 * @param rootFailure the root failure passed to the analyzer, +	 * @param cause the actual found cause, +	 * @return the analysis or {@code null}, +	 */, +	protected abstract FailureAnalysis analyze(Throwable rootFailure, T cause);, +, +	/**, +	 * Return the cause type being handled by the analyzer. By default the class generic]