[+++ b/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +			<groupId>com.zaxxer</groupId>, +			<artifactId>HikariCP</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +			<groupId>com.zaxxer</groupId>, +			<artifactId>HikariCP</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Conditional(DataSourceAutoConfiguration.HikariDatabaseCondition.class), +	@ConditionalOnMissingBean(DataSource.class), +	@Import(HikariDataSourceConfiguration.class), +	protected static class HikariConfiguration {, +, +	}, +, +		private final Condition hikariCondition = new HikariDatabaseCondition();, +, +			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition)) {, +				return ConditionOutcome.noMatch("other DataSource");, +			}, +			return super.getMatchOutcome(context, metadata);, +		}, +, +	}, +, +	/**, +	 * {@link Condition} to detect when a Hikari DataSource backed database is used., +	 */, +	static class HikariDatabaseCondition extends NonEmbeddedDatabaseCondition {, +, +		private final Condition tomcatCondition = new TomcatDatabaseCondition();, +, +		@Override, +		protected String getDataSourceClassName() {, +			return "com.zaxxer.hikari.HikariDataSource";, +		}, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			if (anyMatches(context, metadata, this.tomcatCondition)) {, +		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();, +, +			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,, +					this.dbcpCondition)) {, +		private final SpringBootCondition hikariCondition = new HikariDatabaseCondition();, +, +			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition,, +					this.dbcpCondition, this.embeddedCondition)) {, +++ b/spring-boot-autoconfigure/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +			<groupId>com.zaxxer</groupId>, +			<artifactId>HikariCP</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Conditional(DataSourceAutoConfiguration.HikariDatabaseCondition.class), +	@ConditionalOnMissingBean(DataSource.class), +	@Import(HikariDataSourceConfiguration.class), +	protected static class HikariConfiguration {, +, +	}, +, +		private final Condition hikariCondition = new HikariDatabaseCondition();, +, +			if (anyMatches(context, metadata, this.hikariCondition, this.tomcatCondition)) {, +				return ConditionOutcome.noMatch("other DataSource");, +			}, +			return super.getMatchOutcome(context, metadata);, +		}, +, +	}, +, +	/**, +	 * {@link Condition} to detect when a Hikari DataSource backed database is used., +	 */, +	static class HikariDatabaseCondition extends NonEmbeddedDatabaseCondition {, +, +		private final Condition tomcatCondition = new TomcatDatabaseCondition();, +, +		@Override, +		protected String getDataSourceClassName() {, +			return "com.zaxxer.hikari.HikariDataSource";, +		}, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			if (anyMatches(context, metadata, this.tomcatCondition)) {]