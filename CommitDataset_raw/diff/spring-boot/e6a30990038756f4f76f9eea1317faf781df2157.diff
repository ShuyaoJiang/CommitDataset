[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, +	private final CounterBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferCounterService(CounterBuffers writer) {, +		this.writer = writer;, +		this.writer.increment(wrap(metricName), 1L);, +		this.writer.increment(wrap(metricName), -1L);, +		this.writer.reset(wrap(metricName));, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, +	private final CounterBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferCounterService(CounterBuffers writer) {, +		this.writer = writer;, +		this.writer.increment(wrap(metricName), 1L);, +		this.writer.increment(wrap(metricName), -1L);, +		this.writer.reset(wrap(metricName));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +	private final GaugeBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferGaugeService(GaugeBuffers writer) {, +		this.writer = writer;, +		this.writer.set(wrap(metricName), value);, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, +	private final CounterBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferCounterService(CounterBuffers writer) {, +		this.writer = writer;, +		this.writer.increment(wrap(metricName), 1L);, +		this.writer.increment(wrap(metricName), -1L);, +		this.writer.reset(wrap(metricName));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +	private final GaugeBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferGaugeService(GaugeBuffers writer) {, +		this.writer = writer;, +		this.writer.set(wrap(metricName), value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferMetricReader.java, +	private final CounterBuffers counters;, +	private final GaugeBuffers gauges;, +	private final Predicate<String> all = Pattern.compile(".*").asPredicate();, +	public BufferMetricReader(CounterBuffers counters, GaugeBuffers gauges) {, +		this.counters = counters;, +		this.gauges = gauges;, +		LongBuffer buffer = this.counters.find(name);, +		if (buffer != null) {, +			return new Metric<Long>(name, buffer.getValue(), new Date(, +					buffer.getTimestamp()));, +		DoubleBuffer doubleValue = this.gauges.find(name);, +		if (doubleValue != null) {, +			return new Metric<Double>(name, doubleValue.getValue(), new Date(, +					doubleValue.getTimestamp()));, +		}, +		return null;, +		return findAll(this.all);, +		return this.counters.count() + this.gauges.count();, +		this.counters.forEach(predicate, new BiConsumer<String, LongBuffer>() {, +			public void accept(String name, LongBuffer value) {, +				metrics.add(new Metric<Long>(name, value.getValue(), new Date(value, +						.getTimestamp())));, +		this.gauges.forEach(predicate, new BiConsumer<String, DoubleBuffer>() {, +, +			@Override, +			public void accept(String name, DoubleBuffer value) {, +				metrics.add(new Metric<Double>(name, value.getValue(), new Date(value, +						.getTimestamp())));, +		});, +		return metrics;, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, +	private final CounterBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferCounterService(CounterBuffers writer) {, +		this.writer = writer;, +		this.writer.increment(wrap(metricName), 1L);, +		this.writer.increment(wrap(metricName), -1L);, +		this.writer.reset(wrap(metricName));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +	private final GaugeBuffers writer;, +	 * @param writer the underlying writer used to manage metrics, +	public BufferGaugeService(GaugeBuffers writer) {, +		this.writer = writer;, +		this.writer.set(wrap(metricName), value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferMetricReader.java, +	private final CounterBuffers counters;, +	private final GaugeBuffers gauges;, +	private final Predicate<String> all = Pattern.compile(".*").asPredicate();, +	public BufferMetricReader(CounterBuffers counters, GaugeBuffers gauges) {, +		this.counters = counters;, +		this.gauges = gauges;, +		LongBuffer buffer = this.counters.find(name);, +		if (buffer != null) {, +			return new Metric<Long>(name, buffer.getValue(), new Date(, +					buffer.getTimestamp()));, +		DoubleBuffer doubleValue = this.gauges.find(name);, +		if (doubleValue != null) {, +			return new Metric<Double>(name, doubleValue.getValue(), new Date(]