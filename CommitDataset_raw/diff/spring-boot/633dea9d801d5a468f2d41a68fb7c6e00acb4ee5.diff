[+++ b/docs/howto.md, +See `ConfigFileApplicationListener` for more detail., +## Customize the Environment or ApplicationContext Before it Starts, +, +A `SpringApplication` has `ApplicationListeners` and, +`ApplicationContextInitializers` that are used to apply customizations, +to the context or environment. Spring Boot loads a number of such, +customizations for use internally from, +`META-INF/spring.factories`. There is more than one way to register, +additional ones:, +, +* programmatically per application by calling the `addListeners` and, +  `addInitializers` methods on `SpringApplication` before you run it, +* declaratively per application by setting, +  `context.initializer.classes` or `context.listener.classes`, +* declarative for all applications by adding a, +  `MTEA-INF/spring.factories` and packaging a jar file that the, +  applications all use as a library, +  , +Any `ApplicationContextInitializer` registered programmatically or via, +`spring.factories` that is also an `ApplicationListener` will be, +automatically cross registered (and vice versa for listeners that are, +also initializers).  The `SpringApplication` sends some special, +`ApplicationEvents` to the listeners (even some before the context is, +created), and then registers the listeners for events published by the, +`ApplicationContext` as well:, +, +* `SpringApplicationStartEvent` at the start of a run, but before any, +  processing except the registration of listeners and initializers., +* `SpringApplicationEnvironmentAvailableEvent` when the `Environment`, +  to be used in the context is known, but before the context is, +  created., +* `SpringApplicationBeforeRefreshEvent` just before the refresh is, +  started, but after bean definitions have been loaded., +* `SpringApplicationErrorEvent` if there is an exception on startup., +, +, +++ b/docs/howto.md, +See `ConfigFileApplicationListener` for more detail., +## Customize the Environment or ApplicationContext Before it Starts, +, +A `SpringApplication` has `ApplicationListeners` and, +`ApplicationContextInitializers` that are used to apply customizations, +to the context or environment. Spring Boot loads a number of such, +customizations for use internally from, +`META-INF/spring.factories`. There is more than one way to register, +additional ones:, +, +* programmatically per application by calling the `addListeners` and, +  `addInitializers` methods on `SpringApplication` before you run it, +* declaratively per application by setting, +  `context.initializer.classes` or `context.listener.classes`, +* declarative for all applications by adding a, +  `MTEA-INF/spring.factories` and packaging a jar file that the, +  applications all use as a library, +  , +Any `ApplicationContextInitializer` registered programmatically or via, +`spring.factories` that is also an `ApplicationListener` will be, +automatically cross registered (and vice versa for listeners that are, +also initializers).  The `SpringApplication` sends some special, +`ApplicationEvents` to the listeners (even some before the context is, +created), and then registers the listeners for events published by the, +`ApplicationContext` as well:, +, +* `SpringApplicationStartEvent` at the start of a run, but before any, +  processing except the registration of listeners and initializers., +* `SpringApplicationEnvironmentAvailableEvent` when the `Environment`, +  to be used in the context is known, but before the context is, +  created., +* `SpringApplicationBeforeRefreshEvent` just before the refresh is, +  started, but after bean definitions have been loaded., +* `SpringApplicationErrorEvent` if there is an exception on startup., +, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.SpringApplicationBeforeRefreshEvent;, +		logging.onApplicationEvent(new SpringApplicationBeforeRefreshEvent(, +				new SpringApplication(), context, new String[0]));, +++ b/docs/howto.md, +See `ConfigFileApplicationListener` for more detail., +## Customize the Environment or ApplicationContext Before it Starts, +, +A `SpringApplication` has `ApplicationListeners` and, +`ApplicationContextInitializers` that are used to apply customizations, +to the context or environment. Spring Boot loads a number of such, +customizations for use internally from, +`META-INF/spring.factories`. There is more than one way to register, +additional ones:, +, +* programmatically per application by calling the `addListeners` and, +  `addInitializers` methods on `SpringApplication` before you run it, +* declaratively per application by setting, +  `context.initializer.classes` or `context.listener.classes`, +* declarative for all applications by adding a, +  `MTEA-INF/spring.factories` and packaging a jar file that the, +  applications all use as a library, +  , +Any `ApplicationContextInitializer` registered programmatically or via, +`spring.factories` that is also an `ApplicationListener` will be]