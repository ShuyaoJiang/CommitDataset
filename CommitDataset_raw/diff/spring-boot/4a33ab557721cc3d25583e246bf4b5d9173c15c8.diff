[+++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnExpression("${spring.aop.auto:true}"), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnExpression("${spring.aop.auto:true}"), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@Value("${spring.batch.job.names:}"), +	private String jobNames;, +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		if (StringUtils.hasText(this.jobNames)) {, +			runner.setJobNames(this.jobNames);, +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnExpression("${spring.aop.auto:true}"), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@Value("${spring.batch.job.names:}"), +	private String jobNames;, +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		if (StringUtils.hasText(this.jobNames)) {, +			runner.setJobNames(this.jobNames);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +public class BatchDatabaseInitializer implements EnvironmentAware {, +	private static final String DEFAULT_SCHEMA_LOCATION = "classpath:org/springframework/", +			+ "batch/core/schema-@@platform@@.sql";, +	@Value("${spring.batch.initializer.enabled:true}"), +	private boolean enabled = true;, +, +	private RelaxedPropertyResolver environment;, +, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = new RelaxedPropertyResolver(environment, "spring.batch.");, +	}, +, +		if (this.enabled) {, +			String schemaLocation = this.environment.getProperty("schema",, +					DEFAULT_SCHEMA_LOCATION);, +++ b/pom.xml, +	<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.1.5.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnExpression("${spring.aop.auto:true}"), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@Value("${spring.batch.job.names:}"), +	private String jobNames;, +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		if (StringUtils.hasText(this.jobNames)) {, +			runner.setJobNames(this.jobNames);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +public class BatchDatabaseInitializer implements EnvironmentAware {, +	private static final String DEFAULT_SCHEMA_LOCATION = "classpath:org/springframework/"]