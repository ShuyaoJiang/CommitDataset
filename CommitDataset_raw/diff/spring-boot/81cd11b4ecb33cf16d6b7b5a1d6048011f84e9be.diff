[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		JpaRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		JpaRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.data.mongodb.repository.config.MongoRepositoryConfigurationExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		MongoRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		JpaRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.data.mongodb.repository.config.MongoRepositoryConfigurationExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		MongoRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.data.solr.repository.config.SolrRepositoryConfigExtension;, + * @author Oliver Gierke, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		SolrRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		JpaRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.data.mongodb.repository.config.MongoRepositoryConfigurationExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		MongoRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.data.solr.repository.config.SolrRepositoryConfigExtension;, + * @author Oliver Gierke, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		SolrRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfigurationTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +		prepareApplicationContext(TestConfiguration.class);, +, +		prepareApplicationContext(CustomConfiguration.class);, +, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories() {, +		prepareApplicationContext(SortOfInvalidCustomConfiguration.class);, +, +		this.context.getBean(CityRepository.class);, +	}, +, +	private void prepareApplicationContext(Class<?>... configurationClasses) {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(configurationClasses);, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				HibernateJpaAutoConfiguration.class,, +				JpaRepositoriesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +	}, +, +	@Configuration, +	// To not find any repositories, +	@EnableJpaRepositories("foo.bar"), +	@TestAutoConfigurationPackage(City.class), +	protected static class SortOfInvalidCustomConfiguration {, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		JpaRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.data.mongodb.repository.config.MongoRepositoryConfigurationExtension;, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		MongoRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.data.solr.repository.config.SolrRepositoryConfigExtension;, + * @author Oliver Gierke, +@ConditionalOnMissingBean({ RepositoryFactoryBeanSupport.class,, +		SolrRepositoryConfigExtension.class }), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfigurationTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +		prepareApplicationContext(TestConfiguration.class);, +, +		prepareApplicationContext(CustomConfiguration.class);, +, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories() {, +		prepareApplicationContext(SortOfInvalidCustomConfiguration.class);, +, +		this.context.getBean(CityRepository.class);, +	}, +, +	private void prepareApplicationContext(Class<?>... configurationClasses) {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(configurationClasses);, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				HibernateJpaAutoConfiguration.class,, +				JpaRepositoriesAutoConfiguration.class,]