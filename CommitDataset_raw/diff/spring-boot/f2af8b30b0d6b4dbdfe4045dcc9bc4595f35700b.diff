[+++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, + 		<!-- Compile (should stick to the bare minimum) -->, +		<!-- Test -->, +++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, + 		<!-- Compile (should stick to the bare minimum) -->, +		<!-- Test -->, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		for (Map.Entry<String, VariableElement> entry : members.getFields().entrySet()) {, +		return !field.getModifiers().contains(Modifier.FINAL), +				&& (hasAnnotation(field, LOMBOK_SETTER_ANNOTATION), +						|| hasAnnotation(element, LOMBOK_SETTER_ANNOTATION) || hasAnnotation(, +							element, LOMBOK_DATA_ANNOTATION));, +++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, + 		<!-- Compile (should stick to the bare minimum) -->, +		<!-- Test -->, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		for (Map.Entry<String, VariableElement> entry : members.getFields().entrySet()) {, +		return !field.getModifiers().contains(Modifier.FINAL), +				&& (hasAnnotation(field, LOMBOK_SETTER_ANNOTATION), +						|| hasAnnotation(element, LOMBOK_SETTER_ANNOTATION) || hasAnnotation(, +							element, LOMBOK_DATA_ANNOTATION));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +, +import org.springframework.boot.configurationsample.lombok.LombokSimpleDataProperties;, +	private void assertSimpleLombokProperties(ConfigurationMetadata metadata,, +			Class<?> source, String prefix) {, +		assertThat(metadata,, +				containsProperty(prefix + ".name", String.class).fromSource(source), +		assertThat(metadata, containsProperty(prefix + ".number").fromSource(source), +				.withDefaultValue(is(0)).withDeprecated());, +++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, + 		<!-- Compile (should stick to the bare minimum) -->, +		<!-- Test -->, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		for (Map.Entry<String, VariableElement> entry : members.getFields().entrySet()) {, +		return !field.getModifiers().contains(Modifier.FINAL), +				&& (hasAnnotation(field, LOMBOK_SETTER_ANNOTATION), +						|| hasAnnotation(element, LOMBOK_SETTER_ANNOTATION) || hasAnnotation(, +							element, LOMBOK_DATA_ANNOTATION));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +, +import org.springframework.boot.configurationsample.lombok.LombokSimpleDataProperties;, +	private void assertSimpleLombokProperties(ConfigurationMetadata metadata,, +			Class<?> source, String prefix) {, +		assertThat(metadata,, +				containsProperty(prefix + ".name", String.class).fromSource(source), +		assertThat(metadata, containsProperty(prefix + ".number").fromSource(source), +				.withDefaultValue(is(0)).withDeprecated());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationsample/lombok/LombokExplicitProperties.java, +	@Getter, +	@Setter, +	@Getter, +	@Setter, +	@Getter, +	@Setter, +	@Deprecated, +	@Getter, +	@Setter, +	@SuppressWarnings("unused")]