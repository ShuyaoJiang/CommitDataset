[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java, + * Copyright 2012-2018 the original author or authors., +		bootInf.into("lib", classpathFiles(File::isFile));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java, + * Copyright 2012-2018 the original author or authors., +		bootInf.into("lib", classpathFiles(File::isFile));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void loaderIsWrittenFirstThenApplicationClassesThenLibraries(), +			throws IOException {, +		this.task.setMainClassName("com.example.Main");, +		File classpathFolder = this.temp.newFolder();, +		File applicationClass = new File(classpathFolder,, +				"com/example/Application.class");, +		applicationClass.getParentFile().mkdirs();, +		applicationClass.createNewFile();, +		this.task.classpath(classpathFolder, this.temp.newFile("first-library.jar"),, +				this.temp.newFile("second-library.jar"),, +				this.temp.newFile("third-library.jar"));, +		this.task.requiresUnpack("second-library.jar");, +		this.task.execute();, +		assertThat(getEntryNames(this.task.getArchivePath())).containsSubsequence(, +				"org/springframework/boot/loader/",, +				this.classesPath + "/com/example/Application.class",, +				this.libPath + "/first-library.jar", this.libPath + "/second-library.jar",, +				this.libPath + "/third-library.jar");, +	}, +, +	protected List<String> getEntryNames(File file) throws IOException {, +		List<String> entryNames = new ArrayList<>();, +		try (JarFile jarFile = new JarFile(file)) {, +			Enumeration<JarEntry> entries = jarFile.entries();, +			while (entries.hasMoreElements()) {, +				entryNames.add(entries.nextElement().getName());, +			}, +		}, +		return entryNames;, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java, + * Copyright 2012-2018 the original author or authors., +		bootInf.into("lib", classpathFiles(File::isFile));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void loaderIsWrittenFirstThenApplicationClassesThenLibraries(), +			throws IOException {, +		this.task.setMainClassName("com.example.Main");, +		File classpathFolder = this.temp.newFolder();, +		File applicationClass = new File(classpathFolder,, +				"com/example/Application.class");, +		applicationClass.getParentFile().mkdirs();, +		applicationClass.createNewFile();, +		this.task.classpath(classpathFolder, this.temp.newFile("first-library.jar"),, +				this.temp.newFile("second-library.jar"),, +				this.temp.newFile("third-library.jar"));, +		this.task.requiresUnpack("second-library.jar");, +		this.task.execute();, +		assertThat(getEntryNames(this.task.getArchivePath())).containsSubsequence(, +				"org/springframework/boot/loader/",, +				this.classesPath + "/com/example/Application.class",, +				this.libPath + "/first-library.jar", this.libPath + "/second-library.jar",, +				this.libPath + "/third-library.jar");, +	}, +, +	protected List<String> getEntryNames(File file) throws IOException {, +		List<String> entryNames = new ArrayList<>();, +		try (JarFile jarFile = new JarFile(file)) {, +			Enumeration<JarEntry> entries = jarFile.entries();, +			while (entries.hasMoreElements()) {, +				entryNames.add(entries.nextElement().getName());, +			}, +		}, +		return entryNames;, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/BootWarTests.java, +	@Test, +	public void libProvidedEntriesAreWrittenAfterLibEntries() throws IOException {, +		getTask().setMainClassName("com.example.Main");, +		getTask().classpath(this.temp.newFile("library.jar"));, +		getTask().providedClasspath(this.temp.newFile("provided-library.jar"));, +		getTask().execute();, +		assertThat(getEntryNames(getTask().getArchivePath())).containsSubsequence(, +				"WEB-INF/lib/library.jar", "WEB-INF/lib-provided/provided-library.jar");, +	}, +]