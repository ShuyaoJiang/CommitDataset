[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		BeanDefinitionRegistry registry = (BeanDefinitionRegistry) this.applicationContext, +				.getAutowireCapableBeanFactory();, +		if (registry.containsBeanDefinition(beanName)) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);, +		return false;, +	}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		BeanDefinitionRegistry registry = (BeanDefinitionRegistry) this.applicationContext, +				.getAutowireCapableBeanFactory();, +		if (registry.containsBeanDefinition(beanName)) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);, +		return false;, +	}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesTests.java, +	@Test, +	public void loadWhenBindingOnBeanWithoutBeanDefinitionShouldBind() {, +		load(BasicConfiguration.class, "name=test");, +		BasicProperties bean = this.context.getBean(BasicProperties.class);, +		assertThat(bean.name).isEqualTo("test");, +		bean.name = "override";, +		this.context.getBean(ConfigurationPropertiesBindingPostProcessor.class), +				.postProcessBeforeInitialization(bean, "does-not-exist");, +		assertThat(bean.name).isEqualTo("test");, +	}, +]