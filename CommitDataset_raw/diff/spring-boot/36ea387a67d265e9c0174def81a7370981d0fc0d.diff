[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessDataFile.java, +	private final FileAccess fileAccess;, +		this.fileAccess = new FileAccess(file);, +	 * @param fileAccess provides access to the underlying file, +	private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {, +		this.fileAccess = fileAccess;, +		return this.fileAccess.file;, +		return new DataInputStream();, +		return new RandomAccessDataFile(this.fileAccess, this.offset + offset, length);, +		read(bytes, offset, 0, bytes.length);, +	private int readByte(long position) throws IOException {, +		if (position >= this.length) {, +			return -1;, +		}, +		return this.fileAccess.readByte(this.offset + position);, +	}, +, +	private int read(byte[] bytes, long position, int offset, int length), +			throws IOException {, +		if (position > this.length) {, +			return -1;, +		}, +		return this.fileAccess.read(bytes, this.offset + position, offset, length);, +	}, +, +		this.fileAccess.close();, +			int read = RandomAccessDataFile.this.readByte(this.position);, +			if (read > -1) {, +				moveOn(1);, +			}, +			return read;, +			return (int) moveOn(, +					RandomAccessDataFile.this.read(b, this.position, off, cappedLen));, +	private static final class FileAccess {, +, +		private final Object monitor = new Object();, +, +		private final File file;, +, +		private RandomAccessFile randomAccessFile;, +, +		private FileAccess(File file) {, +			this.file = file;, +			openIfNecessary();, +		}, +, +		private int read(byte[] bytes, long position, int offset, int length), +				throws IOException {, +			synchronized (this.monitor) {, +				openIfNecessary();, +				this.randomAccessFile.seek(position);, +				return this.randomAccessFile.read(bytes, offset, length);, +			}, +		}, +, +		private void openIfNecessary() {, +			if (this.randomAccessFile == null) {, +				try {, +					this.randomAccessFile = new RandomAccessFile(this.file, "r");, +				}, +				catch (FileNotFoundException ex) {, +					throw new IllegalArgumentException(String.format("File %s must exist",, +							this.file.getAbsolutePath()));, +				}, +			}, +		}, +, +		private void close() throws IOException {, +			synchronized (this.monitor) {, +				if (this.randomAccessFile != null) {, +					this.randomAccessFile.close();, +					this.randomAccessFile = null;, +				}, +			}, +		}, +, +		private int readByte(long position) throws IOException {, +			synchronized (this.monitor) {, +				openIfNecessary();, +				this.randomAccessFile.seek(position);, +				return this.randomAccessFile.read();, +			}, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessDataFile.java, +	private final FileAccess fileAccess;, +		this.fileAccess = new FileAccess(file);, +	 * @param fileAccess provides access to the underlying file, +	private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {, +		this.fileAccess = fileAccess;, +		return this.fileAccess.file;, +		return new DataInputStream();, +		return new RandomAccessDataFile(this.fileAccess, this.offset + offset, length);, +		read(bytes, offset, 0, bytes.length);, +	private int readByte(long position) throws IOException {, +		if (position >= this.length) {, +			return -1;, +		}]