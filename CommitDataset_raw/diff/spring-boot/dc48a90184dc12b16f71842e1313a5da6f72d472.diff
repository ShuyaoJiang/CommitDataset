[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, + * @author Henrich Krämer, + *, +						.invoke(connector, address.getHostString());, +			connector.setHost(address.getHostString());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, + * @author Henrich Krämer, + *, +						.invoke(connector, address.getHostString());, +			connector.setHost(address.getHostString());, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java, +import java.net.InetAddress;, +import org.eclipse.jetty.server.AbstractNetworkConnector;, +import org.eclipse.jetty.server.Connector;, +	public void specificIPAddressNotReverseResolved() throws Exception {, +		JettyEmbeddedServletContainerFactory factory = getFactory();, +		final String[] refAncHost = new String[1];, +		refAncHost[0] = "HostNotSetInAbstractNetworkConnector";, +		InetAddress lhAddress = InetAddress.getLocalHost();, +		InetAddress address = InetAddress.getByAddress(lhAddress.getAddress());, +		// the address should have no host name associated with ith, +		String expectedHost = address.getHostAddress();, +		factory.setAddress(address);, +		factory.addServerCustomizers(server -> {, +			for (Connector connector : server.getConnectors()) {, +				if (connector instanceof AbstractNetworkConnector) {, +					@SuppressWarnings("resource"), +					AbstractNetworkConnector anc = (AbstractNetworkConnector) connector;, +					String ancHost = anc.getHost();, +					refAncHost[0] = ancHost;, +					break;, +				}, +			}, +		});, +		this.container = factory, +				.getEmbeddedServletContainer(exampleServletRegistration());, +		assertThat(refAncHost[0]).isEqualTo(expectedHost);, +	}, +, +	@Test]