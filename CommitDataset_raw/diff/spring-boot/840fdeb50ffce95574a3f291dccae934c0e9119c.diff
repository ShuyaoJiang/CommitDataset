[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +class OnBeanCondition extends SpringBootCondition implements ConfigurationCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("@ConditionalOnBean " + spec + " found no beans");, +				return Outcome.noMatch("@ConditionalOnMissingBean " + spec, +						+ " found the following " + matching);, +		return Outcome.match();, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +class OnBeanCondition extends SpringBootCondition implements ConfigurationCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("@ConditionalOnBean " + spec + " found no beans");, +				return Outcome.noMatch("@ConditionalOnMissingBean " + spec, +						+ " found the following " + matching);, +		return Outcome.match();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +class OnClassCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("required @ConditionalOnClass classes not found: ", +						+ StringUtils.collectionToCommaDelimitedString(missing));, +				return Outcome.noMatch("required @ConditionalOnMissing classes found: ", +						+ StringUtils.collectionToCommaDelimitedString(present));, +		return Outcome.match();, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +class OnBeanCondition extends SpringBootCondition implements ConfigurationCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("@ConditionalOnBean " + spec + " found no beans");, +				return Outcome.noMatch("@ConditionalOnMissingBean " + spec, +						+ " found the following " + matching);, +		return Outcome.match();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +class OnClassCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("required @ConditionalOnClass classes not found: ", +						+ StringUtils.collectionToCommaDelimitedString(missing));, +				return Outcome.noMatch("required @ConditionalOnMissing classes found: ", +						+ StringUtils.collectionToCommaDelimitedString(present));, +		return Outcome.match();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java, +public class OnExpressionCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		String expression = (String) metadata.getAnnotationAttributes(, +		if (!expression.startsWith("#{")) {, +			expression = "#{" + expression + "}";, +, +		expression = context.getEnvironment().resolvePlaceholders(expression);, +		boolean result = (Boolean) resolver.evaluate(expression, expressionContext);, +, +		StringBuilder message = new StringBuilder("SpEL expression");, +		if (metadata instanceof ClassMetadata) {, +			message.append(" on " + ((ClassMetadata) metadata).getClassName());, +		message.append(": " + expression);, +		return new Outcome(result, message.toString());, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +class OnBeanCondition extends SpringBootCondition implements ConfigurationCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("@ConditionalOnBean " + spec + " found no beans");, +				return Outcome.noMatch("@ConditionalOnMissingBean " + spec, +						+ " found the following " + matching);, +		return Outcome.match();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +class OnClassCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +				return Outcome.noMatch("required @ConditionalOnClass classes not found: ", +						+ StringUtils.collectionToCommaDelimitedString(missing));, +				return Outcome.noMatch("required @ConditionalOnMissing classes found: ", +						+ StringUtils.collectionToCommaDelimitedString(present));, +		return Outcome.match();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java, +public class OnExpressionCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		String expression = (String) metadata.getAnnotationAttributes(, +		if (!expression.startsWith("#{")) {, +			expression = "#{" + expression + "}";, +, +		expression = context.getEnvironment().resolvePlaceholders(expression);, +		boolean result = (Boolean) resolver.evaluate(expression, expressionContext);, +, +		StringBuilder message = new StringBuilder("SpEL expression");, +		if (metadata instanceof ClassMetadata) {, +			message.append(" on " + ((ClassMetadata) metadata).getClassName());, +		message.append(": " + expression);, +		return new Outcome(result, message.toString());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +class OnResourceCondition extends SpringBootCondition {, +	public Outcome getMatchOutcome(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {]