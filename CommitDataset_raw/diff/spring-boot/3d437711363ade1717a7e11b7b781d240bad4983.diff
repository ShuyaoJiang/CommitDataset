[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java, +		try {, +		catch (NoClassDefFoundError e) {, +			throw new IllegalStateException(, +					"Could not evaluate condition owing to internal class not found. ", +							+ "This can happen if you are @ComponentScanning a springframework package ", +							+ "(e.g. if you put a @ComponentScan in the default package by mistake)",, +					e);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java, +		try {, +		catch (NoClassDefFoundError e) {, +			throw new IllegalStateException(, +					"Could not evaluate condition owing to internal class not found. ", +							+ "This can happen if you are @ComponentScanning a springframework package ", +							+ "(e.g. if you put a @ComponentScan in the default package by mistake)",, +					e);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Lazy;, +import org.springframework.context.annotation.Primary;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +	private BootDefaultingAuthenticationConfigurerAdapter configurer = new BootDefaultingAuthenticationConfigurerAdapter();, +, +		auth.apply(this.configurer);, +	}, +, +	@Bean, +	// avoid issues with scopedTarget (SPR-11548), +	@Primary, +	public AuthenticationManager authenticationManager() {, +		return lazyAuthenticationManager();, +	}, +, +	@Bean, +	@Lazy, +	@Scope(proxyMode = ScopedProxyMode.INTERFACES), +	protected AuthenticationManager lazyAuthenticationManager() {, +		return this.configurer.getAuthenticationManagerBuilder().getOrBuild();, +		private AuthenticationManagerBuilder defaultAuth;, +, +		public AuthenticationManagerBuilder getAuthenticationManagerBuilder() {, +			return this.defaultAuth;, +		}, +, +				this.defaultAuth = auth;, +			this.defaultAuth = new AuthenticationManagerBuilder(, +			AuthenticationManager parent = this.defaultAuth.inMemoryAuthentication(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java, +		try {, +		catch (NoClassDefFoundError e) {, +			throw new IllegalStateException(, +					"Could not evaluate condition owing to internal class not found. ", +							+ "This can happen if you are @ComponentScanning a springframework package ", +							+ "(e.g. if you put a @ComponentScan in the default package by mistake)",, +					e);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Lazy;, +import org.springframework.context.annotation.Primary;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +	private BootDefaultingAuthenticationConfigurerAdapter configurer = new BootDefaultingAuthenticationConfigurerAdapter();, +, +		auth.apply(this.configurer);, +	}, +, +	@Bean, +	// avoid issues with scopedTarget (SPR-11548), +	@Primary, +	public AuthenticationManager authenticationManager() {, +		return lazyAuthenticationManager();, +	}, +, +	@Bean, +	@Lazy, +	@Scope(proxyMode = ScopedProxyMode.INTERFACES), +	protected AuthenticationManager lazyAuthenticationManager() {, +		return this.configurer.getAuthenticationManagerBuilder().getOrBuild();, +		private AuthenticationManagerBuilder defaultAuth;, +, +		public AuthenticationManagerBuilder getAuthenticationManagerBuilder() {, +			return this.defaultAuth;, +		}, +, +				this.defaultAuth = auth;, +			this.defaultAuth = new AuthenticationManagerBuilder(, +			AuthenticationManager parent = this.defaultAuth.inMemoryAuthentication(), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +		this.context.refresh();, +	public void testAuthenticationManagerCreated() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,]