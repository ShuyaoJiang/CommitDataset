[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(, +					MessageSourceAutoConfiguration.class));, +	@Test, +	public void testDefaultMessageSource() {, +		this.contextRunner.run((context) ->, +				assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +						.isEqualTo("Foo message"));, +	public void testMessageSourceCreated() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages"), +				.run((context) -> assertThat(context.getMessage(, +						"foo", null, "Foo message", Locale.UK)).isEqualTo("bar"));, +	public void testEncodingWorks() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/swedish"), +				.run((context) -> assertThat(context.getMessage(, +						"foo", null, "Foo message", Locale.UK)).isEqualTo(, +						"Some text with some swedish öäå!"));, +	}, +, +	@Test, +	public void testMultipleMessageSourceCreated() {, +		this.contextRunner.withPropertyValues(, +				"spring.messages.basename:test/messages,test/messages2").run((context) -> {, +			assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +			assertThat(context.getMessage("foo-foo", null, "Foo-Foo message", Locale.UK)), +		});, +	public void testBadEncoding() {, +		this.contextRunner.withPropertyValues("spring.messages.encoding:rubbish"), +				.run((context) -> {, +					assertThat(context.getMessage("foo", null, "blah", Locale.UK)), +				});, +	public void testMessageSourceFromPropertySourceAnnotation() {, +		this.contextRunner.withUserConfiguration(Config.class).run((context) ->, +				assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +						.isEqualTo("bar"));, +	public void testFallbackDefault() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages"), +				.run((context) -> assertThat(isFallbackToSystemLocale(, +						context.getBean(MessageSource.class))).isTrue());, +	public void testFallbackTurnOff() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages",, +				"spring.messages.fallback-to-system-locale:false").run((context) ->, +				assertThat(isFallbackToSystemLocale(context.getBean(MessageSource.class))), +						.isFalse());, +	public void testFormatMessageDefault() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages"), +				.run((context) -> assertThat(isAlwaysUseMessageFormat(, +						context.getBean(MessageSource.class))).isFalse());, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages",, +				"spring.messages.always-use-message-format:true").run((context) ->, +				assertThat(isAlwaysUseMessageFormat(context.getBean(MessageSource.class))), +						.isTrue());, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages"), +				.run((context) -> assertThat(isUseCodeAsDefaultMessage(, +						context.getBean(MessageSource.class))).isFalse());, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages",, +				"spring.messages.use-code-as-default-message:true").run((context) ->, +				assertThat(isUseCodeAsDefaultMessage(, +						context.getBean(MessageSource.class))).isTrue());, +		this.contextRunner.withUserConfiguration(CustomMessageSource.class), +				.run((context) -> assertThat(context.getMessage("foo", null, null, null)), +						.isEqualTo("foo"));, +		this.contextRunner.run((parent) -> {, +			this.contextRunner.withParent(parent), +					.withPropertyValues("spring.messages.basename:test/messages"), +					.run((context) -> assertThat(context.getMessage(, +							"foo", null, "Foo message", Locale.UK)).isEqualTo("bar"));, +		});]