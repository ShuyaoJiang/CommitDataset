[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +		if (!isEnabled()) {, +	private boolean isEnabled() {, +		if (getMode() == DatabaseInitializationMode.NEVER) {, +			return false;, +		}, +		if (getMode() == DatabaseInitializationMode.EMBEDDED, +				&& !EmbeddedDatabaseConnection.isEmbedded(this.dataSource)) {, +			return false;, +		}, +		return true;, +	}, +, +	protected abstract DatabaseInitializationMode getMode();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +		if (!isEnabled()) {, +	private boolean isEnabled() {, +		if (getMode() == DatabaseInitializationMode.NEVER) {, +			return false;, +		}, +		if (getMode() == DatabaseInitializationMode.EMBEDDED, +				&& !EmbeddedDatabaseConnection.isEmbedded(this.dataSource)) {, +			return false;, +		}, +		return true;, +	}, +, +	protected abstract DatabaseInitializationMode getMode();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/DatabaseInitializationMode.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure;, +, +/**, + * Supported {@link AbstractDatabaseInitializer database initializer} modes., + *, + * @author Vedran Pavic, + * @author Stephane Nicoll, + * @since 2.0.0, + */, +public enum DatabaseInitializationMode {, +, +	/**, +	 * Always initialize the database., +	 */, +	ALWAYS,, +, +	/**, +	 * Only initialize an embedded database., +	 */, +	EMBEDDED,, +, +	/**, +	 * Do not initialize the database., +	 */, +	NEVER, +, +}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +		if (!isEnabled()) {, +	private boolean isEnabled() {, +		if (getMode() == DatabaseInitializationMode.NEVER) {, +			return false;, +		}, +		if (getMode() == DatabaseInitializationMode.EMBEDDED, +				&& !EmbeddedDatabaseConnection.isEmbedded(this.dataSource)) {, +			return false;, +		}, +		return true;, +	}, +, +	protected abstract DatabaseInitializationMode getMode();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/DatabaseInitializationMode.java, +/*, + * Copyright 2012-2017 the original author or authors.]