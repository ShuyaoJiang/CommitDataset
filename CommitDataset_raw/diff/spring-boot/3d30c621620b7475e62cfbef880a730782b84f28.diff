[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Cloud Foundry to use in a reactive environment., +@AutoConfigureAfter(HealthEndpointAutoConfiguration.class), +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean({ HealthEndpoint.class,, +			ReactiveHealthEndpointWebExtension.class }), +	public CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(, +			ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +		return new CloudFoundryReactiveHealthEndpointWebExtension(, +				reactiveHealthEndpointWebExtension);, +	}, +, +	@Bean, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Cloud Foundry to use in a reactive environment., +@AutoConfigureAfter(HealthEndpointAutoConfiguration.class), +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean({ HealthEndpoint.class,, +			ReactiveHealthEndpointWebExtension.class }), +	public CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(, +			ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +		return new CloudFoundryReactiveHealthEndpointWebExtension(, +				reactiveHealthEndpointWebExtension);, +	}, +, +	@Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.HealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Cloud Foundry to use., +@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class, HealthEndpointAutoConfiguration.class }), +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }), +	public CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(, +			HealthEndpointWebExtension healthEndpointWebExtension) {, +		return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);, +	}, +, +	@Bean, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Cloud Foundry to use in a reactive environment., +@AutoConfigureAfter(HealthEndpointAutoConfiguration.class), +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean({ HealthEndpoint.class,, +			ReactiveHealthEndpointWebExtension.class }), +	public CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(, +			ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {, +		return new CloudFoundryReactiveHealthEndpointWebExtension(, +				reactiveHealthEndpointWebExtension);, +	}, +, +	@Bean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;, +import org.springframework.boot.actuate.health.HealthEndpoint;, +import org.springframework.boot.actuate.health.HealthEndpointWebExtension;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Cloud Foundry to use., +@AutoConfigureAfter({ ServletManagementContextAutoConfiguration.class, HealthEndpointAutoConfiguration.class }), +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }), +	public CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(, +			HealthEndpointWebExtension healthEndpointWebExtension) {, +		return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension);, +	}, +]