[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfigurationTests.java, +import org.springframework.context.ConfigurableApplicationContext;, +	private ConfigurableApplicationContext context;, +		if (this.context != null) {, +	}, +	public void testJdbcTemplateExists() {, +		load();, +		assertThat(this.context.getBeansOfType(JdbcTemplate.class)).hasSize(1);, +		JdbcTemplate jdbcTemplate = this.context.getBean(JdbcTemplate.class);, +		assertThat(jdbcTemplate.getDataSource()).isEqualTo(, +				this.context.getBean(DataSource.class));, +	}, +, +	@Test, +	public void testJdbcTemplateExistsWithCustomDataSource() {, +		load(TestDataSourceConfiguration.class);, +		assertThat(this.context.getBeansOfType(JdbcTemplate.class)).hasSize(1);, +		assertThat(jdbcTemplate.getDataSource()).isEqualTo(, +				this.context.getBean("customDataSource"));, +	public void testNamedParameterJdbcTemplateExists() {, +		load();, +		assertThat(this.context.getBeansOfType(NamedParameterJdbcOperations.class)), +				.hasSize(1);, +	public void testMultiDataSource() {, +		load(MultiDataSourceConfiguration.class);, +	public void testMultiDataSourceUsingPrimary() {, +		load(MultiDataSourceUsingPrimaryConfiguration.class);, +		assertThat(this.context.getBeansOfType(JdbcOperations.class)).hasSize(1);, +		assertThat(this.context.getBeansOfType(NamedParameterJdbcOperations.class)), +				.hasSize(1);, +		assertThat(this.context.getBean(JdbcTemplate.class).getDataSource()), +				.isEqualTo(this.context.getBean("test1DataSource"));, +	public void testExistingCustomJdbcTemplate() {, +		load(CustomConfiguration.class);, +		assertThat(this.context.getBeansOfType(JdbcOperations.class)).hasSize(1);, +	public void testExistingCustomNamedParameterJdbcTemplate() {, +		load(CustomConfiguration.class);, +		assertThat(this.context.getBeansOfType(NamedParameterJdbcOperations.class)), +				.hasSize(1);, +	public void load(String... environment) {, +		load(null, environment);, +	}, +, +	public void load(Class<?> config, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		TestPropertyValues.of("spring.datasource.initialize:false",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt()), +				.applyTo(ctx);, +		TestPropertyValues.of(environment).applyTo(ctx);, +		if (config != null) {, +			ctx.register(config);, +		}, +		ctx.register(DataSourceAutoConfiguration.class,, +				JdbcTemplateAutoConfiguration.class);, +		ctx.refresh();, +		this.context = ctx;, +	}, +, +		public DataSource customDataSource() {]