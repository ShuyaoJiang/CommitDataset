[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvidersConfiguration;, +@Import(DataSourcePoolMetadataProvidersConfiguration.class), +	@ConditionalOnBean(DataSourcePoolMetadataProvider.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvidersConfiguration;, +@Import(DataSourcePoolMetadataProvidersConfiguration.class), +	@ConditionalOnBean(DataSourcePoolMetadataProvider.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.ApplicationHealthIndicator;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadata;, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections, +				.emptyList();, +			DataSourcePoolMetadataProvider metadataProvider = new CompositeDataSourcePoolMetadataProvider(, +					this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider, this.dataSources, +						.values().iterator().next());, +				composite.addHealthIndicator(, +						entry.getKey(),, +						createDataSourceHealthIndicator(metadataProvider,, +								entry.getValue()));, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(, +				DataSourcePoolMetadataProvider provider, DataSource dataSource) {, +			DataSourcePoolMetadata poolMetadata = provider, +					.getDataSourcePoolMetadata(dataSource);, +			if (poolMetadata != null) {, +				validationQuery = poolMetadata.getValidationQuery();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvidersConfiguration;, +@Import(DataSourcePoolMetadataProvidersConfiguration.class), +	@ConditionalOnBean(DataSourcePoolMetadataProvider.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.ApplicationHealthIndicator;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadata;, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections, +				.emptyList();, +			DataSourcePoolMetadataProvider metadataProvider = new CompositeDataSourcePoolMetadataProvider(, +					this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider, this.dataSources, +						.values().iterator().next());, +				composite.addHealthIndicator(, +						entry.getKey(),, +						createDataSourceHealthIndicator(metadataProvider,, +								entry.getValue()));, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(, +				DataSourcePoolMetadataProvider provider, DataSource dataSource) {, +			DataSourcePoolMetadata poolMetadata = provider, +					.getDataSourcePoolMetadata(dataSource);, +			if (poolMetadata != null) {, +				validationQuery = poolMetadata.getValidationQuery();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadata;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +	private Collection<DataSourcePoolMetadataProvider> providers;, +	private final Map<String, DataSourcePoolMetadata> metadataByPrefix = new HashMap<String, DataSourcePoolMetadata>();, +		DataSourcePoolMetadataProvider provider = new CompositeDataSourcePoolMetadataProvider(, +			DataSourcePoolMetadata poolMetadata = provider.getDataSourcePoolMetadata(bean);, +			if (poolMetadata != null) {, +				this.metadataByPrefix.put(prefix, poolMetadata);, +		for (Map.Entry<String, DataSourcePoolMetadata> entry : this.metadataByPrefix, +			DataSourcePoolMetadata dataSourceMetadata = entry.getValue();, +			addMetric(metrics, prefix + "active", dataSourceMetadata.getActive());, +			addMetric(metrics, prefix + "usage", dataSourceMetadata.getUsage());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/DataSourceMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvidersConfiguration;, +@Import(DataSourcePoolMetadataProvidersConfiguration.class), +	@ConditionalOnBean(DataSourcePoolMetadataProvider.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.actuate.health.ApplicationHealthIndicator;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadata;, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections, +				.emptyList();, +			DataSourcePoolMetadataProvider metadataProvider = new CompositeDataSourcePoolMetadataProvider(, +					this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider, this.dataSources, +						.values().iterator().next());, +				composite.addHealthIndicator(, +						entry.getKey(),, +						createDataSourceHealthIndicator(metadataProvider,, +								entry.getValue()));, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(, +				DataSourcePoolMetadataProvider provider, DataSource dataSource) {, +			DataSourcePoolMetadata poolMetadata = provider, +					.getDataSourcePoolMetadata(dataSource);, +			if (poolMetadata != null) {, +				validationQuery = poolMetadata.getValidationQuery();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourcePoolMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourcePoolMetadata;]