[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +		MemberConditions(ConditionContext context, ConfigurationPhase phase,, +			this.memberConditions = getMemberConditions(members, phase, className);, +				String[] members, ConfigurationPhase phase, String className) {, +						validateMemberCondition(condition, phase, className);, +		private void validateMemberCondition(Condition condition,, +				ConfigurationPhase nestedPhase, String nestedClassName) {, +			if (nestedPhase == ConfigurationPhase.PARSE_CONFIGURATION, +					throw new IllegalStateException("Nested condition " + nestedClassName, +							+ " uses a configuration ", +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +		MemberConditions(ConditionContext context, ConfigurationPhase phase,, +			this.memberConditions = getMemberConditions(members, phase, className);, +				String[] members, ConfigurationPhase phase, String className) {, +						validateMemberCondition(condition, phase, className);, +		private void validateMemberCondition(Condition condition,, +				ConfigurationPhase nestedPhase, String nestedClassName) {, +			if (nestedPhase == ConfigurationPhase.PARSE_CONFIGURATION, +					throw new IllegalStateException("Nested condition " + nestedClassName, +							+ " uses a configuration ", +++ /dev/null, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java, +		MemberConditions(ConditionContext context, ConfigurationPhase phase,, +			this.memberConditions = getMemberConditions(members, phase, className);, +				String[] members, ConfigurationPhase phase, String className) {, +						validateMemberCondition(condition, phase, className);, +		private void validateMemberCondition(Condition condition,, +				ConfigurationPhase nestedPhase, String nestedClassName) {, +			if (nestedPhase == ConfigurationPhase.PARSE_CONFIGURATION, +					throw new IllegalStateException("Nested condition " + nestedClassName, +							+ " uses a configuration ", +++ /dev/null, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/AbstractNestedConditionTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import org.junit.Test;, +, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link AbstractNestedCondition}., + *, + * @author Razib Shahriar, + */, +public class AbstractNestedConditionTests {, +, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();, +, +	@Test, +	public void validPhase() {, +		this.contextRunner.withUserConfiguration(ValidConfig.class), +				.run((context) -> assertThat(context).hasBean("myBean"));, +	}, +, +	@Test, +	public void invalidMemberPhase() {, +		this.contextRunner.withUserConfiguration(InvalidConfig.class).run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context.getStartupFailure().getCause()), +					.isInstanceOf(IllegalStateException.class), +					.hasMessageContaining("Nested condition ", +							+ InvalidNestedCondition.class.getName(), +							+ " uses a configuration phase that is inappropriate for class ", +							+ OnBeanCondition.class.getName());, +		});, +	}, +, +	@Test, +	public void invalidNestedMemberPhase() {, +		this.contextRunner.withUserConfiguration(DoubleNestedConfig.class), +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context.getStartupFailure().getCause()), +							.isInstanceOf(IllegalStateException.class), +							.hasMessageContaining("Nested condition ", +									+ DoubleNestedCondition.class.getName(), +									+ " uses a configuration phase that is inappropriate for class ", +									+ ValidNestedCondition.class.getName());, +				});]