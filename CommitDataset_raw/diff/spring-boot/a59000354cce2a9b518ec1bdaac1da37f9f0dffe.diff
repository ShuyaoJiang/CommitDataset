[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +import org.springframework.cache.transaction.TransactionAwareCacheDecorator;, +import org.springframework.util.ClassUtils;, +			Cache cache = unwrapIfNecessary(cacheManager.getCache(cacheName));, +	private Cache unwrapIfNecessary(Cache cache) {, +		if (ClassUtils.isPresent("org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +				getClass().getClassLoader())) {, +			return TransactionAwareCacheDecoratorHandler.unwrapIfNecessary(cache);, +		}, +		return cache;, +	}, +, +	private static class TransactionAwareCacheDecoratorHandler {, +, +		private static Cache unwrapIfNecessary(Cache cache) {, +			try {, +				if (cache instanceof TransactionAwareCacheDecorator) {, +					return ((TransactionAwareCacheDecorator) cache).getTargetCache();, +				}, +			}, +			catch (NoClassDefFoundError ex) {, +				// Ignore, +			}, +			return cache;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +import org.springframework.cache.transaction.TransactionAwareCacheDecorator;, +import org.springframework.util.ClassUtils;, +			Cache cache = unwrapIfNecessary(cacheManager.getCache(cacheName));, +	private Cache unwrapIfNecessary(Cache cache) {, +		if (ClassUtils.isPresent("org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +				getClass().getClassLoader())) {, +			return TransactionAwareCacheDecoratorHandler.unwrapIfNecessary(cache);, +		}, +		return cache;, +	}, +, +	private static class TransactionAwareCacheDecoratorHandler {, +, +		private static Cache unwrapIfNecessary(Cache cache) {, +			try {, +				if (cache instanceof TransactionAwareCacheDecorator) {, +					return ((TransactionAwareCacheDecorator) cache).getTargetCache();, +				}, +			}, +			catch (NoClassDefFoundError ex) {, +				// Ignore, +			}, +			return cache;, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/CachePublicMetricsTests.java, +import java.util.Collections;, +import org.springframework.cache.concurrent.ConcurrentMapCache;, +import org.springframework.cache.support.SimpleCacheManager;, +import org.springframework.cache.transaction.TransactionAwareCacheDecorator;, +	@Test, +	public void cacheMetricsWithTransactionAwareCacheDecorator() {, +		SimpleCacheManager cacheManager = new SimpleCacheManager();, +		cacheManager.setCaches(Collections.singletonList(, +				new TransactionAwareCacheDecorator(new ConcurrentMapCache("foo"))));, +		cacheManager.afterPropertiesSet();, +		this.cacheManagers.put("cacheManager", cacheManager);, +		CachePublicMetrics cpm = new CachePublicMetrics(this.cacheManagers,, +				providers(new ConcurrentMapCacheStatisticsProvider()));, +		Map<String, Number> metrics = metrics(cpm);, +		assertThat(metrics).containsOnly(entry("cache.foo.size", 0L));, +	}, +]