[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, + * @author Andy Wilkinson, +	@ConditionalOnExpression("${endpoints.env.enabled:${endpoints.enabled:true}}"), +	@ConditionalOnExpression("${endpoints.health.enabled:${endpoints.enabled:true}}"), +	@ConditionalOnExpression("${endpoints.metrics.enabled:${endpoints.enabled:true}}"), +	@ConditionalOnExpression("${endpoints.shutdown.enabled:false}"), +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");]