[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolver.java, + * Copyright 2012-2018 the original author or authors., +						SystemPropertyUtils.VALUE_SEPARATOR, true));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolver.java, + * Copyright 2012-2018 the original author or authors., +						SystemPropertyUtils.VALUE_SEPARATOR, true));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +	public void bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder() {, +		BindResult<String> result = this.binder.bind("foo", Bindable.of(String.class));, +		assertThat(result.get()).isEqualTo("${bar}");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolver.java, + * Copyright 2012-2018 the original author or authors., +						SystemPropertyUtils.VALUE_SEPARATOR, true));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +	public void bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder() {, +		BindResult<String> result = this.binder.bind("foo", Bindable.of(String.class));, +		assertThat(result.get()).isEqualTo("${bar}");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolverTests.java, + * Copyright 2012-2018 the original author or authors., +	public void resolveIfPlaceholderAbsentAndNoDefaultUsesPlaceholder() {, +		Object resolved = this.resolver.resolvePlaceholders("${FOO}");, +		assertThat(resolved).isEqualTo("${FOO}");]