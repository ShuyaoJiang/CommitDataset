[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean ignoreNestedProperties = false;, +, +	 * Flag to disable binding of nested properties (i.e. those with period separators in, +	 * their paths). Can be useful to disable this if the name prefix is empty and you, +	 * don't want to ignore unknown fields., +	 * , +	 * @param ignoreNestedProperties the flag to set (default false), +	 */, +	public void setIgnoreNestedProperties(boolean ignoreNestedProperties) {, +		this.ignoreNestedProperties = ignoreNestedProperties;, +	}, +, +	/**, +		dataBinder.setIgnoreNestedProperties(this.ignoreNestedProperties);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean ignoreNestedProperties = false;, +, +	 * Flag to disable binding of nested properties (i.e. those with period separators in, +	 * their paths). Can be useful to disable this if the name prefix is empty and you, +	 * don't want to ignore unknown fields., +	 * , +	 * @param ignoreNestedProperties the flag to set (default false), +	 */, +	public void setIgnoreNestedProperties(boolean ignoreNestedProperties) {, +		this.ignoreNestedProperties = ignoreNestedProperties;, +	}, +, +	/**, +		dataBinder.setIgnoreNestedProperties(this.ignoreNestedProperties);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +import java.util.Arrays;, +import org.springframework.core.env.StandardEnvironment;, +		Collection<String> nonEnumerables = Arrays.asList(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +				StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);, +			if (source instanceof EnumerablePropertySource, +					&& !nonEnumerables.contains(source.getName())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean ignoreNestedProperties = false;, +, +	 * Flag to disable binding of nested properties (i.e. those with period separators in, +	 * their paths). Can be useful to disable this if the name prefix is empty and you, +	 * don't want to ignore unknown fields., +	 * , +	 * @param ignoreNestedProperties the flag to set (default false), +	 */, +	public void setIgnoreNestedProperties(boolean ignoreNestedProperties) {, +		this.ignoreNestedProperties = ignoreNestedProperties;, +	}, +, +	/**, +		dataBinder.setIgnoreNestedProperties(this.ignoreNestedProperties);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +import java.util.Arrays;, +import org.springframework.core.env.StandardEnvironment;, +		Collection<String> nonEnumerables = Arrays.asList(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +				StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);, +			if (source instanceof EnumerablePropertySource, +					&& !nonEnumerables.contains(source.getName())) {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +	private boolean ignoreNestedProperties = false;, +, +	/**, +	 * Flag to disable binding of nested properties (i.e. those with period separators in, +	 * their paths). Can be useful to disable this if the name prefix is empty and you, +	 * don't want to ignore unknown fields., +	 * , +	 * @param ignoreNestedProperties the flag to set (default false), +	 */, +	public void setIgnoreNestedProperties(boolean ignoreNestedProperties) {, +		this.ignoreNestedProperties = ignoreNestedProperties;, +	}, +, +		if (!StringUtils.hasText(this.namePrefix) && !this.ignoreNestedProperties) {, +		int prefixLength = StringUtils.hasText(this.namePrefix) ? this.namePrefix, +				.length() : 0;, +			if (this.ignoreNestedProperties) {, +				name = name.substring(prefixLength);, +				if (!name.contains(".")) {, +					rtn.add(name, pv.getValue());, +				}, +			}, +			else {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean ignoreNestedProperties = false;, +, +	 * Flag to disable binding of nested properties (i.e. those with period separators in, +	 * their paths). Can be useful to disable this if the name prefix is empty and you, +	 * don't want to ignore unknown fields., +	 * , +	 * @param ignoreNestedProperties the flag to set (default false), +	 */, +	public void setIgnoreNestedProperties(boolean ignoreNestedProperties) {, +		this.ignoreNestedProperties = ignoreNestedProperties;, +	}, +, +	/**]