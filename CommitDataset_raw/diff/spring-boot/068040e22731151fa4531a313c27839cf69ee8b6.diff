[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.ArrayList;, +import org.hibernate.cfg.AvailableSettings;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.orm.hibernate5.SpringBeanContainer;, +			ConfigurableListableBeanFactory beanFactory,, +				implicitNamingStrategy.getIfAvailable(), beanFactory,, +				hibernatePropertiesCustomizers.orderedStream(), +						.collect(Collectors.toList()));, +			ConfigurableListableBeanFactory beanFactory,, +		List<HibernatePropertiesCustomizer> customizers = new ArrayList<>();, +		customizers.add((properties) -> properties.put(AvailableSettings.BEAN_CONTAINER,, +				new SpringBeanContainer(beanFactory)));, +			customizers.add(new NamingStrategiesHibernatePropertiesCustomizer(, +		customizers.addAll(hibernatePropertiesCustomizers);, +		return customizers;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.ArrayList;, +import org.hibernate.cfg.AvailableSettings;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.orm.hibernate5.SpringBeanContainer;, +			ConfigurableListableBeanFactory beanFactory,, +				implicitNamingStrategy.getIfAvailable(), beanFactory,, +				hibernatePropertiesCustomizers.orderedStream(), +						.collect(Collectors.toList()));, +			ConfigurableListableBeanFactory beanFactory,, +		List<HibernatePropertiesCustomizer> customizers = new ArrayList<>();, +		customizers.add((properties) -> properties.put(AvailableSettings.BEAN_CONTAINER,, +				new SpringBeanContainer(beanFactory)));, +			customizers.add(new NamingStrategiesHibernatePropertiesCustomizer(, +		customizers.addAll(hibernatePropertiesCustomizers);, +		return customizers;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.hibernate.cfg.AvailableSettings;, +	@Test, +	public void eventListenerCanBeRegisteredAsBeans() {, +		contextRunner().withUserConfiguration(TestInitializedJpaConfiguration.class), +				.withClassLoader(new HideDataScriptClassLoader()), +				.withPropertyValues("spring.jpa.show-sql=true",, +						"spring.jpa.hibernate.ddl-auto:create-drop",, +						"spring.datasource.data:classpath:/city.sql"), +				.run((context) -> {, +					// See CityListener, +					assertThat(context).hasSingleBean(City.class);, +					assertThat(context.getBean(City.class).getName()), +							.isEqualTo("Washington");, +				});, +	}, +, +	@Test, +	public void hibernatePropertiesCustomizerCanDisableBeanContainer() {, +		contextRunner().withUserConfiguration(DisableBeanContainerConfiguration.class), +				.run((context) -> assertThat(context).doesNotHaveBean(City.class));, +	}, +, +	@Configuration, +	static class DisableBeanContainerConfiguration {, +, +		@Bean, +		public HibernatePropertiesCustomizer disableBeanContainerHibernatePropertiesCustomizer() {, +			return (hibernateProperties) -> hibernateProperties, +					.remove(AvailableSettings.BEAN_CONTAINER);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.ArrayList;, +import org.hibernate.cfg.AvailableSettings;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.orm.hibernate5.SpringBeanContainer;, +			ConfigurableListableBeanFactory beanFactory,, +				implicitNamingStrategy.getIfAvailable(), beanFactory,, +				hibernatePropertiesCustomizers.orderedStream(), +						.collect(Collectors.toList()));, +			ConfigurableListableBeanFactory beanFactory,, +		List<HibernatePropertiesCustomizer> customizers = new ArrayList<>();, +		customizers.add((properties) -> properties.put(AvailableSettings.BEAN_CONTAINER,, +				new SpringBeanContainer(beanFactory)));, +			customizers.add(new NamingStrategiesHibernatePropertiesCustomizer(, +		customizers.addAll(hibernatePropertiesCustomizers);, +		return customizers;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.hibernate.cfg.AvailableSettings;, +	@Test, +	public void eventListenerCanBeRegisteredAsBeans() {, +		contextRunner().withUserConfiguration(TestInitializedJpaConfiguration.class), +				.withClassLoader(new HideDataScriptClassLoader()), +				.withPropertyValues("spring.jpa.show-sql=true",, +						"spring.jpa.hibernate.ddl-auto:create-drop",, +						"spring.datasource.data:classpath:/city.sql"), +				.run((context) -> {, +					// See CityListener, +					assertThat(context).hasSingleBean(City.class);, +					assertThat(context.getBean(City.class).getName()), +							.isEqualTo("Washington");, +				});, +	}, +, +	@Test]