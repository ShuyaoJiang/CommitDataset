[+++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(value = "spring.aop.auto", match = "true", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "false", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "true", defaultMatch = false), +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(value = "spring.aop.auto", match = "true", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "false", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "true", defaultMatch = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(BatchProperties.class), +	@Autowired, +	private BatchProperties properties;, +	@ConditionalOnProperty(value = "spring.batch.job.enabled", match = "true", defaultMatch = true), +		String jobNames = this.properties.getJob().getNames();, +		if (StringUtils.hasText(jobNames)) {, +			runner.setJobNames(jobNames);, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(value = "spring.aop.auto", match = "true", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "false", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "true", defaultMatch = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(BatchProperties.class), +	@Autowired, +	private BatchProperties properties;, +	@ConditionalOnProperty(value = "spring.batch.job.enabled", match = "true", defaultMatch = true), +		String jobNames = this.properties.getJob().getNames();, +		if (StringUtils.hasText(jobNames)) {, +			runner.setJobNames(jobNames);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +public class BatchDatabaseInitializer {, +, +	@Autowired, +	private BatchProperties properties;, +		if (this.properties.getInitializer().isEnabled()) {, +			String schemaLocation = this.properties.getSchema();, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(value = "spring.aop.auto", match = "true", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "false", defaultMatch = true), +	@ConditionalOnProperty(value = "spring.aop.proxyTargetClass", match = "true", defaultMatch = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(BatchProperties.class), +	@Autowired, +	private BatchProperties properties;, +	@ConditionalOnProperty(value = "spring.batch.job.enabled", match = "true", defaultMatch = true), +		String jobNames = this.properties.getJob().getNames();, +		if (StringUtils.hasText(jobNames)) {, +			runner.setJobNames(jobNames);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +public class BatchDatabaseInitializer {, +, +	@Autowired, +	private BatchProperties properties;, +		if (this.properties.getInitializer().isEnabled()) {, +			String schemaLocation = this.properties.getSchema();]