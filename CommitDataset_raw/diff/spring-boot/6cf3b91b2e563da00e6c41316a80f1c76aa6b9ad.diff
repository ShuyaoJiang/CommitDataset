[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +					names.add("*_"+name);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +					names.add("*_"+name);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +	, +	@Test, +	public void testUnderscore() throws Exception {, +		Foo foo = createFoo("spring_foo_baz: blah\nname: blah");, +		assertEquals("blah", foo.spring_foo_baz);, +		assertEquals("blah", foo.name);, +	}, +	, +		private String spring_foo_baz;, +, +		public String getSpringFooBaz() {, +			return spring_foo_baz;, +		}, +, +		public void setSpringFooBaz(String spring_foo_baz) {, +			this.spring_foo_baz = spring_foo_baz;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +					names.add("*_"+name);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +	, +	@Test, +	public void testUnderscore() throws Exception {, +		Foo foo = createFoo("spring_foo_baz: blah\nname: blah");, +		assertEquals("blah", foo.spring_foo_baz);, +		assertEquals("blah", foo.name);, +	}, +	, +		private String spring_foo_baz;, +, +		public String getSpringFooBaz() {, +			return spring_foo_baz;, +		}, +, +		public void setSpringFooBaz(String spring_foo_baz) {, +			this.spring_foo_baz = spring_foo_baz;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java, +	public void testPropertiesEmbeddedBinding() {, +		this.context.register(EmbeddedTestConfiguration.class);, +		TestUtils.addEnviroment(this.context, "spring_foo_name:foo");, +		this.context.refresh();, +		assertEquals(1,, +				this.context.getBeanNamesForType(EmbeddedTestProperties.class).length);, +		assertEquals("foo", this.context.getBean(TestProperties.class).name);, +	}, +	, +	, +	@Test, +	@EnableConfigurationProperties(EmbeddedTestProperties.class), +	protected static class EmbeddedTestConfiguration {, +	}, +	@Configuration, +	@ConfigurationProperties(name = "spring.foo"), +	protected static class EmbeddedTestProperties extends TestProperties {, +, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +					names.add("*_"+name);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +	, +	@Test, +	public void testUnderscore() throws Exception {, +		Foo foo = createFoo("spring_foo_baz: blah\nname: blah");, +		assertEquals("blah", foo.spring_foo_baz);, +		assertEquals("blah", foo.name);, +	}, +	, +		private String spring_foo_baz;, +, +		public String getSpringFooBaz() {, +			return spring_foo_baz;, +		}, +, +		public void setSpringFooBaz(String spring_foo_baz) {, +			this.spring_foo_baz = spring_foo_baz;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java, +	public void testPropertiesEmbeddedBinding() {, +		this.context.register(EmbeddedTestConfiguration.class);, +		TestUtils.addEnviroment(this.context, "spring_foo_name:foo");, +		this.context.refresh();, +		assertEquals(1,, +				this.context.getBeanNamesForType(EmbeddedTestProperties.class).length);, +		assertEquals("foo", this.context.getBean(TestProperties.class).name);, +	}, +	, +	, +	@Test, +	@EnableConfigurationProperties(EmbeddedTestProperties.class), +	protected static class EmbeddedTestConfiguration {, +	}]