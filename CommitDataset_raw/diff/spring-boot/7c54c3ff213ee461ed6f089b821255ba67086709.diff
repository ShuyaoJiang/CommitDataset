[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			if (this.liquibaseDataSource != null) {, +			else if (this.properties.getUrl() == null) {, +				return this.dataSource;, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			if (this.liquibaseDataSource != null) {, +			else if (this.properties.getUrl() == null) {, +				return this.dataSource;, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseDataSource.java, + * Qualifier annotation for a DataSource to be injected in to Liquibase. If used for a, + * second data source, the other (main) one would normally be marked as {@code @Primary}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			if (this.liquibaseDataSource != null) {, +			else if (this.properties.getUrl() == null) {, +				return this.dataSource;, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseDataSource.java, + * Qualifier annotation for a DataSource to be injected in to Liquibase. If used for a, + * second data source, the other (main) one would normally be marked as {@code @Primary}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +import org.springframework.context.annotation.Primary;, +		assertThat(liquibase.getDataSource()), +				.isEqualTo(this.context.getBean("liquibaseDataSource"));, +		@Bean, +		@Primary, +		public DataSource normalDataSource() {, +			return DataSourceBuilder.create().url("jdbc:hsqldb:mem:normal").username("sa"), +					.build();, +		}, +]