[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +				"spring.session.store-type=mongo");, +				"spring.session.store-type=mongo",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +				"spring.session.store-type=mongo");, +				"spring.session.store-type=mongo",, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@DataMongoTest` can be used if you want to test MongoDB applications. By default, it will, +configure an in-memory embedded MongoDB (if available), configure a `MongoTemplate`, scan, +for `@Document` classes and configure Spring Data MongoDB repositories. Regular, +`@Component` beans will not be loaded into the `ApplicationContext`:, +, +		//, +In-memory embedded MongoDB generally works well for tests since it is fast and doesn't, +require any developer installation. If, however, you prefer to run tests against a real, +MongoDB server you should exclude the embedded mongodb auto-configuration:, +	import org.junit.runner.RunWith;, +    import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;, +	import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;, +	import org.springframework.test.context.junit4.SpringRunner;, +, +	@RunWith(SpringRunner.class), +	public class ExampleDataMongoNonEmbeddedTests {, +, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +				"spring.session.store-type=mongo");, +				"spring.session.store-type=mongo",, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@DataMongoTest` can be used if you want to test MongoDB applications. By default, it will, +configure an in-memory embedded MongoDB (if available), configure a `MongoTemplate`, scan, +for `@Document` classes and configure Spring Data MongoDB repositories. Regular, +`@Component` beans will not be loaded into the `ApplicationContext`:, +, +		//, +In-memory embedded MongoDB generally works well for tests since it is fast and doesn't, +require any developer installation. If, however, you prefer to run tests against a real, +MongoDB server you should exclude the embedded mongodb auto-configuration:, +	import org.junit.runner.RunWith;, +    import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;, +	import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;, +	import org.springframework.test.context.junit4.SpringRunner;, +, +	@RunWith(SpringRunner.class), +	public class ExampleDataMongoNonEmbeddedTests {, +, +	}, +++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/main/java/sample/data/mongo/CustomerRepository.java, +	Customer findByFirstName(String firstName);, +	List<Customer> findByLastName(String lastName);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +				"spring.session.store-type=mongo");, +				"spring.session.store-type=mongo",, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@DataMongoTest` can be used if you want to test MongoDB applications. By default, it will, +configure an in-memory embedded MongoDB (if available), configure a `MongoTemplate`, scan, +for `@Document` classes and configure Spring Data MongoDB repositories. Regular, +`@Component` beans will not be loaded into the `ApplicationContext`:, +, +		//, +In-memory embedded MongoDB generally works well for tests since it is fast and doesn't, +require any developer installation. If, however, you prefer to run tests against a real, +MongoDB server you should exclude the embedded mongodb auto-configuration:, +	import org.junit.runner.RunWith;, +    import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;, +	import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;, +	import org.springframework.test.context.junit4.SpringRunner;, +, +	@RunWith(SpringRunner.class), +	public class ExampleDataMongoNonEmbeddedTests {, +, +	}, +++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/main/java/sample/data/mongo/CustomerRepository.java, +	Customer findByFirstName(String firstName);, +	List<Customer> findByLastName(String lastName);, +++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/main/resources/application.properties, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +				"spring.session.store-type=mongo");, +				"spring.session.store-type=mongo",, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@DataMongoTest` can be used if you want to test MongoDB applications. By default, it will, +configure an in-memory embedded MongoDB (if available), configure a `MongoTemplate`, scan, +for `@Document` classes and configure Spring Data MongoDB repositories. Regular, +`@Component` beans will not be loaded into the `ApplicationContext`:, +, +		//, +In-memory embedded MongoDB generally works well for tests since it is fast and doesn't, +require any developer installation. If, however, you prefer to run tests against a real, +MongoDB server you should exclude the embedded mongodb auto-configuration:, +	import org.junit.runner.RunWith;, +    import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;, +	import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;, +	import org.springframework.test.context.junit4.SpringRunner;, +, +	@RunWith(SpringRunner.class)]