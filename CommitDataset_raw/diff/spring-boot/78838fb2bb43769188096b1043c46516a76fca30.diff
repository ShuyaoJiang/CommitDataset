[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +== Configuration Metadata, +Spring Boot jars include metadata files that provide details of all supported, +configuration properties. The files are designed to let IDE developers offer, +The majority of the metadata file is generated automatically at compile time by, +to <<configuration-metadata-additional-metadata,write part of the metadata manually>>, +=== Metadata Format, +Configuration metadata files are located inside jars under, +categorized under either "`groups`" or "`properties`" and additional values hints, +categorized under "hints", as shown in the following example:, +For example, `server.port` and `server.servlet.path` might be specified in, +`application.properties`, as follows:, +The "`groups`" are higher level items that do not themselves specify a value but instead, +provide a contextual grouping for properties. For example, the `server.port` and, +NOTE: It is not required that every "`property`" has a "`group`". Some properties might, +exist in their own right., +given property. For example, when a developer is configuring the, +`spring.jpa.hibernate.ddl-auto` property, a tool can use the hints to offer some, +auto-completion help for the `none`, `validate`, `update`, `create`,, +The JSON object contained in the `groups` array can contain the attributes shown in the, +following table:, +| The class name of the data type of the group. For example, if the group were based, +  on a class annotated with `@ConfigurationProperties`, the attribute would contain the, +  fully qualified name of that class. If it were based on a `@Bean` method, it would be, +  the return type of that method. If the type is not known, the attribute may be omitted., +| A short description of the group that can be displayed to users. If not description is, +	available, it may be omitted. It is recommended that descriptions be short paragraphs,, +  were based on a `@Bean` method annotated with `@ConfigurationProperties`, this attribute, +  would contain the fully qualified name of the `@Configuration` class that contains the, +  method. If the source type is not known, the attribute may be omitted., +  this group (for example, the name of a `@ConfigurationProperties` annotated `@Bean`, +  method). If the source method is not known, it may be omitted., +The JSON object contained in the `properties` array can contain the attributes described, +in the following table:, +| The full name of the property. Names are in lower-case period-separated form (for, +	example, `server.servlet.path`). This attribute is mandatory., +| The full signature of the data type of the property (for example, `java.lang.String`), +  but also a full generic type (such as `java.util.Map<java.util.String,acme.MyEnum>`)., +  You can use this attribute to guide the user as to the types of values that they can, +  enter. For consistency, the type of a primitive is specified by using its wrapper, +  counterpart (for example, `boolean` becomes `java.lang.Boolean`). Note that this class, +	may be a complex type that gets converted from a `String` as values are bound. If the, +	type is not known, it may be omitted., +| A short description of the group that can be displayed to users. If no description is, +	available, it may be omitted. It is recommended that descriptions be short paragraphs,, +  property were from a class annotated with `@ConfigurationProperties`, this attribute, +  would contain the fully qualified name of that class. If the source type is unknown, it, +	may be omitted., +| The default value, which is used if the property is not specified. If the type of the, +	property is an array, it can be an array of value(s). If the default value is unknown,, +	it may be omitted., +| Specify whether the property is deprecated. If the field is not deprecated or if that, +	information is not known, it may be omitted. The next table offers more detail about, +	the `deprecation` attribute., +|The level of deprecation, which can be either `warning` (the default) or `error`. When a, + property has a `warning` deprecation level, it should still be bound in the environment., + However, when it has an `error` deprecation level, the property is no longer managed and, + is not bound., +|A short description of the reason why the property was deprecated. If no reason is, +available, it may be omitted. It is recommended that descriptions be short paragraphs,, +|The full name of the property that _replaces_ this deprecated property. If there is no, + replacement for this property, it may be omitted., +property. For instance, assume that the `app.foo.target` property was confusing and, +was renamed to `app.foo.name`. The following example shows how to handle that situation:, +NOTE: There is no way to set a `level`. `warning` is always assumed, since code is still, +The preceding code makes sure that the deprecated property still works (delegating, +metadata goes away as well. If you want to keep a hint, adding manual metadata with, +an `error` deprecation level ensures that users are still informed about that property., +Doing so is particularly useful when a `replacement` is provided., +The JSON object contained in the `hints` array can contain the attributes shown in the, +following table:, +| The full name of the property to which this hint refers. Names are in lower-case, +	period-separated form (such as `server.servlet.path`). If the property refers to a map, +	(such as `system.contexts`), the hint either applies to the _keys_ of the map, +	(`system.context.keys`) or the _values_ (`system.context.values`) of the map. This, +	attribute is mandatory., +| A list of valid values as defined by the `ValueHint` object (described in the next, +	table). Each entry defines the value and may have a description., +| A list of providers as defined by the `ValueProvider` object (described later in this, +	document). Each entry defines the name of the provider and its parameters, if any., +The JSON object contained in the `values` attribute of each `hint` element can contain, +the attributes described in the following table:, +| A valid value for the element to which the hint refers. If the type of the property is, +an array, it can also be an array of value(s). This attribute is mandatory., +| A short description of the value that can be displayed to users. If no description is, +	available, it may be omitted . It is recommended that descriptions be short paragraphs,, +The JSON object contained in the `providers` attribute of each `hint` element can contain, +the attributes described in the following table:, +  to which the hint refers., +==== Repeated Metadata Items, +Objects with the same "`property`" and "`group`" name can appear multiple times within a, +metadata file. For example, you could bind two separate classes to the same prefix, with, +each having potentially overlapping property names. While the same names appearing in the, +metadata multiple times should not be common, consumers of metadata should take care to, +ensure that they support it., +=== Providing Manual Hints, +property, you can provide additional metadata that:, +* Describes the list of potential values for a property., +* Associates a provider, to attach a well defined semantic to a property, so that a tool, +==== Value Hint]