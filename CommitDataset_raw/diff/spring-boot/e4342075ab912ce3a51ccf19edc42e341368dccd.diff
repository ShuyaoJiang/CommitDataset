[+++ b/spring-boot-devtools/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-redis</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.session</groupId>, +			<artifactId>spring-session</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-devtools/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-redis</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.session</groupId>, +			<artifactId>spring-session</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.data.redis.core.RedisTemplate;, +import org.springframework.session.ExpiringSession;, + * @author Andy Wilkinson, +		@Configuration, +		@ConditionalOnBean(name = "sessionRedisTemplate"), +		static class RedisRestartConfiguration {, +, +			@Bean, +			public RestartCompatibleRedisSerializerConfigurer restartCompatibleRedisSerializerConfigurer(, +					RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {, +				return new RestartCompatibleRedisSerializerConfigurer(, +						sessionRedisTemplate);, +			}, +, +		}, +, +++ b/spring-boot-devtools/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-redis</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.session</groupId>, +			<artifactId>spring-session</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.data.redis.core.RedisTemplate;, +import org.springframework.session.ExpiringSession;, + * @author Andy Wilkinson, +		@Configuration, +		@ConditionalOnBean(name = "sessionRedisTemplate"), +		static class RedisRestartConfiguration {, +, +			@Bean, +			public RestartCompatibleRedisSerializerConfigurer restartCompatibleRedisSerializerConfigurer(, +					RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {, +				return new RestartCompatibleRedisSerializerConfigurer(, +						sessionRedisTemplate);, +			}, +, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RestartCompatibleRedisSerializerConfigurer.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.devtools.autoconfigure;, +, +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.serializer.DefaultDeserializer;, +import org.springframework.core.serializer.support.DeserializingConverter;, +import org.springframework.core.serializer.support.SerializingConverter;, +import org.springframework.data.redis.core.RedisTemplate;, +import org.springframework.data.redis.serializer.RedisSerializer;, +import org.springframework.data.redis.serializer.SerializationException;, +import org.springframework.session.ExpiringSession;, +import org.springframework.util.ObjectUtils;]