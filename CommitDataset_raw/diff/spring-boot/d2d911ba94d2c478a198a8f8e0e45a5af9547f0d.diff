[+++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-dbcp2</artifactId>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/GuavaCacheStatisticsProvider.java, + * @deprecated as of 1.5 following the removal of Guava support in Spring Framework 5, +@Deprecated, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-dbcp2</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/GuavaCacheStatisticsProvider.java, + * @deprecated as of 1.5 following the removal of Guava support in Spring Framework 5, +@Deprecated, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +		private final MultiValueMap<String, MessageAndCondition> positiveMatches;, +		private final Map<String, MessageAndConditions> negativeMatches;, +		private final List<String> exclusions;, +		private final Report parent;, +			this.negativeMatches = new LinkedHashMap<String, MessageAndConditions>();, +				if (entry.getValue().isFullMatch()) {, +					add(this.positiveMatches, entry.getKey(), entry.getValue());, +				}, +				else {, +					add(this.negativeMatches, entry.getKey(), entry.getValue());, +				}, +			}, +			this.parent = report.getParent() != null ? new Report(report.getParent()), +					: null;, +		}, +		private void add(Map<String, MessageAndConditions> map, String source,, +				ConditionAndOutcomes conditionAndOutcomes) {, +			String name = ClassUtils.getShortName(source);, +, +			map.put(name, new MessageAndConditions(conditionAndOutcomes));, +		public Map<String, MessageAndConditions> getNegativeMatches() {, +	 * Adapts {@link ConditionAndOutcomes} to a JSON friendly structure., +	 */, +	@JsonPropertyOrder({ "notMatched", "matched" }), +	public static class MessageAndConditions {, +, +		private final List<MessageAndCondition> notMatched = new ArrayList<MessageAndCondition>();, +, +		private final List<MessageAndCondition> matched = new ArrayList<MessageAndCondition>();, +, +		public MessageAndConditions(ConditionAndOutcomes conditionAndOutcomes) {, +			for (ConditionAndOutcome conditionAndOutcome : conditionAndOutcomes) {, +				List<MessageAndCondition> target = conditionAndOutcome.getOutcome(), +						.isMatch() ? this.matched : this.notMatched;, +				target.add(new MessageAndCondition(conditionAndOutcome));, +			}, +		}, +, +		public List<MessageAndCondition> getNotMatched() {, +			return this.notMatched;, +		}, +, +		public List<MessageAndCondition> getMatched() {, +			return this.matched;, +		}, +, +	}, +, +	/**, +]