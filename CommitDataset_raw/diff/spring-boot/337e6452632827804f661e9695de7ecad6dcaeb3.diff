[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +		File epochFile = new File("target/transaction-logs/tmlog0.log");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +		File epochFile = new File("target/transaction-logs/tmlog0.log");, +++ b/spring-boot-dependencies/pom.xml, +		<atomikos.version>4.0.4</atomikos.version>, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +		File epochFile = new File("target/transaction-logs/tmlog0.log");, +++ b/spring-boot-dependencies/pom.xml, +		<atomikos.version>4.0.4</atomikos.version>, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.jta.atomikos.properties.allow-sub-transactions=true # Specify if sub-transactions are allowed., +	spring.jta.atomikos.properties.recovery.delay=10000 # Delay between two recovery scans., +	spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay=86400000 # Delay after which recovery can cleanup pending ('orphaned') log entries., +	spring.jta.atomikos.properties.recovery.max-retries=5 # Number of retries attempts to commit the transaction before throwing an exception., +	spring.jta.atomikos.properties.recovery.retry-interval=10000 # Delay between retry attempts., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +		File epochFile = new File("target/transaction-logs/tmlog0.log");, +++ b/spring-boot-dependencies/pom.xml, +		<atomikos.version>4.0.4</atomikos.version>, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.jta.atomikos.properties.allow-sub-transactions=true # Specify if sub-transactions are allowed., +	spring.jta.atomikos.properties.recovery.delay=10000 # Delay between two recovery scans., +	spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay=86400000 # Delay after which recovery can cleanup pending ('orphaned') log entries., +	spring.jta.atomikos.properties.recovery.max-retries=5 # Number of retries attempts to commit the transaction before throwing an exception., +	spring.jta.atomikos.properties.recovery.retry-interval=10000 # Delay between retry attempts., +++ b/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java, +	 * Specify if sub-transactions are allowed., +	 */, +	private boolean allowSubTransactions = true;, +, +	/**, +	private final Recovery recovery = new Recovery();, +, +	public void setAllowSubTransactions(boolean allowSubTransactions) {, +		this.allowSubTransactions = allowSubTransactions;, +	}, +, +	public boolean isAllowSubTransactions() {, +		return this.allowSubTransactions;, +	}, +, +	public Recovery getRecovery() {, +		return this.recovery;, +	}, +, +		set(properties, "allow_subtransactions", isAllowSubTransactions());, +		Recovery recovery = getRecovery();, +		set(properties, "forget_orphaned_log_entries_delay",, +				recovery.getForgetOrphanedLogEntriesDelay());, +		set(properties, "recovery_delay", recovery.getDelay());, +		set(properties, "oltp_max_retries", recovery.getMaxRetries());, +		set(properties, "oltp_retry_interval", recovery.getRetryInterval());, +	/**, +	 * Recovery specific settings., +	 */, +	public static class Recovery {, +, +		/**, +		 * Delay after which recovery can cleanup pending ('orphaned') log entries., +		 */, +		private long forgetOrphanedLogEntriesDelay = 86400000;, +, +		/**, +		 * Delay between two recovery scans., +		 */, +		private long delay = 10000;, +, +		/**, +		 * Number of retries attempts to commit the transaction before throwing an, +		 * exception., +		 */, +		private int maxRetries = 5;, +, +		/**, +		 * Delay between retry attempts., +		 */, +		private long retryInterval = 10000;, +, +		public long getForgetOrphanedLogEntriesDelay() {, +			return this.forgetOrphanedLogEntriesDelay;, +		}, +, +		public void setForgetOrphanedLogEntriesDelay(long forgetOrphanedLogEntriesDelay) {, +			this.forgetOrphanedLogEntriesDelay = forgetOrphanedLogEntriesDelay;, +		}, +, +		public long getDelay() {, +			return this.delay;, +		}, +, +		public void setDelay(long delay) {, +			this.delay = delay;, +		}, +, +		public int getMaxRetries() {]