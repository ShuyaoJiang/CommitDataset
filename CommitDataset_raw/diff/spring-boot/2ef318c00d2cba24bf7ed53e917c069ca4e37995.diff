[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +@Configuration, +@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +@Configuration, +@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +	"name": "endpoints.trace.filter.enabled",, +	"type": "java.lang.Boolean",, +	"description": "Enable the trace servlet filter.",, +	"defaultValue": true, +  },, +  {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +@Configuration, +@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +	"name": "endpoints.trace.filter.enabled",, +	"type": "java.lang.Boolean",, +	"description": "Enable the trace servlet filter.",, +	"defaultValue": true, +  },, +  {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +import org.junit.After;, + * @author Stephane Nicoll, +	private AnnotationConfigApplicationContext context;, +, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +		load();, +		assertThat(this.context.getBean(WebRequestTraceFilter.class)).isNotNull();, +		load(CustomTraceFilterConfig.class);, +		WebRequestTraceFilter filter = this.context.getBean(WebRequestTraceFilter.class);, +		load("endpoints.trace.filter.enabled:false");, +		assertThat(this.context.getBeansOfType(WebRequestTraceFilter.class).size()), +			.isEqualTo(0);, +	}, +, +	private void load(String... environment) {, +		load(null, environment);, +	}, +, +	private void load(Class<?> config, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(ctx, environment);, +		if (config != null) {, +			ctx.register(config);, +		}, +		ctx.register(PropertyPlaceholderAutoConfiguration.class,, +		ctx.refresh();, +		this.context = ctx;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, +@Configuration, +@ConditionalOnProperty(prefix = "endpoints.trace.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +	"name": "endpoints.trace.filter.enabled",, +	"type": "java.lang.Boolean",, +	"description": "Enable the trace servlet filter.",, +	"defaultValue": true, +  },, +  {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +import org.junit.After;, + * @author Stephane Nicoll, +	private AnnotationConfigApplicationContext context;, +, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +		load();, +		assertThat(this.context.getBean(WebRequestTraceFilter.class)).isNotNull();, +		load(CustomTraceFilterConfig.class);, +		WebRequestTraceFilter filter = this.context.getBean(WebRequestTraceFilter.class);, +		load("endpoints.trace.filter.enabled:false");, +		assertThat(this.context.getBeansOfType(WebRequestTraceFilter.class).size()), +			.isEqualTo(0);, +	}, +, +	private void load(String... environment) {, +		load(null, environment);, +	}, +, +	private void load(Class<?> config, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(ctx, environment);, +		if (config != null) {, +			ctx.register(config);, +		}, +		ctx.register(PropertyPlaceholderAutoConfiguration.class,, +		ctx.refresh();]