[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		this.taskExecutor = taskExecutor.getIfUnique();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		this.taskExecutor = taskExecutor.getIfUnique();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +import org.quartz.simpl.SimpleThreadPool;, +import org.springframework.context.annotation.Primary;, +	public void withMultipleTaskExecutors() throws Exception {, +		load(QuartzMultipleExecutorsConfiguration.class);, +		assertThat(this.context.getBeansOfType(Executor.class)).hasSize(2);, +		assertThat(this.context.getBeansOfType(Scheduler.class)).hasSize(1);, +		Scheduler scheduler = this.context.getBean(Scheduler.class);, +		assertThat(scheduler.getMetaData().getThreadPoolClass()), +				.isEqualTo(SimpleThreadPool.class);, +	}, +, +	@Test, +	public void withMultipleTaskExecutorsWithPrimary() throws Exception {, +		load(QuartzMultipleExecutorsWithPrimaryConfiguration.class);, +		assertThat(this.context.getBeansOfType(Executor.class)).hasSize(2);, +		assertThat(this.context.getBeansOfType(Scheduler.class)).hasSize(1);, +		Scheduler scheduler = this.context.getBean(Scheduler.class);, +		assertThat(scheduler.getMetaData().getThreadPoolClass()), +				.isEqualTo(LocalTaskExecutorThreadPool.class);, +	}, +, +	@Test, +	public void withMultipleTaskExecutorsWithCustomizer() throws Exception {, +		load(QuartzMultipleExecutorsWithCustomizerConfiguration.class);, +		assertThat(this.context.getBeansOfType(Executor.class)).hasSize(3);, +		assertThat(this.context.getBeansOfType(Scheduler.class)).hasSize(1);, +		Scheduler scheduler = this.context.getBean(Scheduler.class);, +		assertThat(scheduler.getMetaData().getThreadPoolClass()), +				.isEqualTo(LocalTaskExecutorThreadPool.class);, +	}, +, +	@Test, +	protected static class QuartzMultipleExecutorsConfiguration, +			extends QuartzExecutorConfiguration {, +, +		@Bean, +		public Executor anotherExecutor() {, +			return Executors.newSingleThreadExecutor();, +		}, +, +	}, +, +	@Configuration, +	protected static class QuartzMultipleExecutorsWithPrimaryConfiguration, +			extends QuartzExecutorConfiguration {, +, +		@Bean, +		@Primary, +		public Executor primaryExecutor() {, +			return Executors.newSingleThreadExecutor();, +		}, +, +	}, +, +	@Configuration, +	protected static class QuartzMultipleExecutorsWithCustomizerConfiguration, +			extends QuartzMultipleExecutorsConfiguration {, +, +		@Bean, +		public Executor yetAnotherExecutor() {, +			return Executors.newSingleThreadExecutor();, +		}, +, +		@Bean, +		public SchedulerFactoryBeanCustomizer customizer() {, +			return schedulerFactoryBean -> schedulerFactoryBean, +					.setTaskExecutor(yetAnotherExecutor());, +		}, +, +	}, +, +	@Configuration]