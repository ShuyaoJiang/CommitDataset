[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import java.util.Arrays;, +				.to((maxHttpHeaderSize) -> factory.addServerCustomizers(, +						new MaxHttpHeaderSizeCustomizer(maxHttpHeaderSize)));, +	private static class MaxHttpHeaderSizeCustomizer implements JettyServerCustomizer {, +, +		private final int maxHttpHeaderSize;, +, +		MaxHttpHeaderSizeCustomizer(int maxHttpHeaderSize) {, +			this.maxHttpHeaderSize = maxHttpHeaderSize;, +		}, +, +		@Override, +		public void customize(Server server) {, +			Arrays.stream(server.getConnectors()).forEach(this::customize);, +		}, +, +		private void customize(org.eclipse.jetty.server.Connector connector) {, +			connector.getConnectionFactories().forEach(this::customize);, +		}, +, +		private void customize(ConnectionFactory factory) {, +			if (factory instanceof HttpConfiguration.ConnectionFactory) {, +				((HttpConfiguration.ConnectionFactory) factory).getHttpConfiguration(), +						.setRequestHeaderSize(this.maxHttpHeaderSize);, +			}, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import java.util.Arrays;, +				.to((maxHttpHeaderSize) -> factory.addServerCustomizers(, +						new MaxHttpHeaderSizeCustomizer(maxHttpHeaderSize)));, +	private static class MaxHttpHeaderSizeCustomizer implements JettyServerCustomizer {, +, +		private final int maxHttpHeaderSize;, +, +		MaxHttpHeaderSizeCustomizer(int maxHttpHeaderSize) {, +			this.maxHttpHeaderSize = maxHttpHeaderSize;, +		}, +, +		@Override, +		public void customize(Server server) {, +			Arrays.stream(server.getConnectors()).forEach(this::customize);, +		}, +, +		private void customize(org.eclipse.jetty.server.Connector connector) {, +			connector.getConnectionFactories().forEach(this::customize);, +		}, +, +		private void customize(ConnectionFactory factory) {, +			if (factory instanceof HttpConfiguration.ConnectionFactory) {, +				((HttpConfiguration.ConnectionFactory) factory).getHttpConfiguration(), +						.setRequestHeaderSize(this.maxHttpHeaderSize);, +			}, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfigurationTests.java, +				.run((context) -> assertThat(context), +						.doesNotHaveBean(JdbcRepositoryConfigExtension.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import java.util.Arrays;, +				.to((maxHttpHeaderSize) -> factory.addServerCustomizers(, +						new MaxHttpHeaderSizeCustomizer(maxHttpHeaderSize)));, +	private static class MaxHttpHeaderSizeCustomizer implements JettyServerCustomizer {, +, +		private final int maxHttpHeaderSize;, +, +		MaxHttpHeaderSizeCustomizer(int maxHttpHeaderSize) {, +			this.maxHttpHeaderSize = maxHttpHeaderSize;, +		}, +, +		@Override, +		public void customize(Server server) {, +			Arrays.stream(server.getConnectors()).forEach(this::customize);, +		}, +, +		private void customize(org.eclipse.jetty.server.Connector connector) {, +			connector.getConnectionFactories().forEach(this::customize);, +		}, +, +		private void customize(ConnectionFactory factory) {, +			if (factory instanceof HttpConfiguration.ConnectionFactory) {, +				((HttpConfiguration.ConnectionFactory) factory).getHttpConfiguration(), +						.setRequestHeaderSize(this.maxHttpHeaderSize);, +			}, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfigurationTests.java, +				.run((context) -> assertThat(context), +						.doesNotHaveBean(JdbcRepositoryConfigExtension.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfigurationWithNoProviderTests.java, +		this.contextRunner, +				.run((context) -> assertThat(context).doesNotHaveBean(Jsonb.class));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java]