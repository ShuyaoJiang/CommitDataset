[+++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +			<groupId>org.apache.httpcomponents</groupId>, +			<artifactId>httpclient</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +			<groupId>org.apache.httpcomponents</groupId>, +			<artifactId>httpclient</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +			<groupId>org.apache.httpcomponents</groupId>, +			<artifactId>httpclient</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/resources/templates/login.html, +					th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/pom.xml, +			<groupId>org.apache.httpcomponents</groupId>, +			<artifactId>httpclient</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/resources/templates/login.html, +					th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>, +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +@IntegrationTest("server.port:0"), +		assertEquals(HttpStatus.FOUND, entity.getStatusCode());, +		assertTrue("Wrong location:\n" + entity.getHeaders(),, +				entity.getHeaders().getLocation().toString().endsWith(port + "/login"));, +		HttpHeaders headers = getHeaders();, +	private HttpHeaders getHeaders() {, +		HttpHeaders headers = new HttpHeaders();, +		ResponseEntity<String> page = new TestRestTemplate().getForEntity(, +				"http://localhost:" + this.port + "/login", String.class);, +		assertEquals(HttpStatus.OK, page.getStatusCode());, +		String cookie = page.getHeaders().getFirst("Set-Cookie");, +		headers.set("Cookie", cookie);, +		Matcher matcher = Pattern.compile("(?s).*name=\"_csrf\".*?value=\"([^\"]+).*").matcher(, +				page.getBody());, +		assertTrue("No csrf token: " + page.getBody(), matcher.matches());, +		headers.set("X-CSRF-TOKEN", matcher.group(1));, +		return headers;, +	}, +]