[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	private MetadataGenerationEnvironment metadataEnv;, +		this.metadataEnv = new MetadataGenerationEnvironment(env,, +				configurationPropertiesAnnotation(),, +				nestedConfigurationPropertyAnnotation(),, +				deprecatedConfigurationPropertyAnnotation(), endpointAnnotation(),, +				readOperationAnnotation());, +		TypeElement annotationType = this.metadataEnv, +				.getConfigurationPropertiesAnnotationElement();, +		TypeElement endpointType = this.metadataEnv.getEndpointAnnotationElement();, +			AnnotationMirror annotation = this.metadataEnv, +					.getConfigurationPropertiesAnnotation(element);, +		String type = this.metadataEnv.getTypeUtils().getQualifiedName(element);, +				ItemMetadata group = ItemMetadata, +						.newGroup(prefix,, +								this.metadataEnv.getTypeUtils().getQualifiedName(returns),, +								this.metadataEnv.getTypeUtils(), +										.getQualifiedName(element.getEnclosingElement()),, +		new PropertyDescriptorResolver(this.metadataEnv).resolve(element, source), +				.forEach((descriptor) -> {, +					this.metadataCollector.add(, +							descriptor.resolveItemMetadata(prefix, this.metadataEnv));, +					if (descriptor.isNested(this.metadataEnv)) {, +						TypeElement nestedTypeElement = (TypeElement) this.metadataEnv, +								.getTypeUtils().asElement(descriptor.getType());, +						String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix,, +								descriptor.getName());, +						processTypeElement(nestedPrefix, nestedTypeElement, source);, +			String annotationName = this.metadataEnv.getTypeUtils(), +					.getQualifiedName(annotations.get(0));, +			AnnotationMirror annotation = this.metadataEnv.getAnnotation(element,, +					annotationName);, +		Map<String, Object> elementValues = this.metadataEnv, +				.getAnnotationElementValues(annotation);, +		String type = this.metadataEnv.getTypeUtils().getQualifiedName(element);, +			if (this.metadataEnv.getReadOperationAnnotation(method) != null, +			if (!this.metadataEnv.hasNullableAnnotation(parameter)) {, +		Map<String, Object> elementValues = this.metadataEnv, +				.getAnnotationElementValues(annotation);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	private MetadataGenerationEnvironment metadataEnv;, +		this.metadataEnv = new MetadataGenerationEnvironment(env,, +				configurationPropertiesAnnotation(),, +				nestedConfigurationPropertyAnnotation(),, +				deprecatedConfigurationPropertyAnnotation(), endpointAnnotation(),, +				readOperationAnnotation());, +		TypeElement annotationType = this.metadataEnv, +				.getConfigurationPropertiesAnnotationElement();, +		TypeElement endpointType = this.metadataEnv.getEndpointAnnotationElement();, +			AnnotationMirror annotation = this.metadataEnv, +					.getConfigurationPropertiesAnnotation(element);, +		String type = this.metadataEnv.getTypeUtils().getQualifiedName(element);, +				ItemMetadata group = ItemMetadata, +						.newGroup(prefix,, +								this.metadataEnv.getTypeUtils().getQualifiedName(returns),, +								this.metadataEnv.getTypeUtils(), +										.getQualifiedName(element.getEnclosingElement()),, +		new PropertyDescriptorResolver(this.metadataEnv).resolve(element, source), +				.forEach((descriptor) -> {, +					this.metadataCollector.add(, +							descriptor.resolveItemMetadata(prefix, this.metadataEnv));, +					if (descriptor.isNested(this.metadataEnv)) {, +						TypeElement nestedTypeElement = (TypeElement) this.metadataEnv, +								.getTypeUtils().asElement(descriptor.getType());, +						String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix,, +								descriptor.getName());, +						processTypeElement(nestedPrefix, nestedTypeElement, source);, +			String annotationName = this.metadataEnv.getTypeUtils(), +					.getQualifiedName(annotations.get(0));, +			AnnotationMirror annotation = this.metadataEnv.getAnnotation(element,, +					annotationName);, +		Map<String, Object> elementValues = this.metadataEnv, +				.getAnnotationElementValues(annotation);, +		String type = this.metadataEnv.getTypeUtils().getQualifiedName(element);, +			if (this.metadataEnv.getReadOperationAnnotation(method) != null, +			if (!this.metadataEnv.hasNullableAnnotation(parameter)) {, +		Map<String, Object> elementValues = this.metadataEnv, +				.getAnnotationElementValues(annotation);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/JavaBeanPropertyDescriptor.java, +/*, + * Copyright 2012-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor;, +, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;]