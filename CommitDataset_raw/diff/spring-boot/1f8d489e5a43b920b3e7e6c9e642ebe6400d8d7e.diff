[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-testing-spring-boot-applications-testing-with-running-server]], +==== Testing with a running server, +If you need to start a full running server, we recommend that you use random ports., +If you use `@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)`, an, +additionally `@Autowire` a, +{spring-reference}testing.html#webtestclient-tests[`WebTestClient`], which resolves, +relative links to the running server and comes with a dedicated API for verifying, +responses, as shown in the following example:, +Spring Boot also provides a `TestRestTemplate` facility:, +, +[source,java,indent=0], +----, +include::{code-examples}/test/web/RandomPortTestRestTemplateExampleTests.java[tag=test-random-port], +----, +, +TIP: Sometimes writing Spring MVC tests is not enough; Spring Boot can help you running, +<<boot-features-testing-spring-boot-applications-testing-with-running-server,, +full end-to-end tests with an actual server>>., +TIP: Sometimes writing Spring MVC tests is not enough; Spring Boot can help you running, +<<boot-features-testing-spring-boot-applications-testing-with-running-server,, +full end-to-end tests with an actual server>>., +, +TIP: Spring Framework 5.0 provides a new `WebTestClient` that works for, +<<boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests,, +WebFlux integration tests>> and both, +<<boot-features-testing-spring-boot-applications-testing-with-running-server,, +WebFlux and MVC end-to-end testing>>. It provides a fluent API for assertions,, +unlike `TestRestTemplate`., +, +]