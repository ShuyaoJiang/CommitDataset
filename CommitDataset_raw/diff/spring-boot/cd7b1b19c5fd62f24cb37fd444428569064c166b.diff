[+++ b/spring-boot-cli/pom.xml, +									<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-cli/pom.xml, +									<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import org.springframework.boot.cli.command.InitCommand;, +	private List<Command> commands = new ArrayList<Command>();, +		try {, +			new InitCommand(this).run();, +		catch (Exception e) {, +			throw new IllegalStateException("Cannot init with those args", e);, +++ b/spring-boot-cli/pom.xml, +									<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import org.springframework.boot.cli.command.InitCommand;, +	private List<Command> commands = new ArrayList<Command>();, +		try {, +			new InitCommand(this).run();, +		catch (Exception e) {, +			throw new IllegalStateException("Cannot init with those args", e);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/FileOptions.java, +	 * Create a new {@link FileOptions} instance. If it is an error to pass options that, +	 * specify non-existent files, but the default paths are allowed not to exist (the, +	 * paths are tested before use). If default paths are provided and the option set, +	 * contains no file arguments it is not an error even if none of the default paths, +	 * exist)., +	 * , +	 * found in the local filesystem, +	 * @param defaultPaths the default paths to use if no files are provided in the option, +	 * set, +	public FileOptions(OptionSet optionSet, ClassLoader classLoader,, +			String... defaultPaths) {, +						throw new IllegalArgumentException("Can't find " + filename);, +		if (files.size() == 0) {, +			if (defaultPaths.length == 0) {, +				throw new RuntimeException("Please specify at least one file to run");, +			}, +			for (String path : defaultPaths) {, +				File file = getFile(path, classLoader);, +				if (file != null && file.exists()) {, +					files.add(file);, +				}, +			}, +		}, +		this.files = Collections.unmodifiableList(files);, +++ b/spring-boot-cli/pom.xml, +									<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import org.springframework.boot.cli.command.InitCommand;, +	private List<Command> commands = new ArrayList<Command>();, +		try {, +			new InitCommand(this).run();, +		catch (Exception e) {, +			throw new IllegalStateException("Cannot init with those args", e);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/FileOptions.java, +	 * Create a new {@link FileOptions} instance. If it is an error to pass options that, +	 * specify non-existent files, but the default paths are allowed not to exist (the, +	 * paths are tested before use). If default paths are provided and the option set, +	 * contains no file arguments it is not an error even if none of the default paths, +	 * exist)., +	 * , +	 * found in the local filesystem, +	 * @param defaultPaths the default paths to use if no files are provided in the option, +	 * set, +	public FileOptions(OptionSet optionSet, ClassLoader classLoader,, +			String... defaultPaths) {, +						throw new IllegalArgumentException("Can't find " + filename);, +		if (files.size() == 0) {, +			if (defaultPaths.length == 0) {, +				throw new RuntimeException("Please specify at least one file to run");, +			}, +			for (String path : defaultPaths) {, +				File file = getFile(path, classLoader);, +				if (file != null && file.exists()) {, +					files.add(file);, +				}, +			}, +		}, +		this.files = Collections.unmodifiableList(files);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.command;, +, +import groovy.lang.GroovyClassLoader;, +import groovy.lang.Script;]