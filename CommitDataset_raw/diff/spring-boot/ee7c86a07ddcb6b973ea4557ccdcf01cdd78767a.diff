[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.projectreactor.spring</groupId>, +			<artifactId>reactor-spring-context</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.projectreactor.spring</groupId>, +			<artifactId>reactor-spring-context</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.Environment;, +import reactor.bus.EventBus;, +	@ConditionalOnMissingBean(EventBus.class), +	public EventBus eventBus(Environment environment) {, +		return EventBus.create(environment);, +, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.projectreactor.spring</groupId>, +			<artifactId>reactor-spring-context</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.Environment;, +import reactor.bus.EventBus;, +	@ConditionalOnMissingBean(EventBus.class), +	public EventBus eventBus(Environment environment) {, +		return EventBus.create(environment);, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import reactor.bus.EventBus;, +import reactor.core.Dispatcher;, +import reactor.core.dispatch.MpscDispatcher;, +import reactor.core.dispatch.RingBufferDispatcher;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +	public void eventBusIsAvailable() {, +		EventBus eventBus = this.context.getBean(EventBus.class);, +		assertThat(eventBus.getDispatcher(), instanceOf(RingBufferDispatcher.class));, +	public void customEventBus() {, +		EventBus eventBus = this.context.getBean(EventBus.class);, +		assertThat(eventBus.getDispatcher(), instanceOf(MpscDispatcher.class));, +		@Bean(destroyMethod = "shutdown"), +		public Dispatcher dispatcher() {, +			return new MpscDispatcher("test");, +		}, +, +		public EventBus customEventBus() {, +			return EventBus.create(dispatcher());, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.projectreactor.spring</groupId>, +			<artifactId>reactor-spring-context</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.Environment;, +import reactor.bus.EventBus;, +	@ConditionalOnMissingBean(EventBus.class), +	public EventBus eventBus(Environment environment) {, +		return EventBus.create(environment);, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import reactor.bus.EventBus;, +import reactor.core.Dispatcher;, +import reactor.core.dispatch.MpscDispatcher;, +import reactor.core.dispatch.RingBufferDispatcher;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +	public void eventBusIsAvailable() {, +		EventBus eventBus = this.context.getBean(EventBus.class);, +		assertThat(eventBus.getDispatcher(), instanceOf(RingBufferDispatcher.class));, +	public void customEventBus() {, +		EventBus eventBus = this.context.getBean(EventBus.class);, +		assertThat(eventBus.getDispatcher(), instanceOf(MpscDispatcher.class));, +		@Bean(destroyMethod = "shutdown"), +		public Dispatcher dispatcher() {, +			return new MpscDispatcher("test");, +		}, +, +		public EventBus customEventBus() {, +			return EventBus.create(dispatcher());, +++ b/spring-boot-cli/samples/reactor.groovy, +	EventBus eventBus, +		eventBus.notify("hello", Event.wrap("Phil")), +	EventBus eventBus, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.projectreactor.spring</groupId>, +			<artifactId>reactor-spring-context</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java]