[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +	private static final String JAR_SCAN_FILTER_CLASS = "org.apache.tomcat.JarScanFilter";, +, +	private static final String STANDARD_JAR_SCAN_FILTER_CLASS = "org.apache.tomcat.util.scan.StandardJarScanFilter";, +, +		setPatternToTomcat8SkipFilter(this.pattern);, +	}, +, +	private void setPatternToTomcat8SkipFilter(SkipPattern pattern) {, +		if (ClassUtils.isPresent(JAR_SCAN_FILTER_CLASS, null)) {, +			try {, +				Class<?> filterClass = Class.forName(JAR_SCAN_FILTER_CLASS);, +				Method setJarScanner = ReflectionUtils.findMethod(, +						StandardJarScanner.class, "setJarScanFilter", filterClass);, +				setJarScanner.invoke(this, createStandardJarScanFilter(pattern));, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +	}, +, +	private Object createStandardJarScanFilter(SkipPattern pattern), +			throws ClassNotFoundException, InstantiationException,, +			IllegalAccessException, InvocationTargetException {, +		Class<?> filterClass = Class.forName(STANDARD_JAR_SCAN_FILTER_CLASS);, +		Method setTldSkipMethod = ReflectionUtils.findMethod(filterClass, "setTldSkip",, +				String.class);, +		Object scanner = filterClass.newInstance();, +		setTldSkipMethod.invoke(scanner, pattern.asCommaDelimitedString());, +		return scanner;, +		public String asCommaDelimitedString() {, +			return StringUtils.collectionToCommaDelimitedString(this.patterns);, +		}, +]