[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.task.TaskExecutionProperties.Shutdown;, +		Shutdown shutdown = this.properties.getShutdown();, +		builder = builder.awaitTermination(shutdown.isAwaitTermination());, +		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.task.TaskExecutionProperties.Shutdown;, +		Shutdown shutdown = this.properties.getShutdown();, +		builder = builder.awaitTermination(shutdown.isAwaitTermination());, +		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionProperties.java, + * Copyright 2012-2019 the original author or authors., +	private final Shutdown shutdown = new Shutdown();, +, +	public Shutdown getShutdown() {, +		return this.shutdown;, +	}, +, +	public static class Shutdown {, +, +		/**, +		 * Whether the executor should wait for scheduled tasks to complete on shutdown., +		 */, +		private boolean awaitTermination;, +, +		/**, +		 * Maximum time the executor should wait for remaining tasks to complete., +		 */, +		private Duration awaitTerminationPeriod;, +, +		public boolean isAwaitTermination() {, +			return this.awaitTermination;, +		}, +, +		public void setAwaitTermination(boolean awaitTermination) {, +			this.awaitTermination = awaitTermination;, +		}, +, +		public Duration getAwaitTerminationPeriod() {, +			return this.awaitTerminationPeriod;, +		}, +, +		public void setAwaitTerminationPeriod(Duration awaitTerminationPeriod) {, +			this.awaitTerminationPeriod = awaitTerminationPeriod;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.task.TaskExecutionProperties.Shutdown;, +		Shutdown shutdown = this.properties.getShutdown();, +		builder = builder.awaitTermination(shutdown.isAwaitTermination());, +		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionProperties.java, + * Copyright 2012-2019 the original author or authors., +	private final Shutdown shutdown = new Shutdown();, +, +	public Shutdown getShutdown() {, +		return this.shutdown;, +	}, +, +	public static class Shutdown {, +, +		/**, +		 * Whether the executor should wait for scheduled tasks to complete on shutdown., +		 */, +		private boolean awaitTermination;, +, +		/**, +		 * Maximum time the executor should wait for remaining tasks to complete., +		 */, +		private Duration awaitTerminationPeriod;, +, +		public boolean isAwaitTermination() {, +			return this.awaitTermination;, +		}, +, +		public void setAwaitTermination(boolean awaitTermination) {, +			this.awaitTermination = awaitTermination;, +		}, +, +		public Duration getAwaitTerminationPeriod() {, +			return this.awaitTerminationPeriod;, +		}, +, +		public void setAwaitTerminationPeriod(Duration awaitTerminationPeriod) {, +			this.awaitTerminationPeriod = awaitTerminationPeriod;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfigurationTests.java, +		this.contextRunner, +				.withPropertyValues("spring.task.execution.pool.queue-capacity=10",, +						"spring.task.execution.shutdown.await-termination=true",, +						"spring.task.execution.shutdown.await-termination-period=30s",, +						"spring.task.execution.thread-name-prefix=mytest-"), +					assertThat(taskExecutor), +							.hasFieldOrPropertyWithValue("awaitTerminationSeconds", 30);, +					assertThat(taskExecutor.getThreadNamePrefix()).isEqualTo("mytest-");]