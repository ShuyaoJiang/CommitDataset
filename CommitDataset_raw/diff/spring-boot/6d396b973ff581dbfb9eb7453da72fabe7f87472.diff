[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import org.springframework.kafka.transaction.KafkaTransactionManager;, + * @author Nakul Mishra, +		DefaultKafkaProducerFactory<Object, Object> factory = new DefaultKafkaProducerFactory<>(, +		KafkaProperties.Producer producer = this.properties.getProducer();, +		if (producer.getTransactionIdPrefix() != null) {, +			factory.setTransactionIdPrefix(producer.getTransactionIdPrefix());, +		}, +		return factory;, +	}, +, +	@Bean, +	@ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix"), +	@ConditionalOnMissingBean, +	public KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {, +		return new KafkaTransactionManager<>(producerFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import org.springframework.kafka.transaction.KafkaTransactionManager;, + * @author Nakul Mishra, +		DefaultKafkaProducerFactory<Object, Object> factory = new DefaultKafkaProducerFactory<>(, +		KafkaProperties.Producer producer = this.properties.getProducer();, +		if (producer.getTransactionIdPrefix() != null) {, +			factory.setTransactionIdPrefix(producer.getTransactionIdPrefix());, +		}, +		return factory;, +	}, +, +	@Bean, +	@ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix"), +	@ConditionalOnMissingBean, +	public KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {, +		return new KafkaTransactionManager<>(producerFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, + * @author Nakul Mishra, +		 * When non empty, enables transactional support for producer., +		 */, +		private String transactionIdPrefix;, +, +		/**, +		public String getTransactionIdPrefix() {, +			return this.transactionIdPrefix;, +		}, +, +		public void setTransactionIdPrefix(String transactionIdPrefix) {, +			this.transactionIdPrefix = transactionIdPrefix;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import org.springframework.kafka.transaction.KafkaTransactionManager;, + * @author Nakul Mishra, +		DefaultKafkaProducerFactory<Object, Object> factory = new DefaultKafkaProducerFactory<>(, +		KafkaProperties.Producer producer = this.properties.getProducer();, +		if (producer.getTransactionIdPrefix() != null) {, +			factory.setTransactionIdPrefix(producer.getTransactionIdPrefix());, +		}, +		return factory;, +	}, +, +	@Bean, +	@ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix"), +	@ConditionalOnMissingBean, +	public KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {, +		return new KafkaTransactionManager<>(producerFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, + * @author Nakul Mishra, +		 * When non empty, enables transactional support for producer., +		 */, +		private String transactionIdPrefix;, +, +		/**, +		public String getTransactionIdPrefix() {, +			return this.transactionIdPrefix;, +		}, +, +		public void setTransactionIdPrefix(String transactionIdPrefix) {, +			this.transactionIdPrefix = transactionIdPrefix;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +import org.springframework.kafka.transaction.KafkaTransactionManager;, + * @author Nakul Mishra, +					assertThat(, +							context.getBeansOfType(KafkaTransactionManager.class)), +									.isEmpty();, +						"spring.kafka.producer.transaction-id-prefix=foo",, +					assertThat(, +							context.getBeansOfType(KafkaTransactionManager.class)), +							.hasSize(1);]