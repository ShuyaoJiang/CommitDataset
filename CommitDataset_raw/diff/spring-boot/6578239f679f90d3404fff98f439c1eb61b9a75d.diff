[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedConversionService.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.core.convert.support.DefaultConversionService;, + * @author Stephane Nicoll, +		DefaultConversionService.addCollectionConverters(this.additionalConverters);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedConversionService.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.core.convert.support.DefaultConversionService;, + * @author Stephane Nicoll, +		DefaultConversionService.addCollectionConverters(this.additionalConverters);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +import static org.hamcrest.Matchers.contains;, +, +		result = bind(target, "bingos: The_Other");, +		assertThat(result.getErrorCount(), equalTo(0));, +		assertThat(target.getBingos(), contains(Bingo.THE_OTHER));, +, +		result = bind(target, "bingos: The_Other, that");, +		assertThat(result.getErrorCount(), equalTo(0));, +		assertThat(target.getBingos(), contains(Bingo.THE_OTHER, Bingo.THAT));, +		private List<Bingo> bingos;, +, +		public List<Bingo> getBingos() {, +			return this.bingos;, +		}, +, +		public void setBingos(List<Bingo> bingos) {, +			this.bingos = bingos;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedConversionService.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.core.convert.support.DefaultConversionService;, + * @author Stephane Nicoll, +		DefaultConversionService.addCollectionConverters(this.additionalConverters);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +import static org.hamcrest.Matchers.contains;, +, +		result = bind(target, "bingos: The_Other");, +		assertThat(result.getErrorCount(), equalTo(0));, +		assertThat(target.getBingos(), contains(Bingo.THE_OTHER));, +, +		result = bind(target, "bingos: The_Other, that");, +		assertThat(result.getErrorCount(), equalTo(0));, +		assertThat(target.getBingos(), contains(Bingo.THE_OTHER, Bingo.THAT));, +		private List<Bingo> bingos;, +, +		public List<Bingo> getBingos() {, +			return this.bingos;, +		}, +, +		public void setBingos(List<Bingo> bingos) {, +			this.bingos = bingos;, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +import java.util.List;, +, +import static org.hamcrest.Matchers.contains;, +	public void testRelaxedPropertyWithSetOfEnum() {, +		doEnumSetTest("test.the-values:foo,bar", FooEnum.FOO, FooEnum.BAR);, +		doEnumSetTest("test.the-values:foo", FooEnum.FOO);, +		doEnumSetTest("TEST_THE_VALUES:FoO", FooEnum.FOO);, +		doEnumSetTest("test_the_values:BaR,FoO", FooEnum.BAR, FooEnum.FOO);, +	}, +, +	private void doEnumSetTest(String property, FooEnum... expected) {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, property);, +		this.context.register(PropertyWithEnum.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(PropertyWithEnum.class).getTheValues(),, +				contains(expected));, +		this.context.close();, +	}, +, +	@Test, +		private List<FooEnum> theValues;, +, +		public List<FooEnum> getTheValues() {, +			return this.theValues;, +		}, +, +		public void setTheValues(List<FooEnum> theValues) {, +			this.theValues = theValues;, +		}, +]