[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			CachingConnectionFactory factory = new CachingConnectionFactory();, +			String addresses = config.getAddresses();, +			factory.setAddresses(addresses);, +			if (config.getHost() != null) {, +				factory.setHost(config.getHost());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			CachingConnectionFactory factory = new CachingConnectionFactory();, +			String addresses = config.getAddresses();, +			factory.setAddresses(addresses);, +			if (config.getHost() != null) {, +				factory.setHost(config.getHost());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +import org.springframework.util.StringUtils;, +	private String addresses;, +, +		if (this.addresses == null) {, +		String[] hosts = StringUtils.delimitedListToStringArray(this.addresses, ":");, +		if (hosts.length == 2) {, +			return hosts[0];, +		}, +		return null;, +	}, +		if (this.addresses == null) {, +		String[] hosts = StringUtils.delimitedListToStringArray(this.addresses, ":");, +		if (hosts.length >= 2) {, +			return Integer, +					.valueOf(StringUtils.commaDelimitedListToStringArray(hosts[1])[0]);, +		}, +		return this.port;, +	}, +, +	public String getAddresses() {, +		return this.addresses == null ? this.host + ":" + this.port : this.addresses;, +	}, +, +	public void setAddresses(String addresses) {, +		this.addresses = addresses;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			CachingConnectionFactory factory = new CachingConnectionFactory();, +			String addresses = config.getAddresses();, +			factory.setAddresses(addresses);, +			if (config.getHost() != null) {, +				factory.setHost(config.getHost());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +import org.springframework.util.StringUtils;, +	private String addresses;, +, +		if (this.addresses == null) {, +		String[] hosts = StringUtils.delimitedListToStringArray(this.addresses, ":");, +		if (hosts.length == 2) {, +			return hosts[0];, +		}, +		return null;, +	}, +		if (this.addresses == null) {, +		String[] hosts = StringUtils.delimitedListToStringArray(this.addresses, ":");, +		if (hosts.length >= 2) {, +			return Integer, +					.valueOf(StringUtils.commaDelimitedListToStringArray(hosts[1])[0]);, +		}, +		return this.port;, +	}, +, +	public String getAddresses() {, +		return this.addresses == null ? this.host + ":" + this.port : this.addresses;, +	}, +, +	public void setAddresses(String addresses) {, +		this.addresses = addresses;, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.amqp;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +/**, + * @author Dave Syer]