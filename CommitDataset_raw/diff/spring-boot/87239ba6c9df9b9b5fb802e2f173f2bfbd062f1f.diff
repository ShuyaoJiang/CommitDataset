[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/BuildProperties.java, +import java.time.DateTimeException;, +import java.time.format.DateTimeFormatter;, +				String updatedValue = String.valueOf(DateTimeFormatter.ISO_INSTANT, +						.parse(value, Instant::from).toEpochMilli());, +			catch (DateTimeException ex) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/BuildProperties.java, +import java.time.DateTimeException;, +import java.time.format.DateTimeFormatter;, +				String updatedValue = String.valueOf(DateTimeFormatter.ISO_INSTANT, +						.parse(value, Instant::from).toEpochMilli());, +			catch (DateTimeException ex) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/info/BuildPropertiesTests.java, +import java.time.Instant;, +import java.time.format.DateTimeFormatter;, +		Instant instant = Instant.now();, +				"demo", "0.0.1", DateTimeFormatter.ISO_INSTANT.format(instant)));, +		assertThat(properties.getTime()).isEqualTo(instant);, +		assertThat(properties.get("time")), +				.isEqualTo(String.valueOf(instant.toEpochMilli()));]