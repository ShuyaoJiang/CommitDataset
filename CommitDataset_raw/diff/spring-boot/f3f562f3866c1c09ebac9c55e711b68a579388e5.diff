[+++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, +	<springProfile name="staging">, +		<logger name="sample.logback" level="TRACE" />, +	</springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, +	<springProfile name="staging">, +		<logger name="sample.logback" level="TRACE" />, +	</springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, +	@Test, +	public void testProfile() throws Exception {, +		SampleLogbackApplication, +				.main(new String[] { "--spring.profiles.active=staging" });, +		this.outputCapture.expect(containsString("Sample Debug Message"));, +		this.outputCapture.expect(containsString("Sample Trace Message"));, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, +	<springProfile name="staging">, +		<logger name="sample.logback" level="TRACE" />, +	</springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, +	@Test, +	public void testProfile() throws Exception {, +		SampleLogbackApplication, +				.main(new String[] { "--spring.profiles.active=staging" });, +		this.outputCapture.expect(containsString("Sample Debug Message"));, +		this.outputCapture.expect(containsString("Sample Trace Message"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public void initialize(LoggingInitializationContext initializationContext,, +			String configLocation, LogFile logFile) {, +			initializeWithSpecificConfig(initializationContext, configLocation, logFile);, +		initializeWithConventions(initializationContext, logFile);, +	private void initializeWithSpecificConfig(, +			LoggingInitializationContext initializationContext, String configLocation,, +			LogFile logFile) {, +		loadConfiguration(initializationContext, configLocation, logFile);, +	private void initializeWithConventions(, +			LoggingInitializationContext initializationContext, LogFile logFile) {, +			reinitialize(initializationContext);, +			loadConfiguration(initializationContext, config, logFile);, +	 * @param initializationContext the logging initialization context, +	protected abstract void loadConfiguration(, +			LoggingInitializationContext initializationContext, String location,, +			LogFile logFile);, +	 * @param initializationContext the logging initialization context, +	protected void reinitialize(LoggingInitializationContext initializationContext) {, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, +	<springProfile name="staging">, +		<logger name="sample.logback" level="TRACE" />, +	</springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, +	@Test, +	public void testProfile() throws Exception {, +		SampleLogbackApplication, +				.main(new String[] { "--spring.profiles.active=staging" });, +		this.outputCapture.expect(containsString("Sample Debug Message"));, +		this.outputCapture.expect(containsString("Sample Trace Message"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public void initialize(LoggingInitializationContext initializationContext,, +			String configLocation, LogFile logFile) {, +			initializeWithSpecificConfig(initializationContext, configLocation, logFile);, +		initializeWithConventions(initializationContext, logFile);, +	private void initializeWithSpecificConfig(, +			LoggingInitializationContext initializationContext, String configLocation,, +			LogFile logFile) {, +		loadConfiguration(initializationContext, configLocation, logFile);, +	private void initializeWithConventions(, +			LoggingInitializationContext initializationContext, LogFile logFile) {, +			reinitialize(initializationContext);, +			loadConfiguration(initializationContext, config, logFile);, +	 * @param initializationContext the logging initialization context, +	protected abstract void loadConfiguration(, +			LoggingInitializationContext initializationContext, String location,, +			LogFile logFile);, +	 * @param initializationContext the logging initialization context, +	protected void reinitialize(LoggingInitializationContext initializationContext) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +		LoggingInitializationContext initializationContext = new LoggingInitializationContext(, +				environment);, +				system.initialize(initializationContext, logConfig, logFile);, +			system.initialize(initializationContext, null, logFile);, +++ b/spring-boot-samples/spring-boot-sample-logback/src/main/resources/logback-spring.xml, +	<springProfile name="staging">, +		<logger name="sample.logback" level="TRACE" />, +	</springProfile>, +++ b/spring-boot-samples/spring-boot-sample-logback/src/test/java/sample/logback/SampleLogbackApplicationTests.java, +	@Test, +	public void testProfile() throws Exception {, +		SampleLogbackApplication, +				.main(new String[] { "--spring.profiles.active=staging" });, +		this.outputCapture.expect(containsString("Sample Debug Message"));, +		this.outputCapture.expect(containsString("Sample Trace Message"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java]