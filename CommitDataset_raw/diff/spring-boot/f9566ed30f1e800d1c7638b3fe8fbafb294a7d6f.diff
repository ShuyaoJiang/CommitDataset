[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		this.paths = getLogFileName(fileOutput, consoleOutput);, +	protected abstract String[] getLogFileName(boolean fileOutput, boolean consoleOutput);, +, +		String path = this.paths[this.paths.length - 1];, +		path = path.replaceAll("-console", "").replaceAll("-file", "");, +		initialize(getPackagedConfigFile("basic-" + path));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		this.paths = getLogFileName(fileOutput, consoleOutput);, +	protected abstract String[] getLogFileName(boolean fileOutput, boolean consoleOutput);, +, +		String path = this.paths[this.paths.length - 1];, +		path = path.replaceAll("-console", "").replaceAll("-file", "");, +		initialize(getPackagedConfigFile("basic-" + path));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	public static final String LOG_FILE = "LOG_FILE";, +, +			LoggingSystem loggingSystem = LoggingSystem.get(ClassUtils.getDefaultClassLoader(), false, false);, +		boolean fileOutput = !StringUtils.isEmpty(environment.getProperty("logging.file"));, +		boolean consoleOutput = true;, +		if (!StringUtils.isEmpty(environment.getProperty("logging.console")), +				&& environment.getProperty("logging.console").equalsIgnoreCase("false")) {, +			consoleOutput = false;, +		}, +		LoggingSystem system = LoggingSystem.get(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		this.paths = getLogFileName(fileOutput, consoleOutput);, +	protected abstract String[] getLogFileName(boolean fileOutput, boolean consoleOutput);, +, +		String path = this.paths[this.paths.length - 1];, +		path = path.replaceAll("-console", "").replaceAll("-file", "");, +		initialize(getPackagedConfigFile("basic-" + path));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	public static final String LOG_FILE = "LOG_FILE";, +, +			LoggingSystem loggingSystem = LoggingSystem.get(ClassUtils.getDefaultClassLoader(), false, false);, +		boolean fileOutput = !StringUtils.isEmpty(environment.getProperty("logging.file"));, +		boolean consoleOutput = true;, +		if (!StringUtils.isEmpty(environment.getProperty("logging.console")), +				&& environment.getProperty("logging.console").equalsIgnoreCase("false")) {, +			consoleOutput = false;, +		}, +		LoggingSystem system = LoggingSystem.get(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	public static LoggingSystem get(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +					return (LoggingSystem) systemClass.getConstructor(ClassLoader.class, boolean.class, boolean.class), +							.newInstance(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		this.paths = getLogFileName(fileOutput, consoleOutput);, +	protected abstract String[] getLogFileName(boolean fileOutput, boolean consoleOutput);, +, +		String path = this.paths[this.paths.length - 1];, +		path = path.replaceAll("-console", "").replaceAll("-file", "");, +		initialize(getPackagedConfigFile("basic-" + path));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	public static final String LOG_FILE = "LOG_FILE";, +, +			LoggingSystem loggingSystem = LoggingSystem.get(ClassUtils.getDefaultClassLoader(), false, false);, +		boolean fileOutput = !StringUtils.isEmpty(environment.getProperty("logging.file"));, +		boolean consoleOutput = true;, +		if (!StringUtils.isEmpty(environment.getProperty("logging.console")), +				&& environment.getProperty("logging.console").equalsIgnoreCase("false")) {, +			consoleOutput = false;, +		}, +		LoggingSystem system = LoggingSystem.get(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	public static LoggingSystem get(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +					return (LoggingSystem) systemClass.getConstructor(ClassLoader.class, boolean.class, boolean.class), +							.newInstance(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java, +	public Slf4JLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		super(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		this.paths = getLogFileName(fileOutput, consoleOutput);, +	protected abstract String[] getLogFileName(boolean fileOutput, boolean consoleOutput);, +, +		String path = this.paths[this.paths.length - 1];, +		path = path.replaceAll("-console", "").replaceAll("-file", "");, +		initialize(getPackagedConfigFile("basic-" + path));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	public static final String LOG_FILE = "LOG_FILE";, +, +			LoggingSystem loggingSystem = LoggingSystem.get(ClassUtils.getDefaultClassLoader(), false, false);, +		boolean fileOutput = !StringUtils.isEmpty(environment.getProperty("logging.file"));, +		boolean consoleOutput = true;, +		if (!StringUtils.isEmpty(environment.getProperty("logging.console")), +				&& environment.getProperty("logging.console").equalsIgnoreCase("false")) {, +			consoleOutput = false;, +		}, +		LoggingSystem system = LoggingSystem.get(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	public static LoggingSystem get(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +					return (LoggingSystem) systemClass.getConstructor(ClassLoader.class, boolean.class, boolean.class), +							.newInstance(classLoader, fileOutput, consoleOutput);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java]