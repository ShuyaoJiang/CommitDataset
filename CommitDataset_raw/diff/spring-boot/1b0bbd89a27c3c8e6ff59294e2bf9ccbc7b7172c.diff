[+++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, + * Copyright 2012-2016 the original author or authors., + * <p>Uses an internal {@link ApplicationEventMulticaster} for the events that are, + * fired before the context is actually refreshed., + *, + * @author Stephane Nicoll, +	private final SpringApplication application;, +	private final String[] args;, +	private final ApplicationEventMulticaster initialMulticaster;, +		this.initialMulticaster = new SimpleApplicationEventMulticaster();, +			this.initialMulticaster.addApplicationListener(listener);, +		this.initialMulticaster.multicastEvent(new ApplicationStartedEvent(, +				this.application, this.args));, +		this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(, +				this.application, this.args, environment));, +		this.initialMulticaster.multicastEvent(new ApplicationPreparedEvent(, +				this.application, this.args, context));, +		// Listeners have been registered to the application context so we should, +		// use it at this point, +		context.publishEvent(getFinishedEvent(context, exception));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, + * Copyright 2012-2016 the original author or authors., + * <p>Uses an internal {@link ApplicationEventMulticaster} for the events that are, + * fired before the context is actually refreshed., + *, + * @author Stephane Nicoll, +	private final SpringApplication application;, +	private final String[] args;, +	private final ApplicationEventMulticaster initialMulticaster;, +		this.initialMulticaster = new SimpleApplicationEventMulticaster();, +			this.initialMulticaster.addApplicationListener(listener);, +		this.initialMulticaster.multicastEvent(new ApplicationStartedEvent(, +				this.application, this.args));, +		this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(, +				this.application, this.args, environment));, +		this.initialMulticaster.multicastEvent(new ApplicationPreparedEvent(, +				this.application, this.args, context));, +		// Listeners have been registered to the application context so we should, +		// use it at this point, +		context.publishEvent(getFinishedEvent(context, exception));, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import org.springframework.context.event.ApplicationEventMulticaster;, +import org.springframework.context.support.AbstractApplicationContext;, +import static org.hamcrest.CoreMatchers.isA;, +import static org.mockito.Matchers.argThat;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +		SpringApplication application = new SpringApplication(ExampleConfig.class,, +				ListenerConfig.class);, +, +		ApplicationListener<ApplicationEvent> listener = this.context.getBean(, +				"testApplicationListener", ApplicationListener.class);, +		verify(listener).onApplicationEvent(argThat(isA(ContextRefreshedEvent.class)));, +		verify(listener).onApplicationEvent(argThat(isA(ApplicationReadyEvent.class)));, +		verifyNoMoreInteractions(listener);, +				ListenerConfig.class, Multicaster.class);, +, +		ApplicationListener<ApplicationEvent> listener = this.context.getBean(, +				"testApplicationListener", ApplicationListener.class);, +		verify(listener).onApplicationEvent(argThat(isA(ContextRefreshedEvent.class)));, +		verify(listener).onApplicationEvent(argThat(isA(ApplicationReadyEvent.class)));, +		verifyNoMoreInteractions(listener);, +	static class ListenerConfig {, +		public ApplicationListener<?> testApplicationListener() {, +			return mock(ApplicationListener.class);, +		}, +, +	}, +, +	@Configuration, +	static class Multicaster {, +, +		@Bean(name = AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME), +		public ApplicationEventMulticaster applicationEventMulticaster() {, +			return spy(new SimpleApplicationEventMulticaster());]