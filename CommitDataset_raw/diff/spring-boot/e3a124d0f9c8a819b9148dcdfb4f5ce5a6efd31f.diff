[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import java.io.ByteArrayOutputStream;, +import java.util.Properties;, +, +import org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean;, +import org.springframework.core.io.ByteArrayResource;, + * @author Stephane Nicoll, +		public ConnectionFactory rabbitConnectionFactory(RabbitProperties config) throws Exception {, +			RabbitConnectionFactoryBean factory = new RabbitConnectionFactoryBean();, +			if (config.getRequestedHeartbeat() != null) {, +				factory.setRequestedHeartbeat(config.getRequestedHeartbeat());, +			}, +			RabbitProperties.Ssl ssl = config.getSsl();, +			if (ssl.isEnabled()) {, +				factory.setUseSSL(true);, +				if (ssl.getKeyStore() != null || ssl.getTrustStore() != null) {, +					Properties properties = ssl.createSslProperties();, +					ByteArrayOutputStream outputStream = new ByteArrayOutputStream();, +					properties.store(outputStream, "SSL config");, +					factory.setSslPropertiesLocation(, +							new ByteArrayResource(outputStream.toByteArray()));, +				}, +			}, +			factory.afterPropertiesSet();, +			CachingConnectionFactory connectionFactory = new CachingConnectionFactory(factory.getObject());, +			connectionFactory.setAddresses(config.getAddresses());, +			return connectionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import java.io.ByteArrayOutputStream;, +import java.util.Properties;, +, +import org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean;, +import org.springframework.core.io.ByteArrayResource;, + * @author Stephane Nicoll, +		public ConnectionFactory rabbitConnectionFactory(RabbitProperties config) throws Exception {, +			RabbitConnectionFactoryBean factory = new RabbitConnectionFactoryBean();, +			if (config.getRequestedHeartbeat() != null) {, +				factory.setRequestedHeartbeat(config.getRequestedHeartbeat());, +			}, +			RabbitProperties.Ssl ssl = config.getSsl();, +			if (ssl.isEnabled()) {, +				factory.setUseSSL(true);, +				if (ssl.getKeyStore() != null || ssl.getTrustStore() != null) {, +					Properties properties = ssl.createSslProperties();, +					ByteArrayOutputStream outputStream = new ByteArrayOutputStream();, +					properties.store(outputStream, "SSL config");, +					factory.setSslPropertiesLocation(, +							new ByteArrayResource(outputStream.toByteArray()));, +				}, +			}, +			factory.afterPropertiesSet();, +			CachingConnectionFactory connectionFactory = new CachingConnectionFactory(factory.getObject());, +			connectionFactory.setAddresses(config.getAddresses());, +			return connectionFactory;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Properties;, + * @author Stephane Nicoll, +	 * SSL configuration., +	 */, +	private final Ssl ssl = new Ssl();, +, +	/**, +	/**, +	 * Requested heartbeat timeout, in seconds; zero for none., +	 */, +	private Integer requestedHeartbeat;, +, +, +	public Ssl getSsl() {, +		return ssl;, +	}, +, +	public Integer getRequestedHeartbeat() {, +		return requestedHeartbeat;, +	}, +, +	public void setRequestedHeartbeat(Integer requestedHeartbeat) {, +		this.requestedHeartbeat = requestedHeartbeat;, +	}, +, +	public static class Ssl {, +, +		/**, +		 * Enable SSL support., +		 */, +		private boolean enabled;, +, +		/**, +		 * Path to the key store that holds the SSL certificate., +		 */, +		private String keyStore;, +, +		/**, +		 * Password used to access the key store., +		 */, +		private String keyStorePassword;, +]