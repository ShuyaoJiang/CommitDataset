[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/application/health"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/application/health"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +				.perform(get("/application/beans"), +				.perform(get("/application/metrics"), +						.value("http://localhost:8080/application/metrics")), +				.perform(get("/application"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/application/health"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +				.perform(get("/application/beans"), +				.perform(get("/application/metrics"), +						.value("http://localhost:8080/application/metrics")), +				.perform(get("/application"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +	private String contextPath = "/application";, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/application/health"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +				.perform(get("/application/beans"), +				.perform(get("/application/metrics"), +						.value("http://localhost:8080/application/metrics")), +				.perform(get("/application"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +	private String contextPath = "/application";, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, +		return "/application";, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		this.mockMvc.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/application/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/application/loggers/org.springframework.boot"), +				.perform(post("/application/loggers/org.springframework.boot"), +				.perform(get("/application/auditevents").param("after", "2016-11-01T10:00:00+0000"), +				.perform(get("/application/auditevents").param("principal", "admin"), +				.perform(get("/application/auditevents").param("principal", "admin"), +						.perform(get("/application" + endpointPath), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/application/health"), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +				.perform(get("/application/beans"), +				.perform(get("/application/metrics"), +						.value("http://localhost:8080/application/metrics")), +				.perform(get("/application"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +	private String contextPath = "/application";, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalJsonMvcEndpoint.java, +		return "/application";, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +		assertThat(getCurieHref("http://localhost:" + port + "/application")).isEqualTo(, +				"http://localhost:" + port + "/application/docs/#spring_boot_actuator__{rel}");, +		assertThat(getCurieHref("http://localhost:" + port + "/context/application")), +						+ "/context/application/docs/#spring_boot_actuator__{rel}");, +		assertThat(getCurieHref("http://localhost:" + port + "/servlet/application"))]