[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, +import org.springframework.boot.actuate.properties.ManagementServerProperties.User;, +import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;, +		@Autowired, +		private ManagementServerProperties management;, +, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				ExpressionUrlAuthorizationConfigurer<HttpSecurity> authorizeUrls = http, +						.authorizeUrls();, +				if (getEndpointPaths(true).length > 0) {, +					authorizeUrls.antMatchers(getEndpointPaths(true)).hasRole(, +							this.management.getUser().getRole());, +				}, +				authorizeUrls.antMatchers(getSecureApplicationPaths()), +						.hasRole(this.security.getBasic().getRole()).and().httpBasic();, +		private String[] getSecureApplicationPaths() {, +		private static Log logger = LogFactory, +				.getLog(AuthenticationManagerConfiguration.class);, +, +		@Autowired, +		private ManagementServerProperties management;, +, +			User user = this.management.getUser();, +			if (user.isDefaultPassword()) {, +				logger.info("Using default password for ");, +			}, +			List<String> roles = new ArrayList<String>();, +			roles.add("USER");, +			if (!"USER".equals(user.getRole())) {, +				roles.add(user.getRole());, +			}, +					.withUser(user.getName()).password(user.getPassword()), +					.roles(roles.toArray(new String[roles.size()])).and().and().build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.actuate.properties.ManagementServerProperties;, +import org.springframework.boot.actuate.properties.ManagementServerProperties.User;, +import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;, +		@Autowired, +		private ManagementServerProperties management;, +, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				ExpressionUrlAuthorizationConfigurer<HttpSecurity> authorizeUrls = http, +						.authorizeUrls();, +				if (getEndpointPaths(true).length > 0) {, +					authorizeUrls.antMatchers(getEndpointPaths(true)).hasRole(, +							this.management.getUser().getRole());, +				}, +				authorizeUrls.antMatchers(getSecureApplicationPaths()), +						.hasRole(this.security.getBasic().getRole()).and().httpBasic();, +		private String[] getSecureApplicationPaths() {, +		private static Log logger = LogFactory, +				.getLog(AuthenticationManagerConfiguration.class);, +, +		@Autowired, +		private ManagementServerProperties management;, +, +			User user = this.management.getUser();, +			if (user.isDefaultPassword()) {, +				logger.info("Using default password for ");, +			}, +			List<String> roles = new ArrayList<String>();, +			roles.add("USER");, +			if (!"USER".equals(user.getRole())) {, +				roles.add(user.getRole());, +			}, +					.withUser(user.getName()).password(user.getPassword()), +					.roles(roles.toArray(new String[roles.size()])).and().and().build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/ManagementServerProperties.java, +import java.util.UUID;, +	private User user = new User();, +, +	public User getUser() {, +		return this.user;, +	}, +, +	public static class User {, +, +		private String name = "user";, +, +		private String password = UUID.randomUUID().toString();, +, +		private String role = "ADMIN";, +, +		private boolean defaultPassword;, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getPassword() {, +			return this.password;]