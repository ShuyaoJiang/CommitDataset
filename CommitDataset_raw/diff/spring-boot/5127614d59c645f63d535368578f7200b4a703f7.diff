[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import org.springframework.ui.freemarker.FreeMarkerConfigurationFactory;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;, +	protected static class FreeMarkerConfiguration implements EnvironmentAware {, +		private RelaxedPropertyResolver properties;, +			this.properties = new RelaxedPropertyResolver(environment,, +		protected void applyProperties(FreeMarkerConfigurationFactory factory) {, +			factory.setTemplateLoaderPath(this.properties.getProperty(, +					"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));, +			factory.setDefaultEncoding(this.properties.getProperty("templateEncoding",, +					"UTF-8"));, +			Properties settings = new Properties();, +			settings.putAll(this.properties.getSubProperties("settings."));, +			factory.setFreemarkerSettings(settings);, +		}, +, +		protected final RelaxedPropertyResolver getProperties() {, +			return this.properties;, +		}, +	}, +, +	@Configuration, +	@ConditionalOnNotWebApplication, +	public static class FreeMarkerNonWebConfiguration extends FreeMarkerConfiguration {, +, +		public FreeMarkerConfigurationFactoryBean freeMarkerConfiguration() {, +			FreeMarkerConfigurationFactoryBean freeMarkerFactoryBean = new FreeMarkerConfigurationFactoryBean();, +			applyProperties(freeMarkerFactoryBean);, +			return freeMarkerFactoryBean;, +	public static class FreeMarkerWebConfiguration extends FreeMarkerConfiguration {, +		@Bean, +		@ConditionalOnMissingBean(FreeMarkerConfig.class), +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			applyProperties(configurer);, +			return configurer;, +		public freemarker.template.Configuration freeMarkerConfiguration(, +				FreeMarkerConfig configurer) {, +			return configurer.getConfiguration();, +			RelaxedPropertyResolver properties = getProperties();, +			resolver.setPrefix(properties.getProperty("prefix", DEFAULT_PREFIX));, +			resolver.setSuffix(properties.getProperty("suffix", DEFAULT_SUFFIX));, +			resolver.setCache(properties.getProperty("cache", Boolean.class, true));, +			resolver.setContentType(properties.getProperty("contentType", "text/html"));, +			resolver.setViewNames(properties.getProperty("viewNames", String[].class));, +			resolver.setExposeRequestAttributes(properties.getProperty(, +			resolver.setAllowRequestOverride(properties.getProperty(, +			resolver.setExposeSessionAttributes(properties.getProperty(, +			resolver.setAllowSessionOverride(properties.getProperty(, +			resolver.setExposeSpringMacroHelpers(properties.getProperty(, +			resolver.setRequestContextAttribute(properties]