[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +import org.springframework.boot.autoconfigure.AutoConfigurationMetadata;, + * @author Phillip Webb, +class OnWebApplicationCondition extends FilteringSpringBootCondition {, +	private static final String SERVLET_WEB_APPLICATION_CLASS = "org.springframework.web.context.support.GenericWebApplicationContext";, +, +	private static final String REACTIVE_WEB_APPLICATION_CLASS = "org.springframework.web.reactive.HandlerResult";, +, +	@Override, +	protected ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +			AutoConfigurationMetadata autoConfigurationMetadata) {, +		ConditionOutcome[] outcomes = new ConditionOutcome[autoConfigurationClasses.length];, +		for (int i = 0; i < outcomes.length; i++) {, +			String autoConfigurationClass = autoConfigurationClasses[i];, +			if (autoConfigurationClass != null) {, +				outcomes[i] = getOutcome(autoConfigurationMetadata, +						.get(autoConfigurationClass, "ConditionalOnWebApplication"));, +			}, +		}, +		return outcomes;, +	}, +, +	private ConditionOutcome getOutcome(String type) {, +		if (type == null) {, +			return null;, +		}, +		ConditionMessage.Builder message = ConditionMessage, +				.forCondition(ConditionalOnWebApplication.class);, +		if (ConditionalOnWebApplication.Type.SERVLET.name().equals(type)) {, +			if (!ClassNameFilter.isPresent(SERVLET_WEB_APPLICATION_CLASS,, +					getBeanClassLoader())) {, +				return ConditionOutcome.noMatch(, +						message.didNotFind("servlet web application classes").atAll());, +			}, +		}, +		if (ConditionalOnWebApplication.Type.REACTIVE.name().equals(type)) {, +			if (!ClassNameFilter.isPresent(REACTIVE_WEB_APPLICATION_CLASS,, +					getBeanClassLoader())) {, +				return ConditionOutcome.noMatch(, +						message.didNotFind("reactive web application classes").atAll());, +			}, +		}, +		if (!ClassNameFilter.isPresent(SERVLET_WEB_APPLICATION_CLASS,, +				getBeanClassLoader()), +				&& !ClassUtils.isPresent(REACTIVE_WEB_APPLICATION_CLASS,, +						getBeanClassLoader())) {, +			return ConditionOutcome.noMatch(message, +					.didNotFind("reactive or servlet web application classes").atAll());, +		}, +		return null;, +	}, +		if (!ClassNameFilter.isPresent(SERVLET_WEB_APPLICATION_CLASS,, +				context.getClassLoader())) {, +			return ConditionOutcome.noMatch(, +					message.didNotFind("servlet web application classes").atAll());, +		if (!ClassNameFilter.isPresent(REACTIVE_WEB_APPLICATION_CLASS,, +				context.getClassLoader())) {, +			return ConditionOutcome.noMatch(, +					message.didNotFind("reactive web application classes").atAll());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +import org.springframework.boot.autoconfigure.AutoConfigurationMetadata;, + * @author Phillip Webb, +class OnWebApplicationCondition extends FilteringSpringBootCondition {, +	private static final String SERVLET_WEB_APPLICATION_CLASS = "org.springframework.web.context.support.GenericWebApplicationContext";, +, +	private static final String REACTIVE_WEB_APPLICATION_CLASS = "org.springframework.web.reactive.HandlerResult";, +, +	@Override, +	protected ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +			AutoConfigurationMetadata autoConfigurationMetadata) {, +		ConditionOutcome[] outcomes = new ConditionOutcome[autoConfigurationClasses.length];, +		for (int i = 0; i < outcomes.length; i++) {, +			String autoConfigurationClass = autoConfigurationClasses[i];, +			if (autoConfigurationClass != null) {, +				outcomes[i] = getOutcome(autoConfigurationMetadata, +						.get(autoConfigurationClass, "ConditionalOnWebApplication"));, +			}, +		}, +		return outcomes;, +	}, +, +	private ConditionOutcome getOutcome(String type) {, +		if (type == null) {, +			return null;, +		}, +		ConditionMessage.Builder message = ConditionMessage, +				.forCondition(ConditionalOnWebApplication.class);, +		if (ConditionalOnWebApplication.Type.SERVLET.name().equals(type)) {, +			if (!ClassNameFilter.isPresent(SERVLET_WEB_APPLICATION_CLASS,, +					getBeanClassLoader())) {, +				return ConditionOutcome.noMatch(, +						message.didNotFind("servlet web application classes").atAll());, +			}, +		}, +		if (ConditionalOnWebApplication.Type.REACTIVE.name().equals(type)) {, +			if (!ClassNameFilter.isPresent(REACTIVE_WEB_APPLICATION_CLASS,, +					getBeanClassLoader())) {, +				return ConditionOutcome.noMatch(, +						message.didNotFind("reactive web application classes").atAll());]