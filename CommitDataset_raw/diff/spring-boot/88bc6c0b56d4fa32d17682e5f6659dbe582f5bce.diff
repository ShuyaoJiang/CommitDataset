[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.util.StringUtils;, +	private Set<Object> sources = new LinkedHashSet<Object>();, +	private Set<Object> initialSources = new LinkedHashSet<Object>();, +			this.initialSources.addAll(Arrays.asList(sources));, +		sources.addAll(this.sources);, +		sources.addAll(this.initialSources);, +		if (this.log.isDebugEnabled()) {, +			this.log.debug("Loading source ", +					+ StringUtils.arrayToCommaDelimitedString(sources));, +		}, +		return this.sources;, +	 * <p>, +	 * NOTE: sources defined here will be used in addition to any sources specified on, +	 * construction., +		this.sources = new LinkedHashSet<Object>(sources);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.util.StringUtils;, +	private Set<Object> sources = new LinkedHashSet<Object>();, +	private Set<Object> initialSources = new LinkedHashSet<Object>();, +			this.initialSources.addAll(Arrays.asList(sources));, +		sources.addAll(this.sources);, +		sources.addAll(this.initialSources);, +		if (this.log.isDebugEnabled()) {, +			this.log.debug("Loading source ", +					+ StringUtils.arrayToCommaDelimitedString(sources));, +		}, +		return this.sources;, +	 * <p>, +	 * NOTE: sources defined here will be used in addition to any sources specified on, +	 * construction., +		this.sources = new LinkedHashSet<Object>(sources);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +		Set<Object> initialSources = (Set<Object>) ReflectionTestUtils.getField(, +				application, "initialSources");, +		assertThat(initialSources.toArray(), equalTo(sources));]