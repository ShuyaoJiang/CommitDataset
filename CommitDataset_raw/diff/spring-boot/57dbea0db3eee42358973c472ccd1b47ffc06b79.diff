[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +import reactor.netty.ChannelBindException;, +				ChannelBindException bindException = findBindException(ex);, +				if (bindException != null) {, +					throw new PortInUseException(bindException.localPort());, +	private ChannelBindException findBindException(Exception ex) {, +			if (candidate instanceof ChannelBindException) {, +				return (ChannelBindException) candidate;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +import reactor.netty.ChannelBindException;, +				ChannelBindException bindException = findBindException(ex);, +				if (bindException != null) {, +					throw new PortInUseException(bindException.localPort());, +	private ChannelBindException findBindException(Exception ex) {, +			if (candidate instanceof ChannelBindException) {, +				return (ChannelBindException) candidate;, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java, +import org.hamcrest.Matchers;, +import org.springframework.boot.web.server.PortInUseException;, +		this.thrown.expect(PortInUseException.class);, +		this.thrown.expect(, +				Matchers.hasProperty("port", Matchers.equalTo(this.webServer.getPort())));]