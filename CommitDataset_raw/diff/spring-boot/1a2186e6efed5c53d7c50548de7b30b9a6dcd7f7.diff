[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java, +import java.lang.reflect.Method;, +import org.springframework.util.ReflectionUtils;, +	private static final Method CLASS_GET_MODULE;, +, +	private static final Method MODULE_GET_NAME;, +, +	static {, +		CLASS_GET_MODULE = ReflectionUtils.findMethod(Class.class, "getModule");, +		MODULE_GET_NAME = (CLASS_GET_MODULE == null ? null, +				: ReflectionUtils.findMethod(CLASS_GET_MODULE.getReturnType(),, +						"getName"));, +	}, +, +			Predicate<Object> startsWith = (argument) -> startsWithArgumentClassName(, +					message, argument);, +		private boolean startsWithArgumentClassName(String message, Object argument) {, +			if (argument == null) {, +				return false;, +			}, +			Class<? extends Object> argumentType = argument.getClass();, +			if (message.startsWith(argumentType.getName())) {, +				return true;, +			}, +			if (CLASS_GET_MODULE != null) {, +				Object module = ReflectionUtils.invokeMethod(CLASS_GET_MODULE,, +						argumentType);, +				Object moduleName = ReflectionUtils.invokeMethod(MODULE_GET_NAME, module);, +				if (message.startsWith(moduleName + "/" + argumentType.getName())) {, +					return true;, +				}, +			}, +			return false;, +		}, +]