[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.core.KafkaTemplate;, +	private KafkaTemplate<Object, Object> replyTemplate;, +, +	 * Set the {@link KafkaTemplate} to use to send replies., +	 * @param replyTemplate the reply template, +	 */, +	void setReplyTemplate(KafkaTemplate<Object, Object> replyTemplate) {, +		this.replyTemplate = replyTemplate;, +	}, +, +	/**, +		if (this.replyTemplate != null) {, +			listenerContainerFactory.setReplyTemplate(this.replyTemplate);, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.core.KafkaTemplate;, +	private KafkaTemplate<Object, Object> replyTemplate;, +, +	 * Set the {@link KafkaTemplate} to use to send replies., +	 * @param replyTemplate the reply template, +	 */, +	void setReplyTemplate(KafkaTemplate<Object, Object> replyTemplate) {, +		this.replyTemplate = replyTemplate;, +	}, +, +	/**, +		if (this.replyTemplate != null) {, +			listenerContainerFactory.setReplyTemplate(this.replyTemplate);, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.core.KafkaTemplate;, +	private final KafkaTemplate<Object, Object> kafkaTemplate;, +, +			ObjectProvider<RecordMessageConverter> messageConverter,, +			ObjectProvider<KafkaTemplate<Object, Object>> kafkaTemplate) {, +		this.kafkaTemplate = kafkaTemplate.getIfUnique();, +		configurer.setReplyTemplate(this.kafkaTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +import org.springframework.kafka.core.KafkaTemplate;, +	private KafkaTemplate<Object, Object> replyTemplate;, +, +	 * Set the {@link KafkaTemplate} to use to send replies., +	 * @param replyTemplate the reply template, +	 */, +	void setReplyTemplate(KafkaTemplate<Object, Object> replyTemplate) {, +		this.replyTemplate = replyTemplate;, +	}, +, +	/**, +		if (this.replyTemplate != null) {, +			listenerContainerFactory.setReplyTemplate(this.replyTemplate);, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, +import org.springframework.kafka.core.KafkaTemplate;, +	private final KafkaTemplate<Object, Object> kafkaTemplate;, +, +			ObjectProvider<RecordMessageConverter> messageConverter,, +			ObjectProvider<KafkaTemplate<Object, Object>> kafkaTemplate) {, +		this.kafkaTemplate = kafkaTemplate.getIfUnique();, +		configurer.setReplyTemplate(this.kafkaTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryWithKafkaTemplate() {, +		this.contextRunner, +				.run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> kafkaListenerContainerFactory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							kafkaListenerContainerFactory);, +					assertThat(dfa.getPropertyValue("replyTemplate")), +							.isSameAs(context.getBean(KafkaTemplate.class));, +				});, +	}, +]