[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Arrays;, +import org.springframework.core.env.StandardEnvironment;, +	private static final Set<String> BENIGN_PROPERTY_SOURCE_NAMES = Collections, +			.unmodifiableSet(new HashSet<String>(Arrays.asList(, +					StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +					StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME)));, +, +							if (isFatal(origin)) {, +									throw new RelaxedBindingNotWritablePropertyException(, +											ex, origin);, +								else {, +							else {, +								logger.debug("Ignoring benign property binding failure",, +										ex);, +							}, +						}, +					}, +	private boolean isFatal(PropertyOrigin origin) {, +		if (origin == null) {, +			return true;, +		}, +		return !BENIGN_PROPERTY_SOURCE_NAMES.contains(origin.getSource().getName());, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Arrays;, +import org.springframework.core.env.StandardEnvironment;, +	private static final Set<String> BENIGN_PROPERTY_SOURCE_NAMES = Collections, +			.unmodifiableSet(new HashSet<String>(Arrays.asList(, +					StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +					StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME)));, +, +							if (isFatal(origin)) {, +									throw new RelaxedBindingNotWritablePropertyException(, +											ex, origin);, +								else {, +							else {, +								logger.debug("Ignoring benign property binding failure",, +										ex);, +							}, +						}, +					}, +	private boolean isFatal(PropertyOrigin origin) {, +		if (origin == null) {, +			return true;, +		}, +		return !BENIGN_PROPERTY_SOURCE_NAMES.contains(origin.getSource().getName());, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.mock.env.MockPropertySource;, +	@Test, +	public void systemEnvironmentBindingFailuresAreIgnored() throws Exception {, +		setupFactory();, +		MutablePropertySources propertySources = new MutablePropertySources();, +		MockPropertySource propertySource = new MockPropertySource(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);, +		propertySource.setProperty("doesNotExist", "foo");, +		propertySource.setProperty("name", "bar");, +		propertySources.addFirst(propertySource);, +		this.factory.setPropertySources(propertySources);, +		this.factory.setIgnoreUnknownFields(false);, +		this.factory.afterPropertiesSet();, +		this.factory.getObject();, +		Foo foo = this.factory.getObject();, +		assertEquals("bar", foo.name);, +	}, +, +	@Test, +	public void systemPropertyBindingFailuresAreIgnored() throws Exception {, +		setupFactory();, +		MutablePropertySources propertySources = new MutablePropertySources();, +		MockPropertySource propertySource = new MockPropertySource(, +				StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);, +		propertySource.setProperty("doesNotExist", "foo");, +		propertySource.setProperty("name", "bar");, +		propertySources.addFirst(propertySource);, +		this.factory.setPropertySources(propertySources);, +		this.factory.setIgnoreUnknownFields(false);, +		this.factory.afterPropertiesSet();, +	}, +]