[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java, +@RequestMapping("${error.path:/error}"), +	@RequestMapping(produces = "text/html"), +	@RequestMapping, +		Map<String, Object> body = getErrorAttributes(request);, +	protected Map<String, Object> getErrorAttributes(HttpServletRequest request) {, +		return getErrorAttributes(request, getTraceParameter(request));, +	}, +, +	protected Map<String, Object> getErrorAttributes(HttpServletRequest request,, +	protected HttpStatus getStatus(HttpServletRequest request) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java, +@RequestMapping("${error.path:/error}"), +	@RequestMapping(produces = "text/html"), +	@RequestMapping, +		Map<String, Object> body = getErrorAttributes(request);, +	protected Map<String, Object> getErrorAttributes(HttpServletRequest request) {, +		return getErrorAttributes(request, getTraceParameter(request));, +	}, +, +	protected Map<String, Object> getErrorAttributes(HttpServletRequest request,, +	protected HttpStatus getStatus(HttpServletRequest request) {, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: The `BasicErrorController` can be used as a base class for a custom `ErrorController`., +This is particularly useful if you want to add a handler for a new content type (the default, +is to handle `text/html` specifically and provide a fallback for everything else). To do that, +just extend `BasicErrorController` and add a public method with a `@RequestMapping` that, +has a `produces` attribute, and create a bean of your new type., +]