[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +	public FilterRegistrationBean<WebMvcMetricsFilter> webMvcMetricsFilter(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +	public FilterRegistrationBean<WebMvcMetricsFilter> webMvcMetricsFilter(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java, +, +import javax.servlet.DispatcherType;, +import org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter;, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +import org.springframework.test.util.ReflectionTestUtils;, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	public void metricsFilterRegisteredForAsyncDispatches() {, +		Map<String, FilterRegistrationBean> filterRegistrations = this.context, +				.getBeansOfType(FilterRegistrationBean.class);, +		assertThat(filterRegistrations).containsKey("webMvcMetricsFilter");, +		FilterRegistrationBean registration = filterRegistrations, +				.get("webMvcMetricsFilter");, +		assertThat(registration.getFilter()).isInstanceOf(WebMvcMetricsFilter.class);, +		assertThat((Set<DispatcherType>) ReflectionTestUtils.getField(registration,, +				"dispatcherTypes")).containsExactlyInAnyOrder(DispatcherType.REQUEST,, +						DispatcherType.ASYNC);]