[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,, +					SpringApplicationAdminJmxAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +		});, +		this.contextRunner.withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {, +		});, +		this.contextRunner.withSystemProperties(, +				"spring.application.admin.jmx-name=" + customJmxName), +				.withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {, +		});, +		try (ConfigurableApplicationContext context = new SpringApplicationBuilder(), +				.run("--" + ENABLE_ADMIN_PROP, "--server.port=0")) {, +			assertThat(context).isInstanceOf(ServletWebServerApplicationContext.class);, +			int expected = ((ServletWebServerApplicationContext) context).getWebServer(), +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,, +					SpringApplicationAdminJmxAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +		});, +		this.contextRunner.withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {, +		});, +		this.contextRunner.withSystemProperties(, +				"spring.application.admin.jmx-name=" + customJmxName), +				.withPropertyValues(ENABLE_ADMIN_PROP).run((context) -> {, +		});, +		try (ConfigurableApplicationContext context = new SpringApplicationBuilder(), +				.run("--" + ENABLE_ADMIN_PROP, "--server.port=0")) {, +			assertThat(context).isInstanceOf(ServletWebServerApplicationContext.class);, +			int expected = ((ServletWebServerApplicationContext) context).getWebServer(), +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(RabbitAutoConfiguration.class));, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class).run((context) -> {, +			RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +			RabbitMessagingTemplate messagingTemplate = context, +			CachingConnectionFactory connectionFactory = context, +			RabbitAdmin amqpAdmin = context.getBean(RabbitAdmin.class);, +			assertThat(context.containsBean("rabbitListenerContainerFactory")), +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.host:remote-server",, +						"spring.rabbitmq.password:secret",, +						"spring.rabbitmq.virtual_host:/vhost",, +						"spring.rabbitmq.connection-timeout:123").run((context) -> {, +			CachingConnectionFactory connectionFactory = context, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.virtual_host:").run((context) -> {, +			CachingConnectionFactory connectionFactory = context, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.virtual_host:foo").run((context) -> {, +			CachingConnectionFactory connectionFactory = context, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.virtual_host:///foo"), +				.run((context) -> {, +					CachingConnectionFactory connectionFactory = context, +				});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.virtual_host:/").run((context) -> {, +			CachingConnectionFactory connectionFactory = context, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.publisher-confirms=true",, +						"spring.rabbitmq.publisher-returns=true").run(context -> {, +			CachingConnectionFactory connectionFactory = context, +			RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +		});, +		this.contextRunner.withUserConfiguration(, +				MessageConvertersConfiguration.class).run((context) -> {, +			RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +					.isSameAs(context.getBean("myMessageConverter"));, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.template.retry.enabled:true",, +						"spring.rabbitmq.template.replyTimeout:456", +				).run((context) -> {, +			RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +		});, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.template.mandatory:true"), +				.run((context) -> {, +					RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +				});]