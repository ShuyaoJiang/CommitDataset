[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import java.util.List;, +		private List<FlywayCallback> flywayCallbacks;, +				ObjectProvider<List<FlywayCallback>> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks, +					.getIfAvailable(() -> Collections.emptyList());, +			flyway.setCallbacks(this.flywayCallbacks, +					.toArray(new FlywayCallback[this.flywayCallbacks.size()]));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import java.util.List;, +		private List<FlywayCallback> flywayCallbacks;, +				ObjectProvider<List<FlywayCallback>> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks, +					.getIfAvailable(() -> Collections.emptyList());, +			flyway.setCallbacks(this.flywayCallbacks, +					.toArray(new FlywayCallback[this.flywayCallbacks.size()]));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import java.sql.Connection;, +import org.flywaydb.core.api.callback.FlywayCallback;, +import org.mockito.InOrder;, +import org.springframework.core.annotation.Order;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +	@Test, +	public void callbacksAreConfiguredAndOrdered() throws Exception {, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class,, +				CallbackConfiguration.class);, +		assertThat(this.context.getBeansOfType(Flyway.class)).hasSize(1);, +		Flyway flyway = this.context.getBean(Flyway.class);, +		FlywayCallback callbackOne = this.context.getBean("callbackOne",, +				FlywayCallback.class);, +		FlywayCallback callbackTwo = this.context.getBean("callbackTwo",, +				FlywayCallback.class);, +		assertThat(flyway.getCallbacks()).containsExactly(callbackTwo, callbackOne);, +		InOrder orderedCallbacks = inOrder(callbackOne, callbackTwo);, +		orderedCallbacks.verify(callbackTwo).beforeMigrate(any(Connection.class));, +		orderedCallbacks.verify(callbackOne).beforeMigrate(any(Connection.class));, +	}, +, +	@Configuration, +	static class CallbackConfiguration {, +		@Bean, +		@Order(1), +		public FlywayCallback callbackOne() {, +			return mock(FlywayCallback.class);, +		@Bean, +		@Order(0), +		public FlywayCallback callbackTwo() {, +			return mock(FlywayCallback.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import java.util.List;, +		private List<FlywayCallback> flywayCallbacks;, +				ObjectProvider<List<FlywayCallback>> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks, +					.getIfAvailable(() -> Collections.emptyList());, +			flyway.setCallbacks(this.flywayCallbacks, +					.toArray(new FlywayCallback[this.flywayCallbacks.size()]));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import java.sql.Connection;, +import org.flywaydb.core.api.callback.FlywayCallback;, +import org.mockito.InOrder;, +import org.springframework.core.annotation.Order;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +	@Test, +	public void callbacksAreConfiguredAndOrdered() throws Exception {, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class,, +				CallbackConfiguration.class);, +		assertThat(this.context.getBeansOfType(Flyway.class)).hasSize(1);, +		Flyway flyway = this.context.getBean(Flyway.class);, +		FlywayCallback callbackOne = this.context.getBean("callbackOne",, +				FlywayCallback.class);, +		FlywayCallback callbackTwo = this.context.getBean("callbackTwo",, +				FlywayCallback.class);, +		assertThat(flyway.getCallbacks()).containsExactly(callbackTwo, callbackOne);, +		InOrder orderedCallbacks = inOrder(callbackOne, callbackTwo);, +		orderedCallbacks.verify(callbackTwo).beforeMigrate(any(Connection.class));, +		orderedCallbacks.verify(callbackOne).beforeMigrate(any(Connection.class));, +	}, +, +	@Configuration, +	static class CallbackConfiguration {, +		@Bean, +		@Order(1), +		public FlywayCallback callbackOne() {, +			return mock(FlywayCallback.class);, +		@Bean, +		@Order(0), +		public FlywayCallback callbackTwo() {, +			return mock(FlywayCallback.class);, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +Flyway supports SQL and Java http://flywaydb.org/documentation/callbacks.html[callbacks]., +To use SQL-based callbacks, place the callback scripts in the `classpath:db/migration`]