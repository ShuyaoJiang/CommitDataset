[+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/MockServerRestTemplateCustomizer.java, +		Assert.state(!this.servers.isEmpty(),, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/MockServerRestTemplateCustomizer.java, +		Assert.state(!this.servers.isEmpty(),, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, +		return (string != null && !string.isEmpty());, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/MockServerRestTemplateCustomizer.java, +		Assert.state(!this.servers.isEmpty(),, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, +		return (string != null && !string.isEmpty());, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java, +		return version == null || version.trim().isEmpty();, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/MockServerRestTemplateCustomizer.java, +		Assert.state(!this.servers.isEmpty(),, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, +		return (string != null && !string.isEmpty());, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java, +		return version == null || version.trim().isEmpty();, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, +			if (!parent.isEmpty()) {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java, +		return !this.mBeanServer.queryNames(query, null).isEmpty();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/archive/ResourceMatcher.java, +			else if (!value.trim().isEmpty()) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/core/HintCommand.java, +			else if (!arguments.isEmpty() && !starting.isEmpty()) {, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java, +			Assert.state(!expectationManagers.isEmpty(),, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootConfigurationFinder.java, +		while (!source.isEmpty()) {]