[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/assertj/ApplicationContextAssert.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Map;, +import org.springframework.beans.factory.BeanFactoryUtils;, +	 * Verifies that the application context (or ancestors) contains a single bean with, +	 * the given type., +		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS);, +	}, +, +	/**, +	 * Verifies that the application context contains a single bean with the given type., +	 * <p>, +	 * Example: <pre class="code">, +	 * assertThat(context).hasSingleBean(Foo.class); </pre>, +	 * @param type the bean type, +	 * @param scope the scope of the assertion, +	 * @return {@code this} assertion object., +	 * @throws AssertionError if the application context did not start, +	 * @throws AssertionError if the application context does no beans of the given type, +	 * @throws AssertionError if the application context contains multiple beans of the, +	 * given type, +	 */, +	public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {, +		Assert.notNull(scope, "Scope must not be null");, +		String[] names = scope.getBeanNamesForType(getApplicationContext(), type);, +	 * Verifies that the application context (or ancestors) does not contain any beans of, +	 * the given type., +		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS);, +	}, +, +	/**, +	 * Verifies that the application context does not contain any beans of the given type., +	 * <p>, +	 * Example: <pre class="code">, +	 * assertThat(context).doesNotHaveBean(Foo.class); </pre>, +	 * @param type the bean type, +	 * @param scope the scope of the assertion, +	 * @return {@code this} assertion object., +	 * @throws AssertionError if the application context did not start, +	 * @throws AssertionError if the application context contains any beans of the given, +	 * type, +	 */, +	public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {, +		Assert.notNull(scope, "Scope must not be null");, +		String[] names = scope.getBeanNamesForType(getApplicationContext(), type);, +	 * Obtain a single bean of the given type from the application context (or ancestors),, +	 * the bean becoming the object under test. If no beans of the specified type can be, +	 * found an assert on {@code null} is returned., +		return getBean(type, Scope.INCLUDE_ANCESTORS);, +	}, +, +	/**, +	 * Obtain a single bean of the given type from the application context, the bean, +	 * becoming the object under test. If no beans of the specified type can be found an, +	 * assert on {@code null} is returned., +	 * <p>, +	 * Example: <pre class="code">, +	 * assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class);, +	 * assertThat(context).getBean(Bar.class).isNull();</pre>, +	 * @param <T> the bean type, +	 * @param type the bean type, +	 * @param scope the scope of the assertion, +	 * @return bean assertions for the bean, or an assert on {@code null} if the no bean, +	 * is found, +	 * @throws AssertionError if the application context did not start, +	 * @throws AssertionError if the application context contains multiple beans of the, +	 * given type, +	 */, +	public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {, +		Assert.notNull(scope, "Scope must not be null");, +		String[] names = scope.getBeanNamesForType(getApplicationContext(), type);, +	 * context (or ancestors), the map becoming the object under test. If no bean of the, +	 * specified type can be found an assert on an empty {@code map} is returned., +		return getBeans(type, Scope.INCLUDE_ANCESTORS);, +	}, +, +	/**, +	 * Obtain a map bean names and instances of the given type from the application, +	 * context, the map becoming the object under test. If no bean of the specified type, +	 * can be found an assert on an empty {@code map} is returned., +	 * <p>, +	 * Example: <pre class="code">, +	 * assertThat(context).getBeans(Foo.class).containsKey("foo");, +	 * </pre>, +	 * @param <T> the bean type, +	 * @param type the bean type, +	 * @param scope the scope of the assertion, +	 * @return bean assertions for the beans, or an assert on an empty {@code map} if the, +	 * no beans are found, +	 * @throws AssertionError if the application context did not start, +	 */, +	public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {, +		Assert.notNull(scope, "Scope must not be null");, +		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type)), +	/**, +	 * The scope of an assertion., +	 */, +	public enum Scope {, +, +		/**]