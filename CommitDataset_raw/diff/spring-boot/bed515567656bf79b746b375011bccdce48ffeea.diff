[+++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application.  It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks.  The logging levels are defined by the `LogLevel` enumeration and, +consists of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +* `OFF`, +* `null`, +, +The `configuredLevel` property reflects an explicitly configured logger level, while the, +`effectiveLevel` property reflects the logger level inherited from parent loggers. The, +`effectiveLevel` is managed by each logging framework and reflects the propagation rules, +inherent to and configured in that framework.  `null` indicates that there is no explicit, +configuration defined., +, +, +, +==== Listing All Loggers, +Example curl request:, +include::{generated}/loggers/curl-request.adoc[], +, +Example HTTP request: [small]##link:../health[icon:external-link[role="silver"]]##, +include::{generated}/loggers/http-request.adoc[], +, +Example HTTP response:, +include::{generated}/loggers/http-response.adoc[], +, +, +, +==== Getting a Single Logger, +Example curl request:, +include::{generated}/single-logger/curl-request.adoc[], +, +Example HTTP request: [small]##link:../health[icon:external-link[role="silver"]]##, +include::{generated}/single-logger/http-request.adoc[], +, +Example HTTP response:, +include::{generated}/single-logger/http-response.adoc[], +, +, +, +==== Configuring a Logger, +Setting the `configuredLevel` of a logger requires `POSTing` a partial payload to the, +resource. The `configuredLevel` property must contain a string representation of the, +enumeration described above.  `null` indicates that the log level should be unset,, +allowing it to inherit configuration from it's parent., +, +Example curl request:, +include::{generated}/set-logger/curl-request.adoc[], +, +Example HTTP request: [small]##link:../health[icon:external-link[role="silver"]]##, +include::{generated}/set-logger/http-request.adoc[], +, +Example HTTP response:, +include::{generated}/set-logger/http-response.adoc[], +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application.  It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks.  The logging levels are defined by the `LogLevel` enumeration and, +consists of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +* `OFF`, +* `null`, +, +The `configuredLevel` property reflects an explicitly configured logger level, while the, +`effectiveLevel` property reflects the logger level inherited from parent loggers. The, +`effectiveLevel` is managed by each logging framework and reflects the propagation rules, +inherent to and configured in that framework.  `null` indicates that there is no explicit, +configuration defined., +, +, +]