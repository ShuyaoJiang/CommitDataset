[+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +import java.util.Objects;, +import org.springframework.boot.origin.Origin;, +import org.springframework.boot.origin.OriginLookup;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.util.StringUtils;, +		StreamSupport.stream(propertySources.spliterator(), false), +				.map(JsonPropertyValue::get).filter(Objects::nonNull).findFirst(), +				.ifPresent((v) -> processJson(environment, v));, +	private void processJson(ConfigurableEnvironment environment,, +			JsonPropertyValue propertyValue) {, +			Map<String, Object> map = parser.parseMap(propertyValue.getJson());, +						new JsonPropertySource(propertyValue, flatten(map)));, +			logger.warn("Cannot parse JSON for spring.application.json: ", +					+ propertyValue.getJson(), ex);, +	 * @param source The property source for spring.application.json or, +	 * SPRING_APPLICATION_JSON, +	private Map<String, Object> flatten(Map<String, Object> map) {, +		flatten(null, result, map);, +			Map<String, Object> map) {, +			extract(prefix + entry.getKey(), result, entry.getValue());, +	private void extract(String name, Map<String, Object> result, Object value) {, +			flatten(name, result, (Map<String, Object>) value);, +				extract(name + "[" + index + "]", result, object);, +			result.put(name, value);, +	private static class JsonPropertySource extends MapPropertySource, +			implements OriginLookup<String> {, +, +		private final JsonPropertyValue propertyValue;, +, +		JsonPropertySource(JsonPropertyValue propertyValue, Map<String, Object> source) {, +			super("spring.application.json", source);, +			this.propertyValue = propertyValue;, +		}, +, +		@Override, +		public Origin getOrigin(String key) {, +			return this.propertyValue.getOrigin();, +		}, +, +	}, +, +	private static class JsonPropertyValue {, +, +		private static final String[] CANDIDATES = { "spring.application.json",, +				"SPRING_APPLICATION_JSON" };, +, +		private final PropertySource<?> propertySource;, +, +		private final String propertyName;, +, +		private final String json;, +, +		JsonPropertyValue(PropertySource<?> propertySource, String propertyName,, +				String json) {, +			this.propertySource = propertySource;, +			this.propertyName = propertyName;, +			this.json = json;, +		}, +, +		public String getJson() {, +			return this.json;, +		}, +, +		public Origin getOrigin() {, +			return PropertySourceOrigin.get(this.propertySource, this.propertyName);, +		}, +, +		public static JsonPropertyValue get(PropertySource<?> propertySource) {, +			for (String candidate : CANDIDATES) {, +				Object value = propertySource.getProperty(candidate);, +				if (value != null && value instanceof String, +						&& StringUtils.hasLength((String) value)) {, +					return new JsonPropertyValue(propertySource, candidate,, +							(String) value);, +				}, +			}, +			return null;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +import java.util.Objects;, +import org.springframework.boot.origin.Origin;, +import org.springframework.boot.origin.OriginLookup;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.util.StringUtils;, +		StreamSupport.stream(propertySources.spliterator(), false), +				.map(JsonPropertyValue::get).filter(Objects::nonNull).findFirst(), +				.ifPresent((v) -> processJson(environment, v));, +	private void processJson(ConfigurableEnvironment environment,, +			JsonPropertyValue propertyValue) {, +			Map<String, Object> map = parser.parseMap(propertyValue.getJson());, +						new JsonPropertySource(propertyValue, flatten(map)));, +			logger.warn("Cannot parse JSON for spring.application.json: ", +					+ propertyValue.getJson(), ex);, +	 * @param source The property source for spring.application.json or, +	 * SPRING_APPLICATION_JSON, +	private Map<String, Object> flatten(Map<String, Object> map) {]