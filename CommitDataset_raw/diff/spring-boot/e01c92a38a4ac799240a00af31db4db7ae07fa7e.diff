[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +import java.util.function.Consumer;, +	 * Cache period for the resources served by the resource handler. If a duration suffix, +	 * is not specified, seconds will be used. Can be overridden by the 'cache-control', +	 * property., +	 * Cache control HTTP headers, only allows valid directive combinations. Overrides the, +	 * 'cache-period' property., +		 * @return whether the resource chain is enabled or {@code null} if no specified, +		 * settings are present., +		 * Maximum time the response should be cached, in seconds if no duration suffix is, +		 * not specified., +		 * Indicate that the cached response can be reused only if re-validated with the, +		 * server., +		 * Indicate that once it has become stale, a cache must not use the response, +		 * without re-validating it with the server., +		 * Indicate intermediaries (caches and others) that they should not transform the, +		 * response content., +		 * Indicate that the response message is intended for a single user and must not, +		 * be stored by a shared cache., +		 * Same meaning as the "must-revalidate" directive, except that it does not apply, +		 * to private caches., +		 * Maximum time the response can be served after it becomes stale, in seconds if, +		 * no duration suffix is not specified., +		 * Maximum time the response may be used when errors are encountered, in seconds, +		 * if no duration suffix is not specified., +		 * Maximum time the response should be cached by shared caches, in seconds if no, +		 * duration suffix is not specified., +			CacheControl cacheControl = createCacheControl();, +			callIfTrue(this.mustRevalidate, cacheControl, CacheControl::mustRevalidate);, +			callIfTrue(this.noTransform, cacheControl, CacheControl::noTransform);, +			callIfTrue(this.cachePublic, cacheControl, CacheControl::cachePublic);, +			callIfTrue(this.cachePrivate, cacheControl, CacheControl::cachePrivate);, +			callIfTrue(this.proxyRevalidate, cacheControl, CacheControl::proxyRevalidate);, +				cacheControl.staleWhileRevalidate(this.staleWhileRevalidate.getSeconds(),, +						TimeUnit.SECONDS);, +				cacheControl.staleIfError(this.staleIfError.getSeconds(),, +						TimeUnit.SECONDS);, +				cacheControl.sMaxAge(this.sMaxAge.getSeconds(), TimeUnit.SECONDS);, +			return cacheControl;, +		}, +, +		private CacheControl createCacheControl() {, +			if (Boolean.TRUE.equals(this.noStore)) {, +				return CacheControl.noStore();, +			}, +			if (Boolean.TRUE.equals(this.noCache)) {, +				return CacheControl.noCache();, +			}, +			if (this.maxAge != null) {, +				return CacheControl.maxAge(this.maxAge.getSeconds(), TimeUnit.SECONDS);, +			}, +			return CacheControl.empty();, +		}, +, +		private <T> void callIfTrue(Boolean property, T instance, Consumer<T> call) {, +			if (Boolean.TRUE.equals(property)) {, +				call.accept(instance);, +			}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +import java.util.function.Consumer;, +	 * Cache period for the resources served by the resource handler. If a duration suffix, +	 * is not specified, seconds will be used. Can be overridden by the 'cache-control', +	 * property., +	 * Cache control HTTP headers, only allows valid directive combinations. Overrides the, +	 * 'cache-period' property., +		 * @return whether the resource chain is enabled or {@code null} if no specified, +		 * settings are present., +		 * Maximum time the response should be cached, in seconds if no duration suffix is, +		 * not specified., +		 * Indicate that the cached response can be reused only if re-validated with the, +		 * server., +		 * Indicate that once it has become stale, a cache must not use the response, +		 * without re-validating it with the server., +		 * Indicate intermediaries (caches and others) that they should not transform the, +		 * response content., +		 * Indicate that the response message is intended for a single user and must not, +		 * be stored by a shared cache., +		 * Same meaning as the "must-revalidate" directive, except that it does not apply, +		 * to private caches., +		 * Maximum time the response can be served after it becomes stale, in seconds if, +		 * no duration suffix is not specified., +		 * Maximum time the response may be used when errors are encountered, in seconds, +		 * if no duration suffix is not specified., +		 * Maximum time the response should be cached by shared caches, in seconds if no, +		 * duration suffix is not specified., +			CacheControl cacheControl = createCacheControl();, +			callIfTrue(this.mustRevalidate, cacheControl, CacheControl::mustRevalidate);, +			callIfTrue(this.noTransform, cacheControl, CacheControl::noTransform);, +			callIfTrue(this.cachePublic, cacheControl, CacheControl::cachePublic);, +			callIfTrue(this.cachePrivate, cacheControl, CacheControl::cachePrivate);, +			callIfTrue(this.proxyRevalidate, cacheControl, CacheControl::proxyRevalidate);, +				cacheControl.staleWhileRevalidate(this.staleWhileRevalidate.getSeconds(),, +						TimeUnit.SECONDS);, +				cacheControl.staleIfError(this.staleIfError.getSeconds(),, +						TimeUnit.SECONDS);, +				cacheControl.sMaxAge(this.sMaxAge.getSeconds(), TimeUnit.SECONDS);, +			return cacheControl;, +		}, +, +		private CacheControl createCacheControl() {]