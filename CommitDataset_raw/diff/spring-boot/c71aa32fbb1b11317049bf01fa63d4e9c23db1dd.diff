[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		if (url.toString().endsWith("/*")) {, +			return (dir.exists() ? new ExplodedArchive(dir, false) : null);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		if (url.toString().endsWith("/*")) {, +			return (dir.exists() ? new ExplodedArchive(dir, false) : null);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		private static final String ERROR_PAGE_CLASS = "org.apache.tomcat.util.descriptor.web.ErrorPage";, +		private static final String LEGACY_ERROR_PAGE_CLASS = "org.apache.catalina.deploy.ErrorPage";, +				if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils, +							.instantiate(ClassUtils.forName(ERROR_PAGE_CLASS, null));, +				else if (ClassUtils.isPresent(LEGACY_ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils.instantiate(, +							ClassUtils.forName(LEGACY_ERROR_PAGE_CLASS, null));, +			if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {]