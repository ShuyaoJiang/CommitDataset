[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextCustomizer.java, +import org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.Ssl;, +import org.springframework.boot.test.web.client.TestRestTemplate.HttpClientOption;, +			boolean sslEnabled = isSslEnabled(applicationContext);, +			TestRestTemplate template;, +			if (sslEnabled) {, +				template = new TestRestTemplate(builder.build(), null, null,, +						HttpClientOption.SSL);, +			}, +			else {, +				template = new TestRestTemplate(builder.build());, +			}, +			template.setUriTemplateHandler(new LocalHostUriTemplateHandler(, +					applicationContext.getEnvironment(), sslEnabled ? "https" : "http"));, +		private boolean isSslEnabled(ApplicationContext applicationContext) {, +			try {, +				Ssl ssl = applicationContext, +						.getBean(AbstractConfigurableEmbeddedServletContainer.class), +						.getSsl();, +				return ssl != null && ssl.isEnabled();, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return false;, +			}, +		}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextCustomizer.java, +import org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.Ssl;, +import org.springframework.boot.test.web.client.TestRestTemplate.HttpClientOption;, +			boolean sslEnabled = isSslEnabled(applicationContext);, +			TestRestTemplate template;, +			if (sslEnabled) {, +				template = new TestRestTemplate(builder.build(), null, null,, +						HttpClientOption.SSL);, +			}, +			else {, +				template = new TestRestTemplate(builder.build());, +			}, +			template.setUriTemplateHandler(new LocalHostUriTemplateHandler(, +					applicationContext.getEnvironment(), sslEnabled ? "https" : "http"));, +		private boolean isSslEnabled(ApplicationContext applicationContext) {, +			try {, +				Ssl ssl = applicationContext, +						.getBean(AbstractConfigurableEmbeddedServletContainer.class), +						.getSsl();, +				return ssl != null && ssl.isEnabled();, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return false;, +			}, +		}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, + * {@link UriTemplateHandler} will automatically prefix relative URIs with, + * @author Andy Wilkinson, +	private final String scheme;, +, +	/**, +	 * Create a new {@code LocalHostUriTemplateHandler} that will generate {@code http}, +	 * URIs using the given {@code environment} to determine the port., +	 *, +	 * @param environment the environment used to determine the port, +	 */, +		this(environment, "http");, +	}, +, +	/**, +	 * Create a new {@code LocalHostUriTemplateHandler} the will generate URIs with the, +	 * given {@code scheme} and use the given {@code environment} to determine the port., +	 *, +	 * @param environment the environment used to determine the port, +	 * @param scheme the scheme of the root uri, +	 * @since 1.4.1, +	 */, +	public LocalHostUriTemplateHandler(Environment environment, String scheme) {, +		Assert.notNull(scheme, "Scheme must not be null");, +		this.scheme = scheme;, +		return this.scheme + "://localhost:" + port;, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextCustomizer.java, +import org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer;, +import org.springframework.boot.context.embedded.Ssl;, +import org.springframework.boot.test.web.client.TestRestTemplate.HttpClientOption;, +			boolean sslEnabled = isSslEnabled(applicationContext);, +			TestRestTemplate template;, +			if (sslEnabled) {, +				template = new TestRestTemplate(builder.build(), null, null,, +						HttpClientOption.SSL);, +			}, +			else {, +				template = new TestRestTemplate(builder.build());, +			}, +			template.setUriTemplateHandler(new LocalHostUriTemplateHandler(, +					applicationContext.getEnvironment(), sslEnabled ? "https" : "http"));, +		private boolean isSslEnabled(ApplicationContext applicationContext) {, +			try {, +				Ssl ssl = applicationContext, +						.getBean(AbstractConfigurableEmbeddedServletContainer.class), +						.getSsl();]