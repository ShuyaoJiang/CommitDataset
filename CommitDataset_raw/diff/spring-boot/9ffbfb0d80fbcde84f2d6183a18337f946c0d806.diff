[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureOrder;, +import org.springframework.core.Ordered;, +@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureOrder;, +import org.springframework.core.Ordered;, +@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/HealthWebEndpointConfiguration.java, + * Configuration for web-specific health endpoints ., +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory(), +					.createReactiveHealthIndicator(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +		@ConditionalOnBean(HealthEndpoint.class), +		@ConditionalOnBean(StatusEndpoint.class), +		@ConditionalOnBean(HealthEndpoint.class), +		@ConditionalOnBean(StatusEndpoint.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureOrder;, +import org.springframework.core.Ordered;, +@AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/HealthWebEndpointConfiguration.java, + * Configuration for web-specific health endpoints ., +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicatorFactory(), +					.createReactiveHealthIndicator(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +		@ConditionalOnBean(HealthEndpoint.class), +		@ConditionalOnBean(StatusEndpoint.class), +		@ConditionalOnBean(HealthEndpoint.class), +		@ConditionalOnBean(StatusEndpoint.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationIntegrationTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.endpoint.web;, +, +import org.junit.Test;, +, +import org.springframework.boot.SpringBootConfiguration;, +import org.springframework.boot.actuate.endpoint.web.HealthReactiveWebEndpointExtension;, +import org.springframework.boot.actuate.endpoint.web.HealthWebEndpointExtension;, +import org.springframework.boot.actuate.endpoint.web.StatusReactiveWebEndpointExtension;, +import org.springframework.boot.actuate.endpoint.web.StatusWebEndpointExtension;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration;, +import org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration;, +import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;, +import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;, +import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;, +import org.springframework.boot.context.annotation.UserConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Integration tests for the auto-configuration of web endpoints., + *, + * @author Andy Wilkinson, + */, +public class WebEndpointAutoConfigurationIntegrationTests {, +, +	@Test, +	public void healthEndpointWebExtensionIsAutoConfigured() {, +		servletWebRunner().run((context) -> assertThat(context), +				.hasSingleBean(HealthWebEndpointExtension.class));, +	}, +, +	@Test, +	public void statusEndpointWebExtensionIsAutoConfigured() {, +		servletWebRunner().run((context) -> assertThat(context), +				.hasSingleBean(StatusWebEndpointExtension.class));, +	}]