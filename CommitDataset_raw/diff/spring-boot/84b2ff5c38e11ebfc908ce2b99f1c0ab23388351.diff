[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including cookies), +	 * and errors., +		 * Include "Cookie" in request and "Set-Cookie" in response headers., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including cookies), +	 * and errors., +		 * Include "Cookie" in request and "Set-Cookie" in response headers., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +			headers.put("request", getRequestHeaders(request));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Cookie");, +		}, +			headers.put("response", getResponseHeaders(response));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Set-Cookie");, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including cookies), +	 * and errors., +		 * Include "Cookie" in request and "Set-Cookie" in response headers., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +			headers.put("request", getRequestHeaders(request));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Cookie");, +		}, +			headers.put("response", getResponseHeaders(response));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Set-Cookie");, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, + * @author Stephane Nicoll, +		request.addHeader("Cookie", "testCookie=testValue;");, +		response.addHeader("Set-Cookie", "a=b");, +				.isEqualTo("{Content-Type=application/json, Set-Cookie=a=b, status=200}");, +		assertThat(map.get("request").toString()), +				.isEqualTo("{Accept=application/json, Cookie=testCookie=testValue;}");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including cookies), +	 * and errors., +		 * Include "Cookie" in request and "Set-Cookie" in response headers., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +			headers.put("request", getRequestHeaders(request));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Cookie");, +		}, +			headers.put("response", getResponseHeaders(response));, +		if (!isIncluded(Include.COOKIES)) {, +			headers.remove("Set-Cookie");, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, + * @author Stephane Nicoll, +		request.addHeader("Cookie", "testCookie=testValue;");, +		response.addHeader("Set-Cookie", "a=b");, +				.isEqualTo("{Content-Type=application/json, Set-Cookie=a=b, status=200}");, +		assertThat(map.get("request").toString()), +				.isEqualTo("{Accept=application/json, Cookie=testCookie=testValue;}");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.]