[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	 * Infinispan backed caching., +	 */, +	INFINISPAN(InfinispanCacheConfiguration.class),, +, +	/**, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	 * Infinispan backed caching., +	 */, +	INFINISPAN(InfinispanCacheConfiguration.class),, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.cache;, +, +import org.infinispan.manager.DefaultCacheManager;, +import org.infinispan.spring.provider.SpringEmbeddedCacheManager;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.cache.CacheManager;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.io.Resource;, +import org.springframework.util.CollectionUtils;, +, +import java.io.IOException;, +import java.util.List;, +, +/**, + * Infinispan cache configuration., + *, + * @author Eddú Meléndez, + * @since 1.3.0, + */, +@Configuration, +@ConditionalOnClass(SpringEmbeddedCacheManager.class), +@ConditionalOnMissingBean(CacheManager.class), +@Conditional(CacheCondition.class), +public class InfinispanCacheConfiguration {, +, +	@Autowired, +	private CacheProperties cacheProperties;, +, +	@Bean, +	public CacheManager cacheManager() throws IOException {, +		DefaultCacheManager defaultCacheManager = createCacheManager();, +		List<String> cacheNames = this.cacheProperties.getCacheNames();, +		if (!CollectionUtils.isEmpty(cacheNames)) {, +			for (String cacheName : cacheNames) {, +				defaultCacheManager.startCache(cacheName);, +			}, +		}, +		return new SpringEmbeddedCacheManager(defaultCacheManager);, +	}, +, +	private DefaultCacheManager createCacheManager() throws IOException {, +		Resource location = this.cacheProperties.resolveConfigLocation();, +		if (location != null) {, +			return new DefaultCacheManager(this.cacheProperties.getConfig().getInputStream());, +		}, +		return new DefaultCacheManager();, +	}, +, +}]