[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;, +		mapping.setDisabled(disabled);, +		if (!disabled) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;, +		mapping.setDisabled(disabled);, +		if (!disabled) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				paths.add(endpointHandlerMapping.getPrefix() + endpoint.getPath());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;, +		mapping.setDisabled(disabled);, +		if (!disabled) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				paths.add(endpointHandlerMapping.getPrefix() + endpoint.getPath());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +	 * @return the prefix used in mappings, +	 */, +	public String getPrefix() {, +		return this.prefix;, +	}, +, +	/**, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;, +		mapping.setDisabled(disabled);, +		if (!disabled) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				paths.add(endpointHandlerMapping.getPrefix() + endpoint.getPath());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +	 * @return the prefix used in mappings, +	 */, +	public String getPrefix() {, +		return this.prefix;, +	}, +, +	/**, +, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/EndpointsPropertiesSampleActuatorApplicationTests.java, +import static org.junit.Assert.assertEquals;, +, +	@Test, +	public void testCustomContextPath() throws Exception {, +		start(SampleActuatorApplication.class, "--management.contextPath=/admin");, +		testHealth();, +	}, +, +	private void testHealth() {, +		ResponseEntity<String> entity = getRestTemplate().getForEntity(, +				"http://localhost:8080/admin/health", String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		String body = entity.getBody();, +		assertEquals("ok", body);, +	}, +, +	private RestTemplate getRestTemplate() {, +		return getRestTemplate(null, null);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		boolean disabled = ManagementServerPort.get(this.applicationContext) != ManagementServerPort.SAME;, +		mapping.setDisabled(disabled);, +		if (!disabled) {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				paths.add(endpointHandlerMapping.getPrefix() + endpoint.getPath());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +	 * @return the prefix used in mappings, +	 */, +	public String getPrefix() {, +		return this.prefix;, +	}, +, +	/**, +, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/EndpointsPropertiesSampleActuatorApplicationTests.java, +import static org.junit.Assert.assertEquals;, +, +	@Test, +	public void testCustomContextPath() throws Exception {, +		start(SampleActuatorApplication.class, "--management.contextPath=/admin");, +		testHealth();, +	}, +, +	private void testHealth() {, +		ResponseEntity<String> entity = getRestTemplate().getForEntity(, +				"http://localhost:8080/admin/health", String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		String body = entity.getBody();, +		assertEquals("ok", body);, +	}, +, +	private RestTemplate getRestTemplate() {, +		return getRestTemplate(null, null);]