[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	@Configuration, +	@Import(RabbitConnectionFactoryCreator.class), +	protected static class RabbitTemplateConfiguration {, +, +		@Autowired, +		private ObjectProvider<MessageConverter> messageConverter;, +, +		@Autowired, +		private RabbitProperties properties;, +, +		@Bean, +		@ConditionalOnSingleCandidate(ConnectionFactory.class), +		@ConditionalOnMissingBean(RabbitTemplate.class), +		public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {, +			RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);, +			MessageConverter messageConverter = this.messageConverter.getIfUnique();, +			if (messageConverter != null) {, +				rabbitTemplate.setMessageConverter(messageConverter);, +			}, +			Template template = this.properties.getTemplate();, +			Retry retry = template.getRetry();, +			if (retry.isEnabled()) {, +				RetryTemplate retryTemplate = new RetryTemplate();, +				SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();, +				retryPolicy.setMaxAttempts(retry.getMaxAttempts());, +				retryTemplate.setRetryPolicy(retryPolicy);, +				ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();, +				backOffPolicy.setInitialInterval(retry.getInitialInterval());, +				backOffPolicy.setMultiplier(retry.getMultiplier());, +				backOffPolicy.setMaxInterval(retry.getMaxInterval());, +				retryTemplate.setBackOffPolicy(backOffPolicy);, +				rabbitTemplate.setRetryTemplate(retryTemplate);, +			}, +			if (template.getReceiveTimeout() != null) {, +				rabbitTemplate.setReceiveTimeout(template.getReceiveTimeout());, +			}, +			if (template.getReplyTimeout() != null) {, +				rabbitTemplate.setReplyTimeout(template.getReplyTimeout());, +			}, +			return rabbitTemplate;, +		}, +, +		@Bean, +		@ConditionalOnSingleCandidate(ConnectionFactory.class), +		@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "dynamic", matchIfMissing = true), +		@ConditionalOnMissingBean(AmqpAdmin.class), +		public AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {, +			return new RabbitAdmin(connectionFactory);, +		}, +, +, +	}, +, +	@Configuration, +	@Import(RabbitTemplateConfiguration.class), +		@ConditionalOnSingleCandidate(RabbitTemplate.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	@Configuration, +	@Import(RabbitConnectionFactoryCreator.class), +	protected static class RabbitTemplateConfiguration {, +, +		@Autowired, +		private ObjectProvider<MessageConverter> messageConverter;, +, +		@Autowired, +		private RabbitProperties properties;, +, +		@Bean, +		@ConditionalOnSingleCandidate(ConnectionFactory.class), +		@ConditionalOnMissingBean(RabbitTemplate.class), +		public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {, +			RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);, +			MessageConverter messageConverter = this.messageConverter.getIfUnique();, +			if (messageConverter != null) {, +				rabbitTemplate.setMessageConverter(messageConverter);, +			}, +			Template template = this.properties.getTemplate();, +			Retry retry = template.getRetry();, +			if (retry.isEnabled()) {, +				RetryTemplate retryTemplate = new RetryTemplate();, +				SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();, +				retryPolicy.setMaxAttempts(retry.getMaxAttempts());, +				retryTemplate.setRetryPolicy(retryPolicy);, +				ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();, +				backOffPolicy.setInitialInterval(retry.getInitialInterval());, +				backOffPolicy.setMultiplier(retry.getMultiplier());, +				backOffPolicy.setMaxInterval(retry.getMaxInterval());, +				retryTemplate.setBackOffPolicy(backOffPolicy);, +				rabbitTemplate.setRetryTemplate(retryTemplate);, +			}, +			if (template.getReceiveTimeout() != null) {, +				rabbitTemplate.setReceiveTimeout(template.getReceiveTimeout());, +			}, +			if (template.getReplyTimeout() != null) {, +				rabbitTemplate.setReplyTimeout(template.getReplyTimeout());, +			}, +			return rabbitTemplate;]