[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +property editors (via a `CustomEditorConfigurer` bean) or custom `Converters` (with, +bean definitions annotated as `@ConfigurationPropertiesBinding`)., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +property editors (via a `CustomEditorConfigurer` bean) or custom `Converters` (with, +bean definitions annotated as `@ConfigurationPropertiesBinding`)., +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinding.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.beans.factory.annotation.Qualifier;, +, +/**, + * Qualifier for beans that are needed to configure the binding of, + * {@link ConfigurationProperties} (e.g. Converters)., + *, + * @author Dave Syer, + */, +@Qualifier, +@Target({ ElementType.TYPE, ElementType.METHOD }), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +public @interface ConfigurationPropertiesBinding {, +}, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +property editors (via a `CustomEditorConfigurer` bean) or custom `Converters` (with, +bean definitions annotated as `@ConfigurationPropertiesBinding`)., +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinding.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.beans.factory.annotation.Qualifier;, +, +/**, + * Qualifier for beans that are needed to configure the binding of, + * {@link ConfigurationProperties} (e.g. Converters)., + *, + * @author Dave Syer, + */, +@Qualifier, +@Target({ ElementType.TYPE, ElementType.METHOD }), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +public @interface ConfigurationPropertiesBinding {, +}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import java.util.Collections;, +import java.util.List;, +import org.springframework.beans.factory.annotation.Autowired;, +	private List<Converter<?, ?>> converters = Collections.emptyList();, +, +	 * A list of custom converters (in addition to the defaults) to use when, +	 * converting properties for binding., +	 * @param converters the converters to set, +	 */, +	@Autowired(required = false), +	@ConfigurationPropertiesBinding, +	public void setConverters(List<Converter<?, ?>> converters) {]