[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., +import java.util.List;, +, +import com.google.gson.FieldNamingPolicy;, +import com.google.gson.GsonBuilder;, +import com.google.gson.LongSerializationPolicy;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Primary;, +import org.springframework.core.Ordered;, + * @author Ivan Golovko, +	@Configuration, +	static class GsonConfiguration {, +, +		@Primary, +		@ConditionalOnMissingBean(Gson.class), +		public Gson gson(GsonBuilder gsonBuilder) {, +			return gsonBuilder.create();, +		}, +	}, +, +	@Configuration, +	static class GsonBuilderConfiguration {, +, +		@Bean, +		public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {, +			final GsonBuilder gsonBuilder = new GsonBuilder();, +			customizers.forEach(c -> c.customize(gsonBuilder));, +			return gsonBuilder;, +		}, +, +	}, +, +	@Configuration, +	@EnableConfigurationProperties(GsonProperties.class), +	static class GsonBuilderCustomizerConfiguration {, +, +		@Bean, +		public StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(, +				GsonProperties gsonProperties) {, +			return new StandardGsonBuilderCustomizer(gsonProperties);, +		}, +, +		private static final class StandardGsonBuilderCustomizer, +				implements GsonBuilderCustomizer, Ordered {, +, +			private final GsonProperties properties;, +, +			StandardGsonBuilderCustomizer(GsonProperties properties) {, +				this.properties = properties;, +			}, +, +			@Override, +			public int getOrder() {, +				return 0;, +			}, +, +			@Override, +			public void customize(GsonBuilder gsonBuilder) {, +, +				boolean generateNonExecutableJson = this.properties, +						.isGenerateNonExecutableJson();, +				if (generateNonExecutableJson) {, +					gsonBuilder.generateNonExecutableJson();, +				}, +, +				boolean excludeFieldsWithoutExposeAnnotation = this.properties, +						.isExcludeFieldsWithoutExposeAnnotation();, +				if (excludeFieldsWithoutExposeAnnotation) {, +					gsonBuilder.excludeFieldsWithoutExposeAnnotation();, +				}, +, +				boolean serializeNulls = this.properties.isSerializeNulls();, +				if (serializeNulls) {, +					gsonBuilder.serializeNulls();, +				}, +, +				boolean enableComplexMapKeySerialization = this.properties, +						.isEnableComplexMapKeySerialization();, +				if (enableComplexMapKeySerialization) {, +					gsonBuilder.enableComplexMapKeySerialization();, +				}, +, +				boolean disableInnerClassSerialization = this.properties, +						.isDisableInnerClassSerialization();, +				if (disableInnerClassSerialization) {, +					gsonBuilder.disableInnerClassSerialization();, +				}, +, +				LongSerializationPolicy longSerializationPolicy = this.properties, +						.getLongSerializationPolicy();, +				if (longSerializationPolicy != null) {, +					gsonBuilder.setLongSerializationPolicy(longSerializationPolicy);, +				}, +, +				FieldNamingPolicy fieldNamingPolicy = this.properties, +						.getFieldNamingPolicy();, +				if (fieldNamingPolicy != null) {, +					gsonBuilder.setFieldNamingPolicy(fieldNamingPolicy);, +				}]