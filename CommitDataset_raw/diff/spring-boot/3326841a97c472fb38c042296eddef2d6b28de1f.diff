[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Jolokia");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Jolokia");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class, ManagementServerProperties.class,, +				HealthIndicatorAutoConfiguration.class);, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ManagementServerProperties.class, HealthIndicatorAutoConfiguration.class);, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class, ManagementServerProperties.class,, +				HealthIndicatorAutoConfiguration.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Jolokia");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class, ManagementServerProperties.class,, +				HealthIndicatorAutoConfiguration.class);, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ManagementServerProperties.class, HealthIndicatorAutoConfiguration.class);, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class, ManagementServerProperties.class,, +				HealthIndicatorAutoConfiguration.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthorizationAuditListenerTests.java, +		UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(, +				"user", "password");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Log File");, +				return ConditionOutcome, +						.match(message.found("logging.file").items(config));, +				return ConditionOutcome, +						.match(message.found("logging.path").items(config));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +			ConditionMessage.Builder message = ConditionMessage.forCondition("Jolokia");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class, ManagementServerProperties.class,, +				HealthIndicatorAutoConfiguration.class);, +		this.context.register(JestClientConfiguration.class, JestAutoConfiguration.class,, +				ManagementServerProperties.class, HealthIndicatorAutoConfiguration.class);]