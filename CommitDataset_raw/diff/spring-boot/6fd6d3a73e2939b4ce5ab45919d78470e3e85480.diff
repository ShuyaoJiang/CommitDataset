[+++ b/spring-boot-maven-plugin/src/it/jar/pom.xml, +							<goal>repackage</goal>, +++ b/spring-boot-maven-plugin/src/it/jar/pom.xml, +							<goal>repackage</goal>, +++ b/spring-boot-maven-plugin/src/it/war/pom.xml, +							<goal>repackage</goal>, +++ b/spring-boot-maven-plugin/src/it/jar/pom.xml, +							<goal>repackage</goal>, +++ b/spring-boot-maven-plugin/src/it/war/pom.xml, +							<goal>repackage</goal>, +++ /dev/null, +++ b/spring-boot-maven-plugin/src/it/jar/pom.xml, +							<goal>repackage</goal>, +++ b/spring-boot-maven-plugin/src/it/war/pom.xml, +							<goal>repackage</goal>, +++ /dev/null, +++ b/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.maven;, +, +import java.io.File;, +import java.io.IOException;, +, +import org.apache.maven.plugin.AbstractMojo;, +import org.apache.maven.plugin.MojoExecutionException;, +import org.apache.maven.plugin.MojoFailureException;, +import org.apache.maven.plugins.annotations.Component;, +import org.apache.maven.plugins.annotations.LifecyclePhase;, +import org.apache.maven.plugins.annotations.Mojo;, +import org.apache.maven.plugins.annotations.Parameter;, +import org.apache.maven.plugins.annotations.ResolutionScope;, +import org.apache.maven.project.MavenProject;, +import org.apache.maven.project.MavenProjectHelper;, +import org.springframework.boot.launcher.tools.Libraries;, +import org.springframework.boot.launcher.tools.Repackager;, +, +/**, + * MOJO that can can be used to repackage existing JAR and WAR archives so that they can, + * be executed from the command line using {@literal java -jar}., + * , + * @author Phillip Webb, + * @author Dave Syer, + */, +@Mojo(name = "repackage", defaultPhase = LifecyclePhase.PACKAGE, requiresProject = true, threadSafe = true, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME), +public class RepackageMojo extends AbstractMojo {, +, +	/**, +	 * The Maven project., +	 */, +	@Parameter(defaultValue = "${project}", readonly = true, required = true), +	private MavenProject project;, +, +	/**, +	 * Maven project helper utils., +	 */, +	@Component, +	private MavenProjectHelper projectHelper;, +, +	/**, +	 * Directory containing the generated archive., +	 */, +	@Parameter(defaultValue = "${project.build.directory}", required = true), +	private File outputDirectory;, +, +	/**, +	 * Name of the generated archive., +	 */, +	@Parameter(defaultValue = "${project.build.finalName}", required = true), +	private String finalName;, +, +	/**, +	 * Classifier to add to the artifact generated. If given, the artifact will be, +	 * attached. If this is not given, it will merely be written to the output directory, +	 * according to the finalName., +	 */, +	@Parameter, +	private String classifier;, +, +	/**, +	 * The name of the main class. If not specified the first compiled class found that, +	 * contains a 'main' method will be used., +	 */, +	@Parameter, +	private String mainClass;, +]