[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., + * @author Michael Simons, +		private final DataSource dataSource;, +, +				DataSource dataSource,, +			this.dataSource = dataSource;, +			configuration.set(this.properties.determineSqlDialect(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., + * @author Michael Simons, +		private final DataSource dataSource;, +, +				DataSource dataSource,, +			this.dataSource = dataSource;, +			configuration.set(this.properties.determineSqlDialect(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqProperties.java, + * Copyright 2012-2017 the original author or authors., +import javax.sql.DataSource;, +, + * @author Michael Simons, +	/**, +	 * Determine the {@link SQLDialect} to use based on this configuration and the primary, +	 * {@link DataSource}., +	 * @param dataSource the auto-configured data source, +	 * @return {@code SQLDialect}, +	 */, +	public SQLDialect determineSqlDialect(DataSource dataSource) {, +		if (this.sqlDialect != null) {, +			return this.sqlDialect;, +		}, +		return SQLDialectLookup.getDialect(dataSource);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., + * @author Michael Simons, +		private final DataSource dataSource;, +, +				DataSource dataSource,, +			this.dataSource = dataSource;, +			configuration.set(this.properties.determineSqlDialect(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqProperties.java, + * Copyright 2012-2017 the original author or authors., +import javax.sql.DataSource;, +, + * @author Michael Simons, +	/**, +	 * Determine the {@link SQLDialect} to use based on this configuration and the primary, +	 * {@link DataSource}., +	 * @param dataSource the auto-configured data source, +	 * @return {@code SQLDialect}, +	 */, +	public SQLDialect determineSqlDialect(DataSource dataSource) {, +		if (this.sqlDialect != null) {, +			return this.sqlDialect;, +		}, +		return SQLDialectLookup.getDialect(dataSource);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SQLDialectLookup.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jooq;, +, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.sql.DataSource;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.jooq.SQLDialect;, +, +import org.springframework.boot.jdbc.DatabaseDriver;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +, +/**, + * Utility to lookup well known {@link SQLDialect SQLDialects} from a {@link DataSource}., + *, + * Note: This lookup only supports the SQL dialects that the open source edition of jOOQ supports., + *, + * @author Michael Simons, + */]