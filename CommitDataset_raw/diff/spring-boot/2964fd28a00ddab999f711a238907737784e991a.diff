[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +	protected static class ManagementSecurityPropertiesConfiguration implements, +			SecurityPrerequisite {, +	private static class IgnoredPathsWebSecurityConfigurerAdapter implements, +			WebSecurityConfigurer<WebSecurity> {, +				ignored.addAll(Arrays.asList(EndpointPaths, +						.get(this.endpointHandlerMapping)));, +			String managementEnabled = context.getEnvironment().getProperty(, +					"management.security.enabled", "true");, +			String basicEnabled = context.getEnvironment().getProperty(, +					"security.basic.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(managementEnabled), +	protected static class ManagementWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +				if (context != null, +						&& context.getBeanNamesForType(EndpointHandlerMapping.class).length > 0) {, +			requests.requestMatchers(, +					new EndpointPathRequestMatcher(EndpointPaths.get(, +							this.endpointHandlerMapping, false))).permitAll();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +	protected static class ManagementSecurityPropertiesConfiguration implements, +			SecurityPrerequisite {, +	private static class IgnoredPathsWebSecurityConfigurerAdapter implements, +			WebSecurityConfigurer<WebSecurity> {, +				ignored.addAll(Arrays.asList(EndpointPaths, +						.get(this.endpointHandlerMapping)));, +			String managementEnabled = context.getEnvironment().getProperty(, +					"management.security.enabled", "true");, +			String basicEnabled = context.getEnvironment().getProperty(, +					"security.basic.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(managementEnabled), +	protected static class ManagementWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +				if (context != null, +						&& context.getBeanNamesForType(EndpointHandlerMapping.class).length > 0) {, +			requests.requestMatchers(, +					new EndpointPathRequestMatcher(EndpointPaths.get(, +							this.endpointHandlerMapping, false))).permitAll();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +, +		this.context.close();, +		TestSecurityContextHolder.getContext().setAuthentication(, +				new TestingAuthenticationToken("user", "N/A", "ROLE_USER"));, +		TestSecurityContextHolder.getContext().setAuthentication(, +				new TestingAuthenticationToken("user", "N/A", "ROLE_ADMIN"));, +		mockMvc.perform(get("/beans")).andExpect(, +				content().string(startsWith("{" + LINE_SEPARATOR)));, +			HttpMessageConvertersAutoConfiguration.class,, +			EndpointAutoConfiguration.class, EndpointWebMvcAutoConfiguration.class,, +			HttpMessageConvertersAutoConfiguration.class,, +			EndpointAutoConfiguration.class, EndpointWebMvcAutoConfiguration.class,]