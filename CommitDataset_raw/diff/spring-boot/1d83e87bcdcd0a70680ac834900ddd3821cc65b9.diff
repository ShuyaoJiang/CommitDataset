[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: You can also trigger validation by annotating the `@Bean` method that creates the, +configuration properties with `@Validated`., +, +Although nested properties will also be validated when bound, it's good practice to, +also annotate the associated field as `@Valid`. This ensure that validation is triggered, +even if no nested properties are found. The following example builds on the preceding, +`AcmeProperties` example:, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: You can also trigger validation by annotating the `@Bean` method that creates the, +configuration properties with `@Validated`., +, +Although nested properties will also be validated when bound, it's good practice to, +also annotate the associated field as `@Valid`. This ensure that validation is triggered, +even if no nested properties are found. The following example builds on the preceding, +`AcmeProperties` example:, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationBeanFactoryMetadata.java, +	/**, +	 * The bean name that this class is registered with., +	 */, +	public static final String BEAN_NAME = ConfigurationBeanFactoryMetadata.class, +			.getName();, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: You can also trigger validation by annotating the `@Bean` method that creates the, +configuration properties with `@Validated`., +, +Although nested properties will also be validated when bound, it's good practice to, +also annotate the associated field as `@Valid`. This ensure that validation is triggered, +even if no nested properties are found. The following example builds on the preceding, +`AcmeProperties` example:, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationBeanFactoryMetadata.java, +	/**, +	 * The bean name that this class is registered with., +	 */, +	public static final String BEAN_NAME = ConfigurationBeanFactoryMetadata.class, +			.getName();, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindException.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.util.ClassUtils;, +, +/**, + * Exception thrown when {@link ConfigurationProperties @ConfigurationProperties} binding, + * fails., + *, + * @author Phillip Webb, + * @author Stephane Nicoll, + * @since 2.0.0, + */, +public class ConfigurationPropertiesBindException extends BeanCreationException {, +, +	private final Class<?> beanType;, +, +	private final ConfigurationProperties annotation;, +, +	ConfigurationPropertiesBindException(String beanName, Object bean,, +			ConfigurationProperties annotation, Exception cause) {, +		super(beanName, getMessage(bean, annotation), cause);, +		this.beanType = bean.getClass();, +		this.annotation = annotation;, +	}, +, +	/**, +	 * Return the bean type that was being bound., +	 * @return the bean type, +	 */, +	public Class<?> getBeanType() {, +		return this.beanType;, +	}, +, +	/**, +	 * Return the configuration properties annotation that triggered the binding., +	 * @return the configuration properties annotation, +	 */, +	public ConfigurationProperties getAnnotation() {, +		return this.annotation;, +	}, +, +	private static String getMessage(Object bean, ConfigurationProperties annotation) {, +		StringBuilder message = new StringBuilder();, +		message.append("Could not bind properties to '"]