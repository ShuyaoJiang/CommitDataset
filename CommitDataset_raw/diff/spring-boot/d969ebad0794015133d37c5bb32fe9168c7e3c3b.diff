[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		if (context.streamSources().anyMatch((s) -> s, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT)) {, +		return sources.allMatch(, +				(s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.ABSENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		if (context.streamSources().anyMatch((s) -> s, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT)) {, +		return sources.allMatch(, +				(s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.ABSENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasKnownBindableProperties = context.streamSources().anyMatch((, +				s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		if (context.streamSources().anyMatch((s) -> s, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT)) {, +		return sources.allMatch(, +				(s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.ABSENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasKnownBindableProperties = context.streamSources().anyMatch((, +				s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +	public ConfigurationPropertyState containsDescendantOf(, +			ConfigurationPropertyName name) {, +		ConfigurationPropertyState result = this.source.containsDescendantOf(name);, +		if (result != ConfigurationPropertyState.ABSENT) {, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		return ConfigurationPropertyState.ABSENT;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		if (context.streamSources().anyMatch((s) -> s, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT)) {, +		return sources.allMatch(, +				(s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.ABSENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasKnownBindableProperties = context.streamSources().anyMatch((, +				s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +	public ConfigurationPropertyState containsDescendantOf(, +			ConfigurationPropertyName name) {, +		ConfigurationPropertyState result = this.source.containsDescendantOf(name);, +		if (result != ConfigurationPropertyState.ABSENT) {, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		return ConfigurationPropertyState.ABSENT;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java, +	 * Returns if the source contains any descendants of the specified name. May return, +	 * {@link ConfigurationPropertyState#PRESENT} or, +	 * {@link ConfigurationPropertyState#ABSENT} if an answer can be determined or, +	 * {@link ConfigurationPropertyState#UNKNOWN} if it's not possible to determine a, +	 * definitive answer., +	 * @return if the source contains any descendants, +	ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		if (context.streamSources().anyMatch((s) -> s, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT)) {, +		return sources.allMatch(, +				(s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.ABSENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasKnownBindableProperties = context.streamSources().anyMatch((, +				s) -> s.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +	public ConfigurationPropertyState containsDescendantOf(, +			ConfigurationPropertyName name) {, +		ConfigurationPropertyState result = this.source.containsDescendantOf(name);, +		if (result != ConfigurationPropertyState.ABSENT) {, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		return ConfigurationPropertyState.ABSENT;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java, +	 * Returns if the source contains any descendants of the specified name. May return, +	 * {@link ConfigurationPropertyState#PRESENT} or, +	 * {@link ConfigurationPropertyState#ABSENT} if an answer can be determined or]