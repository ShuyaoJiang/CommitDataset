[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NoOpSessionConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NoOpSessionConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +	protected <T extends SessionRepository<?>> T validateSessionRepository(, +			Class<T> type) {, +		SessionRepository<?> cacheManager = this.context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NoOpSessionConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +	protected <T extends SessionRepository<?>> T validateSessionRepository(, +			Class<T> type) {, +		SessionRepository<?> cacheManager = this.context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationRedisTests.java, +				"spring.session.store-type=redis", "spring.session.redis.namespace=foo",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NoOpSessionConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +	protected <T extends SessionRepository<?>> T validateSessionRepository(, +			Class<T> type) {, +		SessionRepository<?> cacheManager = this.context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationRedisTests.java, +				"spring.session.store-type=redis", "spring.session.redis.namespace=foo",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +		load("spring.session.store-type=hash-map", "server.session.timeout=3000");, +		load("spring.session.store-type=hash-map", "spring.session.timeout=3000");, +		HazelcastInstance hazelcastInstance = this.context, +				.getBean(HazelcastInstance.class);, +			return new MapSessionRepository(, +					Collections.<String, ExpiringSession>emptyMap());, +		@SuppressWarnings("unchecked"), +			IMap<Object, Object> map = mock(IMap.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +	public SessionRepository<ExpiringSession> sessionRepository(, +			SessionProperties properties) {, +		MapSessionRepository repository = new MapSessionRepository();, +		Integer timeout = properties.getTimeout();, +			repository.setDefaultMaxInactiveInterval(timeout);, +		return repository;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NoOpSessionConfiguration.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +	protected <T extends SessionRepository<?>> T validateSessionRepository(, +			Class<T> type) {, +		SessionRepository<?> cacheManager = this.context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationRedisTests.java, +				"spring.session.store-type=redis", "spring.session.redis.namespace=foo",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +		load("spring.session.store-type=hash-map", "server.session.timeout=3000");, +		load("spring.session.store-type=hash-map", "spring.session.timeout=3000");, +		HazelcastInstance hazelcastInstance = this.context, +				.getBean(HazelcastInstance.class);, +			return new MapSessionRepository(, +					Collections.<String, ExpiringSession>emptyMap());, +		@SuppressWarnings("unchecked"), +			IMap<Object, Object> map = mock(IMap.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/FilterOrderingIntegrationTests.java, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.session.store-type=hash-map");, +				ServerPropertiesAutoConfiguration.class, SecurityAutoConfiguration.class,, +				SessionAutoConfiguration.class,]