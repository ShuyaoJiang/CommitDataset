[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	 * Determine the driver to use based on this configuration and the environment., +	 * @return the driver to use, +	 * @deprecated as for 1.4 in favor of {@link #determineDriverClassName()}, +	@Deprecated, +		return determineDriverClassName();, +	 * Determine the url to use based on this configuration and the environment., +	 * @return the url to use, +	 * @deprecated as of 1.4 in favor of {@link #determineUrl()}, +	@Deprecated, +		return determineUrl();, +	 * Determine the username to use based on this configuration and the environment., +	 * @return the username to use, +	 * @deprecated as of 1.4 in favor of {@link #determineUsername()}, +	@Deprecated, +		return determineUsername();, +	 * Determine the password to use based on this configuration and the environment., +	 * @return the password to use, +	 * @deprecated as of 1.4 in favor of {@link #determinePassword()}, +	@Deprecated, +		return determinePassword();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	 * Determine the driver to use based on this configuration and the environment., +	 * @return the driver to use, +	 * @deprecated as for 1.4 in favor of {@link #determineDriverClassName()}, +	@Deprecated, +		return determineDriverClassName();, +	 * Determine the url to use based on this configuration and the environment., +	 * @return the url to use, +	 * @deprecated as of 1.4 in favor of {@link #determineUrl()}, +	@Deprecated, +		return determineUrl();, +	 * Determine the username to use based on this configuration and the environment., +	 * @return the username to use, +	 * @deprecated as of 1.4 in favor of {@link #determineUsername()}, +	@Deprecated, +		return determineUsername();, +	 * Determine the password to use based on this configuration and the environment., +	 * @return the password to use, +	 * @deprecated as of 1.4 in favor of {@link #determinePassword()}, +	@Deprecated, +		return determinePassword();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourcePropertiesTests.java, +	@Deprecated, +	public void getDriver() {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.setUrl("jdbc:mysql://mydb");, +		assertThat(properties.getDriverClassName()).isEqualTo("com.mysql.jdbc.Driver");, +	}, +, +	@Test, +	@Deprecated, +	public void getDriverWithExplicitConfig() {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.setUrl("jdbc:mysql://mydb");, +		properties.setDriverClassName("org.hsqldb.jdbcDriver");, +		assertThat(properties.getDriverClassName()).isEqualTo("org.hsqldb.jdbcDriver");, +	}, +, +	@Test, +	@Deprecated, +	public void getUrl() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.afterPropertiesSet();, +		assertThat(properties.getUrl()).isEqualTo(EmbeddedDatabaseConnection.H2.getUrl());, +	}, +, +	@Test, +	@Deprecated, +	public void getUrlWithExplicitConfig() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.setUrl("jdbc:mysql://mydb");, +		properties.afterPropertiesSet();, +		assertThat(properties.getUrl()).isEqualTo("jdbc:mysql://mydb");, +	}, +, +	@Test, +	@Deprecated, +	public void getUsername() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.afterPropertiesSet();, +		assertThat(properties.getUsername()).isEqualTo("sa");, +	}, +, +	@Test, +	@Deprecated, +	public void getUsernameWithExplicitConfig() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.setUsername("foo");, +		properties.afterPropertiesSet();, +		assertThat(properties.getUsername()).isEqualTo("foo");, +	}, +, +	@Test, +	@Deprecated, +	public void getPassword() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.afterPropertiesSet();, +		assertThat(properties.getPassword()).isEqualTo("");, +	}]