[+++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +|`inlinedConfScript`, +|Reference to a file script that should be inlined in the default launch script., + This can be used to set environmental variables such as `JAVA_OPTS` before, + any external config files are loaded., +, +++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +|`inlinedConfScript`, +|Reference to a file script that should be inlined in the default launch script., + This can be used to set environmental variables such as `JAVA_OPTS` before, + any external config files are loaded., +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/DefaultLaunchScript.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.FileCopyUtils;, +, + * @author Justin Rosenberg, +	private static final List<String> FILE_PATH_KEYS = Arrays.asList("inlinedConfScript");, +, +	/**, +	 * Loads file contents., +	 * @param file File to load. If null, will load default launch.script, +	 * @return String representation of file contents., +	 * @throws IOException if file is not found our can't be loaded., +	 */, +		final byte[] fileBytes;, +			fileBytes = FileCopyUtils, +					.copyToByteArray(getClass().getResourceAsStream("launch.script"));, +		else {, +			fileBytes = FileCopyUtils.copyToByteArray(file);, +		}, +		return new String(fileBytes, UTF_8);, +	/**, +	 * Replaces variable placeholders in file with specified property values., +	 * @param content String with variables defined in {{variable:default}} format., +	 * @param properties Key value pairs for variables to replace, +	 * @return Updated String, +	 * @throws IOException if a file property value or path is specified and the file, +	 * cannot be loaded., +	 */, +	private String expandPlaceholders(String content, Map<?, ?> properties), +			final String value;, +			String defaultValue = matcher.group(2);, +				Object propertyValue = properties.get(name);, +				if (FILE_PATH_KEYS.contains(name)) {, +					value = parseFilePropertyValue(properties.get(name));, +					value = propertyValue.toString();, +				}, +			}, +			else {, +				value = (defaultValue == null ? matcher.group(0), +						: defaultValue.substring(1));, +	/**, +	 * Loads file based on File object or String path., +	 * @param propertyValue File Object or String path to file., +	 * @return File contents., +	 * @throws IOException if a file property value or path is specified and the file, +	 * cannot be loaded., +	 */, +	private String parseFilePropertyValue(Object propertyValue) throws IOException {, +		if (propertyValue instanceof File) {, +			return loadContent((File) propertyValue);, +		}, +		else {, +			return loadContent(new File(propertyValue.toString()));, +		}, +	}, +, +	/**, +	 * The content of the launch script as a byte array., +	 * @return Byte representation of script., +	 */, +++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +|`inlinedConfScript`, +|Reference to a file script that should be inlined in the default launch script., + This can be used to set environmental variables such as `JAVA_OPTS` before, + any external config files are loaded., +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/DefaultLaunchScript.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.FileCopyUtils;, +, + * @author Justin Rosenberg, +	private static final List<String> FILE_PATH_KEYS = Arrays.asList("inlinedConfScript");, +, +	/**, +	 * Loads file contents., +	 * @param file File to load. If null, will load default launch.script, +	 * @return String representation of file contents., +	 * @throws IOException if file is not found our can't be loaded., +	 */, +		final byte[] fileBytes;, +			fileBytes = FileCopyUtils, +					.copyToByteArray(getClass().getResourceAsStream("launch.script"));, +		else {, +			fileBytes = FileCopyUtils.copyToByteArray(file);, +		}, +		return new String(fileBytes, UTF_8);]