[+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ClassLoaderIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("HasClasses-false-true-false");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ClassLoaderIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("HasClasses-false-true-false");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/DirectorySourcesIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ClassLoaderIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("HasClasses-false-true-false");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/DirectorySourcesIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new File("target/repository/joda-time/joda-time").isDirectory()), +				.isTrue();, +		assertThat(output.contains("Downloading: file:")).isTrue();, +			assertThat(ex.getMessage()), +					.contains("Duplicate @DependencyManagementBom annotation");, +		assertThat(new File("target/repository/javax/ejb/ejb-api/3.0").isDirectory()), +				.isTrue();, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ClassLoaderIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("HasClasses-false-true-false");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/DirectorySourcesIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new File("target/repository/joda-time/joda-time").isDirectory()), +				.isTrue();, +		assertThat(output.contains("Downloading: file:")).isTrue();, +			assertThat(ex.getMessage()), +					.contains("Duplicate @DependencyManagementBom annotation");, +		assertThat(new File("target/repository/javax/ejb/ejb-api/3.0").isDirectory()), +				.isTrue();, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getHttpOutput()).contains("{\"message\":\"Hello World\"}");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getHttpOutput()).contains("{\"message\":\"Hello World\"}");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ClassLoaderIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("HasClasses-false-true-false");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/DirectorySourcesIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new File("target/repository/joda-time/joda-time").isDirectory()), +				.isTrue();, +		assertThat(output.contains("Downloading: file:")).isTrue();, +			assertThat(ex.getMessage()), +					.contains("Duplicate @DependencyManagementBom annotation");, +		assertThat(new File("target/repository/javax/ejb/ejb-api/3.0").isDirectory()), +				.isTrue();, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.cli.getHttpOutput()).contains("{\"message\":\"Hello World\"}");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +		assertThat(this.cli.getHttpOutput()).contains("{\"message\":\"Hello World\"}");, +		assertThat(this.cli.getOutput()).contains("Hello World");, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(output).contains("Hello World! From " + scriptUri);, +		assertThat(output).contains("Hello World! From " + scriptUri);, +		assertThat(output).contains("Hello World!");, +		assertThat(output).contains("Hello World!");, +		assertThat(output).contains("completed with the following parameters");, +		assertThat(output).contains("security.oauth2.client.clientId");, +		assertThat(output).contains("security.oauth2.client.secret =");, +		assertThat(output).contains("Hello Phil");, +		assertThat(output).contains("completed with the following parameters");, +		assertThat(result).isEqualTo("World!");, +		assertThat(this.cli.getHttpOutput()).isEqualTo("World!");, +		assertThat(result).contains("Hello World");, +		assertThat(result).contains("container");, +		assertThat(this.cli.getHttpOutput()).isEqualTo("{\"message\":\"Hello World!\"}");, +		assertThat(output).contains("Hello World");]