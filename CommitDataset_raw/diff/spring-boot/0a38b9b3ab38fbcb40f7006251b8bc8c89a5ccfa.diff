[+++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import java.util.Collections;, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +	public static class DataSourcesHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections, +				.emptyList();, +			DataSourcePoolMetadataProvider metadataProvider = new DataSourcePoolMetadataProviders(, +					this.metadataProviders);, +			if (this.dataSources.size() == 1) {, +				DataSource dataSource = this.dataSources.values().iterator().next();, +				return createDataSourceHealthIndicator(metadataProvider, dataSource);, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, DataSource> entry : this.dataSources.entrySet()) {, +				String name = entry.getKey();, +				DataSource dataSource = entry.getValue();, +				composite.addHealthIndicator(name,, +						createDataSourceHealthIndicator(metadataProvider, dataSource));, +			}, +			return composite;, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(, +				DataSourcePoolMetadataProvider provider, DataSource dataSource) {, +			String validationQuery = null;, +			DataSourcePoolMetadata poolMetadata = provider, +					.getDataSourcePoolMetadata(dataSource);, +			if (poolMetadata != null) {, +				validationQuery = poolMetadata.getValidationQuery();, +			return new DataSourceHealthIndicator(dataSource, validationQuery);, +	public static class MongoHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +			if (this.mongoTemplates.size() == 1) {, +				return new MongoHealthIndicator(this.mongoTemplates.values().iterator(), +						.next());, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, MongoTemplate> entry : this.mongoTemplates.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new MongoHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	public static class RedisHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +			if (this.redisConnectionFactories.size() == 1) {, +				return new RedisHealthIndicator(this.redisConnectionFactories.values(), +						.iterator().next());, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, RedisConnectionFactory> entry : this.redisConnectionFactories, +					.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new RedisHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	public static class RabbitHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +			if (this.rabbitTemplates.size() == 1) {, +				return new RabbitHealthIndicator(this.rabbitTemplates.values().iterator(), +						.next());, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, RabbitTemplate> entry : this.rabbitTemplates, +					.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new RabbitHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	public static class SolrHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +			if (this.solrServers.size() == 1) {, +				return new SolrHealthIndicator(this.solrServers.entrySet().iterator(), +						.next().getValue());, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, SolrServer> entry : this.solrServers.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new SolrHealthIndicator(]