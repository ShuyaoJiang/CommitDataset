[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java, +import java.lang.annotation.Annotation;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +import org.springframework.util.ClassUtils;, +			Set<Class<?>> components = new LinkedHashSet<Class<?>>();, +			Set<Class<?>> propertyMappings = new LinkedHashSet<Class<?>>();, +			while (beanClass != null) {, +				for (Annotation annotation : AnnotationUtils.getAnnotations(beanClass)) {, +					if (isAnnotated(annotation, Component.class)) {, +						components.add(annotation.annotationType());, +					}, +					if (isAnnotated(annotation, PropertyMapping.class)) {, +						propertyMappings.add(annotation.annotationType());, +					}, +				}, +				beanClass = beanClass.getSuperclass();, +			}, +			if (!components.isEmpty() && !propertyMappings.isEmpty()) {, +				throw new IllegalStateException("The @PropertyMapping ", +						+ getAnnotationsDescription(propertyMappings), +						+ " cannot be used in combination with the @Component ", +						+ getAnnotationsDescription(components));, +		private boolean isAnnotated(Annotation element,, +				Class<? extends Annotation> annotationType) {, +			try {, +				return element.annotationType().equals(annotationType) || AnnotationUtils, +						.findAnnotation(element.annotationType(), annotationType) != null;, +			}, +			catch (Throwable ex) {, +				return false;, +			}, +		}, +, +		private String getAnnotationsDescription(Set<Class<?>> annotations) {, +			StringBuilder result = new StringBuilder();, +			for (Class<?> annotation : annotations) {, +				result.append(result.length() == 0 ? "" : ", ");, +				result.append("@" + ClassUtils.getShortName(annotation));, +			}, +			result.insert(0, annotations.size() == 1 ? "annotation " : "annotations ");, +			return result.toString();, +		}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java, +import java.lang.annotation.Annotation;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +import org.springframework.util.ClassUtils;, +			Set<Class<?>> components = new LinkedHashSet<Class<?>>();, +			Set<Class<?>> propertyMappings = new LinkedHashSet<Class<?>>();, +			while (beanClass != null) {, +				for (Annotation annotation : AnnotationUtils.getAnnotations(beanClass)) {, +					if (isAnnotated(annotation, Component.class)) {, +						components.add(annotation.annotationType());, +					}, +					if (isAnnotated(annotation, PropertyMapping.class)) {, +						propertyMappings.add(annotation.annotationType());, +					}, +				}, +				beanClass = beanClass.getSuperclass();, +			}, +			if (!components.isEmpty() && !propertyMappings.isEmpty()) {, +				throw new IllegalStateException("The @PropertyMapping ", +						+ getAnnotationsDescription(propertyMappings), +						+ " cannot be used in combination with the @Component ", +						+ getAnnotationsDescription(components));, +		private boolean isAnnotated(Annotation element,, +				Class<? extends Annotation> annotationType) {, +			try {, +				return element.annotationType().equals(annotationType) || AnnotationUtils, +						.findAnnotation(element.annotationType(), annotationType) != null;, +			}, +			catch (Throwable ex) {, +				return false;, +			}, +		}, +, +		private String getAnnotationsDescription(Set<Class<?>> annotations) {, +			StringBuilder result = new StringBuilder();, +			for (Class<?> annotation : annotations) {, +				result.append(result.length() == 0 ? "" : ", ");, +				result.append("@" + ClassUtils.getShortName(annotation));, +			}, +			result.insert(0, annotations.size() == 1 ? "annotation " : "annotations ");, +			return result.toString();, +		}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizerFactoryTests.java, +		this.thrown.expectMessage("The @PropertyMapping annotation ", +				+ "@PropertyMappingContextCustomizerFactoryTests.TypeMappingAnnotation ", +				+ "cannot be used in combination with the @Component annotation @Configuration");]