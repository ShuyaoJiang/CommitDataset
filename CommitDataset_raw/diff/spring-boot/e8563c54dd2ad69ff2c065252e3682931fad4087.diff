[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/cache/CachingOperationInvokerAdvisorTests.java, + * Tests for {@link CachingOperationInvokerAdvisor}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/cache/CachingOperationInvokerAdvisorTests.java, + * Tests for {@link CachingOperationInvokerAdvisor}., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	 * have been found. If this is turned off, the only fallback will be the default file, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/cache/CachingOperationInvokerAdvisorTests.java, + * Tests for {@link CachingOperationInvokerAdvisor}., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	 * have been found. If this is turned off, the only fallback will be the default file, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.metrics.export.atlas.meter-time-to-live= # Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/cache/CachingOperationInvokerAdvisorTests.java, + * Tests for {@link CachingOperationInvokerAdvisor}., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	 * have been found. If this is turned off, the only fallback will be the default file, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.metrics.export.atlas.meter-time-to-live= # Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasProperties.java, +	 * Time to live for meters that do not have any activity. After this period the meter, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWebIncludes(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	public void matchWhenDiscovererDoesNotMatchShouldMatch() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private final Log logger = LogFactory.getLog(getClass());, +, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug("Non-matching info type for filter: " + filter, ex);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/cache/CachingOperationInvokerAdvisorTests.java, + * Tests for {@link CachingOperationInvokerAdvisor}., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java]