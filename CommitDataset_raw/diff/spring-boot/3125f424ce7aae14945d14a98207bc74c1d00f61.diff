[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/configuration-metadata.adoc, +If the class has a single constructor with at least one parameters, one property is, +created per constructor parameter. Otherwise, properties are discovered through the, +presence of standard getters and setters with special handling for collection types (that, +is detected even if only a getter is present)., +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/configuration-metadata.adoc, +If the class has a single constructor with at least one parameters, one property is, +created per constructor parameter. Otherwise, properties are discovered through the, +presence of standard getters and setters with special handling for collection types (that, +is detected even if only a getter is present)., +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String DEFAULT_VALUE_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.bind.DefaultValue";, +, +	protected String defaultValueAnnotation() {, +		return DEFAULT_VALUE_ANNOTATION;, +	}, +, +				deprecatedConfigurationPropertyAnnotation(), defaultValueAnnotation(),, +				endpointAnnotation(), readOperationAnnotation());, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/configuration-metadata.adoc, +If the class has a single constructor with at least one parameters, one property is, +created per constructor parameter. Otherwise, properties are discovered through the, +presence of standard getters and setters with special handling for collection types (that, +is detected even if only a getter is present)., +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String DEFAULT_VALUE_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.bind.DefaultValue";, +, +	protected String defaultValueAnnotation() {, +		return DEFAULT_VALUE_ANNOTATION;, +	}, +, +				deprecatedConfigurationPropertyAnnotation(), defaultValueAnnotation(),, +				endpointAnnotation(), readOperationAnnotation());, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConstructorParameterPropertyDescriptor.java, +/*, + * Copyright 2012-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor;, +, +import java.util.List;, +import java.util.stream.Collectors;, +, +import javax.lang.model.element.AnnotationMirror;, +import javax.lang.model.element.Element;, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;, +import javax.lang.model.type.PrimitiveType;, +import javax.lang.model.type.TypeMirror;, +import javax.lang.model.util.TypeKindVisitor8;, +import javax.tools.Diagnostic.Kind;, +, +/**, + * A {@link PropertyDescriptor} for a constructor parameter., + *, + * @author Stephane Nicoll, + */, +class ConstructorParameterPropertyDescriptor extends PropertyDescriptor<VariableElement> {, +, +	ConstructorParameterPropertyDescriptor(TypeElement ownerElement,, +			ExecutableElement factoryMethod, VariableElement source, String name,, +			TypeMirror type, VariableElement field, ExecutableElement getter,, +			ExecutableElement setter) {, +		super(ownerElement, factoryMethod, source, name, type, field, getter, setter);, +	}, +, +	@Override, +	protected boolean isProperty(MetadataGenerationEnvironment env) {, +		// If it's a constructor parameter, it doesn't matter as we must be able to bind, +		// it to build the object., +		return !isNested(env);, +	}, +, +	@Override, +	protected Object resolveDefaultValue(MetadataGenerationEnvironment environment) {, +		Object defaultValue = getDefaultValueFromAnnotation(environment, getSource());, +		if (defaultValue != null) {, +			return defaultValue;, +		}, +		return getSource().asType().accept(DefaultPrimitiveTypeVisitor.INSTANCE, null);, +	}, +]