[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +import org.springframework.core.env.PropertySource;, + * @author Andy Wilkinson, +class SpringBootTestRandomPortEnvironmentPostProcessor, +		if (source == null || isTestServerPortFixed(source), +				|| isTestManagementPortConfigured(source)) {, +			return;, +		}, +		String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY, null);, +		if (managementPort == null || managementPort.equals("-1")) {, +			return;, +		}, +		String serverPort = getProperty(environment, SERVER_PORT_PROPERTY, "8080");, +, +	private boolean isTestServerPortFixed(MapPropertySource source) {, +		return !"0".equals(source.getProperty(SERVER_PORT_PROPERTY));, +	private boolean isTestManagementPortConfigured(PropertySource<?> source) {, +		return source.getProperty(MANAGEMENT_PORT_PROPERTY) != null;, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +import org.springframework.core.env.PropertySource;, + * @author Andy Wilkinson, +class SpringBootTestRandomPortEnvironmentPostProcessor, +		if (source == null || isTestServerPortFixed(source), +				|| isTestManagementPortConfigured(source)) {, +			return;, +		}, +		String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY, null);, +		if (managementPort == null || managementPort.equals("-1")) {, +			return;, +		}, +		String serverPort = getProperty(environment, SERVER_PORT_PROPERTY, "8080");, +, +	private boolean isTestServerPortFixed(MapPropertySource source) {, +		return !"0".equals(source.getProperty(SERVER_PORT_PROPERTY));, +	private boolean isTestManagementPortConfigured(PropertySource<?> source) {, +		return source.getProperty(MANAGEMENT_PORT_PROPERTY) != null;, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessorTests.java, +import java.util.Collections;, +		// is null in app properties, +		this.propertySources.addLast(new MapPropertySource("other",, +				Collections.singletonMap("management.server.port", "8080")));, +		this.propertySources.addLast(new MapPropertySource("other",, +				Collections.singletonMap("management.server.port", "8081")));, +		this.propertySources.addLast(new MapPropertySource("other",, +				Collections.singletonMap("management.server.port", "-1")));]