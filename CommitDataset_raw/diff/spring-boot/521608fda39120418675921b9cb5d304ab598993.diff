[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.SimpleCommandLinePropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.web.context.support.StandardServletEnvironment;, +		initialize(sources);, +		initialize(sources);, +	private void initialize(Object[] sources) {, +		if (sources != null) {, +			this.sources.addAll(Arrays.asList(sources));, +		this.initializers.addAll(getSpringFactoriesApplicationContextInitializers());, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private Collection<ApplicationContextInitializer<?>> getSpringFactoriesApplicationContextInitializers() {, +		return (Collection) SpringFactoriesLoader.loadFactories(, +				ApplicationContextInitializer.class,, +				SpringApplication.class.getClassLoader());, +	}, +, +		// Call all non environment aware initializers very early, +		callNonEnvironmentAwareSpringApplicationInitializers();, +, +		// Create and configure the environment, +		ConfigurableEnvironment environment = getOrCreateEnvironment();, +		addPropertySources(environment, args);, +, +		// Call all remaining initializers, +		callEnvironmentAwareSpringApplicationInitializers(environment);, +, +		// Create, load, refresh and run the ApplicationContext, +		if (context instanceof ConfigurableApplicationContext) {, +			((ConfigurableApplicationContext) context).setEnvironment(environment);, +		}, +	private void callNonEnvironmentAwareSpringApplicationInitializers() {, +			if (initializer instanceof SpringApplicationInitializer, +					&& !(initializer instanceof EnvironmentAware)) {, +				((SpringApplicationInitializer) initializer).initialize(this);, +			}, +		}, +	}, +, +	private ConfigurableEnvironment getOrCreateEnvironment() {, +		if (this.environment != null) {, +			return this.environment;, +		}, +		if (this.applicationContext != null, +				&& this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {, +			return (ConfigurableEnvironment) this.applicationContext.getEnvironment();, +		}, +		if (this.webEnvironment) {, +			return new StandardServletEnvironment();, +		}, +		return new StandardEnvironment();, +, +	}, +, +	/**, +	 * Add any {@link PropertySource}s to the environment., +	 * @param environment the environment, +	 * @param args run arguments, +	 */, +	protected void addPropertySources(ConfigurableEnvironment environment, String[] args) {, +		if (this.addCommandLineProperties) {, +			if (this.defaultCommandLineArgs != null) {, +				environment.getPropertySources().addFirst(, +						new SimpleCommandLinePropertySource("defaultCommandLineArgs",, +								this.defaultCommandLineArgs));, +			}, +			environment.getPropertySources().addFirst(, +					new SimpleCommandLinePropertySource(args));, +		}, +	}, +, +	private void callEnvironmentAwareSpringApplicationInitializers(, +			ConfigurableEnvironment environment) {, +		for (ApplicationContextInitializer<?> initializer : this.initializers) {, +			if (initializer instanceof SpringApplicationInitializer, +					&& initializer instanceof EnvironmentAware) {, +				((EnvironmentAware) initializer).setEnvironment(environment);, +				((SpringApplicationInitializer) initializer).initialize(this);, +	 * Set default command line arguments which will be used in addition to those, +	 * specified to the {@code run} methods. Default arguments can always be overridden by, +	 * user defined arguments.., +	 * Sets the underlying environment that should be used with the created application, +	 * context., +	 * Returns a mutable set of the sources that will be used to create an, +	 * ApplicationContext when {@link #run(String...)} is called., +	 * @return the sources the application sources., +	 * @see #SpringApplication(Object...), +	 * Can also be set using constructors and static convenience methods (e.g., +	 * @see #SpringApplication(Object...), +		Assert.notNull(sources, "Sources must not be null");, +		this.sources = new LinkedHashSet<Object>(sources);, +	 * A basic main that can be used to launch an application. This method is useful when, +	 * application sources are defined via a {@literal --spring.main.sources} command line, +	 * argument., +	 * <p>, +	 * Most developers will want to define their own main method can call the, +	 * {@link #run(Object, String...) run} method instead., +	 * @param args command line arguments]