[+++ b/spring-package-maven-plugin/src/it/jar/pom.xml, +			<plugin>, +				<groupId>org.apache.maven.plugins</groupId>, +				<artifactId>maven-jar-plugin</artifactId>, +				<version>2.4</version>, +				<configuration>, +					<archive>, +						<manifestEntries>, +							<Main-Class>some.random.Main</Main-Class>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +				</configuration>, +			</plugin>, +++ b/spring-package-maven-plugin/src/it/jar/pom.xml, +			<plugin>, +				<groupId>org.apache.maven.plugins</groupId>, +				<artifactId>maven-jar-plugin</artifactId>, +				<version>2.4</version>, +				<configuration>, +					<archive>, +						<manifestEntries>, +							<Main-Class>some.random.Main</Main-Class>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +				</configuration>, +			</plugin>, +++ b/spring-package-maven-plugin/src/it/jar/verify.groovy, +	new File( basedir, "target/jar-0.0.1.BUILD-SNAPSHOT.jar" ), "some.random.Main", +++ b/spring-package-maven-plugin/src/it/jar/pom.xml, +			<plugin>, +				<groupId>org.apache.maven.plugins</groupId>, +				<artifactId>maven-jar-plugin</artifactId>, +				<version>2.4</version>, +				<configuration>, +					<archive>, +						<manifestEntries>, +							<Main-Class>some.random.Main</Main-Class>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +				</configuration>, +			</plugin>, +++ b/spring-package-maven-plugin/src/it/jar/verify.groovy, +	new File( basedir, "target/jar-0.0.1.BUILD-SNAPSHOT.jar" ), "some.random.Main", +++ b/spring-package-maven-plugin/src/it/war/pom.xml, +					<archive>, +						<manifestEntries>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +++ b/spring-package-maven-plugin/src/it/jar/pom.xml, +			<plugin>, +				<groupId>org.apache.maven.plugins</groupId>, +				<artifactId>maven-jar-plugin</artifactId>, +				<version>2.4</version>, +				<configuration>, +					<archive>, +						<manifestEntries>, +							<Main-Class>some.random.Main</Main-Class>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +				</configuration>, +			</plugin>, +++ b/spring-package-maven-plugin/src/it/jar/verify.groovy, +	new File( basedir, "target/jar-0.0.1.BUILD-SNAPSHOT.jar" ), "some.random.Main", +++ b/spring-package-maven-plugin/src/it/war/pom.xml, +					<archive>, +						<manifestEntries>, +							<Not-Used>Foo</Not-Used>, +						</manifestEntries>, +					</archive>, +++ b/spring-package-maven-plugin/src/main/java/org/springframework/maven/packaging/ExecutableArchiveMojo.java, +import java.util.jar.Attributes;, +import java.util.jar.Attributes.Name;, +import org.codehaus.plexus.archiver.jar.Manifest;, + * @author Dave Syer, +			Manifest manifest = copyContent(archiver, getProject().getArtifact(), +					.getFile());, +			customizeArchiveConfiguration(manifest);, +	private Manifest copyContent(MavenArchiver archiver, File file) throws IOException {, +		Manifest manifest = new Manifest();, +			if (!entry.isDirectory()) {, +				getLog().debug("Copying resource: " + entry.getName());, +				if (!entry.getName().toUpperCase().equals("META-INF/MANIFEST.MF")) {, +				else {, +					getLog().info("Found existing manifest");, +					manifest = new Manifest(zipResource.getContents());, +			}, +		}, +, +		return manifest;, +	private void customizeArchiveConfiguration(Manifest manifest), +			throws MojoExecutionException {, +, +		Attributes attributes = manifest.getMainAttributes();, +		for (Object name : attributes.keySet()) {, +			String value = attributes.getValue((Name) name);]