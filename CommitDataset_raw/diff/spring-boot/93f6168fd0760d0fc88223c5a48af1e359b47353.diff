[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +	private boolean isWithin(JavaVersion runningVersion, Range range,, +			JavaVersion version) {, +			return runningVersion.isEqualOrNewerThan(version);, +		if (range == Range.OLDER_THAN) {, +			return runningVersion.isOlderThan(version);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +	private boolean isWithin(JavaVersion runningVersion, Range range,, +			JavaVersion version) {, +			return runningVersion.isEqualOrNewerThan(version);, +		if (range == Range.OLDER_THAN) {, +			return runningVersion.isOlderThan(version);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +		Class<?> javaVersionClass = classLoader.loadClass(JavaVersion.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +	private boolean isWithin(JavaVersion runningVersion, Range range,, +			JavaVersion version) {, +			return runningVersion.isEqualOrNewerThan(version);, +		if (range == Range.OLDER_THAN) {, +			return runningVersion.isOlderThan(version);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +		Class<?> javaVersionClass = classLoader.loadClass(JavaVersion.class.getName());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/Assume.java, +		JavaVersion current = JavaVersion.getJavaVersion();, +		org.junit.Assume.assumeTrue(, +				String.format("This test should run on %s (got %s)", version, current),, +				current.isOlderThan(version));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +	private boolean isWithin(JavaVersion runningVersion, Range range,, +			JavaVersion version) {, +			return runningVersion.isEqualOrNewerThan(version);, +		if (range == Range.OLDER_THAN) {, +			return runningVersion.isOlderThan(version);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +		Class<?> javaVersionClass = classLoader.loadClass(JavaVersion.class.getName());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/Assume.java, +		JavaVersion current = JavaVersion.getJavaVersion();, +		org.junit.Assume.assumeTrue(, +				String.format("This test should run on %s (got %s)", version, current),, +				current.isOlderThan(version));, +++ b/spring-boot/src/main/java/org/springframework/boot/system/JavaVersion.java, +	/**, +	 * Return if this version is equal to or newer than a given version., +	 * @param version the version to compare, +	 * @return {@code true} if this version is equal to or newer than {@code version}, +	 */, +	public boolean isEqualOrNewerThan(JavaVersion version) {, +		return compareTo(version) >= 0;, +	}, +, +	/**, +	 * Return if this version is older than a given version., +	 * @param version the version to compare, +	 * @return {@code true} if this version is older than {@code version}, +	 */, +	public boolean isOlderThan(JavaVersion version) {, +		return compareTo(version) < 0;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +	private boolean isWithin(JavaVersion runningVersion, Range range,, +			JavaVersion version) {, +			return runningVersion.isEqualOrNewerThan(version);, +		if (range == Range.OLDER_THAN) {, +			return runningVersion.isOlderThan(version);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +		Class<?> javaVersionClass = classLoader.loadClass(JavaVersion.class.getName());, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/Assume.java, +		JavaVersion current = JavaVersion.getJavaVersion();, +		org.junit.Assume.assumeTrue(, +				String.format("This test should run on %s (got %s)", version, current),, +				current.isOlderThan(version));, +++ b/spring-boot/src/main/java/org/springframework/boot/system/JavaVersion.java, +	/**, +	 * Return if this version is equal to or newer than a given version., +	 * @param version the version to compare, +	 * @return {@code true} if this version is equal to or newer than {@code version}, +	 */, +	public boolean isEqualOrNewerThan(JavaVersion version) {, +		return compareTo(version) >= 0;, +	}, +, +	/**, +	 * Return if this version is older than a given version., +	 * @param version the version to compare, +	 * @return {@code true} if this version is older than {@code version}, +	 */, +	public boolean isOlderThan(JavaVersion version) {, +		return compareTo(version) < 0;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/system/JavaVersionTests.java, +	public void getJavaVersionShouldBeAvailable() {, +	public void compareToWhenComparingSmallerToGreaterShouldBeLessThanZero() {, +	public void compareToWhenComparingGreaterToSmallerShouldBeGreaterThanZero() {, +	public void compareToWhenComparingSameShouldBeZero() {, +	@Test, +	public void isEqualOrNewerThanWhenComparingSameShouldBeTrue() throws Exception {, +		assertThat(JavaVersion.EIGHT.isEqualOrNewerThan(JavaVersion.EIGHT)).isTrue();, +	}]