[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java, + * Class that can be used to manage the pushing of metrics to a {@link PushGateway, +			String message = "Unable to locate prometheus push gateway host", +					+ (StringUtils.hasLength(host) ? " '" + host + "'" : ""), +					+ ". No longer attempting metrics publication to this host";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java, + * Class that can be used to manage the pushing of metrics to a {@link PushGateway, +			String message = "Unable to locate prometheus push gateway host", +					+ (StringUtils.hasLength(host) ? " '" + host + "'" : ""), +					+ ". No longer attempting metrics publication to this host";, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +					return getOutcome(candidates, this.beanClassLoader);, +							this.beanClassLoader);, +		private ConditionOutcome getOutcome(String className, ClassLoader classLoader) {, +			if (ClassNameFilter.MISSING.matches(className, classLoader)) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java, + * Class that can be used to manage the pushing of metrics to a {@link PushGateway, +			String message = "Unable to locate prometheus push gateway host", +					+ (StringUtils.hasLength(host) ? " '" + host + "'" : ""), +					+ ". No longer attempting metrics publication to this host";, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +					return getOutcome(candidates, this.beanClassLoader);, +							this.beanClassLoader);, +		private ConditionOutcome getOutcome(String className, ClassLoader classLoader) {, +			if (ClassNameFilter.MISSING.matches(className, classLoader)) {, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +				<groupId>io.prometheus</groupId>, +				<artifactId>simpleclient_pushgateway</artifactId>, +				<version>${prometheus-pushgateway.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java, + * Class that can be used to manage the pushing of metrics to a {@link PushGateway, +			String message = "Unable to locate prometheus push gateway host", +					+ (StringUtils.hasLength(host) ? " '" + host + "'" : ""), +					+ ". No longer attempting metrics publication to this host";, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +					return getOutcome(candidates, this.beanClassLoader);, +							this.beanClassLoader);, +		private ConditionOutcome getOutcome(String className, ClassLoader classLoader) {, +			if (ClassNameFilter.MISSING.matches(className, classLoader)) {, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +				<groupId>io.prometheus</groupId>, +				<artifactId>simpleclient_pushgateway</artifactId>, +				<version>${prometheus-pushgateway.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +the application uses. It is also possible to use separate `CacheManager` instances. For details, refer, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ServiceLevelAgreementBoundary.java, + * A service level agreement boundary for use when configuring Micrometer. Can be, +	 * Return a new {@link ServiceLevelAgreementBoundary} instance for the given String, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +			return (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +	private final Pushgateway pushgateway = new Pushgateway();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java]