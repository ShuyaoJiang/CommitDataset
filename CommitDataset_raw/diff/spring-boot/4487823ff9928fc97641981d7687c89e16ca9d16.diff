[+++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +, +import java.util.List;, +	private final Object monitor = new Object();, +	private final Map<String, String> names = new ConcurrentHashMap<String, String>();, +	private final MetricRegistry registry;, +, +		String name = this.names.get(metricName);, +		if (name == null) {, +		com.codahale.metrics.Metric metric = this.registry.getMetrics().get(name);, +		if (metric == null) {, +			return null;, +		}, +				Set<Metric<?>> metrics = new HashSet<Metric<?>>();, +				for (String name : MetricRegistryMetricReader.this.names.keySet()) {, +					Metric<?> metric = findOne(name);, +					if (metric != null) {, +						metrics.add(metric);, +					}, +				}, +				return metrics.iterator();, +		synchronized (this.monitor) {, +	}, +		synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +	}, +		List<String> keys;, +, +		synchronized (this.monitor) {, +			keys = this.reverse.remove(name);, +		}, +, +		for (String key : keys) {, +		Set<String> result = NUMBER_KEYS.get(metric.getClass());, +		if (result == null) {, +			result = new HashSet<String>();, +		}, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +, +import java.util.List;, +	private final Object monitor = new Object();, +	private final Map<String, String> names = new ConcurrentHashMap<String, String>();, +	private final MetricRegistry registry;, +, +		String name = this.names.get(metricName);, +		if (name == null) {, +		com.codahale.metrics.Metric metric = this.registry.getMetrics().get(name);, +		if (metric == null) {, +			return null;, +		}, +				Set<Metric<?>> metrics = new HashSet<Metric<?>>();, +				for (String name : MetricRegistryMetricReader.this.names.keySet()) {, +					Metric<?> metric = findOne(name);, +					if (metric != null) {, +						metrics.add(metric);, +					}, +				}, +				return metrics.iterator();, +		synchronized (this.monitor) {, +	}, +		synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +	}, +			synchronized (this.monitor) {, +		}, +			synchronized (this.monitor) {, +	}, +		List<String> keys;, +, +		synchronized (this.monitor) {, +			keys = this.reverse.remove(name);, +		}]