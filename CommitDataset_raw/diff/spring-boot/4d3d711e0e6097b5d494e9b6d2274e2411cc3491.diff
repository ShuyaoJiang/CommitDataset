[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();, +		this.contextRunner.withUserConfiguration(FooConfiguration.class,, +				OnBeanNameConfiguration.class).run((context) -> {, +					assertThat(context).doesNotHaveBean("bar");, +					assertThat(context.getBean("foo")).isEqualTo("foo");, +				});, +		this.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class,, +				FooConfiguration.class).run((context) -> {, +					// Ideally this would be doesNotHaveBean, but the ordering is a, +					// problem, +					assertThat(context).hasBean("bar");, +					assertThat(context.getBean("foo")).isEqualTo("foo");, +				});, +		// Arguably this should be hasBean, but as things are implemented the conditions, +		this.contextRunner, +				.withUserConfiguration(FooConfiguration.class,, +						OnBeanNameAndTypeConfiguration.class), +				.run((context) -> assertThat(context).doesNotHaveBean("bar"));, +		this.contextRunner.withUserConfiguration(FooConfiguration.class), +				.run((parent) -> new ApplicationContextRunner().withParent(parent), +						.withUserConfiguration(HierarchyConsidered.class), +						.run((context) -> assertThat(context.containsLocalBean("bar")), +								.isFalse()));, +		this.contextRunner.withUserConfiguration(FooConfiguration.class), +				.run((parent) -> new ApplicationContextRunner().withParent(parent), +						.withUserConfiguration(HierarchyNotConsidered.class), +						.run((context) -> assertThat(context.containsLocalBean("bar")), +								.isTrue()));, +		this.contextRunner, +				.withUserConfiguration(ExampleBeanConfiguration.class,, +						ImpliedOnBeanMethod.class), +				.run((context) -> assertThat(context).hasSingleBean(ExampleBean.class));, +		this.contextRunner.withUserConfiguration(FooConfiguration.class,, +				OnAnnotationConfiguration.class).run((context) -> {, +					assertThat(context).doesNotHaveBean("bar");, +					assertThat(context.getBean("foo")).isEqualTo("foo");, +				});, +		// Rigorous test for SPR-11069, +		this.contextRunner.withUserConfiguration(FooConfiguration.class,, +				OnAnnotationConfiguration.class, FactoryBeanXmlConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class).run((context) -> {, +					assertThat(context).doesNotHaveBean("bar");, +					assertThat(context).hasBean("example");, +					assertThat(context.getBean("foo")).isEqualTo("foo");, +				});, +		this.contextRunner, +				.withUserConfiguration(FactoryBeanConfiguration.class,, +						ConditionalOnFactoryBean.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner, +				.withUserConfiguration(, +						ComponentScannedFactoryBeanBeanMethodConfiguration.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner.withUserConfiguration(, +				ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner, +				.withUserConfiguration(, +						FactoryBeanWithBeanMethodArgumentsConfiguration.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.withPropertyValues("theValue=foo"), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner, +				.withUserConfiguration(ConcreteFactoryBeanConfiguration.class,, +						ConditionalOnFactoryBean.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner, +				.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class,, +						ConditionalOnFactoryBean.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(context).getBeans(ExampleBean.class), +						.hasSize(2));, +		this.contextRunner, +				.withUserConfiguration(RegisteredFactoryBeanConfiguration.class,, +						ConditionalOnFactoryBean.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(, +						context.getBean(ExampleBean.class).toString()), +								.isEqualTo("fromFactory"));, +		this.contextRunner, +				.withUserConfiguration(, +						NonspecificFactoryBeanClassAttributeConfiguration.class,, +						PropertyPlaceholderAutoConfiguration.class), +				.run((context) -> assertThat(]