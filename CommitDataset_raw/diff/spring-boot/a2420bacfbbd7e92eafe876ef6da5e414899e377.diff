[+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java, + * Copyright 2012-2016 the original author or authors., +			ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java, + * Copyright 2012-2016 the original author or authors., +			ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebFilterHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java, + * Copyright 2012-2016 the original author or authors., +			ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebFilterHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebListenerHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	protected void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java, + * Copyright 2012-2016 the original author or authors., +			ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebFilterHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebListenerHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	protected void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebServletHandler.java, +import javax.servlet.MultipartConfigElement;, +import javax.servlet.annotation.MultipartConfig;, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +		builder.addPropertyValue("multipartConfig",, +				determineMultipartConfig(beanDefinition));, +	private MultipartConfigElement determineMultipartConfig(, +			ScannedGenericBeanDefinition beanDefinition) {, +		Map<String, Object> attributes = beanDefinition.getMetadata(), +				.getAnnotationAttributes(MultipartConfig.class.getName());, +		if (attributes == null) {, +			return null;, +		}, +		return new MultipartConfigElement((String) attributes.get("location"),, +				(long) attributes.get("maxFileSize"),, +				(long) attributes.get("maxRequestSize"),, +				(int) attributes.get("fileSizeThreshold"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentHandler.java, + * Copyright 2012-2016 the original author or authors., +			ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebFilterHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebListenerHandler.java, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	protected void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/WebServletHandler.java, +import javax.servlet.MultipartConfigElement;, +import javax.servlet.annotation.MultipartConfig;, +import org.springframework.context.annotation.ScannedGenericBeanDefinition;, +	public void doHandle(Map<String, Object> attributes,, +			ScannedGenericBeanDefinition beanDefinition,, +		builder.addPropertyValue("multipartConfig",, +				determineMultipartConfig(beanDefinition));, +	private MultipartConfigElement determineMultipartConfig(, +			ScannedGenericBeanDefinition beanDefinition) {, +		Map<String, Object> attributes = beanDefinition.getMetadata(), +				.getAnnotationAttributes(MultipartConfig.class.getName());, +		if (attributes == null) {, +			return null;, +		}, +		return new MultipartConfigElement((String) attributes.get("location"),, +				(long) attributes.get("maxFileSize"),, +				(long) attributes.get("maxRequestSize"),, +				(int) attributes.get("fileSizeThreshold"));, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/web/servlet/ServletComponentScanIntegrationTests.java, +import java.util.Map;, +, +import javax.servlet.MultipartConfigElement;, +, +import org.springframework.boot.web.servlet.testcomponents.TestMultipartServlet;, +	@Test, +	public void multipartConfigIsHonoured() {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(TestConfiguration.class);, +		new ServerPortInfoApplicationContextInitializer().initialize(this.context);, +		this.context.refresh();, +		Map<String, ServletRegistrationBean> beans = this.context, +				.getBeansOfType(ServletRegistrationBean.class);, +		ServletRegistrationBean servletRegistrationBean = beans]