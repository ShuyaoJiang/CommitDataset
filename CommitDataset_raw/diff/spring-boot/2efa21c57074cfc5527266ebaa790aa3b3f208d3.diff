[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebDriverContextCustomizerFactory.java, +			if (obj == null || obj.getClass() != getClass()) {, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebDriverContextCustomizerFactory.java, +			if (obj == null || obj.getClass() != getClass()) {, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/WebTestClientContextCustomizer.java, +		return (obj != null && obj.getClass() == getClass());, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebDriverContextCustomizerFactory.java, +			if (obj == null || obj.getClass() != getClass()) {, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/WebTestClientContextCustomizer.java, +		return (obj != null && obj.getClass() == getClass());, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		if (obj.getClass() == AsciiBytes.class) {, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebDriverContextCustomizerFactory.java, +			if (obj == null || obj.getClass() != getClass()) {, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/WebTestClientContextCustomizer.java, +		return (obj != null && obj.getClass() == getClass());, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		if (obj.getClass() == AsciiBytes.class) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +		if (obj == null || obj.getClass() != getClass()) {, +		return charAt(element, 0) == '[' && charAt(element, length - 1) == ']';, +	}, +, +	private static char charAt(CharSequence element, int index) {, +		return (index < element.length() ? element.charAt(index) : 0);, +		List<CharSequence> elements = new ArrayList<>();, +			for (int i = 0; i < elementValue.length(); i++) {, +				char ch = elementValue.charAt(i);, +				if (!isValidChar(ch, i)) {, +					return false;, +				}, +			}, +			return true;, +		public static List<Character> getInvalidChars(CharSequence elementValue) {, +			return isAlpha(ch) || (index != 0 && (isNumeric(ch) || ch == '-'));, +, +		private static boolean isAlpha(char ch) {, +			return ch >= 'a' && ch <= 'z';, +		}, +, +		private static boolean isNumeric(char ch) {, +			return ch >= '0' && ch <= '9';]