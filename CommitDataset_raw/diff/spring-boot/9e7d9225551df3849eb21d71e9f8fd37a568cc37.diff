[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * with a subsequent request. When set to -1 the cache will be unlimited with a, +		 * theoretical maximum size equal to the maximum number of connections., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * with a subsequent request. When set to -1 the cache will be unlimited with a, +		 * theoretical maximum size equal to the maximum number of connections., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(tomcatProperties::getProcessorCache), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * with a subsequent request. When set to -1 the cache will be unlimited with a, +		 * theoretical maximum size equal to the maximum number of connections., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(tomcatProperties::getProcessorCache), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java, +		customizeAndRunServer((server) -> assertThat(((AbstractProtocol<?>) server, +				.getTomcat().getConnector().getProtocolHandler()).getProcessorCache()), +						.isEqualTo(100));, +	}, +, +	@Test, +	public void unlimitedProcessorCache() {, +		bind("server.tomcat.processor-cache=-1");, +		customizeAndRunServer((server) -> assertThat(((AbstractProtocol<?>) server, +				.getTomcat().getConnector().getProtocolHandler()).getProcessorCache()), +						.isEqualTo(-1));]