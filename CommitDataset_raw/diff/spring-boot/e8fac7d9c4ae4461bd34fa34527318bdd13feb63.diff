[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ServletEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ServletEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;, +import org.springframework.validation.annotation.Validated;, +	public void getEndpointsShouldDiscoverProxyControllerEndpoints() {, +		this.contextRunner.withUserConfiguration(TestProxyControllerEndpoint.class), +				.withConfiguration(AutoConfigurations.of(, +						ValidationAutoConfiguration.class)), +				.run(assertDiscoverer((discoverer) -> {, +					Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();, +					assertThat(endpoints).hasSize(1);, +					ExposableControllerEndpoint endpoint = endpoints.iterator().next();, +					assertThat(endpoint.getId()).isEqualTo("testcontroller");, +					assertThat(endpoint.getController()), +							.isInstanceOf(TestProxyControllerEndpoint.class);, +					assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);, +				}));, +	}, +, +	@Test, +	public void getEndpointsShouldDiscoverProxyRestControllerEndpoints() {, +		this.contextRunner.withUserConfiguration(TestProxyRestControllerEndpoint.class), +				.withConfiguration(AutoConfigurations.of(, +						ValidationAutoConfiguration.class)), +				.run(assertDiscoverer((discoverer) -> {, +					Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();, +					assertThat(endpoints).hasSize(1);, +					ExposableControllerEndpoint endpoint = endpoints.iterator().next();, +					assertThat(endpoint.getId()).isEqualTo("testrestcontroller");, +					assertThat(endpoint.getController()), +							.isInstanceOf(TestProxyRestControllerEndpoint.class);, +					assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);, +				}));, +	}, +, +	@Test, +	@ControllerEndpoint(id = "testcontroller"), +	@Validated, +	static class TestProxyControllerEndpoint {, +, +	}, +, +	@RestControllerEndpoint(id = "testrestcontroller"), +	@Validated, +	static class TestProxyRestControllerEndpoint {, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ServletEndpointDiscoverer.java, +import org.springframework.util.ClassUtils;, +		Class<?> type = ClassUtils.getUserClass(endpointBean.getClass());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointDiscovererTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;, +import org.springframework.validation.annotation.Validated;, +	public void getEndpointsShouldDiscoverProxyControllerEndpoints() {, +		this.contextRunner.withUserConfiguration(TestProxyControllerEndpoint.class), +				.withConfiguration(AutoConfigurations.of(, +						ValidationAutoConfiguration.class)), +				.run(assertDiscoverer((discoverer) -> {, +					Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();, +					assertThat(endpoints).hasSize(1);, +					ExposableControllerEndpoint endpoint = endpoints.iterator().next();, +					assertThat(endpoint.getId()).isEqualTo("testcontroller");, +					assertThat(endpoint.getController()), +							.isInstanceOf(TestProxyControllerEndpoint.class);, +					assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class);, +				}));, +	}, +, +	@Test, +	public void getEndpointsShouldDiscoverProxyRestControllerEndpoints() {, +		this.contextRunner.withUserConfiguration(TestProxyRestControllerEndpoint.class), +				.withConfiguration(AutoConfigurations.of(, +						ValidationAutoConfiguration.class)), +				.run(assertDiscoverer((discoverer) -> {, +					Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints();, +					assertThat(endpoints).hasSize(1);, +					ExposableControllerEndpoint endpoint = endpoints.iterator().next();, +					assertThat(endpoint.getId()).isEqualTo("testrestcontroller");, +					assertThat(endpoint.getController()), +							.isInstanceOf(TestProxyRestControllerEndpoint.class);]