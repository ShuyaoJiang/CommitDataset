[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.security.reactive;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Objects;, +import java.util.Set;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.EndpointPathProvider;, +import org.springframework.boot.actuate.endpoint.annotation.Endpoint;, +import org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher;, +import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;, +import org.springframework.util.Assert;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Factory that can be used to create a {@link ServerWebExchangeMatcher} for actuator endpoint, + * locations., + *, + * @author Madhura Bhave, + * @since 2.0.0, + */, +public final class EndpointRequest {, +, +	private EndpointRequest() {, +	}, +, +	/**, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointServerWebExchangeMatcher#excluding(Class...) excluding} method can be used to, +	 * further remove specific endpoints if required. For example: <pre class="code">, +	 * EndpointServerWebExchangeMatcher.toAnyEndpoint().excluding(ShutdownEndpoint.class), +	 * </pre>, +	 * @return the configured {@link ServerWebExchangeMatcher}, +	 */, +	public static EndpointServerWebExchangeMatcher toAnyEndpoint() {, +		return new EndpointServerWebExchangeMatcher();, +	}, +, +	/**, +	 * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}., +	 * For example: <pre class="code">, +	 * EndpointRequest.to(ShutdownEndpoint.class, HealthEndpoint.class), +	 * </pre>, +	 * @param endpoints the endpoints to include, +	 * @return the configured {@link ServerWebExchangeMatcher}, +	 */, +	public static EndpointServerWebExchangeMatcher to(Class<?>... endpoints) {, +		return new EndpointServerWebExchangeMatcher(endpoints);, +	}, +, +	/**, +	 * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}., +	 * For example: <pre class="code">, +	 * EndpointRequest.to("shutdown", "health"), +	 * </pre>, +	 * @param endpoints the endpoints to include, +	 * @return the configured {@link ServerWebExchangeMatcher}, +	 */, +	public static EndpointServerWebExchangeMatcher to(String... endpoints) {, +		return new EndpointServerWebExchangeMatcher(endpoints);, +	}, +, +	/**, +	 * The {@link ServerWebExchangeMatcher} used to match against {@link Endpoint actuator endpoints}., +	 */, +	public final static class EndpointServerWebExchangeMatcher, +			extends ApplicationContextServerWebExchangeMatcher<EndpointPathProvider> {, +, +		private final List<Object> includes;, +, +		private final List<Object> excludes;]