[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		Class<?> resolvedType = target.getType().resolve(Object.class);, +		Class<?> type = target.getType().resolve(Object.class);, +		Class<?> resolved = target.getType().resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		Class<?> resolvedType = target.getType().resolve(Object.class);, +		Class<?> type = target.getType().resolve(Object.class);, +		Class<?> resolved = target.getType().resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Class<?> collectionType = (target.getValue() == null ? target.getType().resolve(Object.class), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		Class<?> resolvedType = target.getType().resolve(Object.class);, +		Class<?> type = target.getType().resolve(Object.class);, +		Class<?> resolved = target.getType().resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Class<?> collectionType = (target.getValue() == null ? target.getType().resolve(Object.class), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +			resolvedGenerics[i] = forClassWithGenerics(generics[i].resolve(Object.class),, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		Class<?> resolvedType = target.getType().resolve(Object.class);, +		Class<?> type = target.getType().resolve(Object.class);, +		Class<?> resolved = target.getType().resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Class<?> collectionType = (target.getValue() == null ? target.getType().resolve(Object.class), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +			resolvedGenerics[i] = forClassWithGenerics(generics[i].resolve(Object.class),, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +				(target.getValue() == null ? target.getType().resolve(Object.class) : Map.class), 0);, +		Class<?> type = target.getType().resolve(Object.class);, +			Class<?> resolved = this.valueType.resolve(Object.class);, +			Class<?> resolved = this.valueType.resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		Class<?> resolvedType = target.getType().resolve(Object.class);, +		Class<?> type = target.getType().resolve(Object.class);, +		Class<?> resolved = target.getType().resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Class<?> collectionType = (target.getValue() == null ? target.getType().resolve(Object.class), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +			resolvedGenerics[i] = forClassWithGenerics(generics[i].resolve(Object.class),, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +				(target.getValue() == null ? target.getType().resolve(Object.class) : Map.class), 0);, +		Class<?> type = target.getType().resolve(Object.class);, +			Class<?> resolved = this.valueType.resolve(Object.class);, +			Class<?> resolved = this.valueType.resolve(Object.class);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +	@Test, +	public void bindToBeanWithUnresolvableGenerics() {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.bar", "hello");, +		this.sources.add(source);, +		Bindable<GenericBean> target = Bindable.of(GenericBean.class);, +		this.binder.bind("foo", target);, +	}, +, +	public static class GenericBean<T> {, +, +		private T bar;, +, +, +		public T getBar() {, +			return this.bar;, +		}, +, +		public void setBar(T bar) {, +			this.bar = bar;, +		}, +	}, +]