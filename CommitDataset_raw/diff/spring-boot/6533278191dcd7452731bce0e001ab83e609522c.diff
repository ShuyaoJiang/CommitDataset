[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +Boot. A `SpringApplication` changes its `ApplicationContext` class, depending on whether, +it thinks it needs a web application or not. The first thing you can do to help it is to, +leave server-related dependencies (e.g. servlet API) off the classpath. If you cannot do, +that (for example, you run two applications from the same code base) then you can, +explicitly call `setWebApplicationType(WebApplicationType.NONE)` on your, +`SpringApplication` instance or set the `applicationContextClass` property (through the, +Java API or with external properties). Application code that you want to run as your, +business logic can be implemented as a `CommandLineRunner` and dropped into the context as, +a `@Bean` definition., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +Boot. A `SpringApplication` changes its `ApplicationContext` class, depending on whether, +it thinks it needs a web application or not. The first thing you can do to help it is to, +leave server-related dependencies (e.g. servlet API) off the classpath. If you cannot do, +that (for example, you run two applications from the same code base) then you can, +explicitly call `setWebApplicationType(WebApplicationType.NONE)` on your, +`SpringApplication` instance or set the `applicationContextClass` property (through the, +Java API or with external properties). Application code that you want to run as your, +business logic can be implemented as a `CommandLineRunner` and dropped into the context as, +a `@Bean` definition., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +behalf. The algorithm used to determine a `WebEnvironmentType` is fairly simple:, +* If Spring MVC is present, an `AnnotationConfigServletWebServerApplicationContext` is, +used, +* If Spring MVC is not present and Spring WebFlux is present, an, +`AnnotationConfigReactiveWebApplicationContext` is used, +* Otherwise, `AnnotationConfigApplicationContext` is used, +, +This means that if you are using Spring MVC and the new `WebClient` from Spring WebFlux in, +the same application, Spring MVC will be used by default. You can override that easily, +by calling `setWebApplicationType(WebApplicationType)`., +TIP: It is often desirable to call `setWebApplicationType(WebApplicationType.NONE)` when, +using `SpringApplication` within a JUnit test.]