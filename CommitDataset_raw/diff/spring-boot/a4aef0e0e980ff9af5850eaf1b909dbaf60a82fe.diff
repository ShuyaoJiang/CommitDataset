[+++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementAutoConfiguration.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementAutoConfiguration.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/OnManagementContextCondition.java, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementAutoConfiguration.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/OnManagementContextCondition.java, +++ b/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java, +				this.logger.fine("Adding: " + jarEntry.getName());, +		this.logger.fine("Added " + lib.size() + " entries");, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementAutoConfiguration.java, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/OnManagementContextCondition.java, +++ b/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java, +				this.logger.fine("Adding: " + jarEntry.getName());, +		this.logger.fine("Added " + lib.size() + " entries");, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.io.IOException;, +import java.net.JarURLConnection;, +import java.net.URL;, +import java.net.URLConnection;, +import java.security.CodeSource;, +	private static final String[] COMMON_DOC_ROOTS = { "src/main/webapp", "public",, +			"static" };, +, +	 * @return the JSP servlet class name, +, +		// User specified, +		if (getDocumentRoot() != null) {, +			return getDocumentRoot();, +		}, +, +		// Packaged as a WAR file, +		File warFile = getCodeSourceArchive();, +		if (warFile.exists() && !warFile.isDirectory(), +				&& warFile.getName().toLowerCase().endsWith(".war")) {, +			return warFile.getAbsoluteFile();, +		}, +, +		// Common DocRoots, +		for (String commonDocRoot : COMMON_DOC_ROOTS) {, +			File root = new File(commonDocRoot);, +, +			this.logger.warn("None of the document roots ", +					+ Arrays.asList(COMMON_DOC_ROOTS), +	private File getCodeSourceArchive() {, +		try {, +			CodeSource codeSource = getClass().getProtectionDomain().getCodeSource();, +			URL location = (codeSource == null ? null : codeSource.getLocation());, +			if (location == null) {, +				return null;, +			}, +			String path = location.getPath();, +			URLConnection connection = location.openConnection();, +			if (connection instanceof JarURLConnection) {, +				path = ((JarURLConnection) connection).getJarFile().getName();, +			}, +			if (path.indexOf("!/") != -1) {, +				path = path.substring(0, path.indexOf("!/"));, +			}, +			return new File(path);, +		} catch (IOException e) {, +			return null;, +		}, +	}, +]