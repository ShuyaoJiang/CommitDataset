[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +		@Autowired, +		private Executor executor;, +		@ConditionalOnMissingBean(name = "metricsExecutor"), +		protected Executor metricsExecutor() {, +			ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();, +			return executor;, +		}, +, +		@Bean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +		@Autowired, +		private Executor executor;, +		@ConditionalOnMissingBean(name = "metricsExecutor"), +		protected Executor metricsExecutor() {, +			ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();, +			return executor;, +		}, +, +		@Bean, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import org.springframework.messaging.support.ExecutorSubscribableChannel;, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +import static org.junit.Assert.assertTrue;, +	public void defaultExecutor() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				MetricRepositoryAutoConfiguration.class);, +		ExecutorSubscribableChannel channel = context, +				.getBean(ExecutorSubscribableChannel.class);, +		ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) channel.getExecutor();, +		context.close();, +		assertTrue(executor.getThreadPoolExecutor().isShutdown());, +	}, +, +	@Test]