[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;, +	private static final ServerWebExchangeMatcher EMPTY_MATCHER = (request) -> MatchResult, +			.notMatch();, +, +			this.delegate = createDelegate(pathMappedEndpoints);, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +			try {, +				return createDelegate(pathMappedEndpoints.get());, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return EMPTY_MATCHER;, +			}, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				PathMappedEndpoints pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.getAllPaths());, +			return new OrServerWebExchangeMatcher(getDelegateMatchers(paths));, +				PathMappedEndpoints pathMappedEndpoints) {, +					.map(pathMappedEndpoints::getPath);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;, +	private static final ServerWebExchangeMatcher EMPTY_MATCHER = (request) -> MatchResult, +			.notMatch();, +, +			this.delegate = createDelegate(pathMappedEndpoints);, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +			try {, +				return createDelegate(pathMappedEndpoints.get());, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return EMPTY_MATCHER;, +			}, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				PathMappedEndpoints pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.getAllPaths());, +			return new OrServerWebExchangeMatcher(getDelegateMatchers(paths));, +				PathMappedEndpoints pathMappedEndpoints) {, +					.map(pathMappedEndpoints::getPath);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +	private static final RequestMatcher EMPTY_MATCHER = (request) -> false;, +, +			this.delegate = createDelegate(pathMappedEndpoints);, +		}, +, +		private RequestMatcher createDelegate(, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +			try {, +				return createDelegate(pathMappedEndpoints.get());, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return EMPTY_MATCHER;, +			}, +		}, +, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.getAllPaths());, +			streamPaths(this.includes, pathMappedEndpoints).forEach(paths::add);, +			streamPaths(this.excludes, pathMappedEndpoints).forEach(paths::remove);, +			return new OrRequestMatcher(getDelegateMatchers(paths));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;, +	private static final ServerWebExchangeMatcher EMPTY_MATCHER = (request) -> MatchResult, +			.notMatch();, +, +			this.delegate = createDelegate(pathMappedEndpoints);, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +			try {, +				return createDelegate(pathMappedEndpoints.get());, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				return EMPTY_MATCHER;, +			}, +		}, +, +		private ServerWebExchangeMatcher createDelegate(, +				PathMappedEndpoints pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.getAllPaths());, +			return new OrServerWebExchangeMatcher(getDelegateMatchers(paths));, +				PathMappedEndpoints pathMappedEndpoints) {, +					.map(pathMappedEndpoints::getPath);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +	private static final RequestMatcher EMPTY_MATCHER = (request) -> false;]