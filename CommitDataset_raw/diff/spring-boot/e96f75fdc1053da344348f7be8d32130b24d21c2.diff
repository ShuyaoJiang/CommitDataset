[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;, +	/*, +	 * The error controller is present but not mapped as an endpoint in this context, +	 * because of the DispatcherServlet having had it's HandlerMapping explicitly, +	 * disabled. So we expose the same feature but only for machine endpoints., +	 */, +	@Bean, +	public ManagementErrorEndpoint errorEndpoint(final ErrorAttributes errorAttributes) {, +		return new ManagementErrorEndpoint(this.errorPath, errorAttributes);, +	}, +, +	@Configuration, +	@ConditionalOnMissingClass(WebSecurityConfigurerAdapter.class), +	static class EndpointHandlerMappingSimpleConfiguration {, +, +		@Autowired(required = false), +		private List<EndpointHandlerMappingCustomizer> mappingCustomizers;, +, +, +			EndpointHandlerMapping mapping = doCreateEndpointHandlerMapping(endpoints, beanFactory);, +			if (this.mappingCustomizers != null) {, +				for (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {, +					customizer.customize(mapping);, +				}, +			}, +			return mapping;, +		}, +, +		protected EndpointHandlerMapping doCreateEndpointHandlerMapping(MvcEndpoints endpoints,, +				ListableBeanFactory beanFactory) {, +			return mapping;, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass(WebSecurityConfigurerAdapter.class), +	static class EndpointHandlerMappingSecurityConfiguration, +			extends EndpointHandlerMappingSimpleConfiguration {, +, +		@Override, +		protected EndpointHandlerMapping doCreateEndpointHandlerMapping(MvcEndpoints endpoints,, +				ListableBeanFactory beanFactory) {, +, +			EndpointHandlerMapping mapping = super.doCreateEndpointHandlerMapping(endpoints, beanFactory);]