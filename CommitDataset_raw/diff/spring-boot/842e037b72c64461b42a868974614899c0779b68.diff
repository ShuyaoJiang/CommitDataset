[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (resource != null) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (resource != null) {, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java, +import org.springframework.util.StringUtils;, +		if (isFile(resource)) {, +	private boolean isFile(Resource resource) {, +		return resource != null, +				&& resource.exists(), +				&& StringUtils.hasText(StringUtils.getFilenameExtension(resource, +						.getFilename()));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (resource != null) {, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java, +import org.springframework.util.StringUtils;, +		if (isFile(resource)) {, +	private boolean isFile(Resource resource) {, +		return resource != null, +				&& resource.exists(), +				&& StringUtils.hasText(StringUtils.getFilenameExtension(resource, +						.getFilename()));, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import static org.junit.Assert.assertEquals;, +		ConfigurationPropertySources propertySource = (ConfigurationPropertySources) this.environment, +				.getPropertySources().get("applicationConfigurationProperties");, +		Collection<org.springframework.core.env.PropertySource<?>> sources = propertySource, +				.getSource();, +		assertEquals(2, sources.size());, +		List<String> names = new ArrayList<String>();, +		for (org.springframework.core.env.PropertySource<?> source : sources) {, +			names.add(source.getName());, +		}, +		assertThat(, +				names,, +				contains(, +						"applicationConfig: class path resource [testsetprofiles.yml]#dev",, +						"applicationConfig: class path resource [testsetprofiles.yml]"));, +	public void yamlProfileOrdering() throws Exception {, +		this.initializer.setSearchNames("threeprofiles");, +		this.environment.setActiveProfiles("A", "C");, +		this.initializer.onApplicationEvent(this.event);, +		assertThat(this.environment.getProperty("version"), equalTo("C"));, +	}, +, +	@Test, +	public void yamlProfileOrderingReverse() throws Exception {, +		this.initializer.setSearchNames("threeprofiles");, +		this.environment.setActiveProfiles("C", "A");, +		this.initializer.onApplicationEvent(this.event);, +		assertThat(this.environment.getProperty("version"), equalTo("A"));, +	}, +, +	@Test, +	public void yamlProfileOrderingOverride() throws Exception {, +		this.initializer.setSearchNames("threeprofiles-with-override");, +		this.environment.setActiveProfiles("C", "A");, +		this.initializer.onApplicationEvent(this.event);, +		assertThat(this.environment.getProperty("version"), equalTo("B"));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			if (resource != null) {, +++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java, +import org.springframework.util.StringUtils;, +		if (isFile(resource)) {, +	private boolean isFile(Resource resource) {, +		return resource != null, +				&& resource.exists(), +				&& StringUtils.hasText(StringUtils.getFilenameExtension(resource, +						.getFilename()));, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import static org.junit.Assert.assertEquals;, +		ConfigurationPropertySources propertySource = (ConfigurationPropertySources) this.environment, +				.getPropertySources().get("applicationConfigurationProperties");, +		Collection<org.springframework.core.env.PropertySource<?>> sources = propertySource, +				.getSource();, +		assertEquals(2, sources.size());, +		List<String> names = new ArrayList<String>();, +		for (org.springframework.core.env.PropertySource<?> source : sources) {, +			names.add(source.getName());, +		}, +		assertThat(, +				names,, +				contains(, +						"applicationConfig: class path resource [testsetprofiles.yml]#dev",, +						"applicationConfig: class path resource [testsetprofiles.yml]"));]