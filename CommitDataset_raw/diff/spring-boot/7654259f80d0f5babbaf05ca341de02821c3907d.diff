[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private final String pathFromRoot;, +		this(file, "", file);, +	 * @param pathFromRoot the name of this file, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data) throws IOException {, +		this.pathFromRoot = pathFromRoot;, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data, List<JarEntryData> entries, JarEntryFilter... filters), +			throws IOException {, +		this.pathFromRoot = pathFromRoot;, +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +				+ sourceEntry.getName(), sourceEntry.getData());, +		return new JarFile(this.rootFile, this.pathFromRoot, this.data, this.entries,, +				filters);, +		String file = this.rootFile.getFile().toURI() + this.pathFromRoot + "!/";, +		String path = this.pathFromRoot;, +		return this.rootFile.getFile() + path;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private final String pathFromRoot;, +		this(file, "", file);, +	 * @param pathFromRoot the name of this file, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data) throws IOException {, +		this.pathFromRoot = pathFromRoot;, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data, List<JarEntryData> entries, JarEntryFilter... filters), +			throws IOException {, +		this.pathFromRoot = pathFromRoot;, +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +				+ sourceEntry.getName(), sourceEntry.getData());, +		return new JarFile(this.rootFile, this.pathFromRoot, this.data, this.entries,, +				filters);, +		String file = this.rootFile.getFile().toURI() + this.pathFromRoot + "!/";, +		String path = this.pathFromRoot;, +		return this.rootFile.getFile() + path;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +		assertThat(nested.getUrl().toString(), equalTo("jar:" + this.rootFolder.toURI(), +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private final String pathFromRoot;, +		this(file, "", file);, +	 * @param pathFromRoot the name of this file, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data) throws IOException {, +		this.pathFromRoot = pathFromRoot;, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data, List<JarEntryData> entries, JarEntryFilter... filters), +			throws IOException {, +		this.pathFromRoot = pathFromRoot;, +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +				+ sourceEntry.getName(), sourceEntry.getData());, +		return new JarFile(this.rootFile, this.pathFromRoot, this.data, this.entries,, +				filters);, +		String file = this.rootFile.getFile().toURI() + this.pathFromRoot + "!/";, +		String path = this.pathFromRoot;, +		return this.rootFile.getFile() + path;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +		assertThat(nested.getUrl().toString(), equalTo("jar:" + this.rootFolder.toURI(), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/JarFileArchiveTests.java, +	private String rootJarFileUrl;, +, +		this.rootJarFileUrl = rootJarFile.toURI().toString();, +		System.out.println(rootJarFileUrl);, +		assertThat(url.toString(), equalTo("jar:" + this.rootJarFileUrl, +				equalTo("jar:" + this.rootJarFileUrl + "!/nested.jar!/"));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private final String pathFromRoot;, +		this(file, "", file);, +	 * @param pathFromRoot the name of this file, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data) throws IOException {, +		this.pathFromRoot = pathFromRoot;, +	private JarFile(RandomAccessDataFile rootFile, String pathFromRoot,, +			RandomAccessData data, List<JarEntryData> entries, JarEntryFilter... filters), +			throws IOException {, +		this.pathFromRoot = pathFromRoot;, +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +		return new JarFile(this.rootFile, this.pathFromRoot + "!/", +				+ sourceEntry.getName(), sourceEntry.getData());, +		return new JarFile(this.rootFile, this.pathFromRoot, this.data, this.entries,, +				filters);, +		String file = this.rootFile.getFile().toURI() + this.pathFromRoot + "!/";, +		String path = this.pathFromRoot;, +		return this.rootFile.getFile() + path;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +		assertThat(nested.getUrl().toString(), equalTo("jar:" + this.rootFolder.toURI(), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/JarFileArchiveTests.java, +	private String rootJarFileUrl;, +, +		this.rootJarFileUrl = rootJarFile.toURI().toString();, +		System.out.println(rootJarFileUrl);, +		assertThat(url.toString(), equalTo("jar:" + this.rootJarFileUrl, +				equalTo("jar:" + this.rootJarFileUrl + "!/nested.jar!/"));, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java, +, +		assertThat(url.toString(), equalTo("jar:" + this.rootJarFile.toURI() + "!/"));, +		assertThat(jarURLConnection.getJarFileURL().toURI(),]