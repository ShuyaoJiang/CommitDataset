[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), properties.getEmbedded().generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), properties.getEmbedded().generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(), properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), properties.getEmbedded().generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(), properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.hornetq.core.remoting.impl.invm.TransportConstants;, +		private static final AtomicInteger serverIdCounter = new AtomicInteger();, +, +		private int serverId = serverIdCounter.getAndIncrement();, +, +		public int getServerId() {, +			return serverId;, +		}, +, +		public void setServerId(int serverId) {, +			this.serverId = serverId;, +		}, +, +		/**, +		 * Creates the minimal transport parameters for an embedded transport configuration., +		 * <p>Specifies the identifier of the server., +		 *, +		 * @see TransportConstants#SERVER_ID_PROP_NAME, +		 */, +		public Map<String,Object> generateTransportParameters() {, +			Map<String, Object> parameters = new HashMap<String, Object>();, +			parameters.put(TransportConstants.SERVER_ID_PROP_NAME, getServerId());, +			return parameters;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), properties.getEmbedded().generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(), properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.hornetq.core.remoting.impl.invm.TransportConstants;, +		private static final AtomicInteger serverIdCounter = new AtomicInteger();, +, +		private int serverId = serverIdCounter.getAndIncrement();, +, +		public int getServerId() {, +			return serverId;, +		}, +, +		public void setServerId(int serverId) {, +			this.serverId = serverId;, +		}, +, +		/**, +		 * Creates the minimal transport parameters for an embedded transport configuration., +		 * <p>Specifies the identifier of the server., +		 *, +		 * @see TransportConstants#SERVER_ID_PROP_NAME, +		 */, +		public Map<String,Object> generateTransportParameters() {, +			Map<String, Object> parameters = new HashMap<String, Object>();, +			parameters.put(TransportConstants.SERVER_ID_PROP_NAME, getServerId());, +			return parameters;, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfigurationTests.java, +import static org.junit.Assert.*;, +, +	@Test, +	public void severalEmbeddedBrokers() {, +		load(EmptyConfiguration.class,, +				"spring.hornetq.embedded.queues=Queue1");, +, +		AnnotationConfigApplicationContext anotherContext = doLoad(EmptyConfiguration.class,, +				"spring.hornetq.embedded.queues=Queue2");, +, +		try {, +			HornetQProperties properties = this.context.getBean(HornetQProperties.class);, +			HornetQProperties anotherProperties = anotherContext.getBean(HornetQProperties.class);, +			assertTrue("ServerId should not match",, +					properties.getEmbedded().getServerId() < anotherProperties.getEmbedded().getServerId());, +, +			DestinationChecker checker = new DestinationChecker(this.context);, +			checker.checkQueue("Queue1", true);, +			checker.checkQueue("Queue2", false);, +, +			DestinationChecker anotherChecker = new DestinationChecker(anotherContext);, +			anotherChecker.checkQueue("Queue2", true);, +			anotherChecker.checkQueue("Queue1", false);, +		}, +		finally {]