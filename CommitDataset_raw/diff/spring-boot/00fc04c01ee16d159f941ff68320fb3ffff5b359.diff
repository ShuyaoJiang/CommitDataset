[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +@Conditional(OnBeanCondition.class), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +@Conditional(OnBeanCondition.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.ConfigurationCondition;, +import org.springframework.core.style.ToStringCreator;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.core.type.MethodMetadata;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.ReflectionUtils.MethodCallback;, + * {@link Condition} that checks for the presence or absence of specific beans., + * @author Dave Syer, +class OnBeanCondition implements ConfigurationCondition {, +, +	private static final String[] NO_BEANS = {};, +, +	private final Log logger = LogFactory.getLog(getClass());, +	public ConfigurationPhase getConfigurationPhase() {, +		return ConfigurationPhase.REGISTER_BEAN;, +	}, +, +	@Override, +	public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {, +, +		String checking = ConditionLogUtils.getPrefix(this.logger, metadata);, +, +		if (metadata.isAnnotated(ConditionalOnBean.class.getName())) {, +			BeanSearchSpec spec = new BeanSearchSpec(context, metadata,, +					ConditionalOnBean.class);, +			List<String> matching = getMatchingBeans(context, spec);, +			if (matching.isEmpty()) {, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug(checking + " @ConditionalOnBean " + spec, +							+ " found no beans (search terminated with matches=false)");, +				}, +				return false;, +			}, +		}, +, +		if (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) {, +			BeanSearchSpec spec = new BeanSearchSpec(context, metadata,, +					ConditionalOnMissingBean.class);, +			List<String> matching = getMatchingBeans(context, spec);, +			if (!matching.isEmpty()) {, +				if (this.logger.isDebugEnabled()) {, +					this.logger.debug(checking + " @ConditionalOnMissingBean " + spec, +							+ " found the following " + matching, +							+ " (search terminated with matches=false)");, +				}, +				return false;, +			}, +		}, +, +		return true;, +	}, +, +	private List<String> getMatchingBeans(ConditionContext context, BeanSearchSpec beans) {, +, +		ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +		if (beans.getStrategy() == SearchStrategy.PARENTS) {, +			BeanFactory parent = beanFactory.getParentBeanFactory();, +			Assert.isInstanceOf(ConfigurableListableBeanFactory.class, parent,, +					"Unable to use SearchStrategy.PARENTS");, +			beanFactory = (ConfigurableListableBeanFactory) parent;, +		}, +, +		List<String> beanNames = new ArrayList<String>();, +		boolean considerHierarchy = beans.getStrategy() == SearchStrategy.ALL;, +, +		for (String type : beans.getTypes()) {, +			beanNames.addAll(Arrays.asList(getBeanNamesForType(beanFactory, type,, +					context.getClassLoader(), considerHierarchy)));, +		}, +, +		for (String beanName : beans.getNames()) {, +			if (containsBean(beanFactory, beanName, considerHierarchy)) {, +				beanNames.add(beanName);, +			}, +		}, +, +		return beanNames;]