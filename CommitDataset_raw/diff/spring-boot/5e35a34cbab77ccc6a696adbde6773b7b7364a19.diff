[+++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +				getCustomizer().customize((RestTemplate) bean);, +		private MetricsRestTemplateCustomizer getCustomizer() {, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +				getCustomizer().customize((RestTemplate) bean);, +		private MetricsRestTemplateCustomizer getCustomizer() {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricsIntegrationTests.java, +		this.converter.fahrenheitToCelsius(68.0);, +					.handle(String.class, this::fahrenheitToCelsius,, +						.get("celsius");, +		private String fahrenheitToCelsius(String payload, Map<String, Object> headers) {, +				double celsius = (fahrenheit - 32) * (5.0 / 9.0);, +				return "{\"celsius\":" + celsius + "}";, +			double fahrenheitToCelsius(double fahrenheit);, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +				getCustomizer().customize((RestTemplate) bean);, +		private MetricsRestTemplateCustomizer getCustomizer() {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricsIntegrationTests.java, +		this.converter.fahrenheitToCelsius(68.0);, +					.handle(String.class, this::fahrenheitToCelsius,, +						.get("celsius");, +		private String fahrenheitToCelsius(String payload, Map<String, Object> headers) {, +				double celsius = (fahrenheit - 32) * (5.0 / 9.0);, +				return "{\"celsius\":" + celsius + "}";, +			double fahrenheitToCelsius(double fahrenheit);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * applied based on your classpath and what beans you have defined. For example, if you, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +				getCustomizer().customize((RestTemplate) bean);, +		private MetricsRestTemplateCustomizer getCustomizer() {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricsIntegrationTests.java, +		this.converter.fahrenheitToCelsius(68.0);, +					.handle(String.class, this::fahrenheitToCelsius,, +						.get("celsius");, +		private String fahrenheitToCelsius(String payload, Map<String, Object> headers) {, +				double celsius = (fahrenheit - 32) * (5.0 / 9.0);, +				return "{\"celsius\":" + celsius + "}";, +			double fahrenheitToCelsius(double fahrenheit);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * applied based on your classpath and what beans you have defined. For example, if you, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +used to instrument applications using WebFlux's functional programming model., +Metrics generated by an instrumented `RestTemplate` will, by default, be tagged with, +++ b/CONTRIBUTING.adoc, +(for example when using `maven-versions-plugin`). We use the full build on our CI servers, +++ b/README.adoc, +* Embedded web applications with a choice of container (Tomcat, Jetty or Undertow), +Auto-configuration attempts to deduce which beans a user might need. For example, if, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/atlas/AtlasPropertiesConfigAdapter.java, +	private static final AtlasConfig DEFAULTS = (k) -> null;, +		super(properties, DEFAULTS);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +				getCustomizer().customize((RestTemplate) bean);]