[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Vedran Pavic, +	public class Initializer {, +			boolean isDefaultTablePrefix = BatchProperties.this.getTablePrefix() == null;, +			boolean isDefaultSchema = DEFAULT_SCHEMA_LOCATION.equals(, +					BatchProperties.this.getSchema());, +			return this.enabled && (isDefaultTablePrefix || !isDefaultSchema);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Vedran Pavic, +	public class Initializer {, +			boolean isDefaultTablePrefix = BatchProperties.this.getTablePrefix() == null;, +			boolean isDefaultSchema = DEFAULT_SCHEMA_LOCATION.equals(, +					BatchProperties.this.getSchema());, +			return this.enabled && (isDefaultTablePrefix || !isDefaultSchema);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfigurationTests.java, + * @author Vedran Pavic, +		assertThat(this.context.getBean(BatchProperties.class), +				.getInitializer().isEnabled()).isTrue();, +		assertThat(this.context.getBean(BatchProperties.class), +				.getInitializer().isEnabled()).isFalse();, +		assertThat(this.context.getBean(BatchProperties.class), +				.getInitializer().isEnabled()).isTrue();, +	@Test, +	public void testCustomTablePrefixWithDefaultSchemaDisablesInitializer() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.name:batchtest",, +				"spring.batch.tablePrefix:PREFIX_");, +		this.context.register(TestConfiguration.class,, +				EmbeddedDataSourceConfiguration.class,, +				HibernateJpaAutoConfiguration.class, BatchAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(JobLauncher.class)).isNotNull();, +		assertThat(this.context.getBean(BatchProperties.class), +				.getInitializer().isEnabled()).isFalse();, +		this.expected.expect(BadSqlGrammarException.class);, +		new JdbcTemplate(this.context.getBean(DataSource.class)), +				.queryForList("select * from BATCH_JOB_EXECUTION");, +	}, +]