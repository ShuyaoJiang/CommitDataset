[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.core.convert.ConverterNotFoundException;, +			try {, +			catch (ConverterNotFoundException ex) {, +				// We might still be able to bind it as a bean, +				Object bean = bindBean(name, target, handler, context,, +						allowRecursiveBinding);, +				if (bean != null) {, +					return bean;, +				}, +				throw ex;, +			}, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.core.convert.ConverterNotFoundException;, +			try {, +			catch (ConverterNotFoundException ex) {, +				// We might still be able to bind it as a bean, +				Object bean = bindBean(name, target, handler, context,, +						allowRecursiveBinding);, +				if (bean != null) {, +					return bean;, +				}, +				throw ex;, +			}, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +	public void bindToJavaBeanWhenHasPropertyWithSameNameShouldStillBind(), +			throws Exception {, +		// gh-10945, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo", "boom");, +		source.put("foo.value", "bar");, +		this.sources.add(source);, +		JavaBean result = this.binder.bind("foo", Bindable.of(JavaBean.class)).get();, +		assertThat(result.getValue()).isEqualTo("bar");, +	}, +, +	@Test]