[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +		Neo4jDataAutoConfiguration.class, RabbitAutoConfiguration.class,, +		RedisAutoConfiguration.class, SolrAutoConfiguration.class }), +	@ConditionalOnBean(MongoTemplate.class), +	@ConditionalOnEnabledHealthIndicator("mongo"), +	public static class MongoHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {, +, +		private final Map<String, MongoTemplate> mongoTemplates;, +, +		public MongoHealthIndicatorConfiguration(, +				Map<String, MongoTemplate> mongoTemplates) {, +			this.mongoTemplates = mongoTemplates;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "mongoHealthIndicator"), +		public HealthIndicator mongoHealthIndicator() {, +			return createHealthIndicator(this.mongoTemplates);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +		Neo4jDataAutoConfiguration.class, RabbitAutoConfiguration.class,, +		RedisAutoConfiguration.class, SolrAutoConfiguration.class }), +	@ConditionalOnBean(MongoTemplate.class), +	@ConditionalOnEnabledHealthIndicator("mongo"), +	public static class MongoHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {, +, +		private final Map<String, MongoTemplate> mongoTemplates;, +, +		public MongoHealthIndicatorConfiguration(, +				Map<String, MongoTemplate> mongoTemplates) {, +			this.mongoTemplates = mongoTemplates;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "mongoHealthIndicator"), +		public HealthIndicator mongoHealthIndicator() {, +			return createHealthIndicator(this.mongoTemplates);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, + * @since 2.0.0, +	static final String CYPHER = "match (n) return count(n) as nodes";, +, +	private final SessionFactory sessionFactory;, +		Result result = session.query(CYPHER, Collections.EMPTY_MAP);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +		Neo4jDataAutoConfiguration.class, RabbitAutoConfiguration.class,, +		RedisAutoConfiguration.class, SolrAutoConfiguration.class }), +	@ConditionalOnBean(MongoTemplate.class), +	@ConditionalOnEnabledHealthIndicator("mongo"), +	public static class MongoHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {, +, +		private final Map<String, MongoTemplate> mongoTemplates;, +, +		public MongoHealthIndicatorConfiguration(, +				Map<String, MongoTemplate> mongoTemplates) {, +			this.mongoTemplates = mongoTemplates;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "mongoHealthIndicator"), +		public HealthIndicator mongoHealthIndicator() {, +			return createHealthIndicator(this.mongoTemplates);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, + * @since 2.0.0, +	static final String CYPHER = "match (n) return count(n) as nodes";, +, +	private final SessionFactory sessionFactory;, +		Result result = session.query(CYPHER, Collections.EMPTY_MAP);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +import java.util.Collections;, + * @author Stephane Nicoll, +		SessionFactory sessionFactory = mock(SessionFactory.class);, +		given(sessionFactory.openSession()).willReturn(this.session);, +		this.neo4jHealthIndicator = new Neo4jHealthIndicator(sessionFactory);, +		Result result = mock(Result.class);, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.EMPTY_MAP)), +				.willReturn(result);, +		given(result.queryResults()).willReturn(queryResults);, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.EMPTY_MAP)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +		Neo4jDataAutoConfiguration.class, RabbitAutoConfiguration.class,, +		RedisAutoConfiguration.class, SolrAutoConfiguration.class }), +	@ConditionalOnBean(MongoTemplate.class), +	@ConditionalOnEnabledHealthIndicator("mongo")]