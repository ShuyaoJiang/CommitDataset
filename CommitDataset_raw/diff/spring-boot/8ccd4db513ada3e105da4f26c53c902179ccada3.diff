[+++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +				<module>spring-boot-test-support</module>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +				<module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +				<module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/index.adoc, +=== /auditevents, +This endpoint provides information about audit events registered by the application., +Audit events can be filtered using the `after`, `principal` and `type` parameters as, +defined by `AuditEventRepository`., +, +Example cURL request with `after` parameter:, +include::{generated}/auditevents/curl-request.adoc[], +, +Example HTTP request with `after` parameter:, +include::{generated}/auditevents/http-request.adoc[], +, +Example HTTP response:, +include::{generated}/auditevents/http-response.adoc[], +, +Example cURL request with `principal` and `after` parameters:, +include::{generated}/auditevents/filter-by-principal/curl-request.adoc[], +, +Example HTTP request with `principal` and `after` parameters:, +include::{generated}/auditevents/filter-by-principal/http-request.adoc[], +, +Example cURL request with `principal`, `after` and `type` parameters:, +include::{generated}/auditevents/filter-by-principal-and-type/curl-request.adoc[], +, +Example HTTP request with `principal`, `after` and `type` parameters:, +include::{generated}/auditevents/filter-by-principal-and-type/http-request.adoc[], +, +, +, +++ b/pom.xml, +	<version>1.5.0.BUILD-SNAPSHOT</version>, +				<module>spring-boot-test-support</module>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/main/asciidoc/index.adoc, +=== /auditevents, +This endpoint provides information about audit events registered by the application., +Audit events can be filtered using the `after`, `principal` and `type` parameters as, +defined by `AuditEventRepository`., +, +Example cURL request with `after` parameter:, +include::{generated}/auditevents/curl-request.adoc[], +, +Example HTTP request with `after` parameter:, +include::{generated}/auditevents/http-request.adoc[], +, +Example HTTP response:, +include::{generated}/auditevents/http-response.adoc[], +, +Example cURL request with `principal` and `after` parameters:, +include::{generated}/auditevents/filter-by-principal/curl-request.adoc[], +, +Example HTTP request with `principal` and `after` parameters:, +include::{generated}/auditevents/filter-by-principal/http-request.adoc[], +, +Example cURL request with `principal`, `after` and `type` parameters:, +include::{generated}/auditevents/filter-by-principal-and-type/curl-request.adoc[], +, +Example HTTP request with `principal`, `after` and `type` parameters:, +include::{generated}/auditevents/filter-by-principal-and-type/http-request.adoc[], +, +, +, +++ b/spring-boot-actuator-docs/src/main/asciidoc/loggers.adoc, +=== /loggers, +This endpoint allows you to view and modify the log levels for the loggers in your, +application.  It builds on top of the `LoggingSystem` abstraction and supports the same, +logging frameworks.  The logging levels are defined by the `LogLevel` enumeration and, +consist of the following values (although not all logging systems support the full set):, +, +* `TRACE`, +* `DEBUG`, +* `INFO`, +* `WARN`, +* `ERROR`, +* `FATAL`, +* `OFF`, +* `null`, +, +The `configuredLevel` property reflects an explicitly configured logger level, while the, +`effectiveLevel` property reflects the logger level inherited from parent loggers. The, +`effectiveLevel` is managed by each logging framework and reflects the propagation rules, +inherent to and configured in that framework.  `null` indicates that there is no explicit, +configuration defined., +, +, +]