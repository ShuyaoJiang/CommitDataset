[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +			/**, +			 * Maximum number of unique URI tag values allowed. After the max number of, +			 * tag values is reached, metrics with additional tag values are denied by, +			 * filter., +			 */, +			private int maxUriTags = 100;, +, +			public int getMaxUriTags() {, +				return this.maxUriTags;, +			}, +, +			public void setMaxUriTags(int maxUriTags) {, +				this.maxUriTags = maxUriTags;, +			}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +			/**, +			 * Maximum number of unique URI tag values allowed. After the max number of, +			 * tag values is reached, metrics with additional tag values are denied by, +			 * filter., +			 */, +			private int maxUriTags = 100;, +, +			public int getMaxUriTags() {, +				return this.maxUriTags;, +			}, +, +			public void setMaxUriTags(int maxUriTags) {, +				this.maxUriTags = maxUriTags;, +			}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfiguration.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import io.micrometer.core.instrument.Meter.Id;, +import io.micrometer.core.instrument.config.MeterFilter;, +import io.micrometer.core.instrument.config.MeterFilterReply;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import org.springframework.core.annotation.Order;, +	@Bean, +	@Order(0), +	public MeterFilter metricsWebClientUriTagFilter(MetricsProperties properties) {, +		String metricName = properties.getWeb().getClient().getRequestsMetricName();, +		MeterFilter denyFilter = new MaximumUriTagsReachedMeterFilter(metricName);, +		return MeterFilter.maximumAllowableTags(metricName, "uri",, +				properties.getWeb().getClient().getMaxUriTags(), denyFilter);, +	}, +, +	/**, +	 * {@link MeterFilter} to deny further client requests and log a warning., +	 */, +	private static class MaximumUriTagsReachedMeterFilter implements MeterFilter {, +, +		private final Logger logger = LoggerFactory, +				.getLogger(RestTemplateMetricsConfiguration.class);, +, +		private final String metricName;, +, +		private final AtomicBoolean alreadyWarned = new AtomicBoolean(false);, +, +		MaximumUriTagsReachedMeterFilter(String metricName) {, +			this.metricName = metricName;, +		}, +, +		@Override, +		public MeterFilterReply accept(Id id) {, +			if (this.alreadyWarned.compareAndSet(false, true)) {, +				logWarning();, +			}, +			return MeterFilterReply.DENY;, +		}, +, +		private void logWarning() {, +			if (this.logger.isWarnEnabled()) {, +				this.logger.warn(, +						"Reached the maximum number of URI tags for '" + this.metricName, +								+ "'. Are you using uriVariables on RestTemplate calls?");, +			}, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +			/**, +			 * Maximum number of unique URI tag values allowed. After the max number of, +			 * tag values is reached, metrics with additional tag values are denied by, +			 * filter., +			 */, +			private int maxUriTags = 100;, +, +			public int getMaxUriTags() {, +				return this.maxUriTags;, +			}, +, +			public void setMaxUriTags(int maxUriTags) {, +				this.maxUriTags = maxUriTags;, +			}, +]