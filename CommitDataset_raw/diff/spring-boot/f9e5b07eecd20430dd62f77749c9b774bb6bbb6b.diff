[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/OnEnabledEndpointCondition.java, +import org.springframework.boot.endpoint.EndpointDelivery;, +import org.springframework.util.Assert;, +		EndpointAttributes attributes = getEndpointAttributes(context, metadata);, +		EndpointEnablement endpointEnablement = attributes, +				.getEnablement(new EndpointEnablementProvider(context.getEnvironment()));, +		Assert.state(, +				metadata instanceof MethodMetadata, +						&& metadata.isAnnotated(Bean.class.getName()),, +				"OnEnabledEndpointCondition may only be used on @Bean methods");, +		return getEndpointAttributes(context, (MethodMetadata) metadata);, +	}, +, +	private EndpointAttributes getEndpointAttributes(ConditionContext context,, +			MethodMetadata methodMetadata) {, +			Class<?> returnType = ClassUtils.forName(methodMetadata.getReturnTypeName(),, +					context.getClassLoader());, +		// If both types are set, all delivery technologies are exposed, +		EndpointDelivery[] delivery = endpoint.delivery();, +				(delivery.length == 1 ? delivery[0] : null));, +		private final EndpointDelivery delivery;, +		EndpointAttributes(String id, boolean enabled, EndpointDelivery delivery) {, +			if (!StringUtils.hasText(id)) {, +				throw new IllegalStateException("Endpoint id could not be determined");, +			}, +			this.delivery = delivery;, +		}, +, +		public EndpointEnablement getEnablement(EndpointEnablementProvider provider) {, +			return provider.getEndpointEnablement(this.id, this.enabled, this.delivery);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/OnEnabledEndpointCondition.java, +import org.springframework.boot.endpoint.EndpointDelivery;, +import org.springframework.util.Assert;, +		EndpointAttributes attributes = getEndpointAttributes(context, metadata);, +		EndpointEnablement endpointEnablement = attributes, +				.getEnablement(new EndpointEnablementProvider(context.getEnvironment()));, +		Assert.state(, +				metadata instanceof MethodMetadata, +						&& metadata.isAnnotated(Bean.class.getName()),, +				"OnEnabledEndpointCondition may only be used on @Bean methods");, +		return getEndpointAttributes(context, (MethodMetadata) metadata);, +	}, +, +	private EndpointAttributes getEndpointAttributes(ConditionContext context,, +			MethodMetadata methodMetadata) {, +			Class<?> returnType = ClassUtils.forName(methodMetadata.getReturnTypeName(),, +					context.getClassLoader());, +		// If both types are set, all delivery technologies are exposed, +		EndpointDelivery[] delivery = endpoint.delivery();, +				(delivery.length == 1 ? delivery[0] : null));, +		private final EndpointDelivery delivery;, +		EndpointAttributes(String id, boolean enabled, EndpointDelivery delivery) {, +			if (!StringUtils.hasText(id)) {, +				throw new IllegalStateException("Endpoint id could not be determined");, +			}, +			this.delivery = delivery;, +		}, +, +		public EndpointEnablement getEnablement(EndpointEnablementProvider provider) {, +			return provider.getEndpointEnablement(this.id, this.enabled, this.delivery);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/EndpointInfrastructureAutoConfiguration.java, +import org.springframework.boot.endpoint.EndpointDelivery;, +				EndpointDelivery.JMX);, +				mBeanServer, new DefaultEndpointObjectNameFactory(properties, mBeanServer,, +						ObjectUtils.getIdentityHexString(this.applicationContext)));, +					EndpointDelivery.WEB);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, +import org.springframework.boot.endpoint.EndpointDelivery;, + * specific {@link EndpointDelivery}, if any. If any property are set, they are evaluated, + * with a sensible order of precedence., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/OnEnabledEndpointCondition.java, +import org.springframework.boot.endpoint.EndpointDelivery;, +import org.springframework.util.Assert;, +		EndpointAttributes attributes = getEndpointAttributes(context, metadata);, +		EndpointEnablement endpointEnablement = attributes, +				.getEnablement(new EndpointEnablementProvider(context.getEnvironment()));, +		Assert.state(, +				metadata instanceof MethodMetadata, +						&& metadata.isAnnotated(Bean.class.getName()),, +				"OnEnabledEndpointCondition may only be used on @Bean methods");, +		return getEndpointAttributes(context, (MethodMetadata) metadata);, +	}, +, +	private EndpointAttributes getEndpointAttributes(ConditionContext context,, +			MethodMetadata methodMetadata) {, +			Class<?> returnType = ClassUtils.forName(methodMetadata.getReturnTypeName(),, +					context.getClassLoader());, +		// If both types are set, all delivery technologies are exposed]