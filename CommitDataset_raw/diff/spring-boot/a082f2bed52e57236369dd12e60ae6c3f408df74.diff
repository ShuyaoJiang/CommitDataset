[+++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +			addInitializers(true, new ParentContextApplicationContextInitializer(, +				// this.application.setDefaultArgs(this.defaultArgs, +				// .toArray(new String[this.defaultArgs.size()]));, +		addInitializers(true, new ParentContextApplicationContextInitializer(parent));, +		addInitializers(false, initializers);, +	private void addInitializers(boolean prepend,, +			ApplicationContextInitializer<?>... initializers) {, +		Set<ApplicationContextInitializer<?>> target = new LinkedHashSet<ApplicationContextInitializer<?>>();, +		if (prepend) {, +			target.addAll(this.application.getInitializers());, +		}, +		else {, +			target.addAll(this.application.getInitializers());, +			target.addAll(Arrays.asList(initializers));, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +			addInitializers(true, new ParentContextApplicationContextInitializer(, +				// this.application.setDefaultArgs(this.defaultArgs, +				// .toArray(new String[this.defaultArgs.size()]));, +		addInitializers(true, new ParentContextApplicationContextInitializer(parent));, +		addInitializers(false, initializers);, +	private void addInitializers(boolean prepend,, +			ApplicationContextInitializer<?>... initializers) {, +		Set<ApplicationContextInitializer<?>> target = new LinkedHashSet<ApplicationContextInitializer<?>>();, +		if (prepend) {, +			target.addAll(this.application.getInitializers());, +		}, +		else {, +			target.addAll(this.application.getInitializers());, +			target.addAll(Arrays.asList(initializers));, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		PropertySource<?> propertySource = getPropertySource(resource, profile, loaders);, +	private PropertySource<?> getPropertySource(Resource resource, String profile,, +		String key = resource.getDescription() + (profile == null ? "" : "#" + profile);, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +			addInitializers(true, new ParentContextApplicationContextInitializer(, +				// this.application.setDefaultArgs(this.defaultArgs, +				// .toArray(new String[this.defaultArgs.size()]));, +		addInitializers(true, new ParentContextApplicationContextInitializer(parent));, +		addInitializers(false, initializers);, +	private void addInitializers(boolean prepend,, +			ApplicationContextInitializer<?>... initializers) {, +		Set<ApplicationContextInitializer<?>> target = new LinkedHashSet<ApplicationContextInitializer<?>>();, +		if (prepend) {, +			target.addAll(this.application.getInitializers());, +		}, +		else {, +			target.addAll(this.application.getInitializers());, +			target.addAll(Arrays.asList(initializers));, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		PropertySource<?> propertySource = getPropertySource(resource, profile, loaders);, +	private PropertySource<?> getPropertySource(Resource resource, String profile,, +		String key = resource.getDescription() + (profile == null ? "" : "#" + profile);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationBuilderTests.java, +	public void parentFirstCreationWithProfileAndDefaultArgs() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(, +				ExampleConfig.class).profiles("node").defaultArgs("--transport=redis"), +				.child(ChildConfig.class).web(false);, +		this.context = application.run();, +		assertThat(this.context.getEnvironment().acceptsProfiles("node"), is(true));, +		assertThat(this.context.getEnvironment().getProperty("transport"),, +				is(equalTo("redis")));, +		assertThat(this.context.getParent().getEnvironment().acceptsProfiles("node"),, +				is(true));, +		assertThat(this.context.getParent().getEnvironment().getProperty("transport"),, +				is(equalTo("redis")));, +		// only defined in node profile, +		assertThat(this.context.getEnvironment().getProperty("bar"), is(equalTo("spam")));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +			addInitializers(true, new ParentContextApplicationContextInitializer(, +				// this.application.setDefaultArgs(this.defaultArgs, +				// .toArray(new String[this.defaultArgs.size()]));, +		addInitializers(true, new ParentContextApplicationContextInitializer(parent));, +		addInitializers(false, initializers);, +	private void addInitializers(boolean prepend,, +			ApplicationContextInitializer<?>... initializers) {, +		Set<ApplicationContextInitializer<?>> target = new LinkedHashSet<ApplicationContextInitializer<?>>();, +		if (prepend) {, +			target.addAll(this.application.getInitializers());, +		}, +		else {, +			target.addAll(this.application.getInitializers());, +			target.addAll(Arrays.asList(initializers));, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		PropertySource<?> propertySource = getPropertySource(resource, profile, loaders);, +	private PropertySource<?> getPropertySource(Resource resource, String profile,, +		String key = resource.getDescription() + (profile == null ? "" : "#" + profile);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationBuilderTests.java, +	public void parentFirstCreationWithProfileAndDefaultArgs() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(, +				ExampleConfig.class).profiles("node").defaultArgs("--transport=redis"), +				.child(ChildConfig.class).web(false);, +		this.context = application.run();]