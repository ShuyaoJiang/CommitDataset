[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java, +import java.util.List;, +, +				ObjectProvider<List<RestDocsMockMvcConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsMockMvcConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsRestAssuredConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsWebTestClientConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsWebTestClientConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java, +import java.util.List;, +, +				ObjectProvider<List<RestDocsMockMvcConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsMockMvcConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsRestAssuredConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsWebTestClientConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsWebTestClientConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java, +import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;, +import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;, +		assertThat(new File(defaultSnippetsDir, "response-fields.md")).isFile();, +	@TestConfiguration, +	public static class CustomizationConfiguration2, +			implements RestDocsMockMvcConfigurationCustomizer {, +, +		@Override, +		public void customize(MockMvcRestDocumentationConfigurer configurer) {, +			configurer.snippets().withAdditionalDefaults(, +					responseFields(fieldWithPath("_links.self").description("Main URL")));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java, +import java.util.List;, +, +				ObjectProvider<List<RestDocsMockMvcConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsMockMvcConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsRestAssuredConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsRestAssuredConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +				ObjectProvider<List<RestDocsWebTestClientConfigurationCustomizer>> configurationCustomizerProvider,, +			List<RestDocsWebTestClientConfigurationCustomizer> configurationCustomizers = configurationCustomizerProvider, +			if (configurationCustomizers != null) {, +				configurationCustomizers, +						.forEach((configurationCustomizer) -> configurationCustomizer, +								.customize(configurer));, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java, +import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;, +import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;, +		assertThat(new File(defaultSnippetsDir, "response-fields.md")).isFile();, +	@TestConfiguration, +	public static class CustomizationConfiguration2, +			implements RestDocsMockMvcConfigurationCustomizer {, +, +		@Override, +		public void customize(MockMvcRestDocumentationConfigurer configurer) {, +			configurer.snippets().withAdditionalDefaults(, +					responseFields(fieldWithPath("_links.self").description("Main URL")));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestAssuredRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java, +import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;, +import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;, +		assertThat(new File(defaultSnippetsDir, "response-fields.md")).isFile();, +	@TestConfiguration]