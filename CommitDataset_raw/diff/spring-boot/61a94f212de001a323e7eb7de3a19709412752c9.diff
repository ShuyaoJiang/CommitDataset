[+++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServerConfiguration.java, +				ServerProperties server = this.beanFactory, +				factory.setPort(server.getPort());, +				factory.setContextPath(server.getContextPath());, +							server);, +++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServerConfiguration.java, +				ServerProperties server = this.beanFactory, +				factory.setPort(server.getPort());, +				factory.setContextPath(server.getContextPath());, +							server);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, +		List<String> beanNames = collect(attributes, "name");, +++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServerConfiguration.java, +				ServerProperties server = this.beanFactory, +				factory.setPort(server.getPort());, +				factory.setContextPath(server.getContextPath());, +							server);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, +		List<String> beanNames = collect(attributes, "name");, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java, +import org.springframework.validation.Validator;, +	public final static String VALIDATOR_BEAN_NAME = "configurationPropertiesValidator";, +, +	@Autowired(required = false), +	@Qualifier(VALIDATOR_BEAN_NAME), +	private Validator validator;, +, +	@Bean, +	@ConditionalOnMissingBean(name = VALIDATOR_BEAN_NAME), +	@ConditionalOnClass(name = "javax.validation.Validator"), +	protected Validator configurationPropertiesValidator() {, +		return new LocalValidatorFactoryBean();, +	}, +, +		processor.setValidator(this.validator);, +++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServerConfiguration.java, +				ServerProperties server = this.beanFactory, +				factory.setPort(server.getPort());, +				factory.setContextPath(server.getContextPath());, +							server);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, +		List<String> beanNames = collect(attributes, "name");, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java, +import org.springframework.validation.Validator;, +	public final static String VALIDATOR_BEAN_NAME = "configurationPropertiesValidator";, +, +	@Autowired(required = false), +	@Qualifier(VALIDATOR_BEAN_NAME), +	private Validator validator;, +, +	@Bean, +	@ConditionalOnMissingBean(name = VALIDATOR_BEAN_NAME), +	@ConditionalOnClass(name = "javax.validation.Validator"), +	protected Validator configurationPropertiesValidator() {, +		return new LocalValidatorFactoryBean();, +	}, +, +		processor.setValidator(this.validator);, +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/AdhocTestSuite.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.bootstrap;, +, +import org.junit.Ignore;, +import org.junit.runner.RunWith;, +import org.junit.runners.Suite;, +import org.junit.runners.Suite.SuiteClasses;, +import org.springframework.bootstrap.context.embedded.jetty.JettyEmbeddedServletContainerFactoryTests;, +import org.springframework.bootstrap.main.SimpleMainTests;, +, +/**, + * A test suite for probing weird ordering problems in the tests., + * @author Dave Syer, + * , + */, +@RunWith(Suite.class), +@SuiteClasses({ SimpleMainTests.class, JettyEmbeddedServletContainerFactoryTests.class }), +@Ignore, +public class AdhocTestSuite {, +, +}, +++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/autoconfigure/service/ServerConfiguration.java, +				ServerProperties server = this.beanFactory, +				factory.setPort(server.getPort());, +				factory.setContextPath(server.getContextPath());, +							server);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java]