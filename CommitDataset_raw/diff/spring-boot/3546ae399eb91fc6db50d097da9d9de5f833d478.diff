[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +			if (this.managementServerProperties.getSsl() != null) {, +				container.setSsl(this.managementServerProperties.getSsl());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +			if (this.managementServerProperties.getSsl() != null) {, +				container.setSsl(this.managementServerProperties.getSsl());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import org.springframework.boot.context.embedded.Ssl;, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +	private Ssl ssl;, +, +	public Ssl getSsl() {, +		return this.ssl;, +	}, +, +	public void setSsl(Ssl ssl) {, +		this.ssl = ssl;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +			if (this.managementServerProperties.getSsl() != null) {, +				container.setSsl(this.managementServerProperties.getSsl());, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import org.springframework.boot.context.embedded.Ssl;, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +	private Ssl ssl;, +, +	public Ssl getSsl() {, +		return this.ssl;, +	}, +, +	public void setSsl(Ssl ssl) {, +		this.ssl = ssl;, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	public void onDifferentPortManagementSslDisabled() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.applicationContext,, +				"management.ssl.enabled:false");, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				DifferentPortConfig.class, BaseConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);, +		this.applicationContext.refresh();, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		assertContent("/error", ports.get().management, startsWith("{"));, +		ApplicationContext managementContext = this.applicationContext, +				.getBean(ManagementContextResolver.class).getApplicationContext();, +		List<?> interceptors = (List<?>) ReflectionTestUtils.getField(, +				managementContext.getBean(EndpointHandlerMapping.class), "interceptors");, +		assertThat(interceptors).hasSize(1);, +		ManagementServerProperties managementServerProperties = this.applicationContext, +				.getBean(ManagementServerProperties.class);, +		assertThat(managementServerProperties.getSsl()).isNotNull();, +		assertThat(managementServerProperties.getSsl().isEnabled()).isFalse();, +		this.applicationContext.close();, +		assertAllClosed();, +	}, +, +	@Test]