[+++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/EmbeddedServletContainerWarPackagingIntegrationTests.java, +	@Test, +	public void loaderClassesAreNotAvailableViaHttp() throws Exception {, +		ResponseEntity<String> entity = this.rest.getForEntity(, +				"/org/springframework/boot/loader/Launcher.class", String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);, +		entity = this.rest.getForEntity(, +				"/org/springframework/../springframework/boot/loader/Launcher.class",, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);, +	}, +, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/EmbeddedServletContainerWarPackagingIntegrationTests.java, +	@Test, +	public void loaderClassesAreNotAvailableViaHttp() throws Exception {, +		ResponseEntity<String> entity = this.rest.getForEntity(, +				"/org/springframework/boot/loader/Launcher.class", String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);, +		entity = this.rest.getForEntity(, +				"/org/springframework/../springframework/boot/loader/Launcher.class",, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +import java.io.InputStream;, +import java.net.MalformedURLException;, +import java.nio.channels.ReadableByteChannel;, +		File docBase = (root != null ? root : createTempDir("jetty-docbase"));, +			Resource rootResource = docBase.isDirectory(), +					? Resource.newResource(docBase.getCanonicalFile()), +					: JarResource.newJarResource(Resource.newResource(docBase));, +					root == null ? rootResource : new LoaderHidingResource(rootResource));, +	private static final class LoaderHidingResource extends Resource {, +, +		private final Resource delegate;, +, +		private LoaderHidingResource(Resource delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public Resource addPath(String path) throws IOException, MalformedURLException {, +			if (path.startsWith("/org/springframework/boot")) {, +				return null;, +			}, +			return this.delegate.addPath(path);, +		}, +, +		@Override, +		public boolean isContainedIn(Resource resource) throws MalformedURLException {, +			return this.delegate.isContainedIn(resource);, +		}, +, +		@Override, +		public void close() {, +			close();, +		}, +, +		@Override, +		public boolean exists() {, +			return this.delegate.exists();, +		}, +, +		@Override, +		public boolean isDirectory() {, +			return this.delegate.isDirectory();, +		}, +, +		@Override, +		public long lastModified() {, +			return this.delegate.lastModified();, +		}, +, +		@Override, +		public long length() {, +			return this.delegate.length();, +		}, +, +		@Override, +		@Deprecated, +		public URL getURL() {, +			return this.delegate.getURL();, +		}, +, +		@Override, +		public File getFile() throws IOException {, +			return this.delegate.getFile();, +		}, +, +		@Override, +		public String getName() {, +			return this.delegate.getName();, +		}, +, +		@Override, +		public InputStream getInputStream() throws IOException {, +			return this.delegate.getInputStream();, +		}, +]