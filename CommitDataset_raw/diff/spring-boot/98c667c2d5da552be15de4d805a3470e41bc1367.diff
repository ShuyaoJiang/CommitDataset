[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/DefaultReactiveWebServerFactoryCustomizer.java, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(this.serverProperties::getPort).to(factory::setPort);, +		map.from(this.serverProperties::getAddress).to(factory::setAddress);, +		map.from(this.serverProperties::getSsl).to(factory::setSsl);, +		map.from(this.serverProperties::getCompression).to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).to(factory::setHttp2);, +		map.from(() -> factory).whenInstanceOf(TomcatReactiveWebServerFactory.class), +				.to(tomcatFactory -> TomcatCustomizer.customizeTomcat(, +						this.serverProperties, this.environment, tomcatFactory));, +		map.from(() -> factory).whenInstanceOf(JettyReactiveWebServerFactory.class), +				.to(jettyFactory -> JettyCustomizer.customizeJetty(this.serverProperties,, +						this.environment, jettyFactory));, +		map.from(() -> factory).whenInstanceOf(UndertowReactiveWebServerFactory.class), +				.to(undertowFactory -> UndertowCustomizer.customizeUndertow(, +						this.serverProperties, this.environment, undertowFactory));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/DefaultReactiveWebServerFactoryCustomizer.java, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(this.serverProperties::getPort).to(factory::setPort);, +		map.from(this.serverProperties::getAddress).to(factory::setAddress);, +		map.from(this.serverProperties::getSsl).to(factory::setSsl);, +		map.from(this.serverProperties::getCompression).to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).to(factory::setHttp2);, +		map.from(() -> factory).whenInstanceOf(TomcatReactiveWebServerFactory.class), +				.to(tomcatFactory -> TomcatCustomizer.customizeTomcat(, +						this.serverProperties, this.environment, tomcatFactory));, +		map.from(() -> factory).whenInstanceOf(JettyReactiveWebServerFactory.class), +				.to(jettyFactory -> JettyCustomizer.customizeJetty(this.serverProperties,, +						this.environment, jettyFactory));, +		map.from(() -> factory).whenInstanceOf(UndertowReactiveWebServerFactory.class), +				.to(undertowFactory -> UndertowCustomizer.customizeUndertow(, +						this.serverProperties, this.environment, undertowFactory));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(this.serverProperties::getPort).to(factory::setPort);, +		map.from(this.serverProperties::getAddress).to(factory::setAddress);, +		map.from(this.serverProperties.getServlet()::getContextPath), +				.to(factory::setContextPath);, +		map.from(this.serverProperties::getDisplayName).to(factory::setDisplayName);, +		map.from(this.serverProperties::getSsl).to(factory::setSsl);, +		map.from(this.serverProperties::getServlet).as(ServerProperties.Servlet::getJsp), +				.to(factory::setJsp);, +		map.from(this.serverProperties::getCompression).to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).to(factory::setHttp2);, +		map.from(() -> factory).whenInstanceOf(TomcatServletWebServerFactory.class), +				.to(tomcatFactory -> {, +					TomcatCustomizer.customizeTomcat(this.serverProperties,, +							this.environment, tomcatFactory);, +					TomcatServletCustomizer.customizeTomcat(this.serverProperties,, +							this.environment, tomcatFactory);, +		map.from(() -> factory).whenInstanceOf(JettyServletWebServerFactory.class), +				.to(jettyFactory -> JettyCustomizer.customizeJetty(this.serverProperties,, +						this.environment, jettyFactory));, +		map.from(() -> factory).whenInstanceOf(UndertowServletWebServerFactory.class), +				.to(undertowFactory -> UndertowCustomizer.customizeUndertow(, +						this.serverProperties, this.environment, undertowFactory));, +		map.from(this.serverProperties.getServlet()::getContextParameters), +				.to(factory::setInitParameters);]