[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(name = "endpoints.trace.filter.enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnProperty(name = "endpoints.trace.filter.enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +	@Test, +	public void skipsFilterIfPropertyDisabled() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(context,, +				"endpoints.trace.filter.enabled:false");, +		context.register(PropertyPlaceholderAutoConfiguration.class,, +				TraceRepositoryAutoConfiguration.class,, +				TraceWebFilterAutoConfiguration.class);, +		context.refresh();, +		assertThat(context.getBeansOfType(WebRequestTraceFilter.class).size()).isEqualTo(0);, +		context.close();, +	}, +]