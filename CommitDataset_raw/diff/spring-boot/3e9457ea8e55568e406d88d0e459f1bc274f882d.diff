[+++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java, +import static org.junit.Assert.assertTrue;, +, +++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java, +import static org.junit.Assert.assertTrue;, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.core.PriorityOrdered;, +		InitializingBean, DisposableBean, PriorityOrdered {, +	private int order = Ordered.HIGHEST_PRECEDENCE + 1;, +		ConfigurationProperties annotation = AnnotationUtils.findAnnotation(, +				bean.getClass(), ConfigurationProperties.class);, +		if (annotation != null || bean instanceof ConfigurationPropertiesHolder) {, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		}, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java, +import static org.junit.Assert.assertTrue;, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.core.PriorityOrdered;, +		InitializingBean, DisposableBean, PriorityOrdered {, +	private int order = Ordered.HIGHEST_PRECEDENCE + 1;, +		ConfigurationProperties annotation = AnnotationUtils.findAnnotation(, +				bean.getClass(), ConfigurationProperties.class);, +		if (annotation != null || bean instanceof ConfigurationPropertiesHolder) {, +			postProcessBeforeInitialization(bean, beanName, annotation);, +		}, +	private void postProcessBeforeInitialization(Object bean, String beanName,, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +import javax.annotation.PostConstruct;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import static org.junit.Assert.assertNotNull;, +	private AnnotationConfigApplicationContext context;, +		this.context = new AnnotationConfigApplicationContext();, +		this.context = new AnnotationConfigApplicationContext();, +		this.context = new AnnotationConfigApplicationContext();, +	@Test, +	public void testInitializersSeeBoundProperties() {, +		MockEnvironment env = new MockEnvironment();, +		env.setProperty("bar", "foo");, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.setEnvironment(env);, +		this.context.register(TestConfigurationWithInitializer.class);, +		this.context.refresh();, +	}, +, +	@Configuration, +	@EnableConfigurationProperties, +	@ConfigurationProperties, +	public static class TestConfigurationWithInitializer {, +, +		private String bar;, +, +		public void setBar(String bar) {, +			this.bar = bar;, +		}, +, +		public String getBar() {, +			return this.bar;, +		}, +, +		@PostConstruct, +		public void init() {, +			assertNotNull(this.bar);, +		}, +, +	}, +]