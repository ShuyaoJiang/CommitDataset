[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-automatic-expansion]], +=== Automatically expand properties at build time, +Rather than hardcoding some properties that are also specified in your project's build, +configuration, you can automatically expand them using the existing build configuration, +instead. This is possible in both Maven and Gradle., +, +, +, +[[howto-automatic-expansion-maven]], +==== Automatic property expansion using Maven, +You can automatically expand properties from the Maven project using resource, +filtering. If you use the `spring-boot-starter-parent` you can then refer to your, +Maven '`project properties`' via `@..@` placeholders, e.g., +, +[source,properties,indent=0], +----, +	app.encoding=@project.build.sourceEncoding@, +	app.java.version=@java.version@, +----, +, +TIP: The `spring-boot:run` can add `src/main/resources` directly to the classpath, +(for hot reloading purposes) if you enable the `addResources` flag. This circumvents, +the resource filtering and this feature. You can use the `exec:java` goal instead, +or customize the plugin's configuration, see the, +{spring-boot-maven-plugin-site}/usage.html[plugin usage page] for more details., +, +If you don't use the starter parent, in your `pom.xml` you need (inside the `<build/>`, +element):, +, +[source,xml,indent=0], +----, +    <resources>, +        <resource>, +            <directory>src/main/resources</directory>, +            <filtering>true</filtering>, +        </resource>, +    </resources>, +----, +, +and (inside `<plugins/>`):, +, +[source,xml,indent=0], +----, +	<plugin>, +		<groupId>org.apache.maven.plugins</groupId>, +		<artifactId>maven-resources-plugin</artifactId>, +		<version>2.7</version>, +		<configuration>, +			<delimiters>, +				<delimiter>@</delimiter>, +			</delimiters>, +			<useDefaultDelimiters>false</useDefaultDelimiters>, +		</configuration>, +	</plugin>, +----, +, +NOTE: The `useDefaultDelimiters` property is important if you are using standard Spring, +placeholders in your configuration (e.g. `${foo}`). These may be expanded by the build if, +that property is not set to `false`., +, +, +, +[[howto-automatic-expansion-gradle]], +==== Automatic property expansion using Gradle, +You can automatically expand properties from the Gradle project by configuring the, +Java plugin's `processResources` task to do so:, +, +[source,groovy,indent=0], +----, +	processResources {, +		expand(project.properties), +	}, +----, +, +You can then refer to your Gradle project's properties via placeholders, e.g., +, +[source,properties,indent=0], +----, +	app.name=${name}, +	app.description=${description}, +----, +, +NOTE: Gradle's `expand` method uses Groovy's `SimpleTemplateEngine` which transforms, +`${..}` tokens. The `${..}` style conflicts with Spring's own property placeholder, +mechanism. To use Spring property placeholders together with automatic expansion, +the Spring property placeholders need to be escaped like `\${..}`., +, +, +, +, +[[howto-build-info]], +=== Generate build information, +Both the Maven and Gradle plugin allow to generate build information containing, +the coordinates, name and version of the project. The plugin can also be configured, +to add additional properties through configuration. When such file is present,, +Spring Boot auto-configures a `BuildProperties` bean., +, +To generate build information with Maven, add an execution for the `build-info` goal:, +]