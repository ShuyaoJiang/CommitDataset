[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, + * @author Stephane Nicoll, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class)), +			.withPropertyValues("spring.datasource.generate-unique-name=true");, +	@Test, +	public void noDataSource() {, +		this.contextRunner.run((context) ->, +				assertThat(context).doesNotHaveBean(Flyway.class));, +	public void createDataSource() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues(, +						"spring.flyway.url:jdbc:hsqldb:mem:flywaytest",, +						"spring.flyway.user:sa").run((context) -> {, +			assertThat(context).hasSingleBean(Flyway.class);, +			assertThat(context.getBean(Flyway.class).getDataSource()).isNotNull();, +		});, +	public void flywayDataSource() {, +		this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class,, +				EmbeddedDataSourceConfiguration.class).run((context) -> {, +			assertThat(context).hasSingleBean(Flyway.class);, +			assertThat(context.getBean(Flyway.class).getDataSource()), +					.isEqualTo(context.getBean("flywayDataSource"));, +		});, +	public void schemaManagementProviderDetectsDataSource() {, +		this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class,, +				EmbeddedDataSourceConfiguration.class).run((context) -> {, +			FlywaySchemaManagementProvider schemaManagementProvider = context, +			assertThat(schemaManagementProvider.getSchemaManagement(context.getBean(, +					DataSource.class))).isEqualTo(SchemaManagement.UNMANAGED);, +			assertThat(schemaManagementProvider.getSchemaManagement(context.getBean(, +					"flywayDataSource", DataSource.class))).isEqualTo(, +					SchemaManagement.MANAGED);, +		});, +	public void defaultFlyway() {, +		this.contextRunner.withUserConfiguration(, +				EmbeddedDataSourceConfiguration.class).run((context) -> {, +			assertThat(context).hasSingleBean(Flyway.class);, +			Flyway flyway = context.getBean(Flyway.class);, +		});, +	public void overrideLocations() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.flyway.locations:classpath:db/changelog,classpath:db/migration"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Flyway.class);, +					Flyway flyway = context.getBean(Flyway.class);, +					assertThat(flyway.getLocations()).containsExactly(, +							"classpath:db/changelog", "classpath:db/migration");, +				});, +	public void overrideLocationsList() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.flyway.locations[0]:classpath:db/changelog",, +				.run((context) -> {, +					assertThat(context).hasSingleBean(Flyway.class);, +					Flyway flyway = context.getBean(Flyway.class);, +					assertThat(flyway.getLocations()).containsExactly(, +							"classpath:db/changelog",, +				});, +	public void overrideSchemas() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.flyway.schemas:public").run((context) -> {, +			assertThat(context).hasSingleBean(Flyway.class);, +			Flyway flyway = context.getBean(Flyway.class);, +			assertThat(Arrays.asList(flyway.getSchemas()).toString()), +					.isEqualTo("[public]");, +		});, +	public void changeLogDoesNotExist() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.flyway.locations:file:no-such-dir"), +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context).getFailure(), +							.isInstanceOf(BeanCreationException.class);, +				});, +	public void checkLocationsAllMissing() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues(, +						"spring.flyway.locations:classpath:db/missing1,classpath:db/migration2",, +						"spring.flyway.check-location:true").run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context).getFailure(), +					.isInstanceOf(BeanCreationException.class);, +			assertThat(context).getFailure(), +					.hasMessageContaining("Cannot find migrations location in");, +		});, +	public void checkLocationsAllExist() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues(, +						"spring.flyway.locations:classpath:db/changelog,classpath:db/migration",, +						"spring.flyway.check-location:true").run((context) -> {, +			assertThat(context).hasNotFailed();, +		});, +	public void customFlywayMigrationStrategy() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class,, +				MockFlywayMigrationStrategy.class).run((context) -> {, +			assertThat(context).hasSingleBean(Flyway.class);, +			context.getBean(MockFlywayMigrationStrategy.class).assertCalled();, +		});]