[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	private InitCommand init;, +, +			this.init = new InitCommand(this);, +			this.init.run();, +	public InitCommand getInitCommand() {, +		return this.init;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	private InitCommand init;, +, +			this.init = new InitCommand(this);, +			this.init.run();, +	public InitCommand getInitCommand() {, +		return this.init;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +import groovy.lang.Closure;, +import java.util.Map;, +				this.compiler, +						.addCompilationCustomizers(new ScriptCompilationCustomizer());, +					Command script = ScriptCommand.command(type);, +					if (script != null) {, +						this.cli.register(script);, +					}, +					else if (CommandFactory.class.isAssignableFrom(type)) {, +						for (Command command : ((CommandFactory) type.newInstance()), +								.getCommands(this.cli)) {, +							this.cli.register(command);, +						}, +					}, +					else if (Commands.class.isAssignableFrom(type)) {, +						Map<String, Closure<?>> commands = ((Commands) type.newInstance()), +								.getCommands();, +						for (String command : commands.keySet()) {, +							this.cli.register(new ScriptCommand(command, commands, +									.get(command)));, +						}, +					}, +					else if (Script.class.isAssignableFrom(type)) {, +	public static interface Commands {, +		Map<String, Closure<?>> getCommands();, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	private InitCommand init;, +, +			this.init = new InitCommand(this);, +			this.init.run();, +	public InitCommand getInitCommand() {, +		return this.init;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +import groovy.lang.Closure;, +import java.util.Map;, +				this.compiler, +						.addCompilationCustomizers(new ScriptCompilationCustomizer());, +					Command script = ScriptCommand.command(type);, +					if (script != null) {, +						this.cli.register(script);, +					}, +					else if (CommandFactory.class.isAssignableFrom(type)) {, +						for (Command command : ((CommandFactory) type.newInstance()), +								.getCommands(this.cli)) {, +							this.cli.register(command);, +						}, +					}, +					else if (Commands.class.isAssignableFrom(type)) {, +						Map<String, Closure<?>> commands = ((Commands) type.newInstance()), +								.getCommands();, +						for (String command : commands.keySet()) {, +							this.cli.register(new ScriptCommand(command, commands, +									.get(command)));, +						}, +					}, +					else if (Script.class.isAssignableFrom(type)) {, +	public static interface Commands {, +		Map<String, Closure<?>> getCommands();, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ScriptCommand.java, +import groovy.lang.GroovyObject;, +	private String defaultName;, +	public ScriptCommand(String name, Object main) {, +		this.main = main;, +		this.defaultName = name;, +		if (this.main instanceof Command) {, +			return ((Command) this.main).getName();, +		else if (this.main instanceof GroovyObject) {, +			GroovyObject object = (GroovyObject) this.main;, +			if (object.getMetaClass().hasProperty(object, "name") != null) {, +				return (String) object.getProperty("name");, +			}, +		}, +, +		return this.defaultName;, +		if (this.main instanceof Command) {]