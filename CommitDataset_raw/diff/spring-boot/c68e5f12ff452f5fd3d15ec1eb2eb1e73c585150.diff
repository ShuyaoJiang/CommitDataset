[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfigureRegistrar.java, +class Neo4jRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfigureRegistrar.java, +class Neo4jRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java, + * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured., +		public SpringBootNeo4jConfiguration(, +				ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {, +		@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS), +		SessionFactoryProviderConfiguration(, +				org.neo4j.ogm.config.Configuration configuration) {, +				List<String> basePackages = AutoConfigurationPackages, +						.get(this.beanFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfigureRegistrar.java, +class Neo4jRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java, + * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured., +		public SpringBootNeo4jConfiguration(, +				ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {, +		@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS), +		SessionFactoryProviderConfiguration(, +				org.neo4j.ogm.config.Configuration configuration) {, +				List<String> basePackages = AutoConfigurationPackages, +						.get(this.beanFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperties.java, +			configuration.driverConfiguration().setCredentials(this.username,, +					this.password);, +				throw new IllegalArgumentException(, +						"Could not deduce driver to use based on URI '" + uri + "'");, +			throw new IllegalArgumentException(, +					"Invalid URI for spring.data.neo4j.uri '" + this.uri + "'", ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfigureRegistrar.java, +class Neo4jRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java, + * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured., +		public SpringBootNeo4jConfiguration(, +				ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {, +		@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS), +		SessionFactoryProviderConfiguration(, +				org.neo4j.ogm.config.Configuration configuration) {, +				List<String> basePackages = AutoConfigurationPackages, +						.get(this.beanFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperties.java, +			configuration.driverConfiguration().setCredentials(this.username,, +					this.password);, +				throw new IllegalArgumentException(, +						"Could not deduce driver to use based on URI '" + uri + "'");, +			throw new IllegalArgumentException(, +					"Invalid URI for spring.data.neo4j.uri '" + this.uri + "'", ex);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/alt/neo4j/CityNeo4jRepository.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfiguration.java, +@ConditionalOnMissingBean({ GraphRepositoryFactoryBean.class,, +		Neo4jRepositoryConfigurationExtension.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jRepositoriesAutoConfigureRegistrar.java, +class Neo4jRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfiguration.java, + * Registers a {@link Neo4jTemplate} bean if no other bean of the same type is configured., +		public SpringBootNeo4jConfiguration(, +				ObjectProvider<SessionFactoryProvider> sessionFactoryProvider) {, +		@Scope(scopeName = "${spring.data.neo4j.session.scope:singleton}", proxyMode = ScopedProxyMode.TARGET_CLASS), +		SessionFactoryProviderConfiguration(, +				org.neo4j.ogm.config.Configuration configuration) {, +				List<String> basePackages = AutoConfigurationPackages, +						.get(this.beanFactory);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperties.java, +			configuration.driverConfiguration().setCredentials(this.username,, +					this.password);, +				throw new IllegalArgumentException(, +						"Could not deduce driver to use based on URI '" + uri + "'");, +			throw new IllegalArgumentException(, +					"Invalid URI for spring.data.neo4j.uri '" + this.uri + "'", ex);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/alt/neo4j/CityNeo4jRepository.java, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false");, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false");]