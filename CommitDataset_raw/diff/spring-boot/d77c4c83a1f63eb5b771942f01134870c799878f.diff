[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-Configuration} for Elasticseach REST clients., +		this.builderCustomizers = builderCustomizers, +				.getIfAvailable(Collections::emptyList);, +		HttpHost[] hosts = this.properties.getUris().stream().map(HttpHost::create), +				.toArray(HttpHost[]::new);, +			builder.setHttpClientConfigCallback((httpClientBuilder) -> httpClientBuilder, +					.setDefaultCredentialsProvider(credentialsProvider));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-Configuration} for Elasticseach REST clients., +		this.builderCustomizers = builderCustomizers, +				.getIfAvailable(Collections::emptyList);, +		HttpHost[] hosts = this.properties.getUris().stream().map(HttpHost::create), +				.toArray(HttpHost[]::new);, +			builder.setHttpClientConfigCallback((httpClientBuilder) -> httpClientBuilder, +					.setDefaultCredentialsProvider(credentialsProvider));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfigurationTests.java, +		this.contextRunner, +				.run((context) -> assertThat(context).hasSingleBean(RestClient.class), +						.hasSingleBean(RestHighLevelClient.class));, +		this.contextRunner.withUserConfiguration(CustomRestClientConfiguration.class), +				.run((context) -> assertThat(context).hasSingleBean(RestClient.class), +						.hasBean("customRestClient"));, +		this.contextRunner.withUserConfiguration(BuilderCustomizerConfiguration.class), +					RestHighLevelClient client = context, +							.getBean(RestHighLevelClient.class);, +			return (builder) -> builder.setMaxRetryTimeoutMillis(42);]