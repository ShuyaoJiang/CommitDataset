[+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +		if (isInheritIOBroken()) {, +			return false;, +		}, +	// There's a bug in the Windows VM (https://bugs.openjdk.java.net/browse/JDK-8023130), +	// that means we need to avoid inheritIO, +	private static boolean isInheritIOBroken() {, +		if (!System.getProperty("os.name", "none").toLowerCase().contains("windows")) {, +			return false;, +		}, +		String runtime = System.getProperty("java.runtime.version");, +		if (!runtime.startsWith("1.7")) {, +			return false;, +		}, +		String[] tokens = runtime.split("_");, +		if (tokens.length < 2) {, +			return true; // No idea actually, shouldn't happen, +		}, +		try {, +			Integer build = Integer.valueOf(tokens[1].split("[^0-9]")[0]);, +			if (build < 60) {, +				return true;, +			}, +		}, +		catch (Exception e) {, +			return true;, +		}, +		return false;, +	}, +, +						System.out.flush();, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +		if (isInheritIOBroken()) {, +			return false;, +		}, +	// There's a bug in the Windows VM (https://bugs.openjdk.java.net/browse/JDK-8023130), +	// that means we need to avoid inheritIO, +	private static boolean isInheritIOBroken() {, +		if (!System.getProperty("os.name", "none").toLowerCase().contains("windows")) {, +			return false;, +		}, +		String runtime = System.getProperty("java.runtime.version");, +		if (!runtime.startsWith("1.7")) {, +			return false;, +		}, +		String[] tokens = runtime.split("_");, +		if (tokens.length < 2) {, +			return true; // No idea actually, shouldn't happen, +		}, +		try {, +			Integer build = Integer.valueOf(tokens[1].split("[^0-9]")[0]);, +			if (build < 60) {, +				return true;, +			}, +		}, +		catch (Exception e) {, +			return true;, +		}, +		return false;, +	}, +, +						System.out.flush();, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java, +						: "") + new File(ele.toURI()));, +			getLog().debug("Classpath for forked process: " + classpath);]