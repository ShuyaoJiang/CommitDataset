[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.security.access.AccessDeniedException;, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.web.bind.annotation.ControllerAdvice;, +import org.springframework.web.bind.annotation.ExceptionHandler;, +	@ConditionalOnWebApplication, +	@ControllerAdvice, +	@Order(Ordered.HIGHEST_PRECEDENCE + 10), +	protected static class SecurityExceptionRethrowingAdvice {, +, +		@ExceptionHandler({ AccessDeniedException.class, AuthenticationException.class }), +		public void handle(HttpServletRequest request, HttpServletResponse response,, +				Exception e) throws Exception {, +			throw e;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.security.access.AccessDeniedException;, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.web.bind.annotation.ControllerAdvice;, +import org.springframework.web.bind.annotation.ExceptionHandler;, +	@ConditionalOnWebApplication, +	@ControllerAdvice, +	@Order(Ordered.HIGHEST_PRECEDENCE + 10), +	protected static class SecurityExceptionRethrowingAdvice {, +, +		@ExceptionHandler({ AccessDeniedException.class, AuthenticationException.class }), +		public void handle(HttpServletRequest request, HttpServletResponse response,, +				Exception e) throws Exception {, +			throw e;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.core.annotation.Order;, +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.annotation.ControllerAdvice;, +import org.springframework.web.bind.annotation.ExceptionHandler;, +import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;, +@ControllerAdvice, +@Order(0), +	private DefaultHandlerExceptionResolver resolver = new DefaultHandlerExceptionResolver();, +, +	@ExceptionHandler(Exception.class), +	public void handle(HttpServletRequest request, HttpServletResponse response,, +			Exception e) throws Exception {, +		this.resolver.resolveException(request, response, null, e);, +		if (response.getStatus() == HttpServletResponse.SC_OK) {, +			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);, +		}, +		// There's only one exception so it's easier for the error controller to identify, +		// it this way..., +		request.setAttribute(ErrorController.class.getName(), e);, +		if (e instanceof BindException) {, +			// ... but other error pages might be looking for it here as well, +			request.setAttribute(, +					BindingResult.MODEL_KEY_PREFIX + ((BindException) e).getObjectName(),, +					e);, +		}, +	}, +, +					ErrorController.class.getName(), RequestAttributes.SCOPE_REQUEST);, +			if (error == null) {, +				error = (Throwable) attributes.getAttribute(, +						"javax.servlet.error.exception", RequestAttributes.SCOPE_REQUEST);, +			}, +				addMessage(map, error);, +			String path = (String) attributes.getAttribute(, +					"javax.servlet.error.request_uri", RequestAttributes.SCOPE_REQUEST);, +			map.put("path", path == null ? "No path available" : path);, +	protected void addMessage(Map<String, Object> map, Throwable error) {, +		if (error instanceof BindingResult) {, +			BindingResult result = (BindingResult) error;, +			if (result.getErrorCount() > 0) {, +				map.put("errors", result.getAllErrors());, +				map.put("message",, +						"Validation failed for object='" + result.getObjectName(), +								+ "'. Error count: " + result.getErrorCount());, +			}, +			else {, +				map.put("message", "No errors");, +			}, +		}, +		else {, +			map.put("message", error.getMessage());, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;]