[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		if (annotation != null) {, +		Object target = bean;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		if (annotation != null) {, +		Object target = bean;, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		if (annotation != null) {, +		Object target = bean;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationProperties.java, +	 * Convenient way to quickly register {@link ConfigurationProperties} annotated, +	 * beans with Spring. Standard Spring Beans will also be scanned regardless of, +	 * this value., +	 * @return {@link ConfigurationProperties} annotated beans to register, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		if (annotation != null) {, +		Object target = bean;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationProperties.java, +	 * Convenient way to quickly register {@link ConfigurationProperties} annotated, +	 * beans with Spring. Standard Spring Beans will also be scanned regardless of, +	 * this value., +	 * @return {@link ConfigurationProperties} annotated beans to register, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.util.Assert;, + * @author Stephane Nicoll, +			Assert.notNull(properties, "No " + ConfigurationProperties.class.getSimpleName(), +					+ " annotation found on  '" + type.getName() + "'.");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, + * Copyright 2012-2015 the original author or authors., + * @see EnableConfigurationProperties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +		if (annotation != null) {, +		Object target = bean;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationProperties.java, +	 * Convenient way to quickly register {@link ConfigurationProperties} annotated, +	 * beans with Spring. Standard Spring Beans will also be scanned regardless of, +	 * this value., +	 * @return {@link ConfigurationProperties} annotated beans to register, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.util.Assert;, + * @author Stephane Nicoll, +			Assert.notNull(properties, "No " + ConfigurationProperties.class.getSimpleName(), +					+ " annotation found on  '" + type.getName() + "'.");, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +	@Test, +	public void bindWithoutConfigurationPropertiesAnnotation() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "name:foo");, +		this.context.register(ConfigurationPropertiesWithoutAnnotation.class);, +, +		this.thrown.expect(IllegalArgumentException.class);, +		this.thrown.expectMessage("No ConfigurationProperties annotation found");, +		this.context.refresh();, +	}, +, +	@Configuration, +	@EnableConfigurationProperties(PropertyWithoutConfigurationPropertiesAnnotation.class), +	public static class ConfigurationPropertiesWithoutAnnotation {, +, +, +	}, +, +	public static class PropertyWithoutConfigurationPropertiesAnnotation {, +, +		private String name;, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setName(String name) {, +			this.name = name;]