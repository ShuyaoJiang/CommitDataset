[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, + * Copyright 2012-2015 the original author or authors., +import java.lang.reflect.Field;, +import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;, +import org.springframework.util.ReflectionUtils;, + * @author Andy Wilkinson, +		List<HttpMessageConverter<?>> combined = getCombinedConverters(converters,, +				addDefaultConverters ? getDefaultConverters(), +						: Collections.<HttpMessageConverter<?>>emptyList());, +		combined = postProcessConverters(combined);, +		this.converters = Collections.unmodifiableList(combined);, +	}, +, +	private List<HttpMessageConverter<?>> getCombinedConverters(, +			Collection<HttpMessageConverter<?>> converters,, +			List<HttpMessageConverter<?>> defaultConverters) {, +		for (HttpMessageConverter<?> defaultConverter : defaultConverters) {, +			if (defaultConverter instanceof AllEncompassingFormHttpMessageConverter) {, +				configurePartConverters(, +						(AllEncompassingFormHttpMessageConverter) defaultConverter,, +						converters);, +		return combined;, +	private void configurePartConverters(, +			AllEncompassingFormHttpMessageConverter formConverter,, +			Collection<HttpMessageConverter<?>> converters) {, +		List<HttpMessageConverter<?>> partConverters = extractPartConverters(, +				formConverter);, +		List<HttpMessageConverter<?>> combinedConverters = getCombinedConverters(, +				converters, partConverters);, +		combinedConverters = postProcessPartConverters(combinedConverters);, +		formConverter.setPartConverters(combinedConverters);, +	}, +, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			AllEncompassingFormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(, +				AllEncompassingFormHttpMessageConverter.class, "partConverters");, +		ReflectionUtils.makeAccessible(field);, +		@SuppressWarnings("unchecked"), +		List<HttpMessageConverter<?>> partConverters = (List<HttpMessageConverter<?>>) ReflectionUtils, +				.getField(field, formConverter);, +		return partConverters;, +	}, +, +	/**, +	 * Method that can be used to post-process the {@link HttpMessageConverter} list, +	 * before it is used to configure the part converters of, +	 * {@link AllEncompassingFormHttpMessageConverter}., +	 * @param converters a mutable list of the converters that will be used., +	 * @return the final converts list to use, +	 * @since 1.3.0, +	 */, +	protected List<HttpMessageConverter<?>> postProcessPartConverters(, +			List<HttpMessageConverter<?>> converters) {, +		return converters;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, + * Copyright 2012-2015 the original author or authors., +import java.lang.reflect.Field;, +import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;, +import org.springframework.util.ReflectionUtils;, + * @author Andy Wilkinson, +		List<HttpMessageConverter<?>> combined = getCombinedConverters(converters,, +				addDefaultConverters ? getDefaultConverters(), +						: Collections.<HttpMessageConverter<?>>emptyList());, +		combined = postProcessConverters(combined);, +		this.converters = Collections.unmodifiableList(combined);, +	}, +, +	private List<HttpMessageConverter<?>> getCombinedConverters(, +			Collection<HttpMessageConverter<?>> converters,, +			List<HttpMessageConverter<?>> defaultConverters) {, +		for (HttpMessageConverter<?> defaultConverter : defaultConverters) {, +			if (defaultConverter instanceof AllEncompassingFormHttpMessageConverter) {, +				configurePartConverters(, +						(AllEncompassingFormHttpMessageConverter) defaultConverter,, +						converters);, +		return combined;, +	private void configurePartConverters(, +			AllEncompassingFormHttpMessageConverter formConverter,, +			Collection<HttpMessageConverter<?>> converters) {, +		List<HttpMessageConverter<?>> partConverters = extractPartConverters(, +				formConverter);, +		List<HttpMessageConverter<?>> combinedConverters = getCombinedConverters(, +				converters, partConverters);, +		combinedConverters = postProcessPartConverters(combinedConverters);, +		formConverter.setPartConverters(combinedConverters);, +	}, +, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			AllEncompassingFormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(, +				AllEncompassingFormHttpMessageConverter.class, "partConverters");, +		ReflectionUtils.makeAccessible(field);, +		@SuppressWarnings("unchecked"), +		List<HttpMessageConverter<?>> partConverters = (List<HttpMessageConverter<?>>) ReflectionUtils, +				.getField(field, formConverter);, +		return partConverters;, +	}]