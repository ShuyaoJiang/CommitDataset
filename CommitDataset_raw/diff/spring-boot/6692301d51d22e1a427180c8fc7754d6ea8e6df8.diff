[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +			builder = builder.keyValueServiceConfig(KeyValueServiceConfig.create(, +					endpoints.getKeyValue()));, +			CouchbaseServiceConfig queryConfig = determineCouchbaseServiceConfig(, +					endpoints.getQueryservice(), endpoints.getQuery());, +			builder = builder.queryServiceConfig(QueryServiceConfig.create(, +					queryConfig.minEndpoints, queryConfig.maxEndpoints));, +				CouchbaseServiceConfig viewConfig = determineCouchbaseServiceConfig(, +						endpoints.getViewservice(), endpoints.getView());, +						.viewServiceConfig(ViewServiceConfig.create(, +								viewConfig.minEndpoints, viewConfig.maxEndpoints));, +		private CouchbaseServiceConfig determineCouchbaseServiceConfig(, +				CouchbaseProperties.Endpoints.CouchbaseService couchbaseService,, +				Integer fallback) {, +			if (couchbaseService.getMinEndpoints() != 1, +					|| couchbaseService.getMaxEndpoints() != 1) {, +				return new CouchbaseServiceConfig(couchbaseService.getMinEndpoints(),, +						couchbaseService.getMaxEndpoints());, +			}, +			int endpoints = (fallback != null ? fallback : 1);, +			return new CouchbaseServiceConfig(endpoints, endpoints);, +		}, +, +		private static class CouchbaseServiceConfig {, +			private int minEndpoints;, +			private int maxEndpoints;, +, +			CouchbaseServiceConfig(int minEndpoints, int maxEndpoints) {, +				this.minEndpoints = minEndpoints;, +				this.maxEndpoints = maxEndpoints;, +			}, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +			builder = builder.keyValueServiceConfig(KeyValueServiceConfig.create(, +					endpoints.getKeyValue()));, +			CouchbaseServiceConfig queryConfig = determineCouchbaseServiceConfig(, +					endpoints.getQueryservice(), endpoints.getQuery());, +			builder = builder.queryServiceConfig(QueryServiceConfig.create(, +					queryConfig.minEndpoints, queryConfig.maxEndpoints));, +				CouchbaseServiceConfig viewConfig = determineCouchbaseServiceConfig(, +						endpoints.getViewservice(), endpoints.getView());, +						.viewServiceConfig(ViewServiceConfig.create(, +								viewConfig.minEndpoints, viewConfig.maxEndpoints));, +		private CouchbaseServiceConfig determineCouchbaseServiceConfig(, +				CouchbaseProperties.Endpoints.CouchbaseService couchbaseService,, +				Integer fallback) {, +			if (couchbaseService.getMinEndpoints() != 1, +					|| couchbaseService.getMaxEndpoints() != 1) {, +				return new CouchbaseServiceConfig(couchbaseService.getMinEndpoints(),, +						couchbaseService.getMaxEndpoints());, +			}, +			int endpoints = (fallback != null ? fallback : 1);, +			return new CouchbaseServiceConfig(endpoints, endpoints);, +		}, +, +		private static class CouchbaseServiceConfig {, +			private int minEndpoints;, +			private int maxEndpoints;, +, +			CouchbaseServiceConfig(int minEndpoints, int maxEndpoints) {, +				this.minEndpoints = minEndpoints;, +				this.maxEndpoints = maxEndpoints;, +			}, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, + * Copyright 2012-2018 the original author or authors., +		 * Query (N1QL) service configuration., +		 */, +		private final CouchbaseService queryservice = new CouchbaseService();, +, +		/**, +		 * View service configuration., +		 */, +		private final CouchbaseService viewservice = new CouchbaseService();, +, +		/**, +		private Integer query;, +		private Integer view;, +		@Deprecated, +		@DeprecatedConfigurationProperty(replacement = "spring.couchbase.env.endpoints.queryservice.max-endpoints"), +		public Integer getQuery() {, +		public void setQuery(Integer query) {, +		public CouchbaseService getQueryservice() {, +			return this.queryservice;, +		}, +, +		@DeprecatedConfigurationProperty(replacement = "spring.couchbase.env.endpoints.viewservice.max-endpoints"), +		public Integer getView() {, +		public void setView(Integer view) {, +		public CouchbaseService getViewservice() {, +		public static class CouchbaseService {, +			 * Minimum number of sockets per node., +, +			 * Maximum number of sockets per node., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java]