[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	public WebClient.Builder webClientBuilder() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	public WebClient.Builder webClientBuilder() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(WebClientAutoConfiguration.class));, +	@Test, +	public void shouldCreateBuilder() {, +		this.contextRunner, +				.run((context) -> {, +					WebClient.Builder builder = context.getBean(WebClient.Builder.class);, +					WebClient webClient = builder.build();, +					assertThat(webClient).isNotNull();, +				});, +, +		this.contextRunner.withUserConfiguration(CodecConfiguration.class), +				.run((context) -> {, +					WebClient.Builder builder = context.getBean(WebClient.Builder.class);, +					CodecCustomizer codecCustomizer = context.getBean(CodecCustomizer.class);, +					WebClientCodecCustomizer clientCustomizer = context, +				});, +		this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class), +				.run((context) -> {, +					WebClient.Builder builder = context.getBean(WebClient.Builder.class);, +					WebClientCustomizer customizer = context.getBean(WebClientCustomizer.class);, +				});, +		this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class), +				.run((context) -> {, +					WebClient.Builder firstBuilder = context.getBean(WebClient.Builder.class);, +					WebClient.Builder secondBuilder = context.getBean(WebClient.Builder.class);, +					WebClientCustomizer customizer = context.getBean(WebClientCustomizer.class);, +				});, +		this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class,, +				CustomWebClientBuilderConfig.class), +				.run((context) -> {, +					WebClient.Builder builder = context.getBean(WebClient.Builder.class);, +				});]