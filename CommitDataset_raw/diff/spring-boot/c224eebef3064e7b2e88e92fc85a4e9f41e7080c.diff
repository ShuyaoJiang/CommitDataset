[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/ServerWebExchangeTraceableRequest.java, +	private static String getRemoteAddress(ServerHttpRequest request) {, +		InetSocketAddress remoteAddress = request.getRemoteAddress();, +		InetAddress address = (remoteAddress != null) ? remoteAddress.getAddress() : null;, +		return (address != null) ? address.toString() : null;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/ServerWebExchangeTraceableRequest.java, +	private static String getRemoteAddress(ServerHttpRequest request) {, +		InetSocketAddress remoteAddress = request.getRemoteAddress();, +		InetAddress address = (remoteAddress != null) ? remoteAddress.getAddress() : null;, +		return (address != null) ? address.toString() : null;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/reactive/ServerWebExchangeTraceableRequestTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.exchange.getRequest()).willReturn(this.request);, +		given(this.request.getMethodValue()).willReturn(method);, +		given(this.request.getURI()).willReturn(uri);, +		given(this.request.getHeaders()).willReturn(httpHeaders);, +		InetSocketAddress socketAddress = InetSocketAddress, +				.createUnresolved("unresolved.example.com", 8080);, +		given(this.request.getRemoteAddress()).willReturn(socketAddress);, +		given(this.request.getRemoteAddress()).willReturn(socketAddress);]