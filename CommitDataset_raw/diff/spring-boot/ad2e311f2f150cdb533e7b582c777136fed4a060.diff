[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java, +					.addResourceLocations("classpath:/META-INF/resources/"), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java, +					.addResourceLocations("classpath:/META-INF/resources/"), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, + * @author Dave Syer, +			if (!beanClasses.isEmpty()) {, +				this.logger.debug("Looking for beans with class: " + beanClasses);, +				this.logger.debug("Found beans with classes: " + beanClassesFound);, +			}, +, +			if (!beanNames.isEmpty()) {, +				this.logger.debug("Looking for beans with names: " + beanNames);, +				this.logger.debug("Found beans with names: " + beanNamesFound);, +			}, +			this.logger.debug("Match result is: " + result);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java, +					.addResourceLocations("classpath:/META-INF/resources/"), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, + * @author Dave Syer, +			if (!beanClasses.isEmpty()) {, +				this.logger.debug("Looking for beans with class: " + beanClasses);, +				this.logger.debug("Found beans with classes: " + beanClassesFound);, +			}, +, +			if (!beanNames.isEmpty()) {, +				this.logger.debug("Looking for beans with names: " + beanNames);, +				this.logger.debug("Found beans with names: " + beanNamesFound);, +			}, +			this.logger.debug("Match result is: " + result);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnClassCondition.java, +						logger.debug("Class not found: " + className, +			logger.debug("All classes found (search terminated with matches=true)");, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java, +					.addResourceLocations("classpath:/META-INF/resources/"), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, + * @author Dave Syer, +			if (!beanClasses.isEmpty()) {, +				this.logger.debug("Looking for beans with class: " + beanClasses);, +				this.logger.debug("Found beans with classes: " + beanClassesFound);, +			}, +, +			if (!beanNames.isEmpty()) {, +				this.logger.debug("Looking for beans with names: " + beanNames);, +				this.logger.debug("Found beans with names: " + beanNamesFound);, +			}, +			this.logger.debug("Match result is: " + result);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnClassCondition.java, +						logger.debug("Class not found: " + className, +			logger.debug("All classes found (search terminated with matches=true)");, +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/annotation/OnBeanConditionTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.bootstrap.context.annotation;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.context.annotation.ImportResource;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +/**, + * @author Dave Syer, + * , + */, +@Ignore, +public class OnBeanConditionTests {, +, +	private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +, +	@Test, +	public void testNameOnBeanCondition() {, +		this.context.register(FooConfiguration.class, OnBeanNameConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("bar"));, +		assertEquals("bar", this.context.getBean("bar"));, +	}, +, +	@Test, +	public void testNameOnBeanConditionReverseOrder() {, +		this.context.register(OnBeanNameConfiguration.class, FooConfiguration.class);, +		this.context.refresh();]