[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.Properties;, +		Bindable<?> resolvedTarget = resolveTarget(target);, +			new EntryBinder(name, resolvedTarget, elementBinder).bindEntries(source, map);, +	private Bindable<?> resolveTarget(Bindable<?> target) {, +		Class<?> type = target.getType().resolve();, +		if (Properties.class.isAssignableFrom(type)) {, +			return Bindable.mapOf(String.class, String.class);, +		}, +		return target;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.Properties;, +		Bindable<?> resolvedTarget = resolveTarget(target);, +			new EntryBinder(name, resolvedTarget, elementBinder).bindEntries(source, map);, +	private Bindable<?> resolveTarget(Bindable<?> target) {, +		Class<?> type = target.getType().resolve();, +		if (Properties.class.isAssignableFrom(type)) {, +			return Bindable.mapOf(String.class, String.class);, +		}, +		return target;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +import java.util.Properties;, +	@Test, +	public void bindToPropertiesShouldBeEquivalentToMapOfStringString() throws Exception {, +		this.sources, +				.add(new MockConfigurationPropertySource("foo.bar.baz", "1", "line1"));, +		BindHandler handler = mock(BindHandler.class,, +				withSettings().defaultAnswer(Answers.CALLS_REAL_METHODS));, +		Bindable<Properties> target = Bindable.of(Properties.class);, +		this.binder.bind("foo", target, handler);, +		InOrder inOrder = inOrder(handler);, +		inOrder.verify(handler).onSuccess(eq(ConfigurationPropertyName.of("foo.bar.baz")),, +				eq(Bindable.of(String.class)), any(), eq("1"));, +		inOrder.verify(handler).onSuccess(eq(ConfigurationPropertyName.of("foo")),, +				eq(target), any(), isA(Properties.class));, +	}, +]