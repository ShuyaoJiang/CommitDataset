[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.lang.reflect.Field;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import com.fasterxml.jackson.databind.PropertyNamingStrategy;, + * @author Marcel Overdijk, +			configureDateFormat(objectMapper);, +			configurePropertyNamingStrategy(objectMapper);, +, +		private void configurePropertyNamingStrategy(ObjectMapper objectMapper) {, +			// We support a fully qualified class name extending Jackson's, +			// PropertyNamingStrategy or a string value corresponding to the constant, +			// names in PropertyNamingStrategy which hold default provided implementations, +			String propertyNamingStrategy = this.jacksonProperties, +					.getPropertyNamingStrategy();, +			if (propertyNamingStrategy != null) {, +				try {, +					Class<?> clazz = ClassUtils.forName(propertyNamingStrategy, null);, +					objectMapper, +							.setPropertyNamingStrategy((PropertyNamingStrategy) BeanUtils, +									.instantiateClass(clazz));, +				}, +				catch (ClassNotFoundException e) {, +					// Find the field (this way we automatically support new constants, +					// that may be added by Jackson in the future), +					Field field = ReflectionUtils.findField(PropertyNamingStrategy.class,, +							propertyNamingStrategy, PropertyNamingStrategy.class);, +					if (field != null) {, +						try {, +							objectMapper, +									.setPropertyNamingStrategy((PropertyNamingStrategy) field, +											.get(null));, +						}, +						catch (Exception ex) {, +							throw new IllegalStateException(ex);, +						}, +					}, +					else {, +						throw new IllegalArgumentException("Constant named '", +								+ propertyNamingStrategy + "' not found on ", +								+ PropertyNamingStrategy.class.getName());, +					}, +				}, +			}, +		}, +, +		private void configureDateFormat(ObjectMapper objectMapper) {, +			// We support a fully qualified class name extending DateFormat or a date, +			// pattern string value, +			String dateFormat = this.jacksonProperties.getDateFormat();, +			if (dateFormat != null) {, +				try {, +					Class<?> clazz = ClassUtils.forName(dateFormat, null);, +					objectMapper.setDateFormat((DateFormat) BeanUtils, +							.instantiateClass(clazz));, +				}, +				catch (ClassNotFoundException e) {, +					objectMapper.setDateFormat(new SimpleDateFormat(dateFormat));, +				}, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.lang.reflect.Field;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import com.fasterxml.jackson.databind.PropertyNamingStrategy;, + * @author Marcel Overdijk, +			configureDateFormat(objectMapper);, +			configurePropertyNamingStrategy(objectMapper);, +, +		private void configurePropertyNamingStrategy(ObjectMapper objectMapper) {, +			// We support a fully qualified class name extending Jackson's, +			// PropertyNamingStrategy or a string value corresponding to the constant, +			// names in PropertyNamingStrategy which hold default provided implementations, +			String propertyNamingStrategy = this.jacksonProperties, +					.getPropertyNamingStrategy();, +			if (propertyNamingStrategy != null) {, +				try {, +					Class<?> clazz = ClassUtils.forName(propertyNamingStrategy, null);, +					objectMapper, +							.setPropertyNamingStrategy((PropertyNamingStrategy) BeanUtils, +									.instantiateClass(clazz));, +				}, +				catch (ClassNotFoundException e) {, +					// Find the field (this way we automatically support new constants, +					// that may be added by Jackson in the future), +					Field field = ReflectionUtils.findField(PropertyNamingStrategy.class,, +							propertyNamingStrategy, PropertyNamingStrategy.class);, +					if (field != null) {, +						try {, +							objectMapper, +									.setPropertyNamingStrategy((PropertyNamingStrategy) field, +											.get(null));]