[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.apache.coyote.http11.AbstractHttp11Protocol;, +		private int maxHttpHeaderSize = 0; // bytes, +, +		public int getMaxHttpHeaderSize() {, +			return maxHttpHeaderSize;, +		}, +, +		public void setMaxHttpHeaderSize(int maxHttpHeaderSize) {, +			this.maxHttpHeaderSize = maxHttpHeaderSize;, +		}, +, +			if (this.maxHttpHeaderSize > 0) {, +				factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +					@Override, +					public void customize(Connector connector) {, +						ProtocolHandler handler = connector.getProtocolHandler();, +						if (handler instanceof AbstractHttp11Protocol) {, +							AbstractHttp11Protocol protocol = (AbstractHttp11Protocol) handler;, +							protocol.setMaxHttpHeaderSize(Tomcat.this.maxHttpHeaderSize);, +						}, +					}, +				});, +			}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.apache.coyote.http11.AbstractHttp11Protocol;, +		private int maxHttpHeaderSize = 0; // bytes, +, +		public int getMaxHttpHeaderSize() {, +			return maxHttpHeaderSize;, +		}, +, +		public void setMaxHttpHeaderSize(int maxHttpHeaderSize) {, +			this.maxHttpHeaderSize = maxHttpHeaderSize;, +		}, +, +			if (this.maxHttpHeaderSize > 0) {, +				factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +					@Override, +					public void customize(Connector connector) {, +						ProtocolHandler handler = connector.getProtocolHandler();, +						if (handler instanceof AbstractHttp11Protocol) {, +							AbstractHttp11Protocol protocol = (AbstractHttp11Protocol) handler;, +							protocol.setMaxHttpHeaderSize(Tomcat.this.maxHttpHeaderSize);, +						}, +					}, +				});, +			}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +	}, +, +	@Test, +    public void testCustomizeTomcatHeaderSize() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.maxHttpHeaderSize", "9999");, +		new RelaxedDataBinder(this.properties, "server").bind(new MutablePropertyValues(, +				map));, +		assertEquals(9999, this.properties.getTomcat().getMaxHttpHeaderSize());]