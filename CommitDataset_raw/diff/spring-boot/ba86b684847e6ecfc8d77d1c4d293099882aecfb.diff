[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +	private static final String NOOP_PASSWORD_PREFIX = "{noop}";, +, +	private static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern, +			.compile("^\\{.+}.*$");, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(, +			SecurityProperties properties,, +				User.withUsername(user.getName()), +						.password(getOrDeducePassword(user,, +								passwordEncoder.getIfAvailable())), +	public String getOrDeducePassword(SecurityProperties.User user,, +			PasswordEncoder encoder) {, +		String password = user.getPassword();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n",, +					user.getPassword()));, +		if (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {, +		return NOOP_PASSWORD_PREFIX + password;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +	private static final String NOOP_PASSWORD_PREFIX = "{noop}";, +, +	private static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern, +			.compile("^\\{.+}.*$");, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(, +			SecurityProperties properties,, +				User.withUsername(user.getName()), +						.password(getOrDeducePassword(user,, +								passwordEncoder.getIfAvailable())), +	public String getOrDeducePassword(SecurityProperties.User user,, +			PasswordEncoder encoder) {, +		String password = user.getPassword();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n",, +					user.getPassword()));, +		if (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {, +		return NOOP_PASSWORD_PREFIX + password;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +	private static final String NOOP_PASSWORD_PREFIX = "{noop}";, +	private static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern, +			.compile("^\\{.+}.*$");, +		UserDetails userDetails = getUserDetails(user,, +				getOrDeducePassword(user, passwordEncoder.getIfAvailable()));, +		return new MapReactiveUserDetailsService(userDetails);, +	}, +, +	private UserDetails getUserDetails(SecurityProperties.User user, String password) {, +		List<String> roles = user.getRoles();, +		return User.withUsername(user.getName()).password(password), +				.roles(roles.toArray(new String[roles.size()])).build();, +	}, +, +	private String getOrDeducePassword(SecurityProperties.User user,, +			PasswordEncoder encoder) {, +		String password = user.getPassword();, +		if (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {, +		return NOOP_PASSWORD_PREFIX + password;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +	private static final String NOOP_PASSWORD_PREFIX = "{noop}";, +, +	private static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern, +			.compile("^\\{.+}.*$");, +	public InMemoryUserDetailsManager inMemoryUserDetailsManager(, +			SecurityProperties properties,, +				User.withUsername(user.getName()), +						.password(getOrDeducePassword(user,, +								passwordEncoder.getIfAvailable())), +	public String getOrDeducePassword(SecurityProperties.User user,, +			PasswordEncoder encoder) {, +		String password = user.getPassword();, +		if (user.isPasswordGenerated()) {, +			logger.info(String.format("%n%nUsing generated security password: %s%n",, +					user.getPassword()));, +		if (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {, +		return NOOP_PASSWORD_PREFIX + password;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +	private static final String NOOP_PASSWORD_PREFIX = "{noop}";, +	private static final Pattern PASSWORD_ALGORITHM_PATTERN = Pattern, +			.compile("^\\{.+}.*$");, +		UserDetails userDetails = getUserDetails(user,, +				getOrDeducePassword(user, passwordEncoder.getIfAvailable()));, +		return new MapReactiveUserDetailsService(userDetails);, +	}, +, +	private UserDetails getUserDetails(SecurityProperties.User user, String password) {, +		List<String> roles = user.getRoles();, +		return User.withUsername(user.getName()).password(password), +				.roles(roles.toArray(new String[roles.size()])).build();, +	}, +, +	private String getOrDeducePassword(SecurityProperties.User user,, +			PasswordEncoder encoder) {, +		String password = user.getPassword();, +		if (encoder != null || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) {, +		return NOOP_PASSWORD_PREFIX + password;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/format/WebConversionService.java, + * {@link org.springframework.format.support.FormattingConversionService} dedicated to web, + * applications for formatting and converting values to/from the web.]