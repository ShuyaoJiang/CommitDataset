[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/util/ResourceUtils.java, +				result.add(absolutePath(resource));, +				childFiles.add(absolutePath(child));, +	private static String absolutePath(Resource resource) throws IOException {, +		if (!resource.getURI().getScheme().equals("file")) {, +			return resource.getURL().toExternalForm();, +		}, +		return resource.getFile().getAbsoluteFile().toURI().toString();, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/util/ResourceUtils.java, +				result.add(absolutePath(resource));, +				childFiles.add(absolutePath(child));, +	private static String absolutePath(Resource resource) throws IOException {, +		if (!resource.getURI().getScheme().equals("file")) {, +			return resource.getURL().toExternalForm();, +		}, +		return resource.getFile().getAbsoluteFile().toURI().toString();, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/util/ResourceUtilsTests.java, +import java.io.File;, +import java.net.URL;, +import java.net.URLClassLoader;, +	public void duplicateResource() throws Exception {, +		URLClassLoader loader = new URLClassLoader(new URL[] {, +				new URL("file:./src/test/resources/"),, +				new File("src/test/resources/").getAbsoluteFile().toURI().toURL() });, +		List<String> urls = ResourceUtils.getUrls("classpath:init.groovy", loader);, +		assertEquals(1, urls.size());, +		assertTrue(urls.get(0).startsWith("file:"));, +	}, +, +	@Test]