[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, +				Class<?>[] compiledSources = compile();, +	private Class<?>[] compile() throws IOException {, +		Class<?>[] compiledSources = this.compiler.compile(this.sources);, +		private final Class<?>[] compiledSources;, +		RunThread(Class<?>... compiledSources) {, +			if (compiledSources.length != 0) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, +				Class<?>[] compiledSources = compile();, +	private Class<?>[] compile() throws IOException {, +		Class<?>[] compiledSources = this.compiler.compile(this.sources);, +		private final Class<?>[] compiledSources;, +		RunThread(Class<?>... compiledSources) {, +			if (compiledSources.length != 0) {, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/app/SpringApplicationLauncherTests.java, +		Class<?>[] sources = new Class<?>[0];, +			new TestSpringApplicationLauncher(classLoader).launch(new Class<?>[0],, +		public TestSpringApplication(Class<?>[] sources) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, +				Class<?>[] compiledSources = compile();, +	private Class<?>[] compile() throws IOException {, +		Class<?>[] compiledSources = this.compiler.compile(this.sources);, +		private final Class<?>[] compiledSources;, +		RunThread(Class<?>... compiledSources) {, +			if (compiledSources.length != 0) {, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/app/SpringApplicationLauncherTests.java, +		Class<?>[] sources = new Class<?>[0];, +			new TestSpringApplicationLauncher(classLoader).launch(new Class<?>[0],, +		public TestSpringApplication(Class<?>[] sources) {, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +Spring Boot favors Java-based configuration. Although it is possible to use, +`SpringApplication` with an XML sources, we generally recommend that your primary, +source is a single `@Configuration` class. Usually the class that defines the `main`, +method is also a good candidate as the primary `@Configuration`., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, +				Class<?>[] compiledSources = compile();, +	private Class<?>[] compile() throws IOException {, +		Class<?>[] compiledSources = this.compiler.compile(this.sources);, +		private final Class<?>[] compiledSources;, +		RunThread(Class<?>... compiledSources) {, +			if (compiledSources.length != 0) {, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/app/SpringApplicationLauncherTests.java, +		Class<?>[] sources = new Class<?>[0];, +			new TestSpringApplicationLauncher(classLoader).launch(new Class<?>[0],, +		public TestSpringApplication(Class<?>[] sources) {, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +Spring Boot favors Java-based configuration. Although it is possible to use, +`SpringApplication` with an XML sources, we generally recommend that your primary, +source is a single `@Configuration` class. Usually the class that defines the `main`, +method is also a good candidate as the primary `@Configuration`., +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/sample/xml/SampleSpringXmlApplication.java, +import java.util.Collections;, +, +	private static final String CONTEXT_XML = "classpath:/META-INF/application-context.xml";, +, +		SpringApplication application = new SpringApplication();, +		application.setSources(Collections.singleton(CONTEXT_XML));, +		application.run(args);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, +	public Object launch(Class<?>[] sources, String[] args) throws Exception {, +		Constructor<?> constructor = applicationClass.getConstructor(Class[].class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, +	private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java, +				Class<?>[] compiledSources = compile();, +	private Class<?>[] compile() throws IOException {, +		Class<?>[] compiledSources = this.compiler.compile(this.sources);, +		private final Class<?>[] compiledSources;, +		RunThread(Class<?>... compiledSources) {, +			if (compiledSources.length != 0) {, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/app/SpringApplicationLauncherTests.java, +		Class<?>[] sources = new Class<?>[0];]