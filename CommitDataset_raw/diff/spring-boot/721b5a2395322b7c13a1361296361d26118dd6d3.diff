[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +	static class ConfigAvailableCondition extends ResourceCondition {, +			super("EhCache", "spring.cache.ehcache", "config", "classpath:/ehcache.xml");, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +	static class ConfigAvailableCondition extends ResourceCondition {, +			super("EhCache", "spring.cache.ehcache", "config", "classpath:/ehcache.xml");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.Closeable;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastConfigResourceCondition;, +import org.springframework.cache.CacheManager;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.io.Resource;, +, + * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that, + * has been configured by the general {@link HazelcastAutoConfiguration} or create, + * a separate one if the {@code spring.cache.hazelcast.config} property has been set., + * <p>, + * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure, + * a default {@link HazelcastInstance} is still made, using the same defaults., + * @see HazelcastConfigResourceCondition, +@Conditional(CacheCondition.class), +@AutoConfigureAfter(HazelcastAutoConfiguration.class), +	@Configuration, +	@ConditionalOnSingleCandidate(HazelcastInstance.class), +	static class ExistingHazelcastInstanceConfiguration {, +		public HazelcastCacheManager cacheManager(HazelcastInstance existingHazelcastInstance), +				throws IOException {, +			Resource location = this.cacheProperties, +					.resolveConfigLocation(this.cacheProperties.getHazelcast().getConfig());, +			if (location != null) {, +				HazelcastInstance cacheHazelcastInstance =, +						HazelcastAutoConfiguration.createHazelcastInstance(location);, +				return new CloseableHazelcastCacheManager(cacheHazelcastInstance);, +			}, +			else {, +				return new HazelcastCacheManager(existingHazelcastInstance);, +		}, +	}, +, +	@Configuration, +	@ConditionalOnMissingBean(HazelcastInstance.class), +	@Conditional(ConfigAvailableCondition.class), +	static class DefaultHazelcastInstanceConfiguration {, +, +		@Autowired, +		private CacheProperties cacheProperties;, +, +				HazelcastAutoConfiguration.createHazelcastInstance(location);, +		@Bean, +		public HazelcastCacheManager cacheManager() throws IOException {, +			return new HazelcastCacheManager(hazelcastInstance());, +		}, +, +	}, +, +	 * {@link HazelcastConfigResourceCondition} that checks if the, +	 * {@code spring.cache.hazelcast.config} configuration key is defined., +	static class ConfigAvailableCondition extends HazelcastConfigResourceCondition {, +			super("spring.cache.hazelcast", "config");, +		}, +, +	}, +, +	private static class CloseableHazelcastCacheManager extends HazelcastCacheManager implements Closeable {, +		private final HazelcastInstance hazelcastInstance;, +, +		public CloseableHazelcastCacheManager(HazelcastInstance hazelcastInstance) {, +			super(hazelcastInstance);, +			this.hazelcastInstance = hazelcastInstance;, +		public void close() throws IOException {, +			this.hazelcastInstance.shutdown();, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +	static class ConfigAvailableCondition extends ResourceCondition {, +			super("EhCache", "spring.cache.ehcache", "config", "classpath:/ehcache.xml");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.Closeable;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration;, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastConfigResourceCondition;, +import org.springframework.cache.CacheManager;, +import org.springframework.context.annotation.Bean;]