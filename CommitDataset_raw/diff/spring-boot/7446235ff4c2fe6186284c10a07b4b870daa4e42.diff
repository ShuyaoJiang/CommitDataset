[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(, +				JestClient client) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(, +				JestClient client) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({ ElasticsearchHealthIndicatorConfiguration.ElasticsearchSpringDataHealthIndicatorConfiguration.class,, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(, +				JestClient client) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({ ElasticsearchHealthIndicatorConfiguration.ElasticsearchSpringDataHealthIndicatorConfiguration.class,, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicator.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(, +				JestClient client) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({ ElasticsearchHealthIndicatorConfiguration.ElasticsearchSpringDataHealthIndicatorConfiguration.class,, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicator.java, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchJestHealthIndicatorTests.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(, +				JestClient client) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@Import({ ElasticsearchHealthIndicatorConfiguration.ElasticsearchSpringDataHealthIndicatorConfiguration.class,, +		ElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicator.java, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchJestHealthIndicatorTests.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jest/JestAutoConfiguration.java, +	public JestAutoConfiguration(JestProperties properties,, +			ObjectProvider<Gson> gsonProvider) {, +		HttpClientConfig.Builder builder = new HttpClientConfig.Builder(, +				this.properties.getUris());, +				.readTimeout(this.properties.getReadTimeout()).build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CompositeHealthIndicatorConfiguration.java, + * @author Stephane Nicoll, +			throw new IllegalStateException("Unable to create indicator " + indicatorClass, +					+ " for source " + sourceClass, ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ElasticsearchHealthIndicatorConfiguration.java, +	static class ElasticsearchSpringDataHealthIndicatorConfiguration extends, +		ElasticsearchSpringDataHealthIndicatorConfiguration(Map<String, Client> clients,, +	static class ElasticsearchJestHealthIndicatorConfiguration extends, +		ElasticsearchJestHealthIndicatorConfiguration(Map<String, JestClient> clients) {, +		protected ElasticsearchJestHealthIndicator createHealthIndicator(]