[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +		private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +				"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>(this.security.getIgnored());, +			if (ignored.isEmpty()) {, +				ignored.addAll(DEFAULT_IGNORED);, +			else if (ignored.contains("none")) {, +				ignored.remove("none");, +			}, +			if (this.errorController != null) {, +				ignored.add(this.errorController.getErrorPath());, +			}, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +		private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +				"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>(this.security.getIgnored());, +			if (ignored.isEmpty()) {, +				ignored.addAll(DEFAULT_IGNORED);, +			else if (ignored.contains("none")) {, +				ignored.remove("none");, +			}, +			if (this.errorController != null) {, +				ignored.add(this.errorController.getErrorPath());, +			}, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +	private List<String> ignored = new ArrayList<String>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +		private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +				"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>(this.security.getIgnored());, +			if (ignored.isEmpty()) {, +				ignored.addAll(DEFAULT_IGNORED);, +			else if (ignored.contains("none")) {, +				ignored.remove("none");, +			}, +			if (this.errorController != null) {, +				ignored.add(this.errorController.getErrorPath());, +			}, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +	private List<String> ignored = new ArrayList<String>();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		TestUtils.addEnviroment(this.context, "security.ignored:none");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +		private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +				"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>(this.security.getIgnored());, +			if (ignored.isEmpty()) {, +				ignored.addAll(DEFAULT_IGNORED);, +			else if (ignored.contains("none")) {, +				ignored.remove("none");, +			}, +			if (this.errorController != null) {, +				ignored.add(this.errorController.getErrorPath());, +			}, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +	private List<String> ignored = new ArrayList<String>();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		TestUtils.addEnviroment(this.context, "security.ignored:none");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/SecurityPropertiesTests.java, +	public void testBindingIgnoredEmpty() {, +		SecurityProperties security = new SecurityProperties();, +		RelaxedDataBinder binder = new RelaxedDataBinder(security, "security");, +		binder.setConversionService(new DefaultConversionService());, +		binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.ignored", "")));, +		assertFalse(binder.getBindingResult().hasErrors());, +		assertEquals(0, security.getIgnored().size());, +	}, +, +	@Test, +	public void testBindingIgnoredDisable() {, +		SecurityProperties security = new SecurityProperties();, +		RelaxedDataBinder binder = new RelaxedDataBinder(security, "security");, +		binder.setConversionService(new DefaultConversionService());, +		binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.ignored", "none")));, +		assertFalse(binder.getBindingResult().hasErrors());, +		assertEquals(1, security.getIgnored().size());, +	}, +, +	@Test, +		map.put("security.ignored[1]", "/foo/**");, +		assertTrue(security.getIgnored().contains("/foo/**"));]