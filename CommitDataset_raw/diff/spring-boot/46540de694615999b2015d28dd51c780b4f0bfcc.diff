[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		// We're compatible with String's hashCode()., +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		// We're compatible with String's hashCode()., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, + * @see CentralDirectoryVisitor, +	private final List<CentralDirectoryVisitor> visitors = new ArrayList<CentralDirectoryVisitor>();, +	public <T extends CentralDirectoryVisitor> T addVisitor(T visitor) {, +		this.visitors.add(visitor);, +		return visitor;, +	 * Parse the source data, triggering {@link CentralDirectoryVisitor visitors}., +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitStart(endRecord, centralDirectoryData);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitFileHeader(fileHeader, dataOffset);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitEnd();, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		// We're compatible with String's hashCode()., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, + * @see CentralDirectoryVisitor, +	private final List<CentralDirectoryVisitor> visitors = new ArrayList<CentralDirectoryVisitor>();, +	public <T extends CentralDirectoryVisitor> T addVisitor(T visitor) {, +		this.visitors.add(visitor);, +		return visitor;, +	 * Parse the source data, triggering {@link CentralDirectoryVisitor visitors}., +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitStart(endRecord, centralDirectoryData);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitFileHeader(fileHeader, dataOffset);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitEnd();, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryVisitor.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.loader.jar;, +, +import org.springframework.boot.loader.data.RandomAccessData;, +, +/**, + * Callback visitor triggered by {@link CentralDirectoryParser}., + *, + * @author Phillip Webb, + */, +interface CentralDirectoryVisitor {, +, +	void visitStart(CentralDirectoryEndRecord endRecord,, +			RandomAccessData centralDirectoryData);, +, +	void visitFileHeader(CentralDirectoryFileHeader fileHeader, int dataOffset);, +, +	void visitEnd();, +, +}, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +processor only there. You could also let the AspectJ plugin run all the processing, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		// We're compatible with String's hashCode()., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, + * @see CentralDirectoryVisitor, +	private final List<CentralDirectoryVisitor> visitors = new ArrayList<CentralDirectoryVisitor>();, +	public <T extends CentralDirectoryVisitor> T addVisitor(T visitor) {, +		this.visitors.add(visitor);, +		return visitor;, +	 * Parse the source data, triggering {@link CentralDirectoryVisitor visitors}., +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitStart(endRecord, centralDirectoryData);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitFileHeader(fileHeader, dataOffset);, +		for (CentralDirectoryVisitor visitor : this.visitors) {, +			visitor.visitEnd();]