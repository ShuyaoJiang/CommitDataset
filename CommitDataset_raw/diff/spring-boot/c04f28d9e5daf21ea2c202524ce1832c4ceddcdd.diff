[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerProperties.java, +import javax.annotation.PostConstruct;, +, +import org.springframework.validation.BeanPropertyBindingResult;, +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +public class ResourceServerProperties implements BeanFactoryAware {, +	@PostConstruct, +	public void validate() throws Exception {, +, +		BindingResult result = getBindingResult();, +		if (result.hasErrors()) {, +			throw new BindException(result);, +		}, +	}, +, +	private int countBeans(Class<?> type) {, +		return BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, type,, +				true, false).length;, +	}, +, +	private BindingResult getBindingResult() {, +		BindingResult errors = new BeanPropertyBindingResult(this, "resourceServerProperties");, +, +		if (!jwtConfigPresent && !jwkConfigPresent) {, +			if (!StringUtils.hasText(this.userInfoUri), +					&& !StringUtils.hasText(this.tokenInfoUri)) {, +			if (StringUtils.hasText(this.tokenInfoUri) && this.isPreferTokenInfo()) {, +		return errors;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerProperties.java, +import javax.annotation.PostConstruct;, +, +import org.springframework.validation.BeanPropertyBindingResult;, +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +public class ResourceServerProperties implements BeanFactoryAware {, +	@PostConstruct, +	public void validate() throws Exception {, +, +		BindingResult result = getBindingResult();, +		if (result.hasErrors()) {, +			throw new BindException(result);, +		}, +	}, +, +	private int countBeans(Class<?> type) {, +		return BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, type,, +				true, false).length;, +	}, +, +	private BindingResult getBindingResult() {, +		BindingResult errors = new BeanPropertyBindingResult(this, "resourceServerProperties");, +, +		if (!jwtConfigPresent && !jwkConfigPresent) {, +			if (!StringUtils.hasText(this.userInfoUri), +					&& !StringUtils.hasText(this.tokenInfoUri)) {, +			if (StringUtils.hasText(this.tokenInfoUri) && this.isPreferTokenInfo()) {, +		return errors;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerPropertiesTests.java, +import org.hamcrest.BaseMatcher;, +import org.hamcrest.Description;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.validation.BindException;, +import org.springframework.validation.FieldError;, +import org.springframework.validation.ObjectError;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +		this.properties.validate();, +		this.thrown.expect(BindException.class);, +		this.thrown.expect(getMatcher("Only one of jwt.keyUri (or jwt.keyValue) " +, +				"and jwk.keySetUri should be configured.", null));, +		this.properties.validate();, +, +		this.thrown.expect(BindException.class);, +		this.thrown.expect(getMatcher("Only one of jwt.keyUri (or jwt.keyValue) " +, +				"and jwk.keySetUri should be configured.", null));, +		this.properties.validate();, +		this.properties.validate();, +		this.properties.validate();, +		this.properties.validate();, +		this.thrown.expect(BindException.class);, +		this.thrown.expect(getMatcher("Missing tokenInfoUri and userInfoUri and there" +, +				" is no JWT verifier key", "tokenInfoUri"));, +		this.properties.validate();, +		this.properties.validate();, +		this.properties.validate();, +		this.thrown.expect(BindException.class);, +		this.thrown.expect(getMatcher("Missing client secret", "clientSecret"));, +		this.properties.validate();, +		this.properties.validate();, +		this.properties.validate();, +	private BaseMatcher<BindException> getMatcher(String message, String field) {, +		return new BaseMatcher<BindException>() {, +			@Override, +			public void describeTo(Description description) {, +, +			}, +]