[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Madhura Bhave, +		MultiValueMap<String, String> added = new LinkedMultiValueMap<String, String>();, +			if (!endpoint.getPath().equals(self)) {, +				List<String> paths = added.get(rel);, +				if (paths == null || !paths.contains(endpoint.getPath())) {, +					added.add(rel, endpoint.getPath());, +				}, +		if (endpoint instanceof NamedMvcEndpoint) {, +			return ((NamedMvcEndpoint) endpoint).getName();, +		}, +		String path = endpoint.getPath();, +		return (path.startsWith("/") ? path.substring(1) : path);, +	private void addEndpointLink(ResourceSupport resource, MvcEndpoint endpoint,, +			String rel) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancer.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Madhura Bhave, +		MultiValueMap<String, String> added = new LinkedMultiValueMap<String, String>();, +			if (!endpoint.getPath().equals(self)) {, +				List<String> paths = added.get(rel);, +				if (paths == null || !paths.contains(endpoint.getPath())) {, +					added.add(rel, endpoint.getPath());, +				}, +		if (endpoint instanceof NamedMvcEndpoint) {, +			return ((NamedMvcEndpoint) endpoint).getName();, +		}, +		String path = endpoint.getPath();, +		return (path.startsWith("/") ? path.substring(1) : path);, +	private void addEndpointLink(ResourceSupport resource, MvcEndpoint endpoint,, +			String rel) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/LinksEnhancerTests.java, +		LinksEnhancer enhancer = getLinksEnhancer(, +				Collections.singletonList((MvcEndpoint) endpoint));, +		LinksEnhancer enhancer = getLinksEnhancer(, +				Arrays.asList((MvcEndpoint) endpoint, otherEndpoint));, +		assertThat(support.getLinks()).haveExactly(1,, +				getCondition("a", "other-endpoint"));, +	private Condition<Link> getCondition(final String rel, final String href) {, +		return new Condition<Link>() {, +, +			@Override, +			public boolean matches(Link link) {, +				return link.getRel().equals(rel), +						&& link.getHref().equals("http://localhost/" + href);, +			}, +, +		};, +	}, +, +]