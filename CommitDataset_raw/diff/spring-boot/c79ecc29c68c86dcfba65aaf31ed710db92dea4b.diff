[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +		assertThat(this.context.containsBean("bar")).isTrue();, +, +, +	@ConditionalOnBean(name = "foo", value = Date.class), +, +, +, +, +, +, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +		assertThat(this.context.containsBean("bar")).isTrue();, +, +, +	@ConditionalOnBean(name = "foo", value = Date.class), +, +, +, +, +, +, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, +import java.util.Date;, +, +	public void testNameAndTypeOnMissingBeanCondition() {, +		this.context.register(FooConfiguration.class,, +				OnBeanNameAndTypeConfiguration.class);, +		this.context.refresh();, +		/*, +		 * Arguably this should be true, but as things are implemented the conditions, +		 * specified in the different attributes of @ConditionalOnBean are combined with, +		 * logical OR (not AND) so if any of them match the condition is true., +		 */, +		assertThat(this.context.containsBean("bar")).isFalse();, +	}, +, +	@Test, +, +, +	}, +, +	@Configuration, +	@ConditionalOnMissingBean(name = "foo", value = Date.class), +	@ConditionalOnBean(name = "foo", value = Date.class), +	protected static class OnBeanNameAndTypeConfiguration {, +, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +, +]