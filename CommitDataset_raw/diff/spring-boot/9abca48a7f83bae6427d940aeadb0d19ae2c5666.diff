[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Stephane Nicoll, +				return replaceInitialLink(request.getContextPath(), resource);, +		private Resource replaceInitialLink(String contextPath, Resource resource) throws IOException {, +			String initial = contextPath + getManagementServletContext().getContextPath() + getPath();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Stephane Nicoll, +				return replaceInitialLink(request.getContextPath(), resource);, +		private Resource replaceInitialLink(String contextPath, Resource resource) throws IOException {, +			String initial = contextPath + getManagementServletContext().getContextPath() + getPath();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointManagementContextPathIntegrationTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +	public void actuatorBrowserHtml() throws Exception {, +		this.mockMvc.perform(get("/admin/browser.html").accept(MediaType.APPLICATION_JSON)), +				.andExpect(status().isOk()), +				.andExpect(content().string(containsString("entryPoint: '/admin'")));, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Stephane Nicoll, +				return replaceInitialLink(request.getContextPath(), resource);, +		private Resource replaceInitialLink(String contextPath, Resource resource) throws IOException {, +			String initial = contextPath + getManagementServletContext().getContextPath() + getPath();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointManagementContextPathIntegrationTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +	public void actuatorBrowserHtml() throws Exception {, +		this.mockMvc.perform(get("/admin/browser.html").accept(MediaType.APPLICATION_JSON)), +				.andExpect(status().isOk()), +				.andExpect(content().string(containsString("entryPoint: '/admin'")));, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, +	public void actuatorBrowserEntryPoint() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setAccept(Arrays.asList(MediaType.TEXT_HTML));, +		ResponseEntity<String> entity = new TestRestTemplate().exchange(, +				"http://localhost:" + this.port + "/spring/actuator/browser.html", HttpMethod.GET,, +				new HttpEntity<Void>(null, headers), String.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		assertTrue("Wrong body: " + entity.getBody(),, +				entity.getBody().contains("entryPoint: '/spring/actuator'"));, +	}, +, +	@Test]