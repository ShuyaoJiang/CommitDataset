[+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +import org.eclipse.jetty.http.HttpMethod;, +		for (HttpMethod httpMethod : HttpMethod.values()) {, +			handler.addIncludedMethods(httpMethod.name());, +		}, +	 * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be, +	 * applied to the {@link Server} before the it is created., +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +import org.eclipse.jetty.http.HttpMethod;, +		for (HttpMethod httpMethod : HttpMethod.values()) {, +			handler.addIncludedMethods(httpMethod.name());, +		}, +	 * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be, +	 * applied to the {@link Server} before the it is created., +++ b/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java, +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +import org.eclipse.jetty.http.HttpMethod;, +		for (HttpMethod httpMethod : HttpMethod.values()) {, +			handler.addIncludedMethods(httpMethod.name());, +		}, +	 * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be, +	 * applied to the {@link Server} before the it is created., +++ b/spring-boot/src/test/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactoryTests.java, +++ b/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java, +import javax.servlet.http.HttpServlet;, +import javax.servlet.http.HttpServletResponse;, +	public void compressionOfResposeToGetRequest() throws Exception {, +	public void compressionOfResposeToPostRequest() throws Exception {, +		assertThat(doTestCompression(10000, null, null, HttpMethod.POST)).isTrue();, +	}, +, +	@Test, +		return doTestCompression(contentSize, mimeTypes, excludedUserAgents,, +				HttpMethod.GET);, +	}, +, +	private boolean doTestCompression(int contentSize, String[] mimeTypes,, +			String[] excludedUserAgents, HttpMethod method) throws Exception {, +		String response = getResponse(getLocalUrl("/test.txt"), method,, +	private String setUpFactoryForCompression(int contentSize, String[] mimeTypes,, +		factory.addInitializers(, +				new ServletRegistrationBean<HttpServlet>(new HttpServlet() {, +, +					@Override, +					protected void service(HttpServletRequest req,, +							HttpServletResponse resp), +									throws ServletException, IOException {, +						resp.setContentType("text/plain");, +						resp.setContentLength(testContent.length());, +						resp.getWriter().write(testContent);, +						resp.getWriter().flush();, +					}, +, +				}, "/test.txt"));]