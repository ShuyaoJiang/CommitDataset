[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, +import java.time.Duration;, +import org.springframework.boot.test.autoconfigure.properties.PropertyMapping;, +@PropertyMapping("spring.test.webtestclient"), +	/**, +	 * The timeout duration for the client (in any format handled by, +	 * {@link Duration#parse(CharSequence)})., +	 * @return the web client timeout, +	 */, +	String timeout() default "";, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, +import java.time.Duration;, +import org.springframework.boot.test.autoconfigure.properties.PropertyMapping;, +@PropertyMapping("spring.test.webtestclient"), +	/**, +	 * The timeout duration for the client (in any format handled by, +	 * {@link Duration#parse(CharSequence)})., +	 * @return the web client timeout, +	 */, +	String timeout() default "";, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import java.time.Duration;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.test.web.reactive.server.WebTestClient.Builder;, +		customizeWebTestClient(builder, applicationContext);, +	private void customizeWebTestClient(Builder builder,, +			ApplicationContext applicationContext) {, +		Binder.get(applicationContext.getEnvironment()), +				.bind("spring.test.webtestclient.timeout", Duration.class), +				.ifBound(builder::responseTimeout);, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, +import java.time.Duration;, +import org.springframework.boot.test.autoconfigure.properties.PropertyMapping;, +@PropertyMapping("spring.test.webtestclient"), +	/**, +	 * The timeout duration for the client (in any format handled by, +	 * {@link Duration#parse(CharSequence)})., +	 * @return the web client timeout, +	 */, +	String timeout() default "";, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import java.time.Duration;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.test.web.reactive.server.WebTestClient.Builder;, +		customizeWebTestClient(builder, applicationContext);, +	private void customizeWebTestClient(Builder builder,, +			ApplicationContext applicationContext) {, +		Binder.get(applicationContext.getEnvironment()), +				.bind("spring.test.webtestclient.timeout", Duration.class), +				.ifBound(builder::responseTimeout);, +	}, +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +import java.time.Duration;, +import java.time.temporal.ChronoUnit;, +import java.util.Collections;, +, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.PropertySource;, +import org.springframework.test.util.ReflectionTestUtils;, +	@Test, +	public void shouldCustomizeTimeout() throws Exception {, +		PropertySource<?> propertySource = new MapPropertySource("test", Collections, +				.singletonMap("spring.test.webtestclient.timeout", (Object) "PT15M"));, +		load(propertySource, BaseConfiguration.class);, +		WebTestClient webTestClient = this.context.getBean(WebTestClient.class);, +		Object duration = ReflectionTestUtils.getField(webTestClient, "timeout");, +		assertThat(duration).isEqualTo(Duration.of(15, ChronoUnit.MINUTES));, +	}, +, +		load(null, config);, +	}, +, +	private void load(PropertySource<?> propertySource, Class<?>... config) {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		if (propertySource != null) {, +			context.getEnvironment().getPropertySources().addFirst(propertySource);, +		}, +		context.register(config);, +		context.register(WebTestClientAutoConfiguration.class);, +		context.refresh();, +		this.context = context;, +]