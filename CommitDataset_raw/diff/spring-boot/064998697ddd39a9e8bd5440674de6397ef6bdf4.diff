[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +import org.springframework.util.PatternMatchUtils;, +				if (PatternMatchUtils.simpleMatch(annotation, annotationNode.getClassNode().getName())) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +import org.springframework.util.PatternMatchUtils;, +				if (PatternMatchUtils.simpleMatch(annotation, annotationNode.getClassNode().getName())) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		ClassNode mainClassNode = getMainClass(compilationUnit);, +, +			ClassNode mainClassNode = getMainClass(source.getAST().getClasses());, +					if (classNode.equals(mainClassNode)) {, +	@SuppressWarnings("unchecked"), +	private static ClassNode getMainClass(CompilationUnit source) {, +		return getMainClass((List<ClassNode>) source.getAST().getClasses());, +	}, +, +	private static ClassNode getMainClass(List<ClassNode> classes) {, +		for (ClassNode node : classes) {, +			if (AstUtils.hasAtLeastOneAnnotation(node, "Enable*AutoConfiguration")) {, +				return null; // No need to enhance this, +			}, +			if (AstUtils.hasAtLeastOneAnnotation(node, "*Controller", "Configuration",, +					"Component", "*Service", "Repository", "Enable*")) {, +				return node;, +			}, +		}, +		return classes.isEmpty() ? null : classes.get(0);, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +import org.springframework.util.PatternMatchUtils;, +				if (PatternMatchUtils.simpleMatch(annotation, annotationNode.getClassNode().getName())) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		ClassNode mainClassNode = getMainClass(compilationUnit);, +, +			ClassNode mainClassNode = getMainClass(source.getAST().getClasses());, +					if (classNode.equals(mainClassNode)) {, +	@SuppressWarnings("unchecked"), +	private static ClassNode getMainClass(CompilationUnit source) {, +		return getMainClass((List<ClassNode>) source.getAST().getClasses());, +	}, +, +	private static ClassNode getMainClass(List<ClassNode> classes) {, +		for (ClassNode node : classes) {, +			if (AstUtils.hasAtLeastOneAnnotation(node, "Enable*AutoConfiguration")) {, +				return null; // No need to enhance this, +			}, +			if (AstUtils.hasAtLeastOneAnnotation(node, "*Controller", "Configuration",, +					"Component", "*Service", "Repository", "Enable*")) {, +				return node;, +			}, +		}, +		return classes.isEmpty() ? null : classes.get(0);, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +		return AstUtils.hasAtLeastOneAnnotation(classNode, "EnableReactor") || AstUtils.hasAtLeastOneFieldOrMethod(classNode, "Reactor");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +import org.springframework.util.PatternMatchUtils;, +				if (PatternMatchUtils.simpleMatch(annotation, annotationNode.getClassNode().getName())) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		ClassNode mainClassNode = getMainClass(compilationUnit);, +, +			ClassNode mainClassNode = getMainClass(source.getAST().getClasses());, +					if (classNode.equals(mainClassNode)) {, +	@SuppressWarnings("unchecked"), +	private static ClassNode getMainClass(CompilationUnit source) {, +		return getMainClass((List<ClassNode>) source.getAST().getClasses());, +	}, +, +	private static ClassNode getMainClass(List<ClassNode> classes) {, +		for (ClassNode node : classes) {, +			if (AstUtils.hasAtLeastOneAnnotation(node, "Enable*AutoConfiguration")) {, +				return null; // No need to enhance this, +			}, +			if (AstUtils.hasAtLeastOneAnnotation(node, "*Controller", "Configuration",, +					"Component", "*Service", "Repository", "Enable*")) {, +				return node;, +			}, +		}, +		return classes.isEmpty() ? null : classes.get(0);, +, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +		return AstUtils.hasAtLeastOneAnnotation(classNode, "EnableReactor") || AstUtils.hasAtLeastOneFieldOrMethod(classNode, "Reactor");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java, +import org.codehaus.groovy.ast.ClassHelper;, +			AnnotationNode annotationNode = new AnnotationNode(, +					ClassHelper.make("EnableAutoConfiguration"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java, +import org.springframework.util.PatternMatchUtils;, +				if (PatternMatchUtils.simpleMatch(annotation, annotationNode.getClassNode().getName())) {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		ClassNode mainClassNode = getMainClass(compilationUnit);, +, +			ClassNode mainClassNode = getMainClass(source.getAST().getClasses());, +					if (classNode.equals(mainClassNode)) {]