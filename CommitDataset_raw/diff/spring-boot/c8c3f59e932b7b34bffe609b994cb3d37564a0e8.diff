[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			return Arrays.stream(lists).anyMatch((list) -> !list.isEmpty());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			return Arrays.stream(lists).anyMatch((list) -> !list.isEmpty());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jBookmarkManagementConfiguration.java, + * available. Depending on the application's type (web or not) the bookmark manager will, + * be bound to the application or the request, as recommend by Spring Data Neo4j., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			return Arrays.stream(lists).anyMatch((list) -> !list.isEmpty());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jBookmarkManagementConfiguration.java, + * available. Depending on the application's type (web or not) the bookmark manager will, + * be bound to the application or the request, as recommend by Spring Data Neo4j., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Maximum size of the HTTP message header., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			return Arrays.stream(lists).anyMatch((list) -> !list.isEmpty());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jBookmarkManagementConfiguration.java, + * available. Depending on the application's type (web or not) the bookmark manager will, + * be bound to the application or the request, as recommend by Spring Data Neo4j., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Maximum size of the HTTP message header., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java, +	 * @since 2.1.0, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/appoptics/AppOpticsProperties.java, +	private String uri = "https://api.appoptics.com/v1/measurements";, +	private String apiToken;, +	private String hostTag = "instance";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(!threshold.isNegative(),, +				"threshold must be greater than or equal to 0");, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java, +	private RequestMatchResult getMatchResult(String servletPath) {, +		request.setServletPath(servletPath);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			return Arrays.stream(lists).anyMatch((list) -> !list.isEmpty());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jBookmarkManagementConfiguration.java, + * available. Depending on the application's type (web or not) the bookmark manager will, + * be bound to the application or the request, as recommend by Spring Data Neo4j.]