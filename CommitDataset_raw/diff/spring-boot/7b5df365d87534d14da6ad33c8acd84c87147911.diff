[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, + * @author Stephane Nicoll, +			builder.sslEnabled(options.isSslEnabled());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, + * @author Stephane Nicoll, +			builder.sslEnabled(options.isSslEnabled());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfigurationTests.java, +import javax.net.SocketFactory;, +, +import com.mongodb.MongoClient;, +import static org.mockito.Mockito.mock;, + * @author Stephane Nicoll, +	@Test, +	public void optionsSslConfig() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.data.mongodb.uri:mongodb://localhost/test");, +		this.context.register(SslOptionsConfig.class,, +				PropertyPlaceholderAutoConfiguration.class, MongoAutoConfiguration.class);, +		this.context.refresh();, +		MongoClient mongo = this.context.getBean(MongoClient.class);, +		MongoClientOptions options = mongo.getMongoClientOptions();, +		assertThat(options.isSslEnabled()).isTrue();, +		assertThat(options.getSocketFactory()).isSameAs(this.context.getBean("mySocketFactory"));, +	}, +, +	@Configuration, +	protected static class SslOptionsConfig {, +, +		@Bean, +		public MongoClientOptions mongoClientOptions() {, +			return MongoClientOptions.builder().sslEnabled(true).socketFactory(mySocketFactory()).build();, +		}, +, +		@Bean, +		public SocketFactory mySocketFactory() {, +			return mock(SocketFactory.class);, +		}, +, +	}, +]