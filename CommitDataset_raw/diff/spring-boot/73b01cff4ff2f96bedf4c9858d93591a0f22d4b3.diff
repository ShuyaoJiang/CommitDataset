[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +					collectCandidateConfigurations(source, annotation, candidates, seen);, +	private void collectCandidateConfigurations(Class<?> source, Annotation annotation,, +			if (value.length > 0) {, +			else {, +				candidates.addAll(SpringFactoriesLoader.loadFactoryNames(source,, +						getClass().getClassLoader()));, +			}, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +					collectCandidateConfigurations(source, annotation, candidates, seen);, +	private void collectCandidateConfigurations(Class<?> source, Annotation annotation,, +			if (value.length > 0) {, +			else {, +				candidates.addAll(SpringFactoriesLoader.loadFactoryNames(source,, +						getClass().getClassLoader()));, +			}, +		}, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/core/AutoConfigureCache.java, +@ImportAutoConfiguration, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +					collectCandidateConfigurations(source, annotation, candidates, seen);, +	private void collectCandidateConfigurations(Class<?> source, Annotation annotation,, +			if (value.length > 0) {, +			else {, +				candidates.addAll(SpringFactoriesLoader.loadFactoryNames(source,, +						getClass().getClassLoader()));, +			}, +		}, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/core/AutoConfigureCache.java, +@ImportAutoConfiguration, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/AutoConfigureJson.java, +@ImportAutoConfiguration, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +					collectCandidateConfigurations(source, annotation, candidates, seen);, +	private void collectCandidateConfigurations(Class<?> source, Annotation annotation,, +			if (value.length > 0) {, +			else {, +				candidates.addAll(SpringFactoriesLoader.loadFactoryNames(source,, +						getClass().getClassLoader()));, +			}, +		}, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/core/AutoConfigureCache.java, +@ImportAutoConfiguration, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/AutoConfigureJson.java, +@ImportAutoConfiguration, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/AutoConfigureDataJpa.java, +@ImportAutoConfiguration, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfiguration.java, + * Import and apply the specified auto-configuration classes. Applies the same ordering, + * @author Andy Wilkinson, +	 * The auto-configuration classes that should be imported. When empty, the classes are, +	 * specified using an entry in {@code META-INF/spring.factories} where the key is the, +	 * fully-qualified name of the annotated class., +	Class<?>[] value() default {};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +					collectCandidateConfigurations(source, annotation, candidates, seen);, +	private void collectCandidateConfigurations(Class<?> source, Annotation annotation,, +			if (value.length > 0) {, +			else {]