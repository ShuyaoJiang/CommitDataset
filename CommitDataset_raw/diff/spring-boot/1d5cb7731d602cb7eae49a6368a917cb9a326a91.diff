[+++ b/spring-boot-cli-grape/src/main/java/org/springframework/boot/cli/compiler/AetherGrapeEngine.java, +import java.util.Collection;, +import org.eclipse.aether.graph.Exclusion;, +	private static final Collection<Exclusion> WILDCARD_EXCLUSION = Arrays, +			.asList(new Exclusion("*", "*", "*", "*"));, +, +	private boolean isTransitive(Map<?, ?> dependencyMap) {, +		Boolean transitive = (Boolean) dependencyMap.get("transitive");, +		if (transitive == null) {, +			transitive = true;, +		}, +		return transitive;, +	}, +, +		Artifact artifact = createArtifact(dependencyMap);, +, +		Dependency dependency;, +, +		if (!isTransitive(dependencyMap)) {, +			dependency = new Dependency(artifact, JavaScopes.COMPILE, null,, +					WILDCARD_EXCLUSION);, +		}, +		else {, +			dependency = new Dependency(artifact, JavaScopes.COMPILE);, +		}, +, +		return dependency;, +	}, +, +	private Artifact createArtifact(Map<?, ?> dependencyMap) {, +		return new DefaultArtifact(group, module, "jar", version);, +++ b/spring-boot-cli-grape/src/main/java/org/springframework/boot/cli/compiler/AetherGrapeEngine.java, +import java.util.Collection;, +import org.eclipse.aether.graph.Exclusion;, +	private static final Collection<Exclusion> WILDCARD_EXCLUSION = Arrays, +			.asList(new Exclusion("*", "*", "*", "*"));, +, +	private boolean isTransitive(Map<?, ?> dependencyMap) {, +		Boolean transitive = (Boolean) dependencyMap.get("transitive");, +		if (transitive == null) {, +			transitive = true;, +		}, +		return transitive;, +	}, +, +		Artifact artifact = createArtifact(dependencyMap);, +, +		Dependency dependency;, +, +		if (!isTransitive(dependencyMap)) {, +			dependency = new Dependency(artifact, JavaScopes.COMPILE, null,, +					WILDCARD_EXCLUSION);, +		}, +		else {, +			dependency = new Dependency(artifact, JavaScopes.COMPILE);, +		}, +, +		return dependency;, +	}, +, +	private Artifact createArtifact(Map<?, ?> dependencyMap) {, +		return new DefaultArtifact(group, module, "jar", version);, +++ b/spring-boot-cli-grape/src/test/java/org/springframework/boot/cli/compiler/AetherGrapeEngineTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler;, +, +import groovy.lang.GroovyClassLoader;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +/**, + * @author Andy Wilkinson, + */, +public class AetherGrapeEngineTests {, +, +	private final GroovyClassLoader groovyClassLoader = new GroovyClassLoader();, +, +	private final AetherGrapeEngine grapeEngine = new AetherGrapeEngine(, +			this.groovyClassLoader, null, null, null);, +]