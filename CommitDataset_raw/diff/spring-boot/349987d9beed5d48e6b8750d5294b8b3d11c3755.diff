[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties.java, +	private ShowDetails showDetails = ShowDetails.NEVER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties.java, +	private ShowDetails showDetails = ShowDetails.NEVER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, +	public void authenticatedUsersAreNotShownDetailsByDefault() {, +					.isEmpty();, +		});, +	}, +, +	@Test, +	public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {, +		this.contextRunner, +				.withPropertyValues(, +						"management.endpoint.health.show-details=when-authorized"), +				.run((context) -> {, +					HealthEndpointWebExtension extension = context, +							.getBean(HealthEndpointWebExtension.class);, +					SecurityContext securityContext = mock(SecurityContext.class);, +					given(securityContext.getPrincipal()), +							.willReturn(mock(Principal.class));, +					assertThat(, +							extension.getHealth(securityContext).getBody().getDetails()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties.java, +	private ShowDetails showDetails = ShowDetails.NEVER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, +	public void authenticatedUsersAreNotShownDetailsByDefault() {, +					.isEmpty();, +		});, +	}, +, +	@Test, +	public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {, +		this.contextRunner, +				.withPropertyValues(, +						"management.endpoint.health.show-details=when-authorized"), +				.run((context) -> {, +					HealthEndpointWebExtension extension = context, +							.getBean(HealthEndpointWebExtension.class);, +					SecurityContext securityContext = mock(SecurityContext.class);, +					given(securityContext.getPrincipal()), +							.willReturn(mock(Principal.class));, +					assertThat(, +							extension.getHealth(securityContext).getBody().getDetails()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthEndpointWebExtensionTests.java, +		this.contextRunner, +				.withPropertyValues("management.endpoint.health.show-details=always"), +				.withUserConfiguration(HealthIndicatorsConfiguration.class), +	public void authenticatedUsersAreNotShownDetailsByDefault() {, +					.isEmpty();, +		});, +	}, +, +	@Test, +	public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {, +		this.contextRunner, +				.withPropertyValues(, +						"management.endpoint.health.show-details=when-authorized"), +				.run((context) -> {, +					ReactiveHealthEndpointWebExtension extension = context, +							.getBean(ReactiveHealthEndpointWebExtension.class);, +					SecurityContext securityContext = mock(SecurityContext.class);, +					given(securityContext.getPrincipal()), +							.willReturn(mock(Principal.class));, +					assertThat(extension.health(securityContext).block().getBody(), +							.getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties.java, +	private ShowDetails showDetails = ShowDetails.NEVER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, +	public void authenticatedUsersAreNotShownDetailsByDefault() {, +					.isEmpty();, +		});, +	}, +, +	@Test, +	public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {, +		this.contextRunner, +				.withPropertyValues(, +						"management.endpoint.health.show-details=when-authorized"), +				.run((context) -> {, +					HealthEndpointWebExtension extension = context, +							.getBean(HealthEndpointWebExtension.class);, +					SecurityContext securityContext = mock(SecurityContext.class);, +					given(securityContext.getPrincipal()), +							.willReturn(mock(Principal.class));, +					assertThat(, +							extension.getHealth(securityContext).getBody().getDetails()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthEndpointWebExtensionTests.java, +		this.contextRunner, +				.withPropertyValues("management.endpoint.health.show-details=always"), +				.withUserConfiguration(HealthIndicatorsConfiguration.class), +	public void authenticatedUsersAreNotShownDetailsByDefault() {, +					.isEmpty();, +		});, +	}, +, +	@Test, +	public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {, +		this.contextRunner, +				.withPropertyValues(]