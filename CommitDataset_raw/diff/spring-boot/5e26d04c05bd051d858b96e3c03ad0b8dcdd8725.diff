[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2018 the original author or authors., +import javax.lang.model.util.ElementFilter;, +	static final String READ_OPERATION_ANNOTATION = "org.springframework.boot.actuate.", +			+ "endpoint.annotation.ReadOperation";, +, +	static final String NULLABLE_ANNOTATION = "org.springframework.lang.Nullable";, +, +	protected String readOperationAnnotation() {, +		return READ_OPERATION_ANNOTATION;, +	}, +, +		if (hasMainReadOperation(element)) {, +	}, +, +	private boolean hasMainReadOperation(TypeElement element) {, +		for (ExecutableElement method : ElementFilter, +				.methodsIn(element.getEnclosedElements())) {, +			if (hasAnnotation(method, readOperationAnnotation()), +					&& (TypeKind.VOID != method.getReturnType().getKind()), +					&& hasNoOrOptionalParameters(method)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	private boolean hasNoOrOptionalParameters(ExecutableElement method) {, +		for (VariableElement parameter : method.getParameters()) {, +			if (!hasAnnotation(parameter, NULLABLE_ANNOTATION)) {, +				return false;, +			}, +		}, +		return true;, +	}, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2018 the original author or authors., +import javax.lang.model.util.ElementFilter;, +	static final String READ_OPERATION_ANNOTATION = "org.springframework.boot.actuate.", +			+ "endpoint.annotation.ReadOperation";, +, +	static final String NULLABLE_ANNOTATION = "org.springframework.lang.Nullable";, +, +	protected String readOperationAnnotation() {, +		return READ_OPERATION_ANNOTATION;, +	}, +, +		if (hasMainReadOperation(element)) {, +	}, +, +	private boolean hasMainReadOperation(TypeElement element) {, +		for (ExecutableElement method : ElementFilter, +				.methodsIn(element.getEnclosedElements())) {, +			if (hasAnnotation(method, readOperationAnnotation()), +					&& (TypeKind.VOID != method.getReturnType().getKind()), +					&& hasNoOrOptionalParameters(method)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	private boolean hasNoOrOptionalParameters(ExecutableElement method) {, +		for (VariableElement parameter : method.getParameters()) {, +			if (!hasAnnotation(parameter, NULLABLE_ANNOTATION)) {, +				return false;, +			}, +		}, +		return true;, +	}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +		assertThat(metadata.getItems()).hasSize(2);, +		assertThat(metadata.getItems()).hasSize(2);, +		assertThat(metadata.getItems()).hasSize(2);, +	public void incrementalEndpointBuildChangeCacheFlag() throws Exception {, +		TestProject project = new TestProject(this.temporaryFolder,, +				IncrementalEndpoint.class);, +		ConfigurationMetadata metadata = project.fullBuild();, +		assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental"), +				.fromSource(IncrementalEndpoint.class));, +		assertThat(metadata).has(enabledFlag("incremental", true));, +		assertThat(metadata).has(cacheTtl("incremental"));, +		assertThat(metadata.getItems()).hasSize(3);, +		project.replaceText(IncrementalEndpoint.class, "@Nullable String param",, +				"String param");, +		metadata = project.incrementalBuild(IncrementalEndpoint.class);, +		assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental"), +				.fromSource(IncrementalEndpoint.class));, +		assertThat(metadata).has(enabledFlag("incremental", true));, +		assertThat(metadata.getItems()).hasSize(2);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2018 the original author or authors., +import javax.lang.model.util.ElementFilter;]