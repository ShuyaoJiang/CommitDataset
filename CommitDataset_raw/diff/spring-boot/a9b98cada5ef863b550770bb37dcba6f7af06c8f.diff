[+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.core.io.ClassPathResource;, +			if (isLoadCandidate(resource)) {, +	private boolean isLoadCandidate(Resource resource) {, +		if (resource == null || !resource.exists()) {, +			return false;, +		}, +		if (resource instanceof ClassPathResource) {, +			// A simple package without a '.' may accidentally get loaded as an XML, +			// document if we're not careful. The result of getInputStream() will be, +			// a file list of the package content. We double check here that it's not, +			// actually a package., +			String path = ((ClassPathResource) resource).getPath();, +			if (path.indexOf(".") == -1) {, +				try {, +					return Package.getPackage(path) == null;, +				}, +				catch (Exception ex) {, +					// Ignore, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.core.io.ClassPathResource;, +			if (isLoadCandidate(resource)) {, +	private boolean isLoadCandidate(Resource resource) {, +		if (resource == null || !resource.exists()) {, +			return false;, +		}, +		if (resource instanceof ClassPathResource) {, +			// A simple package without a '.' may accidentally get loaded as an XML, +			// document if we're not careful. The result of getInputStream() will be, +			// a file list of the package content. We double check here that it's not, +			// actually a package., +			String path = ((ClassPathResource) resource).getPath();, +			if (path.indexOf(".") == -1) {, +				try {, +					return Package.getPackage(path) == null;, +				}, +				catch (Exception ex) {, +					// Ignore, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +import sampleconfig.MyComponentInPackageWithoutDot;, +	public void loadPackageNameWithoutDot() throws Exception {, +		// See gh-6126, +		BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry,, +				MyComponentInPackageWithoutDot.class.getPackage().getName());, +		int loaded = loader.load();, +		assertThat(loaded, equalTo(1));, +		assertTrue(this.registry.containsBean("myComponentInPackageWithoutDot"));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.core.io.ClassPathResource;, +			if (isLoadCandidate(resource)) {, +	private boolean isLoadCandidate(Resource resource) {, +		if (resource == null || !resource.exists()) {, +			return false;, +		}, +		if (resource instanceof ClassPathResource) {, +			// A simple package without a '.' may accidentally get loaded as an XML, +			// document if we're not careful. The result of getInputStream() will be, +			// a file list of the package content. We double check here that it's not, +			// actually a package., +			String path = ((ClassPathResource) resource).getPath();, +			if (path.indexOf(".") == -1) {, +				try {, +					return Package.getPackage(path) == null;, +				}, +				catch (Exception ex) {, +					// Ignore, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +import sampleconfig.MyComponentInPackageWithoutDot;, +	public void loadPackageNameWithoutDot() throws Exception {, +		// See gh-6126, +		BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry,, +				MyComponentInPackageWithoutDot.class.getPackage().getName());, +		int loaded = loader.load();, +		assertThat(loaded, equalTo(1));, +		assertTrue(this.registry.containsBean("myComponentInPackageWithoutDot"));, +	}, +, +	@Test, +++ b/spring-boot/src/test/java/sampleconfig/MyComponentInPackageWithoutDot.java]