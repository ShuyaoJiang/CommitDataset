[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@ConditionalOnExpression("${health.db.enabled:true}"), +	@ConditionalOnExpression("${health.mongo.enabled:true}"), +	@ConditionalOnExpression("${health.redis.enabled:true}"), +	@ConditionalOnExpression("${health.rabbit.enabled:true}"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	@ConditionalOnExpression("${health.db.enabled:true}"), +	@ConditionalOnExpression("${health.mongo.enabled:true}"), +	@ConditionalOnExpression("${health.redis.enabled:true}"), +	@ConditionalOnExpression("${health.rabbit.enabled:true}"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.RabbitHealthIndicator;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +import org.springframework.boot.test.EnvironmentTestUtils;, +	public void notRedisHealthIndicator() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(RedisAutoConfiguration.class,, +				HealthIndicatorAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "health.redis.enabled:false");, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertEquals(1, beans.size());, +		assertEquals(VanillaHealthIndicator.class, beans.values().iterator().next(), +				.getClass());, +	}, +, +	@SuppressWarnings("rawtypes"), +	@Test, +	public void notMongoHealthIndicator() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(MongoAutoConfiguration.class,, +				MongoDataAutoConfiguration.class, HealthIndicatorAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "health.mongo.enabled:false");, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertEquals(1, beans.size());, +		assertEquals(VanillaHealthIndicator.class, beans.values().iterator().next(), +				.getClass());, +	}, +, +	@SuppressWarnings("rawtypes"), +	@Test, +, +	@SuppressWarnings("rawtypes"), +	@Test, +	public void notDataSourceHealthIndicator() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				HealthIndicatorAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "health.db.enabled:false");, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertEquals(1, beans.size());, +		assertEquals(VanillaHealthIndicator.class, beans.values().iterator().next(), +				.getClass());, +	}, +, +	@SuppressWarnings("rawtypes"), +	@Test, +	public void rabbitHealthIndicator() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(RabbitAutoConfiguration.class,, +				HealthIndicatorAutoConfiguration.class);, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertEquals(1, beans.size());, +		assertEquals(RabbitHealthIndicator.class, beans.values().iterator().next(), +				.getClass());, +	}, +, +	@SuppressWarnings("rawtypes"), +	@Test, +	public void notRabbitHealthIndicator() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(RabbitAutoConfiguration.class,, +				HealthIndicatorAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "health.rabbit.enabled:false");, +		this.context.refresh();, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +		assertEquals(1, beans.size());, +		assertEquals(VanillaHealthIndicator.class, beans.values().iterator().next(), +				.getClass());, +	}]