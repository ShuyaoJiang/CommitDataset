[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * @author Vedran Pavic, +			SessionProperties.Hazelcast hazelcast = sessionProperties.getHazelcast();, +			setSessionMapName(hazelcast.getMapName());, +			setHazelcastFlushMode(hazelcast.getFlushMode());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * @author Vedran Pavic, +			SessionProperties.Hazelcast hazelcast = sessionProperties.getHazelcast();, +			setSessionMapName(hazelcast.getMapName());, +			setHazelcastFlushMode(hazelcast.getFlushMode());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.session.hazelcast.HazelcastFlushMode;, +		/**, +		 * Flush mode for the Hazelcast sessions., +		 */, +		private HazelcastFlushMode flushMode = HazelcastFlushMode.ON_SAVE;, +, +		public HazelcastFlushMode getFlushMode() {, +			return this.flushMode;, +		}, +, +		public void setFlushMode(HazelcastFlushMode flushMode) {, +			this.flushMode = flushMode;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * @author Vedran Pavic, +			SessionProperties.Hazelcast hazelcast = sessionProperties.getHazelcast();, +			setSessionMapName(hazelcast.getMapName());, +			setHazelcastFlushMode(hazelcast.getFlushMode());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.session.hazelcast.HazelcastFlushMode;, +		/**, +		 * Flush mode for the Hazelcast sessions., +		 */, +		private HazelcastFlushMode flushMode = HazelcastFlushMode.ON_SAVE;, +, +		public HazelcastFlushMode getFlushMode() {, +			return this.flushMode;, +		}, +, +		public void setFlushMode(HazelcastFlushMode flushMode) {, +			this.flushMode = flushMode;, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +		SessionRepository<?> repository = this.context.getBean(SessionRepository.class);, +		assertThat(repository).as("Wrong session repository type").isInstanceOf(type);, +		return type.cast(repository);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * @author Vedran Pavic, +			SessionProperties.Hazelcast hazelcast = sessionProperties.getHazelcast();, +			setSessionMapName(hazelcast.getMapName());, +			setHazelcastFlushMode(hazelcast.getFlushMode());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.session.hazelcast.HazelcastFlushMode;, +		/**, +		 * Flush mode for the Hazelcast sessions., +		 */, +		private HazelcastFlushMode flushMode = HazelcastFlushMode.ON_SAVE;, +, +		public HazelcastFlushMode getFlushMode() {, +			return this.flushMode;, +		}, +, +		public void setFlushMode(HazelcastFlushMode flushMode) {, +			this.flushMode = flushMode;, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +		SessionRepository<?> repository = this.context.getBean(SessionRepository.class);, +		assertThat(repository).as("Wrong session repository type").isInstanceOf(type);, +		return type.cast(repository);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.session;, +, +import java.util.Collections;, +, +import com.hazelcast.core.HazelcastInstance;, +import com.hazelcast.core.IMap;, +import org.junit.Test;, +, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.context.annotation.Bean;]