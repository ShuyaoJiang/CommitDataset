[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +	private final boolean useForwardHeaders;, +, +		this(builder, manager, contextPath, port, false, autoStart, compression);, +	}, +, +	public UndertowEmbeddedServletContainer(Builder builder, DeploymentManager manager,, +			String contextPath, int port, boolean useForwardHeaders, boolean autoStart,, +			Compression compression) {, +		this.useForwardHeaders = useForwardHeaders;, +			httpHandler = getContextHandler(httpHandler);, +			if (this.useForwardHeaders) {, +				httpHandler = Handlers.proxyPeerAddress(httpHandler);, +			}, +			this.builder.setHandler(httpHandler);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +	private final boolean useForwardHeaders;, +, +		this(builder, manager, contextPath, port, false, autoStart, compression);, +	}, +, +	public UndertowEmbeddedServletContainer(Builder builder, DeploymentManager manager,, +			String contextPath, int port, boolean useForwardHeaders, boolean autoStart,, +			Compression compression) {, +		this.useForwardHeaders = useForwardHeaders;, +			httpHandler = getContextHandler(httpHandler);, +			if (this.useForwardHeaders) {, +				httpHandler = Handlers.proxyPeerAddress(httpHandler);, +			}, +			this.builder.setHandler(httpHandler);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java, +	private boolean useForwardHeaders;, +, +				port, this.useForwardHeaders, port >= 0, getCompression());, +	 * Set if x-forward-* headers should be processed., +	 * @param useForwardHeaders if x-forward headers should be used, +	 * @since 1.3.0, +	 */, +	public void setUseForwardHeaders(boolean useForwardHeaders) {, +		this.useForwardHeaders = useForwardHeaders;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +	private final boolean useForwardHeaders;, +, +		this(builder, manager, contextPath, port, false, autoStart, compression);, +	}, +, +	public UndertowEmbeddedServletContainer(Builder builder, DeploymentManager manager,, +			String contextPath, int port, boolean useForwardHeaders, boolean autoStart,, +			Compression compression) {, +		this.useForwardHeaders = useForwardHeaders;, +			httpHandler = getContextHandler(httpHandler);, +			if (this.useForwardHeaders) {, +				httpHandler = Handlers.proxyPeerAddress(httpHandler);, +			}, +			this.builder.setHandler(httpHandler);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java, +	private boolean useForwardHeaders;, +, +				port, this.useForwardHeaders, port >= 0, getCompression());, +	 * Set if x-forward-* headers should be processed., +	 * @param useForwardHeaders if x-forward headers should be used, +	 * @since 1.3.0, +	 */, +	public void setUseForwardHeaders(boolean useForwardHeaders) {, +		this.useForwardHeaders = useForwardHeaders;, +	}, +, +	/**, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactoryTests.java, +	@Test, +	public void useForwardHeaders() throws Exception {, +		UndertowEmbeddedServletContainerFactory factory = getFactory();, +		factory.setUseForwardHeaders(true);, +		assertForwardHeaderIsUsed(factory);, +	}, +]