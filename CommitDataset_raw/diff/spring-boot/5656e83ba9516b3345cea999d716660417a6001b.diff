[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.HandlerExceptionResolver;, +import org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;, +, +		@Override, +		protected void configureHandlerExceptionResolvers(, +				List<HandlerExceptionResolver> exceptionResolvers) {, +			super.configureHandlerExceptionResolvers(exceptionResolvers);, +			if (exceptionResolvers.isEmpty()) {, +				addDefaultHandlerExceptionResolvers(exceptionResolvers);, +			}, +			if (this.mvcProperties.isLogResolvedException()) {, +				for (HandlerExceptionResolver resolver : exceptionResolvers) {, +					if (resolver instanceof AbstractHandlerExceptionResolver) {, +						((AbstractHandlerExceptionResolver) resolver), +								.setWarnLogCategory(resolver.getClass(), +										.getName());, +					}, +				}, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.HandlerExceptionResolver;, +import org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;, +, +		@Override, +		protected void configureHandlerExceptionResolvers(, +				List<HandlerExceptionResolver> exceptionResolvers) {, +			super.configureHandlerExceptionResolvers(exceptionResolvers);, +			if (exceptionResolvers.isEmpty()) {, +				addDefaultHandlerExceptionResolvers(exceptionResolvers);, +			}, +			if (this.mvcProperties.isLogResolvedException()) {, +				for (HandlerExceptionResolver resolver : exceptionResolvers) {, +					if (resolver instanceof AbstractHandlerExceptionResolver) {, +						((AbstractHandlerExceptionResolver) resolver), +								.setWarnLogCategory(resolver.getClass(), +										.getName());, +					}, +				}, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +	 * Enable warn logging of exceptions resolved by a "HandlerExceptionResolver"., +	 */, +	private boolean logResolvedException = false;, +, +	/**, +	public boolean isLogResolvedException() {, +		return this.logResolvedException;, +	}, +, +	public void setLogResolvedException(boolean logResolvedException) {, +		this.logResolvedException = logResolvedException;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.HandlerExceptionResolver;, +import org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;, +, +		@Override, +		protected void configureHandlerExceptionResolvers(, +				List<HandlerExceptionResolver> exceptionResolvers) {, +			super.configureHandlerExceptionResolvers(exceptionResolvers);, +			if (exceptionResolvers.isEmpty()) {, +				addDefaultHandlerExceptionResolvers(exceptionResolvers);, +			}, +			if (this.mvcProperties.isLogResolvedException()) {, +				for (HandlerExceptionResolver resolver : exceptionResolvers) {, +					if (resolver instanceof AbstractHandlerExceptionResolver) {, +						((AbstractHandlerExceptionResolver) resolver), +								.setWarnLogCategory(resolver.getClass(), +										.getName());, +					}, +				}, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +	 * Enable warn logging of exceptions resolved by a "HandlerExceptionResolver"., +	 */, +	private boolean logResolvedException = false;, +, +	/**, +	public boolean isLogResolvedException() {, +		return this.logResolvedException;, +	}, +, +	public void setLogResolvedException(boolean logResolvedException) {, +		this.logResolvedException = logResolvedException;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import org.assertj.core.api.Condition;, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.web.servlet.HandlerExceptionResolver;, +import org.springframework.web.servlet.handler.HandlerExceptionResolverComposite;, +import org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter;]