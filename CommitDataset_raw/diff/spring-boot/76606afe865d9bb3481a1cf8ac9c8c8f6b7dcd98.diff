[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private final Class<?> autoConfiguredClass;, +	private final ApplicationContextRunner contextRunner;, +	protected AbstractJpaAutoConfigurationTests(Class<?> autoConfiguredClass) {, +		this.autoConfiguredClass = autoConfiguredClass;, +		this.contextRunner = new ApplicationContextRunner(), +				.withPropertyValues("spring.datasource.generate-unique-name=true"), +				.withUserConfiguration(TestConfiguration.class), +				.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +						TransactionAutoConfiguration.class, autoConfiguredClass));, +	protected ApplicationContextRunner contextRunner() {, +		return this.contextRunner;, +	public void dataSourceIsNotAvailable() {, +		new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(, +				this.autoConfiguredClass)).run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context.getStartupFailure()), +					.isInstanceOf(BeanCreationException.class);, +			assertThat(context.getStartupFailure()), +					.hasMessageContaining("No qualifying bean");, +			assertThat(context.getStartupFailure()).hasMessageContaining("DataSource");, +		});, +	public void dataSourceIsCreatedWithDefaultConfig() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(DataSource.class);, +			assertThat(context).hasSingleBean(JpaTransactionManager.class);, +		});, +	}, +, +	@Test, +	public void jtaTransactionManagerTakesPrecedence() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceTransactionManagerAutoConfiguration.class)).run((context) -> {, +			assertThat(context).hasSingleBean(DataSource.class);, +			assertThat(context).hasSingleBean(JpaTransactionManager.class);, +			assertThat(context).getBean("transactionManager"), +		});, +	public void openEntityManagerInViewInterceptorIsCreated() {, +		new WebApplicationContextRunner(), +				.withPropertyValues("spring.datasource.generate-unique-name=true"), +				.withUserConfiguration(TestConfiguration.class), +				.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +						TransactionAutoConfiguration.class, this.autoConfiguredClass)), +				.run((context) -> assertThat(context), +						.hasSingleBean(OpenEntityManagerInViewInterceptor.class));, +	public void openEntityManagerInViewInterceptorIsNotRegisteredWhenFilterPresent() {, +		new WebApplicationContextRunner(), +				.withPropertyValues("spring.datasource.generate-unique-name=true"), +				.withUserConfiguration(TestFilterConfiguration.class), +				.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +						TransactionAutoConfiguration.class, this.autoConfiguredClass)), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(OpenEntityManagerInViewInterceptor.class));, +	public void openEntityManagerInViewInterceptorISNotRegisteredWhenExplicitlyOff() {, +		new WebApplicationContextRunner(), +				.withPropertyValues(, +						"spring.datasource.generate-unique-name=true",, +						"spring.jpa.open-in-view=false"), +				.withUserConfiguration(TestConfiguration.class), +				.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +						TransactionAutoConfiguration.class, this.autoConfiguredClass)), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(OpenEntityManagerInViewInterceptor.class));, +	public void customJpaProperties() {, +		this.contextRunner.withPropertyValues("spring.jpa.properties.a:b",, +				"spring.jpa.properties.a.b:c",, +				"spring.jpa.properties.c:d").run((context) -> {, +			LocalContainerEntityManagerFactoryBean bean = context, +		});, +		this.contextRunner.withUserConfiguration(, +				TestConfigurationWithLocalContainerEntityManagerFactoryBean.class, +		).run((context) -> {, +			LocalContainerEntityManagerFactoryBean factoryBean = context, +		});, +		this.contextRunner.withUserConfiguration(, +				TestConfigurationWithLocalContainerEntityManagerFactoryBean.class, +		).run((context) -> {, +			EntityManagerFactory factoryBean = context, +		});, +		this.contextRunner.withUserConfiguration(, +				TestConfigurationWithTransactionManager.class, +		).run((context) -> {, +			PlatformTransactionManager txManager = context, +		});, +	public void customPersistenceUnitManager() {, +		this.contextRunner.withUserConfiguration(, +				TestConfigurationWithCustomPersistenceUnitManager.class, +		).run((context) -> {, +			LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = context, +					.isEqualTo(context.getBean(PersistenceUnitManager.class));, +		});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private final Class<?> autoConfiguredClass;, +	private final ApplicationContextRunner contextRunner;]