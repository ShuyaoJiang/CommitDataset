[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class), +					.map(Arrays::asList).orElse(Collections.emptyList());, +		String[] excludes = getEnvironment(), +				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class), +					.map(Arrays::asList).orElse(Collections.emptyList());, +		String[] excludes = getEnvironment(), +				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +					return CacheControl.maxAge(this.maxAge.getSeconds(),, +							TimeUnit.SECONDS);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class), +					.map(Arrays::asList).orElse(Collections.emptyList());, +		String[] excludes = getEnvironment(), +				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +					return CacheControl.maxAge(this.maxAge.getSeconds(),, +							TimeUnit.SECONDS);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +				TomcatServletWebServerFactory factory, boolean redirectContextRoot) {, +				TomcatServletWebServerFactory factory, boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class), +					.map(Arrays::asList).orElse(Collections.emptyList());, +		String[] excludes = getEnvironment(), +				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +					return CacheControl.maxAge(this.maxAge.getSeconds(),, +							TimeUnit.SECONDS);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +				TomcatServletWebServerFactory factory, boolean redirectContextRoot) {, +				TomcatServletWebServerFactory factory, boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, + * static and templated files. If both a static and templated index page are available,, + * the static page is preferred., +	private static final List<MediaType> MEDIA_TYPES_ALL = Collections, +			.singletonList(MediaType.ALL);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryHealthWebEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Cloud Foundry Health endpoint, + * extensions., + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +				.andExpect(, +						header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class), +					.map(Arrays::asList).orElse(Collections.emptyList());, +		String[] excludes = getEnvironment(), +				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +					return CacheControl.maxAge(this.maxAge.getSeconds(),, +							TimeUnit.SECONDS);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +				TomcatServletWebServerFactory factory, boolean redirectContextRoot) {, +				TomcatServletWebServerFactory factory, boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, + * static and templated files. If both a static and templated index page are available,, + * the static page is preferred.]