[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, +		assertThat((String) health.getDetails().get("error")), +				.contains("Connection failed");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java, + * Copyright 2012-2017 the original author or authors., +		assertThat(getInterfaceNames(this.className.replace('.', '/'))), +				.contains(this.requiredType.getName().replace('.', '/'));]