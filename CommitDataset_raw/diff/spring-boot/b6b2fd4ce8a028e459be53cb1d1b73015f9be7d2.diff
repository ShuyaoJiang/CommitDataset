[+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.audit.AuditEventsWebEndpointExtension;, + * @author Vedran Pavic, +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean(AuditEventsEndpoint.class), +	public AuditEventsWebEndpointExtension auditEventsWebEndpointExtension(, +			AuditEventsEndpoint auditEventsEndpoint) {, +		return new AuditEventsWebEndpointExtension(auditEventsEndpoint);, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.audit.AuditEventsWebEndpointExtension;, + * @author Vedran Pavic, +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean(AuditEventsEndpoint.class), +	public AuditEventsWebEndpointExtension auditEventsWebEndpointExtension(, +			AuditEventsEndpoint auditEventsEndpoint) {, +		return new AuditEventsWebEndpointExtension(auditEventsEndpoint);, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.audit.AuditEventsWebEndpointExtension;, + * @author Vedran Pavic, +	public void runShouldHaveWebExtensionBean() {, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(AuditEventsWebEndpointExtension.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.audit.AuditEventsWebEndpointExtension;, + * @author Vedran Pavic, +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean(AuditEventsEndpoint.class), +	public AuditEventsWebEndpointExtension auditEventsWebEndpointExtension(, +			AuditEventsEndpoint auditEventsEndpoint) {, +		return new AuditEventsWebEndpointExtension(auditEventsEndpoint);, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.audit.AuditEventsWebEndpointExtension;, + * @author Vedran Pavic, +	public void runShouldHaveWebExtensionBean() {, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(AuditEventsWebEndpointExtension.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventsWebEndpointExtension.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.audit;, +, +import java.util.Date;, +, +import org.springframework.boot.actuate.audit.AuditEventsEndpoint.AuditEventsDescriptor;, +import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;, +import org.springframework.boot.actuate.endpoint.web.WebEndpointResponse;, +import org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointExtension;, +import org.springframework.http.HttpStatus;, +, +/**, + * {@link WebEndpointExtension} for the {@link AuditEventsEndpoint}., + *, + * @author Vedran Pavic, + * @since 2.0.0, + */, +@WebEndpointExtension(endpoint = AuditEventsEndpoint.class), +public class AuditEventsWebEndpointExtension {, +, +	private final AuditEventsEndpoint delegate;, +, +	public AuditEventsWebEndpointExtension(AuditEventsEndpoint delegate) {, +		this.delegate = delegate;, +	}, +, +	@ReadOperation, +	public WebEndpointResponse<AuditEventsDescriptor> eventsWithPrincipalDateAfterAndType(, +			String principal, Date after, String type) {, +		if (after == null) {]