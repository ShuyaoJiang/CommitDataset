[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +	 * The class type names of bean that should be checked. The condition matches when any, +	 * of the classes specified is contained in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +	 * The class type names of bean that should be checked. The condition matches when any, +	 * of the classes specified is contained in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +	 * The class type names of bean that should be checked. The condition matches when, +	 * each class specified is missing in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +	 * The class type names of bean that should be checked. The condition matches when any, +	 * of the classes specified is contained in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +	 * The class type names of bean that should be checked. The condition matches when, +	 * each class specified is missing in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			collect(attributes, "type", this.types);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +	 * The class type names of bean that should be checked. The condition matches when any, +	 * of the classes specified is contained in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +	 * The class type names of bean that should be checked. The condition matches when, +	 * each class specified is missing in the {@link ApplicationContext}., +	 * @return the class type names of beans to check, +	 */, +	String[] type() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			collect(attributes, "type", this.types);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +	public void testClassOnBeanClassNameCondition() {, +		this.context.register(FooConfiguration.class, OnBeanClassNameConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("bar"));, +		assertEquals("bar", this.context.getBean("bar"));, +	}, +, +	@Test, +	@Test, +	public void testOnMissingBeanType() throws Exception {, +		this.context.register(FooConfiguration.class,, +				OnBeanMissingClassConfiguration.class);, +		this.context.refresh();, +		assertFalse(this.context.containsBean("bar"));, +	}, +, +	@ConditionalOnBean(type = "java.lang.String"), +	protected static class OnBeanClassNameConfiguration {, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +	}, +, +	@Configuration, +	@ConditionalOnBean(type = "some.type.Missing"), +	protected static class OnBeanMissingClassConfiguration {, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +	}, +, +	@Configuration]