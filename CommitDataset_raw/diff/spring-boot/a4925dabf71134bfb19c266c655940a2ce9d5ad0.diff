[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	/**, +	 * Allows the DataSource to be managed by the container and obtained via JNDI. The, +	 * {@code URL}, {@code driverClassName}, {@code username} and {@code password} fields, +	 * will be ignored when using JNDI lookups., +	 * @param jndiName the JNDI name, +	 */, +	public void setJndiName(String jndiName) {, +		this.jndiName = jndiName;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	/**, +	 * Allows the DataSource to be managed by the container and obtained via JNDI. The, +	 * {@code URL}, {@code driverClassName}, {@code username} and {@code password} fields, +	 * will be ignored when using JNDI lookups., +	 * @param jndiName the JNDI name, +	 */, +	public void setJndiName(String jndiName) {, +		this.jndiName = jndiName;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import javax.sql.DataSource;, +, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for a JNDI located, + * {@link DataSource}., + *, + * @author Phillip Webb, + * @since 1.2.0, + */, +@Configuration, +@AutoConfigureBefore(DataSourceAutoConfiguration.class), +@ConditionalOnClass(DataSource.class), +@ConditionalOnProperty(prefix = DataSourceProperties.PREFIX, name = "jndi-name"), +@EnableConfigurationProperties(DataSourceProperties.class), +public class JndiDataSourceAutoConfiguration {, +, +	@Bean, +	@ConditionalOnMissingBean, +	public DataSource dataSource(DataSourceProperties properties) {, +		JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();, +		return dataSourceLookup.getDataSource(properties.getJndiName());, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	/**, +	 * Allows the DataSource to be managed by the container and obtained via JNDI. The, +	 * {@code URL}, {@code driverClassName}, {@code username} and {@code password} fields, +	 * will be ignored when using JNDI lookups., +	 * @param jndiName the JNDI name, +	 */]