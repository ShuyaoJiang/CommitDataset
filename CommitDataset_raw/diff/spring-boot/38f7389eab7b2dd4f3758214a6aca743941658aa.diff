[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSocialTokenServices.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSocialTokenServices.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java, +, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSocialTokenServices.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java, +, +, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +	private static final Log logger = LogFactory.getLog(ImageBanner.class);, +			logger.warn("Image banner not printable: " + this.image + " (" + ex.getClass(), +			logger.debug("Image banner printing failure", ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSocialTokenServices.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java, +, +, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +	private static final Log logger = LogFactory.getLog(ImageBanner.class);, +			logger.warn("Image banner not printable: " + this.image + " (" + ex.getClass(), +			logger.debug("Image banner printing failure", ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private static final Log logger = LogFactory, +			.getLog(PropertiesConfigurationFactory.class);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Property Sources: " + this.propertySources);, +			PropertiesConfigurationFactory.logger, +					.error("Failed to load Properties validation bean. ", +			logger.error("Properties configuration failed validation");, +				logger.error(, +						this.messageSource != null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/SpringSocialTokenServices.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java, +, +, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +	private static final Log logger = LogFactory.getLog(ImageBanner.class);, +			logger.warn("Image banner not printable: " + this.image + " (" + ex.getClass(), +			logger.debug("Image banner printing failure", ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private static final Log logger = LogFactory, +			.getLog(PropertiesConfigurationFactory.class);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Property Sources: " + this.propertySources);, +			PropertiesConfigurationFactory.logger, +					.error("Failed to load Properties validation bean. ", +			logger.error("Properties configuration failed validation");, +				logger.error(, +						this.messageSource != null, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/YamlConfigurationFactory.java, +	private static final Log logger = LogFactory.getLog(YamlConfigurationFactory.class);, +			if (logger.isTraceEnabled()) {, +				logger.trace(String.format("Yaml document is %n%s", this.yaml));, +			logger.error("Failed to load YAML validation bean. ", +			logger.error("YAML configuration failed validation");, +				logger.error(getErrorMessage(error));, +	private Object getErrorMessage(ObjectError error) {, +		if (this.messageSource != null) {, +			Locale locale = Locale.getDefault();, +			return this.messageSource.getMessage(error, locale) + " (" + error + ")";, +		}, +		return error;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityInterceptor.java, +	private static final Log logger = LogFactory, +			.getLog(CloudFoundrySecurityInterceptor.class);, +			logger.error(ex);]