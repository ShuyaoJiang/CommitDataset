[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +	public void autoDataSource() throws SQLException {, +		this.context.getBean(DataSource.class).getConnection().close();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +	public void autoDataSource() throws SQLException {, +		this.context.getBean(DataSource.class).getConnection().close();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +	public void autoDataSource() throws SQLException {, +		this.context.getBean(DataSource.class).getConnection().close();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		HikariDataSource dataSource = this.context.getBean(HikariDataSource.class);, +		assertThat(dataSource.getJdbcUrl()).isNotNull();, +	public void tomcatIsFallback() throws Exception {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.getUrl()).isEqualTo("jdbc:hsqldb:mem:testdb");, +	}, +, +	@Test, +	public void tomcatValidatesConnectionByDefault() {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.isTestOnBorrow()).isTrue();, +		assertThat(dataSource.getValidationQuery()), +				.isEqualTo(DatabaseDriver.HSQLDB.getValidationQuery());, +	}, +, +	@Test, +				"com.zaxxer.hikari", "org.apache.tomcat");, +				org.apache.commons.dbcp2.BasicDataSource.class, "com.zaxxer.hikari",, +				"org.apache.tomcat");, +		HikariDataSource pool = (HikariDataSource) bean;, +		HikariDataSource pool = (HikariDataSource) bean;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +	public void autoDataSource() throws SQLException {, +		this.context.getBean(DataSource.class).getConnection().close();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		HikariDataSource dataSource = this.context.getBean(HikariDataSource.class);, +		assertThat(dataSource.getJdbcUrl()).isNotNull();, +	public void tomcatIsFallback() throws Exception {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.getUrl()).isEqualTo("jdbc:hsqldb:mem:testdb");, +	}, +, +	@Test, +	public void tomcatValidatesConnectionByDefault() {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.isTestOnBorrow()).isTrue();, +		assertThat(dataSource.getValidationQuery()), +				.isEqualTo(DatabaseDriver.HSQLDB.getValidationQuery());, +	}, +, +	@Test, +				"com.zaxxer.hikari", "org.apache.tomcat");, +				org.apache.commons.dbcp2.BasicDataSource.class, "com.zaxxer.hikari",, +				"org.apache.tomcat");, +		HikariDataSource pool = (HikariDataSource) bean;, +		HikariDataSource pool = (HikariDataSource) bean;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerTests.java, +import com.zaxxer.hikari.HikariDataSource;, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +		assertThat(dataSource).isInstanceOf(HikariDataSource.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java, +	public void autoDataSource() throws SQLException {, +		this.context.getBean(DataSource.class).getConnection().close();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +	@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		HikariDataSource dataSource = this.context.getBean(HikariDataSource.class);, +		assertThat(dataSource.getJdbcUrl()).isNotNull();, +	public void tomcatIsFallback() throws Exception {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.getUrl()).isEqualTo("jdbc:hsqldb:mem:testdb");, +	}, +, +	@Test, +	public void tomcatValidatesConnectionByDefault() {, +		org.apache.tomcat.jdbc.pool.DataSource dataSource = autoConfigureDataSource(, +				org.apache.tomcat.jdbc.pool.DataSource.class, "com.zaxxer.hikari");, +		assertThat(dataSource.isTestOnBorrow()).isTrue();, +		assertThat(dataSource.getValidationQuery()), +				.isEqualTo(DatabaseDriver.HSQLDB.getValidationQuery());, +	}, +, +	@Test, +				"com.zaxxer.hikari", "org.apache.tomcat");, +				org.apache.commons.dbcp2.BasicDataSource.class, "com.zaxxer.hikari",]