[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.data.repository.config.RepositoryConfigurationDelegate;, +		BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware,, +	private ResourceLoader resourceLoader;, +		new RepositoryConfigurationDelegate(getConfigurationSource(), this.resourceLoader), +				.registerRepositoriesIn(registry, getRepositoryConfigurationExtension());, +		return new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),, +				this.environment) {, +	public void setResourceLoader(ResourceLoader resourceLoader) {, +		this.resourceLoader = resourceLoader;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.data.repository.config.RepositoryConfigurationDelegate;, +		BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware,, +	private ResourceLoader resourceLoader;, +		new RepositoryConfigurationDelegate(getConfigurationSource(), this.resourceLoader), +				.registerRepositoriesIn(registry, getRepositoryConfigurationExtension());, +		return new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),, +				this.environment) {, +	public void setResourceLoader(ResourceLoader resourceLoader) {, +		this.resourceLoader = resourceLoader;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.data.alt.CityMongoDbRepository;, +import org.springframework.context.annotation.ComponentScan.Filter;, +import org.springframework.context.annotation.FilterType;, +	@EnableJpaRepositories(basePackageClasses = org.springframework.boot.autoconfigure.data.alt.CityJpaRepository.class, excludeFilters = { @Filter(type = FilterType.ASSIGNABLE_TYPE, value = CityMongoDbRepository.class) }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.data.repository.config.RepositoryConfigurationDelegate;, +		BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware,, +	private ResourceLoader resourceLoader;, +		new RepositoryConfigurationDelegate(getConfigurationSource(), this.resourceLoader), +				.registerRepositoriesIn(registry, getRepositoryConfigurationExtension());, +		return new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),, +				this.environment) {, +	public void setResourceLoader(ResourceLoader resourceLoader) {, +		this.resourceLoader = resourceLoader;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.data.alt.CityMongoDbRepository;, +import org.springframework.context.annotation.ComponentScan.Filter;, +import org.springframework.context.annotation.FilterType;, +	@EnableJpaRepositories(basePackageClasses = org.springframework.boot.autoconfigure.data.alt.CityJpaRepository.class, excludeFilters = { @Filter(type = FilterType.ASSIGNABLE_TYPE, value = CityMongoDbRepository.class) }), +++ b/spring-boot-dependencies/pom.xml, +		<spring-data-jpa.version>1.5.0.RC1</spring-data-jpa.version>, +		<spring-data-mongodb.version>1.4.0.RC1</spring-data-mongodb.version>]