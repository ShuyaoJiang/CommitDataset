[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchive.java, +	/**, +	 * Returns {@code true} if the Devtools jar should be excluded, otherwise, +	 * {@code false}., +	 *, +	 * @return {@code true} if the Devtools jar should be excluded, or {@code false} if, +	 * not, +	 */, +	@Input, +	boolean isExcludeDevtools();, +, +	/**, +	 * Sets whether or not the Devtools jar should be excluded., +	 *, +	 * @param excludeDevtools {@code true} if the Devtools jar should be excluded, or, +	 * {@code false} if not, +	 */, +	void setExcludeDevtools(boolean excludeDevtools);, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchive.java, +	/**, +	 * Returns {@code true} if the Devtools jar should be excluded, otherwise, +	 * {@code false}., +	 *, +	 * @return {@code true} if the Devtools jar should be excluded, or {@code false} if, +	 * not, +	 */, +	@Input, +	boolean isExcludeDevtools();, +, +	/**, +	 * Sets whether or not the Devtools jar should be excluded., +	 *, +	 * @param excludeDevtools {@code true} if the Devtools jar should be excluded, or, +	 * {@code false} if not, +	 */, +	void setExcludeDevtools(boolean excludeDevtools);, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +	private final PatternSet exclusions = new PatternSet();, +, +	private boolean excludeDevtools = true;, +, +		configureExclusions();, +				jar.isPreserveFileTimestamps(), this.requiresUnpack.getAsSpec(),, +				this.exclusions.getAsExcludeSpec(), this.launchScript,, +				this.storedPathPrefixes);, +	boolean isExcludeDevtools() {, +		return this.excludeDevtools;, +	}, +, +	void setExcludeDevtools(boolean excludeDevtools) {, +		this.excludeDevtools = excludeDevtools;, +		configureExclusions();, +	}, +, +	private void configureExclusions() {, +		Set<String> excludes = new HashSet<String>();, +		if (this.excludeDevtools) {, +			excludes.add("**/spring-boot-devtools-*.jar");, +		}, +		this.exclusions.setExcludes(excludes);, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchive.java, +	/**, +	 * Returns {@code true} if the Devtools jar should be excluded, otherwise, +	 * {@code false}., +	 *, +	 * @return {@code true} if the Devtools jar should be excluded, or {@code false} if, +	 * not, +	 */, +	@Input, +	boolean isExcludeDevtools();, +, +	/**, +	 * Sets whether or not the Devtools jar should be excluded., +	 *, +	 * @param excludeDevtools {@code true} if the Devtools jar should be excluded, or, +	 * {@code false} if not, +	 */, +	void setExcludeDevtools(boolean excludeDevtools);, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +	private final PatternSet exclusions = new PatternSet();, +, +	private boolean excludeDevtools = true;, +, +		configureExclusions();, +				jar.isPreserveFileTimestamps(), this.requiresUnpack.getAsSpec(),, +				this.exclusions.getAsExcludeSpec(), this.launchScript,, +				this.storedPathPrefixes);, +	boolean isExcludeDevtools() {, +		return this.excludeDevtools;, +	}, +, +	void setExcludeDevtools(boolean excludeDevtools) {, +		this.excludeDevtools = excludeDevtools;, +		configureExclusions();, +	}]