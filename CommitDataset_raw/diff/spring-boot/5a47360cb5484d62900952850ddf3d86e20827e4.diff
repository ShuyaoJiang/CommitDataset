[+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.test.context.support.AnnotationConfigContextLoaderUtils;, +		if (sources.isEmpty()) {, +			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(mergedConfig, +					.getTestClass());, +			sources.addAll(Arrays.asList(defaultConfigClasses));, +		}, +	/**, +	 * Detect the default configuration classes for the supplied test class., +	 * , +	 * <p>, +	 * The default implementation simply delegates to, +	 * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}., +	 * , +	 * @param declaringClass the test class that declared {@code @ContextConfiguration}, +	 * @return an array of default configuration classes, potentially empty but never, +	 * {@code null}, +	 * @see AnnotationConfigContextLoaderUtils, +	 */, +	protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {, +		return AnnotationConfigContextLoaderUtils, +				.detectDefaultConfigurationClasses(declaringClass);, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.test.context.support.AnnotationConfigContextLoaderUtils;, +		if (sources.isEmpty()) {, +			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(mergedConfig, +					.getTestClass());, +			sources.addAll(Arrays.asList(defaultConfigClasses));, +		}, +	/**, +	 * Detect the default configuration classes for the supplied test class., +	 * , +	 * <p>, +	 * The default implementation simply delegates to, +	 * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}., +	 * , +	 * @param declaringClass the test class that declared {@code @ContextConfiguration}, +	 * @return an array of default configuration classes, potentially empty but never, +	 * {@code null}, +	 * @see AnnotationConfigContextLoaderUtils, +	 */, +	protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {, +		return AnnotationConfigContextLoaderUtils, +				.detectDefaultConfigurationClasses(declaringClass);, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationDefaultConfigurationTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;, +, +import static org.junit.Assert.assertNotNull;, +, +/**, + * @author Dave Syer, + */, +@RunWith(SpringJUnit4ClassRunner.class), +@SpringApplicationConfiguration, +public class SpringApplicationConfigurationDefaultConfigurationTests {, +, +	@Autowired, +	private Config config;, +, +	@Test, +	public void nestedConfigClasses() {, +		assertNotNull(this.config);, +	}, +, +	@Configuration, +	protected static class Config {, +, +	}, +, +}]