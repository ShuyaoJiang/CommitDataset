[+++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java, + * @author Jean de Klerk, +		throw new IllegalArgumentException("Cannot parse JSON");, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java, + * @author Jean de Klerk, +		throw new IllegalArgumentException("Cannot parse JSON");, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java, + * @author Jean de Klerk, +	public Map<String, Object> parseMap(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("{")) {, +				return this.gson.fromJson(json, Map.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +	public List<Object> parseList(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("[")) {, +				return this.gson.fromJson(json, List.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java, + * @author Jean de Klerk, +		throw new IllegalArgumentException("Cannot parse JSON");, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java, + * @author Jean de Klerk, +	public Map<String, Object> parseMap(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("{")) {, +				return this.gson.fromJson(json, Map.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +	public List<Object> parseList(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("[")) {, +				return this.gson.fromJson(json, List.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/JsonSimpleJsonParser.java, + * @author Jean de Klerk, +	public Map<String, Object> parseMap(String json) {, +		try {, +			return (Map<String, Object>) new JSONParser().parse(json);, +	public List<Object> parseList(String json) {, +		try {, +			return (List<Object>) new JSONParser().parse(json);, +++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java, + * @author Jean de Klerk, +		throw new IllegalArgumentException("Cannot parse JSON");, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java, + * @author Jean de Klerk, +	public Map<String, Object> parseMap(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("{")) {, +				return this.gson.fromJson(json, Map.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +	public List<Object> parseList(String json) {, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("[")) {, +				return this.gson.fromJson(json, List.class);, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +++ b/spring-boot/src/main/java/org/springframework/boot/json/JsonSimpleJsonParser.java, + * @author Jean de Klerk, +	public Map<String, Object> parseMap(String json) {, +		try {, +			return (Map<String, Object>) new JSONParser().parse(json);, +	public List<Object> parseList(String json) {, +		try {, +			return (List<Object>) new JSONParser().parse(json);, +++ b/spring-boot/src/main/java/org/springframework/boot/json/YamlJsonParser.java, + * @author Jean de Klerk, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("{")) {, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +	}, +		if (json != null) {, +			json = json.trim();, +			if (json.startsWith("[")) {, +		}, +		throw new IllegalArgumentException("Cannot parse JSON");, +	}]