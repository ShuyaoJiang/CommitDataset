[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.context.annotation.Import;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.integration.annotation.IntegrationComponentScan;, +import org.springframework.integration.config.IntegrationComponentScanRegistrar;, +import org.springframework.integration.gateway.GatewayProxyFactoryBean;, +		}, +, +	}, +, +	@ConditionalOnMissingBean(GatewayProxyFactoryBean.class), +	@Import(AutoIntegrationComponentScanRegistrar.class), +	protected static class IntegrationComponentScanAutoConfiguration {, +, +	}, +, +	private static class AutoIntegrationComponentScanRegistrar, +			extends IntegrationComponentScanRegistrar {, +, +		@Override, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				final BeanDefinitionRegistry registry) {, +			StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(, +					IntegrationComponentScanConfiguration.class, true) {, +, +				@Override, +				public Map<String, Object> getAnnotationAttributes(, +						String annotationName) {, +					Map<String, Object> annotationAttributes = super.getAnnotationAttributes(, +							annotationName);, +					if (IntegrationComponentScan.class.getName().equals(annotationName)) {, +						BeanFactory beanFactory = (BeanFactory) registry;, +						if (AutoConfigurationPackages.has(beanFactory)) {, +							annotationAttributes.put("value",, +									AutoConfigurationPackages.get(beanFactory));, +						}, +					}, +					return annotationAttributes;, +				}, +, +			};, +			super.registerBeanDefinitions(metadata, registry);, +		}, +, +		@IntegrationComponentScan, +		private class IntegrationComponentScanConfiguration {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +import java.util.Map;, +, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.context.annotation.Import;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.integration.annotation.IntegrationComponentScan;, +import org.springframework.integration.config.IntegrationComponentScanRegistrar;, +import org.springframework.integration.gateway.GatewayProxyFactoryBean;, +		}, +, +	}, +, +	@ConditionalOnMissingBean(GatewayProxyFactoryBean.class), +	@Import(AutoIntegrationComponentScanRegistrar.class), +	protected static class IntegrationComponentScanAutoConfiguration {, +, +	}, +, +	private static class AutoIntegrationComponentScanRegistrar, +			extends IntegrationComponentScanRegistrar {, +, +		@Override, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				final BeanDefinitionRegistry registry) {, +			StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(, +					IntegrationComponentScanConfiguration.class, true) {, +, +				@Override, +				public Map<String, Object> getAnnotationAttributes(, +						String annotationName) {, +					Map<String, Object> annotationAttributes = super.getAnnotationAttributes(, +							annotationName);, +					if (IntegrationComponentScan.class.getName().equals(annotationName)) {, +						BeanFactory beanFactory = (BeanFactory) registry;, +						if (AutoConfigurationPackages.has(beanFactory)) {, +							annotationAttributes.put("value",, +									AutoConfigurationPackages.get(beanFactory));, +						}, +					}, +					return annotationAttributes;, +				}, +, +			};, +			super.registerBeanDefinitions(metadata, registry);, +		}, +]