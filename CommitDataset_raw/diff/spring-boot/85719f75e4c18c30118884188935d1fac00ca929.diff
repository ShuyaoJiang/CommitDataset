[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, +	private MetricReader metricRepository = new InMemoryMetricRepository();, +	private TraceRepository traceRepository = new InMemoryTraceRepository();, +, +	@Autowired(required = false), +	private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, +	private MetricReader metricRepository = new InMemoryMetricRepository();, +	private TraceRepository traceRepository = new InMemoryTraceRepository();, +, +	@Autowired(required = false), +	private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, + * @author Dave Syer, +	private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +, +	public void setConfigurationBeanFactoryMetaData(, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData) {, +		this.beanFactoryMetaData = beanFactoryMetaData;, +	}, +, +, +		Map<String, Object> beans = new HashMap<String, Object>(, +				context.getBeansWithAnnotation(ConfigurationProperties.class));, +		if (this.beanFactoryMetaData != null) {, +			beans.putAll(this.beanFactoryMetaData, +					.getBeansWithFactoryAnnotation(ConfigurationProperties.class));, +		}, +			root.put("prefix", extractPrefix(beanName, bean));, +	private String extractPrefix(String beanName, Object bean) {, +		if (this.beanFactoryMetaData != null) {, +			ConfigurationProperties override = this.beanFactoryMetaData, +					.findFactoryAnnotation(beanName, ConfigurationProperties.class);, +			if (override != null) {, +				// The @Bean-level @ConfigurationProperties overrides the one at type, +				// level when binding. Arguably we should render them both, but this one, +				// might be the most relevant for a starting point., +				annotation = override;, +			}, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, +	private MetricReader metricRepository = new InMemoryMetricRepository();, +	private TraceRepository traceRepository = new InMemoryTraceRepository();, +, +	@Autowired(required = false), +	private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, + * @author Dave Syer, +	private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +, +	public void setConfigurationBeanFactoryMetaData(, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData) {, +		this.beanFactoryMetaData = beanFactoryMetaData;, +	}, +, +, +		Map<String, Object> beans = new HashMap<String, Object>(, +				context.getBeansWithAnnotation(ConfigurationProperties.class));, +		if (this.beanFactoryMetaData != null) {, +			beans.putAll(this.beanFactoryMetaData, +					.getBeansWithFactoryAnnotation(ConfigurationProperties.class));, +		}, +			root.put("prefix", extractPrefix(beanName, bean));, +	private String extractPrefix(String beanName, Object bean) {, +		if (this.beanFactoryMetaData != null) {, +			ConfigurationProperties override = this.beanFactoryMetaData, +					.findFactoryAnnotation(beanName, ConfigurationProperties.class);, +			if (override != null) {, +				// The @Bean-level @ConfigurationProperties overrides the one at type, +				// level when binding. Arguably we should render them both, but this one, +				// might be the most relevant for a starting point., +				annotation = override;, +			}, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointMethodAnnotationsTests.java, +/*, + * Copyright 2013-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]