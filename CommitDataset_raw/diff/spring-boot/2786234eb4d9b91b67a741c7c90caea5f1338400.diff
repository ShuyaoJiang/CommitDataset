[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, +				&& (isSetterReturnType(method));, +	}, +, +	private boolean isSetterReturnType(ExecutableElement method) {, +		return (TypeKind.VOID == method.getReturnType().getKind(), +				|| method.getEnclosingElement().asType().equals(method.getReturnType()));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, +				&& (isSetterReturnType(method));, +	}, +, +	private boolean isSetterReturnType(ExecutableElement method) {, +		return (TypeKind.VOID == method.getReturnType().getKind(), +				|| method.getEnclosingElement().asType().equals(method.getReturnType()));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.BuilderPojo;, +	@Test, +	public void builderPojo() throws IOException {, +		ConfigurationMetadata metadata = compile(BuilderPojo.class);, +		assertThat(metadata, containsProperty("builder.name"));, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, +				&& (isSetterReturnType(method));, +	}, +, +	private boolean isSetterReturnType(ExecutableElement method) {, +		return (TypeKind.VOID == method.getReturnType().getKind(), +				|| method.getEnclosingElement().asType().equals(method.getReturnType()));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.BuilderPojo;, +	@Test, +	public void builderPojo() throws IOException {, +		ConfigurationMetadata metadata = compile(BuilderPojo.class);, +		assertThat(metadata, containsProperty("builder.name"));, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationsample/specific/BuilderPojo.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationsample.specific;, +, +import org.springframework.boot.configurationsample.ConfigurationProperties;, +, +/**, + *, + * @author Stephane Nicoll, + */, +@ConfigurationProperties(prefix = "builder"), +public class BuilderPojo {, +, +	private String name;, +, +	public String getName() {, +		return name;, +	}, +, +	public BuilderPojo setName(String name) {, +		this.name = name;, +		return this;, +	}, +}]