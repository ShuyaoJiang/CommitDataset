[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@ConfigurationProperties("spring.activemq.pool.configuration"), +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@ConfigurationProperties("spring.activemq.pool.configuration"), +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * Copyright 2012-2016 the original author or authors., +		 * Whether a PooledConnectionFactory should be created instead of a regular, +		 * Maximum number of pooled connections., +		 * Connection idle timeout in milliseconds., +		private int idleTimeout = 30000;, +		 * Connection expiration timeout in milliseconds., +		private long expiryTimeout = 0;, +		public int getIdleTimeout() {, +			return this.idleTimeout;, +		public void setIdleTimeout(int idleTimeout) {, +			this.idleTimeout = idleTimeout;, +		public long getExpiryTimeout() {, +			return this.expiryTimeout;, +		public void setExpiryTimeout(long expiryTimeout) {, +			this.expiryTimeout = expiryTimeout;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@ConfigurationProperties("spring.activemq.pool.configuration"), +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * Copyright 2012-2016 the original author or authors., +		 * Whether a PooledConnectionFactory should be created instead of a regular, +		 * Maximum number of pooled connections., +		 * Connection idle timeout in milliseconds., +		private int idleTimeout = 30000;, +		 * Connection expiration timeout in milliseconds., +		private long expiryTimeout = 0;, +		public int getIdleTimeout() {, +			return this.idleTimeout;, +		public void setIdleTimeout(int idleTimeout) {, +			this.idleTimeout = idleTimeout;, +		public long getExpiryTimeout() {, +			return this.expiryTimeout;, +		public void setExpiryTimeout(long expiryTimeout) {, +			this.expiryTimeout = expiryTimeout;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@ConfigurationProperties("spring.activemq.pool.configuration"), +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * Copyright 2012-2016 the original author or authors., +		 * Whether a PooledConnectionFactory should be created instead of a regular, +		 * Maximum number of pooled connections., +		 * Connection idle timeout in milliseconds., +		private int idleTimeout = 30000;, +		 * Connection expiration timeout in milliseconds., +		private long expiryTimeout = 0;, +		public int getIdleTimeout() {, +			return this.idleTimeout;, +		public void setIdleTimeout(int idleTimeout) {, +			this.idleTimeout = idleTimeout;, +		public long getExpiryTimeout() {, +			return this.expiryTimeout;, +		public void setExpiryTimeout(long expiryTimeout) {, +			this.expiryTimeout = expiryTimeout;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfigurationTests.java, + * @author Stephane Nicoll, +	public void customPooledConnectionFactoryConfiguration() {, +			"spring.activemq.pool.maxConnections:256",, +			"spring.activemq.pool.idleTimeout:512",, +			"spring.activemq.pool.expiryTimeout:4096",, +			"spring.activemq.pool.configuration.maximumActiveSessionPerConnection:1024",, +			"spring.activemq.pool.configuration.timeBetweenExpirationCheckMillis:2048");, +		assertThat(connectionFactory.createConnection()).isNull();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@ConfigurationProperties("spring.activemq.pool.configuration"), +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * Copyright 2012-2016 the original author or authors., +		 * Whether a PooledConnectionFactory should be created instead of a regular, +		 * Maximum number of pooled connections., +		 * Connection idle timeout in milliseconds., +		private int idleTimeout = 30000;, +		 * Connection expiration timeout in milliseconds., +		private long expiryTimeout = 0;, +		public int getIdleTimeout() {]