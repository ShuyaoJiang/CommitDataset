[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.fasterxml.jackson.dataformat</groupId>, +			<artifactId>jackson-dataformat-xml</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<exclusions>, +				<exclusion>, +					<groupId>org.codehaus.woodstox</groupId>, +					<artifactId>wstx-asl</artifactId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.fasterxml.jackson.dataformat</groupId>, +			<artifactId>jackson-dataformat-xml</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<exclusions>, +				<exclusion>, +					<groupId>org.codehaus.woodstox</groupId>, +					<artifactId>wstx-asl</artifactId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Map;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, + * <li>a {@link Jackson2ObjectMapperBuilder} in case none is already configured.</li>, + * @author Sebastien Deleuze, +	@ConditionalOnClass({ ObjectMapper.class, Jackson2ObjectMapperBuilder.class }), +		@Bean, +		@Primary, +		@ConditionalOnMissingBean(ObjectMapper.class), +		public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {, +			return builder.createXmlMapper(false).build();, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass({ ObjectMapper.class, Jackson2ObjectMapperBuilder.class }), +	@EnableConfigurationProperties({ HttpMapperProperties.class, JacksonProperties.class }), +	static class JacksonObjectMapperBuilderAutoConfiguration {, +, +		@ConditionalOnMissingBean(Jackson2ObjectMapperBuilder.class), +		public Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder() {, +			Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();, +				builder.featuresToEnable(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);, +			configureFeatures(builder, this.jacksonProperties.getDeserialization());, +			configureFeatures(builder, this.jacksonProperties.getSerialization());, +			configureFeatures(builder, this.jacksonProperties.getMapper());, +			configureFeatures(builder, this.jacksonProperties.getParser());, +			configureFeatures(builder, this.jacksonProperties.getGenerator());, +			configureDateFormat(builder);, +			configurePropertyNamingStrategy(builder);, +			return builder;, +		private void configureFeatures(Jackson2ObjectMapperBuilder builder,, +				Map<?, Boolean> features) {, +			for (Entry<?, Boolean> entry : features.entrySet()) {, +				if (entry.getValue() != null && entry.getValue()) {, +					builder.featuresToEnable(entry.getKey());, +				}, +				else {, +					builder.featuresToDisable(entry.getKey());, +				}, +			}, +		}, +, +		private void configurePropertyNamingStrategy(Jackson2ObjectMapperBuilder builder) {, +					builder.propertyNamingStrategy((PropertyNamingStrategy) BeanUtils, +							builder.propertyNamingStrategy((PropertyNamingStrategy) field, +		private void configureDateFormat(Jackson2ObjectMapperBuilder builder) {, +					builder.dateFormat((DateFormat) BeanUtils.instantiateClass(clazz));, +					builder.dateFormat(new SimpleDateFormat(dateFormat));, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.fasterxml.jackson.dataformat</groupId>, +			<artifactId>jackson-dataformat-xml</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<exclusions>, +				<exclusion>, +					<groupId>org.codehaus.woodstox</groupId>, +					<artifactId>wstx-asl</artifactId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Map;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, + * <li>a {@link Jackson2ObjectMapperBuilder} in case none is already configured.</li>, + * @author Sebastien Deleuze, +	@ConditionalOnClass({ ObjectMapper.class, Jackson2ObjectMapperBuilder.class }), +		@Bean, +		@Primary, +		@ConditionalOnMissingBean(ObjectMapper.class), +		public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {, +			return builder.createXmlMapper(false).build();, +		}, +, +	}]