[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		FailureAnalyzers analyzers = null;, +			analyzers = new FailureAnalyzers(context);, +			handleRunFailure(context, listeners, analyzers, ex);, +			SpringApplicationRunListeners listeners, FailureAnalyzers analyzers,, +			Throwable exception) {, +				reportFailure(analyzers, exception);, +	private void reportFailure(FailureAnalyzers analyzers, Throwable failure) {, +			if (analyzers != null && analyzers.analyzeAndReport(failure)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		FailureAnalyzers analyzers = null;, +			analyzers = new FailureAnalyzers(context);, +			handleRunFailure(context, listeners, analyzers, ex);, +			SpringApplicationRunListeners listeners, FailureAnalyzers analyzers,, +			Throwable exception) {, +				reportFailure(analyzers, exception);, +	private void reportFailure(FailureAnalyzers analyzers, Throwable failure) {, +			if (analyzers != null && analyzers.analyzeAndReport(failure)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, + * @author Stephane Nicoll, +	private final ClassLoader classLoader;, +, +	private final List<FailureAnalyzer> analyzers;, +, +	public FailureAnalyzers(ConfigurableApplicationContext context) {, +		this.classLoader = context.getClassLoader();, +		this.analyzers = loadFailureAnalyzers(this.classLoader);, +		prepareFailureAnalyzers(this.analyzers, context);, +	/**, +	 * Analyze and report the specified {@code failure}., +	 *, +	 * @param failure the failure to analyze, +	 * @return {@code true} if the failure was handled, +	 */, +	public boolean analyzeAndReport(Throwable failure) {, +		FailureAnalysis analysis = analyze(failure, this.analyzers);, +		return report(analysis, this.classLoader);, +	}, +, +	/**, +	 * Analyze and report the specified {@code failure}., +	 *, +	 * @param failure the failure to analyze, +	 * @param classLoader the classloader to use, +	 * @param context the context to use, +	 * @return {@code true} if the failure was handled, +	 * @deprecated in favour of {@link #analyzeAndReport(Throwable)}, +	 */, +	@Deprecated, +		prepareFailureAnalyzers(analyzers, context);, +		FailureAnalysis analysis = analyze(failure, analyzers);, +		return report(analysis, classLoader);, +	private static void prepareFailureAnalyzers(List<FailureAnalyzer> analyzers,, +			ConfigurableApplicationContext context) {, +		}, +	}, +, +	private static FailureAnalysis analyze(Throwable failure,, +			List<FailureAnalyzer> analyzers) {, +		for (FailureAnalyzer analyzer : analyzers) {, +			ClassLoader classLoader) {, +		List<FailureAnalysisReporter> reporters = SpringFactoriesLoader, +				.loadFactories(FailureAnalysisReporter.class, classLoader);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		FailureAnalyzers analyzers = null;, +			analyzers = new FailureAnalyzers(context);, +			handleRunFailure(context, listeners, analyzers, ex);, +			SpringApplicationRunListeners listeners, FailureAnalyzers analyzers,, +			Throwable exception) {, +				reportFailure(analyzers, exception);, +	private void reportFailure(FailureAnalyzers analyzers, Throwable failure) {, +			if (analyzers != null && analyzers.analyzeAndReport(failure)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, + * @author Stephane Nicoll, +	private final ClassLoader classLoader;, +, +	private final List<FailureAnalyzer> analyzers;, +, +	public FailureAnalyzers(ConfigurableApplicationContext context) {, +		this.classLoader = context.getClassLoader();, +		this.analyzers = loadFailureAnalyzers(this.classLoader);, +		prepareFailureAnalyzers(this.analyzers, context);, +	/**, +	 * Analyze and report the specified {@code failure}., +	 *, +	 * @param failure the failure to analyze, +	 * @return {@code true} if the failure was handled, +	 */, +	public boolean analyzeAndReport(Throwable failure) {, +		FailureAnalysis analysis = analyze(failure, this.analyzers);, +		return report(analysis, this.classLoader);, +	}, +, +	/**, +	 * Analyze and report the specified {@code failure}., +	 *, +	 * @param failure the failure to analyze, +	 * @param classLoader the classloader to use, +	 * @param context the context to use, +	 * @return {@code true} if the failure was handled]