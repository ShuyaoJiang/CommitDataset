[+++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.apache.kafka</groupId>, +			<artifactId>kafka-streams</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.apache.kafka</groupId>, +			<artifactId>kafka-streams</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import java.util.Map;, +import org.apache.kafka.streams.StreamsBuilder;, +, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.env.Environment;, +import org.springframework.kafka.annotation.EnableKafkaStreams;, +import org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;, +import org.springframework.kafka.config.KafkaStreamsConfiguration;, +import org.springframework.kafka.core.StreamsBuilderFactoryBean;, +	@Configuration, +	@ConditionalOnClass(StreamsBuilder.class), +	public static class KafkaStreamsAutoConfiguration {, +, +		@Bean(KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME), +		public KafkaStreamsConfiguration defaultKafkaStreamsConfig(, +				KafkaProperties properties, Environment environment) {, +, +			Map<String, Object> streamsProperties = properties.buildStreamsProperties();, +			if (properties.getStreams().getApplicationId() == null) {, +				if (environment.getProperty("spring.application.id") != null) {, +					streamsProperties.put("application.id",, +							environment.getProperty("spring.application.name"));, +				}, +			}, +			return new KafkaStreamsConfiguration(streamsProperties);, +		}, +, +		@Bean, +		public KafkaStreamsFactoryBeanConfigurer kafkaStreamsFactoryBeanConfigurer(, +				StreamsBuilderFactoryBean factoryBean, KafkaProperties properties) {, +, +			return new KafkaStreamsFactoryBeanConfigurer(factoryBean, properties);, +		}, +, +		@Configuration, +		@EnableKafkaStreams, +		public static class EnableKafkaStreamsAutoConfiguration {, +, +		}, +, +		static class KafkaStreamsFactoryBeanConfigurer implements InitializingBean {, +, +			private final StreamsBuilderFactoryBean factoryBean;, +, +			private final KafkaProperties properties;, +, +			KafkaStreamsFactoryBeanConfigurer(StreamsBuilderFactoryBean factoryBean,, +					KafkaProperties properties) {, +				this.factoryBean = factoryBean;, +				this.properties = properties;, +			}, +, +			@Override, +			public void afterPropertiesSet() throws Exception {, +				this.factoryBean, +						.setAutoStartup(this.properties.getStreams().isAutoStartup());, +			}, +, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.apache.kafka</groupId>, +			<artifactId>kafka-streams</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import java.util.Map;, +import org.apache.kafka.streams.StreamsBuilder;, +, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.env.Environment;, +import org.springframework.kafka.annotation.EnableKafkaStreams;, +import org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;, +import org.springframework.kafka.config.KafkaStreamsConfiguration;, +import org.springframework.kafka.core.StreamsBuilderFactoryBean;, +	@Configuration, +	@ConditionalOnClass(StreamsBuilder.class), +	public static class KafkaStreamsAutoConfiguration {, +, +		@Bean(KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME), +		public KafkaStreamsConfiguration defaultKafkaStreamsConfig(, +				KafkaProperties properties, Environment environment) {, +, +			Map<String, Object> streamsProperties = properties.buildStreamsProperties();]