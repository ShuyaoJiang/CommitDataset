[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				"server.servlet.context-path=",, +				"server.servlet.context-path=/spring",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				"server.servlet.context-path=",, +				"server.servlet.context-path=/spring",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, +		"server.servlet.contextPath=/spring" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				"server.servlet.context-path=",, +				"server.servlet.context-path=/spring",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, +		"server.servlet.contextPath=/spring" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerServletPathIntegrationTests.java, +		"server.servlet.path=/spring" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				"server.servlet.context-path=",, +				"server.servlet.context-path=/spring",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, +		"server.servlet.contextPath=/spring" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerServletPathIntegrationTests.java, +		"server.servlet.path=/spring" }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +			String[] paths = this.server.getServlet().getPathsArray(ignored);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				"server.servlet.context-path=",, +				"server.servlet.context-path=/spring",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerContextPathIntegrationTests.java, +		"server.servlet.contextPath=/spring" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointServerServletPathIntegrationTests.java, +		"server.servlet.path=/spring" }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +			String[] paths = this.server.getServlet().getPathsArray(ignored);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					dispatcherServlet, this.serverProperties.getServlet().getServletMapping());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +						server.getServlet().getPath(path) + "/**");, +				matchers.add(new AntPathRequestMatcher(server.getServlet().getPath(path)));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +				"server.servlet.context-path:/context");, +				"server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet");, +				"server.servlet.context-path:/context", "server.servlet.path:/servlet",]