[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.util.ClassUtils;, +	private RelaxedPropertyResolver roleResolver;, +, +		this.roleResolver = new RelaxedPropertyResolver(environment,, +				"management.security.");, +		if (principal == null || principal.getClass().getName().contains("Anonymous")) {, +			return false;, +		}, +		if (!ClassUtils.isPresent("org.springframework.security.core.Authentication",, +				null) || !(principal instanceof Authentication)) {, +			return false;, +		}, +		String role = this.roleResolver.getProperty("role", "ROLE_ADMIN");, +		Authentication authentication = (Authentication) principal;, +		for (GrantedAuthority authority : authentication.getAuthorities()) {, +			String name = authority.getAuthority();, +			if (role.equals(name) || ("ROLE_" + role).equals(name)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.util.ClassUtils;, +	private RelaxedPropertyResolver roleResolver;, +, +		this.roleResolver = new RelaxedPropertyResolver(environment,, +				"management.security.");, +		if (principal == null || principal.getClass().getName().contains("Anonymous")) {, +			return false;, +		}, +		if (!ClassUtils.isPresent("org.springframework.security.core.Authentication",, +				null) || !(principal instanceof Authentication)) {, +			return false;, +		}, +		String role = this.roleResolver.getProperty("role", "ROLE_ADMIN");, +		Authentication authentication = (Authentication) principal;, +		for (GrantedAuthority authority : authentication.getAuthorities()) {, +			String name = authority.getAuthority();, +			if (role.equals(name) || ("ROLE_" + role).equals(name)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/AdhocTestSuite.java, +import org.springframework.boot.actuate.endpoint.FlywayEndpointTests;, +import org.springframework.boot.actuate.health.DataSourceHealthIndicatorTests;, +@SuiteClasses({ DataSourceHealthIndicatorTests.class, FlywayEndpointTests.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.util.ClassUtils;, +	private RelaxedPropertyResolver roleResolver;, +, +		this.roleResolver = new RelaxedPropertyResolver(environment,, +				"management.security.");, +		if (principal == null || principal.getClass().getName().contains("Anonymous")) {, +			return false;, +		}, +		if (!ClassUtils.isPresent("org.springframework.security.core.Authentication",, +				null) || !(principal instanceof Authentication)) {, +			return false;, +		}, +		String role = this.roleResolver.getProperty("role", "ROLE_ADMIN");, +		Authentication authentication = (Authentication) principal;, +		for (GrantedAuthority authority : authentication.getAuthorities()) {, +			String name = authority.getAuthority();, +			if (role.equals(name) || ("ROLE_" + role).equals(name)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/AdhocTestSuite.java, +import org.springframework.boot.actuate.endpoint.FlywayEndpointTests;, +import org.springframework.boot.actuate.health.DataSourceHealthIndicatorTests;, +@SuiteClasses({ DataSourceHealthIndicatorTests.class, FlywayEndpointTests.class }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken admin = new UsernamePasswordAuthenticationToken(, +			"user", "password",, +			AuthorityUtils.commaSeparatedStringToAuthorityList("ROLE_ADMIN"));, +, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().status("OK").build());, +		this.mvc.setStatusMapping(, +				Collections.singletonMap("OK", HttpStatus.INTERNAL_SERVER_ERROR));, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().outOfService().build());, +	public void secureEvenWhenNotSensitive() {, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(this.admin);, +	public void secureNonAdmin() {, +		given(this.endpoint.invoke()), +				.willReturn(new Health.Builder().up().withDetail("foo", "bar").build());, +		Object result = this.mvc.invoke(this.user);, +		assertTrue(result instanceof Health);]