[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +the `org.springframework.core.annotation.Order` annotation if several `CommandLineRunner`, +or `ApplicationRunner` beans are defined that must be called in a specific order., +If Spring Security is on the classpath, then web applications are secure by default., +Spring Boot relies on Spring Securityâ€™s content-negotiation strategy to determine whether, +to use `httpBasic`, +or `formLogin`. To add method-level security to a web application, you can also add, +`@EnableGlobalMethodSecurity` with your desired settings. Additional information can be, +found in the {spring-security-reference}#jc-method[Spring Security Reference]., +configuration completely, you can add a bean of type `WebSecurityConfigurerAdapter` (this, +does not disable the authentication manager configuration or Actuator's security)., +* A `UserDetailsService` bean with in-memory store and a single user with a generated, +  password., +* Form-based login or HTTP Basic security (depending on Content-Type) for the entire, +  application (including actuator endpoints if actuator is on the classpath)., +Access rules can be overriden by adding a custom `WebSecurityConfigurerAdapter`. Spring, +Boot provides convenience methods that can be used to override access rules for actuator, +endpoints and static resources. `EndpointRequest` can be used to create a `RequestMatcher`, +that is based on the `management.endpoints.web.base-path` property., +`StaticResourceRequest` can be used to create a `RequestMatcher` for static resources in, +commonly used locations., +`ConnectionFactory`. If the broker is present, an embedded broker is automatically started, +and configured (provided no broker URL is specified through configuration)., +embed an ActiveMQ instance are provided, as is the Spring infrastructure to integrate with, +JMS., +`JtaTransactionManager` is present, it is associated to the listener container by default., +If not, the `sessionTransacted` flag is enabled. In that latter scenario, you can, +associate your local data store transaction to the processing of an incoming message by, +adding `@Transactional` on your listener method (or a delegate thereof). This ensures that, +the incoming message is acknowledged, once the local transaction has completed. This also, +includes sending response messages that have been performed on the same JMS session., +the development of AMQP-based messaging solutions. Spring Boot offers several conveniences, +for working with AMQP through RabbitMQ, including the `spring-boot-starter-amqp`, +'`Starter`'., +`spring.rabbitmq.listener.type` property.  If a `MessageConverter` or a `MessageRecoverer`, +bean is defined, it is automatically associated with the default factory., +(hyphenated or camelCase) map directly to the Apache Kafka dotted properties. Refer to the, +Apache Kafka documentation for details., +Apache Kafka designates properties with an importance of HIGH, MEDIUM, or LOW. Spring Boot, +auto-configuration supports all HIGH importance properties, some selected MEDIUM and LOW, +properties, and any properties that do not have a default value., +`KafkaProperties` class. If you wish to configure the producer or consumer with additional, +properties that are not directly supported, use the following properties:, +All such beans are automatically registered with the auto-configured `RestTemplateBuilder`, +and are applied to any templates that are built with it., +There are three main approaches to `WebClient` customization, depending on how broadly you, +want the customizations to apply., +Finally, you can fall back to the original API and use `WebClient.create()`. In that case,, +no auto-configuration or `WebClientCustomizer` is applied., +When a JTA environment is detected, Spring's `JtaTransactionManager` is used to manage, +transactions. Auto-configured JMS, DataSource, and JPA beans are upgraded to support XA, +transactions. You can use standard Spring idioms, such as `@Transactional`, to participate, +in a distributed transaction. If you are within a JTA environment and still want to use, +local transactions, you can set the `spring.jta.enabled` property to `false` to disable, +the JTA auto-configuration., +resource managers, each Atomikos instance must be configured with a unique ID. By default,, +this ID is the IP address of the machine on which Atomikos is running. To ensure, +resource managers, each Bitronix instance must be configured with a unique ID. By default,, +this ID is the IP address of the machine on which Bitronix is running. To ensure, +You could also specify the `hazelcast.xml` configuration file to use via configuration, as, +shown in the following example:, +* `JobDetail`: defines a particular Job. `JobDetail` instances can be built with the, +  `JobBuilder` API., +Spring Boot also configures some features that are triggered by the presence of additional, +Spring Integration modules. If `'spring-integration-jmx'` is also on the classpath,, +message processing statistics are published over JMX . If `'spring-integration-jdbc'` is, +available, the default database schema can be created on startup, as shown in the, +following line:, +By default, JDBC tests are transactional and roll back at the end of each test. See the, +{spring-reference}testing.html#testcontext-tx-enabling-transactions[relevant section] in, +the Spring Framework Reference Documentation for more details. If that is not what you, +want, you can disable transaction management for a test or for the whole class as follows:, +You can use `@DataNeo4jTest` to test Neo4j applications. By default, it uses an in-memory, +embedded Neo4j (if the embedded driver is available), scans for `@NodeEntity` classes, and, +configures Spring Data Neo4j repositories. Regular `@Component` beans are not loaded into, +the `ApplicationContext`:, +with Mock MVC or REST Assured. It removes the need for the JUnit rule in Spring REST Docs., +`ApplicationConfiguration` class for your customizations or one class per domain area when, +it makes sense. The latter approach lets you enable it in one of your tests, if necessary,, +with the `@Import` annotation., +Spring Boot provides WebSockets auto-configuration for embedded Tomcat 8.5, Jetty, +The `@ConditionalOnClass` and `@ConditionalOnMissingClass` annotations let configuration, +be included based on the presence or absence of specific classes. Due to the fact that, +annotation metadata is parsed by using http://asm.ow2.org/[ASM], you can use the `value`, +attribute to refer to the real class, even though that class might not actually appear on, +the running application classpath. You can also use the `name` attribute if you prefer to, +specify the class name by using a `String` value., +meta-annotation to compose your own composed annotations, you must use `name` as referring, +to the class in such a case is not handled., +NOTE: `@ConditionalOnBean` and `@ConditionalOnMissingBean` do not prevent `@Configuration`, +classes from being created. Using these conditions at the class level is equivalent to, +marking each contained `@Bean` method with the annotation., +The `@ConditionalOnWebApplication` and `@ConditionalOnNotWebApplication` annotations let, +configuration be included depending on whether the application is a 'web application'., +A web application is any application that is using a Spring `WebApplicationContext`,, +defines a `session` scope, or has a `StandardServletEnvironment`., +module names with `spring-boot`, even if you are using a different Maven `groupId`. We may, +offer official support for the thing you auto-configure in the future.]