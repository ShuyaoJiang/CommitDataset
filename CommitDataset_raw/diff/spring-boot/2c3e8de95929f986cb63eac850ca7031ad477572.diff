[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		Object message = error.get("message");, +		Object trace = error.get("trace");, +		if (trace != null) {, +			builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		Object message = error.get("message");, +		Object trace = error.get("trace");, +		if (trace != null) {, +			builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, +import java.util.Date;, + * @author Brian Clozel, +		private final StaticView defaultErrorView = new StaticView();, +	 * Simple {@link View} implementation that writes a default HTML error page., +	private static class StaticView implements View {, +		private static final Log logger = LogFactory.getLog(StaticView.class);, +			StringBuilder builder = new StringBuilder();, +			Date timestamp = (Date) model.get("timestamp");, +			Object message = model.get("message");, +			Object trace = model.get("trace");, +			builder.append("<html><body><h1>Whitelabel Error Page</h1>").append(, +					"<p>This application has no configured error view, so you are seeing this as a fallback.</p>"), +					.append("<div id='created'>").append(timestamp).append("</div>"), +					.append("<div>There was an unexpected error (type="), +					.append(htmlEscape(model.get("error"))).append(", status="), +					.append(htmlEscape(model.get("status"))).append(").</div>");, +			if (message != null) {, +				builder.append("<div>").append(htmlEscape(message)).append("</div>");, +			}, +			if (trace != null) {, +				builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +			}, +			builder.append("</body></html>");, +			response.getWriter().append(builder.toString());, +		}, +, +		private String htmlEscape(Object input) {, +			return (input != null) ? HtmlUtils.htmlEscape(input.toString()) : null;, +		public String getContentType() {, +			return "text/html";, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		Object message = error.get("message");, +		Object trace = error.get("trace");, +		if (trace != null) {, +			builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, +import java.util.Date;, + * @author Brian Clozel, +		private final StaticView defaultErrorView = new StaticView();, +	 * Simple {@link View} implementation that writes a default HTML error page., +	private static class StaticView implements View {, +		private static final Log logger = LogFactory.getLog(StaticView.class);, +			StringBuilder builder = new StringBuilder();, +			Date timestamp = (Date) model.get("timestamp");, +			Object message = model.get("message");, +			Object trace = model.get("trace");, +			builder.append("<html><body><h1>Whitelabel Error Page</h1>").append(, +					"<p>This application has no configured error view, so you are seeing this as a fallback.</p>"), +					.append("<div id='created'>").append(timestamp).append("</div>"), +					.append("<div>There was an unexpected error (type="), +					.append(htmlEscape(model.get("error"))).append(", status="), +					.append(htmlEscape(model.get("status"))).append(").</div>");, +			if (message != null) {, +				builder.append("<div>").append(htmlEscape(message)).append("</div>");, +			}, +			if (trace != null) {, +				builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +			}, +			builder.append("</body></html>");, +			response.getWriter().append(builder.toString());, +		}, +, +		private String htmlEscape(Object input) {, +			return (input != null) ? HtmlUtils.htmlEscape(input.toString()) : null;, +		public String getContentType() {, +			return "text/html";, +++ /dev/null, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		Object message = error.get("message");, +		Object trace = error.get("trace");, +		if (trace != null) {, +			builder.append("<div>").append(htmlEscape(trace)).append("</div>");, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java, +import java.util.Date;, + * @author Brian Clozel, +		private final StaticView defaultErrorView = new StaticView();, +	 * Simple {@link View} implementation that writes a default HTML error page., +	private static class StaticView implements View {, +		private static final Log logger = LogFactory.getLog(StaticView.class);, +			StringBuilder builder = new StringBuilder();, +			Date timestamp = (Date) model.get("timestamp");, +			Object message = model.get("message");, +			Object trace = model.get("trace");, +			builder.append("<html><body><h1>Whitelabel Error Page</h1>").append(, +					"<p>This application has no configured error view, so you are seeing this as a fallback.</p>")]