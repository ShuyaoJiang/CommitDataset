[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import org.springframework.util.Assert;, + * @author Phillip Webb, +	/**, +	 * Base class for Redis configurations., +	 */, +	protected static abstract class AbstractRedisConfiguration {, +		protected final JedisConnectionFactory applyProperties(, +				JedisConnectionFactory factory) {, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +			if (this.properties.getPassword() != null) {, +				factory.setPassword(this.properties.getPassword());, +			}, +			factory.setDatabase(this.properties.getDatabase());, +			return factory;, +		}, +		protected final RedisSentinelConfiguration getSentinelConfig() {, +			if (this.sentinelConfiguration != null) {, +				return this.sentinelConfiguration;, +			}, +			Sentinel sentinelProperties = this.properties.getSentinel();, +			if (sentinelProperties != null) {, +				RedisSentinelConfiguration config = new RedisSentinelConfiguration();, +				config.master(sentinelProperties.getMaster());, +				config.setSentinels(createSentinels(sentinelProperties));, +				return config;, +			}, +		private List<RedisNode> createSentinels(Sentinel sentinel) {, +			List<RedisNode> sentinels = new ArrayList<RedisNode>();, +			String nodes = sentinel.getNodes();, +			for (String node : StringUtils.commaDelimitedListToStringArray(nodes)) {, +				try {, +					String[] parts = StringUtils.split(node, ":");, +					Assert.state(parts.length == 2, "Must be defined as 'host:port'");, +					sentinels.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +				catch (RuntimeException ex) {, +					throw new IllegalStateException("Invalid redis sentinel ", +							+ "property '" + node + "'", ex);, +			return sentinels;, +	/**, +	 * Redis connection configuration., +	 */, +			AbstractRedisConfiguration {, +		public RedisConnectionFactory redisConnectionFactory(), +				throws UnknownHostException {, +			return applyProperties(new JedisConnectionFactory(getSentinelConfig()));, +	/**, +	 * Redis pooled connection configuration., +	 */, +			AbstractRedisConfiguration {, +		public RedisConnectionFactory redisConnectionFactory(), +				throws UnknownHostException {, +			return applyProperties(createJedisConnectionFactory());, +				return new JedisConnectionFactory(getSentinelConfig(), jedisPoolConfig());, +			return new JedisConnectionFactory(getSentinelConfig());, +	/**, +	 * Standard Redis configuration., +	 */, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import org.springframework.util.Assert;, + * @author Phillip Webb, +	/**, +	 * Base class for Redis configurations., +	 */, +	protected static abstract class AbstractRedisConfiguration {, +		protected final JedisConnectionFactory applyProperties(, +				JedisConnectionFactory factory) {, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +			if (this.properties.getPassword() != null) {, +				factory.setPassword(this.properties.getPassword());, +			}, +			factory.setDatabase(this.properties.getDatabase());, +			return factory;, +		}, +		protected final RedisSentinelConfiguration getSentinelConfig() {, +			if (this.sentinelConfiguration != null) {, +				return this.sentinelConfiguration;, +			}, +			Sentinel sentinelProperties = this.properties.getSentinel();, +			if (sentinelProperties != null) {, +				RedisSentinelConfiguration config = new RedisSentinelConfiguration();, +				config.master(sentinelProperties.getMaster());, +				config.setSentinels(createSentinels(sentinelProperties));, +				return config;, +			}, +		private List<RedisNode> createSentinels(Sentinel sentinel) {, +			List<RedisNode> sentinels = new ArrayList<RedisNode>();, +			String nodes = sentinel.getNodes();, +			for (String node : StringUtils.commaDelimitedListToStringArray(nodes)) {, +				try {, +					String[] parts = StringUtils.split(node, ":");, +					Assert.state(parts.length == 2, "Must be defined as 'host:port'");, +					sentinels.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +				catch (RuntimeException ex) {, +					throw new IllegalStateException("Invalid redis sentinel ", +							+ "property '" + node + "'", ex);, +			return sentinels;, +	/**]