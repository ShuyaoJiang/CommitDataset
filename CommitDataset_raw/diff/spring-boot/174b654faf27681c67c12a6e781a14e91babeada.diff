[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +		assertEquals("3333", lifeCycle.getConfig().getProperty("crash.ssh.port"));, +		assertEquals("~/.ssh/id.pem", lifeCycle.getConfig().getProperty("crash.ssh.keypath"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("jaas", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("my-test-domain", lifeCycle.getConfig().get("crash.auth.jaas.domain"));, +		assertEquals("key", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("~/test.pem", lifeCycle.getConfig().get("crash.auth.key.path"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), "password"));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +		assertEquals("3333", lifeCycle.getConfig().getProperty("crash.ssh.port"));, +		assertEquals("~/.ssh/id.pem", lifeCycle.getConfig().getProperty("crash.ssh.keypath"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("jaas", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("my-test-domain", lifeCycle.getConfig().get("crash.auth.jaas.domain"));, +		assertEquals("key", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("~/test.pem", lifeCycle.getConfig().get("crash.auth.key.path"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), "password"));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoconfigurationTests.java, +		assertEquals("localhost", connectionFactory.getHost());, +		assertEquals("remote-server", connectionFactory.getHost());, +		assertEquals(9000, connectionFactory.getPort());, +		assertEquals("/vhost", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("/foo", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("otherserver", connectionFactory.getHost());, +		assertEquals(8001, connectionFactory.getPort());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +		assertEquals("3333", lifeCycle.getConfig().getProperty("crash.ssh.port"));, +		assertEquals("~/.ssh/id.pem", lifeCycle.getConfig().getProperty("crash.ssh.keypath"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("jaas", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("my-test-domain", lifeCycle.getConfig().get("crash.auth.jaas.domain"));, +		assertEquals("key", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("~/test.pem", lifeCycle.getConfig().get("crash.auth.key.path"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), "password"));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoconfigurationTests.java, +		assertEquals("localhost", connectionFactory.getHost());, +		assertEquals("remote-server", connectionFactory.getHost());, +		assertEquals(9000, connectionFactory.getPort());, +		assertEquals("/vhost", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("/foo", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("otherserver", connectionFactory.getHost());, +		assertEquals(8001, connectionFactory.getPort());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java, +import static org.junit.Assert.assertNull;, +		assertNull(this.properties.getHost());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +		assertEquals("3333", lifeCycle.getConfig().getProperty("crash.ssh.port"));, +		assertEquals("~/.ssh/id.pem", lifeCycle.getConfig().getProperty("crash.ssh.keypath"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("jaas", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("my-test-domain", lifeCycle.getConfig().get("crash.auth.jaas.domain"));, +		assertEquals("key", lifeCycle.getConfig().get("crash.auth"));, +		assertEquals("~/test.pem", lifeCycle.getConfig().get("crash.auth.key.path"));, +		assertEquals("simple", lifeCycle.getConfig().get("crash.auth"));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), "password"));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +		assertTrue(authenticationPlugin.authenticate(SecurityConfiguration.USERNAME, SecurityConfiguration.PASSWORD));, +		assertFalse(authenticationPlugin.authenticate(UUID.randomUUID().toString(), SecurityConfiguration.PASSWORD));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoconfigurationTests.java, +		assertEquals("localhost", connectionFactory.getHost());, +		assertEquals("remote-server", connectionFactory.getHost());, +		assertEquals(9000, connectionFactory.getPort());, +		assertEquals("/vhost", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("/foo", connectionFactory.getVirtualHost());, +		assertEquals("/", connectionFactory.getVirtualHost());, +		assertEquals("otherserver", connectionFactory.getHost());, +		assertEquals(8001, connectionFactory.getPort());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java, +import static org.junit.Assert.assertNull;, +		assertNull(this.properties.getHost());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/CommonsDataSourceConfigurationTests.java, +import static org.junit.Assert.assertTrue;, +		assertTrue(ds.getTestWhileIdle());, +		assertTrue(ds.getTestOnBorrow());, +		assertTrue(ds.getTestOnReturn());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java, +		assertEquals("3333", lifeCycle.getConfig().getProperty("crash.ssh.port"));, +		assertEquals("~/.ssh/id.pem", lifeCycle.getConfig().getProperty("crash.ssh.keypath"));]