[+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/JsonParserFactory.java, +	 * 2, then Snake YAML, and then falls back to the {@link SimpleJsonParser}., +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/JsonParserFactory.java, +	 * 2, then Snake YAML, and then falls back to the {@link SimpleJsonParser}., +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/JsonParserFactory.java, +	 * 2, then Snake YAML, and then falls back to the {@link SimpleJsonParser}., +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlPropertySourceLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/CustomPropertyConstructor.java, +			Map<String, Property> forType = CustomPropertyConstructor.this.properties, +					.get(type);, +			Property property = (forType == null ? null : forType.get(name));, +			return (property == null ? super.getProperty(type, name) : property);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +		for (PropertyValue newValue : getPropertyValues()) {, +			PropertyValue oldValue = old.getPropertyValue(newValue.getName());, +			if (oldValue == null || !oldValue.equals(newValue)) {, +				changes.addPropertyValue(newValue);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java]