[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Set<Profile> activatedViaProperty = getProfilesFromProperty(, +					ACTIVE_PROFILES_PROPERTY);, +			Set<Profile> includedViaProperty = getProfilesFromProperty(, +					INCLUDE_PROFILES_PROPERTY);, +			List<Profile> otherActiveProfiles = getOtherActiveProfiles(, +					activatedViaProperty, includedViaProperty);, +			this.profiles.addAll(otherActiveProfiles);, +			this.profiles.addAll(includedViaProperty);, +		private Set<Profile> getProfilesFromProperty(String profilesProperty) {, +			if (!this.environment.containsProperty(profilesProperty)) {, +			Set<Profile> profiles = getProfiles(binder, profilesProperty);, +			return new LinkedHashSet<>(profiles);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty,, +				Set<Profile> includedViaProperty) {, +					.filter((profile) -> !activatedViaProperty.contains(profile), +							&& !includedViaProperty.contains(profile)), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Set<Profile> activatedViaProperty = getProfilesFromProperty(, +					ACTIVE_PROFILES_PROPERTY);, +			Set<Profile> includedViaProperty = getProfilesFromProperty(, +					INCLUDE_PROFILES_PROPERTY);, +			List<Profile> otherActiveProfiles = getOtherActiveProfiles(, +					activatedViaProperty, includedViaProperty);, +			this.profiles.addAll(otherActiveProfiles);, +			this.profiles.addAll(includedViaProperty);, +		private Set<Profile> getProfilesFromProperty(String profilesProperty) {, +			if (!this.environment.containsProperty(profilesProperty)) {, +			Set<Profile> profiles = getProfiles(binder, profilesProperty);, +			return new LinkedHashSet<>(profiles);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty,, +				Set<Profile> includedViaProperty) {, +					.filter((profile) -> !activatedViaProperty.contains(profile), +							&& !includedViaProperty.contains(profile)), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void profilesAddedViaIncludePropertyAndActivatedViaAnotherPropertySource() {, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,, +				"spring.profiles.include=dev,simple");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		assertThat(this.environment.getActiveProfiles()).containsExactly("dev", "simple",, +				"other");, +		validateProfilePrecedence("dev", "simple", "other");, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			Set<Profile> activatedViaProperty = getProfilesFromProperty(, +					ACTIVE_PROFILES_PROPERTY);, +			Set<Profile> includedViaProperty = getProfilesFromProperty(, +					INCLUDE_PROFILES_PROPERTY);, +			List<Profile> otherActiveProfiles = getOtherActiveProfiles(, +					activatedViaProperty, includedViaProperty);, +			this.profiles.addAll(otherActiveProfiles);, +			this.profiles.addAll(includedViaProperty);, +		private Set<Profile> getProfilesFromProperty(String profilesProperty) {, +			if (!this.environment.containsProperty(profilesProperty)) {, +			Set<Profile> profiles = getProfiles(binder, profilesProperty);, +			return new LinkedHashSet<>(profiles);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty,, +				Set<Profile> includedViaProperty) {, +					.filter((profile) -> !activatedViaProperty.contains(profile), +							&& !includedViaProperty.contains(profile)), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void profilesAddedViaIncludePropertyAndActivatedViaAnotherPropertySource() {, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,, +				"spring.profiles.include=dev,simple");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		assertThat(this.environment.getActiveProfiles()).containsExactly("dev", "simple",, +				"other");, +		validateProfilePrecedence("dev", "simple", "other");, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot/src/test/resources/application-simple.properties, +spring.profiles.active=other]