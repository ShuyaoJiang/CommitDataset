[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import org.springframework.core.io.ClassPathResource;, +, + * Test {@link URLClassLoader} that can filter the classes and resources it can load., + * @author Roy Jacobs, +	 * Create a {@link FilteredClassLoader} that hides resources from the given packages., +	 * @param hiddenResources the resources to hide, +	 */, +	public FilteredClassLoader(ClassPathResource... hiddenResources) {, +		this(ClassPathResourceFilter.of(hiddenResources));, +	}, +, +	/**, +	 * @param filters a set of filters to determine when a class name or resource should, +	 * be hidden. A {@link Predicate#test(Object) result} of {@code true} indicates a, +	 * filtered class or resource., +	@Override, +	public URL getResource(String name) {, +		for (Predicate<String> filter : this.filters) {, +			if (filter.test(name)) {, +				return null;, +			}, +		}, +		return super.getResource(name);, +	}, +, +	/**, +	 * Filter to restrict the resources that can be loaded., +	 */, +	public static final class ClassPathResourceFilter implements Predicate<String> {, +, +		private final ClassPathResource[] hiddenResources;, +, +		private ClassPathResourceFilter(ClassPathResource[] hiddenResources) {, +			this.hiddenResources = hiddenResources;, +		}, +, +		@Override, +		public boolean test(String resourceName) {, +			for (ClassPathResource hiddenResource : this.hiddenResources) {, +				if (hiddenResource.getFilename() != null, +						&& resourceName.equals(hiddenResource.getPath())) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		public static ClassPathResourceFilter of(ClassPathResource... hiddenResources) {, +			return new ClassPathResourceFilter(hiddenResources);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import org.springframework.core.io.ClassPathResource;, +, + * Test {@link URLClassLoader} that can filter the classes and resources it can load., + * @author Roy Jacobs, +	 * Create a {@link FilteredClassLoader} that hides resources from the given packages., +	 * @param hiddenResources the resources to hide, +	 */, +	public FilteredClassLoader(ClassPathResource... hiddenResources) {, +		this(ClassPathResourceFilter.of(hiddenResources));, +	}, +, +	/**, +	 * @param filters a set of filters to determine when a class name or resource should, +	 * be hidden. A {@link Predicate#test(Object) result} of {@code true} indicates a, +	 * filtered class or resource., +	@Override, +	public URL getResource(String name) {, +		for (Predicate<String> filter : this.filters) {, +			if (filter.test(name)) {, +				return null;, +			}, +		}, +		return super.getResource(name);, +	}, +, +	/**, +	 * Filter to restrict the resources that can be loaded., +	 */, +	public static final class ClassPathResourceFilter implements Predicate<String> {, +, +		private final ClassPathResource[] hiddenResources;, +, +		private ClassPathResourceFilter(ClassPathResource[] hiddenResources) {, +			this.hiddenResources = hiddenResources;, +		}, +, +		@Override, +		public boolean test(String resourceName) {, +			for (ClassPathResource hiddenResource : this.hiddenResources) {, +				if (hiddenResource.getFilename() != null, +						&& resourceName.equals(hiddenResource.getPath())) {, +					return true;, +				}, +			}, +			return false;]