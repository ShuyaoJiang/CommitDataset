[+++ b/spring-bootstrap-applications/pom.xml, +    <dependencyManagement>, +      <dependencies>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap-service</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap-web-application</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +      </dependencies>, +    </dependencyManagement>, +++ b/spring-bootstrap-applications/pom.xml, +    <dependencyManagement>, +      <dependencies>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap-service</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +        <dependency>, +          <groupId>org.springframework.bootstrap</groupId>, +          <artifactId>spring-bootstrap-web-application</artifactId>, +          <version>${spring.bootstrap.version}</version>, +        </dependency>, +      </dependencies>, +    </dependencyManagement>, +++ b/spring-bootstrap-service/README.md, +|Validation                 | JSR-303    |If on the classpath |, +downloaded or installed easily in most operating systems.  For Ubuntu:, +, +    $ sudo apt-get install openjdk-6-jdk maven, +, +<!--FIXME: short instructions for Mac.-->, +management endpoints.  If you prefer Tomcat you can just add the, +embedded Tomcat jars to your classpath instead of Jetty., +5. Use the Spring executable.  <!--FIXME: document this maybe.-->, +a snapshot.  Beware of sudden changes.), +, +<!--FIXME: update Spring Security to full release -->, +        <dependency>, +            <groupId>org.springframework</groupId>, +            <artifactId>spring-jdbc</artifactId>, +        </dependency>, +        <dependency>, +            <groupId>org.hsqldb</groupId>, +            <artifactId>hsqldb</artifactId>, +        </dependency>, +, +Then you will be able to inject a `DataSource` into your controller:, +, +    @Controller, +    @EnableAutoConfiguration, +    @EnableConfigurationProperties(ServiceProperties.class), +    public class SampleController {, +    , +      private JdbcTemplate jdbcTemplate;, +    , +      @Autowired, +      public SampleController(DataSource dataSource) {, +        this.jdbcTemplate = new JdbcTemplate(dataSource);, +      }, +, +      @RequestMapping("/"), +      @ResponseBody, +      public Map<String, String> helloWorld() {, +        return jdbcTemplate.queryForMap("SELECT * FROM MESSAGES WHERE ID=?", 0);, +      }, +    , +      ..., +    }, + , + The app will run (going back to the default security configuration):, + , +           $ curl user:password@localhost:8080/, +           {"error":"Internal Server Error", "status":500, "exception":...}, +           , + but there's no data in the database yet and the `MESSAGES` table, + doesn't even exist, so there's an error.  One easy way to fix it is, + to provide a `schema.sql` script in the root of the classpath, e.g., + , +    create table MESSAGES (, +      ID BIGINT NOT NULL PRIMARY KEY,, +      MESSAGE VARCHAR(255), +    );, +    INSERT INTO MESSAGES (ID, MESSAGE) VALUES (0, 'Hello Phil');, +]