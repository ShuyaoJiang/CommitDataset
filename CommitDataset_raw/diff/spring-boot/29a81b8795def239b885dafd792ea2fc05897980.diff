[+++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.level = FINE, +sun.net.www.protocol.http.HttpURLConnection.level = ALL, +org.springframework.bootstrap.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.level = FINE, +sun.net.www.protocol.http.HttpURLConnection.level = ALL, +org.springframework.bootstrap.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/service/ServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.level = FINE, +sun.net.www.protocol.http.HttpURLConnection.level = ALL, +org.springframework.bootstrap.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/service/ServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/EnableConfigurationPropertiesImportSelector.java, +import org.springframework.core.annotation.AnnotationUtils;, +				String name = type.getName();, +				if (!registry.containsBeanDefinition(name)) {, +					registry.registerBeanDefinition(name, BeanDefinitionBuilder, +					ConfigurationProperties properties = AnnotationUtils.findAnnotation(, +							type, ConfigurationProperties.class);, +					if (properties == null) {, +						BeanDefinitionBuilder builder = BeanDefinitionBuilder, +								.genericBeanDefinition(ConfigurationPropertiesHolder.class);, +						builder.addConstructorArgReference(name);, +						registry.registerBeanDefinition(name + ".HOLDER",, +								builder.getBeanDefinition());, +					}, +				}, +	public static class ConfigurationPropertiesHolder {, +, +		private Object target;, +, +		public ConfigurationPropertiesHolder(Object target) {, +			this.target = target;, +		}, +, +		public Object getTarget() {, +			return this.target;, +		}, +, +	}, +, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/main/resources/logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.level = FINE, +sun.net.www.protocol.http.HttpURLConnection.level = ALL, +org.springframework.bootstrap.level = ALL, +++ b/spring-bootstrap-samples/spring-bootstrap-actuator-sample/src/test/java/org/springframework/bootstrap/sample/service/ServiceBootstrapApplicationTests.java, +		context = future.get(30, TimeUnit.SECONDS);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/EnableConfigurationPropertiesImportSelector.java, +import org.springframework.core.annotation.AnnotationUtils;, +				String name = type.getName();, +				if (!registry.containsBeanDefinition(name)) {, +					registry.registerBeanDefinition(name, BeanDefinitionBuilder, +					ConfigurationProperties properties = AnnotationUtils.findAnnotation(, +							type, ConfigurationProperties.class);, +					if (properties == null) {, +						BeanDefinitionBuilder builder = BeanDefinitionBuilder, +								.genericBeanDefinition(ConfigurationPropertiesHolder.class);, +						builder.addConstructorArgReference(name);, +						registry.registerBeanDefinition(name + ".HOLDER",, +								builder.getBeanDefinition());, +					}, +				}, +	public static class ConfigurationPropertiesHolder {, +, +		private Object target;, +, +		public ConfigurationPropertiesHolder(Object target) {, +			this.target = target;, +		}, +, +		public Object getTarget() {, +			return this.target;, +		}, +, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/PropertySourcesBindingPostProcessor.java, +import org.springframework.bootstrap.context.annotation.EnableConfigurationPropertiesImportSelector.ConfigurationPropertiesHolder;, +		Object target = bean;, +		if (annotation != null || bean instanceof ConfigurationPropertiesHolder) {, +			if (bean instanceof ConfigurationPropertiesHolder) {, +				target = ((ConfigurationPropertiesHolder) bean).getTarget();, +			}, +					target);]