[+++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +==== Installation as a init.d (System V) service, +* Tracks application PIDs using `/var/run/<appname>/<appname>.pid`, +=== Running a JAR as a regular (not service) script, +, +The script accepts the following parameters as environment variables, so you can change the, +default behaviour in a script or on the command line:, +, +* `MODE` - the "mode" of operation. The default depends on the way the jar was built, but, +will usually be "auto" (meaning it tries to guess if it is an init script by checking if, +it is a symlink in a directory called "init.d"). You can explicitly set it to "service", +so that the "stop|start|status|restart" commands work, or to "run" if you just want to, +run the script and not in the background., +, +* `PID_FOLDER` - the root name of the pid folder (`/var/run` by default)., +, +* `LOG_FOLDER` - the name of the folder to put log files in (`/var/log` by default)., +, +* `APP_NAME` - the name of the app. If the jar is run from a symlink the script guesses the , +app name, but if it is not a symlink, or you want to explicitly set the app name this can be, +useful., +, +* `JAVA_HOME` - the location of the `java` executable is discovered by using the `PATH` by , +default, but you can set it explicitly if there is an executable file at `$JAVA_HOME/bin/java`., +, +* `JARFILE` - the explicit location of the jar file, in case the script is being used to launch, +a jar that it is not actually embedded in., +, +* `DEBUG` - if not empty will set the `-x` flag on the shell process, making it easy to, +see the logic in the script., +++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +==== Installation as a init.d (System V) service, +* Tracks application PIDs using `/var/run/<appname>/<appname>.pid`, +=== Running a JAR as a regular (not service) script, +, +The script accepts the following parameters as environment variables, so you can change the, +default behaviour in a script or on the command line:, +, +* `MODE` - the "mode" of operation. The default depends on the way the jar was built, but, +will usually be "auto" (meaning it tries to guess if it is an init script by checking if, +it is a symlink in a directory called "init.d"). You can explicitly set it to "service", +so that the "stop|start|status|restart" commands work, or to "run" if you just want to, +run the script and not in the background., +, +* `PID_FOLDER` - the root name of the pid folder (`/var/run` by default)., +, +* `LOG_FOLDER` - the name of the folder to put log files in (`/var/log` by default)., +, +* `APP_NAME` - the name of the app. If the jar is run from a symlink the script guesses the , +app name, but if it is not a symlink, or you want to explicitly set the app name this can be, +useful., +, +* `JAVA_HOME` - the location of the `java` executable is discovered by using the `PATH` by , +default, but you can set it explicitly if there is an executable file at `$JAVA_HOME/bin/java`., +, +* `JARFILE` - the explicit location of the jar file, in case the script is being used to launch, +a jar that it is not actually embedded in., +, +* `DEBUG` - if not empty will set the `-x` flag on the shell process, making it easy to, +see the logic in the script., +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/resources/org/springframework/boot/loader/tools/launch.script, +[[ -n "$DEBUG" ]] && set -x, +, +[[ -n "$JARFILE" ]] && jarfile="$JARFILE", +[[ -n "$APP_NAME" ]] && identity="$APP_NAME", +[[ -z "$PID_FOLDER" ]] && PID_FOLDER="/var/run", +[[ -z "$LOG_FOLDER" ]] && LOG_FOLDER="/var/log", +! [[ -x "$PID_FOLDER" ]] && PID_FOLDER="/tmp", +! [[ -x "$LOG_FOLDER" ]] && LOG_FOLDER="/tmp", +[[ -z "$MODE" ]] && MODE="{{mode:auto}}" # modes are "auto", "service" or "run", +# Utility functions, +checkPermissions() {, +  touch "$pid_file" &> /dev/null || { echoRed "Operation not permitted (cannot access pid file)"; exit 1; }, +  touch "$log_file" &> /dev/null || { echoRed "Operation not permitted (cannot access log file)"; exit 1; }, +}, +, +isRunning() {, +  ps -p $1 &> /dev/null, +}, +, +if [[ "$MODE" == "auto" && -n "$init_script" ]] || [[ "$MODE" == "service" ]]; then, +if [[ -z "$identity" ]]; then, +# Build the pid and log filenames, +if [[ "$identity" == "$init_script" ]] || [[ "$identity" == "$APP_NAME" ]]; then, +  PID_FOLDER="$PID_FOLDER/${identity}", +fi, +pid_file="$PID_FOLDER/${identity}.pid", +log_file="$LOG_FOLDER/${identity}.log", +, +# Determine the user to run as if we are root, +if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]]; then, +elif type -p java 2>&1> /dev/null; then, +    javaexe=java, +    mkdir "$PID_FOLDER" &> /dev/null, +    chown "$run_user" "$PID_FOLDER", +  rm -f "$pid_file"]