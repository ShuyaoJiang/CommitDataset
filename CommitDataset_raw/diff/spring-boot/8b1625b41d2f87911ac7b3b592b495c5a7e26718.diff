[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyName;, +	 * @param name the name being bound, +	 * @param target the bindable to bind names from underlying, +	 * {@link ConfigurationPropertySource} cannot be iterated this method can be, +	 * {@code false}, even though binding may ultimately succeed., +	 * @param context the bind context, +	<T> T bind(ConfigurationPropertyName name, Bindable<T> target, BindContext context,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyName;, +	 * @param name the name being bound, +	 * @param target the bindable to bind names from underlying, +	 * {@link ConfigurationPropertySource} cannot be iterated this method can be, +	 * {@code false}, even though binding may ultimately succeed., +	 * @param context the bind context, +	<T> T bind(ConfigurationPropertyName name, Bindable<T> target, BindContext context,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindContext.java, +import java.util.stream.Stream;, +, +	 * Return an {@link Iterable} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * Return a {@link Stream} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * @return the sources, +	 */, +	Stream<ConfigurationPropertySource> streamSources();, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyName;, +	 * @param name the name being bound, +	 * @param target the bindable to bind names from underlying, +	 * {@link ConfigurationPropertySource} cannot be iterated this method can be, +	 * {@code false}, even though binding may ultimately succeed., +	 * @param context the bind context, +	<T> T bind(ConfigurationPropertyName name, Bindable<T> target, BindContext context,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindContext.java, +import java.util.stream.Stream;, +, +	 * Return an {@link Iterable} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * Return a {@link Stream} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * @return the sources, +	 */, +	Stream<ConfigurationPropertySource> streamSources();, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		if (containsNoDescendantOf(context.streamSources(), name), +				|| isUnbindableBean(name, target, context)) {, +			Stream<?> boundBeans = BEAN_BINDERS.stream(), +					.map((b) -> b.bind(name, target, context, propertyBinder));, +	private boolean isUnbindableBean(ConfigurationPropertyName name, Bindable<?> target,, +		if (context.streamSources().map((s) -> s.containsDescendantOf(name).orElse(false)), +				.anyMatch(Boolean.TRUE::equals)) {, +			// We know there are properties to bind so we can't bypass anything, +			return false;, +	private boolean containsNoDescendantOf(Stream<ConfigurationPropertySource> sources,, +			ConfigurationPropertyName name) {, +		return sources.map((s) -> s.containsDescendantOf(name).orElse(true)), +				.allMatch(Boolean.FALSE::equals);, +	}, +, +		@Override, +		public Stream<ConfigurationPropertySource> streamSources() {, +			if (this.sourcePushCount > 0) {, +				return this.source.stream();, +			}, +			return StreamSupport.stream(Binder.this.sources.spliterator(), false);, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyName;, +	 * @param name the name being bound, +	 * @param target the bindable to bind names from underlying, +	 * {@link ConfigurationPropertySource} cannot be iterated this method can be, +	 * {@code false}, even though binding may ultimately succeed., +	 * @param context the bind context, +	<T> T bind(ConfigurationPropertyName name, Bindable<T> target, BindContext context,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindContext.java, +import java.util.stream.Stream;, +, +	 * Return an {@link Iterable} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * Return a {@link Stream} of the {@link ConfigurationPropertySource sources} being, +	 * used by the {@link Binder}., +	 * @return the sources, +	 */, +	Stream<ConfigurationPropertySource> streamSources();, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		if (containsNoDescendantOf(context.streamSources(), name), +				|| isUnbindableBean(name, target, context)) {, +			Stream<?> boundBeans = BEAN_BINDERS.stream(), +					.map((b) -> b.bind(name, target, context, propertyBinder));, +	private boolean isUnbindableBean(ConfigurationPropertyName name, Bindable<?> target,, +		if (context.streamSources().map((s) -> s.containsDescendantOf(name).orElse(false)), +				.anyMatch(Boolean.TRUE::equals)) {]