[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		ConfigurableEmbeddedServletContainerFactory,, +		ApplicationListener<ContextRefreshedEvent> {, +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Subclasses should use this event to tell the server to start listening for, +	 * connections., +	 */, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		ConfigurableEmbeddedServletContainerFactory,, +		ApplicationListener<ContextRefreshedEvent> {, +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Subclasses should use this event to tell the server to start listening for, +	 * connections., +	 */, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainer.java, +import org.eclipse.jetty.server.Connector;, +			// Start the server so the ServletContext is available, but stop the, +			// connectors to prevent requests from being handled before the Spring context, +			// is ready:, +			Connector[] connectors = this.server.getConnectors();, +			for (Connector connector : connectors) {, +				connector.stop();, +			}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		ConfigurableEmbeddedServletContainerFactory,, +		ApplicationListener<ContextRefreshedEvent> {, +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Subclasses should use this event to tell the server to start listening for, +	 * connections., +	 */, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainer.java, +import org.eclipse.jetty.server.Connector;, +			// Start the server so the ServletContext is available, but stop the, +			// connectors to prevent requests from being handled before the Spring context, +			// is ready:, +			Connector[] connectors = this.server.getConnectors();, +			for (Connector connector : connectors) {, +				connector.stop();, +			}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +import org.eclipse.jetty.server.Connector;, +import org.springframework.bootstrap.context.embedded.EmbeddedServletContainerException;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		AbstractEmbeddedServletContainerFactory implements ResourceLoaderAware,, +		ApplicationListener<ContextRefreshedEvent> {, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +		if (this.context != null && this.context.getServer() != null) {, +			try {, +				Connector[] connectors = this.context.getServer().getConnectors();, +				for (Connector connector : connectors) {, +					connector.start();, +				}, +			}, +			catch (Exception ex) {, +				throw new EmbeddedServletContainerException(, +						"Unable to start embedded Jetty servlet container", ex);, +			}, +		}, +	}, +, +	@Override, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		ConfigurableEmbeddedServletContainerFactory,, +		ApplicationListener<ContextRefreshedEvent> {, +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Subclasses should use this event to tell the server to start listening for, +	 * connections., +	 */, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainer.java, +import org.eclipse.jetty.server.Connector;, +			// Start the server so the ServletContext is available, but stop the]