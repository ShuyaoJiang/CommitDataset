[+++ b/docs/howto.md, +provided of type `HttpMessageConverters` (always available if you use, +the default MVC configuration) which has some useful methods to access, +the default and user-enhanced message converters., +bean is provided of type `HttpMessageConverters` (always available if you, +++ b/docs/howto.md, +provided of type `HttpMessageConverters` (always available if you use, +the default MVC configuration) which has some useful methods to access, +the default and user-enhanced message converters., +bean is provided of type `HttpMessageConverters` (always available if you, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.HttpMessageConverters;, +			final HttpMessageConverters messageConverters) {, +++ b/docs/howto.md, +provided of type `HttpMessageConverters` (always available if you use, +the default MVC configuration) which has some useful methods to access, +the default and user-enhanced message converters., +bean is provided of type `HttpMessageConverters` (always available if you, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.HttpMessageConverters;, +			final HttpMessageConverters messageConverters) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter;, +import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;, +, +/**, + * Convenient utility for adding and merging additional {@link HttpMessageConverter} in an, + * application context. It also modifies the default converters a bit (putting XML, + * converters at the back of the list if they are present)., + * , + * @author Dave Syer, + */, +public class HttpMessageConverters {, +, +	private List<HttpMessageConverter<?>> defaults;, +, +	private List<HttpMessageConverter<?>> overrides;, +, +	private Object lock = new Object();, +, +	private List<HttpMessageConverter<?>> converters;, +, +	public HttpMessageConverters() {, +		this(Collections.<HttpMessageConverter<?>> emptyList());, +	}, +, +	public HttpMessageConverters(Collection<HttpMessageConverter<?>> overrides) {, +		this.overrides = new ArrayList<HttpMessageConverter<?>>(overrides);, +	}, +, +	public List<HttpMessageConverter<?>> getMessageConverters() {, +		if (this.converters == null) {, +			synchronized (this.lock) {, +				if (this.converters == null) {, +					getDefaultMessageConverters(); // ensure they are available, +					Collection<HttpMessageConverter<?>> fallbacks = new LinkedHashSet<HttpMessageConverter<?>>();, +					for (HttpMessageConverter<?> fallback : this.defaults) {, +						boolean overridden = false;, +						for (HttpMessageConverter<?> converter : this.overrides) {, +							if (fallback.getClass(), +									.isAssignableFrom(converter.getClass())) {, +								if (!fallbacks.contains(converter)) {, +									fallbacks.add(converter);, +									overridden = true;, +								}, +							}, +						}, +						if (!overridden) {, +							fallbacks.add(fallback);, +						}, +					}, +					Collection<HttpMessageConverter<?>> converters = new LinkedHashSet<HttpMessageConverter<?>>(, +							this.overrides);, +					converters.addAll(fallbacks);, +					this.converters = new ArrayList<HttpMessageConverter<?>>(converters);]