[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java, +	private static final String UNKNOWN_PATH_SUFFIX = "/unmapped";, +				int status = getStatus(response);, +				if (request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE) != null) {, +					suffix = request, +							.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE), +							.toString().replaceAll("[{}]", "-");, +				else if (HttpStatus.valueOf(status).is4xxClientError()) {, +				String counterKey = getKey("status." + status + suffix);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java, +	private static final String UNKNOWN_PATH_SUFFIX = "/unmapped";, +				int status = getStatus(response);, +				if (request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE) != null) {, +					suffix = request, +							.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE), +							.toString().replaceAll("[{}]", "-");, +				else if (HttpStatus.valueOf(status).is4xxClientError()) {, +				String counterKey = getKey("status." + status + suffix);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.mockito.BDDMockito.willAnswer;, +import static org.mockito.Matchers.anyDouble;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +, +		MockMvc mvc = MockMvcBuilders.standaloneSetup(new MetricFilterTestController()), +				.addFilter(filter).build();, +		mvc.perform(get("/templateVarTest/foo")).andExpect(status().isOk());, +		verify(context.getBean(CounterService.class)).increment(, +				"status.200.templateVarTest.-someVariable-");, +		verify(context.getBean(GaugeService.class)).submit(, +				eq("response.templateVarTest.-someVariable-"), anyDouble());, +	public void recordsKnown404HttpInteractionsAsSingleMetricWithPathAndTemplateVariable(), +			throws Exception {, +		MockMvc mvc = MockMvcBuilders.standaloneSetup(new MetricFilterTestController()), +				.addFilter(filter).build();, +		mvc.perform(get("/knownPath/foo")).andExpect(status().isNotFound());, +		verify(context.getBean(CounterService.class)).increment(, +				"status.404.knownPath.-someVariable-");, +		verify(context.getBean(GaugeService.class)).submit(, +				eq("response.knownPath.-someVariable-"), anyDouble());, +		MockMvc mvc = MockMvcBuilders.standaloneSetup(new MetricFilterTestController()), +				.addFilter(filter).build();, +		mvc.perform(get("/unknownPath/1")).andExpect(status().isNotFound());, +		mvc.perform(get("/unknownPath/2")).andExpect(status().isNotFound());, +		verify(context.getBean(CounterService.class), times(2)).increment(, +				"status.404.unmapped");, +		verify(context.getBean(GaugeService.class), times(2)).submit(, +				eq("response.unmapped"), anyDouble());, +class MetricFilterTestController {, +	public String testTemplateVariableResolution(@PathVariable String someVariable) {, +	public String testKnownPathWith404Response(@PathVariable String someVariable) {]