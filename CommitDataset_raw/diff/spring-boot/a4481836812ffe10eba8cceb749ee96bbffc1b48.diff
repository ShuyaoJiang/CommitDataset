[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LoggersEndpoint.java, + * @author Phillip Webb, +public class LoggersEndpoint, +		extends AbstractEndpoint<Map<String, LoggersEndpoint.LoggerLevels>> {, +	public Map<String, LoggerLevels> invoke() {, +		Collection<LoggerConfiguration> configurations = this.loggingSystem, +				.getLoggerConfigurations();, +		if (configurations == null) {, +		Map<String, LoggerLevels> result = new LinkedHashMap<String, LoggerLevels>(, +				configurations.size());, +		for (LoggerConfiguration configuration : configurations) {, +			result.put(configuration.getName(), new LoggerLevels(configuration));, +	public LoggerLevels invoke(String name) {, +		LoggerConfiguration configuration = this.loggingSystem, +				.getLoggerConfiguration(name);, +		return (configuration == null ? null : new LoggerLevels(configuration));, +	public void setLogLevel(String name, LogLevel level) {, +	/**, +	 * Levels configured for a given logger exposed in a JSON friendly way., +	 */, +	public static class LoggerLevels {, +, +		private String configuredLevel;, +, +		private String effectiveLevel;, +, +		public LoggerLevels(LoggerConfiguration configuration) {, +			this.configuredLevel = getName(configuration.getConfiguredLevel());, +			this.effectiveLevel = getName(configuration.getEffectiveLevel());, +, +		private String getName(LogLevel level) {, +			return (level == null ? null : level.name());, +		}, +, +		public String getConfiguredLevel() {, +			return this.configuredLevel;, +		}, +, +		public String getEffectiveLevel() {, +			return this.effectiveLevel;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LoggersEndpoint.java, + * @author Phillip Webb, +public class LoggersEndpoint, +		extends AbstractEndpoint<Map<String, LoggersEndpoint.LoggerLevels>> {, +	public Map<String, LoggerLevels> invoke() {, +		Collection<LoggerConfiguration> configurations = this.loggingSystem, +				.getLoggerConfigurations();, +		if (configurations == null) {, +		Map<String, LoggerLevels> result = new LinkedHashMap<String, LoggerLevels>(, +				configurations.size());, +		for (LoggerConfiguration configuration : configurations) {, +			result.put(configuration.getName(), new LoggerLevels(configuration));, +	public LoggerLevels invoke(String name) {, +		LoggerConfiguration configuration = this.loggingSystem, +				.getLoggerConfiguration(name);, +		return (configuration == null ? null : new LoggerLevels(configuration));, +	public void setLogLevel(String name, LogLevel level) {, +	/**, +	 * Levels configured for a given logger exposed in a JSON friendly way., +	 */, +	public static class LoggerLevels {, +, +		private String configuredLevel;, +, +		private String effectiveLevel;, +, +		public LoggerLevels(LoggerConfiguration configuration) {, +			this.configuredLevel = getName(configuration.getConfiguredLevel());, +			this.effectiveLevel = getName(configuration.getEffectiveLevel());, +, +		private String getName(LogLevel level) {, +			return (level == null ? null : level.name());, +		}, +, +		public String getConfiguredLevel() {, +			return this.configuredLevel;, +		}, +, +		public String getEffectiveLevel() {, +			return this.effectiveLevel;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java, +import org.springframework.boot.actuate.endpoint.LoggersEndpoint.LoggerLevels;, +import org.springframework.http.HttpEntity;, +		LoggerLevels levels = this.delegate.invoke(name);, +		return (levels == null ? ResponseEntity.notFound().build() : levels);, +	@PostMapping(value = "/{name:.*}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE), +		this.delegate.setLogLevel(name, level == null ? null : LogLevel.valueOf(level));, +		return HttpEntity.EMPTY;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LoggersEndpoint.java, + * @author Phillip Webb, +public class LoggersEndpoint, +		extends AbstractEndpoint<Map<String, LoggersEndpoint.LoggerLevels>> {, +	public Map<String, LoggerLevels> invoke() {, +		Collection<LoggerConfiguration> configurations = this.loggingSystem, +				.getLoggerConfigurations();, +		if (configurations == null) {]