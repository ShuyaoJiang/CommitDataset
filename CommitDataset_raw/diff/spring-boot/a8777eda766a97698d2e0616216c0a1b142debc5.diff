[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +import java.lang.ref.SoftReference;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +	private static SoftReference<Map<File, JarFile>> rootFileCache;, +	static {, +		rootFileCache = new SoftReference<Map<File, JarFile>>(null);, +	}, +, +			File file = new File(path);, +			Map<File, JarFile> cache = rootFileCache.get();, +			JarFile jarFile = (cache == null ? null : cache.get(file));, +			if (jarFile == null) {, +				jarFile = new JarFile(file);, +				addToRootFileCache(file, jarFile);, +			}, +			return jarFile;, +, +	/**, +	 * Add the given {@link JarFile} to the root file cache., +	 * @param sourceFile the source file to add, +	 * @param jarFile the jar file., +	 */, +	static void addToRootFileCache(File sourceFile, JarFile jarFile) {, +		Map<File, JarFile> cache = rootFileCache.get();, +		if (cache == null) {, +			cache = new ConcurrentHashMap<File, JarFile>();, +			rootFileCache = new SoftReference<Map<File, JarFile>>(cache);, +		}, +		cache.put(sourceFile, jarFile);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +import java.lang.ref.SoftReference;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +	private static SoftReference<Map<File, JarFile>> rootFileCache;, +	static {, +		rootFileCache = new SoftReference<Map<File, JarFile>>(null);, +	}, +, +			File file = new File(path);, +			Map<File, JarFile> cache = rootFileCache.get();, +			JarFile jarFile = (cache == null ? null : cache.get(file));, +			if (jarFile == null) {, +				jarFile = new JarFile(file);, +				addToRootFileCache(file, jarFile);, +			}, +			return jarFile;, +, +	/**, +	 * Add the given {@link JarFile} to the root file cache., +	 * @param sourceFile the source file to add, +	 * @param jarFile the jar file., +	 */, +	static void addToRootFileCache(File sourceFile, JarFile jarFile) {, +		Map<File, JarFile> cache = rootFileCache.get();, +		if (cache == null) {, +			cache = new ConcurrentHashMap<File, JarFile>();, +			rootFileCache = new SoftReference<Map<File, JarFile>>(cache);, +		}, +		cache.put(sourceFile, jarFile);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java, +	JarFile nestedJar;, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +import java.lang.ref.SoftReference;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +	private static SoftReference<Map<File, JarFile>> rootFileCache;, +	static {, +		rootFileCache = new SoftReference<Map<File, JarFile>>(null);, +	}, +, +			File file = new File(path);, +			Map<File, JarFile> cache = rootFileCache.get();, +			JarFile jarFile = (cache == null ? null : cache.get(file));, +			if (jarFile == null) {, +				jarFile = new JarFile(file);, +				addToRootFileCache(file, jarFile);, +			}, +			return jarFile;, +, +	/**, +	 * Add the given {@link JarFile} to the root file cache., +	 * @param sourceFile the source file to add, +	 * @param jarFile the jar file., +	 */, +	static void addToRootFileCache(File sourceFile, JarFile jarFile) {, +		Map<File, JarFile> cache = rootFileCache.get();, +		if (cache == null) {, +			cache = new ConcurrentHashMap<File, JarFile>();, +			rootFileCache = new SoftReference<Map<File, JarFile>>(cache);, +		}, +		cache.put(sourceFile, jarFile);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java]