[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Redis support., +			RedisProperties.Pool props = this.config.getPool();, +, +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Redis support., +			RedisProperties.Pool props = this.config.getPool();, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import static org.hamcrest.CoreMatchers.instanceOf;, +		LocalContainerEntityManagerFactoryBean factoryBean = this.context, +				.getBean(LocalContainerEntityManagerFactoryBean.class);, +		assertThat(map.get("configured"), equalTo((Object) "manually"));, +		PlatformTransactionManager txManager = this.context, +				.getBean(PlatformTransactionManager.class);, +		assertThat(txManager, instanceOf(CustomJpaTransactionManager.class));, +		this.context.register(configClass, ComponentScanDetectorConfiguration.class,, +	protected static class TestConfigurationWithEntityManagerFactory extends, +			TestConfiguration {, +		public LocalContainerEntityManagerFactoryBean entityManagerFactory(, +				DataSource dataSource, JpaVendorAdapter adapter) {, +			factoryBean.setJpaPropertyMap(Collections.singletonMap("configured",, +					"manually"));, +, +	static class CustomJpaTransactionManager extends JpaTransactionManager {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Redis support., +			RedisProperties.Pool props = this.config.getPool();, +, +, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import static org.hamcrest.CoreMatchers.instanceOf;, +		LocalContainerEntityManagerFactoryBean factoryBean = this.context, +				.getBean(LocalContainerEntityManagerFactoryBean.class);, +		assertThat(map.get("configured"), equalTo((Object) "manually"));, +		PlatformTransactionManager txManager = this.context, +				.getBean(PlatformTransactionManager.class);, +		assertThat(txManager, instanceOf(CustomJpaTransactionManager.class));, +		this.context.register(configClass, ComponentScanDetectorConfiguration.class,, +	protected static class TestConfigurationWithEntityManagerFactory extends, +			TestConfiguration {, +		public LocalContainerEntityManagerFactoryBean entityManagerFactory(, +				DataSource dataSource, JpaVendorAdapter adapter) {, +			factoryBean.setJpaPropertyMap(Collections.singletonMap("configured",, +					"manually"));, +, +	static class CustomJpaTransactionManager extends JpaTransactionManager {, +++ b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java, +import org.springframework.data.redis.RedisConnectionFailureException;, +, +import static org.junit.Assert.assertTrue;, +			if (!redisServerRunning(ex)) {, +	private boolean redisServerRunning(Throwable ex) {, +		System.out.println(ex.getMessage());, +		if (ex instanceof RedisConnectionFailureException) {, +		return (ex.getCause() == null || redisServerRunning(ex.getCause()));, +	}]