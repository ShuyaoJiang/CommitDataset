[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +		public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {, +		public EndpointServerWebExchangeMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +		public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {, +		public EndpointServerWebExchangeMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		public EndpointRequestMatcher excluding(Class<?>... endpoints) {, +		public EndpointRequestMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +		public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {, +		public EndpointServerWebExchangeMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		public EndpointRequestMatcher excluding(Class<?>... endpoints) {, +		public EndpointRequestMatcher excluding(String... endpoints) {, +++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/main/java/sample/actuator/customsecurity/SecurityConfiguration.java, +import org.springframework.boot.actuate.web.mappings.MappingsEndpoint;, +				.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole("ACTUATOR"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +		public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {, +		public EndpointServerWebExchangeMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		public EndpointRequestMatcher excluding(Class<?>... endpoints) {, +		public EndpointRequestMatcher excluding(String... endpoints) {, +++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/main/java/sample/actuator/customsecurity/SecurityConfiguration.java, +import org.springframework.boot.actuate.web.mappings.MappingsEndpoint;, +				.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole("ACTUATOR"), +++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/SampleActuatorCustomSecurityApplicationTests.java, +	@Test, +	public void actuatorExcludedFromEndpointRequestMatcher() {, +		ResponseEntity<Object> entity = userRestTemplate().getForEntity("/actuator/mappings",, +				Object.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +		public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {, +		public EndpointServerWebExchangeMatcher excluding(String... endpoints) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		public EndpointRequestMatcher excluding(Class<?>... endpoints) {, +		public EndpointRequestMatcher excluding(String... endpoints) {, +++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/main/java/sample/actuator/customsecurity/SecurityConfiguration.java, +import org.springframework.boot.actuate.web.mappings.MappingsEndpoint;, +				.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole("ACTUATOR"), +++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/SampleActuatorCustomSecurityApplicationTests.java, +	@Test, +	public void actuatorExcludedFromEndpointRequestMatcher() {, +		ResponseEntity<Object> entity = userRestTemplate().getForEntity("/actuator/mappings",, +				Object.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-secure-webflux/src/test/java/sample/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java, +import org.springframework.boot.actuate.web.mappings.MappingsEndpoint;, +	public void actuatorExcludedFromEndpointRequestMatcher() {, +		this.webClient.get().uri("/actuator/mappings").accept(MediaType.APPLICATION_JSON), +				.header("Authorization", "basic " + getBasicAuth()).exchange(), +				.expectStatus().isOk();, +	}, +, +	@Test, +					.permitAll().matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))]