[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrar.java, +		this.servletEndpoints, +				.forEach((servletEndpoint) -> register(servletContext, servletEndpoint));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrar.java, +		this.servletEndpoints, +				.forEach((servletEndpoint) -> register(servletContext, servletEndpoint));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).isRedisSentinelAware()), +								.isTrue());, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).getClusterConnection()), +								.isNotNull());, +				.run((context) -> assertThat(, +								.isEqualTo("password"), +		);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrar.java, +		this.servletEndpoints, +				.forEach((servletEndpoint) -> register(servletContext, servletEndpoint));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).isRedisSentinelAware()), +								.isTrue());, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).getClusterConnection()), +								.isNotNull());, +				.run((context) -> assertThat(, +								.isEqualTo("password"), +		);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java, +		this.contextRunner, +				.run((context) -> assertThat(context.getBeansOfType(JestClient.class)), +						.hasSize(1));, +				.run((context) -> assertThat(context.getBeansOfType(JestClient.class)), +						.hasSize(1));, +				.run((context) -> assertThat(context.getStartupFailure()), +						.hasMessageContaining("Proxy port must not be null"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/ServletEndpointRegistrar.java, +		this.servletEndpoints, +				.forEach((servletEndpoint) -> register(servletContext, servletEndpoint));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).isRedisSentinelAware()), +								.isTrue());, +				.run((context) -> assertThat(context, +						.getBean(LettuceConnectionFactory.class).getClusterConnection()), +								.isNotNull());, +				.run((context) -> assertThat(, +								.isEqualTo("password"), +		);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java, +		this.contextRunner, +				.run((context) -> assertThat(context.getBeansOfType(JestClient.class)), +						.hasSize(1));, +				.run((context) -> assertThat(context.getBeansOfType(JestClient.class)), +						.hasSize(1));, +				.run((context) -> assertThat(context.getStartupFailure()), +						.hasMessageContaining("Proxy port must not be null"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +		this.contextRunner, +				.run((context) -> assertThat(context.getBeansOfType(GitProperties.class)), +						.isEmpty());, +				.run((context) -> assertThat(, +						context.getBeansOfType(BuildProperties.class)).hasSize(0));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfigurationTests.java, +		this.contextRunner.run((context) -> assertThat(context), +				.getBeans(ExposeExcludePropertyEndpointFilter.class), +						"controllerIncludeExcludePropertyEndpointFilter"));, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(ServletEndpointDiscoverer.class));]