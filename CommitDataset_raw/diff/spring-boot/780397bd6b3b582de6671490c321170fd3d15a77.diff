[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		String property = SystemPropertyUtils.getProperty(MAIN);, +		if (property != null) {, +			String mainClass = SystemPropertyUtils.resolvePlaceholders(property);, +			this.logger.info("Main class from environment: " + mainClass);, +		if (this.properties.containsKey(MAIN)) {, +			String mainClass = SystemPropertyUtils.resolvePlaceholders(this.properties, +					.getProperty(MAIN));, +			this.logger.info("Main class from properties: " + mainClass);, +			return mainClass;, +			String mainClass = new ExplodedArchive(this.home).getMainClass();, +			this.logger.info("Main class from home directory manifest: " + mainClass);, +			return mainClass;, +			String mainClass = createArchive().getMainClass();, +			this.logger.info("Main class from archive manifest: " + mainClass);, +			return mainClass;, +			@SuppressWarnings("resource"), +					File dir = new File(name.substring(0, name.length() - 1));, +					if (dir.exists()) {, +										name.length() - 1)), false));, +					}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		String property = SystemPropertyUtils.getProperty(MAIN);, +		if (property != null) {, +			String mainClass = SystemPropertyUtils.resolvePlaceholders(property);, +			this.logger.info("Main class from environment: " + mainClass);, +		if (this.properties.containsKey(MAIN)) {, +			String mainClass = SystemPropertyUtils.resolvePlaceholders(this.properties, +					.getProperty(MAIN));, +			this.logger.info("Main class from properties: " + mainClass);, +			return mainClass;, +			String mainClass = new ExplodedArchive(this.home).getMainClass();, +			this.logger.info("Main class from home directory manifest: " + mainClass);, +			return mainClass;, +			String mainClass = createArchive().getMainClass();, +			this.logger.info("Main class from archive manifest: " + mainClass);, +			return mainClass;, +			@SuppressWarnings("resource"), +					File dir = new File(name.substring(0, name.length() - 1));, +					if (dir.exists()) {, +										name.length() - 1)), false));, +					}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/ExplodedArchive.java, +	private boolean recursive = true;, +, +		this(root, true);, +	}, +, +	public ExplodedArchive(File root, boolean recursive) {, +		this.recursive = recursive;, +					.substring(this.root.toURI().getPath().length());, +			if (this.recursive) {, +	}]