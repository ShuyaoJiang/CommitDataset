[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, +import org.junit.rules.ExpectedException;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import static org.hamcrest.Matchers.instanceOf;, +	private ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(ReactiveWebServerAutoConfiguration.class,, +					HttpHandlerAutoConfiguration.class, WebFluxAutoConfiguration.class,, +					ErrorWebFluxAutoConfiguration.class,, +					PropertyPlaceholderAutoConfiguration.class, MustacheAutoConfiguration.class)), +			.withPropertyValues("spring.main.web-application-type=reactive", "server.port=0"), +			.withUserConfiguration(Application.class);, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +		this.contextRunner.run(context -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +			client.get().uri("/").exchange().expectStatus(), +		});, +		this.contextRunner.run(context -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +			client.get().uri("/notFound").exchange().expectStatus(), +		});, +		this.contextRunner.run(context -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +			String body = client.get().uri("/").accept(MediaType.TEXT_HTML), +		});, +		this.contextRunner.run(context -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +			client.post().uri("/bind").contentType(MediaType.APPLICATION_JSON), +		});, +		this.contextRunner, +				.withPropertyValues("server.error.include-exception=true",, +						"server.error.include-stacktrace=on-trace-param"), +				.run(context -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +					client.get().uri("/?trace=true").exchange().expectStatus(), +				});, +		this.contextRunner, +				.withPropertyValues("server.error.include-exception=true",, +						"server.error.include-stacktrace=always"), +				.run(context -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +					client.get().uri("/?trace=false").exchange().expectStatus(), +				});, +		this.contextRunner, +				.withPropertyValues("server.error.include-exception=true",, +						"server.error.include-stacktrace=never"), +				.run(context -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +					client.get().uri("/?trace=true").exchange().expectStatus(), +, +				});, +		this.contextRunner, +				.withPropertyValues("server.error.include-exception=true"), +				.run(context -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +					client.get().uri("/badRequest").exchange().expectStatus(), +				});, +		this.contextRunner, +				.withPropertyValues("spring.mustache.prefix=classpath:/unknown/"), +				.run(context -> {, +					WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +					String body = client.get().uri("/").accept(MediaType.TEXT_HTML), +				});, +		this.contextRunner.run(context -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context).build();, +			this.thrown.expectCause(instanceOf(IllegalStateException.class));, +			this.thrown.expectMessage("already committed!");, +			client.get().uri("/commit").exchange().expectStatus(), +		});]