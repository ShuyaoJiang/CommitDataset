[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@EnableAutoConfiguration` or `@SpringBootApplication`) will be searched., +main configuration class (the one annotated with `@EnableAutoConfiguration` or, +`@SpringBootApplication`) down., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@EnableAutoConfiguration` or `@SpringBootApplication`) will be searched., +main configuration class (the one annotated with `@EnableAutoConfiguration` or, +`@SpringBootApplication`) down., +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +[[using-boot-using-springbootapplication-annotation]], +== Using the @SpringBootApplication annotation, +Many Spring Boot developers always have their main class annotated with `@Configuration`,, +`@EnableAutoConfiguration` and `@ComponentScan`. Since these annotations are so frequently, +used together (especially if you follow the <<using-boot-structuring-your-code, best practices>>, +above), Spring Boot provides a convenient `@SpringBootApplication` alternative., +, +The `@SpringBootApplication` annotation is equivalent to using `@Configuration`,, +`@EnableAutoConfiguration` and `@ComponentScan` with their default attributes:, +, +, +[source,java,indent=0], +----, +	package com.example.myproject;, +, +	import org.springframework.boot.SpringApplication;, +	import org.springframework.boot.autoconfigure.SpringBootApplication;, +, +	@SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan, +	public class Application {, +, +		public static void main(String[] args) {, +			SpringApplication.run(Application.class, args);, +		}, +, +	}, +----, +, +, +]