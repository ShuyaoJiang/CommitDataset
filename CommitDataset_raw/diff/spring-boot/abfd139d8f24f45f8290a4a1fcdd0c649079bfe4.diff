[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		Collection<Object> raw = resolver.getProperties("exclude");, +		List<String> values = new ArrayList<String>();, +		for (Object r : raw) {, +			values.add(r.toString());, +		}, +		return values;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		Collection<Object> raw = resolver.getProperties("exclude");, +		List<String> values = new ArrayList<String>();, +		for (Object r : raw) {, +			values.add(r.toString());, +		}, +		return values;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "type": "java.util.List<java.lang.Class>",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		Collection<Object> raw = resolver.getProperties("exclude");, +		List<String> values = new ArrayList<String>();, +		for (Object r : raw) {, +			values.add(r.toString());, +		}, +		return values;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "type": "java.util.List<java.lang.Class>",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +	public void severalPropertyYamlExclusionsAreApplied() {, +		configureExclusions(new String[0], new String[0], new String[0]);, +		this.environment.setProperty("spring.autoconfigure.exclude[0]",, +				FreeMarkerAutoConfiguration.class.getName());, +		this.environment.setProperty("spring.autoconfigure.exclude[1]",, +				VelocityAutoConfiguration.class.getName());, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports.length,, +				is(equalTo(getAutoConfigurationClassNames().size() - 2)));, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions(),, +				containsInAnyOrder(FreeMarkerAutoConfiguration.class.getName(),, +						VelocityAutoConfiguration.class.getName()));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		Collection<Object> raw = resolver.getProperties("exclude");, +		List<String> values = new ArrayList<String>();, +		for (Object r : raw) {, +			values.add(r.toString());, +		}, +		return values;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "type": "java.util.List<java.lang.Class>",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +	public void severalPropertyYamlExclusionsAreApplied() {, +		configureExclusions(new String[0], new String[0], new String[0]);, +		this.environment.setProperty("spring.autoconfigure.exclude[0]",, +				FreeMarkerAutoConfiguration.class.getName());, +		this.environment.setProperty("spring.autoconfigure.exclude[1]",, +				VelocityAutoConfiguration.class.getName());, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports.length,, +				is(equalTo(getAutoConfigurationClassNames().size() - 2)));, +		assertThat(ConditionEvaluationReport.get(this.beanFactory).getExclusions(),, +				containsInAnyOrder(FreeMarkerAutoConfiguration.class.getName(),, +						VelocityAutoConfiguration.class.getName()));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, + * Copyright 2012-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +	 * Return the property values associated with the given key, or an empty, +	 * list if the key cannot be resolved., +	 * @param key the property name to resolve, +	 * @return the property values for that key, +	 */, +	public List<Object> getProperties(String key) {, +		Object[] singular = getProperty(key, Object[].class);, +		if (singular != null) {, +			return Arrays.asList(singular);, +		}, +		Map<String, Object> subProperties = getSubProperties(key);, +		return new ArrayList<Object>(subProperties.values());, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +		Collection<Object> raw = resolver.getProperties("exclude");, +		List<String> values = new ArrayList<String>();, +		for (Object r : raw) {, +			values.add(r.toString());, +		}, +		return values;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "type": "java.util.List<java.lang.Class>",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +	public void severalPropertyYamlExclusionsAreApplied() {, +		configureExclusions(new String[0], new String[0], new String[0]);, +		this.environment.setProperty("spring.autoconfigure.exclude[0]",, +				FreeMarkerAutoConfiguration.class.getName());]