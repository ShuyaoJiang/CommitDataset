[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.springframework.util.ReflectionUtils;, +	private Releasable releasable;, +			return createClient();, +		ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder().put(, +				"http.enabled", String.valueOf(false));, +		Node node = new NodeBuilder().settings(settings), +				.clusterName(this.properties.getClusterName()).local(true).node();, +		this.releasable = node;, +		return node.client();, +		TransportClient client = factory.getObject();, +		this.releasable = client;, +		return client;, +		if (this.releasable != null) {, +				if (this.releasable != null) {, +					try {, +						this.releasable.close();, +					}, +					catch (NoSuchMethodError ex) {, +						// Earlier versions of Elasticsearch had a different method name, +						ReflectionUtils.invokeMethod(, +								ReflectionUtils.findMethod(Releasable.class, "release"),, +								this.releasable);, +					}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.springframework.util.ReflectionUtils;, +	private Releasable releasable;, +			return createClient();, +		ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder().put(, +				"http.enabled", String.valueOf(false));, +		Node node = new NodeBuilder().settings(settings), +				.clusterName(this.properties.getClusterName()).local(true).node();, +		this.releasable = node;, +		return node.client();, +		TransportClient client = factory.getObject();, +		this.releasable = client;, +		return client;, +		if (this.releasable != null) {, +				if (this.releasable != null) {, +					try {, +						this.releasable.close();, +					}, +					catch (NoSuchMethodError ex) {, +						// Earlier versions of Elasticsearch had a different method name, +						ReflectionUtils.invokeMethod(, +								ReflectionUtils.findMethod(Releasable.class, "release"),, +								this.releasable);, +					}, +++ b/spring-boot-samples/spring-boot-sample-data-elasticsearch/src/main/java/sample/data/elasticsearch/SampleElasticsearchApplication.java, + * Copyright 2012-2015 the original author or authors., +		SpringApplication.run(SampleElasticsearchApplication.class, "--debug").close();]