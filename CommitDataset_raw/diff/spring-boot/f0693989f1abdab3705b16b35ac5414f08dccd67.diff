[+++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +					.map((s) -> new SessionDescriptor(s.getValue())), +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +					.map((s) -> new SessionDescriptor(s.getValue())), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, +	@SuppressWarnings("unchecked"), +	private final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +					.map((s) -> new SessionDescriptor(s.getValue())), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, +	@SuppressWarnings("unchecked"), +	private final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointWebIntegrationTests.java, +	@SuppressWarnings("unchecked"), +	private static final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +					.map((s) -> new SessionDescriptor(s.getValue())), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, +	@SuppressWarnings("unchecked"), +	private final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointWebIntegrationTests.java, +	@SuppressWarnings("unchecked"), +	private static final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java, +		@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class,, +				GsonHttpMessageConverter.class }), +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java, +		public FindByIndexNameSessionRepository<?> sessionRepository() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +					.map((s) -> new SessionDescriptor(s.getValue())), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointTests.java, +	@SuppressWarnings("unchecked"), +	private final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/session/SessionsEndpointWebIntegrationTests.java, +	@SuppressWarnings("unchecked"), +	private static final FindByIndexNameSessionRepository<Session> repository = mock(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.java, +		@ConditionalOnMissingBean({ MappingJackson2HttpMessageConverter.class,, +				GsonHttpMessageConverter.class }), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfigurationTests.java, +			.withConfiguration(, +					AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class));, +			assertThat(context), +					.doesNotHaveBean(MappingJackson2HttpMessageConverter.class);, +			assertThat(context), +					.doesNotHaveBean(MappingJackson2XmlHttpMessageConverter.class);, +		this.contextRunner, +				.withUserConfiguration(JacksonObjectMapperConfig.class,, +						JacksonConverterConfig.class), +				.run(assertConverter(MappingJackson2HttpMessageConverter.class,, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(GsonAutoConfiguration.class)), +				.run(assertConverter(GsonHttpMessageConverter.class,, +		allOptionsRunner(), +				.withPropertyValues("spring.http.converters.preferred-json-mapper:gson"), +				.run((context) -> {, +					assertThat(context), +							.doesNotHaveBean(MappingJackson2HttpMessageConverter.class);, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(JsonbAutoConfiguration.class)), +				.run(assertConverter(JsonbHttpMessageConverter.class,, +		allOptionsRunner(), +				.withPropertyValues("spring.http.converters.preferred-json-mapper:jsonb"), +				.run((context) -> {, +					assertThat(context), +							.doesNotHaveBean(MappingJackson2HttpMessageConverter.class);, +					BeanDefinition beanDefinition = ((GenericApplicationContext) context, +							.getSourceApplicationContext()).getBeanDefinition(, +									"mappingJackson2HttpMessageConverter");, +							MappingJackson2HttpMessageConverterConfiguration.class, +									.getName());, +					BeanDefinition beanDefinition = ((GenericApplicationContext) context, +							.getSourceApplicationContext()).getBeanDefinition(, +									"mappingJackson2HttpMessageConverter");, +							MappingJackson2HttpMessageConverterConfiguration.class, +									.getName());, +		allOptionsRunner().withClassLoader(, +				new HidePackagesClassLoader(ObjectMapper.class.getPackage().getName())), +				.run((context) -> {, +		return this.contextRunner, +				.withConfiguration(AutoConfigurations.of(GsonAutoConfiguration.class,, +						JacksonAutoConfiguration.class, JsonbAutoConfiguration.class));, +			Class<? extends HttpMessageConverter<?>> converterType, String beanName) {, +		return (context) -> {, +			assertConverterBeanRegisteredWithHttpMessageConverters(context,, +					converterType);, +			AssertableApplicationContext context,, +			Class<? extends HttpMessageConverter<?>> type) {, +		HttpMessageConverter<?> converter = context.getBean(type);, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/session/SessionsEndpointAutoConfigurationTests.java]