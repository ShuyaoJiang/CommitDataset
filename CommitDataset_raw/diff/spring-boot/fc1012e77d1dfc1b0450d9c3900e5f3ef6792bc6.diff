[+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java, +		this.commands.add(0, new HelpOptionCommand());, +		this.commands.add(0, new HelpOptionCommand());, +			}, +			if (!(ex instanceof NoHelpCommandArgumentsException)) {, +			if (candidate.getName().equals(name)) {, +		throw new NoSuchCommandException(name);, +					command.getName(), command.getUsageHelp(), command.getDescription()));, +	private class HelpOptionCommand extends HelpCommand {, +		@Override, +		public String getName() {, +			return "--help";, +		}, +	}, +, +				if (command.getName().equals(commandName)) {, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java, +		this.commands.add(0, new HelpOptionCommand());, +		this.commands.add(0, new HelpOptionCommand());, +			}, +			if (!(ex instanceof NoHelpCommandArgumentsException)) {, +			if (candidate.getName().equals(name)) {, +		throw new NoSuchCommandException(name);, +					command.getName(), command.getUsageHelp(), command.getDescription()));, +	private class HelpOptionCommand extends HelpCommand {, +		@Override, +		public String getName() {, +			return "--help";, +		}, +	}, +, +				if (command.getName().equals(commandName)) {, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/AbstractCommand.java, + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java, +		this.commands.add(0, new HelpOptionCommand());, +		this.commands.add(0, new HelpOptionCommand());, +			}, +			if (!(ex instanceof NoHelpCommandArgumentsException)) {, +			if (candidate.getName().equals(name)) {, +		throw new NoSuchCommandException(name);, +					command.getName(), command.getUsageHelp(), command.getDescription()));, +	private class HelpOptionCommand extends HelpCommand {, +		@Override, +		public String getName() {, +			return "--help";, +		}, +	}, +, +				if (command.getName().equals(commandName)) {, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/AbstractCommand.java, + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionParsingCommand.java, + * Base class for any {@link Command}s that use an {@link OptionHandler}., + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java, +		this.commands.add(0, new HelpOptionCommand());, +		this.commands.add(0, new HelpOptionCommand());, +			}, +			if (!(ex instanceof NoHelpCommandArgumentsException)) {, +			if (candidate.getName().equals(name)) {, +		throw new NoSuchCommandException(name);, +					command.getName(), command.getUsageHelp(), command.getDescription()));, +	private class HelpOptionCommand extends HelpCommand {, +		@Override, +		public String getName() {, +			return "--help";, +		}, +	}, +, +				if (command.getName().equals(commandName)) {, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/AbstractCommand.java, + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionParsingCommand.java, + * Base class for any {@link Command}s that use an {@link OptionHandler}., + * @author Dave Syer, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/ScriptCompilationCustomizer.java, +import org.springframework.bootstrap.cli.Command;, +				Command.class.getCanonicalName(), OptionHandler.class.getCanonicalName());, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/Command.java, + * @author Dave Syer, +++ /dev/null, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java]