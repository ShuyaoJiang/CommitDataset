[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +			if (StringUtils.hasText(properties.getName())) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +			if (StringUtils.hasText(properties.getName())) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Name of the datasource. Default to "testdb" when using an embedded database., +	private String name;, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +			if (StringUtils.hasText(properties.getName())) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Name of the datasource. Default to "testdb" when using an embedded database., +	private String name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +		String name = (StringUtils.hasText(this.properties.getName()), +				? this.properties.getName(), +				: EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME);, +		this.database = builder.setName(name), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +			if (StringUtils.hasText(properties.getName())) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Name of the datasource. Default to "testdb" when using an embedded database., +	private String name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +		String name = (StringUtils.hasText(this.properties.getName()), +				? this.properties.getName(), +				: EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME);, +		this.database = builder.setName(name), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Set;, +import javax.management.ObjectInstance;, +	public void hikariAutoConfiguredWithoutDataSourceName(), +			throws MalformedObjectNameException {, +		MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();, +		Set<ObjectInstance> existingInstances = mBeanServer.queryMBeans(, +				new ObjectName("com.zaxxer.hikari:type=*"), null);, +		load("spring.datasource.type=" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.register-mbeans=true");, +		assertThat(this.context.getBeansOfType(HikariDataSource.class)).hasSize(1);, +		assertThat(this.context.getBean(HikariDataSource.class).isRegisterMbeans()), +				.isTrue();, +		// We can rely on the number of MBeans so we're checking that the pool and pool, +		// config mBeans were registered, +		assertThat(mBeanServer.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"),, +				null).size()).isEqualTo(existingInstances.size() + 2);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +		this.dataSource = new SingleConnectionDataSource(db.getUrl(, +				EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME) + ";shutdown=true",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +			if (StringUtils.hasText(properties.getName())) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Name of the datasource. Default to "testdb" when using an embedded database., +	private String name;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.util.StringUtils;, +		String name = (StringUtils.hasText(this.properties.getName()), +				? this.properties.getName(), +				: EmbeddedDatabaseConnection.DEFAULT_DATABASE_NAME);, +		this.database = builder.setName(name), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Set;, +import javax.management.ObjectInstance;]