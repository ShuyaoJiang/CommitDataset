[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, +		candidates.forEach((key, value) -> {, +			if (!(value instanceof AbstractRoutingDataSource)) {, +				dataSources.put(key, value);, +		});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, +		candidates.forEach((key, value) -> {, +			if (!(value instanceof AbstractRoutingDataSource)) {, +				dataSources.put(key, value);, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		return descriptors.entrySet().stream()., +				filter((entry) -> entry.getValue() != null)., +				map((entry) -> new PropertySummaryDescriptor(entry.getKey(), entry.getValue().getValue()))., +				findFirst().orElse(null);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, +		candidates.forEach((key, value) -> {, +			if (!(value instanceof AbstractRoutingDataSource)) {, +				dataSources.put(key, value);, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		return descriptors.entrySet().stream()., +				filter((entry) -> entry.getValue() != null)., +				map((entry) -> new PropertySummaryDescriptor(entry.getKey(), entry.getValue().getValue()))., +				findFirst().orElse(null);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +			this.classes.forEach((key, value) -> {, +				if (value.getBefore().contains(className)) {, +					rtn.add(key);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach((key, value) -> {, +				if (value.isFullMatch()) {, +					add(this.positiveMatches, key, value);, +					add(this.negativeMatches, key, value);, +			});, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach((key, value) -> composite.addHealthIndicator(key, createHealthIndicator(value)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, +		candidates.forEach((key, value) -> {, +			if (!(value instanceof AbstractRoutingDataSource)) {, +				dataSources.put(key, value);, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java]