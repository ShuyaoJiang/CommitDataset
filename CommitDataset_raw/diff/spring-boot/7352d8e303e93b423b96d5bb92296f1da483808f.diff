[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(patterns)) {, +			super.registerHandlerMethod(handler, method,, +					withNewPatterns(mapping, patterns));, +		}, +		Assert.state(handler instanceof MvcEndpoint, "Only MvcEndpoints are supported");, +		String path = getPath((MvcEndpoint) handler);, +		return (path == null ? null : getEndpointPatterns(path, mapping));, +, +	/**, +	 * Return the path that should be used to map the given {@link MvcEndpoint}., +	 * @param endpoint the endpoint to map, +	 * @return the path to use for the endpoint or {@code null} if no mapping is required, +	 */, +	protected String getPath(MvcEndpoint endpoint) {, +		return endpoint.getPath();, +	}, +, +	private String[] getEndpointPatterns(String path, RequestMappingInfo mapping) {, +		String patternPrefix = StringUtils.hasText(this.prefix) ? this.prefix + path, +				: path;, +		Set<String> defaultPatterns = mapping.getPatternsCondition().getPatterns();, +		if (defaultPatterns.isEmpty()) {, +			return new String[] { patternPrefix, patternPrefix + ".json" };, +		}, +		List<String> patterns = new ArrayList<String>(defaultPatterns);, +		for (int i = 0; i < patterns.size(); i++) {, +			patterns.set(i, patternPrefix + patterns.get(i));, +		}, +		return patterns.toArray(new String[patterns.size()]);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(patterns)) {, +			super.registerHandlerMethod(handler, method,, +					withNewPatterns(mapping, patterns));, +		}, +		Assert.state(handler instanceof MvcEndpoint, "Only MvcEndpoints are supported");, +		String path = getPath((MvcEndpoint) handler);, +		return (path == null ? null : getEndpointPatterns(path, mapping));, +, +	/**, +	 * Return the path that should be used to map the given {@link MvcEndpoint}., +	 * @param endpoint the endpoint to map, +	 * @return the path to use for the endpoint or {@code null} if no mapping is required, +	 */, +	protected String getPath(MvcEndpoint endpoint) {, +		return endpoint.getPath();, +	}, +, +	private String[] getEndpointPatterns(String path, RequestMappingInfo mapping) {, +		String patternPrefix = StringUtils.hasText(this.prefix) ? this.prefix + path, +				: path;, +		Set<String> defaultPatterns = mapping.getPatternsCondition().getPatterns();, +		if (defaultPatterns.isEmpty()) {, +			return new String[] { patternPrefix, patternPrefix + ".json" };, +		}, +		List<String> patterns = new ArrayList<String>(defaultPatterns);, +		for (int i = 0; i < patterns.size(); i++) {, +			patterns.set(i, patternPrefix + patterns.get(i));, +		}, +		return patterns.toArray(new String[patterns.size()]);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMappingTests.java, +import java.util.Collection;, +	@Test, +	public void pathNotMappedWhenGetPathReturnsNull() throws Exception {, +		TestMvcEndpoint endpoint = new TestMvcEndpoint(new TestEndpoint("a"));, +		TestActionEndpoint other = new TestActionEndpoint(new TestEndpoint("b"));, +		EndpointHandlerMapping mapping = new TestEndpointHandlerMapping(, +				Arrays.asList(endpoint, other));, +		mapping.setApplicationContext(this.context);, +		mapping.afterPropertiesSet();, +		assertThat(mapping.getHandlerMethods()).hasSize(1);, +		assertThat(mapping.getHandler(request("GET", "/a"))).isNull();, +		assertThat(mapping.getHandler(request("POST", "/b"))).isNotNull();, +	}, +, +	static class TestEndpointHandlerMapping extends EndpointHandlerMapping {, +, +		TestEndpointHandlerMapping(Collection<? extends MvcEndpoint> endpoints) {, +			super(endpoints);, +		}, +, +		@Override, +		protected String getPath(MvcEndpoint endpoint) {, +			if (endpoint instanceof TestActionEndpoint) {, +				return super.getPath(endpoint);, +			}, +			return null;, +		}, +, +	}, +]