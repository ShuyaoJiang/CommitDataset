[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java, +import java.io.IOException;, +import java.util.Properties;, +import org.springframework.core.io.Resource;, +	public JCacheCacheManager cacheManager() throws IOException {, +		CacheManager cacheManager = createCacheManager();, +	private CacheManager createCacheManager() throws IOException {, +		CachingProvider cachingProvider = getCachingProvider(this.cacheProperties, +				.getJcache().getProvider());, +		Resource configLocation = this.cacheProperties.resolveConfigLocation();, +		if (configLocation != null) {, +			return cachingProvider.getCacheManager(configLocation.getURI(),, +					cachingProvider.getDefaultClassLoader(), createCacheManagerProperties(configLocation));, +		return cachingProvider.getCacheManager();, +	}, +, +	private CachingProvider getCachingProvider(String cachingProviderFqn) {, +		if (StringUtils.hasText(cachingProviderFqn)) {, +			return Caching.getCachingProvider(cachingProviderFqn);, +		}, +		return Caching.getCachingProvider();, +	}, +, +	private Properties createCacheManagerProperties(Resource configLocation) throws IOException {, +		Properties properties = new Properties();, +		// Hazelcast does not use the URI as a mean to specify a custom config., +		properties.setProperty("hazelcast.config.location", configLocation.getURI().toString());, +		return properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java, +import java.io.IOException;, +import java.util.Properties;, +import org.springframework.core.io.Resource;, +	public JCacheCacheManager cacheManager() throws IOException {, +		CacheManager cacheManager = createCacheManager();, +	private CacheManager createCacheManager() throws IOException {, +		CachingProvider cachingProvider = getCachingProvider(this.cacheProperties, +				.getJcache().getProvider());, +		Resource configLocation = this.cacheProperties.resolveConfigLocation();, +		if (configLocation != null) {, +			return cachingProvider.getCacheManager(configLocation.getURI(),, +					cachingProvider.getDefaultClassLoader(), createCacheManagerProperties(configLocation));, +		return cachingProvider.getCacheManager();, +	}, +, +	private CachingProvider getCachingProvider(String cachingProviderFqn) {, +		if (StringUtils.hasText(cachingProviderFqn)) {, +			return Caching.getCachingProvider(cachingProviderFqn);, +		}, +		return Caching.getCachingProvider();, +	}, +, +	private Properties createCacheManagerProperties(Resource configLocation) throws IOException {, +		Properties properties = new Properties();, +		// Hazelcast does not use the URI as a mean to specify a custom config., +		properties.setProperty("hazelcast.config.location", configLocation.getURI().toString());, +		return properties;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +import java.io.IOException;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +	public void jCacheCacheWithConfig() throws IOException {, +		String cachingProviderFqn = MockCachingProvider.class.getName();, +		String configLocation = "org/springframework/boot/autoconfigure/cache/hazelcast-specific.xml";, +		load(JCacheCustomConfiguration.class, "spring.cache.type=jcache",, +				"spring.cache.jcache.provider=" + cachingProviderFqn,, +				"spring.cache.config=" + configLocation);, +		JCacheCacheManager cacheManager = validateCacheManager(JCacheCacheManager.class);, +		Resource configResource = new ClassPathResource(configLocation);, +		assertThat(cacheManager.getCacheManager().getURI(), is(configResource.getURI()));, +	}, +, +	@Test, +	public void jCacheCacheWithWrongConfig() {, +		String cachingProviderFqn = MockCachingProvider.class.getName();, +		String configLocation = "org/springframework/boot/autoconfigure/cache/does-not-exist.xml";, +		thrown.expect(BeanCreationException.class);, +		thrown.expectMessage("spring.cache.config");, +		thrown.expectMessage(configLocation);, +		load(JCacheCustomConfiguration.class, "spring.cache.type=jcache",, +				"spring.cache.jcache.provider=" + cachingProviderFqn,, +				"spring.cache.config=" + configLocation);, +	}, +, +	@Test, +	public void ehCacheCacheWithConfig() {, +	public void hazelcastCacheWithConfig() {, +	public void hazelcastWithWrongConfig() {, +	public void hazelcastAsJCacheWithConfig() throws IOException {, +		String cachingProviderFqn = HazelcastCachingProvider.class.getName();, +		String configLocation = "org/springframework/boot/autoconfigure/cache/hazelcast-specific.xml";, +		JCacheCacheManager cacheManager = null;, +		try {, +			load(DefaultCacheConfiguration.class, "spring.cache.type=jcache",, +					"spring.cache.jcache.provider=" + cachingProviderFqn,, +					"spring.cache.config="+configLocation);, +			cacheManager = validateCacheManager(JCacheCacheManager.class);, +, +			Resource configResource = new ClassPathResource(configLocation);, +			assertThat(cacheManager.getCacheManager().getURI(), is(configResource.getURI()));, +		}]