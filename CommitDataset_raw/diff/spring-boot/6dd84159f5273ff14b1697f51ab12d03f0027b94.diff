[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +	@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java, +	@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java, +	@Test, +	public void jmxIntegrationEnabledByDefault() {, +		load();, +		MBeanServer mBeanServer = this.context.getBean(MBeanServer.class);, +		assertDomains(mBeanServer, true, "org.springframework.integration",, +				"org.springframework.integration.monitor");, +	}, +, +	@Test, +	public void disableJmxIntegration() {, +		load("spring.jmx.enabled=false");, +		assertThat(this.context.getBeansOfType(MBeanServer.class)).hasSize(0);, +	}, +, +	@Test, +	public void customizeJmxDomain() {, +		load("spring.jmx.default-domain=org.foo");, +		MBeanServer mBeanServer = this.context.getBean(MBeanServer.class);, +		assertDomains(mBeanServer, true, "org.foo");, +		assertDomains(mBeanServer, false, "org.springframework.integration",, +				"org.springframework.integration.monitor");, +	}, +]