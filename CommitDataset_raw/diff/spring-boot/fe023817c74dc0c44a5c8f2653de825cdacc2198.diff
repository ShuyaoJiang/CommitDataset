[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		private static final String[] CLASS_NAMES = {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		private static final String[] CLASS_NAMES = {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/format/WebConversionService.java, + * Copyright 2012-2018 the original author or authors., +	private static final boolean JSR_354_PRESENT = ClassUtils.isPresent(, +	private static final boolean JODA_TIME_PRESENT = ClassUtils.isPresent(, +		if (JSR_354_PRESENT) {, +		if (JODA_TIME_PRESENT) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		private static final String[] CLASS_NAMES = {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/format/WebConversionService.java, + * Copyright 2012-2018 the original author or authors., +	private static final boolean JSR_354_PRESENT = ClassUtils.isPresent(, +	private static final boolean JODA_TIME_PRESENT = ClassUtils.isPresent(, +		if (JSR_354_PRESENT) {, +		if (JODA_TIME_PRESENT) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/encodepassword/EncodePasswordCommand.java, +	private static final Map<String, Supplier<PasswordEncoder>> ENCODERS;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		private static final String[] CLASS_NAMES = {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/format/WebConversionService.java, + * Copyright 2012-2018 the original author or authors., +	private static final boolean JSR_354_PRESENT = ClassUtils.isPresent(, +	private static final boolean JODA_TIME_PRESENT = ClassUtils.isPresent(, +		if (JSR_354_PRESENT) {, +		if (JODA_TIME_PRESENT) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/encodepassword/EncodePasswordCommand.java, +	private static final Map<String, Supplier<PasswordEncoder>> ENCODERS;, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GenericBomAstTransformation.java, +	private static final ClassNode BOM = ClassHelper.make(DependencyManagementBom.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		private static final String[] CLASS_NAMES = {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/format/WebConversionService.java, + * Copyright 2012-2018 the original author or authors., +	private static final boolean JSR_354_PRESENT = ClassUtils.isPresent(, +	private static final boolean JODA_TIME_PRESENT = ClassUtils.isPresent(, +		if (JSR_354_PRESENT) {, +		if (JODA_TIME_PRESENT) {, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/encodepassword/EncodePasswordCommand.java, +	private static final Map<String, Supplier<PasswordEncoder>> ENCODERS;, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GenericBomAstTransformation.java, +	private static final ClassNode BOM = ClassHelper.make(DependencyManagementBom.class);, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/SpringBootMockMvcBuilderCustomizer.java, + * Copyright 2012-2018 the original author or authors., +		ServletContextInitializerBeans initializers = new ServletContextInitializerBeans(, +		for (ServletContextInitializer initializer : initializers) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundrySecurityInterceptor.java, +	private static final Mono<SecurityResponse> SUCCESS = Mono, +			.just(SecurityResponse.success());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	private static final String[] JNDI_LOCATIONS = { "java:/JmsXA",, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors.]