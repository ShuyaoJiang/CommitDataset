[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +import okhttp3.OkHttpClient;, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.util.StringUtils;, + * @author Eddú Meléndez, +	private final OkHttpClient.Builder builder;, +, +	public InfluxDbAutoConfiguration(InfluxDbProperties properties,, +			ObjectProvider<OkHttpClient.Builder> builder) {, +		this.builder = builder.getIfAvailable();, +		if (hasCredentials() && this.builder != null) {, +			return InfluxDBFactory.connect(this.properties.getUrl(),, +					this.properties.getUser(), this.properties.getUrl(), this.builder);, +		else if (hasCredentials()) {, +		else if (this.builder != null) {, +			return InfluxDBFactory.connect(this.properties.getUrl(), this.builder);, +		}, +		return InfluxDBFactory.connect(this.properties.getUrl());, +	}, +	private boolean hasCredentials() {, +		return StringUtils.hasText(this.properties.getUser()), +				&& StringUtils.hasText(this.properties.getPassword());, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +import okhttp3.OkHttpClient;, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.util.StringUtils;, + * @author Eddú Meléndez, +	private final OkHttpClient.Builder builder;, +, +	public InfluxDbAutoConfiguration(InfluxDbProperties properties,, +			ObjectProvider<OkHttpClient.Builder> builder) {, +		this.builder = builder.getIfAvailable();, +		if (hasCredentials() && this.builder != null) {, +			return InfluxDBFactory.connect(this.properties.getUrl(),, +					this.properties.getUser(), this.properties.getUrl(), this.builder);, +		else if (hasCredentials()) {, +		else if (this.builder != null) {, +			return InfluxDBFactory.connect(this.properties.getUrl(), this.builder);, +		}, +		return InfluxDBFactory.connect(this.properties.getUrl());, +	}, +	private boolean hasCredentials() {, +		return StringUtils.hasText(this.properties.getUser()), +				&& StringUtils.hasText(this.properties.getPassword());, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfigurationTests.java, +import java.util.concurrent.TimeUnit;, +, +import okhttp3.OkHttpClient;, +import org.influxdb.impl.InfluxDBImpl;, +import retrofit2.Retrofit;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.test.util.ReflectionTestUtils;, + * @author Eddú Meléndez, +		int readTimeout = getReadTimeoutProperty();, +		assertThat(readTimeout).isEqualTo(10_000);, +	@Test, +	public void influxDbWithoutCredentialsAndOkHttpClientBuilder() {, +		load(CustomOkHttpClientBuilderConfig.class, "spring.influx.url=http://localhost");, +		assertThat(this.context.getBeansOfType(InfluxDB.class)).hasSize(1);, +		int readTimeout = getReadTimeoutProperty();, +		assertThat(readTimeout).isEqualTo(30_000);, +	}, +, +	@Test, +	public void influxDbWithOkHttpClientBuilder() {, +		load(CustomOkHttpClientBuilderConfig.class, "spring.influx.url=http://localhost",, +				"spring.influx.password:password", "spring.influx.user:user");, +		assertThat(this.context.getBeansOfType(InfluxDB.class)).hasSize(1);, +		int readTimeout = getReadTimeoutProperty();, +		assertThat(readTimeout).isEqualTo(30_000);, +	}, +, +	private int getReadTimeoutProperty() {, +		InfluxDB influxDB = this.context.getBean(InfluxDB.class);, +		Retrofit retrofit = (Retrofit) ReflectionTestUtils.getField(influxDB,, +				InfluxDBImpl.class, "retrofit");, +		OkHttpClient callFactory = (OkHttpClient) ReflectionTestUtils.getField(retrofit,, +				Retrofit.class, "callFactory");, +		return callFactory.readTimeoutMillis();, +	}, +, +	private void load(Class<?> clazz, String... environment) {, +		if (clazz != null) {, +			ctx.register(clazz);, +		}, +	private void load(String... environment) {, +		load(null, environment);, +	}, +, +	@Configuration, +	static class CustomOkHttpClientBuilderConfig {, +, +		@Bean, +		public OkHttpClient.Builder builder() {, +			return new OkHttpClient.Builder().readTimeout(30, TimeUnit.SECONDS);, +		}, +]