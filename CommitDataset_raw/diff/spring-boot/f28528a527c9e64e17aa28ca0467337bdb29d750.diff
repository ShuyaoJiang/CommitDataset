[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.data.repository.config.BootstrapMode;, +, +			@Override, +			public BootstrapMode getBootstrapMode() {, +				return AbstractRepositoryConfigurationSourceSupport.this, +						.getBootstrapMode();, +			}, +, +	/**, +	 * The {@link BootstrapMode} for the particular repository support. Defaults to, +	 * {@link BootstrapMode#DEFAULT}., +	 * @return the bootstrap mode, +	 */, +	protected BootstrapMode getBootstrapMode() {, +		return BootstrapMode.DEFAULT;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.data.repository.config.BootstrapMode;, +, +			@Override, +			public BootstrapMode getBootstrapMode() {, +				return AbstractRepositoryConfigurationSourceSupport.this, +						.getBootstrapMode();, +			}, +, +	/**, +	 * The {@link BootstrapMode} for the particular repository support. Defaults to, +	 * {@link BootstrapMode#DEFAULT}., +	 * @return the bootstrap mode, +	 */, +	protected BootstrapMode getBootstrapMode() {, +		return BootstrapMode.DEFAULT;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactoryBuilderCustomizer;, +import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.task.AsyncTaskExecutor;, +@AutoConfigureAfter({ HibernateJpaAutoConfiguration.class,, +		TaskExecutionAutoConfiguration.class }), +	@Bean, +	@Conditional(BootstrapExecutorCondition.class), +	public EntityManagerFactoryBuilderCustomizer entityManagerFactoryBoostrapExecutorCustomizer(, +			ObjectProvider<AsyncTaskExecutor> taskExecutor) {, +		return (builder) -> builder.setBootstrapExecutor(taskExecutor.getIfAvailable());, +	}, +, +	private static final class BootstrapExecutorCondition extends AnyNestedCondition {, +, +		BootstrapExecutorCondition() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "deferred", matchIfMissing = false), +		static class DeferredBootstrapMode {, +, +		}, +, +		@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "bootstrap-mode", havingValue = "lazy", matchIfMissing = false), +		static class LazyBootstrapMode {, +, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, +import org.springframework.data.repository.config.BootstrapMode;, +, +			@Override, +			public BootstrapMode getBootstrapMode() {, +				return AbstractRepositoryConfigurationSourceSupport.this, +						.getBootstrapMode();, +			}, +, +	/**, +	 * The {@link BootstrapMode} for the particular repository support. Defaults to, +	 * {@link BootstrapMode#DEFAULT}., +	 * @return the bootstrap mode, +	 */, +	protected BootstrapMode getBootstrapMode() {, +		return BootstrapMode.DEFAULT;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactoryBuilderCustomizer;, +import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.task.AsyncTaskExecutor;, +@AutoConfigureAfter({ HibernateJpaAutoConfiguration.class,]