[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	/**, +	 * Set whether to always apply the MessageFormat rules, parsing even, +	 * messages without arguments., +	 */, +	private boolean alwaysUseMessageFormat = false;, +, +		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);, +	public boolean isAlwaysUseMessageFormat() {, +		return this.alwaysUseMessageFormat;, +	}, +, +	public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {, +		this.alwaysUseMessageFormat = alwaysUseMessageFormat;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	/**, +	 * Set whether to always apply the MessageFormat rules, parsing even, +	 * messages without arguments., +	 */, +	private boolean alwaysUseMessageFormat = false;, +, +		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);, +	public boolean isAlwaysUseMessageFormat() {, +		return this.alwaysUseMessageFormat;, +	}, +, +	public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {, +		this.alwaysUseMessageFormat = alwaysUseMessageFormat;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +	public void testFormatMessageDefault() throws Exception {, +		load("spring.messages.basename:test/messages");, +		assertThat(this.context.getBean(MessageSourceAutoConfiguration.class), +				.isAlwaysUseMessageFormat()).isFalse();, +	}, +, +	@Test, +	public void testFormatMessageOn() throws Exception {, +		load("spring.messages.basename:test/messages",, +				"spring.messages.always-use-message-format:true");, +		assertThat(this.context.getBean(MessageSourceAutoConfiguration.class), +				.isAlwaysUseMessageFormat()).isTrue();, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	/**, +	 * Set whether to always apply the MessageFormat rules, parsing even, +	 * messages without arguments., +	 */, +	private boolean alwaysUseMessageFormat = false;, +, +		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);, +	public boolean isAlwaysUseMessageFormat() {, +		return this.alwaysUseMessageFormat;, +	}, +, +	public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {, +		this.alwaysUseMessageFormat = alwaysUseMessageFormat;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +	public void testFormatMessageDefault() throws Exception {, +		load("spring.messages.basename:test/messages");, +		assertThat(this.context.getBean(MessageSourceAutoConfiguration.class), +				.isAlwaysUseMessageFormat()).isFalse();, +	}, +, +	@Test, +	public void testFormatMessageOn() throws Exception {, +		load("spring.messages.basename:test/messages",, +				"spring.messages.always-use-message-format:true");, +		assertThat(this.context.getBean(MessageSourceAutoConfiguration.class), +				.isAlwaysUseMessageFormat()).isTrue();, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +    spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.]