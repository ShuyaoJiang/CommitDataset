[+++ b/spring-boot-samples/spring-boot-sample-jetty8/src/main/resources/application.properties, +++ b/spring-boot-samples/spring-boot-sample-jetty8/src/main/resources/application.properties, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +	private static final String CONNECTOR_JETTY_8 = "org.eclipse.jetty.server.nio.SelectChannelConnector";, +, +		server.setConnectors(new Connector[] { createConnector(address, server) });, +	private AbstractConnector createConnector(InetSocketAddress address, Server server) {, +		if (ClassUtils.isPresent(CONNECTOR_JETTY_8, getClass().getClassLoader())) {, +			return new Jetty8ConnectorFactory().createConnector(server, address,, +					this.acceptors, this.selectors);, +		}, +		return new Jetty9ConnectorFactory().createConnector(server, address,, +				this.acceptors, this.selectors);, +	}, +, +	private interface ConnectorFactory {, +, +		AbstractConnector createConnector(Server server, InetSocketAddress address,, +				int acceptors, int selectors);, +, +	}, +, +	private static class Jetty8ConnectorFactory implements ConnectorFactory {, +, +		@Override, +		public AbstractConnector createConnector(Server server, InetSocketAddress address,, +				int acceptors, int selectors) {, +			try {, +				Class<?> connectorClass = ClassUtils.forName(CONNECTOR_JETTY_8,, +						getClass().getClassLoader());, +				AbstractConnector connector = (AbstractConnector) connectorClass, +						.newInstance();, +				ReflectionUtils.findMethod(connectorClass, "setPort", int.class), +						.invoke(connector, address.getPort());, +				ReflectionUtils.findMethod(connectorClass, "setHost", String.class), +						.invoke(connector, address.getHostName());, +				if (acceptors > 0) {, +					ReflectionUtils.findMethod(connectorClass, "setAcceptors", int.class), +							.invoke(connector, acceptors);, +				}, +				if (selectors > 0) {, +					Object selectorManager = ReflectionUtils, +							.findMethod(connectorClass, "getSelectorManager"), +							.invoke(connector);, +					ReflectionUtils.findMethod(selectorManager.getClass(),, +							"setSelectSets", int.class), +							.invoke(selectorManager, selectors);, +				}, +, +				return connector;, +			}, +			catch (Exception ex) {, +				throw new RuntimeException("Failed to configure Jetty 8 connector", ex);, +			}, +		}, +, +	}, +, +	private static class Jetty9ConnectorFactory implements ConnectorFactory {, +, +		@Override, +		public AbstractConnector createConnector(Server server, InetSocketAddress address,, +				int acceptors, int selectors) {, +			ServerConnector connector = new ServerConnector(server, acceptors, selectors);, +			connector.setHost(address.getHostName());, +			connector.setPort(address.getPort());, +			return connector;, +		}, +, +	}, +]