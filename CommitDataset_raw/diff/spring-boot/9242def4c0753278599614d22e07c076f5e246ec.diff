[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.context.ConfigurableApplicationContext;, +	public BeansEndpoint beansEndpoint(, +			ConfigurableApplicationContext applicationContext) {, +		return new BeansEndpoint(applicationContext);, +			this.healthIndicator = new CompositeHealthIndicatorFactory(), +					.createHealthIndicator(, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.context.ConfigurableApplicationContext;, +	public BeansEndpoint beansEndpoint(, +			ConfigurableApplicationContext applicationContext) {, +		return new BeansEndpoint(applicationContext);, +			this.healthIndicator = new CompositeHealthIndicatorFactory(), +					.createHealthIndicator(, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.util.StringUtils;, + * {@link Endpoint} to expose details of an application's bean, grouped by application, + * context., +public class BeansEndpoint {, +	private final ConfigurableApplicationContext context;, +	/**, +	 * Creates a new {@code BeansEndpoint} that will describe the beans in the given, +	 * {@code context} and all of its ancestors., +	 *, +	 * @param context the application context, +	 * @see ConfigurableApplicationContext#getParent(), +	 */, +	public BeansEndpoint(ConfigurableApplicationContext context) {, +		this.context = context;, +	public Map<String, Object> beans() {, +		List<ApplicationContextDescriptor> contexts = new ArrayList<>();, +		ConfigurableApplicationContext current = this.context;, +		while (current != null) {, +			contexts.add(ApplicationContextDescriptor.describing(current));, +			current = getConfigurableParent(current);, +		}, +		return Collections.singletonMap("contexts", contexts);, +	private ConfigurableApplicationContext getConfigurableParent(, +			ConfigurableApplicationContext context) {, +		ApplicationContext parent = context.getParent();, +		if (parent instanceof ConfigurableApplicationContext) {, +			return (ConfigurableApplicationContext) parent;, +		}, +		return null;, +	/**, +	 * A description of an application context, primarily intended for serialization to, +	 * JSON., +	 */, +	static final class ApplicationContextDescriptor {, +, +		private final String id;, +, +		private final String parentId;, +, +		private final Map<String, BeanDescriptor> beans;, +, +		private ApplicationContextDescriptor(String id, String parentId,, +				Map<String, BeanDescriptor> beans) {, +			this.id = id;, +			this.parentId = parentId;, +			this.beans = beans;, +		public String getId() {, +			return this.id;, +		public String getParentId() {, +			return this.parentId;, +, +		public Map<String, BeanDescriptor> getBeans() {, +			return this.beans;, +		}, +, +		private static ApplicationContextDescriptor describing(, +				ConfigurableApplicationContext context) {, +			ApplicationContext parent = context.getParent();, +			return new ApplicationContextDescriptor(context.getId(),, +					parent == null ? null : parent.getId(),, +					describeBeans(context.getBeanFactory()));, +		}, +, +		private static Map<String, BeanDescriptor> describeBeans(, +				ConfigurableListableBeanFactory beanFactory) {, +			Map<String, BeanDescriptor> beans = new HashMap<>();, +			for (String beanName : beanFactory.getBeanDefinitionNames()) {, +				BeanDefinition definition = beanFactory.getBeanDefinition(beanName);, +				if (isBeanEligible(beanName, definition, beanFactory)) {, +					beans.put(beanName, describeBean(beanName, definition, beanFactory));, +				}, +			}, +			return beans;, +		}, +, +		private static BeanDescriptor describeBean(String name, BeanDefinition definition,, +				ConfigurableListableBeanFactory factory) {, +			return new BeanDescriptor(factory.getAliases(name), definition.getScope(),]