[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +				this.mBeanExporter, +						.ifUnique((exporter) -> exporter.addExcludedBean("dataSource"));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +				this.mBeanExporter, +						.ifUnique((exporter) -> exporter.addExcludedBean("dataSource"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +			if (environment != null && !Binder.get(environment), +				return ConditionOutcome.match(message.because("Found base-dn property"));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +				this.mBeanExporter, +						.ifUnique((exporter) -> exporter.addExcludedBean("dataSource"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +			if (environment != null && !Binder.get(environment), +				return ConditionOutcome.match(message.because("Found base-dn property"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +				this.mBeanExporter, +						.ifUnique((exporter) -> exporter.addExcludedBean("dataSource"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +			if (environment != null && !Binder.get(environment), +				return ConditionOutcome.match(message.because("Found base-dn property"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +			.withPropertyValues("spring.datasource.url=" + "jdbc:hsqldb:mem:test-", +					+ UUID.randomUUID()), +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +					// We can't rely on the number of MBeans so we're checking that the, +					// pool and pool, +							.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null), +							.size()).isEqualTo(existingInstances.size() + 2);, +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +					validateHikariMBeansRegistration(, +							ManagementFactory.getPlatformMBeanServer(), poolName, true);, +					HikariDataSource hikariDataSource = context, +							.getBean(javax.sql.DataSource.class), +							.unwrap(HikariDataSource.class);, +				.withPropertyValues(, +						"spring.datasource.type=" + DataSource.class.getName()), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(ConnectionPool.class));, +					assertThat(context.getBean(DataSourceProxy.class).createPool(), +							.getJmxPool()), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +			patterns = new HashSet<>(Arrays.asList(getPathPatternParser().parse("")));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +				this.mBeanExporter, +						.ifUnique((exporter) -> exporter.addExcludedBean("dataSource"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +			if (environment != null && !Binder.get(environment), +				return ConditionOutcome.match(message.because("Found base-dn property"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +			.withPropertyValues("spring.datasource.url=" + "jdbc:hsqldb:mem:test-", +					+ UUID.randomUUID()), +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +					// We can't rely on the number of MBeans so we're checking that the, +					// pool and pool, +							.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null), +							.size()).isEqualTo(existingInstances.size() + 2);, +		this.contextRunner, +				.withPropertyValues(, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +					validateHikariMBeansRegistration(, +							ManagementFactory.getPlatformMBeanServer(), poolName, true);, +					HikariDataSource hikariDataSource = context, +							.getBean(javax.sql.DataSource.class), +							.unwrap(HikariDataSource.class);, +				.withPropertyValues(, +						"spring.datasource.type=" + DataSource.class.getName()), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(ConnectionPool.class));]