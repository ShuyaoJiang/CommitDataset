[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.Collections;, +import java.util.Set;, +import org.gradle.api.artifacts.ModuleDependency;, +import org.gradle.api.artifacts.PublishArtifact;, +import org.gradle.api.attributes.Usage;, +import org.gradle.api.internal.attributes.Usages;, +import org.gradle.api.internal.component.SoftwareComponentInternal;, +import org.gradle.api.internal.component.UsageContext;, +		ArchivePublishArtifact artifact = new ArchivePublishArtifact(bootWar);, +		this.singlePublishedArtifact.addCandidate(artifact);, +		project.getComponents().add(new BootSoftwareComponent(artifact, "bootWeb"));, +		ArchivePublishArtifact artifact = new ArchivePublishArtifact(bootJar);, +		this.singlePublishedArtifact.addCandidate(artifact);, +		project.getComponents().add(new BootSoftwareComponent(artifact, "bootJava"));, +	/**, +	 * {@link SofwareComponent} for a Spring Boot fat jar or war., +	 */, +	private static final class BootSoftwareComponent, +			implements SoftwareComponentInternal {, +, +		private final PublishArtifact artifact;, +, +		private final String name;, +, +		private BootSoftwareComponent(PublishArtifact artifact, String name) {, +			this.artifact = artifact;, +			this.name = name;, +		}, +, +		@Override, +		public String getName() {, +			return this.name;, +		}, +, +		@Override, +		public Set<UsageContext> getUsages() {, +			return Collections.singleton(new BootUsageContext(this.artifact));, +		}, +, +		private static final class BootUsageContext implements UsageContext {, +, +			private static final Usage USAGE = Usages.usage("master");, +, +			private final PublishArtifact artifact;, +, +			private BootUsageContext(PublishArtifact artifact) {, +				this.artifact = artifact;, +			}, +, +			@Override, +			public Usage getUsage() {, +				return USAGE;, +			}, +, +			@Override, +			public Set<PublishArtifact> getArtifacts() {, +				return Collections.singleton(this.artifact);, +			}, +, +			@Override, +			public Set<ModuleDependency> getDependencies() {, +				return Collections.emptySet();, +			}, +, +		}, +, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.Collections;, +import java.util.Set;, +import org.gradle.api.artifacts.ModuleDependency;, +import org.gradle.api.artifacts.PublishArtifact;, +import org.gradle.api.attributes.Usage;, +import org.gradle.api.internal.attributes.Usages;, +import org.gradle.api.internal.component.SoftwareComponentInternal;, +import org.gradle.api.internal.component.UsageContext;, +		ArchivePublishArtifact artifact = new ArchivePublishArtifact(bootWar);, +		this.singlePublishedArtifact.addCandidate(artifact);, +		project.getComponents().add(new BootSoftwareComponent(artifact, "bootWeb"));, +		ArchivePublishArtifact artifact = new ArchivePublishArtifact(bootJar);, +		this.singlePublishedArtifact.addCandidate(artifact);, +		project.getComponents().add(new BootSoftwareComponent(artifact, "bootJava"));, +	/**, +	 * {@link SofwareComponent} for a Spring Boot fat jar or war., +	 */, +	private static final class BootSoftwareComponent, +			implements SoftwareComponentInternal {, +, +		private final PublishArtifact artifact;, +, +		private final String name;, +, +		private BootSoftwareComponent(PublishArtifact artifact, String name) {, +			this.artifact = artifact;, +			this.name = name;, +		}, +, +		@Override]