[+++ b/spring-boot/src/test/java/org/springframework/boot/config/ConfigFileApplicationListenerTests.java, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import org.hamcrest.TypeSafeDiagnosingMatcher;, +import org.springframework.core.env.ConfigurableEnvironment;, +import static org.hamcrest.Matchers.not;, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:", +				+ "classpath:testproperties.properties,", +				+ "classpath:application.properties");, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:", +				+ "classpath:testproperties.properties,", +				+ "classpath:application.properties,", +				+ "classpath:nonexistent.properties");, +		assertThat(this.environment, containsProperySource(location));, +		assertThat(this.environment, containsProperySource("classpath:", +				+ "/application.properties"));, +		assertThat(this.environment, containsProperySource(location));, +		assertThat(this.environment, containsProperySource("file:" + location));, +		assertThat(context.getEnvironment(), containsProperySource("classpath:", +				+ "/specificlocation.properties"));, +		assertThat(context.getEnvironment(), containsProperySource("classpath:", +				+ "/specificlocation.properties"));, +		assertThat(context.getEnvironment().getPropertySources().get("boot.foo"),, +				notNullValue());, +		assertThat(context.getEnvironment(), containsProperySource("classpath:", +				+ "/enableprofile.properties"));, +		assertThat(context.getEnvironment(), not(containsProperySource("classpath:", +				+ "/enableprofile-myprofile.properties")));, +	public void propertySourceAnnotationAndNonActiveProfile() throws Exception {, +		assertThat(property, equalTo("fromapplicationproperties"));, +		assertThat(context.getEnvironment(), not(containsProperySource("classpath:", +				+ "/enableprofile-myprofile.properties")));, +		assertThat(context.getEnvironment(),, +				containsProperySource("classpath:/specificlocation.properties"));, +		assertThat(context.getEnvironment().getPropertySources().get("foo"),, +				notNullValue());, +		assertThat(context.getEnvironment(),, +				containsProperySource("classpath:/specificlocation.properties"));, +		assertThat(context.getEnvironment(), acceptsProfiles("activateprofile"));, +		assertThat(context.getEnvironment(), acceptsProfiles("specific"));, +		assertThat(context.getEnvironment(), acceptsProfiles("morespecific"));, +		assertThat(context.getEnvironment(), acceptsProfiles("yetmorespecific"));, +		assertThat(context.getEnvironment(), not(acceptsProfiles("missing")));, +	private static Matcher<? super ConfigurableEnvironment> containsProperySource(, +			final String sourceName) {, +		return new TypeSafeDiagnosingMatcher<ConfigurableEnvironment>() {, +			@Override, +			public void describeTo(Description description) {, +				description.appendText("environment containing property source "), +						.appendValue(sourceName);, +			}, +, +			@Override, +			protected boolean matchesSafely(ConfigurableEnvironment item,, +					Description mismatchDescription) {, +				mismatchDescription.appendText("Not matched against: ").appendValue(, +						item.getPropertySources());, +				return item.getPropertySources().contains(sourceName);, +			}, +		};, +	}, +, +	private static Matcher<? super ConfigurableEnvironment> acceptsProfiles(, +			final String... profiles) {, +		return new TypeSafeDiagnosingMatcher<ConfigurableEnvironment>() {, +			@Override, +			public void describeTo(Description description) {, +				description.appendText("environment accepting profiles ").appendValue(, +						profiles);, +			}, +, +			@Override, +			protected boolean matchesSafely(ConfigurableEnvironment item,, +					Description mismatchDescription) {, +				mismatchDescription.appendText("Not matched against: ").appendValue(, +						item.getActiveProfiles());, +				return item.acceptsProfiles(profiles);, +			}, +		};, +++ b/spring-boot/src/test/java/org/springframework/boot/config/ConfigFileApplicationListenerTests.java, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import org.hamcrest.TypeSafeDiagnosingMatcher;, +import org.springframework.core.env.ConfigurableEnvironment;, +import static org.hamcrest.Matchers.not;, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:", +				+ "classpath:testproperties.properties,", +				+ "classpath:application.properties");, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:", +				+ "classpath:testproperties.properties,", +				+ "classpath:application.properties,", +				+ "classpath:nonexistent.properties");, +		assertThat(this.environment, containsProperySource(location));, +		assertThat(this.environment, containsProperySource("classpath:", +				+ "/application.properties"));, +		assertThat(this.environment, containsProperySource(location));, +		assertThat(this.environment, containsProperySource("file:" + location));, +		assertThat(context.getEnvironment(), containsProperySource("classpath:", +				+ "/specificlocation.properties"));, +		assertThat(context.getEnvironment(), containsProperySource("classpath:"]