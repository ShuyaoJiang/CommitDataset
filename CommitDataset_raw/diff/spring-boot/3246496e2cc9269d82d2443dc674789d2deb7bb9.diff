[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(, +					DispatcherServletAutoConfiguration.class));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(DispatcherServlet.class)).isNotNull();, +			ServletRegistrationBean<?> registration = context, +		});, +		this.contextRunner.withUserConfiguration(NonServletConfiguration.class), +				.run(context -> {, +					assertThat(context.getBeanNamesForType(ServletRegistrationBean.class)), +							.isEmpty();, +					assertThat(context.getBeanNamesForType(DispatcherServlet.class)), +							.isEmpty();, +				});, +		this.contextRunner.withUserConfiguration(CustomDispatcherServletWrongName.class), +				.run(context -> {, +					ServletRegistrationBean<?> registration = context, +					assertThat(context.getBeanNamesForType(DispatcherServlet.class)), +							.hasSize(2);, +				});, +		this.contextRunner.withUserConfiguration(CustomAutowiredRegistration.class), +				.run(context -> {, +					ServletRegistrationBean<?> registration = context, +					assertThat(context.getBeanNamesForType(DispatcherServlet.class)), +							.hasSize(1);, +				});, +		this.contextRunner.withPropertyValues("server.servlet.path:/spring"), +				.run(context -> {, +					assertThat(context.getBean(DispatcherServlet.class)).isNotNull();, +					ServletRegistrationBean<?> registration = context, +				});, +		this.contextRunner.withUserConfiguration(MultipartConfiguration.class), +				.run(context -> {, +					ServletRegistrationBean<?> registration = context, +				});, +		this.contextRunner.withUserConfiguration(MultipartResolverConfiguration.class), +				.run(context -> {, +					DispatcherServlet dispatcherServlet = context, +					dispatcherServlet.onApplicationEvent(new ContextRefreshedEvent(context));, +				});, +		this.contextRunner.run(context -> {, +			DispatcherServlet bean = context.getBean(DispatcherServlet.class);, +					context.getBean("dispatcherServletRegistration")), +		});, +		this.contextRunner.withPropertyValues(, +				"spring.mvc.throw-exception-if-no-handler-found:true",, +				"spring.mvc.servlet.load-on-startup=5"), +				.run(context -> {, +					DispatcherServlet bean = context.getBean(DispatcherServlet.class);, +							context.getBean("dispatcherServletRegistration")), +				});]