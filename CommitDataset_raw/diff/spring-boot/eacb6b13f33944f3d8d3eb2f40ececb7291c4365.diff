[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +			AnyThrow.throwUnchecked(ex);, +		}, +	}, +, +	private static class AnyThrow {, +, +		static void throwUnchecked(Throwable e) {, +			AnyThrow.throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E) e;, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +			AnyThrow.throwUnchecked(ex);, +		}, +	}, +, +	private static class AnyThrow {, +, +		static void throwUnchecked(Throwable e) {, +			AnyThrow.throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E) e;, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, + * @author Stephane Nicoll, +			AnyThrow.throwUnchecked(ex);, +			return null; // never reached, +	private static class AnyThrow {, +, +		static void throwUnchecked(Throwable e) {, +			AnyThrow.throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E) e;, +		}, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +			AnyThrow.throwUnchecked(ex);, +		}, +	}, +, +	private static class AnyThrow {, +, +		static void throwUnchecked(Throwable e) {, +			AnyThrow.throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E) e;, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, + * @author Stephane Nicoll, +			AnyThrow.throwUnchecked(ex);, +			return null; // never reached, +	private static class AnyThrow {, +, +		static void throwUnchecked(Throwable e) {, +			AnyThrow.throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E) e;, +		}, +	}, +, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunnerTests.java, +import java.io.IOException;, +	@Test, +	public void thrownRuleWorksWithCheckedException() {, +		get().run((context) -> {, +			this.thrown.expect(IOException.class);, +			this.thrown.expectMessage("Expected message");, +			throwCheckedException("Expected message");, +		});, +	}, +, +	private static void throwCheckedException(String message) throws IOException {, +		throw new IOException(message);, +	}, +]