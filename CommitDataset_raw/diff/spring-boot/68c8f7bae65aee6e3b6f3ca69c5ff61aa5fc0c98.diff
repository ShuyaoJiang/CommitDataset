[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Whether HTTP 1.1 and later location headers generated by a call to sendRedirect, +		 * will use relative or absolute redirects., +		 */, +		private Boolean useRelativeRedirects;, +, +		/**, +		public Boolean getUseRelativeRedirects() {, +			return this.useRelativeRedirects;, +		}, +, +		public void setUseRelativeRedirects(Boolean useRelativeRedirects) {, +			this.useRelativeRedirects = useRelativeRedirects;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Whether HTTP 1.1 and later location headers generated by a call to sendRedirect, +		 * will use relative or absolute redirects., +		 */, +		private Boolean useRelativeRedirects;, +, +		/**, +		public Boolean getUseRelativeRedirects() {, +			return this.useRelativeRedirects;, +		}, +, +		public void setUseRelativeRedirects(Boolean useRelativeRedirects) {, +			this.useRelativeRedirects = useRelativeRedirects;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			if (tomcatProperties.getUseRelativeRedirects() != null) {, +				customizeUseRelativeRedirects(factory,, +						tomcatProperties.getUseRelativeRedirects());, +			}, +		private static void customizeUseRelativeRedirects(, +				TomcatServletWebServerFactory factory,, +				final boolean useRelativeRedirects) {, +			factory.addContextCustomizers((context) -> context, +					.setUseRelativeRedirects(useRelativeRedirects));, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Whether HTTP 1.1 and later location headers generated by a call to sendRedirect, +		 * will use relative or absolute redirects., +		 */, +		private Boolean useRelativeRedirects;, +, +		/**, +		public Boolean getUseRelativeRedirects() {, +			return this.useRelativeRedirects;, +		}, +, +		public void setUseRelativeRedirects(Boolean useRelativeRedirects) {, +			this.useRelativeRedirects = useRelativeRedirects;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			if (tomcatProperties.getUseRelativeRedirects() != null) {, +				customizeUseRelativeRedirects(factory,, +						tomcatProperties.getUseRelativeRedirects());, +			}, +		private static void customizeUseRelativeRedirects(, +				TomcatServletWebServerFactory factory,, +				final boolean useRelativeRedirects) {, +			factory.addContextCustomizers((context) -> context, +					.setUseRelativeRedirects(useRelativeRedirects));, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizerTests.java, +	public void useRelativeRedirectsCanBeConfigured() {, +		Map<String, String> map = new HashMap<>();, +		map.put("server.tomcat.use-relative-redirects", "true");, +		bindProperties(map);, +		ServerProperties.Tomcat tomcat = this.properties.getTomcat();, +		assertThat(tomcat.getUseRelativeRedirects()).isTrue();, +		TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();, +		this.customizer.customize(factory);, +		Context context = mock(Context.class);, +		for (TomcatContextCustomizer customizer : factory.getTomcatContextCustomizers()) {, +			customizer.customize(context);, +		}, +		verify(context).setUseRelativeRedirects(true);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Whether HTTP 1.1 and later location headers generated by a call to sendRedirect, +		 * will use relative or absolute redirects., +		 */, +		private Boolean useRelativeRedirects;, +, +		/**, +		public Boolean getUseRelativeRedirects() {, +			return this.useRelativeRedirects;, +		}, +, +		public void setUseRelativeRedirects(Boolean useRelativeRedirects) {, +			this.useRelativeRedirects = useRelativeRedirects;, +		}]