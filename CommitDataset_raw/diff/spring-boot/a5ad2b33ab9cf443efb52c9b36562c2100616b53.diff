[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +import javax.naming.NamingException;, +, +import org.apache.naming.ContextBindings;, +			Context context = findContext();, +			try {, +				ContextBindings.bindClassLoader(context, context.getNamingToken(),, +						getClass().getClassLoader());, +			}, +			catch (NamingException ex) {, +				// Naming is not enabled. Continue, +			}, +		finally {, +			Context context = findContext();, +			ContextBindings.unbindClassLoader(context, context.getNamingToken(),, +					getClass().getClassLoader());, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +import javax.naming.NamingException;, +, +import org.apache.naming.ContextBindings;, +			Context context = findContext();, +			try {, +				ContextBindings.bindClassLoader(context, context.getNamingToken(),, +						getClass().getClassLoader());, +			}, +			catch (NamingException ex) {, +				// Naming is not enabled. Continue, +			}, +		finally {, +			Context context = findContext();, +			ContextBindings.unbindClassLoader(context, context.getNamingToken(),, +					getClass().getClassLoader());, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java, +import javax.naming.InitialContext;, +import javax.naming.NamingException;, +, +	public void jndiLookupsCanBePerformedDuringApplicationContextRefresh(), +			throws NamingException {, +		TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory(, +				0) {, +, +			@Override, +			protected TomcatEmbeddedServletContainer getTomcatEmbeddedServletContainer(, +					Tomcat tomcat) {, +				tomcat.enableNaming();, +				return super.getTomcatEmbeddedServletContainer(tomcat);, +			}, +, +		};, +, +		// Container is created in onRefresh, +, +		// Lookups should now be possible, +		new InitialContext().lookup("java:comp/env");, +, +		// Called in finishRefresh, giving us an opportunity to remove the context binding, +		// and avoid a leak, +, +		// Lookups should no longer be possible, +		this.thrown.expect(NamingException.class);, +		new InitialContext().lookup("java:comp/env");]