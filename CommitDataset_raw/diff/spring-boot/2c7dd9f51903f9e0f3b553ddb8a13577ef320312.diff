[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Pageable;, +		return (resolver) -> {, +			Pageable pageable = this.properties.getPageable();, +			resolver.setFallbackPageable(, +					PageRequest.of(0, pageable.getDefaultPageSize()));, +			resolver.setPageParameterName(pageable.getPageParameter());, +			resolver.setSizeParameterName(pageable.getSizeParameter());, +		return (resolver) -> resolver, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Pageable;, +		return (resolver) -> {, +			Pageable pageable = this.properties.getPageable();, +			resolver.setFallbackPageable(, +					PageRequest.of(0, pageable.getDefaultPageSize()));, +			resolver.setPageParameterName(pageable.getPageParameter());, +			resolver.setSizeParameterName(pageable.getSizeParameter());, +		return (resolver) -> resolver, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Pageable;, +		return (resolver) -> {, +			Pageable pageable = this.properties.getPageable();, +			resolver.setFallbackPageable(, +					PageRequest.of(0, pageable.getDefaultPageSize()));, +			resolver.setPageParameterName(pageable.getPageParameter());, +			resolver.setSizeParameterName(pageable.getSizeParameter());, +		return (resolver) -> resolver, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/package-info.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Pageable;, +		return (resolver) -> {, +			Pageable pageable = this.properties.getPageable();, +			resolver.setFallbackPageable(, +					PageRequest.of(0, pageable.getDefaultPageSize()));, +			resolver.setPageParameterName(pageable.getPageParameter());, +			resolver.setSizeParameterName(pageable.getSizeParameter());, +		return (resolver) -> resolver, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/package-info.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java, +		public NamedParameterJdbcTemplate namedParameterJdbcTemplate(, +				JdbcTemplate jdbcTemplate) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{}")).andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Pageable;, +		return (resolver) -> {, +			Pageable pageable = this.properties.getPageable();, +			resolver.setFallbackPageable(, +					PageRequest.of(0, pageable.getDefaultPageSize()));, +			resolver.setPageParameterName(pageable.getPageParameter());, +			resolver.setSizeParameterName(pageable.getSizeParameter());, +		return (resolver) -> resolver, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/influx/package-info.java, + * Copyright 2012-2017 the original author or authors.]