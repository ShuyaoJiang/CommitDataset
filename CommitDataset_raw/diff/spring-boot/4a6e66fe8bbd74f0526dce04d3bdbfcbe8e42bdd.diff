[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.core.JdkVersion;, + * @author Phillip Webb, +	/**, +	 * Range options., +	 */, +		/**, +		 * Equal to, or newer than the specified {@link JavaVersion}., +		 */, +		EQUAL_OR_NEWER,, +		/**, +		 * Older than the specified {@link JavaVersion}., +		 */, +		OLDER_THAN;, +	 * Java versions., +		/**, +		 * Java 1.6., +		 */, +		SIX(JdkVersion.JAVA_16, "1.6"),, +		/**, +		 * Java 1.7., +		 */, +		SEVEN(JdkVersion.JAVA_17, "1.7"),, +		/**, +		 * Java 1.8., +		 */, +		EIGHT(JdkVersion.JAVA_18, "1.8"),, +, +		/**, +		 * Java 1.9., +		 */, +		NINE(JdkVersion.JAVA_19, "1.9");, +, +		private final int value;, +, +		private final String name;, +, +		private JavaVersion(int value, String name) {, +			this.name = name;, +		}, +, +		/**, +		 * Determines if this version is within the specified range of versions., +		 * @param range the range, +		 * @param version the bounds of the range, +		 * @return if this version is within the specified range, +		 */, +		public boolean isWithin(Range range, JavaVersion version) {, +			Assert.notNull(range, "Range must not be null");, +			Assert.notNull(version, "Version must not be null");, +			switch (range) {, +			case EQUAL_OR_NEWER:, +				return this.value >= version.value;, +			case OLDER_THAN:, +				return this.value < version.value;, +			}, +			throw new IllegalStateException("Unknown range " + range);, +		}, +, +		@Override, +		public String toString() {, +			return this.name;, +		public static JavaVersion getJavaVersion() {, +			int version = JdkVersion.getMajorJavaVersion();, +			for (JavaVersion candidate : JavaVersion.values()) {, +				if (candidate.value == version) {, +					return candidate;, +			return SIX;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.core.JdkVersion;, + * @author Phillip Webb, +	/**, +	 * Range options., +	 */, +		/**, +		 * Equal to, or newer than the specified {@link JavaVersion}., +		 */, +		EQUAL_OR_NEWER,, +		/**, +		 * Older than the specified {@link JavaVersion}., +		 */, +		OLDER_THAN;, +	 * Java versions., +		/**, +		 * Java 1.6., +		 */, +		SIX(JdkVersion.JAVA_16, "1.6"),, +		/**, +		 * Java 1.7., +		 */, +		SEVEN(JdkVersion.JAVA_17, "1.7"),, +		/**, +		 * Java 1.8., +		 */, +		EIGHT(JdkVersion.JAVA_18, "1.8"),, +, +		/**, +		 * Java 1.9., +		 */, +		NINE(JdkVersion.JAVA_19, "1.9");]