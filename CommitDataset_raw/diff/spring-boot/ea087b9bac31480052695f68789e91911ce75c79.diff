[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +@ConfigurationProperties(prefix = "spring.liquibase", ignoreUnknownFields = false), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +@ConfigurationProperties(prefix = "spring.liquibase", ignoreUnknownFields = false), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.xml"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.json"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql"), +		TestPropertyValues.of("spring.liquibase.contexts:test, production"), +		TestPropertyValues.of("spring.liquibase.default-schema:public").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.drop-first:true").applyTo(this.context);, +				.of("spring.liquibase.url:jdbc:hsqldb:mem:liquibase", "spring.liquibase.user:sa"), +		TestPropertyValues.of("spring.liquibase.change-log:classpath:/no-such-changelog.yaml"), +		TestPropertyValues.of("spring.liquibase.labels:test, production").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.parameters.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.rollbackFile:" + file.getAbsolutePath()), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +@ConfigurationProperties(prefix = "spring.liquibase", ignoreUnknownFields = false), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.xml"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.json"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql"), +		TestPropertyValues.of("spring.liquibase.contexts:test, production"), +		TestPropertyValues.of("spring.liquibase.default-schema:public").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.drop-first:true").applyTo(this.context);, +				.of("spring.liquibase.url:jdbc:hsqldb:mem:liquibase", "spring.liquibase.user:sa"), +		TestPropertyValues.of("spring.liquibase.change-log:classpath:/no-such-changelog.yaml"), +		TestPropertyValues.of("spring.liquibase.labels:test, production").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.parameters.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.rollbackFile:" + file.getAbsolutePath()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +				"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "spring.liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpointTests.java, +				.of("spring.liquibase.default-schema=CUSTOMSCHEMA",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +@ConfigurationProperties(prefix = "spring.liquibase", ignoreUnknownFields = false), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.xml"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.json"), +				.of("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql"), +		TestPropertyValues.of("spring.liquibase.contexts:test, production"), +		TestPropertyValues.of("spring.liquibase.default-schema:public").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.drop-first:true").applyTo(this.context);, +				.of("spring.liquibase.url:jdbc:hsqldb:mem:liquibase", "spring.liquibase.user:sa"), +		TestPropertyValues.of("spring.liquibase.change-log:classpath:/no-such-changelog.yaml"), +		TestPropertyValues.of("spring.liquibase.labels:test, production").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.parameters.foo:bar").applyTo(this.context);, +		TestPropertyValues.of("spring.liquibase.rollbackFile:" + file.getAbsolutePath()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +				"spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml",, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path., +	spring.liquibase.check-change-log-location=true # Check the change log location exists., +	spring.liquibase.contexts= # Comma-separated list of runtime contexts to use., +	spring.liquibase.default-schema= # Default database schema., +	spring.liquibase.drop-first=false # Drop the database schema first., +	spring.liquibase.enabled=true # Enable liquibase support., +	spring.liquibase.labels= # Comma-separated list of runtime labels to use., +	spring.liquibase.parameters.*= # Change log parameters.]