[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.context.annotation.ConfigurationCondition;, +import org.springframework.core.env.Environment;, +import org.springframework.core.type.MethodMetadata;, +		BeanFactoryAware, SmartInitializingSingleton {, +	private static final Log logger = LogFactory, +			.getLog(EndpointWebMvcAutoConfiguration.class);, +	private BeanFactory beanFactory;, +, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		this.beanFactory = beanFactory;, +		ManagementServerPort managementPort = ManagementServerPort.DIFFERENT;, +		if (this.applicationContext instanceof WebApplicationContext) {, +			managementPort = ManagementServerPort.get(, +					this.applicationContext.getEnvironment(), this.beanFactory);, +		}, +	@Configuration, +	@Conditional(OnManagementMvcCondition.class), +	@Import(EndpointWebMvcImportSelector.class), +	protected static class EndpointWebMvcConfiguration {, +	}, +, +	private static class OnManagementMvcCondition extends SpringBootCondition, +			implements ConfigurationCondition {, +		@Override, +		public ConfigurationPhase getConfigurationPhase() {, +			return ConfigurationPhase.REGISTER_BEAN;, +			if (!(context.getResourceLoader() instanceof WebApplicationContext)) {, +				return ConditionOutcome.noMatch("Non WebApplicationContext");, +			ManagementServerPort port = ManagementServerPort.get(, +					context.getEnvironment(), context.getBeanFactory());, +			return new ConditionOutcome(port == ManagementServerPort.SAME,, +					"Management context");, +		}, +, +	}, +, +	protected static enum ManagementServerPort {, +, +		DISABLE, SAME, DIFFERENT;, +, +		public static ManagementServerPort get(Environment environment,, +				BeanFactory beanFactory) {, +			Integer serverPort = getPortProperty(environment, "server.");, +			if (serverPort == null, +					&& hasCustomBeanDefinition(beanFactory, ServerProperties.class,, +							ServerPropertiesAutoConfiguration.class)) {, +				ServerProperties bean = beanFactory.getBean(ServerProperties.class);, +				serverPort = bean.getPort();, +			}, +			Integer managementPort = getPortProperty(environment, "management.");, +			if (managementPort == null, +					&& hasCustomBeanDefinition(beanFactory,, +							ManagementServerProperties.class,, +							ManagementServerPropertiesAutoConfiguration.class)) {, +				ManagementServerProperties bean = beanFactory, +						.getBean(ManagementServerProperties.class);, +				managementPort = bean.getPort();, +				return DISABLE;, +			return ((managementPort == null), +					|| (managementPort != 0 && managementPort.equals(serverPort)) ? SAME, +					: DIFFERENT);, +		private static Integer getPortProperty(Environment environment, String prefix) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					prefix);, +			return resolver.getProperty("port", Integer.class);, +		private static <T> boolean hasCustomBeanDefinition(BeanFactory beanFactory,, +				Class<T> type, Class<?> configClass) {, +			if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {, +				return false;, +			return hasCustomBeanDefinition((ConfigurableListableBeanFactory) beanFactory,, +					type, configClass);, +, +		private static <T> boolean hasCustomBeanDefinition(, +				ConfigurableListableBeanFactory beanFactory, Class<T> type,, +				Class<?> configClass) {, +			String[] names = beanFactory.getBeanNamesForType(type, true, false);, +			if (names == null || names.length != 1) {, +				return false;, +			}, +			BeanDefinition definition = beanFactory.getBeanDefinition(names[0]);, +			if (definition instanceof AnnotatedBeanDefinition) {, +				MethodMetadata factoryMethodMetadata = ((AnnotatedBeanDefinition) definition), +						.getFactoryMethodMetadata();, +				if (factoryMethodMetadata != null) {, +					String className = factoryMethodMetadata.getDeclaringClassName();, +					return !configClass.getName().equals(className);, +			return true;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.context.annotation.ConfigurationCondition;, +import org.springframework.core.env.Environment;, +import org.springframework.core.type.MethodMetadata;, +		BeanFactoryAware, SmartInitializingSingleton {]