[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +			context.setFieldNamingStrategy((FieldNamingStrategy) BeanUtils, +					.instantiate(strategyClass));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +			context.setFieldNamingStrategy((FieldNamingStrategy) BeanUtils, +					.instantiate(strategyClass));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		return new String[] { "logback-test.groovy", "logback-test.xml",, +				"logback.groovy", "logback.xml" };, +		context.putProperty("LOG_LEVEL_PATTERN", initializationContext.getEnvironment(), +				.resolvePlaceholders("${logging.pattern.level:${LOG_LEVEL_PATTERN:%5p}}"));, +			throw new IllegalStateException("Could not initialize Logback logging from ", +					+ location, ex);, +			throw new IllegalStateException("Logback configuration error ", +					+ "detected: \n" + errors);, +		return factory.getLogger(StringUtils.isEmpty(name) ? Logger.ROOT_LOGGER_NAME, +				: name);, +		Assert.isInstanceOf(LoggerContext.class, factory, String.format(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +			context.setFieldNamingStrategy((FieldNamingStrategy) BeanUtils, +					.instantiate(strategyClass));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		return new String[] { "logback-test.groovy", "logback-test.xml",, +				"logback.groovy", "logback.xml" };, +		context.putProperty("LOG_LEVEL_PATTERN", initializationContext.getEnvironment(), +				.resolvePlaceholders("${logging.pattern.level:${LOG_LEVEL_PATTERN:%5p}}"));, +			throw new IllegalStateException("Could not initialize Logback logging from ", +					+ location, ex);, +			throw new IllegalStateException("Logback configuration error ", +					+ "detected: \n" + errors);, +		return factory.getLogger(StringUtils.isEmpty(name) ? Logger.ROOT_LOGGER_NAME, +				: name);, +		Assert.isInstanceOf(LoggerContext.class, factory, String.format(, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +]