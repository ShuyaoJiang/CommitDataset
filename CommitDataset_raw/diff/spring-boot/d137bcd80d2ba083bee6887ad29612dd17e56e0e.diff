[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java, +		SpringBootPluginExtension extension = project.getExtensions().getByType(, +		ProjectLibraries libraries = new ProjectLibraries(project);, +		project.getTasks().withType(Jar.class, new RepackageAction(extension, libraries));, +	}, +	private class RepackageAction implements Action<Jar> {, +, +		private final SpringBootPluginExtension extension;, +, +		private final ProjectLibraries libraries;, +, +		public RepackageAction(SpringBootPluginExtension extension,, +				ProjectLibraries libraries) {, +			this.extension = extension;, +			this.libraries = libraries;, +		}, +			// if withJarTask is set, compare tasks and bail out if we didn't match, +					Repackager repackager = new LoggingRepackager(file);, +					repackager.setMainClass(this.extension.getMainClass());, +					if (Repackage.this.mainClass != null) {, +						repackager.setMainClass(Repackage.this.mainClass);, +					}, +					if (this.extension.convertLayout() != null) {, +						repackager.setLayout(this.extension.convertLayout());, +					}, +					repackager.setBackupSource(this.extension.isBackupSource());, +						repackager.repackage(this.libraries);, +	private class LoggingRepackager extends Repackager {, +, +		public LoggingRepackager(File source) {, +			super(source);, +		}, +, +		@Override, +		protected String findMainMethod(java.util.jar.JarFile source) throws IOException {, +			long startTime = System.currentTimeMillis();, +			try {, +				return super.findMainMethod(source);, +			}, +			finally {, +				long duration = System.currentTimeMillis() - startTime;, +				if (duration > FIND_WARNING_TIMEOUT) {, +					getLogger().warn(, +							"Searching for the main-class is taking ", +									+ "some time, consider using setting ", +									+ "'springBoot.mainClass'");, +				}, +			}, +		};, +	}]