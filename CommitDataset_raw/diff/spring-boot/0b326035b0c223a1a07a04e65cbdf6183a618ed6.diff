[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			ExecutableElement setter = members.getPublicSetter(name, returnType);, +			VariableElement field = members.getFields().get(name);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			ExecutableElement setter = members.getPublicSetter(name, returnType);, +			VariableElement field = members.getFields().get(name);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, + * Copyright 2012-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +import javax.lang.model.type.TypeMirror;, +	private final TypeUtils typeUtils;, +, +	private final Map<String, List<ExecutableElement>> publicSetters =, +			new LinkedHashMap<String, List<ExecutableElement>>();, +		this.typeUtils = new TypeUtils(this.env);, +			else if (isSetter(method)) {, +				String propertyName = getAccessorName(name);, +				List<ExecutableElement> matchingSetters = this.publicSetters.get(propertyName);, +				if (matchingSetters == null) {, +					matchingSetters = new ArrayList<ExecutableElement>();, +					this.publicSetters.put(propertyName, matchingSetters);, +				}, +				TypeMirror paramType = method.getParameters().get(0).asType();, +				if (getMatchingSetter(matchingSetters, paramType) == null) {, +					matchingSetters.add(method);, +	}, +, +	private ExecutableElement getMatchingSetter(List<ExecutableElement> candidates, TypeMirror type) {, +		for (ExecutableElement candidate : candidates) {, +			TypeMirror paramType = candidate.getParameters().get(0).asType();, +			if (this.env.getTypeUtils().isSameType(paramType, type)) {, +				return candidate;, +			}, +		}, +		return null;, +	}, +	public ExecutableElement getPublicSetter(String name, TypeMirror type) {, +		List<ExecutableElement> candidates = this.publicSetters.get(name);, +		if (candidates != null) {, +			ExecutableElement matching = getMatchingSetter(candidates, type);, +			if (matching != null) {, +				return matching;, +			}, +			TypeMirror alternative = this.typeUtils.getWrapperOrPrimitiveFor(type);, +			if (alternative != null) {, +				return getMatchingSetter(candidates, alternative);, +			}, +		}, +		return null;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			ExecutableElement setter = members.getPublicSetter(name, returnType);, +			VariableElement field = members.getFields().get(name);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, + * Copyright 2012-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +import javax.lang.model.type.TypeMirror;, +	private final TypeUtils typeUtils;, +, +	private final Map<String, List<ExecutableElement>> publicSetters =, +			new LinkedHashMap<String, List<ExecutableElement>>();, +		this.typeUtils = new TypeUtils(this.env);, +			else if (isSetter(method)) {, +				String propertyName = getAccessorName(name);, +				List<ExecutableElement> matchingSetters = this.publicSetters.get(propertyName);, +				if (matchingSetters == null) {, +					matchingSetters = new ArrayList<ExecutableElement>();, +					this.publicSetters.put(propertyName, matchingSetters);, +				}, +				TypeMirror paramType = method.getParameters().get(0).asType();, +				if (getMatchingSetter(matchingSetters, paramType) == null) {, +					matchingSetters.add(method);, +	}, +, +	private ExecutableElement getMatchingSetter(List<ExecutableElement> candidates, TypeMirror type) {, +		for (ExecutableElement candidate : candidates) {, +			TypeMirror paramType = candidate.getParameters().get(0).asType();, +			if (this.env.getTypeUtils().isSameType(paramType, type)) {, +				return candidate;, +			}, +		}, +		return null;, +	}, +	public ExecutableElement getPublicSetter(String name, TypeMirror type) {, +		List<ExecutableElement> candidates = this.publicSetters.get(name);, +		if (candidates != null) {, +			ExecutableElement matching = getMatchingSetter(candidates, type);, +			if (matching != null) {, +				return matching;, +			}, +			TypeMirror alternative = this.typeUtils.getWrapperOrPrimitiveFor(type);, +			if (alternative != null) {, +				return getMatchingSetter(candidates, alternative);, +			}, +		}, +		return null;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java, + * Copyright 2012-2015 the original author or authors., +	private static final Map<String, TypeKind> WRAPPER_TO_PRIMITIVE;]