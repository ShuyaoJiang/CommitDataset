[+++ b/.gitignore, +interpolated*.xml, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +			// If successful, leave it to run in case it's a server app, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +			// If successful, leave it to run in case it's a server app, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestCommand.java, +import joptsimple.OptionSpec;, +		protected void doOptions() {, +			option("nohup",, +					"Flag to indicate that the JVM should not exit when tests are finished");, +		}, +, +		@Override, +			if (!options.has("nohup")) {, +				System.exit(0); // TODO: non-zero if test fails?, +			}, +++ b/.gitignore, +interpolated*.xml, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +			// If successful, leave it to run in case it's a server app, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/test/TestCommand.java, +import joptsimple.OptionSpec;, +		protected void doOptions() {, +			option("nohup",, +					"Flag to indicate that the JVM should not exit when tests are finished");, +		}, +, +		@Override, +			if (!options.has("nohup")) {, +				System.exit(0); // TODO: non-zero if test fails?, +			}, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +		String[] argsToUse = new String[args.length + 1];, +		System.arraycopy(args, 0, argsToUse, 1, args.length);, +		argsToUse[0] = "--nohup";, +		Future<TestCommand> future = submitCommand(new TestCommand(), argsToUse);]