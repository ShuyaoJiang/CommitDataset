[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, + * To protect sensitive information from being exposed, certain property values are masked, + * if their names end with a set of configurable values (default "password" and "secret")., + * Configure property names by using {@link #setKeysToSanitize(String[])}., +		Map<String, Object> beans = extract(this.context);, +		return beans;, +	}, +, +	@SuppressWarnings("unchecked"), +	private Map<String, Object> extract(ApplicationContext context) {, +, +		Map<String, Object> beans = context, +		if (context.getParent() != null) {, +			beans.put("parent", extract(context.getParent()));, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, + * To protect sensitive information from being exposed, certain property values are masked, + * if their names end with a set of configurable values (default "password" and "secret")., + * Configure property names by using {@link #setKeysToSanitize(String[])}., +		Map<String, Object> beans = extract(this.context);, +		return beans;, +	}, +, +	@SuppressWarnings("unchecked"), +	private Map<String, Object> extract(ApplicationContext context) {, +, +		Map<String, Object> beans = context, +		if (context.getParent() != null) {, +			beans.put("parent", extract(context.getParent()));, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointParentTests.java, +/*, + * Copyright 2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.endpoint;, +, +import java.util.Map;, +, +import org.junit.After;, +import org.junit.Test;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +public class ConfigurationPropertiesReportEndpointParentTests {, +, +	private AnnotationConfigApplicationContext context;, +, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +			if (this.context.getParent() != null) {, +				((ConfigurableApplicationContext) this.context.getParent()).close();, +			}, +		}, +	}, +, +	@Test, +	public void testInvoke() throws Exception {, +		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();, +		parent.register(Parent.class);, +		parent.refresh();, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.setParent(parent);, +		this.context.register(Config.class);, +		this.context.refresh();, +		ConfigurationPropertiesReportEndpoint endpoint = this.context, +				.getBean(ConfigurationPropertiesReportEndpoint.class);, +		Map<String, Object> result = endpoint.invoke();, +		assertTrue(result.containsKey("parent"));, +		assertEquals(3, result.size()); // the endpoint, the test props and the parent, +		// System.err.println(result);, +	}, +, +	@Configuration, +	@EnableConfigurationProperties, +	public static class Parent {, +		@Bean]