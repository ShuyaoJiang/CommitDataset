[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/PathRequest.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.security.reactive;, +, +import org.springframework.boot.autoconfigure.security.StaticResourceLocation;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;, +, +/**, + * Factory that can be used to create a {@link ServerWebExchangeMatcher} for commonly used paths., + *, + * @author Madhura Bhave, + * @since 2.0.0, + */, +public final class PathRequest {, +, +	private PathRequest() {, +	}, +, +	/**, +	 * Returns a {@link StaticResourceRequest} that can be used to create a matcher for, +	 * {@link StaticResourceLocation Locations}., +	 * @return a {@link StaticResourceRequest}, +	 */, +	public static StaticResourceRequest toStaticResources() {, +		return StaticResourceRequest.get();, +	}, +, +}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/PathRequest.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.security.reactive;, +, +import org.springframework.boot.autoconfigure.security.StaticResourceLocation;, +import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;, +, +/**, + * Factory that can be used to create a {@link ServerWebExchangeMatcher} for commonly used paths., + *, + * @author Madhura Bhave, + * @since 2.0.0, + */, +public final class PathRequest {, +, +	private PathRequest() {, +	}, +, +	/**, +	 * Returns a {@link StaticResourceRequest} that can be used to create a matcher for, +	 * {@link StaticResourceLocation Locations}., +	 * @return a {@link StaticResourceRequest}, +	 */, +	public static StaticResourceRequest toStaticResources() {, +		return StaticResourceRequest.get();, +	}, +, +}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/StaticResourceRequest.java, + * Used to create a {@link ServerWebExchangeMatcher} for static resources in, + * commonly used locations. Returned by {@link PathRequest#toStaticResources()}., + * @see PathRequest, +	private static final StaticResourceRequest INSTANCE = new StaticResourceRequest();, +, +	 * StaticResourceRequest.atCommonLocations().excluding(StaticResourceLocation.CSS), +	public StaticResourceServerWebExchange atCommonLocations() {, +		return at(EnumSet.allOf(StaticResourceLocation.class));, +	 * at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT), +	public StaticResourceServerWebExchange at(StaticResourceLocation first,, +		return at(EnumSet.of(first, rest));]