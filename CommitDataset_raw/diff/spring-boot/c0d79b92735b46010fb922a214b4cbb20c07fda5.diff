[+++ b/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/context/EnvironmentPostProcessorExample.java, +		PropertySource<?> propertySource = loadYaml(path);, +	private PropertySource<?> loadYaml(Resource path) {, +			return this.loader.load("custom-resource", path).get(0);, +++ b/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/context/EnvironmentPostProcessorExample.java, +		PropertySource<?> propertySource = loadYaml(path);, +	private PropertySource<?> loadYaml(Resource path) {, +			return this.loader.load("custom-resource", path).get(0);, +++ b/spring-boot-project/spring-boot-properties-migrator/src/test/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporterTests.java, +		List<PropertySource<?>> propertySources = new PropertiesPropertySourceLoader(), +				.load(name, resource);, +		assertThat(propertySources).isNotEmpty();, +		return propertySources.get(0);, +++ b/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/context/EnvironmentPostProcessorExample.java, +		PropertySource<?> propertySource = loadYaml(path);, +	private PropertySource<?> loadYaml(Resource path) {, +			return this.loader.load("custom-resource", path).get(0);, +++ b/spring-boot-project/spring-boot-properties-migrator/src/test/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporterTests.java, +		List<PropertySource<?>> propertySources = new PropertiesPropertySourceLoader(), +				.load(name, resource);, +		assertThat(propertySources).isNotEmpty();, +		return propertySources.get(0);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import java.util.HashMap;, +import java.util.function.BiConsumer;, +import java.util.stream.Collectors;, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.ObjectUtils;, +	private static final Set<String> NO_SEARCH_NAMES = Collections.singleton(null);, +, +		private Map<DocumentsCacheKey, List<Document>> loadDocumentsCache = new HashMap<>();, +, +				load(profile, this::getPositiveProfileFilter,, +						addToLoaded(MutablePropertySources::addLast, false));, +			load(null, this::getNegativeProfileFilter,, +					addToLoaded(MutablePropertySources::addFirst, true));, +		private DocumentFilter getPositiveProfileFilter(Profile profile) {, +			return (Document document) -> {, +				if (profile == null) {, +					return ObjectUtils.isEmpty(document.getProfiles());, +				}, +				return ObjectUtils.containsElement(document.getProfiles(),, +						profile.getName()), +						&& this.environment.acceptsProfiles(document.getProfiles());, +			};, +		}, +, +		private DocumentFilter getNegativeProfileFilter(Profile profile) {, +			return (Document document) -> (profile == null, +					&& !ObjectUtils.isEmpty(document.getProfiles()), +					&& this.environment.acceptsProfiles(document.getProfiles()));, +		}, +, +		private DocumentConsumer addToLoaded(, +				BiConsumer<MutablePropertySources, PropertySource<?>> addMethod,, +				boolean checkForExisting) {, +			return (profile, document) -> {, +				if (checkForExisting) {, +					for (MutablePropertySources merged : this.loaded.values()) {, +						if (merged.contains(document.getPropertySource().getName())) {, +							return;, +						}, +					}, +				}, +				MutablePropertySources merged = this.loaded.computeIfAbsent(profile,, +						(k) -> new MutablePropertySources());, +				addMethod.accept(merged, document.getPropertySource());, +			};, +		}, +, +		private void load(Profile profile, DocumentFilterFactory filterFactory,, +				DocumentConsumer consumer) {, +			getSearchLocations().forEach((location) -> {, +				boolean isFolder = location.endsWith("/");, +				Set<String> names = (isFolder ? getSearchNames() : NO_SEARCH_NAMES);, +				names.forEach(, +						(name) -> load(location, name, profile, filterFactory, consumer));, +			});, +		}, +, +		private void load(String location, String name, Profile profile,, +				DocumentFilterFactory filterFactory, DocumentConsumer consumer) {, +						load(loader, location, profile,, +								filterFactory.getDocumentFilter(profile), consumer);, +				for (String fileExtension : loader.getFileExtensions()) {, +					String prefix = location + name;, +					fileExtension = "." + fileExtension;, +					loadForFileExtension(loader, prefix, fileExtension, profile,, +							filterFactory, consumer);, +		private void loadForFileExtension(PropertySourceLoader loader, String prefix,, +				String fileExtension, Profile profile,, +				DocumentFilterFactory filterFactory, DocumentConsumer consumer) {, +			DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);, +			DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);, +				// Try profile-specific file & profile section in profile file (gh-340), +				String profileSpecificFile = prefix + "-" + profile + fileExtension;, +				load(loader, profileSpecificFile, profile, defaultFilter, consumer);, +				load(loader, profileSpecificFile, profile, profileFilter, consumer);, +						String previouslyLoaded = prefix + "-" + processedProfile]