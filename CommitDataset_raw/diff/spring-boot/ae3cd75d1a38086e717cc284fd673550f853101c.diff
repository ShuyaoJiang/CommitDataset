[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to publish descriptions metadata to Datadog. Turn this off to minimize the, +	 * amount of metadata sent., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to publish descriptions metadata to Datadog. Turn this off to minimize the, +	 * amount of metadata sent., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogPropertiesConfigAdapter.java, + * Copyright 2012-2018 the original author or authors., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to publish descriptions metadata to Datadog. Turn this off to minimize the, +	 * amount of metadata sent., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogPropertiesConfigAdapter.java, + * Copyright 2012-2018 the original author or authors., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to publish descriptions metadata to Datadog. Turn this off to minimize the, +	 * amount of metadata sent., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogPropertiesConfigAdapter.java, + * Copyright 2012-2018 the original author or authors., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxProperties.java, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;, + * @author Stephane Nicoll, +@AutoConfigureAfter({ CacheAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		RestTemplateAutoConfiguration.class }), +		exporters.getIfAvailable(Collections::emptyList).forEach(exporter -> {, +			MeterRegistry childRegistry = exporter.registry();, +				throw new IllegalStateException(, +						"cannot add a CompositeMeterRegistry to itself");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to publish descriptions metadata to Datadog. Turn this off to minimize the, +	 * amount of metadata sent., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogPropertiesConfigAdapter.java, + * Copyright 2012-2018 the original author or authors., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxProperties.java, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxPropertiesConfigAdapter.java, + * Copyright 2012-2018 the original author or authors., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java]