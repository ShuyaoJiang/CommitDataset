[+++ b/spring-boot/pom.xml, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot/pom.xml, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader;, +	private GroovyBeanDefinitionReader groovyReader;, +, +		if (ClassUtils.isPresent("groovy.lang.MetaClass", null)) {, +			this.groovyReader = new GroovyBeanDefinitionReader(this.xmlReader);, +		}, +		if (source.getFilename().endsWith(".groovy")) {, +			if (this.groovyReader == null) {, +				throw new BeanDefinitionStoreException(, +						"Cannot load Groovy beans without Groovy on classpath");, +			}, +			return this.groovyReader.loadBeanDefinitions(source);, +		}, +		Resource[] resources = findResources(resolvedSource);, +	private Resource[] findResources(String source) {, +++ b/spring-boot/pom.xml, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader;, +	private GroovyBeanDefinitionReader groovyReader;, +, +		if (ClassUtils.isPresent("groovy.lang.MetaClass", null)) {, +			this.groovyReader = new GroovyBeanDefinitionReader(this.xmlReader);, +		}, +		if (source.getFilename().endsWith(".groovy")) {, +			if (this.groovyReader == null) {, +				throw new BeanDefinitionStoreException(, +						"Cannot load Groovy beans without Groovy on classpath");, +			}, +			return this.groovyReader.loadBeanDefinitions(source);, +		}, +		Resource[] resources = findResources(resolvedSource);, +	private Resource[] findResources(String source) {, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +	public void loadGroovyResource() throws Exception {, +		ClassPathResource resource = new ClassPathResource("sample-beans.groovy",, +				getClass());, +		BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, resource);, +		int loaded = loader.load();, +		assertThat(loaded, equalTo(1));, +		assertTrue(this.registry.containsBean("myGroovyComponent"));, +, +	}, +, +	@Test, +	public void loadGroovyName() throws Exception {, +		BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry,, +				"classpath:org/springframework/boot/sample-beans.groovy");, +		int loaded = loader.load();, +		assertThat(loaded, equalTo(1));, +		assertTrue(this.registry.containsBean("myGroovyComponent"));, +	}, +, +	@Test, +++ b/spring-boot/pom.xml, +			<groupId>org.codehaus.groovy</groupId>, +			<artifactId>groovy</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader;, +	private GroovyBeanDefinitionReader groovyReader;, +, +		if (ClassUtils.isPresent("groovy.lang.MetaClass", null)) {, +			this.groovyReader = new GroovyBeanDefinitionReader(this.xmlReader);, +		}, +		if (source.getFilename().endsWith(".groovy")) {, +			if (this.groovyReader == null) {, +				throw new BeanDefinitionStoreException(, +						"Cannot load Groovy beans without Groovy on classpath");, +			}, +			return this.groovyReader.loadBeanDefinitions(source);, +		}, +		Resource[] resources = findResources(resolvedSource);, +	private Resource[] findResources(String source) {, +++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java, +	public void loadGroovyResource() throws Exception {, +		ClassPathResource resource = new ClassPathResource("sample-beans.groovy",, +				getClass());]