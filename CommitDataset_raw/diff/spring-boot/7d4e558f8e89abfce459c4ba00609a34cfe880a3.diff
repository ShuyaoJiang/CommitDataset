[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/DefaultReactiveWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yunkun Huang, +		PropertyMapper map = PropertyMapper.get();, +		map.from(this.serverProperties::getPort).whenNonNull().to(factory::setPort);, +		map.from(this.serverProperties::getAddress).whenNonNull().to(factory::setAddress);, +		map.from(this.serverProperties::getSsl).whenNonNull().to(factory::setSsl);, +		map.from(this.serverProperties::getCompression).whenNonNull().to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).whenNonNull().to(factory::setHttp2);, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof TomcatReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +						(TomcatReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof JettyReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> JettyCustomizer.customizeJetty(this.serverProperties, this.environment,, +						(JettyReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof UndertowReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> UndertowCustomizer.customizeUndertow(this.serverProperties, this.environment,, +						(UndertowReactiveWebServerFactory) factory));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/DefaultReactiveWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yunkun Huang, +		PropertyMapper map = PropertyMapper.get();, +		map.from(this.serverProperties::getPort).whenNonNull().to(factory::setPort);, +		map.from(this.serverProperties::getAddress).whenNonNull().to(factory::setAddress);, +		map.from(this.serverProperties::getSsl).whenNonNull().to(factory::setSsl);, +		map.from(this.serverProperties::getCompression).whenNonNull().to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).whenNonNull().to(factory::setHttp2);, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof TomcatReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +						(TomcatReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof JettyReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> JettyCustomizer.customizeJetty(this.serverProperties, this.environment,, +						(JettyReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof UndertowReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> UndertowCustomizer.customizeUndertow(this.serverProperties, this.environment,, +						(UndertowReactiveWebServerFactory) factory));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yunkun Huang, +		PropertyMapper map = PropertyMapper.get();, +		map.from(this.serverProperties::getPort).whenNonNull().to(factory::setPort);, +		map.from(this.serverProperties::getAddress).whenNonNull().to(factory::setAddress);, +		map.from(this.serverProperties.getServlet()::getContextPath).whenNonNull().to(factory::setContextPath);, +		map.from(this.serverProperties::getDisplayName).whenNonNull().to(factory::setDisplayName);, +		map.from(this.serverProperties.getServlet()::getSession).to(factory::setSession);, +		map.from(this.serverProperties::getSsl).whenNonNull().to(factory::setSsl);, +		map.from(this.serverProperties::getServlet).whenNonNull().as(ServerProperties.Servlet::getJsp).to(factory::setJsp);, +		map.from(this.serverProperties::getCompression).whenNonNull().to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).whenNonNull().to(factory::setHttp2);, +		map.from(this.serverProperties::getServerHeader).to(factory::setServerHeader);, +		map.from(() -> factory).when(configurableServletWebServerFactory -> factory instanceof TomcatServletWebServerFactory), +				.to(configurableServletWebServerFactory -> {, +					TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment, tomcatFactory);, +					TomcatServletCustomizer.customizeTomcat(this.serverProperties, this.environment, tomcatFactory);, +				});, +		map.from(() -> factory).when(configurableServletWebServerFactory -> factory instanceof JettyServletWebServerFactory), +				.to(configurableServletWebServerFactory -> JettyCustomizer.customizeJetty(this.serverProperties, this.environment,, +						(JettyServletWebServerFactory) factory));, +		map.from(() -> factory).when(configurableServletWebServerFactory -> factory instanceof UndertowServletWebServerFactory), +				.to(configurableServletWebServerFactory -> UndertowCustomizer.customizeUndertow(this.serverProperties, this.environment,, +						(UndertowServletWebServerFactory) factory));, +		map.from(this.serverProperties.getServlet()::getContextParameters).to(factory::setInitParameters);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/DefaultReactiveWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yunkun Huang, +		PropertyMapper map = PropertyMapper.get();, +		map.from(this.serverProperties::getPort).whenNonNull().to(factory::setPort);, +		map.from(this.serverProperties::getAddress).whenNonNull().to(factory::setAddress);, +		map.from(this.serverProperties::getSsl).whenNonNull().to(factory::setSsl);, +		map.from(this.serverProperties::getCompression).whenNonNull().to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).whenNonNull().to(factory::setHttp2);, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof TomcatReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +						(TomcatReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof JettyReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> JettyCustomizer.customizeJetty(this.serverProperties, this.environment,, +						(JettyReactiveWebServerFactory) factory));, +		map.from(() -> factory).when(configurableReactiveWebServerFactory -> factory instanceof UndertowReactiveWebServerFactory), +				.to(configurableReactiveWebServerFactory -> UndertowCustomizer.customizeUndertow(this.serverProperties, this.environment,, +						(UndertowReactiveWebServerFactory) factory));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yunkun Huang, +		PropertyMapper map = PropertyMapper.get();, +		map.from(this.serverProperties::getPort).whenNonNull().to(factory::setPort);, +		map.from(this.serverProperties::getAddress).whenNonNull().to(factory::setAddress);, +		map.from(this.serverProperties.getServlet()::getContextPath).whenNonNull().to(factory::setContextPath);, +		map.from(this.serverProperties::getDisplayName).whenNonNull().to(factory::setDisplayName);, +		map.from(this.serverProperties.getServlet()::getSession).to(factory::setSession);, +		map.from(this.serverProperties::getSsl).whenNonNull().to(factory::setSsl);, +		map.from(this.serverProperties::getServlet).whenNonNull().as(ServerProperties.Servlet::getJsp).to(factory::setJsp);, +		map.from(this.serverProperties::getCompression).whenNonNull().to(factory::setCompression);, +		map.from(this.serverProperties::getHttp2).whenNonNull().to(factory::setHttp2);, +		map.from(this.serverProperties::getServerHeader).to(factory::setServerHeader);, +		map.from(() -> factory).when(configurableServletWebServerFactory -> factory instanceof TomcatServletWebServerFactory), +				.to(configurableServletWebServerFactory -> {, +					TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment, tomcatFactory);, +					TomcatServletCustomizer.customizeTomcat(this.serverProperties, this.environment, tomcatFactory);, +				});, +		map.from(() -> factory).when(configurableServletWebServerFactory -> factory instanceof JettyServletWebServerFactory)]