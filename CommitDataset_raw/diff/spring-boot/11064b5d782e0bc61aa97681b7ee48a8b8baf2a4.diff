[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzer.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.TreeSet;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +import org.springframework.core.convert.ConversionFailedException;, +				String.format("%s:%n", cause.getMessage()));, +		StringBuilder message = new StringBuilder(, +				"Update your application's configuration");, +		Collection<String> validValues = findValidValues(cause);, +		if (!validValues.isEmpty()) {, +			message.append(String.format(". The following values are valid:%n"));, +			validValues, +					.forEach((value) -> message.append(String.format("%n    %s", value)));, +		}, +		return new FailureAnalysis(description.toString(), message.toString(), cause);, +	}, +, +	private Collection<String> findValidValues(BindException ex) {, +		ConversionFailedException conversionFailure = findCause(ex,, +				ConversionFailedException.class);, +		if (conversionFailure != null) {, +			Object[] enumConstants = conversionFailure.getTargetType().getType(), +					.getEnumConstants();, +			if (enumConstants != null) {, +				return Stream.of(enumConstants).map(Object::toString), +						.collect(Collectors.toCollection(TreeSet::new));, +			}, +		}, +		return Collections.emptySet();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzer.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.TreeSet;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +import org.springframework.core.convert.ConversionFailedException;, +				String.format("%s:%n", cause.getMessage()));, +		StringBuilder message = new StringBuilder(, +				"Update your application's configuration");, +		Collection<String> validValues = findValidValues(cause);, +		if (!validValues.isEmpty()) {, +			message.append(String.format(". The following values are valid:%n"));, +			validValues, +					.forEach((value) -> message.append(String.format("%n    %s", value)));, +		}, +		return new FailureAnalysis(description.toString(), message.toString(), cause);, +	}, +, +	private Collection<String> findValidValues(BindException ex) {, +		ConversionFailedException conversionFailure = findCause(ex,, +				ConversionFailedException.class);, +		if (conversionFailure != null) {, +			Object[] enumConstants = conversionFailure.getTargetType().getType(), +					.getEnumConstants();, +			if (enumConstants != null) {, +				return Stream.of(enumConstants).map(Object::toString), +						.collect(Collectors.toCollection(TreeSet::new));, +			}, +		}, +		return Collections.emptySet();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzerTests.java, +import java.util.Set;, +	@Test, +	public void bindExceptionForUnknownValueInEnumListsValidValuesInAction() {, +		FailureAnalysis analysis = performAnalysis(EnumFailureConfiguration.class,, +				"test.foo.fruit=apple,strawberry");, +		for (Fruit fruit : Fruit.values()) {, +			assertThat(analysis.getAction()).contains(fruit.name());, +		}, +	}, +, +	@EnableConfigurationProperties(EnumFailureProperties.class), +	static class EnumFailureConfiguration {, +, +	}, +, +	@ConfigurationProperties("test.foo"), +	static class EnumFailureProperties {, +, +		private Set<Fruit> fruit;, +, +		public Set<Fruit> getFruit() {, +			return this.fruit;, +		}, +, +		public void setFruit(Set<Fruit> fruit) {, +			this.fruit = fruit;, +		}, +, +	}, +, +	enum Fruit {, +, +		APPLE, BANANA, ORANGE;, +, +	}]