[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +			Integer timeout = this.serverProperties.getSession().getTimeout();, +			if (timeout != null) {, +				this.sessionRepository.setDefaultMaxInactiveInterval(timeout);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +			Integer timeout = this.serverProperties.getSession().getTimeout();, +			if (timeout != null) {, +				this.sessionRepository.setDefaultMaxInactiveInterval(timeout);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import java.util.Set;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletException;, +import javax.servlet.SessionCookieConfig;, +import javax.servlet.SessionTrackingMode;, +import org.springframework.boot.autoconfigure.web.ServerProperties.Session.Cookie;, +import org.springframework.boot.context.embedded.ServletContextInitializer;, +	private Session session = new Session();, +, +	/**, +	 * Set the session timeout, +	 * @return the session timeout, +	 * @deprecated since 1.3.0 in favor of {@code session.timeout}., +	 */, +	@Deprecated, +		return this.session.getTimeout();, +	/**, +	 * Get the session timeout, +	 * @param sessionTimeout the session timeout, +	 * @deprecated since 1.3.0 in favor of {@code session.timeout}., +	 */, +	@Deprecated, +		this.session.setTimeout(sessionTimeout);, +	}, +, +	public Session getSession() {, +		return this.session;, +		if (getSession().getTimeout() != null) {, +			container.setSessionTimeout(getSession().getTimeout());, +		container.addInitializers(new SessionConfiguringInitializer(this.session));, +	public static class Session {, +, +		/**, +		 * Session timeout in seconds., +		 */, +		private Integer timeout;, +, +		/**, +		 * Session tracking modes (one or more of the following: "cookie", "url", "ssl"), +		 */, +		private Set<SessionTrackingMode> trackingModes;, +, +		private Cookie cookie = new Cookie();, +, +		public Cookie getCookie() {, +			return this.cookie;, +		}, +, +		public Integer getTimeout() {, +			return this.timeout;, +		}, +, +		public void setTimeout(Integer sessionTimeout) {, +			this.timeout = sessionTimeout;, +		}, +, +		public Set<SessionTrackingMode> getTrackingModes() {, +			return this.trackingModes;, +		}, +, +		public void setTrackingModes(Set<SessionTrackingMode> trackingModes) {, +			this.trackingModes = trackingModes;, +		}, +, +		public static class Cookie {, +, +			/**, +			 * Session cookie name., +			 */, +			private String name;, +, +			/**, +			 * Domain for the session cookie., +			 */, +			private String domain;, +, +			/**, +			 * Path of the session cookie., +			 */, +			private String path;, +, +			/**, +			 * Comment for the session cookie., +			 */, +			private String comment;, +, +			/**, +			 * "HttpOnly" flag for the session cookie., +			 */, +			private Boolean httpOnly;, +]