[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +To build a war file that is both executable and deployable into an external container you, +need to mark the embedded container dependencies as ``provided'', e.g:, +, +named "providedRuntime", e.g:, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +To build a war file that is both executable and deployable into an external container you, +need to mark the embedded container dependencies as ``provided'', e.g:, +, +named "providedRuntime", e.g:, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +A really useful thing to do in is to autowire the `EmbeddedWebApplicationContext` into a, +test case and use it to discover the port that the app is running on. In that way you can, +use a test profile that chooses a random port (`server.port=0`) and make your test suite, +independent of its environment. Example:, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +To build a war file that is both executable and deployable into an external container you, +need to mark the embedded container dependencies as ``provided'', e.g:, +, +named "providedRuntime", e.g:, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +A really useful thing to do in is to autowire the `EmbeddedWebApplicationContext` into a, +test case and use it to discover the port that the app is running on. In that way you can, +use a test profile that chooses a random port (`server.port=0`) and make your test suite, +independent of its environment. Example:, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: The context loader guesses whether you want to test a web application or not (e.g., +with `MockMVC`) by looking for the `@WebAppConfiguration` annotation.  (`MockMVC` and, +If you want a web application to start up and listen on its normal port, so you can test, +it with HTTP (e.g. using `RestTemplate`), annotate your test class (or one of its, +superclasses) with `@IntegrationTest`. This can be very useful because it means you can, +test the full stack of your application, but also inject its components into the test, +class and use them to assert the internal state of the application after an HTTP, +interaction. For Example:, +`RestTemplates` is a static convenience factory for instances of `RestTemplate` that are, +useful in integration tests.  You can get a vanilla template or one that sends Basic HTTP, +authentication (with a username and password). And in either case the template will behave, +in a friendly way for testing, not following redirects (so you can assert the response, +location), ignoring cookies (so the template is stateless), and not throwing exceptions, +on server-side errors. It is recommended, but not mandatory, to use Apache HTTP Client, +(version 4.3.2 or better), and if you have that on your classpath the `RestTemplates` will, +respond by configuring the client appropriately., +]