[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String configPrefix;, +, +	public CacheConfigFileCondition(String name, String configPrefix,, +			String... resourceLocations) {, +		this.configPrefix = configPrefix;, +				context.getEnvironment(), this.configPrefix);, +			return ConditionOutcome.match("A '" + this.configPrefix + ".config' " +, +					"property is specified");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String configPrefix;, +, +	public CacheConfigFileCondition(String name, String configPrefix,, +			String... resourceLocations) {, +		this.configPrefix = configPrefix;, +				context.getEnvironment(), this.configPrefix);, +			return ConditionOutcome.match("A '" + this.configPrefix + ".config' " +, +					"property is specified");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +	private final EhCache ehcache = new EhCache();, +, +	private final Hazelcast hazelcast = new Hazelcast();, +, +	private final Infinispan infinispan = new Infinispan();, +, +	public EhCache getEhcache() {, +		return this.ehcache;, +	}, +, +	public Hazelcast getHazelcast() {, +		return this.hazelcast;, +	}, +, +	public Infinispan getInfinispan() {, +		return this.infinispan;, +	}, +, +	public Resource resolveConfigLocation(Resource config) {, +		if (config != null) {, +			Assert.isTrue(config.exists(), "Cache configuration does not " +, +					"exist '" + config.getDescription() + "'");, +			return config;, +	 * EhCache specific cache properties., +	 */, +	public static class EhCache {, +, +		/**, +		 * The location of the configuration file to use to initialize EhCache., +		 */, +		private Resource config;, +, +		public Resource getConfig() {, +			return config;, +		}, +, +		public void setConfig(Resource config) {, +			this.config = config;, +		}, +	}, +, +	/**, +	 * Hazelcast specific cache properties., +	 */, +	public static class Hazelcast {, +, +		/**, +		 * The location of the configuration file to use to initialize Hazelcast., +		 */, +		private Resource config;, +, +		public Resource getConfig() {, +			return config;, +		}, +, +		public void setConfig(Resource config) {, +			this.config = config;, +		}, +, +	}, +, +	/**, +	 * Infinispan specific cache properties., +	 */, +	public static class Infinispan {, +, +		/**, +		 * The location of the configuration file to use to initialize Infinispan., +		 */, +		private Resource config;, +, +		public Resource getConfig() {, +			return config;, +		}, +, +		public void setConfig(Resource config) {, +			this.config = config;, +		}, +, +	}, +]