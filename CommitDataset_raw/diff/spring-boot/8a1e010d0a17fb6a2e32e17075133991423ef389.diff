[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +			Resource templatePathResource = null;, +			List<Resource> resources = new ArrayList<Resource>();, +			for (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {, +				Resource resource = this.resourceLoader.getResource(templateLoaderPath);, +				resources.add(resource);, +				if (resource.exists()) {, +					templatePathResource = resource;, +					break;, +				}, +			}, +			Assert.notNull(templatePathResource, "Cannot find template location(s): ", +					+ resources + " (please add some templates, ", +			factory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +			Resource templatePathResource = null;, +			List<Resource> resources = new ArrayList<Resource>();, +			for (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {, +				Resource resource = this.resourceLoader.getResource(templateLoaderPath);, +				resources.add(resource);, +				if (resource.exists()) {, +					templatePathResource = resource;, +					break;, +				}, +			}, +			Assert.notNull(templatePathResource, "Cannot find template location(s): ", +					+ resources + " (please add some templates, ", +			factory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerProperties.java, +	private String[] templateLoaderPath = new String[] { DEFAULT_TEMPLATE_LOADER_PATH };, +	public String[] getTemplateLoaderPath() {, +	public void setTemplateLoaderPath(String... templateLoaderPaths) {, +		this.templateLoaderPath = templateLoaderPaths;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +			Resource templatePathResource = null;, +			List<Resource> resources = new ArrayList<Resource>();, +			for (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {, +				Resource resource = this.resourceLoader.getResource(templateLoaderPath);, +				resources.add(resource);, +				if (resource.exists()) {, +					templatePathResource = resource;, +					break;, +				}, +			}, +			Assert.notNull(templatePathResource, "Cannot find template location(s): ", +					+ resources + " (please add some templates, ", +			factory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerProperties.java, +	private String[] templateLoaderPath = new String[] { DEFAULT_TEMPLATE_LOADER_PATH };, +	public String[] getTemplateLoaderPath() {, +	public void setTemplateLoaderPath(String... templateLoaderPaths) {, +		this.templateLoaderPath = templateLoaderPaths;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +				+ "classpath:/does-not-exist/,classpath:/also-does-not-exist");, +	public void nonExistentLocationAndEmptyLocation() {, +		new File("target/test-classes/templates/empty-directory").mkdir();, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/,classpath:/templates/empty-directory/");, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +			Resource templatePathResource = null;, +			List<Resource> resources = new ArrayList<Resource>();, +			for (String templateLoaderPath : this.properties.getTemplateLoaderPath()) {, +				Resource resource = this.resourceLoader.getResource(templateLoaderPath);, +				resources.add(resource);, +				if (resource.exists()) {, +					templatePathResource = resource;, +					break;, +				}, +			}, +			Assert.notNull(templatePathResource, "Cannot find template location(s): ", +					+ resources + " (please add some templates, ", +			factory.setTemplateLoaderPaths(this.properties.getTemplateLoaderPath());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerProperties.java, +	private String[] templateLoaderPath = new String[] { DEFAULT_TEMPLATE_LOADER_PATH };, +	public String[] getTemplateLoaderPath() {, +	public void setTemplateLoaderPath(String... templateLoaderPaths) {, +		this.templateLoaderPath = templateLoaderPaths;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +				+ "classpath:/does-not-exist/,classpath:/also-does-not-exist");, +	public void nonExistentLocationAndEmptyLocation() {, +		new File("target/test-classes/templates/empty-directory").mkdir();, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/,classpath:/templates/empty-directory/");, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.freemarker.templateLoaderPath=classpath:/templates/ # comma-separated list]