[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;, +import org.springframework.web.servlet.support.RequestDataValueProcessor;, +	// Pull in @EnableWebMvcSecurity if Spring MVC is available and no-one defined a, +	// RequestDataValueProcessor, +	@ConditionalOnClass(RequestDataValueProcessor.class), +	@ConditionalOnMissingBean(RequestDataValueProcessor.class), +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	protected static class WebMvcSecurityConfigurationConditions {, +		@Configuration, +		@EnableWebMvcSecurity, +		protected static class DefaultWebMvcSecurityConfiguration {, +		}, +	}, +, +	// Pull in a plain @EnableWebSecurity if Spring MVC is not available, +	@ConditionalOnMissingBean(WebMvcSecurityConfigurationConditions.class), +	@ConditionalOnMissingClass(name = "org.springframework.web.servlet.support.RequestDataValueProcessor"), +	protected static class DefaultWebSecurityConfiguration {, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;, +import org.springframework.web.servlet.support.RequestDataValueProcessor;, +	// Pull in @EnableWebMvcSecurity if Spring MVC is available and no-one defined a, +	// RequestDataValueProcessor, +	@ConditionalOnClass(RequestDataValueProcessor.class), +	@ConditionalOnMissingBean(RequestDataValueProcessor.class), +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	protected static class WebMvcSecurityConfigurationConditions {, +		@Configuration, +		@EnableWebMvcSecurity, +		protected static class DefaultWebMvcSecurityConfiguration {, +		}, +	}, +, +	// Pull in a plain @EnableWebSecurity if Spring MVC is not available, +	@ConditionalOnMissingBean(WebMvcSecurityConfigurationConditions.class), +	@ConditionalOnMissingClass(name = "org.springframework.web.servlet.support.RequestDataValueProcessor"), +	protected static class DefaultWebSecurityConfiguration {, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +++ b/spring-boot-samples/pom.xml, +		<module>spring-boot-sample-servlet</module>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;, +import org.springframework.web.servlet.support.RequestDataValueProcessor;, +	// Pull in @EnableWebMvcSecurity if Spring MVC is available and no-one defined a, +	// RequestDataValueProcessor, +	@ConditionalOnClass(RequestDataValueProcessor.class), +	@ConditionalOnMissingBean(RequestDataValueProcessor.class), +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	protected static class WebMvcSecurityConfigurationConditions {, +		@Configuration, +		@EnableWebMvcSecurity, +		protected static class DefaultWebMvcSecurityConfiguration {, +		}, +	}, +, +	// Pull in a plain @EnableWebSecurity if Spring MVC is not available, +	@ConditionalOnMissingBean(WebMvcSecurityConfigurationConditions.class), +	@ConditionalOnMissingClass(name = "org.springframework.web.servlet.support.RequestDataValueProcessor"), +	protected static class DefaultWebSecurityConfiguration {, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +++ b/spring-boot-samples/pom.xml, +		<module>spring-boot-sample-servlet</module>, +++ b/spring-boot-samples/spring-boot-sample-servlet/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +	<modelVersion>4.0.0</modelVersion>, +	<parent>, +		<!-- Your own application should inherit from spring-boot-starter-parent -->, +		<groupId>org.springframework.boot</groupId>, +		<artifactId>spring-boot-samples</artifactId>, +		<version>0.5.0.BUILD-SNAPSHOT</version>, +	</parent>, +	<artifactId>spring-boot-sample-servlet</artifactId>, +	<packaging>war</packaging>, +	<properties>, +		<main.basedir>${basedir}/../..</main.basedir>, +	</properties>, +	<dependencies>, +		<dependency>, +			<groupId>${project.groupId}</groupId>, +			<artifactId>spring-boot-starter</artifactId>, +		</dependency>]