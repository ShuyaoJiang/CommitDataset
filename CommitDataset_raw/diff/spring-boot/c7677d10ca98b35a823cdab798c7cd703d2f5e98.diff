[+++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +for you! Here we answer the basic "`what?`", "`how?`" and "`why?`" questions. You'll, +can ignore the "`jar will be empty - no content was marked for inclusion!`" warning for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +for you! Here we answer the basic "`what?`", "`how?`" and "`why?`" questions. You'll, +can ignore the "`jar will be empty - no content was marked for inclusion!`" warning for, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +possible to correlate with other instances of the same application).  The "`key`" is used, +to keep a global index of all metric names, so it should be unique "`globally`", whatever, +that means for your system (e.g. two instances of the same system could share a Redis cache, +if they have distinct keys)., +NOTE: It's important to set both the `key` and the `prefix`. The key is used for all, +you normally have a read-only "`master`" repository that has a short, but identifiable,, +prefix (like "`metrics.mysystem`"), and many write-only repositories with prefixes that, +efficient to read all the keys from a "`master`" repository like that, but inefficient to, +TIP: The example above uses `MetricExportProperties` to inject and extract the key and, +prefix. This is provided to you as a convenience by Spring Boot, configured with sensible, +defaults. There is nothing to stop you using your own values as long as they follow the, +recommendations., +`@ExportMetricWriter` metrics are exported to http://opentsdb.net/[Open TSDB] for, +to the Open TSDB "`/put`" endpoint, e.g. `http://localhost:4242/api/put`). It also has a, +Open TSDB metric name, and adds the tags "`domain`" (with value, +"`org.springframework.metrics`") and "`process`" (with the value equal to the object hash, +of the naming strategy). Thus, after running the application and generating some metrics, +tool that understands JMX (e.g. JConsole or JVisualVM)., +, +Example:, +This is very useful if multiple application instances are feeding to a central (e.g., +Redis) repository and you want to display the results. Particularly recommended in, +conjunction with a `MetricReaderPublicMetrics` for hooking up to the results to the, +"`/metrics`" endpoint., +, +Example:, +NOTE: The example above uses `MetricExportProperties` to inject and extract the key and, +prefix. This is provided to you as a convenience by Spring Boot, and the defaults will be, +sensible. They are set up in `MetricExportAutoConfiguration`., +NOTE: The `MetricReaders` above are not `@Beans` and are not marked as, +`@ExportMetricReader` because they are just collecting and analyzing data from other, +repositories, and don't want to export their values., +[[production-ready-code-hale-metrics]], +"`special`" Dropwizard metrics by prefixing your metric names with the appropriate type, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +for you! Here we answer the basic "`what?`", "`how?`" and "`why?`" questions. You'll, +can ignore the "`jar will be empty - no content was marked for inclusion!`" warning for, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +possible to correlate with other instances of the same application).  The "`key`" is used, +to keep a global index of all metric names, so it should be unique "`globally`", whatever, +that means for your system (e.g. two instances of the same system could share a Redis cache, +if they have distinct keys)., +NOTE: It's important to set both the `key` and the `prefix`. The key is used for all, +you normally have a read-only "`master`" repository that has a short, but identifiable,, +prefix (like "`metrics.mysystem`"), and many write-only repositories with prefixes that, +efficient to read all the keys from a "`master`" repository like that, but inefficient to, +TIP: The example above uses `MetricExportProperties` to inject and extract the key and, +prefix. This is provided to you as a convenience by Spring Boot, configured with sensible, +defaults. There is nothing to stop you using your own values as long as they follow the, +recommendations., +`@ExportMetricWriter` metrics are exported to http://opentsdb.net/[Open TSDB] for, +to the Open TSDB "`/put`" endpoint, e.g. `http://localhost:4242/api/put`). It also has a, +Open TSDB metric name, and adds the tags "`domain`" (with value, +"`org.springframework.metrics`") and "`process`" (with the value equal to the object hash, +of the naming strategy). Thus, after running the application and generating some metrics, +tool that understands JMX (e.g. JConsole or JVisualVM)., +, +Example:, +This is very useful if multiple application instances are feeding to a central (e.g., +Redis) repository and you want to display the results. Particularly recommended in, +conjunction with a `MetricReaderPublicMetrics` for hooking up to the results to the, +"`/metrics`" endpoint., +, +Example:, +NOTE: The example above uses `MetricExportProperties` to inject and extract the key and, +prefix. This is provided to you as a convenience by Spring Boot, and the defaults will be, +sensible. They are set up in `MetricExportAutoConfiguration`., +NOTE: The `MetricReaders` above are not `@Beans` and are not marked as, +`@ExportMetricReader` because they are just collecting and analyzing data from other, +repositories, and don't want to export their values., +[[production-ready-code-hale-metrics]], +"`special`" Dropwizard metrics by prefixing your metric names with the appropriate type, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-security-oauth2]], +auto-configuration to make it easy to set up Authorization or Resource Server., +[[boot-features-security-oauth2-authorization-server]], +To create an Authorization Server and grant access tokens you need to use, +`@EnableAuthorizationServer` and provide `spring.oauth2.client.client-id` and, +`spring.oauth2.client.client-secret]` properties. The client will be registered for you, +in an in-memory repository., +Having done that you will be able to use the client credentials to create an access token,, +for example:, +, +[indent=0], +The basic auth credentials for the `/token` endpoint are the `client-id` and, +`client-secret`. The user credentials are the normal Spring Security user details (which, +default in Spring Boot to "`user`" and a random password)., +To switch off the auto-configuration and configure the Authorization Server features, +yourself just add a `@Bean` of type `AuthorizationServerConfigurer`., +[[boot-features-security-oauth2-resource-server]], +To use the access token you need a Resource Server (which can be the same as the, +Authorization Server). Creating a Resource Server is easy, just add, +`@EnableResourceServer` and provide some configuration to allow the server to decode]