[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import io.undertow.Undertow.Builder;, +import io.undertow.UndertowOptions;, +, +import org.eclipse.jetty.server.ConnectionFactory;, +import org.eclipse.jetty.server.Handler;, +import org.eclipse.jetty.server.HttpConfiguration;, +import org.eclipse.jetty.server.Server;, +import org.eclipse.jetty.server.handler.ContextHandler;, +import org.eclipse.jetty.server.handler.HandlerCollection;, +import org.eclipse.jetty.server.handler.HandlerWrapper;, +import org.springframework.boot.context.embedded.jetty.JettyServerCustomizer;, +import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;, +import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;, + * @author Venil Noronha, +	/**, +	 * Maximum size in bytes of the HTTP message header., +	 */, +	private int maxHttpHeaderSize = 0; // bytes, +, +	/**, +	 * Maximum size in bytes of the HTTP post content., +	 */, +	private int maxHttpPostSize = 0; // bytes, +, +	public int getMaxHttpHeaderSize() {, +		return this.maxHttpHeaderSize;, +	}, +, +	public void setMaxHttpHeaderSize(int maxHttpHeaderSize) {, +		this.maxHttpHeaderSize = maxHttpHeaderSize;, +	}, +, +	public int getMaxHttpPostSize() {, +		return this.maxHttpPostSize;, +	}, +, +	public void setMaxHttpPostSize(int maxHttpPostSize) {, +		this.maxHttpPostSize = maxHttpPostSize;, +	}, +, +		/**, +		 * Get the max http header size., +		 * @return the max http header size., +		 * @deprecated in favor of {@code server.maxHttpHeaderSize}, +		 */, +		@Deprecated, +		@DeprecatedConfigurationProperty(replacement = "server.maxHttpHeaderSize"), +		/**, +		 * Set the max http header size., +		 * @param maxHttpHeaderSize the max http header size., +		 * @deprecated in favor of {@code server.maxHttpHeaderSize}, +		 */, +		@Deprecated, +			if (serverProperties.getMaxHttpHeaderSize() > 0) {, +				customizeMaxHttpHeaderSize(factory, serverProperties.getMaxHttpHeaderSize());, +			}, +			else if (this.maxHttpHeaderSize > 0) {, +				customizeMaxHttpHeaderSize(factory, this.maxHttpHeaderSize);, +			}, +			if (serverProperties.getMaxHttpPostSize() > 0) {, +				customizeMaxHttpPostSize(factory, serverProperties.getMaxHttpPostSize());, +				TomcatEmbeddedServletContainerFactory factory, final int maxHttpHeaderSize) {, +						protocol.setMaxHttpHeaderSize(maxHttpHeaderSize);, +		private void customizeMaxHttpPostSize(, +				TomcatEmbeddedServletContainerFactory factory, final int maxHttpPostSize) {, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +					connector.setMaxPostSize(maxHttpPostSize);, +				}, +			});, +		}, +, +			if (serverProperties.getMaxHttpHeaderSize() > 0) {, +				customizeMaxHttpHeaderSize(factory, serverProperties.getMaxHttpHeaderSize());, +			}, +			if (serverProperties.getMaxHttpPostSize() > 0) {, +				customizeMaxHttpPostSize(factory, serverProperties.getMaxHttpPostSize());, +			}, +		}, +, +		private void customizeMaxHttpHeaderSize(, +				JettyEmbeddedServletContainerFactory factory, final int maxHttpHeaderSize) {, +			factory.addServerCustomizers(new JettyServerCustomizer() {, +				@Override, +				public void customize(Server server) {, +					org.eclipse.jetty.server.Connector[] connectors = server.getConnectors();, +					for (org.eclipse.jetty.server.Connector connector : connectors) {, +						for (ConnectionFactory connectionFactory : connector.getConnectionFactories()) {, +							if (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {, +								HttpConfiguration httpConfig =, +									((HttpConfiguration.ConnectionFactory) connectionFactory), +										.getHttpConfiguration();, +								httpConfig.setRequestHeaderSize(maxHttpHeaderSize);, +								httpConfig.setResponseHeaderSize(maxHttpHeaderSize);, +							}, +						}, +					}, +				}]