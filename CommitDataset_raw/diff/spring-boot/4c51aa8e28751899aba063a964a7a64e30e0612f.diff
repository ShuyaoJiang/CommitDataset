[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +	private File fileMock;, +	private HealthIndicator healthIndicator;, +		given(this.fileMock.exists()).willReturn(true);, +		given(this.fileMock.canRead()).willReturn(true);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES + 10);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES - 10);, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +	private File fileMock;, +	private HealthIndicator healthIndicator;, +		given(this.fileMock.exists()).willReturn(true);, +		given(this.fileMock.canRead()).willReturn(true);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES + 10);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES - 10);, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/HelloWorldService.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +	private File fileMock;, +	private HealthIndicator healthIndicator;, +		given(this.fileMock.exists()).willReturn(true);, +		given(this.fileMock.canRead()).willReturn(true);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES + 10);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES - 10);, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/HelloWorldService.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/SampleActuatorApplication.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +	private File fileMock;, +	private HealthIndicator healthIndicator;, +		given(this.fileMock.exists()).willReturn(true);, +		given(this.fileMock.canRead()).willReturn(true);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES + 10);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES - 10);, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/HelloWorldService.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/SampleActuatorApplication.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/SampleController.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorProperties.java, +		Assert.isTrue(path.exists(), "Path '" + path + "' does not exist");, +		Assert.isTrue(path.canRead(), "Path '" + path + "' cannot be read");, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +	private File fileMock;, +	private HealthIndicator healthIndicator;, +		given(this.fileMock.exists()).willReturn(true);, +		given(this.fileMock.canRead()).willReturn(true);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES + 10);, +		given(this.fileMock.getFreeSpace()).willReturn(THRESHOLD_BYTES - 10);, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/HelloWorldService.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/SampleActuatorApplication.java, + * Copyright 2012-2014 the original author or authors., +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/java/sample/actuator/log4j2/SampleController.java]