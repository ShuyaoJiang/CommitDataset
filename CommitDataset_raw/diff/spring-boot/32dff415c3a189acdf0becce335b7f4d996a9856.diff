[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +	@ConditionalOnMissingBean(Reactor.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +	@ConditionalOnMissingBean(Reactor.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfigurationTests.java, +import static org.junit.Assert.assertNotNull;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import reactor.core.Environment;, +import reactor.core.spec.Reactors;, +	@Test, +	public void customReactor() {, +		this.context.register(TestConfiguration.class, ReactorAutoConfiguration.class);, +		this.context.refresh();, +		assertNotNull(this.context.getBean(Reactor.class));, +		this.context.close();, +	}, +, +	@Configuration, +	protected static class TestConfiguration {, +, +		@Bean, +		public Reactor reactor(Environment env) {, +			return Reactors.reactor().env(env).dispatcher(Environment.RING_BUFFER).get();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +	@ConditionalOnMissingBean(Reactor.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfigurationTests.java, +import static org.junit.Assert.assertNotNull;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import reactor.core.Environment;, +import reactor.core.spec.Reactors;, +	@Test, +	public void customReactor() {, +		this.context.register(TestConfiguration.class, ReactorAutoConfiguration.class);, +		this.context.refresh();, +		assertNotNull(this.context.getBean(Reactor.class));, +		this.context.close();, +	}, +, +	@Configuration, +	protected static class TestConfiguration {, +, +		@Bean, +		public Reactor reactor(Environment env) {, +			return Reactors.reactor().env(env).dispatcher(Environment.RING_BUFFER).get();, +		}, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +		return AstUtils.hasAtLeastOneAnnotation(classNode, "EnableReactor"), +				|| AstUtils.hasAtLeastOneFieldOrMethod(classNode, "Reactor");, +		imports.addImports("reactor.core.Reactor", "reactor.core.spec.Reactors",, +				"reactor.core.Observable", "reactor.event.Event",, +				"reactor.function.Functions", "reactor.function.Predicates", , +				"reactor.function.Suppliers",, +				.addStarImports("reactor.event.selector.Selectors")]