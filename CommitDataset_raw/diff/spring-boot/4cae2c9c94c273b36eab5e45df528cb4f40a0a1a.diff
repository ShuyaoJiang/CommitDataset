[+++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java, +		append(report, content);, +		append(report, content);, +			Map<String, List<PropertyMigration>> content) {, +				report.append(String.format("\t\t%s%n", property.determineReason()));, +	 * @param properties the {@link PropertyMigration} instances, +	void add(String name, List<PropertyMigration> properties) {, +		this.content.put(name, new LegacyProperties(properties));, +		private final List<PropertyMigration> properties;, +		LegacyProperties(List<PropertyMigration> properties) {, +			this.properties = new ArrayList<>(properties);, +			return this.properties.stream().filter(PropertyMigration::isCompatibleType), +					.collect(Collectors.toList());, +			return this.properties.stream(), +					.filter((property) -> !property.isCompatibleType()), +					.collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java, +		append(report, content);, +		append(report, content);, +			Map<String, List<PropertyMigration>> content) {, +				report.append(String.format("\t\t%s%n", property.determineReason()));, +	 * @param properties the {@link PropertyMigration} instances, +	void add(String name, List<PropertyMigration> properties) {, +		this.content.put(name, new LegacyProperties(properties));, +		private final List<PropertyMigration> properties;, +		LegacyProperties(List<PropertyMigration> properties) {, +			this.properties = new ArrayList<>(properties);, +			return this.properties.stream().filter(PropertyMigration::isCompatibleType), +					.collect(Collectors.toList());, +			return this.properties.stream(), +					.filter((property) -> !property.isCompatibleType()), +					.collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java, +		report.add(name, properties);, +		List<PropertyMigration> renamed = properties.stream(), +				.filter(PropertyMigration::isCompatibleType).collect(Collectors.toList());, +					result.add(name, new PropertyMigration(configurationProperty,, +							metadata, determineReplacementMetadata(metadata)));, +	private ConfigurationMetadataProperty determineReplacementMetadata(, +			ConfigurationMetadataProperty metadata) {, +		String replacementId = metadata.getDeprecation().getReplacement();, +		if (StringUtils.hasText(replacementId)) {, +			ConfigurationMetadataProperty replacement = this.allProperties, +					.get(replacementId);, +			if (replacement != null) {, +				return replacement;, +			}, +			return detectMapValueReplacement(replacementId);, +		}, +		return null;, +	}, +, +	private ConfigurationMetadataProperty detectMapValueReplacement(String fullId) {, +		int lastDot = fullId.lastIndexOf('.');, +		if (lastDot != -1) {, +			return this.allProperties.get(fullId.substring(0, lastDot));, +		}, +		return null;, +	}, +, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java, +		append(report, content);, +		append(report, content);, +			Map<String, List<PropertyMigration>> content) {, +				report.append(String.format("\t\t%s%n", property.determineReason()));, +	 * @param properties the {@link PropertyMigration} instances, +	void add(String name, List<PropertyMigration> properties) {, +		this.content.put(name, new LegacyProperties(properties));, +		private final List<PropertyMigration> properties;, +		LegacyProperties(List<PropertyMigration> properties) {, +			this.properties = new ArrayList<>(properties);, +			return this.properties.stream().filter(PropertyMigration::isCompatibleType), +					.collect(Collectors.toList());, +			return this.properties.stream(), +					.filter((property) -> !property.isCompatibleType()), +					.collect(Collectors.toList());, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java, +		report.add(name, properties);, +		List<PropertyMigration> renamed = properties.stream(), +				.filter(PropertyMigration::isCompatibleType).collect(Collectors.toList());, +					result.add(name, new PropertyMigration(configurationProperty,, +							metadata, determineReplacementMetadata(metadata)));, +	private ConfigurationMetadataProperty determineReplacementMetadata(, +			ConfigurationMetadataProperty metadata) {, +		String replacementId = metadata.getDeprecation().getReplacement();, +		if (StringUtils.hasText(replacementId)) {, +			ConfigurationMetadataProperty replacement = this.allProperties, +					.get(replacementId);, +			if (replacement != null) {, +				return replacement;, +			}, +			return detectMapValueReplacement(replacementId);, +		}, +		return null;, +	}, +, +	private ConfigurationMetadataProperty detectMapValueReplacement(String fullId) {, +		int lastDot = fullId.lastIndexOf('.');, +		if (lastDot != -1) {, +			return this.allProperties.get(fullId.substring(0, lastDot));]