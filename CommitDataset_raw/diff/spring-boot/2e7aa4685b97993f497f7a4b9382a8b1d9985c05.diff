[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.endpoint.isEnabled()).willReturn(true);, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().up().build());, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().down().build());, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().status("OK").build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.endpoint.isEnabled()).willReturn(true);, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().up().build());, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().down().build());, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().status("OK").build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpointTests.java, +	private ShutdownMvcEndpoint mvc = new ShutdownMvcEndpoint(this.endpoint);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.endpoint.isEnabled()).willReturn(true);, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().up().build());, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().down().build());, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().status("OK").build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpointTests.java, +	private ShutdownMvcEndpoint mvc = new ShutdownMvcEndpoint(this.endpoint);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +		given(connection.getMetaData()).willReturn(, +		given(dataSource.getConnection()).willReturn(connection);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.endpoint.isEnabled()).willReturn(true);, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().up().build());, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().down().build());, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().status("OK").build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpointTests.java, +	private ShutdownMvcEndpoint mvc = new ShutdownMvcEndpoint(this.endpoint);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +		given(connection.getMetaData()).willReturn(, +		given(dataSource.getConnection()).willReturn(connection);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +		CommandResult commandResult = mock(CommandResult.class);, +		given(commandResult.getString("version")).willReturn("2.6.4");, +		MongoTemplate mongoTemplate = mock(MongoTemplate.class);, +		given(mongoTemplate.executeCommand("{ buildInfo: 1 }")).willReturn(commandResult);, +		verify(commandResult).getString("version");, +		verify(mongoTemplate).executeCommand("{ buildInfo: 1 }");, +		MongoTemplate mongoTemplate = mock(MongoTemplate.class);, +		given(mongoTemplate.executeCommand("{ buildInfo: 1 }")).willThrow(, +		verify(mongoTemplate).executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java, +import static org.mockito.BDDMockito.given;, +		given(richGaugeReader.findAll()).willReturn(, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.mockito.BDDMockito.given;, +		given(this.endpoint.isEnabled()).willReturn(true);, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().up().build());, +		given(this.endpoint.invoke()).willReturn(new Health.Builder().down().build());, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().status("OK").build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpointTests.java, +	private ShutdownMvcEndpoint mvc = new ShutdownMvcEndpoint(this.endpoint);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +		given(connection.getMetaData()).willReturn(, +		given(dataSource.getConnection()).willReturn(connection);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +		CommandResult commandResult = mock(CommandResult.class);, +		given(commandResult.getString("version")).willReturn("2.6.4");, +		MongoTemplate mongoTemplate = mock(MongoTemplate.class);, +		given(mongoTemplate.executeCommand("{ buildInfo: 1 }")).willReturn(commandResult);, +		verify(commandResult).getString("version");, +		verify(mongoTemplate).executeCommand("{ buildInfo: 1 }");, +		MongoTemplate mongoTemplate = mock(MongoTemplate.class);, +		given(mongoTemplate.executeCommand("{ buildInfo: 1 }")).willThrow(, +		verify(mongoTemplate).executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java]