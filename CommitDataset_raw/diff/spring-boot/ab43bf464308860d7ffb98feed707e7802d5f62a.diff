[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/influx/InfluxDbAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.ApplicationContextTester;, +import org.springframework.boot.test.context.AssertableApplicationContext;, +	private final ApplicationContextTester context = new ApplicationContextTester(), +			.withConfiguration(AutoConfigurations.of(InfluxDbAutoConfiguration.class));, +		this.context.run((loaded) ->, +				assertThat(loaded.getBeansOfType(InfluxDB.class)).isEmpty());, +		this.context.withPropertyValues("spring.influx.url=http://localhost",, +				"spring.influx.password:password", "spring.influx.user:user"), +				.run((loaded ->, +						assertThat(loaded.getBeansOfType(InfluxDB.class)).hasSize(1)));, +		this.context.withPropertyValues("spring.influx.url=http://localhost"), +				.run((loaded) -> {, +					assertThat(loaded.getBeansOfType(InfluxDB.class)).hasSize(1);, +					int readTimeout = getReadTimeoutProperty(loaded);, +				});, +		this.context.withUserConfiguration(CustomOkHttpClientBuilderConfig.class), +				.withPropertyValues("spring.influx.url=http://localhost").run((loaded) -> {, +			assertThat(loaded.getBeansOfType(InfluxDB.class)).hasSize(1);, +			int readTimeout = getReadTimeoutProperty(loaded);, +		});, +		this.context.withUserConfiguration(CustomOkHttpClientBuilderConfig.class), +				.withPropertyValues("spring.influx.url=http://localhost",, +						"spring.influx.password:password", "spring.influx.user:user"), +				.run((loaded) -> {, +					assertThat(loaded.getBeansOfType(InfluxDB.class)).hasSize(1);, +					int readTimeout = getReadTimeoutProperty(loaded);, +				});, +	private int getReadTimeoutProperty(AssertableApplicationContext loaded) {, +		InfluxDB influxDB = loaded.getBean(InfluxDB.class);]