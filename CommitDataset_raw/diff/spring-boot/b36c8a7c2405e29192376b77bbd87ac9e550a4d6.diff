[+++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Used to resolve relative paths in `loader.path`. E.g. `loader.path=lib` then, + `${loader.home}/lib` is a classpath location (along with all jar files in that, + directory). Also used to locate a `loader.properties file`. Example `file:///opt/app`, + (defaults to `${user.dir}`)., +* `loader.properties` are searched for in `loader.home` then in the root of the, +  classpath, then in `classpath:/BOOT-INF/classes`. The first location that exists is, +  used., +* `loader.home` is only the directory location of an additional properties file, +  (overriding the default) as long as `loader.config.location` is not specified., +* `loader.path` can not be used to configure the location of `loader.properties` (the, +  classpath used to search for the latter is the JVM classpath when `PropertiesLauncher`, +  is launched)., +  is env vars, system properties, `loader.properties`, exploded archive manifest, archive, +  manifest., +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Used to resolve relative paths in `loader.path`. E.g. `loader.path=lib` then, + `${loader.home}/lib` is a classpath location (along with all jar files in that, + directory). Also used to locate a `loader.properties file`. Example `file:///opt/app`, + (defaults to `${user.dir}`)., +* `loader.properties` are searched for in `loader.home` then in the root of the, +  classpath, then in `classpath:/BOOT-INF/classes`. The first location that exists is, +  used., +* `loader.home` is only the directory location of an additional properties file, +  (overriding the default) as long as `loader.config.location` is not specified., +* `loader.path` can not be used to configure the location of `loader.properties` (the, +  classpath used to search for the latter is the JVM classpath when `PropertiesLauncher`, +  is launched)., +  is env vars, system properties, `loader.properties`, exploded archive manifest, archive, +  manifest., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +				debug("Found: " + config);, +						warn("Use of application.properties for PropertiesLauncher is deprecated");, +					debug("Adding resolved properties to System properties");, +				debug("Not found: " + config);, +		debug("Trying classpath: " + config);, +		debug("Trying file: " + config);, +		debug("Nested archive paths: " + this.paths);, +			debug("Using custom class loader: " + customLoaderClassName);, +			debug("Property '" + propertyKey + "' from environment: " + value);, +			debug("Property '" + propertyKey + "' from properties: " + value);, +						debug("Property '" + manifestKey, +				debug("Property '" + manifestKey + "' from archive manifest: " + value);, +			debug("Adding classpath entries from " + file);, +			debug("Adding classpath entries from archive " + archive.getUrl() + root);, +		Archive nested = getNestedArchive(root);, +			debug("Adding classpath entries from nested " + root);, +			lib.add(nested);, +	private Archive getNestedArchive(String root) throws Exception {, +			return null;, +			return null;, +		return new FilteredArchive(this.parent, filter);, +	private void debug(String message) {, +			log(message);, +		log("WARNING: " + message);, +	}, +, +	private void log(String message) {, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Used to resolve relative paths in `loader.path`. E.g. `loader.path=lib` then, + `${loader.home}/lib` is a classpath location (along with all jar files in that, + directory). Also used to locate a `loader.properties file`. Example `file:///opt/app`, + (defaults to `${user.dir}`)., +* `loader.properties` are searched for in `loader.home` then in the root of the, +  classpath, then in `classpath:/BOOT-INF/classes`. The first location that exists is, +  used., +* `loader.home` is only the directory location of an additional properties file, +  (overriding the default) as long as `loader.config.location` is not specified., +* `loader.path` can not be used to configure the location of `loader.properties` (the, +  classpath used to search for the latter is the JVM classpath when `PropertiesLauncher`, +  is launched)., +  is env vars, system properties, `loader.properties`, exploded archive manifest, archive, +  manifest., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +				debug("Found: " + config);, +						warn("Use of application.properties for PropertiesLauncher is deprecated");, +					debug("Adding resolved properties to System properties");, +				debug("Not found: " + config);, +		debug("Trying classpath: " + config);, +		debug("Trying file: " + config);, +		debug("Nested archive paths: " + this.paths);, +			debug("Using custom class loader: " + customLoaderClassName);, +			debug("Property '" + propertyKey + "' from environment: " + value);, +			debug("Property '" + propertyKey + "' from properties: " + value);, +						debug("Property '" + manifestKey, +				debug("Property '" + manifestKey + "' from archive manifest: " + value);, +			debug("Adding classpath entries from " + file);, +			debug("Adding classpath entries from archive " + archive.getUrl() + root);, +		Archive nested = getNestedArchive(root);, +			debug("Adding classpath entries from nested " + root);, +			lib.add(nested);, +	private Archive getNestedArchive(String root) throws Exception {, +			return null;, +			return null;, +		return new FilteredArchive(this.parent, filter);, +	private void debug(String message) {, +			log(message);, +		log("WARNING: " + message);, +	}, +]