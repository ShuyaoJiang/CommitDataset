[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +If Spring Security is on the classpath, then web applications are secure by default. Spring Boot, +relies on Spring Securityâ€™s content-negotiation strategy to determine whether to use `httpBasic`, +or `formLogin`. To add method-level security to a web application, you can also add `@EnableGlobalMethodSecurity`, +with your desired settings. Additional information can be found in the {spring-security-reference}#jc-method[Spring, +configuration completely, you can add a bean of type `WebSecurityConfigurerAdapter` (this does not, +disable the authentication manager configuration or Actuator's security)., +`UserDetailsService`, `AuthenticationProvider` or `AuthenticationManager`., +* A `UserDetailsService` bean with in-memory store and a single user with a generated password., +* Form-based login or HTTP Basic security (depending on Content-Type) for the entire application (including, +actuator endpoints if actuator is on the classpath)., +Access rules can be overriden by adding a custom `WebSecurityConfigurerAdapter`. Spring Boot, +provides convenience methods that can be used to override access rules for actuator endpoints, +and static resources. `EndpointRequest` can be used to create a `RequestMatcher` that is based on the, +`management.endpoints.web.base-path` property. `StaticResourceRequest` can be used to, +create a `RequestMatcher` for static resources in commonly used locations.]