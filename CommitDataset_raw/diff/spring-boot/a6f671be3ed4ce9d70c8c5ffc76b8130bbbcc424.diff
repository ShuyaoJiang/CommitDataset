[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, + * Copyright 2012-2015 the original author or authors., +	@EnableAutoConfiguration(exclude = {, +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, + * Copyright 2012-2015 the original author or authors., +	@EnableAutoConfiguration(exclude = {, +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * configuration that you never want to apply (use {@link #excludeName()} if you don't, + * have access to them). Auto-configuration is always applied after user-defined beans, + * have been registered., + * @author Stephane Nicoll, +	/**, +	 * Exclude specific auto-configuration class names such that they will never be, +	 * applied., +	 * @return the class names to exclude, +	 */, +	String[] excludeName() default {};, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, + * Copyright 2012-2015 the original author or authors., +	@EnableAutoConfiguration(exclude = {, +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * configuration that you never want to apply (use {@link #excludeName()} if you don't, + * have access to them). Auto-configuration is always applied after user-defined beans, + * have been registered., + * @author Stephane Nicoll, +	/**, +	 * Exclude specific auto-configuration class names such that they will never be, +	 * applied., +	 * @return the class names to exclude, +	 */, +	String[] excludeName() default {};, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, + * @author Stephane Nicoll, +			exclude(Arrays.asList(attributes.getStringArray("exclude")), factories);, +			exclude(Arrays.asList(attributes.getStringArray("excludeName")), factories);, +	private void exclude(List<String> excluded, List<String> factories) {, +		factories.removeAll(excluded);, +		ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, + * Copyright 2012-2015 the original author or authors., +	@EnableAutoConfiguration(exclude = {, +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +			ElasticsearchRepositoriesAutoConfiguration.class},, +			excludeName = {"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration"}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * configuration that you never want to apply (use {@link #excludeName()} if you don't, + * have access to them). Auto-configuration is always applied after user-defined beans, + * have been registered., + * @author Stephane Nicoll, +	/**, +	 * Exclude specific auto-configuration class names such that they will never be, +	 * applied., +	 * @return the class names to exclude, +	 */, +	String[] excludeName() default {};, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, + * @author Stephane Nicoll, +			exclude(Arrays.asList(attributes.getStringArray("exclude")), factories);, +			exclude(Arrays.asList(attributes.getStringArray("excludeName")), factories);, +	private void exclude(List<String> excluded, List<String> factories) {, +		factories.removeAll(excluded);, +		ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java, + * @author Stephane Nicoll, +	/**, +	 * Exclude specific auto-configuration class names such that they will never be, +	 * applied., +	 * @return the class names to exclude, +	 */, +	String[] excludeName() default {};, +]