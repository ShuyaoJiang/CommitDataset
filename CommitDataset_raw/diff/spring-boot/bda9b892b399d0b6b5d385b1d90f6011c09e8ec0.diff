[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;, +	@ConditionalOnMissingBean(ControllerEndpointsSupplier.class), +	public ControllerEndpointDiscoverer controllerEndpointDiscoverer(, +			PathMapper webEndpointPathMapper,, +			ObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,, +			ObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {, +		return new ControllerEndpointDiscoverer(this.applicationContext,, +				webEndpointPathMapper, filters.getIfAvailable(Collections::emptyList));, +	}, +, +	@Bean, +	@Bean, +	public ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerIncludeExcludePropertyEndpointFilter() {, +		Set<String> expose = this.properties.getExpose();, +		Set<String> exclude = this.properties.getExclude();, +		return new ExposeExcludePropertyEndpointFilter<>(, +				ExposableControllerEndpoint.class, expose, exclude);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;, +	@ConditionalOnMissingBean(ControllerEndpointsSupplier.class), +	public ControllerEndpointDiscoverer controllerEndpointDiscoverer(, +			PathMapper webEndpointPathMapper,, +			ObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,, +			ObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {, +		return new ControllerEndpointDiscoverer(this.applicationContext,, +				webEndpointPathMapper, filters.getIfAvailable(Collections::emptyList));, +	}, +, +	@Bean, +	@Bean, +	public ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerIncludeExcludePropertyEndpointFilter() {, +		Set<String> expose = this.properties.getExpose();, +		Set<String> exclude = this.properties.getExclude();, +		return new ExposeExcludePropertyEndpointFilter<>(, +				ExposableControllerEndpoint.class, expose, exclude);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.reactive.ControllerEndpointHandlerMapping;, +	@Bean, +	@ConditionalOnMissingBean, +	public ControllerEndpointHandlerMapping controllerEndpointHandlerMapping(, +			ControllerEndpointsSupplier controllerEndpointsSupplier,, +			EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,, +			WebEndpointProperties webEndpointProperties) {, +		EndpointMapping endpointMapping = new EndpointMapping(, +				webEndpointProperties.getBasePath());, +		return new ControllerEndpointHandlerMapping(endpointMapping,, +				controllerEndpointsSupplier.getEndpoints(),, +				corsProperties.toCorsConfiguration());, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;, +	@ConditionalOnMissingBean(ControllerEndpointsSupplier.class), +	public ControllerEndpointDiscoverer controllerEndpointDiscoverer(, +			PathMapper webEndpointPathMapper,, +			ObjectProvider<Collection<OperationInvokerAdvisor>> invokerAdvisors,, +			ObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {, +		return new ControllerEndpointDiscoverer(this.applicationContext,, +				webEndpointPathMapper, filters.getIfAvailable(Collections::emptyList));, +	}, +, +	@Bean, +	@Bean, +	public ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerIncludeExcludePropertyEndpointFilter() {, +		Set<String> expose = this.properties.getExpose();, +		Set<String> exclude = this.properties.getExclude();, +		return new ExposeExcludePropertyEndpointFilter<>(, +				ExposableControllerEndpoint.class, expose, exclude);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.reactive.ControllerEndpointHandlerMapping;, +	@Bean, +	@ConditionalOnMissingBean, +	public ControllerEndpointHandlerMapping controllerEndpointHandlerMapping(, +			ControllerEndpointsSupplier controllerEndpointsSupplier,, +			EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,, +			WebEndpointProperties webEndpointProperties) {, +		EndpointMapping endpointMapping = new EndpointMapping(, +				webEndpointProperties.getBasePath());, +		return new ControllerEndpointHandlerMapping(endpointMapping,, +				controllerEndpointsSupplier.getEndpoints(),, +				corsProperties.toCorsConfiguration());, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/servlet/WebMvcEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;]