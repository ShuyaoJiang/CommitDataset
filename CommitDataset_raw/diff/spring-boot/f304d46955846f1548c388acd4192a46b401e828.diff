[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import java.sql.SQLException;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	private static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);, +, +	}, +	@Configuration, +	@ConditionalOnExpression("${spring.datasource.jmxEnabled:true}"), +	@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy"), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	protected static class TomcatDataSourceJmxConfiguration {, +		@Bean, +		public Object dataSourceMBean(DataSource dataSource) {, +			if (dataSource instanceof DataSourceProxy) {, +				try {, +					return ((DataSourceProxy) dataSource).createPool().getJmxPool();, +				}, +				catch (SQLException e) {, +					logger.warn("Cannot expose DataSource to JMX (could not connect)");, +				}, +			}, +			return null;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import java.sql.SQLException;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	private static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);, +, +	}, +	@Configuration, +	@ConditionalOnExpression("${spring.datasource.jmxEnabled:true}"), +	@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy"), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	protected static class TomcatDataSourceJmxConfiguration {, +		@Bean, +		public Object dataSourceMBean(DataSource dataSource) {, +			if (dataSource instanceof DataSourceProxy) {, +				try {, +					return ((DataSourceProxy) dataSource).createPool().getJmxPool();, +				}, +				catch (SQLException e) {, +					logger.warn("Cannot expose DataSource to JMX (could not connect)");, +				}, +			}, +			return null;, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +		@Autowired, +		private DataSourceProperties properties;, +, +			DataSourceBuilder factory = DataSourceBuilder, +					.create(this.properties.getClassLoader()), +					.driverClassName(this.properties.getDriverClassName()), +					.url(this.properties.getUrl()), +					.username(this.properties.getUsername()), +					.password(this.properties.getPassword()), +					.type(org.apache.tomcat.jdbc.pool.DataSource.class);, +			return factory.build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import java.sql.SQLException;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +	private static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);, +, +	}, +	@Configuration, +	@ConditionalOnExpression("${spring.datasource.jmxEnabled:true}"), +	@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy"), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	protected static class TomcatDataSourceJmxConfiguration {, +		@Bean, +		public Object dataSourceMBean(DataSource dataSource) {, +			if (dataSource instanceof DataSourceProxy) {, +				try {, +					return ((DataSourceProxy) dataSource).createPool().getJmxPool();, +				}, +				catch (SQLException e) {, +					logger.warn("Cannot expose DataSource to JMX (could not connect)");, +				}, +			}, +			return null;, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +		@Autowired, +		private DataSourceProperties properties;, +, +			DataSourceBuilder factory = DataSourceBuilder]