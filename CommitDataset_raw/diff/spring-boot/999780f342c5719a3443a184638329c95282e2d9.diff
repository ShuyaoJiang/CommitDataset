[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory., +	logging.file.total-size-cap=0 # Places a cap on the total size of log backups. Only supported with the default logback setup., +	logging.file.clean-history-on-start=false # Whether to clean the archive log files on startup. Only supported with the default logback setup., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory., +	logging.file.total-size-cap=0 # Places a cap on the total size of log backups. Only supported with the default logback setup., +	logging.file.clean-history-on-start=false # Whether to clean the archive log files on startup. Only supported with the default logback setup., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +indefinitely unless the `logging.file.max-history` property has been set. The total size, +of log archives can be capped using `logging.file.total-size-cap`. When the total size of, +log archives exceeds that threshold, backups will be deleted. To force log archive cleanup, +on application startup, use the `logging.file.clean-history-on-start` property., +|`logging.file.total-size-cap`, +|`LOG_FILE_TOTAL_SIZE_CAP`, +|The total size of log backups to be kept (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +|`logging.file.clean-history-on-start`, +|`LOG_FILE_CLEAN_HISTORY_ON_START`, +|Whether to clean the archive log files on startup (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory., +	logging.file.total-size-cap=0 # Places a cap on the total size of log backups. Only supported with the default logback setup., +	logging.file.clean-history-on-start=false # Whether to clean the archive log files on startup. Only supported with the default logback setup., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +indefinitely unless the `logging.file.max-history` property has been set. The total size, +of log archives can be capped using `logging.file.total-size-cap`. When the total size of, +log archives exceeds that threshold, backups will be deleted. To force log archive cleanup, +on application startup, use the `logging.file.clean-history-on-start` property., +|`logging.file.total-size-cap`, +|`LOG_FILE_TOTAL_SIZE_CAP`, +|The total size of log backups to be kept (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +|`logging.file.clean-history-on-start`, +|`LOG_FILE_CLEAN_HISTORY_ON_START`, +|Whether to clean the archive log files on startup (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java, + * @author Robert Thornton, +	 * The name of the System property that contains the file total size cap., +	 */, +	public static final String FILE_TOTAL_SIZE_CAP = "LOG_FILE_TOTAL_SIZE_CAP";, +, +	/**, +	 * The name of the System property that contains the clean history on start flag., +	 */, +	public static final String FILE_CLEAN_HISTORY_ON_START = "LOG_FILE_CLEAN_HISTORY_ON_START";, +, +	/**, +		setSystemProperty(resolver, FILE_TOTAL_SIZE_CAP, "file.total-size-cap");, +		setSystemProperty(resolver, FILE_CLEAN_HISTORY_ON_START,, +				"file.clean-history-on-start");, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory., +	logging.file.total-size-cap=0 # Places a cap on the total size of log backups. Only supported with the default logback setup., +	logging.file.clean-history-on-start=false # Whether to clean the archive log files on startup. Only supported with the default logback setup., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +indefinitely unless the `logging.file.max-history` property has been set. The total size, +of log archives can be capped using `logging.file.total-size-cap`. When the total size of, +log archives exceeds that threshold, backups will be deleted. To force log archive cleanup, +on application startup, use the `logging.file.clean-history-on-start` property., +|`logging.file.total-size-cap`, +|`LOG_FILE_TOTAL_SIZE_CAP`, +|The total size of log backups to be kept (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +|`logging.file.clean-history-on-start`, +|`LOG_FILE_CLEAN_HISTORY_ON_START`, +|Whether to clean the archive log files on startup (if LOG_FILE enabled). (Only supported with, +the default Logback setup.), +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java, + * @author Robert Thornton, +	 * The name of the System property that contains the file total size cap., +	 */, +	public static final String FILE_TOTAL_SIZE_CAP = "LOG_FILE_TOTAL_SIZE_CAP";, +, +	/**, +	 * The name of the System property that contains the clean history on start flag., +	 */, +	public static final String FILE_CLEAN_HISTORY_ON_START = "LOG_FILE_CLEAN_HISTORY_ON_START";, +, +	/**, +		setSystemProperty(resolver, FILE_TOTAL_SIZE_CAP, "file.total-size-cap");, +		setSystemProperty(resolver, FILE_CLEAN_HISTORY_ON_START,, +				"file.clean-history-on-start");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, + * @author Robert Thornton, +		rollingPolicy.setTotalSizeCap(, +				FileSize.valueOf(this.patterns.getProperty("logging.file.total-size-cap",, +						"" + CoreConstants.UNBOUNDED_TOTAL_SIZE_CAP)));, +		rollingPolicy.setCleanHistoryOnStart(Boolean.parseBoolean(this.patterns, +				.getProperty("logging.file.clean-history-on-start", "false")));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.]