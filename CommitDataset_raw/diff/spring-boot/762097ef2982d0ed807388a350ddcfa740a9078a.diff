[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +					.driverClassName(this.properties.determineDriverClassName()), +					.url(this.properties.determineUrl()).username(this.properties.determineUsername()), +					.password(this.properties.determinePassword());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +					.driverClassName(this.properties.determineDriverClassName()), +					.url(this.properties.determineUrl()).username(this.properties.determineUsername()), +					.password(this.properties.determinePassword());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2016 the original author or authors., +	/**, +	 * Return the configured driver or {@code null} if none was configured., +	 * @return the configured driver, +	 * @see #determineDriverClassName(), +	 */, +		return this.driverClassName;, +	}, +, +	public void setDriverClassName(String driverClassName) {, +		this.driverClassName = driverClassName;, +	}, +, +	/**, +	 * Determine the driver to use based on this configuration and the environment., +	 * @return the driver to use, +	 * @since 1.4.0, +	 */, +	public String determineDriverClassName() {, +	/**, +	 * Return the configured url or {@code null} if none was configured., +	 * @return the configured url, +	 * @see #determineUrl(), +	 */, +	public String getUrl() {, +		return this.url;, +	public void setUrl(String url) {, +		this.url = url;, +	}, +, +	/**, +	 * Determine the url to use based on this configuration and the environment., +	 * @return the url to use, +	 * @since 1.4.0, +	 */, +	public String determineUrl() {, +	/**, +	 * Return the configured username or {@code null} if none was configured., +	 * @return the configured username, +	 * @see #determineUsername(), +	 */, +	/**, +	 * Determine the username to use based on this configuration and the environment., +	 * @return the username to use, +	 * @since 1.4.0, +	 */, +	public String determineUsername() {, +		if (StringUtils.hasText(this.username)) {, +			return this.username;, +		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {, +			return "sa";, +	/**, +	 * Return the configured password or {@code null} if none was configured., +	 * @return the configured password, +	 * @see #determinePassword(), +	 */, +	public String getPassword() {, +		return this.password;, +	}, +, +, +	/**, +	 * Determine the password to use based on this configuration and the environment., +	 * @return the password to use, +	 * @since 1.4.0, +	 */, +	public String determinePassword() {, +		if (StringUtils.hasText(this.password)) {, +			return this.password;, +		}, +		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {, +			return "";, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +					.driverClassName(this.properties.determineDriverClassName()), +					.url(this.properties.determineUrl()).username(this.properties.determineUsername()), +					.password(this.properties.determinePassword());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * Copyright 2012-2016 the original author or authors., +	/**, +	 * Return the configured driver or {@code null} if none was configured., +	 * @return the configured driver, +	 * @see #determineDriverClassName(), +	 */, +		return this.driverClassName;]