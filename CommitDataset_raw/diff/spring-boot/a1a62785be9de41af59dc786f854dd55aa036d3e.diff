[+++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +[[cloud-deployment]], += Deploying to the cloud, +, +[partintro], +--, +Spring Boot's executable jars are ready-made for most popular cloud PaaS, +(platform-as-a-service) providers. These providers tend to require that you, +_`bring your own container'_; they manage application processes (not Java applications, +specifically), so they need some intermediary layer that adapts _your_ application to the, +_cloud's_ notion of a running process., +, +Two popular cloud providers, Heroku and Cloud Foundry, employ a ``buildpack'' approach., +The buildpack wraps your deployed code in whatever is needed to _start_ your, +application: it might be a JDK and a call to `java`, it might be an embedded webserver,, +or it might be a full fledged application server. A buildpack is pluggable, but ideally, +you should be able to get by with as few customizations to it as possible., +This reduces the footprint of functionality that is not under your control. It minimizes, +divergence between deployment and production environments., +, +Ideally, your application, like a Spring Boot executable jar, has everything that it needs, +to run packaged within it., +, +In this section we'll look at what it takes to get the, +<<getting-started.adoc#getting-started-first-application, simple application that we, +developed>> in the ``Getting Started'' section up and running in the Cloud., +--, +, +, +, +[[cloud-deployment-cloud-foundry]], +== Cloud Foundry, +Cloud Foundry provides default buildpacks that come into play if no other buildpack is, +specified. The Cloud Foundry buildpack has excellent support for Spring applications,, +including Spring Boot.  You can deploy stand-alone executable jar applications, as well as, +traditional `war` packaged applications., +, +Once you've built your application (using, for example, `mvn clean install`) and, +http://docs.cloudfoundry.org/devguide/installcf/[installed the `cf` command line tool],, +simply answer the `cf push` command's prompts as follows:, +, +[indent=0,subs="verbatim,quotes,attributes"], +----, +	$ cf push --path target/demo-0.0.1-SNAPSHOT.jar, +, +	Name> *_$YOURAPP_*, +	Instances> *1*, +	Memory Limit> *256M*, +, +	Creating _$YOURAPP_... *OK*, +, +	1: _$YOURAPP_, +	2: none, +	Subdomain> *_$YOURAPP_*, +, +	1: cfapps.io, +	2: none, +	Domain> *cfapps.io*, +, +	Creating route _$YOURAPP_.cfapps.io... OK, +	Binding _$YOURAPP_.cfapps.io to _$YOURAPP_... OK, +, +	Create services for application?> *n*, +	Bind other services to application?> *n*, +	Save configuration?> *y*, +----, +, +At this point `cf` will start uploading your application:, +, +[indent=0,subs="verbatim,quotes,attributes"], +----, +	Saving to manifest.yml... *OK*, +	Uploading $YOURAPP... *OK*, +	Preparing to start _$YOURAPP_... *OK*, +	-----> Downloaded app package (8.7M), +	-----> Java Buildpack source: system, +	-----> Downloading Open JDK 1.7.0_51 from .../openjdk-1.7.0_51.tar.gz (*1.4s*), +	       Expanding Open JDK to .java-buildpack/open_jdk (*1.3s*), +	-----> Downloading Spring Auto Reconfiguration 0.8.7 from .../auto-reconfiguration-0.8.7.jar (*0.0s*), +	-----> Uploading droplet (*43M*), +	Checking status of app '_$YOURAPP_'..., +	 0 of 1 instances running (1 starting), +	 0 of 1 instances running (1 starting), +	 1 of 1 instances running (1 running), +	Push successful! App '_$YOURAPP_' available at http://_$YOURAPP_.cfapps.io, +----, +, +NOTE: Here we are substituting `$YOURAPP` for whatever value you give `cf` when it asks, +for the `name` of your application., +, +Once Cloud Foundry acknowledges that your application has been deployed, you should be, +able to hit the application at the URI provided:, +`http://$YOURAPP.cfapps.io/`., +, +, +, +[[cloud-deployment-cloud-foundry-services]], +=== Binding to services, +By default, meta-data about the running application as well as service connection, +information is exposed to the application as environment variables (for example:]