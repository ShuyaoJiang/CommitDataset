[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, + * Copyright 2012-2014 the original author or authors., +import java.lang.management.ClassLoadingMXBean;, +import java.lang.management.ManagementFactory;, +import java.lang.management.MemoryUsage;, +import java.lang.management.ThreadMXBean;, + * @author Christian Dupuis, +, +		addMetrics(result);, +		addHeapMetrics(result);, +		addThreadMetrics(result);, +		addClassLoadingMetrics(result);, +, +		return result;, +	}, +, +	/**, +	 * Add basic system metrics., +	 */, +	protected void addMetrics(Collection<Metric<?>> result) {, +		// Add JVM uptime in ms, +		result.add(new Metric<Long>("uptime", new Long(ManagementFactory, +				.getRuntimeMXBean().getUptime())));, +	}, +, +	/**, +	 * Add JVM heap metrics., +	 */, +	protected void addHeapMetrics(Collection<Metric<?>> result) {, +		MemoryUsage memoryUsage = ManagementFactory.getMemoryMXBean(), +				.getHeapMemoryUsage();, +		result.add(new Metric<Long>("heap.committed", memoryUsage.getCommitted() / 1024));, +		result.add(new Metric<Long>("heap.init", memoryUsage.getInit() / 1024));, +		result.add(new Metric<Long>("heap.used", memoryUsage.getUsed() / 1024));, +		result.add(new Metric<Long>("heap", memoryUsage.getMax() / 1024));, +	}, +, +	/**, +	 * Add thread metrics., +	 */, +	protected void addThreadMetrics(Collection<Metric<?>> result) {, +		ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();, +		result.add(new Metric<Long>("threads.peak", new Long(threadMxBean, +				.getPeakThreadCount())));, +		result.add(new Metric<Long>("threads.deamon", new Long(threadMxBean, +				.getDaemonThreadCount())));, +		result.add(new Metric<Long>("threads", new Long(threadMxBean.getThreadCount())));, +	}, +, +	/**, +	 * Add class loading metrics., +	 */, +	protected void addClassLoadingMetrics(Collection<Metric<?>> result) {, +		ClassLoadingMXBean classLoadingMxBean = ManagementFactory.getClassLoadingMXBean();, +		result.add(new Metric<Long>("classes", new Long(classLoadingMxBean, +				.getLoadedClassCount())));, +		result.add(new Metric<Long>("classes.loaded", new Long(classLoadingMxBean, +				.getTotalLoadedClassCount())));, +		result.add(new Metric<Long>("classes.unloaded", new Long(classLoadingMxBean, +				.getUnloadedClassCount())));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java, + * Copyright 2012-2014 the original author or authors., +import java.lang.management.ClassLoadingMXBean;, +import java.lang.management.ManagementFactory;, +import java.lang.management.MemoryUsage;, +import java.lang.management.ThreadMXBean;, + * @author Christian Dupuis, +, +		addMetrics(result);, +		addHeapMetrics(result);, +		addThreadMetrics(result);, +		addClassLoadingMetrics(result);, +, +		return result;, +	}, +, +	/**, +	 * Add basic system metrics., +	 */, +	protected void addMetrics(Collection<Metric<?>> result) {, +		// Add JVM uptime in ms, +		result.add(new Metric<Long>("uptime", new Long(ManagementFactory, +				.getRuntimeMXBean().getUptime())));, +	}, +, +	/**, +	 * Add JVM heap metrics., +	 */, +	protected void addHeapMetrics(Collection<Metric<?>> result) {, +		MemoryUsage memoryUsage = ManagementFactory.getMemoryMXBean(), +				.getHeapMemoryUsage();, +		result.add(new Metric<Long>("heap.committed", memoryUsage.getCommitted() / 1024));, +		result.add(new Metric<Long>("heap.init", memoryUsage.getInit() / 1024));, +		result.add(new Metric<Long>("heap.used", memoryUsage.getUsed() / 1024));, +		result.add(new Metric<Long>("heap", memoryUsage.getMax() / 1024));, +	}, +, +	/**, +	 * Add thread metrics., +	 */]