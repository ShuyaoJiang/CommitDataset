[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerExceptionResolverTests.java, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		public ModelAndView resolveException(HttpServletRequest request,, +				HttpServletResponse response, Object handler, Exception ex) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerExceptionResolverTests.java, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		public ModelAndView resolveException(HttpServletRequest request,, +				HttpServletResponse response, Object handler, Exception ex) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		FunctionCounter.builder(name, object, value).tags(tags).description(description), +				.register(registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerExceptionResolverTests.java, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		public ModelAndView resolveException(HttpServletRequest request,, +				HttpServletResponse response, Object handler, Exception ex) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		FunctionCounter.builder(name, object, value).tags(tags).description(description), +				.register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +		applicationContext, +				.addApplicationListener(new ConditionEvaluationReportListener());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerExceptionResolverTests.java, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		public ModelAndView resolveException(HttpServletRequest request,, +				HttpServletResponse response, Object handler, Exception ex) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		FunctionCounter.builder(name, object, value).tags(tags).description(description), +				.register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +		applicationContext, +				.addApplicationListener(new ConditionEvaluationReportListener());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListenerTests.java, +		Logger logger = context.getLogger(ConditionEvaluationReportLoggingListener.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, +			return JsonParserFactory.getJsonParser(), +					.parseMap(new String(bytes, StandardCharsets.UTF_8));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerExceptionResolverTests.java, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context, +				.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME);, +		ModelAndView resolved = resolver.resolveException(this.request, this.response,, +				null, new HttpRequestMethodNotSupportedException("POST"));, +		public ModelAndView resolveException(HttpServletRequest request,, +				HttpServletResponse response, Object handler, Exception ex) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java, +		FunctionCounter.builder(name, object, value).tags(tags).description(description), +				.register(registry);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListener.java, +		applicationContext, +				.addApplicationListener(new ConditionEvaluationReportListener());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportLoggingListenerTests.java, +		Logger logger = context.getLogger(ConditionEvaluationReportLoggingListener.class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTest.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java]