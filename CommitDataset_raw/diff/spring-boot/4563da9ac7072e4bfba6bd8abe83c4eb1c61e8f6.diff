[+++ b/spring-boot-actuator/pom.xml, +			<groupId>io.lettuce</groupId>, +			<artifactId>lettuce-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>io.lettuce</groupId>, +			<artifactId>lettuce-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.lettuce</groupId>, +			<artifactId>lettuce-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>io.lettuce</groupId>, +			<artifactId>lettuce-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>io.lettuce</groupId>, +			<artifactId>lettuce-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java, +import io.lettuce.core.RedisClient;, +import io.lettuce.core.cluster.RedisClusterClient;, +import io.lettuce.core.resource.ClientResources;, +import io.lettuce.core.resource.DefaultClientResources;, +import org.apache.commons.pool2.impl.GenericObjectPoolConfig;, +import org.springframework.boot.autoconfigure.data.redis.RedisProperties.Lettuce;, +import org.springframework.data.redis.connection.lettuce.DefaultLettucePool;, +import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;, + * @author Mark Paluch, +@ConditionalOnClass({ RedisOperations.class }), +	 * Jedis Redis connection configuration., +	@ConditionalOnClass({ GenericObjectPool.class, JedisConnection.class, Jedis.class }), +	protected static class JedisRedisConnectionConfiguration, +			extends RedisBaseConfiguration {, +		public JedisRedisConnectionConfiguration(RedisProperties properties,, +			super(properties, sentinelConfiguration, clusterConfiguration);, +		private JedisConnectionFactory createJedisConnectionFactory() {, +			JedisPoolConfig poolConfig = this.properties.getPool() != null, +					? jedisPoolConfig() : new JedisPoolConfig();, +, +			if (getSentinelConfig() != null) {, +				return new JedisConnectionFactory(getSentinelConfig(), poolConfig);, +			}, +			if (getClusterConfiguration() != null) {, +				return new JedisConnectionFactory(getClusterConfiguration(), poolConfig);, +			}, +			return new JedisConnectionFactory(poolConfig);, +		}, +, +		private JedisPoolConfig jedisPoolConfig() {, +			JedisPoolConfig config = new JedisPoolConfig();, +			RedisProperties.Pool props = this.properties.getPool();, +			config.setMaxTotal(props.getMaxActive());, +			config.setMaxIdle(props.getMaxIdle());, +			config.setMinIdle(props.getMinIdle());, +			config.setMaxWaitMillis(props.getMaxWait());, +			return config;, +		}, +, +	}, +, +	/**, +	 * Lettuce Redis connection configuration., +	 */, +	@Configuration, +	@ConditionalOnClass({ GenericObjectPool.class, RedisClient.class,, +			RedisClusterClient.class }), +	protected static class LettuceRedisConnectionConfiguration, +			extends RedisBaseConfiguration {, +, +		private final RedisProperties properties;, +, +		public LettuceRedisConnectionConfiguration(RedisProperties properties,, +				ObjectProvider<RedisSentinelConfiguration> sentinelConfigurationProvider,, +				ObjectProvider<RedisClusterConfiguration> clusterConfigurationProvider) {, +			super(properties, sentinelConfigurationProvider,, +					clusterConfigurationProvider);, +			this.properties = properties;, +		}, +, +		@Bean(destroyMethod = "shutdown"), +		@ConditionalOnMissingBean(ClientResources.class), +		public DefaultClientResources lettuceClientResources() {, +			return DefaultClientResources.create();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(RedisConnectionFactory.class), +		public LettuceConnectionFactory redisConnectionFactory(]