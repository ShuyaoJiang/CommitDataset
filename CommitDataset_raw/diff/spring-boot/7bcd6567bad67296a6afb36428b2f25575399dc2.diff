[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +		/**, +		 * The name of specific that that when changed will will trigger the restart. If, +		 * not specified any classpath file change will trigger the restart., +		 */, +		private String triggerFile;, +, +		public String getTriggerFile() {, +			return this.triggerFile;, +		}, +, +		public void setTriggerFile(String triggerFile) {, +			this.triggerFile = triggerFile;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +		/**, +		 * The name of specific that that when changed will will trigger the restart. If, +		 * not specified any classpath file change will trigger the restart., +		 */, +		private String triggerFile;, +, +		public String getTriggerFile() {, +			return this.triggerFile;, +		}, +, +		public void setTriggerFile(String triggerFile) {, +			this.triggerFile = triggerFile;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.util.StringUtils;, +		@EventListener, +		public void onClassPathChanged(ClassPathChangedEvent event) {, +			if (event.isRestartRequired()) {, +				getFileSystemWatcher().stop();, +				Restarter.getInstance().restart();, +			}, +		}, +			return new ClassPathFileSystemWatcher(getFileSystemWatcher(),, +		@Bean, +		public FileSystemWatcher getFileSystemWatcher() {, +			FileSystemWatcher watcher = new FileSystemWatcher();, +			String triggerFile = this.properties.getRestart().getTriggerFile();, +			if (StringUtils.hasLength(triggerFile)) {, +				watcher.setTriggerFilter(new TriggerFileFilter(triggerFile));, +			return watcher;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +		/**, +		 * The name of specific that that when changed will will trigger the restart. If, +		 * not specified any classpath file change will trigger the restart., +		 */, +		private String triggerFile;, +, +		public String getTriggerFile() {, +			return this.triggerFile;, +		}, +, +		public void setTriggerFile(String triggerFile) {, +			this.triggerFile = triggerFile;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.util.StringUtils;, +		@EventListener, +		public void onClassPathChanged(ClassPathChangedEvent event) {, +			if (event.isRestartRequired()) {, +				getFileSystemWatcher().stop();, +				Restarter.getInstance().restart();, +			}, +		}, +			return new ClassPathFileSystemWatcher(getFileSystemWatcher(),, +		@Bean, +		public FileSystemWatcher getFileSystemWatcher() {, +			FileSystemWatcher watcher = new FileSystemWatcher();, +			String triggerFile = this.properties.getRestart().getTriggerFile();, +			if (StringUtils.hasLength(triggerFile)) {, +				watcher.setTriggerFilter(new TriggerFileFilter(triggerFile));, +			return watcher;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/TriggerFileFilter.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.devtools.autoconfigure;, +, +import java.io.File;, +import java.io.FileFilter;]