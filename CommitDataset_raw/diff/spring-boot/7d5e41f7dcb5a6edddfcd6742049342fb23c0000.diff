[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameters.java, +	 * Return if any of the contained parameters are, +	 * {@link OperationParameter#isMandatory() mandatory}., +	 * @return if any parameters are mandatory, +	 */, +	default boolean hasMandatoryParameter() {, +		return stream().anyMatch(OperationParameter::isMandatory);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameters.java, +	 * Return if any of the contained parameters are, +	 * {@link OperationParameter#isMandatory() mandatory}., +	 * @return if any parameters are mandatory, +	 */, +	default boolean hasMandatoryParameter() {, +		return stream().anyMatch(OperationParameter::isMandatory);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameter.java, +	public boolean isMandatory() {, +		return ObjectUtils.isEmpty(this.parameter.getAnnotationsByType(Nullable.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameters.java, +	 * Return if any of the contained parameters are, +	 * {@link OperationParameter#isMandatory() mandatory}., +	 * @return if any parameters are mandatory, +	 */, +	default boolean hasMandatoryParameter() {, +		return stream().anyMatch(OperationParameter::isMandatory);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameter.java, +	public boolean isMandatory() {, +		return ObjectUtils.isEmpty(this.parameter.getAnnotationsByType(Nullable.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java, +		if (!parameter.isMandatory()) {, +			return true;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameters.java, +	 * Return if any of the contained parameters are, +	 * {@link OperationParameter#isMandatory() mandatory}., +	 * @return if any parameters are mandatory, +	 */, +	default boolean hasMandatoryParameter() {, +		return stream().anyMatch(OperationParameter::isMandatory);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameter.java, +	public boolean isMandatory() {, +		return ObjectUtils.isEmpty(this.parameter.getAnnotationsByType(Nullable.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java, +		if (!parameter.isMandatory()) {, +			return true;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import java.util.Objects;, +			return arguments.values().stream().anyMatch(Objects::nonNull);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameter.java, +	 * Return if the parameter is mandatory (does not accept null values)., +	 * @return if the parameter is mandatory, +	boolean isMandatory();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/OperationParameters.java, +	 * Return if any of the contained parameters are, +	 * {@link OperationParameter#isMandatory() mandatory}., +	 * @return if any parameters are mandatory, +	 */, +	default boolean hasMandatoryParameter() {, +		return stream().anyMatch(OperationParameter::isMandatory);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/OperationMethodParameter.java, +	public boolean isMandatory() {, +		return ObjectUtils.isEmpty(this.parameter.getAnnotationsByType(Nullable.class));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java, +		if (!parameter.isMandatory()) {, +			return true;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java, +import java.util.Objects;]