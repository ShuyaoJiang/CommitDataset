[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +			TomcatResources.get(context).addClasspathResources();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +			TomcatResources.get(context).addClasspathResources();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatResources.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.embedded.tomcat;, +, +import java.io.File;, +import java.lang.reflect.Method;, +import java.net.MalformedURLException;, +import java.net.URL;, +import java.net.URLClassLoader;, +, +import javax.servlet.ServletContext;, +, +import org.apache.catalina.Context;, +import org.apache.catalina.core.StandardContext;, +import org.apache.naming.resources.FileDirContext;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * Abstraction to add resources that works with both Tomcat 8 and 7., + * , + * @author Dave Syer, + * @author Phillip Webb, + */, +abstract class TomcatResources {, +, +	private final Context context;, +, +	public TomcatResources(Context context) {, +		this.context = context;, +	}, +, +	/**, +	 * Add resources from the classpath, +	 */, +	public void addClasspathResources() {, +		ClassLoader loader = getClass().getClassLoader();, +		if (loader instanceof URLClassLoader) {, +			for (URL url : ((URLClassLoader) loader).getURLs()) {, +				String file = url.getFile();, +				if (file.endsWith(".jar") || file.endsWith(".jar!/")) {, +					String jar = url.toString();, +					if (!jar.startsWith("jar:")) {, +						// A jar file in the file system. Convert to Jar URL., +						jar = "jar:" + jar + "!/";, +					}, +					addJar(jar);, +				}, +				else if (url.toString().startsWith("file:")) {, +					String dir = url.toString().substring("file:".length());, +					if (new File(dir).isDirectory()) {, +						addDir(dir, url);, +					}, +				}, +			}, +		}, +	}, +, +	protected final Context getContext() {, +		return this.context;, +	}, +, +	/**, +	 * Called to add a JAR to the resources., +	 * @param jar the URL spec for the jar, +	 */, +	protected abstract void addJar(String jar);, +, +	/**, +	 * Called to add a dir to the resource., +	 * @param dir the dir, +	 * @param url the URL, +	 */, +	protected abstract void addDir(String dir, URL url);, +, +	/**, +	 * Return a {@link TomcatResources} instance for the currently running Tomcat version., +	 * @param context the tomcat context, +	 * @return a {@link TomcatResources} instance., +	 */, +	public static TomcatResources get(Context context) {]