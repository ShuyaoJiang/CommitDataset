[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.MetricsEndpointMetricReader;, +import org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(MetricExportProperties.class), +	private List<MetricReader> readers;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +, +, +		MetricReader reader = endpointReader;, +		if (reader == null && !this.readers.isEmpty()) {, +			reader = new CompositeMetricReader(this.readers.toArray(new MetricReader[0]));, +		}, +, +		if (reader != null) {, +			MetricExporters exporters = new MetricExporters(reader, writers, this.metrics);, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.MetricsEndpointMetricReader;, +import org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(MetricExportProperties.class), +	private List<MetricReader> readers;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +, +, +		MetricReader reader = endpointReader;, +		if (reader == null && !this.readers.isEmpty()) {, +			reader = new CompositeMetricReader(this.readers.toArray(new MetricReader[0]));, +		}, +, +		if (reader != null) {, +			MetricExporters exporters = new MetricExporters(reader, writers, this.metrics);, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/MetricsEndpoint.java, +	public void registerPublicMetrics(PublicMetrics metrics) {, +		this.publicMetrics.add(metrics);, +		AnnotationAwareOrderComparator.sort(this.publicMetrics);, +	}, +, +	public void unregisterPublicMetrics(PublicMetrics metrics) {, +		this.publicMetrics.remove(metrics);, +	}, +, +		List<PublicMetrics> metrics = new ArrayList<PublicMetrics>(this.publicMetrics);, +		for (PublicMetrics publicMetric : metrics) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.MetricsEndpointMetricReader;, +import org.springframework.boot.actuate.metrics.reader.CompositeMetricReader;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(MetricExportProperties.class), +	private List<MetricReader> readers;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +, +, +		MetricReader reader = endpointReader;, +		if (reader == null && !this.readers.isEmpty()) {, +			reader = new CompositeMetricReader(this.readers.toArray(new MetricReader[0]));, +		}, +, +		if (reader != null) {, +			MetricExporters exporters = new MetricExporters(reader, writers, this.metrics);, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/MetricsEndpoint.java, +	public void registerPublicMetrics(PublicMetrics metrics) {, +		this.publicMetrics.add(metrics);, +		AnnotationAwareOrderComparator.sort(this.publicMetrics);, +	}, +, +	public void unregisterPublicMetrics(PublicMetrics metrics) {, +		this.publicMetrics.remove(metrics);, +	}, +, +		List<PublicMetrics> metrics = new ArrayList<PublicMetrics>(this.publicMetrics);, +		for (PublicMetrics publicMetric : metrics) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/MetricsEndpointMetricReader.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]