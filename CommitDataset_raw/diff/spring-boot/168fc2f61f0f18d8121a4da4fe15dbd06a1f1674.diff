[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +If <<using-spring-boot.adoc#using-boot-devtools,`devtools`>> has been added to your project, +it will automatically monitor your application for changes. Alternatively, you can also, +run the application so that your static classpath resources (i.e. in `src/main/resources`, +by default) are reloadable in the live application, which can be helpful at development, +time., +		addResources = true, +Making static classpath resources reloadable means that `bootRun` does not use the output, +of the `processResources` task, i.e., when invoked using `bootRun`, your application will, +use the resources in their unprocessed form., +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +If <<using-spring-boot.adoc#using-boot-devtools,`devtools`>> has been added to your project, +it will automatically monitor your application for changes. Alternatively, you can also, +run the application so that your static classpath resources (i.e. in `src/main/resources`, +by default) are reloadable in the live application, which can be helpful at development, +time., +		addResources = true, +Making static classpath resources reloadable means that `bootRun` does not use the output, +of the `processResources` task, i.e., when invoked using `bootRun`, your application will, +use the resources in their unprocessed form., +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +and usually also hot-swapping of Java class changes)., +Finally, the <<build-tool-plugins.adoc#build-tool-plugins, Maven and Gradle plugins>> can, +be configured to support running from the command line with reloading of static files. You, +can use that with an external css/js compiler process if you are writing that code with, +higher level tools., +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +If <<using-spring-boot.adoc#using-boot-devtools,`devtools`>> has been added to your project, +it will automatically monitor your application for changes. Alternatively, you can also, +run the application so that your static classpath resources (i.e. in `src/main/resources`, +by default) are reloadable in the live application, which can be helpful at development, +time., +		addResources = true, +Making static classpath resources reloadable means that `bootRun` does not use the output, +of the `processResources` task, i.e., when invoked using `bootRun`, your application will, +use the resources in their unprocessed form., +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +and usually also hot-swapping of Java class changes)., +Finally, the <<build-tool-plugins.adoc#build-tool-plugins, Maven and Gradle plugins>> can, +be configured to support running from the command line with reloading of static files. You, +can use that with an external css/js compiler process if you are writing that code with, +higher level tools., +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/BootRunTask.java, +	 * directly to the classpath. When enabled, this allows live in-place editing, +	 * of resources. Duplicate resources are removed from the resource output, +	private boolean addResources = false;, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +If <<using-spring-boot.adoc#using-boot-devtools,`devtools`>> has been added to your project, +it will automatically monitor your application for changes. Alternatively, you can also, +run the application so that your static classpath resources (i.e. in `src/main/resources`, +by default) are reloadable in the live application, which can be helpful at development, +time., +		addResources = true, +Making static classpath resources reloadable means that `bootRun` does not use the output, +of the `processResources` task, i.e., when invoked using `bootRun`, your application will, +use the resources in their unprocessed form., +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +and usually also hot-swapping of Java class changes)., +Finally, the <<build-tool-plugins.adoc#build-tool-plugins, Maven and Gradle plugins>> can, +be configured to support running from the command line with reloading of static files. You, +can use that with an external css/js compiler process if you are writing that code with, +higher level tools., +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/BootRunTask.java, +	 * directly to the classpath. When enabled, this allows live in-place editing, +	 * of resources. Duplicate resources are removed from the resource output, +	private boolean addResources = false;, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * them to appear twice if {@code ClassLoader.getResources()} is called. Please consider, +	 * adding {@code spring-boot-devtools} to your project instead as it provides this feature, +	 * and many more., +	@Parameter(property = "run.addResources", defaultValue = "false"), +	private boolean addResources = false;, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +If <<using-spring-boot.adoc#using-boot-devtools,`devtools`>> has been added to your project, +it will automatically monitor your application for changes. Alternatively, you can also, +run the application so that your static classpath resources (i.e. in `src/main/resources`, +by default) are reloadable in the live application, which can be helpful at development, +time., +		addResources = true, +Making static classpath resources reloadable means that `bootRun` does not use the output, +of the `processResources` task, i.e., when invoked using `bootRun`, your application will, +use the resources in their unprocessed form., +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +and usually also hot-swapping of Java class changes)., +Finally, the <<build-tool-plugins.adoc#build-tool-plugins, Maven and Gradle plugins>> can, +be configured to support running from the command line with reloading of static files. You, +can use that with an external css/js compiler process if you are writing that code with, +higher level tools., +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/BootRunTask.java, +	 * directly to the classpath. When enabled, this allows live in-place editing, +	 * of resources. Duplicate resources are removed from the resource output]