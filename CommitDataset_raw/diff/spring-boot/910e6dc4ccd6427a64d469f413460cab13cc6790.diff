[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		schedulerFactoryBean, +				.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		schedulerFactoryBean, +				.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	/**, +	 * Allows to reschedule existing jobs., +	 */, +	private boolean overwriteExistingJobs = false;, +, +	public boolean isOverwriteExistingJobs() {, +		return this.overwriteExistingJobs;, +	}, +, +	public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {, +		this.overwriteExistingJobs = overwriteExistingJobs;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		schedulerFactoryBean, +				.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	/**, +	 * Allows to reschedule existing jobs., +	 */, +	private boolean overwriteExistingJobs = false;, +, +	public boolean isOverwriteExistingJobs() {, +		return this.overwriteExistingJobs;, +	}, +, +	public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {, +		this.overwriteExistingJobs = overwriteExistingJobs;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +import org.quartz.SimpleTrigger;, +	public void withOverwriteExistingJobsParameter() {, +		this.contextRunner.withUserConfiguration(OverwriteTriggerConfiguration.class), +				.withPropertyValues("spring.quartz.overwriteExistingJobs=true",, +						"test-name=withConfiguredJobAndOverwrittenTrigger"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Scheduler.class);, +					Scheduler scheduler = context.getBean(Scheduler.class);, +					assertThat(scheduler.getJobDetail(JobKey.jobKey("fooJob"))), +							.isNotNull();, +					Trigger fooTrigger = scheduler, +							.getTrigger(TriggerKey.triggerKey("fooTrigger"));, +					assertThat(fooTrigger).isNotNull();, +					assertThat(((SimpleTrigger) fooTrigger).getRepeatInterval()), +							.isEqualTo(30000);, +					Thread.sleep(1000L);, +					this.output.expect(, +							containsString("withConfiguredJobAndOverwrittenTrigger"));, +					this.output.expect(containsString("jobDataValue"));, +				});, +	}, +, +	@Test, +	@Import(QuartzFullConfiguration.class), +	protected static class OverwriteTriggerConfiguration extends BaseQuartzConfiguration {, +, +		@Bean, +		public Trigger anotherFooTrigger(JobDetail fooJob) {, +			SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule(), +					.withIntervalInSeconds(30).repeatForever();, +, +			return TriggerBuilder.newTrigger().forJob(fooJob).withIdentity("fooTrigger"), +					.withSchedule(scheduleBuilder).build();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		schedulerFactoryBean, +				.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	/**, +	 * Allows to reschedule existing jobs., +	 */, +	private boolean overwriteExistingJobs = false;, +, +	public boolean isOverwriteExistingJobs() {, +		return this.overwriteExistingJobs;, +	}, +, +	public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {, +		this.overwriteExistingJobs = overwriteExistingJobs;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +import org.quartz.SimpleTrigger;, +	public void withOverwriteExistingJobsParameter() {, +		this.contextRunner.withUserConfiguration(OverwriteTriggerConfiguration.class), +				.withPropertyValues("spring.quartz.overwriteExistingJobs=true",, +						"test-name=withConfiguredJobAndOverwrittenTrigger"), +				.run((context) -> {]