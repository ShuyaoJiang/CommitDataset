[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +		int openBracketCount = 0;, +			if (ch == ']') {, +				openBracketCount--;, +				if (openBracketCount == 0) {, +			}, +			else if (ch == '[') {, +				openBracketCount++;, +				if (!indexed) {, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +		int openBracketCount = 0;, +			if (ch == ']') {, +				openBracketCount--;, +				if (openBracketCount == 0) {, +			}, +			else if (ch == '[') {, +				openBracketCount++;, +				if (!indexed) {, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +	@Test, +	public void bindingWithSquareBracketMap() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.[x [B] y]", "[ball]");, +		this.sources.add(source);, +		Map<String, String> map = this.binder.bind("foo", STRING_STRING_MAP).get();, +		assertThat(map).containsEntry("x [B] y", "[ball]");, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +		int openBracketCount = 0;, +			if (ch == ']') {, +				openBracketCount--;, +				if (openBracketCount == 0) {, +			}, +			else if (ch == '[') {, +				openBracketCount++;, +				if (!indexed) {, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +	@Test, +	public void bindingWithSquareBracketMap() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.[x [B] y]", "[ball]");, +		this.sources.add(source);, +		Map<String, String> map = this.binder.bind("foo", STRING_STRING_MAP).get();, +		assertThat(map).containsEntry("x [B] y", "[ball]");, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java, +	public void ofNameWhenMultipleMismatchedBrackets() throws Exception {, +		this.thrown.expect(IllegalArgumentException.class);, +		this.thrown.expectMessage("is not valid");, +		ConfigurationPropertyName.of("[a[[[b]ar]");, +	}, +, +	@Test, +	public void ofNameWhenNestedBrackets() throws Exception {, +		ConfigurationPropertyName name = ConfigurationPropertyName.of("foo[a[c][[b]ar]]");, +		assertThat(name.toString()).isEqualTo("foo[a[c][[b]ar]]");, +		assertThat(name.getElement(0, Form.ORIGINAL)).isEqualTo("foo");, +		assertThat(name.getElement(1, Form.ORIGINAL)).isEqualTo("a[c][[b]ar]");, +	}, +, +	@Test]