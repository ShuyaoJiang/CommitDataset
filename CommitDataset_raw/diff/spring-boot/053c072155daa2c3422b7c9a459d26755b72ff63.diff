[+++ b/spring-boot-tools/spring-boot-loader/pom.xml, +	<dependencies>, +		<!-- TODO: maybe put these in the parent? -->, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>jcl-over-slf4j</artifactId>, +		</dependency>, +		<dependency>, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +		</dependency>, +	</dependencies>, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +	<dependencies>, +		<!-- TODO: maybe put these in the parent? -->, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>jcl-over-slf4j</artifactId>, +		</dependency>, +		<dependency>, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +		</dependency>, +	</dependencies>, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +, +					path = SystemPropertyUtils.resolvePlaceholders(path);, +			if (!this.paths.get(i).endsWith("/")) {, +				// Always a directory, +				this.paths.set(i, this.paths.get(i) + "/");, +			}, +				// No need for current dir path, +				// Empty path is always on the classpath so no need for it to be, +				// explicitly listed here, +			return SystemPropertyUtils.resolvePlaceholders(System.getProperty(MAIN));, +			return SystemPropertyUtils.resolvePlaceholders(this.properties, +					.getProperty(MAIN));, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +	<dependencies>, +		<!-- TODO: maybe put these in the parent? -->, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>jcl-over-slf4j</artifactId>, +		</dependency>, +		<dependency>, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +		</dependency>, +	</dependencies>, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +, +					path = SystemPropertyUtils.resolvePlaceholders(path);, +			if (!this.paths.get(i).endsWith("/")) {, +				// Always a directory, +				this.paths.set(i, this.paths.get(i) + "/");, +			}, +				// No need for current dir path, +				// Empty path is always on the classpath so no need for it to be, +				// explicitly listed here, +			return SystemPropertyUtils.resolvePlaceholders(System.getProperty(MAIN));, +			return SystemPropertyUtils.resolvePlaceholders(this.properties, +					.getProperty(MAIN));, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +	<dependencies>, +		<!-- TODO: maybe put these in the parent? -->, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>jcl-over-slf4j</artifactId>, +		</dependency>, +		<dependency>, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +		</dependency>, +	</dependencies>, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +, +					path = SystemPropertyUtils.resolvePlaceholders(path);, +			if (!this.paths.get(i).endsWith("/")) {, +				// Always a directory, +				this.paths.set(i, this.paths.get(i) + "/");, +			}, +				// No need for current dir path, +				// Empty path is always on the classpath so no need for it to be, +				// explicitly listed here, +			return SystemPropertyUtils.resolvePlaceholders(System.getProperty(MAIN));, +			return SystemPropertyUtils.resolvePlaceholders(this.properties, +					.getProperty(MAIN));, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, + * A text may contain {@code $ ...} placeholders, to be resolved as system properties:, + * e.g. {@code $ user.dir} . Default values can be supplied using the ":" separator, + * <p>, + * , + * Adapted from Spring., + * ]