[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java, +				logger.info("Jetty started on port(s) " + getActualPortsDescription(), +			logger.info("could not determine port ( " + ex.getMessage() + ")");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java, +				logger.info("Jetty started on port(s) " + getActualPortsDescription(), +			logger.info("could not determine port ( " + ex.getMessage() + ")");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +			logger.info("Netty started on port(s): " + getPort());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java, +				logger.info("Jetty started on port(s) " + getActualPortsDescription(), +			logger.info("could not determine port ( " + ex.getMessage() + ")");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +			logger.info("Netty started on port(s): " + getPort());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +		doWithThreadContextClassLoader(getLoader().getClassLoader(), () -> {, +		});, +	}, +, +	/**, +	 * Some older Servlet frameworks (e.g. Struts, BIRT) use the Thread context class, +	 * loader to create servlet instances in this phase. If they do that and then try to, +	 * initialize them later the class loader may have changed, so wrap the call to, +	 * loadOnStartup in what we think its going to be the main webapp classloader at, +	 * runtime., +	 * @param classLoader the class loader to use, +	 * @param code the code to run, +	 */, +	private void doWithThreadContextClassLoader(ClassLoader classLoader, Runnable code) {, +		ClassLoader existingLoader = (classLoader != null), +				? ClassUtils.overrideThreadContextClassLoader(classLoader) : null;, +		try {, +			code.run();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java, +				logger.info("Jetty started on port(s) " + getActualPortsDescription(), +			logger.info("could not determine port ( " + ex.getMessage() + ")");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +			logger.info("Netty started on port(s): " + getPort());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +		doWithThreadContextClassLoader(getLoader().getClassLoader(), () -> {, +		});, +	}, +, +	/**, +	 * Some older Servlet frameworks (e.g. Struts, BIRT) use the Thread context class, +	 * loader to create servlet instances in this phase. If they do that and then try to, +	 * initialize them later the class loader may have changed, so wrap the call to, +	 * loadOnStartup in what we think its going to be the main webapp classloader at, +	 * runtime., +	 * @param classLoader the class loader to use, +	 * @param code the code to run, +	 */, +	private void doWithThreadContextClassLoader(ClassLoader classLoader, Runnable code) {, +		ClassLoader existingLoader = (classLoader != null), +				? ClassUtils.overrideThreadContextClassLoader(classLoader) : null;, +		try {, +			code.run();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatWebServer.java, +		logger.info("Tomcat initialized with port(s): " + getPortsDescription(false));, +				logger.info("Tomcat started on port(s): " + getPortsDescription(true), +			logger.error("Cannot pause connector: ", ex);, +			logger.error("Cannot start connector: ", ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyWebServer.java, +				logger.info("Jetty started on port(s) " + getActualPortsDescription(), +			logger.info("could not determine port ( " + ex.getMessage() + ")");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +			logger.info("Netty started on port(s): " + getPort());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +		doWithThreadContextClassLoader(getLoader().getClassLoader(), () -> {, +		});, +	}, +, +	/**, +	 * Some older Servlet frameworks (e.g. Struts, BIRT) use the Thread context class, +	 * loader to create servlet instances in this phase. If they do that and then try to, +	 * initialize them later the class loader may have changed, so wrap the call to, +	 * loadOnStartup in what we think its going to be the main webapp classloader at, +	 * runtime., +	 * @param classLoader the class loader to use, +	 * @param code the code to run, +	 */, +	private void doWithThreadContextClassLoader(ClassLoader classLoader, Runnable code) {, +		ClassLoader existingLoader = (classLoader != null), +				? ClassUtils.overrideThreadContextClassLoader(classLoader) : null;, +		try {, +			code.run();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatWebServer.java, +		logger.info("Tomcat initialized with port(s): " + getPortsDescription(false));, +				logger.info("Tomcat started on port(s): " + getPortsDescription(true), +			logger.error("Cannot pause connector: ", ex);, +			logger.error("Cannot start connector: ", ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java, +				logger.info("Undertow started on port(s) " + getPortsDescription());]