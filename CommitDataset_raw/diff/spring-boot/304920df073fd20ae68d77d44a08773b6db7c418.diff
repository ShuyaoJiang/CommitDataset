[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +	@ConditionalOnWebApplication, +		@Autowired, +		private SpringTemplateEngine templateEngine;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +	@ConditionalOnWebApplication, +		@Autowired, +		private SpringTemplateEngine templateEngine;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java, +import org.springframework.web.servlet.ViewResolver;, +import static org.hamcrest.Matchers.containsString;, +import static org.junit.Assert.assertThat;, +	private AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +	@Test, +	public void useDataDialect() throws Exception {, +		this.context.register(ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		TemplateEngine engine = this.context.getBean(TemplateEngine.class);, +		Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar"));, +		String result = engine.process("data-dialect", attrs);, +		assertEquals("<html><body data-foo=\"bar\"></body></html>", result);, +	}, +, +	@Test, +	public void renderTemplate() throws Exception {, +		this.context.register(ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		TemplateEngine engine = this.context.getBean(TemplateEngine.class);, +		Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar"));, +		String result = engine.process("home", attrs);, +		assertEquals("<html><body>bar</body></html>", result);, +	}, +, +	@Test, +	public void renderNonWebAppTemplate() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		assertEquals(0, context.getBeanNamesForType(ViewResolver.class).length);, +		try {, +			TemplateEngine engine = context.getBean(TemplateEngine.class);, +			Context attrs = new Context(Locale.UK, Collections.singletonMap("greeting",, +					"Hello World"));, +			String result = engine.process("message", attrs);, +			assertThat(result, containsString("Hello World"));, +		}, +		finally {, +			context.close();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +	@ConditionalOnWebApplication, +		@Autowired, +		private SpringTemplateEngine templateEngine;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java, +import org.springframework.web.servlet.ViewResolver;, +import static org.hamcrest.Matchers.containsString;, +import static org.junit.Assert.assertThat;, +	private AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +	@Test, +	public void useDataDialect() throws Exception {, +		this.context.register(ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		TemplateEngine engine = this.context.getBean(TemplateEngine.class);, +		Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar"));, +		String result = engine.process("data-dialect", attrs);, +		assertEquals("<html><body data-foo=\"bar\"></body></html>", result);, +	}, +, +	@Test, +	public void renderTemplate() throws Exception {, +		this.context.register(ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		TemplateEngine engine = this.context.getBean(TemplateEngine.class);, +		Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar"));, +		String result = engine.process("home", attrs);, +		assertEquals("<html><body>bar</body></html>", result);, +	}, +, +	@Test, +	public void renderNonWebAppTemplate() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		assertEquals(0, context.getBeanNamesForType(ViewResolver.class).length);, +		try {, +			TemplateEngine engine = context.getBean(TemplateEngine.class);, +			Context attrs = new Context(Locale.UK, Collections.singletonMap("greeting",, +					"Hello World"));]