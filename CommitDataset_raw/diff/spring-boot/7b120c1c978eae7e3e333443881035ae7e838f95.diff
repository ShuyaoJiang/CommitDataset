[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for the, + * {@link IntegrationGraphEndpoint}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for the, + * {@link IntegrationGraphEndpoint}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of, + * {@link org.springframework.web.reactive.function.client.WebClient}., + * <p>, + * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in, + * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri", + * tags., +	public MetricsWebClientCustomizer metricsWebClientCustomizer(, +			MeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for the, + * {@link IntegrationGraphEndpoint}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of, + * {@link org.springframework.web.reactive.function.client.WebClient}., + * <p>, + * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in, + * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri", + * tags., +	public MetricsWebClientCustomizer metricsWebClientCustomizer(, +			MeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring, + * WebFlux applications., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for the, + * {@link IntegrationGraphEndpoint}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of, + * {@link org.springframework.web.reactive.function.client.WebClient}., + * <p>, + * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in, + * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri", + * tags., +	public MetricsWebClientCustomizer metricsWebClientCustomizer(, +			MeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring, + * WebFlux applications., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(CacheConfiguration.class).run(, +				(context) -> assertThat(context).hasSingleBean(CachesEndpoint.class));, +		this.contextRunner.run(, +				(context) -> assertThat(context).hasSingleBean(CachesEndpoint.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +	private Class<?> getEndpointType(ConditionContext context, MethodMetadata metadata) {, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for the, + * {@link IntegrationGraphEndpoint}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of, + * {@link org.springframework.web.reactive.function.client.WebClient}., + * <p>, + * This is reusing the {@link io.micrometer.core.instrument.config.MeterFilter} defined in, + * {@link RestTemplateMetricsAutoConfiguration} for limiting the cardinality of "uri", + * tags., +	public MetricsWebClientCustomizer metricsWebClientCustomizer(, +			MeterRegistry meterRegistry, WebClientExchangeTagsProvider tagsProvider,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for instrumentation of Spring, + * WebFlux applications., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(CacheConfiguration.class).run(, +				(context) -> assertThat(context).hasSingleBean(CachesEndpoint.class));, +		this.contextRunner.run(, +				(context) -> assertThat(context).hasSingleBean(CachesEndpoint.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpointTests.java, +		this.contextRunner, +				.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class,, +						ComponentEnabledIfEndpointIsEnabledConfiguration.class), +				.run((context) -> assertThat(context).hasBean("fooComponent"));, +				.run((context) -> assertThat(context).hasBean("fooComponent"));]