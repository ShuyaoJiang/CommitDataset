[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +, + * @author Madhura Bhave, +	private RelaxedPropertyResolver securityPropertyResolver;, +		this.securityPropertyResolver = new RelaxedPropertyResolver(environment,, +	public Object invoke(HttpServletRequest request) {, +		Health health = getHealth(request);, +	private Health getHealth(HttpServletRequest request) {, +		if (exposeHealthDetails(request)) {, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +		if (!this.secure) {, +			return true;, +		String[] roles = StringUtils.commaDelimitedListToStringArray(, +				this.securityPropertyResolver.getProperty("roles", "ROLE_ACTUATOR"));, +		roles = StringUtils.trimArrayElements(roles);, +			if (request.isUserInRole(role) || request.isUserInRole("ROLE_" + role)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +, + * @author Madhura Bhave, +	private RelaxedPropertyResolver securityPropertyResolver;, +		this.securityPropertyResolver = new RelaxedPropertyResolver(environment,, +	public Object invoke(HttpServletRequest request) {, +		Health health = getHealth(request);, +	private Health getHealth(HttpServletRequest request) {, +		if (exposeHealthDetails(request)) {, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +		if (!this.secure) {, +			return true;, +		String[] roles = StringUtils.commaDelimitedListToStringArray(, +				this.securityPropertyResolver.getProperty("roles", "ROLE_ACTUATOR"));, +		roles = StringUtils.trimArrayElements(roles);, +			if (request.isUserInRole(role) || request.isUserInRole("ROLE_" + role)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest();, +				.invoke(request);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryHealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import javax.servlet.http.HttpServletRequest;, +, + * @author Madhura Bhave, +	private RelaxedPropertyResolver securityPropertyResolver;, +		this.securityPropertyResolver = new RelaxedPropertyResolver(environment,, +	public Object invoke(HttpServletRequest request) {, +		Health health = getHealth(request);, +	private Health getHealth(HttpServletRequest request) {, +		if (exposeHealthDetails(request)) {, +	protected boolean exposeHealthDetails(HttpServletRequest request) {, +		if (!this.secure) {, +			return true;, +		String[] roles = StringUtils.commaDelimitedListToStringArray(, +				this.securityPropertyResolver.getProperty("roles", "ROLE_ACTUATOR"));, +		roles = StringUtils.trimArrayElements(roles);, +			if (request.isUserInRole(role) || request.isUserInRole("ROLE_" + role)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.mock.web.MockHttpServletRequest;, +		MockHttpServletRequest request = new MockHttpServletRequest();, +				.invoke(request);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockServletContext;, + * @author Madhura Bhave, +	private HttpServletRequest request = new MockHttpServletRequest();, +, +	private HttpServletRequest user = createAuthenticationToken(, +	private HttpServletRequest actuator = createAuthenticationToken(, +	private HttpServletRequest hero = createAuthenticationToken(, +	private HttpServletRequest createAuthenticationToken(, +			String role) {, +		MockServletContext servletContext = new MockServletContext();, +		servletContext.declareRoles(role);, +		return new MockHttpServletRequest(servletContext);, +		Object result = this.mvc.invoke(this.request);, +		Object result = this.mvc.invoke(this.request);, +		Object result = this.mvc.invoke(this.request);]