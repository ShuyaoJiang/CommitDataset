[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +			return new ReactiveHealthIndicatorRegistryFactory(), +					.createReactiveHealthIndicatorRegistry(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +			return new ReactiveHealthIndicatorRegistryFactory(), +					.createReactiveHealthIndicatorRegistry(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +			return new MeterFilter() {, +			};, +		Tags commonTags = Tags.of(tags.entrySet().stream(), +				.map((entry) -> Tag.of(entry.getKey(), entry.getValue())), +				.collect(Collectors.toList()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +			return new ReactiveHealthIndicatorRegistryFactory(), +					.createReactiveHealthIndicatorRegistry(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +			return new MeterFilter() {, +			};, +		Tags commonTags = Tags.of(tags.entrySet().stream(), +				.map((entry) -> Tag.of(entry.getKey(), entry.getValue())), +				.collect(Collectors.toList()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +		throw new IllegalStateException(, +				"No main read operation found from " + endpoint.getOperations());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +			return new ReactiveHealthIndicatorRegistryFactory(), +					.createReactiveHealthIndicatorRegistry(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +			return new MeterFilter() {, +			};, +		Tags commonTags = Tags.of(tags.entrySet().stream(), +				.map((entry) -> Tag.of(entry.getKey(), entry.getValue())), +				.collect(Collectors.toList()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +		throw new IllegalStateException(, +				"No main read operation found from " + endpoint.getOperations());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java, +					"Details of the health of a specific part of the" + " application."));, +		public DataSourceHealthIndicator dbHealthIndicator(DataSource dataSource) {, +			indicators.put("us1",, +					() -> Health.up().withDetail("version", "1.0.2").build());, +			indicators.put("us2",, +					() -> Health.up().withDetail("version", "1.0.4").build());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +		beans.forEach(, +				(name, source) -> registry.register(name, createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +			return new ReactiveHealthIndicatorRegistryFactory(), +					.createReactiveHealthIndicatorRegistry(, +							reactiveHealthIndicators, +									.getIfAvailable(Collections::emptyMap),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +			return new MeterFilter() {, +			};, +		Tags commonTags = Tags.of(tags.entrySet().stream(), +				.map((entry) -> Tag.of(entry.getKey(), entry.getValue())), +				.collect(Collectors.toList()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +		throw new IllegalStateException(, +				"No main read operation found from " + endpoint.getOperations());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java, +					"Details of the health of a specific part of the" + " application."));, +		public DataSourceHealthIndicator dbHealthIndicator(DataSource dataSource) {, +			indicators.put("us1",, +					() -> Health.up().withDetail("version", "1.0.2").build());, +			indicators.put("us2",, +					() -> Health.up().withDetail("version", "1.0.4").build());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, +			.withUserConfiguration(HealthIndicatorsConfiguration.class).withConfiguration(, +			assertThat(, +					extension.health(mock(SecurityContext.class)).getBody().getDetails()), +							.isEmpty();, +					assertThat(extension.health(securityContext).getBody().getDetails()), +					assertThat(extension.health(securityContext).getBody().getDetails()), +					assertThat(extension.health(securityContext).getBody().getDetails()), +			assertDetailsNotFound(, +					extension.healthForComponent(mock(SecurityContext.class), "simple"));]