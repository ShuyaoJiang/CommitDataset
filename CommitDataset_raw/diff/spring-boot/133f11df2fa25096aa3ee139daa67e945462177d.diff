[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.springframework.boot.env.PropertySourceLoader;, +import org.springframework.core.env.Environment;, +		private final List<PropertySourceLoader> propertySourceLoaders;, +		private Map<Profile, MutablePropertySources> loaded;, +, +			this.propertySourceLoaders = SpringFactoriesLoader.loadFactories(, +					PropertySourceLoader.class, getClass().getClassLoader());, +			this.activatedProfiles = false;, +			this.loaded = new LinkedHashMap<>();, +			initializeProfiles();, +			while (!this.profiles.isEmpty()) {, +				Profile profile = this.profiles.poll();, +				for (String location : getSearchLocations()) {, +					if (!location.endsWith("/")) {, +						// location is a filename already, so don't search for more, +						// filenames, +						load(profile, location, null);, +					}, +					else {, +						for (String name : getSearchNames()) {, +							load(profile, location, name);, +						}, +					}, +				}, +				this.processedProfiles.add(profile);, +			}, +			addLoadedPropertySources();, +		}, +		/**, +		 * Initialize profile information from both the {@link Environment} active, +		 * profiles and any {@code spring.profiles.active}/{@code spring.profiles.include}, +		 * properties that are already set., +		 */, +		private void initializeProfiles() {, +			Binder binder = Binder.get(this.environment);, +			Set<Profile> activeProfiles = new LinkedHashSet<>();, +			activeProfiles.addAll(getProfiles(binder, ACTIVE_PROFILES_PROPERTY));, +			activeProfiles.addAll(getProfiles(binder, INCLUDE_PROFILES_PROPERTY));, +		/**, +		 * Load an actual property source file., +		 * @param profile the profile being loaded, +		 * @param location the location of the resource, +		 * @param name an optional name to be combined with the location, +		 */, +		private void load(Profile profile, String location, String name) {, +				for (PropertySourceLoader loader : this.propertySourceLoaders) {, +					if (canLoadFileExtension(loader, location)) {, +						load(loader, profile, location,, +								(profile == null ? null : profile.getName()));, +				}, +			}, +			for (PropertySourceLoader loader : this.propertySourceLoaders) {, +				for (String ext : loader.getFileExtensions()) {, +					loadForFileExtention(loader, profile, location + name, "." + ext);, +				}, +			}, +		}, +, +		private boolean canLoadFileExtension(PropertySourceLoader loader, String name) {, +			return Arrays.stream(loader.getFileExtensions()).map(String::toLowerCase), +					.anyMatch(name.toLowerCase()::endsWith);, +		}, +, +		private void loadForFileExtention(PropertySourceLoader loader, Profile profile,, +				String prefix, String ext) {, +				load(loader, profile, prefix + "-" + profile + ext, null);, +				// Support profile section in profile file (gh-340), +				load(loader, profile, prefix + "-" + profile + ext, profile.getName());, +				// Try profile specific sections in files we've already processed, +						String previouslyLoaded = prefix + "-" + processedProfile + ext;, +						load(loader, profile, previouslyLoaded, profile.getName());, +			load(loader, profile, prefix + ext,, +, +		private void load(PropertySourceLoader loader, Profile profile, String location,, +				String loadProfile) {, +			try {, +				Resource resource = this.resourceLoader.getResource(location);, +				String description = getDescription(profile, location, resource);, +					description = description + " for profile " + profile;, +					this.logger.trace("Skipped missing config " + description);, +					return;, +				if (!StringUtils.hasText(, +						StringUtils.getFilenameExtension(resource.getFilename()))) {, +					this.logger.trace("Skipped empty config extension " + description);, +					return;, +				String name = "applicationConfig: [" + location + "]", +						+ (loadProfile == null ? "" : "#" + loadProfile);, +				PropertySource<?> loaded = loader.load(name, resource, loadProfile);, +				if (loaded == null) {, +					this.logger.trace("Skipped unloaded config " + description);, +					return;, +				}, +				handleProfileProperties(loaded);, +				this.loaded.computeIfAbsent(profile, (k) -> new MutablePropertySources()), +						.addLast(loaded);, +				this.logger.debug("Loaded config file " + description);, +			}]