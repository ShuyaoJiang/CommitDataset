[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		prefix = prefix.endsWith(".") ? prefix : prefix + ".";, +			if (key.startsWith(prefix)) {, +				target.put(key.substring(prefix.length()), source.get(key));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		prefix = prefix.endsWith(".") ? prefix : prefix + ".";, +			if (key.startsWith(prefix)) {, +				target.put(key.substring(prefix.length()), source.get(key));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisor.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import org.springframework.boot.context.properties.bind.AbstractBindHandler;, +import org.springframework.boot.context.properties.bind.BindHandler;, +, +/**, + * Allows additional functionality to be applied to the {@link BindHandler} used by the, + * {@link ConfigurationPropertiesBindingPostProcessor}., + *, + * @author Phillip Webb, + * @since 2.1.0, + * @see AbstractBindHandler, + */, +@FunctionalInterface, +public interface ConfigurationPropertiesBindHandlerAdvisor {, +, +	/**, +	 * Apply additional functionality to the source bind handler., +	 * @param bindHandler the source bind handler, +	 * @return a replacement bind hander that delegates to the source and provides, +	 * additional functionality, +	 */, +	BindHandler apply(BindHandler bindHandler);, +, +}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		prefix = prefix.endsWith(".") ? prefix : prefix + ".";, +			if (key.startsWith(prefix)) {, +				target.put(key.substring(prefix.length()), source.get(key));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindHandlerAdvisor.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import org.springframework.boot.context.properties.bind.AbstractBindHandler;, +import org.springframework.boot.context.properties.bind.BindHandler;, +, +/**, + * Allows additional functionality to be applied to the {@link BindHandler} used by the, + * {@link ConfigurationPropertiesBindingPostProcessor}., + *, + * @author Phillip Webb, + * @since 2.1.0, + * @see AbstractBindHandler, + */, +@FunctionalInterface, +public interface ConfigurationPropertiesBindHandlerAdvisor {, +, +	/**, +	 * Apply additional functionality to the source bind handler., +	 * @param bindHandler the source bind handler, +	 * @return a replacement bind hander that delegates to the source and provides, +	 * additional functionality, +	 */, +	BindHandler apply(BindHandler bindHandler);, +, +}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java, +import java.util.stream.Collectors;, +		for (ConfigurationPropertiesBindHandlerAdvisor advisor : getBindHandlerAdvisors()) {, +			handler = advisor.apply(handler);]