[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final AuditEventRepository auditEventRepository;, +, +	public AuditAutoConfiguration(, +			ObjectProvider<AuditEventRepository> auditEventRepositoryProvider) {, +		this.auditEventRepository = auditEventRepositoryProvider.getIfAvailable();, +	}, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final AuditEventRepository auditEventRepository;, +, +	public AuditAutoConfiguration(, +			ObjectProvider<AuditEventRepository> auditEventRepositoryProvider) {, +		this.auditEventRepository = auditEventRepositoryProvider.getIfAvailable();, +	}, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +@ConditionalOnClass(PluginLifeCycle.class), +@EnableConfigurationProperties(ShellProperties.class), +	private final ShellProperties properties;, +, +	public CrshAutoConfiguration(ShellProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(PluginLifeCycle.class), +	public CrshBootstrapBean shellBootstrap() {, +		CrshBootstrapBean bootstrapBean = new CrshBootstrapBean();, +		bootstrapBean.setConfig(this.properties.asCrshShellConfig());, +		return bootstrapBean;, +	}, +, +	@Configuration, +	static class CrshAdditionalPropertiesConfiguration {, +	public static class AuthenticationManagerAdapterConfiguration {, +		private final ManagementServerProperties management;, +, +		public AuthenticationManagerAdapterConfiguration(, +				ObjectProvider<ManagementServerProperties> managementProvider) {, +			this.management = managementProvider.getIfAvailable();, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final AuditEventRepository auditEventRepository;, +, +	public AuditAutoConfiguration(, +			ObjectProvider<AuditEventRepository> auditEventRepositoryProvider) {, +		this.auditEventRepository = auditEventRepositoryProvider.getIfAvailable();, +	}, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +@ConditionalOnClass(PluginLifeCycle.class), +@EnableConfigurationProperties(ShellProperties.class), +	private final ShellProperties properties;, +, +	public CrshAutoConfiguration(ShellProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(PluginLifeCycle.class), +	public CrshBootstrapBean shellBootstrap() {, +		CrshBootstrapBean bootstrapBean = new CrshBootstrapBean();, +		bootstrapBean.setConfig(this.properties.asCrshShellConfig());, +		return bootstrapBean;, +	}, +, +	@Configuration, +	static class CrshAdditionalPropertiesConfiguration {, +	public static class AuthenticationManagerAdapterConfiguration {, +		private final ManagementServerProperties management;, +, +		public AuthenticationManagerAdapterConfiguration(, +				ObjectProvider<ManagementServerProperties> managementProvider) {, +			this.management = managementProvider.getIfAvailable();, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +	private final HealthAggregator healthAggregator;, +	private final Map<String, HealthIndicator> healthIndicators;, +	private final List<InfoContributor> infoContributors;, +	private final Collection<PublicMetrics> publicMetrics;, +	private final TraceRepository traceRepository;, +, +	public EndpointAutoConfiguration(, +			ObjectProvider<HealthAggregator> healthAggregatorProvider,, +			ObjectProvider<Map<String, HealthIndicator>> healthIndicatorsProvider,, +			ObjectProvider<List<InfoContributor>> infoContributorsProvider,, +			ObjectProvider<Collection<PublicMetrics>> publicMetricsProvider,]