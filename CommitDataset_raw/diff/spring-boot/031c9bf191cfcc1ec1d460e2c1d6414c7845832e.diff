[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.util.ClassUtils;, +		if (isUserAllowedAccess(request)) {, +			return true;, +		}, +		sendFailureResponse(request, response);, +		return false;, +	}, +, +	private boolean isUserAllowedAccess(HttpServletRequest request) {, +		AuthoritiesValidator authoritiesValidator = null;, +		if (isSpringSecurityAvailable()) {, +			authoritiesValidator = new AuthoritiesValidator();, +		}, +			if (authoritiesValidator != null && authoritiesValidator.hasAuthority(role)) {, +				return true;, +		}, +	private boolean isSpringSecurityAvailable() {, +		return ClassUtils.isPresent(, +				"org.springframework.security.config.annotation.web.WebSecurityConfigurer",, +				getClass().getClassLoader());, +	}, +, +	private class AuthoritiesValidator {, +, +		private boolean hasAuthority(String role) {, +			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +			if (authentication != null) {, +				for (GrantedAuthority authority : authentication.getAuthorities()) {, +					if (authority.getAuthority().equals(role)) {, +						return true;, +					}, +				}, +			}, +			return false;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.GrantedAuthority;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.util.ClassUtils;, +		if (isUserAllowedAccess(request)) {, +			return true;, +		}, +		sendFailureResponse(request, response);, +		return false;, +	}, +, +	private boolean isUserAllowedAccess(HttpServletRequest request) {, +		AuthoritiesValidator authoritiesValidator = null;, +		if (isSpringSecurityAvailable()) {, +			authoritiesValidator = new AuthoritiesValidator();, +		}, +			if (authoritiesValidator != null && authoritiesValidator.hasAuthority(role)) {, +				return true;, +		}, +	private boolean isSpringSecurityAvailable() {, +		return ClassUtils.isPresent(, +				"org.springframework.security.config.annotation.web.WebSecurityConfigurer",, +				getClass().getClassLoader());, +	}, +, +	private class AuthoritiesValidator {, +, +		private boolean hasAuthority(String role) {, +			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +			if (authentication != null) {, +				for (GrantedAuthority authority : authentication.getAuthorities()) {, +					if (authority.getAuthority().equals(role)) {, +						return true;, +					}, +				}, +			}, +			return false;, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptorTests.java, +import java.util.Collections;, +import java.util.Set;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.authority.SimpleGrantedAuthority;, +import org.springframework.security.core.context.SecurityContextHolder;, +import static org.mockito.Mockito.doReturn;, +	@Test, +	public void sensitiveEndpointIfRoleNotCorrectShouldCheckAuthorities() throws Exception {, +		Principal principal = mock(Principal.class);, +		this.request.setUserPrincipal(principal);, +		Authentication authentication = mock(Authentication.class);, +		Set<SimpleGrantedAuthority> authorities = Collections.singleton(new SimpleGrantedAuthority("SUPER_HERO"));, +		doReturn(authorities).when(authentication).getAuthorities();, +		SecurityContextHolder.getContext().setAuthentication(authentication);, +		assertThat(this.securityInterceptor.preHandle(this.request, this.response,, +				this.handlerMethod)).isTrue();, +	}]