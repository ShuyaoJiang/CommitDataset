[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java, +import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions;, +		public CouchbaseCustomConversions myCustomConversions() {, +			return new CouchbaseCustomConversions(, +					Collections.singletonList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java, +import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions;, +		public CouchbaseCustomConversions myCustomConversions() {, +			return new CouchbaseCustomConversions(, +					Collections.singletonList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +		public MongoCustomConversions customConversions() {, +			return new MongoCustomConversions(Arrays.asList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java, +import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions;, +		public CouchbaseCustomConversions myCustomConversions() {, +			return new CouchbaseCustomConversions(, +					Collections.singletonList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +		public MongoCustomConversions customConversions() {, +			return new MongoCustomConversions(Arrays.asList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		@SuppressWarnings("resource"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java, +import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions;, +		public CouchbaseCustomConversions myCustomConversions() {, +			return new CouchbaseCustomConversions(, +					Collections.singletonList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +		public MongoCustomConversions customConversions() {, +			return new MongoCustomConversions(Arrays.asList(new MyConverter()));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		@SuppressWarnings("resource"), +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, +		this.initialMulticaster.multicastEvent(, +				new ApplicationStartingEvent(this.application, this.args));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelector.java, + * Variant of {@link AutoConfigurationImportSelector} for {@link ImportAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.data.mongodb.core.convert.MongoCustomConversions;, +			MongoCustomConversions conversions) {, +			MongoCustomConversions conversions) throws ClassNotFoundException {, +	public MongoCustomConversions mongoCustomConversions() {, +		return new MongoCustomConversions(Collections.emptyList());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java, +import org.springframework.data.couchbase.core.convert.CouchbaseCustomConversions;, +		public CouchbaseCustomConversions myCustomConversions() {]