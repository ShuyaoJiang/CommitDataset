[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitTemplateAutoConfiguration.java, +import org.springframework.amqp.rabbit.connection.ConnectionFactory;, +	@ConditionalOnMissingBean(ConnectionFactory.class), +			CachingConnectionFactory connectionFactory = new CachingConnectionFactory(, +					this.config.getHost());, +			return this.host;, +			return this.port;, +			return this.username;, +			return this.password;, +			return this.dynamic;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitTemplateAutoConfiguration.java, +import org.springframework.amqp.rabbit.connection.ConnectionFactory;, +	@ConditionalOnMissingBean(ConnectionFactory.class), +			CachingConnectionFactory connectionFactory = new CachingConnectionFactory(, +					this.config.getHost());, +			return this.host;, +			return this.port;, +			return this.username;, +			return this.password;, +			return this.dynamic;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitTemplateAutoconfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +		this.context.register(TestConfiguration.class,, +				RabbitTemplateAutoConfiguration.class);, +		CachingConnectionFactory connectionFactory = this.context, +				.getBean(CachingConnectionFactory.class);, +		this.context.register(TestConfiguration.class,, +				RabbitTemplateAutoConfiguration.class);, +				"spring.rabbitmq.port:9000", "spring.rabbitmq.username:alice",, +				"spring.rabbitmq.password:secret");, +		CachingConnectionFactory connectionFactory = this.context, +				.getBean(CachingConnectionFactory.class);, +		this.context.register(TestConfiguration2.class,, +				RabbitTemplateAutoConfiguration.class);, +		CachingConnectionFactory connectionFactory = this.context, +				.getBean(CachingConnectionFactory.class);, +		this.context.register(TestConfiguration.class,, +				RabbitTemplateAutoConfiguration.class);, +		}, +		catch (Exception e) {, +		}]