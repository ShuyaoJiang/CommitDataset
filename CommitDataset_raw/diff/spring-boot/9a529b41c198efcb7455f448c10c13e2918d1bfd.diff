[+++ b/spring-boot-autoconfigure/pom.xml, +			 <optional>true</optional>, +++ b/spring-boot-autoconfigure/pom.xml, +			 <optional>true</optional>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, + * Base {@link ImportBeanDefinitionRegistrar} used to auto-configure Spring Data, + * Repositories., + * , + * @author Phillip Webb, +	private ClassLoader beanClassLoader;, +, +		ResourceLoader resourceLoader = new DefaultResourceLoader();, +		AnnotationRepositoryConfigurationSource configurationSource = getConfigurationSource();, +		RepositoryConfigurationExtension extension = getRepositoryConfigurationExtension();, +		RepositoryBeanNameGenerator generator = new RepositoryBeanNameGenerator();, +		for (RepositoryConfiguration<AnnotationRepositoryConfigurationSource> repositoryConfiguration : repositoryConfigurations) {, +	private AnnotationRepositoryConfigurationSource getConfigurationSource() {, +		StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(, +				getConfiguration(), true);, +				metadata, getAnnotation()) {, +	/**, +	 * The Spring Data annotation used to enable the particular repository support., +	 */, +	protected abstract Class<? extends Annotation> getAnnotation();, +, +	/**, +	 * The configuration class that will be used by Spring Boot as a template., +	 */, +	protected abstract Class<?> getConfiguration();, +, +	/**, +	 * The {@link RepositoryConfigurationExtension} for the particular repository support., +	 */, +	protected abstract RepositoryConfigurationExtension getRepositoryConfigurationExtension();, +, +	@Override, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.beanClassLoader = classLoader;, +	}, +, +++ b/spring-boot-autoconfigure/pom.xml, +			 <optional>true</optional>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, + * Base {@link ImportBeanDefinitionRegistrar} used to auto-configure Spring Data, + * Repositories., + * , + * @author Phillip Webb, +	private ClassLoader beanClassLoader;, +, +		ResourceLoader resourceLoader = new DefaultResourceLoader();, +		AnnotationRepositoryConfigurationSource configurationSource = getConfigurationSource();, +		RepositoryConfigurationExtension extension = getRepositoryConfigurationExtension();, +		RepositoryBeanNameGenerator generator = new RepositoryBeanNameGenerator();, +		for (RepositoryConfiguration<AnnotationRepositoryConfigurationSource> repositoryConfiguration : repositoryConfigurations) {, +	private AnnotationRepositoryConfigurationSource getConfigurationSource() {, +		StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(, +				getConfiguration(), true);, +				metadata, getAnnotation()) {, +	/**, +	 * The Spring Data annotation used to enable the particular repository support., +	 */, +	protected abstract Class<? extends Annotation> getAnnotation();, +, +	/**, +	 * The configuration class that will be used by Spring Boot as a template., +	 */, +	protected abstract Class<?> getConfiguration();, +, +	/**, +	 * The {@link RepositoryConfigurationExtension} for the particular repository support., +	 */, +	protected abstract RepositoryConfigurationExtension getRepositoryConfigurationExtension();, +, +	@Override, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.beanClassLoader = classLoader;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfigureRegistrar.java, +import java.lang.annotation.Annotation;, +, +	protected Class<? extends Annotation> getAnnotation() {, +		return EnableJpaRepositories.class;, +	}, +, +	@Override, +	protected Class<?> getConfiguration() {, +		return EnableJpaRepositoriesConfiguration.class;, +++ b/spring-boot-autoconfigure/pom.xml, +			 <optional>true</optional>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java, + * Base {@link ImportBeanDefinitionRegistrar} used to auto-configure Spring Data, + * Repositories., + * , + * @author Phillip Webb, +	private ClassLoader beanClassLoader;, +, +		ResourceLoader resourceLoader = new DefaultResourceLoader();, +		AnnotationRepositoryConfigurationSource configurationSource = getConfigurationSource();, +		RepositoryConfigurationExtension extension = getRepositoryConfigurationExtension();]