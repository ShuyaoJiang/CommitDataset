[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +import java.io.IOException;, +import org.springframework.boot.loader.tools.LibraryCallback;, +import org.springframework.boot.loader.tools.LibraryScope;, +			addLibraryDependencies(this.task);, +		private void addLibraryDependencies(final RepackageTask task) {, +			try {, +				task.getLibraries().doWithLibraries(new LibraryCallback() {, +					@Override, +					public void library(File file, LibraryScope scope) throws IOException {, +						task.getInputs().file(file);, +					}, +				});, +			}, +			catch (IOException ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +import java.io.IOException;, +import org.springframework.boot.loader.tools.LibraryCallback;, +import org.springframework.boot.loader.tools.LibraryScope;, +			addLibraryDependencies(this.task);, +		private void addLibraryDependencies(final RepackageTask task) {, +			try {, +				task.getLibraries().doWithLibraries(new LibraryCallback() {, +					@Override, +					public void library(File file, LibraryScope scope) throws IOException {, +						task.getInputs().file(file);, +					}, +				});, +			}, +			catch (IOException ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java, +	public ProjectLibraries getLibraries() {]