[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.annotation.Lazy;, +	@Lazy(false), +++ /dev/null, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.annotation.Lazy;, +	@Lazy(false), +++ b/spring-boot-project/spring-boot-devtools/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.annotation.Lazy;, +	@Lazy(false), +++ b/spring-boot-project/spring-boot-devtools/src/main/resources/META-INF/spring.factories, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/ApplicationLauncher.java, + * @author Madhura Bhave, +	LaunchedApplication launchApplication(JvmLauncher jvmLauncher, File serverPortFile,, +			String... additionalArgs) throws Exception;, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.annotation.Lazy;, +	@Lazy(false), +++ b/spring-boot-project/spring-boot-devtools/src/main/resources/META-INF/spring.factories, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/ApplicationLauncher.java, + * @author Madhura Bhave, +	LaunchedApplication launchApplication(JvmLauncher jvmLauncher, File serverPortFile,, +			String... additionalArgs) throws Exception;, +, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/DevToolsWithLazyInitializationIntegrationTests.java, +/*, + * Copyright 2012-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.devtools.tests;, +, +import java.io.File;, +import java.io.FileReader;, +import java.io.IOException;, +import java.time.Duration;, +import java.util.ArrayList;, +import java.util.List;, +, +import net.bytebuddy.ByteBuddy;, +import net.bytebuddy.description.annotation.AnnotationDescription;, +import net.bytebuddy.description.modifier.Visibility;, +import net.bytebuddy.dynamic.DynamicType;, +import net.bytebuddy.implementation.FixedValue;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.ClassRule;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import org.springframework.boot.test.web.client.TestRestTemplate;, +import org.springframework.boot.testsupport.BuildOutput;, +import org.springframework.http.HttpStatus;, +import org.springframework.util.FileCopyUtils;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RestController;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Integration tests for DevTools with lazy initialization enabled., + *, + * @author Madhura Bhave, + */, +@RunWith(Parameterized.class), +public class DevToolsWithLazyInitializationIntegrationTests {, +, +	@ClassRule, +	public static final TemporaryFolder temp = new TemporaryFolder();, +, +	private static final BuildOutput buildOutput = new BuildOutput(, +			DevToolsIntegrationTests.class);, +, +	private LaunchedApplication launchedApplication;, +, +	private final File serverPortFile;, +, +	private final ApplicationLauncher applicationLauncher;, +, +	private String[] args;]