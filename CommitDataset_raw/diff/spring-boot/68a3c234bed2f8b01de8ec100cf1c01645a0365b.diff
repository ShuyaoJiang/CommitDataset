[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		HttpClient client = HttpClient.create().secure(, +				(sslContextSpec) -> sslContextSpec.sslContext(createSslContext()));, +	private SslContextBuilder createSslContext() {, +		return SslContextBuilder.forClient().sslProvider(SslProvider.JDK), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		HttpClient client = HttpClient.create().secure(, +				(sslContextSpec) -> sslContextSpec.sslContext(createSslContext()));, +	private SslContextBuilder createSslContext() {, +		return SslContextBuilder.forClient().sslProvider(SslProvider.JDK), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java, +			return server, +					.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder()));, +	protected SslContextBuilder getContextBuilder() {, +		SslContextBuilder builder = SslContextBuilder, +				.forServer(getKeyManagerFactory(this.ssl, this.sslStoreProvider)), +				.trustManager(getTrustManagerFactory(this.ssl, this.sslStoreProvider));, +		return builder;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java, +		HttpClient client = HttpClient.create().secure(, +				(sslContextSpec) -> sslContextSpec.sslContext(createSslContext()));, +	private SslContextBuilder createSslContext() {, +		return SslContextBuilder.forClient().sslProvider(SslProvider.JDK), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java, +			return server, +					.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder()));, +	protected SslContextBuilder getContextBuilder() {, +		SslContextBuilder builder = SslContextBuilder, +				.forServer(getKeyManagerFactory(this.ssl, this.sslStoreProvider)), +				.trustManager(getTrustManagerFactory(this.ssl, this.sslStoreProvider));, +		return builder;, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java, +import io.netty.handler.ssl.SslContextBuilder;, +		SslContextBuilder builder = SslContextBuilder.forClient(), +				.sslProvider(SslProvider.JDK), +				.trustManager(InsecureTrustManagerFactory.INSTANCE);, +				.secure((sslContextSpec) -> sslContextSpec.sslContext(builder));, +		SslContextBuilder builder = SslContextBuilder.forClient(), +				.sslProvider(SslProvider.JDK), +				.keyManager(clientKeyManagerFactory);, +		HttpClient client = HttpClient.create().wiretap(), +				.secure((sslContextSpec) -> sslContextSpec.sslContext(builder));]