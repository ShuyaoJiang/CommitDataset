[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			system.setLogLevel(name, coerceLogLevel(level));, +	private LogLevel coerceLogLevel(String level) {, +		if ("false".equalsIgnoreCase(level)) {, +			return LogLevel.OFF;, +		}, +		return LogLevel.valueOf(level.toUpperCase());, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			system.setLogLevel(name, coerceLogLevel(level));, +	private LogLevel coerceLogLevel(String level) {, +		if ("false".equalsIgnoreCase(level)) {, +			return LogLevel.OFF;, +		}, +		return LogLevel.valueOf(level.toUpperCase());, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java, +	public void parseLevelsMapsFalseToOff() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"logging.level.org.springframework.boot=false");, +		this.initializer.initialize(this.context.getEnvironment(),, +				this.context.getClassLoader());, +		this.logger.debug("testatdebug");, +		this.logger.fatal("testatfatal");, +		assertThat(this.outputCapture.toString(), not(containsString("testatdebug")));, +		assertThat(this.outputCapture.toString(), not(containsString("testatfatal")));, +	}, +, +	@Test]