[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import javax.servlet.ServletContext;, +		Handler handler = new Handler(resource, request.getServletContext());, +		handler.handleRequest(request, response);, +		Handler(Resource resource, ServletContext servletContext) {, +				setServletContext(servletContext);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import javax.servlet.ServletContext;, +		Handler handler = new Handler(resource, request.getServletContext());, +		handler.handleRequest(request, response);, +		Handler(Resource resource, ServletContext servletContext) {, +				setServletContext(servletContext);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				persistenceUnitManagerProvider.getIfAvailable());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import javax.servlet.ServletContext;, +		Handler handler = new Handler(resource, request.getServletContext());, +		handler.handleRequest(request, response);, +		Handler(Resource resource, ServletContext servletContext) {, +				setServletContext(servletContext);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				persistenceUnitManagerProvider.getIfAvailable());, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.boot.devtools.restart.Restarter;, +import org.springframework.core.env.Environment;, +		if (isLocalApplication(environment) && canAddProperties(environment)) {, +	private boolean canAddProperties(Environment environment) {, +		return isRestarterInitialized() || isRemoteRestartEnabled(environment);, +	}, +, +	private boolean isRestarterInitialized() {, +		try {, +			Restarter restarter = Restarter.getInstance();, +			return (restarter != null && restarter.getInitialUrls() != null);, +		}, +		catch (Exception ex) {, +			return false;, +		}, +	}, +, +	private boolean isRemoteRestartEnabled(Environment environment) {, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +				"spring.devtools.remote.");, +		return resolver.containsProperty("secret");, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import javax.servlet.ServletContext;, +		Handler handler = new Handler(resource, request.getServletContext());, +		handler.handleRequest(request, response);, +		Handler(Resource resource, ServletContext servletContext) {, +				setServletContext(servletContext);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +				persistenceUnitManagerProvider.getIfAvailable());, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.boot.devtools.restart.Restarter;, +import org.springframework.core.env.Environment;, +		if (isLocalApplication(environment) && canAddProperties(environment)) {, +	private boolean canAddProperties(Environment environment) {, +		return isRestarterInitialized() || isRemoteRestartEnabled(environment);, +	}, +, +	private boolean isRestarterInitialized() {, +		try {, +			Restarter restarter = Restarter.getInstance();, +			return (restarter != null && restarter.getInitialUrls() != null);, +		}, +		catch (Exception ex) {, +			return false;, +		}, +	}, +, +	private boolean isRemoteRestartEnabled(Environment environment) {, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +				"spring.devtools.remote.");, +		return resolver.containsProperty("secret");, +	}, +, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/env/DevToolPropertiesIntegrationTests.java, +import java.net.URL;, +import java.util.Collections;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.boot.devtools.restart.RestartInitializer;, +import org.springframework.boot.devtools.restart.Restarter;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Before, +	public void setup() {, +		Restarter.initialize(new String[] {}, false, new MockInitializer(), false);, +	}, +]