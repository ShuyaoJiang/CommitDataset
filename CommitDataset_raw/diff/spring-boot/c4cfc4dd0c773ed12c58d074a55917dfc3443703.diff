[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Jaas;, +import org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;, +	@Bean, +	@ConditionalOnProperty(name = "spring.kafka.jaas.enabled"), +	@ConditionalOnMissingBean(KafkaJaasLoginModuleInitializer.class), +	public KafkaJaasLoginModuleInitializer kafkaJaasInitializer() throws IOException {, +		KafkaJaasLoginModuleInitializer jaas = new KafkaJaasLoginModuleInitializer();, +		Jaas jaasProperties = this.properties.getJaas();, +		if (jaasProperties.getControlFlag() != null) {, +			jaas.setControlFlag(jaasProperties.getControlFlag());, +		}, +		if (jaasProperties.getLoginModule() != null) {, +			jaas.setLoginModule(jaasProperties.getLoginModule());, +		}, +		jaas.setOptions(jaasProperties.getOptions());, +		return jaas;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Jaas;, +import org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;, +	@Bean, +	@ConditionalOnProperty(name = "spring.kafka.jaas.enabled"), +	@ConditionalOnMissingBean(KafkaJaasLoginModuleInitializer.class), +	public KafkaJaasLoginModuleInitializer kafkaJaasInitializer() throws IOException {, +		KafkaJaasLoginModuleInitializer jaas = new KafkaJaasLoginModuleInitializer();, +		Jaas jaasProperties = this.properties.getJaas();, +		if (jaasProperties.getControlFlag() != null) {, +			jaas.setControlFlag(jaasProperties.getControlFlag());, +		}, +		if (jaasProperties.getLoginModule() != null) {, +			jaas.setLoginModule(jaasProperties.getLoginModule());, +		}, +		jaas.setOptions(jaasProperties.getOptions());, +		return jaas;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer;, +	private final Jaas jaas = new Jaas();, +, +	public Jaas getJaas() {, +		return this.jaas;, +	}, +, +	public static class Jaas {, +, +		/**, +		 * Enable JAAS configuration., +		 */, +		private boolean enabled;, +, +		/**, +		 * Login module., +		 */, +		private String loginModule;, +, +		/**, +		 * AppConfigurationEntry.LoginModuleControlFlag value., +		 */, +		private KafkaJaasLoginModuleInitializer.ControlFlag controlFlag =, +				KafkaJaasLoginModuleInitializer.ControlFlag.REQUIRED;, +, +		/**, +		 * Map of JAAS options, e.g. 'spring.kafka.jaas.options.useKeyTab=true'., +		 */, +		private final Map<String, String> options = new HashMap<>();, +, +		public boolean isEnabled() {, +			return this.enabled;, +		}, +, +		public void setEnabled(boolean enabled) {, +			this.enabled = enabled;, +		}, +, +		public String getLoginModule() {, +			return this.loginModule;, +		}, +, +		public void setLoginModule(String loginModule) {, +			this.loginModule = loginModule;, +		}, +, +		public KafkaJaasLoginModuleInitializer.ControlFlag getControlFlag() {, +			return this.controlFlag;, +		}, +, +		public void setControlFlag(KafkaJaasLoginModuleInitializer.ControlFlag controlFlag) {, +			this.controlFlag = controlFlag;, +		}, +, +		public Map<String, String> getOptions() {]