[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.UUID;, +	 * Generate a random datasource name., +	private boolean generateUniqueName;, +	private String uniqueName;, +, +	public boolean isGenerateUniqueName() {, +		return this.generateUniqueName;, +	public void setGenerateUniqueName(boolean generateUniqueName) {, +		this.generateUniqueName = generateUniqueName;, +		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName());, +	private String determineDatabaseName() {, +		if (this.generateUniqueName) {, +			if (this.uniqueName == null) {, +				this.uniqueName = UUID.randomUUID().toString();, +			}, +			return this.uniqueName;, +		}, +		return this.name;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.UUID;, +	 * Generate a random datasource name., +	private boolean generateUniqueName;, +	private String uniqueName;, +, +	public boolean isGenerateUniqueName() {, +		return this.generateUniqueName;, +	public void setGenerateUniqueName(boolean generateUniqueName) {, +		this.generateUniqueName = generateUniqueName;, +		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName());, +	private String determineDatabaseName() {, +		if (this.generateUniqueName) {, +			if (this.uniqueName == null) {, +				this.uniqueName = UUID.randomUUID().toString();, +			}, +			return this.uniqueName;, +		}, +		return this.name;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, +		this.database = builder.setName(this.properties.getName()), +				.generateUniqueName(this.properties.isGenerateUniqueName()).build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.UUID;, +	 * Generate a random datasource name., +	private boolean generateUniqueName;, +	private String uniqueName;, +, +	public boolean isGenerateUniqueName() {, +		return this.generateUniqueName;, +	public void setGenerateUniqueName(boolean generateUniqueName) {, +		this.generateUniqueName = generateUniqueName;, +		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName());, +	private String determineDatabaseName() {, +		if (this.generateUniqueName) {, +			if (this.uniqueName == null) {, +				this.uniqueName = UUID.randomUUID().toString();, +			}, +			return this.uniqueName;, +		}, +		return this.name;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, +		this.database = builder.setName(this.properties.getName()), +				.generateUniqueName(this.properties.isGenerateUniqueName()).build();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourcePropertiesTests.java, +	public void determineUrlWithGenerateUniqueName() throws Exception {, +		DataSourceProperties properties = new DataSourceProperties();, +		properties.setGenerateUniqueName(true);, +		properties.afterPropertiesSet();, +		assertThat(properties.determineUrl()).isEqualTo(properties.determineUrl());, +, +		DataSourceProperties properties2 = new DataSourceProperties();, +		properties2.setGenerateUniqueName(true);, +		properties2.afterPropertiesSet();, +		assertThat(properties.determineUrl()).isNotEqualTo(properties2.determineUrl());, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.UUID;, +	 * Generate a random datasource name., +	private boolean generateUniqueName;, +	private String uniqueName;, +, +	public boolean isGenerateUniqueName() {, +		return this.generateUniqueName;, +	public void setGenerateUniqueName(boolean generateUniqueName) {, +		this.generateUniqueName = generateUniqueName;, +		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName());, +	private String determineDatabaseName() {, +		if (this.generateUniqueName) {, +			if (this.uniqueName == null) {, +				this.uniqueName = UUID.randomUUID().toString();, +			}, +			return this.uniqueName;]