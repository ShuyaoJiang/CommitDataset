[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +	/**, +	 * Extract the original error from the current request., +	 * @param request the source request, +	 * @return the error, +	 */, +	protected Throwable getError(ServerRequest request) {, +		return this.errorAttributes.getError(request);, +	}, +, +	/**, +	 * Check whether the trace attribute has been set on the given request., +	 * @param request the source request, +	 * @return {@code true} if the error trace has been requested, {@code false} otherwise, +	 */, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +	/**, +	 * Extract the original error from the current request., +	 * @param request the source request, +	 * @return the error, +	 */, +	protected Throwable getError(ServerRequest request) {, +		return this.errorAttributes.getError(request);, +	}, +, +	/**, +	 * Check whether the trace attribute has been set on the given request., +	 * @param request the source request, +	 * @return {@code true} if the error trace has been requested, {@code false} otherwise, +	 */, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory, +			.getLog(DefaultErrorWebExceptionHandler.class);, +, +				.switchIfEmpty(renderDefaultErrorView(response, error)).next(), +				.doOnNext(resp -> logError(request, errorStatus));, +		HttpStatus errorStatus = getHttpStatus(error);, +				.body(BodyInserters.fromObject(error)), +				.doOnNext(resp -> logError(request, errorStatus));, +	/**, +	 * Log the original exception if handling it results in a Server Error., +	 * @param request the source request, +	 * @param errorStatus the HTTP error status, +	 */, +	protected void logError(ServerRequest request, HttpStatus errorStatus) {, +		if (errorStatus.is5xxServerError()) {, +			Throwable error = getError(request);, +			final String message = "Failed to handle request [", +					+ request.methodName() + " " + request.uri() + "]";, +			logger.error(message, error);, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +	/**, +	 * Extract the original error from the current request., +	 * @param request the source request, +	 * @return the error, +	 */, +	protected Throwable getError(ServerRequest request) {, +		return this.errorAttributes.getError(request);, +	}, +, +	/**, +	 * Check whether the trace attribute has been set on the given request., +	 * @param request the source request, +	 * @return {@code true} if the error trace has been requested, {@code false} otherwise, +	 */, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory, +			.getLog(DefaultErrorWebExceptionHandler.class);, +, +				.switchIfEmpty(renderDefaultErrorView(response, error)).next(), +				.doOnNext(resp -> logError(request, errorStatus));, +		HttpStatus errorStatus = getHttpStatus(error);, +				.body(BodyInserters.fromObject(error)), +				.doOnNext(resp -> logError(request, errorStatus));, +	/**, +	 * Log the original exception if handling it results in a Server Error., +	 * @param request the source request, +	 * @param errorStatus the HTTP error status, +	 */, +	protected void logError(ServerRequest request, HttpStatus errorStatus) {, +		if (errorStatus.is5xxServerError()) {, +			Throwable error = getError(request);, +			final String message = "Failed to handle request [", +					+ request.methodName() + " " + request.uri() + "]";, +			logger.error(message, error);, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTest.java, +import org.junit.Rule;, +import org.springframework.boot.test.rule.OutputCapture;, +import static org.hamcrest.Matchers.allOf;, +import static org.hamcrest.Matchers.containsString;]