[+++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, +	 * @param context the context that was being created (maybe null), +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, +	 * @param context the context that was being created (maybe null), +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.context.ConfigurableApplicationContext;, + * itself, but beware of modifying its internal state since since all initialization steps, + * will have been completed by then., +	private final ConfigurableApplicationContext context;, +, +	 * @param context the context that was being created (maybe null), +	public ApplicationReadyEvent(SpringApplication application, String[] args,, +			ConfigurableApplicationContext context) {, +		this.context = context;, +	}, +, +	/**, +	 * @return the context, +	 */, +	public ConfigurableApplicationContext getApplicationContext() {, +		return this.context;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, +	 * @param context the context that was being created (maybe null), +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.context.ConfigurableApplicationContext;, + * itself, but beware of modifying its internal state since since all initialization steps, + * will have been completed by then., +	private final ConfigurableApplicationContext context;, +, +	 * @param context the context that was being created (maybe null), +	public ApplicationReadyEvent(SpringApplication application, String[] args,, +			ConfigurableApplicationContext context) {, +		this.context = context;, +	}, +, +	/**, +	 * @return the context, +	 */, +	public ConfigurableApplicationContext getApplicationContext() {, +		return this.context;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, +		publishEvent(getFinishedEvent(context, exception));, +	}, +, +	private SpringApplicationEvent getFinishedEvent(, +			ConfigurableApplicationContext context, Throwable exception) {, +			return new ApplicationFailedEvent(this.application, this.args, context,, +					exception);, +		return new ApplicationReadyEvent(this.application, this.args, context);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationFailedEvent.java, +	 * @param context the context that was being created (maybe null), +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationReadyEvent.java, +import org.springframework.context.ConfigurableApplicationContext;, + * itself, but beware of modifying its internal state since since all initialization steps, + * will have been completed by then., +	private final ConfigurableApplicationContext context;, +, +	 * @param context the context that was being created (maybe null), +	public ApplicationReadyEvent(SpringApplication application, String[] args,, +			ConfigurableApplicationContext context) {, +		this.context = context;, +	}, +, +	/**, +	 * @return the context, +	 */, +	public ConfigurableApplicationContext getApplicationContext() {, +		return this.context;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java, +		publishEvent(getFinishedEvent(context, exception));, +	}, +, +	private SpringApplicationEvent getFinishedEvent(, +			ConfigurableApplicationContext context, Throwable exception) {, +			return new ApplicationFailedEvent(this.application, this.args, context,, +					exception);, +		return new ApplicationReadyEvent(this.application, this.args, context);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +		class ApplicationReadyEventListener implements, +				ApplicationListener<ApplicationReadyEvent> {, +		class ApplicationRunningEventListener implements, +				ApplicationListener<ApplicationEvent> {, +		assertThat(events.get(1),, +				is(instanceOf(ApplicationEnvironmentPreparedEvent.class)));]