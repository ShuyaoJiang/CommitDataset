[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/transformation/ResolveDependencyCoordinatesTransformation.java, +import java.util.Map;, +, +				visitAnnotatedNode(module.getPackage());, +, +				for (ImportNode importNode : module.getStarImports()) {, +					visitAnnotatedNode(importNode);, +				}, +				for (Map.Entry<String, ImportNode> entry : module.getStaticImports(), +						.entrySet()) {, +					visitAnnotatedNode(entry.getValue());, +				}, +				for (Map.Entry<String, ImportNode> entry : module.getStaticStarImports(), +						.entrySet()) {, +					visitAnnotatedNode(entry.getValue());, +				}, +, +		if (annotatedNode != null) {, +				if (GRAB_ANNOTATION_NAMES.contains(annotationNode.getClassNode(), +						.getName())) {, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/transformation/ResolveDependencyCoordinatesTransformation.java, +import java.util.Map;, +, +				visitAnnotatedNode(module.getPackage());, +, +				for (ImportNode importNode : module.getStarImports()) {, +					visitAnnotatedNode(importNode);, +				}, +				for (Map.Entry<String, ImportNode> entry : module.getStaticImports(), +						.entrySet()) {, +					visitAnnotatedNode(entry.getValue());, +				}, +				for (Map.Entry<String, ImportNode> entry : module.getStaticStarImports(), +						.entrySet()) {, +					visitAnnotatedNode(entry.getValue());, +				}, +, +		if (annotatedNode != null) {, +				if (GRAB_ANNOTATION_NAMES.contains(annotationNode.getClassNode(), +						.getName())) {, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/transformation/ResolveDependencyCoordinatesTransformationTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler.transformation;, +, +import groovy.lang.Grab;, +, +import java.util.Arrays;, +, +import org.codehaus.groovy.ast.ASTNode;, +import org.codehaus.groovy.ast.AnnotationNode;, +import org.codehaus.groovy.ast.ClassNode;, +import org.codehaus.groovy.ast.ConstructorNode;, +import org.codehaus.groovy.ast.FieldNode;, +import org.codehaus.groovy.ast.MethodNode;, +import org.codehaus.groovy.ast.ModuleNode;, +import org.codehaus.groovy.ast.PackageNode;, +import org.codehaus.groovy.ast.Parameter;, +import org.codehaus.groovy.ast.VariableScope;, +import org.codehaus.groovy.ast.expr.ConstantExpression;, +import org.codehaus.groovy.ast.expr.DeclarationExpression;, +import org.codehaus.groovy.ast.expr.Expression;, +import org.codehaus.groovy.ast.expr.VariableExpression;, +import org.codehaus.groovy.ast.stmt.BlockStatement;, +import org.codehaus.groovy.ast.stmt.ExpressionStatement;, +import org.codehaus.groovy.ast.stmt.Statement;, +import org.codehaus.groovy.control.SourceUnit;, +import org.codehaus.groovy.control.io.ReaderSource;, +import org.codehaus.groovy.transform.ASTTransformation;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +/**, + * Tests for {@link ResolveDependencyCoordinatesTransformation}, + * , + * @author Andy Wilkinson, + */]