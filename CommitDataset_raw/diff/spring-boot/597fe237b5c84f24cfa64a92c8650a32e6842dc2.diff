[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +	 * @see #from(Object), +	/**, +	 * Return a new {@link Source} from the specified value that can be used to perform, +	 * the mapping., +	 * @param <T> the source type, +	 * @param value the value, +	 * @return a {@link Source} that can be used to complete the mapping, +	 */, +	public <T> Source<T> from(T value) {, +		return from(() -> value);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +	 * @see #from(Object), +	/**, +	 * Return a new {@link Source} from the specified value that can be used to perform, +	 * the mapping., +	 * @param <T> the source type, +	 * @param value the value, +	 * @return a {@link Source} that can be used to complete the mapping, +	 */, +	public <T> Source<T> from(T value) {, +		return from(() -> value);, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java, +		Boolean result = this.map.from(true).whenTrue().toInstance(Boolean::new);, +		this.map.from(false).whenTrue().toCall(Assert::fail);, +		Boolean result = this.map.from(false).whenFalse().toInstance(Boolean::new);, +		this.map.from(true).whenFalse().toCall(Assert::fail);, +		this.map.from("").whenHasText().toCall(Assert::fail);, +		Integer result = this.map.from(123).whenHasText().toInstance(Integer::new);, +		String result = this.map.from("123").whenEqualTo("123").toInstance(String::new);, +		this.map.from("123").whenEqualTo("321").toCall(Assert::fail);, +		Long result = this.map.from(123L).whenInstanceOf(Long.class), +		String result = this.map.from("123").when("123"::equals).toInstance(String::new);, +		this.map.from("123").when("321"::equals).toCall(Assert::fail);]