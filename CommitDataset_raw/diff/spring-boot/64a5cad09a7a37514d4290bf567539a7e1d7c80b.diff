[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.data.couchbase.core.CouchbaseTemplate;, +import org.springframework.data.couchbase.repository.support.IndexManager;, +@ConditionalOnClass({CouchbaseBucket.class, AbstractCouchbaseConfiguration.class}), +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseTemplate"), +		@Bean(name = "couchbaseTemplate"), +		public CouchbaseTemplate couchbaseTemplate() throws Exception {, +			return super.couchbaseTemplate();, +		}, +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseIndexManager"), +		@Bean(name = "couchbaseIndexManager"), +		public IndexManager indexManager() {, +			if (this.properties.isAutoIndex()) {, +				return new IndexManager(true, true, true);, +			}, +			else {, +				return new IndexManager(false, false, false);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.data.couchbase.core.CouchbaseTemplate;, +import org.springframework.data.couchbase.repository.support.IndexManager;, +@ConditionalOnClass({CouchbaseBucket.class, AbstractCouchbaseConfiguration.class}), +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseTemplate"), +		@Bean(name = "couchbaseTemplate"), +		public CouchbaseTemplate couchbaseTemplate() throws Exception {, +			return super.couchbaseTemplate();, +		}, +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseIndexManager"), +		@Bean(name = "couchbaseIndexManager"), +		public IndexManager indexManager() {, +			if (this.properties.isAutoIndex()) {, +				return new IndexManager(true, true, true);, +			}, +			else {, +				return new IndexManager(false, false, false);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +	 * Automatically create views and indexes. Use the meta-data provided by "@ViewIndexed",, +	 * "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed"., +	 */, +	private boolean autoIndex;, +, +	/**, +	public boolean isAutoIndex() {, +		return this.autoIndex;, +	}, +, +	public void setAutoIndex(boolean autoIndex) {, +		this.autoIndex = autoIndex;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.data.couchbase.core.CouchbaseTemplate;, +import org.springframework.data.couchbase.repository.support.IndexManager;, +@ConditionalOnClass({CouchbaseBucket.class, AbstractCouchbaseConfiguration.class}), +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseTemplate"), +		@Bean(name = "couchbaseTemplate"), +		public CouchbaseTemplate couchbaseTemplate() throws Exception {, +			return super.couchbaseTemplate();, +		}, +, +		@Override, +		@ConditionalOnMissingBean(name = "couchbaseIndexManager"), +		@Bean(name = "couchbaseIndexManager"), +		public IndexManager indexManager() {, +			if (this.properties.isAutoIndex()) {, +				return new IndexManager(true, true, true);, +			}, +			else {, +				return new IndexManager(false, false, false);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +	 * Automatically create views and indexes. Use the meta-data provided by "@ViewIndexed",, +	 * "@N1qlPrimaryIndexed" and "@N1qlSecondaryIndexed"., +	 */, +	private boolean autoIndex;, +, +	/**, +	public boolean isAutoIndex() {, +		return this.autoIndex;, +	}, +, +	public void setAutoIndex(boolean autoIndex) {, +		this.autoIndex = autoIndex;]