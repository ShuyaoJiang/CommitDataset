[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.springframework.boot.cli.compiler.maven.MavenSettings;, +import org.springframework.boot.cli.compiler.maven.MavenSettingsReader;, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.springframework.boot.cli.compiler.maven.MavenSettings;, +import org.springframework.boot.cli.compiler.maven.MavenSettingsReader;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java, +import org.springframework.boot.cli.compiler.maven.MavenSettings;, +import org.springframework.boot.cli.compiler.maven.MavenSettingsReader;, +		MavenSettings settings = getSettings(session);, +	private MavenSettings getSettings(DefaultRepositorySystemSession session) {, +		MavenSettings settings = new MavenSettingsReader().readSettings();, +		session.setOffline(settings.getOffline());, +		session.setMirrorSelector(settings.getMirrorSelector());, +		session.setAuthenticationSelector(settings.getAuthenticationSelector());, +		session.setProxySelector(settings.getProxySelector());, +		return settings;, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java, +import org.springframework.boot.cli.compiler.maven.MavenSettings;, +import org.springframework.boot.cli.compiler.maven.MavenSettingsReader;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java, +import org.springframework.boot.cli.compiler.maven.MavenSettings;, +import org.springframework.boot.cli.compiler.maven.MavenSettingsReader;, +		MavenSettings settings = getSettings(session);, +	private MavenSettings getSettings(DefaultRepositorySystemSession session) {, +		MavenSettings settings = new MavenSettingsReader().readSettings();, +		session.setOffline(settings.getOffline());, +		session.setMirrorSelector(settings.getMirrorSelector());, +		session.setAuthenticationSelector(settings.getAuthenticationSelector());, +		session.setProxySelector(settings.getProxySelector());, +		return settings;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/maven/MavenSettings.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler.maven;, +, +import java.io.File;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.maven.model.ActivationFile;, +import org.apache.maven.model.ActivationOS;, +import org.apache.maven.model.ActivationProperty;, +import org.apache.maven.model.building.ModelProblemCollector;, +import org.apache.maven.model.building.ModelProblemCollectorRequest;, +import org.apache.maven.model.profile.DefaultProfileSelector;, +import org.apache.maven.model.profile.ProfileActivationContext;, +import org.apache.maven.model.profile.activation.FileProfileActivator;, +import org.apache.maven.model.profile.activation.JdkVersionProfileActivator;, +import org.apache.maven.model.profile.activation.OperatingSystemProfileActivator;, +import org.apache.maven.model.profile.activation.PropertyProfileActivator;, +import org.apache.maven.settings.Activation;, +import org.apache.maven.settings.Mirror;, +import org.apache.maven.settings.Profile;, +import org.apache.maven.settings.Proxy;, +import org.apache.maven.settings.Server;, +import org.apache.maven.settings.Settings;, +import org.apache.maven.settings.crypto.SettingsDecryptionResult;, +import org.eclipse.aether.repository.Authentication;, +import org.eclipse.aether.repository.AuthenticationSelector;, +import org.eclipse.aether.repository.MirrorSelector;, +import org.eclipse.aether.repository.ProxySelector;, +import org.eclipse.aether.util.repository.AuthenticationBuilder;, +import org.eclipse.aether.util.repository.ConservativeAuthenticationSelector;, +import org.eclipse.aether.util.repository.DefaultAuthenticationSelector;, +import org.eclipse.aether.util.repository.DefaultMirrorSelector;, +import org.eclipse.aether.util.repository.DefaultProxySelector;, +, +/**]