[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, +import java.io.ByteArrayOutputStream;, +	private static final UnpackHandler NEVER_UNPACK = new NeverUnpackHandler();, +, +		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK);, +	void writeEntries(JarFile jarFile, UnpackHandler unpackHandler) throws IOException {, +		this.writeEntries(jarFile, new IdentityEntryTransformer(), unpackHandler);, +	}, +, +	void writeEntries(JarFile jarFile, EntryTransformer entryTransformer,, +			UnpackHandler unpackHandler) throws IOException {, +					writeEntry(transformedEntry, entryWriter, unpackHandler);, +		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),, +				new LibraryUnpackHandler(library));, +	private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter), +			throws IOException {, +		writeEntry(entry, entryWriter, NEVER_UNPACK);, +	}, +, +	 * Perform the actual write of a {@link JarEntry}. All other {@code write} methods, +	 * @param unpackHandler handles possible unpacking for the entry, +	private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,, +			UnpackHandler unpackHandler) throws IOException {, +				writeEntry(new JarArchiveEntry(parent), null, unpackHandler);, +			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler);, +	private EntryWriter addUnpackCommentIfNecessary(JarArchiveEntry entry,, +			EntryWriter entryWriter, UnpackHandler unpackHandler) throws IOException {, +		if (entryWriter == null || !unpackHandler.requiresUnpack(entry.getName())) {, +			return entryWriter;, +		}, +		ByteArrayOutputStream output = new ByteArrayOutputStream();, +		entryWriter.write(output);, +		entry.setComment("UNPACK:" + unpackHandler.sha1Hash(entry.getName()));, +		return new InputStreamEntryWriter(new ByteArrayInputStream(output.toByteArray()),, +				true);, +	}, +, +	/**, +	 * An {@code UnpackHandler} determines whether or not unpacking is required and, +	 * provides a SHA1 hash if required., +	 */, +	interface UnpackHandler {, +, +		boolean requiresUnpack(String name);, +, +		String sha1Hash(String name) throws IOException;, +, +	}, +, +	private static final class NeverUnpackHandler implements UnpackHandler {, +, +		@Override, +		public boolean requiresUnpack(String name) {, +			return false;, +		}, +, +		@Override, +		public String sha1Hash(String name) {, +			throw new UnsupportedOperationException();, +		}, +, +	}, +, +	private static final class LibraryUnpackHandler implements UnpackHandler {, +, +		private final Library library;, +, +		private LibraryUnpackHandler(Library library) {, +			this.library = library;, +		}, +, +		@Override, +		public boolean requiresUnpack(String name) {, +			return this.library.isUnpackRequired();, +		}, +, +		@Override, +		public String sha1Hash(String name) throws IOException {, +			return FileUtils.sha1Hash(this.library.getFile());, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, +import java.io.ByteArrayOutputStream;, +	private static final UnpackHandler NEVER_UNPACK = new NeverUnpackHandler();, +, +		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK);, +	void writeEntries(JarFile jarFile, UnpackHandler unpackHandler) throws IOException {, +		this.writeEntries(jarFile, new IdentityEntryTransformer(), unpackHandler);, +	}, +, +	void writeEntries(JarFile jarFile, EntryTransformer entryTransformer,, +			UnpackHandler unpackHandler) throws IOException {, +					writeEntry(transformedEntry, entryWriter, unpackHandler);, +		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),, +				new LibraryUnpackHandler(library));, +	private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter), +			throws IOException {, +		writeEntry(entry, entryWriter, NEVER_UNPACK);]