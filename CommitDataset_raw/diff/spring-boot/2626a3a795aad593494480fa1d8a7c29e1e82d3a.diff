[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		File docs = new File("src/main/asciidoc");, +		Map<String, Object> model = new LinkedHashMap<>();, +		model.put("endpoints", getEndpointDocs(docs));, +	private List<EndpointDoc> getEndpointDocs(File docs) throws Exception {, +		final List<EndpointDoc> endpoints = new ArrayList<>();, +		for (MvcEndpoint endpoint : getEndpoints()) {, +			String path = endpoint.getPath();, +			path = (StringUtils.hasText(path) ? path : "/");, +			if (!SKIPPED.contains(path)) {, +				documentEndpoint(path);, +				endpoints.add(new EndpointDoc(docs, path));, +			}, +		}, +		return endpoints;, +	}, +, +		endpoints.sort(Comparator.comparing(MvcEndpoint::getPath));, +	private String documentEndpoint(final String endpointPath) throws Exception {, +		String output = endpointPath.substring(1);, +		output = (output.length() > 0 ? output : "./");, +		this.mockMvc, +				.perform(get("/application" + endpointPath), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V2_JSON)), +				.andExpect(status().isOk()).andDo(document(output));, +		return output;, +	}, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		File docs = new File("src/main/asciidoc");, +		Map<String, Object> model = new LinkedHashMap<>();, +		model.put("endpoints", getEndpointDocs(docs));, +	private List<EndpointDoc> getEndpointDocs(File docs) throws Exception {, +		final List<EndpointDoc> endpoints = new ArrayList<>();, +		for (MvcEndpoint endpoint : getEndpoints()) {, +			String path = endpoint.getPath();, +			path = (StringUtils.hasText(path) ? path : "/");, +			if (!SKIPPED.contains(path)) {, +				documentEndpoint(path);, +				endpoints.add(new EndpointDoc(docs, path));, +			}, +		}, +		return endpoints;, +	}, +, +		endpoints.sort(Comparator.comparing(MvcEndpoint::getPath));, +	private String documentEndpoint(final String endpointPath) throws Exception {, +		String output = endpointPath.substring(1);, +		output = (output.length() > 0 ? output : "./");, +		this.mockMvc, +				.perform(get("/application" + endpointPath), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V2_JSON)), +				.andExpect(status().isOk()).andDo(document(output));, +		return output;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +			return (cacheManager, cache) -> {, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		File docs = new File("src/main/asciidoc");, +		Map<String, Object> model = new LinkedHashMap<>();, +		model.put("endpoints", getEndpointDocs(docs));, +	private List<EndpointDoc> getEndpointDocs(File docs) throws Exception {, +		final List<EndpointDoc> endpoints = new ArrayList<>();, +		for (MvcEndpoint endpoint : getEndpoints()) {, +			String path = endpoint.getPath();, +			path = (StringUtils.hasText(path) ? path : "/");, +			if (!SKIPPED.contains(path)) {, +				documentEndpoint(path);, +				endpoints.add(new EndpointDoc(docs, path));, +			}, +		}, +		return endpoints;, +	}, +, +		endpoints.sort(Comparator.comparing(MvcEndpoint::getPath));, +	private String documentEndpoint(final String endpointPath) throws Exception {, +		String output = endpointPath.substring(1);, +		output = (output.length() > 0 ? output : "./");, +		this.mockMvc, +				.perform(get("/application" + endpointPath), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V2_JSON)), +				.andExpect(status().isOk()).andDo(document(output));, +		return output;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +			return (cacheManager, cache) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		return properties::getContextPath;, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +		File docs = new File("src/main/asciidoc");, +		Map<String, Object> model = new LinkedHashMap<>();, +		model.put("endpoints", getEndpointDocs(docs));, +	private List<EndpointDoc> getEndpointDocs(File docs) throws Exception {, +		final List<EndpointDoc> endpoints = new ArrayList<>();, +		for (MvcEndpoint endpoint : getEndpoints()) {, +			String path = endpoint.getPath();]