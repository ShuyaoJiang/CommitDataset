[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +		super(wrapTarget(target),, +				(StringUtils.hasLength(namePrefix) ? namePrefix : DEFAULT_OBJECT_NAME));, +		wrapper.setConversionService(, +				new RelaxedConversionService(getConversionService()));, +						rtn.addPropertyValue(new OriginCapablePropertyValue(name,, +								value.getValue(), propertyOrigin));, +	private PropertyValue modifyProperty(BeanWrapper target,, +			PropertyValue propertyValue) {, +				beanWrapper.setConversionService(, +						new RelaxedConversionService(getConversionService()));, +		Object value = (wrapper.isReadableProperty(propertyName), +				? wrapper.getPropertyValue(propertyName) : null);, +	private void extendCollectionIfNecessary(BeanWrapper wrapper, BeanPath path,, +			int index) {, +				Class<?> type = target.getPropertyType(nested);, +				if (type != null && Map.class.isAssignableFrom(type)) {, +					// Special case for map property (gh-3836). Maybe could be fixed, +					// in spring-beans)?, +					return nested + "[" + name.substring(candidate.length() + 1) + "]";, +				}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +		super(wrapTarget(target),, +				(StringUtils.hasLength(namePrefix) ? namePrefix : DEFAULT_OBJECT_NAME));, +		wrapper.setConversionService(, +				new RelaxedConversionService(getConversionService()));, +						rtn.addPropertyValue(new OriginCapablePropertyValue(name,, +								value.getValue(), propertyOrigin));, +	private PropertyValue modifyProperty(BeanWrapper target,, +			PropertyValue propertyValue) {, +				beanWrapper.setConversionService(, +						new RelaxedConversionService(getConversionService()));, +		Object value = (wrapper.isReadableProperty(propertyName), +				? wrapper.getPropertyValue(propertyName) : null);, +	private void extendCollectionIfNecessary(BeanWrapper wrapper, BeanPath path,, +			int index) {, +				Class<?> type = target.getPropertyType(nested);, +				if (type != null && Map.class.isAssignableFrom(type)) {, +					// Special case for map property (gh-3836). Maybe could be fixed, +					// in spring-beans)?, +					return nested + "[" + name.substring(candidate.length() + 1) + "]";, +				}, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +, +	public void testBindNestedMapPropsWithUnderscores() throws Exception {, +		TargetWithNestedMap target = new TargetWithNestedMap();, +		bind(target, "nested_foo: bar\n" + "nested_value: 123");, +		assertEquals("123", target.getNested().get("value"));, +		assertEquals("bar", target.getNested().get("foo"));, +	}, +, +	@Test, +	public void testBindNestedMapOfStringWithUnderscore() throws Exception {, +		TargetWithNestedMapOfString target = new TargetWithNestedMapOfString();, +		bind(target, "nested_foo: bar\n" + "nested_value_foo: 123");, +		assertEquals("bar", target.getNested().get("foo"));, +		assertEquals("123", target.getNested().get("value_foo"));, +	}, +, +	@Test, +	public void testBindNestedMapOfStringWithUnderscoreAndupperCase() throws Exception {, +		TargetWithNestedMapOfString target = new TargetWithNestedMapOfString();, +		bind(target, "NESTED_FOO: bar\n" + "NESTED_VALUE_FOO: 123");, +		assertEquals("bar", target.getNested().get("FOO"));, +		assertEquals("123", target.getNested().get("VALUE_FOO"));, +	}, +, +	@Test]