[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBeanCreationFailureAnalyzer.java, +import java.util.Objects;, +, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * @author Patryk Kostrzewa, +		extends AbstractFailureAnalyzer<DataSourceBeanCreationException>, +		implements EnvironmentAware {, +, +	private Environment environment;, +		return getFailureAnalysis(cause);, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	private FailureAnalysis getFailureAnalysis(DataSourceBeanCreationException cause) {, +, +		final EmbeddedDatabaseConnection connection = cause.getConnection();, +		final String action;, +, +		if (EmbeddedDatabaseConnection.NONE == connection) {, +			action = "If you want an embedded database ", +					+ "please put a supported one on the classpath.";, +		}, +		else {, +			action = "If you have database settings to be loaded ", +					+ "from a particular profile you may need to activate it", +					+ getActiveProfiles();, +		}, +		return new FailureAnalysis(cause.getMessage(), action, cause);, +	}, +, +	private String getActiveProfiles() {, +, +		final StringBuilder message = new StringBuilder();, +		if (Objects.nonNull(this.environment)) {, +			String[] profiles = this.environment.getActiveProfiles();, +			if (ObjectUtils.isEmpty(profiles)) {, +				message.append(" (no profiles are currently active).");, +			}, +			else {, +				message.append(" (the profiles ");, +				message.append(StringUtils.arrayToCommaDelimitedString(profiles));, +				message.append(" are currently active).");, +			}, +		}, +		return message.toString();, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBeanCreationFailureAnalyzer.java, +import java.util.Objects;, +, +import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * @author Patryk Kostrzewa, +		extends AbstractFailureAnalyzer<DataSourceBeanCreationException>, +		implements EnvironmentAware {, +, +	private Environment environment;, +		return getFailureAnalysis(cause);, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	private FailureAnalysis getFailureAnalysis(DataSourceBeanCreationException cause) {, +, +		final EmbeddedDatabaseConnection connection = cause.getConnection();, +		final String action;, +, +		if (EmbeddedDatabaseConnection.NONE == connection) {, +			action = "If you want an embedded database ", +					+ "please put a supported one on the classpath.";, +		}, +		else {, +			action = "If you have database settings to be loaded ", +					+ "from a particular profile you may need to activate it", +					+ getActiveProfiles();, +		}, +		return new FailureAnalysis(cause.getMessage(), action, cause);, +	}, +, +	private String getActiveProfiles() {, +, +		final StringBuilder message = new StringBuilder();, +		if (Objects.nonNull(this.environment)) {, +			String[] profiles = this.environment.getActiveProfiles();, +			if (ObjectUtils.isEmpty(profiles)) {, +				message.append(" (no profiles are currently active).");, +			}, +			else {, +				message.append(" (the profiles ");, +				message.append(StringUtils.arrayToCommaDelimitedString(profiles));, +				message.append(" are currently active).");]