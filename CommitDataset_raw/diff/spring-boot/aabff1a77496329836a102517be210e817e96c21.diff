[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.HashSet;, +	/**, +	 * Constant value for the DispatcherServlet bean name. A Servlet bean with this name, +	 * is deemed to be the "main" servlet and is automatically given a mapping of "/" by, +	 * default. To change the default behaviour you can use a, +	 * {@link ServletRegistrationBean} or a different bean name., +	 */, +	public static final String DISPATCHER_SERVLET_NAME = "dispatcherServlet";, +, +		Set<Object> targets = new HashSet<Object>();, +			ServletContextInitializer initializer = initializerBean.getValue();, +			if (initializer instanceof RegistrationBean) {, +				targets.add(((RegistrationBean) initializer).getRegistrationTarget());, +			if (initializer instanceof ServletRegistrationBean) {, +				targets.addAll(((ServletRegistrationBean) initializer).getFilters());, +			}, +			initializers.add(initializer);, +		}, +			String name = servletBean.getKey();, +			Servlet servlet = servletBean.getValue();, +			if (targets.contains(servlet)) {, +				continue;, +			}, +			String url = (servletBeans.size() == 1 ? "/" : "/" + name + "/*");, +			if (name.equals(DISPATCHER_SERVLET_NAME)) {, +				url = "/"; // always map the main dispatcherServlet to "/", +			}, +			ServletRegistrationBean registration = new ServletRegistrationBean(servlet,, +					url);, +			registration.setName(name);, +			String name = filterBean.getKey();, +			Filter filter = filterBean.getValue();, +			if (targets.contains(filter)) {, +				continue;, +			FilterRegistrationBean registration = new FilterRegistrationBean(filter);, +			registration.setName(name);, +			initializers.add(registration);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.HashSet;, +	/**, +	 * Constant value for the DispatcherServlet bean name. A Servlet bean with this name, +	 * is deemed to be the "main" servlet and is automatically given a mapping of "/" by, +	 * default. To change the default behaviour you can use a, +	 * {@link ServletRegistrationBean} or a different bean name., +	 */, +	public static final String DISPATCHER_SERVLET_NAME = "dispatcherServlet";, +, +		Set<Object> targets = new HashSet<Object>();, +			ServletContextInitializer initializer = initializerBean.getValue();, +			if (initializer instanceof RegistrationBean) {, +				targets.add(((RegistrationBean) initializer).getRegistrationTarget());, +			if (initializer instanceof ServletRegistrationBean) {, +				targets.addAll(((ServletRegistrationBean) initializer).getFilters());, +			}, +			initializers.add(initializer);, +		}, +			String name = servletBean.getKey();, +			Servlet servlet = servletBean.getValue();, +			if (targets.contains(servlet)) {, +				continue;, +			}, +			String url = (servletBeans.size() == 1 ? "/" : "/" + name + "/*");, +			if (name.equals(DISPATCHER_SERVLET_NAME)) {, +				url = "/"; // always map the main dispatcherServlet to "/", +			}, +			ServletRegistrationBean registration = new ServletRegistrationBean(servlet,, +					url);, +			registration.setName(name);, +			String name = filterBean.getKey();, +			Filter filter = filterBean.getValue();, +			if (targets.contains(filter)) {, +				continue;, +			FilterRegistrationBean registration = new FilterRegistrationBean(filter);, +			registration.setName(name);, +			initializers.add(registration);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/FilterRegistrationBean.java, +		configure(servletContext.addFilter(getName(), this.filter));, +	}, +, +	@Override, +	public Object getRegistrationTarget() {, +		return this.filter;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.HashSet;, +	/**, +	 * Constant value for the DispatcherServlet bean name. A Servlet bean with this name, +	 * is deemed to be the "main" servlet and is automatically given a mapping of "/" by, +	 * default. To change the default behaviour you can use a, +	 * {@link ServletRegistrationBean} or a different bean name., +	 */, +	public static final String DISPATCHER_SERVLET_NAME = "dispatcherServlet";, +, +		Set<Object> targets = new HashSet<Object>();, +			ServletContextInitializer initializer = initializerBean.getValue();, +			if (initializer instanceof RegistrationBean) {, +				targets.add(((RegistrationBean) initializer).getRegistrationTarget());, +			if (initializer instanceof ServletRegistrationBean) {, +				targets.addAll(((ServletRegistrationBean) initializer).getFilters());, +			}]