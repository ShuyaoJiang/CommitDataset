[+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpoint.java, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpoint.java, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfigurationTests.java, +				.withPropertyValues(, +						"endpoints.configprops.keys-to-sanitize: .*pass.*, property"), +	private ContextConsumer<AssertableApplicationContext> validateTestProperties(, +			String dbPassword, String myTestProperty) {, +			assertThat(context), +					.hasSingleBean(ConfigurationPropertiesReportEndpoint.class);, +	static class TestProperties {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpoint.java, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfigurationTests.java, +				.withPropertyValues(, +						"endpoints.configprops.keys-to-sanitize: .*pass.*, property"), +	private ContextConsumer<AssertableApplicationContext> validateTestProperties(, +			String dbPassword, String myTestProperty) {, +			assertThat(context), +					.hasSingleBean(ConfigurationPropertiesReportEndpoint.class);, +	static class TestProperties {, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +		validate(enablement, true, "endpoint 'biz' is enabled (default)");, +		validate(enablement, false, "endpoint 'default' (web) is disabled by default");, +		validate(enablement, false, "found property endpoints.default.enabled");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +				"endpoints.default.enabled=true", "endpoints.default.jmx.enabled=false");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +		validate(enablement, true, "found property endpoints.default.web.enabled");, +		validate(enablement, false, "found property endpoints.biz.enabled");, +		validate(enablement, true, "found property endpoints.biz.web.enabled");, +		validate(enablement, false, "found property endpoints.biz.jmx.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=false",, +				"endpoints.biz.enabled=false", "endpoints.biz.jmx.enabled=true");, +		validate(enablement, true, "found property endpoints.biz.jmx.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=false",, +		validate(enablement, true, "found property endpoints.biz.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=true");, +		validate(enablement, true, "found property endpoints.default.jmx.enabled");, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpoint.java, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfigurationTests.java, +				.withPropertyValues(, +						"endpoints.configprops.keys-to-sanitize: .*pass.*, property"), +	private ContextConsumer<AssertableApplicationContext> validateTestProperties(, +			String dbPassword, String myTestProperty) {, +			assertThat(context), +					.hasSingleBean(ConfigurationPropertiesReportEndpoint.class);, +	static class TestProperties {, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +		validate(enablement, true, "endpoint 'biz' is enabled (default)");, +		validate(enablement, false, "endpoint 'default' (web) is disabled by default");, +		validate(enablement, false, "found property endpoints.default.enabled");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +				"endpoints.default.enabled=true", "endpoints.default.jmx.enabled=false");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +		validate(enablement, true, "found property endpoints.default.web.enabled");, +		validate(enablement, false, "found property endpoints.biz.enabled");, +		validate(enablement, true, "found property endpoints.biz.web.enabled");, +		validate(enablement, false, "found property endpoints.biz.jmx.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=false",, +				"endpoints.biz.enabled=false", "endpoints.biz.jmx.enabled=true");, +		validate(enablement, true, "found property endpoints.biz.jmx.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=false",, +		validate(enablement, true, "found property endpoints.biz.enabled");, +				"endpoints.default.enabled=false", "endpoints.default.jmx.enabled=true");, +		validate(enablement, true, "found property endpoints.default.jmx.enabled");, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfigurationTests.java, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement,, +				exposure);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpoint.java, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfigurationTests.java, +				.withPropertyValues(, +						"endpoints.configprops.keys-to-sanitize: .*pass.*, property"), +	private ContextConsumer<AssertableApplicationContext> validateTestProperties(, +			String dbPassword, String myTestProperty) {, +			assertThat(context), +					.hasSingleBean(ConfigurationPropertiesReportEndpoint.class);, +	static class TestProperties {, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +		validate(enablement, true, "endpoint 'biz' is enabled (default)");, +		validate(enablement, false, "endpoint 'default' (web) is disabled by default");, +		validate(enablement, false, "found property endpoints.default.enabled");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +				"endpoints.default.enabled=true", "endpoints.default.jmx.enabled=false");, +		validate(enablement, false, "found property endpoints.default.jmx.enabled");, +		validate(enablement, true, "found property endpoints.default.web.enabled");]