[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,, +		SmartInitializingSingleton {, +		childContext.register(EndpointWebMvcChildContextConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		CloseEventPropagationListener, +				.addIfPossible(this.applicationContext, childContext);, +			managementContextResolver().setApplicationContext(childContext);, +	/**, +	 * {@link ApplicationListener} to propagate the {@link ContextClosedEvent} from a, +	 * parent to a child., +	 */, +	private static class CloseEventPropagationListener implements, +			ApplicationListener<ContextClosedEvent> {, +, +		private final ApplicationContext parentContext;, +, +		private final ConfigurableApplicationContext childContext;, +, +		public CloseEventPropagationListener(ApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			this.parentContext = parentContext;, +			this.childContext = childContext;, +		}, +, +		@Override, +		public void onApplicationEvent(ContextClosedEvent event) {, +			if (event.getApplicationContext() == this.parentContext) {, +				this.childContext.close();, +			}, +		}, +, +		public static void addIfPossible(ApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			if (parentContext instanceof ConfigurableApplicationContext) {, +				add((ConfigurableApplicationContext) parentContext, childContext);, +			}, +		}, +, +		private static void add(ConfigurableApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			parentContext.addApplicationListener(new CloseEventPropagationListener(, +					parentContext, childContext));, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +public class EndpointWebMvcAutoConfiguration implements ApplicationContextAware,, +		SmartInitializingSingleton {, +		childContext.register(EndpointWebMvcChildContextConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		CloseEventPropagationListener, +				.addIfPossible(this.applicationContext, childContext);, +			managementContextResolver().setApplicationContext(childContext);, +	/**, +	 * {@link ApplicationListener} to propagate the {@link ContextClosedEvent} from a, +	 * parent to a child., +	 */, +	private static class CloseEventPropagationListener implements, +			ApplicationListener<ContextClosedEvent> {, +, +		private final ApplicationContext parentContext;, +, +		private final ConfigurableApplicationContext childContext;, +, +		public CloseEventPropagationListener(ApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			this.parentContext = parentContext;, +			this.childContext = childContext;, +		}, +, +		@Override, +		public void onApplicationEvent(ContextClosedEvent event) {, +			if (event.getApplicationContext() == this.parentContext) {, +				this.childContext.close();, +			}, +		}, +, +		public static void addIfPossible(ApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			if (parentContext instanceof ConfigurableApplicationContext) {, +				add((ConfigurableApplicationContext) parentContext, childContext);, +			}, +		}, +, +		private static void add(ConfigurableApplicationContext parentContext,, +				ConfigurableApplicationContext childContext) {, +			parentContext.addApplicationListener(new CloseEventPropagationListener(, +					parentContext, childContext));, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +@EnableWebMvc, +@Import(EndpointWebMvcImportSelector.class), +	@Bean(name = DispatcherServlet.HANDLER_MAPPING_BEAN_NAME), +	public CompositeHandlerMapping compositeHandlerMapping() {, +		return new CompositeHandlerMapping();]