[+++ b/spring-boot/src/main/java/org/springframework/boot/cloudfoundry/VcapApplicationListener.java, +	private int order = ConfigFileApplicationListener.DEFAULT_ORDER - 1;;, +++ b/spring-boot/src/main/java/org/springframework/boot/cloudfoundry/VcapApplicationListener.java, +	private int order = ConfigFileApplicationListener.DEFAULT_ORDER - 1;;, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +import java.io.IOException;, +import java.util.LinkedList;, +import java.util.Queue;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.env.PropertySourcesLoader;, +import org.springframework.boot.event.ApplicationPreparedEvent;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.ConfigurationClassPostProcessor;, +import org.springframework.util.Assert;, + * Alternative search locations and names can be specified using, + * {@link #setSearchLocations(String)} and {@link #setSearchNames(String)}., + * The 'spring.config.name' property can be used to specify an alternative name to load, + * and the 'spring.config.location' property can be used to specify alternative search, + * locations or specific files., + * <p>, + * Configuration properties are also bound to the {@link SpringApplication}. This makes it, + * possible to set {@link SpringApplication} properties dynamically, like the sources, + * ("spring.main.sources" - a CSV list) the flag to indicate a web environment, + * ("spring.main.web_environment=true") or the flag to switch off the banner, + * ("spring.main.show_banner=false")., +		ApplicationListener<ApplicationEvent>, Ordered {, +, +	private static final String DEFAULT_PROPERTIES = "defaultProperties";, +	private static final String CONFIG_NAME_PROPERTY = "spring.config.name";, +	private static final String CONFIG_LOCATION_PROPERTY = "spring.config.location";, +	private static final String DEFAULT_SEARCH_LOCATIONS = "classpath:/,file:./,", +			+ "classpath:/config/,file:./config/";, +	private static final String DEFAULT_NAMES = "application";, +	public static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 10;, +, +	private String searchLocations;, +, +	private String names;, +, +	private int order = DEFAULT_ORDER;, +	public void onApplicationEvent(ApplicationEvent event) {, +		if (event instanceof ApplicationEnvironmentPreparedEvent) {, +			onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event);, +		}, +		if (event instanceof ApplicationPreparedEvent) {, +			onApplicationPreparedEvent((ApplicationPreparedEvent) event);, +		}, +	};, +, +	private void onApplicationEnvironmentPreparedEvent(, +			ApplicationEnvironmentPreparedEvent event) {, +			onApplicationEnvironmentPreparedEvent((ConfigurableEnvironment) environment,, +					event.getSpringApplication());, +	private void onApplicationEnvironmentPreparedEvent(, +			ConfigurableEnvironment environment, SpringApplication application) {, +		RandomValuePropertySource.addToEnvironment(environment);, +		try {, +			PropertySource<?> defaultProperties = environment.getPropertySources(), +					.remove(DEFAULT_PROPERTIES);, +			new Loader(environment).load();, +		catch (IOException ex) {, +			throw new IllegalStateException("Unable to load configuration files", ex);, +		bindToSpringApplication(application, environment);, +	private void bindToSpringApplication(SpringApplication application,, +			ConfigurableEnvironment environment) {, +		RelaxedDataBinder binder = new RelaxedDataBinder(application, "spring.main");, +		binder.setConversionService(this.conversionService);, +		binder.bind(new PropertySourcesPropertyValues(environment.getPropertySources()));, +	private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {, +		ConfigurableApplicationContext context = event.getApplicationContext();, +		context.addBeanFactoryPostProcessor(new PropertySourceOrderingPostProcessor(, +				context));, +	 * Set the search locations that will be considered as a comma-separated list., +	public void setSearchLocations(String locations) {, +		Assert.hasLength(locations, "Locations must not be empty");, +		this.searchLocations = locations;, +	}, +, +	/**, +	 * Sets the names of the files that should be loaded (excluding file extension) as a, +	 * comma-separated list., +	 */, +	public void setSearchNames(String names) {, +		Assert.hasLength(names, "Names must not be empty");, +	 * {@link BeanFactoryPostProcessor} to re-order our property sources below any, +	 * {@code @ProperySource} items added by the {@link ConfigurationClassPostProcessor}., +	private class PropertySourceOrderingPostProcessor implements, +			BeanFactoryPostProcessor, Ordered {, +		private ConfigurableApplicationContext context;, +		public PropertySourceOrderingPostProcessor(ConfigurableApplicationContext context) {, +			this.context = context;, +		public int getOrder() {, +			return Ordered.HIGHEST_PRECEDENCE;, +		}, +, +		@Override, +		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)]