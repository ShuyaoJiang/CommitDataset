[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import javax.servlet.ServletRegistration;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.glassfish.jersey.CommonProperties;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.context.ServletContextAware;, +public class JerseyAutoConfiguration implements ServletContextAware {, +, +	private static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);, +		registration.setName(getServletRegistrationName());, +	private String getServletRegistrationName() {, +		return ClassUtils.getUserClass(this.config.getClass()).getName();, +	}, +, +	@Override, +	public void setServletContext(ServletContext servletContext) {, +		String servletRegistrationName = getServletRegistrationName();, +		ServletRegistration registration = servletContext, +				.getServletRegistration(servletRegistrationName);, +		if (registration != null) {, +			if (logger.isInfoEnabled()) {, +				logger.info("Configuring existing registration for Jersey servlet '", +						+ servletRegistrationName + "'");, +			}, +			registration.setInitParameters(this.jersey.getInit());, +			registration.setInitParameter(, +					CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,, +					Boolean.TRUE.toString());, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import javax.servlet.ServletRegistration;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.glassfish.jersey.CommonProperties;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.context.ServletContextAware;, +public class JerseyAutoConfiguration implements ServletContextAware {, +, +	private static final Log logger = LogFactory.getLog(JerseyAutoConfiguration.class);, +		registration.setName(getServletRegistrationName());, +	private String getServletRegistrationName() {, +		return ClassUtils.getUserClass(this.config.getClass()).getName();, +	}, +, +	@Override, +	public void setServletContext(ServletContext servletContext) {, +		String servletRegistrationName = getServletRegistrationName();, +		ServletRegistration registration = servletContext, +				.getServletRegistration(servletRegistrationName);, +		if (registration != null) {, +			if (logger.isInfoEnabled()) {, +				logger.info("Configuring existing registration for Jersey servlet '", +						+ servletRegistrationName + "'");, +			}, +			registration.setInitParameters(this.jersey.getInit());, +			registration.setInitParameter(, +					CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,, +					Boolean.TRUE.toString());, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationServletContainerTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jersey;, +, +import javax.ws.rs.GET;, +import javax.ws.rs.Path;, +, +import org.apache.catalina.Context;, +import org.apache.catalina.Wrapper;, +import org.glassfish.jersey.server.ResourceConfig;, +import org.glassfish.jersey.servlet.ServletContainer;, +import org.junit.ClassRule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.autoconfigure.jersey.JerseyAutoConfigurationServletContainerTests.Application;, +import org.springframework.boot.autoconfigure.test.ImportAutoConfiguration;]