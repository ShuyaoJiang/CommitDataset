[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuffer matchMessage = new StringBuffer();, +, +				return ConditionOutcome.noMatch("@ConditionalOnBean " + spec, +						+ " found no beans");, +			matchMessage.append("@ConditionalOnBean " + spec + " found the following ", +					+ matching);, +			matchMessage.append(matchMessage.length() == 0 ? "" : " ");, +			matchMessage.append("@ConditionalOnMissingBean " + spec + " found no beans");, +		return ConditionOutcome.match(matchMessage.toString());, +, +, +, +			StringBuilder string = new StringBuilder();, +			string.append("(");, +			if (!this.names.isEmpty()) {, +				string.append("names: ");, +				string.append(StringUtils.collectionToCommaDelimitedString(this.names));, +				if (!this.types.isEmpty()) {, +					string.append("; ");, +				}, +			}, +			if (!this.types.isEmpty()) {, +				string.append("types: ");, +				string.append(StringUtils.collectionToCommaDelimitedString(this.types));, +			}, +			string.append("; SearchStrategy: ");, +			string.append(this.strategy.toString().toLowerCase());, +			string.append(")");, +			return string.toString();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuffer matchMessage = new StringBuffer();, +, +				return ConditionOutcome.noMatch("@ConditionalOnBean " + spec, +						+ " found no beans");, +			matchMessage.append("@ConditionalOnBean " + spec + " found the following ", +					+ matching);, +			matchMessage.append(matchMessage.length() == 0 ? "" : " ");, +			matchMessage.append("@ConditionalOnMissingBean " + spec + " found no beans");, +		return ConditionOutcome.match(matchMessage.toString());, +, +, +, +			StringBuilder string = new StringBuilder();, +			string.append("(");, +			if (!this.names.isEmpty()) {, +				string.append("names: ");, +				string.append(StringUtils.collectionToCommaDelimitedString(this.names));, +				if (!this.types.isEmpty()) {, +					string.append("; ");, +				}, +			}, +			if (!this.types.isEmpty()) {, +				string.append("types: ");, +				string.append(StringUtils.collectionToCommaDelimitedString(this.types));, +			}, +			string.append("; SearchStrategy: ");, +			string.append(this.strategy.toString().toLowerCase());, +			string.append(")");, +			return string.toString();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuffer matchMessage = new StringBuffer();, +, +				return ConditionOutcome, +						.noMatch("required @ConditionalOnClass classes not found: ", +			matchMessage.append("@ConditionalOnClass classes found: ", +					+ StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +							onClasses, MatchType.PRESENT, context)));, +				return ConditionOutcome, +						.noMatch("required @ConditionalOnMissing classes found: ", +			matchMessage.append(matchMessage.length() == 0 ? "" : " ");, +			matchMessage.append("@ConditionalOnMissing classes not found: ", +					+ StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +							onMissingClasses, MatchType.MISSING, context)));, +		return ConditionOutcome.match(matchMessage.toString());]