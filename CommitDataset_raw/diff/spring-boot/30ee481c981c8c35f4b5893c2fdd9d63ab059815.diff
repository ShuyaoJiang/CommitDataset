[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DataSourceInitializedPublisher.java, +import javax.persistence.EntityManager;, +import javax.persistence.spi.PersistenceProvider;, +import javax.persistence.spi.PersistenceUnitInfo;, +import org.springframework.core.task.AsyncTaskExecutor;, +import org.springframework.orm.jpa.JpaDialect;, +import org.springframework.orm.jpa.JpaVendorAdapter;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +		if (bean instanceof LocalContainerEntityManagerFactoryBean) {, +			LocalContainerEntityManagerFactoryBean factory = (LocalContainerEntityManagerFactoryBean) bean;, +			factory.setJpaVendorAdapter(new DataSourceSchemeCreatedPublisher(factory));, +		}, +		return (dataSource instanceof DataSource) ? (DataSource) dataSource, +				: this.dataSource;, +	final class DataSourceSchemeCreatedPublisher implements JpaVendorAdapter {, +, +		private final JpaVendorAdapter delegate;, +, +		private final LocalContainerEntityManagerFactoryBean factory;, +, +		private DataSourceSchemeCreatedPublisher(, +				LocalContainerEntityManagerFactoryBean factory) {, +			this.delegate = factory.getJpaVendorAdapter();, +			this.factory = factory;, +		}, +, +		@Override, +		public PersistenceProvider getPersistenceProvider() {, +			return this.delegate.getPersistenceProvider();, +		}, +, +		@Override, +		public String getPersistenceProviderRootPackage() {, +			return this.delegate.getPersistenceProviderRootPackage();, +		}, +, +		@Override, +		public Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {, +			return this.delegate.getJpaPropertyMap(pui);, +		}, +, +		@Override, +		public Map<String, ?> getJpaPropertyMap() {, +			return this.delegate.getJpaPropertyMap();, +		}, +, +		@Override, +		public JpaDialect getJpaDialect() {, +			return this.delegate.getJpaDialect();, +		}, +, +		@Override, +		public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {, +			return this.delegate.getEntityManagerFactoryInterface();, +		}, +, +		@Override, +		public Class<? extends EntityManager> getEntityManagerInterface() {, +			return this.delegate.getEntityManagerInterface();, +		}, +, +		@Override, +		public void postProcessEntityManagerFactory(EntityManagerFactory emf) {, +			this.delegate.postProcessEntityManagerFactory(emf);, +			AsyncTaskExecutor bootstrapExecutor = this.factory.getBootstrapExecutor();, +			if (bootstrapExecutor != null) {, +				bootstrapExecutor.execute(() -> DataSourceInitializedPublisher.this, +						.publishEventIfRequired(emf));, +			}, +			else {, +				DataSourceInitializedPublisher.this.publishEventIfRequired(emf);, +			}, +		}, +, +	}, +]