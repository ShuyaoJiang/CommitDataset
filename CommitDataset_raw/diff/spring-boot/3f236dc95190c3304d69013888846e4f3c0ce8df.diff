[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +import java.lang.reflect.AnnotatedElement;, +, +	private final AnnotatedElement element;, +, +	Definition(AnnotatedElement element, String name, MockReset reset, boolean proxyTargetAware) {, +		this.element = element;, +	 * Return the {@link AnnotatedElement} that holds this definition., +	 * @return the element that defines this definition or {@code null}, +	 */, +	public AnnotatedElement getElement() {, +		return this.element;, +	}, +, +	/**, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +import java.lang.reflect.AnnotatedElement;, +, +	private final AnnotatedElement element;, +, +	Definition(AnnotatedElement element, String name, MockReset reset, boolean proxyTargetAware) {, +		this.element = element;, +	 * Return the {@link AnnotatedElement} that holds this definition., +	 * @return the element that defines this definition or {@code null}, +	 */, +	public AnnotatedElement getElement() {, +		return this.element;, +	}, +, +	/**, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, + * @author Stephane Nicoll, +			MockDefinition definition = new MockDefinition(element, annotation.name(),, +					typeToMock,	annotation.extraInterfaces(), annotation.answer(),, +			addDefinition(definition, "mock");, +			SpyDefinition definition = new SpyDefinition(element, annotation.name(),, +					typeToSpy, annotation.reset(), annotation.proxyTargetAware());, +			addDefinition(definition, "spy");, +	private void addDefinition(Definition definition,, +		AnnotatedElement element = definition.getElement();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +import java.lang.reflect.AnnotatedElement;, +, +	private final AnnotatedElement element;, +, +	Definition(AnnotatedElement element, String name, MockReset reset, boolean proxyTargetAware) {, +		this.element = element;, +	 * Return the {@link AnnotatedElement} that holds this definition., +	 * @return the element that defines this definition or {@code null}, +	 */, +	public AnnotatedElement getElement() {, +		return this.element;, +	}, +, +	/**, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, + * @author Stephane Nicoll, +			MockDefinition definition = new MockDefinition(element, annotation.name(),, +					typeToMock,	annotation.extraInterfaces(), annotation.answer(),, +			addDefinition(definition, "mock");, +			SpyDefinition definition = new SpyDefinition(element, annotation.name(),, +					typeToSpy, annotation.reset(), annotation.proxyTargetAware());, +			addDefinition(definition, "spy");, +	private void addDefinition(Definition definition,, +		AnnotatedElement element = definition.getElement();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * If there is more than one bean of the requested type, qualifier metadata must be, + * specified at field level: <pre class="code">, + * &#064;RunWith(SpringRunner.class), + * public class ExampleTests {, + *, + *     &#064;MockBean, + *     &#064;Qualifier("example"), + *     private ExampleService service;, + *, + *     ..., + * }, + * </pre>, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +import java.lang.reflect.AnnotatedElement;, +, +	private final AnnotatedElement element;, +, +	Definition(AnnotatedElement element, String name, MockReset reset, boolean proxyTargetAware) {, +		this.element = element;, +	 * Return the {@link AnnotatedElement} that holds this definition., +	 * @return the element that defines this definition or {@code null}, +	 */, +	public AnnotatedElement getElement() {, +		return this.element;, +	}, +, +	/**, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, + * @author Stephane Nicoll, +			MockDefinition definition = new MockDefinition(element, annotation.name(),, +					typeToMock,	annotation.extraInterfaces(), annotation.answer(),, +			addDefinition(definition, "mock");, +			SpyDefinition definition = new SpyDefinition(element, annotation.name(),, +					typeToSpy, annotation.reset(), annotation.proxyTargetAware());]