[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, + * @since 1.1.0, +			registry.addInterceptor(this.sitePreferenceHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, + * @since 1.1.0, +			registry.addInterceptor(this.sitePreferenceHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Tests for {@link FlywayAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, + * @since 1.1.0, +			registry.addInterceptor(this.sitePreferenceHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Tests for {@link FlywayAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +, +		RequestMappingHandlerMapping mapping = (RequestMappingHandlerMapping) context, +				.getBean("requestMappingHandlerMapping");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, + * @since 1.1.0, +			registry.addInterceptor(this.sitePreferenceHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Tests for {@link FlywayAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +, +		RequestMappingHandlerMapping mapping = (RequestMappingHandlerMapping) context, +				.getBean("requestMappingHandlerMapping");, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayDataSource.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +		return (this.password == null ? "" : this.password);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfiguration.java, +			registry.addInterceptor(this.deviceResolverHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, + * @since 1.1.0, +			registry.addInterceptor(this.sitePreferenceHandlerInterceptor);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, + * Tests for {@link FlywayAutoConfiguration}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +, +		RequestMappingHandlerMapping mapping = (RequestMappingHandlerMapping) context, +				.getBean("requestMappingHandlerMapping");, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: Spring's test framework will cache application contexts between tests. Therefore,, +as long as your tests share the same configuration, the time consuming process of starting, +and stopping the server will only happen once, regardless of the number of tests that, +actually run., +, +Additionally you can set the `server.port` and `management.port` properties to `0`]