[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length), +		assertThat(this.context.getBean("myClient")), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length), +		assertThat(this.context.getBean("myClient")), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfigurationTests.java, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(EmptyConfiguration.class, node);, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(CustomizedConfiguration.class, node);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length), +		assertThat(this.context.getBean("myClient")), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfigurationTests.java, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(EmptyConfiguration.class, node);, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(CustomizedConfiguration.class, node);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +			assertThat(mappingContext.getPersistentEntity(type)).isNotNull();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length), +		assertThat(this.context.getBean("myClient")), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfigurationTests.java, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(EmptyConfiguration.class, node);, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(CustomizedConfiguration.class, node);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +			assertThat(mappingContext.getPersistentEntity(type)).isNotNull();, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java, +			String url = JdbcUtils.extractDatabaseMetaData(dataSource, "getURL");, +			SQLDialect sqlDialect = LOOKUP.get(driver);, +			if (sqlDialect != null) {, +				return sqlDialect;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +		assertThat(this.context.getBeanNamesForType(Client.class).length), +		assertThat(this.context.getBean("myClient")), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfigurationTests.java, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(EmptyConfiguration.class, node);, +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +			load(CustomizedConfiguration.class, node);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +			assertThat(mappingContext.getPersistentEntity(type)).isNotNull();, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqPropertiesTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]