[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/newrelic/NewRelicMetricsExportAutoConfigurationTests.java, +import io.micrometer.influx.InfluxMeterRegistry;, +import org.springframework.context.annotation.Import;, +					AutoConfigurations.of(NewRelicMetricsExportAutoConfiguration.class));, +, +	@Test, +	public void backsOffWithoutAClock() {, +		this.runner.run((context) -> assertThat(context), +				.doesNotHaveBean(InfluxMeterRegistry.class));, +	}, +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +	static class BaseConfiguration {, +	@Import(BaseConfiguration.class), +	@Import(BaseConfiguration.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/newrelic/NewRelicMetricsExportAutoConfigurationTests.java, +import io.micrometer.influx.InfluxMeterRegistry;, +import org.springframework.context.annotation.Import;, +					AutoConfigurations.of(NewRelicMetricsExportAutoConfiguration.class));, +, +	@Test, +	public void backsOffWithoutAClock() {, +		this.runner.run((context) -> assertThat(context), +				.doesNotHaveBean(InfluxMeterRegistry.class));, +	}, +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +	static class BaseConfiguration {, +	@Import(BaseConfiguration.class), +	@Import(BaseConfiguration.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxMetricsExportAutoConfigurationTests.java, +import io.micrometer.influx.InfluxMeterRegistry;, +import org.springframework.context.annotation.Import;, +					AutoConfigurations.of(SignalFxMetricsExportAutoConfiguration.class));, +, +	@Test, +	public void backsOffWithoutAClock() {, +		this.runner.run((context) -> assertThat(context), +				.doesNotHaveBean(InfluxMeterRegistry.class));, +	}, +		this.runner.withUserConfiguration(BaseConfiguration.class), +				.run((context) -> assertThat(context).hasFailed());, +		this.runner.withUserConfiguration(BaseConfiguration.class), +		this.runner.withUserConfiguration(BaseConfiguration.class), +	static class BaseConfiguration {, +	@Import(BaseConfiguration.class), +	@Import(BaseConfiguration.class)]