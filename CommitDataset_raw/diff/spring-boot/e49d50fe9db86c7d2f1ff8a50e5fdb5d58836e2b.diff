[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +		@ConditionalOnEnabledEndpoint, +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +		@ConditionalOnEnabledEndpoint, +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +		@ConditionalOnEnabledEndpoint, +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java, +	@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +		@ConditionalOnEnabledEndpoint, +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java, +	@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "management.metrics.binders.integration.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring Integration metrics.",, +      "defaultValue": true, +    },, +    {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +	@ConditionalOnProperty(value = "management.metrics.binders.integration.enabled", matchIfMissing = true), +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;, +		@ConditionalOnEnabledEndpoint, +		@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java, +	@ConditionalOnMissingBean, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "management.metrics.binders.integration.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring Integration metrics.",, +      "defaultValue": true, +    },, +    {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics;, +, +import io.micrometer.core.instrument.MeterRegistry;, +import io.micrometer.core.instrument.MockClock;, +import io.micrometer.core.instrument.composite.CompositeMeterRegistry;, +import io.micrometer.core.instrument.simple.SimpleConfig;, +import io.micrometer.core.instrument.simple.SimpleMeterRegistry;, +import io.micrometer.graphite.GraphiteMeterRegistry;, +import io.micrometer.jmx.JmxMeterRegistry;, +import org.junit.Test;, +, +import org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteMetricsExportAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxMetricsExportAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.metrics.test.MetricsRun;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Primary;, +, +import static org.assertj.core.api.Assertions.assertThat;, +]