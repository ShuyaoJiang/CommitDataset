[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +import org.springframework.security.authentication.event.AbstractAuthenticationEvent;, +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationSuccessEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationFailureExpiredEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationSwitchUserEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationFailureExpiredEvent(, +	private AuditApplicationEvent handleAuthenticationEvent(, +			AbstractAuthenticationEvent event) {, +		ArgumentCaptor<AuditApplicationEvent> eventCaptor = ArgumentCaptor, +				.forClass(AuditApplicationEvent.class);, +		this.listener.onApplicationEvent(event);, +		verify(this.publisher).publishEvent(eventCaptor.capture());, +		return eventCaptor.getValue();, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +import org.springframework.security.authentication.event.AbstractAuthenticationEvent;, +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationSuccessEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationFailureExpiredEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(, +				new AuthenticationSwitchUserEvent(, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationFailureExpiredEvent(, +	private AuditApplicationEvent handleAuthenticationEvent(, +			AbstractAuthenticationEvent event) {, +		ArgumentCaptor<AuditApplicationEvent> eventCaptor = ArgumentCaptor, +				.forClass(AuditApplicationEvent.class);, +		this.listener.onApplicationEvent(event);, +		verify(this.publisher).publishEvent(eventCaptor.capture());, +		return eventCaptor.getValue();, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthorizationAuditListenerTests.java, +import java.util.Collections;, +import org.springframework.security.access.event.AbstractAuthorizationEvent;, +		AuditApplicationEvent event = handleAuthorizationEvent(, +				new AuthenticationCredentialsNotFoundEvent(this,, +						Collections.<ConfigAttribute>singletonList(new SecurityConfig("USER")),, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthorizationEvent(, +				new AuthorizationFailureEvent(this,, +						Collections.<ConfigAttribute>singletonList(new SecurityConfig("USER")),, +		assertThat(event.getAuditEvent().getType()), +		AuditApplicationEvent event = handleAuthorizationEvent(, +				new AuthorizationFailureEvent(this,, +						Collections.<ConfigAttribute>singletonList(new SecurityConfig("USER")),, +	private AuditApplicationEvent handleAuthorizationEvent(, +			AbstractAuthorizationEvent event) {, +		ArgumentCaptor<AuditApplicationEvent> eventCaptor = ArgumentCaptor, +				.forClass(AuditApplicationEvent.class);, +		this.listener.onApplicationEvent(event);, +		verify(this.publisher).publishEvent(eventCaptor.capture());, +		return eventCaptor.getValue();, +	}, +]