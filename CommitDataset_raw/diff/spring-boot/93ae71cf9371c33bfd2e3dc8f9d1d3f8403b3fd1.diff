[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Collections;, +import java.util.HashMap;, +import com.fasterxml.jackson.databind.SerializationFeature;, + * @author Phillip Webb, +	private static final Map<?, Boolean> FEATURE_DEFAULTS;, +, +	static {, +		Map<Object, Boolean> featureDefaults = new HashMap<>();, +		featureDefaults.put(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);, +		FEATURE_DEFAULTS = Collections.unmodifiableMap(featureDefaults);, +	}, +, +				configureFeatures(builder, FEATURE_DEFAULTS);, +				features.forEach((feature, value) -> {, +					if (value != null) {, +						if (value) {, +							builder.featuresToEnable(feature);, +							builder.featuresToDisable(feature);, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Collections;, +import java.util.HashMap;, +import com.fasterxml.jackson.databind.SerializationFeature;, + * @author Phillip Webb, +	private static final Map<?, Boolean> FEATURE_DEFAULTS;, +, +	static {, +		Map<Object, Boolean> featureDefaults = new HashMap<>();, +		featureDefaults.put(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);, +		FEATURE_DEFAULTS = Collections.unmodifiableMap(featureDefaults);, +	}, +, +				configureFeatures(builder, FEATURE_DEFAULTS);, +				features.forEach((feature, value) -> {, +					if (value != null) {, +						if (value) {, +							builder.featuresToEnable(feature);, +							builder.featuresToDisable(feature);, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +import java.util.TimeZone;, +import com.fasterxml.jackson.datatype.joda.cfg.FormatConfig;, +	@Test, +	public void writeDatesAsTimestampsDefault() throws Exception {, +		this.context.register(JacksonAutoConfiguration.class);, +		this.context.refresh();, +		ObjectMapper mapper = this.context.getBean(ObjectMapper.class);, +		DateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC);, +		String expected = FormatConfig.DEFAULT_DATETIME_PRINTER.rawFormatter(), +				.withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("UTC"))), +				.print(dateTime);, +		assertThat(mapper.writeValueAsString(dateTime)).isEqualTo("\"" + expected + "\"");, +	}, +]