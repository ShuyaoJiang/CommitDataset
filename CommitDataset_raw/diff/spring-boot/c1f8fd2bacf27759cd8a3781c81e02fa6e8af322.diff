[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	private static final URL[] EMPTY_URLS = {};, +, +		for (URL url : getURLs(parentClassLoader)) {, +, +	private URL[] getURLs(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return EMPTY_URLS;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	private static final URL[] EMPTY_URLS = {};, +, +		for (URL url : getURLs(parentClassLoader)) {, +, +	private URL[] getURLs(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return EMPTY_URLS;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	private static final URL[] EMPTY_URLS = {};, +, +		for (URL url : getURLs(parentClassLoader)) {, +, +	private URL[] getURLs(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return EMPTY_URLS;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/RandomAccessJarFileTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	private static final URL[] EMPTY_URLS = {};, +, +		for (URL url : getURLs(parentClassLoader)) {, +, +	private URL[] getURLs(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return EMPTY_URLS;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/RandomAccessJarFileTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +	 * Detect the default configuration classes for the supplied test class. By default, +	 * simply delegates to, +	 * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses} ., +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	private static final URL[] EMPTY_URLS = {};, +, +		for (URL url : getURLs(parentClassLoader)) {, +, +	private URL[] getURLs(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return EMPTY_URLS;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/RandomAccessJarFileTests.java, +	@SuppressWarnings("resource"), +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +	 * Detect the default configuration classes for the supplied test class. By default, +	 * simply delegates to, +	 * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses} ., +++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationDefaultConfigurationTests.java, + * Copyright 2012-2014 the original author or authors., + * Tests for, + * {@link SpringApplicationContextLoader#detectDefaultConfigurationClasses(Class)}, + * ]