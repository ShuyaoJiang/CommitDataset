[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java, +@Conditional(OnClassCondition.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java, +@Conditional(OnClassCondition.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +import java.util.Iterator;, +import java.util.LinkedList;, +import org.springframework.util.StringUtils;, + * {@link Condition} that checks for the presence or absence of specific classes., + * @see ConditionalOnMissingClass, +		MultiValueMap<String, Object> onClasses = getAttributes(metadata,, +				ConditionalOnClass.class);, +		if (onClasses != null) {, +			List<String> missing = getMatchingClasses(onClasses, MatchType.MISSING,, +					context);, +			if (!missing.isEmpty()) {, +					logger.debug(checking, +							+ "Required @ConditionalOnClass classes not found: ", +							+ StringUtils.collectionToCommaDelimitedString(missing), +, +		MultiValueMap<String, Object> onMissingClasses = getAttributes(metadata,, +				ConditionalOnMissingClass.class);, +		if (onMissingClasses != null) {, +			List<String> present = getMatchingClasses(onMissingClasses,, +					MatchType.PRESENT, context);, +			if (!present.isEmpty()) {, +				if (logger.isDebugEnabled()) {, +					logger.debug(checking, +							+ "Required @ConditionalOnMissing classes found: ", +							+ StringUtils.collectionToCommaDelimitedString(present), +							+ " (search terminated with matches=false)");, +				return false;, +			}, +		}, +, +	private MultiValueMap<String, Object> getAttributes(AnnotatedTypeMetadata metadata,, +			Class<?> annotationType) {, +		return metadata.getAllAnnotationAttributes(annotationType.getName(), true);, +	}, +, +	private List<String> getMatchingClasses(MultiValueMap<String, Object> attributes,, +			MatchType matchType, ConditionContext context) {, +		List<String> matches = new LinkedList<String>();, +		addAll(matches, attributes.get("value"));, +		addAll(matches, attributes.get("name"));, +		Iterator<String> iterator = matches.iterator();, +		while (iterator.hasNext()) {, +			if (!matchType.matches(iterator.next(), context)) {, +				iterator.remove();, +			}, +		}, +		return matches;, +	}, +, +	private void addAll(List<String> list, List<Object> itemsToAdd) {, +		if (itemsToAdd != null) {, +			for (Object item : itemsToAdd) {, +				for (String arrayItem : (String[]) item) {, +					list.add(arrayItem.toString());, +				}, +	private static enum MatchType {, +, +		PRESENT {, +			@Override, +			public boolean matches(String className, ConditionContext context) {, +				return ClassUtils.isPresent(className, context.getClassLoader());, +			}, +		},, +, +		MISSING {, +			@Override, +			public boolean matches(String className, ConditionContext context) {, +				return !ClassUtils.isPresent(className, context.getClassLoader());, +			}, +		};, +, +		public abstract boolean matches(String className, ConditionContext context);, +, +	};, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.java, +@Conditional(OnClassCondition.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +import java.util.Iterator;, +import java.util.LinkedList;, +import org.springframework.util.StringUtils;, + * {@link Condition} that checks for the presence or absence of specific classes., + * @see ConditionalOnMissingClass, +		MultiValueMap<String, Object> onClasses = getAttributes(metadata,, +				ConditionalOnClass.class);, +		if (onClasses != null) {, +			List<String> missing = getMatchingClasses(onClasses, MatchType.MISSING,, +					context);, +			if (!missing.isEmpty()) {, +					logger.debug(checking, +							+ "Required @ConditionalOnClass classes not found: ", +							+ StringUtils.collectionToCommaDelimitedString(missing), +, +		MultiValueMap<String, Object> onMissingClasses = getAttributes(metadata,, +				ConditionalOnMissingClass.class);, +		if (onMissingClasses != null) {]