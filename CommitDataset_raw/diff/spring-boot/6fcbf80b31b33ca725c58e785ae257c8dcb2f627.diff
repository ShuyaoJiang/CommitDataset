[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().to(container::setMonitorInterval);, +		map.from(properties::getNoPollThreshold).whenNonNull().to(container::setNoPollThreshold);, +		map.from(properties::getLogContainerConfig).whenNonNull().to(container::setLogContainerConfig);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().to(container::setMonitorInterval);, +		map.from(properties::getNoPollThreshold).whenNonNull().to(container::setNoPollThreshold);, +		map.from(properties::getLogContainerConfig).whenNonNull().to(container::setLogContainerConfig);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, + * Copyright 2012-2018 the original author or authors., +		/**, +		 * Prefix for the listener's consumer client.id property., +		 */, +		private String clientId;, +, +		/**, +		 * Interval (ms) between publishing idle consumer events (no data received)., +		 */, +		private Long idleEventInterval;, +, +		/**, +		 * Interval (seconds) between checks for non-responsive consumers., +		 */, +		private Integer monitorInterval;, +, +		/**, +		 * Multiplier applied to pollTimeout to determine if a consumer is non-responsive., +		 */, +		private Float noPollThreshold;, +, +		/**, +		 * When true, log the container configuration during initialization (INFO level)., +		 */, +		private Boolean logContainerConfig;, +, +		public String getClientId() {, +			return this.clientId;, +		}, +, +		public void setClientId(String clientId) {, +			this.clientId = clientId;, +		}, +, +		public Long getIdleEventInterval() {, +			return this.idleEventInterval;, +		}, +, +		public void setIdleEventInterval(Long idleEventInterval) {, +			this.idleEventInterval = idleEventInterval;, +		}, +, +		public Integer getMonitorInterval() {, +			return this.monitorInterval;, +		}, +, +		public void setMonitorInterval(Integer monitorInterval) {, +			this.monitorInterval = monitorInterval;, +		}, +, +		public Float getNoPollThreshold() {, +			return this.noPollThreshold;, +		}, +, +		public void setNoPollThreshold(Float noPollThreshold) {, +			this.noPollThreshold = noPollThreshold;, +		}, +, +		public Boolean getLogContainerConfig() {, +			return this.logContainerConfig;, +		}, +, +		public void setLogContainerConfig(Boolean logContainerConfig) {, +			this.logContainerConfig = logContainerConfig;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().to(container::setMonitorInterval);, +		map.from(properties::getNoPollThreshold).whenNonNull().to(container::setNoPollThreshold);, +		map.from(properties::getLogContainerConfig).whenNonNull().to(container::setLogContainerConfig);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, + * Copyright 2012-2018 the original author or authors., +		/**, +		 * Prefix for the listener's consumer client.id property., +		 */, +		private String clientId;, +, +		/**, +		 * Interval (ms) between publishing idle consumer events (no data received)., +		 */, +		private Long idleEventInterval;, +]