[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, +		factory.setMissingQueuesFatal(configuration.isMissingQueuesFatal());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, +		factory.setMissingQueuesFatal(configuration.isMissingQueuesFatal());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		public abstract boolean isMissingQueuesFatal();, +		/**, +		 * Whether to fail if the queues declared by the container are not available on, +		 * the broker and/or whether to stop the container if one or more queues are, +		 * deleted at runtime., +		 */, +		private boolean missingQueuesFatal = true;, +, +		@Override, +		public boolean isMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +		/**, +		 * Whether to fail if the queues declared by the container are not available on, +		 * the broker., +		 */, +		private boolean missingQueuesFatal = false;, +, +		@Override, +		public boolean isMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, +		factory.setMissingQueuesFatal(configuration.isMissingQueuesFatal());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		public abstract boolean isMissingQueuesFatal();, +		/**, +		 * Whether to fail if the queues declared by the container are not available on, +		 * the broker and/or whether to stop the container if one or more queues are, +		 * deleted at runtime., +		 */, +		private boolean missingQueuesFatal = true;, +, +		@Override, +		public boolean isMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +		/**, +		 * Whether to fail if the queues declared by the container are not available on, +		 * the broker., +		 */, +		private boolean missingQueuesFatal = false;, +, +		@Override, +		public boolean isMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +						"spring.rabbitmq.listener.simple.transactionSize:20",, +						"spring.rabbitmq.listener.simple.missingQueuesFatal:false"), +					assertThat(dfa.getPropertyValue("missingQueuesFatal")), +							.isEqualTo(false);, +						"spring.rabbitmq.listener.direct.missingQueuesFatal:true"), +					assertThat(dfa.getPropertyValue("missingQueuesFatal")), +							.isEqualTo(true);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, +		factory.setMissingQueuesFatal(configuration.isMissingQueuesFatal());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		public abstract boolean isMissingQueuesFatal();, +		/**, +		 * Whether to fail if the queues declared by the container are not available on, +		 * the broker and/or whether to stop the container if one or more queues are, +		 * deleted at runtime., +		 */, +		private boolean missingQueuesFatal = true;, +, +		@Override, +		public boolean isMissingQueuesFatal() {, +			return this.missingQueuesFatal;, +		}, +, +		public void setMissingQueuesFatal(boolean missingQueuesFatal) {, +			this.missingQueuesFatal = missingQueuesFatal;, +		}, +]