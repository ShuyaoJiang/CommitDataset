[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/SpringJUnitTests.java, +import org.springframework.boot.context.listener.ConfigFileApplicationListener;, +@ContextConfiguration(classes = TestConfiguration.class, initializers = ConfigFileApplicationListener.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/SpringJUnitTests.java, +import org.springframework.boot.context.listener.ConfigFileApplicationListener;, +@ContextConfiguration(classes = TestConfiguration.class, initializers = ConfigFileApplicationListener.class), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/SpringJUnitTests.java, +import org.springframework.boot.context.listener.ConfigFileApplicationListener;, +@ContextConfiguration(classes = TestConfiguration.class, initializers = ConfigFileApplicationListener.class), +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +/*, + * Copyright 2010-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.listener;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Random;, +import java.util.Set;, +, +import org.springframework.beans.PropertyValues;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.SpringApplicationEnvironmentAvailableEvent;, +import org.springframework.boot.bind.PropertySourcesPropertyValues;, +import org.springframework.boot.bind.RelaxedDataBinder;, +import org.springframework.boot.config.PropertiesPropertySourceLoader;, +import org.springframework.boot.config.PropertySourceLoader;, +import org.springframework.boot.config.YamlPropertySourceLoader;, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +import org.springframework.context.annotation.PropertySources;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.DigestUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link ApplicationContextInitializer} that configures the context environment by, + * loading properties from well known file locations. By default properties will be loaded, + * from 'application.properties' and/or 'application.yml' files in the following, + * locations:, + * <ul>, + * <li>classpath:</li>, + * <li>file:./</li>, + * <li>classpath:config/</li>, + * <li>file:./config/:</li>, + * </ul>, + * , + * <p>, + * Alternative locations and names can be specified using, + * {@link #setSearchLocations(String[])} and {@link #setNames(String)}., + * , + * <p>, + * Additional files will also be loaded based on active profiles. For example if a 'web', + * profile is active 'application-web.properties' and 'application-web.yml' will be, + * considered., + * , + * <p>, + * The 'spring.config.name' property can be used to specify an alternative name to load or, + * alternatively the 'spring.config.location' property can be used to specify an exact, + * resource location., + * , + * @author Dave Syer, + * @author Phillip Webb, + */]