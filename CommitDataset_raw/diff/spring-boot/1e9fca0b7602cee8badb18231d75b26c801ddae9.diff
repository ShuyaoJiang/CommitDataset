[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;, +	@Bean, +	@ConditionalOnMissingBean, +	public OAuth2AuthorizedClientService authorizedClientService(ClientRegistrationRepository clientRegistrationRepository) {, +		return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);, +	}, +, +			http.authorizeRequests().anyRequest().authenticated().and().oauth2Login();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;, +	@Bean, +	@ConditionalOnMissingBean, +	public OAuth2AuthorizedClientService authorizedClientService(ClientRegistrationRepository clientRegistrationRepository) {, +		return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);, +	}, +, +			http.authorizeRequests().anyRequest().authenticated().and().oauth2Login();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;, +	public void securityConfigurerConfiguresOAuth2Login() throws Exception {, +	@Test, +	public void configurationRegistersAuthorizedClientServiceBean() throws Exception {, +		this.contextRunner, +				.withUserConfiguration(ClientRepositoryConfiguration.class,, +						OAuth2WebSecurityConfiguration.class), +				.run(context -> {, +					OAuth2AuthorizedClientService bean = context.getBean(OAuth2AuthorizedClientService.class);, +					OAuth2AuthorizedClientService authorizedClientService = (OAuth2AuthorizedClientService) ReflectionTestUtils, +							.getField(getAuthCodeFilters(context).get(0),, +									"authorizedClientService");, +					assertThat(authorizedClientService).isEqualTo(bean);, +				});, +	}, +, +	@Test, +	public void authorizedClientServiceBeanIsConditionalOnMissingBean() throws Exception {, +		this.contextRunner, +				.withUserConfiguration(OAuth2AuthorizedClientServiceConfiguration.class,, +						OAuth2WebSecurityConfiguration.class), +				.run(context -> {, +					OAuth2AuthorizedClientService bean = context.getBean(OAuth2AuthorizedClientService.class);, +					OAuth2AuthorizedClientService authorizedClientService = (OAuth2AuthorizedClientService) ReflectionTestUtils, +							.getField(getAuthCodeFilters(context).get(0),, +									"authorizedClientService");, +					assertThat(authorizedClientService).isEqualTo(bean);, +				});, +	}, +, +	@Configuration, +	@Import({ ClientRepositoryConfiguration.class }), +	static class OAuth2AuthorizedClientServiceConfiguration {, +, +		@Bean, +		public OAuth2AuthorizedClientService testAuthorizedClientService(ClientRegistrationRepository clientRegistrationRepository) {, +			return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);, +		}, +, +	}, +]