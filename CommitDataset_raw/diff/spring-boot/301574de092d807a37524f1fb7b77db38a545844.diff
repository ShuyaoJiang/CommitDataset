[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +					runSafely(new ConversionServiceInitializer());, +	 * Early initializer for Spring's ConversionService., +	private static class ConversionServiceInitializer implements Runnable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +					runSafely(new ConversionServiceInitializer());, +	 * Early initializer for Spring's ConversionService., +	private static class ConversionServiceInitializer implements Runnable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +	 * meaningful message if that's not the case., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +					runSafely(new ConversionServiceInitializer());, +	 * Early initializer for Spring's ConversionService., +	private static class ConversionServiceInitializer implements Runnable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +	 * meaningful message if that's not the case., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java, +	 * Resolved template views, returning already cached instances without a global lock., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +					runSafely(new ConversionServiceInitializer());, +	 * Early initializer for Spring's ConversionService., +	private static class ConversionServiceInitializer implements Runnable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +	 * meaningful message if that's not the case., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java, +	 * Resolved template views, returning already cached instances without a global lock., +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/SilentExitExceptionHandlerTests.java, +	public void doesntInterfereWithOtherExceptions() throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +					runSafely(new ConversionServiceInitializer());, +	 * Early initializer for Spring's ConversionService., +	private static class ConversionServiceInitializer implements Runnable {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +	 * meaningful message if that's not the case., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java, +	 * Resolved template views, returning already cached instances without a global lock., +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/SilentExitExceptionHandlerTests.java, +	public void doesntInterfereWithOtherExceptions() throws Exception {, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +<<using-boot-structuring-your-code, structured your code>> in a sensible way your main, +	import org.junit.Test;, +	import org.junit.runner.RunWith;, +	import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;, +	import org.springframework.test.context.junit4.SpringRunner;, +	import org.springframework.transaction.annotation.Transactional;]