[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public void filterOrderCanBeCustomized() {, +		this.contextRunner.withPropertyValues("spring.session.store-type=jdbc",, +						"spring.session.servlet.filter-order=123").run((context) -> {, +			FilterRegistrationBean<?> registration = context, +					.getBean(FilterRegistrationBean.class);, +			assertThat(registration.getOrder()).isEqualTo(123);, +		});, +	}, +, +	@Test, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public void filterOrderCanBeCustomized() {, +		this.contextRunner.withPropertyValues("spring.session.store-type=jdbc",, +						"spring.session.servlet.filter-order=123").run((context) -> {, +			FilterRegistrationBean<?> registration = context, +					.getBean(FilterRegistrationBean.class);, +			assertThat(registration.getOrder()).isEqualTo(123);, +		});, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues(, +		this.contextRunner.withUserConfiguration(, +				SessionRepositoryConfiguration.class).run((context) -> {, +		this.contextRunner.withUserConfiguration(SessionRepositoryConfiguration.class), +				.withPropertyValues("spring.session.servlet.filter-dispatcher-types=error, request"), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public void filterOrderCanBeCustomized() {, +		this.contextRunner.withPropertyValues("spring.session.store-type=jdbc",, +						"spring.session.servlet.filter-order=123").run((context) -> {, +			FilterRegistrationBean<?> registration = context, +					.getBean(FilterRegistrationBean.class);, +			assertThat(registration.getOrder()).isEqualTo(123);, +		});, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues(, +		this.contextRunner.withUserConfiguration(, +				SessionRepositoryConfiguration.class).run((context) -> {, +		this.contextRunner.withUserConfiguration(SessionRepositoryConfiguration.class), +				.withPropertyValues("spring.session.servlet.filter-dispatcher-types=error, request"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/FilterOrderingIntegrationTests.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.session.MapSessionRepository;, +import org.springframework.session.config.annotation.web.http.EnableSpringHttpSession;, +				TestSessionConfiguration.class, TestRedisConfiguration.class,, +				WebMvcAutoConfiguration.class, SecurityAutoConfiguration.class,, +				SessionAutoConfiguration.class,, +	@EnableSpringHttpSession, +	static class TestSessionConfiguration {, +, +		@Bean, +		public MapSessionRepository mapSessionRepository() {, +			return new MapSessionRepository(new ConcurrentHashMap<>());, +		}, +, +	}, +, +	@Configuration, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +import org.springframework.boot.web.servlet.FilterRegistrationBean;, +	public void filterOrderCanBeCustomized() {, +		this.contextRunner.withPropertyValues("spring.session.store-type=jdbc",, +						"spring.session.servlet.filter-order=123").run((context) -> {, +			FilterRegistrationBean<?> registration = context, +					.getBean(FilterRegistrationBean.class);, +			assertThat(registration.getOrder()).isEqualTo(123);, +		});, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues(, +		this.contextRunner.withUserConfiguration(, +				SessionRepositoryConfiguration.class).run((context) -> {]