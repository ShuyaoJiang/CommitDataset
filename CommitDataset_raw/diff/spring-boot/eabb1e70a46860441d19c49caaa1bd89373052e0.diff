[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.web.context.WebApplicationContext;, +		if (!WebApplicationContext.class.isAssignableFrom(applicationContextClass)) {, +			this.webEnvironment = false;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.web.context.WebApplicationContext;, +		if (!WebApplicationContext.class.isAssignableFrom(applicationContextClass)) {, +			this.webEnvironment = false;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +	private Set<String> defaultArgs = new LinkedHashSet<String>();, +		this.defaultArgs.addAll(Arrays.asList(defaultArgs));, +		this.application.setDefaultArgs(this.defaultArgs, +				.toArray(new String[this.defaultArgs.size()]));, +	private SpringApplicationBuilder defaultArgs(Set<String> defaultArgs) {, +		this.defaultArgs = defaultArgs;, +		return this;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.web.context.WebApplicationContext;, +		if (!WebApplicationContext.class.isAssignableFrom(applicationContextClass)) {, +			this.webEnvironment = false;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +	private Set<String> defaultArgs = new LinkedHashSet<String>();, +		this.defaultArgs.addAll(Arrays.asList(defaultArgs));, +		this.application.setDefaultArgs(this.defaultArgs, +				.toArray(new String[this.defaultArgs.size()]));, +	private SpringApplicationBuilder defaultArgs(Set<String> defaultArgs) {, +		this.defaultArgs = defaultArgs;, +		return this;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationBuilderTests.java, +import static org.hamcrest.Matchers.equalTo;, +	public void profileAndDefaultArgs() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(), +				.sources(ExampleConfig.class), +				.contextClass(StaticApplicationContext.class).profiles("foo"), +				.defaultArgs("--foo=bar");, +		this.context = application.run();, +		assertThat(this.context, is(instanceOf(StaticApplicationContext.class)));, +		assertThat(this.context.getEnvironment().getProperty("foo"), is(equalTo("bar")));, +		assertThat(this.context.getEnvironment().acceptsProfiles("foo"), is(true));, +	}, +, +	@Test]