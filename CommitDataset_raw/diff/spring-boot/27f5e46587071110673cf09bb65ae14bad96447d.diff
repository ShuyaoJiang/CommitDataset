[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/flyway/FlywayEndpoint.java, +			this.installedOn = nullSafeToInstant(info.getInstalledOn());, +		private Instant nullSafeToInstant(Date date) {, +			return (date != null) ? Instant.ofEpochMilli(date.getTime()) : null;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/flyway/FlywayEndpoint.java, +			this.installedOn = nullSafeToInstant(info.getInstalledOn());, +		private Instant nullSafeToInstant(Date date) {, +			return (date != null) ? Instant.ofEpochMilli(date.getTime()) : null;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/flyway/FlywayEndpointTests.java, +import java.util.Map;, +, +import org.springframework.boot.actuate.flyway.FlywayEndpoint.FlywayDescriptor;, +import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;, +				.run((context) -> {, +					Map<String, FlywayDescriptor> flywayBeans = context, +							.getBean(FlywayEndpoint.class).flywayBeans().getContexts(), +							.get(context.getId()).getFlywayBeans();, +					assertThat(flywayBeans).hasSize(1);, +					assertThat(flywayBeans.values().iterator().next().getMigrations()), +							.hasSize(3);, +				});, +	}, +, +	@Test, +	public void whenFlywayHasBeenBaselinedFlywayReportIsProduced() {, +		new ApplicationContextRunner(), +				.withUserConfiguration(BaselinedFlywayConfig.class, Config.class), +				.run((context) -> {, +					Map<String, FlywayDescriptor> flywayBeans = context, +							.getBean(FlywayEndpoint.class).flywayBeans().getContexts(), +							.get(context.getId()).getFlywayBeans();, +					assertThat(flywayBeans).hasSize(1);, +					assertThat(flywayBeans.values().iterator().next().getMigrations()), +							.hasSize(3);, +				});, +	@Configuration, +	public static class BaselinedFlywayConfig {, +, +		@Bean, +		public FlywayMigrationStrategy baseliningMigrationStrategy() {, +			return (flyway) -> {, +				flyway.setBaselineVersionAsString("2");, +				flyway.baseline();, +				flyway.migrate();, +			};, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/flyway/FlywayEndpoint.java, +			this.installedOn = nullSafeToInstant(info.getInstalledOn());, +		private Instant nullSafeToInstant(Date date) {, +			return (date != null) ? Instant.ofEpochMilli(date.getTime()) : null;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/flyway/FlywayEndpointTests.java, +import java.util.Map;, +, +import org.springframework.boot.actuate.flyway.FlywayEndpoint.FlywayDescriptor;, +import org.springframework.boot.autoconfigure.flyway.FlywayMigrationStrategy;, +				.run((context) -> {, +					Map<String, FlywayDescriptor> flywayBeans = context, +							.getBean(FlywayEndpoint.class).flywayBeans().getContexts(), +							.get(context.getId()).getFlywayBeans();, +					assertThat(flywayBeans).hasSize(1);, +					assertThat(flywayBeans.values().iterator().next().getMigrations()), +							.hasSize(3);, +				});, +	}, +, +	@Test, +	public void whenFlywayHasBeenBaselinedFlywayReportIsProduced() {, +		new ApplicationContextRunner(), +				.withUserConfiguration(BaselinedFlywayConfig.class, Config.class), +				.run((context) -> {, +					Map<String, FlywayDescriptor> flywayBeans = context, +							.getBean(FlywayEndpoint.class).flywayBeans().getContexts(), +							.get(context.getId()).getFlywayBeans();, +					assertThat(flywayBeans).hasSize(1);, +					assertThat(flywayBeans.values().iterator().next().getMigrations()), +							.hasSize(3);, +				});, +	@Configuration, +	public static class BaselinedFlywayConfig {, +, +		@Bean, +		public FlywayMigrationStrategy baseliningMigrationStrategy() {, +			return (flyway) -> {, +				flyway.setBaselineVersionAsString("2");, +				flyway.baseline();, +				flyway.migrate();, +			};, +		}, +, +	}, +]