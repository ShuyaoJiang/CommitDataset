[+++ b/docs/howto.md, +spring.profiles.active=production, +, +++ b/docs/howto.md, +spring.profiles.active=production, +, +++ b/spring-boot/README.md, +#### Adding active profiles, +The `spring.profiles.active` property follows the same ordering rules as other, +properties, the highest `PropertySource` will win. This means that you can specify, +active profiles in `application.properties` then **replace** them using the command line, +switch., +, +Sometimes it is useful to have profile specific properties that **add** to the active, +profiles rather than replace them. The `+` prefix can be used to add active profiles., +, +For example, when an application with following properties is run using the switch, +`--spring.profiles.active=prod` the `proddb` and `prodmq` profiles will also be activated:, +, +```yaml, +---, +my.property: fromyamlfile, +---, +spring.profiles: prod, +spring.profiles.active: +proddb,+prodmq, +```, +, +Spring Boot uses [Commons Logging](commons.apache.org/logging) for all internal logging,, +++ b/docs/howto.md, +spring.profiles.active=production, +, +++ b/spring-boot/README.md, +#### Adding active profiles, +The `spring.profiles.active` property follows the same ordering rules as other, +properties, the highest `PropertySource` will win. This means that you can specify, +active profiles in `application.properties` then **replace** them using the command line, +switch., +, +Sometimes it is useful to have profile specific properties that **add** to the active, +profiles rather than replace them. The `+` prefix can be used to add active profiles., +, +For example, when an application with following properties is run using the switch, +`--spring.profiles.active=prod` the `proddb` and `prodmq` profiles will also be activated:, +, +```yaml, +---, +my.property: fromyamlfile, +---, +spring.profiles: prod, +spring.profiles.active: +proddb,+prodmq, +```, +, +Spring Boot uses [Commons Logging](commons.apache.org/logging) for all internal logging,, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +		// Load to allow a file that defines active profiles to be considered, +		// Apply the active profiles (if any) from the first property source, +		if (environment.containsProperty(ACTIVE_PROFILES_PROPERTY)) {, +			activeProfilesFromProperty(environment,, +					environment.getProperty(ACTIVE_PROFILES_PROPERTY), true);, +		}, +, +		// Apply any profile additions from any source, +		activeProfileAdditionsFromAnySource(environment);, +, +			activeProfileAdditionsFromAnySource(environment);, +	private void activeProfileAdditionsFromAnySource(ConfigurableEnvironment environment) {, +				activeProfilesFromProperty(environment,, +						propertySource.getProperty(ACTIVE_PROFILES_PROPERTY), false);, +, +	private void activeProfilesFromProperty(ConfigurableEnvironment environment,, +			Object property, boolean addAll) {, +		for (String profile : StringUtils.commaDelimitedListToSet(property.toString())) {, +			boolean addition = profile.startsWith("+");, +			profile = (addition ? profile.substring(1) : profile);, +			if (addAll || addition) {, +				environment.addActiveProfile(profile);, +			}, +		}, +++ b/docs/howto.md, +spring.profiles.active=production, +, +++ b/spring-boot/README.md, +#### Adding active profiles, +The `spring.profiles.active` property follows the same ordering rules as other, +properties, the highest `PropertySource` will win. This means that you can specify, +active profiles in `application.properties` then **replace** them using the command line, +switch., +, +Sometimes it is useful to have profile specific properties that **add** to the active, +profiles rather than replace them. The `+` prefix can be used to add active profiles., +, +For example, when an application with following properties is run using the switch, +`--spring.profiles.active=prod` the `proddb` and `prodmq` profiles will also be activated:, +, +```yaml, +---, +my.property: fromyamlfile, +---, +spring.profiles: prod, +spring.profiles.active: +proddb,+prodmq]