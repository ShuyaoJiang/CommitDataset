[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.util.StopWatch;, +		StopWatch stopWatch = new StopWatch();, +		stopWatch.start();, +, +, +		stopWatch.stop();, +		if (this.logStartupInfo) {, +			new StartupInfoLogger(this.mainApplicationClass).logStarted(, +					getApplicationLog(), stopWatch);, +		}, +, +	/**, +	 * Called to log startup information, subclasses may override to add additional, +	 * logging., +	 */, +		new StartupInfoLogger(this.mainApplicationClass).logStarting(getApplicationLog());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.util.StopWatch;, +		StopWatch stopWatch = new StopWatch();, +		stopWatch.start();, +, +, +		stopWatch.stop();, +		if (this.logStartupInfo) {, +			new StartupInfoLogger(this.mainApplicationClass).logStarted(, +					getApplicationLog(), stopWatch);, +		}, +, +	/**, +	 * Called to log startup information, subclasses may override to add additional, +	 * logging., +	 */, +		new StartupInfoLogger(this.mainApplicationClass).logStarting(getApplicationLog());, +++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.util.StopWatch;, +	public void logStarting(Log log) {, +	public void logStarted(Log log, StopWatch stopWatch) {, +		if (log.isInfoEnabled()) {, +			log.info(getStartedMessage(stopWatch));, +		}, +	}, +, +	private StringBuilder getStartedMessage(StopWatch stopWatch) {, +		StringBuilder message = new StringBuilder();, +		message.append("Started ");, +		message.append(getApplicationName());, +		message.append(" in ");, +		message.append(stopWatch.getTotalTimeSeconds());, +		message.append(" seconds");, +		return message;, +	}, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.util.StopWatch;, +		StopWatch stopWatch = new StopWatch();, +		stopWatch.start();, +, +, +		stopWatch.stop();, +		if (this.logStartupInfo) {, +			new StartupInfoLogger(this.mainApplicationClass).logStarted(, +					getApplicationLog(), stopWatch);, +		}, +, +	/**, +	 * Called to log startup information, subclasses may override to add additional, +	 * logging., +	 */, +		new StartupInfoLogger(this.mainApplicationClass).logStarting(getApplicationLog());, +++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.util.StopWatch;, +	public void logStarting(Log log) {, +	public void logStarted(Log log, StopWatch stopWatch) {, +		if (log.isInfoEnabled()) {, +			log.info(getStartedMessage(stopWatch));, +		}, +	}, +, +	private StringBuilder getStartedMessage(StopWatch stopWatch) {, +		StringBuilder message = new StringBuilder();, +		message.append("Started ");, +		message.append(getApplicationName());, +		message.append(" in ");, +		message.append(stopWatch.getTotalTimeSeconds());, +		message.append(" seconds");, +		return message;, +	}, +, +, +++ b/spring-boot/src/test/java/org/springframework/boot/StartUpLoggerTests.java, +		new StartupInfoLogger(getClass()).logStarting(this.log);]