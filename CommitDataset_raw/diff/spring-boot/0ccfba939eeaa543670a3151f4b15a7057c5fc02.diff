[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.security.web.util.matcher.RequestMatcher;, +	@ConditionalOnExpression("!${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationNoWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http.requestMatcher(new RequestMatcher() {, +				@Override, +				public boolean matches(HttpServletRequest request) {, +					return false;, +				}, +			});, +		}, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationWebSecurityConfigurerAdapter extends, +, +			if (paths.length > 0) {, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				http.httpBasic();, +				http.requestMatchers().antMatchers(paths);, +				http.authorizeRequests(), +						.anyRequest(), +						.hasAnyRole(, +								this.security.getUser().getRole().toArray(new String[0]));, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.security.web.util.matcher.RequestMatcher;, +	@ConditionalOnExpression("!${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationNoWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http.requestMatcher(new RequestMatcher() {, +				@Override, +				public boolean matches(HttpServletRequest request) {, +					return false;, +				}, +			});, +		}, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationWebSecurityConfigurerAdapter extends, +, +			if (paths.length > 0) {, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				http.httpBasic();, +				http.requestMatchers().antMatchers(paths);, +				http.authorizeRequests(), +						.anyRequest(), +						.hasAnyRole(, +								this.security.getUser().getRole().toArray(new String[0]));, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +		// Ignores and the "matches-none" filter only, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.security.web.util.matcher.RequestMatcher;, +	@ConditionalOnExpression("!${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationNoWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http.requestMatcher(new RequestMatcher() {, +				@Override, +				public boolean matches(HttpServletRequest request) {, +					return false;, +				}, +			});, +		}, +	}, +, +	@ConditionalOnExpression("${security.basic.enabled:true}"), +	@Configuration, +	@Order(SecurityProperties.BASIC_AUTH_ORDER), +	protected static class ApplicationWebSecurityConfigurerAdapter extends, +, +			if (paths.length > 0) {, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				http.httpBasic();, +				http.requestMatchers().antMatchers(paths);, +				http.authorizeRequests()]