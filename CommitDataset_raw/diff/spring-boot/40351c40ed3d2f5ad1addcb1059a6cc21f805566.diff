[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.api.MigrationVersion;, +import org.springframework.boot.context.properties.ConfigurationPropertiesBinding;, +import org.springframework.core.convert.converter.Converter;, + * @author Vedran Pavic, +	@Bean, +	@ConfigurationPropertiesBinding, +	public StringToMigrationVersionConverter stringToMigrationVersionConverter() {, +		return new StringToMigrationVersionConverter();, +	}, +, +	/**, +	 * Converts a String to a {@link MigrationVersion}., +	 */, +	private static class StringToMigrationVersionConverter implements Converter<String, MigrationVersion> {, +, +		@Override, +		public MigrationVersion convert(String source) {, +			return MigrationVersion.fromVersion(source);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.api.MigrationVersion;, +import org.springframework.boot.context.properties.ConfigurationPropertiesBinding;, +import org.springframework.core.convert.converter.Converter;, + * @author Vedran Pavic, +	@Bean, +	@ConfigurationPropertiesBinding, +	public StringToMigrationVersionConverter stringToMigrationVersionConverter() {, +		return new StringToMigrationVersionConverter();, +	}, +, +	/**, +	 * Converts a String to a {@link MigrationVersion}., +	 */, +	private static class StringToMigrationVersionConverter implements Converter<String, MigrationVersion> {, +, +		@Override, +		public MigrationVersion convert(String source) {, +			return MigrationVersion.fromVersion(source);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.api.MigrationVersion;, + * @author Vedran Pavic, +	@Test, +	public void overrideBaselineVersion() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context, "flyway.baseline-version=0");, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		Flyway flyway = this.context.getBean(Flyway.class);, +		assertThat(flyway.getBaselineVersion(), equalTo(MigrationVersion.fromVersion("0")));, +	}, +]