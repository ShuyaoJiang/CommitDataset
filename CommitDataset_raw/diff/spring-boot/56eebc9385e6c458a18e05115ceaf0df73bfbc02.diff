[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header, AsciiBytes nameAlias) {, +		super((nameAlias != null) ? nameAlias.toString() : header.getName().toString());, +		this.name = (nameAlias != null) ? nameAlias : header.getName();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header, AsciiBytes nameAlias) {, +		super((nameAlias != null) ? nameAlias.toString() : header.getName().toString());, +		this.name = (nameAlias != null) ? nameAlias : header.getName();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java, +import java.util.jar.Attributes;, +import java.util.jar.Attributes.Name;, +import java.util.jar.Manifest;, +	private static final String META_INF_PREFIX = "META-INF/";, +, +	private static final Name MULTI_RELEASE = new Name("Multi-Release");, +, +	private static final int BASE_VERSION = 8;, +, +	private static final int RUNTIME_VERSION;, +, +	static {, +		int version;, +		try {, +			Object runtimeVersion = Runtime.class.getMethod("version").invoke(null);, +			version = (int) runtimeVersion.getClass().getMethod("major"), +					.invoke(runtimeVersion);, +		}, +		catch (Throwable ex) {, +			version = 8;, +		}, +		RUNTIME_VERSION = version;, +	}, +, +	private Boolean multiReleaseJar;, +, +		if (RUNTIME_VERSION == BASE_VERSION) {, +			this.multiReleaseJar = false;, +		}, +		T entry = doGetEntry(name, type, cacheEntry, null);, +		if (isMultiReleaseJar() && !isMetaInfEntry(name)) {, +			int version = RUNTIME_VERSION;, +			AsciiBytes nameAlias = (entry instanceof JarEntry), +					? ((JarEntry) entry).getAsciiBytesName(), +					: new AsciiBytes(name.toString());, +			while (version > BASE_VERSION) {, +				T versionedEntry = doGetEntry("META-INF/versions/" + version + "/" + name,, +						type, cacheEntry, nameAlias);, +				if (versionedEntry != null) {, +					return versionedEntry;, +				}, +				version--;, +			}, +		}, +		return entry;, +	}, +, +	private boolean isMetaInfEntry(CharSequence name) {, +		return name.toString().startsWith(META_INF_PREFIX);, +	}, +, +	private boolean isMultiReleaseJar() {, +		Boolean multiRelease = this.multiReleaseJar;, +		if (multiRelease != null) {, +			return multiRelease;, +		}, +		try {, +			Manifest manifest = this.jarFile.getManifest();, +			if (manifest == null) {, +				multiRelease = false;, +			}, +			else {, +				Attributes attributes = manifest.getMainAttributes();, +				multiRelease = attributes.containsKey(MULTI_RELEASE);, +			}, +		}, +		catch (IOException ex) {, +			multiRelease = false;, +		}, +		this.multiReleaseJar = multiRelease;, +		return multiRelease;, +	}, +, +	private <T extends FileHeader> T doGetEntry(CharSequence name, Class<T> type,, +			boolean cacheEntry, AsciiBytes nameAlias) {, +		T entry = getEntry(hashCode, name, NO_SUFFIX, type, cacheEntry, nameAlias);, +			entry = getEntry(hashCode, name, SLASH, type, cacheEntry, nameAlias);, +			char suffix, Class<T> type, boolean cacheEntry, AsciiBytes nameAlias) {, +			T entry = getEntry(index, type, cacheEntry, nameAlias);, +			if (entry.hasName((nameAlias != null) ? nameAlias.toString() : name,, +					suffix)) {, +			boolean cacheEntry, AsciiBytes nameAlias) {, +				entry = new JarEntry(this.jarFile, (CentralDirectoryFileHeader) entry,, +						nameAlias);, +			return getEntry(entryIndex, JarEntry.class, false, null);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header, AsciiBytes nameAlias) {, +		super((nameAlias != null) ? nameAlias.toString() : header.getName().toString());, +		this.name = (nameAlias != null) ? nameAlias : header.getName();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java, +import java.util.jar.Attributes;]