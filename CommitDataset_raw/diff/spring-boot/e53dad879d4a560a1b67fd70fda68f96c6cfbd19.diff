[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +			"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>();, +			if (!this.security.getBasic().isEnabled()) {, +				ignored.addAll(this.security.getIgnored());, +				if (ignored.isEmpty()) {, +					ignored.addAll(DEFAULT_IGNORED);, +				}, +				else if (ignored.contains("none")) {, +					ignored.remove("none");, +				}, +			}, +			ignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,, +					false)));, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +			"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>();, +			if (!this.security.getBasic().isEnabled()) {, +				ignored.addAll(this.security.getIgnored());, +				if (ignored.isEmpty()) {, +					ignored.addAll(DEFAULT_IGNORED);, +				}, +				else if (ignored.contains("none")) {, +					ignored.remove("none");, +				}, +			}, +			ignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,, +					false)));, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		// Just the application and management endpoints now, +		// Just the management endpoints and default ignores now, +		assertEquals(5, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +			"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>();, +			if (!this.security.getBasic().isEnabled()) {, +				ignored.addAll(this.security.getIgnored());, +				if (ignored.isEmpty()) {, +					ignored.addAll(DEFAULT_IGNORED);, +				}, +				else if (ignored.contains("none")) {, +					ignored.remove("none");, +				}, +			}, +			ignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,, +					false)));, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		// Just the application and management endpoints now, +		// Just the management endpoints and default ignores now, +		assertEquals(5, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/main/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplication.java, +		security.getBasic().setPath(""); // empty so home page is unsecured, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +	private static List<String> DEFAULT_IGNORED = Arrays.asList("/css/**", "/js/**",, +			"/images/**", "/**/favicon.ico");, +, +			List<String> ignored = new ArrayList<String>();, +			if (!this.security.getBasic().isEnabled()) {, +				ignored.addAll(this.security.getIgnored());, +				if (ignored.isEmpty()) {, +					ignored.addAll(DEFAULT_IGNORED);, +				}, +				else if (ignored.contains("none")) {, +					ignored.remove("none");, +				}, +			}, +			ignored.addAll(Arrays.asList(getEndpointPaths(this.endpointHandlerMapping,, +					false)));, +			ignoring.antMatchers(ignored.toArray(new String[0]));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		// Just the application and management endpoints now, +		// Just the management endpoints and default ignores now, +		assertEquals(5, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/main/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplication.java, +		security.getBasic().setPath(""); // empty so home page is unsecured, +++ b/spring-boot-samples/spring-boot-sample-secure/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +	<modelVersion>4.0.0</modelVersion>, +	<parent>, +		<!-- Your own application should inherit from spring-boot-starter-parent -->, +		<groupId>org.springframework.boot</groupId>, +		<artifactId>spring-boot-samples</artifactId>, +		<version>0.5.0.BUILD-SNAPSHOT</version>, +	</parent>, +	<artifactId>spring-boot-sample-secure</artifactId>, +	<packaging>jar</packaging>, +	<properties>, +		<main.basedir>${basedir}/../..</main.basedir>, +	</properties>]