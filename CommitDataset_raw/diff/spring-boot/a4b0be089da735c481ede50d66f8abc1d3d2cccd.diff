[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also, +	 * includes the links endpoint which is present at the base path of the actuator, +	 * endpoints. The {@link EndpointServerWebExchangeMatcher#excluding(Class...), +	 * excluding} method can be used to further remove specific endpoints if required. For, +	 * example: <pre class="code">, +	 * Returns a matcher that matches only on the links endpoint. It can be used when, +	 * security configuration for the links endpoint is different from the other, +	 * {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can, +	 * be used in combination with this to remove the links endpoint from, +	 * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:, +	 * <pre class="code">, +		private final boolean includeLinks;, +		private ServerWebExchangeMatcher delegate;, +		private EndpointServerWebExchangeMatcher(Class<?>[] endpoints,, +				boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),, +					includeLinks);, +		private EndpointServerWebExchangeMatcher(String[] endpoints,, +				boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),, +					includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes,, +					this.includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes,, +					this.includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, this.excludes,, +					false);, +			if (this.includeLinks, +					&& StringUtils.hasText(pathMappedEndpoints.getBasePath())) {, +				delegateMatchers.add(new PathPatternParserServerWebExchangeMatcher(, +						pathMappedEndpoints.getBasePath()));, +		protected void initialized(Supplier<WebEndpointProperties> properties) {, +			this.delegate = createDelegate(properties.get());, +, +		private ServerWebExchangeMatcher createDelegate(, +				WebEndpointProperties properties) {, +			if (StringUtils.hasText(properties.getBasePath())) {, +				return new PathPatternParserServerWebExchangeMatcher(, +						properties.getBasePath());, +			return EMPTY_MATCHER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also, +	 * includes the links endpoint which is present at the base path of the actuator, +	 * endpoints. The {@link EndpointServerWebExchangeMatcher#excluding(Class...), +	 * excluding} method can be used to further remove specific endpoints if required. For, +	 * example: <pre class="code">, +	 * Returns a matcher that matches only on the links endpoint. It can be used when, +	 * security configuration for the links endpoint is different from the other, +	 * {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can, +	 * be used in combination with this to remove the links endpoint from, +	 * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:, +	 * <pre class="code">, +		private final boolean includeLinks;, +		private ServerWebExchangeMatcher delegate;, +		private EndpointServerWebExchangeMatcher(Class<?>[] endpoints,, +				boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),, +					includeLinks);, +		private EndpointServerWebExchangeMatcher(String[] endpoints,, +				boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),, +					includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes,, +					this.includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes,, +					this.includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, this.excludes,, +					false);, +			if (this.includeLinks, +					&& StringUtils.hasText(pathMappedEndpoints.getBasePath())) {, +				delegateMatchers.add(new PathPatternParserServerWebExchangeMatcher(, +						pathMappedEndpoints.getBasePath()));, +		protected void initialized(Supplier<WebEndpointProperties> properties) {, +			this.delegate = createDelegate(properties.get());, +, +		private ServerWebExchangeMatcher createDelegate(, +				WebEndpointProperties properties) {, +			if (StringUtils.hasText(properties.getBasePath())) {, +				return new PathPatternParserServerWebExchangeMatcher(, +						properties.getBasePath());, +			return EMPTY_MATCHER;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also, +	 * includes the links endpoint which is present at the base path of the actuator, +	 * endpoints. The {@link EndpointRequestMatcher#excluding(Class...) excluding} method, +	 * can be used to further remove specific endpoints if required. For example:, +	 * <pre class="code">, +	 * Returns a matcher that matches only on the links endpoint. It can be used when, +	 * security configuration for the links endpoint is different from the other, +	 * {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointRequestMatcher#excludingLinks() excludingLinks} method can be used, +	 * in combination with this to remove the links endpoint from, +	 * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:, +	 * <pre class="code">, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),, +					includeLinks);, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(),]