[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +import java.util.HashSet;, +		Iterable<String> relaxedTargetNames = getRelaxedTargetNames();, +		Set<String> names = getNames(relaxedTargetNames);, +		PropertyValues propertyValues = getPropertyValues(names, relaxedTargetNames);, +	private Iterable<String> getRelaxedTargetNames() {, +		return (this.target != null && StringUtils.hasLength(this.targetName), +				? new RelaxedNames(this.targetName) : null);, +	}, +, +	private Set<String> getNames(Iterable<String> prefixes) {, +	private PropertyValues getPropertyValues(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		return getPropertySourcesPropertyValues(names, relaxedTargetNames);, +	private PropertyValues getPropertySourcesPropertyValues(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		PropertyNamePatternsMatcher includes = getPropertyNamePatternsMatcher(names,, +				relaxedTargetNames);, +	private PropertyNamePatternsMatcher getPropertyNamePatternsMatcher(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		if (relaxedTargetNames != null) {, +			Set<String> relaxedNames = new HashSet<String>();, +			for (String relaxedTargetName : relaxedTargetNames) {, +				relaxedNames.add(relaxedTargetName);, +			}, +					relaxedNames);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +import java.util.HashSet;, +		Iterable<String> relaxedTargetNames = getRelaxedTargetNames();, +		Set<String> names = getNames(relaxedTargetNames);, +		PropertyValues propertyValues = getPropertyValues(names, relaxedTargetNames);, +	private Iterable<String> getRelaxedTargetNames() {, +		return (this.target != null && StringUtils.hasLength(this.targetName), +				? new RelaxedNames(this.targetName) : null);, +	}, +, +	private Set<String> getNames(Iterable<String> prefixes) {, +	private PropertyValues getPropertyValues(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		return getPropertySourcesPropertyValues(names, relaxedTargetNames);, +	private PropertyValues getPropertySourcesPropertyValues(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		PropertyNamePatternsMatcher includes = getPropertyNamePatternsMatcher(names,, +				relaxedTargetNames);, +	private PropertyNamePatternsMatcher getPropertyNamePatternsMatcher(Set<String> names,, +			Iterable<String> relaxedTargetNames) {, +		if (relaxedTargetNames != null) {, +			Set<String> relaxedNames = new HashSet<String>();, +			for (String relaxedTargetName : relaxedTargetNames) {, +				relaxedNames.add(relaxedTargetName);, +			}, +					relaxedNames);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +	@Test, +	public void testBindWithDelimitedPrefixUsingMatchingDelimiter() throws Exception {, +		this.targetName = "env_foo";, +		this.ignoreUnknownFields = false;, +		MutablePropertySources propertySources = new MutablePropertySources();, +		propertySources.addLast(new SystemEnvironmentPropertySource("systemEnvironment",, +				Collections.<String, Object>singletonMap("ENV_FOO_NAME", "blah")));, +		propertySources.addLast(new RandomValuePropertySource("random"));, +		setupFactory();, +		this.factory.setPropertySources(propertySources);, +		this.factory.afterPropertiesSet();, +		Foo foo = this.factory.getObject();, +		assertEquals("blah", foo.name);, +	}, +, +	@Test, +	public void testBindWithDelimitedPrefixUsingDifferentDelimiter() throws Exception {, +		this.targetName = "env.foo";, +		MutablePropertySources propertySources = new MutablePropertySources();, +		propertySources.addLast(new SystemEnvironmentPropertySource("systemEnvironment",, +				Collections.<String, Object>singletonMap("ENV_FOO_NAME", "blah")));, +		propertySources.addLast(new RandomValuePropertySource("random"));, +		this.ignoreUnknownFields = false;, +		setupFactory();, +		this.factory.setPropertySources(propertySources);, +		this.factory.afterPropertiesSet();, +		Foo foo = this.factory.getObject();, +		assertEquals("blah", foo.name);, +	}, +]