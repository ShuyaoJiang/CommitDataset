[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties.java, + * @author Artsiom Yudovin, +		applyArchiveScanner(result);, +	private void applyArchiveScanner(Map<String, Object> result) {, +		if (!result.containsKey(AvailableSettings.SCANNER)) {, +			result.put(AvailableSettings.SCANNER,, +					"org.hibernate.boot.archive.scan.internal.DisabledScanner");, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties.java, + * @author Artsiom Yudovin, +		applyArchiveScanner(result);, +	private void applyArchiveScanner(Map<String, Object> result) {, +		if (!result.containsKey(AvailableSettings.SCANNER)) {, +			result.put(AvailableSettings.SCANNER,, +					"org.hibernate.boot.archive.scan.internal.DisabledScanner");, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernatePropertiesTests.java, + * @author Artsiom Yudovin, +	public void useArchiveScanner() {, +		this.contextRunner.withPropertyValues(, +				"spring.jpa.properties.hibernate.archive.scanner:org.hibernate.boot.archive.scan.internal.StandardScanner"), +				.run(assertHibernateProperties((hibernateProperties) -> assertThat(, +						hibernateProperties).containsEntry(AvailableSettings.SCANNER,, +								"org.hibernate.boot.archive.scan.internal.StandardScanner")));, +	}, +, +	@Test, +	public void defaultArchiveScanner() {, +		this.contextRunner.run(assertHibernateProperties(, +				(hibernateProperties) -> assertThat(hibernateProperties).containsEntry(, +						AvailableSettings.SCANNER,, +						"org.hibernate.boot.archive.scan.internal.DisabledScanner")));, +	}, +, +	@Test]