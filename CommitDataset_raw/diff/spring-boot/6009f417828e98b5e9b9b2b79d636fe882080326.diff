[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +						+ "<div>${message}</div></body></html>");, +			this.resolver = new SpelPlaceholderResolver(this.context);, +	/**, +	 * SpEL based {@link PlaceholderResolver}., +	 */, +	private static class SpelPlaceholderResolver implements PlaceholderResolver {, +, +		private final SpelExpressionParser parser = new SpelExpressionParser();, +, +		private final StandardEvaluationContext context;, +, +		public SpelPlaceholderResolver(StandardEvaluationContext context) {, +			this.context = context;, +		}, +, +		@Override, +		public String resolvePlaceholder(String name) {, +			Expression expression = this.parser.parseExpression(name);, +			try {, +				Object value = expression.getValue(this.context);, +				return HtmlUtils.htmlEscape(value == null ? null : value.toString());, +			}, +			catch (Exception ex) {, +				return null;, +			}, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +						+ "<div>${message}</div></body></html>");, +			this.resolver = new SpelPlaceholderResolver(this.context);, +	/**, +	 * SpEL based {@link PlaceholderResolver}., +	 */, +	private static class SpelPlaceholderResolver implements PlaceholderResolver {, +, +		private final SpelExpressionParser parser = new SpelExpressionParser();, +, +		private final StandardEvaluationContext context;, +, +		public SpelPlaceholderResolver(StandardEvaluationContext context) {, +			this.context = context;, +		}, +, +		@Override, +		public String resolvePlaceholder(String name) {, +			Expression expression = this.parser.parseExpression(name);, +			try {, +				Object value = expression.getValue(this.context);, +				return HtmlUtils.htmlEscape(value == null ? null : value.toString());, +			}, +			catch (Exception ex) {, +				return null;, +			}, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			setLogLevel(system, environment, entry.getKey(), entry.getValue().toString());, +		}, +	}, +, +	private void setLogLevel(LoggingSystem system, Environment environment, String name,, +			String level) {, +			level = environment.resolvePlaceholders(level);, +			system.setLogLevel(name, LogLevel.valueOf(level));, +		catch (RuntimeException ex) {, +			this.logger.error("Cannot set level: " + level + " for '" + name + "'");]