[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		String name = getOrDeduceName(this.filter);, +		FilterRegistration.Dynamic added = servletContext.addFilter(name, this.filter);, +		if (added == null) {, +			logger.info("Filter " + name, +					+ " was not registered (possibly already registered?)");, +			return;, +		}, +		configure(added);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		String name = getOrDeduceName(this.filter);, +		FilterRegistration.Dynamic added = servletContext.addFilter(name, this.filter);, +		if (added == null) {, +			logger.info("Filter " + name, +					+ " was not registered (possibly already registered?)");, +			return;, +		}, +		configure(added);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletRegistrationBean.java, +import javax.servlet.ServletRegistration.Dynamic;, +		String name = getServletName();, +		logger.info("Mapping servlet: '" + name + "' to " + this.urlMappings);, +		Dynamic added = servletContext.addServlet(name, this.servlet);, +		if (added == null) {, +			logger.info("Servlet " + name, +					+ " was not registered (possibly already registered?)");, +			return;, +		}, +		configure(added);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		String name = getOrDeduceName(this.filter);, +		FilterRegistration.Dynamic added = servletContext.addFilter(name, this.filter);, +		if (added == null) {, +			logger.info("Filter " + name, +					+ " was not registered (possibly already registered?)");, +			return;, +		}, +		configure(added);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletRegistrationBean.java, +import javax.servlet.ServletRegistration.Dynamic;, +		String name = getServletName();, +		logger.info("Mapping servlet: '" + name + "' to " + this.urlMappings);, +		Dynamic added = servletContext.addServlet(name, this.servlet);, +		if (added == null) {, +			logger.info("Servlet " + name, +					+ " was not registered (possibly already registered?)");, +			return;, +		}, +		configure(added);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/ServletRegistrationBeanTests.java, +import static org.mockito.Mockito.times;, +	public void startupWithDoubleRegistration() throws Exception {, +		ServletRegistrationBean bean = new ServletRegistrationBean(this.servlet);, +		given(this.servletContext.addServlet(anyString(), (Servlet) anyObject())), +				.willReturn(null);, +		bean.onStartup(this.servletContext);, +		verify(this.servletContext).addServlet("mockServlet", this.servlet);, +		verify(this.registration, times(0)).setAsyncSupported(true);, +	}, +, +	@Test]