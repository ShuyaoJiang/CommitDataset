[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2016 the original author or authors., + * @author Eddú Meléndez, +			String username = this.properties.getSchemaUsername();, +			String password = this.properties.getSchemaPassword();, +			runScripts(scripts, username, password);, +		String username = this.properties.getDataUsername();, +		String password = this.properties.getDataPassword();, +		runScripts(scripts, username, password);, +	private void runScripts(List<Resource> resources, String username, String password) {, +		DataSource dataSource = this.dataSource;, +		if (StringUtils.hasText(username) && StringUtils.hasText(password)) {, +			dataSource = DataSourceBuilder.create(this.properties.getClassLoader()), +					.driverClassName(this.properties.determineDriverClassName()), +					.url(this.properties.determineUrl()).username(username), +					.password(password).build();, +		}, +		DatabasePopulatorUtils.execute(populator, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2016 the original author or authors., + * @author Eddú Meléndez, +			String username = this.properties.getSchemaUsername();, +			String password = this.properties.getSchemaPassword();, +			runScripts(scripts, username, password);, +		String username = this.properties.getDataUsername();, +		String password = this.properties.getDataPassword();, +		runScripts(scripts, username, password);, +	private void runScripts(List<Resource> resources, String username, String password) {, +		DataSource dataSource = this.dataSource;, +		if (StringUtils.hasText(username) && StringUtils.hasText(password)) {, +			dataSource = DataSourceBuilder.create(this.properties.getClassLoader()), +					.driverClassName(this.properties.determineDriverClassName()), +					.url(this.properties.determineUrl()).username(username), +					.password(password).build();, +		}, +		DatabasePopulatorUtils.execute(populator, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, + * @author Eddú Meléndez, +	 * User of the database to execute DDL scripts (if different)., +	 */, +	private String schemaUsername;, +, +	/**, +	 * Password of the database to execute DDL scripts (if different)., +	 */, +	private String schemaPassword;, +, +	/**, +	 * User of the database to execute DML scripts., +	 */, +	private String dataUsername;, +, +	/**, +	 * Password of the database to execute DML scripts., +	 */, +	private String dataPassword;, +, +	/**, +	public String getSchemaUsername() {, +		return this.schemaUsername;, +	}, +, +	public void setSchemaUsername(String schemaUsername) {, +		this.schemaUsername = schemaUsername;, +	}, +, +	public String getSchemaPassword() {, +		return this.schemaPassword;, +	}, +, +	public void setSchemaPassword(String schemaPassword) {, +		this.schemaPassword = schemaPassword;, +	}, +, +	public String getDataUsername() {, +		return this.dataUsername;, +	}, +, +	public void setDataUsername(String dataUsername) {, +		this.dataUsername = dataUsername;, +	}, +, +	public String getDataPassword() {, +		return this.dataPassword;, +	}, +, +	public void setDataPassword(String dataPassword) {, +		this.dataPassword = dataPassword;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2016 the original author or authors., + * @author Eddú Meléndez, +			String username = this.properties.getSchemaUsername();, +			String password = this.properties.getSchemaPassword();, +			runScripts(scripts, username, password);, +		String username = this.properties.getDataUsername();, +		String password = this.properties.getDataPassword();, +		runScripts(scripts, username, password);, +	private void runScripts(List<Resource> resources, String username, String password) {]