[+++ b/spring-bootstrap-actuator/docs/Features.md, +* The context root of the management endpoints, +The Actuator provides an `/error` mapping by default that handles all, +++ b/spring-bootstrap-actuator/docs/Features.md, +* The context root of the management endpoints, +The Actuator provides an `/error` mapping by default that handles all, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +import java.io.Serializable;, +import org.springframework.context.ApplicationEventPublisherAware;, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.util.Assert;, +, + * <p>, + * Users can inject a {@link AuditEventRepository} to publish their own events or, + * alternatively use Springs {@link AuthenticationEventPublisher} (usually obtained by, + * implementing {@link ApplicationEventPublisherAware})., + * , + * @see AuditEventRepository, +public class AuditEvent implements Serializable {, +	private final Date timestamp;, +, +	private final String principal;, +, +	private final String type;, +, +	private final Map<String, Object> data;, +	 * Create a new audit event for the current time., +	 * @param principal The user principal responsible, +	 * @param type the event type, +	 * @param data The event data, +	 * Create a new audit event for the current time from data provided as name-value, +	 * pairs, +	 * @param principal The user principal responsible, +	 * @param type the event type, +	 * @param data The event data in the form 'key=value' or simply 'key', +	 */, +	public AuditEvent(String principal, String type, String... data) {, +		this(new Date(), principal, type, convert(data));, +	}, +, +	/**, +	 * @param timestamp The date/time of the event, +	 * @param principal The user principal responsible, +	 * @param type the event type, +	 * @param data The event data, +		Assert.notNull(timestamp, "Timestamp must not be null");, +		Assert.notNull(type, "Type must not be null");, +	/**, +	 * Returns the date/time that the even was logged., +	 */, +	public Date getTimestamp() {, +		return this.timestamp;, +	}, +, +	/**, +	 * Returns the user principal responsible for the event or {@code null}., +	 */, +	public String getPrincipal() {, +		return this.principal;, +	}, +, +	/**, +	 * Returns the type of event., +	 */, +	public String getType() {, +		return this.type;, +	}, +, +	/**, +	 * Returns the event data., +	 */, +	public Map<String, Object> getData() {, +		return this.data;, +	}, +, +++ b/spring-bootstrap-actuator/docs/Features.md, +* The context root of the management endpoints, +The Actuator provides an `/error` mapping by default that handles all, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/audit/AuditEvent.java, +import java.io.Serializable;, +import org.springframework.context.ApplicationEventPublisherAware;, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.util.Assert;, +, + * <p>, + * Users can inject a {@link AuditEventRepository} to publish their own events or, + * alternatively use Springs {@link AuthenticationEventPublisher} (usually obtained by, + * implementing {@link ApplicationEventPublisherAware})., + * , + * @see AuditEventRepository, +public class AuditEvent implements Serializable {, +	private final Date timestamp;, +, +	private final String principal;, +, +	private final String type;, +, +	private final Map<String, Object> data;, +	 * Create a new audit event for the current time., +	 * @param principal The user principal responsible]