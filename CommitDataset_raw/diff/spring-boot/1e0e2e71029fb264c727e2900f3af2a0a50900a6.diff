[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.boot.actuate.properties.SecurityProperties.User;, +import org.springframework.security.config.annotation.ObjectPostProcessor;, +import org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer;, +// (debug = true), +	@ConditionalOnMissingBean({ ApplicationWebSecurityConfigurerAdapter.class }), +	public WebSecurityConfigurerAdapter applicationWebSecurityConfigurerAdapter() {, +		return new ApplicationWebSecurityConfigurerAdapter();, +	}, +, +	@Bean, +	@ConditionalOnMissingBean({ ManagementWebSecurityConfigurerAdapter.class }), +	public WebSecurityConfigurerAdapter managementWebSecurityConfigurerAdapter() {, +		return new ManagementWebSecurityConfigurerAdapter();, +	@Order(Ordered.LOWEST_PRECEDENCE - 5), +	private static class ApplicationWebSecurityConfigurerAdapter extends, +			String[] paths = getSecureApplicationPaths();, +			if (this.security.getBasic().isEnabled() && paths.length > 0) {, +				http.requestMatchers().antMatchers(paths);, +				http.authorizeRequests().anyRequest(), +						.hasRole(this.security.getUser().getRole()) //, +						.and().httpBasic() //, +						.and().anonymous().disable();, +			// Remove this when session creation is disabled by default, +			http.csrf().disable();, +			// No cookies for application endpoints by default, +, +		@Override, +		protected AuthenticationManager authenticationManager() throws Exception {, +			AuthenticationManager manager = super.authenticationManager();, +			if (manager instanceof ProviderManager) {, +				((ProviderManager) manager), +						.setAuthenticationEventPublisher(this.authenticationEventPublisher);, +			}, +			return manager;, +		}, +, +	}, +, +	// Give user-supplied filters a chance to be last in line, +	@Order(Ordered.LOWEST_PRECEDENCE - 10), +	private static class ManagementWebSecurityConfigurerAdapter extends, +			WebSecurityConfigurerAdapter {, +, +		private static final String[] NO_PATHS = new String[0];, +, +		@Autowired, +		private SecurityProperties security;, +, +		@Autowired, +		private ManagementServerProperties management;, +, +		@Autowired(required = false), +		private EndpointHandlerMapping endpointHandlerMapping;, +, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +, +			if (this.security.isRequireSsl()) {, +				http.requiresChannel().anyRequest().requiresSecure();, +			}, +, +			String[] paths = getEndpointPaths(true);, +			if (this.security.getBasic().isEnabled() && paths.length > 0) {, +				http.exceptionHandling().authenticationEntryPoint(entryPoint());, +				http.requestMatchers().antMatchers(paths);, +				http.authorizeRequests().anyRequest(), +						.hasRole(this.security.getManagement().getRole()) //, +						.and().httpBasic() //, +						.and().anonymous().disable();, +			}, +			// No cookies for management endpoints by default, +			http.csrf().disable();, +			http.sessionManagement().sessionCreationPolicy(, +					this.security.getManagement().getSessions());, +, +		}, +, +		@Override, +		public void configure(WebSecurity builder) throws Exception {, +			IgnoredRequestConfigurer ignoring = builder.ignoring();, +			ignoring.antMatchers(getEndpointPaths(false));, +		}, +, +		private AuthenticationEntryPoint entryPoint() {, +			BasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();, +			entryPoint.setRealmName(this.security.getBasic().getRealm());, +			return entryPoint;, +		}, +, +		private SecurityProperties security;, +, +			InMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> builder = new AuthenticationManagerBuilder(, +					ObjectPostProcessor.QUIESCENT_POSTPROCESSOR).inMemoryAuthentication();, +			User user = this.security.getUser();, +, +				logger.info("Using default password for application endpoints: "]