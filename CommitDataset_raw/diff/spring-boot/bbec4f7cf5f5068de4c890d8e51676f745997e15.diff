[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +	@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +	@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/aop/AopAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +	public void testNoAopAutoConfiguration() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(TestConfiguration.class, AopAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		TestUtils.addEnviroment(this.context, "spring.aop.auto:false");, +		this.context.refresh();, +		TestAspect aspect = this.context.getBean(TestAspect.class);, +		assertFalse(aspect.isCalled());, +		TestBean bean = this.context.getBean(TestBean.class);, +		bean.foo();, +		assertFalse(aspect.isCalled());, +	}, +, +	@Test, +		this.context.register(TestConfiguration.class, AopAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.register(TestConfiguration.class, AopAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +, +			return this.called;, +			this.called = true;]