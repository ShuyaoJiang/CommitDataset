[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java, +						fieldWithPath("cacheManagers.*.caches").description(, +										.andWithPrefix("cacheManagers.*.caches.*.",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java, +						fieldWithPath("cacheManagers.*.caches").description(, +										.andWithPrefix("cacheManagers.*.caches.*.",, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>();, +		descriptors.forEach((name, entries) ->, +				cacheManagerDescriptors.put(name, new CacheManagerDescriptor(entries)));, +		return new CachesReport(cacheManagerDescriptors);, +		private final Map<String, CacheManagerDescriptor> cacheManagers;, +		public CachesReport(Map<String, CacheManagerDescriptor> cacheManagers) {, +		public Map<String, CacheManagerDescriptor> getCacheManagers() {, +	 * Description of a {@link CacheManager}, primarily intended for serialization to, +	 * JSON., +	 */, +	public static final class CacheManagerDescriptor {, +, +		private final Map<String, CacheDescriptor> caches;, +, +		public CacheManagerDescriptor(Map<String, CacheDescriptor> caches) {, +			this.caches = caches;, +		}, +, +		public Map<String, CacheDescriptor> getCaches() {, +			return this.caches;, +		}, +, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java, +						fieldWithPath("cacheManagers.*.caches").description(, +										.andWithPrefix("cacheManagers.*.caches.*.",, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>();, +		descriptors.forEach((name, entries) ->, +				cacheManagerDescriptors.put(name, new CacheManagerDescriptor(entries)));, +		return new CachesReport(cacheManagerDescriptors);, +		private final Map<String, CacheManagerDescriptor> cacheManagers;, +		public CachesReport(Map<String, CacheManagerDescriptor> cacheManagers) {, +		public Map<String, CacheManagerDescriptor> getCacheManagers() {, +	 * Description of a {@link CacheManager}, primarily intended for serialization to, +	 * JSON., +	 */, +	public static final class CacheManagerDescriptor {, +, +		private final Map<String, CacheDescriptor> caches;, +, +		public CacheManagerDescriptor(Map<String, CacheDescriptor> caches) {, +			this.caches = caches;, +		}, +, +		public Map<String, CacheDescriptor> getCaches() {, +			return this.caches;, +		}, +, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cache/CachesEndpointTests.java, +import org.springframework.boot.actuate.cache.CachesEndpoint.CacheManagerDescriptor;, +		Map<String, CacheManagerDescriptor> allDescriptors = endpoint.caches(), +		CacheManagerDescriptor descriptors = allDescriptors.get("test");, +		assertThat(descriptors.getCaches()).containsOnlyKeys("a", "b");, +		assertThat(descriptors.getCaches().get("a").getTarget()), +		assertThat(descriptors.getCaches().get("b").getTarget()), +		Map<String, CacheManagerDescriptor> allDescriptors = endpoint.caches(), +		assertThat(allDescriptors.get("test").getCaches()).containsOnlyKeys("a", "b");, +		assertThat(allDescriptors.get("another").getCaches()).containsOnlyKeys("a", "c");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/CachesEndpointDocumentationTests.java, +						fieldWithPath("cacheManagers.*.caches").description(, +										.andWithPrefix("cacheManagers.*.caches.*.",, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>();, +		descriptors.forEach((name, entries) ->, +				cacheManagerDescriptors.put(name, new CacheManagerDescriptor(entries)));, +		return new CachesReport(cacheManagerDescriptors);, +		private final Map<String, CacheManagerDescriptor> cacheManagers;, +		public CachesReport(Map<String, CacheManagerDescriptor> cacheManagers) {, +		public Map<String, CacheManagerDescriptor> getCacheManagers() {, +	 * Description of a {@link CacheManager}, primarily intended for serialization to, +	 * JSON., +	 */, +	public static final class CacheManagerDescriptor {, +, +		private final Map<String, CacheDescriptor> caches;, +, +		public CacheManagerDescriptor(Map<String, CacheDescriptor> caches) {, +			this.caches = caches;, +		}, +, +		public Map<String, CacheDescriptor> getCaches() {, +			return this.caches;, +		}, +, +	}, +, +	/**]