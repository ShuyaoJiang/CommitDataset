[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.springframework.boot.test.context.ContextConsumer;, +import org.springframework.boot.test.context.ContextLoader;, +	public final ContextLoader contextLoader = new ContextLoader(), +			.autoConfig(HealthIndicatorAutoConfiguration.class,, +					ManagementServerProperties.class);, +		this.contextLoader.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.env("management.health.defaults.enabled:false"), +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.config(CustomHealthIndicator.class), +				.env("management.health.defaults.enabled:false").load(context -> {, +			Map<String, HealthIndicator> beans = context, +			assertThat(context.getBean("customHealthIndicator")), +		});, +		this.contextLoader, +				.env("management.health.defaults.enabled:false",, +						"management.health.diskspace.enabled:true"), +				.load(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(RedisAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(RedisHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(RedisAutoConfiguration.class), +				.env("management.health.redis.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(MongoAutoConfiguration.class,, +				MongoDataAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(MongoHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(MongoAutoConfiguration.class,, +				MongoDataAutoConfiguration.class), +				.env("management.health.mongo.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(MongoAutoConfiguration.class,, +				RedisAutoConfiguration.class, MongoDataAutoConfiguration.class,, +				SolrAutoConfiguration.class).load(context -> {, +			Map<String, HealthIndicator> beans = context, +		});, +		this.contextLoader.autoConfigFirst(EmbeddedDataSourceConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(DataSourceHealthIndicator.class));, +		this.contextLoader.config(EmbeddedDataSourceConfiguration.class,, +				DataSourceConfig.class).env("management.health.diskspace.enabled:false"), +				.load(context -> {, +					Map<String, HealthIndicator> beans = context, +				});, +		this.contextLoader.config(EmbeddedDataSourceConfiguration.class,, +				RoutingDatasourceConfig.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(DataSourceHealthIndicator.class));, +		this.contextLoader.config(DataSourceConfig.class,, +				HealthIndicatorAutoConfiguration.class).env(, +				"spring.datasource.test.validation-query:SELECT from FOOBAR",, +				"management.health.diskspace.enabled:false").load(context -> {, +			Map<String, HealthIndicator> beans = context, +		});, +		this.contextLoader.config(EmbeddedDataSourceConfiguration.class), +				.env(, +						"management.health.db.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(RabbitAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(RabbitHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(RabbitAutoConfiguration.class), +				.env("management.health.rabbit.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(SolrAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(SolrHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(SolrAutoConfiguration.class), +				.env("management.health.solr.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.load(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(MailSenderAutoConfiguration.class), +				.env("spring.mail.host:smtp.acme.org",, +				.load(hasSingleHealthIndicator(MailHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(MailSenderAutoConfiguration.class), +				.env("spring.mail.host:smtp.acme.org",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(ActiveMQAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(JmsHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(ActiveMQAutoConfiguration.class), +				.env("management.health.jms.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(JestClientConfiguration.class,, +				JestAutoConfiguration.class, ElasticsearchAutoConfiguration.class), +				.env("spring.data.elasticsearch.cluster-nodes:localhost:0",, +				.load(hasSingleHealthIndicator(ElasticsearchHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(JestClientConfiguration.class,, +				JestAutoConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(ElasticsearchJestHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(JestClientConfiguration.class,, +				JestAutoConfiguration.class, ElasticsearchAutoConfiguration.class), +				.env("management.health.elasticsearch.enabled:false",, +				.load(hasSingleHealthIndicator(ApplicationHealthIndicator.class));, +		this.contextLoader.autoConfigFirst(CassandraConfiguration.class), +				.env("management.health.diskspace.enabled:false"), +				.load(hasSingleHealthIndicator(CassandraHealthIndicator.class));]