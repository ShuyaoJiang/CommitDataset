[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private Set<Object> defaultSources = new LinkedHashSet<Object>();, +, +	private Set<Object> additionalSources = new LinkedHashSet<Object>();, +			this.additionalSources.addAll(Arrays.asList(sources));, +		Set<Object> sources = assembleSources();, +		Assert.notEmpty(sources, "Sources must not be empty");, +		load(context, sources.toArray(new Object[sources.size()]));, +	private Set<Object> assembleSources() {, +		LinkedHashSet<Object> sources = new LinkedHashSet<Object>();, +		sources.addAll(this.defaultSources);, +		sources.addAll(this.additionalSources);, +		return sources;, +	}, +, +			applicationLog.debug("Sources: " + this.defaultSources);, +	 * Returns a mutable set of the sources that will be added to an ApplicationContext, +	 * when {@link #run(String...)} is called., +		return this.defaultSources;, +		this.defaultSources = new LinkedHashSet<Object>(sources);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private Set<Object> defaultSources = new LinkedHashSet<Object>();, +, +	private Set<Object> additionalSources = new LinkedHashSet<Object>();, +			this.additionalSources.addAll(Arrays.asList(sources));, +		Set<Object> sources = assembleSources();, +		Assert.notEmpty(sources, "Sources must not be empty");, +		load(context, sources.toArray(new Object[sources.size()]));, +	private Set<Object> assembleSources() {, +		LinkedHashSet<Object> sources = new LinkedHashSet<Object>();, +		sources.addAll(this.defaultSources);, +		sources.addAll(this.additionalSources);, +		return sources;, +	}, +, +			applicationLog.debug("Sources: " + this.defaultSources);, +	 * Returns a mutable set of the sources that will be added to an ApplicationContext, +	 * when {@link #run(String...)} is called., +		return this.defaultSources;, +		this.defaultSources = new LinkedHashSet<Object>(sources);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import java.util.Set;, +import org.springframework.test.util.ReflectionTestUtils;, +		@SuppressWarnings("unchecked"), +		Set<Object> additionalSources = (Set<Object>) ReflectionTestUtils.getField(, +				application, "additionalSources");, +		assertThat(additionalSources.toArray(), equalTo(sources));]