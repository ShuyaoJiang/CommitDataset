[+++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	 * Returns whether or not the JSP servlet should be registered with the embedded, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	 * Returns whether or not the JSP servlet should be registered with the embedded, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +	 * Returns the absolute document root when it points to a valid directory, logging a, +			File tempDir = File.createTempFile(prefix + ".", "." + getPort());, +			tempDir.delete();, +			tempDir.mkdir();, +			tempDir.deleteOnExit();, +			return tempDir;, +					"Unable to create tempDir. java.io.tmpdir is set to ", +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	 * Returns whether or not the JSP servlet should be registered with the embedded, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +	 * Returns the absolute document root when it points to a valid directory, logging a, +			File tempDir = File.createTempFile(prefix + ".", "." + getPort());, +			tempDir.delete();, +			tempDir.mkdir();, +			tempDir.deleteOnExit();, +			return tempDir;, +					"Unable to create tempDir. java.io.tmpdir is set to ", +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * Sets the document root directory which will be used by the web context to serve static, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	 * Returns whether or not the JSP servlet should be registered with the embedded, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +	 * Returns the absolute document root when it points to a valid directory, logging a, +			File tempDir = File.createTempFile(prefix + ".", "." + getPort());, +			tempDir.delete();, +			tempDir.mkdir();, +			tempDir.deleteOnExit();, +			return tempDir;, +					"Unable to create tempDir. java.io.tmpdir is set to ", +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * Sets the document root directory which will be used by the web context to serve static, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		File dir = getValidSessionStoreDir();, +		File file = new File(dir, "SESSIONS.ser");, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory., +	 * @return the home directory (never {@code null}), +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java, + * integration consider the Spring Cloud project., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	 * Returns whether or not the JSP servlet should be registered with the embedded, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +	 * Returns the absolute document root when it points to a valid directory, logging a, +			File tempDir = File.createTempFile(prefix + ".", "." + getPort());, +			tempDir.delete();, +			tempDir.mkdir();, +			tempDir.deleteOnExit();, +			return tempDir;, +					"Unable to create tempDir. java.io.tmpdir is set to ", +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * Sets the document root directory which will be used by the web context to serve static, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		File dir = getValidSessionStoreDir();, +		File file = new File(dir, "SESSIONS.ser");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatResources.java, +			URL url = getJarUrl(jar);, +		private URL getJarUrl(String jar) {, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationHome.java, +	 * Returns the underlying source used to find the home directory. This is usually the jar, +	 * Returns the application home directory.]