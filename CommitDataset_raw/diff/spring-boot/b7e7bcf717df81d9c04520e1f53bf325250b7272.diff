[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +	 * Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +	 * Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Hazelcast backed sessions., +	 */, +	HAZELCAST,, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +	 * Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Hazelcast backed sessions., +	 */, +	HAZELCAST,, +, +	/**, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +	public void autoConfigurationDisabledIfStoreTypeNotSet() {, +		load();, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +	public void autoConfigurationDisabledIfStoreTypeSetToNone() {, +		load("spring.session.store-type=none");, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +	 * Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Hazelcast backed sessions., +	 */, +	HAZELCAST,, +, +	/**, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +	public void autoConfigurationDisabledIfStoreTypeNotSet() {, +		load();, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +	public void autoConfigurationDisabledIfStoreTypeSetToNone() {, +		load("spring.session.store-type=none");, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.session.store-type= # Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +			return ConditionOutcome.noMatch("Session store type not set");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +	 * Session store type., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Hazelcast backed sessions., +	 */, +	HAZELCAST,, +, +	/**, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +	public void autoConfigurationDisabledIfStoreTypeNotSet() {, +		load();, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +	public void autoConfigurationDisabledIfStoreTypeSetToNone() {, +		load("spring.session.store-type=none");, +		assertThat(this.context.getBeansOfType(SessionRepository.class)).hasSize(0);, +	}, +, +	@Test, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.session.store-type= # Session store type., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot provides Spring Session auto-configuration for a wide range of stores:, +If Spring Session is available, you only need to chose the, +{sc-spring-boot-autoconfigure}/session/StoreType.{sc-ext}[`StoreType`] that you wish to, +use to store the sessions. For instance to use Redis as backend store, you'd configure, +your application as follows:, +, +[source,properties,indent=0]]