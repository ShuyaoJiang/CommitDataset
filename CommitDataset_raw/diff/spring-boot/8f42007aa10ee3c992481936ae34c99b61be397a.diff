[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint.EnvironmentDescriptor;, +import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint.EnvironmentDescriptor.PropertySourceDescriptor;, +import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint.EnvironmentDescriptor.PropertySourceDescriptor.PropertyValueDescriptor;, +import org.springframework.boot.origin.OriginLookup;, +public class EnvironmentEndpoint extends AbstractEndpoint<EnvironmentDescriptor> {, +	public EnvironmentDescriptor invoke() {, +		List<PropertySourceDescriptor> propertySources = new ArrayList<PropertySourceDescriptor>();, +		getPropertySourcesAsMap().forEach((sourceName, source) -> {, +				propertySources.add(describeSource(sourceName,, +						(EnumerablePropertySource<?>) source, resolver));, +			}, +		});, +		return new EnvironmentDescriptor(, +				Arrays.asList(getEnvironment().getActiveProfiles()), propertySources);, +	}, +, +	private PropertySourceDescriptor describeSource(String sourceName,, +			EnumerablePropertySource<?> source, PropertyResolver resolver) {, +		Map<String, PropertyValueDescriptor> properties = new LinkedHashMap<>();, +		for (String name : source.getPropertyNames()) {, +			properties.put(name, describeValueOf(name, source, resolver));, +		}, +		return new PropertySourceDescriptor(sourceName, properties);, +	}, +, +	private PropertyValueDescriptor describeValueOf(String name,, +			EnumerablePropertySource<?> source, PropertyResolver resolver) {, +		@SuppressWarnings("unchecked"), +		String origin = (source instanceof OriginLookup), +				? ((OriginLookup<Object>) source).getOrigin(name).toString() : null;, +		return new PropertyValueDescriptor(sanitize(name, resolved), origin);, +	/**, +	 * A description of an {@link Environment}., +	 */, +	static final class EnvironmentDescriptor {, +, +		private final List<String> activeProfiles;, +, +		private final List<PropertySourceDescriptor> propertySources;, +, +		private EnvironmentDescriptor(List<String> activeProfiles,, +				List<PropertySourceDescriptor> propertySources) {, +			this.activeProfiles = activeProfiles;, +			this.propertySources = propertySources;, +		}, +, +		public List<String> getActiveProfiles() {, +			return this.activeProfiles;, +		}, +, +		public List<PropertySourceDescriptor> getPropertySources() {, +			return this.propertySources;, +		}, +, +		/**, +		 * A description of a {@link PropertySource}., +		 */, +		static final class PropertySourceDescriptor {, +, +			private final String name;, +, +			private final Map<String, PropertyValueDescriptor> properties;, +, +			private PropertySourceDescriptor(String name,, +					Map<String, PropertyValueDescriptor> properties) {, +				this.name = name;, +				this.properties = properties;, +			}, +, +			public String getName() {, +				return this.name;, +			}, +, +			public Map<String, PropertyValueDescriptor> getProperties() {, +				return this.properties;, +			}, +, +			/**, +			 * A description of a property's value, including its origin if available., +			 */, +			static final class PropertyValueDescriptor {, +, +				private final Object value;, +, +				private final String origin;, +, +				private PropertyValueDescriptor(Object value, String origin) {, +					this.value = value;, +					this.origin = origin;, +				}, +, +				public Object getValue() {, +					return this.value;, +				}, +, +				public String getOrigin() {]