[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		Class<?> type = (value == null ? target.getType().resolve() : null);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		Class<?> type = (value == null ? target.getType().resolve() : null);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.List;, +		Class<?> collectionType = (type != null ? type, +				: ResolvableType.forClassWithGenerics(List.class, Object.class).resolve());, +				() -> CollectionFactory.createCollection(collectionType, 0));, +		bindIndexed(name, target, elementBinder, collection, ResolvableType.forClass(collectionType),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		Class<?> type = (value == null ? target.getType().resolve() : null);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.List;, +		Class<?> collectionType = (type != null ? type, +				: ResolvableType.forClassWithGenerics(List.class, Object.class).resolve());, +				() -> CollectionFactory.createCollection(collectionType, 0));, +		bindIndexed(name, target, elementBinder, collection, ResolvableType.forClass(collectionType),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		Class<?> mapType = (type != null ? type, +				: ResolvableType.forClassWithGenerics(Map.class, Object.class, Object.class).resolve());, +		Map<Object, Object> map = CollectionFactory.createMap(mapType, 0);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		Class<?> type = (value == null ? target.getType().resolve() : null);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.List;, +		Class<?> collectionType = (type != null ? type, +				: ResolvableType.forClassWithGenerics(List.class, Object.class).resolve());, +				() -> CollectionFactory.createCollection(collectionType, 0));, +		bindIndexed(name, target, elementBinder, collection, ResolvableType.forClass(collectionType),, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		Class<?> mapType = (type != null ? type, +				: ResolvableType.forClassWithGenerics(Map.class, Object.class, Object.class).resolve());, +		Map<Object, Object> map = CollectionFactory.createMap(mapType, 0);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java, +import java.util.HashSet;, +	@Test, +	public void bindToCollectionWithNoDefaultConstructor() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.items", "a,b,c,c");, +		this.sources.add(source);, +		ExampleCustomBean result = this.binder, +				.bind("foo", ExampleCustomBean.class).get();, +		assertThat(result.getItems()).hasSize(4);, +		assertThat(result.getItems()).containsExactly("a", "b", "c", "c");, +	}, +, +	@Test, +	public void bindToListShouldAllowDuplicateValues() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.items", "a,b,c,c");, +		this.sources.add(source);, +		ExampleCollectionBean result = this.binder, +				.bind("foo", ExampleCollectionBean.class).get();, +		assertThat(result.getItems()).hasSize(5);, +		assertThat(result.getItems()).containsExactly("a", "b", "c", "c", "d");, +	}, +, +	@Test, +	public void bindToSetShouldNotAllowDuplicateValues() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.items-set", "a,b,c,c");, +		this.sources.add(source);, +		ExampleCollectionBean result = this.binder, +				.bind("foo", ExampleCollectionBean.class).get();, +		assertThat(result.getItemsSet()).hasSize(3);, +		assertThat(result.getItemsSet()).containsExactly("a", "b", "c");, +	}, +, +		private Set<String> itemsSet = new HashSet<>();, +, +		public Set<String> getItemsSet() {, +			return this.itemsSet;, +		}, +, +		public void setItemsSet(Set<String> itemsSet) {, +			this.itemsSet = itemsSet;, +		}, +	}, +, +	public static class ExampleCustomBean {, +, +		private MyCustomList items = new MyCustomList(Collections.singletonList("foo"));, +, +		public MyCustomList getItems() {, +			return this.items;, +		}, +, +		public void setItems(MyCustomList items) {, +			this.items = items;, +		}, +	}, +, +	public static class MyCustomList extends ArrayList {, +, +		private List<String> items = new ArrayList<>(Collections.singletonList("foo"));, +, +		public MyCustomList(List<String> items) {, +			this.items = items;, +		}]