[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;, + * @author Andy Wilkinson, +		initMocks(testContext);, +		injectFields(testContext);, +	}, +, +	@Override, +	public void beforeTestMethod(TestContext testContext) throws Exception {, +		if (Boolean.TRUE.equals(testContext.getAttribute(, +				DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE))) {, +			initMocks(testContext);, +			reinjectFields(testContext);, +		}, +	}, +, +	@Override, +	public int getOrder() {, +		return 1950;, +	}, +, +	private void initMocks(TestContext testContext) {, +		postProcessFields(testContext, new MockitoFieldHandler() {, +, +			@Override, +			public void handle(MockitoField mockitoField,, +					MockitoPostProcessor postProcessor) {, +				postProcessor.inject(mockitoField.field, mockitoField.target,, +						mockitoField.definition);, +			}, +, +		});, +	}, +, +	private void reinjectFields(final TestContext testContext) {, +		postProcessFields(testContext, new MockitoFieldHandler() {, +, +			@Override, +			public void handle(MockitoField mockitoField,, +					MockitoPostProcessor postProcessor) {, +				ReflectionUtils.makeAccessible(mockitoField.field);, +				ReflectionUtils.setField(mockitoField.field,, +						testContext.getTestInstance(), null);, +				postProcessor.inject(mockitoField.field, mockitoField.target,, +						mockitoField.definition);, +			}, +, +		});, +	}, +, +	private void postProcessFields(TestContext testContext, MockitoFieldHandler handler) {, +			MockitoPostProcessor postProcessor = testContext.getApplicationContext(), +					handler.handle(new MockitoField(field, testContext.getTestInstance(),, +							definition), postProcessor);, +				}, +	private static final class MockitoField {, +, +		private final Field field;, +, +		private final Object target;, +, +		private final Definition definition;, +, +		private MockitoField(Field field, Object instance, Definition definition) {, +			this.field = field;, +			this.target = instance;, +			this.definition = definition;, +		}, +, +	}, +, +	private interface MockitoFieldHandler {, +, +		void handle(MockitoField mockitoField, MockitoPostProcessor postProcessor);, +, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;, + * @author Andy Wilkinson, +		initMocks(testContext);, +		injectFields(testContext);, +	}, +, +	@Override, +	public void beforeTestMethod(TestContext testContext) throws Exception {, +		if (Boolean.TRUE.equals(testContext.getAttribute(, +				DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE))) {, +			initMocks(testContext);, +			reinjectFields(testContext);, +		}, +	}, +, +	@Override, +	public int getOrder() {, +		return 1950;, +	}, +]