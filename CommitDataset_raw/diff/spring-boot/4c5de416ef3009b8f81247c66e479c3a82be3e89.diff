[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +, +	private final String pid = getOrUseDefault(LoggingSystemProperties.PID_KEY, "????");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +, +	private final String pid = getOrUseDefault(LoggingSystemProperties.PID_KEY, "????");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN, environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN, environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +, +	private final String pid = getOrUseDefault(LoggingSystemProperties.PID_KEY, "????");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN, environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN, environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		System.clearProperty(LoggingSystemProperties.LOG_FILE);, +		System.clearProperty(LoggingSystemProperties.LOG_PATH);, +		System.clearProperty(LoggingSystemProperties.PID_KEY);, +		System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);, +		System.clearProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN);, +		System.clearProperty(LoggingSystemProperties.FILE_LOG_PATTERN);, +		System.clearProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN);, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console");, +		assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)).isEqualTo("file");, +		assertThat(System.getProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD)), +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo("target/log");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)).isEqualTo("level");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("path");, +		assertThat(System.getProperty(LoggingSystemProperties.PID_KEY)).isNotNull();, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console ${pid}");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +, +	private final String pid = getOrUseDefault(LoggingSystemProperties.PID_KEY, "????");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN, environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN, environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		System.clearProperty(LoggingSystemProperties.LOG_FILE);, +		System.clearProperty(LoggingSystemProperties.LOG_PATH);, +		System.clearProperty(LoggingSystemProperties.PID_KEY);, +		System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);, +		System.clearProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN);, +		System.clearProperty(LoggingSystemProperties.FILE_LOG_PATTERN);, +		System.clearProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN);, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console");, +		assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)).isEqualTo("file");, +		assertThat(System.getProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD)), +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo("target/log");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)).isEqualTo("level");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("path");, +		assertThat(System.getProperty(LoggingSystemProperties.PID_KEY)).isNotNull();, +		assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console ${pid}");, +		assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java, +		System.clearProperty(LoggingSystemProperties.LOG_FILE);, +		System.clearProperty(LoggingSystemProperties.PID_KEY);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		return getValue(" with PID ", () -> System.getProperty(LoggingSystemProperties.PID_KEY));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +, +	private final String pid = getOrUseDefault(LoggingSystemProperties.PID_KEY, "????");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN, environment.resolvePlaceholders(, +		context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN, environment.resolvePlaceholders(, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java, +import org.springframework.boot.logging.LoggingSystemProperties;, +		System.clearProperty(LoggingSystemProperties.LOG_FILE);, +		System.clearProperty(LoggingSystemProperties.LOG_PATH);, +		System.clearProperty(LoggingSystemProperties.PID_KEY);, +		System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD);, +		System.clearProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN);]