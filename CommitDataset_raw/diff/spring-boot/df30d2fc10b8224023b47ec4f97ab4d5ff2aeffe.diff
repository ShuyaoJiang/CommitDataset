[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.DefaultCachingConfigurationFactory;, +import org.springframework.boot.actuate.endpoint.OperationParameterMapper;, +import org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;, +import org.springframework.context.ApplicationContext;, +		private final ApplicationContext applicationContext;, +, +		MvcWebEndpointConfiguration(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +				OperationParameterMapper parameterMapper,, +				DefaultCachingConfigurationFactory cachingConfigurationFactory,, +			WebAnnotationEndpointDiscoverer endpointDiscoverer = new WebAnnotationEndpointDiscoverer(, +					this.applicationContext, parameterMapper, cachingConfigurationFactory,, +					endpointMediaTypes);, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.DefaultCachingConfigurationFactory;, +import org.springframework.boot.actuate.endpoint.OperationParameterMapper;, +import org.springframework.boot.actuate.endpoint.web.annotation.WebAnnotationEndpointDiscoverer;, +import org.springframework.context.ApplicationContext;, +		private final ApplicationContext applicationContext;, +, +		MvcWebEndpointConfiguration(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +				OperationParameterMapper parameterMapper,, +				DefaultCachingConfigurationFactory cachingConfigurationFactory,, +			WebAnnotationEndpointDiscoverer endpointDiscoverer = new WebAnnotationEndpointDiscoverer(, +					this.applicationContext, parameterMapper, cachingConfigurationFactory,, +					endpointMediaTypes);, +					endpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(),, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EndpointInfo;, +import org.springframework.boot.actuate.endpoint.annotation.Endpoint;, +import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;, +import org.springframework.boot.actuate.endpoint.web.WebEndpointOperation;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	@Test, +	public void allEndpointsAvailableUnderCloudFoundryWithoutEnablingWeb() throws Exception {, +		this.context.register(TestConfiguration.class);, +		this.context.refresh();, +		CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping();, +		List<EndpointInfo<WebEndpointOperation>> endpoints = (List<EndpointInfo<WebEndpointOperation>>) handlerMapping.getEndpoints();, +		assertThat(endpoints.size()).isEqualTo(1);, +		assertThat(endpoints.get(0).getId()).isEqualTo("test");, +	}, +, +	@Configuration, +	static class TestConfiguration {, +, +		@Bean, +		public TestEndpoint testEndpoint() {, +			return new TestEndpoint();, +		}, +, +	}, +, +	@Endpoint(id = "test"), +	static class TestEndpoint {, +, +		@ReadOperation, +		public String hello() {, +			return "hello world";, +		}, +, +	}, +]