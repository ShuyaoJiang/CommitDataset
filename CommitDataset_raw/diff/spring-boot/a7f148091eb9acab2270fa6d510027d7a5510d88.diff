[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.validation.BindException;, + * Configuration properties are also bound to the {@link SpringApplication}. This makes it, + * possible to set {@link SpringApplication} properties dynamically, like the sources, + * ("spring.main.sources" - a CSV list) the flag to indicate a web environment, + * ("spring.main.web_environment=true") or the flag to switch off the banner, + * ("spring.main.show_banner=false")., + *, + * @author Madhura Bhave, +			configureIgnoreBeanInfo(environment);, +			bindToSpringApplication(environment);, +	private void configureIgnoreBeanInfo(ConfigurableEnvironment environment) {, +		if (System.getProperty(, +				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == null) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					"spring.beaninfo.");, +			Boolean ignore = resolver.getProperty("ignore", Boolean.class, Boolean.TRUE);, +			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,, +					ignore.toString());, +		}, +	}, +, +	/**, +	 * Bind the environment to the {@link SpringApplication}., +	 * @param environment the environment to bind, +	 */, +	protected void bindToSpringApplication(ConfigurableEnvironment environment) {, +		PropertiesConfigurationFactory<SpringApplication> binder = new PropertiesConfigurationFactory<>(this);, +		ConversionService conversionService = new DefaultConversionService();, +		binder.setTargetName("spring.main");, +		binder.setConversionService(conversionService);, +		binder.setPropertySources(environment.getPropertySources());, +		try {, +			binder.bindPropertiesToTarget();, +		}, +		catch (BindException ex) {, +			throw new IllegalStateException("Cannot bind to SpringApplication", ex);, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.validation.BindException;, + * Configuration properties are also bound to the {@link SpringApplication}. This makes it, + * possible to set {@link SpringApplication} properties dynamically, like the sources, + * ("spring.main.sources" - a CSV list) the flag to indicate a web environment, + * ("spring.main.web_environment=true") or the flag to switch off the banner, + * ("spring.main.show_banner=false")., + *, + * @author Madhura Bhave, +			configureIgnoreBeanInfo(environment);, +			bindToSpringApplication(environment);, +	private void configureIgnoreBeanInfo(ConfigurableEnvironment environment) {, +		if (System.getProperty(, +				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == null) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					"spring.beaninfo.");, +			Boolean ignore = resolver.getProperty("ignore", Boolean.class, Boolean.TRUE);, +			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,, +					ignore.toString());, +		}, +	}, +, +	/**, +	 * Bind the environment to the {@link SpringApplication}., +	 * @param environment the environment to bind, +	 */, +	protected void bindToSpringApplication(ConfigurableEnvironment environment) {, +		PropertiesConfigurationFactory<SpringApplication> binder = new PropertiesConfigurationFactory<>(this);, +		ConversionService conversionService = new DefaultConversionService();, +		binder.setTargetName("spring.main");, +		binder.setConversionService(conversionService);, +		binder.setPropertySources(environment.getPropertySources());, +		try {, +			binder.bindPropertiesToTarget();, +		}, +		catch (BindException ex) {, +			throw new IllegalStateException("Cannot bind to SpringApplication", ex);, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.validation.BindException;, + * Configuration properties are also bound to the {@link SpringApplication}. This makes it, + * possible to set {@link SpringApplication} properties dynamically, like the sources]