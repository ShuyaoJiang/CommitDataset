[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: The getters and setters are advisable, since binding is via standard Java Beans, +property descriptors, just like in Spring MVC. They are mandatory for immutable types, +or those that are directly coercible from `String`. As long as they are initialized,, +maps, collections, and arrays need a getter but not necessarily a setter since they, +can be mutated by the binder. If there is a setter, Maps, collections, and arrays can, +be created. Maps and collections can be expanded with only a getter, whereas arrays, +require a setter. Nested POJO properties can also be created (so a setter is not, +mandatory) if they have a default constructor, or a constructor accepting a single, +value that can be coerced from String. Some people use Project Lombok to add getters, +and setters automatically., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: The getters and setters are advisable, since binding is via standard Java Beans, +property descriptors, just like in Spring MVC. They are mandatory for immutable types, +or those that are directly coercible from `String`. As long as they are initialized,, +maps, collections, and arrays need a getter but not necessarily a setter since they, +can be mutated by the binder. If there is a setter, Maps, collections, and arrays can, +be created. Maps and collections can be expanded with only a getter, whereas arrays, +require a setter. Nested POJO properties can also be created (so a setter is not, +mandatory) if they have a default constructor, or a constructor accepting a single, +value that can be coerced from String. Some people use Project Lombok to add getters, +and setters automatically., +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +	public void configurationPropertiesWithArrayExpansion() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "test.chars[4]:s");, +		this.context.register(PropertyWithCharArrayExpansion.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(PropertyWithCharArrayExpansion.class).getChars(),, +				equalTo("words".toCharArray()));, +	}, +, +	@Test, +	@ConfigurationProperties(prefix = "test", ignoreUnknownFields = false), +	public static class PropertyWithCharArrayExpansion {, +, +		private char[] chars = new char[] { 'w', 'o', 'r', 'd' };, +, +		public char[] getChars() {, +			return this.chars;, +		}, +, +		public void setChars(char[] chars) {, +			this.chars = chars;, +		}, +, +	}, +, +	@Configuration, +	@EnableConfigurationProperties]