[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +	 * Cache period for the resources served by the resource handler., +	 * If a duration suffix is not specified, seconds will be used., +	 * Can be overridden by the {@code cache-control} property., +	 * Cache control HTTP headers, only allows valid directive combinations., +	 * Overrides the {@code cache-period} property., +	private CacheControlProperties cacheControl = new CacheControlProperties();, +	 * Configuration for the Cache Control HTTP header., +		/**, +		 * Maximum time the response should be cached,, +		 * in seconds if no duration suffix is not specified., +		 */, +		@DurationUnit(ChronoUnit.SECONDS), +		private Duration maxAge;, +		/**, +		 * Indicate that the cached response can be reused only, +		 * if re-validated with the server., +		 */, +		/**, +		 * Indicate to not cache the response in any case., +		 */, +		/**, +		 * Indicate that once it has become stale, a cache must not use, +		 * the response without re-validating it with the server., +		 */, +		/**, +		 * Indicate intermediaries (caches and others) that they should, +		 * not transform the response content., +		 */, +		/**, +		 * Indicate that any cache may store the response., +		 */, +		/**, +		 * Indicate that the response message is intended for a single user, +		 * and must not be stored by a shared cache., +		 */, +		/**, +		 * Same meaning as the "must-revalidate" directive,, +		 * except that it does not apply to private caches., +		 */, +		/**, +		 * Maximum time the response can be served after it becomes stale,, +		 * in seconds if no duration suffix is not specified., +		 */, +		@DurationUnit(ChronoUnit.SECONDS), +		private Duration staleWhileRevalidate;, +		/**, +		 * Maximum time the response may be used when errors are encountered,, +		 * in seconds if no duration suffix is not specified., +		 */, +		@DurationUnit(ChronoUnit.SECONDS), +		private Duration staleIfError;, +		/**, +		 * Maximum time the response should be cached by shared caches,, +		 * in seconds if no duration suffix is not specified., +		 */, +		@DurationUnit(ChronoUnit.SECONDS), +		private Duration sMaxAge;, +		public Duration getMaxAge() {, +		public void setMaxAge(Duration maxAge) {, +		public Duration getStaleWhileRevalidate() {, +		public void setStaleWhileRevalidate(Duration staleWhileRevalidate) {, +		public Duration getStaleIfError() {, +		public void setStaleIfError(Duration staleIfError) {, +		public Duration getsMaxAge() {, +		public void setsMaxAge(Duration sMaxAge) {, +		public CacheControl toHttpCacheControl() {, +			CacheControl cc;, +				cc = CacheControl.noStore();, +			else if (Boolean.TRUE.equals(this.noCache)) {, +				cc = CacheControl.noCache();, +			else if (this.maxAge != null) {, +				cc = CacheControl.maxAge(this.maxAge.getSeconds(), TimeUnit.SECONDS);, +			else {, +				cc = CacheControl.empty();, +			if (Boolean.TRUE.equals(this.mustRevalidate)) {, +				cc.mustRevalidate();, +			if (Boolean.TRUE.equals(this.noTransform)) {, +				cc.noTransform();, +			if (Boolean.TRUE.equals(this.cachePublic)) {, +				cc.cachePublic();, +			if (Boolean.TRUE.equals(this.cachePrivate)) {, +				cc.cachePrivate();, +			}, +			if (Boolean.TRUE.equals(this.proxyRevalidate)) {, +				cc.proxyRevalidate();, +			}, +			if (this.staleWhileRevalidate != null) {, +				cc.staleWhileRevalidate(this.staleWhileRevalidate.getSeconds(), TimeUnit.SECONDS);, +			}, +			if (this.staleIfError != null) {, +				cc.staleIfError(this.staleIfError.getSeconds(), TimeUnit.SECONDS);, +			}, +			if (this.sMaxAge != null) {, +				cc.sMaxAge(this.sMaxAge.getSeconds(), TimeUnit.SECONDS);, +			}, +			return cc;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +	 * Cache period for the resources served by the resource handler., +	 * If a duration suffix is not specified, seconds will be used.]