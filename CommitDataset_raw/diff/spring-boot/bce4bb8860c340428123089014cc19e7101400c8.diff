[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfiguration.java, +	 * The property to use to customize the {@code ObjectName} of the application, +	 * lifecycle mbean., +		String jmxName = this.environment, +				.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);, +		if (this.mbeanExporter != null) { // Make sure to not register that MBean twice, +			this.mbeanExporter.addExcludedBean(jmxName);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfiguration.java, +	 * The property to use to customize the {@code ObjectName} of the application, +	 * lifecycle mbean., +		String jmxName = this.environment, +				.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);, +		if (this.mbeanExporter != null) { // Make sure to not register that MBean twice, +			this.mbeanExporter.addExcludedBean(jmxName);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfigurationTests.java, +, +	public void notRegisteredByDefault() throws MalformedObjectNameException,, +			InstanceNotFoundException {, +		this.thrown.expect(InstanceNotFoundException.class);, +		System.setProperty(SpringApplicationLifecycleAutoConfiguration.JMX_NAME_PROPERTY,, +				customJmxName);, +			catch (InstanceNotFoundException ex) {, +			this.thrown.expect(InstanceNotFoundException.class); // Should not be exposed, +		catch (MalformedObjectNameException ex) {, +			throw new IllegalStateException("Invalid jmx name " + jmxName, ex);, +		applicationContext.register(JmxAutoConfiguration.class,, +				SpringApplicationLifecycleAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfiguration.java, +	 * The property to use to customize the {@code ObjectName} of the application, +	 * lifecycle mbean., +		String jmxName = this.environment, +				.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);, +		if (this.mbeanExporter != null) { // Make sure to not register that MBean twice, +			this.mbeanExporter.addExcludedBean(jmxName);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfigurationTests.java, +, +	public void notRegisteredByDefault() throws MalformedObjectNameException,, +			InstanceNotFoundException {, +		this.thrown.expect(InstanceNotFoundException.class);, +		System.setProperty(SpringApplicationLifecycleAutoConfiguration.JMX_NAME_PROPERTY,, +				customJmxName);, +			catch (InstanceNotFoundException ex) {, +			this.thrown.expect(InstanceNotFoundException.class); // Should not be exposed, +		catch (MalformedObjectNameException ex) {, +			throw new IllegalStateException("Invalid jmx name " + jmxName, ex);, +		applicationContext.register(JmxAutoConfiguration.class,, +				SpringApplicationLifecycleAutoConfiguration.class);, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +		catch (Exception ex) {, +	/**, +	 * Kill this process., +	 */, +	public void kill() {, +		doKill();, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfiguration.java, +	 * The property to use to customize the {@code ObjectName} of the application, +	 * lifecycle mbean., +		String jmxName = this.environment, +				.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);, +		if (this.mbeanExporter != null) { // Make sure to not register that MBean twice, +			this.mbeanExporter.addExcludedBean(jmxName);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfigurationTests.java, +, +	public void notRegisteredByDefault() throws MalformedObjectNameException,, +			InstanceNotFoundException {, +		this.thrown.expect(InstanceNotFoundException.class);, +		System.setProperty(SpringApplicationLifecycleAutoConfiguration.JMX_NAME_PROPERTY,, +				customJmxName);, +			catch (InstanceNotFoundException ex) {, +			this.thrown.expect(InstanceNotFoundException.class); // Should not be exposed, +		catch (MalformedObjectNameException ex) {, +			throw new IllegalStateException("Invalid jmx name " + jmxName, ex);, +		applicationContext.register(JmxAutoConfiguration.class,, +				SpringApplicationLifecycleAutoConfiguration.class);, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/RunProcess.java, +		catch (Exception ex) {, +	/**, +	 * Kill this process., +	 */, +	public void kill() {, +		doKill();, +	}, +, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/it/start-stop-fork/src/main/java/org/test/SampleApplication.java, + * This sample app simulates the JMX Mbean that is exposed by the Spring Boot application., +		ObjectName name = new ObjectName(, +				"org.springframework.boot:type=Lifecycle,name=springApplicationLifecycle");, +				throw new IllegalStateException(, +						"Shutdown should have been invoked by now");, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/SpringApplicationLifecycleAutoConfiguration.java, +	 * The property to use to customize the {@code ObjectName} of the application, +	 * lifecycle mbean., +		String jmxName = this.environment, +				.getProperty(JMX_NAME_PROPERTY, DEFAULT_JMX_NAME);, +		if (this.mbeanExporter != null) { // Make sure to not register that MBean twice, +			this.mbeanExporter.addExcludedBean(jmxName);]