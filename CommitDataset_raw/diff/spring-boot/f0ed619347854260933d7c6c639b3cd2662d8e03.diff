[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +		String propertyName = resolvePropertyName(target, prefix, name);, +		if (propertyName == null) {, +			propertyName = resolveNestedPropertyName(target, prefix, name);, +		}, +		return (propertyName == null ? name : propertyName);, +	}, +, +	private String resolveNestedPropertyName(BeanWrapper target, String prefix,, +			String name) {, +		StringBuilder candidate = new StringBuilder();, +		for (String field : name.split("[_\\-\\.]")) {, +			candidate.append(candidate.length() > 0 ? "." : "");, +			candidate.append(field);, +			String nested = resolvePropertyName(target, prefix, candidate.toString());, +			if (nested != null) {, +				String propertyName = resolvePropertyName(target,, +						joinString(prefix, nested),, +						name.substring(candidate.length() + 1));, +				if (propertyName != null) {, +					return joinString(nested, propertyName);, +				}, +			}, +		}, +		return null;, +	}, +, +	private String resolvePropertyName(BeanWrapper target, String prefix, String name) {, +					if (target.getPropertyType(joinString(prefix, candidate)) != null) {, +		return null;, +	}, +, +	private String joinString(String prefix, String name) {, +		return (StringUtils.hasLength(prefix) ? prefix + "." + name : name);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +		String propertyName = resolvePropertyName(target, prefix, name);, +		if (propertyName == null) {, +			propertyName = resolveNestedPropertyName(target, prefix, name);, +		}, +		return (propertyName == null ? name : propertyName);, +	}, +, +	private String resolveNestedPropertyName(BeanWrapper target, String prefix,, +			String name) {, +		StringBuilder candidate = new StringBuilder();, +		for (String field : name.split("[_\\-\\.]")) {, +			candidate.append(candidate.length() > 0 ? "." : "");, +			candidate.append(field);, +			String nested = resolvePropertyName(target, prefix, candidate.toString());, +			if (nested != null) {, +				String propertyName = resolvePropertyName(target,, +						joinString(prefix, nested),, +						name.substring(candidate.length() + 1));, +				if (propertyName != null) {, +					return joinString(nested, propertyName);, +				}, +			}, +		}, +		return null;, +	}, +, +	private String resolvePropertyName(BeanWrapper target, String prefix, String name) {, +					if (target.getPropertyType(joinString(prefix, candidate)) != null) {, +		return null;, +	}, +, +	private String joinString(String prefix, String name) {, +		return (StringUtils.hasLength(prefix) ? prefix + "." + name : name);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, + * Copyright 2012-2015 the original author or authors., +	public void testBindRelaxedNestedValue() throws Exception {, +		TargetWithNestedObject target = new TargetWithNestedObject();, +		bind(target, "nested_foo_Baz: bar\n" + "nested_value: 123");, +		assertEquals("bar", target.getNested().getFooBaz());, +		assertEquals(123, target.getNested().getValue());, +	}, +, +	@Test, +	public void testBindRelaxedNestedCamelValue() throws Exception {, +		TargetWithNestedObject target = new TargetWithNestedObject();, +		bind(target, "another_nested_foo_Baz: bar\n" + "another-nested_value: 123");, +		assertEquals("bar", target.getAnotherNested().getFooBaz());, +		assertEquals(123, target.getAnotherNested().getValue());, +	}, +, +	@Test, +, +		private VanillaTarget anotherNested;, +, +, +		public VanillaTarget getAnotherNested() {, +			return this.anotherNested;, +		}, +, +		public void setAnotherNested(VanillaTarget anotherNested) {, +			this.anotherNested = anotherNested;, +		}, +]