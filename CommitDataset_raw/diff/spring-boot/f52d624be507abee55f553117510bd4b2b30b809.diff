[+++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/test/java/org/springframework/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/test/java/org/springframework/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, parentContext = false), +				Servlet.class }, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/test/java/org/springframework/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, parentContext = false), +				Servlet.class }, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +import org.springframework.beans.factory.BeanFactory;, +				annotationClass().getName()).get("parentContext");, +		Boolean parentOnly = (Boolean) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("parentOnly");, +		parentOnly = (parentOnly == null ? false : parentOnly);, +, +		if (parentOnly) {, +			BeanFactory parent = beanFactory.getParentBeanFactory();, +			if (!(parent instanceof ConfigurableListableBeanFactory)) {, +				throw new IllegalStateException(, +						"Cannot use parentOnly if parent is not ConfigurableListableBeanFactory");, +			}, +			beanFactory = (ConfigurableListableBeanFactory) parent;, +		}, +		for (String beanClass : beanClasses) {, +			try {, +			if (considerHierarchy ? beanFactory.containsBean(beanName) : beanFactory, +					.containsLocalBean(beanName)) {, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/test/java/org/springframework/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, parentContext = false), +				Servlet.class }, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +import org.springframework.beans.factory.BeanFactory;, +				annotationClass().getName()).get("parentContext");, +		Boolean parentOnly = (Boolean) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("parentOnly");, +		parentOnly = (parentOnly == null ? false : parentOnly);, +, +		if (parentOnly) {, +			BeanFactory parent = beanFactory.getParentBeanFactory();, +			if (!(parent instanceof ConfigurableListableBeanFactory)) {, +				throw new IllegalStateException(, +						"Cannot use parentOnly if parent is not ConfigurableListableBeanFactory");, +			}, +			beanFactory = (ConfigurableListableBeanFactory) parent;, +		}, +		for (String beanClass : beanClasses) {, +			try {, +			if (considerHierarchy ? beanFactory.containsBean(beanName) : beanFactory, +					.containsLocalBean(beanName)) {, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/ConditionalOnBean.java, +	boolean parentContext() default true;, +, +	/**, +	 * If only the application parent contexts should be considered., +	 */, +	boolean parentOnly() default false;, +++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	@ConditionalOnBean(name = "springSecurityFilterChain", parentOnly = true), +++ b/spring-actuator/src/test/java/org/springframework/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +	@ConditionalOnMissingBean(value = EmbeddedServletContainerCustomizerBeanPostProcessor.class, parentContext = false), +				Servlet.class }, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, parentContext = false), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/condition/AbstractOnBeanCondition.java, +import org.springframework.beans.factory.BeanFactory;, +				annotationClass().getName()).get("parentContext");, +		Boolean parentOnly = (Boolean) metadata.getAnnotationAttributes(, +				annotationClass().getName()).get("parentOnly");, +		parentOnly = (parentOnly == null ? false : parentOnly);, +, +		if (parentOnly) {, +			BeanFactory parent = beanFactory.getParentBeanFactory();, +			if (!(parent instanceof ConfigurableListableBeanFactory)) {, +				throw new IllegalStateException(, +						"Cannot use parentOnly if parent is not ConfigurableListableBeanFactory");, +			}, +			beanFactory = (ConfigurableListableBeanFactory) parent;, +		}, +		for (String beanClass : beanClasses) {, +			try {, +			if (considerHierarchy ? beanFactory.containsBean(beanName) : beanFactory]