[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Maximum number of connections that the server will accept and process, +		 * at any given time. Once the limit has been reached, the operating system, +		 * may still accept connections based on the "acceptCount" property., +		 * Maximum queue length for incoming connection requests when all possible, +		 * request processing threads are in use., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Maximum number of connections that the server will accept and process, +		 * at any given time. Once the limit has been reached, the operating system, +		 * may still accept connections based on the "acceptCount" property., +		 * Maximum queue length for incoming connection requests when all possible, +		 * request processing threads are in use., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +import org.apache.coyote.AbstractProtocol;, +	public void customTomcatAcceptCount() {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.accept-count", "10");, +		bindProperties(map);, +, +		TomcatEmbeddedServletContainerFactory container = new TomcatEmbeddedServletContainerFactory();, +		this.properties.customize(container);, +		TomcatEmbeddedServletContainer  embeddedContainer =, +				(TomcatEmbeddedServletContainer) container.getEmbeddedServletContainer();, +		assertThat(((AbstractProtocol) embeddedContainer.getTomcat().getConnector(), +				.getProtocolHandler()).getBacklog()).isEqualTo(10);, +	}, +, +	@Test, +	public void customTomcatMaxConnections() {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.max-connections", "5");, +		bindProperties(map);, +, +		TomcatEmbeddedServletContainerFactory container = new TomcatEmbeddedServletContainerFactory();, +		this.properties.customize(container);, +		TomcatEmbeddedServletContainer  embeddedContainer =, +				(TomcatEmbeddedServletContainer) container.getEmbeddedServletContainer();, +		assertThat(((AbstractProtocol) embeddedContainer.getTomcat().getConnector(), +				.getProtocolHandler()).getMaxConnections()).isEqualTo(5);, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Maximum number of connections that the server will accept and process, +		 * at any given time. Once the limit has been reached, the operating system, +		 * may still accept connections based on the "acceptCount" property., +		 * Maximum queue length for incoming connection requests when all possible, +		 * request processing threads are in use., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +import org.apache.coyote.AbstractProtocol;, +	public void customTomcatAcceptCount() {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.accept-count", "10");, +		bindProperties(map);, +, +		TomcatEmbeddedServletContainerFactory container = new TomcatEmbeddedServletContainerFactory();, +		this.properties.customize(container);, +		TomcatEmbeddedServletContainer  embeddedContainer =, +				(TomcatEmbeddedServletContainer) container.getEmbeddedServletContainer();, +		assertThat(((AbstractProtocol) embeddedContainer.getTomcat().getConnector(), +				.getProtocolHandler()).getBacklog()).isEqualTo(10);, +	}, +, +	@Test, +	public void customTomcatMaxConnections() {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.max-connections", "5");, +		bindProperties(map);, +, +		TomcatEmbeddedServletContainerFactory container = new TomcatEmbeddedServletContainerFactory();, +		this.properties.customize(container);, +		TomcatEmbeddedServletContainer  embeddedContainer =, +				(TomcatEmbeddedServletContainer) container.getEmbeddedServletContainer();, +		assertThat(((AbstractProtocol) embeddedContainer.getTomcat().getConnector(), +				.getProtocolHandler()).getMaxConnections()).isEqualTo(5);, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.tomcat.accept-count= # Maximum queue length for incoming connection requests when all possible request processing threads are in use., +	server.tomcat.max-connections= # Maximum number of connections that the server will accept and process at any given time.]