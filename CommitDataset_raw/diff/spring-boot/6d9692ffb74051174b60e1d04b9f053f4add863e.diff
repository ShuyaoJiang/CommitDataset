[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasText(name.toString())) {, +			return null;, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasText(name.toString())) {, +			return null;, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Set;, +import org.springframework.core.env.MapPropertySource;, +	@Test, +	@SuppressWarnings("unchecked"), +	public void bindWithEmptyPrefixShouldIgnorePropertiesWithEmptyName() {, +		Map<String, Object> source = new HashMap<>();, +		source.put("value", "hello");, +		source.put("", "bar");, +		Iterable<ConfigurationPropertySource> propertySources = ConfigurationPropertySources.from(, +				new MapPropertySource("test", source));, +		this.sources.addAll((Set) propertySources);, +		Bindable<JavaBean> target = Bindable.of(JavaBean.class);, +		JavaBean result = this.binder.bind("", target).get();, +		assertThat(result.getValue()).isEqualTo("hello");, +	}, +]