[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			this.strategy = (SearchStrategy) metadata, +					.getAnnotationAttributes(annotationType.getName()).get("search");, +			BeanTypeDeductionException deductionException = null;, +			try {, +			}, +			catch (BeanTypeDeductionException ex) {, +				deductionException = ex;, +			}, +			validate(deductionException);, +		protected void validate(BeanTypeDeductionException ex) {, +			if (!hasAtLeastOne(this.types, this.names, this.annotations)) {, +				String message = annotationName(), +						+ " did not specify a bean using type, name or annotation";, +				if (ex == null) {, +					throw new IllegalStateException(message);, +				}, +				else {, +					throw new IllegalStateException(message + " and the attempt to deduce", +							+ " the bean's type failed", ex);, +				}, +			}, +				throw new BeanTypeDeductionException(, +						methodMetadata.getDeclaringClassName(),, +						methodMetadata.getMethodName(), ex);, +		protected void validate(BeanTypeDeductionException ex) {, +	static final class BeanTypeDeductionException extends RuntimeException {, +, +		private BeanTypeDeductionException(String className, String beanMethodName,, +				Throwable cause) {, +			super("Failed to deduce bean type for " + className + "." + beanMethodName,, +					cause);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			this.strategy = (SearchStrategy) metadata, +					.getAnnotationAttributes(annotationType.getName()).get("search");, +			BeanTypeDeductionException deductionException = null;, +			try {, +			}, +			catch (BeanTypeDeductionException ex) {, +				deductionException = ex;, +			}, +			validate(deductionException);, +		protected void validate(BeanTypeDeductionException ex) {, +			if (!hasAtLeastOne(this.types, this.names, this.annotations)) {, +				String message = annotationName(), +						+ " did not specify a bean using type, name or annotation";, +				if (ex == null) {, +					throw new IllegalStateException(message);, +				}, +				else {, +					throw new IllegalStateException(message + " and the attempt to deduce", +							+ " the bean's type failed", ex);, +				}, +			}, +				throw new BeanTypeDeductionException(, +						methodMetadata.getDeclaringClassName(),, +						methodMetadata.getMethodName(), ex);, +		protected void validate(BeanTypeDeductionException ex) {, +	static final class BeanTypeDeductionException extends RuntimeException {, +, +		private BeanTypeDeductionException(String className, String beanMethodName,, +				Throwable cause) {, +			super("Failed to deduce bean type for " + className + "." + beanMethodName,, +					cause);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnBeanConditionTypeDeductionFailureTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import com.fasterxml.jackson.databind.ObjectMapper;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException;, +import org.springframework.boot.testutil.ClassPathExclusions;, +import org.springframework.boot.testutil.FilteredClassPathRunner;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;]