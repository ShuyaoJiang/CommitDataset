[+++ b/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.util.ClassUtils;, +	private static final Set<Class<?>> CLIENT_ABORT_EXCEPTIONS;, +	static {, +		Set<Class<?>> clientAbortExceptions = new HashSet<>();, +		addClassIfPresent(clientAbortExceptions,, +				"org.apache.catalina.connector.ClientAbortException");, +		CLIENT_ABORT_EXCEPTIONS = Collections.unmodifiableSet(clientAbortExceptions);, +	}, +, +		if (isClientAbortException(ex)) {, +			return;, +		}, +	private boolean isClientAbortException(Throwable ex) {, +		if (ex == null) {, +			return false;, +		}, +		for (Class<?> candidate : CLIENT_ABORT_EXCEPTIONS) {, +			if (candidate.isInstance(ex)) {, +				return true;, +			}, +		}, +		return isClientAbortException(ex.getCause());, +	}, +, +	private static void addClassIfPresent(Collection<Class<?>> collection,, +			String className) {, +		try {, +			collection.add(ClassUtils.forName(className, null));, +		}, +		catch (Throwable ex) {, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.util.ClassUtils;, +	private static final Set<Class<?>> CLIENT_ABORT_EXCEPTIONS;, +	static {, +		Set<Class<?>> clientAbortExceptions = new HashSet<>();, +		addClassIfPresent(clientAbortExceptions,, +				"org.apache.catalina.connector.ClientAbortException");, +		CLIENT_ABORT_EXCEPTIONS = Collections.unmodifiableSet(clientAbortExceptions);, +	}, +, +		if (isClientAbortException(ex)) {, +			return;, +		}, +	private boolean isClientAbortException(Throwable ex) {, +		if (ex == null) {, +			return false;, +		}, +		for (Class<?> candidate : CLIENT_ABORT_EXCEPTIONS) {, +			if (candidate.isInstance(ex)) {, +				return true;, +			}, +		}, +		return isClientAbortException(ex.getCause());, +	}, +, +	private static void addClassIfPresent(Collection<Class<?>> collection,, +			String className) {, +		try {, +			collection.add(ClassUtils.forName(className, null));, +		}, +		catch (Throwable ex) {, +		}, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/web/support/ErrorPageFilterTests.java, +import org.apache.catalina.connector.ClientAbortException;, +	public void responseCommittedWhenFromClientAbortException() throws Exception {, +		this.filter.addErrorPages(new ErrorPage("/error"));, +		this.response.setCommitted(true);, +		this.chain = new MockFilterChain() {, +, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +				super.doFilter(request, response);, +				throw new ClientAbortException();, +			}, +, +		};, +		this.filter.doFilter(this.request, this.response, this.chain);, +		assertThat(this.response.isCommitted()).isTrue();, +		assertThat(this.output.toString()).doesNotContain("Cannot forward");, +	}, +, +	@Test]