[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.ArrayList;, +			return findFirstMatchingMeters((CompositeMeterRegistry) registry, name, tags);, +		}, +		return registry.find(name).tags(tags).meters();, +	}, +	private Collection<Meter> findFirstMatchingMeters(CompositeMeterRegistry composite,, +			String name, Iterable<Tag> tags) {, +		return composite.getRegistries().stream(), +				.map((registry) -> findFirstMatchingMeters(registry, name, tags)), +				.filter((matching) -> !matching.isEmpty()).findFirst(), +				.orElse(Collections.emptyList());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.ArrayList;, +			return findFirstMatchingMeters((CompositeMeterRegistry) registry, name, tags);, +		}, +		return registry.find(name).tags(tags).meters();, +	}, +	private Collection<Meter> findFirstMatchingMeters(CompositeMeterRegistry composite,, +			String name, Iterable<Tag> tags) {, +		return composite.getRegistries().stream(), +				.map((registry) -> findFirstMatchingMeters(registry, name, tags)), +				.filter((matching) -> !matching.isEmpty()).findFirst(), +				.orElse(Collections.emptyList());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +		SimpleMeterRegistry firstLevel0 = new SimpleMeterRegistry();, +		CompositeMeterRegistry firstLevel1 = new CompositeMeterRegistry();, +		SimpleMeterRegistry secondLevel = new SimpleMeterRegistry();, +		composite.add(firstLevel0);, +		composite.add(firstLevel1);, +		firstLevel1.add(secondLevel);, +		secondLevel.counter("cache", "result", "hit", "host", "1").increment(2);, +		secondLevel.counter("cache", "result", "miss", "host", "1").increment(2);, +		secondLevel.counter("cache", "result", "hit", "host", "2").increment(2);, +		CompositeMeterRegistry firstLevel = new CompositeMeterRegistry();, +		SimpleMeterRegistry secondLevel = new SimpleMeterRegistry();, +		composite.add(firstLevel);, +		firstLevel.add(secondLevel);]