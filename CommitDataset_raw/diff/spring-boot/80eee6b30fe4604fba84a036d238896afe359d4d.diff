[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, + * @author Kazuki Shimizu, +	private final TransactionProperties transactionProperties;, +, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource) {, +		this(properties, transactionProperties, dataSource, null);, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource,, +		this.transactionProperties = transactionProperties;, +		PlatformTransactionManager txManager;, +			txManager = new JpaTransactionManager(this.entityManagerFactory);, +		else {, +			txManager = new DataSourceTransactionManager(this.dataSource);, +		}, +		this.transactionProperties.applyTo(txManager);, +		return txManager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, + * @author Kazuki Shimizu, +	private final TransactionProperties transactionProperties;, +, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource) {, +		this(properties, transactionProperties, dataSource, null);, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource,, +		this.transactionProperties = transactionProperties;, +		PlatformTransactionManager txManager;, +			txManager = new JpaTransactionManager(this.entityManagerFactory);, +		else {, +			txManager = new DataSourceTransactionManager(this.dataSource);, +		}, +		this.transactionProperties.applyTo(txManager);, +		return txManager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, +import org.springframework.transaction.PlatformTransactionManager;, + * @author Kazuki Shimizu, +	@EnableConfigurationProperties({BatchProperties.class, TransactionProperties.class}), +	@ConditionalOnClass(value = PlatformTransactionManager.class, name = "javax.persistence.EntityManagerFactory"), +		private final TransactionProperties transactionProperties;, +		protected JpaBatchConfiguration(BatchProperties properties, TransactionProperties transactionProperties) {, +			this.transactionProperties = transactionProperties;, +			return new BasicBatchConfigurer(this.properties, this.transactionProperties, dataSource,, +			return new BasicBatchConfigurer(this.properties, this.transactionProperties, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, + * @author Kazuki Shimizu, +	private final TransactionProperties transactionProperties;, +, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource) {, +		this(properties, transactionProperties, dataSource, null);, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource,, +		this.transactionProperties = transactionProperties;, +		PlatformTransactionManager txManager;, +			txManager = new JpaTransactionManager(this.entityManagerFactory);, +		else {, +			txManager = new DataSourceTransactionManager(this.dataSource);, +		}, +		this.transactionProperties.applyTo(txManager);, +		return txManager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, +import org.springframework.transaction.PlatformTransactionManager;, + * @author Kazuki Shimizu, +	@EnableConfigurationProperties({BatchProperties.class, TransactionProperties.class}), +	@ConditionalOnClass(value = PlatformTransactionManager.class, name = "javax.persistence.EntityManagerFactory"), +		private final TransactionProperties transactionProperties;, +		protected JpaBatchConfiguration(BatchProperties properties, TransactionProperties transactionProperties) {, +			this.transactionProperties = transactionProperties;, +			return new BasicBatchConfigurer(this.properties, this.transactionProperties, dataSource,, +			return new BasicBatchConfigurer(this.properties, this.transactionProperties, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, + * @author Kazuki Shimizu, +@ConditionalOnClass({SessionFactory.class, PlatformTransactionManager.class}), +@EnableConfigurationProperties({Neo4jProperties.class, TransactionProperties.class}), +	public Neo4jTransactionManager transactionManager(SessionFactory sessionFactory,, +			TransactionProperties transactionProperties) {, +		Neo4jTransactionManager transactionManager = new Neo4jTransactionManager(sessionFactory);, +		transactionProperties.applyTo(transactionManager);, +		return transactionManager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, + * @author Kazuki Shimizu, +	private final TransactionProperties transactionProperties;, +, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource) {, +		this(properties, transactionProperties, dataSource, null);, +	 * @param transactionProperties the transaction properties, +	protected BasicBatchConfigurer(BatchProperties properties, TransactionProperties transactionProperties, DataSource dataSource,, +		this.transactionProperties = transactionProperties;, +		PlatformTransactionManager txManager;, +			txManager = new JpaTransactionManager(this.entityManagerFactory);, +		else {]