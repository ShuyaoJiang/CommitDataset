[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplication.java, + * Copyright 2012-2017 the original author or authors., + * {@link Conditional} that matches when the application is a web application. By default,, + * any web application will match but it can be narrowed using the {@link #type()}, + * attribute., + * @author Stephane Nicoll, +	/**, +	 * The required type of the web application., +	 * @return the required web application type, +	 */, +	Type type() default Type.ANY;, +, +	/**, +	 * Available application types., +	 */, +	enum Type {, +, +		/**, +		 * Any web application will match., +		 */, +		ANY,, +, +		/**, +		 * Only servlet-based web application will match., +		 */, +		SERVLET,, +, +		/**, +		 * Only reactive-based web application will match., +		 */, +		REACTIVE, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplication.java, + * Copyright 2012-2017 the original author or authors., + * {@link Conditional} that matches when the application is a web application. By default,, + * any web application will match but it can be narrowed using the {@link #type()}, + * attribute., + * @author Stephane Nicoll, +	/**, +	 * The required type of the web application., +	 * @return the required web application type, +	 */, +	Type type() default Type.ANY;, +, +	/**, +	 * Available application types., +	 */, +	enum Type {, +, +		/**, +		 * Any web application will match., +		 */, +		ANY,, +, +		/**, +		 * Only servlet-based web application will match., +		 */, +		SERVLET,, +, +		/**, +		 * Only reactive-based web application will match., +		 */, +		REACTIVE, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, + * Copyright 2012-2017 the original author or authors., +import java.util.Map;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;, +import org.springframework.boot.context.embedded.ReactiveWebApplicationContext;, +		Type type = deduceType(metadata);, +		if (Type.SERVLET == type) {, +			return isServletWebApplication(context);, +		}, +		else if (Type.REACTIVE == type) {, +			return isReactiveWebApplication(context);, +		}, +		else {, +			ConditionOutcome servletOutcome = isServletWebApplication(context);, +			if (servletOutcome.isMatch() && required) {, +				return new ConditionOutcome(servletOutcome.isMatch(),, +						message.because(servletOutcome.getMessage()));, +			}, +			ConditionOutcome reactiveOutcome = isReactiveWebApplication(context);, +			if (reactiveOutcome.isMatch() && required)  {, +				return new ConditionOutcome(reactiveOutcome.isMatch(),, +						message.because(reactiveOutcome.getMessage()));, +			}, +			boolean finalOutcome = (required ?, +					servletOutcome.isMatch() && reactiveOutcome.isMatch() :, +					servletOutcome.isMatch() || reactiveOutcome.isMatch());, +			return new ConditionOutcome(finalOutcome, message.because(, +					servletOutcome.getMessage()).append("and").append(, +							reactiveOutcome.getMessage()));, +		}, +	}]