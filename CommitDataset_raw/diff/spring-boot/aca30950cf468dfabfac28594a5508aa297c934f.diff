[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterService.java, + * Copyright 2012-2017 the original author or authors., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/buffer/BufferCounterServiceTests.java, + * Copyright 2012-2017 the original author or authors., +import static org.assertj.core.api.Assertions.assertThat;, + * Tests for {@link BufferCounterService}., +	private BufferMetricReader reader = new BufferMetricReader(this.counters,, +			new GaugeBuffers());, +		assertThat(this.reader.findOne("foo")).isNull();, +		assertThat(counterFooMetric).isNotNull();, +		assertThat(counterFooMetric.getValue()).isEqualTo(1L);, +		assertThat(this.reader.findOne("counterfoo")).isNull();, +		assertThat(counterCounterfooMetric).isNotNull();, +		assertThat(counterCounterfooMetric.getValue()).isEqualTo(1L);, +		assertThat(this.reader.findOne("counter.counter.foo")).isNull();, +		assertThat(counterFooMetric).isNotNull();, +		assertThat(counterFooMetric.getValue()).isEqualTo(1L);, +		assertThat(this.reader.findOne("meterfoo")).isNull();, +		assertThat(counterMeterfooMetric).isNotNull();, +		assertThat(counterMeterfooMetric.getValue()).isEqualTo(1L);, +		assertThat(this.reader.findOne("counter.meter.foo")).isNull();, +		assertThat(meterFooMetric).isNotNull();, +		assertThat(meterFooMetric.getValue()).isEqualTo(1L);]