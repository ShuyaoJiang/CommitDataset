[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java, + * @author Stephane Nicoll, +			String prefix = getProperty(environment, "spring.mvc.view.prefix", "spring.view.prefix",, +			String suffix = getProperty(environment, "spring.mvc.view.suffix", "spring.view.suffix",, +	private String getProperty(Environment environment, String key, String deprecatedKey, String defaultValue) {, +		if (environment.containsProperty(key)) {, +			return environment.getProperty(key);, +		}, +		if (environment.containsProperty(deprecatedKey)) {, +			return environment.getProperty(deprecatedKey);, +		}, +		return defaultValue;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java, + * @author Stephane Nicoll, +			String prefix = getProperty(environment, "spring.mvc.view.prefix", "spring.view.prefix",, +			String suffix = getProperty(environment, "spring.mvc.view.suffix", "spring.view.suffix",, +	private String getProperty(Environment environment, String key, String deprecatedKey, String defaultValue) {, +		if (environment.containsProperty(key)) {, +			return environment.getProperty(key);, +		}, +		if (environment.containsProperty(deprecatedKey)) {, +			return environment.getProperty(deprecatedKey);, +		}, +		return defaultValue;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			resolver.setPrefix(this.mvcProperties.getView().getPrefix());, +			resolver.setSuffix(this.mvcProperties.getView().getSuffix());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java, + * @author Stephane Nicoll, +			String prefix = getProperty(environment, "spring.mvc.view.prefix", "spring.view.prefix",, +			String suffix = getProperty(environment, "spring.mvc.view.suffix", "spring.view.suffix",, +	private String getProperty(Environment environment, String key, String deprecatedKey, String defaultValue) {, +		if (environment.containsProperty(key)) {, +			return environment.getProperty(key);, +		}, +		if (environment.containsProperty(deprecatedKey)) {, +			return environment.getProperty(deprecatedKey);, +		}, +		return defaultValue;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			resolver.setPrefix(this.mvcProperties.getView().getPrefix());, +			resolver.setSuffix(this.mvcProperties.getView().getSuffix());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +import org.springframework.beans.factory.annotation.Value;, + * @author Stephane Nicoll, +	private final View view = new View();, +, +	public View getView() {, +		return this.view;, +	}, +, +, +	public static class View {, +, +		/**, +		 * Spring MVC view prefix., +		 */, +		@Value("${spring.view.prefix:}"), +		private String prefix;, +, +		/**, +		 * Spring MVC view suffx., +		 */, +		@Value("${spring.view.suffix:}"), +		private String suffix;, +, +		public String getPrefix() {, +			return prefix;, +		}, +, +		public void setPrefix(String prefix) {, +			this.prefix = prefix;, +		}, +, +		public String getSuffix() {, +			return suffix;, +		}, +, +		public void setSuffix(String suffix) {, +			this.suffix = suffix;, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java, + * @author Stephane Nicoll, +			String prefix = getProperty(environment, "spring.mvc.view.prefix", "spring.view.prefix",, +			String suffix = getProperty(environment, "spring.mvc.view.suffix", "spring.view.suffix",, +	private String getProperty(Environment environment, String key, String deprecatedKey, String defaultValue) {, +		if (environment.containsProperty(key)) {, +			return environment.getProperty(key);, +		}, +		if (environment.containsProperty(deprecatedKey)) {, +			return environment.getProperty(deprecatedKey);, +		}, +		return defaultValue;]