[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +					runSafely(new JacksonInitializer());, +					runSafely(new ConverstionServiceInitializer());, +	/**, +	 * Early initializer for Jackson., +	 */, +	private static class JacksonInitializer implements Runnable {, +, +		@Override, +		public void run() {, +			Jackson2ObjectMapperBuilder.json().build();, +		}, +, +	}, +, +	/**, +	 * Early initializer for Spring's ConverstionService., +	 */, +	private static class ConverstionServiceInitializer implements Runnable {, +, +		@Override, +		public void run() {, +			new DefaultFormattingConversionService();, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +					runSafely(new JacksonInitializer());, +					runSafely(new ConverstionServiceInitializer());, +	/**, +	 * Early initializer for Jackson., +	 */, +	private static class JacksonInitializer implements Runnable {, +, +		@Override, +		public void run() {, +			Jackson2ObjectMapperBuilder.json().build();, +		}, +, +	}, +, +	/**, +	 * Early initializer for Spring's ConverstionService., +	 */, +	private static class ConverstionServiceInitializer implements Runnable {, +, +		@Override, +		public void run() {, +			new DefaultFormattingConversionService();, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +		private volatile Map<String, Expression> expressions;, +			PlaceholderResolver resolver = new ExpressionResolver(getExpressions(), map);, +		private Map<String, Expression> getExpressions() {, +			if (this.expressions == null) {, +				synchronized (this) {, +					ExpressionCollector expressionCollector = new ExpressionCollector();, +					this.helper.replacePlaceholders(this.template, expressionCollector);, +					this.expressions = expressionCollector.getExpressions();, +				}, +			}, +			return this.expressions;, +		}, +]