[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java, + * Copyright 2012-2018 the original author or authors., +		if (ClassUtils.isPresent("liquibase.servicelocator.CustomResolverServiceLocator",, +				event.getSpringApplication().getClassLoader())) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java, + * Copyright 2012-2018 the original author or authors., +		if (ClassUtils.isPresent("liquibase.servicelocator.CustomResolverServiceLocator",, +				event.getSpringApplication().getClassLoader())) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListenerTests.java, + * Copyright 2012-2018 the original author or authors., +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.Arrays;, +import java.util.List;, +import liquibase.servicelocator.CustomResolverServiceLocator;, +import liquibase.servicelocator.DefaultPackageScanClassResolver;, +import org.springframework.core.io.DefaultResourceLoader;, + * @author Stephane Nicoll, +	public void replacesServiceLocator() throws IllegalAccessException {, +		Object resolver = getServiceLocator();, +		assertThat(resolver).isInstanceOf(SpringPackageScanClassResolver.class);, +	}, +, +	@Test, +	public void replaceServiceLocatorBacksOffIfNotPresent(), +			throws IllegalAccessException {, +		SpringApplication application = new SpringApplication(Conf.class);, +		application.setWebApplicationType(WebApplicationType.NONE);, +		DefaultResourceLoader resourceLoader = new DefaultResourceLoader();, +		resourceLoader.setClassLoader(new ClassHidingClassLoader(, +				CustomResolverServiceLocator.class));, +		application.setResourceLoader(resourceLoader);, +		this.context = application.run();, +		Object resolver = getServiceLocator();, +		assertThat(resolver).isInstanceOf(DefaultPackageScanClassResolver.class);, +	}, +, +	private Object getServiceLocator() throws IllegalAccessException {, +		return field.get(instance);, +	private final class ClassHidingClassLoader extends URLClassLoader {, +, +		private final List<Class<?>> hiddenClasses;, +, +		private ClassHidingClassLoader(Class<?>... hiddenClasses) {, +			super(new URL[0], LiquibaseServiceLocatorApplicationListenerTests.class.getClassLoader());, +			this.hiddenClasses = Arrays.asList(hiddenClasses);, +		}, +, +		@Override, +		public Class<?> loadClass(String name) throws ClassNotFoundException {, +			if (isHidden(name)) {, +				throw new ClassNotFoundException();, +			}, +			return super.loadClass(name);, +		}, +, +		private boolean isHidden(String name) {, +			for (Class<?> hiddenClass : this.hiddenClasses) {, +				if (hiddenClass.getName().equals(name)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +]