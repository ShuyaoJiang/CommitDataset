[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			for (String candidate : new RelaxedNames(this.namePrefix)) {, +				if (name.startsWith(candidate)) {, +					name = name.substring(candidate.length());, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			for (String candidate : new RelaxedNames(this.namePrefix)) {, +				if (name.startsWith(candidate)) {, +					name = name.substring(candidate.length());, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +	public void testBindStringWithPrefix() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		bind(target, "test.foo: bar", "test");, +		assertEquals("bar", target.getFoo());, +	}, +, +	@Test, +	public void testBindFromEnvironmentStyleWithPrefix() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		bind(target, "TEST_FOO: bar", "test");, +		assertEquals("bar", target.getFoo());, +	}, +, +	@Test, +	public void testBindFromEnvironmentStyleWithNestedPrefix() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		bind(target, "TEST_IT_FOO: bar", "test.it");, +		assertEquals("bar", target.getFoo());, +	}, +, +	@Test, +	public void testBindCapitals() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		bind(target, "FOO: bar");, +		assertEquals("bar", target.getFoo());, +	}, +, +	@Test]