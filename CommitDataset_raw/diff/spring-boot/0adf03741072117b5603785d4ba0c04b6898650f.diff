[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	@Autowired, +	private ServerProperties serverProperties;, +, +		return new UrlHandlerMapper((this.serverProperties.getContextPath() == null ? "", +				: this.serverProperties.getContextPath()), +				+ this.properties.getRemote().getContextPath(), handler);, +		@Autowired, +		private ServerProperties serverProperties;, +, +			String url = (this.serverProperties.getContextPath() == null ? "", +					: this.serverProperties.getContextPath()), +					+ this.properties.getRemote().getContextPath() + "/restart";, +		@Autowired, +		private ServerProperties serverProperties;, +, +			String url = (this.serverProperties.getContextPath() == null ? "", +					: this.serverProperties.getContextPath()), +					+ this.properties.getRemote().getContextPath() + "/debug";, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	@Autowired, +	private ServerProperties serverProperties;, +, +		return new UrlHandlerMapper((this.serverProperties.getContextPath() == null ? "", +				: this.serverProperties.getContextPath()), +				+ this.properties.getRemote().getContextPath(), handler);, +		@Autowired, +		private ServerProperties serverProperties;, +, +			String url = (this.serverProperties.getContextPath() == null ? "", +					: this.serverProperties.getContextPath()), +					+ this.properties.getRemote().getContextPath() + "/restart";, +		@Autowired, +		private ServerProperties serverProperties;, +, +			String url = (this.serverProperties.getContextPath() == null ? "", +					: this.serverProperties.getContextPath()), +					+ this.properties.getRemote().getContextPath() + "/debug";, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsAutoConfigurationTests.java, +	public void invokeRestartWithCustomServerContextPath() throws Exception {, +		loadContext("spring.devtools.remote.secret:supersecret",, +				"server.context-path:/test");, +		DispatcherFilter filter = this.context.getBean(DispatcherFilter.class);, +		this.request.setRequestURI("/test" + DEFAULT_CONTEXT_PATH + "/restart");, +		this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret");, +		filter.doFilter(this.request, this.response, this.chain);, +		assertRestartInvoked(true);, +	}, +, +	@Test, +	public void invokeTunnelWithCustomServerContextPath() throws Exception {, +		loadContext("spring.devtools.remote.secret:supersecret",, +				"server.context-path:/test");, +		DispatcherFilter filter = this.context.getBean(DispatcherFilter.class);, +		this.request.setRequestURI("/test" + DEFAULT_CONTEXT_PATH + "/debug");, +		this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret");, +		filter.doFilter(this.request, this.response, this.chain);, +		assertTunnelInvoked(true);, +	}, +, +	@Test, +	@Test, +	public void devToolsHealthWithCustomServerContextPathReturns200() throws Exception {, +		loadContext("spring.devtools.remote.secret:supersecret",, +				"server.context-path:/test");, +		DispatcherFilter filter = this.context.getBean(DispatcherFilter.class);, +		this.request.setRequestURI("/test" + DEFAULT_CONTEXT_PATH);, +		this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret");, +		this.response.setStatus(500);, +		filter.doFilter(this.request, this.response, this.chain);, +		assertThat(this.response.getStatus(), equalTo(200));, +	}, +]