[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.convert.DataSizeUnit;, +import org.springframework.util.unit.DataSize;, +import org.springframework.util.unit.DataUnit;, + * {@link DataSize} variants., + * @author Stephane Nicoll, +	 * Max file size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxFileSize = DataSize.ofMegaBytes(1);, +	 * Max request size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxRequestSize = DataSize.ofMegaBytes(10);, +	 * Threshold after which files are written to disk., +	private DataSize fileSizeThreshold = DataSize.ofBytes(0);, +	public DataSize getMaxFileSize() {, +	public void setMaxFileSize(DataSize maxFileSize) {, +	public DataSize getMaxRequestSize() {, +	public void setMaxRequestSize(DataSize maxRequestSize) {, +	public DataSize getFileSizeThreshold() {, +	public void setFileSizeThreshold(DataSize fileSizeThreshold) {, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(() -> this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(() -> this.location).whenHasText().to(factory::setLocation);, +		map.from(() -> this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(() -> this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.convert.DataSizeUnit;, +import org.springframework.util.unit.DataSize;, +import org.springframework.util.unit.DataUnit;, + * {@link DataSize} variants., + * @author Stephane Nicoll, +	 * Max file size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxFileSize = DataSize.ofMegaBytes(1);, +	 * Max request size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxRequestSize = DataSize.ofMegaBytes(10);, +	 * Threshold after which files are written to disk., +	private DataSize fileSizeThreshold = DataSize.ofBytes(0);, +	public DataSize getMaxFileSize() {, +	public void setMaxFileSize(DataSize maxFileSize) {, +	public DataSize getMaxRequestSize() {, +	public void setMaxRequestSize(DataSize maxRequestSize) {, +	public DataSize getFileSizeThreshold() {, +	public void setFileSizeThreshold(DataSize fileSizeThreshold) {, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(() -> this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(() -> this.location).whenHasText().to(factory::setLocation);, +		map.from(() -> this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(() -> this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java, +import org.springframework.util.unit.DataSize;, +			factory.setMaxFileSize(DataSize.ofKiloBytes(128));, +			factory.setMaxRequestSize(DataSize.ofKiloBytes(128));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.convert.DataSizeUnit;, +import org.springframework.util.unit.DataSize;, +import org.springframework.util.unit.DataUnit;, + * {@link DataSize} variants., + * @author Stephane Nicoll, +	 * Max file size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxFileSize = DataSize.ofMegaBytes(1);, +	 * Max request size., +	@DataSizeUnit(DataUnit.MEGABYTES), +	private DataSize maxRequestSize = DataSize.ofMegaBytes(10);, +	 * Threshold after which files are written to disk., +	private DataSize fileSizeThreshold = DataSize.ofBytes(0);, +	public DataSize getMaxFileSize() {, +	public void setMaxFileSize(DataSize maxFileSize) {, +	public DataSize getMaxRequestSize() {, +	public void setMaxRequestSize(DataSize maxRequestSize) {, +	public DataSize getFileSizeThreshold() {, +	public void setFileSizeThreshold(DataSize fileSizeThreshold) {, +		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +		map.from(() -> this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(() -> this.location).whenHasText().to(factory::setLocation);, +		map.from(() -> this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(() -> this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java, +import org.springframework.util.unit.DataSize;, +			factory.setMaxFileSize(DataSize.ofKiloBytes(128));, +			factory.setMaxRequestSize(DataSize.ofKiloBytes(128));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.servlet.multipart.file-size-threshold=0 # Threshold after which files are written to disk., +	spring.servlet.multipart.max-file-size=1MB # Max file size., +	spring.servlet.multipart.max-request-size=10MB # Max request size., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.convert.DataSizeUnit;, +import org.springframework.util.unit.DataSize;, +import org.springframework.util.unit.DataUnit;, + * {@link DataSize} variants.]