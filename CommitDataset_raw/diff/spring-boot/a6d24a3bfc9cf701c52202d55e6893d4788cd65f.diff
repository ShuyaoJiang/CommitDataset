[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.HashSet;, +import java.util.Set;, +import org.gradle.api.specs.Specs;, +		Spec<FileTreeElement> loaderEntries;, +			loaderEntries = writeLoaderClassesIfNecessary(zipStream);, +					this.preserveFileTimestamps, this.requiresUnpack,, +					createExclusionSpec(loaderEntries), this.compressionResolver));, +	@SuppressWarnings("unchecked"), +	private Spec<FileTreeElement> createExclusionSpec(, +			Spec<FileTreeElement> loaderEntries) {, +		return Specs.union(loaderEntries, this.exclusions);, +	private Spec<FileTreeElement> writeLoaderClassesIfNecessary(ZipOutputStream out) {, +		if (!this.includeDefaultLoader) {, +			return Specs.satisfyNone();, +		}, +		return writeLoaderClasses(out);, +	}, +, +	private Spec<FileTreeElement> writeLoaderClasses(ZipOutputStream out) {, +			Set<String> entries = new HashSet<String>();, +			ZipEntry entry;, +					entries.add(entry.getName());, +				else if (entry.getName().endsWith(".class")) {, +			return (element) -> {, +				String path = element.getRelativePath().getPathString();, +				if (element.isDirectory() && !path.endsWith(("/"))) {, +					path += "/";, +				}, +				return entries.contains(path);, +			};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.HashSet;, +import java.util.Set;, +import org.gradle.api.specs.Specs;, +		Spec<FileTreeElement> loaderEntries;, +			loaderEntries = writeLoaderClassesIfNecessary(zipStream);, +					this.preserveFileTimestamps, this.requiresUnpack,, +					createExclusionSpec(loaderEntries), this.compressionResolver));, +	@SuppressWarnings("unchecked"), +	private Spec<FileTreeElement> createExclusionSpec(, +			Spec<FileTreeElement> loaderEntries) {, +		return Specs.union(loaderEntries, this.exclusions);, +	private Spec<FileTreeElement> writeLoaderClassesIfNecessary(ZipOutputStream out) {, +		if (!this.includeDefaultLoader) {, +			return Specs.satisfyNone();, +		}, +		return writeLoaderClasses(out);, +	}, +, +	private Spec<FileTreeElement> writeLoaderClasses(ZipOutputStream out) {, +			Set<String> entries = new HashSet<String>();, +			ZipEntry entry;, +					entries.add(entry.getName());, +				else if (entry.getName().endsWith(".class")) {, +			return (element) -> {, +				String path = element.getRelativePath().getPathString();, +				if (element.isDirectory() && !path.endsWith(("/"))) {, +					path += "/";, +				}, +				return entries.contains(path);, +			};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/BootWarTests.java, +import java.io.File;, +	@Test, +	public void webappResourcesInDirectoriesThatOverlapWithLoaderCanBePackaged(), +			throws IOException {, +		File webappFolder = this.temp.newFolder("src", "main", "webapp");, +		File orgFolder = new File(webappFolder, "org");, +		orgFolder.mkdir();, +		new File(orgFolder, "foo.txt").createNewFile();, +		getTask().from(webappFolder);, +		getTask().setMainClass("com.example.Main");, +		getTask().execute();, +		assertThat(getTask().getArchivePath().exists());, +		try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {, +			assertThat(jarFile.getEntry("org/")).isNotNull();, +			assertThat(jarFile.getEntry("org/foo.txt")).isNotNull();, +		}, +	}, +]