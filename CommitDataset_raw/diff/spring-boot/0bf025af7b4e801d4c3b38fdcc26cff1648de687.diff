[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/AbstractErrorController.java, + * Copyright 2012-2016 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.web.servlet.ModelAndView;, +	private final List<ErrorViewResolver> errorViewResolvers;, +, +		this(errorAttributes, null);, +	}, +, +	public AbstractErrorController(ErrorAttributes errorAttributes,, +			List<ErrorViewResolver> errorViewResolvers) {, +		this.errorViewResolvers = sortErrorViewResolvers(errorViewResolvers);, +	}, +, +	private List<ErrorViewResolver> sortErrorViewResolvers(, +			List<ErrorViewResolver> resolvers) {, +		List<ErrorViewResolver> sorted = new ArrayList<ErrorViewResolver>();, +		if (resolvers != null) {, +			sorted.addAll(resolvers);, +			AnnotationAwareOrderComparator.sortIfNecessary(sorted);, +		}, +		return sorted;, +	/**, +	 * Resolve any specific error views. By default this method delegates to, +	 * {@link ErrorViewResolver ErrorViewResolvers}., +	 * @param request the request, +	 * @param response the response, +	 * @param status the HTTP status, +	 * @param model the suggested model, +	 * @return a specific {@link ModelAndView} or {@code null} if the default should be, +	 * used, +	 * @since 1.4.0, +	 */, +	protected ModelAndView resolveErrorView(HttpServletRequest request,, +			HttpServletResponse response, HttpStatus status, Map<String, Object> model) {, +		for (ErrorViewResolver resolver : this.errorViewResolvers) {, +			ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);, +			if (modelAndView != null) {, +				return modelAndView;, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/AbstractErrorController.java, + * Copyright 2012-2016 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.web.servlet.ModelAndView;, +	private final List<ErrorViewResolver> errorViewResolvers;, +, +		this(errorAttributes, null);, +	}, +, +	public AbstractErrorController(ErrorAttributes errorAttributes,, +			List<ErrorViewResolver> errorViewResolvers) {, +		this.errorViewResolvers = sortErrorViewResolvers(errorViewResolvers);, +	}, +, +	private List<ErrorViewResolver> sortErrorViewResolvers(, +			List<ErrorViewResolver> resolvers) {, +		List<ErrorViewResolver> sorted = new ArrayList<ErrorViewResolver>();, +		if (resolvers != null) {, +			sorted.addAll(resolvers);, +			AnnotationAwareOrderComparator.sortIfNecessary(sorted);, +		}, +		return sorted;, +	/**, +	 * Resolve any specific error views. By default this method delegates to, +	 * {@link ErrorViewResolver ErrorViewResolvers}., +	 * @param request the request, +	 * @param response the response, +	 * @param status the HTTP status, +	 * @param model the suggested model, +	 * @return a specific {@link ModelAndView} or {@code null} if the default should be, +	 * used, +	 * @since 1.4.0, +	 */, +	protected ModelAndView resolveErrorView(HttpServletRequest request,, +			HttpServletResponse response, HttpStatus status, Map<String, Object> model) {, +		for (ErrorViewResolver resolver : this.errorViewResolvers) {, +			ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);, +			if (modelAndView != null) {, +				return modelAndView;, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java, +import java.util.Collections;, +import java.util.List;, +		this(errorAttributes, errorProperties,, +				Collections.<ErrorViewResolver>emptyList());, +	}]