[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +		collectProperties(source, source, properties);, +	private void collectProperties(Class<?> root, Class<?> source,, +			Map<String, Object> properties) {, +			for (Annotation annotation : getMergedAnnotations(root, source)) {, +					collectProperties(root, annotation.annotationType(), properties);, +			collectProperties(root, source.getSuperclass(), properties);, +	private List<Annotation> getMergedAnnotations(Class<?> root, Class<?> source) {, +		List<Annotation> mergedAnnotations = new ArrayList<Annotation>();, +		for (Annotation annotation : AnnotationUtils.getAnnotations(source)) {, +			if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +				mergedAnnotations.add(AnnotatedElementUtils.getMergedAnnotation(root,, +						annotation.annotationType()));, +			}, +		}, +		return mergedAnnotations;, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +		collectProperties(source, source, properties);, +	private void collectProperties(Class<?> root, Class<?> source,, +			Map<String, Object> properties) {, +			for (Annotation annotation : getMergedAnnotations(root, source)) {, +					collectProperties(root, annotation.annotationType(), properties);, +			collectProperties(root, source.getSuperclass(), properties);, +	private List<Annotation> getMergedAnnotations(Class<?> root, Class<?> source) {, +		List<Annotation> mergedAnnotations = new ArrayList<Annotation>();, +		for (Annotation annotation : AnnotationUtils.getAnnotations(source)) {, +			if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +				mergedAnnotations.add(AnnotatedElementUtils.getMergedAnnotation(root,, +						annotation.annotationType()));, +			}, +		}, +		return mergedAnnotations;, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySourceTests.java, +import org.springframework.core.annotation.AliasFor;, +, +	@Test, +	public void propertyMappedAttributesCanBeAliased() {, +		AnnotationsPropertySource source = new AnnotationsPropertySource(, +				PropertyMappedAttributeWithAnAlias.class);, +		assertThat(source.getPropertyNames()).containsExactly("aliasing.value");, +		assertThat(source.getProperty("aliasing.value")).isEqualTo("baz");, +	}, +, +	@AttributeWithAliasAnnotation("baz"), +	static class PropertyMappedAttributeWithAnAlias {, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@AliasedAttributeAnnotation, +	static @interface AttributeWithAliasAnnotation {, +, +		@AliasFor(annotation = AliasedAttributeAnnotation.class, attribute = "value"), +		String value() default "foo";, +, +		String someOtherAttribute() default "shouldNotBeMapped";, +, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@PropertyMapping("aliasing"), +	static @interface AliasedAttributeAnnotation {, +, +		String value() default "bar";, +, +	}, +]