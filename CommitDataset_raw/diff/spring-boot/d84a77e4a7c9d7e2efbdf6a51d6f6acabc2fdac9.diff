[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +	private List<JettyServerCustomizer> jettyServerCustomizers = new ArrayList<JettyServerCustomizer>();, +, +		for (JettyServerCustomizer customizer : getServerCustomizers()) {, +			customizer.customize(server);, +		}, +, +	 * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started. Calling this method will replace any existing configurations., +	 * @param customizers the Jetty customizers to apply, +	 */, +	public void setServerCustomizers(, +			Collection<? extends JettyServerCustomizer> customizers) {, +		Assert.notNull(customizers, "JettyServerCustomizers must not be null");, +		this.jettyServerCustomizers = new ArrayList<JettyServerCustomizer>(customizers);, +	}, +, +	/**, +	 * Returns a mutable collection of Jetty {@link Configuration}s that will be applied, +	 * to the {@link WebAppContext} before the server is created., +	 * @return the Jetty {@link Configuration}s, +	 */, +	public Collection<JettyServerCustomizer> getServerCustomizers() {, +		return this.jettyServerCustomizers;, +	}, +, +	/**, +	 * Add {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started., +	 * @param customizers the customizers to add, +	 */, +	public void addServerCustomizers(JettyServerCustomizer... customizers) {, +		Assert.notNull(customizers, "Configurations must not be null");, +		this.jettyServerCustomizers.addAll(Arrays.asList(customizers));, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +	private List<JettyServerCustomizer> jettyServerCustomizers = new ArrayList<JettyServerCustomizer>();, +, +		for (JettyServerCustomizer customizer : getServerCustomizers()) {, +			customizer.customize(server);, +		}, +, +	 * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started. Calling this method will replace any existing configurations., +	 * @param customizers the Jetty customizers to apply, +	 */, +	public void setServerCustomizers(, +			Collection<? extends JettyServerCustomizer> customizers) {, +		Assert.notNull(customizers, "JettyServerCustomizers must not be null");, +		this.jettyServerCustomizers = new ArrayList<JettyServerCustomizer>(customizers);, +	}, +, +	/**, +	 * Returns a mutable collection of Jetty {@link Configuration}s that will be applied, +	 * to the {@link WebAppContext} before the server is created., +	 * @return the Jetty {@link Configuration}s, +	 */, +	public Collection<JettyServerCustomizer> getServerCustomizers() {, +		return this.jettyServerCustomizers;, +	}, +, +	/**, +	 * Add {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started., +	 * @param customizers the customizers to add, +	 */, +	public void addServerCustomizers(JettyServerCustomizer... customizers) {, +		Assert.notNull(customizers, "Configurations must not be null");, +		this.jettyServerCustomizers.addAll(Arrays.asList(customizers));, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyServerCustomizer.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.embedded.jetty;, +, +import org.eclipse.jetty.server.Server;, +, +/**, + * Callback interface that can be used to customize a Jetty {@link Server}., + * , + * @author Dave Syer, + * @see JettyEmbeddedServletContainerFactory]