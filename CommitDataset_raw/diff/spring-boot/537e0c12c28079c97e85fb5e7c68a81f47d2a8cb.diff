[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +==== Available built-in layouts, +[[build-tool-plugins-gradle-configuration-custom-layout]], +==== Using a custom layout, +If you have custom requirements for how to arrange the dependencies and loader classes, +inside the repackaged jar, you can use a custom layout in addition to the built-in values., +Any library which defines one or more `LayoutFactory` implementations and, +lists them in `META-INF/spring.factories` can be added to the build script dependencies, +and then the layout type becomes available in the `springBoot` configuration. For example, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +buildscript {, +	ext {, +		springBootVersion = '1.5.0.BUILD-SNAPSHOT', +		customVersion = '0.0.1.BUILD-SNAPSHOT', +	}, +	repositories {, +		mavenLocal(), +		mavenCentral(), +	}, +	dependencies {, +		classpath("com.example:custom-layout:${customVersion}"), +		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"), +	}, +}, +, +springBoot {, +	layout = 'CUSTOM', +}, +----, +, +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +==== Available built-in layouts, +[[build-tool-plugins-gradle-configuration-custom-layout]], +==== Using a custom layout, +If you have custom requirements for how to arrange the dependencies and loader classes, +inside the repackaged jar, you can use a custom layout in addition to the built-in values., +Any library which defines one or more `LayoutFactory` implementations and, +lists them in `META-INF/spring.factories` can be added to the build script dependencies, +and then the layout type becomes available in the `springBoot` configuration. For example, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +buildscript {, +	ext {, +		springBootVersion = '1.5.0.BUILD-SNAPSHOT', +		customVersion = '0.0.1.BUILD-SNAPSHOT', +	}, +	repositories {, +		mavenLocal(), +		mavenCentral(), +	}, +	dependencies {, +		classpath("com.example:custom-layout:${customVersion}"), +		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"), +	}, +}, +, +springBoot {, +	layout = 'CUSTOM', +}, +----, +, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPluginExtension.java, +import groovy.lang.Closure;, +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +==== Available built-in layouts, +[[build-tool-plugins-gradle-configuration-custom-layout]], +==== Using a custom layout, +If you have custom requirements for how to arrange the dependencies and loader classes, +inside the repackaged jar, you can use a custom layout in addition to the built-in values., +Any library which defines one or more `LayoutFactory` implementations and, +lists them in `META-INF/spring.factories` can be added to the build script dependencies, +and then the layout type becomes available in the `springBoot` configuration. For example, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +buildscript {, +	ext {, +		springBootVersion = '1.5.0.BUILD-SNAPSHOT', +		customVersion = '0.0.1.BUILD-SNAPSHOT', +	}, +	repositories {, +		mavenLocal(), +		mavenCentral(), +	}, +	dependencies {, +		classpath("com.example:custom-layout:${customVersion}"), +		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"), +	}, +}, +, +springBoot {, +	layout = 'CUSTOM', +}, +----]