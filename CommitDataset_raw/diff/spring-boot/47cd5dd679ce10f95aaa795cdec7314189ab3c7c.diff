[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import org.springframework.boot.loader.tools.Layout, +import org.springframework.boot.loader.tools.Layouts, +, + * Gradle DSL Extension for 'Spring Boot'.  Most of the time Spring Boot can guess the, + * settings in this extension, but occasionally you might need to explicitly set one, + * or two of them. E.g., + * , + * <pre>, + *     apply plugin: "spring-boot", + *     springBoot {, + *         mainClass = 'org.demo.Application', + *         layout = 'ZIP', + *     }, + * </pre>, + * @author Dave Syer, +	static enum LayoutType {, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded());, +		Layout layout;, +		private LayoutType(Layout layout) {, +			this.layout = layout;, +		}, +	}, +, +	 * The name of the ivy configuration name to treat as 'provided' (when packaging , +	 * those dependencies in a separate path). If not specified 'providedRuntime' will, +, +	/**, +	 * The layout of the archive if it can't be derived from the file extension., +	 * Valid values are JAR, WAR, ZIP, DIR (for exploded zip file). ZIP and DIR, +	 * are actually synonymous, and should be used if there is no MANIFEST.MF, +	 * available, or if you want the MANIFEST.MF 'Main-Class' to be , +	 * PropertiesLauncher. Gradle will coerce literal String values to the , +	 * correct type., +	 */, +	LayoutType layout;, +, +	/**, +	 * Convenience method for use in a custom task., +	 * , +	 * @return the Layout to use or null if not explicitly set, +	 */, +	Layout convertLayout() {, +		layout==null ? null : layout.layout, +	}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import org.springframework.boot.loader.tools.Layout, +import org.springframework.boot.loader.tools.Layouts, +, + * Gradle DSL Extension for 'Spring Boot'.  Most of the time Spring Boot can guess the, + * settings in this extension, but occasionally you might need to explicitly set one, + * or two of them. E.g., + * , + * <pre>, + *     apply plugin: "spring-boot", + *     springBoot {, + *         mainClass = 'org.demo.Application', + *         layout = 'ZIP', + *     }, + * </pre>, + * @author Dave Syer, +	static enum LayoutType {, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded());, +		Layout layout;, +		private LayoutType(Layout layout) {, +			this.layout = layout;, +		}, +	}, +, +	 * The name of the ivy configuration name to treat as 'provided' (when packaging , +	 * those dependencies in a separate path). If not specified 'providedRuntime' will, +, +	/**, +	 * The layout of the archive if it can't be derived from the file extension., +	 * Valid values are JAR, WAR, ZIP, DIR (for exploded zip file). ZIP and DIR, +	 * are actually synonymous, and should be used if there is no MANIFEST.MF, +	 * available, or if you want the MANIFEST.MF 'Main-Class' to be , +	 * PropertiesLauncher. Gradle will coerce literal String values to the , +	 * correct type., +	 */, +	LayoutType layout;, +, +	/**, +	 * Convenience method for use in a custom task., +	 * , +	 * @return the Layout to use or null if not explicitly set, +	 */, +	Layout convertLayout() {, +		layout==null ? null : layout.layout, +	}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java, +					if (extension.convertLayout() != null) {, +						repackager.setLayout(extension.convertLayout());, +					}, +					} catch (IOException ex) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import org.springframework.boot.loader.tools.Layout, +import org.springframework.boot.loader.tools.Layouts, +, + * Gradle DSL Extension for 'Spring Boot'.  Most of the time Spring Boot can guess the]