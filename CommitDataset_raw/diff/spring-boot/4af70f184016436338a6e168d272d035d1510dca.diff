[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +				return new MailHealthIndicator(this.mailSenders.values().iterator(), +						.next());, +				composite.addHealthIndicator(entry.getKey(), new MailHealthIndicator(, +						entry.getValue()));, +				return new JmsHealthIndicator(this.connectionFactories.values(), +						.iterator().next());, +				composite.addHealthIndicator(entry.getKey(),, +						new JmsHealthIndicator(entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +				return new MailHealthIndicator(this.mailSenders.values().iterator(), +						.next());, +				composite.addHealthIndicator(entry.getKey(), new MailHealthIndicator(, +						entry.getValue()));, +				return new JmsHealthIndicator(this.connectionFactories.values(), +						.iterator().next());, +				composite.addHealthIndicator(entry.getKey(),, +						new JmsHealthIndicator(entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +		for (Map.Entry<String, HealthIndicator> entry : healthIndicators.entrySet()) {, +			healthIndicator.addHealthIndicator(getKey(entry.getKey()), entry.getValue());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +				return new MailHealthIndicator(this.mailSenders.values().iterator(), +						.next());, +				composite.addHealthIndicator(entry.getKey(), new MailHealthIndicator(, +						entry.getValue()));, +				return new JmsHealthIndicator(this.connectionFactories.values(), +						.iterator().next());, +				composite.addHealthIndicator(entry.getKey(),, +						new JmsHealthIndicator(entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +		for (Map.Entry<String, HealthIndicator> entry : healthIndicators.entrySet()) {, +			healthIndicator.addHealthIndicator(getKey(entry.getKey()), entry.getValue());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/JmsHealthIndicator.java, +		Connection connection = this.connectionFactory.createConnection();, +					connection.getMetaData().getJMSProviderName());, +		finally {, +			connection.close();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +				return new MailHealthIndicator(this.mailSenders.values().iterator(), +						.next());, +				composite.addHealthIndicator(entry.getKey(), new MailHealthIndicator(, +						entry.getValue()));, +				return new JmsHealthIndicator(this.connectionFactories.values(), +						.iterator().next());, +				composite.addHealthIndicator(entry.getKey(),, +						new JmsHealthIndicator(entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +		for (Map.Entry<String, HealthIndicator> entry : healthIndicators.entrySet()) {, +			healthIndicator.addHealthIndicator(getKey(entry.getKey()), entry.getValue());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/JmsHealthIndicator.java, +		Connection connection = this.connectionFactory.createConnection();, +					connection.getMetaData().getJMSProviderName());, +		finally {, +			connection.close();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MailHealthIndicator.java, +		builder.withDetail("location",, +				this.mailSender.getHost() + ":" + this.mailSender.getPort());, +		Transport transport = connectTransport();, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +, +				return new MailHealthIndicator(this.mailSenders.values().iterator(), +						.next());, +				composite.addHealthIndicator(entry.getKey(), new MailHealthIndicator(, +						entry.getValue()));, +				return new JmsHealthIndicator(this.connectionFactories.values(), +						.iterator().next());, +				composite.addHealthIndicator(entry.getKey(),, +						new JmsHealthIndicator(entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +		for (Map.Entry<String, HealthIndicator> entry : healthIndicators.entrySet()) {, +			healthIndicator.addHealthIndicator(getKey(entry.getKey()), entry.getValue());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/JmsHealthIndicator.java, +		Connection connection = this.connectionFactory.createConnection();, +					connection.getMetaData().getJMSProviderName());, +		finally {, +			connection.close();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MailHealthIndicator.java, +		builder.withDetail("location",, +				this.mailSender.getHost() + ":" + this.mailSender.getPort());, +		Transport transport = connectTransport();, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	@Configuration, +	@EnableConfigurationProperties, +	protected static class DataSourceConfig {, +, +		@Bean, +		@ConfigurationProperties(prefix = DataSourceProperties.PREFIX), +		public DataSource dataSource() {, +			return DataSourceBuilder.create(), +					.driverClassName("org.hsqldb.jdbc.JDBCDriver"), +					.url("jdbc:hsqldb:mem:test").username("sa").build();, +		}, +]