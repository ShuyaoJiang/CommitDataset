[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Collections;, +	private static final Set<String> DEFAULT_LAUNCHER_CLASSES;, +, +	static {, +		Set<String> defaultLauncherClasses = new HashSet<String>();, +		defaultLauncherClasses.add("org.springframework.boot.loader.JarLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.PropertiesLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.WarLauncher");, +		DEFAULT_LAUNCHER_CLASSES = Collections.unmodifiableSet(defaultLauncherClasses);, +	}, +, +	private final String loaderMainClass;, +	BootArchiveSupport(String loaderMainClass, String... storedPathPrefixes) {, +		this.loaderMainClass = loaderMainClass;, +				jar.isPreserveFileTimestamps(), isUsingDefaultLoader(jar),, +				this.requiresUnpack.getAsSpec(), this.exclusions.getAsExcludeSpec(),, +				this.launchScript, this.storedPathPrefixes);, +	private boolean isUsingDefaultLoader(Jar jar) {, +		return DEFAULT_LAUNCHER_CLASSES, +				.contains(jar.getManifest().getAttributes().get("Main-Class"));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Collections;, +	private static final Set<String> DEFAULT_LAUNCHER_CLASSES;, +, +	static {, +		Set<String> defaultLauncherClasses = new HashSet<String>();, +		defaultLauncherClasses.add("org.springframework.boot.loader.JarLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.PropertiesLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.WarLauncher");, +		DEFAULT_LAUNCHER_CLASSES = Collections.unmodifiableSet(defaultLauncherClasses);, +	}, +, +	private final String loaderMainClass;, +	BootArchiveSupport(String loaderMainClass, String... storedPathPrefixes) {, +		this.loaderMainClass = loaderMainClass;, +				jar.isPreserveFileTimestamps(), isUsingDefaultLoader(jar),, +				this.requiresUnpack.getAsSpec(), this.exclusions.getAsExcludeSpec(),, +				this.launchScript, this.storedPathPrefixes);, +	private boolean isUsingDefaultLoader(Jar jar) {, +		return DEFAULT_LAUNCHER_CLASSES, +				.contains(jar.getManifest().getAttributes().get("Main-Class"));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +	private BootArchiveSupport support = new BootArchiveSupport(, +			"org.springframework.boot.loader.JarLauncher", "BOOT-INF/lib");, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Collections;, +	private static final Set<String> DEFAULT_LAUNCHER_CLASSES;, +, +	static {, +		Set<String> defaultLauncherClasses = new HashSet<String>();, +		defaultLauncherClasses.add("org.springframework.boot.loader.JarLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.PropertiesLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.WarLauncher");, +		DEFAULT_LAUNCHER_CLASSES = Collections.unmodifiableSet(defaultLauncherClasses);, +	}, +, +	private final String loaderMainClass;, +	BootArchiveSupport(String loaderMainClass, String... storedPathPrefixes) {, +		this.loaderMainClass = loaderMainClass;, +				jar.isPreserveFileTimestamps(), isUsingDefaultLoader(jar),, +				this.requiresUnpack.getAsSpec(), this.exclusions.getAsExcludeSpec(),, +				this.launchScript, this.storedPathPrefixes);, +	private boolean isUsingDefaultLoader(Jar jar) {, +		return DEFAULT_LAUNCHER_CLASSES, +				.contains(jar.getManifest().getAttributes().get("Main-Class"));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +	private BootArchiveSupport support = new BootArchiveSupport(, +			"org.springframework.boot.loader.JarLauncher", "BOOT-INF/lib");, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootWar.java, +	private final BootArchiveSupport support = new BootArchiveSupport(, +			"org.springframework.boot.loader.WarLauncher", "WEB-INF/lib/",, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Collections;, +	private static final Set<String> DEFAULT_LAUNCHER_CLASSES;, +, +	static {, +		Set<String> defaultLauncherClasses = new HashSet<String>();, +		defaultLauncherClasses.add("org.springframework.boot.loader.JarLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.PropertiesLauncher");, +		defaultLauncherClasses.add("org.springframework.boot.loader.WarLauncher");, +		DEFAULT_LAUNCHER_CLASSES = Collections.unmodifiableSet(defaultLauncherClasses);, +	}, +, +	private final String loaderMainClass;, +	BootArchiveSupport(String loaderMainClass, String... storedPathPrefixes) {, +		this.loaderMainClass = loaderMainClass;, +				jar.isPreserveFileTimestamps(), isUsingDefaultLoader(jar),, +				this.requiresUnpack.getAsSpec(), this.exclusions.getAsExcludeSpec(),, +				this.launchScript, this.storedPathPrefixes);, +	private boolean isUsingDefaultLoader(Jar jar) {, +		return DEFAULT_LAUNCHER_CLASSES, +				.contains(jar.getManifest().getAttributes().get("Main-Class"));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +	private BootArchiveSupport support = new BootArchiveSupport(, +			"org.springframework.boot.loader.JarLauncher", "BOOT-INF/lib");, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootWar.java, +	private final BootArchiveSupport support = new BootArchiveSupport(, +			"org.springframework.boot.loader.WarLauncher", "WEB-INF/lib/",, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootZipCopyAction.java]