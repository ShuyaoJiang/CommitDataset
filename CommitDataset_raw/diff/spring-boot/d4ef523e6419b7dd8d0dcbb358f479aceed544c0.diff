[+++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +		int width = environment.getProperty("banner.image.width", Integer.class, 76);, +		int height = environment.getProperty("banner.image.height", Integer.class, 0);, +		int margin = environment.getProperty("banner.image.margin", Integer.class, 2);, +		boolean invert = environment.getProperty("banner.image.invert", Boolean.class,, +				false);, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +		int width = environment.getProperty("banner.image.width", Integer.class, 76);, +		int height = environment.getProperty("banner.image.height", Integer.class, 0);, +		int margin = environment.getProperty("banner.image.margin", Integer.class, 2);, +		boolean invert = environment.getProperty("banner.image.invert", Boolean.class,, +				false);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +			Boolean ignore = environment.getProperty("spring.beaninfo.ignore",, +					Boolean.class, Boolean.TRUE);, +			Binder.get(environment).bind("spring.main", Bindable.ofInstance(this));, +		catch (Exception ex) {, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +		int width = environment.getProperty("banner.image.width", Integer.class, 76);, +		int height = environment.getProperty("banner.image.height", Integer.class, 0);, +		int margin = environment.getProperty("banner.image.margin", Integer.class, 2);, +		boolean invert = environment.getProperty("banner.image.invert", Boolean.class,, +				false);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +			Boolean ignore = environment.getProperty("spring.beaninfo.ignore",, +					Boolean.class, Boolean.TRUE);, +			Binder.get(environment).bind("spring.main", Bindable.ofInstance(this));, +		catch (Exception ex) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/FileEncodingApplicationListener.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.core.env.ConfigurableEnvironment;, + * @author Madhura Bhave, +		ConfigurableEnvironment environment = event.getEnvironment();, +		if (!environment.containsProperty("spring.mandatory-file-encoding")) {, +			return;, +		}, +		String desired = environment.getProperty("spring.mandatory-file-encoding");, +							+ "desired default character encoding (" + desired + ").");, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +		int width = environment.getProperty("banner.image.width", Integer.class, 76);, +		int height = environment.getProperty("banner.image.height", Integer.class, 0);, +		int margin = environment.getProperty("banner.image.margin", Integer.class, 2);, +		boolean invert = environment.getProperty("banner.image.invert", Boolean.class,, +				false);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +			Boolean ignore = environment.getProperty("spring.beaninfo.ignore",, +					Boolean.class, Boolean.TRUE);, +			Binder.get(environment).bind("spring.main", Bindable.ofInstance(this));, +		catch (Exception ex) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/FileEncodingApplicationListener.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.core.env.ConfigurableEnvironment;, + * @author Madhura Bhave, +		ConfigurableEnvironment environment = event.getEnvironment();, +		if (!environment.containsProperty("spring.mandatory-file-encoding")) {, +			return;, +		}, +		String desired = environment.getProperty("spring.mandatory-file-encoding");, +							+ "desired default character encoding (" + desired + ").");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.core.env.ConfigurableEnvironment;, + * @author Madhura Bhave, +		ConfigurableEnvironment environment = event.getEnvironment();, +		Binder.get(environment), +				.bind("spring.output.ansi.enabled", AnsiOutput.Enabled.class), +				.ifBound(AnsiOutput::setEnabled);, +		AnsiOutput.setConsoleAvailable(environment, +				.getProperty("spring.output.ansi.console-available", Boolean.class));, +		// Apply after ConfigFileApplicationListener has called EnvironmentPostProcessors, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +		int width = environment.getProperty("banner.image.width", Integer.class, 76);, +		int height = environment.getProperty("banner.image.height", Integer.class, 0);, +		int margin = environment.getProperty("banner.image.margin", Integer.class, 2);, +		boolean invert = environment.getProperty("banner.image.invert", Boolean.class,, +				false);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +			Boolean ignore = environment.getProperty("spring.beaninfo.ignore",, +					Boolean.class, Boolean.TRUE);, +			Binder.get(environment).bind("spring.main", Bindable.ofInstance(this));, +		catch (Exception ex) {]