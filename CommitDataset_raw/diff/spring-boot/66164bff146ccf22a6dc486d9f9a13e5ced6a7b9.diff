[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +	 * A reactive web operation that can be handled by WebFlux., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +	 * A reactive web operation that can be handled by WebFlux., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/AbstractWebMvcEndpointHandlerMapping.java, +	 * A servlet web operation that can be handled by Spring MVC., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +	 * A reactive web operation that can be handled by WebFlux., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/AbstractWebMvcEndpointHandlerMapping.java, +	 * A servlet web operation that can be handled by Spring MVC., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java, +		this.contextRunner.run(withWebTestClient(, +				(webTestClient) -> webTestClient.get().uri("/actuator/example/one"), +						.accept(MediaType.TEXT_PLAIN).exchange().expectStatus().isOk(), +						.expectHeader().contentTypeCompatibleWith(MediaType.TEXT_PLAIN), +						.expectBody(String.class).isEqualTo("One")));, +		this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get(), +				.uri("/actuator/example/one").accept(MediaType.APPLICATION_JSON), +				.exchange().expectStatus().isEqualTo(HttpStatus.NOT_ACCEPTABLE)));, +		this.contextRunner.run(withWebTestClient(, +				(webTestClient) -> webTestClient.post().uri("/actuator/example/two"), +						.valueEquals(HttpHeaders.LOCATION, "/example/test")));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/PathMappedEndpoint.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/ControllerEndpointsSupplier.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +	 * A reactive web operation that can be handled by WebFlux., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/AbstractWebMvcEndpointHandlerMapping.java, +	 * A servlet web operation that can be handled by Spring MVC., +	@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java, +		this.contextRunner.run(withWebTestClient(, +				(webTestClient) -> webTestClient.get().uri("/actuator/example/one"), +						.accept(MediaType.TEXT_PLAIN).exchange().expectStatus().isOk(), +						.expectHeader().contentTypeCompatibleWith(MediaType.TEXT_PLAIN), +						.expectBody(String.class).isEqualTo("One")));, +		this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get(), +				.uri("/actuator/example/one").accept(MediaType.APPLICATION_JSON), +				.exchange().expectStatus().isEqualTo(HttpStatus.NOT_ACCEPTABLE)));, +		this.contextRunner.run(withWebTestClient(, +				(webTestClient) -> webTestClient.post().uri("/actuator/example/two"), +						.valueEquals(HttpHeaders.LOCATION, "/example/test")));, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java, +		this.contextRunner.run(withWebTestClient(, +				(webTestClient) -> webTestClient.get().uri("/actuator/example/one")]