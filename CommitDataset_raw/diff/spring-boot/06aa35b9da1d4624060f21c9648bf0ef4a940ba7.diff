[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +It is also possible to customize the `Environment` before the application context is, +refreshed using `EnvironmentPostProcessor`. Each implementation should be registered in, +`META-INF/spring.factories`:, +, +[source,properties,indent=0], +----, +	org.springframework.boot.env.EnvironmentPostProcessor=com.example.YourEnvironmentPostProcessor, +----, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +It is also possible to customize the `Environment` before the application context is, +refreshed using `EnvironmentPostProcessor`. Each implementation should be registered in, +`META-INF/spring.factories`:, +, +[source,properties,indent=0], +----, +	org.springframework.boot.env.EnvironmentPostProcessor=com.example.YourEnvironmentPostProcessor, +----, +, +++ b/spring-boot/src/main/java/org/springframework/boot/env/EnvironmentPostProcessor.java, + * Copyright 2012-2016 the original author or authors., + * <p>EnvironmentPostProcessor implementations have to be registered in, + * {@code META-INF/spring.factories}, using the fully qualified name of this, + * class as the key., + *, + * <p>{@code EnvironmentPostProcessor} processors are encouraged to detect, + * whether Spring's {@link org.springframework.core.Ordered Ordered} interface has been, + * implemented or if the @{@link org.springframework.core.annotation.Order Order}, + * annotation is present and to sort instances accordingly if so prior to invocation., + *, + * @author Stephane Nicoll]