[+++ b/docs/howto.md, +* A `BeanNameViewResolver` with id "beanNameViewResolver" is added if, +there are beans of type `View`. This is a useful member of the view, +resolver chain and will pick up any beans with the same name as the, +`View` being resolved. It can be overridden by providing a bean of the, +same type, but it's unlikely you will need to do that., +* A `ContentNegotiatingViewResolver` with id, +"contentNegotiatingViewResolver" is only added if there are already, +beans of type `ViewResolver` present. This is a "master" resolver,, +delegating to all the others and attempting to find a match to the, +"Accept" HTTP header sent by the client, so it is added with highest, +precedence (it is always consulted bythe `DispatcherServlet`). There, +is a useful, +    Bear in mind that any custom `ViewResolvers` that you add to your, +own application will be consulted by the, +`ContentNegotiatingViewResolver`, so make sure they yield `View`, +instances that give accurate responses in their `getContentType()`, +method., +, +    Also be careful not to define your own `ViewResolver` with id, +"contentNegotiatingViewResolver" (like the, +`ContentNegotiatingViewResolver`) otherwise, in that case, your bean, +will be ovewritten, not the other way round., +++ b/docs/howto.md, +* A `BeanNameViewResolver` with id "beanNameViewResolver" is added if, +there are beans of type `View`. This is a useful member of the view, +resolver chain and will pick up any beans with the same name as the, +`View` being resolved. It can be overridden by providing a bean of the, +same type, but it's unlikely you will need to do that., +* A `ContentNegotiatingViewResolver` with id, +"contentNegotiatingViewResolver" is only added if there are already, +beans of type `ViewResolver` present. This is a "master" resolver,, +delegating to all the others and attempting to find a match to the, +"Accept" HTTP header sent by the client, so it is added with highest, +precedence (it is always consulted bythe `DispatcherServlet`). There, +is a useful, +    Bear in mind that any custom `ViewResolvers` that you add to your, +own application will be consulted by the, +`ContentNegotiatingViewResolver`, so make sure they yield `View`, +instances that give accurate responses in their `getContentType()`, +method., +, +    Also be careful not to define your own `ViewResolver` with id, +"contentNegotiatingViewResolver" (like the, +`ContentNegotiatingViewResolver`) otherwise, in that case, your bean, +will be ovewritten, not the other way round., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.ViewResolver;, +		@ConditionalOnBean(ViewResolver.class), +		public ContentNegotiatingViewResolver contentNegotiatingViewResolver(, +				BeanFactory beanFactory) {]