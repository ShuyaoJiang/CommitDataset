[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		return new Health.Builder(aggregateStatus(statusCandidates), details).build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		return new Health.Builder(aggregateStatus(statusCandidates), details).build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, +import org.springframework.boot.actuate.health.Health.Builder;, +, + * {@link #doHealthCheck(org.springframework.boot.actuate.health.Health.Builder)} should, + * create a {@link Status#DOWN} health status., +		Health.Builder builder = new Health.Builder();, +			doHealthCheck(builder);, +			builder.down(ex);, +		return builder.build();, +	 * @param builder the {@link Builder} to report health status and details, +	protected abstract void doHealthCheck(Health.Builder builder) throws Exception;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		return new Health.Builder(aggregateStatus(statusCandidates), details).build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, +import org.springframework.boot.actuate.health.Health.Builder;, +, + * {@link #doHealthCheck(org.springframework.boot.actuate.health.Health.Builder)} should, + * create a {@link Status#DOWN} health status., +		Health.Builder builder = new Health.Builder();, +			doHealthCheck(builder);, +			builder.down(ex);, +		return builder.build();, +	 * @param builder the {@link Builder} to report health status and details, +	protected abstract void doHealthCheck(Health.Builder builder) throws Exception;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +	protected void doHealthCheck(Health.Builder builder) throws Exception {, +			builder.up().withDetail("database", "unknown");, +		else {, +			doDataSourceHealthCheck(builder);, +		}, +	private void doDataSourceHealthCheck(Health.Builder builder) throws Exception {, +		builder.up().withDetail("database", product);, +				builder.withDetail("hello",, +				builder.down(ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		return new Health.Builder(aggregateStatus(statusCandidates), details).build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java, +import org.springframework.boot.actuate.health.Health.Builder;, +, + * {@link #doHealthCheck(org.springframework.boot.actuate.health.Health.Builder)} should, + * create a {@link Status#DOWN} health status., +		Health.Builder builder = new Health.Builder();, +			doHealthCheck(builder);, +			builder.down(ex);, +		return builder.build();, +	 * @param builder the {@link Builder} to report health status and details, +	protected abstract void doHealthCheck(Health.Builder builder) throws Exception;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +	protected void doHealthCheck(Health.Builder builder) throws Exception {, +			builder.up().withDetail("database", "unknown");, +		else {, +			doDataSourceHealthCheck(builder);, +		}, +	private void doDataSourceHealthCheck(Health.Builder builder) throws Exception {, +		builder.up().withDetail("database", product);, +				builder.withDetail("hello",, +				builder.down(ex);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * {@link Health} instances can be created by using {@link Builder}'s fluent API. Typical, + * usage in a {@link HealthIndicator} would be:, + * 	return new Health.Builder().up().withDetail(&quot;version&quot;, &quot;1.1.2&quot;).build();, + * 	return new Health.Builder().down(ex).build();, +	 * @param builder the Builder to use, +	private Health(Builder builder) {, +		Assert.notNull(builder, "Builder must not be null");, +		this.status = builder.status;, +		this.details = Collections.unmodifiableMap(builder.details);, +	 * Create a new {@link Builder} instance with an {@link Status#UNKNOWN} status., +	 * @return a new {@link Builder} instance, +	public static Builder unknown() {, +		return status(Status.UNKNOWN);, +	}, +, +	/**, +	 * Create a new {@link Builder} instance with an {@link Status#UP} status., +	 * @return a new {@link Builder} instance, +	 */, +	public static Builder up() {, +		return status(Status.UP);, +	}, +, +	/**, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status an the, +	 * specified exception details., +	 * @param ex the exception, +	 * @return a new {@link Builder} instance, +	 */, +	public static Builder down(Exception ex) {, +		return down().withException(ex);, +	}, +, +	/**, +	 * Create a new {@link Builder} instance with a {@link Status#DOWN} status., +	 * @return a new {@link Builder} instance, +	 */, +	public static Builder down() {]