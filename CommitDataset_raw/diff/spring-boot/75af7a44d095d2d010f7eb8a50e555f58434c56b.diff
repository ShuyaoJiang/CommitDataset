[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private boolean registerShutdownHook = true;, +, +			if (this.registerShutdownHook) {, +			}, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered. Defaults to {@code true} to ensure that JVM shutdowns are handled, +	 * gracefully., +	 */, +	public void setRegisterShutdownHook(boolean registerShutdownHook) {, +		this.registerShutdownHook = registerShutdownHook;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private boolean registerShutdownHook = true;, +, +			if (this.registerShutdownHook) {, +			}, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered. Defaults to {@code true} to ensure that JVM shutdowns are handled, +	 * gracefully., +	 */, +	public void setRegisterShutdownHook(boolean registerShutdownHook) {, +		this.registerShutdownHook = registerShutdownHook;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +	private boolean registerShutdownHookApplied;, +, +			// If there is a parent don't register a shutdown hook, +			if (!this.registerShutdownHookApplied) {, +				this.application.setRegisterShutdownHook(false);, +			}, +			// initialize it and make sure it is added to the current context, +, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered., +	 */, +	public SpringApplicationBuilder registerShutdownHook(boolean registerShutdownHook) {, +		this.registerShutdownHookApplied = true;, +		this.application.setRegisterShutdownHook(registerShutdownHook);, +		return this;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private boolean registerShutdownHook = true;, +, +			if (this.registerShutdownHook) {, +			}, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered. Defaults to {@code true} to ensure that JVM shutdowns are handled, +	 * gracefully., +	 */, +	public void setRegisterShutdownHook(boolean registerShutdownHook) {, +		this.registerShutdownHook = registerShutdownHook;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +	private boolean registerShutdownHookApplied;, +, +			// If there is a parent don't register a shutdown hook, +			if (!this.registerShutdownHookApplied) {, +				this.application.setRegisterShutdownHook(false);, +			}, +			// initialize it and make sure it is added to the current context, +, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered., +	 */, +	public SpringApplicationBuilder registerShutdownHook(boolean registerShutdownHook) {, +		this.registerShutdownHookApplied = true;, +		this.application.setRegisterShutdownHook(registerShutdownHook);, +		return this;, +	}, +, +	/**, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void registerShutdownHookOff() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setApplicationContextClass(SpyApplicationContext.class);, +		application.setRegisterShutdownHook(false);, +		this.context = application.run();, +		SpyApplicationContext applicationContext = (SpyApplicationContext) this.context;, +		verify(applicationContext.getApplicationContext(), never()), +				.registerShutdownHook();, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	private boolean registerShutdownHook = true;, +, +			if (this.registerShutdownHook) {, +			}, +	 * Sets if the created {@link ApplicationContext} should have a shutdown hook, +	 * registered. Defaults to {@code true} to ensure that JVM shutdowns are handled, +	 * gracefully.]