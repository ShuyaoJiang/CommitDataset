[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.core.convert.converter.GenericConverter;, +	private List<GenericConverter> genericConverters = Collections.emptyList();, +, +	 * A list of custom converters (in addition to the defaults) to use when converting, +	 * properties for binding., +	 * @param converters the converters to set, +	 */, +	@Autowired(required = false), +	@ConfigurationPropertiesBinding, +	public void setGenericConverters(List<GenericConverter> converters) {, +		this.genericConverters = converters;, +	}, +, +	/**, +			for (GenericConverter genericConverter : this.genericConverters) {, +				conversionService.addConverter(genericConverter);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.core.convert.converter.GenericConverter;, +	private List<GenericConverter> genericConverters = Collections.emptyList();, +, +	 * A list of custom converters (in addition to the defaults) to use when converting, +	 * properties for binding., +	 * @param converters the converters to set, +	 */, +	@Autowired(required = false), +	@ConfigurationPropertiesBinding, +	public void setGenericConverters(List<GenericConverter> converters) {, +		this.genericConverters = converters;, +	}, +, +	/**, +			for (GenericConverter genericConverter : this.genericConverters) {, +				conversionService.addConverter(genericConverter);, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/ConverterBindingTests.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.GenericConverter;, + * @author Stephane Nicoll, +@IntegrationTest({"foo=one", "bar=two"}), +	@Value("${bar:}"), +	private String bar;, +, +		assertThat(this.properties.getFoo().name, is(this.foo));, +		assertThat(this.properties.getBar().name, is(this.bar));, +					return new Foo(source);, +				}, +			};, +		}, +, +		@Bean, +		public GenericConverter genericConverter() {, +			return new GenericConverter() {, +				@Override, +				public Set<ConvertiblePair> getConvertibleTypes() {, +					return Collections.singleton(new ConvertiblePair(String.class, Bar.class));, +				}, +, +				@Override, +				public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +					return new Bar((String) source);, +		private final String name;, +		public Foo(String name) {, +	}, +	public static class Bar {, +, +		private final String name;, +, +		public Bar(String name) {, +			this.name = name;, +		}, +		private Bar bar;, +, +		public Bar getBar() {, +			return this.bar;, +		}, +, +		public void setBar(Bar bar) {, +			this.bar = bar;, +		}]