[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		this.logger.switchTo(ConfigFileApplicationListener.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		this.logger.switchTo(ConfigFileApplicationListener.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java, + * Copyright 2012-2018 the original author or authors., +	private volatile Log destination;, +, +	private final List<Line> lines = new ArrayList<>();, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isTraceEnabled() : true;, +		}, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isDebugEnabled() : true;, +		}, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isInfoEnabled() : true;, +		}, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isWarnEnabled() : true;, +		}, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isErrorEnabled() : true;, +		}, +		synchronized (this.lines) {, +			return (this.destination != null) ? this.destination.isFatalEnabled() : true;, +		}, +		synchronized (this.lines) {, +			if (this.destination != null) {, +				logTo(this.destination, level, message, t);, +			}, +	}, +	/**, +	 * Switch from deferred logging to immediate logging to the specified destination., +	 * @param destination the new log destination, +	 */, +	public void switchTo(Class<?> destination) {, +		switchTo(LogFactory.getLog(destination));, +	}, +, +	/**, +	 * Switch from deferred logging to immediate logging to the specified destination., +	 * @param destination the new log destination, +	 */, +	public void switchTo(Log destination) {, +		synchronized (this.lines) {, +			replayTo(destination);, +			this.destination = destination;, +		}, +	}, +, +	/**, +	 * Replay deferred logging to the specified destination., +	 * @param destination the destination for the deferred log messages, +	 */, +	/**, +	 * Replay deferred logging to the specified destination., +	 * @param destination the destination for the deferred log messages, +	 */, +		synchronized (this.lines) {, +				logTo(destination, line.getLevel(), line.getMessage(),, +						line.getThrowable());, +	}, +	/**, +	 * Replay from a source log to a destination log when the source is deferred., +	 * @param source the source logger, +	 * @param destination the destination logger class, +	 * @return the destination, +	 * @deprecated since 2.1.0 in favor of {@link #switchTo(Class)}, +	 */, +	@Deprecated, +	/**, +	 * Replay from a source log to a destination log when the source is deferred., +	 * @param source the source logger, +	 * @param destination the destination logger, +	 * @return the destination, +	 * @deprecated since 2.1.0 in favor of {@link #switchTo(Log)}, +	 */, +	@Deprecated, +	private static void logTo(Log log, LogLevel level, Object message,, +			Throwable throwable) {, +		switch (level) {, +		case TRACE:, +			log.trace(message, throwable);, +			return;, +		case DEBUG:, +			log.debug(message, throwable);, +			return;, +		case INFO:, +			log.info(message, throwable);, +			return;, +		case WARN:, +			log.warn(message, throwable);, +			return;, +		case ERROR:, +			log.error(message, throwable);, +			return;, +		case FATAL:, +			log.fatal(message, throwable);, +			return;]