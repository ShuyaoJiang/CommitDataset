[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +		return deserialize(redisKey, raw, this.zSetOperations.score(redisKey));, +			String key = keysIt.next();, +			Metric<?> value = deserialize(key, v, this.zSetOperations.score(key));, +		double value = this.zSetOperations.incrementScore(key, delta.getValue(), +				.doubleValue());, +		String raw = serialize(new Metric<Double>(name, value, delta.getTimestamp()));, +		this.redisOperations.opsForValue().set(key, raw);, +		this.zSetOperations.add(key, value.getValue().doubleValue());, +		String raw = serialize(value);, +	private Metric<?> deserialize(String redisKey, String v, Double value) {, +		Date timestamp = new Date(Long.valueOf(v));, +		return String.valueOf(entity.getTimestamp().getTime());, +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +		return deserialize(redisKey, raw, this.zSetOperations.score(redisKey));, +			String key = keysIt.next();, +			Metric<?> value = deserialize(key, v, this.zSetOperations.score(key));, +		double value = this.zSetOperations.incrementScore(key, delta.getValue(), +				.doubleValue());, +		String raw = serialize(new Metric<Double>(name, value, delta.getTimestamp()));, +		this.redisOperations.opsForValue().set(key, raw);, +		this.zSetOperations.add(key, value.getValue().doubleValue());, +		String raw = serialize(value);, +	private Metric<?> deserialize(String redisKey, String v, Double value) {, +		Date timestamp = new Date(Long.valueOf(v));, +		return String.valueOf(entity.getTimestamp().getTime());, +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepository.java, + * stored as zset values and the timestamps as regular values, both against a key composed, + * of the group name prefixed with a constant prefix (default "spring.groups."). The group, + * names are stored as a zset under "keys." + <code>[prefix]</code>., +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +		return deserialize(redisKey, raw, this.zSetOperations.score(redisKey));, +			String key = keysIt.next();, +			Metric<?> value = deserialize(key, v, this.zSetOperations.score(key));, +		double value = this.zSetOperations.incrementScore(key, delta.getValue(), +				.doubleValue());, +		String raw = serialize(new Metric<Double>(name, value, delta.getTimestamp()));, +		this.redisOperations.opsForValue().set(key, raw);, +		this.zSetOperations.add(key, value.getValue().doubleValue());, +		String raw = serialize(value);, +	private Metric<?> deserialize(String redisKey, String v, Double value) {, +		Date timestamp = new Date(Long.valueOf(v));, +		return String.valueOf(entity.getTimestamp().getTime());, +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepository.java, + * stored as zset values and the timestamps as regular values, both against a key composed, + * of the group name prefixed with a constant prefix (default "spring.groups."). The group, + * names are stored as a zset under "keys." + <code>[prefix]</code>., +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepositoryTests.java, +	public void setIncrementAndGet() {, +		this.repository.set(new Metric<Number>("foo", 12.3));, +		this.repository.increment(new Delta<Long>("foo", 3L));, +		Metric<?> metric = this.repository.findOne("foo");, +		assertEquals("foo", metric.getName());, +		assertEquals(15.3, metric.getValue().doubleValue(), 0.01);, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +		return deserialize(redisKey, raw, this.zSetOperations.score(redisKey));, +			String key = keysIt.next();, +			Metric<?> value = deserialize(key, v, this.zSetOperations.score(key));, +		double value = this.zSetOperations.incrementScore(key, delta.getValue(), +				.doubleValue());, +		String raw = serialize(new Metric<Double>(name, value, delta.getTimestamp()));, +		this.redisOperations.opsForValue().set(key, raw);, +		this.zSetOperations.add(key, value.getValue().doubleValue());, +		String raw = serialize(value);, +	private Metric<?> deserialize(String redisKey, String v, Double value) {, +		Date timestamp = new Date(Long.valueOf(v));, +		return String.valueOf(entity.getTimestamp().getTime());, +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepository.java, + * stored as zset values and the timestamps as regular values, both against a key composed, + * of the group name prefixed with a constant prefix (default "spring.groups."). The group, + * names are stored as a zset under "keys." + <code>[prefix]</code>., +		this.zSetOperations.incrementScore(redisKey, 0.0D);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepositoryTests.java, +	public void setIncrementAndGet() {, +		this.repository.set(new Metric<Number>("foo", 12.3));, +		this.repository.increment(new Delta<Long>("foo", 3L));, +		Metric<?> metric = this.repository.findOne("foo");, +		assertEquals("foo", metric.getName());, +		assertEquals(15.3, metric.getValue().doubleValue(), 0.01);, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepositoryTests.java, +		this.repository.set("foo",, +				Arrays.<Metric<?>> asList(new Metric<Number>("foo.bar", 12.3)));, +		this.repository.set("foo",, +				Arrays.<Metric<?>> asList(new Metric<Number>("foo.bar", 15.3)));, +		assertEquals(15.3, Iterables.collection(this.repository.findAll("foo")), +				.iterator().next().getValue());, +	}, +]