[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				ignored.addAll(Arrays, +						.asList(getEndpointPaths(this.endpointHandlerMapping)));, +				String[] endpointPaths = this.server.getPathsArray(getEndpointPaths(, +						this.endpointHandlerMapping, false));, +				http.authorizeRequests().antMatchers(endpointPaths).access("permitAll()"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				ignored.addAll(Arrays, +						.asList(getEndpointPaths(this.endpointHandlerMapping)));, +				String[] endpointPaths = this.server.getPathsArray(getEndpointPaths(, +						this.endpointHandlerMapping, false));, +				http.authorizeRequests().antMatchers(endpointPaths).access("permitAll()"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +	private long timeToLive = 1000;, +	public long getTimeToLive() {, +		return this.timeToLive;, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				ignored.addAll(Arrays, +						.asList(getEndpointPaths(this.endpointHandlerMapping)));, +				String[] endpointPaths = this.server.getPathsArray(getEndpointPaths(, +						this.endpointHandlerMapping, false));, +				http.authorizeRequests().antMatchers(endpointPaths).access("permitAll()"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +	private long timeToLive = 1000;, +	public long getTimeToLive() {, +		return this.timeToLive;, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +	private final Map<String, MvcEndpoint> endpoints;, +		this.endpoints = buildEndpointsMap(endpoints);, +	private Map<String, MvcEndpoint> buildEndpointsMap(, +			Collection<? extends MvcEndpoint> endpoints) {, +		Map<String, MvcEndpoint> map = new LinkedHashMap<String, MvcEndpoint>();, +		for (MvcEndpoint endpoint : endpoints) {, +			map.put(endpoint.getPath(), endpoint);, +		}, +		return Collections.unmodifiableMap(map);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				ignored.addAll(Arrays, +						.asList(getEndpointPaths(this.endpointHandlerMapping)));, +				String[] endpointPaths = this.server.getPathsArray(getEndpointPaths(, +						this.endpointHandlerMapping, false));, +				http.authorizeRequests().antMatchers(endpointPaths).access("permitAll()"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, +	private long timeToLive = 1000;, +	public long getTimeToLive() {, +		return this.timeToLive;, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +	private final Map<String, MvcEndpoint> endpoints;, +		this.endpoints = buildEndpointsMap(endpoints);, +	private Map<String, MvcEndpoint> buildEndpointsMap(, +			Collection<? extends MvcEndpoint> endpoints) {, +		Map<String, MvcEndpoint> map = new LinkedHashMap<String, MvcEndpoint>();, +		for (MvcEndpoint endpoint : endpoints) {, +			map.put(endpoint.getPath(), endpoint);, +		}, +		return Collections.unmodifiableMap(map);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +		if (!this.delegate.isEnabled()) {, +		Health health = (useCachedValue(principal) ? this.cached : (Health) this.delegate, +				.invoke());, +		this.cached = health;, +		if (this.cached == null || secure(principal), +				|| (currentAccess - this.lastAccess) > this.delegate.getTimeToLive()) {, +			this.lastAccess = currentAccess;, +		return this.cached != null;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationProperties.java, + *, + * @since 1.2.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				ignored.addAll(Arrays, +						.asList(getEndpointPaths(this.endpointHandlerMapping)));]