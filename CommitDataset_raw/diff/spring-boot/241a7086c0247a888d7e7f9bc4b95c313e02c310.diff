[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import java.util.NoSuchElementException;, +import java.util.Objects;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.function.Predicate;, +import java.util.function.Supplier;, +, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * Utility that can be used to map values from a supplied source to a destination., + * Primarily intended to be help when mapping from, + * {@link ConfigurationProperties @ConfigrationProperties} to third-party classes., + * <p>, + * Can filter values based on predicates and adapt values if needed. For example:, + * <pre class="code">, + * PropertyMapper map = PropertyMapper.get();, + * map.from(source::getName), + *   .to(destination::setName);, + * map.from(source::getTimeout), + *   .whenNonNull(), + *   .asInt(Duration::getSeconds), + *   .to(destination::setTimeoutSecs);, + * map.from(source::isEnabled), + *   .whenFalse()., + *   .toCall(destination::disable);, + * </pre>, + * <p>, + * Mappings can ultimately be applied to a {@link Source#to(Consumer) setter}, trigger a, + * {@link Source#toCall(Runnable) method call} or create a, + * {@link Source#toInstance(Function) new instance}., + *, + * @author Phillip Webb, + * @since 2.0.0, + */, +public final class PropertyMapper {, +, +	private static final Predicate<?> ALWAYS = (t) -> true;, +, +	private static final PropertyMapper INSTANCE = new PropertyMapper(null, null);, +, +	private final PropertyMapper parent;, +, +	private final SourceOperator sourceOperator;, +, +	private PropertyMapper(PropertyMapper parent, SourceOperator sourceOperator) {, +		this.parent = parent;, +		this.sourceOperator = sourceOperator;, +	}, +, +	/**, +	 * Return a new {@link PropertyMapper} instance that applies, +	 * {@link Source#whenNonNull() whenNonNull} to every source., +	 * @return a new property mapper instance, +	 */, +	public PropertyMapper alwaysApplyingWhenNonNull() {, +		return alwaysApplying(this::whenNonNull);, +	}, +, +	private <T> Source<T> whenNonNull(Source<T> source) {, +		return source.whenNonNull();, +	}, +, +	/**, +	 * Return a new {@link PropertyMapper} instance that applies the given, +	 * {@link SourceOperator} to every source., +	 * @param operator the source operator to apply, +	 * @return a new property mapper instance, +	 */, +	public PropertyMapper alwaysApplying(SourceOperator operator) {, +		Assert.notNull(operator, "Operator must not be null");, +		return new PropertyMapper(this, operator);, +	}, +, +	/**, +	 * Return a new {@link Source} from the specified value supplier that can be used to, +	 * perform the mapping., +	 * @param <T> the source type, +	 * @param supplier the value supplier, +	 * @return a {@link Source} that can be used to complete the mapping]