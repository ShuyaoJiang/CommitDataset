[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +		cacheManager.setUsePrefix(true);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +		cacheManager.setUsePrefix(true);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +		assertThat((Boolean) new DirectFieldAccessor(cacheManager), +				.getPropertyValue("usePrefix")).isTrue();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +		cacheManager.setUsePrefix(true);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +		assertThat((Boolean) new DirectFieldAccessor(cacheManager), +				.getPropertyValue("usePrefix")).isTrue();, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[NOTE], +====, +By default, a key prefix is added to prevent that if two separate caches use the same, +key, Redis would have overlapping keys and be likely to return invalid values. We strongly, +recommend to keep this setting enabled if you create your own `RedisCacheManager`., +====]