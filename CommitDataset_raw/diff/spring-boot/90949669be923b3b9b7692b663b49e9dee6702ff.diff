[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.Callable;, +import org.springframework.util.ReflectionUtils;, +, + * @author Phillip Webb, +	protected final Map<String, Object> parseMap(String json,, +		return trimParse(json, "{", parser);, +	protected final List<Object> parseList(String json,, +			Function<String, List<Object>> parser) {, +		return trimParse(json, "[", parser);, +	protected final <T> T trimParse(String json, String prefix,, +			Function<String, T> parser) {, +		String trimmed = (json == null ? "" : json.trim());, +		if (trimmed.startsWith(prefix)) {, +			return parser.apply(trimmed);, +		}, +		throw new JsonParseException();, +	protected final <T> T tryParse(Callable<T> parser, Class<? extends Exception> check) {, +		try {, +			return parser.call();, +		catch (Exception ex) {, +			if (check.isAssignableFrom(ex.getClass())) {, +				throw new JsonParseException(ex);, +			ReflectionUtils.rethrowRuntimeException(ex);, +			throw new IllegalStateException(ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.Callable;, +import org.springframework.util.ReflectionUtils;, +, + * @author Phillip Webb, +	protected final Map<String, Object> parseMap(String json,, +		return trimParse(json, "{", parser);, +	protected final List<Object> parseList(String json,, +			Function<String, List<Object>> parser) {, +		return trimParse(json, "[", parser);, +	protected final <T> T trimParse(String json, String prefix,, +			Function<String, T> parser) {, +		String trimmed = (json == null ? "" : json.trim());, +		if (trimmed.startsWith(prefix)) {, +			return parser.apply(trimmed);, +		}, +		throw new JsonParseException();, +	protected final <T> T tryParse(Callable<T> parser, Class<? extends Exception> check) {, +		try {, +			return parser.call();, +		catch (Exception ex) {, +			if (check.isAssignableFrom(ex.getClass())) {, +				throw new JsonParseException(ex);, +			ReflectionUtils.rethrowRuntimeException(ex);, +			throw new IllegalStateException(ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.Callable;, +import org.springframework.util.ReflectionUtils;, +, + * @author Phillip Webb, +	protected final Map<String, Object> parseMap(String json,, +		return trimParse(json, "{", parser);, +	protected final List<Object> parseList(String json,, +			Function<String, List<Object>> parser) {, +		return trimParse(json, "[", parser);, +	protected final <T> T trimParse(String json, String prefix,, +			Function<String, T> parser) {, +		String trimmed = (json == null ? "" : json.trim());, +		if (trimmed.startsWith(prefix)) {, +			return parser.apply(trimmed);, +		}, +		throw new JsonParseException();, +	protected final <T> T tryParse(Callable<T> parser, Class<? extends Exception> check) {, +		try {, +			return parser.call();, +		catch (Exception ex) {, +			if (check.isAssignableFrom(ex.getClass())) {, +				throw new JsonParseException(ex);, +			ReflectionUtils.rethrowRuntimeException(ex);, +			throw new IllegalStateException(ex);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/GsonJsonParser.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JacksonJsonParser.java, + * Copyright 2012-2018 the original author or authors., +public class JacksonJsonParser extends AbstractJsonParser {, +		return tryParse(() -> getObjectMapper().readValue(json, MAP_TYPE),, +				Exception.class);, +		return tryParse(() -> getObjectMapper().readValue(json, LIST_TYPE),, +				Exception.class);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.Callable;, +import org.springframework.util.ReflectionUtils;, +, + * @author Phillip Webb, +	protected final Map<String, Object> parseMap(String json,, +		return trimParse(json, "{", parser);, +	protected final List<Object> parseList(String json,, +			Function<String, List<Object>> parser) {, +		return trimParse(json, "[", parser);]