[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.util.StringUtils;, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.util.StringUtils;, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.util.StringUtils;, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilterTests.java, +		final Exception anonymous = new Exception("test error") {, +		};, +		this.webFilter.filter(exchange, (serverWebExchange) -> Mono.error(anonymous)), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +import org.springframework.util.StringUtils;, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +			return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName, +					: exception.getClass().getName());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilterTests.java, +		final Exception anonymous = new Exception("test error") {, +		};, +		this.webFilter.filter(exchange, (serverWebExchange) -> Mono.error(anonymous)), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilterTests.java, +	public void anonymousError() {, +			this.mvc.perform(get("/api/c1/anonymousError/10"));, +		catch (Throwable ignore) {, +		}, +		assertThat(this.registry.get("http.server.requests"), +				.tag("uri", "/api/c1/anonymousError/{id}").timer().getId(), +				.getTag("exception")).endsWith("$1");, +		public String alwaysThrowsAnonymousException(@PathVariable Long id), +				throws Exception {, +			throw new Exception("this exception won't have a simple class name") {, +			};]