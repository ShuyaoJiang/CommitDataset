[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +	private final Collection<Predicate<String>> classesFilters;, +, +	private final Collection<Predicate<String>> resourcesFilters;, +		this(Collections.singleton(ClassFilter.of(hiddenClasses)),, +				Collections.emptyList());, +		this(Collections.singleton(PackageFilter.of(hiddenPackages)),, +				Collections.emptyList());, +	 * Create a {@link FilteredClassLoader} that hides resources from the given, +	 * {@link ClassPathResource classpath resources}., +		this(Collections.emptyList(),, +				Collections.singleton(ClassPathResourceFilter.of(hiddenResources)));, +	 * filtered class or resource. The input of the predicate can either be the binary, +	 * name of a class or a resource name., +		this(Arrays.asList(filters), Arrays.asList(filters));, +	}, +, +	private FilteredClassLoader(Collection<Predicate<String>> classesFilters,, +			Collection<Predicate<String>> resourcesFilters) {, +		this.classesFilters = classesFilters;, +		this.resourcesFilters = resourcesFilters;, +		for (Predicate<String> filter : this.classesFilters) {, +		for (Predicate<String> filter : this.resourcesFilters) {, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +	private final Collection<Predicate<String>> classesFilters;, +, +	private final Collection<Predicate<String>> resourcesFilters;, +		this(Collections.singleton(ClassFilter.of(hiddenClasses)),, +				Collections.emptyList());, +		this(Collections.singleton(PackageFilter.of(hiddenPackages)),, +				Collections.emptyList());, +	 * Create a {@link FilteredClassLoader} that hides resources from the given, +	 * {@link ClassPathResource classpath resources}., +		this(Collections.emptyList(),, +				Collections.singleton(ClassPathResourceFilter.of(hiddenResources)));, +	 * filtered class or resource. The input of the predicate can either be the binary, +	 * name of a class or a resource name., +		this(Arrays.asList(filters), Arrays.asList(filters));, +	}, +, +	private FilteredClassLoader(Collection<Predicate<String>> classesFilters,, +			Collection<Predicate<String>> resourcesFilters) {, +		this.classesFilters = classesFilters;, +		this.resourcesFilters = resourcesFilters;, +		for (Predicate<String> filter : this.classesFilters) {, +		for (Predicate<String> filter : this.resourcesFilters) {, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/FilteredClassLoaderTests.java, +			"org/springframework/boot/test/context/FilteredClassLoaderTestsResource.txt");, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +	private final Collection<Predicate<String>> classesFilters;, +, +	private final Collection<Predicate<String>> resourcesFilters;, +		this(Collections.singleton(ClassFilter.of(hiddenClasses)),, +				Collections.emptyList());, +		this(Collections.singleton(PackageFilter.of(hiddenPackages)),, +				Collections.emptyList());, +	 * Create a {@link FilteredClassLoader} that hides resources from the given, +	 * {@link ClassPathResource classpath resources}., +		this(Collections.emptyList(),, +				Collections.singleton(ClassPathResourceFilter.of(hiddenResources)));, +	 * filtered class or resource. The input of the predicate can either be the binary, +	 * name of a class or a resource name., +		this(Arrays.asList(filters), Arrays.asList(filters));, +	}, +, +	private FilteredClassLoader(Collection<Predicate<String>> classesFilters,, +			Collection<Predicate<String>> resourcesFilters) {, +		this.classesFilters = classesFilters;, +		this.resourcesFilters = resourcesFilters;, +		for (Predicate<String> filter : this.classesFilters) {, +		for (Predicate<String> filter : this.resourcesFilters) {, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/FilteredClassLoaderTests.java, +			"org/springframework/boot/test/context/FilteredClassLoaderTestsResource.txt");, +++ /dev/null, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/FilteredClassLoader.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +	private final Collection<Predicate<String>> classesFilters;, +, +	private final Collection<Predicate<String>> resourcesFilters;, +		this(Collections.singleton(ClassFilter.of(hiddenClasses)),, +				Collections.emptyList());, +		this(Collections.singleton(PackageFilter.of(hiddenPackages)),, +				Collections.emptyList());, +	 * Create a {@link FilteredClassLoader} that hides resources from the given, +	 * {@link ClassPathResource classpath resources}., +		this(Collections.emptyList(),, +				Collections.singleton(ClassPathResourceFilter.of(hiddenResources)));, +	 * filtered class or resource. The input of the predicate can either be the binary, +	 * name of a class or a resource name.]