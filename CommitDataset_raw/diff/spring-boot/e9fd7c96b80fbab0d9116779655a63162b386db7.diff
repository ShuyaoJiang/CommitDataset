[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +import java.security.ProtectionDomain;, + * Properties and extracts optional values (which can also be provided overridden as, +	private Logger logger = Logger.getLogger(Launcher.class.getName());, +, +	public static final String CONFIG_NAME = "loader.config.name";, +	public static final String CONFIG_LOCATION = "loader.config.location";, +	protected void launch(String[] args, ProtectionDomain protectionDomain), +			throws Exception {, +		launch(args, new ExplodedArchive(getHomeDirectory()));, +	protected File getHomeDirectory() {, +		return new File(SystemPropertyUtils.resolvePlaceholders(System.getProperty(HOME,, +				"${user.dir}")));, +		initializeProperties();, +		initializePaths();, +	}, +	private void initializeProperties() throws Exception, IOException {, +		InputStream resource = getClasspathResource(config);, +			resource = getResource(config);, +		}, +		if (resource != null) {, +			this.logger.info("Found: " + config);, +			try {, +				this.properties.load(resource);, +			}, +			finally {, +				resource.close();, +			}, +		}, +		else {, +			this.logger.info("Not found: " + config);, +		}, +	}, +, +	private InputStream getResource(String config) throws Exception {, +			return getClasspathResource(config.substring("classpath:".length()));, +		}, +		config = stripFileUrlPrefix(config);, +		if (isUrl(config)) {, +			return getURLResource(config);, +		}, +		return getFileResource(config);, +	}, +	private String stripFileUrlPrefix(String config) {, +		if (config.startsWith("file:")) {, +			config = config.substring("file:".length());, +			if (config.startsWith("//")) {, +				config = config.substring(2);, +			}, +		}, +		return config;, +	}, +, +	private boolean isUrl(String config) {, +		return config.contains("://");, +	}, +, +	private InputStream getClasspathResource(String config) {, +		return getClass().getResourceAsStream(config);, +	private InputStream getFileResource(String config) throws Exception {, +			return new FileInputStream(file);, +		}, +		return null;, +	private InputStream getURLResource(String config) throws Exception {, +				return con.getInputStream();, +		return null;, +, +	private boolean exists(URL url) throws IOException {, +		// Try a URL connection content-length header..., +		URLConnection connection = url.openConnection();, +			connection.setUseCaches(connection.getClass().getSimpleName(), +					.startsWith("JNLP"));, +			if (connection instanceof HttpURLConnection) {, +				HttpURLConnection httpConnection = (HttpURLConnection) connection;, +				httpConnection.setRequestMethod("HEAD");, +				int responseCode = httpConnection.getResponseCode();, +				if (responseCode == HttpURLConnection.HTTP_OK) {, +					return true;, +				}, +				else if (responseCode == HttpURLConnection.HTTP_NOT_FOUND) {, +					return false;, +				}, +			}, +			return (connection.getContentLength() >= 0);, +		}, +		finally {, +			if (connection instanceof HttpURLConnection) {, +				((HttpURLConnection) connection).disconnect();, +			}, +		}, +	}, +, +	private void initializePaths() throws IOException {, +			this.paths = parsePathsProperty(SystemPropertyUtils.resolvePlaceholders(path));, +	private List<String> parsePathsProperty(String commaSeparatedPaths) {, +		List<String> paths = new ArrayList<String>();, +		for (String path : commaSeparatedPaths.split(",")) {, +			path = cleanupPath(path);]