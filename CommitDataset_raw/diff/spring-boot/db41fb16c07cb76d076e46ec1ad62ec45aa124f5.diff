[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory;, +import com.hazelcast.core.Hazelcast;, +import com.hazelcast.core.HazelcastInstance;, +import com.hazelcast.spring.cache.HazelcastCacheManager;, +, + * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that has, + * been configured by the general {@link HazelcastAutoConfiguration} or create a separate, + * one if the {@code spring.cache.hazelcast.config} property has been set., + * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure a, + * default {@link HazelcastInstance} is still made, using the same defaults., +		public HazelcastCacheManager cacheManager(, +				HazelcastInstance existingHazelcastInstance) throws IOException {, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				HazelcastInstance cacheHazelcastInstance = new HazelcastInstanceFactory(, +						location).getHazelcastInstance();, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				new HazelcastInstanceFactory(location).getHazelcastInstance();, +	private static class CloseableHazelcastCacheManager extends HazelcastCacheManager, +			implements Closeable {, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory;, +import com.hazelcast.core.Hazelcast;, +import com.hazelcast.core.HazelcastInstance;, +import com.hazelcast.spring.cache.HazelcastCacheManager;, +, + * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that has, + * been configured by the general {@link HazelcastAutoConfiguration} or create a separate, + * one if the {@code spring.cache.hazelcast.config} property has been set., + * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure a, + * default {@link HazelcastInstance} is still made, using the same defaults., +		public HazelcastCacheManager cacheManager(, +				HazelcastInstance existingHazelcastInstance) throws IOException {, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				HazelcastInstance cacheHazelcastInstance = new HazelcastInstanceFactory(, +						location).getHazelcastInstance();, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				new HazelcastInstanceFactory(location).getHazelcastInstance();, +	private static class CloseableHazelcastCacheManager extends HazelcastCacheManager, +			implements Closeable {, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ResourceCondition.java, +		if (resolver.containsProperty(this.propertyName)) {, +			return ConditionOutcome.match("A '" + this.prefix + this.propertyName + "' ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory;, +import com.hazelcast.core.Hazelcast;, +import com.hazelcast.core.HazelcastInstance;, +import com.hazelcast.spring.cache.HazelcastCacheManager;, +, + * Hazelcast cache configuration. Can either reuse the {@link HazelcastInstance} that has, + * been configured by the general {@link HazelcastAutoConfiguration} or create a separate, + * one if the {@code spring.cache.hazelcast.config} property has been set., + * If the {@link HazelcastAutoConfiguration} has been disabled, an attempt to configure a, + * default {@link HazelcastInstance} is still made, using the same defaults., +		public HazelcastCacheManager cacheManager(, +				HazelcastInstance existingHazelcastInstance) throws IOException {, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				HazelcastInstance cacheHazelcastInstance = new HazelcastInstanceFactory(, +						location).getHazelcastInstance();, +			Resource config = this.cacheProperties.getHazelcast().getConfig();, +			Resource location = this.cacheProperties.resolveConfigLocation(config);, +				new HazelcastInstanceFactory(location).getHazelcastInstance();, +	private static class CloseableHazelcastCacheManager extends HazelcastCacheManager, +			implements Closeable {, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ResourceCondition.java, +		if (resolver.containsProperty(this.propertyName)) {, +			return ConditionOutcome.match("A '" + this.prefix + this.propertyName + "' ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java, +, +import com.hazelcast.config.Config;, +import com.hazelcast.core.Hazelcast;, +import com.hazelcast.core.HazelcastInstance;, +				return new HazelcastInstanceFactory(config).getHazelcastInstance();, +			return new HazelcastInstanceFactory(config).getHazelcastInstance();, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ResourceCondition;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory;, +import com.hazelcast.core.Hazelcast;, +import com.hazelcast.core.HazelcastInstance;]