[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/JavaLoggerConfigurer.java, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/JavaLoggerConfigurer.java, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/LogbackConfigurer.java, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/JavaLoggerConfigurer.java, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/LogbackConfigurer.java, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/LoggingInitializer.java, +, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.context.ApplicationContext;, + * <code>java.util.logging</code> will be used. </p>, + * @author Dave Syer, + * @author Phillip Webb, +	private static final Map<String, String> ENVIRONMENT_SYSTEM_PROPERTY_MAPPING;, +	static {, +		ENVIRONMENT_SYSTEM_PROPERTY_MAPPING = new HashMap<String, String>();, +		ENVIRONMENT_SYSTEM_PROPERTY_MAPPING.put("logging.file", "LOG_FILE");, +		ENVIRONMENT_SYSTEM_PROPERTY_MAPPING.put("logging.path", "LOG_PATH");, +		ENVIRONMENT_SYSTEM_PROPERTY_MAPPING.put("PID", "PID");, +	}, +, +		for (Map.Entry<String, String> mapping : ENVIRONMENT_SYSTEM_PROPERTY_MAPPING, +				.entrySet()) {, +			if (environment.containsProperty(mapping.getKey())) {, +				System.setProperty(mapping.getValue(),, +						environment.getProperty(mapping.getKey()));, +			}, +		if (System.getProperty("PID") == null) {, +		LoggingSystem system = LoggingSystem.get(applicationContext.getClassLoader());, +		system.init(applicationContext);, +, +	private static enum LoggingSystem {, +, +		/**, +		 * Log4J, +		 */, +		LOG4J("org.apache.log4j.PropertyConfigurator", "log4j.xml", "log4j.properties") {, +, +			@Override, +			protected void doInit(ApplicationContext applicationContext,, +					String configLocation) throws Exception {, +				Log4jConfigurer.initLogging(configLocation);, +			}, +		},, +, +		/**, +		 * Logback, +		 */, +		LOGBACK("ch.qos.logback.core.Appender", "logback.xml") {, +, +			@Override, +			protected void doInit(ApplicationContext applicationContext,, +					String configLocation) throws Exception {, +				LogbackConfigurer.initLogging(configLocation);, +			}, +		},, +, +		/**, +		 * Java Util Logging, +		 */, +		JAVA(null, "logging.properties") {, +, +			@Override, +			protected void doInit(ApplicationContext applicationContext,, +					String configLocation) throws Exception {, +				JavaLoggerConfigurer.initLogging(configLocation);, +			}, +		};, +, +		private final String className;, +, +		private final String[] paths;, +, +		private LoggingSystem(String className, String... paths) {, +			this.className = className;, +			this.paths = paths;, +		}, +, +		public void init(ApplicationContext applicationContext) {, +			String configLocation = getConfigLocation(applicationContext);, +			try {, +				doInit(applicationContext, configLocation);, +			} catch (RuntimeException ex) {, +				throw ex;, +			} catch (Exception ex) {, +				throw new IllegalStateException("Cannot initialize logging from ", +						+ configLocation, ex);, +			}, +, +		}, +, +		protected abstract void doInit(ApplicationContext applicationContext,, +				String configLocation) throws Exception;, +, +		private String getConfigLocation(ApplicationContext applicationContext) {, +			Environment environment = applicationContext.getEnvironment();, +			ClassLoader classLoader = applicationContext.getClassLoader();, +, +			// User specified config, +			if (environment.containsProperty("logging.config")) {]