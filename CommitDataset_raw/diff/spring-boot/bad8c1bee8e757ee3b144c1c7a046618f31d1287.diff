[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +		AS400("DB2 UDB for AS/400", "SELECT 1 FROM SYSIBM.SYSDUMMY1") {, +			@Override, +			protected boolean matchesProduct(String product) {, +				return super.matchesProduct(product), +						|| product.toLowerCase().contains("as/400");, +			}, +		},, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +		AS400("DB2 UDB for AS/400", "SELECT 1 FROM SYSIBM.SYSDUMMY1") {, +			@Override, +			protected boolean matchesProduct(String product) {, +				return super.matchesProduct(product), +						|| product.toLowerCase().contains("as/400");, +			}, +		},, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +		assertThat(Product.forProduct("DB2 UDB for AS/400"), equalTo(Product.AS400));, +		assertThat(Product.forProduct("DB3 XDB fur AS/400"), equalTo(Product.AS400));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +		AS400("DB2 UDB for AS/400", "SELECT 1 FROM SYSIBM.SYSDUMMY1") {, +			@Override, +			protected boolean matchesProduct(String product) {, +				return super.matchesProduct(product), +						|| product.toLowerCase().contains("as/400");, +			}, +		},, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/DataSourceHealthIndicatorTests.java, +		assertThat(Product.forProduct("DB2 UDB for AS/400"), equalTo(Product.AS400));, +		assertThat(Product.forProduct("DB3 XDB fur AS/400"), equalTo(Product.AS400));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java, +	DB2("com.ibm.db2.jcc.DB2Driver", "com.ibm.db2.jcc.DB2XADataSource"),, +, +	/**, +	 * DB2 AS400 Server., +	 */, +	AS400("com.ibm.as400.access.AS400JDBCDriver", "com.ibm.as400.access.AS400JDBCXADataSource");]