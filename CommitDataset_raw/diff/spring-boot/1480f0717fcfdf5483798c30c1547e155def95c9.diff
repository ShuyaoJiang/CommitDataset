[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, + * @author Stephane Nicoll, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, + * @author Stephane Nicoll, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private String loginModule = "com.sun.security.auth.module.Krb5LoginModule";, +		 * Control flag for login configuration., +		 * Additional JAAS options., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, + * @author Stephane Nicoll, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private String loginModule = "com.sun.security.auth.module.Krb5LoginModule";, +		 * Control flag for login configuration., +		 * Additional JAAS options., +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.kafka.jaas.control-flag",, +    "defaultValue": "required", +  },, +  {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, + * @author Stephane Nicoll, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private String loginModule = "com.sun.security.auth.module.Krb5LoginModule";, +		 * Control flag for login configuration., +		 * Additional JAAS options., +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.kafka.jaas.control-flag",, +    "defaultValue": "required", +  },, +  {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +import static org.assertj.core.api.Assertions.entry;, +		assertThat(this.context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)), +				.isEmpty();, +		assertThat(this.context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)), +				.hasSize(1);, +		KafkaJaasLoginModuleInitializer jaas = this.context.getBean(, +				KafkaJaasLoginModuleInitializer.class);, +		assertThat(((Map<String, String>) dfa.getPropertyValue("options"))), +				.containsExactly(entry("useKeyTab", "true"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfiguration.java, + * @author Stephane Nicoll, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +		private String loginModule = "com.sun.security.auth.module.Krb5LoginModule";, +		 * Control flag for login configuration., +		 * Additional JAAS options., +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.kafka.jaas.control-flag",, +    "defaultValue": "required", +  },, +  {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +import static org.assertj.core.api.Assertions.entry;, +		assertThat(this.context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)), +				.isEmpty();, +		assertThat(this.context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)), +				.hasSize(1);, +		KafkaJaasLoginModuleInitializer jaas = this.context.getBean(, +				KafkaJaasLoginModuleInitializer.class);, +		assertThat(((Map<String, String>) dfa.getPropertyValue("options"))), +				.containsExactly(entry("useKeyTab", "true"));, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.kafka.jaas.control-flag=required # Control flag for login configuration., +	spring.kafka.jaas.options= # Additional JAAS options.]