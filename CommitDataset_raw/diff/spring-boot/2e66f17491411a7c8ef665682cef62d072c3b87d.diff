[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +	private static final Map<String, String> DEFAULTS;, +	static {, +		Map<String, String> defaults = new LinkedHashMap<String, String>();, +		defaults.put("http.enabled", String.valueOf(false));, +		defaults.put("node.local", String.valueOf(true));, +		DEFAULTS = Collections.unmodifiableMap(defaults);, +	}, +, +		ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder();, +		for (Map.Entry<String, String> entry : DEFAULTS.entrySet()) {, +			if (!this.properties.getProperties().containsKey(entry.getKey())) {, +				settings.put(entry.getKey(), entry.getValue());, +			}, +		}, +		settings.put(this.properties.getProperties());, +				.clusterName(this.properties.getClusterName()).node();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +	private static final Map<String, String> DEFAULTS;, +	static {, +		Map<String, String> defaults = new LinkedHashMap<String, String>();, +		defaults.put("http.enabled", String.valueOf(false));, +		defaults.put("node.local", String.valueOf(true));, +		DEFAULTS = Collections.unmodifiableMap(defaults);, +	}, +, +		ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder();, +		for (Map.Entry<String, String> entry : DEFAULTS.entrySet()) {, +			if (!this.properties.getProperties().containsKey(entry.getKey())) {, +				settings.put(entry.getKey(), entry.getValue());, +			}, +		}, +		settings.put(this.properties.getProperties());, +				.clusterName(this.properties.getClusterName()).node();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfigurationTests.java, +	public void createNodeClientWithDefaults() {, +		NodeClient client = (NodeClient) this.context.getBean(Client.class);, +		assertThat(client.settings().get("foo.bar"), is(equalTo("baz")));, +		assertThat(client.settings().get("node.local"), is(equalTo("true")));, +		assertThat(client.settings().get("http.enabled"), is(equalTo("false")));, +	}, +, +	@Test, +	public void createNodeClientWithOverrides() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.data.elasticsearch.properties.foo.bar:baz",, +				"spring.data.elasticsearch.properties.path.data:target/data",, +				"spring.data.elasticsearch.properties.path.logs:target/logs",, +				"spring.data.elasticsearch.properties.node.local:false",, +				"spring.data.elasticsearch.properties.node.data:true",, +				"spring.data.elasticsearch.properties.http.enabled:true");, +		this.context.register(PropertyPlaceholderAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(1, this.context.getBeanNamesForType(Client.class).length);, +		NodeClient client = (NodeClient) this.context.getBean(Client.class);, +		assertThat(client.settings().get("foo.bar"), is(equalTo("baz")));, +		assertThat(client.settings().get("node.local"), is(equalTo("false")));, +		assertThat(client.settings().get("node.data"), is(equalTo("true")));, +		assertThat(client.settings().get("http.enabled"), is(equalTo("true")));]