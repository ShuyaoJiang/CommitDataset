[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java, + * Copyright 2012-2015 the original author or authors., + * {@literal "random."}. Where the "unqualified property name" is the portion of the, + * requested property name beyond the "random." prefix, this {@link PropertySource}, + * returns:, + * <ul>, + * <li>When {@literal "int"}, a random {@link Integer} value, restricted by an optionally, + * specified range.</li>, + * <li>When {@literal "long"}, a random {@link Long} value, restricted by an optionally, + * specified range.</li>, + * <li>Otherwise, a {@code byte[]}.</li>, + * <ul>, + * The {@literal "random.int"} and {@literal "random.long"} properties supports a range, + * suffix whose syntax is:, + * <p>, + * {@code OPEN value (,max) CLOSE} where the {@code OPEN,CLOSE} are any character and, + * {@code value,max} are integers. If {@code max} is provided then {@code value} is the, + * minimum value and {@code max} is the maximum (exclusive)., + * </p>, + * @author Matt Benson, +	private static final String PREFIX = "random.";, +, +		if (!name.startsWith(PREFIX)) {, +		return getRandomValue(name.substring(PREFIX.length()));, +	private Object getRandomValue(String type) {, +		if (type.equals("int")) {, +			return getSource().nextInt();, +		}, +		if (type.equals("long")) {, +			return getSource().nextLong();, +		}, +		String range = getRange(type, "int");, +		if (range != null) {, +			return getNextIntInRange(range);, +		}, +		range = getRange(type, "long");, +		if (range != null) {, +			return getNextLongInRange(range);, +		}, +		return getRandomBytes();, +	}, +, +	private String getRange(String type, String prefix) {, +		if (type.startsWith(prefix)) {, +			int startIndex = prefix.length() + 1;, +			if (type.length() > startIndex) {, +				return type.substring(startIndex, type.length() - 1);, +			}, +		}, +		return null;, +	}, +, +	private int getNextIntInRange(String range) {, +		int start = Integer.parseInt(tokens[0]);, +		return start + getSource().nextInt(Integer.parseInt(tokens[1]) - start);, +	}, +, +	private long getNextLongInRange(String range) {, +		String[] tokens = StringUtils.commaDelimitedListToStringArray(range);, +		if (tokens.length == 1) {, +			return Math.abs(getSource().nextLong()) % Long.parseLong(tokens[0]);, +		}, +		long lowerBound = Long.parseLong(tokens[0]);, +		long upperBound = Long.parseLong(tokens[1]) - lowerBound;, +		return lowerBound + Math.abs(getSource().nextLong()) % upperBound;, +	}, +, +	private Object getRandomBytes() {, +		byte[] bytes = new byte[32];, +		getSource().nextBytes(bytes);, +		return DigestUtils.md5DigestAsHex(bytes);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java, + * Copyright 2012-2015 the original author or authors., + * {@literal "random."}. Where the "unqualified property name" is the portion of the, + * requested property name beyond the "random." prefix, this {@link PropertySource}, + * returns:, + * <ul>, + * <li>When {@literal "int"}, a random {@link Integer} value, restricted by an optionally, + * specified range.</li>, + * <li>When {@literal "long"}, a random {@link Long} value, restricted by an optionally, + * specified range.</li>, + * <li>Otherwise, a {@code byte[]}.</li>, + * <ul>, + * The {@literal "random.int"} and {@literal "random.long"} properties supports a range, + * suffix whose syntax is:, + * <p>, + * {@code OPEN value (,max) CLOSE} where the {@code OPEN,CLOSE} are any character and, + * {@code value,max} are integers. If {@code max} is provided then {@code value} is the, + * minimum value and {@code max} is the maximum (exclusive)., + * </p>, + * @author Matt Benson, +	private static final String PREFIX = "random.";, +, +		if (!name.startsWith(PREFIX)) {, +		return getRandomValue(name.substring(PREFIX.length()));, +	private Object getRandomValue(String type) {, +		if (type.equals("int")) {, +			return getSource().nextInt();, +		}, +		if (type.equals("long")) {]