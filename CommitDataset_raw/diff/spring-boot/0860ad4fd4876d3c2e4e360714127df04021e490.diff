[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import java.util.Collections;, +			MongoMappingContext context, BeanFactory beanFactory,, +			CustomConversions conversions) {, +		mappingConverter.setCustomConversions(conversions);, +	public MongoMappingContext mongoMappingContext(BeanFactory beanFactory,, +			CustomConversions conversions) throws ClassNotFoundException {, +		context.setSimpleTypeHolder(conversions.getSimpleTypeHolder());, +	@Bean, +	@ConditionalOnMissingBean, +	public CustomConversions customConversions() {, +		return new CustomConversions(Collections.emptyList());, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import java.util.Collections;, +			MongoMappingContext context, BeanFactory beanFactory,, +			CustomConversions conversions) {, +		mappingConverter.setCustomConversions(conversions);, +	public MongoMappingContext mongoMappingContext(BeanFactory beanFactory,, +			CustomConversions conversions) throws ClassNotFoundException {, +		context.setSimpleTypeHolder(conversions.getSimpleTypeHolder());, +	@Bean, +	@ConditionalOnMissingBean, +	public CustomConversions customConversions() {, +		return new CustomConversions(Collections.emptyList());, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import java.time.LocalDateTime;, +import org.springframework.data.mongodb.core.mapping.MongoPersistentEntity;, +	@Test, +	public void registersDefaultSimpleTypesWithMappingContext() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(MongoAutoConfiguration.class,, +				MongoDataAutoConfiguration.class);, +		this.context.refresh();, +		MongoMappingContext context = this.context.getBean(MongoMappingContext.class);, +		MongoPersistentEntity<?> entity = context.getPersistentEntity(Sample.class);, +		assertThat(entity.getPersistentProperty("date").isEntity()).isFalse();, +	}, +, +	static class Sample {, +, +		LocalDateTime date;, +, +	}]