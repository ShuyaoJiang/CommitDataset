[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +Many more questions can be answered by looking at the source code and the javadoc. Some, +* Declaratively for all applications by adding a `META-INF/spring.factories` and packaging, +* `spring.config.location` (`SPRING_CONFIG_LOCATION`) is the file to load (e.g. a classpath, +also add `snakeyaml` to your dependencies (Maven coordinates `org.yaml:snakeyaml`, already, +`Map<String,Object>` (like a JSON object), and Spring Boot flattens the map so that it, +launch your application with a `-D` argument (remember to put it before the main class, +out of the event when it is published., +Jetty one instead. Spring Boot provides Tomcat and Jetty dependencies bundled together, +as separate starters to help make this process as easy as possible., +`@RestController`). You can contribute additional converters by simply adding beans of, +A `ViewResolver` is a core component of Spring MVC, translating view names in, +`@Controller` to actual `View` implementations.  Note that `ViewResolvers` are mainly, +`spring-boot-starter-logging`.  For a web application you only need, +on the content of the classpath. If Logback is available it is the first choice. So if, +* `${LOG_PATH}` if `logging.path` was set (representing a directory for, +instead. If you aren't using the starter poms then you need to provide `commons-logging`, +    </dependency>, +	<dependency>, +		<groupId>org.springframework.boot</groupId>, +		<artifactId>spring-boot-starter</artifactId>, +NOTE: The use of the log4j starter gathers together the dependencies for common logging, +your classpath (there is a `spring-boot-starter-data-jpa` for JPA and a, +`spring-boot-starter-data-mongodb` for Mongodb), create some repository interfaces to handle your, +Spring Data JPA already provides some vendor-independent configuration options (e.g., +for SQL logging) and Spring Boot exposes those, and a few more for hibernate as external, +of course you can do it manually as long as the database is a separate process., +the tables and data in the new platform. You either have to set `ddl-auto` explicitly, or, +startup. This can be useful for demos and for testing if you are careful, but probably, +initializer by default, so if the scripts cause exceptions the application will fail, +to start., +=== Use a higher level database migration tool, +random, printed at INFO level when the application starts up). You can change the, +password by providing a `security.user.password`. This and other useful properties, +are externalized via {sc-spring-boot-autoconfigure}/security/SecurityProperties{sc-ext}[`SecurityProperties`., +chore for any application.  If you are using Tomcat as a servlet container, then, +report whether it is secure or not (even downstream of the real SSL termination). The, +work with most front end proxies. You can switch on the valve by adding some entries to, +Modern IDEs (Eclipse, IDEA, etc.) all support hot swapping of bytecode, so if you make a, +To build with Ant you need to grab dependencies, compile and then create a jar or war, +on the spring.io website and the sample below., +changes. If you have other features in your application, using other servlets or filters, +for instance, then you may need to add some configuration to your `Application` context,]