[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, + * @param <T> the endpoint type, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, + * @param <T> the endpoint type, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +	 * @return the jedis connection factory, +	 * @throws Exception if the factory cannot be obtained, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, + * @param <T> the endpoint type, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +	 * @return the jedis connection factory, +	 * @throws Exception if the factory cannot be obtained, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadataTests.java, + * @param <D> the data source pool metadata type, +	 * @return the data source metadata, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, + * @param <T> the endpoint type, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +	 * @return the jedis connection factory, +	 * @throws Exception if the factory cannot be obtained, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadataTests.java, + * @param <D> the data source pool metadata type, +	 * @return the data source metadata, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/TestProject.java, +, +		for (Class<?> type : contents) {, +			copySources(type);, +	private void copySources(Class<?> type) throws IOException {, +		File original = getOriginalSourceFile(type);, +		File target = getSourceFile(type);, +	public File getSourceFile(Class<?> type) {, +		return new File(this.sourceFolder, sourcePathFor(type));, +	 * @param relativePath the relative path, +	 * @return the output file, +	 * @param target the target, +	 * @param snippetStream the snippet stream, +	 * @throws Exception if the source cannot be added, +	 * @param type the class to delete, +	public void delete(Class<?> type) {, +		File target = getSourceFile(type);, +	 * @param type the class to revert, +	 * @throws IOException, +	public void revert(Class<?> type) throws IOException {, +		Assert.assertTrue(getSourceFile(type).exists());, +		copySources(type);, +	 * @param type the class to add, +	 * @throws IOException, +	public void add(Class<?> type) throws IOException {, +		Assert.assertFalse(getSourceFile(type).exists());, +		copySources(type);, +	public void replaceText(Class<?> type, String find, String replace) throws Exception {, +		File target = getSourceFile(type);, +	private File getOriginalSourceFile(Class<?> type) {, +		return new File(ORIGINAL_SOURCE_FOLDER, sourcePathFor(type));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AbstractEndpointTests.java, + * @param <T> the endpoint type, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +	 * @return the jedis connection factory, +	 * @throws Exception if the factory cannot be obtained, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/metadata/AbstractDataSourcePoolMetadataTests.java, + * @param <D> the data source pool metadata type, +	 * @return the data source metadata, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/TestProject.java, +, +		for (Class<?> type : contents) {, +			copySources(type);, +	private void copySources(Class<?> type) throws IOException {, +		File original = getOriginalSourceFile(type);, +		File target = getSourceFile(type);, +	public File getSourceFile(Class<?> type) {, +		return new File(this.sourceFolder, sourcePathFor(type));, +	 * @param relativePath the relative path, +	 * @return the output file, +	 * @param target the target, +	 * @param snippetStream the snippet stream, +	 * @throws Exception if the source cannot be added, +	 * @param type the class to delete, +	public void delete(Class<?> type) {, +		File target = getSourceFile(type);, +	 * @param type the class to revert, +	 * @throws IOException, +	public void revert(Class<?> type) throws IOException {, +		Assert.assertTrue(getSourceFile(type).exists());, +		copySources(type);, +	 * @param type the class to add, +	 * @throws IOException, +	public void add(Class<?> type) throws IOException {, +		Assert.assertFalse(getSourceFile(type).exists());, +		copySources(type);, +	public void replaceText(Class<?> type, String find, String replace) throws Exception {, +		File target = getSourceFile(type);, +	private File getOriginalSourceFile(Class<?> type) {, +		return new File(ORIGINAL_SOURCE_FOLDER, sourcePathFor(type));, +++ b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/Dependency.java, +	 * @return the group ID, +	 * @return the artifact ID, +	 * @return the version, +	 * @return the exclusions, +		 * Return the exclusion artifact ID., +		 * @return the exclusion artifact ID]