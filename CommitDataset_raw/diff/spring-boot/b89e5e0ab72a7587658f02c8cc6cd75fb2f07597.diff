[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/DefaultCommandFactory.java, +			new JarCommand(), new InstallCommand(), new UninstallCommand(),, +			new InitCommand());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/DefaultCommandFactory.java, +			new JarCommand(), new InstallCommand(), new UninstallCommand(),, +			new InitCommand());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/Dependency.java, +		return this.id;, +		return this.name;, +		return this.description;, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/DefaultCommandFactory.java, +			new JarCommand(), new InstallCommand(), new UninstallCommand(),, +			new InitCommand());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/Dependency.java, +		return this.id;, +		return this.name;, +		return this.description;, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		super("init", "Initialize a new project structure from Spring Initializr",, +				handler);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/DefaultCommandFactory.java, +			new JarCommand(), new InstallCommand(), new UninstallCommand(),, +			new InitCommand());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/Dependency.java, +		return this.id;, +		return this.name;, +		return this.description;, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		super("init", "Initialize a new project structure from Spring Initializr",, +				handler);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommandOptionHandler.java, +import org.apache.http.impl.client.CloseableHttpClient;, +		this.target = option(Arrays.asList("target"), "URL of the service to use"), +				.withRequiredArg().defaultsTo(, +						ProjectGenerationRequest.DEFAULT_SERVICE_URL);, +		this.listMetadata = option(Arrays.asList("list", "l"),, +				"List the capabilities of the service. Use it to ", +						+ "discover the dependencies and the types that are available.");, +				"Comma separated list of dependencies to include in the generated project"), +				.withRequiredArg();, +		this.packaging = option(Arrays.asList("packaging", "p"),, +				"Packaging type to use (e.g. jar)").withRequiredArg();, +		this.build = option(, +				"build",, +				"The build system to use (e.g. maven, gradle). To be used alongside ", +						+ "--format to uniquely identify one type that is supported by the service. ", +						+ "Use --type in case of conflict").withRequiredArg().defaultsTo(, +				"maven");, +		this.format = option(, +				"format",, +				"The format of the generated content (e.g. build for a build file, ", +						+ "project for a project archive). To be used alongside --build to uniquely identify one type ", +						+ "that is supported by the service. Use --type in case of conflict"), +		this.type = option(, +				Arrays.asList("type", "t"),, +				"The project type to use. Not normally needed if you ", +						+ "use --build and/or --format. Check the capabilities of the service (--list) for ", +						+ "more details.").withRequiredArg();, +		this.extract = option(Arrays.asList("extract", "x"),, +				"Extract the project archive");, +		this.force = option(Arrays.asList("force", "f"),, +				"Force overwrite of existing files");, +		this.output = option(, +				Arrays.asList("output", "o"),, +				"Location of the generated project. Can be an absolute or a relative reference and ", +						+ "should refer to a directory when --extract is used."), +				.withRequiredArg();, +		if (options.has(this.listMetadata)) {, +			return listServiceCapabilities(options, this.httpClient);, +			return generateProject(options, this.httpClient);, +	protected ExitStatus listServiceCapabilities(OptionSet options,, +			CloseableHttpClient httpClient) throws IOException {, +			ProjectGenerationResponse entity = new InitializrServiceHttpInvoker(, +					httpClient).generate(request);, +					return extractProject(entity, options.valueOf(this.output),, +							forceValue);, +			String outputFileName = entity.getFileName() != null ? entity.getFileName(), +					: options.valueOf(this.output);, +				Log.error("Could not save the project, the server did not set a preferred ", +						+ "file name. Use --output to specify the output location for the project.");, +	private ExitStatus writeProject(ProjectGenerationResponse entity,, +			String outputFileName, boolean overwrite) throws IOException {, +				Log.error("File '" + f.getName(), +						+ "' already exists. Use --force if you want to ", +						+ "overwrite or --output to specify an alternate location.");, +	private ExitStatus extractProject(ProjectGenerationResponse entity,, +			String outputValue, boolean overwrite) throws IOException {, +		File output = outputValue != null ? new File(outputValue) : new File(, +				System.getProperty("user.dir"));, +		ZipInputStream zipIn = new ZipInputStream(new ByteArrayInputStream(, +				entity.getContent()));, +							.append(" '"), +							.append(f.getName()), +							.append("' already exists. Use --force if you want to ", +									+ "overwrite or --output to specify an alternate location.");, +		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(, +				outputFile));]