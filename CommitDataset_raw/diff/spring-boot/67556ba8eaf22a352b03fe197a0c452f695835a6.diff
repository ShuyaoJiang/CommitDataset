[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter;, +import org.springframework.boot.web.servlet.server.ServletWebServerFactory;, +		ServletWebServerFactoryAutoConfiguration.class, WebMvcAutoConfiguration.class,, +			if (this.applicationContext instanceof ServletWebServerApplicationContext, +					&& ((ServletWebServerApplicationContext) this.applicationContext), +							.getWebServer() != null) {, +				logger.warn("Could not start management web server on ", +		AnnotationConfigServletWebServerApplicationContext childContext = new AnnotationConfigServletWebServerApplicationContext();, +				ServletWebServerFactoryAutoConfiguration.class,, +		registerServletWebServerFactory(childContext);, +	private void registerServletWebServerFactory(, +			AnnotationConfigServletWebServerApplicationContext childContext) {, +				registry.registerBeanDefinition("ServletWebServerFactory",, +						new RootBeanDefinition(determineServletWebServerFactoryClass()));, +	private Class<?> determineServletWebServerFactoryClass(), +		Class<?> factoryClass = this.applicationContext, +				.getBean(ServletWebServerFactory.class).getClass();, +		if (cannotBeInstantiated(factoryClass)) {, +			throw new FatalBeanException("ServletWebServerFactory implementation ", +					+ factoryClass.getName() + " cannot be instantiated. ", +		return factoryClass;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter;, +import org.springframework.boot.web.servlet.server.ServletWebServerFactory;, +		ServletWebServerFactoryAutoConfiguration.class, WebMvcAutoConfiguration.class,, +			if (this.applicationContext instanceof ServletWebServerApplicationContext, +					&& ((ServletWebServerApplicationContext) this.applicationContext), +							.getWebServer() != null) {, +				logger.warn("Could not start management web server on ", +		AnnotationConfigServletWebServerApplicationContext childContext = new AnnotationConfigServletWebServerApplicationContext();, +				ServletWebServerFactoryAutoConfiguration.class,, +		registerServletWebServerFactory(childContext);, +	private void registerServletWebServerFactory(, +			AnnotationConfigServletWebServerApplicationContext childContext) {, +				registry.registerBeanDefinition("ServletWebServerFactory",, +						new RootBeanDefinition(determineServletWebServerFactoryClass()));, +	private Class<?> determineServletWebServerFactoryClass(), +		Class<?> factoryClass = this.applicationContext, +				.getBean(ServletWebServerFactory.class).getClass();, +		if (cannotBeInstantiated(factoryClass)) {, +			throw new FatalBeanException("ServletWebServerFactory implementation ", +					+ factoryClass.getName() + " cannot be instantiated. ", +		return factoryClass;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.DefaultServletWebServerFactoryCustomizer;, +import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;, +import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;, +import org.springframework.boot.web.server.ErrorPage;, +import org.springframework.boot.web.server.WebServer;, +import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;, +import org.springframework.boot.web.servlet.server.ServletWebServerFactory;, +import org.springframework.boot.web.servlet.server.ServletWebServerFactoryCustomizer;, + * {@link WebServer} running on a different port is required., +	public ServerFactoryCustomization serverCustomization() {, +		return new ServerFactoryCustomization();, +	static class ServerFactoryCustomization, +			implements ServletWebServerFactoryCustomizer, Ordered {, +		// This needs to be lazily initialized because web server customizer, +		private DefaultServletWebServerFactoryCustomizer serverCustomizer;, +		public void customize(ConfigurableServletWebServerFactory webServerFactory) {, +						this.beanFactory, DefaultServletWebServerFactoryCustomizer.class);, +			this.serverCustomizer.customize(webServerFactory);, +			webServerFactory.setErrorPages(Collections.<ErrorPage>emptySet());, +			webServerFactory.setContextPath("");, +			webServerFactory.setPort(this.managementServerProperties.getPort());, +				webServerFactory.setSsl(this.managementServerProperties.getSsl());, +			webServerFactory.setServerHeader(this.server.getServerHeader());, +			webServerFactory.setAddress(this.managementServerProperties.getAddress());, +			webServerFactory.addErrorPages(new ErrorPage(this.server.getError().getPath()));, +	static abstract class AccessLogCustomizer<T extends ServletWebServerFactory>, +			implements ServletWebServerFactoryCustomizer, Ordered {, +		public void customize(ConfigurableServletWebServerFactory serverFactory) {, +			if (this.factoryClass.isInstance(serverFactory)) {, +				customize(this.factoryClass.cast(serverFactory));, +		abstract void customize(T webServerFactory);, +			extends AccessLogCustomizer<TomcatServletWebServerFactory> {, +			super(TomcatServletWebServerFactory.class);, +		public void customize(TomcatServletWebServerFactory serverFactory) {, +			AccessLogValve accessLogValve = findAccessLogValve(serverFactory);, +				TomcatServletWebServerFactory serverFactory) {, +			for (Valve engineValve : serverFactory.getEngineValves()) {, +			extends AccessLogCustomizer<UndertowServletWebServerFactory> {, +			super(UndertowServletWebServerFactory.class);, +		public void customize(UndertowServletWebServerFactory serverFactory) {, +			serverFactory.setAccessLogPrefix(customizePrefix(serverFactory.getAccessLogPrefix()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter;, +import org.springframework.boot.web.servlet.server.ServletWebServerFactory;, +		ServletWebServerFactoryAutoConfiguration.class, WebMvcAutoConfiguration.class,, +			if (this.applicationContext instanceof ServletWebServerApplicationContext]