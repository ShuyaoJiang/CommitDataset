[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +		DataSourcePoolMetricsConfiguration.class, AtlasExportConfiguration.class,, +		DatadogExportConfiguration.class, GangliaExportConfiguration.class,, +		GraphiteExportConfiguration.class, InfluxExportConfiguration.class,, +		JmxExportConfiguration.class, PrometheusExportConfiguration.class,, +		SimpleExportConfiguration.class, StatsdExportConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +		DataSourcePoolMetricsConfiguration.class, AtlasExportConfiguration.class,, +		DatadogExportConfiguration.class, GangliaExportConfiguration.class,, +		GraphiteExportConfiguration.class, InfluxExportConfiguration.class,, +		JmxExportConfiguration.class, PrometheusExportConfiguration.class,, +		SimpleExportConfiguration.class, StatsdExportConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +import java.util.List;, +import io.micrometer.core.instrument.Tag;, +		dataSources.forEach(this::bindDataSourceToRegistry);, +, +	private void bindDataSourceToRegistry(String beanName, DataSource dataSource) {, +		List<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +		new DataSourcePoolMetrics(dataSource, this.metadataProviders, this.metricName,, +				tags).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +		DataSourcePoolMetricsConfiguration.class, AtlasExportConfiguration.class,, +		DatadogExportConfiguration.class, GangliaExportConfiguration.class,, +		GraphiteExportConfiguration.class, InfluxExportConfiguration.class,, +		JmxExportConfiguration.class, PrometheusExportConfiguration.class,, +		SimpleExportConfiguration.class, StatsdExportConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +import java.util.List;, +import io.micrometer.core.instrument.Tag;, +		dataSources.forEach(this::bindDataSourceToRegistry);, +, +	private void bindDataSourceToRegistry(String beanName, DataSource dataSource) {, +		List<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +		new DataSourcePoolMetrics(dataSource, this.metadataProviders, this.metricName,, +				tags).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void endpointPathCustomizationIsNotApplied() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +		DataSourcePoolMetricsConfiguration.class, AtlasExportConfiguration.class,, +		DatadogExportConfiguration.class, GangliaExportConfiguration.class,, +		GraphiteExportConfiguration.class, InfluxExportConfiguration.class,, +		JmxExportConfiguration.class, PrometheusExportConfiguration.class,, +		SimpleExportConfiguration.class, StatsdExportConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +import java.util.List;, +import io.micrometer.core.instrument.Tag;, +		dataSources.forEach(this::bindDataSourceToRegistry);, +, +	private void bindDataSourceToRegistry(String beanName, DataSource dataSource) {, +		List<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +		new DataSourcePoolMetrics(dataSource, this.metadataProviders, this.metricName,, +				tags).bindTo(this.registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfigurationTests.java, +	public void endpointPathCustomizationIsNotApplied() throws Exception {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryMvcWebEndpointIntegrationTests.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.web.EndpointPathResolver;, +					endpointMediaTypes, EndpointPathResolver.useEndpointId());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/DefaultEndpointPathResolver.java, + * Default {@link EndpointPathResolver} implementation that use the {@link Environment} to, + * determine if an endpoint has a custom path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +		DataSourcePoolMetricsConfiguration.class, AtlasExportConfiguration.class,, +		DatadogExportConfiguration.class, GangliaExportConfiguration.class,]