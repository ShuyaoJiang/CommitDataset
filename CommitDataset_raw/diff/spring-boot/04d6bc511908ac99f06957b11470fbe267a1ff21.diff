[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/ci/scripts/determine-email-body.sh, +, +function getPreviousSha() {, +	pushd git-repo > /dev/null, +		PREV_SHA=$( git rev-parse "$1"^1 ), +	popd > /dev/null, +	echo "$PREV_SHA", +}, +, +function getPreviousStates() {, +	PREV_STATUSES=$( curl https://api.github.com/repos/spring-projects/spring-boot/commits/"$1"/statuses -H "Authorization: token ${ACCESS_TOKEN}" ), +	PREV_STATES=$( echo "$PREV_STATUSES" | jq -r --arg BUILD_JOB_NAME "$BUILD_JOB_NAME" '.[]  | select(.context == $BUILD_JOB_NAME) | .state' ), +	echo "$PREV_STATES", +}, +, +PREV_STATES=$( getPreviousStates "$PREV_SHA" ), +IS_PREV_FAILURE=$( echo "$PREV_STATES" | grep 'failure' || true ), +, +while [[ $WAS_PREV_SUCCESSFUL == "" ]] && [[ $IS_PREV_FAILURE == "" ]]; do, +	PREV_SHA=$( getPreviousSha "$PREV_SHA" ), +	PREV_STATES=$(getPreviousStates "$PREV_SHA"), +	WAS_PREV_SUCCESSFUL=$( echo "$PREV_STATES" | grep 'success' || true ), +	IS_PREV_FAILURE=$( echo "$PREV_STATES" | grep 'failure' || true ), +done, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/ci/scripts/determine-email-body.sh, +, +function getPreviousSha() {, +	pushd git-repo > /dev/null, +		PREV_SHA=$( git rev-parse "$1"^1 ), +	popd > /dev/null, +	echo "$PREV_SHA", +}, +, +function getPreviousStates() {, +	PREV_STATUSES=$( curl https://api.github.com/repos/spring-projects/spring-boot/commits/"$1"/statuses -H "Authorization: token ${ACCESS_TOKEN}" ), +	PREV_STATES=$( echo "$PREV_STATUSES" | jq -r --arg BUILD_JOB_NAME "$BUILD_JOB_NAME" '.[]  | select(.context == $BUILD_JOB_NAME) | .state' ), +	echo "$PREV_STATES", +}, +, +PREV_STATES=$( getPreviousStates "$PREV_SHA" ), +IS_PREV_FAILURE=$( echo "$PREV_STATES" | grep 'failure' || true ), +, +while [[ $WAS_PREV_SUCCESSFUL == "" ]] && [[ $IS_PREV_FAILURE == "" ]]; do, +	PREV_SHA=$( getPreviousSha "$PREV_SHA" ), +	PREV_STATES=$(getPreviousStates "$PREV_SHA")]