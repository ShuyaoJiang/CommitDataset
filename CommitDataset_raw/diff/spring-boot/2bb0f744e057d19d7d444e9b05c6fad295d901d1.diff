[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnection.java, + * Copyright 2012-2014 the original author or authors., +			return new JdbcTemplate(dataSource).execute(new IsEmbedded());, +		catch (DataAccessException ex) {, +			return false;, +	/**, +	 * {@link ConnectionCallback} to determine if a connection is embedded., +	 */, +	private static class IsEmbedded implements ConnectionCallback<Boolean> {, +, +		@Override, +		public Boolean doInConnection(Connection connection) throws SQLException,, +				DataAccessException {, +			String productName = connection.getMetaData().getDatabaseProductName();, +			if (productName == null) {, +				return false;, +			}, +			productName = productName.toUpperCase();, +			EmbeddedDatabaseConnection[] candidates = EmbeddedDatabaseConnection.values();, +			for (EmbeddedDatabaseConnection candidate : candidates) {, +				if (candidate != NONE && productName.contains(candidate.name())) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnection.java, + * Copyright 2012-2014 the original author or authors., +			return new JdbcTemplate(dataSource).execute(new IsEmbedded());, +		catch (DataAccessException ex) {, +			return false;, +	/**, +	 * {@link ConnectionCallback} to determine if a connection is embedded., +	 */, +	private static class IsEmbedded implements ConnectionCallback<Boolean> {, +, +		@Override, +		public Boolean doInConnection(Connection connection) throws SQLException,, +				DataAccessException {, +			String productName = connection.getMetaData().getDatabaseProductName();, +			if (productName == null) {, +				return false;, +			}, +			productName = productName.toUpperCase();, +			EmbeddedDatabaseConnection[] candidates = EmbeddedDatabaseConnection.values();, +			for (EmbeddedDatabaseConnection candidate : candidates) {, +				if (candidate != NONE && productName.contains(candidate.name())) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java, +import org.springframework.util.StringUtils;, +			ConnectionFactory connectionFactory = getActiveMQConnectionFactory();, +, +		private ConnectionFactory getActiveMQConnectionFactory() {, +			if (StringUtils.hasLength(this.config.getUser()), +					&& StringUtils.hasLength(this.config.getPassword())) {, +				return new ActiveMQConnectionFactory(this.config.getUser(),, +						this.config.getPassword(), this.config.getBrokerUrl());, +			}, +			return new ActiveMQConnectionFactory(this.config.getBrokerUrl());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnection.java, + * Copyright 2012-2014 the original author or authors., +			return new JdbcTemplate(dataSource).execute(new IsEmbedded());, +		catch (DataAccessException ex) {, +			return false;, +	/**, +	 * {@link ConnectionCallback} to determine if a connection is embedded., +	 */, +	private static class IsEmbedded implements ConnectionCallback<Boolean> {, +, +		@Override, +		public Boolean doInConnection(Connection connection) throws SQLException,, +				DataAccessException {, +			String productName = connection.getMetaData().getDatabaseProductName();, +			if (productName == null) {, +				return false;, +			}, +			productName = productName.toUpperCase();, +			EmbeddedDatabaseConnection[] candidates = EmbeddedDatabaseConnection.values();, +			for (EmbeddedDatabaseConnection candidate : candidates) {, +				if (candidate != NONE && productName.contains(candidate.name())) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java, +import org.springframework.util.StringUtils;, +			ConnectionFactory connectionFactory = getActiveMQConnectionFactory();, +, +		private ConnectionFactory getActiveMQConnectionFactory() {]