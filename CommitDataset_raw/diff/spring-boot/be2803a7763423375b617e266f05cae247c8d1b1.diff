[+++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, +	private MetricReader metricReader = new InMemoryMetricRepository();, +	private Collection<PublicMetrics> publicMetrics;, +		List<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();, +		publicMetrics.add(new SystemPublicMetrics());, +		publicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));, +		if (this.publicMetrics != null) {, +			publicMetrics.addAll(this.publicMetrics);, +		return new MetricsEndpoint(publicMetrics);, +	@Bean, +	@ConditionalOnMissingBean, +	public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +	}, +, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, +	private MetricReader metricReader = new InMemoryMetricRepository();, +	private Collection<PublicMetrics> publicMetrics;, +		List<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();, +		publicMetrics.add(new SystemPublicMetrics());, +		publicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));, +		if (this.publicMetrics != null) {, +			publicMetrics.addAll(this.publicMetrics);, +		return new MetricsEndpoint(publicMetrics);, +	@Bean, +	@ConditionalOnMissingBean, +	public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private final Sanitizer sanitizer = new Sanitizer();, +		this.sanitizer.setKeysToSanitize(keysToSanitize);, +				map.put(entry.getKey(), this.sanitizer.sanitize(entry.getKey(), entry.getValue()));, +++ b/pom.xml, +	<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics;, +import org.springframework.boot.actuate.endpoint.SystemPublicMetrics;, + * @author Stephane Nicoll, +	private MetricReader metricReader = new InMemoryMetricRepository();, +	private Collection<PublicMetrics> publicMetrics;, +		List<PublicMetrics> publicMetrics = new ArrayList<PublicMetrics>();, +		publicMetrics.add(new SystemPublicMetrics());, +		publicMetrics.add(new MetricReaderPublicMetrics(this.metricReader));, +		if (this.publicMetrics != null) {, +			publicMetrics.addAll(this.publicMetrics);, +		return new MetricsEndpoint(publicMetrics);, +	@Bean, +	@ConditionalOnMissingBean, +	public ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint() {, +		ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +		endpoint.setConfigurationBeanFactoryMetaData(this.beanFactoryMetaData);, +		return endpoint;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +	private final Sanitizer sanitizer = new Sanitizer();, +		this.sanitizer.setKeysToSanitize(keysToSanitize);, +				map.put(entry.getKey(), this.sanitizer.sanitize(entry.getKey(), entry.getValue()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +	private final Sanitizer sanitizer = new Sanitizer();, +		this.sanitizer.setKeysToSanitize(keysToSanitize);, +		return this.sanitizer.sanitize(name, object);, +++ b/pom.xml]