[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, + * Copyright 2012-2017 the original author or authors., +import java.util.HashSet;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.test.context.ContextConfiguration;, +import org.springframework.test.context.ContextHierarchy;, +		if (webEnvironment != null && isWebEnvironmentSupported(mergedConfig)) {, +	private boolean isWebEnvironmentSupported(MergedContextConfiguration mergedConfig) {, +		Class<?> testClass = mergedConfig.getTestClass();, +		ContextHierarchy hierarchy = AnnotationUtils.getAnnotation(testClass,, +				ContextHierarchy.class);, +		if (hierarchy == null || hierarchy.value().length == 0) {, +			return true;, +		}, +		ContextConfiguration[] configurations = hierarchy.value();, +		return isFromConfiguration(mergedConfig,, +				configurations[configurations.length - 1]);, +	}, +, +	private boolean isFromConfiguration(MergedContextConfiguration candidateConfig,, +			ContextConfiguration configuration) {, +		ContextConfigurationAttributes attributes = new ContextConfigurationAttributes(, +				candidateConfig.getTestClass(), configuration);, +		Set<Class<?>> configurationClasses = new HashSet<Class<?>>(, +				Arrays.asList(attributes.getClasses()));, +		for (Class<?> candidate : candidateConfig.getClasses()) {, +			if (configurationClasses.contains(candidate)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, + * Copyright 2012-2017 the original author or authors., +import java.util.HashSet;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.test.context.ContextConfiguration;, +import org.springframework.test.context.ContextHierarchy;, +		if (webEnvironment != null && isWebEnvironmentSupported(mergedConfig)) {, +	private boolean isWebEnvironmentSupported(MergedContextConfiguration mergedConfig) {, +		Class<?> testClass = mergedConfig.getTestClass();, +		ContextHierarchy hierarchy = AnnotationUtils.getAnnotation(testClass,, +				ContextHierarchy.class);, +		if (hierarchy == null || hierarchy.value().length == 0) {, +			return true;, +		}, +		ContextConfiguration[] configurations = hierarchy.value();, +		return isFromConfiguration(mergedConfig,, +				configurations[configurations.length - 1]);, +	}, +, +	private boolean isFromConfiguration(MergedContextConfiguration candidateConfig,, +			ContextConfiguration configuration) {, +		ContextConfigurationAttributes attributes = new ContextConfigurationAttributes(, +				candidateConfig.getTestClass(), configuration);, +		Set<Class<?>> configurationClasses = new HashSet<Class<?>>(, +				Arrays.asList(attributes.getClasses()));, +		for (Class<?> candidate : candidateConfig.getClasses()) {, +			if (configurationClasses.contains(candidate)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWebEnvironmentContextHierarchyTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.context;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.test.context.AbstractSpringBootTestEmbeddedWebEnvironmentTests.AbstractConfig;, +import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;, +import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ChildConfiguration;, +import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ParentConfiguration;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.context.ContextConfiguration;, +import org.springframework.test.context.ContextHierarchy;, +import org.springframework.test.context.junit4.SpringRunner;, +import org.springframework.web.bind.annotation.RestController;]