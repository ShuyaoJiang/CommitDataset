[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +		@AliasFor(annotation = ImportAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +		@AliasFor(annotation = ImportAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.quartz.job-store-type=memory # Quartz job store type., +	spring.quartz.properties.*= # Additional Quartz Scheduler properties., +	management.server.servlet.context-path= # Management endpoint context-path. For instance, `/management`. Requires a custom management.server.port., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +		@AliasFor(annotation = ImportAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.quartz.job-store-type=memory # Quartz job store type., +	spring.quartz.properties.*= # Additional Quartz Scheduler properties., +	management.server.servlet.context-path= # Management endpoint context-path. For instance, `/management`. Requires a custom management.server.port., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +customized by setting the `management.metrics.web.server.requests-metric-name` property., +the name by setting the `management.metrics.web.server.requests-metric-name` property., +customized by setting the `management.metrics.web.client.requests-metric-name` property., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	private final Web web = new Web();, +		private final Client client = new Client();, +		private final Server server = new Server();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform" };, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public static class Servlet {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java, +		@AliasFor(annotation = ImportAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.quartz.job-store-type=memory # Quartz job store type., +	spring.quartz.properties.*= # Additional Quartz Scheduler properties., +	management.server.servlet.context-path= # Management endpoint context-path. For instance, `/management`. Requires a custom management.server.port., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +customized by setting the `management.metrics.web.server.requests-metric-name` property., +the name by setting the `management.metrics.web.server.requests-metric-name` property., +customized by setting the `management.metrics.web.client.requests-metric-name` property., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +{spring-javadoc}/cache/annotation/CachingConfigurer.html[`CachingConfigurer`]),, +https://github.com/bitronix/btm[Bitronix] is a popular open-source JTA transaction, +To test that {spring-reference}/web-reactive.html[Spring WebFlux] controllers are]