[+++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-test</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-test</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java, +import org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration;, +import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;, +import org.springframework.context.annotation.Import;, +import org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder;, +import org.springframework.test.web.servlet.setup.MockMvcConfigurer;, +import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;, +import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +	@Test, +	public void endpointsAreSecureByDefault() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(SecureConfiguration.class);, +		MockMvc mockMvc = createSecureMockMvc();, +		mockMvc.perform(get("/beans")).andExpect(status().isUnauthorized());, +	}, +, +	@Test, +	public void endpointSecurityCanBeDisabled() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(SecureConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.security.enabled:false");, +		MockMvc mockMvc = createSecureMockMvc();, +		mockMvc.perform(get("/beans")).andDo(print()).andExpect(status().isOk());, +	}, +, +		return doCreateMockMvc();, +	}, +, +	private MockMvc createSecureMockMvc() {, +		return doCreateMockMvc(springSecurity());, +	}, +, +	private MockMvc doCreateMockMvc(MockMvcConfigurer... configurers) {, +		DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.context);, +		for (MockMvcConfigurer configurer : configurers) {, +			builder.apply(configurer);, +		}, +		return builder.build();, +	@Import(DefaultConfiguration.class), +	@ImportAutoConfiguration({ SecurityAutoConfiguration.class,, +			ManagementWebSecurityAutoConfiguration.class }), +	static class SecureConfiguration {, +, +	}, +]