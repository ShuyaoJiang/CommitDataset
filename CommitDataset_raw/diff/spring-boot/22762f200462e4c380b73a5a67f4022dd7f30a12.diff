[+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +					this.propertySourceAnnotations.add(type,, +		Class<?> type = this.propertySourceAnnotations.configuration(location);, +		if (isPropertySourceAnnotationOnExcludedType(profile, type, location)) {, +			return null;, +		}, +, +	private boolean isPropertySourceAnnotationOnExcludedType(String profile,, +			Class<?> type, String location) {, +		if (type == null) {, +			// No configuration class to worry about, just a vanilla properties location, +			return false;, +		}, +		if (StringUtils.hasText(profile), +				&& !this.propertySourceAnnotations.locations().contains(location)) {, +			// We are looking for profile specific properties and this one isn't, +			// explicitly asked for in propertySourceAnnotations, +			return true;, +		}, +		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(, +				new DefaultListableBeanFactory(), this.environment);, +		int before = reader.getRegistry().getBeanDefinitionCount();, +		reader.register(type);, +		int after = reader.getRegistry().getBeanDefinitionCount();, +		if (after == before) {, +			// The configuration class was @Conditional and excluded, +			return true;, +		}, +		return false;, +	}, +, +		private Map<String, Class<?>> configs = new HashMap<String, Class<?>>();, +, +		public void add(Class<?> source, String[] locations,, +				boolean ignoreResourceNotFound, String name) {, +			}, +				this.configs.put(location, source);, +, +		public Class<?> configuration(String location) {, +			return this.configs.get(location);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +					this.propertySourceAnnotations.add(type,, +		Class<?> type = this.propertySourceAnnotations.configuration(location);, +		if (isPropertySourceAnnotationOnExcludedType(profile, type, location)) {, +			return null;, +		}, +, +	private boolean isPropertySourceAnnotationOnExcludedType(String profile,, +			Class<?> type, String location) {, +		if (type == null) {, +			// No configuration class to worry about, just a vanilla properties location, +			return false;, +		}, +		if (StringUtils.hasText(profile), +				&& !this.propertySourceAnnotations.locations().contains(location)) {, +			// We are looking for profile specific properties and this one isn't, +			// explicitly asked for in propertySourceAnnotations, +			return true;, +		}, +		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(, +				new DefaultListableBeanFactory(), this.environment);, +		int before = reader.getRegistry().getBeanDefinitionCount();, +		reader.register(type);, +		int after = reader.getRegistry().getBeanDefinitionCount();, +		if (after == before) {, +			// The configuration class was @Conditional and excluded, +			return true;, +		}, +		return false;, +	}, +, +		private Map<String, Class<?>> configs = new HashMap<String, Class<?>>();, +, +		public void add(Class<?> source, String[] locations,, +				boolean ignoreResourceNotFound, String name) {, +			}, +				this.configs.put(location, source);, +, +		public Class<?> configuration(String location) {, +			return this.configs.get(location);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java, +import org.springframework.context.annotation.Profile;, +import static org.junit.Assert.assertNull;, +	public void propertySourceAnnotationInProfile() throws Exception {, +		SpringApplication application = new SpringApplication(, +				WithPropertySourceInProfile.class);, +		application.setWebEnvironment(false);, +		ConfigurableApplicationContext context = application, +				.run("--spring.profiles.active=myprofile");, +		String property = context.getEnvironment().getProperty("my.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +		assertNotNull(context.getEnvironment().getPropertySources(), +				.get("classpath:/enableprofile.properties"));, +		assertNull(context.getEnvironment().getPropertySources(), +				.get("classpath:/enableprofile-myprofile.properties"));, +		context.close();]