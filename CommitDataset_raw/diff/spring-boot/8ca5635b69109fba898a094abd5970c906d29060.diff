[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.EnumerablePropertySource;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.PropertySources;, +		return new NamePatternEnvironmentFilter(this.environment).getResults(name);, +	/**, +	 * {@link NamePatternFilter} for the Environment source., +	 */, +	private class NamePatternEnvironmentFilter extends NamePatternFilter<Environment> {, +, +		public NamePatternEnvironmentFilter(Environment source) {, +			super(source);, +		}, +, +		@Override, +		protected void getNames(Environment source, NameCallback callback) {, +			if (source instanceof ConfigurableEnvironment) {, +				getNames(((ConfigurableEnvironment) source).getPropertySources(),, +						callback);, +			}, +		}, +, +		private void getNames(PropertySources propertySources, NameCallback callback) {, +			for (PropertySource<?> propertySource : propertySources) {, +				if (propertySource instanceof EnumerablePropertySource) {, +					EnumerablePropertySource<?> source = (EnumerablePropertySource<?>) propertySource;, +					for (String name : source.getPropertyNames()) {, +						callback.addName(name);, +					}, +				}, +			}, +		}, +, +		@Override, +		protected Object getValue(Environment source, String name) {, +			String result = source.getProperty(name);, +			if (result == null) {, +				throw new NoSuchPropertyException("No such property: " + name);, +			}, +			return ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +		}, +, +	}, +, +	/**, +	 * Exception thrown when the specified property cannot be found., +	 */, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpoint.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.EnumerablePropertySource;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.PropertySources;, +		return new NamePatternEnvironmentFilter(this.environment).getResults(name);, +	/**, +	 * {@link NamePatternFilter} for the Environment source., +	 */, +	private class NamePatternEnvironmentFilter extends NamePatternFilter<Environment> {, +, +		public NamePatternEnvironmentFilter(Environment source) {, +			super(source);, +		}, +, +		@Override, +		protected void getNames(Environment source, NameCallback callback) {, +			if (source instanceof ConfigurableEnvironment) {, +				getNames(((ConfigurableEnvironment) source).getPropertySources(),, +						callback);, +			}, +		}, +, +		private void getNames(PropertySources propertySources, NameCallback callback) {, +			for (PropertySource<?> propertySource : propertySources) {, +				if (propertySource instanceof EnumerablePropertySource) {, +					EnumerablePropertySource<?> source = (EnumerablePropertySource<?>) propertySource;, +					for (String name : source.getPropertyNames()) {, +						callback.addName(name);, +					}, +				}, +			}, +		}, +, +		@Override, +		protected Object getValue(Environment source, String name) {, +			String result = source.getProperty(name);, +			if (result == null) {, +				throw new NoSuchPropertyException("No such property: " + name);, +			}, +			return ((EnvironmentEndpoint) getDelegate()).sanitize(name, result);, +		}, +, +	}, +, +	/**, +	 * Exception thrown when the specified property cannot be found., +	 */, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java, +import java.util.Map;]