[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.main.banner_mode=off, +		.bannerMode(Banner.Mode.OFF), +	spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.main.banner_mode=off, +		.bannerMode(Banner.Mode.OFF), +	spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		app.setBannerMode(Banner.Mode.OFF);, +		.bannerMode(Banner.Mode.OFF), +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.main.banner_mode=off, +		.bannerMode(Banner.Mode.OFF), +	spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		app.setBannerMode(Banner.Mode.OFF);, +		.bannerMode(Banner.Mode.OFF), +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.io.UnsupportedEncodingException;, +	private Banner.Mode bannerMode = Banner.Mode.CONSOLE;, +		if (this.bannerMode != Banner.Mode.OFF) {, +	 * @see #setBannerMode, +		if (this.bannerMode == Banner.Mode.LOG) {, +			try {, +				this.log.info(createStringFromBanner(selectedBanner, environment));, +			}, +			catch (UnsupportedEncodingException ex) {, +				this.log.warn("Failed to create String for banner", ex);, +			}, +			selectedBanner.printBanner(environment, this.mainApplicationClass,, +					System.out);, +	private String createStringFromBanner(Banner banner, Environment environment), +			throws UnsupportedEncodingException {, +		ByteArrayOutputStream baos = new ByteArrayOutputStream();, +		banner.printBanner(environment, this.mainApplicationClass, new PrintStream(baos));, +		String charset = environment.getProperty("banner.charset", "UTF-8");, +		return baos.toString(charset);, +	}, +, +	 * to {@code true}., +	 * @param showBanner if the banner should be shown, +	 * @deprecated since 1.3.0 in favor of {@link #setBannerMode}, +	@Deprecated, +	public void setShowBanner(boolean showBanner) {, +		setBannerMode(showBanner ? Banner.Mode.CONSOLE : Banner.Mode.OFF);, +	}, +, +	/**, +	 * Sets the mode used to display the banner when the application runs. Defaults to, +	 * {@code Banner.Mode.CONSOLE}., +	 * @param bannerMode the mode used to display the banner, +	 */, +	public void setBannerMode(Banner.Mode bannerMode) {, +		this.bannerMode = bannerMode;, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.main.banner-mode=console # the mode used to display the banner (console, off, or log), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.main.banner_mode=off, +		.bannerMode(Banner.Mode.OFF), +	spring.main.banner_mode=console, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +		app.setBannerMode(Banner.Mode.OFF);, +		.bannerMode(Banner.Mode.OFF), +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.io.UnsupportedEncodingException;, +	private Banner.Mode bannerMode = Banner.Mode.CONSOLE;, +		if (this.bannerMode != Banner.Mode.OFF) {, +	 * @see #setBannerMode, +		if (this.bannerMode == Banner.Mode.LOG) {, +			try {, +				this.log.info(createStringFromBanner(selectedBanner, environment));, +			}, +			catch (UnsupportedEncodingException ex) {, +				this.log.warn("Failed to create String for banner", ex);, +			}, +			selectedBanner.printBanner(environment, this.mainApplicationClass,, +					System.out);, +	private String createStringFromBanner(Banner banner, Environment environment), +			throws UnsupportedEncodingException {, +		ByteArrayOutputStream baos = new ByteArrayOutputStream();, +		banner.printBanner(environment, this.mainApplicationClass, new PrintStream(baos));, +		String charset = environment.getProperty("banner.charset", "UTF-8");, +		return baos.toString(charset);, +	}, +, +	 * to {@code true}., +	 * @param showBanner if the banner should be shown, +	 * @deprecated since 1.3.0 in favor of {@link #setBannerMode}, +	@Deprecated, +	public void setShowBanner(boolean showBanner) {, +		setBannerMode(showBanner ? Banner.Mode.CONSOLE : Banner.Mode.OFF);]