[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +							.getLibraryDestination(library.getName(), library.getScope());, +					if (libraryDestination != null) {, +						Library existing = this.libraryEntryNames.putIfAbsent(, +								libraryDestination + library.getName(), library);, +				}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +							.getLibraryDestination(library.getName(), library.getScope());, +					if (libraryDestination != null) {, +						Library existing = this.libraryEntryNames.putIfAbsent(, +								libraryDestination + library.getName(), library);, +				}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +	@Test, +	public void layoutCanOmitLibraries() throws IOException {, +		TestJarFile libJar = new TestJarFile(this.temporaryFolder);, +		libJar.addClass("a/b/C.class", ClassWithoutMainMethod.class);, +		final File libJarFile = libJar.getFile();, +		this.testJarFile.addClass("a/b/C.class", ClassWithMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		Layout layout = mock(Layout.class);, +		final LibraryScope scope = mock(LibraryScope.class);, +		repackager.setLayout(layout);, +		repackager.repackage(, +				(callback) -> callback.library(new Library(libJarFile, scope)));, +		assertThat(getEntryNames(file)).containsExactly("META-INF/",, +				"META-INF/MANIFEST.MF", "a/", "a/b/", "a/b/C.class");, +	}, +]