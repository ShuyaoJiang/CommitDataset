[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +				result.put("hibernate.ejb.naming_strategy",, +						getHibernateNamingStrategy(existing));, +		private String getHibernateNamingStrategy(Map<String, String> existing) {, +			if (!isAlreadyProvided(existing, "ejb.naming_strategy"), +					&& this.namingStrategy != null) {, +				return this.namingStrategy.getName();, +			}, +			return DEFAULT_NAMING_STRATEGY;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +				result.put("hibernate.ejb.naming_strategy",, +						getHibernateNamingStrategy(existing));, +		private String getHibernateNamingStrategy(Map<String, String> existing) {, +			if (!isAlreadyProvided(existing, "ejb.naming_strategy"), +					&& this.namingStrategy != null) {, +				return this.namingStrategy.getName();, +			}, +			return DEFAULT_NAMING_STRATEGY;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +				result.put("hibernate.ejb.naming_strategy",, +						getHibernateNamingStrategy(existing));, +		private String getHibernateNamingStrategy(Map<String, String> existing) {, +			if (!isAlreadyProvided(existing, "ejb.naming_strategy"), +					&& this.namingStrategy != null) {, +				return this.namingStrategy.getName();, +			}, +			return DEFAULT_NAMING_STRATEGY;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Map;, +, +				"spring.jpa.properties.hibernate.ejb.naming_strategy_delegator:", +						+ "org.hibernate.cfg.naming.ImprovedNamingStrategyDelegator");, +		Map<String, String> hibernateProperties = bean.getHibernateProperties(dataSource);, +		assertThat(hibernateProperties.get("hibernate.ejb.naming_strategy"), nullValue());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +				result.put("hibernate.ejb.naming_strategy",, +						getHibernateNamingStrategy(existing));, +		private String getHibernateNamingStrategy(Map<String, String> existing) {, +			if (!isAlreadyProvided(existing, "ejb.naming_strategy"), +					&& this.namingStrategy != null) {, +				return this.namingStrategy.getName();, +			}, +			return DEFAULT_NAMING_STRATEGY;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Map;, +, +				"spring.jpa.properties.hibernate.ejb.naming_strategy_delegator:", +						+ "org.hibernate.cfg.naming.ImprovedNamingStrategyDelegator");, +		Map<String, String> hibernateProperties = bean.getHibernateProperties(dataSource);, +		assertThat(hibernateProperties.get("hibernate.ejb.naming_strategy"), nullValue());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfigurationTests.java, +		assertEquals(100, this.context.getBean(JedisConnectionFactory.class).getTimeout());, +	private AnnotationConfigApplicationContext doLoad(String... environment) {]