[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java, +import java.io.IOException;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.boot.context.event.SpringApplicationEvent;, +import org.springframework.core.env.Environment;, + * runtime with a System property or environment variable named "PIDFILE" (or "pidfile"), + * or using a {@code spring.application.pidfile} property in the Spring, + * {@link Environment}., +		ApplicationListener<SpringApplicationEvent>, Ordered {, +	private static final String[] SYSTEM_PROPERTY_VARIABLES = { "PIDFILE", "pidfile" };, +, +	private static final String SPRING_PROPERTY = "spring.application.pidfile";, +	private Class<? extends SpringApplicationEvent> triggerEventType = ApplicationPreparedEvent.class;, +, +		this(new File(DEFAULT_FILE_NAME));, +, +	/**, +	 * Sets the type of application event that will trigger writing of the PID file., +	 * Defaults to {@link ApplicationPreparedEvent}. NOTE: If you use the, +	 * {@link ApplicationPreparedEvent} to trigger the write, you will not be able to, +	 * specify the PID filename in the Spring {@link Environment}., +	 */, +	public void setTriggerEventType(, +			Class<? extends SpringApplicationEvent> triggerEventType) {, +		Assert.notNull(triggerEventType, "Trigger event type must not be null");, +		this.triggerEventType = triggerEventType;, +	public void onApplicationEvent(SpringApplicationEvent event) {, +		if (this.triggerEventType.isInstance(event)) {, +					writePidFile(event);, +	}, +, +	private void writePidFile(SpringApplicationEvent event) throws IOException {, +		File pidFile = this.file;, +		String override = SystemProperties.get(SYSTEM_PROPERTY_VARIABLES);, +		if (override != null) {, +			pidFile = new File(override);, +		}, +		else {, +			Environment environment = getEnvironment(event);, +			if (environment != null) {, +				override = new RelaxedPropertyResolver(environment), +						.getProperty(SPRING_PROPERTY);, +				if (override != null) {, +					pidFile = new File(override);, +				}, +			}, +		}, +		new ApplicationPid().write(pidFile);, +		pidFile.deleteOnExit();, +	}, +, +	private Environment getEnvironment(SpringApplicationEvent event) {, +		if (event instanceof ApplicationEnvironmentPreparedEvent) {, +			return ((ApplicationEnvironmentPreparedEvent) event).getEnvironment();, +		}, +		if (event instanceof ApplicationPreparedEvent) {, +			return ((ApplicationPreparedEvent) event).getApplicationContext(), +					.getEnvironment();, +		}, +		return null;, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java, +import java.io.IOException;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.boot.context.event.SpringApplicationEvent;, +import org.springframework.core.env.Environment;, + * runtime with a System property or environment variable named "PIDFILE" (or "pidfile"), + * or using a {@code spring.application.pidfile} property in the Spring, + * {@link Environment}., +		ApplicationListener<SpringApplicationEvent>, Ordered {, +	private static final String[] SYSTEM_PROPERTY_VARIABLES = { "PIDFILE", "pidfile" };, +, +	private static final String SPRING_PROPERTY = "spring.application.pidfile";, +	private Class<? extends SpringApplicationEvent> triggerEventType = ApplicationPreparedEvent.class;, +, +		this(new File(DEFAULT_FILE_NAME));, +, +	/**, +	 * Sets the type of application event that will trigger writing of the PID file., +	 * Defaults to {@link ApplicationPreparedEvent}. NOTE: If you use the, +	 * {@link ApplicationPreparedEvent} to trigger the write, you will not be able to, +	 * specify the PID filename in the Spring {@link Environment}., +	 */, +	public void setTriggerEventType(, +			Class<? extends SpringApplicationEvent> triggerEventType) {, +		Assert.notNull(triggerEventType, "Trigger event type must not be null");, +		this.triggerEventType = triggerEventType;, +	public void onApplicationEvent(SpringApplicationEvent event) {, +		if (this.triggerEventType.isInstance(event)) {, +					writePidFile(event);, +	}, +, +	private void writePidFile(SpringApplicationEvent event) throws IOException {, +		File pidFile = this.file;, +		String override = SystemProperties.get(SYSTEM_PROPERTY_VARIABLES);, +		if (override != null) {]