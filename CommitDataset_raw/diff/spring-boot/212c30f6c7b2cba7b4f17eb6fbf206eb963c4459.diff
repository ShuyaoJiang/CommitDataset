[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java, +	 * dependencies are resolved from the modules using the customizer's, +	 * {@link ArtifactCoordinatesResolver}., +			add(module, null, null, true);, +	 * version of the dependency are resolved from the module using the customizer's, +		return add(module, null, null, transitive);, +	}, +, +	/**, +	 * Add a single dependency with the specified classifier and type and, optionally, all, +	 * of its dependencies. The group ID and version of the dependency are resolved from, +	 * the module by using the customizer's {@link ArtifactCoordinatesResolver}., +	 * @param module The module ID, +	 * @param classifier The classifier, may be {@code null}, +	 * @param type The type, may be {@code null}, +	 * @param transitive {@code true} if the transitive dependencies should also be added,, +	 * otherwise {@code false}., +	 * @return this {@link DependencyCustomizer} for continued use, +	 */, +	public DependencyCustomizer add(String module, String classifier, String type,, +			boolean transitive) {, +					artifactCoordinatesResolver.getVersion(module), classifier, type,, +					transitive));, +			String version, String classifier, String type, boolean transitive) {, +		if (classifier != null) {, +			annotationNode.addMember("classifier", new ConstantExpression(classifier));, +		}, +		if (type != null) {, +			annotationNode.addMember("type", new ConstantExpression(type));, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java, +	 * dependencies are resolved from the modules using the customizer's, +	 * {@link ArtifactCoordinatesResolver}., +			add(module, null, null, true);, +	 * version of the dependency are resolved from the module using the customizer's, +		return add(module, null, null, transitive);, +	}, +, +	/**, +	 * Add a single dependency with the specified classifier and type and, optionally, all, +	 * of its dependencies. The group ID and version of the dependency are resolved from, +	 * the module by using the customizer's {@link ArtifactCoordinatesResolver}., +	 * @param module The module ID, +	 * @param classifier The classifier, may be {@code null}, +	 * @param type The type, may be {@code null}, +	 * @param transitive {@code true} if the transitive dependencies should also be added,, +	 * otherwise {@code false}., +	 * @return this {@link DependencyCustomizer} for continued use, +	 */, +	public DependencyCustomizer add(String module, String classifier, String type,, +			boolean transitive) {, +					artifactCoordinatesResolver.getVersion(module), classifier, type,, +					transitive));, +			String version, String classifier, String type, boolean transitive) {, +		if (classifier != null) {, +			annotationNode.addMember("classifier", new ConstantExpression(classifier));, +		}, +		if (type != null) {, +			annotationNode.addMember("type", new ConstantExpression(type));, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ArtifactCoordinatesResolver.java, + * A resolver for artifacts' Maven coordinates, allowing group id, artifact id, or version, + * to be obtained from a module identifier. A module identifier may be in the form, + * {@code groupId:artifactId:version}, in which case coordinate resolution simply extracts, + * the relevant piece from the identifier. Alternatively the identifier may be in the form, + * {@code artifactId}, in which case coordinate resolution uses implementation-specific, + * metadata to resolve the groupId and version., +	 * @return The artifact id of the module, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java, +	 * dependencies are resolved from the modules using the customizer's, +	 * {@link ArtifactCoordinatesResolver}., +			add(module, null, null, true);, +	 * version of the dependency are resolved from the module using the customizer's, +		return add(module, null, null, transitive);, +	}, +, +	/**, +	 * Add a single dependency with the specified classifier and type and, optionally, all, +	 * of its dependencies. The group ID and version of the dependency are resolved from, +	 * the module by using the customizer's {@link ArtifactCoordinatesResolver}., +	 * @param module The module ID, +	 * @param classifier The classifier, may be {@code null}, +	 * @param type The type, may be {@code null}, +	 * @param transitive {@code true} if the transitive dependencies should also be added,, +	 * otherwise {@code false}., +	 * @return this {@link DependencyCustomizer} for continued use, +	 */, +	public DependencyCustomizer add(String module, String classifier, String type,, +			boolean transitive) {, +					artifactCoordinatesResolver.getVersion(module), classifier, type,, +					transitive));, +			String version, String classifier, String type, boolean transitive) {, +		if (classifier != null) {, +			annotationNode.addMember("classifier", new ConstantExpression(classifier));, +		}, +		if (type != null) {, +			annotationNode.addMember("type", new ConstantExpression(type));, +		}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ArtifactCoordinatesResolver.java, + * A resolver for artifacts' Maven coordinates, allowing group id, artifact id, or version]