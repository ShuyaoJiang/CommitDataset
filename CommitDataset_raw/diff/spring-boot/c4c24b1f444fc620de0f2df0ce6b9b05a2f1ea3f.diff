[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +	private final Class<?> methodInvocationTreeType = findClass("com.sun.source.tree.MethodInvocationTree");, +, +	private final Method methodInvocationArgumentsMethod = findMethod(this.methodInvocationTreeType, "getArguments");, +, +	public Object getFactoryValue() throws Exception {, +		if (this.methodInvocationTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> arguments = (List<?>) this.methodInvocationArgumentsMethod.invoke(getInstance());, +			if (arguments.size() == 1) {, +				return new ExpressionTree(arguments.get(0)).getLiteralValue();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +	private final Class<?> methodInvocationTreeType = findClass("com.sun.source.tree.MethodInvocationTree");, +, +	private final Method methodInvocationArgumentsMethod = findMethod(this.methodInvocationTreeType, "getArguments");, +, +	public Object getFactoryValue() throws Exception {, +		if (this.methodInvocationTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> arguments = (List<?>) this.methodInvocationArgumentsMethod.invoke(getInstance());, +			if (arguments.size() == 1) {, +				return new ExpressionTree(arguments.get(0)).getLiteralValue();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +			Object factoryValue = expression.getFactoryValue();, +			if (factoryValue != null) {, +				return factoryValue;, +			}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +	private final Class<?> methodInvocationTreeType = findClass("com.sun.source.tree.MethodInvocationTree");, +, +	private final Method methodInvocationArgumentsMethod = findMethod(this.methodInvocationTreeType, "getArguments");, +, +	public Object getFactoryValue() throws Exception {, +		if (this.methodInvocationTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> arguments = (List<?>) this.methodInvocationArgumentsMethod.invoke(getInstance());, +			if (arguments.size() == 1) {, +				return new ExpressionTree(arguments.get(0)).getLiteralValue();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +			Object factoryValue = expression.getFactoryValue();, +			if (factoryValue != null) {, +				return factoryValue;, +			}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/fieldvalues/AbstractFieldValuesProcessorTests.java, + * Copyright 2012-2015 the original author or authors., +		assertThat(values.get("charset"), equalToObject("US-ASCII"));, +		assertThat(values.get("charsetConst"), equalToObject("UTF-8"));, +		assertThat(values.get("mimeType"), equalToObject("text/html"));, +		assertThat(values.get("mimeTypeConst"), equalToObject("text/plain"));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +	private final Class<?> methodInvocationTreeType = findClass("com.sun.source.tree.MethodInvocationTree");, +, +	private final Method methodInvocationArgumentsMethod = findMethod(this.methodInvocationTreeType, "getArguments");, +, +	public Object getFactoryValue() throws Exception {, +		if (this.methodInvocationTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> arguments = (List<?>) this.methodInvocationArgumentsMethod.invoke(getInstance());, +			if (arguments.size() == 1) {, +				return new ExpressionTree(arguments.get(0)).getLiteralValue();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, + * Copyright 2012-2015 the original author or authors., + * @author Stephane Nicoll, +			Object factoryValue = expression.getFactoryValue();, +			if (factoryValue != null) {, +				return factoryValue;, +			}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/fieldvalues/AbstractFieldValuesProcessorTests.java, + * Copyright 2012-2015 the original author or authors., +		assertThat(values.get("charset"), equalToObject("US-ASCII"));, +		assertThat(values.get("charsetConst"), equalToObject("UTF-8"));, +		assertThat(values.get("mimeType"), equalToObject("text/html"));]