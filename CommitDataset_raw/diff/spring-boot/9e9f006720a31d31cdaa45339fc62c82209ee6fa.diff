[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/JwtAccessTokenConverterRestTemplateCustomizer.java, +import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;, + * Callback for customizing the {@link RestTemplate} that is used to fetch the keys used, + * by {@link JwtAccessTokenConverter}., + * @see JwtAccessTokenConverter#setSigningKey(String), + * @see JwtAccessTokenConverter#setVerifierKey(String), +	 * Customize the {@code template} before it is initialized., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/JwtAccessTokenConverterRestTemplateCustomizer.java, +import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;, + * Callback for customizing the {@link RestTemplate} that is used to fetch the keys used, + * by {@link JwtAccessTokenConverter}., + * @see JwtAccessTokenConverter#setSigningKey(String), + * @see JwtAccessTokenConverter#setVerifierKey(String), +	 * Customize the {@code template} before it is initialized., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfiguration.java, +			if (!CollectionUtils.isEmpty(this.customizers)) {, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/JwtAccessTokenConverterRestTemplateCustomizer.java, +import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;, + * Callback for customizing the {@link RestTemplate} that is used to fetch the keys used, + * by {@link JwtAccessTokenConverter}., + * @see JwtAccessTokenConverter#setSigningKey(String), + * @see JwtAccessTokenConverter#setVerifierKey(String), +	 * Customize the {@code template} before it is initialized., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfiguration.java, +			if (!CollectionUtils.isEmpty(this.customizers)) {, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java, +import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.verify;, +	public void jwtAccessTokenConverterIsConfiguredWhenKeyUriIsProvided() {, +				"security.oauth2.resource.jwt.key-uri=http://localhost:12345/banana");, +		this.context = new SpringApplicationBuilder(ResourceConfiguration.class), +				.environment(this.environment).web(false).run();, +		assertThat(this.context.getBeansOfType(JwtAccessTokenConverter.class)).hasSize(1);, +	}, +, +	@Test, +	public void jwtAccessTokenConverterRestTemplateCanBeCustomized() {, +		EnvironmentTestUtils.addEnvironment(this.environment,, +				"security.oauth2.resource.jwt.key-uri=http://localhost:12345/banana");, +				JwtAccessTokenConverterRestTemplateCustomizerConfiguration.class), +						.environment(this.environment).web(false).run();, +		JwtAccessTokenConverterRestTemplateCustomizer customizer = this.context, +				.getBean(JwtAccessTokenConverterRestTemplateCustomizer.class);, +		verify(customizer).customize(any(RestTemplate.class));, +	@Configuration, +	static class JwtAccessTokenConverterRestTemplateCustomizerConfiguration {, +		@Bean, +		public JwtAccessTokenConverterRestTemplateCustomizer restTemplateCustomizer() {, +			return mock(JwtAccessTokenConverterRestTemplateCustomizer.class);]