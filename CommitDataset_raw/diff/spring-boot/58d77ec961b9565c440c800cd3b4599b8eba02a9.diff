[+++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot;, +, +import java.awt.Color;, +import java.awt.Image;, +, +import java.awt.image.BufferedImage;, +, +import java.io.PrintStream;, +, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, +import javax.imageio.ImageIO;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.boot.ansi.AnsiPropertySource;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertyResolver;, +import org.springframework.core.env.PropertySourcesPropertyResolver;, +import org.springframework.core.io.Resource;, +import org.springframework.util.Assert;, +, +/**, + * Banner implementation that prints ASCII art generated from an image resource, + * {@link Resource}., + *, + * @author Craig Burke, + */, +public class ImageBanner implements Banner {, +, +	private static final Log log = LogFactory.getLog(ImageBanner.class);, +, +	private static final double RED_WEIGHT = 0.2126d;, +	private static final double GREEN_WEIGHT = 0.7152d;, +	private static final double BLUE_WEIGHT = 0.0722d;, +, +	private static final int DEFAULT_MAX_WIDTH = 72;, +	private static final double DEFAULT_ASPECT_RATIO = 0.5d;, +	private static final boolean DEFAULT_DARK = false;, +, +	private Resource image;, +	private Map<String, Color> colors = new HashMap<String, Color>();, +, +	public ImageBanner(Resource image) {, +		Assert.notNull(image, "Image must not be null");, +		Assert.isTrue(image.exists(), "Image must exist");, +		this.image = image;, +		colorsInit();, +	}, +, +	private void colorsInit() {, +		this.colors.put("BLACK", new Color(0, 0, 0));, +		this.colors.put("RED", new Color(170, 0, 0));, +		this.colors.put("GREEN", new Color(0, 170, 0));, +		this.colors.put("YELLOW", new Color(170, 85, 0));, +		this.colors.put("BLUE", new Color(0, 0, 170));, +		this.colors.put("MAGENTA", new Color(170, 0, 170));, +		this.colors.put("CYAN", new Color(0, 170, 170));, +		this.colors.put("WHITE", new Color(170, 170, 170));, +, +		this.colors.put("BRIGHT_BLACK", new Color(85, 85, 85));, +		this.colors.put("BRIGHT_RED", new Color(255, 85, 85));, +		this.colors.put("BRIGHT_GREEN", new Color(85, 255, 85));, +		this.colors.put("BRIGHT_YELLOW", new Color(255, 255, 85));, +		this.colors.put("BRIGHT_BLUE", new Color(85, 85, 255));, +		this.colors.put("BRIGHT_MAGENTA", new Color(255, 85, 255));, +		this.colors.put("BRIGHT_CYAN", new Color(85, 255, 255));, +		this.colors.put("BRIGHT_WHITE", new Color(255, 255, 255));, +	}, +, +	@Override, +	public void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {, +		String headlessProperty = System.getProperty("java.awt.headless");, +		try {, +			System.setProperty("java.awt.headless", "true");, +			BufferedImage sourceImage = ImageIO.read(this.image.getInputStream());, +, +			int maxWidth = environment.getProperty("banner.image.max-width",, +					Integer.class, DEFAULT_MAX_WIDTH);]