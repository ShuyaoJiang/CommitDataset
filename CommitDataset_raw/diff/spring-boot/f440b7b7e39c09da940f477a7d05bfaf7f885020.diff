[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.function.Function;, +import org.gradle.api.file.FileCopyDetails;, +	private final Function<FileCopyDetails, ZipCompression> compressionResolver;, +	BootArchiveSupport(String loaderMainClass,, +			Function<FileCopyDetails, ZipCompression> compressionResolver) {, +		this.compressionResolver = compressionResolver;, +				this.launchScript, this.compressionResolver);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.function.Function;, +import org.gradle.api.file.FileCopyDetails;, +	private final Function<FileCopyDetails, ZipCompression> compressionResolver;, +	BootArchiveSupport(String loaderMainClass,, +			Function<FileCopyDetails, ZipCompression> compressionResolver) {, +		this.compressionResolver = compressionResolver;, +				this.launchScript, this.compressionResolver);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +import org.gradle.api.file.FileCopyDetails;, +			"org.springframework.boot.loader.JarLauncher", this::resolveZipCompression);, +	/**, +	 * Returns the {@link ZipCompression} that should be used when adding the file, +	 * represented by the given {@code details} to the jar., +	 * <p>, +	 * By default, any file in {@code BOOT-INF/lib/} is stored and all other files are, +	 * deflated., +	 *, +	 * @param details the details, +	 * @return the compression to use, +	 */, +	protected ZipCompression resolveZipCompression(FileCopyDetails details) {, +		if (details.getRelativePath().getPathString().startsWith("BOOT-INF/lib/")) {, +			return ZipCompression.STORED;, +		}, +		return ZipCompression.DEFLATED;, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.function.Function;, +import org.gradle.api.file.FileCopyDetails;, +	private final Function<FileCopyDetails, ZipCompression> compressionResolver;, +	BootArchiveSupport(String loaderMainClass,, +			Function<FileCopyDetails, ZipCompression> compressionResolver) {, +		this.compressionResolver = compressionResolver;, +				this.launchScript, this.compressionResolver);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +import org.gradle.api.file.FileCopyDetails;, +			"org.springframework.boot.loader.JarLauncher", this::resolveZipCompression);, +	/**, +	 * Returns the {@link ZipCompression} that should be used when adding the file, +	 * represented by the given {@code details} to the jar., +	 * <p>, +	 * By default, any file in {@code BOOT-INF/lib/} is stored and all other files are, +	 * deflated., +	 *, +	 * @param details the details, +	 * @return the compression to use, +	 */, +	protected ZipCompression resolveZipCompression(FileCopyDetails details) {, +		if (details.getRelativePath().getPathString().startsWith("BOOT-INF/lib/")) {, +			return ZipCompression.STORED;, +		}, +		return ZipCompression.DEFLATED;, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootWar.java, +import org.gradle.api.file.FileCopyDetails;, +			"org.springframework.boot.loader.WarLauncher", this::resolveZipCompression);, +	/**, +	 * Returns the {@link ZipCompression} that should be used when adding the file, +	 * represented by the given {@code details} to the jar., +	 * <p>, +	 * By default, any file in {@code WEB-INF/lib/} or {@code WEB-INF/lib-provided/} is, +	 * stored and all other files are deflated., +	 *, +	 * @param details the details, +	 * @return the compression to use, +	 */, +	protected ZipCompression resolveZipCompression(FileCopyDetails details) {, +		String relativePath = details.getRelativePath().getPathString();, +		if (relativePath.startsWith("WEB-INF/lib/"), +				|| relativePath.startsWith("WEB-INF/lib-provided/")) {, +			return ZipCompression.STORED;, +		}, +		return ZipCompression.DEFLATED;, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.function.Function;, +import org.gradle.api.file.FileCopyDetails;, +	private final Function<FileCopyDetails, ZipCompression> compressionResolver;, +	BootArchiveSupport(String loaderMainClass,, +			Function<FileCopyDetails, ZipCompression> compressionResolver) {, +		this.compressionResolver = compressionResolver;, +				this.launchScript, this.compressionResolver);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootJar.java, +import org.gradle.api.file.FileCopyDetails;, +			"org.springframework.boot.loader.JarLauncher", this::resolveZipCompression);, +	/**, +	 * Returns the {@link ZipCompression} that should be used when adding the file, +	 * represented by the given {@code details} to the jar.]