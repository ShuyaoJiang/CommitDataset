[+++ b/docs/howto.md, +### Spring Batch, +, +If you are using Spring Batch then it comes pre-packaged with SQL, +initialization scripts for most popular database platforms. Spring, +Boot will detect your database type, and execute those scripts by, +default, and in this case will switch the fail fast setting to false, +(errors are logged but do not prevent the application from, +starting). This is because the scripts are known to be reliable and, +generally do not contain bugs, so errors are ignorable, and ignoring, +them makes the scripts idempotent. You can switch off the, +initialization explicitly using, +`spring.batch.initializer.enabled=false`., +, +## Execute Spring Batch Jobs on Startup, +, +Spring Batch autoconfiguration is enabled by adding, +`@EnableBatchProcessing` (from Spring Batch) somewhere in your, +context., +, +By default it executes *all* `Jobs` in the application context on, +startup (see, +[JobLauncherCommandLineRunner](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java), +for details). You can narrow down to a specific job or jobs by, +specifying `spring.batch.job.names` (comma separated job name, +patterns). , +, +If the application context includes a `JobRegistry` then, +the jobs in `spring.batch.job.names` are looked up in the regsitry, +instead of bein autowired from the context. This is a common pattern, +with more complex systems where multiple jobs are defined in child, +contexts and registered centrally., +, +See, +[BatchAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java), +and, +[@EnableBatchProcessing](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.java), +for more details., +, +++ b/docs/howto.md, +### Spring Batch, +, +If you are using Spring Batch then it comes pre-packaged with SQL, +initialization scripts for most popular database platforms. Spring, +Boot will detect your database type, and execute those scripts by, +default, and in this case will switch the fail fast setting to false, +(errors are logged but do not prevent the application from, +starting). This is because the scripts are known to be reliable and, +generally do not contain bugs, so errors are ignorable, and ignoring, +them makes the scripts idempotent. You can switch off the, +initialization explicitly using, +`spring.batch.initializer.enabled=false`., +, +## Execute Spring Batch Jobs on Startup, +, +Spring Batch autoconfiguration is enabled by adding, +`@EnableBatchProcessing` (from Spring Batch) somewhere in your, +context., +, +By default it executes *all* `Jobs` in the application context on, +startup (see, +[JobLauncherCommandLineRunner](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java), +for details). You can narrow down to a specific job or jobs by, +specifying `spring.batch.job.names` (comma separated job name, +patterns). , +, +If the application context includes a `JobRegistry` then, +the jobs in `spring.batch.job.names` are looked up in the regsitry, +instead of bein autowired from the context. This is a common pattern, +with more complex systems where multiple jobs are defined in child, +contexts and registered centrally., +, +See, +[BatchAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java), +and, +[@EnableBatchProcessing](https://github.com/spring-projects/spring-batch/blob/master/spring-batch-core/src/main/java/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.java), +for more details., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import org.springframework.batch.core.JobParametersInvalidException;, +import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;, +import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;, +import org.springframework.batch.core.repository.JobRestartException;, +					if (this.jobs.contains(job)) {, +						continue;, +					execute(job, jobParameters);, +				catch (NoSuchJobException nsje) {, +	protected void execute(Job job, JobParameters jobParameters), +			throws JobExecutionAlreadyRunningException, JobRestartException,, +			JobInstanceAlreadyCompleteException, JobParametersInvalidException {, +		String jobName = job.getName();, +		JobExecution previousExecution = this.jobRepository.getLastJobExecution(jobName,, +				jobParameters);, +		if (previousExecution == null || previousExecution.getStatus().isUnsuccessful()) {, +			JobExecution execution = this.jobLauncher.run(job, jobParameters);, +			if (this.publisher != null) {, +				this.publisher.publishEvent(new JobExecutionEvent(execution));, +			}, +		}, +	}]