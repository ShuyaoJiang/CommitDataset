[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@JooqTest` can be used in a similar fashion as `@JdbcTest` but for jOOQ related tests. As, +jOOQ relies heavily on a Java-based schema that corresponds with the database schema, the, +existing `DataSource` will be used. If you want to replace it by an in-memory database you, +can use `@AutoconfigureTestDatabase` to override those settings., +, +`@JooqTest` will configure a `DSLContext`. Regular `@Component` beans will not be loaded, +into the `ApplicationContext`:, +	public class ExampleJooqTests {, +, +		private DSLContext dslContext;, +JOOQ tests are transactional and rollback at the end of each test by default. If that's, +not what you want, you can disable transaction management for a test or for the whole test, +class as <<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown, +in the example above>>., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@JooqTest` can be used in a similar fashion as `@JdbcTest` but for jOOQ related tests. As, +jOOQ relies heavily on a Java-based schema that corresponds with the database schema, the, +existing `DataSource` will be used. If you want to replace it by an in-memory database you, +can use `@AutoconfigureTestDatabase` to override those settings., +, +`@JooqTest` will configure a `DSLContext`. Regular `@Component` beans will not be loaded, +into the `ApplicationContext`:, +	public class ExampleJooqTests {, +, +		private DSLContext dslContext;, +JOOQ tests are transactional and rollback at the end of each test by default. If that's, +not what you want, you can disable transaction management for a test or for the whole test, +class as <<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown, +in the example above>>., +++ b/spring-boot-test-autoconfigure/pom.xml, +			<groupId>org.jooq</groupId>, +			<artifactId>jooq</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@JooqTest` can be used in a similar fashion as `@JdbcTest` but for jOOQ related tests. As, +jOOQ relies heavily on a Java-based schema that corresponds with the database schema, the, +existing `DataSource` will be used. If you want to replace it by an in-memory database you, +can use `@AutoconfigureTestDatabase` to override those settings., +, +`@JooqTest` will configure a `DSLContext`. Regular `@Component` beans will not be loaded, +into the `ApplicationContext`:, +	public class ExampleJooqTests {, +, +		private DSLContext dslContext;, +JOOQ tests are transactional and rollback at the end of each test by default. If that's, +not what you want, you can disable transaction management for a test or for the whole test, +class as <<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown, +in the example above>>., +++ b/spring-boot-test-autoconfigure/pom.xml, +			<groupId>org.jooq</groupId>, +			<artifactId>jooq</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jooq/JooqTest.java, + * By default, tests annotated with {@code @JooqTest} use the configured database. If, + * you want to replace any explicit or usually auto-configured DataSource by an embedded, + * in-memory database, the {@link AutoConfigureTestDatabase @AutoConfigureTestDatabase}, + * annotation can be used to override these settings., + * @author Stephane Nicoll, +, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +`@JooqTest` can be used in a similar fashion as `@JdbcTest` but for jOOQ related tests. As, +jOOQ relies heavily on a Java-based schema that corresponds with the database schema, the, +existing `DataSource` will be used. If you want to replace it by an in-memory database you, +can use `@AutoconfigureTestDatabase` to override those settings., +, +`@JooqTest` will configure a `DSLContext`. Regular `@Component` beans will not be loaded, +into the `ApplicationContext`:, +	public class ExampleJooqTests {, +, +		private DSLContext dslContext;, +JOOQ tests are transactional and rollback at the end of each test by default. If that's, +not what you want, you can disable transaction management for a test or for the whole test, +class as <<boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test,shown, +in the example above>>., +++ b/spring-boot-test-autoconfigure/pom.xml, +			<groupId>org.jooq</groupId>, +			<artifactId>jooq</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jooq/JooqTest.java, + * By default, tests annotated with {@code @JooqTest} use the configured database. If, + * you want to replace any explicit or usually auto-configured DataSource by an embedded, + * in-memory database, the {@link AutoConfigureTestDatabase @AutoConfigureTestDatabase}, + * annotation can be used to override these settings., + * @author Stephane Nicoll, +, +, +++ b/spring-boot-test-autoconfigure/src/main/resources/META-INF/spring.factories, +# AutoConfigureTestDatabase auto-configuration imports, +org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase=\, +org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration,\, +org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, +]