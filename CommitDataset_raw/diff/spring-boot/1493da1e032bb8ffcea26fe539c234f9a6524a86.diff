[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.favicon.enabled=true, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.favicon.enabled=true, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	@Bean, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.favicon.enabled=true, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	@Bean, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +== Enabling production-ready features, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.favicon.enabled=true, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	@Bean, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +== Enabling production-ready features, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +|`logback.xml` or `logback.groovy`, +WARNING: There are known classloading issues with Java Util Logging that cause problems, +* Automatic registration of `MessageCodesResolver` (see below)., +		factory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/notfound.html"));, +* If HikariCP is available we will use it., +* Lastly, if Commons DBCP2 is available we will use it., +* Spring Data JPA -- Makes it easy to implement JPA-based repositories., +several conveniences for working with MongoDB, including the, +	import com.mongodb.DB;, +You can also declare your own `MongoDbFactory` or `Mongo` bean if you want to take, +connect to a broker using the `netty` transport protocol. When the latter is, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.favicon.enabled=true, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	@Bean, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +== Enabling production-ready features, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +|`logback.xml` or `logback.groovy`, +WARNING: There are known classloading issues with Java Util Logging that cause problems, +* Automatic registration of `MessageCodesResolver` (see below)., +		factory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/notfound.html"));, +* If HikariCP is available we will use it., +* Lastly, if Commons DBCP2 is available we will use it., +* Spring Data JPA -- Makes it easy to implement JPA-based repositories., +several conveniences for working with MongoDB, including the, +	import com.mongodb.DB;, +You can also declare your own `MongoDbFactory` or `Mongo` bean if you want to take, +connect to a broker using the `netty` transport protocol. When the latter is, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +On the last point: since the default config files accept, +|Support for the FreeMarker templating engine., +|Support for the Groovy templating engine., +|Support for `spring-mobile`., +|Support for the Velocity templating engine., +|Support for Spring Web Services., +|Imports the Jetty HTTP engine (to be used as an alternative to Tomcat)., +|Support the Log4J logging framework., +|Imports the Undertow HTTP engine (to be used as an alternative to Tomcat).]