[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		if (!exchange.getResponse().isCommitted()) {, +		else {, +			return Mono.error(throwable);, +		}, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +		if (!exchange.getResponse().isCommitted()) {, +		else {, +			return Mono.error(throwable);, +		}, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTest.java, +import org.springframework.web.server.ServerWebExchange;, +	@Test, +	public void responseCommitted() throws Exception {, +		load();, +		this.webTestClient.get().uri("/commit").exchange(), +				.expectStatus().isEqualTo(HttpStatus.OK), +				.expectBody().isEmpty();, +		this.output.expect(not(containsString("java.lang.UnsupportedOperationException")));, +		this.output.expect(containsString("java.lang.IllegalStateException: already committed!"));, +	}, +, +			@GetMapping("/commit"), +			public Mono<Void> commit(ServerWebExchange exchange) {, +				return exchange, +						.getResponse().writeWith(Mono.empty()), +						.then(Mono.error(new IllegalStateException("already committed!")));, +			}, +]