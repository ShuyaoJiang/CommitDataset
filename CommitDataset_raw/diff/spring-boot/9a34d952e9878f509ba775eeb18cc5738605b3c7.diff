[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +			pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());, +			pooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(, +					pool.getBlockIfFullTimeout());, +			pooledConnectionFactory.setCreateConnectionOnStartup(, +					pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());, +			pooledConnectionFactory.setMaximumActiveSessionPerConnection(, +					pool.getMaximumActiveSessionPerConnection());, +			pooledConnectionFactory.setReconnectOnException(, +					pool.isReconnectOnException());, +			pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(, +					pool.getTimeBetweenExpirationCheck());, +			pooledConnectionFactory.setUseAnonymousProducers(, +					pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +			pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());, +			pooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(, +					pool.getBlockIfFullTimeout());, +			pooledConnectionFactory.setCreateConnectionOnStartup(, +					pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeout());, +			pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());, +			pooledConnectionFactory.setMaximumActiveSessionPerConnection(, +					pool.getMaximumActiveSessionPerConnection());, +			pooledConnectionFactory.setReconnectOnException(, +					pool.isReconnectOnException());, +			pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(, +					pool.getTimeBetweenExpirationCheck());, +			pooledConnectionFactory.setUseAnonymousProducers(, +					pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * Copyright 2012-2017 the original author or authors., +		 * Block when a connection is requested and the pool is full. Set it to false to, +		 * throw a "JMSException" instead., +		private boolean blockIfFull = true;, +, +		/**, +		 * Blocking period, in milliseconds, before throwing an exception if the pool, +		 * is still full., +		 */, +		private long blockIfFullTimeout = -1;, +, +		/**, +		 * Create a connection on startup. Can be used to warm-up the pool on startup., +		 */, +		private boolean createConnectionOnStartup = true;, +, +		/**, +		 * Connection expiration timeout in milliseconds., +		 */, +		private long expiryTimeout = 0;, +		 * Maximum number of pooled connections., +		private int maxConnections = 1;, +, +		/**, +		 * Maximum number of active sessions per connection., +		 */, +		private int maximumActiveSessionPerConnection = 500;, +, +		/**, +		 * Reset the connection when a "JMXException" occurs., +		 */, +		private boolean reconnectOnException = true;, +, +		/**, +		 * Time to sleep, in milliseconds, between runs of the idle connection eviction, +		 * thread. When negative, no idle connection eviction thread runs., +		 */, +		private long timeBetweenExpirationCheck = -1;, +, +		/**, +		 * Use only one anonymous "MessageProducer" instance. Set it to false to create, +		 * one "MessageProducer" every time one is required., +		 */, +		private boolean useAnonymousProducers = true;, +		public boolean isBlockIfFull() {, +			return this.blockIfFull;, +		public void setBlockIfFull(boolean blockIfFull) {, +			this.blockIfFull = blockIfFull;, +		}, +, +		public long getBlockIfFullTimeout() {, +			return this.blockIfFullTimeout;, +		}, +, +		public void setBlockIfFullTimeout(long blockIfFullTimeout) {, +			this.blockIfFullTimeout = blockIfFullTimeout;, +		}, +, +		public boolean isCreateConnectionOnStartup() {, +			return this.createConnectionOnStartup;, +		}, +, +		public void setCreateConnectionOnStartup(boolean createConnectionOnStartup) {, +			this.createConnectionOnStartup = createConnectionOnStartup;, +		}, +, +		public long getExpiryTimeout() {]