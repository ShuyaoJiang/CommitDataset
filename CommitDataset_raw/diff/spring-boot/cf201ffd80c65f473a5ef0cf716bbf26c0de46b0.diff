[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, +	private List<String> beanClasses;, +	private List<String> beanNames;, +	protected List<String> getBeanClasses() {, +		return this.beanClasses;, +	}, +, +	protected List<String> getBeanNames() {, +		return this.beanNames;, +	}, +, +		this.beanClasses = collect(attributes, "value");, +		this.beanNames = collect(attributes, "name");, +		Assert.isTrue(this.beanClasses.size() > 0 || this.beanNames.size() > 0, "@", +				+ ClassUtils.getShortName(annotationClass()), +		for (String beanClass : this.beanClasses) {, +		for (String beanName : this.beanNames) {, +			if (!this.beanClasses.isEmpty()) {, +						+ this.beanClasses);, +			if (!this.beanNames.isEmpty()) {, +				this.logger.debug(checking + "Looking for beans with names: ", +						+ this.beanNames);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AbstractOnBeanCondition.java, +	private List<String> beanClasses;, +	private List<String> beanNames;, +	protected List<String> getBeanClasses() {, +		return this.beanClasses;, +	}, +, +	protected List<String> getBeanNames() {, +		return this.beanNames;, +	}, +, +		this.beanClasses = collect(attributes, "value");, +		this.beanNames = collect(attributes, "name");, +		Assert.isTrue(this.beanClasses.size() > 0 || this.beanNames.size() > 0, "@", +				+ ClassUtils.getShortName(annotationClass()), +		for (String beanClass : this.beanClasses) {, +		for (String beanName : this.beanNames) {, +			if (!this.beanClasses.isEmpty()) {, +						+ this.beanClasses);, +			if (!this.beanNames.isEmpty()) {, +				this.logger.debug(checking + "Looking for beans with names: ", +						+ this.beanNames);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/AssertMissingBean.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.bootstrap.context.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.Conditional;, +, +/**, + * {@link Conditional} that only matches when the specified bean classes and/or names are, + * not already contained in the {@link BeanFactory}, and throws an exception otherwise., + * , + * @author Dave Syer, + */, +@Target({ ElementType.TYPE, ElementType.METHOD }), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +@Conditional(AssertMissingBeanCondition.class), +public @interface AssertMissingBean {, +, +	/**, +	 * The class type of bean that should be checked. The condition matches when each, +	 * class specified is missing in the {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<?>[] value() default {};, +, +	/**, +	 * The names of beans to check. The condition matches when each bean name specified is, +	 * missing in the {@link ApplicationContext}., +	 * @return the name of beans to check, +	 */, +	String[] name() default {};, +, +}]