[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +The preceding example shows how `A.class` can be found in `/BOOT-INF/classes` in, +`myapp.jar` at position `0063`. `B.class` from the nested jar can actually be found in, +`myapp.jar` at position `3452`, and `C.class` is at position `3980`., +There are three launcher subclasses (`JarLauncher`, `WarLauncher`, and, +`PropertiesLauncher`). Their purpose is to load resources (`.class` files and so on.) from, +nested jar files or war files in directories (as opposed to those explicitly on the, +classpath). In the case of `JarLauncher` and `WarLauncher`, the nested paths are fixed., +`JarLauncher` looks in `BOOT-INF/lib/`, and `WarLauncher` looks in `WEB-INF/lib/` and, +`WEB-INF/lib-provided/`. You can add extra jars in those locations if you want more. The, +`PropertiesLauncher` looks in `BOOT-INF/lib/` in your application archive by default, but, +you can add additional locations by setting an environment variable called `LOADER_PATH`, +or `loader.path` in `loader.properties` (which is a comma-separated list of directories,, +archives, or directories within archives)., +|Comma-separated Classpath, such as `lib,${HOME}/app/lib`. Earlier entries take, + precedence, like a regular `-classpath` on the `javac` command line., +|Used to resolve relative paths in `loader.path`. For example, given `loader.path=lib`,, + then `${loader.home}/lib` is a classpath location (along with all jar files in that, +* `loader.path` can contain directories (which are scanned recursively for jar and zip, +  files), archive paths, a directory within an archive that is scanned for jar files (for, +  nested one if running from an archive). Because of this, `PropertiesLauncher` behaves, +  the same as `JarLauncher` when no additional configuration is provided., +If the preceding restrictions mean that you cannot use Spring Boot Loader, consider the, +following alternatives:]