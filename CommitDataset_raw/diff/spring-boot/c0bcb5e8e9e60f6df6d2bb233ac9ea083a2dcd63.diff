[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded()), NONE(new Layouts.None());, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded()), NONE(new Layouts.None());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java, + * @author Dave Syer, +	 * Executable expanded archive layout., +	 */, +	public static class None extends Jar {, +, +		@Override, +		public String getLauncherClassName() {, +			return null;, +		}, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded()), NONE(new Layouts.None());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java, + * @author Dave Syer, +	 * Executable expanded archive layout., +	 */, +	public static class None extends Jar {, +, +		@Override, +		public String getLauncherClassName() {, +			return null;, +		}, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +		String launcherClassName = this.layout.getLauncherClassName();, +		if (launcherClassName != null) {, +			manifest.getMainAttributes(), +					.putValue(MAIN_CLASS_ATTRIBUTE, launcherClassName);, +		}, +		else if (startClass != null) {, +			manifest.getMainAttributes().putValue(MAIN_CLASS_ATTRIBUTE, startClass);, +		}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded()), NONE(new Layouts.None());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java, + * @author Dave Syer, +	 * Executable expanded archive layout., +	 */, +	public static class None extends Jar {, +, +		@Override, +		public String getLauncherClassName() {, +			return null;, +		}, +	}, +, +	/**, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +		String launcherClassName = this.layout.getLauncherClassName();, +		if (launcherClassName != null) {, +			manifest.getMainAttributes(), +					.putValue(MAIN_CLASS_ATTRIBUTE, launcherClassName);, +		}, +		else if (startClass != null) {, +			manifest.getMainAttributes().putValue(MAIN_CLASS_ATTRIBUTE, startClass);, +		}, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +	public void noMainClassAndLayoutIsNone() throws Exception {, +		this.testJarFile.addClass("a/b/C.class", ClassWithMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		repackager.setLayout(new Layouts.None());, +		repackager.repackage(file, NO_LIBRARIES);, +		Manifest actualManifest = getManifest(file);, +		assertThat(actualManifest.getMainAttributes().getValue("Main-Class"),, +				equalTo("a.b.C"));, +	}, +, +	@Test, +	public void noMainClassAndLayoutIsNoneWithNoMain() throws Exception {, +		this.testJarFile.addClass("a/b/C.class", ClassWithoutMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		repackager.setLayout(new Layouts.None());, +		repackager.repackage(file, NO_LIBRARIES);, +		Manifest actualManifest = getManifest(file);, +		assertThat(actualManifest.getMainAttributes().getValue("Main-Class"),, +				equalTo(null));, +	}, +, +	@Test, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +		JAR(new Layouts.Jar()), WAR(new Layouts.War()), ZIP(new Layouts.Expanded()), DIR(new Layouts.Expanded()), NONE(new Layouts.None());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java, + * @author Dave Syer, +	 * Executable expanded archive layout., +	 */, +	public static class None extends Jar {, +, +		@Override, +		public String getLauncherClassName() {]