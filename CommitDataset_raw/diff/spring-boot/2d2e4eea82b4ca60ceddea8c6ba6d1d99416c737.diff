[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		EnvironmentTestUtils.addEnvironment(context,, +				"endpoints.metrics.filter.enabled:false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		EnvironmentTestUtils.addEnvironment(context,, +				"endpoints.metrics.filter.enabled:false");, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			processNestedType(prefix, element, name, getter, field,, +					getter.getReturnType());, +			if (isLombokField(field, element)) {, +				processNestedType(prefix, element, name, null, field, field.asType());, +	private void processNestedType(String prefix, TypeElement element, String name,, +			ExecutableElement getter, VariableElement field, TypeMirror returnType) {, +		Element returnElement = this.processingEnv.getTypeUtils().asElement(returnType);, +		boolean isNested = isNested(returnElement, field, element);, +		AnnotationMirror annotation = getAnnotation(getter,, +				configurationPropertiesAnnotation());, +		if (returnElement != null && returnElement instanceof TypeElement, +				&& annotation == null && isNested) {, +			String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, name);, +			this.metadataCollector.add(ItemMetadata.newGroup(nestedPrefix,, +					this.typeUtils.getType(returnElement),, +					this.typeUtils.getType(element),, +					(getter == null ? null : getter.toString())));, +			processTypeElement(nestedPrefix, (TypeElement) returnElement);, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		EnvironmentTestUtils.addEnvironment(context,, +				"endpoints.metrics.filter.enabled:false");, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			processNestedType(prefix, element, name, getter, field,, +					getter.getReturnType());, +			if (isLombokField(field, element)) {, +				processNestedType(prefix, element, name, null, field, field.asType());, +	private void processNestedType(String prefix, TypeElement element, String name,, +			ExecutableElement getter, VariableElement field, TypeMirror returnType) {, +		Element returnElement = this.processingEnv.getTypeUtils().asElement(returnType);, +		boolean isNested = isNested(returnElement, field, element);, +		AnnotationMirror annotation = getAnnotation(getter,, +				configurationPropertiesAnnotation());, +		if (returnElement != null && returnElement instanceof TypeElement, +				&& annotation == null && isNested) {, +			String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, name);, +			this.metadataCollector.add(ItemMetadata.newGroup(nestedPrefix,, +					this.typeUtils.getType(returnElement),, +					this.typeUtils.getType(element),, +					(getter == null ? null : getter.toString())));, +			processTypeElement(nestedPrefix, (TypeElement) returnElement);, +		}, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +		// For some reason the annotation processor resolves a type for SimpleLombokPojo, +		// that is resolved (compiled) and the source annotations are gone. Because we, +		// don't see the @Data annotation anymore, no field is harvested. What is crazy is, +		// that a sample project works fine so this seem to be related to the unit test, +		// environment for some reason. assertThat(metadata,, +		// containsProperty("config.third.value"));, +	public void mergingOfAdditionalMetadata() throws Exception {, +		File metaInfFolder = new File(this.compiler.getOutputLocation(), "META-INF");, +		metaInfFolder.mkdirs();, +		File additionalMetadataFile = new File(metaInfFolder,, +				"additional-spring-configuration-metadata.json");, +		additionalMetadataFile.createNewFile();, +		JSONObject property = new JSONObject();, +		property.put("name", "foo");, +		property.put("type", "java.lang.String");, +		property.put("sourceType", AdditionalMetadata.class.getName());, +		JSONArray properties = new JSONArray();, +		properties.put(property);, +		JSONObject additionalMetadata = new JSONObject();, +		additionalMetadata.put("properties", properties);, +		FileWriter writer = new FileWriter(additionalMetadataFile);, +		additionalMetadata.write(writer);, +		writer.flush();, +		ConfigurationMetadata metadata = compile(SimpleProperties.class);, +		assertThat(metadata, containsProperty("simple.comparator"));, +		assertThat(metadata, containsProperty("foo", String.class), +				.fromSource(AdditionalMetadata.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		EnvironmentTestUtils.addEnvironment(context,, +				"endpoints.metrics.filter.enabled:false");, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			processNestedType(prefix, element, name, getter, field,, +					getter.getReturnType());, +			if (isLombokField(field, element)) {, +				processNestedType(prefix, element, name, null, field, field.asType());, +	private void processNestedType(String prefix, TypeElement element, String name,, +			ExecutableElement getter, VariableElement field, TypeMirror returnType) {, +		Element returnElement = this.processingEnv.getTypeUtils().asElement(returnType);, +		boolean isNested = isNested(returnElement, field, element);, +		AnnotationMirror annotation = getAnnotation(getter,, +				configurationPropertiesAnnotation());, +		if (returnElement != null && returnElement instanceof TypeElement, +				&& annotation == null && isNested) {]