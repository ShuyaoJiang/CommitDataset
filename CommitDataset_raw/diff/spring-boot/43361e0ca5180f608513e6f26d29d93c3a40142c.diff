[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +		else if (event instanceof ApplicationFailedEvent) {, +			onApplicationFailedEvent();, +		}, +	private void onApplicationFailedEvent() {, +		if (this.loggingSystem != null) {, +			this.loggingSystem.cleanUp();, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +		else if (event instanceof ApplicationFailedEvent) {, +			onApplicationFailedEvent();, +		}, +	private void onApplicationFailedEvent() {, +		if (this.loggingSystem != null) {, +			this.loggingSystem.cleanUp();, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +		LoggerContext loggerContext = getLoggerContext();, +		if (isAlreadyInitialized(loggerContext)) {, +			return;, +		}, +		loggerContext.getConfiguration().addFilter(FILTER);, +		LoggerContext loggerContext = getLoggerContext();, +		if (isAlreadyInitialized(loggerContext)) {, +			return;, +		}, +		loggerContext.getConfiguration().removeFilter(FILTER);, +		markAsInitialized(loggerContext);, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LoggerContext loggerContext = getLoggerContext();, +		markAsUninitialized(loggerContext);, +	}, +, +	private boolean isAlreadyInitialized(LoggerContext loggerContext) {, +		return LoggingSystem.class.getName().equals(loggerContext.getExternalContext());, +	}, +, +	private void markAsInitialized(LoggerContext loggerContext) {, +		loggerContext.setExternalContext(LoggingSystem.class.getName());, +	}, +, +	private void markAsUninitialized(LoggerContext loggerContext) {, +		loggerContext.setExternalContext(null);, +	}, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +		else if (event instanceof ApplicationFailedEvent) {, +			onApplicationFailedEvent();, +		}, +	private void onApplicationFailedEvent() {, +		if (this.loggingSystem != null) {, +			this.loggingSystem.cleanUp();, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +		LoggerContext loggerContext = getLoggerContext();, +		if (isAlreadyInitialized(loggerContext)) {, +			return;, +		}, +		loggerContext.getConfiguration().addFilter(FILTER);, +		LoggerContext loggerContext = getLoggerContext();, +		if (isAlreadyInitialized(loggerContext)) {, +			return;, +		}, +		loggerContext.getConfiguration().removeFilter(FILTER);, +		markAsInitialized(loggerContext);, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LoggerContext loggerContext = getLoggerContext();, +		markAsUninitialized(loggerContext);, +	}, +, +	private boolean isAlreadyInitialized(LoggerContext loggerContext) {, +		return LoggingSystem.class.getName().equals(loggerContext.getExternalContext());, +	}, +, +	private void markAsInitialized(LoggerContext loggerContext) {, +		loggerContext.setExternalContext(LoggingSystem.class.getName());, +	}, +, +	private void markAsUninitialized(LoggerContext loggerContext) {, +		loggerContext.setExternalContext(null);, +	}, +, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		LoggerContext loggerContext = getLoggerContext();, +		if (isAlreadyInitialized(loggerContext)) {]