[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import java.util.function.BiFunction;, +, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints.CouchbaseService;, +			builder = builder.keyValueServiceConfig(, +					KeyValueServiceConfig.create(endpoints.getKeyValue()));, +				builder = builder.queryTimeout(timeouts.getQuery().toMillis());, +				builder = builder.queryServiceConfig(getQueryServiceConfig(endpoints));, +				builder = builder.viewServiceConfig(getViewServiceConfig(endpoints));, +				builder = builder.sslEnabled(true);, +					builder = builder.sslKeystoreFile(ssl.getKeyStore());, +					builder = builder.sslKeystorePassword(ssl.getKeyStorePassword());, +		@SuppressWarnings("deprecation"), +		private QueryServiceConfig getQueryServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getQueryservice(), endpoints.getQuery(),, +					QueryServiceConfig::create);, +		}, +, +		@SuppressWarnings("deprecation"), +		private ViewServiceConfig getViewServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getViewservice(), endpoints.getView(),, +					ViewServiceConfig::create);, +		}, +, +		private <T> T getServiceConfig(CouchbaseService service, Integer fallback,, +				BiFunction<Integer, Integer, T> factory) {, +			if (service.getMinEndpoints() != 1 || service.getMaxEndpoints() != 1) {, +				return factory.apply(service.getMinEndpoints(),, +						service.getMaxEndpoints());, +			return factory.apply(endpoints, endpoints);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import java.util.function.BiFunction;, +, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints.CouchbaseService;, +			builder = builder.keyValueServiceConfig(, +					KeyValueServiceConfig.create(endpoints.getKeyValue()));, +				builder = builder.queryTimeout(timeouts.getQuery().toMillis());, +				builder = builder.queryServiceConfig(getQueryServiceConfig(endpoints));, +				builder = builder.viewServiceConfig(getViewServiceConfig(endpoints));, +				builder = builder.sslEnabled(true);, +					builder = builder.sslKeystoreFile(ssl.getKeyStore());, +					builder = builder.sslKeystorePassword(ssl.getKeyStorePassword());, +		@SuppressWarnings("deprecation"), +		private QueryServiceConfig getQueryServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getQueryservice(), endpoints.getQuery(),, +					QueryServiceConfig::create);, +		}, +, +		@SuppressWarnings("deprecation"), +		private ViewServiceConfig getViewServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getViewservice(), endpoints.getView(),, +					ViewServiceConfig::create);, +		}, +, +		private <T> T getServiceConfig(CouchbaseService service, Integer fallback,, +				BiFunction<Integer, Integer, T> factory) {, +			if (service.getMinEndpoints() != 1 || service.getMaxEndpoints() != 1) {, +				return factory.apply(service.getMinEndpoints(),, +						service.getMaxEndpoints());, +			return factory.apply(endpoints, endpoints);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import java.util.function.BiFunction;, +, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints.CouchbaseService;, +			builder = builder.keyValueServiceConfig(, +					KeyValueServiceConfig.create(endpoints.getKeyValue()));, +				builder = builder.queryTimeout(timeouts.getQuery().toMillis());, +				builder = builder.queryServiceConfig(getQueryServiceConfig(endpoints));, +				builder = builder.viewServiceConfig(getViewServiceConfig(endpoints));, +				builder = builder.sslEnabled(true);, +					builder = builder.sslKeystoreFile(ssl.getKeyStore());, +					builder = builder.sslKeystorePassword(ssl.getKeyStorePassword());, +		@SuppressWarnings("deprecation"), +		private QueryServiceConfig getQueryServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getQueryservice(), endpoints.getQuery(),, +					QueryServiceConfig::create);, +		}, +, +		@SuppressWarnings("deprecation"), +		private ViewServiceConfig getViewServiceConfig(Endpoints endpoints) {, +			return getServiceConfig(endpoints.getViewservice(), endpoints.getView(),, +					ViewServiceConfig::create);, +		}, +, +		private <T> T getServiceConfig(CouchbaseService service, Integer fallback,, +				BiFunction<Integer, Integer, T> factory) {, +			if (service.getMinEndpoints() != 1 || service.getMaxEndpoints() != 1) {, +				return factory.apply(service.getMinEndpoints(),, +						service.getMaxEndpoints());, +			return factory.apply(endpoints, endpoints);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class,, +			LiquibaseProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import java.util.function.BiFunction;]