[+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/CleanCommand.java, +import java.util.ArrayList;, +import java.util.Collections;, +, +import joptsimple.OptionParser;, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, + * {@link Command} to 'clean' up grapes, removing cached dependencies and forcing a, + * download on the next attempt to resolve., +public class CleanCommand extends OptionParsingCommand {, +, +	private OptionSpec<Void> allOption;, +	public String getUsageHelp() {, +		return "[options] <dependencies>";, +	}, +, +	@Override, +	protected OptionParser createOptionParser() {, +		OptionParser parser = new OptionParser();, +		this.allOption = parser.accepts("all", "Clean all files (not just snapshots)");, +		return parser;, +	}, +, +	@Override, +	protected void run(OptionSet options) throws Exception {, +		ArrayList<String> specs = new ArrayList<String>(options.nonOptionArguments());, +		if (!specs.contains("org.springframework.bootstrap")) {, +			specs.add(0, "org.springframework.bootstrap");, +		}, +		for (String spec : specs) {, +			String group = spec;, +			String module = null;, +			if (spec.contains(":")) {, +				group = spec.substring(0, spec.indexOf(":"));, +				module = spec.substring(spec.indexOf(":") + 1);, +			}, +			File file = module == null ? new File(grapes, group) : new File(new File(, +					grapes, group), module);, +				if (options.has(this.allOption), +						|| group.equals("org.springframework.bootstrap")) {, +				} else {, +					for (Object obj : FileUtil.listAll(file, Collections.emptyList())) {, +						File candidate = (File) obj;, +						if (candidate.getName().contains("SNAPSHOT")) {, +							FileUtil.forceDelete(candidate);, +						}, +					}, +				}, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/CleanCommand.java, +import java.util.ArrayList;, +import java.util.Collections;, +, +import joptsimple.OptionParser;, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, + * {@link Command} to 'clean' up grapes, removing cached dependencies and forcing a, + * download on the next attempt to resolve., +public class CleanCommand extends OptionParsingCommand {, +, +	private OptionSpec<Void> allOption;, +	public String getUsageHelp() {, +		return "[options] <dependencies>";, +	}, +, +	@Override, +	protected OptionParser createOptionParser() {, +		OptionParser parser = new OptionParser();, +		this.allOption = parser.accepts("all", "Clean all files (not just snapshots)");, +		return parser;, +	}, +, +	@Override, +	protected void run(OptionSet options) throws Exception {, +		ArrayList<String> specs = new ArrayList<String>(options.nonOptionArguments());, +		if (!specs.contains("org.springframework.bootstrap")) {, +			specs.add(0, "org.springframework.bootstrap");, +		}, +		for (String spec : specs) {, +			String group = spec;, +			String module = null;, +			if (spec.contains(":")) {, +				group = spec.substring(0, spec.indexOf(":"));, +				module = spec.substring(spec.indexOf(":") + 1);, +			}, +			File file = module == null ? new File(grapes, group) : new File(new File(, +					grapes, group), module);, +				if (options.has(this.allOption), +						|| group.equals("org.springframework.bootstrap")) {, +				} else {, +					for (Object obj : FileUtil.listAll(file, Collections.emptyList())) {, +						File candidate = (File) obj;, +						if (candidate.getName().contains("SNAPSHOT")) {, +							FileUtil.forceDelete(candidate);, +						}, +					}, +				}, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/SpringBootstrapCli.java, +				System.out.println(String.format("\n  %1$s %2$-15s\n    %3$s",, +						command.getName(), command.getUsageHelp(),]