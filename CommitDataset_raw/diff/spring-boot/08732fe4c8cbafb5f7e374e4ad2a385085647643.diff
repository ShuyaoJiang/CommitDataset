[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Retry;, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Template;, +import org.springframework.retry.backoff.ExponentialBackOffPolicy;, +import org.springframework.retry.policy.SimpleRetryPolicy;, +import org.springframework.retry.support.RetryTemplate;, +	public RabbitTemplate rabbitTemplate(RabbitProperties config) {, +		Template template = config.getTemplate();, +		Retry retry = template.getRetry();, +		if (retry.isEnable()) {, +			RetryTemplate retryTemplate = new RetryTemplate();, +			SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();, +			retryPolicy.setMaxAttempts(retry.getMaxAttempts());, +			retryTemplate.setRetryPolicy(retryPolicy);, +			ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();, +			backOffPolicy.setInitialInterval(retry.getInitialInterval());, +			backOffPolicy.setMultiplier(retry.getMultiplier());, +			backOffPolicy.setMaxInterval(retry.getMaxInterval());, +			retryTemplate.setBackOffPolicy(backOffPolicy);, +			rabbitTemplate.setRetryTemplate(retryTemplate);, +		}, +		if (template.getReceiveTimeout() != null) {, +			rabbitTemplate.setReceiveTimeout(template.getReceiveTimeout());, +		}, +		if (template.getReplyTimeout() != null) {, +			rabbitTemplate.setReplyTimeout(template.getReplyTimeout());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Retry;, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Template;, +import org.springframework.retry.backoff.ExponentialBackOffPolicy;, +import org.springframework.retry.policy.SimpleRetryPolicy;, +import org.springframework.retry.support.RetryTemplate;, +	public RabbitTemplate rabbitTemplate(RabbitProperties config) {, +		Template template = config.getTemplate();, +		Retry retry = template.getRetry();, +		if (retry.isEnable()) {, +			RetryTemplate retryTemplate = new RetryTemplate();, +			SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();, +			retryPolicy.setMaxAttempts(retry.getMaxAttempts());, +			retryTemplate.setRetryPolicy(retryPolicy);, +			ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();, +			backOffPolicy.setInitialInterval(retry.getInitialInterval());, +			backOffPolicy.setMultiplier(retry.getMultiplier());, +			backOffPolicy.setMaxInterval(retry.getMaxInterval());, +			retryTemplate.setBackOffPolicy(backOffPolicy);, +			rabbitTemplate.setRetryTemplate(retryTemplate);, +		}, +		if (template.getReceiveTimeout() != null) {, +			rabbitTemplate.setReceiveTimeout(template.getReceiveTimeout());, +		}, +		if (template.getReplyTimeout() != null) {, +			rabbitTemplate.setReplyTimeout(template.getReplyTimeout());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +	private final Template template = new Template();, +, +	public Template getTemplate() {, +		return this.template;, +	}, +, +		/**, +		 * Whether rejected deliveries are requeued by default; default true., +		 */, +		private Boolean defaultRequeueRejected;, +, +		/**, +		 * Optional properties for a retry interceptor., +		 */, +		private final ListenerRetry retry = new ListenerRetry();, +, +, +		public Boolean getDefaultRequeueRejected() {, +			return this.defaultRequeueRejected;, +		}, +, +		public void setDefaultRequeueRejected(Boolean defaultRequeueRejected) {, +			this.defaultRequeueRejected = defaultRequeueRejected;, +		}, +, +		public ListenerRetry getRetry() {, +			return this.retry;, +		}, +, +	}, +, +	public static class Template {, +, +		private final Retry retry = new Retry();, +, +		/**, +		 * Timeout for receive() operations., +		 */, +		private Long receiveTimeout;, +, +		/**, +		 * Timeout for sendAndReceive() operations., +		 */, +		private Long replyTimeout;, +]