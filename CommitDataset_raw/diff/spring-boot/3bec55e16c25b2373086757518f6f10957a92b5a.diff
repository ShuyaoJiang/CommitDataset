[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(, +					ReactiveSecurityAutoConfiguration.class,, +					WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class,, +					HealthIndicatorAutoConfiguration.class,, +					HealthEndpointAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.health().block().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(, +					ReactiveSecurityAutoConfiguration.class,, +					WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class,, +					HealthIndicatorAutoConfiguration.class,, +					HealthEndpointAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.health().block().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.getHealth().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(, +					ReactiveSecurityAutoConfiguration.class,, +					WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class,, +					HealthIndicatorAutoConfiguration.class,, +					HealthEndpointAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.health().block().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.getHealth().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java, +				|| (showDetails == ShowDetails.WHEN_AUTHENTICATED && principal == null)) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(, +					ReactiveSecurityAutoConfiguration.class,, +					WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class,, +					HealthIndicatorAutoConfiguration.class,, +					HealthEndpointAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.health().block().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.getHealth().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java, +				|| (showDetails == ShowDetails.WHEN_AUTHENTICATED && principal == null)) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Similar to Spring MVC applications, you can secure your WebFlux applications by adding, +the `spring-boot-starter-security` dependency. The default security configuration is, +implemented in `ReactiveSecurityAutoConfiguration` and in the classes imported from there, +(`WebFluxSecurityConfiguration` for web security and, +`ReactiveAuthenticationManagerConfiguration` for authentication configuration, which is, +also relevant in non-web applications). To switch off the default web application security, +configuration completely, you can add a bean of type `WebFilterChainProxy` (doing so does, +not disable the authentication manager configuration or Actuator's security)., +endpoints and static resources. `EndpointRequest` can be used to create a, +`ServerWebExchangeMatcher` that is based on the `management.endpoints.web.base-path`, +property., +include::{code-examples}/web/security/CustomWebFluxSecurityExample.java[tag=configuration], +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(, +					ReactiveSecurityAutoConfiguration.class,, +					WebClientAutoConfiguration.class,, +					ManagementContextAutoConfiguration.class,, +					HealthIndicatorAutoConfiguration.class,, +					HealthEndpointAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.health().block().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtensionTests.java, +			.withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,, +		this.contextRunner.run((context) -> {, +			assertThat(extension.getHealth().getBody().getDetails()).isNotEmpty();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpointWebExtension.java, +				|| (showDetails == ShowDetails.WHEN_AUTHENTICATED && principal == null)) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Similar to Spring MVC applications, you can secure your WebFlux applications by adding, +the `spring-boot-starter-security` dependency. The default security configuration is, +implemented in `ReactiveSecurityAutoConfiguration` and in the classes imported from there, +(`WebFluxSecurityConfiguration` for web security and, +`ReactiveAuthenticationManagerConfiguration` for authentication configuration, which is, +also relevant in non-web applications). To switch off the default web application security, +configuration completely, you can add a bean of type `WebFilterChainProxy` (doing so does, +not disable the authentication manager configuration or Actuator's security)., +endpoints and static resources. `EndpointRequest` can be used to create a, +`ServerWebExchangeMatcher` that is based on the `management.endpoints.web.base-path`, +property., +include::{code-examples}/web/security/CustomWebFluxSecurityExample.java[tag=configuration], +, +++ b/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/web/security/CustomWebFluxSecurityExample.java, +	// @formatter:off, +	// tag::configuration[], +	// end::configuration[], +	// @formatter:on]