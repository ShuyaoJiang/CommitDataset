[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java, +	private boolean autoStart;, +		this(server, true);, +	}, +, +	/**, +	 * Create a new {@link JettyEmbeddedServletContainer} instance., +	 * @param server the underlying Jetty server, +	 */, +	public JettyEmbeddedServletContainer(Server server, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (!this.autoStart) {, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java, +	private boolean autoStart;, +		this(server, true);, +	}, +, +	/**, +	 * Create a new {@link JettyEmbeddedServletContainer} instance., +	 * @param server the underlying Jetty server, +	 */, +	public JettyEmbeddedServletContainer(Server server, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (!this.autoStart) {, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +		return new JettyEmbeddedServletContainer(server, getPort() > 0);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java, +	private boolean autoStart;, +		this(server, true);, +	}, +, +	/**, +	 * Create a new {@link JettyEmbeddedServletContainer} instance., +	 * @param server the underlying Jetty server, +	 */, +	public JettyEmbeddedServletContainer(Server server, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (!this.autoStart) {, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +		return new JettyEmbeddedServletContainer(server, getPort() > 0);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +	private boolean autoStart;, +, +		this(tomcat, true);, +	}, +, +	/**, +	 * Create a new {@link TomcatEmbeddedServletContainer} instance., +	 * @param tomcat the underlying Tomcat server, +	 */, +	public TomcatEmbeddedServletContainer(Tomcat tomcat, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (connector != null && this.autoStart) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java, +	private boolean autoStart;, +		this(server, true);, +	}, +, +	/**, +	 * Create a new {@link JettyEmbeddedServletContainer} instance., +	 * @param server the underlying Jetty server, +	 */, +	public JettyEmbeddedServletContainer(Server server, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (!this.autoStart) {, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +		return new JettyEmbeddedServletContainer(server, getPort() > 0);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +	private boolean autoStart;, +, +		this(tomcat, true);, +	}, +, +	/**, +	 * Create a new {@link TomcatEmbeddedServletContainer} instance., +	 * @param tomcat the underlying Tomcat server, +	 */, +	public TomcatEmbeddedServletContainer(Tomcat tomcat, boolean autoStart) {, +		this.autoStart = autoStart;, +		if (connector != null && this.autoStart) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		if (getPort() > 0) {, +		}, +		else {, +			connector.setPort(8080);, +		}, +		return new TomcatEmbeddedServletContainer(tomcat, getPort() > 0);]