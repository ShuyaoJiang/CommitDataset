[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +						(context) -> assertThat(context, +		this.contextRunner.run((context) -> assertThat(, +				context.getBean(AuthenticationEventPublisher.class)), +						.isInstanceOf(DefaultAuthenticationEventPublisher.class));, +				.run((context) -> assertThat(, +						context.getBean(AuthenticationEventPublisher.class)).isInstanceOf(, +								AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class));, +		this.contextRunner.withConfiguration(, +				AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run(, +						(context) -> assertThat(context, +												- 100));, +				.withPropertyValues("spring.security.filter.order:12345").run(, +						(context) -> assertThat(context, +										.getOrder()).isEqualTo(12345));, +		this.contextRunner.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> assertThat(context.getBean(JpaTransactionManager.class)), +		this.contextRunner.run((context) -> assertThat(context), +				.run((context) -> {, +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +						(context) -> assertThat(context, +		this.contextRunner.run((context) -> assertThat(, +				context.getBean(AuthenticationEventPublisher.class)), +						.isInstanceOf(DefaultAuthenticationEventPublisher.class));, +				.run((context) -> assertThat(, +						context.getBean(AuthenticationEventPublisher.class)).isInstanceOf(, +								AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class));, +		this.contextRunner.withConfiguration(, +				AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run(, +						(context) -> assertThat(context, +												- 100));, +				.withPropertyValues("spring.security.filter.order:12345").run(, +						(context) -> assertThat(context, +										.getOrder()).isEqualTo(12345));, +		this.contextRunner.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> assertThat(context.getBean(JpaTransactionManager.class)), +		this.contextRunner.run((context) -> assertThat(context), +				.run((context) -> {, +				.run((context) -> {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +		GenericMultiArgCallback<StringBuilder> callbackInstance = (n, s,, +				b) -> fail("Should not get here");, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +		GenericMultiArgCallback<StringBuilder> callbackInstance = (n, s,, +				b) -> fail("Should not get here");, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +						(context) -> assertThat(context, +		this.contextRunner.run((context) -> assertThat(, +				context.getBean(AuthenticationEventPublisher.class)), +						.isInstanceOf(DefaultAuthenticationEventPublisher.class));, +				.run((context) -> assertThat(, +						context.getBean(AuthenticationEventPublisher.class)).isInstanceOf(, +								AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class));, +		this.contextRunner.withConfiguration(, +				AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run(, +						(context) -> assertThat(context, +												- 100));, +				.withPropertyValues("spring.security.filter.order:12345").run(, +						(context) -> assertThat(context, +										.getOrder()).isEqualTo(12345));, +		this.contextRunner.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> {, +				.run((context) -> assertThat(context.getBean(JpaTransactionManager.class)), +		this.contextRunner.run((context) -> assertThat(context), +				.run((context) -> {, +				.run((context) -> {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/util/LambdaSafeTests.java, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +		GenericMultiArgCallback<StringBuilder> callbackInstance = (n, s,, +				b) -> fail("Should not get here");, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +		GenericMultiArgCallback<StringBuilder> callbackInstance = (n, s,, +				b) -> fail("Should not get here");, +		GenericCallback<StringBuilder> callbackInstance = (s) -> fail(, +				"Should not get here");, +++ b/spring-boot-samples/spring-boot-sample-secure-webflux/src/test/java/sample/secure/webflux/SampleSecureWebFluxCustomSecurityTests.java, +					.matchers(PathRequest.toStaticResources().atCommonLocations()), +					.permitAll().pathMatchers("/login").permitAll().anyExchange(), +					.authenticated().and().httpBasic();]