[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		addPropertySources(environment, application.getResourceLoader());, +	protected void addPropertySources(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader) {, +			new Loader(environment, resourceLoader).load();, +		private final ResourceLoader resourceLoader;, +		public Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {, +			this.resourceLoader = resourceLoader == null ? new DefaultResourceLoader(), +					: resourceLoader;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		addPropertySources(environment, application.getResourceLoader());, +	protected void addPropertySources(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader) {, +			new Loader(environment, resourceLoader).load();, +		private final ResourceLoader resourceLoader;, +		public Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {, +			this.resourceLoader = resourceLoader == null ? new DefaultResourceLoader(), +					: resourceLoader;, +++ b/spring-boot/src/main/java/org/springframework/boot/test/ConfigFileApplicationContextInitializer.java, +				addPropertySources(applicationContext.getEnvironment(),, +						applicationContext);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +		addPropertySources(environment, application.getResourceLoader());, +	protected void addPropertySources(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader) {, +			new Loader(environment, resourceLoader).load();, +		private final ResourceLoader resourceLoader;, +		public Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {, +			this.resourceLoader = resourceLoader == null ? new DefaultResourceLoader(), +					: resourceLoader;, +++ b/spring-boot/src/main/java/org/springframework/boot/test/ConfigFileApplicationContextInitializer.java, +				addPropertySources(applicationContext.getEnvironment(),, +						applicationContext);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import org.springframework.core.io.ByteArrayResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +	public void loadCustomResource() throws Exception {, +		this.event.getSpringApplication().setResourceLoader(new ResourceLoader() {, +			@Override, +			public Resource getResource(final String location) {, +				if (location.equals("classpath:/custom.properties")) {, +					return new ByteArrayResource("my.property: fromcustom".getBytes(),, +							location) {, +						@Override, +						public String getFilename() {, +							return location;, +						}, +					};, +				}, +				return null;, +			}, +, +			@Override, +			public ClassLoader getClassLoader() {, +				return getClass().getClassLoader();, +			}, +		});, +		this.initializer.setSearchNames("custom");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("fromcustom"));, +	}, +, +	@Test]