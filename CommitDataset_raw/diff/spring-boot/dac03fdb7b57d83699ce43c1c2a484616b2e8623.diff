[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class }), +		@Autowired, +		private WebMvcProperties mvcProperties = new WebMvcProperties();, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "locale"), +			return new FixedLocaleResolver(, +					StringUtils.parseLocaleString(this.mvcProperties.getLocale()));, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "date-format"), +			return new DateFormatter(this.mvcProperties.getDateFormat());, +			if (this.mvcProperties.getMessageCodesResolverFormat() != null) {, +				resolver.setMessageCodeFormatter(this.mvcProperties, +						.getMessageCodesResolverFormat());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class }), +		@Autowired, +		private WebMvcProperties mvcProperties = new WebMvcProperties();, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "locale"), +			return new FixedLocaleResolver(, +					StringUtils.parseLocaleString(this.mvcProperties.getLocale()));, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "date-format"), +			return new DateFormatter(this.mvcProperties.getDateFormat());, +			if (this.mvcProperties.getMessageCodesResolverFormat() != null) {, +				resolver.setMessageCodeFormatter(this.mvcProperties, +						.getMessageCodesResolverFormat());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.validation.DefaultMessageCodesResolver;, +, +/**, + * {@link ConfigurationProperties properties} for Spring MVC., + * , + * @author Phillip Webb, + * @since 1.1, + */, +@ConfigurationProperties("spring.mvc"), +public class WebMvcProperties {, +, +	private DefaultMessageCodesResolver.Format messageCodesResolverFormat;, +, +	private String locale;, +, +	private String dateFormat;, +, +	public DefaultMessageCodesResolver.Format getMessageCodesResolverFormat() {, +		return this.messageCodesResolverFormat;, +	}, +, +	public void setMessageCodesResolverFormat(, +			DefaultMessageCodesResolver.Format messageCodesResolverFormat) {, +		this.messageCodesResolverFormat = messageCodesResolverFormat;, +	}, +, +	public String getLocale() {, +		return this.locale;, +	}, +, +	public void setLocale(String locale) {, +		this.locale = locale;, +	}, +, +	public String getDateFormat() {, +		return this.dateFormat;, +	}, +, +	public void setDateFormat(String dateFormat) {, +		this.dateFormat = dateFormat;, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class }), +		@Autowired, +		private WebMvcProperties mvcProperties = new WebMvcProperties();, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "locale"), +			return new FixedLocaleResolver(, +					StringUtils.parseLocaleString(this.mvcProperties.getLocale()));, +		@ConditionalOnProperty(prefix = "spring.mvc.", value = "date-format"), +			return new DateFormatter(this.mvcProperties.getDateFormat());, +			if (this.mvcProperties.getMessageCodesResolverFormat() != null) {]