[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +such as build systems, auto-configuration, and how to run your applications. We also, +cover some Spring Boot best practices. Although there is nothing particularly special, +about Spring Boot (it is just another library that you can consume), there are a few, +choose Maven or Gradle. It is possible to get Spring Boot to work with other build, +systems (Ant, for example), but they are not particularly well supported., +practice, you do not need to provide a version for any of these dependencies in your, +build configuration, as Spring Boot is managing that for you. When you upgrade Spring, +Boot itself, these dependencies are upgraded as well in a consistent way., +The curated list contains all the spring modules that you can use with Spring Boot as, +well as a refined list of third party libraries. The list is available as a standard, +* Sensible, +https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html[resource, +* Sensible resource filtering for `application.properties` and `application.yml`, +including profile-specific files (for example, `application-foo.properties` and, +To configure your project to inherit from the `spring-boot-starter-parent` set the, +`parent`, as follows:, +TIP: Check the, +{github-code}/spring-boot-project/spring-boot-dependencies/pom.xml[`spring-boot-dependencies` pom], +Not everyone likes inheriting from the `spring-boot-starter-parent` POM. You may have, +your own corporate standard parent that you need to use or you may prefer to explicitly, +If you do not want to use the `spring-boot-starter-parent`, you can still keep the, +benefit of the dependency management (but not the plugin management) by using a, +`scope=import` dependency, as follows:, +For instance, to upgrade to another Spring Data release train, you could add the, +following element to your `pom.xml`:, +As explained in the "`<<spring-boot-features#boot-features-custom-starter,Creating Your, +Own Starter>>`" section, third party starters should not start with `spring-boot`, as it, +is reserved for official Spring Boot artifacts. Rather, a third-party starter typically, +exclude or swap specific technical facets:, +should be avoided. It can cause particular problems for Spring Boot applications that use, +the `@ComponentScan`, `@EntityScan`, or `@SpringBootApplication` annotations, since every, +class from every jar is read., +`SpringApplication` with XML sources, we generally recommend that your primary source be, +a single `@Configuration` class. Usually the class that defines the `main` method is a, +good candidate as the primary `@Configuration`., +application based on the jar dependencies that you have added. For example, if `HSQLDB`, +is on your classpath, and you have not manually configured any database connection beans,, +then Spring Boot auto-configures an in-memory database., +Auto-configuration is non-invasive. At any point, you can start to define your own, +configuration to replace specific parts of the auto-configuration. For example, if you, +add your own `DataSource` bean, the default embedded database support backs away., +If you need to find out what auto-configuration is currently being applied, and why,, +start your application with the `--debug` switch. Doing so enables debug logs for a, +selection of core loggers and logs an auto-configuration report to the console., +annotation and specify the fully qualified name instead. Finally, you can also control, +the list of auto-configuration classes to exclude by using the, +`spring.autoconfigure.exclude` property., +and their injected dependencies. For simplicity, we often find that using, +`@ComponentScan` (to find your beans) and using `@Autowired` (to do constructor, +injection) works well., +`@EnableAutoConfiguration`, and `@ComponentScan`. Since these annotations are so, +frequently used together (especially if you follow the, +<<using-boot-structuring-your-code, best practices>> above), Spring Boot provides a, +convenient `@SpringBootApplication` alternative., +One of the biggest advantages of packaging your application as a jar and using an, +embedded HTTP server is that you can run your application as you would any other., +Debugging Spring Boot applications is also easy. You do not need any special IDE plugins, +or extensions., +You can run a Spring Boot application from your IDE as a simple Java application., +However, you first need to import your project. Import steps vary depending on your IDE, +and build system. Most IDEs can import Maven projects directly. For example, Eclipse, +users can select `Import...` -> `Existing Maven Projects` from the `File` menu., +error. STS users can use the `Relaunch` button rather than the `Run` button to ensure, +that any existing instance is closed., +application in an exploded form. The `bootRun` task is added whenever you apply the, +`org.springframework.boot` and `java` plugins and is shown in the following example:, +You might also want to use the `JAVA_OPTS` operating system environment variable, as, +shown in the following example:, +fast feedback loop for code changes. By default, any entry on the classpath that points, +to a folder is monitored for changes. Note that certain resources, such as static assets, +and view templates, <<using-boot-devtools-restart-exclude, do not need to restart the, +and triggers a restart. In IntelliJ IDEA, building the project, +(`Build +->+ Make Project`) has the same effect., +build plugins (Maven and Gradle), since DevTools needs an isolated application, +classloader to operate properly. By default, Gradle and Maven do that when they detect, +DevTools on the classpath., +NOTE: When deciding if an entry on the classpath should trigger a restart when it, +changes, DevTools automatically ignores projects named `spring-boot`,, +`spring-boot-devtools`, `spring-boot-autoconfigure`, `spring-boot-actuator`, and, +`spring-boot-starter`., +and a new one is created. This approach means that application restarts are typically, +much faster than "`cold starts`", since the _base_ classloader is already available and, +<<using-boot-devtools-livereload, live reload>>. If you want to customize these, +exclusions, you can use the `spring.devtools.restart.exclude` property. For example, to, +exclude only `/static` and `/public` you would set the following property:, +`spring.devtools.restart.additional-paths` property to configure additional paths to, +watch for changes. You can use the `spring.devtools.restart.exclude` property, +`spring.devtools.restart.enabled` property. In most cases, you can set this property in, +your `application.properties` (doing so still initializes the restart classloader, but it, +does not watch for file changes)., +property to `false` before calling `SpringApplication.run(...)`, as shown in the, +following example:, +is a special file that must be modified when you want to actually trigger a restart, +check. Changing the file only triggers the check and the restart will only occur if, +Devtools has detected it has to do something. The trigger file can be updated manually or, +with an IDE plugin., +To use a trigger file, set the `spring.devtools.restart.trigger-file` property to the, +path of your trigger file., +to trigger a browser refresh when a resource is changed. LiveReload browser extensions]