[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	public SpringCli(String... args) {, +			this.init.run(args);, +		String[] init = new String[1];, +		for (String arg : args) {, +			if (arg.startsWith("--init")) {, +				init[0] = arg;, +			}, +		}, +		if (init[0] != null) {, +			String[] newargs = new String[args.length - 1];, +			System.arraycopy(args, 1, newargs, 0, newargs.length);, +			args = newargs;, +		}, +		else {, +			init = new String[0];, +		}, +		int exitCode = new SpringCli(init).runAndHandleErrors(args);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	public SpringCli(String... args) {, +			this.init.run(args);, +		String[] init = new String[1];, +		for (String arg : args) {, +			if (arg.startsWith("--init")) {, +				init[0] = arg;, +			}, +		}, +		if (init[0] != null) {, +			String[] newargs = new String[args.length - 1];, +			System.arraycopy(args, 1, newargs, 0, newargs.length);, +			args = newargs;, +		}, +		else {, +			init = new String[0];, +		}, +		int exitCode = new SpringCli(init).runAndHandleErrors(args);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +import joptsimple.OptionSpec;, +import org.springframework.util.StringUtils;, +		private static final String DEFAULT_PATH = "file:init.groovy,file:spring.groovy";, +		private OptionSpec<String> initOption;, +		protected void doOptions() {, +			this.initOption = option("init",, +					"Path to init file as comma-separated list (default file:init.groovy,file:spring.groovy)"), +					.withOptionalArg().defaultsTo(, +							System.getProperty("spring.cli.init", DEFAULT_PATH));, +		}, +, +		@Override, +			String[] paths = StringUtils.commaDelimitedListToStringArray(this.initOption, +					.value(options));, +			SourceOptions sourceOptions = new SourceOptions(options, loader, paths);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +	public SpringCli(String... args) {, +			this.init.run(args);, +		String[] init = new String[1];, +		for (String arg : args) {, +			if (arg.startsWith("--init")) {, +				init[0] = arg;, +			}, +		}, +		if (init[0] != null) {, +			String[] newargs = new String[args.length - 1];, +			System.arraycopy(args, 1, newargs, 0, newargs.length);, +			args = newargs;, +		}, +		else {, +			init = new String[0];, +		}, +		int exitCode = new SpringCli(init).runAndHandleErrors(args);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java, +import joptsimple.OptionSpec;, +import org.springframework.util.StringUtils;, +		private static final String DEFAULT_PATH = "file:init.groovy,file:spring.groovy";, +		private OptionSpec<String> initOption;, +		protected void doOptions() {, +			this.initOption = option("init",, +					"Path to init file as comma-separated list (default file:init.groovy,file:spring.groovy)"), +					.withOptionalArg().defaultsTo(, +							System.getProperty("spring.cli.init", DEFAULT_PATH));, +		}, +, +		@Override, +			String[] paths = StringUtils.commaDelimitedListToStringArray(this.initOption, +					.value(options));, +			SourceOptions sourceOptions = new SourceOptions(options, loader, paths);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/util/ResourceUtils.java, +import java.net.MalformedURLException;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.FileSystemResourceLoader;, +import org.springframework.util.Assert;, +		Set<String> result = new LinkedHashSet<String>();, +			result.addAll(getUrls(FILE_URL_PREFIX + path, classLoader));, +		path = stripLeadingSlashes(path);, +		result.addAll(getUrls(ALL_CLASSPATH_URL_PREFIX + path, classLoader));, +		return new ArrayList<String>(result);, +		Resource[] resources = new PathMatchingResourcePatternResolver(]