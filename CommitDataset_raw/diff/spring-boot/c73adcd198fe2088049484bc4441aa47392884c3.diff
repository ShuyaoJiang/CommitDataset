[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.Collections;, +import javax.tools.Diagnostic.Kind;, +import org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser;, +import org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser;, +	private FieldValuesParser fieldValuesParser;, +, +		try {, +			this.fieldValuesParser = new JavaCompilerFieldValuesParser(env);, +		}, +		catch (Throwable ex) {, +			this.fieldValuesParser = FieldValuesParser.NONE;, +			logWarning("Field value processing of @ConfigurationProperty meta-data is ", +					+ "not supported");, +		}, +	}, +, +	private void logWarning(String msg) {, +		this.processingEnv.getMessager().printMessage(Kind.WARNING, msg);, +		Map<String, Object> fieldValues = getFieldValues(element);, +		processSimpleTypes(prefix, element, members, fieldValues);, +	private Map<String, Object> getFieldValues(TypeElement element) {, +		try {, +			return this.fieldValuesParser.getFieldValues(element);, +		}, +		catch (Exception ex) {, +			return Collections.emptyMap();, +		}, +	}, +, +			TypeElementMembers members, Map<String, Object> fieldValues) {, +				Object defaultValue = fieldValues.get(name);, +						sourceType, null, description, defaultValue));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.util.Collections;, +import javax.tools.Diagnostic.Kind;, +import org.springframework.boot.configurationprocessor.fieldvalues.FieldValuesParser;, +import org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser;, +	private FieldValuesParser fieldValuesParser;, +, +		try {, +			this.fieldValuesParser = new JavaCompilerFieldValuesParser(env);, +		}, +		catch (Throwable ex) {, +			this.fieldValuesParser = FieldValuesParser.NONE;, +			logWarning("Field value processing of @ConfigurationProperty meta-data is ", +					+ "not supported");, +		}, +	}, +, +	private void logWarning(String msg) {, +		this.processingEnv.getMessager().printMessage(Kind.WARNING, msg);, +		Map<String, Object> fieldValues = getFieldValues(element);, +		processSimpleTypes(prefix, element, members, fieldValues);, +	private Map<String, Object> getFieldValues(TypeElement element) {, +		try {, +			return this.fieldValuesParser.getFieldValues(element);, +		}, +		catch (Exception ex) {, +			return Collections.emptyMap();, +		}, +	}, +, +			TypeElementMembers members, Map<String, Object> fieldValues) {, +				Object defaultValue = fieldValues.get(name);, +						sourceType, null, description, defaultValue));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/FieldValuesParser.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor.fieldvalues;, +, +import java.util.Collections;, +import java.util.Map;, +, +import javax.lang.model.element.TypeElement;, +, +import org.springframework.boot.configurationprocessor.fieldvalues.javac.JavaCompilerFieldValuesParser;, +, +/**, + * Parser which can be used to obtain the field values from an {@link TypeElement}., + *, + * @author Phillip Webb, + * @since 1.1.2, + * @see JavaCompilerFieldValuesParser, + */, +public interface FieldValuesParser {]