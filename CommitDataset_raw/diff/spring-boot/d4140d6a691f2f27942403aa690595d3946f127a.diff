[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		/**, +		 * Whether servlet filters should be initialized on startup., +		 */, +		private boolean eagerFilterInit = true;, +, +		public boolean isEagerFilterInit() {, +			return this.eagerFilterInit;, +		}, +, +		public void setEagerFilterInit(boolean eagerFilterInit) {, +			this.eagerFilterInit = eagerFilterInit;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		/**, +		 * Whether servlet filters should be initialized on startup., +		 */, +		private boolean eagerFilterInit = true;, +, +		public boolean isEagerFilterInit() {, +			return this.eagerFilterInit;, +		}, +, +		public void setEagerFilterInit(boolean eagerFilterInit) {, +			this.eagerFilterInit = eagerFilterInit;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addDeploymentInfoCustomizers((deploymentInfo) -> deploymentInfo, +					.setEagerFilterInit(undertowProperties.isEagerFilterInit()));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		/**, +		 * Whether servlet filters should be initialized on startup., +		 */, +		private boolean eagerFilterInit = true;, +, +		public boolean isEagerFilterInit() {, +			return this.eagerFilterInit;, +		}, +, +		public void setEagerFilterInit(boolean eagerFilterInit) {, +			this.eagerFilterInit = eagerFilterInit;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addDeploymentInfoCustomizers((deploymentInfo) -> deploymentInfo, +					.setEagerFilterInit(undertowProperties.isEagerFilterInit()));, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.undertow.eager-filter-init=true # Whether servlet filters should be initialized on startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		/**, +		 * Whether servlet filters should be initialized on startup., +		 */, +		private boolean eagerFilterInit = true;, +, +		public boolean isEagerFilterInit() {, +			return this.eagerFilterInit;, +		}, +, +		public void setEagerFilterInit(boolean eagerFilterInit) {, +			this.eagerFilterInit = eagerFilterInit;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +			factory.addDeploymentInfoCustomizers((deploymentInfo) -> deploymentInfo, +					.setEagerFilterInit(undertowProperties.isEagerFilterInit()));, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.undertow.eager-filter-init=true # Whether servlet filters should be initialized on startup., +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java, +	private boolean eagerInitFilters = true;, +, +		deployment.setEagerFilterInit(this.eagerInitFilters);, +	 * Return if filters should be initialized eagerly., +	 * @return {@code true} if filters are initialized eagerly, otherwise {@code false}., +	 * @since 2.0.0, +	 */, +	public boolean isEagerInitFilters() {, +		return this.eagerInitFilters;, +	}, +, +	/**, +	 * Set whether filters should be initialized eagerly., +	 * @param eagerInitFilters {@code true} if filters are initialized eagerly, otherwise, +	 * {@code false}., +	 * @since 2.0.0, +	 */, +	public void setEagerInitFilters(boolean eagerInitFilters) {, +		this.eagerInitFilters = eagerInitFilters;, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		/**, +		 * Whether servlet filters should be initialized on startup., +		 */, +		private boolean eagerFilterInit = true;, +, +		public boolean isEagerFilterInit() {, +			return this.eagerFilterInit;]