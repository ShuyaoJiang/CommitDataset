[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.api.callback.FlywayCallback;, + * @author Eddú Meléndez, +		private FlywayCallback[] flywayCallbacks;, +, +				ObjectProvider<FlywayMigrationStrategy> migrationStrategy,, +				ObjectProvider<FlywayCallback[]> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks.getIfAvailable();, +			if (this.flywayCallbacks != null && this.flywayCallbacks.length > 0) {, +				flyway.setCallbacks(this.flywayCallbacks);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.api.callback.FlywayCallback;, + * @author Eddú Meléndez, +		private FlywayCallback[] flywayCallbacks;, +, +				ObjectProvider<FlywayMigrationStrategy> migrationStrategy,, +				ObjectProvider<FlywayCallback[]> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks.getIfAvailable();, +			if (this.flywayCallbacks != null && this.flywayCallbacks.length > 0) {, +				flyway.setCallbacks(this.flywayCallbacks);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.api.callback.BaseFlywayCallback;, + * @author Eddú Meléndez, +	public void customFlywayCallback() throws Exception {, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class,, +				MockOneFlywayCallback.class, MockTwoFlywayCallback.class);, +		assertThat(this.context.getBean(Flyway.class)).isNotNull();, +		this.context.getBean(MockOneFlywayCallback.class).assertCalled();, +		this.context.getBean(MockTwoFlywayCallback.class).assertCalled();, +	}, +, +	@Test, +	@Component, +	protected static class MockOneFlywayCallback, +			extends BaseFlywayCallback {, +, +		private boolean called = false;, +, +		public MockOneFlywayCallback() {, +			this.called = true;, +		}, +, +		public void assertCalled() {, +			assertThat(this.called).isTrue();, +		}, +	}, +, +	@Component, +	protected static class MockTwoFlywayCallback, +			extends BaseFlywayCallback {, +, +		private boolean called = false;, +, +		public MockTwoFlywayCallback() {, +			this.called = true;, +		}, +, +		public void assertCalled() {, +			assertThat(this.called).isTrue();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.flywaydb.core.api.callback.FlywayCallback;, + * @author Eddú Meléndez, +		private FlywayCallback[] flywayCallbacks;, +, +				ObjectProvider<FlywayMigrationStrategy> migrationStrategy,, +				ObjectProvider<FlywayCallback[]> flywayCallbacks) {, +			this.flywayCallbacks = flywayCallbacks.getIfAvailable();, +			if (this.flywayCallbacks != null && this.flywayCallbacks.length > 0) {, +				flyway.setCallbacks(this.flywayCallbacks);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import org.flywaydb.core.api.callback.BaseFlywayCallback;, + * @author Eddú Meléndez, +	public void customFlywayCallback() throws Exception {, +		registerAndRefresh(EmbeddedDataSourceConfiguration.class,, +				FlywayAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class,, +				MockOneFlywayCallback.class, MockTwoFlywayCallback.class);, +		assertThat(this.context.getBean(Flyway.class)).isNotNull();, +		this.context.getBean(MockOneFlywayCallback.class).assertCalled();, +		this.context.getBean(MockTwoFlywayCallback.class).assertCalled();, +	}, +, +	@Test, +	@Component, +	protected static class MockOneFlywayCallback, +			extends BaseFlywayCallback {, +, +		private boolean called = false;, +, +		public MockOneFlywayCallback() {, +			this.called = true;, +		}, +, +		public void assertCalled() {]