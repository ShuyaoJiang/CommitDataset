[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.CorsEndpointProperties;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.http.server.reactive.HttpHandler;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.reactive.DispatcherHandler;, +@ConditionalOnClass({ DispatcherHandler.class, HttpHandler.class }), +@EnableConfigurationProperties(CorsEndpointProperties.class), +			EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,, +				endpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(corsProperties));, +	}, +, +	private CorsConfiguration getCorsConfiguration(CorsEndpointProperties properties) {, +		if (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {, +			return null;, +		}, +		CorsConfiguration configuration = new CorsConfiguration();, +		configuration.setAllowedOrigins(properties.getAllowedOrigins());, +		if (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {, +			configuration.setAllowedHeaders(properties.getAllowedHeaders());, +		}, +		if (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {, +			configuration.setAllowedMethods(properties.getAllowedMethods());, +		}, +		if (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {, +			configuration.setExposedHeaders(properties.getExposedHeaders());, +		}, +		if (properties.getMaxAge() != null) {, +			configuration.setMaxAge(properties.getMaxAge().getSeconds());, +		}, +		if (properties.getAllowCredentials() != null) {, +			configuration.setAllowCredentials(properties.getAllowCredentials());, +		}, +		return configuration;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.CorsEndpointProperties;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.http.server.reactive.HttpHandler;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.reactive.DispatcherHandler;, +@ConditionalOnClass({ DispatcherHandler.class, HttpHandler.class }), +@EnableConfigurationProperties(CorsEndpointProperties.class), +			EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties,, +				endpointDiscoverer.discoverEndpoints(), endpointMediaTypes, getCorsConfiguration(corsProperties));, +	}, +, +	private CorsConfiguration getCorsConfiguration(CorsEndpointProperties properties) {, +		if (CollectionUtils.isEmpty(properties.getAllowedOrigins())) {, +			return null;, +		}, +		CorsConfiguration configuration = new CorsConfiguration();, +		configuration.setAllowedOrigins(properties.getAllowedOrigins());, +		if (!CollectionUtils.isEmpty(properties.getAllowedHeaders())) {, +			configuration.setAllowedHeaders(properties.getAllowedHeaders());, +		}, +		if (!CollectionUtils.isEmpty(properties.getAllowedMethods())) {, +			configuration.setAllowedMethods(properties.getAllowedMethods());, +		}, +		if (!CollectionUtils.isEmpty(properties.getExposedHeaders())) {, +			configuration.setExposedHeaders(properties.getExposedHeaders());, +		}, +		if (properties.getMaxAge() != null) {, +			configuration.setMaxAge(properties.getMaxAge().getSeconds());, +		}, +		if (properties.getAllowCredentials() != null) {, +			configuration.setAllowCredentials(properties.getAllowCredentials());, +		}, +		return configuration;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebFluxEndpointCorsIntegrationTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.integrationtest;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive.WebFluxEndpointManagementContextConfiguration;, +import org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration;]