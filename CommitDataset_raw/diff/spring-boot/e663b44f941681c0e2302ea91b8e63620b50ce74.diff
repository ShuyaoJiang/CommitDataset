[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +		// Fallback to the non-prefixed value, +		initialize(getPackagedConfigFile(this.paths[this.paths.length - 1]));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +		// Fallback to the non-prefixed value, +		initialize(getPackagedConfigFile(this.paths[this.paths.length - 1]));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/basic-logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.formatter = org.springframework.boot.logging.java.SimpleFormatter, +java.util.logging.ConsoleHandler.level = ALL, +, +org.hibernate.validator.internal.util.Version.level = WARNING, +org.apache.coyote.http11.Http11NioProtocol.level = WARNING, +org.crsh.plugin.level = WARNING, +org.apache.tomcat.util.net.NioSelectorPool.level = WARNING, +org.apache.catalina.startup.DigesterFactory.level = SEVERE, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +		// Fallback to the non-prefixed value, +		initialize(getPackagedConfigFile(this.paths[this.paths.length - 1]));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/basic-logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.formatter = org.springframework.boot.logging.java.SimpleFormatter, +java.util.logging.ConsoleHandler.level = ALL, +, +org.hibernate.validator.internal.util.Version.level = WARNING, +org.apache.coyote.http11.Http11NioProtocol.level = WARNING, +org.crsh.plugin.level = WARNING, +org.apache.tomcat.util.net.NioSelectorPool.level = WARNING, +org.apache.catalina.startup.DigesterFactory.level = SEVERE, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j/basic-log4j.properties, +log4j.rootCategory=INFO, CONSOLE, FILE, +, +PID=????, +LOG_PATTERN=[%d{yyyy-MM-dd HH:mm:ss.SSS}] boot%X{context} - ${PID} %5p [%t] --- %c{1}: %m%n, +, +# CONSOLE is set to be a ConsoleAppender using a PatternLayout., +log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender, +log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout, +log4j.appender.CONSOLE.layout.ConversionPattern=${LOG_PATTERN}, +, +log4j.category.org.hibernate.validator.internal.util.Version=WARN, +log4j.category.org.apache.coyote.http11.Http11NioProtocol=WARN, +log4j.category.org.crsh.plugin=WARN, +log4j.category.org.apache.tomcat.util.net.NioSelectorPool=WARN, +log4j.category.org.apache.catalina.startup.DigesterFactory=ERROR, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +		// Fallback to the non-prefixed value, +		initialize(getPackagedConfigFile(this.paths[this.paths.length - 1]));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/basic-logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.formatter = org.springframework.boot.logging.java.SimpleFormatter, +java.util.logging.ConsoleHandler.level = ALL, +, +org.hibernate.validator.internal.util.Version.level = WARNING, +org.apache.coyote.http11.Http11NioProtocol.level = WARNING, +org.crsh.plugin.level = WARNING, +org.apache.tomcat.util.net.NioSelectorPool.level = WARNING, +org.apache.catalina.startup.DigesterFactory.level = SEVERE, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j/basic-log4j.properties, +log4j.rootCategory=INFO, CONSOLE, FILE, +, +PID=????, +LOG_PATTERN=[%d{yyyy-MM-dd HH:mm:ss.SSS}] boot%X{context} - ${PID} %5p [%t] --- %c{1}: %m%n, +, +# CONSOLE is set to be a ConsoleAppender using a PatternLayout., +log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender, +log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout, +log4j.appender.CONSOLE.layout.ConversionPattern=${LOG_PATTERN}, +, +log4j.category.org.hibernate.validator.internal.util.Version=WARN, +log4j.category.org.apache.coyote.http11.Http11NioProtocol=WARN, +log4j.category.org.crsh.plugin=WARN, +log4j.category.org.apache.tomcat.util.net.NioSelectorPool=WARN, +log4j.category.org.apache.catalina.startup.DigesterFactory=ERROR, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/base.xml, +, +	<include resource="org/springframework/boot/logging/logback/default-logback.xml"/>	, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +		// Fallback to the non-prefixed value, +		initialize(getPackagedConfigFile(this.paths[this.paths.length - 1]));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/java/basic-logging.properties, +handlers = java.util.logging.ConsoleHandler, +.level = INFO, +, +java.util.logging.ConsoleHandler.formatter = org.springframework.boot.logging.java.SimpleFormatter, +java.util.logging.ConsoleHandler.level = ALL, +, +org.hibernate.validator.internal.util.Version.level = WARNING]