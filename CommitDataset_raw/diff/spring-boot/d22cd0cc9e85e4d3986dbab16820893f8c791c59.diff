[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import java.util.LinkedHashSet;, +import org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;, +import org.springframework.data.redis.connection.RedisConnectionFactory;, + * @author Mark Paluch, +@ConditionalOnBean(RedisConnectionFactory.class), +	public RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {, +, +		RedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory);, +			builder.initialCacheNames(new LinkedHashSet<>(cacheNames));, +		return this.customizerInvoker.customize(builder.build());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import java.util.LinkedHashSet;, +import org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;, +import org.springframework.data.redis.connection.RedisConnectionFactory;, + * @author Mark Paluch, +@ConditionalOnBean(RedisConnectionFactory.class), +	public RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {, +, +		RedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory);, +			builder.initialCacheNames(new LinkedHashSet<>(cacheNames));, +		return this.customizerInvoker.customize(builder.build());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +import org.springframework.data.redis.connection.RedisConnectionFactory;, + * @author Mark Paluch, +					org.springframework.data.redis.cache.RedisCacheConfiguration configuration = (org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +							cacheManager).getPropertyValue("defaultCacheConfig");, +					assertThat(configuration.usePrefix()).isTrue();, +		public RedisConnectionFactory redisConnectionFactory() {, +			return mock(RedisConnectionFactory.class);]