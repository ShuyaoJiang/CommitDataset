[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>net.sf.ehcache</groupId>, +			<artifactId>ehcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>net.sf.ehcache</groupId>, +			<artifactId>ehcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, + * @author Eddú Meléndez, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>net.sf.ehcache</groupId>, +			<artifactId>ehcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, + * @author Eddú Meléndez, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, + * @author Eddú Meléndez, +	 * EhCache backed caching., +	 */, +	EHCACHE(EhCacheCacheConfiguration.class),, +, +	/**, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>net.sf.ehcache</groupId>, +			<artifactId>ehcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, + * @author Eddú Meléndez, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, + * @author Eddú Meléndez, +	 * EhCache backed caching., +	 */, +	EHCACHE(EhCacheCacheConfiguration.class),, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.cache;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.ehcache.EhCacheCacheManager;, +import org.springframework.cache.ehcache.EhCacheManagerUtils;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.io.Resource;, +, +/**, + * EhCache cache configuration. Only kick in if a configuration file location is set or if, + * a default configuration file exists., + *, + * @author Eddú Meléndez, + * @since 1.3.0, + */, +@Configuration, +@ConditionalOnClass(EhCacheCacheManager.class), +@ConditionalOnMissingBean(CacheManager.class), +@Conditional({ CacheCondition.class,, +		EhCacheCacheConfiguration.ConfigAvailableCondition.class }), +class EhCacheCacheConfiguration {, +, +	@Autowired, +	private CacheProperties properties;, +, +	@Bean, +	public EhCacheCacheManager cacheManager() {, +		Resource location = this.properties.resolveConfigLocation();, +		if (location != null) {, +			return new EhCacheCacheManager(, +					EhCacheManagerUtils.buildCacheManager(location));, +		}, +		return new EhCacheCacheManager(EhCacheManagerUtils.buildCacheManager());, +	}]