[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.http.gzip", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.http.gzip", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfigurationTests.java, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void filterCanBeDisabled() {, +		createAndRefreshContext("spring.http.gzip.enabled:false");, +		assertThat(this.context.getBeanNamesForType(FilterRegistrationBean.class).length,, +				is(equalTo(0)));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.http.gzip", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfigurationTests.java, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void filterCanBeDisabled() {, +		createAndRefreshContext("spring.http.gzip.enabled:false");, +		assertThat(this.context.getBeanNamesForType(FilterRegistrationBean.class).length,, +				is(equalTo(0)));, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.http.gzip.enabled=true # enable gzip filter support, +	spring.http.gzip.methods= # comma-separated list of HTTP methods for which compression is enabled, +	spring.http.gzip.mimeTypes= # comma-separated list of MIME types which should be compressed, +	spring.http.gzip.minGzipSize= # minimum content length required for compression to occur]