[+++ b/README.adoc, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointMediaTypes.java, +		Assert.notNull(produced, "Produced must not be null");, +		Assert.notNull(consumed, "Consumed must not be null");, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointMediaTypes.java, +		Assert.notNull(produced, "Produced must not be null");, +		Assert.notNull(consumed, "Consumed must not be null");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = "spring.autoconfigure.exclude";, +, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).map(Arrays::asList), +		String[] excludes = getEnvironment().getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointMediaTypes.java, +		Assert.notNull(produced, "Produced must not be null");, +		Assert.notNull(consumed, "Consumed must not be null");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = "spring.autoconfigure.exclude";, +, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).map(Arrays::asList), +		String[] excludes = getEnvironment().getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +import java.util.Collections;, + * static and templated files. If both a static and templated index page are available, the, +	private static final List<MediaType> MEDIA_TYPES_ALL = Collections.singletonList(MediaType.ALL);, +, +		if (StringUtils.hasText(acceptHeader)) {, +			return MediaType.parseMediaTypes(acceptHeader);, +		}, +		return MEDIA_TYPES_ALL;, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointMediaTypes.java, +		Assert.notNull(produced, "Produced must not be null");, +		Assert.notNull(consumed, "Consumed must not be null");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = "spring.autoconfigure.exclude";, +, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).map(Arrays::asList), +		String[] excludes = getEnvironment().getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +import java.util.Collections;, + * static and templated files. If both a static and templated index page are available, the, +	private static final List<MediaType> MEDIA_TYPES_ALL = Collections.singletonList(MediaType.ALL);, +, +		if (StringUtils.hasText(acceptHeader)) {, +			return MediaType.parseMediaTypes(acceptHeader);, +		}, +		return MEDIA_TYPES_ALL;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java, +	public void enablingNoRepositoriesDisablesImperativeRepositories() {, +++ b/README.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryReactiveHealthEndpointWebExtension.java, + * Reactive {@link EndpointExtension} for the {@link HealthEndpoint} that always, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryHealthEndpointWebExtension.java, + * {@link EndpointExtension} for the {@link HealthEndpoint} that always exposes full, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointMediaTypes.java, +		Assert.notNull(produced, "Produced must not be null");, +		Assert.notNull(consumed, "Consumed must not be null");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = "spring.autoconfigure.exclude";, +, +			return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).map(Arrays::asList), +		String[] excludes = getEnvironment().getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +import java.util.Collections;, + * static and templated files. If both a static and templated index page are available, the, +	private static final List<MediaType> MEDIA_TYPES_ALL = Collections.singletonList(MediaType.ALL);, +, +		if (StringUtils.hasText(acceptHeader)) {, +			return MediaType.parseMediaTypes(acceptHeader);, +		}, +		return MEDIA_TYPES_ALL;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java, +	public void enablingNoRepositoriesDisablesImperativeRepositories() {]