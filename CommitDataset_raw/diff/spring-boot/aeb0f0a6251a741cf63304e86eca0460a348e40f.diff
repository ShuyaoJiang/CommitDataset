[+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +import java.util.Random;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.DigestUtils;, +			environment.getPropertySources().addAfter(, +					StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +					new RandomValuePropertySource("random"));, +	private static class RandomValuePropertySource extends PropertySource<Random> {, +, +		public RandomValuePropertySource(String name) {, +			super(name, new Random());, +		}, +, +		@Override, +		public Object getProperty(String name) {, +			if (!name.startsWith("random.")) {, +				return null;, +			}, +			if (name.endsWith("int")) {, +				return getSource().nextInt();, +			}, +			if (name.endsWith("long")) {, +				return getSource().nextLong();, +			}, +			byte[] bytes = new byte[32];, +			getSource().nextBytes(bytes);, +			return DigestUtils.md5DigestAsHex(bytes);, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +import java.util.Random;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.DigestUtils;, +			environment.getPropertySources().addAfter(, +					StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +					new RandomValuePropertySource("random"));, +	private static class RandomValuePropertySource extends PropertySource<Random> {, +, +		public RandomValuePropertySource(String name) {, +			super(name, new Random());, +		}, +, +		@Override, +		public Object getProperty(String name) {, +			if (!name.startsWith("random.")) {, +				return null;, +			}, +			if (name.endsWith("int")) {, +				return getSource().nextInt();, +			}, +			if (name.endsWith("long")) {, +				return getSource().nextLong();, +			}, +			byte[] bytes = new byte[32];, +			getSource().nextBytes(bytes);, +			return DigestUtils.md5DigestAsHex(bytes);, +		}, +, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java, +import org.springframework.boot.SpringApplication;, +import org.springframework.core.env.StandardEnvironment;, +import static org.hamcrest.Matchers.notNullValue;, +	public void randomValue() throws Exception {, +		StandardEnvironment environment = new StandardEnvironment();, +		this.initializer.setEnvironment(environment);, +		this.initializer.initialize(new SpringApplication(), new String[0]);, +		String property = environment.getProperty("random.value");, +		assertThat(property, notNullValue());, +	}, +, +	@Test]