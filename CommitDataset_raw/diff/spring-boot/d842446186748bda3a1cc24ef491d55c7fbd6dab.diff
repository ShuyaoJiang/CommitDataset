[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * @author Dave Syer, +	private static Log logger = LogFactory, +			.getLog(ServletContextInitializerLifecycleListener.class);, +, +	private Exception startUpException;, +	public Exception getStartUpException() {, +		return this.startUpException;, +	}, +, +				catch (Exception ex) {, +					this.startUpException = ex;, +					// Prevent Tomcat from logging and re-throwing when we know we can, +					// deal with it in the main thread, but log for information here., +					logger.error("Error starting Tomcat context: ", +							+ ex.getClass().getName());, +					break;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * @author Dave Syer, +	private static Log logger = LogFactory, +			.getLog(ServletContextInitializerLifecycleListener.class);, +, +	private Exception startUpException;, +	public Exception getStartUpException() {, +		return this.startUpException;, +	}, +, +				catch (Exception ex) {, +					this.startUpException = ex;, +					// Prevent Tomcat from logging and re-throwing when we know we can, +					// deal with it in the main thread, but log for information here., +					logger.error("Error starting Tomcat context: ", +							+ ex.getClass().getName());, +					break;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java, +	private ServletContextInitializerLifecycleListener starter;, +, +	public void setStarter(ServletContextInitializerLifecycleListener starter) {, +		this.starter = starter;, +	}, +, +	public ServletContextInitializerLifecycleListener getStarter() {, +		return this.starter;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * @author Dave Syer, +	private static Log logger = LogFactory, +			.getLog(ServletContextInitializerLifecycleListener.class);, +, +	private Exception startUpException;, +	public Exception getStartUpException() {, +		return this.startUpException;, +	}, +, +				catch (Exception ex) {, +					this.startUpException = ex;, +					// Prevent Tomcat from logging and re-throwing when we know we can, +					// deal with it in the main thread, but log for information here., +					logger.error("Error starting Tomcat context: ", +							+ ex.getClass().getName());, +					break;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java, +	private ServletContextInitializerLifecycleListener starter;, +, +	public void setStarter(ServletContextInitializerLifecycleListener starter) {, +		this.starter = starter;, +	}, +, +	public ServletContextInitializerLifecycleListener getStarter() {, +		return this.starter;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +			Container[] children = this.tomcat.getHost().findChildren();, +			for (Container container : children) {, +				if (container instanceof TomcatEmbeddedContext) {, +					Exception exception = ((TomcatEmbeddedContext) container), +							.getStarter().getStartUpException();, +					if (exception != null) {, +						throw exception;, +					}, +				}, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * @author Dave Syer, +	private static Log logger = LogFactory, +			.getLog(ServletContextInitializerLifecycleListener.class);, +, +	private Exception startUpException;, +	public Exception getStartUpException() {, +		return this.startUpException;]