[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Conditional} that checks if the specified properties have a specific value. By, + * default the properties must be present in the {@link Environment} and, + * <strong>not</strong> equal to {@code false}. The {@link #havingValue()} and, + * {@link #matchIfMissing()} attributes allow further customizations., + * <p>, + * The {@link #havingValue} attribute can be used to specify the value that the property, + * should have. The table below shows when a condition matches according to the property, + * value and the {@link #havingValue()} attribute:, + * <p>, + * <th>Property Value</th>, + * <th>{@code havingValue=""}</th>, + * <th>{@code havingValue="true"}</th>, + * <th>{@code havingValue="false"}</th>, + * <th>{@code havingValue="foo"}</th>, + * <td>{@code "true"}</td>, + * <td>{@code "false"}</td>, + * <td>{@code "foo"}</td>, + * <p>, + * If the property is not contained in the {@link Environment} at all, the, + * {@link #matchIfMissing()} attribute is consulted. By default missing attributes do not, + * match., + *, + * @author Phillip Webb, +	 * Alias for {@link #name()}., +	 */, +	String[] value() default {};, +, +	/**, +	 * A prefix that should be applied to each property. The prefix automatically ends, +	 * with a dot if not specified., +	 * The name of the properties to test.If a prefix has been defined, it is applied to, +	 * compute the full key of each property. For instance if the prefix is, +	 * {@code app.config} and one value is {@code my-value}, the fully key would be, +	 * <p>, +	 * Use the dashed notation to specify each property, that is all lower case with a "-", +	 * to separate words (e.g. {@code my-long-property})., +	String[] name() default {};, +	 * The string representation of the expected value for the properties. If not, +	 * specified, the property must <strong>not</strong> be equals to {@code false}, +	String havingValue() default "";, +	 * Specify if the condition should match if the property is not set. Defaults to, +	 * {@code false}, +	boolean matchIfMissing() default false;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true", matchIfMissing = false), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, + * {@link Conditional} that checks if the specified properties have a specific value. By, + * default the properties must be present in the {@link Environment} and, + * <strong>not</strong> equal to {@code false}. The {@link #havingValue()} and, + * {@link #matchIfMissing()} attributes allow further customizations., + * <p>, + * The {@link #havingValue} attribute can be used to specify the value that the property, + * should have. The table below shows when a condition matches according to the property, + * value and the {@link #havingValue()} attribute:, + * <p>, + * <th>Property Value</th>, + * <th>{@code havingValue=""}</th>, + * <th>{@code havingValue="true"}</th>, + * <th>{@code havingValue="false"}</th>, + * <th>{@code havingValue="foo"}</th>, + * <td>{@code "true"}</td>, + * <td>{@code "false"}</td>, + * <td>{@code "foo"}</td>, + * <p>, + * If the property is not contained in the {@link Environment} at all, the, + * {@link #matchIfMissing()} attribute is consulted. By default missing attributes do not, + * match., + *, + * @author Phillip Webb, +	 * Alias for {@link #name()}., +	 */, +	String[] value() default {};, +, +	/**, +	 * A prefix that should be applied to each property. The prefix automatically ends, +	 * with a dot if not specified., +	 * The name of the properties to test.If a prefix has been defined, it is applied to, +	 * compute the full key of each property. For instance if the prefix is, +	 * {@code app.config} and one value is {@code my-value}, the fully key would be]