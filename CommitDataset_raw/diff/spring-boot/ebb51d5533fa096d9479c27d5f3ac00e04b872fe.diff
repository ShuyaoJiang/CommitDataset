[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +		} else {, +		Map<String, Set<String>> availableTags = getAvailableTags(meters);, +		} else {, +	private Map<String, Set<String>> getAvailableTags(List<Meter> meters) {, +		Map<String, Set<String>> availableTags = new HashMap<>();, +			Set<String> value = Collections.singleton(tag.getValue());, +	private <T> Set<T> merge(Set<T> set1, Set<T> set2) {, +		Set<T> result = new HashSet<>(set1.size() + set2.size());, +		result.addAll(set1);, +		result.addAll(set2);, +			private final Set<String> values;, +			AvailableTag(String tag, Set<String> values) {, +			public Set<String> getValues() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +		} else {, +		Map<String, Set<String>> availableTags = getAvailableTags(meters);, +		} else {, +	private Map<String, Set<String>> getAvailableTags(List<Meter> meters) {, +		Map<String, Set<String>> availableTags = new HashMap<>();, +			Set<String> value = Collections.singleton(tag.getValue());, +	private <T> Set<T> merge(Set<T> set1, Set<T> set2) {, +		Set<T> result = new HashSet<>(set1.size() + set2.size());, +		result.addAll(set1);, +		result.addAll(set2);, +			private final Set<String> values;, +			AvailableTag(String tag, Set<String> values) {, +			public Set<String> getValues() {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +	public void metricTagValuesAreDeduplicated() {, +		this.registry.counter("cache", "host", "1", "region", "east", "result", "hit");, +		this.registry.counter("cache", "host", "1", "region", "east", "result", "miss");, +		MetricsEndpoint.MetricResponse response = this.endpoint.metric("cache",, +				Collections.singletonList("host:1"));, +		assertThat(response.getAvailableTags(), +				.stream(), +				.filter(t -> t.getTag().equals("region")), +				.flatMap(t -> t.getValues().stream())), +				.containsExactly("east");, +	}, +, +	@Test]