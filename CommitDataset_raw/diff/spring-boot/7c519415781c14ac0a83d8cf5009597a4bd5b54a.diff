[+++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +[[production-ready-cloudfoundry]], +== Cloud Foundry support, +Spring Boot's actuator module includes additional support that is activated when you, +deploy to a compatible Cloud Foundry instance. The `/cloudfoundryapplication` path, +provides an alternative secured route to all `NamedMvcEndpoint` beans., +, +The extended support allows Cloud Foundry management UIs (such as the web, +application that you can use to view deployed applications) to be augmented with Spring, +Boot actuator information. For example, an application status page may include full health, +information instead of the typical "`running`" or "`stopped`" status., +, +NOTE: The `/cloudfoundryapplication` path is not directly accessible to regular users., +In order to use the endpoint a valid UAA token must be passed with the request., +, +, +, +[[production-ready-cloudfoundry-disable]], +=== Disabling extended Cloud Foundry actuator support, +If you want to fully disable the `/cloudfoundryapplication` endpoints you can add the, +following to your `application.properties` file:, +, +, +.application.properties, +[source,properties,indent=0], +----, +	management.cloudfoundry.enabled=false, +----, +, +, +, +[[production-ready-cloudfoundry-ssl]], +=== Cloud Foundry self signed certificates, +By default, the security verification for `/cloudfoundryapplication` endpoints makes SSL, +calls to various Cloud Foundry services. If your Cloud Foundry UAA or Cloud Controller, +services use self-signed certificates you will need to set the following property:, +, +.application.properties, +[source,properties,indent=0], +----, +	management.cloudfoundry.skip-ssl-validation=true, +----, +, +, +, +[[production-ready-cloudfoundry-custom-security]], +=== Custom security configuration, +If you define custom security configuration, and you want extended Cloud Foundry actuator, +support, you'll should ensure that `/cloudfoundryapplication/**` paths are open. Without, +a direct open route, your Cloud Foundry application manager will not be able to obtain, +endpoint data., +, +For Spring Security, you'll typically include something like, +`mvcMatchers("/cloudfoundryapplication/**").permitAll()` in your configuration:, +, +[source,java,indent=0], +----, +include::{code-examples}/cloudfoundry/CloudFoundryIgnorePathsExample.java[tag=security], +----, +, +, +, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +[[production-ready-cloudfoundry]], +== Cloud Foundry support, +Spring Boot's actuator module includes additional support that is activated when you, +deploy to a compatible Cloud Foundry instance. The `/cloudfoundryapplication` path, +provides an alternative secured route to all `NamedMvcEndpoint` beans., +, +The extended support allows Cloud Foundry management UIs (such as the web, +application that you can use to view deployed applications) to be augmented with Spring, +Boot actuator information. For example, an application status page may include full health, +information instead of the typical "`running`" or "`stopped`" status., +, +NOTE: The `/cloudfoundryapplication` path is not directly accessible to regular users., +In order to use the endpoint a valid UAA token must be passed with the request., +, +, +, +[[production-ready-cloudfoundry-disable]], +=== Disabling extended Cloud Foundry actuator support, +If you want to fully disable the `/cloudfoundryapplication` endpoints you can add the, +following to your `application.properties` file:, +, +, +.application.properties, +[source,properties,indent=0], +----, +	management.cloudfoundry.enabled=false, +----, +, +, +, +[[production-ready-cloudfoundry-ssl]], +=== Cloud Foundry self signed certificates, +By default, the security verification for `/cloudfoundryapplication` endpoints makes SSL, +calls to various Cloud Foundry services. If your Cloud Foundry UAA or Cloud Controller, +services use self-signed certificates you will need to set the following property:, +, +.application.properties]