[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, + * A launcher for {@code SpringApplication} or a {@code SpringApplication} subclass. The, + * class that is used can be configured using the System property, + * {@code spring.application.class.name} or the {@code SPRING_APPLICATION_CLASS_NAME}, + * environment variable. Uses reflection to allow the launching code to exist in a, + * separate ClassLoader from the application code., + * @see System#getProperty(String), + * @see System#getenv(String), +	private static final String DEFAULT_SPRING_APPLICATION_CLASS = "org.springframework.boot.SpringApplication";, +	 * Creates a new launcher that will use the given {@code classLoader} to load the, +	 * configured {@code SpringApplication} class., +		Class<?> applicationClass = this.classLoader, +				.loadClass(getSpringApplicationClassName());, +	private String getSpringApplicationClassName() {, +		String className = System.getProperty("spring.application.class.name");, +		if (className == null) {, +			className = getEnvironmentVariable("SPRING_APPLICATION_CLASS_NAME");, +		}, +		if (className == null) {, +			className = DEFAULT_SPRING_APPLICATION_CLASS;, +		}, +		return className;, +	}, +, +	protected String getEnvironmentVariable(String name) {, +		return System.getenv(name);, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java, + * A launcher for {@code SpringApplication} or a {@code SpringApplication} subclass. The, + * class that is used can be configured using the System property, + * {@code spring.application.class.name} or the {@code SPRING_APPLICATION_CLASS_NAME}, + * environment variable. Uses reflection to allow the launching code to exist in a, + * separate ClassLoader from the application code., + * @see System#getProperty(String), + * @see System#getenv(String), +	private static final String DEFAULT_SPRING_APPLICATION_CLASS = "org.springframework.boot.SpringApplication";, +	 * Creates a new launcher that will use the given {@code classLoader} to load the, +	 * configured {@code SpringApplication} class., +		Class<?> applicationClass = this.classLoader, +				.loadClass(getSpringApplicationClassName());, +	private String getSpringApplicationClassName() {, +		String className = System.getProperty("spring.application.class.name");, +		if (className == null) {, +			className = getEnvironmentVariable("SPRING_APPLICATION_CLASS_NAME");, +		}, +		if (className == null) {, +			className = DEFAULT_SPRING_APPLICATION_CLASS;, +		}, +		return className;, +	}, +, +	protected String getEnvironmentVariable(String name) {, +		return System.getenv(name);, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/app/SpringApplicationLauncherTests.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.app;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.junit.After;, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +, +/**, + * Tests for {@link SpringApplicationLauncher}, + *, + * @author Andy Wilkinson, + */, +public class SpringApplicationLauncherTests {, +, +	private Map<String, String> env = new HashMap<String, String>();, +, +	@After, +	public void cleanUp() {, +		System.clearProperty("spring.application.class.name");]