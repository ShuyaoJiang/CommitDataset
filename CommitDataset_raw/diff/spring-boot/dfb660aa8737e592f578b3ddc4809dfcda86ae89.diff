[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					+ this.environment.getProperty("platform", "all"), +					+ ".sql,classpath*:schema.sql,classpath*:data.sql";, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					+ this.environment.getProperty("platform", "all"), +					+ ".sql,classpath*:schema.sql,classpath*:data.sql";, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue(dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource);, +		assertNotNull(dataSource);, +		JdbcOperations template = new JdbcTemplate(dataSource);, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from BAR", Integer.class));, +	}, +, +	@Test, +	public void testDataSourceInitializedWithExplicitScript() throws Exception {, +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +	@Test, +	public void testDataSourceInitializedWithMultipleScripts() throws Exception {, +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put("spring.database.schema",, +				ClassUtils.addResourcePathToPackagePath(getClass(), "schema.sql"), +						+ ",", +						+ ClassUtils.addResourcePathToPackagePath(getClass(),, +								"another.sql"));, +		this.context.getEnvironment().getPropertySources(), +				.addFirst(new MapPropertySource("test", map));, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue(dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource);, +		assertNotNull(dataSource);, +		JdbcOperations template = new JdbcTemplate(dataSource);, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from FOO", Integer.class));, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from SPAM", Integer.class));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					+ this.environment.getProperty("platform", "all"), +					+ ".sql,classpath*:schema.sql,classpath*:data.sql";, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue(dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource);, +		assertNotNull(dataSource);, +		JdbcOperations template = new JdbcTemplate(dataSource);, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from BAR", Integer.class));, +	}, +, +	@Test, +	public void testDataSourceInitializedWithExplicitScript() throws Exception {, +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +	@Test, +	public void testDataSourceInitializedWithMultipleScripts() throws Exception {, +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put("spring.database.schema",, +				ClassUtils.addResourcePathToPackagePath(getClass(), "schema.sql"), +						+ ",", +						+ ClassUtils.addResourcePathToPackagePath(getClass(),, +								"another.sql"));, +		this.context.getEnvironment().getPropertySources(), +				.addFirst(new MapPropertySource("test", map));, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue(dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource);, +		assertNotNull(dataSource);, +		JdbcOperations template = new JdbcTemplate(dataSource);, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from FOO", Integer.class));, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from SPAM", Integer.class));, +	}, +, +++ b/spring-boot-autoconfigure/src/test/resources/org/springframework/boot/autoconfigure/jdbc/another.sql, +CREATE TABLE SPAM (, +  id         INTEGER IDENTITY PRIMARY KEY,, +  name VARCHAR(30),, +);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					+ this.environment.getProperty("platform", "all"), +					+ ".sql,classpath*:schema.sql,classpath*:data.sql";, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +		this.context.refresh();, +		DataSource dataSource = this.context.getBean(DataSource.class);, +		assertTrue(dataSource instanceof org.apache.tomcat.jdbc.pool.DataSource);, +		assertNotNull(dataSource);, +		JdbcOperations template = new JdbcTemplate(dataSource);, +		assertEquals(new Integer(0),, +				template.queryForObject("SELECT COUNT(*) from BAR", Integer.class));, +	}]