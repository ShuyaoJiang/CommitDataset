[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java, +		 * Whether to enable the default error page displayed in browsers in case of a, +		 * server error., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java, +		 * Whether to enable the default error page displayed in browsers in case of a, +		 * server error., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus), +				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error));, +			result = result.switchIfEmpty(renderDefaultErrorView(responseBody, error));, +		return result.next().doOnNext((response) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java, +		 * Whether to enable the default error page displayed in browsers in case of a, +		 * server error., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus), +				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error));, +			result = result.switchIfEmpty(renderDefaultErrorView(responseBody, error));, +		return result.next().doOnNext((response) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +		this.contextRunner.run(this::assertNoCouchbaseBeans);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java, +		 * Whether to enable the default error page displayed in browsers in case of a, +		 * server error., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus), +				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error));, +			result = result.switchIfEmpty(renderDefaultErrorView(responseBody, error));, +		return result.next().doOnNext((response) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +		this.contextRunner.run(this::assertNoCouchbaseBeans);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, +			client.get().uri("/notFound").exchange().expectStatus().isNotFound(), +					.expectBody().jsonPath("status").isEqualTo("404").jsonPath("error"), +					.syncBody("{}").exchange().expectStatus().isBadRequest().expectBody(), +					.jsonPath("status").isEqualTo("400").jsonPath("error"), +					client.get().uri("/badRequest").exchange().expectStatus(), +							.isBadRequest().expectBody().jsonPath("status"), +							.isEqualTo("400").jsonPath("error"), +							.accept(MediaType.TEXT_HTML).exchange().expectStatus(), +							.isNotFound().expectHeader().contentType(MediaType.TEXT_HTML), +		this.contextRunner.withPropertyValues("server.error.whitelabel.enabled=false",, +				"spring.mustache.prefix=classpath:/unknown/").run((context) -> {, +					client.get().uri("/notfound").accept(MediaType.TEXT_HTML).exchange(), +							.expectStatus().isNotFound().expectBody().isEmpty();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java, +		 * Whether to enable the default error page displayed in browsers in case of a, +		 * server error., +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus), +				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error));, +			result = result.switchIfEmpty(renderDefaultErrorView(responseBody, error));, +		return result.next().doOnNext((response) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +		this.contextRunner.run(this::assertNoCouchbaseBeans);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, +			client.get().uri("/notFound").exchange().expectStatus().isNotFound(), +					.expectBody().jsonPath("status").isEqualTo("404").jsonPath("error"), +					.syncBody("{}").exchange().expectStatus().isBadRequest().expectBody(), +					.jsonPath("status").isEqualTo("400").jsonPath("error"), +					client.get().uri("/badRequest").exchange().expectStatus(), +							.isBadRequest().expectBody().jsonPath("status"), +							.isEqualTo("400").jsonPath("error"), +							.accept(MediaType.TEXT_HTML).exchange().expectStatus(), +							.isNotFound().expectHeader().contentType(MediaType.TEXT_HTML), +		this.contextRunner.withPropertyValues("server.error.whitelabel.enabled=false",, +				"spring.mustache.prefix=classpath:/unknown/").run((context) -> {, +					client.get().uri("/notfound").accept(MediaType.TEXT_HTML).exchange(), +							.expectStatus().isNotFound().expectBody().isEmpty();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySourcesTests.java, + * Copyright 2012-2018 the original author or authors.]