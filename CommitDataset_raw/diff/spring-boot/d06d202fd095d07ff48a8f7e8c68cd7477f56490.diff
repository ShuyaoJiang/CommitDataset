[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.aop;, +, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.reflect.Advice;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.EnableAspectJAutoProxy;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for Spring AOP., + * , + * @author Dave Syer, + * @see EnableAspectJAutoProxy, + */, +@Configuration, +@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class }), +@ConditionalOnExpression("${spring.aop.auto:true}"), +public class AopAutoConfiguration {, +, +	@Configuration, +	@EnableAspectJAutoProxy(proxyTargetClass = false), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +	public static class JdkDynamicAutoProxyConfiguration {, +	}, +, +	@Configuration, +	@EnableAspectJAutoProxy(proxyTargetClass = true), +	@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}"), +	public static class CglibAutoProxyConfiguration {, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.aop;, +, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.reflect.Advice;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.EnableAspectJAutoProxy;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for Spring AOP., + * , + * @author Dave Syer, + * @see EnableAspectJAutoProxy, + */, +@Configuration, +@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class }), +@ConditionalOnExpression("${spring.aop.auto:true}"), +public class AopAutoConfiguration {, +, +	@Configuration, +	@EnableAspectJAutoProxy(proxyTargetClass = false), +	@ConditionalOnExpression("!${spring.aop.proxyTargetClass:false}"), +	public static class JdkDynamicAutoProxyConfiguration {, +	}, +, +	@Configuration, +	@EnableAspectJAutoProxy(proxyTargetClass = true), +	@ConditionalOnExpression("${spring.aop.proxyTargetClass:false}"), +	public static class CglibAutoProxyConfiguration {, +	}]