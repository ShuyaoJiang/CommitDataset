[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfiguration.java, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.mock.http.client.MockClientHttpResponse;, +		assertThat(this.context.getBeansOfType(JwtAccessTokenConverter.class)).hasSize(1);, +			return new MockRestCallCustomizer();, +		}, +, +	}, +, +	private static class MockRestCallCustomizer, +			implements JwtAccessTokenConverterRestTemplateCustomizer {, +, +		@Override, +		public void customize(RestTemplate template) {, +			template.getInterceptors().add(new ClientHttpRequestInterceptor() {, +, +				@Override, +				public ClientHttpResponse intercept(HttpRequest request, byte[] body,, +						ClientHttpRequestExecution execution) throws IOException {, +					String payload = "{\"value\":\"FOO\"}";, +					MockClientHttpResponse response = new MockClientHttpResponse(, +							payload.getBytes(), HttpStatus.OK);, +					response.getHeaders().setContentType(MediaType.APPLICATION_JSON);, +					return response;, +				}, +, +			});]