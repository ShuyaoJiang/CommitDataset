[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationExcludeFilter.java, + * A {@link TypeFilter} implementation that matches registered auto-configuration classes., +	private volatile List<String> autoConfigurations;, +		return getAutoConfigurations(), +				.contains(metadataReader.getClassMetadata().getClassName());, +	}, +, +	protected List<String> getAutoConfigurations() {, +		if (this.autoConfigurations == null) {, +			this.autoConfigurations = SpringFactoriesLoader.loadFactoryNames(, +					EnableAutoConfiguration.class, this.beanClassLoader);, +		}, +		return this.autoConfigurations;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationExcludeFilter.java, + * A {@link TypeFilter} implementation that matches registered auto-configuration classes., +	private volatile List<String> autoConfigurations;, +		return getAutoConfigurations(), +				.contains(metadataReader.getClassMetadata().getClassName());, +	}, +, +	protected List<String> getAutoConfigurations() {, +		if (this.autoConfigurations == null) {, +			this.autoConfigurations = SpringFactoriesLoader.loadFactoryNames(, +					EnableAutoConfiguration.class, this.beanClassLoader);, +		}, +		return this.autoConfigurations;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationExcludeFilterTests.java, +	private static final Class<?> FILTERED = ExampleFilteredAutoConfiguration.class;, +, +		this.context.getBean(FILTERED);, +, +		protected List<String> getAutoConfigurations() {, +			return Collections.singletonList(FILTERED.getName());, +]