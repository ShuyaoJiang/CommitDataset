[+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +		SpringApplicationBuilder builder = createSpringApplicationBuilder();, +	 * Returns the {@code SpringApplicationBuilder} that is used to configure and create, +	 * the {@link SpringApplication}. The default implementation returns a new, +	 * {@code SpringApplicationBuilder} in its default state., +	 *, +	 * @return the {@code SpringApplicationBuilder}., +	 * @since 1.3.0, +	 */, +	protected SpringApplicationBuilder createSpringApplicationBuilder() {, +		return new SpringApplicationBuilder();, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +		SpringApplicationBuilder builder = createSpringApplicationBuilder();, +	 * Returns the {@code SpringApplicationBuilder} that is used to configure and create, +	 * the {@link SpringApplication}. The default implementation returns a new, +	 * {@code SpringApplicationBuilder} in its default state., +	 *, +	 * @return the {@code SpringApplicationBuilder}., +	 * @since 1.3.0, +	 */, +	protected SpringApplicationBuilder createSpringApplicationBuilder() {, +		return new SpringApplicationBuilder();, +	}, +, +	/**, +++ b/spring-boot/src/test/java/org/springframework/boot/context/web/SpringBootServletInitializerTests.java, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void applicationBuilderCanBeCustomized() throws Exception {, +		CustomSpringBootServletInitializer servletInitializer = new CustomSpringBootServletInitializer();, +		servletInitializer.createRootApplicationContext(this.servletContext);, +		assertThat(servletInitializer.applicationBuilder.built, is(true));, +	}, +, +	private class CustomSpringBootServletInitializer extends, +			MockSpringBootServletInitializer {, +, +		private final CustomSpringApplicationBuilder applicationBuilder = new CustomSpringApplicationBuilder();, +, +		@Override, +		protected SpringApplicationBuilder createSpringApplicationBuilder() {, +			return this.applicationBuilder;, +		}, +, +		@Override, +		protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {, +			return application.sources(Config.class);, +		}, +	}, +, +	private static class CustomSpringApplicationBuilder extends SpringApplicationBuilder {, +, +		private boolean built;, +, +		@Override, +		public SpringApplication build() {, +			this.built = true;, +			return super.build();, +		}, +, +	}, +]