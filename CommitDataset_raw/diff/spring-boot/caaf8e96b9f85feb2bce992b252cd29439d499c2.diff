[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		if (this.offset + length > this.bytes.length) {, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		if (this.offset + length > this.bytes.length) {, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +	private static final byte[] NO_EXTRA = {};, +, +	private static final AsciiBytes NO_COMMENT = new AsciiBytes("");, +, +	private byte[] header;, +, +	private int headerOffset;, +	private byte[] extra;, +	private AsciiBytes comment;, +	private long localHeaderOffset;, +	CentralDirectoryFileHeader() {, +	}, +, +	CentralDirectoryFileHeader(byte[] header, int headerOffset, AsciiBytes name,, +			byte[] extra, AsciiBytes comment, long localHeaderOffset) {, +		super();, +		this.headerOffset = headerOffset;, +		this.name = name;, +		this.extra = extra;, +		this.comment = comment;, +		this.localHeaderOffset = localHeaderOffset;, +	}, +, +	void load(byte[] data, int dataOffset, RandomAccessData variableData,, +			int variableOffset) throws IOException {, +		// Load fixed part, +		this.header = data;, +		this.headerOffset = dataOffset;, +		long nameLength = Bytes.littleEndianValue(data, dataOffset + 28, 2);, +		long extraLength = Bytes.littleEndianValue(data, dataOffset + 30, 2);, +		long commentLength = Bytes.littleEndianValue(data, dataOffset + 32, 2);, +		this.localHeaderOffset = Bytes.littleEndianValue(data, dataOffset + 42, 4);, +		// Load variable part, +		dataOffset += 46;, +		if (variableData != null) {, +			data = Bytes.get(variableData.getSubsection(variableOffset + 46,, +					nameLength + extraLength + commentLength));, +			dataOffset = 0;, +		}, +		this.name = new AsciiBytes(data, dataOffset, (int) nameLength);, +		this.extra = NO_EXTRA;, +		this.comment = NO_COMMENT;, +		if (extraLength > 0) {, +			this.extra = new byte[(int) extraLength];, +			System.arraycopy(data, (int) (dataOffset + nameLength), this.extra, 0,, +					this.extra.length);, +		}, +		if (commentLength > 0) {, +			this.comment = new AsciiBytes(data,, +					(int) (dataOffset + nameLength + extraLength), (int) commentLength);, +		}, +		return (int) Bytes.littleEndianValue(this.header, this.headerOffset + 10, 2);, +		long date = Bytes.littleEndianValue(this.header, this.headerOffset + 14, 2);, +		long time = Bytes.littleEndianValue(this.header, this.headerOffset + 12, 2);, +		return Bytes.littleEndianValue(this.header, this.headerOffset + 16, 4);, +		return Bytes.littleEndianValue(this.header, this.headerOffset + 20, 4);, +		return Bytes.littleEndianValue(this.header, this.headerOffset + 24, 4);, +	@Override, +	public CentralDirectoryFileHeader clone() {, +		byte[] header = new byte[46];, +		System.arraycopy(this.header, this.headerOffset, header, 0, header.length);, +		return new CentralDirectoryFileHeader(header, 0, this.name, header, this.comment,, +				this.localHeaderOffset);, +	public static CentralDirectoryFileHeader fromRandomAccessData(RandomAccessData data,, +			int offset) throws IOException {, +		CentralDirectoryFileHeader fileHeader = new CentralDirectoryFileHeader();, +		byte[] bytes = Bytes.get(data.getSubsection(offset, 46));, +		fileHeader.load(bytes, 0, data, offset);, +		return fileHeader;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +		if (this.offset + length > this.bytes.length) {, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +	private static final byte[] NO_EXTRA = {};, +, +	private static final AsciiBytes NO_COMMENT = new AsciiBytes("");, +, +	private byte[] header;, +, +	private int headerOffset;, +	private byte[] extra;, +	private AsciiBytes comment;, +	private long localHeaderOffset;, +	CentralDirectoryFileHeader() {, +	}, +, +	CentralDirectoryFileHeader(byte[] header, int headerOffset, AsciiBytes name,, +			byte[] extra, AsciiBytes comment, long localHeaderOffset) {, +		super();, +		this.headerOffset = headerOffset;, +		this.name = name;, +		this.extra = extra;, +		this.comment = comment;, +		this.localHeaderOffset = localHeaderOffset;, +	}, +]