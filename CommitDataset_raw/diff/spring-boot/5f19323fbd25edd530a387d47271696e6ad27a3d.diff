[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEvent.java, + * Copyright 2012-2016 the original author or authors., +		Assert.notNull(principal, "Principal must not be null");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEvent.java, + * Copyright 2012-2016 the original author or authors., +		Assert.notNull(principal, "Principal must not be null");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventRepository.java, + * Copyright 2012-2016 the original author or authors., + * @author Vedran Pavic, +	 * Find audit events since the time provided., +	 * @param after timestamp of earliest result required, +	 * @return audit events, +	 * @since 1.4.0, +	 */, +	List<AuditEvent> find(Date after);, +, +	/**, +	 * Find audit events of specified type relating to the specified principal since the, +	 * time provided., +	 * @param principal the principal name to search for, +	 * @param type the event type to search for, +	 * @param after timestamp of earliest result required, +	 * @return audit events of specified type relating to the principal, +	 * @since 1.4.0, +	 */, +	List<AuditEvent> find(String principal, String type, Date after);, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEvent.java, + * Copyright 2012-2016 the original author or authors., +		Assert.notNull(principal, "Principal must not be null");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventRepository.java, + * Copyright 2012-2016 the original author or authors., + * @author Vedran Pavic, +	 * Find audit events since the time provided., +	 * @param after timestamp of earliest result required, +	 * @return audit events, +	 * @since 1.4.0, +	 */, +	List<AuditEvent> find(Date after);, +, +	/**, +	 * Find audit events of specified type relating to the specified principal since the, +	 * time provided., +	 * @param principal the principal name to search for, +	 * @param type the event type to search for, +	 * @param after timestamp of earliest result required, +	 * @return audit events of specified type relating to the principal, +	 * @since 1.4.0, +	 */, +	List<AuditEvent> find(String principal, String type, Date after);, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.util.Assert;, +, + * @author Vedran Pavic, +	private final AuditEvent[] events;, +	@Override, +	public List<AuditEvent> find(Date after) {, +		LinkedList<AuditEvent> events = new LinkedList<AuditEvent>();, +		synchronized (this.events) {, +			for (int i = 0; i < this.events.length; i++) {, +				AuditEvent event = resolveTailEvent(i);, +				if (event == null) {, +					break;, +				}, +				if (isMatch(event, after)) {, +					events.addFirst(event);, +				}, +			}, +		}, +		return events;, +	public List<AuditEvent> find(String principal, Date after) {, +		Assert.notNull(principal, "Principal must not be null");, +		synchronized (this.events) {, +				AuditEvent event = resolveTailEvent(i);, +		}, +	@Override, +	public List<AuditEvent> find(String principal, String type, Date after) {, +		Assert.notNull(principal, "Principal must not be null");, +		Assert.notNull(type, "Type must not be null");, +		LinkedList<AuditEvent> events = new LinkedList<AuditEvent>();, +		synchronized (this.events) {, +			for (int i = 0; i < this.events.length; i++) {, +				AuditEvent event = resolveTailEvent(i);, +				if (event == null) {, +					break;, +				}, +				if (isMatch(event, principal, type, after)) {, +					events.addFirst(event);, +				}, +			}, +		}, +		return events;, +	public void add(AuditEvent event) {, +		Assert.notNull(event, "AuditEvent must not be null");, +		synchronized (this.events) {, +	}]