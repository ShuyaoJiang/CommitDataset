[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, +import java.util.ArrayList;, +import java.util.List;, +	private final Class<?> newArrayTreeType = findClass("com.sun.source.tree.NewArrayTree");, +, +	private final Method arrayValueMethod = findMethod(this.newArrayTreeType, "getInitializers");, +, +	public List<? extends ExpressionTree> getArrayExpression() throws Exception {, +		if (this.newArrayTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> elements = (List<?>) this.arrayValueMethod.invoke(getInstance());, +			List<ExpressionTree> result = new ArrayList<ExpressionTree>();, +			if (elements == null) {, +				return result;, +			}, +			for (Object element : elements) {, +				result.add(new ExpressionTree(element));, +			}, +			return result;, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, +import java.util.ArrayList;, +import java.util.List;, +	private final Class<?> newArrayTreeType = findClass("com.sun.source.tree.NewArrayTree");, +, +	private final Method arrayValueMethod = findMethod(this.newArrayTreeType, "getInitializers");, +, +	public List<? extends ExpressionTree> getArrayExpression() throws Exception {, +		if (this.newArrayTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> elements = (List<?>) this.arrayValueMethod.invoke(getInstance());, +			List<ExpressionTree> result = new ArrayList<ExpressionTree>();, +			if (elements == null) {, +				return result;, +			}, +			for (Object element : elements) {, +				result.add(new ExpressionTree(element));, +			}, +			return result;, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, +import java.util.List;, +			Object defaultValue = DEFAULT_TYPE_VALUES.get(wrapperType);, +				return getValue(initializer, defaultValue);, +			return defaultValue;, +, +		private Object getValue(ExpressionTree expression, Object defaultValue) throws Exception {, +			Object literalValue = expression.getLiteralValue();, +			if (literalValue != null) {, +				return literalValue;, +			List<? extends ExpressionTree> arrayValues = expression.getArrayExpression();, +			if (arrayValues != null) {, +				Object[] result = new Object[arrayValues.size()];, +				for (int i = 0; i < arrayValues.size(); i++) {, +					result[i] = getValue(arrayValues.get(i), null);, +				return result;, +			}, +			if (expression.getKind().equals("IDENTIFIER")) {, +				return this.staticFinals.get(expression.toString());, +			}, +			if (expression.getKind().equals("MEMBER_SELECT")) {, +				return WELL_KNOWN_STATIC_FINALS.get(expression.toString());, +			}, +			return defaultValue;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/ExpressionTree.java, +import java.util.ArrayList;, +import java.util.List;, +	private final Class<?> newArrayTreeType = findClass("com.sun.source.tree.NewArrayTree");, +, +	private final Method arrayValueMethod = findMethod(this.newArrayTreeType, "getInitializers");, +, +	public List<? extends ExpressionTree> getArrayExpression() throws Exception {, +		if (this.newArrayTreeType.isAssignableFrom(getInstance().getClass())) {, +			List<?> elements = (List<?>) this.arrayValueMethod.invoke(getInstance());, +			List<ExpressionTree> result = new ArrayList<ExpressionTree>();, +			if (elements == null) {, +				return result;, +			}, +			for (Object element : elements) {, +				result.add(new ExpressionTree(element));, +			}, +			return result;, +		}, +		return null;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, +import java.util.List;, +			Object defaultValue = DEFAULT_TYPE_VALUES.get(wrapperType);, +				return getValue(initializer, defaultValue);, +			return defaultValue;, +, +		private Object getValue(ExpressionTree expression, Object defaultValue) throws Exception {, +			Object literalValue = expression.getLiteralValue();, +			if (literalValue != null) {, +				return literalValue;]