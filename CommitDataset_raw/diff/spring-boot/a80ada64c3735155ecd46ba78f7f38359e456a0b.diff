[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		private static <T> T createDataSource(DataSourceProperties properties,, +				Class<? extends DataSource> type) {, +			return (T) DataSourceBuilder.create(properties.getClassLoader()).type(type), +					.password(properties.determinePassword()).build();, +		@Import({ TomcatDataSourceConfiguration.class,, +				HikariDataSourceConfiguration.class, DbcpDataSourceConfiguration.class,, +				Dbcp2DataSourceConfiguration.class }), +		@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.tomcat.jdbc.pool.DataSource", matchIfMissing = true), +			public org.apache.tomcat.jdbc.pool.DataSource dataSource(, +					DataSourceProperties properties) {, +				return createDataSource(properties,, +						org.apache.tomcat.jdbc.pool.DataSource.class);, +		@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true), +		@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp.BasicDataSource", matchIfMissing = true), +			public org.apache.commons.dbcp.BasicDataSource dataSource(, +					DataSourceProperties properties) {, +				return createDataSource(properties,, +						org.apache.commons.dbcp.BasicDataSource.class);, +		@ConditionalOnProperty(name = "spring.datasource.type", havingValue = "org.apache.commons.dbcp2.BasicDataSource", matchIfMissing = true), +			public org.apache.commons.dbcp2.BasicDataSource dataSource(, +					DataSourceProperties properties) {, +				return createDataSource(properties,, +						org.apache.commons.dbcp2.BasicDataSource.class);]