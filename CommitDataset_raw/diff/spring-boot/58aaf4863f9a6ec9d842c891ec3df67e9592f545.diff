[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + * https://freemarker.apache.org/docs/[FreeMarker], + * https://freemarker.apache.org/docs/[FreeMarker], +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + * https://freemarker.apache.org/docs/[FreeMarker], + * https://freemarker.apache.org/docs/[FreeMarker], +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +		String path = normalize(file);, +		String query = null;, +		int queryIndex = path.lastIndexOf('?');, +		if (queryIndex != -1) {, +			query = path.substring(queryIndex + 1);, +			path = path.substring(0, queryIndex);, +		}, +		setURL(context, JAR_PROTOCOL, null, -1, null, null, path, query,, +				context.getRef());, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + * https://freemarker.apache.org/docs/[FreeMarker], + * https://freemarker.apache.org/docs/[FreeMarker], +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +		String path = normalize(file);, +		String query = null;, +		int queryIndex = path.lastIndexOf('?');, +		if (queryIndex != -1) {, +			query = path.substring(queryIndex + 1);, +			path = path.substring(0, queryIndex);, +		}, +		setURL(context, JAR_PROTOCOL, null, -1, null, null, path, query,, +				context.getRef());, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/HandlerTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void urlWithRef() throws MalformedURLException {, +		assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes",, +				"!/foo.txt#alpha");, +	}, +, +	@Test, +	public void urlWithQuery() throws MalformedURLException {, +		assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes",, +				"!/foo.txt?alpha");, +	}, +, +		assertThat(customHandlerUrl.getFile()).isEqualTo(standardUrl.getFile());, +		assertThat(customHandlerUrl.getPath()).isEqualTo(standardUrl.getPath());, +		assertThat(customHandlerUrl.getQuery()).isEqualTo(standardUrl.getQuery());, +		assertThat(customHandlerUrl.getRef()).isEqualTo(standardUrl.getRef());, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, + * https://freemarker.apache.org/docs/[FreeMarker], + * https://freemarker.apache.org/docs/[FreeMarker], +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +		String path = normalize(file);, +		String query = null;, +		int queryIndex = path.lastIndexOf('?');, +		if (queryIndex != -1) {, +			query = path.substring(queryIndex + 1);, +			path = path.substring(0, queryIndex);, +		}, +		setURL(context, JAR_PROTOCOL, null, -1, null, null, path, query,, +				context.getRef());, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/HandlerTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void urlWithRef() throws MalformedURLException {, +		assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes",, +				"!/foo.txt#alpha");, +	}, +, +	@Test, +	public void urlWithQuery() throws MalformedURLException {, +		assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes",, +				"!/foo.txt?alpha");, +	}, +, +		assertThat(customHandlerUrl.getFile()).isEqualTo(standardUrl.getFile());, +		assertThat(customHandlerUrl.getPath()).isEqualTo(standardUrl.getPath());, +		assertThat(customHandlerUrl.getQuery()).isEqualTo(standardUrl.getQuery());, +		assertThat(customHandlerUrl.getRef()).isEqualTo(standardUrl.getRef());, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoSuchMethodFailureAnalyzer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.diagnostics.analyzer;, +, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.net.URL;]