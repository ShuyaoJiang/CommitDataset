[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +attribute if you need to store the property somewhere other than in `local` scope. If, +you need a fallback value in case the property is not set in the `Environment`, you can, +use the `defaultValue` attribute., +	<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host", +			defaultValue="localhost"/>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +attribute if you need to store the property somewhere other than in `local` scope. If, +you need a fallback value in case the property is not set in the `Environment`, you can, +use the `defaultValue` attribute., +	<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host", +			defaultValue="localhost"/>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java, +			return resolver.getProperty(source.substring(lastDot + 1), defaultValue);, +		return defaultValue;, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +attribute if you need to store the property somewhere other than in `local` scope. If, +you need a fallback value in case the property is not set in the `Environment`, you can, +use the `defaultValue` attribute., +	<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host", +			defaultValue="localhost"/>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java, +			return resolver.getProperty(source.substring(lastDot + 1), defaultValue);, +		return defaultValue;, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java, + * @author Stephane Nicoll, +	public void springPropertyNoValue() throws Exception {, +		initialize("property.xml");, +		assertThat(this.context.getProperty("SIMPLE")).isNull();, +	}, +, +	@Test, +	public void relaxedSpringPropertyNoValue() throws Exception {, +		initialize("property.xml");, +		assertThat(this.context.getProperty("MINE")).isNull();, +	}, +, +	@Test, +		initialize("property-default-value.xml");, +		assertThat(this.context.getProperty("SIMPLE")).isEqualTo("foo");, +	}, +, +	@Test, +	public void relaxedSpringPropertyWithDefaultValue() throws Exception {, +		initialize("property-default-value.xml");, +		assertThat(this.context.getProperty("MINE")).isEqualTo("bar");, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +attribute if you need to store the property somewhere other than in `local` scope. If, +you need a fallback value in case the property is not set in the `Environment`, you can, +use the `defaultValue` attribute., +	<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host", +			defaultValue="localhost"/>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java, +			return resolver.getProperty(source.substring(lastDot + 1), defaultValue);, +		return defaultValue;, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java, + * @author Stephane Nicoll, +	public void springPropertyNoValue() throws Exception {, +		initialize("property.xml");, +		assertThat(this.context.getProperty("SIMPLE")).isNull();, +	}, +, +	@Test, +	public void relaxedSpringPropertyNoValue() throws Exception {, +		initialize("property.xml");, +		assertThat(this.context.getProperty("MINE")).isNull();, +	}, +, +	@Test, +		initialize("property-default-value.xml");, +		assertThat(this.context.getProperty("SIMPLE")).isEqualTo("foo");, +	}, +, +	@Test, +	public void relaxedSpringPropertyWithDefaultValue() throws Exception {, +		initialize("property-default-value.xml");, +		assertThat(this.context.getProperty("MINE")).isEqualTo("bar");, +++ b/spring-boot/src/test/resources/org/springframework/boot/logging/logback/property-default-value.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<configuration>, +	<include resource="org/springframework/boot/logging/logback/base.xml" />, +	<springProperty scope="context" name="SIMPLE" source="testpropertyfoobar" defaultValue="foo"/>, +	<springProperty scope="context" name="MINE" source="my.example-property" defaultValue="bar"/>, +</configuration>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +attribute if you need to store the property somewhere other than in `local` scope. If, +you need a fallback value in case the property is not set in the `Environment`, you can, +use the `defaultValue` attribute., +	<springProperty scope="context" name="fluentHost" source="myapp.fluentd.host", +			defaultValue="localhost"/>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java, +			return resolver.getProperty(source.substring(lastDot + 1), defaultValue);, +		return defaultValue;, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java, + * @author Stephane Nicoll, +	public void springPropertyNoValue() throws Exception {, +		initialize("property.xml");, +		assertThat(this.context.getProperty("SIMPLE")).isNull();, +	}, +]