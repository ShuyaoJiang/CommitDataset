[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +	 * @param restTemplateBuilder builder used to configure underlying {@link RestTemplate}, +	 */, +	public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {, +		this(buildRestTemplate(restTemplateBuilder));, +	}, +, +	private static RestTemplate buildRestTemplate(RestTemplateBuilder restTemplateBuilder) {, +		Assert.notNull(restTemplateBuilder, "RestTemplateBuilder must not be null");, +		return restTemplateBuilder.build();, +	}, +, +	/**, +	 * Create a new {@link TestRestTemplate} instance., +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +	 * @param restTemplateBuilder builder used to configure underlying {@link RestTemplate}, +	 */, +	public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {, +		this(buildRestTemplate(restTemplateBuilder));, +	}, +, +	private static RestTemplate buildRestTemplate(RestTemplateBuilder restTemplateBuilder) {, +		Assert.notNull(restTemplateBuilder, "RestTemplateBuilder must not be null");, +		return restTemplateBuilder.build();, +	}, +, +	/**, +	 * Create a new {@link TestRestTemplate} instance., +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java, +import org.springframework.boot.web.client.RestTemplateBuilder;, +import static org.mockito.BDDMockito.given;, +	public void fromRestTemplateBuilder() {, +		RestTemplateBuilder builder = mock(RestTemplateBuilder.class);, +		RestTemplate delegate = new RestTemplate();, +		given(builder.build()).willReturn(delegate);, +		assertThat(new TestRestTemplate(builder).getRestTemplate()), +				.isEqualTo(delegate);, +	}, +, +	@Test]