[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +			bootBuildInfo.setDestinationDir(this.project, +					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),, +							"META-INF")));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +			bootBuildInfo.setDestinationDir(this.project, +					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),, +							"META-INF")));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		bootStartScripts.setOutputDir(, +				project.provider(() -> new File(project.getBuildDir(), "bootScripts")));, +		bootStartScripts.setApplicationName(, +				project.provider(() -> applicationConvention.getApplicationName()));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +			bootBuildInfo.setDestinationDir(this.project, +					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),, +							"META-INF")));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		bootStartScripts.setOutputDir(, +				project.provider(() -> new File(project.getBuildDir(), "bootScripts")));, +		bootStartScripts.setApplicationName(, +				project.provider(() -> applicationConvention.getApplicationName()));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/application/CreateBootStartScripts.java, +import java.io.File;, +, +import org.gradle.api.provider.PropertyState;, +import org.gradle.api.provider.Provider;, +import org.gradle.api.tasks.Input;, +import org.gradle.api.tasks.OutputDirectory;, +	private final PropertyState<File> outputDir = getProject().property(File.class);, +, +	private final PropertyState<String> applicationName = getProject(), +			.property(String.class);, +, +	@Input, +	@Override, +	public String getApplicationName() {, +		return this.applicationName.getOrNull();, +	}, +, +	@Override, +	public void setApplicationName(String applicationName) {, +		this.applicationName.set(applicationName);, +	}, +, +	/**, +	 * Sets the application name to the value from the given, +	 * {@code applicationNameProvider}., +	 * @param applicationNameProvider the provider of the application name, +	 */, +	public void setApplicationName(Provider<String> applicationNameProvider) {, +		this.applicationName.set(applicationNameProvider);, +	}, +, +	@Override, +	@OutputDirectory, +	public File getOutputDir() {, +		return this.outputDir.getOrNull();, +	}, +, +	@Override, +	public void setOutputDir(File outputDir) {, +		this.outputDir.set(outputDir);, +	}, +, +	/**, +	 * Sets the output directory to the value from the given {@code outputDirProvider}., +	 * @param outputDirProvider the provider of the output directory, +	 */, +	public void setOutputDir(Provider<File> outputDirProvider) {, +		this.outputDir.set(outputDirProvider);, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/dsl/SpringBootExtension.java, +			bootBuildInfo.setDestinationDir(this.project, +					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),, +							"META-INF")));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +		bootStartScripts.setOutputDir(, +				project.provider(() -> new File(project.getBuildDir(), "bootScripts")));, +		bootStartScripts.setApplicationName(, +				project.provider(() -> applicationConvention.getApplicationName()));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/application/CreateBootStartScripts.java, +import java.io.File;, +, +import org.gradle.api.provider.PropertyState;, +import org.gradle.api.provider.Provider;, +import org.gradle.api.tasks.Input;, +import org.gradle.api.tasks.OutputDirectory;, +	private final PropertyState<File> outputDir = getProject().property(File.class);, +, +	private final PropertyState<String> applicationName = getProject(), +			.property(String.class);, +, +	@Input, +	@Override, +	public String getApplicationName() {, +		return this.applicationName.getOrNull();, +	}, +]