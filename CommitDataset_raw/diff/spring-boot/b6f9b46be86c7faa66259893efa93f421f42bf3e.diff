[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a, +mocked web application only works with WebFlux at the moment., +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a, +mocked web application only works with WebFlux at the moment., +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}. At, + * the moment, only WebFlux applications are supported., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a, +mocked web application only works with WebFlux at the moment., +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}. At, + * the moment, only WebFlux applications are supported., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;, +import org.springframework.web.server.WebHandler;, +@AutoConfigureAfter({ CodecsAutoConfiguration.class, WebFluxAutoConfiguration.class }), +	@ConditionalOnBean(WebHandler.class), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: This setup is only supported by WebFlux applications as using `WebTestClient` in a, +mocked web application only works with WebFlux at the moment., +, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}. At, + * the moment, only WebFlux applications are supported., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration;, +import org.springframework.web.server.WebHandler;, +@AutoConfigureAfter({ CodecsAutoConfiguration.class, WebFluxAutoConfiguration.class }), +	@ConditionalOnBean(WebHandler.class), +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, + * @author Stephane Nicoll, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(, +					WebTestClientAutoConfiguration.class));, +	@Test, +	public void shouldNotBeConfiguredWithoutWebHandler() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasNotFailed();, +			assertThat(context).doesNotHaveBean(WebTestClient.class);, +		});, +		this.contextRunner.withUserConfiguration(CodecConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(WebTestClient.class);, +					assertThat(context).hasSingleBean(CodecCustomizer.class);, +					verify(context.getBean(CodecCustomizer.class)).customize(, +							any(CodecConfigurer.class));, +				});, +		this.contextRunner.withUserConfiguration(BaseConfiguration.class), +				.withPropertyValues("spring.test.webtestclient.timeout=15m"), +				.run((context) -> {, +					WebTestClient webTestClient = context.getBean(WebTestClient.class);, +					Object duration = ReflectionTestUtils.getField(webTestClient,, +							"timeout");, +				});]