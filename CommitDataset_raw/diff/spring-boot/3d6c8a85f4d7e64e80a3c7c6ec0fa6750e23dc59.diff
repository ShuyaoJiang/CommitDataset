[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +			return new JarURLConnection(url, getRootJarFileFromUrl(url));, +	public JarFile getRootJarFileFromUrl(URL url) throws IOException {, +		return getRootJarFile(name);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +			return new JarURLConnection(url, getRootJarFileFromUrl(url));, +	public JarFile getRootJarFileFromUrl(URL url) throws IOException {, +		return getRootJarFile(name);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +	protected JarURLConnection(URL url, JarFile jarFile) throws IOException {, +		String spec = url.getFile().substring(jarFile.getUrl().getFile().length());, +		int separator;, +		while ((separator = spec.indexOf(SEPARATOR)) > 0) {, +			jarFile = getNestedJarFile(jarFile, spec.substring(0, separator));, +			spec = spec.substring(separator + SEPARATOR.length());, +		this.jarFile = jarFile;, +		this.jarEntryName = getJarEntryName(spec);, +	}, +, +	private JarFile getNestedJarFile(JarFile jarFile, String name) throws IOException {, +		JarEntry jarEntry = jarFile.getJarEntry(name);, +		if (jarEntry == null) {, +			throwFileNotFound(jarEntry, jarFile);, +		}, +		return jarFile.getNestedJarFile(jarEntry);, +				throwFileNotFound(this.jarEntryName, this.jarFile);, +	private void throwFileNotFound(Object entry, JarFile jarFile) throws FileNotFoundException {, +		if (Boolean.TRUE.equals(useFastExceptions.get())) {, +			throw FILE_NOT_FOUND_EXCEPTION;, +		}, +		throw new FileNotFoundException("JAR entry " + entry + " not found in ", +				+ jarFile.getName());, +	}, +, +			String spec = this.jarFile.getUrl().getFile();, +			if (spec.endsWith(SEPARATOR)) {, +				spec = spec.substring(0, spec.length() - SEPARATOR.length());, +			if (spec.indexOf(SEPARATOR) == -1) {, +				return new URL(spec);, +			}, +			return new URL("jar:" + spec);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +			return new JarURLConnection(url, getRootJarFileFromUrl(url));, +	public JarFile getRootJarFileFromUrl(URL url) throws IOException {, +		return getRootJarFile(name);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +	protected JarURLConnection(URL url, JarFile jarFile) throws IOException {, +		String spec = url.getFile().substring(jarFile.getUrl().getFile().length());, +		int separator;, +		while ((separator = spec.indexOf(SEPARATOR)) > 0) {, +			jarFile = getNestedJarFile(jarFile, spec.substring(0, separator));, +			spec = spec.substring(separator + SEPARATOR.length());, +		this.jarFile = jarFile;, +		this.jarEntryName = getJarEntryName(spec);, +	}, +, +	private JarFile getNestedJarFile(JarFile jarFile, String name) throws IOException {, +		JarEntry jarEntry = jarFile.getJarEntry(name);, +		if (jarEntry == null) {, +			throwFileNotFound(jarEntry, jarFile);, +		}, +		return jarFile.getNestedJarFile(jarEntry);, +				throwFileNotFound(this.jarEntryName, this.jarFile);, +	private void throwFileNotFound(Object entry, JarFile jarFile) throws FileNotFoundException {, +		if (Boolean.TRUE.equals(useFastExceptions.get())) {, +			throw FILE_NOT_FOUND_EXCEPTION;, +		}, +		throw new FileNotFoundException("JAR entry " + entry + " not found in ", +				+ jarFile.getName());, +	}, +, +			String spec = this.jarFile.getUrl().getFile();, +			if (spec.endsWith(SEPARATOR)) {, +				spec = spec.substring(0, spec.length() - SEPARATOR.length());, +			if (spec.indexOf(SEPARATOR) == -1) {, +				return new URL(spec);, +			}, +			return new URL("jar:" + spec);, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java, +import java.io.File;, +import org.junit.Rule;, +import org.junit.rules.TemporaryFolder;, +import org.springframework.boot.loader.jar.JarFile;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, + * @author Phillip Webb, +@SuppressWarnings("resource"), +	@Rule, +	public TemporaryFolder temporaryFolder = new TemporaryFolder();, +, +	@Test, +	public void resolveFromNested() throws Exception {, +		File file = this.temporaryFolder.newFile();, +		TestJarCreator.createTestJar(file);, +		JarFile jarFile = new JarFile(file);, +		URL url = jarFile.getUrl();, +		LaunchedURLClassLoader loader = new LaunchedURLClassLoader(new URL[] { url },, +				null);, +		URL resource = loader.getResource("nested.jar!/3.dat");, +		assertThat(resource.toString(), equalTo(url + "nested.jar!/3.dat"));]