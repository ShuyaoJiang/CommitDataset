[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java, + * Copyright 2012-2018 the original author or authors., +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withUserConfiguration(configuration).run((context) -> consumer, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java, + * Copyright 2012-2018 the original author or authors., +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withUserConfiguration(configuration).run((context) -> consumer, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/mappings/MappingsEndpointTests.java, +import java.util.function.Supplier;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +	@SuppressWarnings("unchecked"), +		Supplier<ConfigurableWebApplicationContext> contextSupplier = () -> {, +		};, +		new WebApplicationContextRunner(contextSupplier), +				.withUserConfiguration(EndpointConfiguration.class,, +						ServletWebConfiguration.class), +				.run((context) -> {, +					assertThat(contextMappings.getMappings()).containsOnlyKeys(, +							"dispatcherServlets", "servletFilters", "servlets");, +					List<FilterRegistrationMappingDescription> filters = mappings(, +							contextMappings, "servletFilters");, +		new ReactiveWebApplicationContextRunner(), +						ReactiveWebConfiguration.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java, + * Copyright 2012-2018 the original author or authors., +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withUserConfiguration(configuration).run((context) -> consumer, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/mappings/MappingsEndpointTests.java, +import java.util.function.Supplier;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +	@SuppressWarnings("unchecked"), +		Supplier<ConfigurableWebApplicationContext> contextSupplier = () -> {, +		};, +		new WebApplicationContextRunner(contextSupplier), +				.withUserConfiguration(EndpointConfiguration.class,, +						ServletWebConfiguration.class), +				.run((context) -> {, +					assertThat(contextMappings.getMappings()).containsOnlyKeys(, +							"dispatcherServlets", "servletFilters", "servlets");, +					List<FilterRegistrationMappingDescription> filters = mappings(, +							contextMappings, "servletFilters");, +		new ReactiveWebApplicationContextRunner(), +						ReactiveWebConfiguration.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java, + * Copyright 2012-2018 the original author or authors., +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withUserConfiguration(configuration).run((context) -> consumer, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/mappings/MappingsEndpointTests.java, +import java.util.function.Supplier;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +	@SuppressWarnings("unchecked"), +		Supplier<ConfigurableWebApplicationContext> contextSupplier = () -> {, +		};, +		new WebApplicationContextRunner(contextSupplier), +				.withUserConfiguration(EndpointConfiguration.class,, +						ServletWebConfiguration.class), +				.run((context) -> {, +					assertThat(contextMappings.getMappings()).containsOnlyKeys(, +							"dispatcherServlets", "servletFilters", "servlets");, +					List<FilterRegistrationMappingDescription> filters = mappings(, +							contextMappings, "servletFilters");, +		new ReactiveWebApplicationContextRunner(), +						ReactiveWebConfiguration.class), +				.run((context) -> {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBeanCreationFailureAnalyzer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/Token.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/package-info.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java]