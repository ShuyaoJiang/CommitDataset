[+++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, +import java.lang.reflect.Constructor;, +import java.util.ArrayList;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +	private static final Log log = LogFactory.getLog(FailureAnalyzers.class);, +, +		List<FailureAnalyzer> analyzers = loadFailureAnalyzers(classLoader);, +	private static List<FailureAnalyzer> loadFailureAnalyzers(ClassLoader classLoader) {, +		List<String> analyzerNames = SpringFactoriesLoader, +				.loadFactoryNames(FailureAnalyzer.class, classLoader);, +		List<FailureAnalyzer> analyzers = new ArrayList<FailureAnalyzer>();, +		for (String analyzerName : analyzerNames) {, +			try {, +				Constructor<?> constructor = ClassUtils.forName(analyzerName, classLoader), +						.getDeclaredConstructor();, +				ReflectionUtils.makeAccessible(constructor);, +				analyzers.add((FailureAnalyzer) constructor.newInstance());, +			}, +			catch (Throwable ex) {, +				log.trace("Failed to load " + analyzerName, ex);, +			}, +		}, +		AnnotationAwareOrderComparator.sort(analyzers);, +		return analyzers;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java, +import java.lang.reflect.Constructor;, +import java.util.ArrayList;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +	private static final Log log = LogFactory.getLog(FailureAnalyzers.class);, +, +		List<FailureAnalyzer> analyzers = loadFailureAnalyzers(classLoader);, +	private static List<FailureAnalyzer> loadFailureAnalyzers(ClassLoader classLoader) {, +		List<String> analyzerNames = SpringFactoriesLoader, +				.loadFactoryNames(FailureAnalyzer.class, classLoader);, +		List<FailureAnalyzer> analyzers = new ArrayList<FailureAnalyzer>();, +		for (String analyzerName : analyzerNames) {, +			try {, +				Constructor<?> constructor = ClassUtils.forName(analyzerName, classLoader), +						.getDeclaredConstructor();, +				ReflectionUtils.makeAccessible(constructor);, +				analyzers.add((FailureAnalyzer) constructor.newInstance());, +			}, +			catch (Throwable ex) {, +				log.trace("Failed to load " + analyzerName, ex);, +			}, +		}, +		AnnotationAwareOrderComparator.sort(analyzers);, +		return analyzers;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/diagnostics/FailureAnalyzersIntegrationTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.diagnostics;, +, +import javax.annotation.PostConstruct;, +, +import org.junit.Rule;, +import org.junit.Test;, +, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.boot.context.embedded.PortInUseException;, +import org.springframework.boot.testutil.InternalOutputCapture;, +import org.springframework.context.annotation.Configuration;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +/**, + * Integration tests for {@link FailureAnalyzers}., + *, + * @author Andy Wilkinson, + */, +public class FailureAnalyzersIntegrationTests {]