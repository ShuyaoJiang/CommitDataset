[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> groupId;, +		private OptionSpec<String> artifactId;, +		private OptionSpec<String> version;, +, +		private OptionSpec<String> name;, +, +		private OptionSpec<String> description;, +		private OptionSpec<String> type;, +, +		private OptionSpec<String> javaVersion;, +, +		private OptionSpec<String> language;, +, +		private OptionSpec<String> bootVersion;, +, +		private OptionSpec<String> dependencies;, +			this.groupId = option(Arrays.asList("groupId", "g"),, +					"Project coordinates (for example 'org.test')"), +			this.artifactId = option(Arrays.asList("artifactId", "a"),, +					"Project coordinates; infer archive name (for example 'test')"), +					.withRequiredArg();, +			this.version = option(Arrays.asList("version", "v"),, +					"Project version (for example '0.0.1-SNAPSHOT')"), +					.withRequiredArg();, +			this.name = option(Arrays.asList("name", "n"),, +					"Project name; infer application name"), +					.withRequiredArg();, +			this.description = option("description",, +					"Project description"), +					.withRequiredArg();, +					"Project packaging (for example 'jar')").withRequiredArg();, +			this.type = option(, +					Arrays.asList("type", "t"),, +					"Project type. Not normally needed if you use --build ", +							+ "and/or --format. Check the capabilities of the service ", +							+ "(--list) for more details").withRequiredArg();, +					"Build system to use (for example 'maven' or 'gradle')"), +					"Format of the generated content (for example 'build' for a build file, ", +			this.javaVersion = option(Arrays.asList("java-version", "j"),, +					"Language level (for example '1.8')").withRequiredArg();, +			this.language = option(Arrays.asList("language", "l"),, +					"Programming language  (for example 'java')"), +			this.bootVersion = option(Arrays.asList("boot-version", "b"),, +					"Spring Boot version (for example '1.2.0.RELEASE')"), +			this.dependencies = option(, +					Arrays.asList("dependencies", "d"),, +					"Comma-separated list of dependency identifiers to include in the ", +							+ "generated project").withRequiredArg();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +		private OptionSpec<String> groupId;, +		private OptionSpec<String> artifactId;, +		private OptionSpec<String> version;, +, +		private OptionSpec<String> name;, +, +		private OptionSpec<String> description;, +		private OptionSpec<String> type;, +, +		private OptionSpec<String> javaVersion;, +, +		private OptionSpec<String> language;, +, +		private OptionSpec<String> bootVersion;, +, +		private OptionSpec<String> dependencies;, +			this.groupId = option(Arrays.asList("groupId", "g"),, +					"Project coordinates (for example 'org.test')"), +			this.artifactId = option(Arrays.asList("artifactId", "a"),, +					"Project coordinates; infer archive name (for example 'test')"), +					.withRequiredArg();, +			this.version = option(Arrays.asList("version", "v"),, +					"Project version (for example '0.0.1-SNAPSHOT')"), +					.withRequiredArg();, +			this.name = option(Arrays.asList("name", "n"),, +					"Project name; infer application name"), +					.withRequiredArg();, +			this.description = option("description",, +					"Project description"), +					.withRequiredArg();, +					"Project packaging (for example 'jar')").withRequiredArg();, +			this.type = option(, +					Arrays.asList("type", "t"),, +					"Project type. Not normally needed if you use --build ", +							+ "and/or --format. Check the capabilities of the service ", +							+ "(--list) for more details").withRequiredArg();, +					"Build system to use (for example 'maven' or 'gradle')"), +					"Format of the generated content (for example 'build' for a build file, ", +			this.javaVersion = option(Arrays.asList("java-version", "j"),, +					"Language level (for example '1.8')").withRequiredArg();, +			this.language = option(Arrays.asList("language", "l"),, +					"Programming language  (for example 'java')"), +			this.bootVersion = option(Arrays.asList("boot-version", "b"),, +					"Spring Boot version (for example '1.2.0.RELEASE')"), +			this.dependencies = option(, +					Arrays.asList("dependencies", "d"),, +					"Comma-separated list of dependency identifiers to include in the ", +							+ "generated project").withRequiredArg();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java, +]