[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.embedded.NettyWebServerFactoryCustomizer;, +					UndertowWebServerFactoryCustomizer.class,, +					NettyWebServerFactoryCustomizer.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.embedded.NettyWebServerFactoryCustomizer;, +					UndertowWebServerFactoryCustomizer.class,, +					NettyWebServerFactoryCustomizer.class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java, +import reactor.netty.http.server.HttpServer;, +	/**, +	 * Nested configuration if Netty is being used., +	 */, +	@Configuration, +	@ConditionalOnClass(HttpServer.class), +	public static class NettyWebServerFactoryCustomizerConfiguration {, +, +		@Bean, +		public NettyWebServerFactoryCustomizer nettyWebServerFactoryCustomizer(, +				Environment environment, ServerProperties serverProperties) {, +			return new NettyWebServerFactoryCustomizer(environment, serverProperties);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.embedded.NettyWebServerFactoryCustomizer;, +					UndertowWebServerFactoryCustomizer.class,, +					NettyWebServerFactoryCustomizer.class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java, +import reactor.netty.http.server.HttpServer;, +	/**, +	 * Nested configuration if Netty is being used., +	 */, +	@Configuration, +	@ConditionalOnClass(HttpServer.class), +	public static class NettyWebServerFactoryCustomizerConfiguration {, +, +		@Bean, +		public NettyWebServerFactoryCustomizer nettyWebServerFactoryCustomizer(, +				Environment environment, ServerProperties serverProperties) {, +			return new NettyWebServerFactoryCustomizer(environment, serverProperties);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/NettyWebServerFactoryCustomizer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web.embedded;, +, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.cloud.CloudPlatform;, +import org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;, +import org.springframework.boot.web.server.WebServerFactoryCustomizer;, +import org.springframework.core.Ordered;, +import org.springframework.core.env.Environment;, +, +/**, + * Customization for Netty-specific features., + *, + * @author Brian Clozel, + * @since 2.1.0, + */, +public class NettyWebServerFactoryCustomizer, +		implements WebServerFactoryCustomizer<NettyReactiveWebServerFactory>, Ordered {, +, +	private final Environment environment;, +, +	private final ServerProperties serverProperties;, +, +	public NettyWebServerFactoryCustomizer(Environment environment,, +			ServerProperties serverProperties) {, +		this.environment = environment;, +		this.serverProperties = serverProperties;, +	}, +, +	@Override, +	public int getOrder() {, +		return 0;, +	}, +, +	@Override, +	public void customize(NettyReactiveWebServerFactory factory) {, +		factory.setUseForwardHeaders(, +				getOrDeduceUseForwardHeaders(this.serverProperties, this.environment));]