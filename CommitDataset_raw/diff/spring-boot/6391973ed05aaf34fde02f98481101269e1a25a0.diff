[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			else {, +				reinitialize();, +			}, +	/**, +	 * Reinitialize the logging system if required. Called when, +	 * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May, +	 * be used to reload configuration (for example to pickup additional System, +	 * properties)., +	 */, +	protected void reinitialize() {, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			else {, +				reinitialize();, +			}, +	/**, +	 * Reinitialize the logging system if required. Called when, +	 * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May, +	 * be used to reload configuration (for example to pickup additional System, +	 * properties)., +	 */, +	protected void reinitialize() {, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	private LoggingSystem loggingSystem;, +, +		this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +				.getClassLoader());, +		this.loggingSystem.beforeInitialize();, +		if (this.loggingSystem == null) {, +			this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +					.getClassLoader());, +		}, +		initializeSystem(environment, this.loggingSystem);, +		initializeFinalLoggingLevels(environment, this.loggingSystem);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			else {, +				reinitialize();, +			}, +	/**, +	 * Reinitialize the logging system if required. Called when, +	 * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May, +	 * be used to reload configuration (for example to pickup additional System, +	 * properties)., +	 */, +	protected void reinitialize() {, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	private LoggingSystem loggingSystem;, +, +		this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +				.getClassLoader());, +		this.loggingSystem.beforeInitialize();, +		if (this.loggingSystem == null) {, +			this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +					.getClassLoader());, +		}, +		initializeSystem(environment, this.loggingSystem);, +		initializeFinalLoggingLevels(environment, this.loggingSystem);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	 * {@link #initialize(String, LogFile)} to reduce logging noise until the system has, +	 * been fully Initialized., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			else {, +				reinitialize();, +			}, +	/**, +	 * Reinitialize the logging system if required. Called when, +	 * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May, +	 * be used to reload configuration (for example to pickup additional System, +	 * properties)., +	 */, +	protected void reinitialize() {, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +	private LoggingSystem loggingSystem;, +, +		this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +				.getClassLoader());, +		this.loggingSystem.beforeInitialize();, +		if (this.loggingSystem == null) {, +			this.loggingSystem = LoggingSystem.get(event.getSpringApplication(), +					.getClassLoader());, +		}, +		initializeSystem(environment, this.loggingSystem);, +		initializeFinalLoggingLevels(environment, this.loggingSystem);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	 * {@link #initialize(String, LogFile)} to reduce logging noise until the system has, +	 * been fully Initialized., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j/Log4JLoggingSystem.java, +	protected void reinitialize() {, +		loadConfiguration(getSelfInitializationConfig(), null);, +	}, +, +	@Override]