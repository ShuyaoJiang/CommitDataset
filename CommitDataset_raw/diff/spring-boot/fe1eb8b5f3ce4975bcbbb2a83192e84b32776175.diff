[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/README.adoc, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, +	<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, +	<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, +	<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.test.web.servlet.MvcResult;, +import org.springframework.test.web.servlet.ResultHandler;, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/loggers/org.springframework.boot"), +				.perform(post("/loggers/org.springframework.boot"), +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +				.andExpect(status().isOk()).andDo(document("set-logger"));, +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		final File docs = new File("src/main/asciidoc");, +		final Map<String, Object> model = new LinkedHashMap<String, Object>();, +		final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, +		model.put("endpoints", endpoints);, +		for (MvcEndpoint endpoint : getEndpoints()) {, +			final String endpointPath = (StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/");, +			if (!SKIPPED.contains(endpointPath)) {, +				String output = endpointPath.substring(1);, +				output = output.length() > 0 ? output : "./";, +				this.mockMvc, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +						.andExpect(status().isOk()).andDo(document(output)), +						.andDo(new ResultHandler() {, +, +							@Override, +							public void handle(MvcResult mvcResult) throws Exception {, +								EndpointDoc endpoint = new EndpointDoc(docs,, +										endpointPath);, +								endpoints.add(endpoint);, +							}, +, +						});, +			}, +		}, +		PrintWriter writer = new PrintWriter(file, "UTF-8");, +		try {, +		finally {, +			writer.close();, +		List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +		Collections.sort(endpoints, new Comparator<MvcEndpoint>() {, +			@Override, +			public int compare(MvcEndpoint o1, MvcEndpoint o2) {, +				return o1.getPath().compareTo(o2.getPath());, +		});, +		return endpoints;, +++ b/.settings-template.xml, +++ b/README.adoc, +++ /dev/null, +++ b/pom.xml, +	<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.6.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import org.springframework.test.web.servlet.MvcResult;, +import org.springframework.test.web.servlet.ResultHandler;, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/loggers/org.springframework.boot"), +				.perform(post("/loggers/org.springframework.boot"), +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +				.andExpect(status().isOk()).andDo(document("set-logger"));, +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin")]