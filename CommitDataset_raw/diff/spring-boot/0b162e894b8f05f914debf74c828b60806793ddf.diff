[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplicationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.autoconfigure.webflux.MockReactiveWebServerFactory;, +import org.springframework.boot.context.embedded.ReactiveWebServerFactory;, +import org.springframework.http.server.reactive.HttpHandler;, + * @author Dave Syer, +		ctx.register(ReactiveApplicationConfig.class, NotWebApplicationConfiguration.class);, +	protected static class ReactiveApplicationConfig {, +, +		@Bean, +		public ReactiveWebServerFactory reactiveWebServerFactory() {, +			return new MockReactiveWebServerFactory();, +		}, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return (request, response) -> Mono.empty();, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplicationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.autoconfigure.webflux.MockReactiveWebServerFactory;, +import org.springframework.boot.context.embedded.ReactiveWebServerFactory;, +import org.springframework.http.server.reactive.HttpHandler;, + * @author Dave Syer, +		ctx.register(ReactiveApplicationConfig.class, NotWebApplicationConfiguration.class);, +	protected static class ReactiveApplicationConfig {, +, +		@Bean, +		public ReactiveWebServerFactory reactiveWebServerFactory() {, +			return new MockReactiveWebServerFactory();, +		}, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return (request, response) -> Mono.empty();, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplicationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.autoconfigure.webflux.MockReactiveWebServerFactory;, +import org.springframework.boot.context.embedded.ReactiveWebServerFactory;, +import org.springframework.http.server.reactive.HttpHandler;, +		@Bean, +		public ReactiveWebServerFactory reactiveWebServerFactory() {, +			return new MockReactiveWebServerFactory();, +		}, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return (request, response) -> Mono.empty();, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplicationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.autoconfigure.webflux.MockReactiveWebServerFactory;, +import org.springframework.boot.context.embedded.ReactiveWebServerFactory;, +import org.springframework.http.server.reactive.HttpHandler;, + * @author Dave Syer, +		ctx.register(ReactiveApplicationConfig.class, NotWebApplicationConfiguration.class);, +	protected static class ReactiveApplicationConfig {, +, +		@Bean, +		public ReactiveWebServerFactory reactiveWebServerFactory() {, +			return new MockReactiveWebServerFactory();, +		}, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return (request, response) -> Mono.empty();, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnWebApplicationTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.boot.autoconfigure.webflux.MockReactiveWebServerFactory;, +import org.springframework.boot.context.embedded.ReactiveWebServerFactory;, +import org.springframework.http.server.reactive.HttpHandler;, +		@Bean, +		public ReactiveWebServerFactory reactiveWebServerFactory() {, +			return new MockReactiveWebServerFactory();, +		}, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return (request, response) -> Mono.empty();, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ReactiveWebApplicationContext.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContextException;, +import org.springframework.http.server.reactive.HttpHandler;, +import org.springframework.util.StringUtils;, + * A {@link AnnotationConfigApplicationContext} that can be used to bootstrap, + * itself from a contained embedded web server factory bean., + *, +]