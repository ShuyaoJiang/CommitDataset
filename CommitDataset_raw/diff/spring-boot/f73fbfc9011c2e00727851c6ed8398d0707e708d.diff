[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import org.springframework.core.env.MapPropertySource;, +				// Don't use SimpleCommandLinePropertySource (SPR-10579), +				PropertySource<?> propertySource = new MapPropertySource(, +						"commandLineArgs", mergeCommandLineArgs(, +								this.defaultCommandLineArgs, args));, +	protected Map<String, Object> mergeCommandLineArgs(String[] defaults, String[] args) {, +		if (defaults == null) {, +			defaults = new String[0];, +		List<String> nonopts = new ArrayList<String>();, +		Map<String, Object> options = new LinkedHashMap<String, Object>();, +				nonopts.add(arg);, +			} else if (!nonopts.contains(arg)) {, +				nonopts.add(arg);, +		for (String key : nonopts) {, +			options.put(key, "");, +		return options;, +	private void addOptionArg(Map<String, Object> map, String arg) {, +		String optionValue = "";, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import org.springframework.core.env.MapPropertySource;, +				// Don't use SimpleCommandLinePropertySource (SPR-10579), +				PropertySource<?> propertySource = new MapPropertySource(, +						"commandLineArgs", mergeCommandLineArgs(, +								this.defaultCommandLineArgs, args));, +	protected Map<String, Object> mergeCommandLineArgs(String[] defaults, String[] args) {, +		if (defaults == null) {, +			defaults = new String[0];, +		List<String> nonopts = new ArrayList<String>();, +		Map<String, Object> options = new LinkedHashMap<String, Object>();, +				nonopts.add(arg);, +			} else if (!nonopts.contains(arg)) {, +				nonopts.add(arg);, +		for (String key : nonopts) {, +			options.put(key, "");, +		return options;, +	private void addOptionArg(Map<String, Object> map, String arg) {, +		String optionValue = "";, +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/SpringApplicationTests.java, +import org.springframework.core.env.MapPropertySource;, +		assertThat(, +				hasPropertySource(environment, MapPropertySource.class, "commandLineArgs"),, +		assertThat(, +				hasPropertySource(environment, MapPropertySource.class, "commandLineArgs"),, +			Class<?> propertySourceClass, String name) {, +			if (propertySourceClass.isInstance(source), +					&& (name == null || name.equals(source.getName()))) {]