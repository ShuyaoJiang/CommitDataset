[+++ b/spring-boot-actuator/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import org.springframework.boot.actuate.cache.InfinispanCacheStatisticsProvider;, +import org.springframework.boot.actuate.cache.JCacheCacheStatisticsProvider;, +		public JCacheCacheStatisticsProvider jCacheCacheStatisticsProvider() {, +			return new JCacheCacheStatisticsProvider();, +	@ConditionalOnClass({ SpringCache.class }), +	static class InfinispanCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public InfinispanCacheStatisticsProvider infinispanCacheStatisticsProvider() {, +			return new InfinispanCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.infinispan</groupId>, +			<artifactId>infinispan-spring4</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +import org.infinispan.spring.provider.SpringCache;, +import org.springframework.boot.actuate.cache.InfinispanCacheStatisticsProvider;, +import org.springframework.boot.actuate.cache.JCacheCacheStatisticsProvider;, +		public JCacheCacheStatisticsProvider jCacheCacheStatisticsProvider() {, +			return new JCacheCacheStatisticsProvider();, +	@ConditionalOnClass({ SpringCache.class }), +	static class InfinispanCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public InfinispanCacheStatisticsProvider infinispanCacheStatisticsProvider() {, +			return new InfinispanCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.cache;, +, +import java.lang.management.ManagementFactory;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import javax.management.AttributeNotFoundException;, +import javax.management.InstanceNotFoundException;, +import javax.management.MBeanException;, +import javax.management.MBeanServer;, +import javax.management.MalformedObjectNameException;, +import javax.management.ObjectName;, +import javax.management.ReflectionException;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +, +/**, + * Base {@link CacheStatisticsProvider} implementation that uses JMX to, + * retrieve the cache statistics., + *, + * @author Stephane Nicoll, + * @since 1.3.0, + */, +public abstract class AbstractJmxCacheStatisticsProvider<C extends Cache>, +		implements CacheStatisticsProvider<C> {, +, +	private static final Logger logger = LoggerFactory, +			.getLogger(AbstractJmxCacheStatisticsProvider.class);]