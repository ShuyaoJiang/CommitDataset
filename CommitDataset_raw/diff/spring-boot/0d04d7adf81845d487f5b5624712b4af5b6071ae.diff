[+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.GenericApplicationListener;, +import org.springframework.core.ResolvableType;, +import org.springframework.lang.Nullable;, +	static class RestartConfiguration, +			implements ApplicationListener<ClassPathChangedEvent> {, +		@Override, +		public void onApplicationEvent(ClassPathChangedEvent event) {, +	static class LiveReloadServerEventListener implements GenericApplicationListener {, +		@Override, +		public boolean supportsEventType(ResolvableType eventType) {, +			Class<?> type = eventType.getRawClass();, +			if (type == null) {, +				return false;, +			}, +			return ContextRefreshedEvent.class.isAssignableFrom(type), +					|| ClassPathChangedEvent.class.isAssignableFrom(type);, +		@Override, +		public boolean supportsSourceType(@Nullable Class<?> sourceType) {, +			return true;, +		}, +, +		@Override, +		public void onApplicationEvent(ApplicationEvent event) {, +			if (event instanceof ContextRefreshedEvent) {, +			if (event instanceof ClassPathChangedEvent) {, +				if (!((ClassPathChangedEvent) event).isRestartRequired()) {, +					this.liveReloadServer.triggerReload();, +				}, +			}, +		}, +, +		@Override, +		public int getOrder() {, +			return 0;, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.GenericApplicationListener;, +import org.springframework.core.ResolvableType;, +import org.springframework.lang.Nullable;, +	static class RestartConfiguration, +			implements ApplicationListener<ClassPathChangedEvent> {, +		@Override, +		public void onApplicationEvent(ClassPathChangedEvent event) {, +	static class LiveReloadServerEventListener implements GenericApplicationListener {, +		@Override, +		public boolean supportsEventType(ResolvableType eventType) {, +			Class<?> type = eventType.getRawClass();, +			if (type == null) {, +				return false;, +			}, +			return ContextRefreshedEvent.class.isAssignableFrom(type), +					|| ClassPathChangedEvent.class.isAssignableFrom(type);, +		@Override, +		public boolean supportsSourceType(@Nullable Class<?> sourceType) {, +			return true;, +		}, +, +		@Override, +		public void onApplicationEvent(ApplicationEvent event) {, +			if (event instanceof ContextRefreshedEvent) {, +			if (event instanceof ClassPathChangedEvent) {, +				if (!((ClassPathChangedEvent) event).isRestartRequired()) {, +					this.liveReloadServer.triggerReload();, +				}, +			}, +		}, +, +		@Override, +		public int getOrder() {, +			return 0;, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/RemoteClientConfiguration.java, +import org.springframework.context.ApplicationListener;, +	static class LiveReloadConfiguration, +			implements ApplicationListener<ClassPathChangedEvent> {, +		@Override, +		public void onApplicationEvent(ClassPathChangedEvent event) {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.GenericApplicationListener;, +import org.springframework.core.ResolvableType;, +import org.springframework.lang.Nullable;, +	static class RestartConfiguration, +			implements ApplicationListener<ClassPathChangedEvent> {, +		@Override, +		public void onApplicationEvent(ClassPathChangedEvent event) {, +	static class LiveReloadServerEventListener implements GenericApplicationListener {, +		@Override, +		public boolean supportsEventType(ResolvableType eventType) {, +			Class<?> type = eventType.getRawClass();, +			if (type == null) {, +				return false;, +			}, +			return ContextRefreshedEvent.class.isAssignableFrom(type), +					|| ClassPathChangedEvent.class.isAssignableFrom(type);, +		@Override]