[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +		 * longest match wins. Counters will be published for each specified boundary., +		 * Values can be specified as a long or as a Duration value (for timer meters,, +		 * defaulting to ms if no unit specified)., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +		 * longest match wins. Counters will be published for each specified boundary., +		 * Values can be specified as a long or as a Duration value (for timer meters,, +		 * defaulting to ms if no unit specified)., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import java.util.function.Supplier;, + * @author Artsiom Yudovin, +		boolean enabled = lookupWithFallbackToAll(this.properties.getEnable(), id, true);, +				.percentilesHistogram(lookupWithFallbackToAll(, +						distribution.getPercentilesHistogram(), id, null)), +				.percentiles(, +						lookupWithFallbackToAll(distribution.getPercentiles(), id, null)), +		return this.baseLookup(values, id, () -> defaultValue);, +	}, +, +	private <T> T lookupWithFallbackToAll(Map<String, T> values, Id id, T defaultValue) {, +		if (values.isEmpty()) {, +			return defaultValue;, +		}, +		return this.baseLookup(values, id,, +				() -> values.getOrDefault("all", defaultValue));, +	}, +, +	private <T> T baseLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {, +, +		return defaultValue.get();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +		 * longest match wins. Counters will be published for each specified boundary., +		 * Values can be specified as a long or as a Duration value (for timer meters,, +		 * defaulting to ms if no unit specified)., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import java.util.function.Supplier;, + * @author Artsiom Yudovin, +		boolean enabled = lookupWithFallbackToAll(this.properties.getEnable(), id, true);, +				.percentilesHistogram(lookupWithFallbackToAll(, +						distribution.getPercentilesHistogram(), id, null)), +				.percentiles(, +						lookupWithFallbackToAll(distribution.getPercentiles(), id, null)), +		return this.baseLookup(values, id, () -> defaultValue);, +	}, +, +	private <T> T lookupWithFallbackToAll(Map<String, T> values, Id id, T defaultValue) {, +		if (values.isEmpty()) {, +			return defaultValue;, +		}, +		return this.baseLookup(values, id,, +				() -> values.getOrDefault("all", defaultValue));, +	}, +, +	private <T> T baseLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {, +, +		return defaultValue.get();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, + * @author Artsiom Yudovin, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +		 * longest match wins. Counters will be published for each specified boundary., +		 * Values can be specified as a long or as a Duration value (for timer meters,, +		 * defaulting to ms if no unit specified)., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import java.util.function.Supplier;, + * @author Artsiom Yudovin, +		boolean enabled = lookupWithFallbackToAll(this.properties.getEnable(), id, true);, +				.percentilesHistogram(lookupWithFallbackToAll(, +						distribution.getPercentilesHistogram(), id, null)), +				.percentiles(, +						lookupWithFallbackToAll(distribution.getPercentiles(), id, null)), +		return this.baseLookup(values, id, () -> defaultValue);, +	}, +, +	private <T> T lookupWithFallbackToAll(Map<String, T> values, Id id, T defaultValue) {, +		if (values.isEmpty()) {, +			return defaultValue;, +		}, +		return this.baseLookup(values, id,, +				() -> values.getOrDefault("all", defaultValue));, +	}, +, +	private <T> T baseLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {, +, +		return defaultValue.get();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java, + * @author Artsiom Yudovin, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	management.metrics.distribution.sla.*= # Specific SLA boundaries for meter IDs starting-with the specified name. The longest match wins.]