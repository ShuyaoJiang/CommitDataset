[+++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +(they are not specific to Spring Boot). See the {spring-reference}web.html#mvc[MVC section] in, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +(they are not specific to Spring Boot). See the {spring-reference}web.html#mvc[MVC section] in, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-embedded-web-servers]], +== Embedded Web servers, +, +, +, +[[howto-use-another-web-server]], +=== Use another Web server, +The Spring Boot starters bring a default embedded container for you:, +, +* `spring-boot-starter-web` brings Tomcat with `spring-boot-starter-tomcat`,, +  but `spring-boot-starter-jetty` and `spring-boot-starter-undertow` can be used instead., +* `spring-boot-starter-webflux` brings Reactor Netty with `spring-boot-starter-reactor-netty`,, +  but `spring-boot-starter-tomcat`, `spring-boot-starter-jetty` and, +  `spring-boot-starter-undertow` can be used instead., +, +NOTE: Many starters only support Spring MVC, so they transitively bring, +`spring-boot-starter-web` into your application classpath, +, +If you choose to use a different HTTP server, you need to exclude those dependencies, +and include the one you chose instead. Spring Boot provides separate starters for, +HTTP servers to help make this process as easy as possible., +, +Example in Maven, for Spring MVC:, +, +[source,xml,indent=0,subs="verbatim,quotes,attributes"], +----, +	<dependency>, +		<groupId>org.springframework.boot</groupId>, +		<artifactId>spring-boot-starter-web</artifactId>, +		<exclusions>, +			<!-- Exclude the Tomcat dependency -->, +			<exclusion>, +				<groupId>org.springframework.boot</groupId>, +				<artifactId>spring-boot-starter-tomcat</artifactId>, +			</exclusion>, +		</exclusions>, +	</dependency>, +	<!-- Use Jetty instead -->, +	<dependency>, +		<groupId>org.springframework.boot</groupId>, +		<artifactId>spring-boot-starter-jetty</artifactId>, +	</dependency>, +----, +, +Example in Gradle, for Spring WebFlux:, +, +[source,groovy,indent=0,subs="verbatim,quotes,attributes"], +----, +	configurations {, +		// exclude Reactor Netty, +		compile.exclude module: 'spring-boot-starter-reactor-netty', +	}, +, +	dependencies {, +		compile 'org.springframework.boot:spring-boot-starter-webflux', +		// Use Undertow instead, +		compile 'org.springframework.boot:spring-boot-starter-undertow', +		// ..., +	}, +----, +, +NOTE: `spring-boot-starter-reactor-netty` is required to use the `WebClient`,, +so excluding it is not required if you wish to use a different HTTP server., +, +[[howto-configure-jetty]], +=== Configure Jetty, +Generally you can follow the advice from, +_<<howto-discover-build-in-options-for-external-properties>>_ about, +`@ConfigurationProperties` (`ServerProperties` is the main one here), but also look at, +`ServletWebServerFactoryCustomizer`. The Jetty APIs are quite rich so once you have, +access to the `JettyServletWebServerFactory` you can modify it in a number, +of ways. Or the nuclear option is to add your own `JettyServletWebServerFactory`., +As described in <<spring-boot-features.adoc#boot-features-resttemplate-customization>>,, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +(they are not specific to Spring Boot). See the {spring-reference}web.html#mvc[MVC section] in, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +[[howto-embedded-web-servers]], +== Embedded Web servers, +, +, +, +[[howto-use-another-web-server]], +=== Use another Web server, +The Spring Boot starters bring a default embedded container for you:, +, +* `spring-boot-starter-web` brings Tomcat with `spring-boot-starter-tomcat`,, +  but `spring-boot-starter-jetty` and `spring-boot-starter-undertow` can be used instead., +* `spring-boot-starter-webflux` brings Reactor Netty with `spring-boot-starter-reactor-netty`,, +  but `spring-boot-starter-tomcat`, `spring-boot-starter-jetty` and, +  `spring-boot-starter-undertow` can be used instead., +, +NOTE: Many starters only support Spring MVC, so they transitively bring, +`spring-boot-starter-web` into your application classpath, +, +If you choose to use a different HTTP server, you need to exclude those dependencies]