[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Set;, +		if (isPublic(method)) {, +	private boolean isPublic(ExecutableElement method) {, +		Set<Modifier> modifiers = method.getModifiers();, +		return modifiers.contains(Modifier.PUBLIC), +				&& !modifiers.contains(Modifier.ABSTRACT), +				&& !modifiers.contains(Modifier.STATIC);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Set;, +		if (isPublic(method)) {, +	private boolean isPublic(ExecutableElement method) {, +		Set<Modifier> modifiers = method.getModifiers();, +		return modifiers.contains(Modifier.PUBLIC), +				&& !modifiers.contains(Modifier.ABSTRACT), +				&& !modifiers.contains(Modifier.STATIC);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.StaticAccessor;, +	public void staticAccessor() {, +		ConfigurationMetadata metadata = compile(StaticAccessor.class);, +		assertThat(metadata), +				.has(Metadata.withGroup("specific").fromSource(StaticAccessor.class));, +		assertThat(metadata).has(Metadata.withProperty("specific.counter",, +				Integer.class).fromSource(StaticAccessor.class).withDefaultValue(42));, +		assertThat(metadata).doesNotHave(Metadata.withProperty("specific.name",, +				String.class).fromSource(StaticAccessor.class));, +		assertThat(metadata.getItems()).hasSize(2);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, + * Copyright 2012-2018 the original author or authors., +import java.util.Set;, +		if (isPublic(method)) {, +	private boolean isPublic(ExecutableElement method) {, +		Set<Modifier> modifiers = method.getModifiers();, +		return modifiers.contains(Modifier.PUBLIC), +				&& !modifiers.contains(Modifier.ABSTRACT), +				&& !modifiers.contains(Modifier.STATIC);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.StaticAccessor;, +	public void staticAccessor() {, +		ConfigurationMetadata metadata = compile(StaticAccessor.class);, +		assertThat(metadata), +				.has(Metadata.withGroup("specific").fromSource(StaticAccessor.class));, +		assertThat(metadata).has(Metadata.withProperty("specific.counter",, +				Integer.class).fromSource(StaticAccessor.class).withDefaultValue(42));, +		assertThat(metadata).doesNotHave(Metadata.withProperty("specific.name",, +				String.class).fromSource(StaticAccessor.class));, +		assertThat(metadata.getItems()).hasSize(2);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationsample/specific/StaticAccessor.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationsample.specific;, +, +import org.springframework.boot.configurationsample.ConfigurationProperties;, +, +/**, + * A property that is exposed by static accessors., + *, + * @author Stephane Nicoll, + */, +@ConfigurationProperties("specific"), +public class StaticAccessor {, +, +	private static String name;, +, +	private int counter = 42;, +, +	public static String getName() {, +		return name;, +	}, +, +	public static void setName(String name) {, +		StaticAccessor.name = name;]