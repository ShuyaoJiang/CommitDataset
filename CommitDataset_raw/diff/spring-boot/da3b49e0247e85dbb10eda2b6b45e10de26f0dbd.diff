[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, CouchbaseAutoConfiguration.class,, +		DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class,, +		ElasticsearchAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, CouchbaseAutoConfiguration.class,, +		DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class,, +		ElasticsearchAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +import org.springframework.util.StringUtils;, +		builder.up().withDetail("versions", StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, CouchbaseAutoConfiguration.class,, +		DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class,, +		ElasticsearchAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +import org.springframework.util.StringUtils;, +		builder.up().withDetail("versions", StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.context.annotation.Conditional;, + * @author Stephane Nicoll, +@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class), +	@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class), +	public static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {, +			return this.properties.getBootstrapHosts();, +			return this.properties.getBucket().getName();, +			return this.properties.getBucket().getPassword();, +		}, +	}, +, +	/**, +	 * Determine if Couchbase should be configured. This happens if either the user-configuration, +	 * defines a couchbase configuration or if at least the bucket name is specified., +	 */, +	static class CouchbaseCondition extends AnyNestedCondition {, +, +		CouchbaseCondition() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name"), +		static class BucketNameProperty {, +		}, +, +		@ConditionalOnBean(AbstractCouchbaseConfiguration.class), +		static class CouchbaseConfiguration {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, CouchbaseAutoConfiguration.class,, +		DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class,, +		ElasticsearchAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CouchbaseHealthIndicator.java, +import org.springframework.util.StringUtils;, +		builder.up().withDetail("versions", StringUtils.collectionToCommaDelimitedString(versions));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.context.annotation.Conditional;, + * @author Stephane Nicoll, +@Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class), +	@ConditionalOnMissingBean(AbstractCouchbaseConfiguration.class), +	public static class CouchbaseConfiguration extends AbstractCouchbaseConfiguration {, +			return this.properties.getBootstrapHosts();, +			return this.properties.getBucket().getName();, +			return this.properties.getBucket().getPassword();, +		}, +	}, +, +	/**, +	 * Determine if Couchbase should be configured. This happens if either the user-configuration, +	 * defines a couchbase configuration or if at least the bucket name is specified., +	 */, +	static class CouchbaseCondition extends AnyNestedCondition {, +, +		CouchbaseCondition() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.data.couchbase.bucket", name = "name"), +		static class BucketNameProperty {, +		}]