[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, + * Copyright 2012-2015 the original author or authors., +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileWriter;, +import org.json.JSONArray;, +import org.json.JSONObject;, +import org.junit.Before;, +import org.springframework.boot.configurationprocessor.metadata.JsonMarshaller;, + * @author Andy Wilkinson, +	private TestCompiler compiler;, +, +	@Before, +	public void createCompiler() throws IOException {, +		this.compiler = new TestCompiler(this.temporaryFolder);, +	}, +, +	@Test, +	public void mergingOfAdditionalMetadata() throws Exception {, +		File metaInfFolder = new File(this.compiler.getOutputLocation(), "META-INF");, +		metaInfFolder.mkdirs();, +		File additionalMetadataFile = new File(metaInfFolder,, +				"additional-spring-configuration-metadata.json");, +		additionalMetadataFile.createNewFile();, +, +		JSONObject property = new JSONObject();, +		property.put("name", "foo");, +		property.put("type", "java.lang.String");, +		property.put("sourceType", AdditionalMetadata.class.getName());, +		JSONArray properties = new JSONArray();, +		properties.put(property);, +		JSONObject additionalMetadata = new JSONObject();, +		additionalMetadata.put("properties", properties);, +		FileWriter writer = new FileWriter(additionalMetadataFile);, +		additionalMetadata.write(writer);, +		writer.flush();, +, +		ConfigurationMetadata metadata = compile(SimpleProperties.class);, +, +		assertThat(metadata, containsProperty("simple.comparator"));, +, +		assertThat(metadata,, +				containsProperty("foo", String.class), +						.fromSource(AdditionalMetadata.class));, +, +	}, +, +		this.compiler.getTask(types).call(processor);, +	private class TestConfigurationMetadataAnnotationProcessor extends, +			super.writeMetaData(metadata);, +			try {, +				File metadataFile = new File(, +						ConfigurationMetadataAnnotationProcessorTests.this.compiler, +								.getOutputLocation(),, +						"META-INF/spring-configuration-metadata.json");, +				if (metadataFile.isFile()) {, +					this.metadata = new JsonMarshaller().read(new FileInputStream(, +							metadataFile));, +				}, +				else {, +			}, +			catch (IOException e) {, +				throw new RuntimeException("Failed to read metadata from disk", e);, +			}, +		}, +	private static class AdditionalMetadata {, +, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, + * Copyright 2012-2015 the original author or authors., +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileWriter;, +import org.json.JSONArray;, +import org.json.JSONObject;, +import org.junit.Before;, +import org.springframework.boot.configurationprocessor.metadata.JsonMarshaller;, + * @author Andy Wilkinson, +	private TestCompiler compiler;, +, +	@Before, +	public void createCompiler() throws IOException {, +		this.compiler = new TestCompiler(this.temporaryFolder);, +	}, +, +	@Test, +	public void mergingOfAdditionalMetadata() throws Exception {, +		File metaInfFolder = new File(this.compiler.getOutputLocation(), "META-INF");, +		metaInfFolder.mkdirs();, +		File additionalMetadataFile = new File(metaInfFolder,, +				"additional-spring-configuration-metadata.json");, +		additionalMetadataFile.createNewFile();, +, +		JSONObject property = new JSONObject();, +		property.put("name", "foo");, +		property.put("type", "java.lang.String");, +		property.put("sourceType", AdditionalMetadata.class.getName());, +		JSONArray properties = new JSONArray();, +		properties.put(property);]