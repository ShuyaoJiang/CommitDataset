[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryValidator;, +import org.springframework.util.Assert;, +@Import({ SessionConfigurationImportSelector.class, SessionRepositoryValidator.class}), +	/**, +	 * Bean used to validate that a {@link SessionRepository} exists and provide a, +	 * meaningful if that's not the case., +	 */, +	static class SessionRepositoryValidator {, +, +		private SessionProperties sessionProperties;, +		private ObjectProvider<SessionRepository<?>> sessionRepositoryProvider;, +, +		SessionRepositoryValidator(SessionProperties sessionProperties,, +				ObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {, +			this.sessionProperties = sessionProperties;, +			this.sessionRepositoryProvider = sessionRepositoryProvider;, +		}, +, +		@PostConstruct, +		public void checkSessionRepository() {, +			StoreType storeType = this.sessionProperties.getStoreType();, +			if (storeType != StoreType.NONE) {, +				Assert.notNull(this.sessionRepositoryProvider.getIfAvailable(),, +						"No session repository could ", +								+ "be auto-configured, check your configuration (session ", +								+ "store type is '" + storeType + "')");, +			}, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryValidator;, +import org.springframework.util.Assert;, +@Import({ SessionConfigurationImportSelector.class, SessionRepositoryValidator.class}), +	/**, +	 * Bean used to validate that a {@link SessionRepository} exists and provide a, +	 * meaningful if that's not the case., +	 */, +	static class SessionRepositoryValidator {, +, +		private SessionProperties sessionProperties;, +		private ObjectProvider<SessionRepository<?>> sessionRepositoryProvider;, +, +		SessionRepositoryValidator(SessionProperties sessionProperties,, +				ObjectProvider<SessionRepository<?>> sessionRepositoryProvider) {, +			this.sessionProperties = sessionProperties;, +			this.sessionRepositoryProvider = sessionRepositoryProvider;, +		}, +, +		@PostConstruct, +		public void checkSessionRepository() {, +			StoreType storeType = this.sessionProperties.getStoreType();, +			if (storeType != StoreType.NONE) {, +				Assert.notNull(this.sessionRepositoryProvider.getIfAvailable(),, +						"No session repository could ", +								+ "be auto-configured, check your configuration (session ", +								+ "store type is '" + storeType + "')");, +			}, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.beans.factory.BeanCreationException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	public void contextFailsIfStoreTypeNotSet() {, +		this.thrown.expect(BeanCreationException.class);, +		this.thrown.expectMessage("No session repository could be auto-configured");, +		this.thrown.expectMessage("session store type is 'null'");, +, +	@Test, +	public void validationFailsIfSessionRepositoryIsNotConfigured() {, +		this.thrown.expect(BeanCreationException.class);, +		this.thrown.expectMessage("No session repository could be auto-configured");, +		this.thrown.expectMessage("session store type is 'JDBC'");, +		load("spring.session.store-type=jdbc");, +	}, +]