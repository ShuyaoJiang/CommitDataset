[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.export.Exporter;, +	@Autowired(required = false), +	private Map<String, Exporter> exporters = Collections.emptyMap();, +, +		MetricExporters exporters = null;, +			exporters = new MetricExporters(this.properties);, +			exporters.setReader(reader);, +			exporters.setWriters(writers);, +		}, +		if (!this.exporters.isEmpty()) {, +			if (exporters==null) {, +				exporters = new MetricExporters(this.properties);, +			}, +			exporters.setExporters(this.exporters);, +		}, +		if (exporters!=null) {, +			return exporters;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.export.Exporter;, +	@Autowired(required = false), +	private Map<String, Exporter> exporters = Collections.emptyMap();, +, +		MetricExporters exporters = null;, +			exporters = new MetricExporters(this.properties);, +			exporters.setReader(reader);, +			exporters.setWriters(writers);, +		}, +		if (!this.exporters.isEmpty()) {, +			if (exporters==null) {, +				exporters = new MetricExporters(this.properties);, +			}, +			exporters.setExporters(this.exporters);, +		}, +		if (exporters!=null) {, +			return exporters;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExporters.java, +	private MetricReader reader;, +	private Map<String, MetricWriter> writers = new HashMap<String, MetricWriter>();, +	public MetricExporters(MetricExportProperties properties) {, +	public void setReader(MetricReader reader) {, +		this.reader = reader;, +	}, +, +	public void setWriters(Map<String, MetricWriter> writers) {, +		this.writers.putAll(writers);, +	}, +, +	public void setExporters(Map<String, Exporter> exporters) {, +		this.exporters.putAll(exporters);, +	}, +, +		for (Entry<String, Exporter> entry : this.exporters.entrySet()) {, +			String name = entry.getKey();, +			Exporter exporter = entry.getValue();, +			TriggerProperties trigger = this.properties.findTrigger(name);, +			if (trigger != null) {, +				ExportRunner runner = new ExportRunner(exporter);, +				IntervalTask task = new IntervalTask(runner, trigger.getDelayMillis(),, +						trigger.getDelayMillis());, +				taskRegistrar.addFixedDelayTask(task);, +			}, +		}, +		private final Exporter exporter;, +		public ExportRunner(Exporter exporter) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.export.Exporter;, +	@Autowired(required = false), +	private Map<String, Exporter> exporters = Collections.emptyMap();, +, +		MetricExporters exporters = null;, +			exporters = new MetricExporters(this.properties);, +			exporters.setReader(reader);, +			exporters.setWriters(writers);, +		}, +		if (!this.exporters.isEmpty()) {, +			if (exporters==null) {, +				exporters = new MetricExporters(this.properties);, +			}, +			exporters.setExporters(this.exporters);, +		}, +		if (exporters!=null) {, +			return exporters;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExporters.java, +	private MetricReader reader;, +	private Map<String, MetricWriter> writers = new HashMap<String, MetricWriter>();, +	public MetricExporters(MetricExportProperties properties) {, +	public void setReader(MetricReader reader) {, +		this.reader = reader;, +	}, +, +	public void setWriters(Map<String, MetricWriter> writers) {, +		this.writers.putAll(writers);, +	}, +, +	public void setExporters(Map<String, Exporter> exporters) {, +		this.exporters.putAll(exporters);, +	}, +, +		for (Entry<String, Exporter> entry : this.exporters.entrySet()) {]