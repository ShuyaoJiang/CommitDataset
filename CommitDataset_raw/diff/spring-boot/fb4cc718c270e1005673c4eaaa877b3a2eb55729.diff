[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import static org.junit.Assert.assertSame;, +import static org.mockito.Mockito.mock;, +	public void useExistingClient() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(CustomConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(1, this.context.getBeanNamesForType(Client.class).length);, +		assertSame(this.context.getBean("myClient"), this.context.getBean(Client.class));, +	}, +, +	@Test, +	@Configuration, +	static class CustomConfiguration {, +, +		@Bean, +		public Client myClient() {, +			return mock(Client.class);, +		}, +, +	}, +]