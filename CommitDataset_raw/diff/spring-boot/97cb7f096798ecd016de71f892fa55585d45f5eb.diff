[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.core.io.DefaultResourceLoader;, +		if (this.resourceLoader != null) {, +			if (context instanceof GenericApplicationContext) {, +				((GenericApplicationContext) context), +						.setResourceLoader(this.resourceLoader);, +			}, +			if (context instanceof DefaultResourceLoader) {, +				((DefaultResourceLoader) context).setClassLoader(this.resourceLoader, +						.getClassLoader());, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.core.io.DefaultResourceLoader;, +		if (this.resourceLoader != null) {, +			if (context instanceof GenericApplicationContext) {, +				((GenericApplicationContext) context), +						.setResourceLoader(this.resourceLoader);, +			}, +			if (context instanceof DefaultResourceLoader) {, +				((DefaultResourceLoader) context).setClassLoader(this.resourceLoader, +						.getClassLoader());, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java, +import java.net.URL;, +import java.net.URLClassLoader;, +, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.ResourceLoader;, +	public void contextWithClassLoader() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(, +				ExampleConfig.class).contextClass(SpyApplicationContext.class);, +		ClassLoader classLoader = new URLClassLoader(new URL[0], getClass(), +				.getClassLoader());, +		application.resourceLoader(new DefaultResourceLoader(classLoader));, +		this.context = application.run();, +		assertThat(((SpyApplicationContext) this.context).getClassLoader(),, +				is(equalTo(classLoader)));, +	}, +, +	@Test, +	public void parentContextWithClassLoader() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(, +				ChildConfig.class).contextClass(SpyApplicationContext.class);, +		ClassLoader classLoader = new URLClassLoader(new URL[0], getClass(), +				.getClassLoader());, +		application.resourceLoader(new DefaultResourceLoader(classLoader));, +		application.parent(ExampleConfig.class);, +		this.context = application.run();, +		assertThat(((SpyApplicationContext) this.context).getResourceLoader(), +				.getClassLoader(), is(equalTo(classLoader)));, +	}, +, +	@Test, +		private ConfigurableApplicationContext applicationContext = spy(new AnnotationConfigApplicationContext());, +		private ResourceLoader resourceLoader;, +		@Override, +		public void setResourceLoader(ResourceLoader resourceLoader) {, +			super.setResourceLoader(resourceLoader);, +			this.resourceLoader = resourceLoader;, +		}, +, +		public ResourceLoader getResourceLoader() {, +			return this.resourceLoader;, +		}, +]