[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +import org.junit.Before;, +import org.springframework.boot.test.util.TestPropertyValues;, +import org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebApplicationContext;, +	private AnnotationConfigReactiveWebApplicationContext context;, +, +	@Before, +	public void setup() {, +		this.context = new AnnotationConfigReactiveWebApplicationContext();, +	}, +		if (this.context != null) {, +			this.context.close();, +		}, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		WebTestClient webTestClient = WebTestClient.bindToApplicationContext(this.context), +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		TestPropertyValues, +				.of("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id"), +				.applyTo(this.context);, +		setupContext();, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = this.context.getBean(, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		WebFilterChainProxy chainProxy = this.context.getBean(WebFilterChainProxy.class);, +		setupContext();, +		this.context.refresh();, +		assertThat(this.context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")), +				.isFalse();, +		setupContextWithCloudEnabled();, +		TestPropertyValues, +				.of("VCAP_APPLICATION=---", "management.cloudfoundry.enabled:false"), +				.applyTo(this.context);, +		this.context.refresh();, +		assertThat(this.context.containsBean("cloudFoundryWebFluxEndpointHandlerMapping")), +				.isFalse();, +		setupContextWithCloudEnabled();, +		this.context.register(TestConfiguration.class);, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		setupContextWithCloudEnabled();, +		this.context.register(TestConfiguration.class);, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		Collection<ExposableWebEndpoint> endpoints = getHandlerMapping().getEndpoints();, +		setupContextWithCloudEnabled();, +		TestPropertyValues.of("management.cloudfoundry.skip-ssl-validation:true"), +				.applyTo(this.context);, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +		setupContextWithCloudEnabled();, +		this.context.refresh();, +		CloudFoundryWebFluxEndpointHandlerMapping handlerMapping = getHandlerMapping();, +	private void setupContextWithCloudEnabled() {, +		TestPropertyValues, +				.of("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id",, +						"vcap.application.cf_api:http://my-cloud-controller.com"), +				.applyTo(this.context);, +		setupContext();, +	}, +, +	private void setupContext() {, +		this.context.register(ReactiveSecurityAutoConfiguration.class,, +				ReactiveUserDetailsServiceAutoConfiguration.class,, +				WebFluxAutoConfiguration.class, JacksonAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				WebClientCustomizerConfig.class, WebClientAutoConfiguration.class,, +				ManagementContextAutoConfiguration.class, EndpointAutoConfiguration.class,, +				WebEndpointAutoConfiguration.class, HealthEndpointAutoConfiguration.class,, +				ReactiveCloudFoundryActuatorAutoConfiguration.class);, +	}, +, +	private CloudFoundryWebFluxEndpointHandlerMapping getHandlerMapping() {, +		return this.context.getBean("cloudFoundryWebFluxEndpointHandlerMapping",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfigurationTests.java, +import org.junit.Before;, +import org.springframework.boot.test.util.TestPropertyValues;, +import org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebApplicationContext;, +	private AnnotationConfigReactiveWebApplicationContext context;, +, +	@Before, +	public void setup() {, +		this.context = new AnnotationConfigReactiveWebApplicationContext();, +	}, +		if (this.context != null) {, +			this.context.close();, +		}, +		setupContextWithCloudEnabled();]