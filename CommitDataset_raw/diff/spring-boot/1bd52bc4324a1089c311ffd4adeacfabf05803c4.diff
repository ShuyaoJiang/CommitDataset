[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(this::determineMaxHttpHeaderSize).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(this::determineMaxHttpHeaderSize).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +		propertyMapper.from(this::getOrDeduceUseForwardHeaders), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(this::determineMaxHttpHeaderSize).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +		propertyMapper.from(this::getOrDeduceUseForwardHeaders), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, +		map.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(this.location).whenHasText().to(factory::setLocation);, +		map.from(this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(this::determineMaxHttpHeaderSize).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +		propertyMapper.from(this::getOrDeduceUseForwardHeaders), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, +		map.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(this.location).whenHasText().to(factory::setLocation);, +		map.from(this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +	 * Return a new {@link Source} from the specified value that can be used to perform, +	 * the mapping., +	 * @param <T> the source type, +	 * @param value the value, +	 * @return a {@link Source} that can be used to complete the mapping, +	 * @see #from(Supplier), +	 */, +	public <T> Source<T> from(T value) {, +		return from(() -> value);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +		map.from(this.dataSource).to(factory::setDataSource);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(this.messageConverter).whenNonNull().to(factory::setMessageConverter);, +		map.from(this.replyTemplate).whenNonNull().to(factory::setReplyTemplate);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(this::determineMaxHttpHeaderSize).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +		propertyMapper.from(this::getOrDeduceUseForwardHeaders), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java, +		map.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);, +		map.from(this.location).whenHasText().to(factory::setLocation);, +		map.from(this.maxRequestSize).to(factory::setMaxRequestSize);, +		map.from(this.maxFileSize).to(factory::setMaxFileSize);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +	 * Return a new {@link Source} from the specified value that can be used to perform, +	 * the mapping., +	 * @param <T> the source type, +	 * @param value the value, +	 * @return a {@link Source} that can be used to complete the mapping, +	 * @see #from(Supplier), +	 */, +	public <T> Source<T> from(T value) {, +		return from(() -> value);, +	}, +, +	/**, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java, +		map.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);, +		map.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);, +		map.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);, +		map.from(this.keepAlive).asInt(Duration::getSeconds), +		map.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);, +		map.from(this.threadNamePrefix).whenHasText(), +		map.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java]