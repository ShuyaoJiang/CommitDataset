[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Map;, +, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.actuate.endpoint.AbstractEndpoint;, +import org.springframework.boot.actuate.endpoint.Endpoint;, +import org.springframework.boot.actuate.web.ErrorController;, +import org.springframework.boot.context.embedded.ErrorPage;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.RequestContextHolder;, +		@Value("${error.path:/error}"), +		private String errorPath = "/error";, +, +			factory.addErrorPages(new ErrorPage(this.errorPath));, +	/*, +	 * The error controller is present but not mapped as an endpoint in this context, +	 * because of the DispatcherServlet having had it's HandlerMapping explicitly, +	 * disabled. So this tiny shim exposes the same feature but only for machine, +	 * endpoints., +	 */, +	@Bean, +	public Endpoint<Map<String, Object>> errorEndpoint(final ErrorController controller) {, +		return new AbstractEndpoint<Map<String, Object>>("/error", false, true) {, +			@Override, +			protected Map<String, Object> doInvoke() {, +				RequestAttributes attributes = RequestContextHolder, +						.currentRequestAttributes();, +				return controller.extract(attributes, false);, +			}, +		};, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Map;, +, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.actuate.endpoint.AbstractEndpoint;, +import org.springframework.boot.actuate.endpoint.Endpoint;, +import org.springframework.boot.actuate.web.ErrorController;, +import org.springframework.boot.context.embedded.ErrorPage;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.RequestContextHolder;, +		@Value("${error.path:/error}"), +		private String errorPath = "/error";, +, +			factory.addErrorPages(new ErrorPage(this.errorPath));, +	/*, +	 * The error controller is present but not mapped as an endpoint in this context, +	 * because of the DispatcherServlet having had it's HandlerMapping explicitly, +	 * disabled. So this tiny shim exposes the same feature but only for machine, +	 * endpoints., +	 */, +	@Bean, +	public Endpoint<Map<String, Object>> errorEndpoint(final ErrorController controller) {, +		return new AbstractEndpoint<Map<String, Object>>("/error", false, true) {, +			@Override, +			protected Map<String, Object> doInvoke() {, +				RequestAttributes attributes = RequestContextHolder, +						.currentRequestAttributes();, +				return controller.extract(attributes, false);, +			}, +		};, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.SearchStrategy;, +	@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.Map;, +, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.actuate.endpoint.AbstractEndpoint;, +import org.springframework.boot.actuate.endpoint.Endpoint;, +import org.springframework.boot.actuate.web.ErrorController;, +import org.springframework.boot.context.embedded.ErrorPage;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.RequestContextHolder;, +		@Value("${error.path:/error}"), +		private String errorPath = "/error";, +, +			factory.addErrorPages(new ErrorPage(this.errorPath));, +	/*, +	 * The error controller is present but not mapped as an endpoint in this context, +	 * because of the DispatcherServlet having had it's HandlerMapping explicitly, +	 * disabled. So this tiny shim exposes the same feature but only for machine, +	 * endpoints., +	 */, +	@Bean, +	public Endpoint<Map<String, Object>> errorEndpoint(final ErrorController controller) {, +		return new AbstractEndpoint<Map<String, Object>>("/error", false, true) {, +			@Override, +			protected Map<String, Object> doInvoke() {, +				RequestAttributes attributes = RequestContextHolder, +						.currentRequestAttributes();, +				return controller.extract(attributes, false);, +			}, +		};, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java]