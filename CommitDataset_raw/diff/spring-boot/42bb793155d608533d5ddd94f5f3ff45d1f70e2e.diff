[+++ b/spring-boot-samples/spring-boot-sample-tomcat/src/main/java/org/springframework/boot/sample/tomcat/SampleTomcatApplication.java, +import javax.servlet.ServletContextEvent;, +import javax.servlet.ServletContextListener;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.context.annotation.Bean;, +	private static Log logger = LogFactory.getLog(SampleTomcatApplication.class);, +, +	@Bean, +	protected ServletContextListener listener() {, +		return new ServletContextListener() {, +			@Override, +			public void contextInitialized(ServletContextEvent sce) {, +				logger.info("ServletContext initialized");, +			}, +, +			@Override, +			public void contextDestroyed(ServletContextEvent sce) {, +				logger.info("ServletContext destroyed");, +			}, +		};, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-tomcat/src/main/java/org/springframework/boot/sample/tomcat/SampleTomcatApplication.java, +import javax.servlet.ServletContextEvent;, +import javax.servlet.ServletContextListener;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.context.annotation.Bean;, +	private static Log logger = LogFactory.getLog(SampleTomcatApplication.class);, +, +	@Bean, +	protected ServletContextListener listener() {, +		return new ServletContextListener() {, +			@Override, +			public void contextInitialized(ServletContextEvent sce) {, +				logger.info("ServletContext initialized");, +			}, +, +			@Override, +			public void contextDestroyed(ServletContextEvent sce) {, +				logger.info("ServletContext destroyed");, +			}, +		};, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.EventListener;, +		Set<EventListener> listenerRegistrations = new LinkedHashSet<EventListener>();, +			if (initializer instanceof ServletListenerRegistrationBean) {, +				listenerRegistrations, +						.add(((ServletListenerRegistrationBean<?>) initializer), +								.getListener());, +			}, +		for (Entry<String, EventListener> listenerBean : getOrderedBeansOfType(EventListener.class)) {, +			String name = listenerBean.getKey();, +			EventListener listener = listenerBean.getValue();, +			if (!filterRegistrations.contains(listener)) {, +				ServletListenerRegistrationBean<EventListener> registration = new ServletListenerRegistrationBean<EventListener>(, +						listener);, +				registration.setName(name);, +				initializers.add(registration);, +			}, +		}, +, +++ b/spring-boot-samples/spring-boot-sample-tomcat/src/main/java/org/springframework/boot/sample/tomcat/SampleTomcatApplication.java, +import javax.servlet.ServletContextEvent;, +import javax.servlet.ServletContextListener;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.context.annotation.Bean;, +	private static Log logger = LogFactory.getLog(SampleTomcatApplication.class);, +, +	@Bean, +	protected ServletContextListener listener() {, +		return new ServletContextListener() {, +			@Override, +			public void contextInitialized(ServletContextEvent sce) {, +				logger.info("ServletContext initialized");, +			}, +, +			@Override, +			public void contextDestroyed(ServletContextEvent sce) {, +				logger.info("ServletContext destroyed");, +			}, +		};, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.EventListener;, +		Set<EventListener> listenerRegistrations = new LinkedHashSet<EventListener>();, +			if (initializer instanceof ServletListenerRegistrationBean) {, +				listenerRegistrations, +						.add(((ServletListenerRegistrationBean<?>) initializer), +								.getListener());, +			}, +		for (Entry<String, EventListener> listenerBean : getOrderedBeansOfType(EventListener.class)) {]