[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints(), +				.getEndpoints());, +	@Bean, +	@ConditionalOnMissingBean, +	public MvcEndpoints mvcEndpoints() {, +		return new MvcEndpoints();, +	@Bean, +	@ConditionalOnBean(EnvironmentEndpoint.class), +	public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {, +		return new EnvironmentMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(MetricsEndpoint.class), +	public MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {, +		return new MetricsMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(ShutdownEndpoint.class), +	public ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {, +		return new ShutdownMvcEndpoint(delegate);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints(), +				.getEndpoints());, +	@Bean, +	@ConditionalOnMissingBean, +	public MvcEndpoints mvcEndpoints() {, +		return new MvcEndpoints();, +	@Bean, +	@ConditionalOnBean(EnvironmentEndpoint.class), +	public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {, +		return new EnvironmentMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(MetricsEndpoint.class), +	public MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {, +		return new MetricsMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(ShutdownEndpoint.class), +	public ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {, +		return new ShutdownMvcEndpoint(delegate);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.boot.actuate.endpoint.mvc.ManagementErrorEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.web.HttpMessageConverters;, +	public HandlerAdapter handlerAdapter(HttpMessageConverters converters) {, +		adapter.setMessageConverters(converters.getConverters());, +	public HandlerMapping handlerMapping(MvcEndpoints endpoints,, +			ListableBeanFactory beanFactory) {, +		Set<MvcEndpoint> set = new HashSet<MvcEndpoint>(endpoints.getEndpoints());, +		set.addAll(beanFactory.getBeansOfType(MvcEndpoint.class).values());, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(set);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints(), +				.getEndpoints());, +	@Bean, +	@ConditionalOnMissingBean, +	public MvcEndpoints mvcEndpoints() {, +		return new MvcEndpoints();, +	@Bean, +	@ConditionalOnBean(EnvironmentEndpoint.class), +	public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegate) {, +		return new EnvironmentMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(MetricsEndpoint.class), +	public MetricsMvcEndpoint metricsMvcEndpoint(MetricsEndpoint delegate) {, +		return new MetricsMvcEndpoint(delegate);, +	@Bean, +	@ConditionalOnBean(ShutdownEndpoint.class), +	public ShutdownMvcEndpoint shutdownMvcEndpoint(ShutdownEndpoint delegate) {, +		return new ShutdownMvcEndpoint(delegate);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.boot.actuate.endpoint.mvc.ManagementErrorEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.web.HttpMessageConverters;, +	public HandlerAdapter handlerAdapter(HttpMessageConverters converters) {, +		adapter.setMessageConverters(converters.getConverters());, +	public HandlerMapping handlerMapping(MvcEndpoints endpoints,, +			ListableBeanFactory beanFactory) {, +		Set<MvcEndpoint> set = new HashSet<MvcEndpoint>(endpoints.getEndpoints());, +		set.addAll(beanFactory.getBeansOfType(MvcEndpoint.class).values());, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(set);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import java.util.Set;, +		Set<? extends Endpoint<?>> endpoints = endpointHandlerMapping.getEndpoints();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +		EndpointHandlerMapping mapping = new EndpointHandlerMapping(mvcEndpoints()]