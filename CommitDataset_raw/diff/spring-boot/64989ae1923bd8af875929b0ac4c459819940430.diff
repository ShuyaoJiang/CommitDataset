[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnClass classes found: "), +					.append(StringUtils.collectionToCommaDelimitedString(, +			matchMessage.append("@ConditionalOnMissing classes not found: "), +					.append(StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnClass classes found: "), +					.append(StringUtils.collectionToCommaDelimitedString(, +			matchMessage.append("@ConditionalOnMissing classes not found: "), +					.append(StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +			message.append("missing required properties ").append(expandNames(prefix, missingProperties)), +					.append(" ");, +		StringBuilder expanded = new StringBuilder();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnClass classes found: "), +					.append(StringUtils.collectionToCommaDelimitedString(, +			matchMessage.append("@ConditionalOnMissing classes not found: "), +					.append(StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +			message.append("missing required properties ").append(expandNames(prefix, missingProperties)), +					.append(" ");, +		StringBuilder expanded = new StringBuilder();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/CommandCompleter.java, +			StringBuilder options = new StringBuilder();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnClass classes found: "), +					.append(StringUtils.collectionToCommaDelimitedString(, +			matchMessage.append("@ConditionalOnMissing classes not found: "), +					.append(StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +			message.append("missing required properties ").append(expandNames(prefix, missingProperties)), +					.append(" ");, +		StringBuilder expanded = new StringBuilder();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/CommandCompleter.java, +			StringBuilder options = new StringBuilder();, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java, +		StringBuilder content = new StringBuilder(BUFFER_SIZE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnBean ").append(spec), +					.append(" found the following ").append(matching);, +			matchMessage.append("@ConditionalOnSingleCandidate ").append(spec), +					.append(" found a primary candidate amongst the following ").append(matching);, +			matchMessage.append("@ConditionalOnMissingBean ").append(spec), +					.append(" found no beans");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		StringBuilder matchMessage = new StringBuilder();, +			matchMessage.append("@ConditionalOnClass classes found: "), +					.append(StringUtils.collectionToCommaDelimitedString(, +			matchMessage.append("@ConditionalOnMissing classes not found: "), +					.append(StringUtils.collectionToCommaDelimitedString(getMatchingClasses(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +			message.append("missing required properties ").append(expandNames(prefix, missingProperties)), +					.append(" ");, +		StringBuilder expanded = new StringBuilder();]