[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.PropertySource;, +			ManagementServerPort managementPort = ManagementServerPort, +					.get(this.applicationContext);, +			if (managementPort == ManagementServerPort.DIFFERENT, +			if (managementPort == ManagementServerPort.SAME, +					&& this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {, +				addLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext, +						.getEnvironment());, +	/**, +	 * Add an alias for 'local.management.port' that actually resolves using, +	 * 'local.server.port'., +	 * @param environment the environment, +	 */, +	private void addLocalManagementPortPropertyAlias(, +			final ConfigurableEnvironment environment) {, +		environment.getPropertySources().addLast(, +				new PropertySource<Object>("Management Server") {, +					@Override, +					public Object getProperty(String name) {, +						if ("local.management.port".equals(name)) {, +							return environment.getProperty("local.server.port");, +						}, +						return null;, +					}, +				});, +	}, +, +	// Put Servlets and Filters in their own nested class so they don't force early, +	// instantiation of ManagementServerProperties., +	@Configuration, +	protected static class ApplicationContextFilterConfiguration {, +, +		@Bean, +		public Filter applicationContextIdFilter(ApplicationContext context) {, +			final String id = context.getId();, +			return new OncePerRequestFilter() {, +, +				@Override, +				protected void doFilterInternal(HttpServletRequest request,, +						HttpServletResponse response, FilterChain filterChain), +						throws ServletException, IOException {, +					response.addHeader("X-Application-Context", id);, +					filterChain.doFilter(request, response);, +				}, +			};, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.PropertySource;, +			ManagementServerPort managementPort = ManagementServerPort, +					.get(this.applicationContext);, +			if (managementPort == ManagementServerPort.DIFFERENT, +			if (managementPort == ManagementServerPort.SAME, +					&& this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {, +				addLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext, +						.getEnvironment());, +	/**, +	 * Add an alias for 'local.management.port' that actually resolves using, +	 * 'local.server.port'., +	 * @param environment the environment, +	 */, +	private void addLocalManagementPortPropertyAlias(, +			final ConfigurableEnvironment environment) {, +		environment.getPropertySources().addLast(, +				new PropertySource<Object>("Management Server") {, +					@Override, +					public Object getProperty(String name) {, +						if ("local.management.port".equals(name)) {, +							return environment.getProperty("local.server.port");, +						}, +						return null;, +					}, +				});, +	}, +, +	// Put Servlets and Filters in their own nested class so they don't force early, +	// instantiation of ManagementServerProperties., +	@Configuration, +	protected static class ApplicationContextFilterConfiguration {, +, +		@Bean, +		public Filter applicationContextIdFilter(ApplicationContext context) {, +			final String id = context.getId();, +			return new OncePerRequestFilter() {, +, +				@Override, +				protected void doFilterInternal(HttpServletRequest request,, +						HttpServletResponse response, FilterChain filterChain), +						throws ServletException, IOException {, +					response.addHeader("X-Application-Context", id);, +					filterChain.doFilter(request, response);, +				}, +			};, +		}, +	}, +]