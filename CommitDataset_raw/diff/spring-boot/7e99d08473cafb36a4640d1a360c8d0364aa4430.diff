[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		if (managementPort == ManagementServerPort.DIFFERENT) {, +			if (this.applicationContext instanceof EmbeddedWebApplicationContext, +			else {, +				logger.warn("Could not start embedded management container on ", +						+ "different port (management endpoints are still available ", +						+ "through JMX)");, +			}, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +		if (managementPort == ManagementServerPort.DIFFERENT) {, +			if (this.applicationContext instanceof EmbeddedWebApplicationContext, +			else {, +				logger.warn("Could not start embedded management container on ", +						+ "different port (management endpoints are still available ", +						+ "through JMX)");, +			}, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import java.net.InetSocketAddress;, +import java.net.ServerSocket;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	public void specificPortsViaPropertiesWithClash() throws Exception {, +		int managementPort = ports.get().management;, +		ServerSocket serverSocket = new ServerSocket();, +		serverSocket.bind(new InetSocketAddress(managementPort));, +		try {, +			EnvironmentTestUtils.addEnvironment(this.applicationContext,, +					"server.port:" + ports.get().server,, +					"management.port:" + ports.get().management);, +			this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +					BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class,, +					ErrorMvcAutoConfiguration.class);, +			this.thrown.expect(EmbeddedServletContainerException.class);, +			this.applicationContext.refresh();, +			this.applicationContext.close();, +		}, +		finally {, +			serverSocket.close();, +			assertAllClosed();, +		}, +	}, +, +	@Test]