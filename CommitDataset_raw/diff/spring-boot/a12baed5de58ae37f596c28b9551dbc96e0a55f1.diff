[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				if (profile != null && !profile.isDefaultProfile()) {, +					addProfileToEnvironment(profile.getName());, +				}, +			this.profiles.addAll(getOtherActiveProfiles(activatedViaProperty));, +			// System properties) take precedence over those added in config files., +					Profile defaultProfile = new Profile(defaultProfileName, true);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty) {, +			return Arrays.stream(this.environment.getActiveProfiles()).map(Profile::new), +					.filter((profile) -> !activatedViaProperty.contains(profile)), +			if (profiles.isEmpty()) {, +			if (this.activatedProfiles) {, +				this.logger.debug("Profiles already activated, '" + profiles, +						+ "' will not be applied");, +				return;, +			}, +			this.profiles.addAll(profiles);, +						addIncludedProfiles(document.getIncludeProfiles());, +		private void addIncludedProfiles(Set<Profile> includeProfiles) {, +			LinkedList<Profile> existingProfiles = new LinkedList<>(this.profiles);, +			this.profiles.clear();, +			this.profiles.addAll(includeProfiles);, +			this.profiles.removeAll(this.processedProfiles);, +			this.profiles.addAll(existingProfiles);, +		}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				if (profile != null && !profile.isDefaultProfile()) {, +					addProfileToEnvironment(profile.getName());, +				}, +			this.profiles.addAll(getOtherActiveProfiles(activatedViaProperty));, +			// System properties) take precedence over those added in config files., +					Profile defaultProfile = new Profile(defaultProfileName, true);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty) {, +			return Arrays.stream(this.environment.getActiveProfiles()).map(Profile::new), +					.filter((profile) -> !activatedViaProperty.contains(profile)), +			if (profiles.isEmpty()) {, +			if (this.activatedProfiles) {, +				this.logger.debug("Profiles already activated, '" + profiles, +						+ "' will not be applied");, +				return;, +			}, +			this.profiles.addAll(profiles);, +						addIncludedProfiles(document.getIncludeProfiles());, +		private void addIncludedProfiles(Set<Profile> includeProfiles) {, +			LinkedList<Profile> existingProfiles = new LinkedList<>(this.profiles);, +			this.profiles.clear();, +			this.profiles.addAll(includeProfiles);, +			this.profiles.removeAll(this.processedProfiles);, +			this.profiles.addAll(existingProfiles);, +		}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	@Test, +	public void includeLoop() {, +		// gh-13361, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebApplicationType(WebApplicationType.NONE);, +		this.context = application.run("--spring.config.name=applicationloop");, +		ConfigurableEnvironment environment = this.context.getEnvironment();, +		assertThat(environment.acceptsProfiles("loop")).isTrue();, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				if (profile != null && !profile.isDefaultProfile()) {, +					addProfileToEnvironment(profile.getName());, +				}, +			this.profiles.addAll(getOtherActiveProfiles(activatedViaProperty));, +			// System properties) take precedence over those added in config files., +					Profile defaultProfile = new Profile(defaultProfileName, true);, +		private List<Profile> getOtherActiveProfiles(Set<Profile> activatedViaProperty) {, +			return Arrays.stream(this.environment.getActiveProfiles()).map(Profile::new), +					.filter((profile) -> !activatedViaProperty.contains(profile)), +			if (profiles.isEmpty()) {, +			if (this.activatedProfiles) {, +				this.logger.debug("Profiles already activated, '" + profiles, +						+ "' will not be applied");, +				return;, +			}, +			this.profiles.addAll(profiles);, +						addIncludedProfiles(document.getIncludeProfiles());, +		private void addIncludedProfiles(Set<Profile> includeProfiles) {, +			LinkedList<Profile> existingProfiles = new LinkedList<>(this.profiles);, +			this.profiles.clear();, +			this.profiles.addAll(includeProfiles);, +			this.profiles.removeAll(this.processedProfiles);, +			this.profiles.addAll(existingProfiles);, +		}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	@Test, +	public void includeLoop() {, +		// gh-13361, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebApplicationType(WebApplicationType.NONE);, +		this.context = application.run("--spring.config.name=applicationloop");, +		ConfigurableEnvironment environment = this.context.getEnvironment();, +		assertThat(environment.acceptsProfiles("loop")).isTrue();, +]