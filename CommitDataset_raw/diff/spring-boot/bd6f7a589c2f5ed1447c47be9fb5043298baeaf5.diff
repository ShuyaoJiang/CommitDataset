[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			resolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			resolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverProperties.java, + * Copyright 2012-2015 the original author or authors., +	 * Enable support for fallback resolution., +	 */, +	private boolean enableFallback;, +, +	/**, +	public void setEnableFallback(boolean enableFallback) {, +		this.enableFallback = enableFallback;, +	}, +, +	public boolean isEnableFallback() {, +		return enableFallback;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			resolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverProperties.java, + * Copyright 2012-2015 the original author or authors., +	 * Enable support for fallback resolution., +	 */, +	private boolean enableFallback;, +, +	/**, +	public void setEnableFallback(boolean enableFallback) {, +		this.enableFallback = enableFallback;, +	}, +, +	public boolean isEnableFallback() {, +		return enableFallback;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.thymeleaf.spring4.view.ThymeleafViewResolver;, +, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.beans.PropertyAccessor;, + * @author Stephane Nicoll, +		DirectFieldAccessor accessor = new DirectFieldAccessor(liteDeviceDelegatingViewResolver);, +		assertEquals(false, accessor.getPropertyValue("enableFallback"));, +		assertEquals("", accessor.getPropertyValue("normalPrefix"));, +		assertEquals("mobile/", accessor.getPropertyValue("mobilePrefix"));, +		assertEquals("tablet/", accessor.getPropertyValue("tabletPrefix"));, +		assertEquals("", accessor.getPropertyValue("normalSuffix"));, +		assertEquals("", accessor.getPropertyValue("mobileSuffix"));, +		assertEquals("", accessor.getPropertyValue("tabletSuffix"));, +	}, +	@Test, +	public void overrideEnableFallback() throws Exception {, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +				"spring.mobile.devicedelegatingviewresolver.enabled:true",, +				"spring.mobile.devicedelegatingviewresolver.enableFallback:true");, +		assertEquals(true, accessor.getPropertyValue("enableFallback"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals("normal/", accessor.getPropertyValue("normalPrefix"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals("mob/", accessor.getPropertyValue("mobilePrefix"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals("tab/", accessor.getPropertyValue("tabletPrefix"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals(".nor",  accessor.getPropertyValue("normalSuffix"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals(".mob",  accessor.getPropertyValue("mobileSuffix"));, +		PropertyAccessor accessor = getLiteDeviceDelegatingViewResolverAccessor(, +		assertEquals(".tab", accessor.getPropertyValue("tabletSuffix"));, +	}, +, +	private PropertyAccessor getLiteDeviceDelegatingViewResolverAccessor(String... configuration) {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, configuration);, +		return new DirectFieldAccessor(liteDeviceDelegatingViewResolver);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			resolver.setEnableFallback(this.viewResolverProperties.isEnableFallback());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverProperties.java, + * Copyright 2012-2015 the original author or authors., +	 * Enable support for fallback resolution., +	 */, +	private boolean enableFallback;, +, +	/**, +	public void setEnableFallback(boolean enableFallback) {, +		this.enableFallback = enableFallback;, +	}, +, +	public boolean isEnableFallback() {, +		return enableFallback;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import org.thymeleaf.spring4.view.ThymeleafViewResolver;]