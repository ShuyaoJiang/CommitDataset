[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	/**, +	 * Properties key for boolean flag (default false) which if set will cause the, +	 * external configuration properties to be copied to System properties (assuming that, +	 * is allowed by Java security)., +	 */, +	public static final String SET_SYSTEM_PROPERTIES = "loader.system";, +, +			if (SystemPropertyUtils.resolvePlaceholders(, +					"${" + SET_SYSTEM_PROPERTIES + ":false}").equals("true")) {, +				this.logger.info("Adding resolved properties to System properties");, +				for (Object key : Collections.list(this.properties.propertyNames())) {, +					String value = this.properties.getProperty((String) key);, +					System.setProperty((String) key, value);, +				}, +			}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	/**, +	 * Properties key for boolean flag (default false) which if set will cause the, +	 * external configuration properties to be copied to System properties (assuming that, +	 * is allowed by Java security)., +	 */, +	public static final String SET_SYSTEM_PROPERTIES = "loader.system";, +, +			if (SystemPropertyUtils.resolvePlaceholders(, +					"${" + SET_SYSTEM_PROPERTIES + ":false}").equals("true")) {, +				this.logger.info("Adding resolved properties to System properties");, +				for (Object key : Collections.list(this.properties.propertyNames())) {, +					String value = this.properties.getProperty((String) key);, +					System.setProperty((String) key, value);, +				}, +			}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +		return properties == null ? null : properties.getProperty(placeholderName);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +	/**, +	 * Properties key for boolean flag (default false) which if set will cause the, +	 * external configuration properties to be copied to System properties (assuming that, +	 * is allowed by Java security)., +	 */, +	public static final String SET_SYSTEM_PROPERTIES = "loader.system";, +, +			if (SystemPropertyUtils.resolvePlaceholders(, +					"${" + SET_SYSTEM_PROPERTIES + ":false}").equals("true")) {, +				this.logger.info("Adding resolved properties to System properties");, +				for (Object key : Collections.list(this.properties.propertyNames())) {, +					String value = this.properties.getProperty((String) key);, +					System.setProperty((String) key, value);, +				}, +			}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +		return properties == null ? null : properties.getProperty(placeholderName);, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +		System.clearProperty("loader.system");, +		assertEquals(null, System.getProperty("loader.main"));, +	@Test, +	public void testSystemPropertiesSet() throws Exception {, +		System.setProperty("loader.system", "true");, +		this.launcher.initialize(new File("."));, +		assertEquals("demo.Application", System.getProperty("loader.main"));, +	}, +]