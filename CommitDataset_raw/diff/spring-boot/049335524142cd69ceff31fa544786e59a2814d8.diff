[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java, +import java.util.LinkedHashMap;, +		this.nameValuePairs = new LinkedHashMap<>();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java, +import java.util.LinkedHashMap;, +		this.nameValuePairs = new LinkedHashMap<>();, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java, +import java.util.LinkedHashMap;, +		this.nameValuePairs = new LinkedHashMap<>();, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonConverter.java, +import java.util.Comparator;, +import java.util.List;, +import java.util.stream.Collectors;, +	private static final ItemMetadataComparator ITEM_COMPARATOR = new ItemMetadataComparator();, +, +		List<ItemMetadata> items = metadata.getItems().stream(), +				.filter((item) -> item.isOfItemType(itemType)).sorted(ITEM_COMPARATOR), +				.collect(Collectors.toList());, +		for (ItemMetadata item : items) {, +		JSONObject jsonObject = new JSONObject();, +		JSONObject jsonObject = new JSONObject();, +		JSONObject result = new JSONObject();, +		JSONObject result = new JSONObject();, +			JSONObject parameters = new JSONObject();, +	private static class ItemMetadataComparator implements Comparator<ItemMetadata> {, +, +		@Override, +		public int compare(ItemMetadata o1, ItemMetadata o2) {, +			if (o1.isOfItemType(ItemType.GROUP)) {, +				return compareGroup(o1, o2);, +			}, +			return compareProperty(o1, o2);, +		}, +, +		private int compareGroup(ItemMetadata o1, ItemMetadata o2) {, +			return o1.getName().compareTo(o2.getName());, +		}, +, +		private int compareProperty(ItemMetadata o1, ItemMetadata o2) {, +			if (isDeprecated(o1) && !isDeprecated(o2)) {, +				return 1;, +			}, +			if (isDeprecated(o2) && !isDeprecated(o1)) {, +				return -1;, +			}, +			return o1.getName().compareTo(o2.getName());, +		}, +, +		private boolean isDeprecated(ItemMetadata item) {, +			return item.getDeprecation() != null;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java, +import java.util.LinkedHashMap;, +		this.nameValuePairs = new LinkedHashMap<>();, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonConverter.java, +import java.util.Comparator;, +import java.util.List;, +import java.util.stream.Collectors;, +	private static final ItemMetadataComparator ITEM_COMPARATOR = new ItemMetadataComparator();, +, +		List<ItemMetadata> items = metadata.getItems().stream(), +				.filter((item) -> item.isOfItemType(itemType)).sorted(ITEM_COMPARATOR), +				.collect(Collectors.toList());, +		for (ItemMetadata item : items) {, +		JSONObject jsonObject = new JSONObject();, +		JSONObject jsonObject = new JSONObject();, +		JSONObject result = new JSONObject();, +		JSONObject result = new JSONObject();, +			JSONObject parameters = new JSONObject();, +	private static class ItemMetadataComparator implements Comparator<ItemMetadata> {, +, +		@Override, +		public int compare(ItemMetadata o1, ItemMetadata o2) {, +			if (o1.isOfItemType(ItemType.GROUP)) {, +				return compareGroup(o1, o2);, +			}, +			return compareProperty(o1, o2);, +		}, +, +		private int compareGroup(ItemMetadata o1, ItemMetadata o2) {, +			return o1.getName().compareTo(o2.getName());, +		}, +, +		private int compareProperty(ItemMetadata o1, ItemMetadata o2) {, +			if (isDeprecated(o1) && !isDeprecated(o2)) {, +				return 1;, +			}, +			if (isDeprecated(o2) && !isDeprecated(o1)) {, +				return -1;, +			}, +			return o1.getName().compareTo(o2.getName());, +		}, +, +		private boolean isDeprecated(ItemMetadata item) {]