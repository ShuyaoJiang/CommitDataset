[+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/pom.xml, +			<version>2.2.2</version>, +++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/pom.xml, +			<version>2.2.2</version>, +++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java, +import java.io.FileInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Arrays;, +import javax.ws.rs.client.ClientRequestContext;, +import javax.ws.rs.client.ClientRequestFilter;, +import javax.ws.rs.client.Entity;, +import javax.ws.rs.client.WebTarget;, +, +import com.github.dockerjava.api.command.DockerCmd;, +import com.github.dockerjava.core.CompressArchiveUtil;, +import com.github.dockerjava.jaxrs.AbstrSyncDockerCmdExec;, +import com.github.dockerjava.jaxrs.DockerCmdExecFactoryImpl;, +	private final SpringBootDockerCmdExecFactory commandExecFactory = new SpringBootDockerCmdExecFactory();, +, +			docker.waitContainerCmd(container).exec();, +		DockerClientConfig config = DockerClientConfig.createDefaultConfigBuilder(), +				.build();, +		DockerClient docker = DockerClientBuilder.getInstance(config), +				.withDockerCmdExecFactory(this.commandExecFactory).build();, +		return docker;, +	private void copyToContainer(DockerClient docker, final String container,, +			final File file) {, +		this.commandExecFactory.createCopyToContainerCmdExec(), +				.exec(new CopyToContainerCmd(container, file));, +	private static final class CopyToContainerCmdExec, +			extends AbstrSyncDockerCmdExec<CopyToContainerCmd, Void> {, +, +		private CopyToContainerCmdExec(WebTarget baseResource,, +				DockerClientConfig dockerClientConfig) {, +			super(baseResource, dockerClientConfig);, +		}, +, +		@Override, +		protected Void execute(CopyToContainerCmd command) {, +			try {, +				InputStream streamToUpload = new FileInputStream(CompressArchiveUtil, +						.archiveTARFiles(command.getFile().getParentFile(),, +								Arrays.asList(command.getFile()),, +								command.getFile().getName()));, +				WebTarget webResource = getBaseResource().path("/containers/{id}/archive"), +						.resolveTemplate("id", command.getContainer());, +				webResource.queryParam("path", "."), +						.queryParam("noOverwriteDirNonDir", false).request(), +						.put(Entity.entity(streamToUpload, "application/x-tar")).close();, +				return null;, +			}, +			catch (Exception ex) {, +				throw new RuntimeException(ex);, +			}, +		}, +, +	}, +, +	private static final class CopyToContainerCmd implements DockerCmd<Void> {, +, +		private final String container;, +, +		private final File file;, +, +		private CopyToContainerCmd(String container, File file) {, +			this.container = container;, +			this.file = file;, +		}, +, +		public String getContainer() {, +			return this.container;, +		}, +, +		public File getFile() {, +			return this.file;, +		}, +, +		@Override, +		public void close() {, +, +		}, +, +	}, +, +	private static final class SpringBootDockerCmdExecFactory, +			extends DockerCmdExecFactoryImpl {, +, +		private SpringBootDockerCmdExecFactory() {, +			withClientRequestFilters(new ClientRequestFilter() {, +, +				@Override, +				public void filter(ClientRequestContext requestContext), +						throws IOException {, +					// Workaround for https://go-review.googlesource.com/#/c/3821/, +					requestContext.getHeaders().add("Connection", "close");, +				}, +, +			});, +		}]