[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			String type = writer.getType().getTypeName();, +			Class<?> type = writer.getType().getRawClass();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			String type = writer.getType().getTypeName();, +			Class<?> type = writer.getType().getRawClass();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +import com.fasterxml.jackson.databind.JavaType;, +	private final JavaType listObject;, +, +	private final JavaType mapStringObject;, +, +		this.listObject = objectMapper.getTypeFactory(), +				.constructParametricType(List.class, Object.class);, +		this.mapStringObject = objectMapper.getTypeFactory(), +				.constructParametricType(Map.class, String.class, Object.class);, +			return this.mapper.convertValue(result, this.listObject);, +		return this.mapper.convertValue(result, this.mapStringObject);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			String type = writer.getType().getTypeName();, +			Class<?> type = writer.getType().getRawClass();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +import com.fasterxml.jackson.databind.JavaType;, +	private final JavaType listObject;, +, +	private final JavaType mapStringObject;, +, +		this.listObject = objectMapper.getTypeFactory(), +				.constructParametricType(List.class, Object.class);, +		this.mapStringObject = objectMapper.getTypeFactory(), +				.constructParametricType(Map.class, String.class, Object.class);, +			return this.mapper.convertValue(result, this.listObject);, +		return this.mapper.convertValue(result, this.mapStringObject);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java, +import java.util.Arrays;, +import java.util.List;, +	public void jsonMapConversionWithDefaultObjectMapper() throws Exception {, +				new RootBeanDefinition(JsonMapConversionEndpoint.class));, +	public void jsonMapConversionWithCustomObjectMapper() throws Exception {, +				new RootBeanDefinition(JsonMapConversionEndpoint.class));, +	@Test, +	public void jsonListConversion() throws Exception {, +		this.context = new GenericApplicationContext();, +		this.context.registerBeanDefinition("endpointMbeanExporter",, +				new RootBeanDefinition(EndpointMBeanExporter.class));, +		this.context.registerBeanDefinition("endpoint1",, +				new RootBeanDefinition(JsonListConversionEndpoint.class));, +		this.context.refresh();, +		MBeanExporter mbeanExporter = this.context.getBean(EndpointMBeanExporter.class);, +		Object response = mbeanExporter.getServer().invoke(, +				getObjectName("endpoint1", this.context), "getData", new Object[0],, +				new String[0]);, +		assertThat(response).isInstanceOf(List.class);, +		assertThat(((List<?>) response).get(0)).isInstanceOf(Long.class);, +	}, +, +	public static class JsonMapConversionEndpoint, +		public JsonMapConversionEndpoint() {, +			super("json-map-conversion");, +	public static class JsonListConversionEndpoint, +			extends AbstractEndpoint<List<Object>> {, +, +		public JsonListConversionEndpoint() {, +			super("json-list-conversion");, +		}, +, +		@Override, +		public List<Object> invoke() {, +			return Arrays.<Object>asList(new Date());, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			String type = writer.getType().getTypeName();, +			Class<?> type = writer.getType().getRawClass();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +import com.fasterxml.jackson.databind.JavaType;, +	private final JavaType listObject;, +, +	private final JavaType mapStringObject;, +, +		this.listObject = objectMapper.getTypeFactory(), +				.constructParametricType(List.class, Object.class);, +		this.mapStringObject = objectMapper.getTypeFactory(), +				.constructParametricType(Map.class, String.class, Object.class);, +			return this.mapper.convertValue(result, this.listObject);, +		return this.mapper.convertValue(result, this.mapStringObject);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java, +import java.util.Arrays;, +import java.util.List;, +	public void jsonMapConversionWithDefaultObjectMapper() throws Exception {, +				new RootBeanDefinition(JsonMapConversionEndpoint.class));, +	public void jsonMapConversionWithCustomObjectMapper() throws Exception {, +				new RootBeanDefinition(JsonMapConversionEndpoint.class));, +	@Test, +	public void jsonListConversion() throws Exception {, +		this.context = new GenericApplicationContext();, +		this.context.registerBeanDefinition("endpointMbeanExporter",, +				new RootBeanDefinition(EndpointMBeanExporter.class));]