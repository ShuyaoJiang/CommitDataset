[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SystemEnvironmentPropertyMapper.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +			ConfigurationPropertyName configurationPropertyName) {, +		Set<String> names = new LinkedHashSet<>();, +		names.add(convertName(configurationPropertyName));, +		names.add(convertLegacyName(configurationPropertyName));, +		List<PropertyMapping> result = new ArrayList<>();, +		names.forEach((name) -> result, +				.add(new PropertyMapping(name, configurationPropertyName)));, +		if (isListShortcutPossible(configurationPropertyName)) {, +			result.addAll(mapListShortcut(propertySource, configurationPropertyName));, +		}, +		return result;, +	}, +, +	private boolean isListShortcutPossible(ConfigurationPropertyName name) {, +		return (name.isLastElementIndexed() && isNumber(name.getLastElement(Form.UNIFORM)), +				&& name.getNumberOfElements() >= 1);, +	}, +, +	private List<PropertyMapping> mapListShortcut(PropertySource<?> propertySource,, +			ConfigurationPropertyName name) {, +		String result = convertName(name, name.getNumberOfElements() - 1) + "__";, +		if (propertySource.containsProperty(result)) {, +			int index = Integer.parseInt(name.getLastElement(Form.UNIFORM));, +			return Collections.singletonList(, +					new PropertyMapping(result, name, new ElementExtractor(index)));, +		}, +		return Collections.emptyList();, +	}, +, +	@Override, +	public List<PropertyMapping> map(PropertySource<?> propertySource,, +	private String convertLegacyName(ConfigurationPropertyName name) {, +		StringBuilder result = new StringBuilder();, +		for (int i = 0; i < name.getNumberOfElements(); i++) {, +			result.append(result.length() == 0 ? "" : "_");, +			result.append(convertLegacyNameElement(name.getElement(i, Form.ORIGINAL)));, +		}, +		return result.toString();, +	private Object convertLegacyNameElement(String element) {, +		return element.replace("-", "_").toUpperCase();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SystemEnvironmentPropertyMapper.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +			ConfigurationPropertyName configurationPropertyName) {, +		Set<String> names = new LinkedHashSet<>();, +		names.add(convertName(configurationPropertyName));, +		names.add(convertLegacyName(configurationPropertyName));, +		List<PropertyMapping> result = new ArrayList<>();, +		names.forEach((name) -> result, +				.add(new PropertyMapping(name, configurationPropertyName)));, +		if (isListShortcutPossible(configurationPropertyName)) {, +			result.addAll(mapListShortcut(propertySource, configurationPropertyName));, +		}, +		return result;, +	}, +, +	private boolean isListShortcutPossible(ConfigurationPropertyName name) {, +		return (name.isLastElementIndexed() && isNumber(name.getLastElement(Form.UNIFORM)), +				&& name.getNumberOfElements() >= 1);, +	}, +, +	private List<PropertyMapping> mapListShortcut(PropertySource<?> propertySource,, +			ConfigurationPropertyName name) {, +		String result = convertName(name, name.getNumberOfElements() - 1) + "__";, +		if (propertySource.containsProperty(result)) {, +			int index = Integer.parseInt(name.getLastElement(Form.UNIFORM));, +			return Collections.singletonList(, +					new PropertyMapping(result, name, new ElementExtractor(index)));, +		}, +		return Collections.emptyList();, +	}, +, +	@Override, +	public List<PropertyMapping> map(PropertySource<?> propertySource,, +	private String convertLegacyName(ConfigurationPropertyName name) {, +		StringBuilder result = new StringBuilder();, +		for (int i = 0; i < name.getNumberOfElements(); i++) {, +			result.append(result.length() == 0 ? "" : "_");, +			result.append(convertLegacyNameElement(name.getElement(i, Form.ORIGINAL)));, +		}, +		return result.toString();, +	private Object convertLegacyNameElement(String element) {, +		return element.replace("-", "_").toUpperCase();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BackCompatibiltyBinderIntegrationTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]