[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for embedding an extensible shell, + * into a Spring Boot enabled application. By default a SSH daemon is started on port 2000, + * with a default username <code>user</code> and password (default password is logged, + * during application startup)., + * This configuration will auto detect the existence of a Spring Security, + * {@link AuthenticationManager} and will delegate authentication requests for shell, + * access to this detected instance., + * To add customizations to the shell simply define beans of type {@link CRaSHPlugin} in, + * the application context. Those beans will get auto detected during startup and, + * registered with the underlying shell infrastructure., + * Additional shell commands can be implemented using the guide and documentation at <a, + * href="http://www.crashub.org">crashub.org</a>. By default Boot will search for commands, + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +		bs.setConfig(this.properties.mergeProperties(new Properties()));, +			FS commandFileSystem = createFileSystem(this.properties, +					.getCommandPathPatterns());, +			FS confFileSystem = createFileSystem(this.properties.getConfigPathPatterns());, +			PluginDiscovery discovery = new BeanFactoryFilteringPluginDiscovery(, +					this.resourceLoader.getClassLoader(), this.beanFactory,, +					this.properties.getDisabledPlugins());, +			PluginContext context = new PluginContext(discovery,, +					createPluginContextAttributes(), commandFileSystem, confFileSystem,, +					this.resourceLoader.getClassLoader());, +		protected FS createFileSystem(String[] pathPatterns) throws IOException,, +				URISyntaxException {, +				cmdFS.mount(new SimpleFileSystemDriver(new DirectoryHandle(pathPattern,, +						this.resourceLoader)));, +			String bootVersion = CrshAutoConfiguration.class.getPackage(), +					.getImplementationVersion();, +			if (this.beanFactory != null) {, +				attributes.put("spring.beanfactory", this.beanFactory);, +	private static class AuthenticationManagerAdapter extends, +			CRaSHPlugin<AuthenticationPlugin> implements AuthenticationPlugin<String> {, +		private static final PropertyDescriptor<String> ROLES = PropertyDescriptor, +				.create("auth.spring.roles", "ADMIN",, +						"Comma separated list of roles required to access the shell");, +			Authentication token = new UsernamePasswordAuthenticationToken(username,, +					password);, +				token = this.authenticationManager.authenticate(token);, +			if (this.accessDecisionManager != null && token.isAuthenticated(), +					&& this.roles != null) {, +					this.accessDecisionManager.decide(token, this,, +							SecurityConfig.createList(this.roles));, +				this.roles = StringUtils, +						.commaDelimitedListToStringArray(rolesPropertyValue);, +	private static class BeanFactoryFilteringPluginDiscovery extends, +			ServiceLoaderDiscovery {, +		public BeanFactoryFilteringPluginDiscovery(ClassLoader classLoader,, +				ListableBeanFactory beanFactory, String[] disabledPlugins), +			Collection<CRaSHPlugin> springPlugins = this.beanFactory.getBeansOfType(, +					CRaSHPlugin.class).values();, +				if (this.disabledPlugins != null && this.disabledPlugins.length > 0) {, +					for (String disabledPlugin : this.disabledPlugins) {, +						if (ClassUtils.getShortName(clazz).equalsIgnoreCase(, +								disabledPlugin), +								|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(, +										disabledPlugin)) {, +		public Iterable<ResourceHandle> children(ResourceHandle handle), +				throws IOException {, +				return Collections.singletonList(((FileHandle) handle).openStream()), +						.iterator();, +			return this.root;, +			Resource[] resources = this.resourceLoader.getResources(getName());, +			catch (IOException e) {, +			}, +			return this.name;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for embedding an extensible shell, + * into a Spring Boot enabled application. By default a SSH daemon is started on port 2000, + * with a default username <code>user</code> and password (default password is logged, + * during application startup)., + * This configuration will auto detect the existence of a Spring Security, + * {@link AuthenticationManager} and will delegate authentication requests for shell, + * access to this detected instance., + * To add customizations to the shell simply define beans of type {@link CRaSHPlugin} in, + * the application context. Those beans will get auto detected during startup and, + * registered with the underlying shell infrastructure., + * Additional shell commands can be implemented using the guide and documentation at <a, + * href="http://www.crashub.org">crashub.org</a>. By default Boot will search for commands, + * using the following classpath scanning pattern <code>classpath*:/commands/**</code>. To, + * add different locations or override the default use, + * <code>shell.command_path_patterns</code> in your application configuration., +		bs.setConfig(this.properties.mergeProperties(new Properties()));, +			FS commandFileSystem = createFileSystem(this.properties, +					.getCommandPathPatterns());, +			FS confFileSystem = createFileSystem(this.properties.getConfigPathPatterns());, +			PluginDiscovery discovery = new BeanFactoryFilteringPluginDiscovery(, +					this.resourceLoader.getClassLoader(), this.beanFactory,, +					this.properties.getDisabledPlugins());, +			PluginContext context = new PluginContext(discovery,, +					createPluginContextAttributes(), commandFileSystem, confFileSystem,, +					this.resourceLoader.getClassLoader());, +		protected FS createFileSystem(String[] pathPatterns) throws IOException,, +				URISyntaxException {, +				cmdFS.mount(new SimpleFileSystemDriver(new DirectoryHandle(pathPattern,, +						this.resourceLoader)));, +			String bootVersion = CrshAutoConfiguration.class.getPackage()]