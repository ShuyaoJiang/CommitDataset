[+++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +, +the launching of a Spring Boot application in pretty much any way you like as long as the, +Java runtime is available (which is a standard feature you can ask for at Openshift)., +To do this you can use the, +https://www.openshift.com/developers/do-it-yourself[DIY Cartridge] and hooks in your, +repository under `.openshift/action_scripts`:, +1. Ensure Java and your build tool are installed remotely, e.g. using a `pre_build` hook, +   (Java and Maven are installed by default, Gradle is not), +[indent=0], +[indent=0], +[indent=0], +[indent=0], +There's a blog on https://www.openshift.com/blogs/run-gradle-builds-on-openshift[running, +Gradle in Openshift] on their website that will get you started with a gradle build to, +run the app. A http://issues.gradle.org/browse/GRADLE-2871[bug in Gradle] currently, +prevents you from using Gradle newer than 1.6., +, +, +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +, +the launching of a Spring Boot application in pretty much any way you like as long as the, +Java runtime is available (which is a standard feature you can ask for at Openshift)., +To do this you can use the, +https://www.openshift.com/developers/do-it-yourself[DIY Cartridge] and hooks in your, +repository under `.openshift/action_scripts`:, +1. Ensure Java and your build tool are installed remotely, e.g. using a `pre_build` hook, +   (Java and Maven are installed by default, Gradle is not), +[indent=0], +[indent=0], +[indent=0], +[indent=0], +There's a blog on https://www.openshift.com/blogs/run-gradle-builds-on-openshift[running, +Gradle in Openshift] on their website that will get you started with a gradle build to, +run the app. A http://issues.gradle.org/browse/GRADLE-2871[bug in Gradle] currently, +prevents you from using Gradle newer than 1.6., +, +, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +The {github-code}/spring-boot-actuator[`spring-boot-actuator`] module provides all of, +Spring Boot's production-ready features. The simplest way to enable the features is to add, +a dependency to the `spring-boot-starter-actuator` ``Starter POM''., +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +, +the launching of a Spring Boot application in pretty much any way you like as long as the, +Java runtime is available (which is a standard feature you can ask for at Openshift)., +To do this you can use the, +https://www.openshift.com/developers/do-it-yourself[DIY Cartridge] and hooks in your, +repository under `.openshift/action_scripts`:, +1. Ensure Java and your build tool are installed remotely, e.g. using a `pre_build` hook, +   (Java and Maven are installed by default, Gradle is not), +[indent=0], +[indent=0], +[indent=0], +[indent=0], +There's a blog on https://www.openshift.com/blogs/run-gradle-builds-on-openshift[running, +Gradle in Openshift] on their website that will get you started with a gradle build to, +run the app. A http://issues.gradle.org/browse/GRADLE-2871[bug in Gradle] currently, +prevents you from using Gradle newer than 1.6., +, +, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +The {github-code}/spring-boot-actuator[`spring-boot-actuator`] module provides all of, +Spring Boot's production-ready features. The simplest way to enable the features is to add, +a dependency to the `spring-boot-starter-actuator` ``Starter POM''., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: if you use environment variables not system properties, most operating systems, +NOTE: If you are running in a container then JNDI properties (in `java:comp/env`) or, +servlet context initialization parameters can be used instead of, or as well as,, +Spring Boot provides auto-configuration for Redis, MongoDB, Elasticsearch, Solr and, +Gemfire; you can make use of the other projects, but you will need to configure them, +yourself. Refer to the appropriate reference documentation at, +http://projects.spring.io/spring-data[projects.spring.io/spring-data]., +, +http://redis.io/[Redis] is a cache, message broker and richly-featured key-value store., +Spring Boot offers basic auto-configuration for the https://github.com/xetorthio/jedis/[Jedis], +client library and abstractions on top of it provided by, +https://github.com/spring-projects/spring-data-redis[Spring Data Redis]. There is a, +`spring-boot-starter-redis` ``Starter POM'' for collecting the dependencies in a, +convenient way., +, +, +You can inject an auto-configured `RedisConnectionFactory`, `StringRedisTemplate` or, +vanilla `RedisTemplate` instance as you would any other Spring Bean. By default the, +instance will attempt to connect to a Redis server using `localhost:6379`:, +If you add a `@Bean` of your own of any of the auto-configured types it will replace the, +default (except in the case of `RedisTemplate` the exclusion is based on the bean name, +``redisTemplate'' not its type). If `commons-pool2` is on the classpath you will get a, +pooled connection factory by default., +, +, +, +https://github.com/spring-projects/spring-data-gemfire[Spring Data Gemfire] provides, +convenient Spring-friendly tools for accessing the http://www.gopivotal.com/big-data/pivotal-gemfire#details[Pivotal Gemfire], +data management platform. There is a `spring-boot-starter-data-gemfire` ``Starter POM'', +for collecting the dependencies in a convenient way. There is currently no auto=config, +support for Gemfire, but you can enable Spring Data Repositories with a, +https://github.com/spring-projects/spring-data-gemfire/blob/master/src/main/java/org/springframework/data/gemfire/repository/config/EnableGemfireRepositories.java[single annotation]., +http://lucene.apache.org/solr/[Apache Solr] is a search engine. Spring Boot offers basic, +auto-configuration for the solr client library and abstractions on top of it provided by]