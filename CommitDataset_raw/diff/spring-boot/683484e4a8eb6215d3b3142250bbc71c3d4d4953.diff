[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/assertj/ApplicationContextAssert.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.ConfigurableApplicationContext;, +		String name = (names.length > 0) ? getPrimary(names, scope) : null;, +		if (names.length > 1 && name == null) {, +		T bean = (name != null) ? getApplicationContext().getBean(name, type) : null;, +	private String getPrimary(String[] names, Scope scope) {, +		if (names.length == 1) {, +			return names[0];, +		}, +		String primary = null;, +		for (String name : names) {, +			if (isPrimary(name, scope)) {, +				if (primary != null) {, +					return null;, +				}, +				primary = name;, +			}, +		}, +		return primary;, +	}, +, +	private boolean isPrimary(String name, Scope scope) {, +		ApplicationContext context = getApplicationContext();, +		while (context != null) {, +			if (context instanceof ConfigurableApplicationContext) {, +				ConfigurableListableBeanFactory factory = ((ConfigurableApplicationContext) context), +						.getBeanFactory();, +				if (factory.containsBean(name), +						&& factory.getMergedBeanDefinition(name).isPrimary()) {, +					return true;, +				}, +			}, +			context = (scope != Scope.NO_ANCESTORS) ? context.getParent() : null;, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/assertj/ApplicationContextAssert.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.ConfigurableApplicationContext;, +		String name = (names.length > 0) ? getPrimary(names, scope) : null;, +		if (names.length > 1 && name == null) {, +		T bean = (name != null) ? getApplicationContext().getBean(name, type) : null;, +	private String getPrimary(String[] names, Scope scope) {, +		if (names.length == 1) {, +			return names[0];, +		}, +		String primary = null;, +		for (String name : names) {, +			if (isPrimary(name, scope)) {, +				if (primary != null) {, +					return null;, +				}, +				primary = name;, +			}, +		}, +		return primary;, +	}, +, +	private boolean isPrimary(String name, Scope scope) {, +		ApplicationContext context = getApplicationContext();, +		while (context != null) {, +			if (context instanceof ConfigurableApplicationContext) {, +				ConfigurableListableBeanFactory factory = ((ConfigurableApplicationContext) context), +						.getBeanFactory();, +				if (factory.containsBean(name), +						&& factory.getMergedBeanDefinition(name).isPrimary()) {, +					return true;, +				}, +			}, +			context = (scope != Scope.NO_ANCESTORS) ? context.getParent() : null;, +		}, +		return false;, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/context/assertj/ApplicationContextAssertTests.java, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Primary;, +	public void getBeanOfTypeWhenHasPrimaryBeanShouldReturnPrimary() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				PrimaryFooConfig.class);, +		assertThat(getAssert(context)).getBean(Foo.class).isInstanceOf(Bar.class);, +		context.close();, +	}, +, +	@Test, +	private static class Bar extends Foo {, +, +	}, +, +	@Configuration, +	static class PrimaryFooConfig {, +, +		@Bean, +		public Foo foo() {, +			return new Foo();, +		}]