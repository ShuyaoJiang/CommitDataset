[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import org.springframework.boot.bind.PropertySourcesPropertyValues;, +import org.springframework.boot.bind.RelaxedDataBinder;, +import org.springframework.core.env.ConfigurableEnvironment;, +		if (getEnvironment() instanceof ConfigurableEnvironment) {, +			Excludes excludes = new Excludes();, +			RelaxedDataBinder binder = new RelaxedDataBinder(excludes,, +					"spring.autoconfigure.");, +			binder.bind(new PropertySourcesPropertyValues(, +					((ConfigurableEnvironment) getEnvironment()).getPropertySources()));, +			return excludes.getExclude();, +		}, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +	/**, +	 * Bindable object used to get excludes., +	 */, +	static class Excludes {, +, +		private List<String> exclude = new ArrayList<String>();, +, +		public List<String> getExclude() {, +			return this.exclude;, +		}, +, +		public void setExclude(List<String> excludes) {, +			this.exclude = excludes;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import org.springframework.boot.bind.PropertySourcesPropertyValues;, +import org.springframework.boot.bind.RelaxedDataBinder;, +import org.springframework.core.env.ConfigurableEnvironment;, +		if (getEnvironment() instanceof ConfigurableEnvironment) {, +			Excludes excludes = new Excludes();, +			RelaxedDataBinder binder = new RelaxedDataBinder(excludes,, +					"spring.autoconfigure.");, +			binder.bind(new PropertySourcesPropertyValues(, +					((ConfigurableEnvironment) getEnvironment()).getPropertySources()));, +			return excludes.getExclude();, +		}, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +	/**, +	 * Bindable object used to get excludes., +	 */, +	static class Excludes {, +, +		private List<String> exclude = new ArrayList<String>();, +, +		public List<String> getExclude() {, +			return this.exclude;, +		}, +, +		public void setExclude(List<String> excludes) {, +			this.exclude = excludes;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import org.springframework.boot.bind.PropertySourcesPropertyValues;, +import org.springframework.boot.bind.RelaxedDataBinder;, +import org.springframework.core.env.ConfigurableEnvironment;, +		if (getEnvironment() instanceof ConfigurableEnvironment) {, +			Excludes excludes = new Excludes();, +			RelaxedDataBinder binder = new RelaxedDataBinder(excludes,, +					"spring.autoconfigure.");, +			binder.bind(new PropertySourcesPropertyValues(, +					((ConfigurableEnvironment) getEnvironment()).getPropertySources()));, +			return excludes.getExclude();, +		}, +		String[] exclude = resolver.getProperty("exclude", String[].class);, +		return (Arrays.asList(exclude == null ? new String[0] : exclude));, +	/**, +	 * Bindable object used to get excludes., +	 */, +	static class Excludes {, +, +		private List<String> exclude = new ArrayList<String>();, +, +		public List<String> getExclude() {, +			return this.exclude;, +		}, +, +		public void setExclude(List<String> excludes) {, +			this.exclude = excludes;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedPropertyResolverTests.java]