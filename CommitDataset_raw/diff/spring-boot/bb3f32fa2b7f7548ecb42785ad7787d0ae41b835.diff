[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/ConfigurableDataSourceExample.java, +			return properties.initializeDataSourceBuilder().type(HikariDataSource.class), +					.build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/ConfigurableDataSourceExample.java, +			return properties.initializeDataSourceBuilder().type(HikariDataSource.class), +					.build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleDataSourceExample.java, +			return DataSourceBuilder.create().type(HikariDataSource.class).build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/ConfigurableDataSourceExample.java, +			return properties.initializeDataSourceBuilder().type(HikariDataSource.class), +					.build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleDataSourceExample.java, +			return DataSourceBuilder.create().type(HikariDataSource.class).build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleTwoDataSourcesExample.java, +			return DataSourceBuilder.create().type(BasicDataSource.class).build();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/ConfigurableDataSourceExample.java, +			return properties.initializeDataSourceBuilder().type(HikariDataSource.class), +					.build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleDataSourceExample.java, +			return DataSourceBuilder.create().type(HikariDataSource.class).build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleTwoDataSourcesExample.java, +			return DataSourceBuilder.create().type(BasicDataSource.class).build();, +++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java, + * @param <T> type of DataSource produced by the builder, +public final class DataSourceBuilder<T extends DataSource> {, +	public static DataSourceBuilder<?> create() {, +		return new DataSourceBuilder<DataSource>(null);, +	public static DataSourceBuilder<?> create(ClassLoader classLoader) {, +		return new DataSourceBuilder<DataSource>(classLoader);, +	private DataSourceBuilder(ClassLoader classLoader) {, +	@SuppressWarnings("unchecked"), +	public T build() {, +		return (T) result;, +	@SuppressWarnings("unchecked"), +	public <D extends DataSource> DataSourceBuilder<D> type(Class<D> type) {, +		return (DataSourceBuilder<D>) this;, +	public DataSourceBuilder<T> url(String url) {, +	public DataSourceBuilder<T> driverClassName(String driverClassName) {, +	public DataSourceBuilder<T> username(String username) {, +	public DataSourceBuilder<T> password(String password) {, +	public static Class<? extends DataSource> findType(ClassLoader classLoader) {, +						classLoader);, +		Class<? extends DataSource> type = this.type != null ? this.type, +				: findType(this.classLoader);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			Class<?> dataSourceClass = DataSourceBuilder, +					.findType(context.getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	public DataSourceBuilder<?> initializeDataSourceBuilder() {, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/ConfigurableDataSourceExample.java, +			return properties.initializeDataSourceBuilder().type(HikariDataSource.class), +					.build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleDataSourceExample.java, +			return DataSourceBuilder.create().type(HikariDataSource.class).build();, +++ b/spring-boot-docs/src/main/java/org/springframework/boot/jdbc/SimpleTwoDataSourcesExample.java, +			return DataSourceBuilder.create().type(BasicDataSource.class).build();, +++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceBuilder.java, + * @param <T> type of DataSource produced by the builder, +public final class DataSourceBuilder<T extends DataSource> {, +	public static DataSourceBuilder<?> create() {, +		return new DataSourceBuilder<DataSource>(null);, +	public static DataSourceBuilder<?> create(ClassLoader classLoader) {, +		return new DataSourceBuilder<DataSource>(classLoader);, +	private DataSourceBuilder(ClassLoader classLoader) {, +	@SuppressWarnings("unchecked"), +	public T build() {, +		return (T) result;, +	@SuppressWarnings("unchecked"), +	public <D extends DataSource> DataSourceBuilder<D> type(Class<D> type) {, +		return (DataSourceBuilder<D>) this;, +	public DataSourceBuilder<T> url(String url) {, +	public DataSourceBuilder<T> driverClassName(String driverClassName) {]