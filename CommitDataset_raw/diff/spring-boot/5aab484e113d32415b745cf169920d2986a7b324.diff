[+++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.3.0.BUILD-SNAPSHOT</version>, +			<groupId>com.sun.mail</groupId>, +			<artifactId>javax.mail</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.activemq</groupId>, +			<artifactId>activemq-broker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/pom.xml, +	<version>1.3.0.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.3.0.BUILD-SNAPSHOT</version>, +			<groupId>com.sun.mail</groupId>, +			<artifactId>javax.mail</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.activemq</groupId>, +			<artifactId>activemq-broker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import javax.jms.ConnectionFactory;, +, +import org.springframework.boot.actuate.health.JmsHealthIndicator;, +import org.springframework.boot.actuate.health.MailHealthIndicator;, +import org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;, +import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;, +import org.springframework.mail.javamail.JavaMailSenderImpl;, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class,, +		MailSenderAutoConfiguration.class, JmsAutoConfiguration.class}), +	@Configuration, +	@ConditionalOnBean(JavaMailSenderImpl.class), +	@ConditionalOnProperty(prefix = "management.health.mail", name = "enabled", matchIfMissing = true), +	public static class MailHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +, +		@Autowired(required = false), +		private Map<String, JavaMailSenderImpl> mailSenders;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "mailHealthIndicator"), +		public HealthIndicator mailHealthIndicator() {, +			if (this.mailSenders.size() == 1) {, +				JavaMailSenderImpl mailSender = this.mailSenders.values().iterator(), +						.next();, +				return createMailHealthIndicator(mailSender);, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, JavaMailSenderImpl> entry : this.mailSenders, +					.entrySet()) {, +				String name = entry.getKey();, +				JavaMailSenderImpl mailSender = entry.getValue();, +				composite.addHealthIndicator(name, createMailHealthIndicator(mailSender));, +			}, +			return composite;, +		}, +, +		private MailHealthIndicator createMailHealthIndicator(, +				JavaMailSenderImpl mailSender) {, +			return new MailHealthIndicator(mailSender);, +		}, +	}, +, +	@Configuration, +	@ConditionalOnBean(ConnectionFactory.class), +	@ConditionalOnProperty(prefix = "management.health.jms", name = "enabled", matchIfMissing = true), +	public static class JmsHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +, +		@Autowired(required = false), +		private Map<String, ConnectionFactory> connectionFactories;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "jmsHealthIndicator"), +		public HealthIndicator jmsHealthIndicator() {, +			if (this.connectionFactories.size() == 1) {, +				ConnectionFactory connectionFactory = this.connectionFactories.values(), +						.iterator().next();, +				return createJmsHealthIndicator(connectionFactory);, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, ConnectionFactory> entry : this.connectionFactories, +					.entrySet()) {, +				String name = entry.getKey();]