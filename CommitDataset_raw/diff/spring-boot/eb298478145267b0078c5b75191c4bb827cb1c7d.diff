[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +	protected static class ManagementSecurityPropertiesConfiguration, +			implements SecurityPrerequisite {, +	private static class IgnoredPathsWebSecurityConfigurerAdapter, +			implements WebSecurityConfigurer<WebSecurity> {, +				ignored.addAll(, +						Arrays.asList(EndpointPaths.get(this.endpointHandlerMapping)));, +			String managementEnabled = context.getEnvironment(), +					.getProperty("management.security.enabled", "true");, +			String basicEnabled = context.getEnvironment(), +					.getProperty("security.basic.enabled", "true");, +			return new ConditionOutcome(, +					"true".equalsIgnoreCase(managementEnabled), +	protected static class ManagementWebSecurityConfigurerAdapter, +			extends WebSecurityConfigurerAdapter {, +				if (context != null && context, +						.getBeanNamesForType(EndpointHandlerMapping.class).length > 0) {, +				// Match all the requests for actuator endpoints ..., +				// ... but permitAll() for the non-sensitive ones, +				configurePermittedRequests(http.authorizeRequests());, +			// Match everything, including the sensitive and non-sensitive paths, +			return new EndpointPathRequestMatcher(, +					EndpointPaths.get(this.endpointHandlerMapping));, +		private void configurePermittedRequests(, +			// Permit access to the non-sensitive endpoints, +			requests.requestMatchers(new EndpointPathRequestMatcher(, +					EndpointPaths.get(this.endpointHandlerMapping, false))).permitAll();, +			// Restrict the rest to the configured role, +			private String[] paths;, +			EndpointPathRequestMatcher(String[] paths) {, +				this.paths = paths;, +				for (String path : this.paths) {, +	/**, +	 * Helper class for extracting lists of paths from the EndpointHandlerMapping., +	 */, +		/**, +		 * Get all the paths (sensitive and unsensitive)., +		 *, +		 * @param endpointHandlerMapping the mapping, +		 * @return all paths, +		 */, +		/**, +		 * Get all the paths that are either sensitive or unsensitive., +		 *, +		 * @param endpointHandlerMapping the mapping, +		 * @param secure flag to say if we want the secure ones, +		 * @return the relevant paths, +		 */, +						if (secure) {, +					paths.add(path + "/");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +	protected static class ManagementSecurityPropertiesConfiguration, +			implements SecurityPrerequisite {, +	private static class IgnoredPathsWebSecurityConfigurerAdapter, +			implements WebSecurityConfigurer<WebSecurity> {, +				ignored.addAll(, +						Arrays.asList(EndpointPaths.get(this.endpointHandlerMapping)));, +			String managementEnabled = context.getEnvironment(), +					.getProperty("management.security.enabled", "true");, +			String basicEnabled = context.getEnvironment(), +					.getProperty("security.basic.enabled", "true");, +			return new ConditionOutcome(, +					"true".equalsIgnoreCase(managementEnabled), +	protected static class ManagementWebSecurityConfigurerAdapter, +			extends WebSecurityConfigurerAdapter {, +				if (context != null && context, +						.getBeanNamesForType(EndpointHandlerMapping.class).length > 0) {, +				// Match all the requests for actuator endpoints ..., +				// ... but permitAll() for the non-sensitive ones, +				configurePermittedRequests(http.authorizeRequests());, +			// Match everything, including the sensitive and non-sensitive paths, +			return new EndpointPathRequestMatcher(, +					EndpointPaths.get(this.endpointHandlerMapping));, +		private void configurePermittedRequests(, +			// Permit access to the non-sensitive endpoints, +			requests.requestMatchers(new EndpointPathRequestMatcher(, +					EndpointPaths.get(this.endpointHandlerMapping, false))).permitAll();, +			// Restrict the rest to the configured role, +			private String[] paths;, +			EndpointPathRequestMatcher(String[] paths) {, +				this.paths = paths;, +				for (String path : this.paths) {, +	/**, +	 * Helper class for extracting lists of paths from the EndpointHandlerMapping., +	 */, +		/**, +		 * Get all the paths (sensitive and unsensitive)., +		 *, +		 * @param endpointHandlerMapping the mapping, +		 * @return all paths, +		 */, +		/**, +		 * Get all the paths that are either sensitive or unsensitive., +		 *, +		 * @param endpointHandlerMapping the mapping, +		 * @param secure flag to say if we want the secure ones, +		 * @return the relevant paths, +		 */, +						if (secure) {, +					paths.add(path + "/");]