[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import java.util.function.Consumer;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withUserConfiguration(TestConfiguration.class);, +		this.contextRunner.run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner, +				.withPropertyValues(, +						"spring.jpa.hibernate.naming.physical-strategy:com.example.Physical", +				).run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner.run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner, +				.withPropertyValues(, +						"spring.jpa.hibernate.naming.physical-strategy:com.example.Physical", +				).run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner, +				.withPropertyValues(, +						"spring.jpa.properties.hibernate.physical_naming_strategy:com.example.Physical", +				).run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner.run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner, +				.withPropertyValues(, +						"spring.jpa.hibernate.use-new-id-generator-mappings:false", +				).run(assertJpaProperties((properties) -> {, +		}));, +	public void determineDatabaseNoCheckIfDatabaseIsSet() {, +		this.contextRunner, +				.withPropertyValues("spring.jpa.database=postgresql"), +				.run(assertJpaProperties((properties) -> {, +					try {, +					catch (SQLException ex) {, +						throw new IllegalStateException("Should not happen", ex);, +					}, +				}));, +	}, +		this.contextRunner.run(assertJpaProperties((properties) -> {, +		}));, +		this.contextRunner, +				.withPropertyValues("spring.jpa.database=mysql"), +				.run(assertJpaProperties((properties) -> {, +				}));, +		this.contextRunner.run(assertJpaProperties((properties) -> {, +		}));, +	private DataSource mockStandaloneDataSource() {, +		try {, +		catch (SQLException ex) {, +			throw new IllegalStateException("Should not happen", ex);, +		}, +	}, +	private ContextConsumer<AssertableApplicationContext> assertJpaProperties(, +			Consumer<JpaProperties> consumer) {, +		return (context) -> {, +			assertThat(context).hasSingleBean(JpaProperties.class);, +			consumer.accept(context.getBean(JpaProperties.class));, +		};]