[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +import org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration;, +import org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration;, +import org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration;, +import org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;, + * @author Stephane Nicoll, +@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true"), +@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class), +@AutoConfigureAfter({WebMvcAutoConfiguration.class, FreeMarkerAutoConfiguration.class,, +		GroovyTemplateAutoConfiguration.class, MustacheAutoConfiguration.class,, +		ThymeleafAutoConfiguration.class}), +	protected static class LiteDeviceDelegatingViewResolverFactoryConfiguration {, +		public DeviceDelegatingViewResolverFactory deviceDelegatingViewResolverFactory(, +				DeviceDelegatingViewResolverProperties properties) {, +			return new DeviceDelegatingViewResolverFactory(properties);, +	@ConditionalOnClass(FreeMarkerViewResolver.class), +	protected static class DeviceDelegatingFreemarkerViewResolverConfiguration {, +, +		@Bean, +		@ConditionalOnBean(FreeMarkerViewResolver.class), +		public LiteDeviceDelegatingViewResolver deviceDelegatingFreemarkerViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +				FreeMarkerViewResolver viewResolver) {, +			return factory.createViewResolver(viewResolver);, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass(GroovyMarkupViewResolver.class), +	protected static class DeviceDelegatingGroovyMarkupViewResolverConfiguration {, +, +		@Bean, +		@ConditionalOnBean(GroovyMarkupViewResolver.class), +		public LiteDeviceDelegatingViewResolver deviceDelegatingGroovyMarkupViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +				GroovyMarkupViewResolver viewResolver) {, +			return factory.createViewResolver(viewResolver);, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass(InternalResourceViewResolver.class), +	protected static class DeviceDelegatingJspViewResolverConfiguration {, +, +		@Bean, +		public LiteDeviceDelegatingViewResolver deviceDelegatingJspViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +			return factory.createViewResolver(viewResolver);, +	}, +, +	@Configuration, +	@ConditionalOnClass(MustacheViewResolver.class), +	protected static class DeviceDelegatingMustacheViewResolverConfiguration {, +, +		@ConditionalOnBean(MustacheViewResolver.class), +		public LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +				MustacheViewResolver viewResolver) {, +			return factory.createViewResolver(viewResolver);, +	@Configuration, +	@ConditionalOnClass(ThymeleafViewResolver.class), +	protected static class DeviceDelegatingThymeleafViewResolverConfiguration {, +, +		@Bean, +		@ConditionalOnBean(ThymeleafViewResolver.class), +		public LiteDeviceDelegatingViewResolver deviceDelegatingThymeleafViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +				ThymeleafViewResolver viewResolver) {, +			return factory.createViewResolver(viewResolver);, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +import org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration;, +import org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration;, +import org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration;, +import org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +import org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;, + * @author Stephane Nicoll, +@ConditionalOnProperty(prefix = "spring.mobile.devicedelegatingviewresolver", name = "enabled", havingValue = "true"), +@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class), +@AutoConfigureAfter({WebMvcAutoConfiguration.class, FreeMarkerAutoConfiguration.class,, +		GroovyTemplateAutoConfiguration.class, MustacheAutoConfiguration.class,, +		ThymeleafAutoConfiguration.class}), +	protected static class LiteDeviceDelegatingViewResolverFactoryConfiguration {, +		public DeviceDelegatingViewResolverFactory deviceDelegatingViewResolverFactory(, +				DeviceDelegatingViewResolverProperties properties) {, +			return new DeviceDelegatingViewResolverFactory(properties);, +	@ConditionalOnClass(FreeMarkerViewResolver.class), +	protected static class DeviceDelegatingFreemarkerViewResolverConfiguration {, +, +		@Bean, +		@ConditionalOnBean(FreeMarkerViewResolver.class), +		public LiteDeviceDelegatingViewResolver deviceDelegatingFreemarkerViewResolver(, +				DeviceDelegatingViewResolverFactory factory,, +				FreeMarkerViewResolver viewResolver) {]