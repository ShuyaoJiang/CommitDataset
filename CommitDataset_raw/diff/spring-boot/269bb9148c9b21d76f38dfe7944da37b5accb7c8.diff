[+++ b/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +	private final Set<ClientHttpRequestInterceptor> interceptors;, +, +		this.interceptors = Collections.<ClientHttpRequestInterceptor>emptySet();, +			Set<RequestFactoryCustomizer> requestFactoryCustomizers,, +			Set<ClientHttpRequestInterceptor> interceptors) {, +		this.interceptors = interceptors;, +				this.requestFactoryCustomizers, this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +	 * the {@link RestTemplate}. Setting this value will replace any previously configured, +	 * converters., +	 * the {@link RestTemplate}. Setting this value will replace any previously configured, +	 * converters., +				this.requestFactoryCustomizers, this.interceptors);, +				this.restTemplateCustomizers, this.requestFactoryCustomizers,, +				this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +	}, +, +	/**, +	 * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that, +	 * should be used with the {@link RestTemplate}. Setting this value will replace any, +	 * previously defined interceptors., +	 * @param interceptors the interceptors to set, +	 * @return a new builder instance, +	 * @see #additionalInterceptors(ClientHttpRequestInterceptor...), +	 * @since 1.4.1, +	 */, +	public RestTemplateBuilder interceptors(, +			ClientHttpRequestInterceptor... interceptors) {, +		Assert.notNull(interceptors, "interceptors must not be null");, +		return interceptors(Arrays.asList(interceptors));, +	}, +, +	/**, +	 * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that, +	 * should be used with the {@link RestTemplate}. Setting this value will replace any, +	 * previously defined interceptors., +	 * @param interceptors the interceptors to set, +	 * @return a new builder instance, +	 * @see #additionalInterceptors(ClientHttpRequestInterceptor...), +	 * @since 1.4.1, +	 */, +	public RestTemplateBuilder interceptors(, +			Collection<ClientHttpRequestInterceptor> interceptors) {, +		Assert.notNull(interceptors, "interceptors must not be null");, +		return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,, +				this.messageConverters, this.requestFactory, this.uriTemplateHandler,, +				this.errorHandler, this.basicAuthorization, this.restTemplateCustomizers,, +				this.requestFactoryCustomizers, Collections.unmodifiableSet(, +						new LinkedHashSet<ClientHttpRequestInterceptor>(interceptors)));, +	}, +, +	/**, +	 * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}, +	 * that should be used with the {@link RestTemplate}., +	 * @param interceptors the interceptors to add, +	 * @return a new builder instance, +	 * @see #interceptors(ClientHttpRequestInterceptor...), +	 * @since 1.4.1, +	 */, +	public RestTemplateBuilder additionalInterceptors(, +			ClientHttpRequestInterceptor... interceptors) {, +		Assert.notNull(interceptors, "interceptors must not be null");, +		return additionalInterceptors(Arrays.asList(interceptors));, +	}, +, +	/**, +	 * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}, +	 * that should be used with the {@link RestTemplate}., +	 * @param interceptors the interceptors to add, +	 * @return a new builder instance, +	 * @see #interceptors(ClientHttpRequestInterceptor...), +	 * @since 1.4.1, +	 */, +	public RestTemplateBuilder additionalInterceptors(, +			Collection<? extends ClientHttpRequestInterceptor> interceptors) {, +		Assert.notNull(interceptors, "interceptors must not be null");, +		return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,, +				this.messageConverters, this.requestFactory, this.uriTemplateHandler,, +				this.errorHandler, this.basicAuthorization, this.restTemplateCustomizers,, +				this.requestFactoryCustomizers, append(this.interceptors, interceptors));, +				this.requestFactoryCustomizers, this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +				this.restTemplateCustomizers, this.requestFactoryCustomizers,, +				this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +				this.requestFactoryCustomizers, this.interceptors);, +						new ConnectTimeoutRequestFactoryCustomizer(connectTimeout)),, +				this.interceptors);, +						new ReadTimeoutRequestFactoryCustomizer(readTimeout)),, +				this.interceptors);, +		restTemplate.getInterceptors().addAll(this.interceptors);, +++ b/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +	private final Set<ClientHttpRequestInterceptor> interceptors;, +, +		this.interceptors = Collections.<ClientHttpRequestInterceptor>emptySet();]