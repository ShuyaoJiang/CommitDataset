[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			result.add(, +					new PropertySourceEntryDescriptor(entry.getKey(), entry.getValue()));, +		getPropertySourcesAsMap(), +				.forEach((sourceName, source) -> propertySources.put(sourceName,, +						source.containsProperty(propertyName), +								? describeValueOf(propertyName, source, resolver), +								: null));, +	private PropertyValueDescriptor describeValueOf(String name, PropertySource<?> source,, +			PlaceholdersResolver resolver) {, +		return new PropertySourcesPlaceholdersSanitizingResolver(getPropertySources(),, +				this.sanitizer);, +		PropertySourcesPlaceholdersSanitizingResolver(Iterable<PropertySource<?>> sources,, +				Sanitizer sanitizer) {, +			super(sources,, +					new PropertyPlaceholderHelper(SystemPropertyUtils.PLACEHOLDER_PREFIX,, +			return (value != null ? (String) this.sanitizer.sanitize(placeholder, value), +					: null);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			result.add(, +					new PropertySourceEntryDescriptor(entry.getKey(), entry.getValue()));, +		getPropertySourcesAsMap(), +				.forEach((sourceName, source) -> propertySources.put(sourceName,, +						source.containsProperty(propertyName), +								? describeValueOf(propertyName, source, resolver), +								: null));, +	private PropertyValueDescriptor describeValueOf(String name, PropertySource<?> source,, +			PlaceholdersResolver resolver) {, +		return new PropertySourcesPlaceholdersSanitizingResolver(getPropertySources(),, +				this.sanitizer);, +		PropertySourcesPlaceholdersSanitizingResolver(Iterable<PropertySource<?>> sources,, +				Sanitizer sanitizer) {, +			super(sources,, +					new PropertyPlaceholderHelper(SystemPropertyUtils.PLACEHOLDER_PREFIX,, +			return (value != null ? (String) this.sanitizer.sanitize(placeholder, value), +					: null);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java, +		environment.getPropertySources(), +				.addLast(singleKeyPropertySource("one", "my.key", "first"));, +		environment.getPropertySources(), +				.addLast(singleKeyPropertySource("two", "my.key", "second"));, +		TestPropertyValues, +				.of("dbPassword=123456", "apiKey=123456", "mySecret=123456",, +						"myCredentials=123456", "VCAP_SERVICES=123456"), +				.applyToSystemProperties(() -> {, +					assertThat(systemProperties.get("dbPassword").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties.get("apiKey").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties.get("mySecret").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties.get("myCredentials").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties.get("VCAP_SERVICES").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties, +							.get("my.services.amqp-free.credentials.uri").getValue()), +							systemProperties.get("credentials.http_api_uri").getValue()), +									.isEqualTo("******");, +					assertThat(systemProperties, +							.get("my.services.cleardb-free.credentials").getValue()), +		TestPropertyValues.of("dbPassword=123456", "apiKey=123456"), +				.applyToSystemProperties(() -> {, +					EnvironmentEndpoint endpoint = new EnvironmentEndpoint(, +							new StandardEnvironment());, +					assertThat(systemProperties.get("dbPassword").getValue()), +							.isEqualTo("123456");, +					assertThat(systemProperties.get("apiKey").getValue()), +							.isEqualTo("******");, +		TestPropertyValues.of("dbPassword=123456", "apiKey=123456"), +				.applyToSystemProperties(() -> {, +					EnvironmentEndpoint endpoint = new EnvironmentEndpoint(, +							new StandardEnvironment());, +					assertThat(systemProperties.get("dbPassword").getValue()), +							.isEqualTo("******");, +					assertThat(systemProperties.get("apiKey").getValue()), +							.isEqualTo("123456");, +			Map<String, PropertySourceEntryDescriptor> sources = propertySources(, +					descriptor);, +			assertThat(sources.keySet()).containsExactly("test", "systemProperties",, +					"systemEnvironment");, +			assertPropertySourceEntryDescriptor(sources.get("systemProperties"),, +					"another", null);, +			assertPropertySourceEntryDescriptor(sources.get("systemEnvironment"), null,, +					null);, +		environment.getPropertySources(), +				.addFirst(singleKeyPropertySource("test", "foo", "bar"));, +		assertThat(sources.keySet()).containsExactly("test");, +		environment.getPropertySources(), +				.remove(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);, +		environment.getPropertySources(), +				.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);, +	private MapPropertySource singleKeyPropertySource(String name, String key,, +			Object value) {, +		descriptor.getPropertySources().forEach((d) -> sources.put(d.getName(), d));, +		descriptor.getPropertySources().forEach((d) -> sources.put(d.getName(), d));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			result.add(, +					new PropertySourceEntryDescriptor(entry.getKey(), entry.getValue()));, +		getPropertySourcesAsMap()]