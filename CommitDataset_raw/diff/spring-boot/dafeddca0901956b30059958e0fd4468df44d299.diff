[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigurationReport;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigurationReport;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint.Report;, +import org.springframework.boot.autoconfigure.AutoConfigurationReport;, +import org.springframework.boot.autoconfigure.AutoConfigurationReport.ConditionAndOutcome;, +import org.springframework.boot.autoconfigure.AutoConfigurationReport.ConditionAndOutcomes;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.context.annotation.Condition;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +import com.fasterxml.jackson.annotation.JsonPropertyOrder;, + * {@link Endpoint} to expose the {@link AutoConfigurationReport}., + * @author Phillip Webb, +public class AutoConfigurationReportEndpoint extends AbstractEndpoint<Report> {, +		super("/autoconfigurationreport");, +	public Report invoke() {, +		return new Report(this.autoConfigurationReport);, +	/**, +	 * Adapts {@link AutoConfigurationReport} to a JSON friendly structure., +	 */, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches" }), +	public static class Report {, +, +		private MultiValueMap<String, MessageAndCondition> positiveMatches;, +, +		private MultiValueMap<String, MessageAndCondition> negativeMatches;, +, +		public Report(AutoConfigurationReport report) {, +			this.positiveMatches = new LinkedMultiValueMap<String, MessageAndCondition>();, +			this.negativeMatches = new LinkedMultiValueMap<String, MessageAndCondition>();, +			for (Map.Entry<String, ConditionAndOutcomes> entry : report, +					.getConditionAndOutcomesBySource().entrySet()) {, +				dunno(entry.getValue().isFullMatch() ? this.positiveMatches, +						: this.negativeMatches, entry.getKey(), entry.getValue());, +, +			}, +, +		}, +, +		private void dunno(MultiValueMap<String, MessageAndCondition> map, String source,, +				ConditionAndOutcomes conditionAndOutcomes) {, +			String name = ClassUtils.getShortName(source);, +			for (ConditionAndOutcome conditionAndOutcome : conditionAndOutcomes) {, +				map.add(name, new MessageAndCondition(conditionAndOutcome));, +			}, +		}, +, +		public Map<String, List<MessageAndCondition>> getPositiveMatches() {, +			return this.positiveMatches;, +		}, +, +		public Map<String, List<MessageAndCondition>> getNegativeMatches() {, +			return this.negativeMatches;, +		}, +, +	}, +, +	/**, +	 * Adapts {@link ConditionAndOutcome} to a JSON friendly structure., +	 */, +	@JsonPropertyOrder({ "condition", "message" }), +	public static class MessageAndCondition {, +, +		private final String condition;, +, +		private final String message;, +, +		public MessageAndCondition(ConditionAndOutcome conditionAndOutcome) {, +			Condition condition = conditionAndOutcome.getCondition();, +			ConditionOutcome outcome = conditionAndOutcome.getOutcome();, +			this.condition = ClassUtils.getShortName(condition.getClass());, +			if (StringUtils.hasLength(outcome.getMessage())) {, +				this.message = outcome.getMessage();, +			}, +			else {, +				this.message = (outcome.isMatch() ? "matched" : "did not match");, +			}, +		}, +, +		public String getCondition() {, +			return this.condition;, +		}, +, +		public String getMessage() {, +			return this.message;, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java]