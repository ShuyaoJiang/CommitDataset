[+++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java, + * Copyright 2012-2018 the original author or authors., +	private final File exploded = new File("target/ide application");, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java, + * Copyright 2012-2018 the original author or authors., +	private final File exploded = new File("target/ide application");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.io.UnsupportedEncodingException;, +				if (isStaticResourceJar(url)) {, +	private boolean isStaticResourceJar(URL url) {, +				File file = new File(getDecodedFile(url), "UTF-8");, +				return (file.isDirectory(), +						&& new File(file, "META-INF/resources").isDirectory()), +						|| isResourcesJar(file);, +				if (connection instanceof JarURLConnection, +						&& isResourcesJar((JarURLConnection) connection)) {, +	protected final String getDecodedFile(URL url) {, +		try {, +			return URLDecoder.decode(url.getFile(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(, +					"Failed to decode '" + url.getFile() + "' using UTF-8");, +		}, +	}, +, +			this.logger.warn("Unable to open jar from connection '" + connection, +					+ "' to determine if it contains static resources", ex);, +			this.logger.warn("Unable to open jar '" + file, +					+ "' to determine if it contains static resources", ex);, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java, + * Copyright 2012-2018 the original author or authors., +	private final File exploded = new File("target/ide application");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.io.UnsupportedEncodingException;, +				if (isStaticResourceJar(url)) {, +	private boolean isStaticResourceJar(URL url) {, +				File file = new File(getDecodedFile(url), "UTF-8");, +				return (file.isDirectory(), +						&& new File(file, "META-INF/resources").isDirectory()), +						|| isResourcesJar(file);, +				if (connection instanceof JarURLConnection, +						&& isResourcesJar((JarURLConnection) connection)) {, +	protected final String getDecodedFile(URL url) {, +		try {, +			return URLDecoder.decode(url.getFile(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(, +					"Failed to decode '" + url.getFile() + "' using UTF-8");, +		}, +	}, +, +			this.logger.warn("Unable to open jar from connection '" + connection, +					+ "' to determine if it contains static resources", ex);, +			this.logger.warn("Unable to open jar '" + file, +					+ "' to determine if it contains static resources", ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +			File file = new File(getDecodedFile(url));, +++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java, + * Copyright 2012-2018 the original author or authors., +	private final File exploded = new File("target/ide application");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.io.UnsupportedEncodingException;, +				if (isStaticResourceJar(url)) {, +	private boolean isStaticResourceJar(URL url) {, +				File file = new File(getDecodedFile(url), "UTF-8");, +				return (file.isDirectory(), +						&& new File(file, "META-INF/resources").isDirectory()), +						|| isResourcesJar(file);, +				if (connection instanceof JarURLConnection, +						&& isResourcesJar((JarURLConnection) connection)) {, +	protected final String getDecodedFile(URL url) {, +		try {, +			return URLDecoder.decode(url.getFile(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(, +					"Failed to decode '" + url.getFile() + "' using UTF-8");, +		}, +	}, +, +			this.logger.warn("Unable to open jar from connection '" + connection, +					+ "' to determine if it contains static resources", ex);, +			this.logger.warn("Unable to open jar '" + file, +					+ "' to determine if it contains static resources", ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +			File file = new File(getDecodedFile(url));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatResources.java, + * Copyright 2012-2018 the original author or authors., +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +			String file = getDecodedFile(url);, +	private String getDecodedFile(URL url) {, +		try {, +			return URLDecoder.decode(url.getFile(), "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(, +					"Failed to decode '" + url.getFile() + "' using UTF-8");]