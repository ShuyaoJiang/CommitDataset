[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			if (!registry.hasMappingForPattern("/webjars/**")) {, +			}, +			if (!registry.hasMappingForPattern("/**")) {, +				registry.addResourceHandler("/**").addResourceLocations(, +						RESOURCE_LOCATIONS);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			if (!registry.hasMappingForPattern("/webjars/**")) {, +			}, +			if (!registry.hasMappingForPattern("/**")) {, +				registry.addResourceHandler("/**").addResourceLocations(, +						RESOURCE_LOCATIONS);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;, +import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;, +		Map<String, List<Resource>> mappingLocations = getMappingLocations();, +		assertThat(mappingLocations.get("/**").size(), equalTo(5));, +		assertThat(mappingLocations.get("/webjars/**").size(), equalTo(1));, +		assertThat(mappingLocations.get("/webjars/**").get(0),, +				equalTo((Resource) new ClassPathResource("/META-INF/resources/webjars/")));, +	}, +, +	@Test, +	public void resourceHandlerMappingOverrideWebjars() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(WebJars.class, Config.class, WebMvcAutoConfiguration.class);, +		this.context.refresh();, +		Map<String, List<Resource>> mappingLocations = getMappingLocations();, +		assertThat(mappingLocations.get("/webjars/**").size(), equalTo(1));, +		assertThat(mappingLocations.get("/webjars/**").get(0),, +				equalTo((Resource) new ClassPathResource("/foo/")));, +	}, +, +	@Test, +	public void resourceHandlerMappingOverrideAll() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class);, +		this.context.refresh();, +		Map<String, List<Resource>> mappingLocations = getMappingLocations();, +		assertThat(mappingLocations.get("/**").size(), equalTo(1));, +		assertThat(mappingLocations.get("/**").get(0),, +				equalTo((Resource) new ClassPathResource("/foo/")));, +	}, +, +	@SuppressWarnings("unchecked"), +	protected Map<String, List<Resource>> getMappingLocations(), +			throws IllegalAccessException {, +		return mappingLocations;, +	protected static class WebJars extends WebMvcConfigurerAdapter {, +, +		@Override, +		public void addResourceHandlers(ResourceHandlerRegistry registry) {, +			registry.addResourceHandler("/webjars/**").addResourceLocations(, +					"classpath:/foo/");, +		}, +, +	}, +, +	@Configuration, +	protected static class AllResources extends WebMvcConfigurerAdapter {, +, +		@Override, +		public void addResourceHandlers(ResourceHandlerRegistry registry) {, +			registry.addResourceHandler("/**").addResourceLocations("classpath:/foo/");, +		}, +, +	}, +, +	@Configuration]