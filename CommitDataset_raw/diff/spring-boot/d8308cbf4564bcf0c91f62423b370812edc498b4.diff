[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java, +		if(System.console() != null) {, +			// Record that the console is available here for AnsiOutput to detect later, +			this.getEnvironment().put("spring.output.ansi.console-available", true);, +		}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java, +		if(System.console() != null) {, +			// Record that the console is available here for AnsiOutput to detect later, +			this.getEnvironment().put("spring.output.ansi.console-available", true);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java, + * Copyright 2012-2015 the original author or authors., +	private static Boolean consoleAvailable;, +, +	/**, +	 * Sets if the System.console() is know to be available., +	 * @param consoleAvailable if the console is known to be available or {@code null} to, +	 * use standard detection logic., +	 */, +	public static void setConsoleAvailable(Boolean consoleAvailable) {, +		AnsiOutput.consoleAvailable = consoleAvailable;, +	}, +, +			if (Boolean.FALSE.equals(consoleAvailable)) {, +				return false;, +			}, +			if ((consoleAvailable == null) && (System.console() == null)) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java, +		if(System.console() != null) {, +			// Record that the console is available here for AnsiOutput to detect later, +			this.getEnvironment().put("spring.output.ansi.console-available", true);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java, + * Copyright 2012-2015 the original author or authors., +	private static Boolean consoleAvailable;, +, +	/**, +	 * Sets if the System.console() is know to be available., +	 * @param consoleAvailable if the console is known to be available or {@code null} to, +	 * use standard detection logic., +	 */, +	public static void setConsoleAvailable(Boolean consoleAvailable) {, +		AnsiOutput.consoleAvailable = consoleAvailable;, +	}, +, +			if (Boolean.FALSE.equals(consoleAvailable)) {, +				return false;, +			}, +			if ((consoleAvailable == null) && (System.console() == null)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, + * Copyright 2012-2015 the original author or authors., +, +		if (resolver.containsProperty("console-available")) {, +			AnsiOutput.setConsoleAvailable(resolver.getProperty("console-available",, +					Boolean.class));, +		}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java, +		if(System.console() != null) {, +			// Record that the console is available here for AnsiOutput to detect later, +			this.getEnvironment().put("spring.output.ansi.console-available", true);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java, + * Copyright 2012-2015 the original author or authors., +	private static Boolean consoleAvailable;, +, +	/**, +	 * Sets if the System.console() is know to be available., +	 * @param consoleAvailable if the console is known to be available or {@code null} to, +	 * use standard detection logic., +	 */, +	public static void setConsoleAvailable(Boolean consoleAvailable) {, +		AnsiOutput.consoleAvailable = consoleAvailable;, +	}, +, +			if (Boolean.FALSE.equals(consoleAvailable)) {, +				return false;, +			}, +			if ((consoleAvailable == null) && (System.console() == null)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, + * Copyright 2012-2015 the original author or authors., +, +		if (resolver.containsProperty("console-available")) {, +			AnsiOutput.setConsoleAvailable(resolver.getProperty("console-available",, +					Boolean.class));, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/config/AnsiOutputApplicationListenerTests.java, + * Copyright 2012-2015 the original author or authors., +	public void disabledViaApplicationProperties() throws Exception {]