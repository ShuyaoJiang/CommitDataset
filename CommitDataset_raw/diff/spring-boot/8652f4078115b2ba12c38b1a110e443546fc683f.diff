[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		if (this.properties.getSchedulerName() != null) {, +			schedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		if (this.properties.getSchedulerName() != null) {, +			schedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	private String schedulerName;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		if (this.properties.getSchedulerName() != null) {, +			schedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	private String schedulerName;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.quartz.scheduler-name",, +      "type": "java.lang.String",, +      "defaultValue": "quartzScheduler", +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java, +		if (this.properties.getSchedulerName() != null) {, +			schedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzProperties.java, +	private String schedulerName;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name": "spring.quartz.scheduler-name",, +      "type": "java.lang.String",, +      "defaultValue": "quartzScheduler", +    },, +    {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues("spring.quartz.auto-startup=false",, +				"spring.quartz.startup-delay=1m",, +	@Test, +	public void schedulerNameWithDedicatedProperty() {, +		this.contextRunner, +				.withPropertyValues("spring.quartz.scheduler-name=testScheduler"), +				.run(assertSchedulerName("testScheduler"));, +	}, +, +	@Test, +	public void schedulerNameWithQuartzProperty() {, +		this.contextRunner.withPropertyValues(, +				"spring.quartz.properties.org.quartz.scheduler.instanceName=testScheduler"), +				.run(assertSchedulerName("testScheduler"));, +	}, +, +	@Test, +	public void schedulerNameWithDedicatedPropertyTakesPrecedence() {, +		this.contextRunner.withPropertyValues(, +				"spring.quartz.scheduler-name=specificTestScheduler",, +				"spring.quartz.properties.org.quartz.scheduler.instanceName=testScheduler"), +				.run(assertSchedulerName("specificTestScheduler"));, +	}, +, +	@Test, +	public void schedulerNameUseBeanNameByDefault() {, +		this.contextRunner.withPropertyValues(), +				.run(assertSchedulerName("quartzScheduler"));, +	}, +, +	private ContextConsumer<AssertableApplicationContext> assertSchedulerName(, +			String schedulerName) {, +		return (context) -> {, +			assertThat(context).hasSingleBean(SchedulerFactoryBean.class);, +			SchedulerFactoryBean schedulerFactory = context, +					.getBean(SchedulerFactoryBean.class);, +			DirectFieldAccessor dfa = new DirectFieldAccessor(schedulerFactory);, +			assertThat(dfa.getPropertyValue("schedulerName")).isEqualTo(schedulerName);, +		};, +	}, +]