[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, +		return () -> new JmxMeterRegistry(config, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, +		return () -> new JmxMeterRegistry(config, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, +		return () -> new JmxMeterRegistry(config, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java, +						.get("jvm.memory.used").tags("region", "us-east-1").gauge()), +								.isNotNull());, +						.get("my.thing").tags("region", "us-east-1").gauge()), +								.isNotNull());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, +		return () -> new JmxMeterRegistry(config, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java, +						.get("jvm.memory.used").tags("region", "us-east-1").gauge()), +								.isNotNull());, +						.get("my.thing").tags("region", "us-east-1").gauge()), +								.isNotNull());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java, +		assertThat(this.registry.get("http.client.requests").timer().count()), +				.isEqualTo(1);, +		assertThat(this.registry.get("http.server.requests").timer().count()), +				.isEqualTo(1);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getConnectionFactoryName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/ganglia/GangliaExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GangliaMeterRegistry(gangliaConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteExportConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		return () -> new GraphiteMeterRegistry(graphiteConfig, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/jmx/JmxExportConfiguration.java, +		return () -> new JmxMeterRegistry(config, clock, nameMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsConfiguration.java, +		Iterable<Tag> tags = Tags.zip("name", getDataSourceName(beanName));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurerTests.java, +						.get("jvm.memory.used").tags("region", "us-east-1").gauge()), +								.isNotNull());, +						.get("my.thing").tags("region", "us-east-1").gauge()), +								.isNotNull());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java, +		assertThat(this.registry.get("http.client.requests").timer().count()), +				.isEqualTo(1);, +		assertThat(this.registry.get("http.server.requests").timer().count()), +				.isEqualTo(1);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationTests.java, +					registry.get("data.source.max.connections").tags("name", "dataSource")]