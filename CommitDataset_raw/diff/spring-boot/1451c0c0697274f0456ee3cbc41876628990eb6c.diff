[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.test.util.ReflectionTestUtils;, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(2048);, +	}, +, +	@Test, +	public void customMaxHttpHeaderSizeIgnoredIfNegative() {, +		bind("server.max-http-header-size=-1");, +		JettyWebServer server = customizeAndGetServer();, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(8192);, +	}, +, +	@Test, +	public void customMaxHttpHeaderSizeIgnoredIfZero() {, +		bind("server.max-http-header-size=0");, +		JettyWebServer server = customizeAndGetServer();, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(8192);, +	}, +, +	private List<Integer> getRequestHeaderSizes(JettyWebServer server) {, +		List<Integer> requestHeaderSizes = new ArrayList<>();, +		Connector[] connectors = (Connector[]) ReflectionTestUtils.getField(server,, +				"connectors");, +		for (Connector connector : connectors) {, +						requestHeaderSizes.add(configuration.getRequestHeaderSize());, +		return requestHeaderSizes;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java, +				.asInt(DataSize::toBytes).when(this::isPositive), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.test.util.ReflectionTestUtils;, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(2048);, +	}, +, +	@Test, +	public void customMaxHttpHeaderSizeIgnoredIfNegative() {, +		bind("server.max-http-header-size=-1");, +		JettyWebServer server = customizeAndGetServer();, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(8192);, +	}, +, +	@Test, +	public void customMaxHttpHeaderSizeIgnoredIfZero() {, +		bind("server.max-http-header-size=0");, +		JettyWebServer server = customizeAndGetServer();, +		List<Integer> requestHeaderSizes = getRequestHeaderSizes(server);, +		assertThat(requestHeaderSizes).containsOnly(8192);, +	}, +, +	private List<Integer> getRequestHeaderSizes(JettyWebServer server) {, +		List<Integer> requestHeaderSizes = new ArrayList<>();, +		Connector[] connectors = (Connector[]) ReflectionTestUtils.getField(server,, +				"connectors");, +		for (Connector connector : connectors) {, +						requestHeaderSizes.add(configuration.getRequestHeaderSize());, +		return requestHeaderSizes;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java, +import java.util.Arrays;, +import io.undertow.Undertow;, +import io.undertow.Undertow.Builder;, +import io.undertow.UndertowOptions;, +import org.xnio.OptionMap;, +import org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer;, +import org.springframework.test.util.ReflectionTestUtils;, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.BDDMockito.willAnswer;, +	@Test, +	public void customizeMaxHttpHeaderSize() {, +		bind("server.max-http-header-size=2048");, +		Builder builder = Undertow.builder();, +		ConfigurableUndertowWebServerFactory factory = mockFactory(builder);, +		this.customizer.customize(factory);, +		OptionMap map = ((OptionMap.Builder) ReflectionTestUtils.getField(builder,, +				"serverOptions")).getMap();, +		assertThat(map.get(UndertowOptions.MAX_HEADER_SIZE).intValue()).isEqualTo(2048);, +	}, +, +	@Test, +	public void customMaxHttpHeaderSizeIgnoredIfNegative() {]