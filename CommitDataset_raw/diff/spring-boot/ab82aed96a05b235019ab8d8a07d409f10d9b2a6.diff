[+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +import java.util.Set;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.converter.GenericConverter;, +import org.springframework.lang.Nullable;, +import org.springframework.util.StringUtils;, +import static org.hamcrest.Matchers.instanceOf;, +	@Test, +	public void converterIsFound() {, +		prepareConverterContext(ConverterConfiguration.class, PersonProperty.class);, +		this.context.refresh();, +		Person person = this.context.getBean(PersonProperty.class).getPerson();, +		assertThat(person.firstName).isEqualTo("John");, +		assertThat(person.lastName).isEqualTo("Smith");, +	}, +, +	@Test, +	public void converterWithoutQualifierIsNotInvoked() {, +		prepareConverterContext(NonQualifiedConverterConfiguration.class,, +				PersonProperty.class);, +		this.thrown.expect(BeanCreationException.class);, +		this.thrown.expectCause(instanceOf(BindException.class));, +		this.context.refresh();, +	}, +, +	@Test, +	public void genericConverterIsFound() {, +		prepareConverterContext(GenericConverterConfiguration.class, PersonProperty.class);, +		this.context.refresh();, +		Person person = this.context.getBean(PersonProperty.class).getPerson();, +		assertThat(person.firstName).isEqualTo("John");, +		assertThat(person.lastName).isEqualTo("Smith");, +	}, +, +	@Test, +	public void genericConverterWithoutQualifierIsNotInvoked() {, +		prepareConverterContext(NonQualifiedGenericConverterConfiguration.class,, +				PersonProperty.class);, +		this.thrown.expect(BeanCreationException.class);, +		this.thrown.expectCause(instanceOf(BindException.class));, +		this.context.refresh();, +	}, +, +	private void prepareConverterContext(Class<?>... config) {, +		this.context = new AnnotationConfigApplicationContext();, +		MutablePropertySources sources = this.context.getEnvironment(), +				.getPropertySources();, +		sources.addFirst(new MapPropertySource("test",, +				Collections.singletonMap("test.person", "John Smith")));, +		this.context.register(config);, +	}, +, +	@Configuration, +	static class ConverterConfiguration {, +, +		@Bean, +		@ConfigurationPropertiesBinding, +		public Converter<String, Person> personConverter() {, +			return new PersonConverter();, +		}, +, +	}, +, +	@Configuration, +	static class NonQualifiedConverterConfiguration {, +, +		@Bean, +		public Converter<String, Person> personConverter() {, +			return new PersonConverter();, +		}, +, +	}, +, +	private static class PersonConverter implements Converter<String, Person> {, +, +		@Nullable, +		@Override, +		public Person convert(String source) {, +			String[] content = StringUtils.split(source, " ");, +			return new Person(content[0], content[1]);, +		}, +	}, +, +	@Configuration, +	static class GenericConverterConfiguration {, +, +		@Bean, +		@ConfigurationPropertiesBinding, +		public GenericConverter genericPersonConverter() {, +			return new GenericPersonConverter();, +		}, +, +	}, +, +	@Configuration, +	static class NonQualifiedGenericConverterConfiguration {, +, +		@Bean, +		public GenericConverter genericPersonConverter() {]