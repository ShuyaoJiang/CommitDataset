[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder, +				.fromRequest(request);, +		String uriString = builder.build().toUriString();, +, +		return "redirect:" + uriString + (uriString.endsWith("/") ? "" : "/"), +				+ this.location.getHtmlFile();, +				return replaceInitialLink(request, resource);, +		private Resource replaceInitialLink(HttpServletRequest request, Resource resource), +			List<String> pathSegments = new ArrayList<String>(ServletUriComponentsBuilder, +					.fromRequest(request).build().getPathSegments());, +			pathSegments.remove(pathSegments.size() - 1);, +			String initial = "/", +					+ StringUtils.collectionToDelimitedString(pathSegments, "/");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder, +				.fromRequest(request);, +		String uriString = builder.build().toUriString();, +, +		return "redirect:" + uriString + (uriString.endsWith("/") ? "" : "/"), +				+ this.location.getHtmlFile();, +				return replaceInitialLink(request, resource);, +		private Resource replaceInitialLink(HttpServletRequest request, Resource resource), +			List<String> pathSegments = new ArrayList<String>(ServletUriComponentsBuilder, +					.fromRequest(request).build().getPathSegments());, +			pathSegments.remove(pathSegments.size() - 1);, +			String initial = "/", +					+ StringUtils.collectionToDelimitedString(pathSegments, "/");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointBrowserPathIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	public void requestWithTrailingSlashIsRedirectedToBrowserHtml() throws Exception {, +		this.mockMvc.perform(get("/actuator/").accept(MediaType.TEXT_HTML)), +				.andExpect(status().isFound()).andExpect(header().string(, +						HttpHeaders.LOCATION, "http://localhost/actuator/browser.html"));, +	public void requestWithoutTrailingSlashIsRedirectedToBrowserHtml() throws Exception {, +				.andExpect(status().isFound()).andExpect(header().string("location",, +						"http://localhost/actuator/browser.html"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder, +				.fromRequest(request);, +		String uriString = builder.build().toUriString();, +, +		return "redirect:" + uriString + (uriString.endsWith("/") ? "" : "/"), +				+ this.location.getHtmlFile();, +				return replaceInitialLink(request, resource);, +		private Resource replaceInitialLink(HttpServletRequest request, Resource resource), +			List<String> pathSegments = new ArrayList<String>(ServletUriComponentsBuilder, +					.fromRequest(request).build().getPathSegments());, +			pathSegments.remove(pathSegments.size() - 1);, +			String initial = "/", +					+ StringUtils.collectionToDelimitedString(pathSegments, "/");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointBrowserPathIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	public void requestWithTrailingSlashIsRedirectedToBrowserHtml() throws Exception {, +		this.mockMvc.perform(get("/actuator/").accept(MediaType.TEXT_HTML)), +				.andExpect(status().isFound()).andExpect(header().string(, +						HttpHeaders.LOCATION, "http://localhost/actuator/browser.html"));, +	public void requestWithoutTrailingSlashIsRedirectedToBrowserHtml() throws Exception {, +				.andExpect(status().isFound()).andExpect(header().string("location",, +						"http://localhost/actuator/browser.html"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointDisabledIntegrationTests.java, +import com.google.common.net.HttpHeaders;, +	public void browserRedirect() throws Exception {, +		this.mockMvc.perform(get("/actuator/").accept(MediaType.TEXT_HTML)), +				.andExpect(status().isFound()).andExpect(header().string(, +						HttpHeaders.LOCATION, "http://localhost/actuator/browser.html"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder, +				.fromRequest(request);, +		String uriString = builder.build().toUriString();, +, +		return "redirect:" + uriString + (uriString.endsWith("/") ? "" : "/"), +				+ this.location.getHtmlFile();, +				return replaceInitialLink(request, resource);, +		private Resource replaceInitialLink(HttpServletRequest request, Resource resource), +			List<String> pathSegments = new ArrayList<String>(ServletUriComponentsBuilder, +					.fromRequest(request).build().getPathSegments());, +			pathSegments.remove(pathSegments.size() - 1);, +			String initial = "/", +					+ StringUtils.collectionToDelimitedString(pathSegments, "/");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointBrowserPathIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	public void requestWithTrailingSlashIsRedirectedToBrowserHtml() throws Exception {, +		this.mockMvc.perform(get("/actuator/").accept(MediaType.TEXT_HTML))]