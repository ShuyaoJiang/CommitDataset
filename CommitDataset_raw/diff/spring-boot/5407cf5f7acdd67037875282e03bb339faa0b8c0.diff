[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2016 the original author or authors., +				ItemMetadata group = ItemMetadata.newGroup(prefix, this.typeUtils.getType(returns),, +						element.toString());, +				if (this.metadataCollector.hasSimilarGroup(group)) {, +					this.processingEnv.getMessager().printMessage(Kind.ERROR,, +							"Duplicate `@ConfigurationProperties` definition for prefix '" + prefix + "'", element);, +				}, +				else {, +					this.metadataCollector.add(group);, +	}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2016 the original author or authors., +				ItemMetadata group = ItemMetadata.newGroup(prefix, this.typeUtils.getType(returns),, +						element.toString());, +				if (this.metadataCollector.hasSimilarGroup(group)) {, +					this.processingEnv.getMessager().printMessage(Kind.ERROR,, +							"Duplicate `@ConfigurationProperties` definition for prefix '" + prefix + "'", element);, +				}, +				else {, +					this.metadataCollector.add(group);, +	}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataCollector.java, + * Copyright 2012-2016 the original author or authors., +	public boolean hasSimilarGroup(ItemMetadata metadata) {, +		if (!metadata.isOfItemType(ItemMetadata.ItemType.GROUP)) {, +			throw new IllegalStateException("item " + metadata + " must be a group");, +		}, +		for (ItemMetadata existing : this.metadataItems) {, +			if (existing.isOfItemType(ItemMetadata.ItemType.GROUP), +					&& existing.getName().equals(metadata.getName()), +					&& existing.getType().equals(metadata.getType())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2016 the original author or authors., +				ItemMetadata group = ItemMetadata.newGroup(prefix, this.typeUtils.getType(returns),, +						element.toString());, +				if (this.metadataCollector.hasSimilarGroup(group)) {, +					this.processingEnv.getMessager().printMessage(Kind.ERROR,, +							"Duplicate `@ConfigurationProperties` definition for prefix '" + prefix + "'", element);, +				}, +				else {, +					this.metadataCollector.add(group);, +	}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataCollector.java, + * Copyright 2012-2016 the original author or authors., +	public boolean hasSimilarGroup(ItemMetadata metadata) {, +		if (!metadata.isOfItemType(ItemMetadata.ItemType.GROUP)) {, +			throw new IllegalStateException("item " + metadata + " must be a group");, +		}, +		for (ItemMetadata existing : this.metadataItems) {, +			if (existing.isOfItemType(ItemMetadata.ItemType.GROUP), +					&& existing.getName().equals(metadata.getName()), +					&& existing.getType().equals(metadata.getType())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.specific.DoubleRegistrationProperties;, +import org.springframework.boot.configurationsample.specific.InvalidDoubleRegistrationProperties;, +	public void doubleRegistration() throws IOException {, +		ConfigurationMetadata metadata = compile(DoubleRegistrationProperties.class);, +		assertThat(metadata).has(Metadata.withGroup("one"));, +		assertThat(metadata).has(Metadata.withGroup("two"));, +		assertThat(metadata).has(Metadata.withProperty("one.value"));, +		assertThat(metadata).has(Metadata.withProperty("two.value"));, +		assertThat(metadata.getItems()).hasSize(4);, +	}, +, +	@Test, +	public void invalidDoubleRegistration() throws IOException {, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage("Compilation failed");, +		compile(InvalidDoubleRegistrationProperties.class);, +	}, +, +	@Test, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, + * Copyright 2012-2016 the original author or authors., +				ItemMetadata group = ItemMetadata.newGroup(prefix, this.typeUtils.getType(returns),, +						element.toString());, +				if (this.metadataCollector.hasSimilarGroup(group)) {, +					this.processingEnv.getMessager().printMessage(Kind.ERROR,, +							"Duplicate `@ConfigurationProperties` definition for prefix '" + prefix + "'", element);, +				}, +				else {, +					this.metadataCollector.add(group);, +	}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataCollector.java, + * Copyright 2012-2016 the original author or authors., +	public boolean hasSimilarGroup(ItemMetadata metadata) {, +		if (!metadata.isOfItemType(ItemMetadata.ItemType.GROUP)) {]