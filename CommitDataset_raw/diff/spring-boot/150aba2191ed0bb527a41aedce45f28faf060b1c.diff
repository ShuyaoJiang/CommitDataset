[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +import org.apache.catalina.Engine;, + * @author Christoffer Sawicki, +	private List<Valve> engineValves = new ArrayList<Valve>();, +, +		configureEngine(tomcat.getEngine());, +	private void configureEngine(Engine engine) {, +		engine.setBackgroundProcessorDelay(-1);, +		for (Valve valve : this.engineValves) {, +			engine.getPipeline().addValve(valve);, +		}, +	}, +, +	 * Set {@link Valve}s that should be applied to the Tomcat {@link Engine}. Calling, +	 * this method will replace any existing valves., +	 * @param engineValves the valves to set, +	 */, +	public void setEngineValves(Collection<? extends Valve> engineValves) {, +		Assert.notNull(engineValves, "Valves must not be null");, +		this.engineValves = new ArrayList<Valve>(engineValves);, +	}, +, +	/**, +	 * Returns a mutable collection of the {@link Valve}s that will be applied to the, +	 * Tomcat {@link Engine}., +	 * @return the engineValves the valves that will be applied, +	 */, +	public Collection<Valve> getEngineValves() {, +		return this.engineValves;, +	}, +, +	/**, +	 * Add {@link Valve}s that should be applied to the Tomcat {@link Engine}., +	 * @param engineValves the valves to add, +	 */, +	public void addEngineValves(Valve... engineValves) {, +		Assert.notNull(engineValves, "Valves must not be null");, +		this.engineValves.addAll(Arrays.asList(engineValves));, +	}, +, +	/**, +	 * this method will replace any existing valves., +	 * @deprecated as of 1.4 in favor of {@link #getContextValves()}, +	@Deprecated, +		return getContextValves();, +	}, +, +	/**, +	 * Returns a mutable collection of the {@link Valve}s that will be applied to the, +	 * Tomcat {@link Context}., +	 * @return the contextValves the valves that will be applied, +	 * @see #getEngineValves(), +	 */, +	public Collection<Valve> getContextValves() {]