[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java, + * Copyright 2012-2018 the original author or authors., +			return this.statusMapping.entrySet().stream(), +					.filter((entry) -> code.equals(getUniformValue(entry.getKey()))), +					.map(Map.Entry::getValue).findFirst(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java, + * Copyright 2012-2018 the original author or authors., +			return this.statusMapping.entrySet().stream(), +					.filter((entry) -> code.equals(getUniformValue(entry.getKey()))), +					.map(Map.Entry::getValue).findFirst(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +			this.sessions = sessions.values().stream().map(SessionDescriptor::new), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java, + * Copyright 2012-2018 the original author or authors., +			return this.statusMapping.entrySet().stream(), +					.filter((entry) -> code.equals(getUniformValue(entry.getKey()))), +					.map(Map.Entry::getValue).findFirst(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +			this.sessions = sessions.values().stream().map(SessionDescriptor::new), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +		assertThat(beans).isEmpty();, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java, + * Copyright 2012-2018 the original author or authors., +			return this.statusMapping.entrySet().stream(), +					.filter((entry) -> code.equals(getUniformValue(entry.getKey()))), +					.map(Map.Entry::getValue).findFirst(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +			this.sessions = sessions.values().stream().map(SessionDescriptor::new), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +		assertThat(beans).isEmpty();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +		for (BeanProperty beanProperty : bean.getProperties().values()) {, +			bound |= bind(beanSupplier, propertyBinder, beanProperty);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java, + * Copyright 2012-2018 the original author or authors., +			return this.statusMapping.entrySet().stream(), +					.filter((entry) -> code.equals(getUniformValue(entry.getKey()))), +					.map(Map.Entry::getValue).findFirst(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/session/SessionsEndpoint.java, +			this.sessions = sessions.values().stream().map(SessionDescriptor::new), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +		assertThat(beans).isEmpty();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java, +		for (BeanProperty beanProperty : bean.getProperties().values()) {, +			bound |= bind(beanSupplier, propertyBinder, beanProperty);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +		assertThat(result).containsExactly(entry("a", "b"), entry("c", "d"),]