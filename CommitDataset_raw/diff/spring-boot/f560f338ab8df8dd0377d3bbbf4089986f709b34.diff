[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedResource;, +import org.springframework.util.Assert;, +@ManagedResource, +	@ManagedAttribute(description = "Get log levels for all known loggers"), +	@ManagedOperation(description = "Get log level for a given logger"), +		Assert.notNull(logLevel, "LogLevel must not be null");, +		LogLevel level = LogLevel.valueOf(logLevel.toUpperCase());, +		getEndpoint().setLogLevel(loggerName, level);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedResource;, +import org.springframework.util.Assert;, +@ManagedResource, +	@ManagedAttribute(description = "Get log levels for all known loggers"), +	@ManagedOperation(description = "Get log level for a given logger"), +		Assert.notNull(logLevel, "LogLevel must not be null");, +		LogLevel level = LogLevel.valueOf(logLevel.toUpperCase());, +		getEndpoint().setLogLevel(loggerName, level);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java, +import javax.management.MBeanException;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.boot.actuate.endpoint.LoggersEndpoint;, +import org.springframework.boot.logging.logback.LogbackLoggingSystem;, +import static org.hamcrest.Matchers.containsString;, +import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;, + * @author Stephane Nicoll, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void loggerEndpointLowerCaseLogLevel() throws Exception {, +		MBeanExporter mbeanExporter = registerLoggersEndpoint();, +		Object response = mbeanExporter.getServer().invoke(, +				getObjectName("loggersEndpoint", this.context), "setLogLevel",, +				new Object[]{"com.example", "trace"},, +				new String[]{String.class.getName(), String.class.getName()});, +		assertThat(response).isNull();, +	}, +, +	@Test, +	public void loggerEndpointUnknownLogLevel() throws Exception {, +		MBeanExporter mbeanExporter = registerLoggersEndpoint();, +		this.thrown.expect(MBeanException.class);, +		this.thrown.expectCause(hasMessage(containsString("No enum constant")));, +		this.thrown.expectCause(hasMessage(containsString("LogLevel.INVALID")));, +		mbeanExporter.getServer().invoke(, +				getObjectName("loggersEndpoint", this.context), "setLogLevel",, +				new Object[]{"com.example", "invalid"},, +				new String[]{String.class.getName(), String.class.getName()});, +	}, +, +	private MBeanExporter registerLoggersEndpoint() {, +		this.context = new GenericApplicationContext();, +		this.context.registerBeanDefinition("endpointMbeanExporter",, +				new RootBeanDefinition(EndpointMBeanExporter.class));, +		RootBeanDefinition bd = new RootBeanDefinition(LoggersEndpoint.class);, +		ConstructorArgumentValues values = new ConstructorArgumentValues();, +		values.addIndexedArgumentValue(0,, +				new LogbackLoggingSystem(getClass().getClassLoader()));, +		bd.setConstructorArgumentValues(values);, +		this.context.registerBeanDefinition("loggersEndpoint", bd);, +		this.context.refresh();, +		return this.context.getBean(EndpointMBeanExporter.class);, +	}, +]