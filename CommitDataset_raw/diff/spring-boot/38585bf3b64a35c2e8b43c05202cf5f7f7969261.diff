[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.io.FileInputStream;, +import java.util.Arrays;, +	private static final byte[] ZIP_FILE_HEADER = new byte[] { 'P', 'K', 3, 4 };, +, +, +					if (isZipFile(file)) {, +						String destination = Repackager.this.layout, +								.getLibraryDestination(file.getName(), scope);, +				}, +, +				private boolean isZipFile(File file) {, +					byte[] buffer = new byte[4];, +					FileInputStream fis = null;, +					try {, +						fis = new FileInputStream(file);, +						int read = fis.read(buffer);, +, +						return (read == 4 && Arrays.equals(buffer, ZIP_FILE_HEADER));, +					}, +					catch (IOException ioe) {, +						return false;, +					}, +					finally {, +						if (fis != null) {, +							try {, +								fis.close();, +							}, +							catch (IOException ioe) {, +								// Close quietly, +							}, +						}, +					}, +				}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.io.FileInputStream;, +import java.util.Arrays;, +	private static final byte[] ZIP_FILE_HEADER = new byte[] { 'P', 'K', 3, 4 };, +, +, +					if (isZipFile(file)) {, +						String destination = Repackager.this.layout, +								.getLibraryDestination(file.getName(), scope);, +				}, +, +				private boolean isZipFile(File file) {, +					byte[] buffer = new byte[4];, +					FileInputStream fis = null;, +					try {, +						fis = new FileInputStream(file);, +						int read = fis.read(buffer);, +, +						return (read == 4 && Arrays.equals(buffer, ZIP_FILE_HEADER));, +					}, +					catch (IOException ioe) {, +						return false;, +					}, +					finally {, +						if (fis != null) {, +							try {, +								fis.close();, +							}, +							catch (IOException ioe) {, +								// Close quietly, +							}, +						}, +					}, +				}, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import org.springframework.util.FileCopyUtils;, +		final File libNonJarFile = this.temporaryFolder.newFile();, +		FileCopyUtils.copy(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8 }, libNonJarFile);, +				callback.library(libNonJarFile, LibraryScope.COMPILE);, +		assertThat(hasEntry(file, "lib/" + libNonJarFile.getName()), equalTo(false));, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.io.FileInputStream;, +import java.util.Arrays;, +	private static final byte[] ZIP_FILE_HEADER = new byte[] { 'P', 'K', 3, 4 };, +, +, +					if (isZipFile(file)) {, +						String destination = Repackager.this.layout, +								.getLibraryDestination(file.getName(), scope);, +				}, +, +				private boolean isZipFile(File file) {, +					byte[] buffer = new byte[4];, +					FileInputStream fis = null;, +					try {, +						fis = new FileInputStream(file);, +						int read = fis.read(buffer);, +, +						return (read == 4 && Arrays.equals(buffer, ZIP_FILE_HEADER));, +					}, +					catch (IOException ioe) {, +						return false;]