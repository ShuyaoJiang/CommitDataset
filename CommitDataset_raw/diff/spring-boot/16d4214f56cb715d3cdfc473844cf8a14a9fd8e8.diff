[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see #configurePropertySources(ConfigurableEnvironment, String[]), +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see #configurePropertySources(ConfigurableEnvironment, String[]), +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// The default profile for these purposes is represented as null. We add it, +			// last so that it is first out (active profiles will then override any, +			// settings in the defaults when the list is reversed later)., +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see #configurePropertySources(ConfigurableEnvironment, String[]), +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// The default profile for these purposes is represented as null. We add it, +			// last so that it is first out (active profiles will then override any, +			// settings in the defaults when the list is reversed later)., +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +		application.run("--spring.profiles.active=bar,spam");, +		assertArrayEquals(new String[] { "foo", "bar", "spam" },, +				environment.getActiveProfiles());, +	}, +, +	@Test, +	public void addProfilesOrderWithProperties() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		application.setAdditionalProfiles("other");, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		application.run();, +		// Active profile should win over default, +		assertEquals("fromotherpropertiesfile", environment.getProperty("my.property"));, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see #configurePropertySources(ConfigurableEnvironment, String[]), +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// The default profile for these purposes is represented as null. We add it, +			// last so that it is first out (active profiles will then override any, +			// settings in the defaults when the list is reversed later)., +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +		application.run("--spring.profiles.active=bar,spam");, +		assertArrayEquals(new String[] { "foo", "bar", "spam" },, +				environment.getActiveProfiles());, +	}, +, +	@Test, +	public void addProfilesOrderWithProperties() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		application.setAdditionalProfiles("other");, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		application.run();, +		// Active profile should win over default, +		assertEquals("fromotherpropertiesfile", environment.getProperty("my.property"));, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void loadPropertiesThenProfilePropertiesActivatedInSpringApplication(), +			throws Exception {, +		// This should be the effect of calling, +		// SpringApplication.setAdditionalProfiles("other"), +		this.environment.setActiveProfiles("other");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		// The "other" profile is activated in SpringApplication so it should take, +		// precedence over the default profile, +		assertThat(property, equalTo("fromotherpropertiesfile"));, +	}, +, +	@Test, +	public void loadPropertiesThenProfilePropertiesActivatedInFirst() throws Exception {]