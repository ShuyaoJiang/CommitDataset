[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		if (this.dataSource == null, +				|| !this.environment.getProperty("initialize", Boolean.class, true)) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		if (this.dataSource == null, +				|| !this.environment.getProperty("initialize", Boolean.class, true)) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import java.sql.Connection;, +import java.sql.Driver;, +import java.sql.DriverPropertyInfo;, +import java.sql.SQLException;, +import java.util.Properties;, +import org.mockito.Mockito;, +		TestUtils, +				.addEnviroment(, +						this.context,, +						"spring.datasource.driverClassName:org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests$DatabaseDriver",, +						"spring.datasource.url:jdbc:foo://localhost",, +						"spring.datasource.initialize:false");, +		assertEquals(, +				"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests$DatabaseDriver",, +				pool.getDriverClassName());, +	public static class DatabaseDriver implements Driver {, +, +		@Override, +		public Connection connect(String url, Properties info) throws SQLException {, +			return Mockito.mock(Connection.class);, +		}, +, +		@Override, +		public boolean acceptsURL(String url) throws SQLException {, +			return true;, +		}, +, +		@Override, +		public DriverPropertyInfo[] getPropertyInfo(String url, Properties info), +				throws SQLException {, +			return new DriverPropertyInfo[0];, +		}, +, +		@Override, +		public int getMajorVersion() {, +			return 1;, +		}, +, +		@Override, +		public int getMinorVersion() {, +			return 0;, +		}, +, +		@Override, +		public boolean jdbcCompliant() {, +			return false;, +		}, +, +	}, +]