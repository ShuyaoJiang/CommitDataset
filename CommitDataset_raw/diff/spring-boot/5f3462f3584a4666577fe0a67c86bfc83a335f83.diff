[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +		project.getComponents().add(new SpringBootSoftwareComponent(project, artifact,, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +		project.getComponents().add(new SpringBootSoftwareComponent(project, artifact,, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootSoftwareComponent.java, +import org.gradle.api.Project;, +	private final Usage usage;, +, +	SpringBootSoftwareComponent(Project project, PublishArtifact artifact, String name) {, +		this.usage = createUsage(project);, +	}, +, +	private static Usage createUsage(Project project) {, +		try {, +			return Usages.usage("master");, +		}, +		catch (Throwable ex) {, +			return createUsageUsingObjectFactory(project);, +		}, +	}, +, +	private static Usage createUsageUsingObjectFactory(Project project) {, +		try {, +			Object objects = project.getClass().getMethod("getObjects").invoke(project);, +			return (Usage) objects.getClass(), +					.getMethod("named", Class.class, String.class), +					.invoke(objects, Usage.class, "master");, +		}, +		catch (Throwable ex) {, +			throw new RuntimeException(ex);, +		}, +		return Collections.singleton(new BootUsageContext(this.usage, this.artifact));, +		private final Usage usage;, +		private BootUsageContext(Usage usage, PublishArtifact artifact) {, +			this.usage = usage;, +			return this.usage;, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +		project.getComponents().add(new SpringBootSoftwareComponent(project, artifact,, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootSoftwareComponent.java, +import org.gradle.api.Project;, +	private final Usage usage;, +, +	SpringBootSoftwareComponent(Project project, PublishArtifact artifact, String name) {, +		this.usage = createUsage(project);, +	}, +, +	private static Usage createUsage(Project project) {, +		try {, +			return Usages.usage("master");, +		}, +		catch (Throwable ex) {, +			return createUsageUsingObjectFactory(project);, +		}, +	}, +, +	private static Usage createUsageUsingObjectFactory(Project project) {, +		try {, +			Object objects = project.getClass().getMethod("getObjects").invoke(project);, +			return (Usage) objects.getClass(), +					.getMethod("named", Class.class, String.class), +					.invoke(objects, Usage.class, "master");, +		}, +		catch (Throwable ex) {, +			throw new RuntimeException(ex);, +		}, +		return Collections.singleton(new BootUsageContext(this.usage, this.artifact));, +		private final Usage usage;, +		private BootUsageContext(Usage usage, PublishArtifact artifact) {, +			this.usage = usage;, +			return this.usage;, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/WarPluginAction.java, +		project.getComponents().add(new SpringBootSoftwareComponent(project, artifact,]