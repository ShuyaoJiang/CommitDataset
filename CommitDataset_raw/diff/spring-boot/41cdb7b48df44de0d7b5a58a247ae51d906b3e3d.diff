[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.context.event.ApplicationStartedEvent;, +import org.springframework.boot.util.SystemUtils;, +import org.springframework.context.ApplicationListener;, +import org.springframework.core.Ordered;, +, + * An {@link org.springframework.context.ApplicationListener} that saves application PID, + * into file, + * , + * @since 1.0.2, + * @author Dave Syer, +public class ApplicationPidListener implements, +		ApplicationListener<ApplicationStartedEvent>, Ordered {, +	private static final Log logger = LogFactory.getLog(ApplicationPidListener.class);, +	/**, +	 * Sets the pid file name. This file will contain current process id., +	 *, +	 * @param pidFileName the name of file containing pid, +	 */, +	public ApplicationPidListener(String pidFileName) {, +		this.pidFileName = pidFileName;, +, +	public ApplicationPidListener() {, +	public void onApplicationEvent(ApplicationStartedEvent event) {, +		}, +		catch (IllegalStateException ignore) {, +			File file = new File(this.pidFileName);, +				File parent = file.getParentFile();, +				if (parent != null) {, +					parent.mkdirs();, +				}, +			}, +			catch (FileNotFoundException e) {, +				logger.warn(String, +						.format("Cannot create pid file %s !", this.pidFileName));, +			}, +			catch (Exception e) {, +				logger.warn(String.format("Cannot write to pid file %s!",, +						this.pidFileName));, +			}, +			finally {, +					}, +					catch (IOException e) {, +						logger.warn(String.format("Cannot close pid file %s!",, +								this.pidFileName));, +	/**, +	 * Allow pid file to be re-written, +	 */, +	public static void reset() {, +		pidFileCreated.set(false);, +	}, +, +		return this.order;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.context.event.ApplicationStartedEvent;, +import org.springframework.boot.util.SystemUtils;, +import org.springframework.context.ApplicationListener;, +import org.springframework.core.Ordered;, +, + * An {@link org.springframework.context.ApplicationListener} that saves application PID, + * into file, + * , + * @since 1.0.2, + * @author Dave Syer, +public class ApplicationPidListener implements, +		ApplicationListener<ApplicationStartedEvent>, Ordered {, +	private static final Log logger = LogFactory.getLog(ApplicationPidListener.class);, +	/**, +	 * Sets the pid file name. This file will contain current process id., +	 *, +	 * @param pidFileName the name of file containing pid, +	 */, +	public ApplicationPidListener(String pidFileName) {, +		this.pidFileName = pidFileName;, +, +	public ApplicationPidListener() {, +	public void onApplicationEvent(ApplicationStartedEvent event) {, +		}, +		catch (IllegalStateException ignore) {, +			File file = new File(this.pidFileName);, +				File parent = file.getParentFile();, +				if (parent != null) {, +					parent.mkdirs();, +				}, +			}, +			catch (FileNotFoundException e) {, +				logger.warn(String, +						.format("Cannot create pid file %s !", this.pidFileName));, +			}, +			catch (Exception e) {, +				logger.warn(String.format("Cannot write to pid file %s!",, +						this.pidFileName));, +			}, +			finally {, +					}, +					catch (IOException e) {]