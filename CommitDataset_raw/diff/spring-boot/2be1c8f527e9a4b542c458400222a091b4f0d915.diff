[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +public class EndpointMBean implements DynamicMBean {, +	private final ClassLoader classLoader;, +, +	EndpointMBean(JmxOperationResponseMapper responseMapper, ClassLoader classLoader,, +		this.classLoader = classLoader;, +		ClassLoader previousClassLoader = overrideThreadContextClassLoader(this.classLoader);, +			overrideThreadContextClassLoader(previousClassLoader);, +	private ClassLoader overrideThreadContextClassLoader(ClassLoader classLoader) {, +		if (classLoader != null) {, +			catch (SecurityException ex) {, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +public class EndpointMBean implements DynamicMBean {, +	private final ClassLoader classLoader;, +, +	EndpointMBean(JmxOperationResponseMapper responseMapper, ClassLoader classLoader,, +		this.classLoader = classLoader;, +		ClassLoader previousClassLoader = overrideThreadContextClassLoader(this.classLoader);, +			overrideThreadContextClassLoader(previousClassLoader);, +	private ClassLoader overrideThreadContextClassLoader(ClassLoader classLoader) {, +		if (classLoader != null) {, +			catch (SecurityException ex) {, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointExporter.java, +public class JmxEndpointExporter, +		implements InitializingBean, DisposableBean, BeanClassLoaderAware {, +			EndpointMBean mbean = new EndpointMBean(this.responseMapper, this.classLoader,, +					endpoint);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +public class EndpointMBean implements DynamicMBean {, +	private final ClassLoader classLoader;, +, +	EndpointMBean(JmxOperationResponseMapper responseMapper, ClassLoader classLoader,, +		this.classLoader = classLoader;, +		ClassLoader previousClassLoader = overrideThreadContextClassLoader(this.classLoader);, +			overrideThreadContextClassLoader(previousClassLoader);, +	private ClassLoader overrideThreadContextClassLoader(ClassLoader classLoader) {, +		if (classLoader != null) {, +			catch (SecurityException ex) {, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/JmxEndpointExporter.java, +public class JmxEndpointExporter, +		implements InitializingBean, DisposableBean, BeanClassLoaderAware {, +			EndpointMBean mbean = new EndpointMBean(this.responseMapper, this.classLoader,, +					endpoint);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java, +		new EndpointMBean(null, null, mock(ExposableJmxEndpoint.class));, +		new EndpointMBean(mock(JmxOperationResponseMapper.class), null, null);, +		EndpointMBean bean = createEndpointMBean();, +		EndpointMBean bean = createEndpointMBean();, +		EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);, +		EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);, +		EndpointMBean bean = createEndpointMBean();, +		ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();, +		URLClassLoader beanClassLoader = new URLClassLoader(new URL[0],, +				getClass().getClassLoader());, +		EndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader,, +				endpoint);, +		assertThat(Thread.currentThread().getContextClassLoader()), +				.isEqualTo(originalClassLoader);, +		EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);, +		EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint);, +		EndpointMBean bean = new EndpointMBean(responseMapper, null, this.endpoint);, +		EndpointMBean bean = createEndpointMBean();, +		EndpointMBean bean = createEndpointMBean();, +		EndpointMBean bean = createEndpointMBean();, +		EndpointMBean bean = createEndpointMBean();, +	private EndpointMBean createEndpointMBean() {, +		return new EndpointMBean(this.responseMapper, null, this.endpoint);, +	}, +]