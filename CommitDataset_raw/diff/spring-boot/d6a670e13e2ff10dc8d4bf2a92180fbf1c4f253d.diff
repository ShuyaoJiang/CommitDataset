[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.springframework.core.env.PropertySource;, +	private String[] defaultCommandLineArgs;, +, +				PropertySource<?> propertySource = new SimpleCommandLinePropertySource(, +						mergeCommandLineArgs(this.defaultCommandLineArgs, args));, +	 * Merge two sets of command lines, the defaults and the ones passed in at run time., +	 * , +	 * @param defaults the default values, +	 * @param args the ones passed in at runtime, +	 * @return a new command line, +	 */, +	protected String[] mergeCommandLineArgs(String[] defaults, String[] args) {, +, +		if (defaults == null || defaults.length == 0) {, +			return args;, +		}, +, +		List<String> result = new ArrayList<String>();, +		Map<String, String> options = new LinkedHashMap<String, String>();, +, +		for (String arg : defaults) {, +			if (isOptionArg(arg)) {, +				addOptionArg(options, arg);, +			} else {, +				result.add(arg);, +			}, +		}, +		for (String arg : args) {, +			if (isOptionArg(arg)) {, +				addOptionArg(options, arg);, +			} else if (!result.contains(arg)) {, +				result.add(arg);, +			}, +		}, +, +		List<String> optionsList = new ArrayList<String>();, +		for (String key : options.keySet()) {, +			String value = options.get(key);, +			optionsList.add("--" + key + (value == null ? "" : "=" + value));, +		}, +		result.addAll(0, optionsList);, +, +		return result.toArray(new String[result.size()]);, +, +	}, +, +	private boolean isOptionArg(String arg) {, +		return arg.startsWith("--");, +	}, +, +	private void addOptionArg(Map<String, String> map, String arg) {, +		String optionText = arg.substring(2, arg.length());, +		String optionName;, +		String optionValue = null;, +		if (optionText.contains("=")) {, +			optionName = optionText.substring(0, optionText.indexOf("="));, +			optionValue = optionText.substring(optionText.indexOf("=") + 1,, +					optionText.length());, +		} else {, +			optionName = optionText;, +		}, +		if (optionName.isEmpty()) {, +			throw new IllegalArgumentException("Invalid argument syntax: " + arg);, +		}, +		map.put(optionName, optionValue);, +	}, +, +	/**, +	 * Set some default command line arguments which can be overridden by those passed, +	 * into the run methods., +	 * @param defaultCommandLineArgs the default command line args to set, +	 */, +	public void setDefaultCommandLineArgs(String... defaultCommandLineArgs) {, +		this.defaultCommandLineArgs = defaultCommandLineArgs;, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.springframework.core.env.PropertySource;, +	private String[] defaultCommandLineArgs;, +, +				PropertySource<?> propertySource = new SimpleCommandLinePropertySource(, +						mergeCommandLineArgs(this.defaultCommandLineArgs, args));, +	 * Merge two sets of command lines, the defaults and the ones passed in at run time., +	 * , +	 * @param defaults the default values, +	 * @param args the ones passed in at runtime, +	 * @return a new command line, +	 */, +	protected String[] mergeCommandLineArgs(String[] defaults, String[] args) {, +, +		if (defaults == null || defaults.length == 0) {, +			return args;, +		}, +]