[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, +import java.util.HashMap;, +	private final Map<EndpointId, String> pathMapping;, +		this.pathMapping = new HashMap<>();, +		pathMapping.forEach((id, path) -> this.pathMapping, +				.put(EndpointId.fromPropertyValue(id), path));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, +import java.util.HashMap;, +	private final Map<EndpointId, String> pathMapping;, +		this.pathMapping = new HashMap<>();, +		pathMapping.forEach((id, path) -> this.pathMapping, +				.put(EndpointId.fromPropertyValue(id), path));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapperTests.java, +	@Test, +	public void mixedCaseDefaultConfiguration() {, +		MappingWebEndpointPathMapper mapper = new MappingWebEndpointPathMapper(, +				Collections.emptyMap());, +		assertThat(mapper.getRootPath(EndpointId.of("testEndpoint"))), +				.isEqualTo("testendpoint");, +	}, +, +	@Test, +	public void mixedCaseUserConfiguration() {, +		MappingWebEndpointPathMapper mapper = new MappingWebEndpointPathMapper(, +				Collections.singletonMap("test-endpoint", "custom"));, +		assertThat(mapper.getRootPath(EndpointId.of("testEndpoint"))).isEqualTo("custom");, +	}, +]