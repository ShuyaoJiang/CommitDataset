[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import java.util.Iterator;, +		private Queue<Profile> profiles;, +		private List<Profile> processedProfiles;, +			this.profiles = Collections.asLifoQueue(new LinkedList<Profile>());, +			this.processedProfiles = new LinkedList<Profile>();, +			Set<Profile> initialActiveProfiles = initializeActiveProfiles();, +				for (String defaultProfileName : this.environment.getDefaultProfiles()) {, +					Profile defaultProfile = new Profile(defaultProfileName, true);, +				Profile profile = this.profiles.poll();, +		private Set<Profile> initializeActiveProfiles() {, +			Set<Profile> activeProfiles = getProfilesForValue(, +		private List<Profile> getUnprocessedActiveProfiles(, +				Set<Profile> initialActiveProfiles) {, +			List<Profile> unprocessedActiveProfiles = new ArrayList<Profile>();, +			for (String profileName : this.environment.getActiveProfiles()) {, +				Profile profile = new Profile(profileName);, +		private void load(String location, String name, Profile profile), +						for (Profile processedProfile : this.processedProfiles) {, +				Profile profile) throws IOException {, +						(profile == null ? null : profile.getName()));, +			if (profile != null) {, +			Set<Profile> activeProfiles = getProfilesForValue(, +			Set<Profile> includeProfiles = getProfilesForValue(, +		private void maybeActivateProfiles(Set<Profile> profiles) {, +				removeUnprocessedDefaultProfiles();, +		private void removeUnprocessedDefaultProfiles() {, +			for (Iterator<Profile> iterator = this.profiles.iterator(); iterator, +					.hasNext();) {, +				if (iterator.next().isDefaultProfile()) {, +					iterator.remove();, +				}, +			}, +		}, +, +		private Set<Profile> getProfilesForValue(Object property) {, +			Set<String> profileNames = asResolvedSet(value, null);, +			Set<Profile> profiles = new LinkedHashSet<Profile>();, +			for (String profileName : profileNames) {, +				profiles.add(new Profile(profileName));, +			}, +			return profiles;, +		private void addProfiles(Set<Profile> profiles) {, +			for (Profile profile : profiles) {, +				if (!this.environment.acceptsProfiles(profile.getName())) {, +		private void prependProfile(ConfigurableEnvironment environment,, +				Profile profile) {, +			profiles.add(profile.getName());, +	private static class Profile {, +, +		private final String name;, +, +		private final boolean defaultProfile;, +, +		Profile(String name) {, +			this(name, false);, +		}, +, +		Profile(String name, boolean defaultProfile) {, +			Assert.notNull(name, "Name must not be null");, +			this.name = name;, +			this.defaultProfile = defaultProfile;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public boolean isDefaultProfile() {, +			return this.defaultProfile;, +		}, +, +		@Override, +		public String toString() {, +			return this.name;, +		}, +, +		@Override, +		public int hashCode() {, +			return this.name.hashCode();, +		}, +, +		@Override, +		public boolean equals(Object obj) {, +			if (obj == this) {, +				return true;, +			}, +			if (obj == null || obj.getClass() != getClass()) {, +				return false;, +			}, +			return ((Profile) obj).name.equals(this.name);, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import java.util.Iterator;, +		private Queue<Profile> profiles;, +		private List<Profile> processedProfiles;, +			this.profiles = Collections.asLifoQueue(new LinkedList<Profile>());]