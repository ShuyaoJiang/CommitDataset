[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.HierarchicalBeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.core.ResolvableType;, + * @author Jakub Kubrynski, +			beanNames.addAll(getBeanNamesForType(beanFactory, type,, +					context.getClassLoader(), considerHierarchy));, +	private Collection<String> getBeanNamesForType(, +			ConfigurableListableBeanFactory beanFactory, String type,, +			ClassLoader classLoader, boolean considerHierarchy) throws LinkageError {, +			Set<String> result = new LinkedHashSet<String>();, +			collectBeanNamesForType(result, beanFactory,, +					ClassUtils.forName(type, classLoader), considerHierarchy);, +			return result;, +			return Collections.emptySet();, +	private void collectBeanNamesForType(Set<String> result,, +			ListableBeanFactory beanFactory, Class<?> type, boolean considerHierarchy) {, +		// eagerInit set to false to prevent early instantiation, +		result.addAll(Arrays.asList(beanFactory.getBeanNamesForType(type, true, false)));, +		if (beanFactory instanceof ConfigurableListableBeanFactory) {, +			collectBeanNamesForTypeFromFactoryBeans(result,, +					(ConfigurableListableBeanFactory) beanFactory, type);, +		}, +		if (considerHierarchy && beanFactory instanceof HierarchicalBeanFactory) {, +			BeanFactory parent = ((HierarchicalBeanFactory) beanFactory), +					.getParentBeanFactory();, +			if (parent instanceof ListableBeanFactory) {, +				collectBeanNamesForType(result, (ListableBeanFactory) parent, type,, +						considerHierarchy);, +			}, +		}, +	}, +, +	/**, +	 * Attempt to collect bean names for type by considering FactoryBean generics. Some, +	 * factory beans will not be able to determine their object type at this stage, so, +	 * those are not eligible for matching this condition., +	 */, +	private void collectBeanNamesForTypeFromFactoryBeans(Set<String> result,, +			ConfigurableListableBeanFactory beanFactory, Class<?> type) {, +		String[] names = beanFactory.getBeanNamesForType(FactoryBean.class, true, false);, +		for (String name : names) {, +			name = BeanFactoryUtils.transformedBeanName(name);, +			BeanDefinition beanDefinition = beanFactory.getBeanDefinition(name);, +			Class<?> generic = getFactoryBeanGeneric(beanFactory, beanDefinition);, +			if (generic != null && ClassUtils.isAssignable(type, generic)) {, +				result.add(name);, +			}, +		}, +	}, +, +	private Class<?> getFactoryBeanGeneric(ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition) {, +		try {, +			if (StringUtils.hasLength(definition.getFactoryBeanName()), +					&& StringUtils.hasLength(definition.getFactoryMethodName())) {, +				return getConfigurationClassFactoryBeanGeneric(beanFactory, definition);, +			}, +			if (StringUtils.hasLength(definition.getBeanClassName())) {, +				return getDirectFactoryBeanGeneric(beanFactory, definition);, +			}, +		}, +		catch (Exception ex) {, +		}, +		return null;, +	}, +, +	private Class<?> getConfigurationClassFactoryBeanGeneric(, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +			throws Exception {, +		BeanDefinition factoryDefinition = beanFactory.getBeanDefinition(definition, +				.getFactoryBeanName());, +		Class<?> factoryClass = ClassUtils.forName(factoryDefinition.getBeanClassName(),, +				beanFactory.getBeanClassLoader());, +		Method method = ReflectionUtils.findMethod(factoryClass,, +				definition.getFactoryMethodName());, +		return ResolvableType.forMethodReturnType(method).as(FactoryBean.class), +				.resolveGeneric();, +	}, +, +	private Class<?> getDirectFactoryBeanGeneric(, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +			throws ClassNotFoundException, LinkageError {, +		Class<?> factoryBeanClass = ClassUtils.forName(definition.getBeanClassName(),, +				beanFactory.getBeanClassLoader());, +		return ResolvableType.forClass(factoryBeanClass).as(FactoryBean.class), +				.resolveGeneric();, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;]