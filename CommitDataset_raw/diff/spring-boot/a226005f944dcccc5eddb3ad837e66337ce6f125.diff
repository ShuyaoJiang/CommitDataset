[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +			setField(auth, "defaultUserDetailsService", getUserDetailsService());, +		private void setField(Object target, String name, Object value) {, +			try {, +				Field field = ReflectionUtils.findField(target.getClass(), name);, +				ReflectionUtils.makeAccessible(field);, +				ReflectionUtils.setField(field, target, value);, +			}, +			catch (Exception e) {, +				logger.info("Could not set " + name);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +			setField(auth, "defaultUserDetailsService", getUserDetailsService());, +		private void setField(Object target, String name, Object value) {, +			try {, +				Field field = ReflectionUtils.findField(target.getClass(), name);, +				ReflectionUtils.makeAccessible(field);, +				ReflectionUtils.setField(field, target, value);, +			}, +			catch (Exception e) {, +				logger.info("Could not set " + name);, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import org.springframework.security.core.userdetails.UserDetailsService;, +	public void testDefaultAuthenticationManagerMakesUserDetailsAvailable(), +			throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(UserDetailsSecurityCustomizer.class,, +				SecurityAutoConfiguration.class, ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertNotNull(this.context.getBean(UserDetailsSecurityCustomizer.class), +				.getUserDetails().loadUserByUsername("user"));, +	}, +, +	@Test, +	@Configuration, +	protected static class UserDetailsSecurityCustomizer extends, +			WebSecurityConfigurerAdapter {, +, +		private UserDetailsService userDetails;, +, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			this.userDetails = http.getSharedObject(UserDetailsService.class);, +		}, +, +		public UserDetailsService getUserDetails() {, +			return this.userDetails;, +		}, +, +	}, +]