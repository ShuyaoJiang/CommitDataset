[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.boot.LazyInitializationBeanFactoryPostProcessor;, +import org.springframework.context.support.AbstractApplicationContext;, +				if (isLazyInitialization()) {, +					managementContext.addBeanFactoryPostProcessor(, +							new LazyInitializationBeanFactoryPostProcessor());, +				}, +		protected boolean isLazyInitialization() {, +			AbstractApplicationContext context = (AbstractApplicationContext) this.applicationContext;, +			List<BeanFactoryPostProcessor> postProcessors = context, +					.getBeanFactoryPostProcessors();, +			return postProcessors.stream().anyMatch((, +					postProcessor) -> postProcessor instanceof LazyInitializationBeanFactoryPostProcessor);, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.boot.LazyInitializationBeanFactoryPostProcessor;, +import org.springframework.context.support.AbstractApplicationContext;, +				if (isLazyInitialization()) {, +					managementContext.addBeanFactoryPostProcessor(, +							new LazyInitializationBeanFactoryPostProcessor());, +				}, +		protected boolean isLazyInitialization() {, +			AbstractApplicationContext context = (AbstractApplicationContext) this.applicationContext;, +			List<BeanFactoryPostProcessor> postProcessors = context, +					.getBeanFactoryPostProcessors();, +			return postProcessors.stream().anyMatch((, +					postProcessor) -> postProcessor instanceof LazyInitializationBeanFactoryPostProcessor);, +		}, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: If you want to disable lazy initialization for certain beans while using lazy, +initialization for the rest of the application, you can explicitly set their lazy attribute, +to false using the `@Lazy(false)` annotation., +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.boot.LazyInitializationBeanFactoryPostProcessor;, +import org.springframework.context.support.AbstractApplicationContext;, +				if (isLazyInitialization()) {, +					managementContext.addBeanFactoryPostProcessor(, +							new LazyInitializationBeanFactoryPostProcessor());, +				}, +		protected boolean isLazyInitialization() {, +			AbstractApplicationContext context = (AbstractApplicationContext) this.applicationContext;, +			List<BeanFactoryPostProcessor> postProcessors = context, +					.getBeanFactoryPostProcessors();, +			return postProcessors.stream().anyMatch((, +					postProcessor) -> postProcessor instanceof LazyInitializationBeanFactoryPostProcessor);, +		}, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: If you want to disable lazy initialization for certain beans while using lazy, +initialization for the rest of the application, you can explicitly set their lazy attribute, +to false using the `@Lazy(false)` annotation., +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/LazyInitializationBeanFactoryPostProcessor.java, +/*, + * Copyright 2012-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.core.Ordered;, +, +/**, + * {@link BeanFactoryPostProcessor} to set the lazy attribute on bean definition., + *, + * @author Andy Wilkinson, + * @author Madhura Bhave, + * @since 2.2.0, + */, +public final class LazyInitializationBeanFactoryPostProcessor, +		implements BeanFactoryPostProcessor, Ordered {, +]