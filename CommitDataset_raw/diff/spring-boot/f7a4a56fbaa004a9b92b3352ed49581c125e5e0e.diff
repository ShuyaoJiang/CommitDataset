[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +import org.springframework.core.io.support.EncodedResource;, +import org.springframework.util.StringUtils;, +		return new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git",, +				this.properties.getGit().getEncoding()));, +				loadFrom(this.properties.getBuild().getLocation(), "build",, +						this.properties.getBuild().getEncoding()));, +	protected Properties loadFrom(Resource location, String prefix, String encoding) throws IOException {, +		Properties source = null;, +		if (StringUtils.isEmpty(encoding)) {, +			source = PropertiesLoaderUtils.loadProperties(location);, +		} else {, +			source = PropertiesLoaderUtils.loadProperties(new EncodedResource(location, encoding));, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +import org.springframework.core.io.support.EncodedResource;, +import org.springframework.util.StringUtils;, +		return new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git",, +				this.properties.getGit().getEncoding()));, +				loadFrom(this.properties.getBuild().getLocation(), "build",, +						this.properties.getBuild().getEncoding()));, +	protected Properties loadFrom(Resource location, String prefix, String encoding) throws IOException {, +		Properties source = null;, +		if (StringUtils.isEmpty(encoding)) {, +			source = PropertiesLoaderUtils.loadProperties(location);, +		} else {, +			source = PropertiesLoaderUtils.loadProperties(new EncodedResource(location, encoding));, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoProperties.java, +		/**, +		 * build-info.properties file encoding., +		 */, +		private String encoding;, +, +		public String getEncoding() {, +			return this.encoding;, +		}, +, +		public void setEncoding(String encoding) {, +			this.encoding = encoding;, +		}, +, +		/**, +		 * git.properties file encoding., +		 */, +		private String encoding;, +, +		public String getEncoding() {, +			return this.encoding;, +		}, +, +		public void setEncoding(String encoding) {, +			this.encoding = encoding;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +import org.springframework.core.io.support.EncodedResource;, +import org.springframework.util.StringUtils;, +		return new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git",, +				this.properties.getGit().getEncoding()));, +				loadFrom(this.properties.getBuild().getLocation(), "build",, +						this.properties.getBuild().getEncoding()));, +	protected Properties loadFrom(Resource location, String prefix, String encoding) throws IOException {, +		Properties source = null;, +		if (StringUtils.isEmpty(encoding)) {, +			source = PropertiesLoaderUtils.loadProperties(location);, +		} else {, +			source = PropertiesLoaderUtils.loadProperties(new EncodedResource(location, encoding));, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoProperties.java, +		/**, +		 * build-info.properties file encoding., +		 */, +		private String encoding;, +, +		public String getEncoding() {, +			return this.encoding;, +		}, +, +		public void setEncoding(String encoding) {, +			this.encoding = encoding;, +		}, +, +		/**, +		 * git.properties file encoding., +		 */, +		private String encoding;, +, +		public String getEncoding() {, +			return this.encoding;, +		}, +, +		public void setEncoding(String encoding) {, +			this.encoding = encoding;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +	public void gitPropertiesWithUnicode() {, +		load("spring.info.git.location=classpath:/org/springframework/boot/autoconfigure/info/git.properties",, +				"spring.info.git.encoding=utf-8");]