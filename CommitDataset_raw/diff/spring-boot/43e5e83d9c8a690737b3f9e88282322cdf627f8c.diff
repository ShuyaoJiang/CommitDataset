[+++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java, +import java.time.Duration;, +				return isCompatibleType(metadata.getType(), replacement.getType());, +			return isCompatibleType(metadata.getType(),, +					detectMapValueReplacementType(replacementId));, +	private boolean isCompatibleType(String currentType, String replacementType) {, +		if (replacementType ==  null || currentType == null) {, +			return false;, +		}, +		if (replacementType.equals(currentType)) {, +			return true;, +		}, +		if (replacementType.equals(Duration.class.getName()), +				&& (currentType.equals(Long.class.getName()), +				|| currentType.equals(Integer.class.getName()))) {, +			return true;, +		}, +		return false;, +	}, +, +	private String detectMapValueReplacementType(String fullId) {, +			ConfigurationMetadataProperty property = this.allProperties.get(, +					fullId.substring(0, i));, +			String type = property.getType();, +			if (type != null, +					&& type.startsWith(Map.class.getName())) {, +				int lastComma = type.lastIndexOf(',');, +				if (lastComma != -1) {, +					return type.substring(lastComma + 1, type.length() - 1).trim();, +				}, +			}, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java, +import java.time.Duration;, +				return isCompatibleType(metadata.getType(), replacement.getType());, +			return isCompatibleType(metadata.getType(),, +					detectMapValueReplacementType(replacementId));, +	private boolean isCompatibleType(String currentType, String replacementType) {, +		if (replacementType ==  null || currentType == null) {, +			return false;, +		}, +		if (replacementType.equals(currentType)) {, +			return true;, +		}, +		if (replacementType.equals(Duration.class.getName()), +				&& (currentType.equals(Long.class.getName()), +				|| currentType.equals(Integer.class.getName()))) {, +			return true;, +		}, +		return false;, +	}, +, +	private String detectMapValueReplacementType(String fullId) {, +			ConfigurationMetadataProperty property = this.allProperties.get(, +					fullId.substring(0, i));, +			String type = property.getType();, +			if (type != null, +					&& type.startsWith(Map.class.getName())) {, +				int lastComma = type.lastIndexOf(',');, +				if (lastComma != -1) {, +					return type.substring(lastComma + 1, type.length() - 1).trim();, +				}, +			}, +++ b/spring-boot-project/spring-boot-properties-migrator/src/test/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporterTests.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import org.springframework.core.env.MapPropertySource;, +	@Test, +	public void durationTypeIsHandledTransparently() {, +		MutablePropertySources propertySources = this.environment.getPropertySources();, +		Map<String, Object> content = new LinkedHashMap<>();, +		content.put("test.cache-seconds", 50);, +		content.put("test.time-to-live-ms", 1234L);, +		content.put("test.ttl", 5678L);, +		propertySources.addFirst(, +				new MapPropertySource("test", content));, +		assertThat(propertySources).hasSize(2);, +		String report = createWarningReport(, +				loadRepository("metadata/type-conversion-metadata.json"));, +		assertThat(report).contains("Property source 'test'", "test.cache-seconds",, +				"test.cache", "test.time-to-live-ms", "test.time-to-live", "test.ttl",, +				"test.mapped.ttl");, +		assertThat(mapToNames(propertySources)).containsExactly("migrate-test", "test",, +				"mockProperties");, +		PropertySource<?> propertySource = propertySources.get("migrate-test");, +		assertMappedProperty(propertySource, "test.cache", 50, null);, +		assertMappedProperty(propertySource, "test.time-to-live", 1234L, null);, +		assertMappedProperty(propertySource, "test.mapped.ttl", 5678L, null);, +	}, +, +++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java, +import java.time.Duration;, +				return isCompatibleType(metadata.getType(), replacement.getType());, +			return isCompatibleType(metadata.getType(),, +					detectMapValueReplacementType(replacementId));, +	private boolean isCompatibleType(String currentType, String replacementType) {, +		if (replacementType ==  null || currentType == null) {, +			return false;, +		}, +		if (replacementType.equals(currentType)) {, +			return true;]