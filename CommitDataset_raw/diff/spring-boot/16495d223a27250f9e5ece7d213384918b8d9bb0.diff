[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +	private static final Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +		if (!(gauge.getValue() instanceof Number)) {, +			return;, +		}, +		this.names.put(name, name);, +		synchronized (this.monitor) {, +			this.reverse.add(name, name);, +		}, +		Set<String> result = numberKeys.get(metric.getClass());, +			numberKeys.put(metric.getClass(), result);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +	private static final Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +		if (!(gauge.getValue() instanceof Number)) {, +			return;, +		}, +		this.names.put(name, name);, +		synchronized (this.monitor) {, +			this.reverse.add(name, name);, +		}, +		Set<String> result = numberKeys.get(metric.getClass());, +			numberKeys.put(metric.getClass(), result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReaderTests.java, + * Tests for {@link MetricRegistryMetricReader}., +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +	private static final Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +		if (!(gauge.getValue() instanceof Number)) {, +			return;, +		}, +		this.names.put(name, name);, +		synchronized (this.monitor) {, +			this.reverse.add(name, name);, +		}, +		Set<String> result = numberKeys.get(metric.getClass());, +			numberKeys.put(metric.getClass(), result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReaderTests.java, + * Tests for {@link MetricRegistryMetricReader}., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2015 the original author or authors., +		if (this.applicationContext.getBeanNamesForType(DataSource.class, false, false).length > 0) {, +			this.dataSource = this.applicationContext.getBean(DataSource.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +	private static final Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +		if (!(gauge.getValue() instanceof Number)) {, +			return;, +		}, +		this.names.put(name, name);, +		synchronized (this.monitor) {, +			this.reverse.add(name, name);, +		}, +		Set<String> result = numberKeys.get(metric.getClass());, +			numberKeys.put(metric.getClass(), result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReaderTests.java, + * Tests for {@link MetricRegistryMetricReader}., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2015 the original author or authors., +		if (this.applicationContext.getBeanNamesForType(DataSource.class, false, false).length > 0) {, +			this.dataSource = this.applicationContext.getBean(DataSource.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +import org.springframework.util.Assert;, +			Method setConnectionFactory = findConnectionFactorySetter();, +			Assert.state(setConnectionFactory != null, "No supported ", +					+ "setConnectionFactory method was found");, +			ReflectionUtils.invokeMethod(setConnectionFactory, pool, connectionFactory);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, +	private static final Map<Class<?>, Set<String>> numberKeys = new ConcurrentHashMap<Class<?>, Set<String>>();, +		if (!(gauge.getValue() instanceof Number)) {, +			return;, +		}, +		this.names.put(name, name);, +		synchronized (this.monitor) {, +			this.reverse.add(name, name);, +		}, +		Set<String> result = numberKeys.get(metric.getClass());, +			numberKeys.put(metric.getClass(), result);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReaderTests.java, + * Tests for {@link MetricRegistryMetricReader}., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, + * Copyright 2012-2015 the original author or authors., +		if (this.applicationContext.getBeanNamesForType(DataSource.class, false, false).length > 0) {, +			this.dataSource = this.applicationContext.getBean(DataSource.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +import org.springframework.util.Assert;, +			Method setConnectionFactory = findConnectionFactorySetter();, +			Assert.state(setConnectionFactory != null, "No supported ", +					+ "setConnectionFactory method was found");, +			ReflectionUtils.invokeMethod(setConnectionFactory, pool, connectionFactory);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +		Object tcpServer = channel;, +		String protocol = "http";, +			tcpServer = getTcpServer(channel);, +		ServerSocket socket = getSocket(tcpServer);, +		if (socket != null) {, +			return new Port(socket.getLocalPort(), protocol);, +	private Object getTcpServer(Object channel) {, +		Field field = ReflectionUtils.findField(channel.getClass(), "tcpServer");]