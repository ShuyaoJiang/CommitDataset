[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.User;, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an, + * {@link InMemoryUserDetailsManager} with a default user and generated password., + * This can be disabled by providing a bean of type {@link AuthenticationManager},, + * {@link AuthenticationProvider} or {@link UserDetailsService}., +	@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,, +			UserDetailsService.class }), +	public InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {, +		String password = UUID.randomUUID().toString();, +		logger.info(, +				String.format("%n%nUsing default security password: %s%n", password));, +		return new InMemoryUserDetailsManager(User.withUsername("user").password(password).roles().build());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.User;, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an, + * {@link InMemoryUserDetailsManager} with a default user and generated password., + * This can be disabled by providing a bean of type {@link AuthenticationManager},, + * {@link AuthenticationProvider} or {@link UserDetailsService}., +	@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,, +			UserDetailsService.class }), +	public InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {, +		String password = UUID.randomUUID().toString();, +		logger.info(, +				String.format("%n%nUsing default security password: %s%n", password));, +		return new InMemoryUserDetailsManager(User.withUsername("user").password(password).roles().build());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * {@link InMemoryUserDetailsManager} with one user (named "user") whose password is, + * random and printed on the console at INFO level during startup. In a webapp, this, + * configuration also secures all web endpoints (including static resources)., + * @author Madhura Bhave, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.User;, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Adds an, + * {@link InMemoryUserDetailsManager} with a default user and generated password., + * This can be disabled by providing a bean of type {@link AuthenticationManager},, + * {@link AuthenticationProvider} or {@link UserDetailsService}., +	@ConditionalOnMissingBean({ AuthenticationManager.class, AuthenticationProvider.class,, +			UserDetailsService.class }), +	public InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {, +		String password = UUID.randomUUID().toString();, +		logger.info(, +				String.format("%n%nUsing default security password: %s%n", password));, +		return new InMemoryUserDetailsManager(User.withUsername("user").password(password).roles().build());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * {@link InMemoryUserDetailsManager} with one user (named "user") whose password is, + * random and printed on the console at INFO level during startup. In a webapp, this, + * configuration also secures all web endpoints (including static resources)., + * @author Madhura Bhave, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import java.util.Collections;, +import org.springframework.security.authentication.AuthenticationProvider;, +import org.springframework.security.authentication.ProviderManager;, +import org.springframework.security.authentication.TestingAuthenticationProvider;, +import org.springframework.security.authentication.event.AuthenticationSuccessEvent;, +import org.springframework.security.core.userdetails.User;, +import org.springframework.security.provisioning.InMemoryUserDetailsManager;, + * @author Madhura Bhave, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(TestAuthenticationManagerConfiguration.class, SecurityAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		manager.authenticate(new TestingAuthenticationToken("foo", "wrong"));, +				.isInstanceOf(AuthenticationSuccessEvent.class);, +	public void testDefaultUsernamePassword() throws Exception {, +		this.context.register(SecurityAutoConfiguration.class);, +		this.context.refresh();, +		UserDetailsService manager = this.context.getBean(UserDetailsService.class);, +		assertThat(this.outputCapture.toString()).contains("Using default security password:");, +		assertThat(manager.loadUserByUsername("user")).isNotNull();, +	}, +, +	@Test, +	public void defaultUserNotCreatedIfAuthenticationManagerBeanPresent() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(TestAuthenticationManagerConfiguration.class,, +		AuthenticationManager manager = this.context.getBean(AuthenticationManager.class);, +		assertThat(manager), +						TestAuthenticationManagerConfiguration.class).authenticationManager);, +		assertThat(this.outputCapture.toString()), +				.doesNotContain("Using default security password: ");, +		TestingAuthenticationToken token = new TestingAuthenticationToken(, +				"foo", "bar");, +		assertThat(manager.authenticate(token)).isNotNull();, +	public void defaultUserNotCreatedIfUserDetailsServiceBeanPresent() throws Exception {, +		this.context.register(TestUserDetailsServiceConfiguration.class,, +		UserDetailsService userDetailsService = this.context.getBean(UserDetailsService.class);, +		assertThat(this.outputCapture.toString()), +				.doesNotContain("Using default security password: ");, +		assertThat(userDetailsService.loadUserByUsername("foo")).isNotNull();, +	public void defaultUserNotCreatedIfAuthenticationProviderBeanPresent() throws Exception {, +		this.context.register(TestAuthenticationProviderConfiguration.class,, +				SecurityAutoConfiguration.class,]