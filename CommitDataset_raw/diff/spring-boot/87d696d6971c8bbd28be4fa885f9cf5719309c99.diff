[+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationErrorsTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(errors.iterator()).toIterable().containsExactlyElementsOf(allErrors);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationErrorsTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(errors.iterator()).toIterable().containsExactlyElementsOf(allErrors);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(configurationSources.iterator()).toIterable().hasSize(5);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationErrorsTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(errors.iterator()).toIterable().containsExactlyElementsOf(allErrors);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(configurationSources.iterator()).toIterable().hasSize(5);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/DefaultPropertyMapperTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(namesFromString("server")).toIterable().containsExactly("server");, +		assertThat(namesFromString("server.port")).toIterable(), +				.containsExactly("server.port");, +		assertThat(namesFromString("host[0]")).toIterable().containsExactly("host[0]");, +		assertThat(namesFromString("host[0][1]")).toIterable(), +				.containsExactly("host[0][1]");, +		assertThat(namesFromString("host[0].name")).toIterable(), +				.containsExactly("host[0].name");, +		assertThat(namesFromString("host.f00.name")).toIterable(), +				.containsExactly("host.f00.name");, +		assertThat(namesFromString("my.host-name")).toIterable(), +				.containsExactly("my.host-name");, +		assertThat(namesFromString("my.hostName")).toIterable(), +				.containsExactly("my.hostname");, +		assertThat(namesFromString("my.HOST_NAME")).toIterable(), +				.containsExactly("my.hostname");, +		assertThat(namesFromString("s[!@#$%^&*()=+]e-rVeR")).toIterable(), +		assertThat(namesFromString("host[FOO].name")).toIterable(), +				.containsExactly("host[FOO].name");, +		assertThat(namesFromConfiguration("server")).toIterable(), +				.containsExactly("server");, +		assertThat(namesFromConfiguration("server.port")).toIterable(), +				.containsExactly("server.port");, +		assertThat(namesFromConfiguration("host[0]")).toIterable(), +				.containsExactly("host[0]");, +		assertThat(namesFromConfiguration("host[0][1]")).toIterable(), +				.containsExactly("host[0][1]");, +		assertThat(namesFromConfiguration("host[0].name")).toIterable(), +		assertThat(namesFromConfiguration("host.f00.name")).toIterable(), +		assertThat(namesFromConfiguration("my.host-name")).toIterable(), +		assertThat(namesFromConfiguration("host[FOO].name")).toIterable(), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationErrorsTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(errors.iterator()).toIterable().containsExactlyElementsOf(allErrors);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(configurationSources.iterator()).toIterable().hasSize(5);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/DefaultPropertyMapperTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(namesFromString("server")).toIterable().containsExactly("server");, +		assertThat(namesFromString("server.port")).toIterable(), +				.containsExactly("server.port");, +		assertThat(namesFromString("host[0]")).toIterable().containsExactly("host[0]");, +		assertThat(namesFromString("host[0][1]")).toIterable(), +				.containsExactly("host[0][1]");, +		assertThat(namesFromString("host[0].name")).toIterable(), +				.containsExactly("host[0].name");, +		assertThat(namesFromString("host.f00.name")).toIterable(), +				.containsExactly("host.f00.name");, +		assertThat(namesFromString("my.host-name")).toIterable(), +				.containsExactly("my.host-name");, +		assertThat(namesFromString("my.hostName")).toIterable(), +				.containsExactly("my.hostname");, +		assertThat(namesFromString("my.HOST_NAME")).toIterable(), +				.containsExactly("my.hostname");, +		assertThat(namesFromString("s[!@#$%^&*()=+]e-rVeR")).toIterable(), +		assertThat(namesFromString("host[FOO].name")).toIterable(), +				.containsExactly("host[FOO].name");, +		assertThat(namesFromConfiguration("server")).toIterable(), +				.containsExactly("server");, +		assertThat(namesFromConfiguration("server.port")).toIterable(), +				.containsExactly("server.port");, +		assertThat(namesFromConfiguration("host[0]")).toIterable(), +				.containsExactly("host[0]");, +		assertThat(namesFromConfiguration("host[0][1]")).toIterable(), +				.containsExactly("host[0][1]");, +		assertThat(namesFromConfiguration("host[0].name")).toIterable(), +		assertThat(namesFromConfiguration("host.f00.name")).toIterable(), +		assertThat(namesFromConfiguration("my.host-name")).toIterable(), +		assertThat(namesFromConfiguration("host[FOO].name")).toIterable(), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/FilteredIterableConfigurationPropertiesSourceTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(filtered.iterator()).toIterable(), +				.extracting(ConfigurationPropertyName::toString), +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationErrorsTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(errors.iterator()).toIterable().containsExactlyElementsOf(allErrors);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(configurationSources.iterator()).toIterable().hasSize(5);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/DefaultPropertyMapperTests.java, + * Copyright 2012-2019 the original author or authors., +		assertThat(namesFromString("server")).toIterable().containsExactly("server");]