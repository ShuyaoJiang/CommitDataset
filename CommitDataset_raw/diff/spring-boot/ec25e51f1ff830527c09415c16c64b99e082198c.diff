[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java, +			MustacheViewResolver resolver = new MustacheViewResolver(mustacheCompiler);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java, +			MustacheViewResolver resolver = new MustacheViewResolver(mustacheCompiler);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/servlet/MustacheView.java, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.util.Locale;, +import com.samskivert.mustache.Mustache;, +import org.springframework.core.io.Resource;, + * @author Brian Clozel, + * @since 2.0.0, +	private Mustache.Compiler compiler;, +, +	private String charset;, +	 * Set the Mustache compiler to be used by this view., +	 * <p>Typically this property is not set directly. Instead a single, +	 * {@link Mustache.Compiler} is expected in the Spring application context, +	 * which is used to compile Mustache templates., +	 * @param compiler the Mustache compiler, +	public void setCompiler(Mustache.Compiler compiler) {, +		this.compiler = compiler;, +	 * Set the charset used for reading Mustache template files., +	 * @param charset the charset to use for reading template files, +	public void setCharset(String charset) {, +		this.charset = charset;, +	public boolean checkResource(Locale locale) throws Exception {, +		Resource resource = getApplicationContext().getResource(this.getUrl());, +		return (resource != null && resource.exists());, +	}, +, +	@Override, +	protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request,, +			HttpServletResponse response) throws Exception {, +		Template template = createTemplate(getApplicationContext().getResource(this.getUrl()));, +		if (template != null) {, +			template.execute(model, response.getWriter());, +	private Template createTemplate(Resource resource) throws IOException {, +		Reader reader = getReader(resource);, +		try {, +			return this.compiler.compile(reader);, +		}, +		finally {, +			reader.close();, +		}, +	}, +, +	private Reader getReader(Resource resource) throws IOException {, +		if (this.charset != null) {, +			return new InputStreamReader(resource.getInputStream(), this.charset);, +		}, +		return new InputStreamReader(resource.getInputStream());, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java, +			MustacheViewResolver resolver = new MustacheViewResolver(mustacheCompiler);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/servlet/MustacheView.java, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.util.Locale;, +import com.samskivert.mustache.Mustache;, +import org.springframework.core.io.Resource;, + * @author Brian Clozel, + * @since 2.0.0, +	private Mustache.Compiler compiler;, +, +	private String charset;, +	 * Set the Mustache compiler to be used by this view., +	 * <p>Typically this property is not set directly. Instead a single, +	 * {@link Mustache.Compiler} is expected in the Spring application context, +	 * which is used to compile Mustache templates., +	 * @param compiler the Mustache compiler, +	public void setCompiler(Mustache.Compiler compiler) {, +		this.compiler = compiler;, +	 * Set the charset used for reading Mustache template files., +	 * @param charset the charset to use for reading template files, +	public void setCharset(String charset) {, +		this.charset = charset;, +	public boolean checkResource(Locale locale) throws Exception {, +		Resource resource = getApplicationContext().getResource(this.getUrl());, +		return (resource != null && resource.exists());, +	}, +, +	@Override, +	protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request,, +			HttpServletResponse response) throws Exception {, +		Template template = createTemplate(getApplicationContext().getResource(this.getUrl()));, +		if (template != null) {, +			template.execute(model, response.getWriter());, +	private Template createTemplate(Resource resource) throws IOException {, +		Reader reader = getReader(resource);, +		try {, +			return this.compiler.compile(reader);, +		}, +		finally {, +			reader.close();, +		}, +	}, +]