[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java, +import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;, +import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;, +	@Bean, +	@ConditionalOnMissingBean, +	public OAuth2AuthorizedClientRepository authorizedClientRepository(, +			OAuth2AuthorizedClientService authorizedClientService) {, +		return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java, +import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;, +import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;, +	@Bean, +	@ConditionalOnMissingBean, +	public OAuth2AuthorizedClientRepository authorizedClientRepository(, +			OAuth2AuthorizedClientService authorizedClientService) {, +		return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfigurationTests.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;, +import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;, +	public void configurationRegistersAuthorizedRepositoryServiceBean() {, +		this.contextRunner.withUserConfiguration(ClientRepositoryConfiguration.class,, +				OAuth2WebSecurityConfiguration.class).run((context) -> {, +			OAuth2AuthorizedClientRepository bean = context, +					.getBean(OAuth2AuthorizedClientRepository.class);, +			OAuth2AuthorizedClientRepository authorizedClientService = (OAuth2AuthorizedClientRepository) ReflectionTestUtils, +					.getField(getAuthCodeFilters(context).get(0),, +							"authorizedClientRepository");, +			assertThat(authorizedClientService).isEqualTo(bean);, +		});, +	}, +, +	@Test, +	@Test, +	public void authorizedClientRepositoryBeanIsConditionalOnMissingBean() {, +		this.contextRunner, +				.withUserConfiguration(OAuth2AuthorizedClientServiceConfiguration.class,, +						OAuth2WebSecurityConfiguration.class), +				.run((context) -> {, +					OAuth2AuthorizedClientRepository bean = context, +							.getBean(OAuth2AuthorizedClientRepository.class);, +					OAuth2AuthorizedClientRepository authorizedClientService = (OAuth2AuthorizedClientRepository) ReflectionTestUtils, +							.getField(getAuthCodeFilters(context).get(0),, +									"authorizedClientRepository");, +					assertThat(authorizedClientService).isEqualTo(bean);, +				});, +	}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public OAuth2AuthorizedClientRepository testAuthorizedClientRepository(, +				OAuth2AuthorizedClientService authorizedClientService) {, +			return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);, +		}, +]