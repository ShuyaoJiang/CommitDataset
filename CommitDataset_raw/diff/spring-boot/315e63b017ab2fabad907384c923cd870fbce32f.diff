[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +@Order(Ordered.LOWEST_PRECEDENCE), +			environment.getPropertySources().addLast(propertySource);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +@Order(Ordered.LOWEST_PRECEDENCE), +			environment.getPropertySources().addLast(propertySource);, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java, +	public void defaultPropertyCanBeOverridenFromCommandLine() throws Exception {, +		this.context = initializeAndRun(Config.class, "--spring.thymeleaf.cache=true");, +		TemplateResolver resolver = this.context.getBean(TemplateResolver.class);, +		resolver.initialize();, +		assertThat(resolver.isCacheable(), equalTo(true));, +	}, +, +	@Test, +	public void defaultPropertyCanBeOverridenFromUserHomeProperties() throws Exception {, +		String userHome = System.getProperty("user.home");, +		System.setProperty("user.home",, +				new File("src/test/resources/user-home").getAbsolutePath());, +		try {, +			this.context = initializeAndRun(Config.class);, +			TemplateResolver resolver = this.context.getBean(TemplateResolver.class);, +			resolver.initialize();, +			assertThat(resolver.isCacheable(), equalTo(true));, +		}, +		finally {, +			System.setProperty("user.home", userHome);, +		}, +	}, +, +	@Test, +	private ConfigurableApplicationContext initializeAndRun(Class<?> config,, +			String... args) {, +		return initializeAndRun(config, Collections.<String, Object>emptyMap(), args);, +			Map<String, Object> properties, String... args) {, +		ConfigurableApplicationContext context = application.run(args);]