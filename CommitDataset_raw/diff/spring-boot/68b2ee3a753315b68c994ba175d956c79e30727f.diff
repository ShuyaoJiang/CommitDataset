[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-cli.adoc, +The Spring Boot CLI is a command line tool that you can use if you want to quickly develop, +a Spring application. It lets you run Groovy scripts, which means that you have a familiar, +Java-like syntax without so much boilerplate code. You can also bootstrap a new project or, +write your own command for it., +_<<getting-started.adoc#getting-started-installing-the-cli>>_ in the "`Getting started`", +section for comprehensive installation instructions., +To pass command-line arguments to the application, use a `--` to separate the commands, +from the "`spring`" command arguments, as shown in the following example:, +Standard Groovy includes a `@Grab` annotation, which lets you declare dependencies on, +third-party libraries. This useful technique lets Groovy download jars in the same way as, +Maven or Gradle would but without requiring you to use a build tool., +Spring Boot extends this technique further and tries to deduce which libraries to "`grab`", +based on your code. For example, since the `WebApplication` code shown previously uses, +`@RestController` annotations, Spring Boot grabs"`Tomcat`" and "`Spring MVC`"., +without a group or version (for example, `@Grab('freemarker')`). Doing so consults Spring, +Boot's default dependency metadata to deduce the artifact's group and version. Note that, +the default metadata is tied to the version of the CLI that you use â€“ it changes only when, +you move to a new version of the CLI, putting you in control of when the versions of your, +dependencies may change. A table showing the dependencies and their versions that are, +included in the default metadata can be found in the <<appendix-dependency-versions,, +appendix>>., +To help reduce the size of your Groovy code, several `import` statements are automatically, +included. Notice how the preceding example refers to `@Component`, `@RestController`, and, +`@RequestMapping` without needing to use fully-qualified names or `import` statements., +TIP: Many Spring annotations work without using `import` statements. Try running your, +application to see what fails before adding imports., +the default dependency management, can be configured by using the, +`@DependencyManagementBom` annotation. The annotation's value should specify the, +coordinates (`groupId:artifactId:version`) of one or more Maven BOMs., +`@DependencyManagementBom` at most once in your application. A useful source of dependency, +management (which is a superset of Spring Boot's dependency management) is the, +http://platform.spring.io/[Spring IO Platform], which you might include with the following, +line:, +You can use the `jar` command to package your application into a self-contained executable, +jar file, as shown in the following example:, +The resulting jar contains the classes produced by compiling the application and all of, +the application's dependencies so that it can then be run by using `java -jar`. The jar, +file also contains entries from the application's classpath. You can add explicit paths to, +the jar by using `--include` and `--exclude`. Both are comma-separated, and both accept, +prefixes, in the form of "`+`" and "`-`", to signify that they should be removed from the, +defaults. The default includes are as follows:, +The `init` command lets you create a new project by using https://start.spring.io without, +leaving the shell, as shown in the following example:, +instance, the following command creates a Gradle project that uses Java 8 and `war`, +packaging:, +The embedded shell supports ANSI color output as well as `tab` completion. If you need to, +run a native command, you can use the `!` prefix. To exit the embedded shell, press, +http://grails.org/[Grails]), and you can embed bean definitions in your Groovy application, +scripts by using the same format. This is sometimes a good way to include external, +features like middleware declarations, as shown in the following example:, +See https://maven.apache.org/settings.html[Maven's settings documentation] for further, +information., +scripts] available from the GitHub repository that you can use to try out the Spring Boot, +CLI. There is also extensive Javadoc throughout the {sc-spring-boot-cli}[source code]., +If you find that you reach the limit of the CLI tool, you probably want to look at, +converting your application to a full Gradle or Maven built "`Groovy project`". The, +next section covers Spring Boot's "<<build-tool-plugins.adoc#build-tool-plugins, Build, +tool plugins>>", which you can use with Gradle or Maven.]