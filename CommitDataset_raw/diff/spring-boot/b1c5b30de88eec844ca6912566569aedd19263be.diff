[+++ b/spring-cli/samples/ui.groovy, +, +@Configuration, +@Log, +class MvcConfiguration extends WebMvcConfigurerAdapter {, +, +  @Override, +  void addInterceptors(def registry) { , +    log.info("Registering temporary file interceptor"), +    registry.addInterceptor(temporaryFileInterceptor()), +  }, +, +  @Bean, +  HandlerInterceptor temporaryFileInterceptor() {, +    log.info("Creating temporary file interceptor"), +    new HandlerInterceptorAdapter() {, +      @Override, +      postHandle(def request, def response, def handler, ModelAndView mav) { , +        log.info("Model: " + model), +      }, +    }, +  }, +}, +++ b/spring-cli/samples/ui.groovy, +, +@Configuration, +@Log, +class MvcConfiguration extends WebMvcConfigurerAdapter {, +, +  @Override, +  void addInterceptors(def registry) { , +    log.info("Registering temporary file interceptor"), +    registry.addInterceptor(temporaryFileInterceptor()), +  }, +, +  @Bean, +  HandlerInterceptor temporaryFileInterceptor() {, +    log.info("Creating temporary file interceptor"), +    new HandlerInterceptorAdapter() {, +      @Override, +      postHandle(def request, def response, def handler, ModelAndView mav) { , +        log.info("Model: " + model), +      }, +    }, +  }, +}, +++ b/spring-cli/src/main/java/org/springframework/cli/command/RunCommand.java, +		private OptionSpec<String> classpathOption;, +, +			this.classpathOption = option(asList("classpath", "cp"),, +					"Additional classpath entries").withRequiredArg();, +			@Override, +			public String getClasspath() {, +				if (this.options.has(RunOptionHandler.this.classpathOption)) {, +					return this.options.valueOf(RunOptionHandler.this.classpathOption);, +				}, +				return "";, +			}, +, +++ b/spring-cli/samples/ui.groovy, +, +@Configuration, +@Log, +class MvcConfiguration extends WebMvcConfigurerAdapter {, +, +  @Override, +  void addInterceptors(def registry) { , +    log.info("Registering temporary file interceptor"), +    registry.addInterceptor(temporaryFileInterceptor()), +  }, +, +  @Bean, +  HandlerInterceptor temporaryFileInterceptor() {, +    log.info("Creating temporary file interceptor"), +    new HandlerInterceptorAdapter() {, +      @Override, +      postHandle(def request, def response, def handler, ModelAndView mav) { , +        log.info("Model: " + model), +      }, +    }, +  }, +}, +++ b/spring-cli/src/main/java/org/springframework/cli/command/RunCommand.java, +		private OptionSpec<String> classpathOption;, +, +			this.classpathOption = option(asList("classpath", "cp"),, +					"Additional classpath entries").withRequiredArg();, +			@Override, +			public String getClasspath() {, +				if (this.options.has(RunOptionHandler.this.classpathOption)) {, +					return this.options.valueOf(RunOptionHandler.this.classpathOption);, +				}, +				return "";, +			}, +, +++ b/spring-cli/src/main/java/org/springframework/cli/command/ScriptCommand.java, +		@Override, +		public String getClasspath() {, +			return "";, +		}]