[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationReactiveIntegrationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.context.ApplicationContext;, +	private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(FreeMarkerAutoConfiguration.class));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(FreeMarkerViewResolver.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfigurer.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfig.class)).isNotNull();, +			assertThat(context.getBean(freemarker.template.Configuration.class)), +		});, +		this.contextRunner.run(context -> {, +			MockServerWebExchange exchange = render(context, "home");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.prefix:prefix/").run(context -> {, +			MockServerWebExchange exchange = render(context, "prefixed");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.suffix:.freemarker").run(context -> {, +			MockServerWebExchange exchange = render(context, "suffixed");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:classpath:/custom-templates/").run(context -> {, +			MockServerWebExchange exchange = render(context, "custom");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.settings.boolean_format:yup,nope"), +				.run(context -> assertThat(context.getBean(FreeMarkerConfigurer.class).getConfiguration(), +						.getSetting("boolean_format")).isEqualTo("yup,nope"));, +	public void renderTemplate() {, +		this.contextRunner.withPropertyValues().run(context -> {, +			FreeMarkerConfigurer freemarker = context, +		});, +	private MockServerWebExchange render(ApplicationContext context, String viewName) {, +		FreeMarkerViewResolver resolver = context, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationReactiveIntegrationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.context.ApplicationContext;, +	private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(FreeMarkerAutoConfiguration.class));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(FreeMarkerViewResolver.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfigurer.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfig.class)).isNotNull();, +			assertThat(context.getBean(freemarker.template.Configuration.class)), +		});, +		this.contextRunner.run(context -> {, +			MockServerWebExchange exchange = render(context, "home");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.prefix:prefix/").run(context -> {, +			MockServerWebExchange exchange = render(context, "prefixed");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.suffix:.freemarker").run(context -> {, +			MockServerWebExchange exchange = render(context, "suffixed");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:classpath:/custom-templates/").run(context -> {, +			MockServerWebExchange exchange = render(context, "custom");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.settings.boolean_format:yup,nope"), +				.run(context -> assertThat(context.getBean(FreeMarkerConfigurer.class).getConfiguration(), +						.getSetting("boolean_format")).isEqualTo("yup,nope"));, +	public void renderTemplate() {, +		this.contextRunner.withPropertyValues().run(context -> {, +			FreeMarkerConfigurer freemarker = context, +		});, +	private MockServerWebExchange render(ApplicationContext context, String viewName) {, +		FreeMarkerViewResolver resolver = context, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(FreeMarkerAutoConfiguration.class));, +	public void renderNonWebAppTemplate() {, +		this.contextRunner.run(context -> {, +			freemarker.template.Configuration freemarker = context, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/,classpath:/also-does-not-exist"), +				.run(context -> this.output.expect(containsString("Cannot find template location")));, +		this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:", +				+ "classpath:/templates/empty-directory/").run(context -> {, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/,classpath:/templates/empty-directory/").run(context -> {, +		});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationReactiveIntegrationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.context.ApplicationContext;, +	private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(FreeMarkerAutoConfiguration.class));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(FreeMarkerViewResolver.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfigurer.class)).isNotNull();, +			assertThat(context.getBean(FreeMarkerConfig.class)).isNotNull();, +			assertThat(context.getBean(freemarker.template.Configuration.class)), +		});, +		this.contextRunner.run(context -> {, +			MockServerWebExchange exchange = render(context, "home");, +		});, +		this.contextRunner.withPropertyValues("spring.freemarker.prefix:prefix/").run(context -> {]