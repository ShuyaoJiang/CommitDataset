[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobExecutionExitCodeGenerator.java, +			if (execution.getStatus().ordinal() > 0) {, +				return execution.getStatus().ordinal();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobExecutionExitCodeGenerator.java, +			if (execution.getStatus().ordinal() > 0) {, +				return execution.getStatus().ordinal();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.Collection;, +import java.util.Collections;, +	@Autowired(required = false), +	private Collection<Job> jobs = Collections.emptySet();, +		for (Job job : this.jobs) {, +			JobExecution execution = this.jobLauncher.run(job,, +}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobExecutionExitCodeGenerator.java, +			if (execution.getStatus().ordinal() > 0) {, +				return execution.getStatus().ordinal();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.Collection;, +import java.util.Collections;, +	@Autowired(required = false), +	private Collection<Job> jobs = Collections.emptySet();, +		for (Job job : this.jobs) {, +			JobExecution execution = this.jobLauncher.run(job,, +}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/YamlProcessor.java, +		MatchStatus matches(Properties properties);, +	public static enum MatchStatus {, +, +		/**, +		 * A match was found., +		 */, +		FOUND,, +		/**, +		 * A match was not found., +		 */, +		NOT_FOUND,, +		/**, +		 * Not enough information to decide., +		 */, +		ABSTAIN, +	}, +, +	 * Flag indicating that a document for which all the, +	 * {@link #setDocumentMatchers(List) document matchers} abstain will nevertheless, +	 * match., +			MatchStatus result = MatchStatus.ABSTAIN;, +				MatchStatus match = matcher.matches(properties);, +				result = match.ordinal() < result.ordinal() ? match : result;, +				if (match == MatchStatus.FOUND) {, +					logger.debug("Matched document with document matcher: " + properties);, +			if (result == MatchStatus.ABSTAIN && this.matchDefault) {, +		public MatchStatus matches(Properties properties) {, +				return MatchStatus.ABSTAIN;, +						return MatchStatus.FOUND;, +			return MatchStatus.NOT_FOUND;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobExecutionExitCodeGenerator.java, +			if (execution.getStatus().ordinal() > 0) {, +				return execution.getStatus().ordinal();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.Collection;, +import java.util.Collections;, +	@Autowired(required = false), +	private Collection<Job> jobs = Collections.emptySet();, +		for (Job job : this.jobs) {, +			JobExecution execution = this.jobLauncher.run(job,, +}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/YamlProcessor.java, +		MatchStatus matches(Properties properties);, +	public static enum MatchStatus {, +, +		/**, +		 * A match was found., +		 */, +		FOUND,, +		/**, +		 * A match was not found., +		 */, +		NOT_FOUND,, +		/**, +		 * Not enough information to decide., +		 */, +		ABSTAIN, +	}, +, +	 * Flag indicating that a document for which all the, +	 * {@link #setDocumentMatchers(List) document matchers} abstain will nevertheless, +	 * match., +			MatchStatus result = MatchStatus.ABSTAIN;, +				MatchStatus match = matcher.matches(properties);, +				result = match.ordinal() < result.ordinal() ? match : result;, +				if (match == MatchStatus.FOUND) {, +					logger.debug("Matched document with document matcher: " + properties);, +			if (result == MatchStatus.ABSTAIN && this.matchDefault) {, +		public MatchStatus matches(Properties properties) {, +				return MatchStatus.ABSTAIN;, +						return MatchStatus.FOUND;, +			return MatchStatus.NOT_FOUND;, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java, +import org.springframework.bootstrap.config.YamlProcessor.MatchStatus;]