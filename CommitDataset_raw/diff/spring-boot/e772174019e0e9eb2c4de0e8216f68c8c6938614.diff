[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +application "`in-place`". To use it you must be using Maven 3.2 (or better)., +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +application "`in-place`". To use it you must be using Maven 3.2 (or better)., +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +TIP: The http://cloud.spring.io/spring-cloud-connectors/[Spring Cloud Connectors] project, +is a better fit for tasks such as configuring a DataSource. Spring Boot includes, +auto-configuration support and a `spring-boot-starter-cloud-connectors` starter POM., +	-----> Installing Maven 3.2.3... *done*, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +application "`in-place`". To use it you must be using Maven 3.2 (or better)., +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +TIP: The http://cloud.spring.io/spring-cloud-connectors/[Spring Cloud Connectors] project, +is a better fit for tasks such as configuring a DataSource. Spring Boot includes, +auto-configuration support and a `spring-boot-starter-cloud-connectors` starter POM., +	-----> Installing Maven 3.2.3... *done*, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +Spring Boot is compatible with Apache Maven 3.2 or above. If you don't already have Maven, +Spring Boot is compatible with Gradle 1.12 or above. If you don't already have Gradle, +	Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T13:58:10-07:00), +can ignore the "`jar will be empty - no content was marked for inclusion!'`" warning for, +	........ Started Example in 2.536 seconds (JVM running for 2.864), +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +application "`in-place`". To use it you must be using Maven 3.2 (or better)., +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +TIP: The http://cloud.spring.io/spring-cloud-connectors/[Spring Cloud Connectors] project, +is a better fit for tasks such as configuring a DataSource. Spring Boot includes, +auto-configuration support and a `spring-boot-starter-cloud-connectors` starter POM., +	-----> Installing Maven 3.2.3... *done*, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +Spring Boot is compatible with Apache Maven 3.2 or above. If you don't already have Maven, +Spring Boot is compatible with Gradle 1.12 or above. If you don't already have Gradle, +	Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T13:58:10-07:00), +can ignore the "`jar will be empty - no content was marked for inclusion!'`" warning for, +	........ Started Example in 2.536 seconds (JVM running for 2.864), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Servlet 3.0+ applications with no `web.xml`., +Servlet 3.0+ applications might translate pretty easily if they already use the Spring, +Servlet 3.0+ initializer support classes. Normally all the code from an existing, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +application "`in-place`". To use it you must be using Maven 3.2 (or better)., +++ b/spring-boot-docs/src/main/asciidoc/cloud-deployment.adoc, +TIP: The http://cloud.spring.io/spring-cloud-connectors/[Spring Cloud Connectors] project, +is a better fit for tasks such as configuring a DataSource. Spring Boot includes, +auto-configuration support and a `spring-boot-starter-cloud-connectors` starter POM., +	-----> Installing Maven 3.2.3... *done*, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +Spring Boot is compatible with Apache Maven 3.2 or above. If you don't already have Maven, +Spring Boot is compatible with Gradle 1.12 or above. If you don't already have Gradle, +	Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T13:58:10-07:00), +can ignore the "`jar will be empty - no content was marked for inclusion!'`" warning for, +	........ Started Example in 2.536 seconds (JVM running for 2.864), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Servlet 3.0+ applications with no `web.xml`., +Servlet 3.0+ applications might translate pretty easily if they already use the Spring, +Servlet 3.0+ initializer support classes. Normally all the code from an existing, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +example, you probably don't want to publish details of your database server to the, +world. For this reason, by default, only the health status is exposed over an, +unauthenticated HTTP connection. If you are happy for complete heath information to always, +be exposed you can set `endpoints.health.sensitive` to `false`., +[cols="1,4"], +In addition to Spring Boot's predefined {sc-spring-boot-actuator}/health/Status.{sc-ext}[`Status`], +types, it is also possible for `Health` to return a custom `Status` that represents a, +new system state. In such cases a custom implementation of the, +	info.build.artifact=@project.artifactId@, +all enabled endpoints to be exposed over HTTP. The default convention is to use the, +=== Securing sensitive endpoints, +If you add '`Spring Security`' to you project, all sensitive endpoints exposed over HTTP, +will be protected. By default '`basic`' authentication will be used with the username, +`user` and a generated password (which is printed on the console when the application, +starts)., +[[production-ready-system-metrics]], +=== System metrics, +The following system metrics are exposed by Spring Boot:, +, +* The total system memory in Kb (`mem`), +* The amount of free memory in Kb (`mem.free`), +* The number of processors (`processors`), +* The system uptime in milliseconds (`uptime`), +* The application context uptime in milliseconds (`instance.uptime`), +* The average system load (`systemload.average`), +* Heap information in Kb (`heap`, `heap.committed`, `heap.init`, `heap.used`), +* Thread information (`threads`, `thread.peak`, `thead.daemon`), +* Class load information (`classes`, `classes.loaded`, `classes.unloaded`), +* Garbage collection information (`gc.xxx.count`, `gc.xxx.time`), +, +, +, +[[production-ready-session-metrics]], +=== Tomcat session metrics, +If you are using Tomcat as your embedded servlet container, session metrics will, +automatically be exposed. The `httpsessions.active` and `httpsessions.max` keys provide, +the number of active and maximum sessions., +, +, +, +=== Dropwizard Metrics, +User of the https://dropwizard.github.io/metrics/[Dropwizard '`Metrics`' library] will, +automatically find that Spring Boot metrics are published to]