[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;, +	public IgnoredRequestCustomizer managementIgnoredRequestCustomizer(, +			ManagementServerProperties management,, +			ObjectProvider<ManagementContextResolver> contextResolverProvider) {, +		return new ManagementIgnoredRequestCustomizer(management,, +				contextResolverProvider.getIfAvailable());, +	}, +, +	private class ManagementIgnoredRequestCustomizer implements IgnoredRequestCustomizer {, +, +		private final ManagementServerProperties management;, +, +		private final ManagementContextResolver contextResolver;, +, +		ManagementIgnoredRequestCustomizer(ManagementServerProperties management,, +				ManagementContextResolver contextResolver) {, +			this.management = management;, +			this.contextResolver = contextResolver;, +		}, +, +		@Override, +		public void customize(IgnoredRequestConfigurer configurer) {, +			if (!this.management.getSecurity().isEnabled()) {, +				RequestMatcher requestMatcher = LazyEndpointPathRequestMatcher, +						.getRequestMatcher(this.contextResolver);, +				configurer.requestMatchers(requestMatcher);, +			}, +, +		}, +			requests.anyRequest().authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;, +	public IgnoredRequestCustomizer managementIgnoredRequestCustomizer(, +			ManagementServerProperties management,, +			ObjectProvider<ManagementContextResolver> contextResolverProvider) {, +		return new ManagementIgnoredRequestCustomizer(management,, +				contextResolverProvider.getIfAvailable());, +	}, +, +	private class ManagementIgnoredRequestCustomizer implements IgnoredRequestCustomizer {, +, +		private final ManagementServerProperties management;, +, +		private final ManagementContextResolver contextResolver;, +, +		ManagementIgnoredRequestCustomizer(ManagementServerProperties management,, +				ManagementContextResolver contextResolver) {, +			this.management = management;, +			this.contextResolver = contextResolver;, +		}, +, +		@Override, +		public void customize(IgnoredRequestConfigurer configurer) {, +			if (!this.management.getSecurity().isEnabled()) {, +				RequestMatcher requestMatcher = LazyEndpointPathRequestMatcher, +						.getRequestMatcher(this.contextResolver);, +				configurer.requestMatchers(requestMatcher);, +			}, +, +		}, +			requests.anyRequest().authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryActuatorAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;, +import org.springframework.security.config.annotation.web.builders.WebSecurity;, +import org.springframework.security.web.util.matcher.AntPathRequestMatcher;, +	@Bean, +	public IgnoredRequestCustomizer cloudFoundryIgnoredRequestCustomizer() {, +		return new CloudFoundryIgnoredRequestCustomizer();, +	}, +, +	private class CloudFoundryIgnoredRequestCustomizer, +			implements IgnoredRequestCustomizer {, +, +		@Override, +		public void customize(WebSecurity.IgnoredRequestConfigurer configurer) {, +			configurer.requestMatchers(, +					new AntPathRequestMatcher("/cloudfoundryapplication/**"));, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer;, +	public IgnoredRequestCustomizer managementIgnoredRequestCustomizer(, +			ManagementServerProperties management,, +			ObjectProvider<ManagementContextResolver> contextResolverProvider) {, +		return new ManagementIgnoredRequestCustomizer(management,, +				contextResolverProvider.getIfAvailable());, +	}, +, +	private class ManagementIgnoredRequestCustomizer implements IgnoredRequestCustomizer {, +, +		private final ManagementServerProperties management;, +, +		private final ManagementContextResolver contextResolver;, +, +		ManagementIgnoredRequestCustomizer(ManagementServerProperties management,, +				ManagementContextResolver contextResolver) {, +			this.management = management;]