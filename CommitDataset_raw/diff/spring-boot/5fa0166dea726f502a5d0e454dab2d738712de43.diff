[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.spring.context.config.EnableReactor;, +@ConditionalOnClass(EnableReactor.class), +@EnableReactor, +	public Reactor rootReactor(Environment environment) {, +		return environment.getRootReactor();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.spring.context.config.EnableReactor;, +@ConditionalOnClass(EnableReactor.class), +@EnableReactor, +	public Reactor rootReactor(Environment environment) {, +		return environment.getRootReactor();, +++ b/spring-boot-cli/samples/reactor.groovy, +	@Selector(reactor="reactor", value="hello"), +	void receive(String data) {, +		log.info "Hello ${data}", +		latch.countDown(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.spring.context.config.EnableReactor;, +@ConditionalOnClass(EnableReactor.class), +@EnableReactor, +	public Reactor rootReactor(Environment environment) {, +		return environment.getRootReactor();, +++ b/spring-boot-cli/samples/reactor.groovy, +	@Selector(reactor="reactor", value="hello"), +	void receive(String data) {, +		log.info "Hello ${data}", +		latch.countDown(), +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +				"reactor.event.selector.Selectors", "reactor.spring.annotation.Selector",, +				"reactor.spring.annotation.ReplyTo",, +				"reactor.spring.context.config.EnableReactor").addStarImports(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.spring.context.config.EnableReactor;, +@ConditionalOnClass(EnableReactor.class), +@EnableReactor, +	public Reactor rootReactor(Environment environment) {, +		return environment.getRootReactor();, +++ b/spring-boot-cli/samples/reactor.groovy, +	@Selector(reactor="reactor", value="hello"), +	void receive(String data) {, +		log.info "Hello ${data}", +		latch.countDown(), +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +				"reactor.event.selector.Selectors", "reactor.spring.annotation.Selector",, +				"reactor.spring.annotation.ReplyTo",, +				"reactor.spring.context.config.EnableReactor").addStarImports(, +++ b/spring-boot-dependencies/pom.xml, +		<reactor.version>1.0.0.M2</reactor.version>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java, +import reactor.spring.context.config.EnableReactor;, +@ConditionalOnClass(EnableReactor.class), +@EnableReactor, +	public Reactor rootReactor(Environment environment) {, +		return environment.getRootReactor();, +++ b/spring-boot-cli/samples/reactor.groovy, +	@Selector(reactor="reactor", value="hello"), +	void receive(String data) {, +		log.info "Hello ${data}", +		latch.countDown(), +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java, +				"reactor.event.selector.Selectors", "reactor.spring.annotation.Selector",, +				"reactor.spring.annotation.ReplyTo",, +				"reactor.spring.context.config.EnableReactor").addStarImports(, +++ b/spring-boot-dependencies/pom.xml, +		<reactor.version>1.0.0.M2</reactor.version>, +++ b/spring-boot-starters/spring-boot-starter-parent/pom.xml]