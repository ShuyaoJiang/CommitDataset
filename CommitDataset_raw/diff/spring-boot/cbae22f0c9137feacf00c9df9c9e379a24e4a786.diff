[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	 * Minimum disk space that should be available., +	private DataSize threshold = DataSize.ofMegabytes(10);, +	public DataSize getThreshold() {, +	public void setThreshold(DataSize threshold) {, +		Assert.isTrue(!threshold.isNegative(), "threshold must be greater than 0");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	 * Minimum disk space that should be available., +	private DataSize threshold = DataSize.ofMegabytes(10);, +	public DataSize getThreshold() {, +	public void setThreshold(DataSize threshold) {, +		Assert.isTrue(!threshold.isNegative(), "threshold must be greater than 0");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	public void thresholdMustBePositive() {, +		this.contextRunner, +				.withPropertyValues("management.health.diskspace.threshold=-10MB"), +				.run((context) -> assertThat(context).hasFailed().getFailure(), +						.hasMessageContaining(, +								"Failed to bind properties under 'management.health.diskspace'"));, +	}, +, +	@Test, +	public void thresholdCanBeCustomized() {, +		this.contextRunner, +				.withPropertyValues("management.health.diskspace.threshold=20MB"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							context.getBean(DiskSpaceHealthIndicator.class));, +					assertThat(dfa.getPropertyValue("threshold")), +							.isEqualTo(DataSize.ofMegabytes(20));, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	 * Minimum disk space that should be available., +	private DataSize threshold = DataSize.ofMegabytes(10);, +	public DataSize getThreshold() {, +	public void setThreshold(DataSize threshold) {, +		Assert.isTrue(!threshold.isNegative(), "threshold must be greater than 0");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	public void thresholdMustBePositive() {, +		this.contextRunner, +				.withPropertyValues("management.health.diskspace.threshold=-10MB"), +				.run((context) -> assertThat(context).hasFailed().getFailure(), +						.hasMessageContaining(, +								"Failed to bind properties under 'management.health.diskspace'"));, +	}, +, +	@Test, +	public void thresholdCanBeCustomized() {, +		this.contextRunner, +				.withPropertyValues("management.health.diskspace.threshold=20MB"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(, +							context.getBean(DiskSpaceHealthIndicator.class));, +					assertThat(dfa.getPropertyValue("threshold")), +							.isEqualTo(DataSize.ofMegabytes(20));, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/DiskSpaceHealthIndicator.java, +import org.springframework.util.unit.DataSize;, + * @author Stephane Nicoll, +	private final DataSize threshold;, +	 * @param threshold the minimum disk space that should be available, +	public DiskSpaceHealthIndicator(File path, DataSize threshold) {, +	/**, +	 * Create a new {@code DiskSpaceHealthIndicator} instance., +	 * @param path the Path used to compute the available disk space, +	 * @param threshold the minimum disk space that should be available (in bytes), +	 * @deprecated since 2.1.0 in favour of, +	 * {@link #DiskSpaceHealthIndicator(File, DataSize)}, +	 */, +	@Deprecated, +	public DiskSpaceHealthIndicator(File path, long threshold) {, +		this(path, DataSize.ofBytes(threshold));, +	}, +, +		if (diskFreeInBytes >= this.threshold.toBytes()) {, +							+ "Available: %d bytes (threshold: %s)",, +				.withDetail("threshold", this.threshold.toBytes());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties.java]