[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +			.withConfiguration(, +					AutoConfigurations.of(DispatcherServletAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +				.run((context) -> {, +					assertThat(context).doesNotHaveBean(ServletRegistrationBean.class);, +					assertThat(context).doesNotHaveBean(DispatcherServlet.class);, +				.run((context) -> {, +					assertThat(registration.getServletName()), +							.isEqualTo("dispatcherServlet");, +					assertThat(context).getBeanNames(DispatcherServlet.class).hasSize(2);, +				.run((context) -> {, +					assertThat(registration.getUrlMappings().toString()), +							.isEqualTo("[/foo]");, +					assertThat(registration.getServletName()), +							.isEqualTo("customDispatcher");, +					assertThat(context).hasSingleBean(DispatcherServlet.class);, +				.run((context) -> {, +					assertThat(registration.getUrlMappings().toString()), +							.isEqualTo("[/spring/*]");, +				.run((context) -> {, +				.run((context) -> {, +					dispatcherServlet, +							.onApplicationEvent(new ContextRefreshedEvent(context));, +		this.contextRunner.run((context) -> {, +			DispatcherServlet dispatcherServlet = context, +					.getBean(DispatcherServlet.class);, +			assertThat(dispatcherServlet).extracting("throwExceptionIfNoHandlerFound"), +			assertThat(dispatcherServlet).extracting("dispatchOptionsRequest"), +					.containsExactly(true);, +			assertThat(dispatcherServlet).extracting("dispatchTraceRequest"), +					.containsExactly(false);, +		this.contextRunner, +				.withPropertyValues("spring.mvc.throw-exception-if-no-handler-found:true",, +				.run((context) -> {, +					DispatcherServlet dispatcherServlet = context, +							.getBean(DispatcherServlet.class);, +					assertThat(dispatcherServlet), +							.extracting("throwExceptionIfNoHandlerFound"), +					assertThat(dispatcherServlet).extracting("dispatchOptionsRequest"), +							.containsExactly(false);, +					assertThat(dispatcherServlet).extracting("dispatchTraceRequest"), +							.containsExactly(true);]