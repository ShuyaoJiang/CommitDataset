[+++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java, +		boolean environmentChanged = false;, +				environmentChanged = true;, +		if (environmentChanged) {, +			// Re-initialize the defaults in case the Environment changed, +			system.beforeInitialize();, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java, +		boolean environmentChanged = false;, +				environmentChanged = true;, +		if (environmentChanged) {, +			// Re-initialize the defaults in case the Environment changed, +			system.beforeInitialize();, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/listener/LoggingApplicationListenerTests.java, +import java.io.File;, +		new File("target/foo.log").delete();, +				"logging.file: target/foo.log");, +		assertTrue("Wrong output:\n" + output, output.startsWith("target/foo.log"));, +	}, +, +	@Test, +	public void testAddLogFilePropertyWithDefault() {, +		assertFalse(new File("target/foo.log").exists());, +		EnvironmentTestUtils.addEnvironment(this.context, "logging.file: target/foo.log");, +		this.initializer.initialize(this.context.getEnvironment(),, +				this.context.getClassLoader());, +		Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class);, +		logger.info("Hello world");, +		assertTrue(new File("target/foo.log").exists());, +				"logging.config: classpath:logback-nondefault.xml",, +				"logging.path: target/foo/");, +		assertTrue("Wrong output:\n" + output, output.startsWith("target/foo/spring.log"));]