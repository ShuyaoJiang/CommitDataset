[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java, +	private long localHeaderOffset;, +		this.localHeaderOffset = Bytes.littleEndianValue(header, 42, 4);, +	RandomAccessData getData() throws IOException {, +			// aspectjrt-1.7.4.jar has a different ext bytes length in the, +			// local directory to the central directory. We need to re-read, +			// here to skip them, +			byte[] localHeader = Bytes.get(this.source.getData().getSubsection(, +					this.localHeaderOffset, LOCAL_FILE_HEADER_SIZE));, +			long nameLength = Bytes.littleEndianValue(localHeader, 26, 2);, +			long extraLength = Bytes.littleEndianValue(localHeader, 28, 2);, +			this.data = this.source.getData().getSubsection(, +					this.localHeaderOffset + LOCAL_FILE_HEADER_SIZE + nameLength, +							+ extraLength, getCompressedSize());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntryData.java, +	private long localHeaderOffset;, +		this.localHeaderOffset = Bytes.littleEndianValue(header, 42, 4);, +	RandomAccessData getData() throws IOException {, +			// aspectjrt-1.7.4.jar has a different ext bytes length in the, +			// local directory to the central directory. We need to re-read, +			// here to skip them, +			byte[] localHeader = Bytes.get(this.source.getData().getSubsection(, +					this.localHeaderOffset, LOCAL_FILE_HEADER_SIZE));, +			long nameLength = Bytes.littleEndianValue(localHeader, 26, 2);, +			long extraLength = Bytes.littleEndianValue(localHeader, 28, 2);, +			this.data = this.source.getData().getSubsection(, +					this.localHeaderOffset + LOCAL_FILE_HEADER_SIZE + nameLength, +							+ extraLength, getCompressedSize());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/ZipInflaterInputStream.java, +		super(inputStream, new Inflater(true), getInflaterBufferSize(size));, +	private static int getInflaterBufferSize(long size) {, +		size += 2; // inflater likes some space, +		size = (size > 65536 ? 8192 : size);, +		size = (size <= 0 ? 4096 : size);, +		return (int) size;, +	}, +]