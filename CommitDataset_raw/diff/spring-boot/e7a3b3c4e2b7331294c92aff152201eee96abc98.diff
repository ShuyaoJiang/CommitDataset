[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporter.java, +			EndpointMBeanRegistrar endpointMBeanRegistrar, ObjectMapper objectMapper) {, +		Collection<EndpointMBean> mBeans = this.mBeanFactory, +				.createMBeans(this.endpointProvider.getEndpoints());, +			if (responseType.isArray(), +					|| Collection.class.isAssignableFrom(responseType)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporter.java, +			EndpointMBeanRegistrar endpointMBeanRegistrar, ObjectMapper objectMapper) {, +		Collection<EndpointMBean> mBeans = this.mBeanFactory, +				.createMBeans(this.endpointProvider.getEndpoints());, +			if (responseType.isArray(), +					|| Collection.class.isAssignableFrom(responseType)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +	 * @return the {@link EndpointEnablement} of that endpoint for the specified, +	 * {@link EndpointType}, +			return new EndpointEnablement(false, createDefaultEnablementMessage(, +					endpointId, enabledByDefault, endpointType));, +			EndpointEnablement anyTechGeneralOutcome = getAnyTechSpecificOutcomeFor(, +					"all");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporter.java, +			EndpointMBeanRegistrar endpointMBeanRegistrar, ObjectMapper objectMapper) {, +		Collection<EndpointMBean> mBeans = this.mBeanFactory, +				.createMBeans(this.endpointProvider.getEndpoints());, +			if (responseType.isArray(), +					|| Collection.class.isAssignableFrom(responseType)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +	 * @return the {@link EndpointEnablement} of that endpoint for the specified, +	 * {@link EndpointType}, +			return new EndpointEnablement(false, createDefaultEnablementMessage(, +					endpointId, enabledByDefault, endpointType));, +			EndpointEnablement anyTechGeneralOutcome = getAnyTechSpecificOutcomeFor(, +					"all");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthWebEndpointExtension.java, +		return new WebEndpointResponse<>(health, status);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporter.java, +			EndpointMBeanRegistrar endpointMBeanRegistrar, ObjectMapper objectMapper) {, +		Collection<EndpointMBean> mBeans = this.mBeanFactory, +				.createMBeans(this.endpointProvider.getEndpoints());, +			if (responseType.isArray(), +					|| Collection.class.isAssignableFrom(responseType)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +	 * @return the {@link EndpointEnablement} of that endpoint for the specified, +	 * {@link EndpointType}, +			return new EndpointEnablement(false, createDefaultEnablementMessage(, +					endpointId, enabledByDefault, endpointType));, +			EndpointEnablement anyTechGeneralOutcome = getAnyTechSpecificOutcomeFor(, +					"all");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthWebEndpointExtension.java, +		return new WebEndpointResponse<>(health, status);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactoryTests.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ServletWebManagementContextFactory.java, +		List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/CachingConfigurationFactory.java, + * A {@link CachingConfiguration} factory that use the {@link Environment} to extract the, + * caching settings of each endpoint., +class CachingConfigurationFactory implements Function<String, CachingConfiguration> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporter.java, +			EndpointMBeanRegistrar endpointMBeanRegistrar, ObjectMapper objectMapper) {, +		Collection<EndpointMBean> mBeans = this.mBeanFactory, +				.createMBeans(this.endpointProvider.getEndpoints());, +			if (responseType.isArray(), +					|| Collection.class.isAssignableFrom(responseType)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +	 * @return the {@link EndpointEnablement} of that endpoint for the specified, +	 * {@link EndpointType}, +			return new EndpointEnablement(false, createDefaultEnablementMessage(, +					endpointId, enabledByDefault, endpointType));, +			EndpointEnablement anyTechGeneralOutcome = getAnyTechSpecificOutcomeFor(]