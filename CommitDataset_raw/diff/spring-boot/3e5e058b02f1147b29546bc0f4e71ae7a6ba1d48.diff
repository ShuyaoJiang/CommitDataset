[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.context.annotation.Configuration;, +import org.springframework.web.servlet.view.BeanNameViewResolver;, +	@Configuration, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	protected static class WhitelabelErrorViewConfiguration {, +, +		// If the user adds @EnableWebMvc then the bean name view resolver from, +		// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment., +		@Bean, +		@ConditionalOnMissingBean(BeanNameViewResolver.class), +		public BeanNameViewResolver beanNameViewResolver() {, +			BeanNameViewResolver resolver = new BeanNameViewResolver();, +			resolver.setOrder(0);, +			return resolver;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.context.annotation.Configuration;, +import org.springframework.web.servlet.view.BeanNameViewResolver;, +	@Configuration, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	protected static class WhitelabelErrorViewConfiguration {, +, +		// If the user adds @EnableWebMvc then the bean name view resolver from, +		// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment., +		@Bean, +		@ConditionalOnMissingBean(BeanNameViewResolver.class), +		public BeanNameViewResolver beanNameViewResolver() {, +			BeanNameViewResolver resolver = new BeanNameViewResolver();, +			resolver.setOrder(0);, +			return resolver;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Map;, +, +import org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration;, +import static org.junit.Assert.assertTrue;, +	public void healthEndpoint() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(EndpointAutoConfiguration.class,, +				EmbeddedDataSourceConfiguration.class);, +		this.context.refresh();, +		HealthEndpoint<?> bean = this.context.getBean(HealthEndpoint.class);, +		assertNotNull(bean);, +		@SuppressWarnings("unchecked"), +		Map<String, Object> result = (Map<String, Object>) bean.invoke();, +		assertNotNull(result);, +		assertTrue("Wrong result: " + result, result.containsKey("status"));, +		assertTrue("Wrong result: " + result, result.containsKey("database"));, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import org.springframework.context.annotation.Configuration;, +import org.springframework.web.servlet.view.BeanNameViewResolver;, +	@Configuration, +	@ConditionalOnExpression("${error.whitelabel.enabled:true}"), +	@Conditional(ErrorTemplateMissingCondition.class), +	protected static class WhitelabelErrorViewConfiguration {, +, +		// If the user adds @EnableWebMvc then the bean name view resolver from, +		// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment., +		@Bean, +		@ConditionalOnMissingBean(BeanNameViewResolver.class), +		public BeanNameViewResolver beanNameViewResolver() {, +			BeanNameViewResolver resolver = new BeanNameViewResolver();, +			resolver.setOrder(0);, +			return resolver;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +import java.util.Map;, +, +import org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration;, +import static org.junit.Assert.assertTrue;, +	public void healthEndpoint() {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(EndpointAutoConfiguration.class,, +				EmbeddedDataSourceConfiguration.class);, +		this.context.refresh();, +		HealthEndpoint<?> bean = this.context.getBean(HealthEndpoint.class);, +		assertNotNull(bean);, +		@SuppressWarnings("unchecked"), +		Map<String, Object> result = (Map<String, Object>) bean.invoke();, +		assertNotNull(result);, +		assertTrue("Wrong result: " + result, result.containsKey("status"));, +		assertTrue("Wrong result: " + result, result.containsKey("database"));, +	}, +, +	@Test]