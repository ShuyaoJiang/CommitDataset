[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +import java.time.Duration;, +import java.util.function.Consumer;, +	private final RequestFactoryCustomizer requestFactoryCustomizer;, +		this.requestFactoryCustomizer = new RequestFactoryCustomizer();, +			RequestFactoryCustomizer requestFactoryCustomizer,, +		this.requestFactoryCustomizer = requestFactoryCustomizer;, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.requestFactoryCustomizer, this.interceptors);, +				this.requestFactoryCustomizer, this.interceptors);, +				this.requestFactoryCustomizer, this.interceptors);, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.requestFactoryCustomizer, this.interceptors);, +				this.requestFactoryCustomizer, this.interceptors);, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.restTemplateCustomizers, this.requestFactoryCustomizer,, +				this.requestFactoryCustomizer, this.interceptors);, +				this.requestFactoryCustomizer, this.interceptors);, +	}, +, +	/**, +	 * Sets the connection timeout on the underlying {@link ClientHttpRequestFactory}., +	 * @param connectTimeout the connection timeout, +	 * @return a new builder instance., +	 * @since 2.1.0, +	 */, +	public RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {, +		return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,, +				this.messageConverters, this.requestFactorySupplier,, +				this.uriTemplateHandler, this.errorHandler, this.basicAuthorization,, +				this.restTemplateCustomizers,, +				this.requestFactoryCustomizer.connectTimeout(connectTimeout),, +				this.interceptors);, +	 * @deprecated since 2.1.0 in favor of {@link #setConnectTimeout(Duration)}, +	@Deprecated, +		return setConnectTimeout(Duration.ofMillis(connectTimeout));, +	}, +, +	/**, +	 * Sets the read timeout on the underlying {@link ClientHttpRequestFactory}., +	 * @param readTimeout the read timeout, +	 * @return a new builder instance., +	 * @since 2.1.0, +	 */, +	public RestTemplateBuilder setReadTimeout(Duration readTimeout) {, +				this.requestFactoryCustomizer.readTimeout(readTimeout),, +	 * @deprecated since 2.1.0 in favour of {@link #setReadTimeout(Duration)}, +	@Deprecated, +		return setReadTimeout(Duration.ofMillis(readTimeout));, +			if (this.requestFactoryCustomizer != null) {, +				this.requestFactoryCustomizer.accept(requestFactory);, +	private <T> Set<T> append(Set<T> set, Collection<? extends T> additions) {, +		Set<T> result = new LinkedHashSet<>(set != null ? set : Collections.emptySet());, +		result.addAll(additions);, +		return Collections.unmodifiableSet(result);, +	}, +, +	private static class RequestFactoryCustomizer, +			implements Consumer<ClientHttpRequestFactory> {, +, +		private final Duration connectTimeout;, +, +		private final Duration readTimeout;, +, +		RequestFactoryCustomizer() {, +			this(null, null);, +		}, +, +		private RequestFactoryCustomizer(Duration connectTimeout, Duration readTimeout) {, +			this.connectTimeout = connectTimeout;, +			this.readTimeout = readTimeout;, +		}, +, +		public RequestFactoryCustomizer connectTimeout(Duration connectTimeout) {, +			return new RequestFactoryCustomizer(connectTimeout, this.readTimeout);, +		}, +, +		public RequestFactoryCustomizer readTimeout(Duration readTimeout) {, +			return new RequestFactoryCustomizer(this.connectTimeout, readTimeout);, +		}, +, +		@Override, +		public void accept(ClientHttpRequestFactory requestFactory) {, +			ClientHttpRequestFactory unwrappedRequestFactory = unwrapRequestFactoryIfNecessary(, +					requestFactory);, +			if (this.connectTimeout != null) {, +				new TimeoutRequestFactoryCustomizer(this.connectTimeout,, +						"setConnectTimeout").customize(unwrappedRequestFactory);, +			}, +			if (this.readTimeout != null) {, +				new TimeoutRequestFactoryCustomizer(this.readTimeout, "setReadTimeout"), +						.customize(unwrappedRequestFactory);, +			}, +		}, +, +		 * {@link ClientHttpRequestFactory} customizer to call a "set timeout" method., +		private static final class TimeoutRequestFactoryCustomizer {, +			private final Duration timeout;]