[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import ch.qos.logback.classic.LoggerContext;, +import org.slf4j.ILoggerFactory;, +import org.slf4j.LoggerFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +		@ConditionalOnClass(name = { "ch.qos.logback.classic.LoggerContext",, +				"org.slf4j.LoggerFactory" }), +		@Conditional(LogbackLoggingCondition.class), +	static class LogbackLoggingCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("LogbackLoggingCondition");, +			if (loggerFactory instanceof LoggerContext) {, +				return ConditionOutcome.match(, +						message.because("ILoggerFactory is a Logback LoggerContext"));, +			}, +			return ConditionOutcome, +					.noMatch(message.because("ILoggerFactory is an instance of ", +							+ loggerFactory.getClass().getCanonicalName()));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>ch.qos.logback</groupId>, +			<artifactId>logback-classic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +import ch.qos.logback.classic.LoggerContext;, +import org.slf4j.ILoggerFactory;, +import org.slf4j.LoggerFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +		@ConditionalOnClass(name = { "ch.qos.logback.classic.LoggerContext",, +				"org.slf4j.LoggerFactory" }), +		@Conditional(LogbackLoggingCondition.class), +	static class LogbackLoggingCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("LogbackLoggingCondition");, +			if (loggerFactory instanceof LoggerContext) {, +				return ConditionOutcome.match(, +						message.because("ILoggerFactory is a Logback LoggerContext"));, +			}, +			return ConditionOutcome, +					.noMatch(message.because("ILoggerFactory is an instance of ", +							+ loggerFactory.getClass().getCanonicalName()));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationWithLog4j2AndLogbackTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics;]