[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +@ConfigurationProperties("endpoints.env"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +@ConfigurationProperties("endpoints.env"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.env.Environment;, +	public void keysToSanitizeCanBeConfiguredViaTheEnvironment() throws Exception {, +		ApplicationContextRunner tester = new ApplicationContextRunner(), +				.withSystemProperties("dbPassword=123456", "apiKey=123456"), +				.withPropertyValues("endpoints.env.keys-to-sanitize=.*pass.*"), +				.withUserConfiguration(Config.class);, +		tester.run((context) -> {, +			EnvironmentEndpoint endpoint = context, +					.getBean(EnvironmentEndpoint.class);, +			EnvironmentDescriptor env = endpoint.environment(null);, +			Map<String, PropertyValueDescriptor> systemProperties = getSource(, +					"systemProperties", env).getProperties();, +			assertThat(systemProperties.get("dbPassword").getValue()).isEqualTo("******");, +			assertThat(systemProperties.get("apiKey").getValue()).isEqualTo("123456");, +		});, +	}, +, +	@Test, +, +	@Configuration, +	@EnableConfigurationProperties, +	static class Config {, +, +		@Bean, +		public EnvironmentEndpoint environmentEndpoint(Environment environment) {, +			return new EnvironmentEndpoint(environment);, +		}, +, +	}, +, +]