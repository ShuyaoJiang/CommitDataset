[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	private final AnnotationConfigEmbeddedWebApplicationContext applicationContext = new AnnotationConfigEmbeddedWebApplicationContext();, +				"management.context-path=", "management.security.enabled=false",, +				"server.servlet.context-path=", "server.port=" + ports.get().server);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "management.port=0",, +				"management.security.enabled=false");, +				"management.port=" + ports.get().management, "server.ssl.enabled=true",, +				"server.ssl.key-store=classpath:test.jks",, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	private final AnnotationConfigEmbeddedWebApplicationContext applicationContext = new AnnotationConfigEmbeddedWebApplicationContext();, +				"management.context-path=", "management.security.enabled=false",, +				"server.servlet.context-path=", "server.port=" + ports.get().server);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "management.port=0",, +				"management.security.enabled=false");, +				"management.port=" + ports.get().management, "server.ssl.enabled=true",, +				"server.ssl.key-store=classpath:test.jks",, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance existingHazelcastInstance), +			throws IOException {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	private final AnnotationConfigEmbeddedWebApplicationContext applicationContext = new AnnotationConfigEmbeddedWebApplicationContext();, +				"management.context-path=", "management.security.enabled=false",, +				"server.servlet.context-path=", "server.port=" + ports.get().server);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "management.port=0",, +				"management.security.enabled=false");, +				"management.port=" + ports.get().management, "server.ssl.enabled=true",, +				"server.ssl.key-store=classpath:test.jks",, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance existingHazelcastInstance), +			throws IOException {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +			boolean finalOutcome = (required, +					? servletOutcome.isMatch() && reactiveOutcome.isMatch(), +					: servletOutcome.isMatch() || reactiveOutcome.isMatch());, +			return new ConditionOutcome(finalOutcome,, +					message.because(servletOutcome.getMessage()).append("and"), +							.append(reactiveOutcome.getMessage()));, +			return ConditionOutcome, +					.match(message.foundExactly("ReactiveWebApplicationContext"));, +		return ConditionOutcome, +				.noMatch(message.because("not a reactive web application"));, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnWebApplication.class.getName());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	private final AnnotationConfigEmbeddedWebApplicationContext applicationContext = new AnnotationConfigEmbeddedWebApplicationContext();, +				"management.context-path=", "management.security.enabled=false",, +				"server.servlet.context-path=", "server.port=" + ports.get().server);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "management.port=0",, +				"management.security.enabled=false");, +				"management.port=" + ports.get().management, "server.ssl.enabled=true",, +				"server.ssl.key-store=classpath:test.jks",, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance existingHazelcastInstance), +			throws IOException {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +			boolean finalOutcome = (required, +					? servletOutcome.isMatch() && reactiveOutcome.isMatch(), +					: servletOutcome.isMatch() || reactiveOutcome.isMatch());, +			return new ConditionOutcome(finalOutcome,, +					message.because(servletOutcome.getMessage()).append("and"), +							.append(reactiveOutcome.getMessage()));, +			return ConditionOutcome, +					.match(message.foundExactly("ReactiveWebApplicationContext"));, +		return ConditionOutcome, +				.noMatch(message.because("not a reactive web application"));, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnWebApplication.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/ReactiveMongoRepositoriesAutoConfigureRegistrar.java, +class ReactiveMongoRepositoriesAutoConfigureRegistrar, +		extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	private final AnnotationConfigEmbeddedWebApplicationContext applicationContext = new AnnotationConfigEmbeddedWebApplicationContext();, +				"management.context-path=", "management.security.enabled=false",, +				"server.servlet.context-path=", "server.port=" + ports.get().server);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "management.port=0",, +				"management.security.enabled=false");, +				"management.port=" + ports.get().management, "server.ssl.enabled=true",, +				"server.ssl.key-store=classpath:test.jks",, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +	public HazelcastCacheManager cacheManager(HazelcastInstance existingHazelcastInstance), +			throws IOException {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +			boolean finalOutcome = (required, +					? servletOutcome.isMatch() && reactiveOutcome.isMatch(), +					: servletOutcome.isMatch() || reactiveOutcome.isMatch());, +			return new ConditionOutcome(finalOutcome,, +					message.because(servletOutcome.getMessage()).append("and"), +							.append(reactiveOutcome.getMessage()));, +			return ConditionOutcome, +					.match(message.foundExactly("ReactiveWebApplicationContext"));, +		return ConditionOutcome, +				.noMatch(message.because("not a reactive web application"));, +		Map<String, Object> attributes = metadata, +				.getAnnotationAttributes(ConditionalOnWebApplication.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/ReactiveMongoRepositoriesAutoConfigureRegistrar.java]