[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +	private static abstract class AbstractDelegateConfiguration implements, +			EnvironmentAware {, +		private RelaxedPropertyResolver environment;, +		@Override, +		public void setEnvironment(Environment environment) {, +			this.environment = new RelaxedPropertyResolver(environment,, +					"spring.mobile.devicedelegatingviewresolver.");, +		}, +		protected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(, +				ViewResolver delegate, int delegateOrder) {, +			LiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(, +					delegate);, +			resolver.setNormalPrefix(getProperty("normal-prefix", ""));, +			resolver.setNormalSuffix(getProperty("normal-suffix", ""));, +			resolver.setMobilePrefix(getProperty("mobile-prefix", "mobile/"));, +			resolver.setMobileSuffix(getProperty("mobile-suffix", ""));, +			resolver.setTabletPrefix(getProperty("tablet-prefix", "tablet/"));, +			resolver.setTabletSuffix(getProperty("tablet-suffix", ""));, +			resolver.setOrder(getAdjustedOrder(delegateOrder));, +			return resolver;, +		}, +		private String getProperty(String key, String defaultValue) {, +			return this.environment.getProperty(key, defaultValue);, +		}, +		private int getAdjustedOrder(int order) {, +			if (order == Ordered.HIGHEST_PRECEDENCE) {, +				return Ordered.HIGHEST_PRECEDENCE;, +			}, +			// The view resolver must be ordered higher than the delegate view, +			// resolver, otherwise the view names will not be adjusted, +			return order - 1;, +		}, +, +	}, +	@ConditionalOnExpression("${spring.mobile.devicedelegatingviewresolver.enabled:false}"), +			private ThymeleafViewResolver viewResolver;, +					logger.debug("LiteDeviceDelegatingViewResolver delegates to ", +							+ "ThymeleafViewResolver");, +				return getConfiguredViewResolver(this.viewResolver,, +						this.viewResolver.getOrder());, +			private InternalResourceViewResolver viewResolver;, +					logger.debug("LiteDeviceDelegatingViewResolver delegates to ", +							+ "InternalResourceViewResolver");, +				return getConfiguredViewResolver(this.viewResolver,, +						this.viewResolver.getOrder());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +	private static abstract class AbstractDelegateConfiguration implements, +			EnvironmentAware {, +		private RelaxedPropertyResolver environment;, +		@Override, +		public void setEnvironment(Environment environment) {, +			this.environment = new RelaxedPropertyResolver(environment,, +					"spring.mobile.devicedelegatingviewresolver.");, +		}, +		protected LiteDeviceDelegatingViewResolver getConfiguredViewResolver(, +				ViewResolver delegate, int delegateOrder) {, +			LiteDeviceDelegatingViewResolver resolver = new LiteDeviceDelegatingViewResolver(, +					delegate);, +			resolver.setNormalPrefix(getProperty("normal-prefix", ""));, +			resolver.setNormalSuffix(getProperty("normal-suffix", ""));, +			resolver.setMobilePrefix(getProperty("mobile-prefix", "mobile/"));, +			resolver.setMobileSuffix(getProperty("mobile-suffix", ""));, +			resolver.setTabletPrefix(getProperty("tablet-prefix", "tablet/"));, +			resolver.setTabletSuffix(getProperty("tablet-suffix", ""));, +			resolver.setOrder(getAdjustedOrder(delegateOrder));, +			return resolver;, +		}, +		private String getProperty(String key, String defaultValue) {, +			return this.environment.getProperty(key, defaultValue);, +		}, +		private int getAdjustedOrder(int order) {, +			if (order == Ordered.HIGHEST_PRECEDENCE) {, +				return Ordered.HIGHEST_PRECEDENCE;, +			}, +			// The view resolver must be ordered higher than the delegate view, +			// resolver, otherwise the view names will not be adjusted, +			return order - 1;, +		}, +, +	}, +	@ConditionalOnExpression("${spring.mobile.devicedelegatingviewresolver.enabled:false}"), +			private ThymeleafViewResolver viewResolver;, +					logger.debug("LiteDeviceDelegatingViewResolver delegates to ", +							+ "ThymeleafViewResolver");, +				return getConfiguredViewResolver(this.viewResolver,, +						this.viewResolver.getOrder());, +			private InternalResourceViewResolver viewResolver;, +					logger.debug("LiteDeviceDelegatingViewResolver delegates to ", +							+ "InternalResourceViewResolver");, +				return getConfiguredViewResolver(this.viewResolver,, +						this.viewResolver.getOrder());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java, +@ConditionalOnExpression("${spring.mobile.sitepreference.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +	private static abstract class AbstractDelegateConfiguration implements, +			EnvironmentAware {, +		private RelaxedPropertyResolver environment;, +		@Override, +		public void setEnvironment(Environment environment) {]