[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, +import java.sql.SQLException;, +, +import javax.annotation.PreDestroy;, +import org.springframework.dao.DataAccessResourceFailureException;, +	private BasicDataSource pool;, +		this.pool = new BasicDataSource();, +		this.pool.setDriverClassName(getDriverClassName());, +		this.pool.setUrl(getUrl());, +		this.pool.setUsername(getUsername());, +		this.pool.setPassword(getPassword());, +		return this.pool;, +	}, +, +	@PreDestroy, +	public void close() {, +		if (this.pool != null) {, +			try {, +				this.pool.close();, +			} catch (SQLException e) {, +				throw new DataAccessResourceFailureException(, +						"Could not close data source", e);, +			}, +		}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, +import java.sql.SQLException;, +, +import javax.annotation.PreDestroy;, +import org.springframework.dao.DataAccessResourceFailureException;, +	private BasicDataSource pool;, +		this.pool = new BasicDataSource();, +		this.pool.setDriverClassName(getDriverClassName());, +		this.pool.setUrl(getUrl());, +		this.pool.setUsername(getUsername());, +		this.pool.setPassword(getPassword());, +		return this.pool;, +	}, +, +	@PreDestroy, +	public void close() {, +		if (this.pool != null) {, +			try {, +				this.pool.close();, +			} catch (SQLException e) {, +				throw new DataAccessResourceFailureException(, +						"Could not close data source", e);, +			}, +		}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseConfiguration.java, +import javax.annotation.PreDestroy;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;, +, +	private EmbeddedDatabase database;, +, +, +		EMBEDDED_DATABASE_DRIVER_CLASSES.put(EmbeddedDatabaseType.H2, "org.h2.Driver");, +		EMBEDDED_DATABASE_DRIVER_CLASSES.put(EmbeddedDatabaseType.DERBY,, +				"org.apache.derby.jdbc.EmbeddedDriver");, +, +		EMBEDDED_DATABASE_URLS.put(EmbeddedDatabaseType.H2,, +				"jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1");, +		EMBEDDED_DATABASE_URLS.put(EmbeddedDatabaseType.DERBY,, +				"jdbc:derby:memory:testdb;create=true");, +, +		this.database = builder.build();, +		return this.database;, +	}, +, +	@PreDestroy, +	public void close() {, +		if (this.database != null) {, +			this.database.shutdown();, +		}, +		for (Map.Entry<EmbeddedDatabaseType, String> entry : EMBEDDED_DATABASE_DRIVER_CLASSES, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java, +import java.sql.SQLException;, +, +import javax.annotation.PreDestroy;, +import org.springframework.dao.DataAccessResourceFailureException;, +	private BasicDataSource pool;, +		this.pool = new BasicDataSource();, +		this.pool.setDriverClassName(getDriverClassName());, +		this.pool.setUrl(getUrl());, +		this.pool.setUsername(getUsername());, +		this.pool.setPassword(getPassword());, +		return this.pool;, +	}, +, +	@PreDestroy, +	public void close() {, +		if (this.pool != null) {, +			try {, +				this.pool.close();, +			} catch (SQLException e) {, +				throw new DataAccessResourceFailureException(, +						"Could not close data source", e);, +			}, +		}, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseConfiguration.java, +import javax.annotation.PreDestroy;]