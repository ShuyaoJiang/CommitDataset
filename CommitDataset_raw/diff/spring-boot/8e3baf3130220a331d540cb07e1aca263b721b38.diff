[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for, + * {@link org.springframework.core.codec.Encoder Encoders} and, + * {@link org.springframework.core.codec.Decoder Decoders}., + *, + * @since 2.0.0, +	private static final MimeType[] EMPTY_MIME_TYPES = {};, +, +			return (configurer) -> {, +				defaults.jackson2Decoder(, +						new Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));, +				defaults.jackson2Encoder(, +						new Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		Result result = session.query(CYPHER, Collections.emptyMap());, +		int nodes = (int) result.queryResults().iterator().next().get("nodes");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +	public final ContextLoader contextLoader = ContextLoader.standard().autoConfig(, +			HealthIndicatorAutoConfiguration.class, ManagementServerProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/Neo4jHealthIndicatorTests.java, +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +		given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for, + * {@link org.springframework.core.codec.Encoder Encoders} and, + * {@link org.springframework.core.codec.Decoder Decoders}., + *, + * @since 2.0.0]