[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.web.multipart.MultipartResolver;, +		@Bean, +		@ConditionalOnBean(MultipartResolver.class), +		@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +		public MultipartResolver multipartResolver(MultipartResolver resolver) {, +			// Detect if the user has created a MultipartResolver but named it incorrectly, +			return resolver;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.web.multipart.MultipartResolver;, +		@Bean, +		@ConditionalOnBean(MultipartResolver.class), +		@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +		public MultipartResolver multipartResolver(MultipartResolver resolver) {, +			// Detect if the user has created a MultipartResolver but named it incorrectly, +			return resolver;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +import org.springframework.web.servlet.DispatcherServlet;, +	@ConditionalOnMissingBean(value = { MultipartConfigElement.class,, +			MultipartResolver.class }), +	@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.web.multipart.MultipartResolver;, +		@Bean, +		@ConditionalOnBean(MultipartResolver.class), +		@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +		public MultipartResolver multipartResolver(MultipartResolver resolver) {, +			// Detect if the user has created a MultipartResolver but named it incorrectly, +			return resolver;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +import org.springframework.web.servlet.DispatcherServlet;, +	@ConditionalOnMissingBean(value = { MultipartConfigElement.class,, +			MultipartResolver.class }), +	@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfigurationTests.java, +import javax.servlet.http.HttpServletRequest;, +import org.springframework.context.event.ContextRefreshedEvent;, +import org.springframework.web.multipart.MultipartException;, +import org.springframework.web.multipart.MultipartHttpServletRequest;, +import org.springframework.web.multipart.MultipartResolver;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void renamesMultipartResolver() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(MultipartResolverConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		this.context.refresh();, +		DispatcherServlet dispatcherServlet = this.context, +				.getBean(DispatcherServlet.class);, +		dispatcherServlet.onApplicationEvent(new ContextRefreshedEvent(this.context));, +		assertThat(dispatcherServlet.getMultipartResolver(),, +				instanceOf(MockMultipartResolver.class));, +	}, +, +, +, +, +, +	}, +, +	@Configuration, +	protected static class MultipartResolverConfiguration {, +, +		@Bean, +		public MultipartResolver getMultipartResolver() {, +			return new MockMultipartResolver();, +		}, +, +	}, +, +	private static class MockMultipartResolver implements MultipartResolver {, +, +		@Override, +		public boolean isMultipart(HttpServletRequest request) {, +			return false;, +		}, +, +		@Override, +		public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request), +				throws MultipartException {, +			return null;, +		}, +, +		@Override, +		public void cleanupMultipart(MultipartHttpServletRequest request) {]