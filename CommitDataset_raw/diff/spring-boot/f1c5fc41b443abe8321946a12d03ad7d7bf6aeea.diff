[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/StatusReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +			return new WebEndpointResponse<>(Health.status(health.getStatus()).build(),, +					status);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/StatusReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +			return new WebEndpointResponse<>(Health.status(health.getStatus()).build(),, +					status);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractReactiveHealthIndicator.java, +public abstract class AbstractReactiveHealthIndicator implements ReactiveHealthIndicator {, +				.onErrorResume((ex) -> Mono.just(new Health.Builder().down(ex).build()));, +	 * Actual health check logic. If an error occurs in the pipeline it will be handled, +	 * automatically., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/StatusReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +			return new WebEndpointResponse<>(Health.status(health.getStatus()).build(),, +					status);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractReactiveHealthIndicator.java, +public abstract class AbstractReactiveHealthIndicator implements ReactiveHealthIndicator {, +				.onErrorResume((ex) -> Mono.just(new Health.Builder().down(ex).build()));, +	 * Actual health check logic. If an error occurs in the pipeline it will be handled, +	 * automatically., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicatorFactory.java, +	public CompositeHealthIndicator createHealthIndicator(, +			HealthAggregator healthAggregator,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/ReactiveHealthIndicatorsConfiguration.java, +			CompositeReactiveHealthIndicatorConfiguration<RedisReactiveHealthIndicator, ReactiveRedisConnectionFactory> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/HealthReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/StatusReactiveWebEndpointExtension.java, +		return this.delegate.health().map((health) -> {, +			return new WebEndpointResponse<>(Health.status(health.getStatus()).build(),, +					status);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractReactiveHealthIndicator.java, +public abstract class AbstractReactiveHealthIndicator implements ReactiveHealthIndicator {, +				.onErrorResume((ex) -> Mono.just(new Health.Builder().down(ex).build()));, +	 * Actual health check logic. If an error occurs in the pipeline it will be handled, +	 * automatically., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicatorFactory.java, +	public CompositeHealthIndicator createHealthIndicator(, +			HealthAggregator healthAggregator,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +		this.timeoutCompose = (mono) -> this.timeout != null ? mono.timeout(, +				Duration.ofMillis(this.timeout), Mono.just(this.timeoutHealth)) : mono;, +	 * @param timeout number of milliseconds to wait before using the, +	 * {@code timeoutHealth}, +	 * {@code timeout}, +				.flatMap((entry) -> Mono.just(entry.getKey()), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +				reactiveHealthIndicators.forEach((beanName, indicator) -> allIndicators, +						.computeIfAbsent(beanName, n -> adapt(indicator)));]