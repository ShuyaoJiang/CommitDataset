[+++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/main/resources/banner.txt, +   ,--.   ,--., +   \  /-~-\  /, +    )' a a `(, +   (  ,---.  ), +    `(_o_o_)', +      )`-'(, +, +Spring Boot${spring-boot.formatted-version}, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/main/resources/banner.txt, +   ,--.   ,--., +   \  /-~-\  /, +    )' a a `(, +   (  ,---.  ), +    `(_o_o_)', +      )`-'(, +, +Spring Boot${spring-boot.formatted-version}, +++ b/spring-boot-starters/spring-boot-starter-remote-shell/src/main/resources/commands/crash/login.groovy, +, +	def environment = crash.context.attributes['spring.environment'], +	def propertyResolver = new org.springframework.boot.bind.RelaxedPropertyResolver(environment, "spring.main.");, +	def beanFactory = crash.context.attributes['spring.beanfactory'], +, +	if (!propertyResolver.getProperty("show-banner", Boolean.class, Boolean.TRUE)) {, +	// Try to print using the banner interface, +	if (beanFactory != null) {, +		try {, +			def banner = beanFactory.getBean("springBootBanner"), +			def out = new java.io.ByteArrayOutputStream(), +			banner.printBanner(environment, null, new java.io.PrintStream(out)), +			return out.toString(), +		} catch (Exception ex) {, +			// Ignore, +		}, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/main/resources/banner.txt, +   ,--.   ,--., +   \  /-~-\  /, +    )' a a `(, +   (  ,---.  ), +    `(_o_o_)', +      )`-'(, +, +Spring Boot${spring-boot.formatted-version}, +++ b/spring-boot-starters/spring-boot-starter-remote-shell/src/main/resources/commands/crash/login.groovy, +, +	def environment = crash.context.attributes['spring.environment'], +	def propertyResolver = new org.springframework.boot.bind.RelaxedPropertyResolver(environment, "spring.main.");, +	def beanFactory = crash.context.attributes['spring.beanfactory'], +, +	if (!propertyResolver.getProperty("show-banner", Boolean.class, Boolean.TRUE)) {, +	// Try to print using the banner interface, +	if (beanFactory != null) {, +		try {, +			def banner = beanFactory.getBean("springBootBanner"), +			def out = new java.io.ByteArrayOutputStream(), +			banner.printBanner(environment, null, new java.io.PrintStream(out)), +			return out.toString(), +		} catch (Exception ex) {, +			// Ignore, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java, +		return new PrintedBanner(banner, sourceClass);, +		return new PrintedBanner(banner, sourceClass);, +	/**, +	 * Decorator that allows a {@link Banner} to be printed again without needing to, +	 * specify the source class., +	 */, +	private static class PrintedBanner implements Banner {, +, +		private final Banner banner;, +, +		private final Class<?> sourceClass;, +, +		PrintedBanner(Banner banner, Class<?> sourceClass) {, +			this.banner = banner;, +			this.sourceClass = sourceClass;, +		}, +, +		@Override, +		public void printBanner(Environment environment, Class<?> sourceClass,, +				PrintStream out) {, +			sourceClass = (sourceClass == null ? this.sourceClass : sourceClass);, +			this.banner.printBanner(environment, sourceClass, out);, +		}, +, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/main/resources/banner.txt, +   ,--.   ,--., +   \  /-~-\  /, +    )' a a `(, +   (  ,---.  ), +    `(_o_o_)', +      )`-'(, +]