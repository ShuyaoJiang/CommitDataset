[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.exclude-user-agents= # list of user-agents to exclude from compression, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.exclude-user-agents= # list of user-agents to exclude from compression, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/Compression.java, +	 * Comma-separated list of user agents for which responses should not be compressed., +	 */, +	private String[] excludedUserAgents = null;, +, +	/**, +	 * Minimum response size that is required for compression to be performed., +	public String[] getExcludedUserAgents() {, +		return this.excludedUserAgents;, +	}, +, +	public void setExcludedUserAgents(String[] excludedUserAgents) {, +		this.excludedUserAgents = excludedUserAgents;, +	}, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.exclude-user-agents= # list of user-agents to exclude from compression, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/Compression.java, +	 * Comma-separated list of user agents for which responses should not be compressed., +	 */, +	private String[] excludedUserAgents = null;, +, +	/**, +	 * Minimum response size that is required for compression to be performed., +	public String[] getExcludedUserAgents() {, +		return this.excludedUserAgents;, +	}, +, +	public void setExcludedUserAgents(String[] excludedUserAgents) {, +		this.excludedUserAgents = excludedUserAgents;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +				if (compression.getExcludedUserAgents() != null) {, +					ReflectionUtils.findMethod(handlerClass, "setExcluded", Set.class), +							.invoke(handler,, +									new HashSet<String>(Arrays.asList(compression, +											.getExcludedUserAgents())));, +				}, +			if (compression.getExcludedUserAgents() != null) {, +				gzipHandler.setExcluded(new HashSet<String>(Arrays.asList(compression, +						.getExcludedUserAgents())));, +			}, +				if (compression.getExcludedUserAgents() != null) {, +					ReflectionUtils.findMethod(handlerClass, "setExcludedAgentPatterns",, +							String[].class).invoke(handler,, +							new Object[] { compression.getExcludedUserAgents() });, +				}, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.exclude-user-agents= # list of user-agents to exclude from compression, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/Compression.java, +	 * Comma-separated list of user agents for which responses should not be compressed., +	 */, +	private String[] excludedUserAgents = null;, +, +	/**, +	 * Minimum response size that is required for compression to be performed., +	public String[] getExcludedUserAgents() {, +		return this.excludedUserAgents;, +	}, +, +	public void setExcludedUserAgents(String[] excludedUserAgents) {, +		this.excludedUserAgents = excludedUserAgents;, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +				if (compression.getExcludedUserAgents() != null) {, +					ReflectionUtils.findMethod(handlerClass, "setExcluded", Set.class), +							.invoke(handler,, +									new HashSet<String>(Arrays.asList(compression, +											.getExcludedUserAgents())));, +				}, +			if (compression.getExcludedUserAgents() != null) {, +				gzipHandler.setExcluded(new HashSet<String>(Arrays.asList(compression, +						.getExcludedUserAgents())));, +			}, +				if (compression.getExcludedUserAgents() != null) {, +					ReflectionUtils.findMethod(handlerClass, "setExcludedAgentPatterns",, +							String[].class).invoke(handler,, +							new Object[] { compression.getExcludedUserAgents() });, +				}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +			if (getCompression().getExcludedUserAgents() != null) {, +				protocol.setNoCompressionUserAgents(StringUtils, +						.arrayToCommaDelimitedString(getCompression(), +								.getExcludedUserAgents()));, +			}, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.exclude-user-agents= # list of user-agents to exclude from compression, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/Compression.java, +	 * Comma-separated list of user agents for which responses should not be compressed., +	 */, +	private String[] excludedUserAgents = null;, +, +	/**, +	 * Minimum response size that is required for compression to be performed., +	public String[] getExcludedUserAgents() {, +		return this.excludedUserAgents;, +	}]