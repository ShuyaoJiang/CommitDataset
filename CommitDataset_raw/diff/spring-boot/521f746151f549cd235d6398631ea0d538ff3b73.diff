[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +					assertThat(filters).isEmpty();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +					assertThat(filters).isEmpty();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +				String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY,, +					String serverPort = getProperty(environment, SERVER_PORT_PROPERTY,, +							"8080");, +	private String getProperty(ConfigurableEnvironment environment, String property,, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +					assertThat(filters).isEmpty();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +				String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY,, +					String serverPort = getProperty(environment, SERVER_PORT_PROPERTY,, +							"8080");, +	private String getProperty(ConfigurableEnvironment environment, String property,, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessorTests.java, +		@MockBean, +		@MockBean, +		@MockBean, +		@SpyBean, +		@SpyBean, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +					assertThat(filters).isEmpty();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +				String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY,, +					String serverPort = getProperty(environment, SERVER_PORT_PROPERTY,, +							"8080");, +	private String getProperty(ConfigurableEnvironment environment, String property,, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessorTests.java, +		@MockBean, +		@MockBean, +		@MockBean, +		@SpyBean, +		@SpyBean, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessorTests.java, +		assertThat(this.environment.getProperty("management.server.port")).isNull();, +		// mgmt port is 8080 which means it's on the same port as main server since that, +		// is, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.group.*= # Log groups to quickly change multiple loggers at the same time. For instance, `logging.level.db=org.hibernate,org.springframework.jdbc`., +	spring.quartz.overwrite-existing-jobs=false # Whether configured jobs should overwrite existing job definitions., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +_all_ Tomcat related loggers, but you can't easily remember top level packages., +To help with this, Spring Boot allows you to define logging groups in your Spring, +it to your `application.properties`:, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +					assertThat(filters).isEmpty();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +				String managementPort = getProperty(environment, MANAGEMENT_PORT_PROPERTY,, +					String serverPort = getProperty(environment, SERVER_PORT_PROPERTY,, +							"8080");, +	private String getProperty(ConfigurableEnvironment environment, String property,, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessorTests.java]