[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +				mergedAnnotations, +						.add(findMergedAnnotation(root, annotation.annotationType()));, +	private Annotation findMergedAnnotation(Class<?> source,, +			Class<? extends Annotation> annotationType) {, +		if (source == null) {, +			return null;, +		}, +		Annotation mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(source,, +				annotationType);, +		return mergedAnnotation != null ? mergedAnnotation, +				: findMergedAnnotation(source.getSuperclass(), annotationType);, +	}, +, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java, +				mergedAnnotations, +						.add(findMergedAnnotation(root, annotation.annotationType()));, +	private Annotation findMergedAnnotation(Class<?> source,, +			Class<? extends Annotation> annotationType) {, +		if (source == null) {, +			return null;, +		}, +		Annotation mergedAnnotation = AnnotatedElementUtils.getMergedAnnotation(source,, +				annotationType);, +		return mergedAnnotation != null ? mergedAnnotation, +				: findMergedAnnotation(source.getSuperclass(), annotationType);, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySourceTests.java, +	@Test, +	public void typeLevelAnnotationOnSuperClass() {, +		AnnotationsPropertySource source = new AnnotationsPropertySource(, +				PropertyMappedAnnotationOnSuperClass.class);, +		assertThat(source.getPropertyNames()).containsExactly("value");, +		assertThat(source.getProperty("value")).isEqualTo("abc");, +	}, +, +	@Test, +	public void aliasedPropertyMappedAttributeOnSuperClass() {, +		AnnotationsPropertySource source = new AnnotationsPropertySource(, +				AliasedPropertyMappedAnnotationOnSuperClass.class);, +		assertThat(source.getPropertyNames()).containsExactly("aliasing.value");, +		assertThat(source.getProperty("aliasing.value")).isEqualTo("baz");, +	}, +, +	static class PropertyMappedAnnotationOnSuperClass extends TypeLevel {, +, +	}, +, +	static class AliasedPropertyMappedAnnotationOnSuperClass, +			extends PropertyMappedAttributeWithAnAlias {, +, +	}, +]