[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot will attempt to validate `@ConfigurationProperties` classes whenever they, +annotated with Spring's `@Validated` annotation. You can use JSR-303 `javax.validation`, +constraint annotations directly on your configuration class. Simply ensure that a, +compliant JSR-303 implementation is on your classpath, then add constraint annotations to, +your fields:, +	@Validated, +	@Validated, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot will attempt to validate `@ConfigurationProperties` classes whenever they, +annotated with Spring's `@Validated` annotation. You can use JSR-303 `javax.validation`, +constraint annotations directly on your configuration class. Simply ensure that a, +compliant JSR-303 implementation is on your classpath, then add constraint annotations to, +your fields:, +	@Validated, +	@Validated, +++ b/spring-boot-samples/spring-boot-sample-simple/pom.xml, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +		</dependency>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot will attempt to validate `@ConfigurationProperties` classes whenever they, +annotated with Spring's `@Validated` annotation. You can use JSR-303 `javax.validation`, +constraint annotations directly on your configuration class. Simply ensure that a, +compliant JSR-303 implementation is on your classpath, then add constraint annotations to, +your fields:, +	@Validated, +	@Validated, +++ b/spring-boot-samples/spring-boot-sample-simple/pom.xml, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +		</dependency>, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package sample.simple;, +, +import javax.validation.constraints.NotNull;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.stereotype.Component;, +, +@Component, +@ConfigurationProperties(prefix = "sample"), +public class SampleConfigurationProperties {, +, +	@NotNull, +	private String name;, +, +	public String getName() {, +		return this.name;, +	}, +, +	public void setName(String name) {, +		this.name = name;, +	}, +, +}, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot will attempt to validate `@ConfigurationProperties` classes whenever they, +annotated with Spring's `@Validated` annotation. You can use JSR-303 `javax.validation`, +constraint annotations directly on your configuration class. Simply ensure that a, +compliant JSR-303 implementation is on your classpath, then add constraint annotations to, +your fields:, +	@Validated, +	@Validated, +++ b/spring-boot-samples/spring-boot-sample-simple/pom.xml, +		<dependency>, +			<groupId>org.hibernate</groupId>, +			<artifactId>hibernate-validator</artifactId>, +		</dependency>, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]