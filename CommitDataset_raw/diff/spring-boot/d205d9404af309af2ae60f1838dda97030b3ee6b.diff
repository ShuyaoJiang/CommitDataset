[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.core.Ordered;, +			// Needs to come before any fallback resolver (e.g. a, +			// InternalResourceViewResolver), +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.core.Ordered;, +			// Needs to come before any fallback resolver (e.g. a, +			// InternalResourceViewResolver), +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +		@ConditionalOnMissingBean(InternalResourceViewResolver.class), +		@Bean, +		public InternalResourceViewResolver defaultViewResolver() {, +			InternalResourceViewResolver resolver = new InternalResourceViewResolver();, +			return resolver;, +		}, +, +		@ConditionalOnBean(View.class), +			// ContentNegotiatingViewResolver uses all the other view resolvers to locate, +			// a view so it should have a high precedence, +			resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.core.Ordered;, +			// Needs to come before any fallback resolver (e.g. a, +			// InternalResourceViewResolver), +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +		@ConditionalOnMissingBean(InternalResourceViewResolver.class), +		@Bean, +		public InternalResourceViewResolver defaultViewResolver() {, +			InternalResourceViewResolver resolver = new InternalResourceViewResolver();, +			return resolver;, +		}, +, +		@ConditionalOnBean(View.class), +			// ContentNegotiatingViewResolver uses all the other view resolvers to locate, +			// a view so it should have a high precedence, +			resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.springframework.core.Ordered;, +			// Needs to come before any fallback resolver (e.g. a, +			// InternalResourceViewResolver), +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +		@ConditionalOnMissingBean(InternalResourceViewResolver.class), +		@Bean, +		public InternalResourceViewResolver defaultViewResolver() {, +			InternalResourceViewResolver resolver = new InternalResourceViewResolver();, +			return resolver;, +		}, +, +		@ConditionalOnBean(View.class), +			// ContentNegotiatingViewResolver uses all the other view resolvers to locate, +			// a view so it should have a high precedence, +			resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +++ b/spring-boot-samples/spring-boot-sample-web-static/pom.xml, +			<artifactId>spring-boot-starter-actuator</artifactId>, +			<version>${project.version}</version>, +		</dependency>, +		<dependency>, +			<groupId>${project.groupId}</groupId>]