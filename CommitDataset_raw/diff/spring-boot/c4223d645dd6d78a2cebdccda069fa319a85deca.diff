[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.web.socket.server.config.EnableWebSocket;, +import org.springframework.web.socket.server.config.WebSocketConfigurer;, +import org.springframework.web.socket.server.config.WebSocketHandlerRegistry;, +@ConditionalOnMissingBean(WebSocketConfigurer.class), +@EnableWebSocket, +	private static Log logger = LogFactory.getLog(WebSocketAutoConfiguration.class);, +, +	// Nested class to avoid having to load WebSocketConfigurer before conditions are, +	// evaluated, +	@Configuration, +	protected static class WebSocketRegistrationConfiguration implements, +			BeanPostProcessor, BeanFactoryAware, WebSocketConfigurer {, +		private ListableBeanFactory beanFactory;, +, +		@Override, +		public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +			this.beanFactory = (ListableBeanFactory) beanFactory;, +		}, +, +		private WebSocketHandler getHandler(String prefix) {, +		private String[] getPrefixes() {, +		@Override, +		public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {, +			// Force initialization of WebSocketHandler beans, +			this.beanFactory.getBeansOfType(WebSocketHandler.class);, +			for (String prefix : getPrefixes()) {, +				logger.info("Adding SockJS handler: " + prefix);, +				registry.addHandler(getHandler(prefix), prefix).withSockJS();, +			}]