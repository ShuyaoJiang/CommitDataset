[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Autowired, +		private MetricsProperties metrics;, +, +			MetricCopyExporter exporter = new MetricCopyExporter(reader,, +					new CompositeMetricWriter(writers)) {, +			if (this.metrics.getExport().getIncludes() != null, +					|| this.metrics.getExport().getExcludes() != null) {, +				exporter.setIncludes(this.metrics.getExport().getIncludes());, +				exporter.setExcludes(this.metrics.getExport().getExcludes());, +			}, +			return exporter;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Autowired, +		private MetricsProperties metrics;, +, +			MetricCopyExporter exporter = new MetricCopyExporter(reader,, +					new CompositeMetricWriter(writers)) {, +			if (this.metrics.getExport().getIncludes() != null, +					|| this.metrics.getExport().getExcludes() != null) {, +				exporter.setIncludes(this.metrics.getExport().getIncludes());, +				exporter.setExcludes(this.metrics.getExport().getExcludes());, +			}, +			return exporter;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsProperties.java, +		 * Flag to switch off any available optimizations based on not exporting unchanged, +		 * metric values., +		private String[] includes;, +, +		private String[] excludes;, +, +		public String[] getIncludes() {, +			return this.includes;, +		}, +, +		public void setIncludes(String[] includes) {, +			this.includes = includes;, +		}, +, +		public String[] getExcludes() {, +			return this.excludes;, +		}, +, +		public void setExcludes(String[] excludes) {, +			this.excludes = excludes;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Autowired, +		private MetricsProperties metrics;, +, +			MetricCopyExporter exporter = new MetricCopyExporter(reader,, +					new CompositeMetricWriter(writers)) {, +			if (this.metrics.getExport().getIncludes() != null, +					|| this.metrics.getExport().getExcludes() != null) {, +				exporter.setIncludes(this.metrics.getExport().getIncludes());, +				exporter.setExcludes(this.metrics.getExport().getExcludes());, +			}, +			return exporter;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsProperties.java, +		 * Flag to switch off any available optimizations based on not exporting unchanged, +		 * metric values., +		private String[] includes;, +, +		private String[] excludes;, +, +		public String[] getIncludes() {, +			return this.includes;, +		}, +, +		public void setIncludes(String[] includes) {, +			this.includes = includes;, +		}, +, +		public String[] getExcludes() {, +			return this.excludes;, +		}, +, +		public void setExcludes(String[] excludes) {, +			this.excludes = excludes;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReader.java, +		else if (key.contains("counter.")) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Autowired, +		private MetricsProperties metrics;, +, +			MetricCopyExporter exporter = new MetricCopyExporter(reader,, +					new CompositeMetricWriter(writers)) {, +			if (this.metrics.getExport().getIncludes() != null, +					|| this.metrics.getExport().getExcludes() != null) {, +				exporter.setIncludes(this.metrics.getExport().getIncludes());, +				exporter.setExcludes(this.metrics.getExport().getExcludes());, +			}, +			return exporter;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsProperties.java, +		 * Flag to switch off any available optimizations based on not exporting unchanged, +		 * metric values., +		private String[] includes;]