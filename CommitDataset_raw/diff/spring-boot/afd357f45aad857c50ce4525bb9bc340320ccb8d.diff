[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +Spring Boot logs the configuration files that are loaded at `DEBUG` level and the, +candidates it has not found at `TRACE` level., +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +Spring Boot logs the configuration files that are loaded at `DEBUG` level and the, +candidates it has not found at `TRACE` level., +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, + * @author Stephane Nicoll, +	private final List<LogMessage> logMessages = new ArrayList<LogMessage>();, +		logMessages();, +	private void logMessages() {, +		// logging is deferred because the Logging initialization might not have, +		for (LogMessage logMessage : this.logMessages) {, +			logMessage.log(logger);, +		this.logMessages.clear();, +		private final List<LogMessage> logMessages = ConfigFileApplicationListener.this.logMessages;, +				this.logMessages.add(LogMessage.trace(msg));, +			} else {, +				this.logMessages.add(LogMessage.debug(msg));, +					this.logMessages.add(LogMessage.debug("Profiles already activated, '" + value, +							+ "' will not be applied"));, +				this.logMessages.add(LogMessage.debug("Activated profiles ", +						+ StringUtils.collectionToCommaDelimitedString(profiles)));, +	static class LogMessage {, +		private final String level;, +, +		private final Object message;, +, +		public LogMessage(String level, Object message) {, +			this.level = level;, +			this.message = message;, +		}, +, +		public static LogMessage trace(Object message) {, +			return new LogMessage("trace", message);, +		}, +, +		public static LogMessage debug(Object message) {, +			return new LogMessage("debug", message);, +		}, +, +		public void log(Log logger) {, +			if (this.level.equals("trace")) {, +				logger.trace(this.message);, +			}, +			else if (this.level.equals("debug")) {, +				logger.debug(this.message);, +			}, +			else {, +				logger.info(this.message);, +			}, +		}, +	}, +]