[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +import org.mockito.MockingDetails;, +		MockingDetails mockingDetails = Mockito.mockingDetails(mock);, +		if (mockingDetails.isMock()) {, +			MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings();, +			List<InvocationListener> listeners = settings.getInvocationListeners();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +import org.mockito.MockingDetails;, +		MockingDetails mockingDetails = Mockito.mockingDetails(mock);, +		if (mockingDetails.isMock()) {, +			MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings();, +			List<InvocationListener> listeners = settings.getInvocationListeners();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import java.util.Collections;, +import org.mockito.internal.progress.ThreadSafeMockingProgress;, +	private final Verification verification = new Verification();, +		private final MockingProgress progress = ThreadSafeMockingProgress, +				.mockingProgress();, +							mode = new MockAwareVerificationMode(target, mode,, +									Collections.emptySet());, +			matchers.stream().map(LocalizedMatcher::getMatcher), +					.forEach(storage::reportMatcher);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +import org.mockito.MockingDetails;, +		MockingDetails mockingDetails = Mockito.mockingDetails(mock);, +		if (mockingDetails.isMock()) {, +			MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings();, +			List<InvocationListener> listeners = settings.getInvocationListeners();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import java.util.Collections;, +import org.mockito.internal.progress.ThreadSafeMockingProgress;, +	private final Verification verification = new Verification();, +		private final MockingProgress progress = ThreadSafeMockingProgress, +				.mockingProgress();, +							mode = new MockAwareVerificationMode(target, mode,, +									Collections.emptySet());, +			matchers.stream().map(LocalizedMatcher::getMatcher), +					.forEach(storage::reportMatcher);, +++ /dev/null, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +import org.mockito.MockingDetails;, +		MockingDetails mockingDetails = Mockito.mockingDetails(mock);, +		if (mockingDetails.isMock()) {, +			MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings();, +			List<InvocationListener> listeners = settings.getInvocationListeners();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import java.util.Collections;, +import org.mockito.internal.progress.ThreadSafeMockingProgress;, +	private final Verification verification = new Verification();, +		private final MockingProgress progress = ThreadSafeMockingProgress, +				.mockingProgress();, +							mode = new MockAwareVerificationMode(target, mode,, +									Collections.emptySet());, +			matchers.stream().map(LocalizedMatcher::getMatcher), +					.forEach(storage::reportMatcher);, +++ /dev/null, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockDefinitionTests.java, +import org.mockito.Mockito;, +		MockCreationSettings<?> settings = Mockito.mockingDetails(mock), +				.getMockCreationSettings();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(this.answer);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +import org.mockito.MockingDetails;, +		MockingDetails mockingDetails = Mockito.mockingDetails(mock);, +		if (mockingDetails.isMock()) {, +			MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings();, +			List<InvocationListener> listeners = settings.getInvocationListeners();, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import java.util.Collections;, +import org.mockito.internal.progress.ThreadSafeMockingProgress;, +	private final Verification verification = new Verification();, +		private final MockingProgress progress = ThreadSafeMockingProgress, +				.mockingProgress();, +							mode = new MockAwareVerificationMode(target, mode,, +									Collections.emptySet());, +			matchers.stream().map(LocalizedMatcher::getMatcher), +					.forEach(storage::reportMatcher);, +++ /dev/null, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockDefinitionTests.java, +import org.mockito.Mockito;, +		MockCreationSettings<?> settings = Mockito.mockingDetails(mock), +				.getMockCreationSettings();, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyDefinitionTests.java, +import org.mockito.Mockito;, +		MockCreationSettings<?> settings = Mockito.mockingDetails(spy), +				.getMockCreationSettings();]