[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2-file.xml, +		<Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} --- [%t] %-40.40c{1.} : %m%n%rEx</Property>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2-file.xml, +		<Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} --- [%t] %-40.40c{1.} : %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml, +		<Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%rEx</Property>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2-file.xml, +		<Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} --- [%t] %-40.40c{1.} : %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml, +		<Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml, +	<property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%rEx"/>, +	<property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx"/>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2-file.xml, +		<Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} --- [%t] %-40.40c{1.} : %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml, +		<Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml, +	<property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%rEx"/>, +	<property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx"/>, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java, +import static org.hamcrest.Matchers.containsString;, +	@Test, +	public void exceptionsIncludeClassPackaging() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.logger.info("Hidden");, +		this.loggingSystem.initialize(null, null, null);, +		this.output.expect(containsString("[junit-"));, +		this.logger.warn("Expected exception", new RuntimeException("Expected"));, +	}, +, +	@Test, +	public void rootCauseIsLoggedFirst() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.logger.info("Hidden");, +		this.loggingSystem.initialize(null, null, null);, +		this.output, +				.expect(containsString("Wrapped by: java.lang.RuntimeException: Expected"));, +		this.logger.warn("Expected exception", new RuntimeException("Expected",, +				new RuntimeException("Cause")));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +			+ "%clr(:){faint} %m%n%rEx";, +			+ "${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx";, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2-file.xml, +		<Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${sys:PID} --- [%t] %-40.40c{1.} : %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml, +		<Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%rEx</Property>, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml, +	<property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%rEx"/>, +	<property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%rEx"/>, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java, +import static org.hamcrest.Matchers.containsString;, +	@Test, +	public void exceptionsIncludeClassPackaging() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.logger.info("Hidden");, +		this.loggingSystem.initialize(null, null, null);, +		this.output.expect(containsString("[junit-"));, +		this.logger.warn("Expected exception", new RuntimeException("Expected"));, +	}, +, +	@Test, +	public void rootCauseIsLoggedFirst() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.logger.info("Hidden");, +		this.loggingSystem.initialize(null, null, null);, +		this.output, +				.expect(containsString("Wrapped by: java.lang.RuntimeException: Expected"));, +		this.logger.warn("Expected exception", new RuntimeException("Expected",, +				new RuntimeException("Cause")));, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java, +import static org.hamcrest.Matchers.containsString;, +	@Test, +	public void exceptionsIncludeClassPackaging() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.logger.info("Hidden");, +		this.loggingSystem.initialize(this.initializationContext, null, null);, +		this.output.expect(containsString("[junit-"));, +		this.logger.warn("Expected exception", new RuntimeException("Expected"));, +	}, +]