[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +	private static final Pattern COLLECTION_PROPERTY = Pattern, +			.compile("\\[(\\d+)\\](\\.\\S+)?");, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +	private static final Pattern COLLECTION_PROPERTY = Pattern, +			.compile("\\[(\\d+)\\](\\.\\S+)?");, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertySourcesPropertyValuesTests.java, + * @author Stephane Nicoll, +	@Test, +	public void testFirstCollectionPropertyWinsNestedAttributes() throws Exception {, +		ListTestBean target = new ListTestBean();, +		DataBinder binder = new DataBinder(target);, +		Map<String, Object> first = new LinkedHashMap<String, Object>();, +		first.put("list[0].description", "another description");, +		Map<String, Object> second = new LinkedHashMap<String, Object>();, +		second.put("list[0].name", "first name");, +		second.put("list[0].description", "first description");, +		second.put("list[1].name", "second name");, +		second.put("list[1].description", "second description");, +		this.propertySources.addFirst(new MapPropertySource("s", second));, +		this.propertySources.addFirst(new MapPropertySource("f", first));, +		binder.bind(new PropertySourcesPropertyValues(this.propertySources));, +		target.getList();, +		assertThat(target.getList()).hasSize(1);, +		assertThat(target.getList().get(0).getDescription()), +				.isEqualTo("another description");, +		assertThat(target.getList().get(0).getName()).isNull();, +	}, +, +		private String description;, +, +, +		public String getDescription() {, +			return this.description;, +		}, +, +		public void setDescription(String description) {, +			this.description = description;, +		}, +, +, +	}, +, +	public static class ListTestBean {, +, +		private List<TestBean> list = new ArrayList<TestBean>();, +, +		public List<TestBean> getList() {, +			return this.list;, +		}, +, +		public void setList(List<TestBean> list) {, +			this.list = list;, +		}, +]