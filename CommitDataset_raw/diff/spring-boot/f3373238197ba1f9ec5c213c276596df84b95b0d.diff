[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		T bound = bind(name, target, handler, context, false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +			Object bound = bindObject(name, target, handler, context, skipIfHasBoundBean);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean), +					throws Exception {, +		return bindBean(name, target, handler, context, skipIfHasBoundBean);, +			Supplier<?> supplier = () -> bind(itemName, itemTarget, handler, context,, +					false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +				name.append(propertyName), propertyTarget, handler, context, true);, +		if (skipIfHasBoundBean && context.hasBoundBean(type)) {, +			System.err.println(type + " " + name);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		T bound = bind(name, target, handler, context, false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +			Object bound = bindObject(name, target, handler, context, skipIfHasBoundBean);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean), +					throws Exception {, +		return bindBean(name, target, handler, context, skipIfHasBoundBean);, +			Supplier<?> supplier = () -> bind(itemName, itemTarget, handler, context,, +					false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +				name.append(propertyName), propertyTarget, handler, context, true);, +		if (skipIfHasBoundBean && context.hasBoundBean(type)) {, +			System.err.println(type + " " + name);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +, +, +	@Test, +	public void bindToBeanWithCycle() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		this.sources.add(source.nonIterable());, +		Bindable<CycleBean1> target = Bindable.of(CycleBean1.class);, +		this.binder.bind("foo", target);, +	}, +, +	public static class CycleBean1 {, +, +		private CycleBean2 two;, +, +		public CycleBean2 getTwo() {, +			return this.two;, +		}, +, +		public void setTwo(CycleBean2 two) {, +			this.two = two;, +		}, +, +	}, +, +	public static class CycleBean2 {, +, +		private CycleBean1 one;, +, +		public CycleBean1 getOne() {, +			return this.one;, +		}, +, +		public void setOne(CycleBean1 one) {, +			this.one = one;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		T bound = bind(name, target, handler, context, false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +			Object bound = bindObject(name, target, handler, context, skipIfHasBoundBean);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean), +					throws Exception {, +		return bindBean(name, target, handler, context, skipIfHasBoundBean);, +			Supplier<?> supplier = () -> bind(itemName, itemTarget, handler, context,, +					false);, +			BindHandler handler, Context context, boolean skipIfHasBoundBean) {, +				name.append(propertyName), propertyTarget, handler, context, true);, +		if (skipIfHasBoundBean && context.hasBoundBean(type)) {, +			System.err.println(type + " " + name);, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +, +, +	@Test, +	public void bindToBeanWithCycle() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		this.sources.add(source.nonIterable());, +		Bindable<CycleBean1> target = Bindable.of(CycleBean1.class);, +		this.binder.bind("foo", target);, +	}, +, +	public static class CycleBean1 {, +, +		private CycleBean2 two;, +, +		public CycleBean2 getTwo() {, +			return this.two;, +		}, +, +		public void setTwo(CycleBean2 two) {, +			this.two = two;, +		}]