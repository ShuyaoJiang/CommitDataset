[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * @author Dave Syer, +		private Report parent;, +, +			if (report.getParent() != null) {, +				this.parent = new Report(report.getParent());, +			}, +		public Report getParent() {, +			return this.parent;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * @author Dave Syer, +		private Report parent;, +, +			if (report.getParent() != null) {, +				this.parent = new Report(report.getParent());, +			}, +		public Report getParent() {, +			return this.parent;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReport.java, +import org.springframework.beans.factory.BeanFactory;, +	private AutoConfigurationReport parent;, +, +	 * The parent report (from a parent BeanFactory if there is one)., +	 * , +	 * @return the parent report (or null if there isn't one), +	 */, +	public AutoConfigurationReport getParent() {, +		return this.parent;, +	}, +, +	/**, +			AutoConfigurationReport report;, +				report = beanFactory.getBean(BEAN_NAME, AutoConfigurationReport.class);, +				report = new AutoConfigurationReport();, +			}, +			locateParent(beanFactory.getParentBeanFactory(), report);, +, +	private static void locateParent(BeanFactory beanFactory,, +			AutoConfigurationReport report) {, +		if (beanFactory != null && report.parent == null, +				&& beanFactory.containsBean(BEAN_NAME)) {, +			report.parent = beanFactory.getBean(BEAN_NAME, AutoConfigurationReport.class);, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * @author Dave Syer, +		private Report parent;, +, +			if (report.getParent() != null) {, +				this.parent = new Report(report.getParent());, +			}, +		public Report getParent() {, +			return this.parent;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReport.java, +import org.springframework.beans.factory.BeanFactory;, +	private AutoConfigurationReport parent;, +, +	 * The parent report (from a parent BeanFactory if there is one)., +	 * , +	 * @return the parent report (or null if there isn't one), +	 */, +	public AutoConfigurationReport getParent() {, +		return this.parent;, +	}, +, +	/**, +			AutoConfigurationReport report;, +				report = beanFactory.getBean(BEAN_NAME, AutoConfigurationReport.class);, +				report = new AutoConfigurationReport();, +			}, +			locateParent(beanFactory.getParentBeanFactory(), report);, +, +	private static void locateParent(BeanFactory beanFactory,, +			AutoConfigurationReport report) {, +		if (beanFactory != null && report.parent == null, +				&& beanFactory.containsBean(BEAN_NAME)) {, +			report.parent = beanFactory.getBean(BEAN_NAME, AutoConfigurationReport.class);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +	public void parent() throws Exception {, +		this.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory());, +		AutoConfigurationReport.get((ConfigurableListableBeanFactory) this.beanFactory, +				.getParentBeanFactory());, +		assertThat(this.report,, +				sameInstance(AutoConfigurationReport.get(this.beanFactory)));, +		assertThat(this.report, not(nullValue()));, +		assertThat(this.report.getParent(), not(nullValue()));, +	}, +, +	@Test]