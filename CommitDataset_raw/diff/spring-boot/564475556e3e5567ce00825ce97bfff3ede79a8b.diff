[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.core.env.CompositePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +		MutablePropertySources sources = environment.getPropertySources();, +			sources.addLast(new MapPropertySource("defaultProperties",, +					this.defaultProperties));, +		if (this.addCommandLineProperties && args.length > 0) {, +			String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;, +			if (sources.contains(name)) {, +				PropertySource<?> source = sources.get(name);, +				CompositePropertySource composite = new CompositePropertySource(name);, +				composite.addPropertySource(new SimpleCommandLinePropertySource(name, +						+ "-" + args.hashCode(), args));, +				composite.addPropertySource(source);, +				sources.replace(name, composite);, +			}, +			else {, +				sources.addFirst(new SimpleCommandLinePropertySource(args));, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.core.env.CompositePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +		MutablePropertySources sources = environment.getPropertySources();, +			sources.addLast(new MapPropertySource("defaultProperties",, +					this.defaultProperties));, +		if (this.addCommandLineProperties && args.length > 0) {, +			String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;, +			if (sources.contains(name)) {, +				PropertySource<?> source = sources.get(name);, +				CompositePropertySource composite = new CompositePropertySource(name);, +				composite.addPropertySource(new SimpleCommandLinePropertySource(name, +						+ "-" + args.hashCode(), args));, +				composite.addPropertySource(source);, +				sources.replace(name, composite);, +			}, +			else {, +				sources.addFirst(new SimpleCommandLinePropertySource(args));, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import java.util.Collections;, +import org.springframework.core.env.CompositePropertySource;, +import static org.junit.Assert.assertFalse;, +		application.run("--foo=bar");, +		assertTrue(hasPropertySource(environment, CommandLinePropertySource.class,, +				"commandLineArgs"));, +	}, +, +	@Test, +	public void commandLinePropertySourceEnhancesEnvironment() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		environment.getPropertySources().addFirst(, +				new MapPropertySource("commandLineArgs", Collections, +						.<String, Object> singletonMap("foo", "original")));, +		application.setEnvironment(environment);, +		application.run("--foo=bar", "--bar=foo");, +		assertTrue(hasPropertySource(environment, CompositePropertySource.class,, +				"commandLineArgs"));, +		assertEquals("foo", environment.getProperty("bar"));, +		// New command line properties take precedence, +		assertEquals("bar", environment.getProperty("foo"));, +	}, +, +	@Test, +	public void emptyCommandLinePropertySourceNotAdded() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		assertFalse(hasPropertySource(environment, PropertySource.class,, +				"commandLineArgs"));, +		application.run("--foo=bar");, +		assertFalse(hasPropertySource(environment, PropertySource.class,, +				"commandLineArgs"));]