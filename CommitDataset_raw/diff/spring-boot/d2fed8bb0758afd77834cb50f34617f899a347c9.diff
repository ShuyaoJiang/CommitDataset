[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;, +		@ConditionalOnJava(JavaVersion.SEVEN), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;, +		@ConditionalOnJava(JavaVersion.SEVEN), +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, + * Copyright 2012-2016 the original author or authors., +		private static final String ERROR_PAGE_CLASS = "org.apache.tomcat.util.descriptor.web.ErrorPage";, +		private static final String LEGACY_ERROR_PAGE_CLASS = "org.apache.catalina.deploy.ErrorPage";, +				if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils, +							.instantiate(ClassUtils.forName(ERROR_PAGE_CLASS, null));, +				else if (ClassUtils.isPresent(LEGACY_ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils.instantiate(, +							ClassUtils.forName(LEGACY_ERROR_PAGE_CLASS, null));, +			if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;, +		@ConditionalOnJava(JavaVersion.SEVEN), +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, + * Copyright 2012-2016 the original author or authors., +		private static final String ERROR_PAGE_CLASS = "org.apache.tomcat.util.descriptor.web.ErrorPage";, +		private static final String LEGACY_ERROR_PAGE_CLASS = "org.apache.catalina.deploy.ErrorPage";, +				if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils, +							.instantiate(ClassUtils.forName(ERROR_PAGE_CLASS, null));, +				else if (ClassUtils.isPresent(LEGACY_ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils.instantiate(, +							ClassUtils.forName(LEGACY_ERROR_PAGE_CLASS, null));, +			if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/context/ConfigurationWarningsApplicationContextInitializerTests.java, + * Copyright 2012-2016 the original author or authors., +	 * Testable ComponentScanPackageCheck that doesn't need to use the default or, +	 * {@code org.springframework} package., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;, +		@ConditionalOnJava(JavaVersion.SEVEN), +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, + * Copyright 2012-2016 the original author or authors., +		private static final String ERROR_PAGE_CLASS = "org.apache.tomcat.util.descriptor.web.ErrorPage";, +		private static final String LEGACY_ERROR_PAGE_CLASS = "org.apache.catalina.deploy.ErrorPage";, +				if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils, +							.instantiate(ClassUtils.forName(ERROR_PAGE_CLASS, null));, +				else if (ClassUtils.isPresent(LEGACY_ERROR_PAGE_CLASS, null)) {, +					nativePage = BeanUtils.instantiate(, +							ClassUtils.forName(LEGACY_ERROR_PAGE_CLASS, null));, +			if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/context/ConfigurationWarningsApplicationContextInitializerTests.java, + * Copyright 2012-2016 the original author or authors., +	 * Testable ComponentScanPackageCheck that doesn't need to use the default or, +	 * {@code org.springframework} package., +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(locations, equalTo(new String[] { "log4j2-spring.xml" }));]