[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +@ConditionalOnMissingBean(annotation = EnableWebSecurity.class), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +@ConditionalOnMissingBean(annotation = EnableWebSecurity.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +@ConditionalOnMissingBean(annotation = EnableWebSecurity.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			result = beanFactory.getBeanNamesForAnnotation(typeClass);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +@ConditionalOnMissingBean(annotation = EnableWebSecurity.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			result = beanFactory.getBeanNamesForAnnotation(typeClass);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import org.springframework.context.annotation.ImportResource;, +import org.springframework.util.Assert;, +	// Rigorous test for SPR-11069, +	@Test, +	public void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {, +		this.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,, +				ConfigurationWithFactoryBean.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertFalse(this.context.containsBean("bar"));, +		assertTrue(this.context.containsBean("example"));, +		assertEquals("foo", this.context.getBean("foo"));, +	}, +, +	@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml"), +	protected static class ConfigurationWithFactoryBean {, +	}, +, +	@Configuration, +, +	public static class ExampleFactoryBean implements FactoryBean<ExampleBean> {, +, +		public ExampleFactoryBean(String value) {, +			Assert.state(!value.contains("$"));, +		}, +, +		@Override, +		public ExampleBean getObject() throws Exception {, +			return new ExampleBean();, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return ExampleBean.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return false;, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +@ConditionalOnMissingBean(annotation = EnableWebSecurity.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfigurationTests.java, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +		this.context.register(SecurityAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +			result = beanFactory.getBeanNamesForAnnotation(typeClass);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import org.springframework.context.annotation.ImportResource;, +import org.springframework.util.Assert;, +	// Rigorous test for SPR-11069, +	@Test, +	public void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {, +		this.context.register(FooConfiguration.class, OnAnnotationConfiguration.class,, +				ConfigurationWithFactoryBean.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertFalse(this.context.containsBean("bar"));, +		assertTrue(this.context.containsBean("example"));, +		assertEquals("foo", this.context.getBean("foo"));, +	}, +, +	@ImportResource("org/springframework/boot/autoconfigure/condition/factorybean.xml"), +	protected static class ConfigurationWithFactoryBean {, +	}, +, +	@Configuration, +]