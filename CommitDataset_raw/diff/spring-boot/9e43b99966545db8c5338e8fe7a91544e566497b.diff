[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		descriptors.forEach((name, property) -> result, +				.add(new PropertySourceEntryDescriptor(name, property)));, +	@SuppressWarnings("unchecked"), +			if (!ConfigurationPropertySources.isAttachedConfigurationPropertySource(source)) {, +			return ((ConfigurableEnvironment) this.environment).getPropertySources();, +		return new StandardEnvironment().getPropertySources();, +			if (value == null) {, +				return null;, +			}, +			return (String) this.sanitizer.sanitize(placeholder, value);, +	 * A description of a {@link PropertySource}., +	 */, +	public static final class PropertySourceDescriptor {, +, +		private final String name;, +, +		private final Map<String, PropertyValueDescriptor> properties;, +, +		private PropertySourceDescriptor(String name,, +				Map<String, PropertyValueDescriptor> properties) {, +			this.name = name;, +			this.properties = properties;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public Map<String, PropertyValueDescriptor> getProperties() {, +			return this.properties;, +		}, +, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		descriptors.forEach((name, property) -> result, +				.add(new PropertySourceEntryDescriptor(name, property)));, +	@SuppressWarnings("unchecked"), +			if (!ConfigurationPropertySources.isAttachedConfigurationPropertySource(source)) {, +			return ((ConfigurableEnvironment) this.environment).getPropertySources();, +		return new StandardEnvironment().getPropertySources();, +			if (value == null) {, +				return null;, +			}, +			return (String) this.sanitizer.sanitize(placeholder, value);, +	 * A description of a {@link PropertySource}., +	 */, +	public static final class PropertySourceDescriptor {, +, +		private final String name;, +, +		private final Map<String, PropertyValueDescriptor> properties;, +, +		private PropertySourceDescriptor(String name,, +				Map<String, PropertyValueDescriptor> properties) {, +			this.name = name;, +			this.properties = properties;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public Map<String, PropertyValueDescriptor> getProperties() {, +			return this.properties;, +		}, +, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentWebEndpointExtension.java, +		return new WebEndpointResponse<>(descriptor, getStatus(descriptor));, +	}, +, +	private int getStatus(EnvironmentEntryDescriptor descriptor) {, +		if (descriptor.getProperty() == null) {, +			return WebEndpointResponse.STATUS_NOT_FOUND;, +		}, +		return WebEndpointResponse.STATUS_OK;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		descriptors.forEach((name, property) -> result, +				.add(new PropertySourceEntryDescriptor(name, property)));, +	@SuppressWarnings("unchecked"), +			if (!ConfigurationPropertySources.isAttachedConfigurationPropertySource(source)) {, +			return ((ConfigurableEnvironment) this.environment).getPropertySources();, +		return new StandardEnvironment().getPropertySources();, +			if (value == null) {, +				return null;, +			}, +			return (String) this.sanitizer.sanitize(placeholder, value);, +	 * A description of a {@link PropertySource}., +	 */, +	public static final class PropertySourceDescriptor {, +, +		private final String name;, +, +		private final Map<String, PropertyValueDescriptor> properties;, +]