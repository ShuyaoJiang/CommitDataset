[+++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>hazelcast-client</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>com.hazelcast</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>hazelcast-client</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>com.hazelcast</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java, +import com.hazelcast.client.HazelcastClient;, +import org.springframework.context.annotation.Import;, + * @author Vedran Pavic, +	@ConditionalOnMissingBean(HazelcastInstance.class), +	@Import(HazelcastServerConfiguration.class), +	static class ServerConfiguration {, +	@ConditionalOnClass(HazelcastClient.class), +	@ConditionalOnMissingBean(HazelcastInstance.class), +	@Import(HazelcastClientConfiguration.class), +	static class ClientConfiguration {, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>hazelcast-client</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>com.hazelcast</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java, +import com.hazelcast.client.HazelcastClient;, +import org.springframework.context.annotation.Import;, + * @author Vedran Pavic, +	@ConditionalOnMissingBean(HazelcastInstance.class), +	@Import(HazelcastServerConfiguration.class), +	static class ServerConfiguration {, +	@ConditionalOnClass(HazelcastClient.class), +	@ConditionalOnMissingBean(HazelcastInstance.class), +	@Import(HazelcastClientConfiguration.class), +	static class ClientConfiguration {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastClientConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.hazelcast;, +, +import java.io.IOException;, +, +import com.hazelcast.client.HazelcastClient;, +import com.hazelcast.client.config.ClientConfig;, +import com.hazelcast.core.HazelcastInstance;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.io.Resource;, +, +/**, + * Configuration for Hazelcast client., + *, + * @author Vedran Pavic, + * @since 2.0.0, + */, +class HazelcastClientConfiguration {, +, +	static final String CONFIG_SYSTEM_PROPERTY = "hazelcast.client.config";, +, +	@Configuration, +	@ConditionalOnMissingBean(ClientConfig.class), +	@Conditional(ConfigAvailableCondition.class), +	static class HazelcastClientConfigFileConfiguration {, +, +		@Bean, +		public HazelcastInstance hazelcastInstance(HazelcastProperties properties), +				throws IOException {, +			Resource config = properties.resolveConfigLocation();, +			if (config != null) {, +				return HazelcastInstanceFactory.createHazelcastClient(config);, +			}, +			return HazelcastClient.newHazelcastClient();, +		}, +, +	}, +, +	@Configuration]