[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerJwkConfiguration.java, +import org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;, + * @author Artsiom Yudovin, +	@Bean, +	@Conditional(IssuerUriCondition.class), +	@ConditionalOnMissingBean, +	public ReactiveJwtDecoder jwtDecoderByIssuerUri() {, +		return ReactiveJwtDecoders, +				.fromOidcIssuerLocation(this.properties.getJwt().getIssuerUri());, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerJwkConfiguration.java, +import org.springframework.boot.autoconfigure.security.oauth2.resource.IssuerUriCondition;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.security.oauth2.jwt.ReactiveJwtDecoders;, + * @author Artsiom Yudovin, +	@Bean, +	@Conditional(IssuerUriCondition.class), +	@ConditionalOnMissingBean, +	public ReactiveJwtDecoder jwtDecoderByIssuerUri() {, +		return ReactiveJwtDecoders, +				.fromOidcIssuerLocation(this.properties.getJwt().getIssuerUri());, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerAutoConfigurationTests.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.After;, +import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;, +import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, + * @author Artsiom Yudovin, +	private MockWebServer server;, +, +	@After, +	public void cleanup() throws Exception {, +		if (this.server != null) {, +			this.server.shutdown();, +		}, +	}, +, +	public void autoConfigurationShouldConfigureResourceServerUsingOidcIssuerUri(), +			throws IOException {, +		this.server = new MockWebServer();, +		this.server.start();, +		String issuer = this.server.url("").toString();, +		String cleanIssuerPath = cleanIssuerPath(issuer);, +		setupMockResponse(cleanIssuerPath);, +		this.contextRunner, +				.withPropertyValues(, +						"spring.security.oauth2.resourceserver.jwt.issuer-uri=http://", +								+ this.server.getHostName() + ":" + this.server.getPort()), +				.run((context) -> {, +					assertThat(context.getBean(ReactiveJwtDecoder.class)), +							.isInstanceOf(NimbusReactiveJwtDecoder.class);, +					assertFilterConfiguredWithJwtAuthenticationManager(context);, +				});, +	}, +, +	@Test, +	public void autoConfigurationWhenBothSetUriAndIssuerUriPresentShouldUseSetUri() {, +		this.contextRunner.withPropertyValues(, +				"spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com",, +				"spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com"), +				.run((context) -> {, +					assertThat(context.getBean(ReactiveJwtDecoder.class)), +							.isInstanceOf(NimbusReactiveJwtDecoder.class);, +					assertFilterConfiguredWithJwtAuthenticationManager(context);, +					assertThat(context.containsBean("jwtDecoder")).isTrue();, +					assertThat(context.containsBean("jwtDecoderByIssuerUri")).isFalse();, +				});, +	}, +, +	@Test, +	public void jwtDecoderBeanIsConditionalOnMissingBeanUsingOidcIssuerUri() {, +		this.contextRunner.withPropertyValues(, +				"spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com"), +				.withUserConfiguration(JwtDecoderConfig.class), +				.run((this::assertFilterConfiguredWithJwtAuthenticationManager));, +	}, +, +	@Test, +	public void autoConfigurationShouldBeConditionalOnBearerTokenAuthenticationTokenClassUsingOidcIssuerUri() {, +		this.contextRunner.withPropertyValues(, +				"spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com"), +				.withUserConfiguration(JwtDecoderConfig.class), +				.withClassLoader(, +						new FilteredClassLoader(BearerTokenAuthenticationToken.class)), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN));, +	}, +]