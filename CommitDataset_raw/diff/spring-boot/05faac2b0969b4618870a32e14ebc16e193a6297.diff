[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +			registry.get("jdbc.connections.max").tags("name", "dataSource").meter();, +		this.contextRunner.withPropertyValues("management.metrics.enable.jdbc=false"), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false"), +					assertThat(registry.find("hikaricp.connections").meter()).isNull();, +			return DataSourceBuilder.create().url(url), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +			registry.get("jdbc.connections.max").tags("name", "dataSource").meter();, +		this.contextRunner.withPropertyValues("management.metrics.enable.jdbc=false"), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false"), +					assertThat(registry.find("hikaricp.connections").meter()).isNull();, +			return DataSourceBuilder.create().url(url), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java, +	public static SecurityContext NONE = new SecurityContext() {, +, +		@Override, +		public Principal getPrincipal() {, +			return null;, +		}, +, +		@Override, +		public boolean isUserInRole(String role) {, +			return false;, +		}, +, +	};, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +			registry.get("jdbc.connections.max").tags("name", "dataSource").meter();, +		this.contextRunner.withPropertyValues("management.metrics.enable.jdbc=false"), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false"), +					assertThat(registry.find("hikaricp.connections").meter()).isNull();, +			return DataSourceBuilder.create().url(url), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java, +	public static SecurityContext NONE = new SecurityContext() {, +, +		@Override, +		public Principal getPrincipal() {, +			return null;, +		}, +, +		@Override, +		public boolean isUserInRole(String role) {, +			return false;, +		}, +, +	};, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +					.invoke(new InvocationContext(SecurityContext.NONE, arguments));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +			registry.get("jdbc.connections.max").tags("name", "dataSource").meter();, +		this.contextRunner.withPropertyValues("management.metrics.enable.jdbc=false"), +		this.contextRunner.run((context) -> {, +		this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false"), +					assertThat(registry.find("hikaricp.connections").meter()).isNull();, +			return DataSourceBuilder.create().url(url), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java, +	public static SecurityContext NONE = new SecurityContext() {, +, +		@Override, +		public Principal getPrincipal() {, +			return null;, +		}, +, +		@Override, +		public boolean isUserInRole(String role) {, +			return false;, +		}, +, +	};, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +					.invoke(new InvocationContext(SecurityContext.NONE, arguments));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +			this.securityContextSupplier = getSecurityContextSupplier();, +		}, +, +		private Supplier<Mono<? extends SecurityContext>> getSecurityContextSupplier() {, +				return this::springSecurityContext;, +			return this::emptySecurityContext;, +			return Mono.just(SecurityContext.NONE);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java]