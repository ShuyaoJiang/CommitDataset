[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +By default, running this way makes your static classpath resources (i.e. in, +`src/main/resources` by default) reloadable in the live application, which can be helpful, +at development time. Making static classpath resources reloadable means that `bootRun`, +does not use the output of the `processResources` task, i.e., when invoked using, +`bootRun`, your application will use the resources in their unprocessed form., +You can disable the direct use of your static classpath resources. This will mean that, +the resources are no longer reloadable but the output of the `processResources` task will, +be used. To do so, set `addResources` on the `bootRun` task to `false`:, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +	bootRun {, +		addResources = false, +	}, +----, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +By default, running this way makes your static classpath resources (i.e. in, +`src/main/resources` by default) reloadable in the live application, which can be helpful, +at development time. Making static classpath resources reloadable means that `bootRun`, +does not use the output of the `processResources` task, i.e., when invoked using, +`bootRun`, your application will use the resources in their unprocessed form., +You can disable the direct use of your static classpath resources. This will mean that, +the resources are no longer reloadable but the output of the `processResources` task will, +be used. To do so, set `addResources` on the `bootRun` task to `false`:, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +	bootRun {, +		addResources = false, +	}, +----, +++ b/spring-boot-integration-tests/pom.xml, +			<artifactId>spring-boot</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +By default, running this way makes your static classpath resources (i.e. in, +`src/main/resources` by default) reloadable in the live application, which can be helpful, +at development time. Making static classpath resources reloadable means that `bootRun`, +does not use the output of the `processResources` task, i.e., when invoked using, +`bootRun`, your application will use the resources in their unprocessed form., +You can disable the direct use of your static classpath resources. This will mean that, +the resources are no longer reloadable but the output of the `processResources` task will, +be used. To do so, set `addResources` on the `bootRun` task to `false`:, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +	bootRun {, +		addResources = false, +	}, +----, +++ b/spring-boot-integration-tests/pom.xml, +			<artifactId>spring-boot</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.gradle;, +, +import java.io.IOException;, +, +import org.gradle.tooling.ProjectConnection;, +import org.junit.BeforeClass;, +import org.junit.Rule;, +import org.junit.Test;, +import org.springframework.boot.dependency.tools.ManagedDependencies;, +import org.springframework.boot.test.OutputCapture;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.junit.Assert.assertThat;, +, +/**, + * Integration tests for bootRun's resource handling, + *, + * @author Andy Wilkinson, + */, +public class BootRunResourceTests {, +, +	private static final String BOOT_VERSION = ManagedDependencies.get(), +			.find("spring-boot").getVersion();]