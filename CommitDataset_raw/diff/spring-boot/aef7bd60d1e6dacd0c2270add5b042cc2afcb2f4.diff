[+++ b/spring-boot-tools/spring-boot-gradle-plugin/README.md, +Running this way makes your static classpath resources (i.e. in, +`src/main/resources` by default) reloadable in the live application,, +which can be helpful at development time., +, +| layout          | String | The type of archive (which corresponds to how the dependencies are layed out inside it). Defaults to a guess based on the archive type. |, +++ b/spring-boot-tools/spring-boot-gradle-plugin/README.md, +Running this way makes your static classpath resources (i.e. in, +`src/main/resources` by default) reloadable in the live application,, +which can be helpful at development time., +, +| layout          | String | The type of archive (which corresponds to how the dependencies are layed out inside it). Defaults to a guess based on the archive type. |, +++ b/spring-boot-tools/spring-boot-maven-plugin/README.md, +| layout          | String | The type of archive (which corresponds to how the dependencies are layed out inside it). Defaults to a guess based on the archive type. |, +The plugin rewrites your manifest, and in particular it manages the, +`Main-Class` and `Start-Class` entries, so if the defaults don't work, +you have to configure those there (not in the jar plugin). The, +`Main-Class` in the manifest is actually controlled by the `layout`, +property of the boot plugin, e.g., +, +    <plugin>, +      <groupId>org.springframework.boot</groupId>, +      <artifactId>spring-boot-maven-plugin</artifactId>, +      <version>{{project.version}}</version>, +      <configuration>, +        <mainClass>${start-class}</mainClass>, +        <layout>ZIP</layout>, +      </configuration>, +      <executions>, +        <execution>, +          <goals>, +            <goal>repackage</goal>, +          </goals>, +        </execution>, +      </executions>, +    </plugin>, +, +The layout property defaults to a guess based on the archive type (JAR, +or WAR). For the `PropertiesLauncher` the layout is "ZIP" (even though, +the output might be a JAR file).]