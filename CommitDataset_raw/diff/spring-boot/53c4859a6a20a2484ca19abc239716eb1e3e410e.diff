[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import java.util.Collection;, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourceMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadata;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadataProvider;, + * @author Stephane Nicoll, +		@Autowired(required = false), +		private Collection<DataSourceMetadataProvider> metadataProviders = Collections.emptyList();, +, +			DataSourceMetadataProvider metadataProvider =, +					new CompositeDataSourceMetadataProvider(this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider,, +						this.dataSources.values().iterator().next());, +						createDataSourceHealthIndicator(metadataProvider, entry.getValue()));, +, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(DataSourceMetadataProvider provider,, +				DataSource dataSource) {, +, +			String validationQuery = null;, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(dataSource);, +			if (dataSourceMetadata != null) {, +				validationQuery = dataSourceMetadata.getValidationQuery();, +			}, +			return new DataSourceHealthIndicator(dataSource, validationQuery);, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import java.util.Collection;, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourceMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadata;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadataProvider;, + * @author Stephane Nicoll, +		@Autowired(required = false), +		private Collection<DataSourceMetadataProvider> metadataProviders = Collections.emptyList();, +, +			DataSourceMetadataProvider metadataProvider =, +					new CompositeDataSourceMetadataProvider(this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider,, +						this.dataSources.values().iterator().next());, +						createDataSourceHealthIndicator(metadataProvider, entry.getValue()));, +, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(DataSourceMetadataProvider provider,, +				DataSource dataSource) {, +, +			String validationQuery = null;, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(dataSource);, +			if (dataSourceMetadata != null) {, +				validationQuery = dataSourceMetadata.getValidationQuery();, +			}, +			return new DataSourceHealthIndicator(dataSource, validationQuery);, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, + * @author Stephane Nicoll, +	private static final Map<String, String> queries = new HashMap<String, String>();, +	private static final String DEFAULT_QUERY = "SELECT 1";, +	 * @param query the validation query to use (can be {@code null}), +	 */, +	public DataSourceHealthIndicator(DataSource dataSource, String query) {, +		this.dataSource = dataSource;, +		this.query = query;, +		this.jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +	/**, +	 * Create a new {@link DataSourceHealthIndicator} using the specified datasource., +	 * @param dataSource the data source, +		this(dataSource, null);, +	/**, +	 * Set the {@link DataSource} to use., +	 */, +	/**, +	 * Set a specific validation query to use to validate a connection. If, +	 * none is set, a default validation query is used., +	 */, +	 * Return the specific validation query, if any., +	 */, +	public String getQuery() {, +		return query;, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import java.util.Collection;, +import java.util.Collections;, +import org.springframework.boot.autoconfigure.jdbc.CompositeDataSourceMetadataProvider;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadata;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceMetadataProvider;, + * @author Stephane Nicoll, +		@Autowired(required = false), +		private Collection<DataSourceMetadataProvider> metadataProviders = Collections.emptyList();, +, +			DataSourceMetadataProvider metadataProvider =, +					new CompositeDataSourceMetadataProvider(this.metadataProviders);, +				return createDataSourceHealthIndicator(metadataProvider,, +						this.dataSources.values().iterator().next());, +						createDataSourceHealthIndicator(metadataProvider, entry.getValue()));, +, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(DataSourceMetadataProvider provider,, +				DataSource dataSource) {]