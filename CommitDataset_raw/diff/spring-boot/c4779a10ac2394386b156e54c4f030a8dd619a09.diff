[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +		this.verification = new Verification(target);, +		private final MockingProgress progress;, +, +		Verification(Object target) {, +			this.progress = MockitoApi.get().mockingProgress(target);, +		}, +			this.progress.verificationStarted(mode);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +		this.verification = new Verification(target);, +		private final MockingProgress progress;, +, +		Verification(Object target) {, +			this.progress = MockitoApi.get().mockingProgress(target);, +		}, +			this.progress.verificationStarted(mode);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoApi.java, +import java.lang.reflect.Field;, +import org.mockito.internal.InternalMockHandler;, +import org.mockito.internal.stubbing.InvocationContainer;, +	 * @param mock the mock object, +	public abstract MockingProgress mockingProgress(Object mock);, +		if (ClassUtils.isPresent("org.mockito.ReturnValues", null)) {, +		return new Mockito2Api();, +	}, +	 * {@link MockitoApi} for Mockito 1.0., +	 */, +	private static class Mockito1Api extends MockitoApi {, +, +		private final MockUtil mockUtil;, +, +		private final Method getMockSettingsMethod;, +, +		private final Method getMockHandlerMethod;, +, +		private Method reportMatcherMethod;, +, +		private Constructor<MockAwareVerificationMode> mockAwareVerificationModeConstructor;, +, +		Mockito1Api() {, +			this.mockUtil = BeanUtils.instantiateClass(MockUtil.class);, +			this.getMockSettingsMethod = ReflectionUtils.findMethod(MockUtil.class,, +					"getMockSettings", Object.class);, +			this.getMockHandlerMethod = ReflectionUtils.findMethod(MockUtil.class,, +					"getMockHandler", Object.class);, +			this.reportMatcherMethod = ReflectionUtils.findMethod(, +					ArgumentMatcherStorage.class, "reportMatcher", Matcher.class);, +			this.mockAwareVerificationModeConstructor = ClassUtils, +					.getConstructorIfAvailable(MockAwareVerificationMode.class,, +							Object.class, VerificationMode.class);, +		}, +, +		@Override, +		public MockCreationSettings<?> getMockSettings(Object mock) {, +			return (MockCreationSettings<?>) ReflectionUtils, +					.invokeMethod(this.getMockSettingsMethod, this.mockUtil, mock);, +		}, +, +		@Override, +		public MockingProgress mockingProgress(Object mock) {, +			InternalMockHandler<?> handler = (InternalMockHandler<?>) ReflectionUtils, +					.invokeMethod(this.getMockHandlerMethod, this.mockUtil, mock);, +			InvocationContainer container = handler.getInvocationContainer();, +			Field field = ReflectionUtils.findField(container.getClass(),, +					"mockingProgress");, +			ReflectionUtils.makeAccessible(field);, +			return (MockingProgress) ReflectionUtils.getField(field, container);, +		}, +, +		@Override, +		public void reportMatchers(ArgumentMatcherStorage storage,, +				List<LocalizedMatcher> matchers) {, +			for (LocalizedMatcher matcher : matchers) {, +				ReflectionUtils.invokeMethod(this.reportMatcherMethod, storage, matcher);, +			}, +		}, +, +		@Override, +		public MockAwareVerificationMode createMockAwareVerificationMode(Object mock,, +				VerificationMode mode) {, +			return BeanUtils.instantiateClass(this.mockAwareVerificationModeConstructor,, +					mock, mode);, +		}, +, +		@Override, +		@SuppressWarnings("deprecation"), +		public Answer<Object> getAnswer(Answers answer) {, +			return answer.get();, +		}, +, +	}, +, +	/**, +		public MockingProgress mockingProgress(Object mock) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +		this.verification = new Verification(target);, +		private final MockingProgress progress;, +, +		Verification(Object target) {, +			this.progress = MockitoApi.get().mockingProgress(target);]