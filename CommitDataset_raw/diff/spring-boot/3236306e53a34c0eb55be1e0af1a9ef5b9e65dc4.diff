[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import com.couchbase.client.core.env.KeyValueServiceConfig;, +import com.couchbase.client.core.env.QueryServiceConfig;, +import com.couchbase.client.core.env.ViewServiceConfig;, + * @author Yulin Qin, +			builder = builder.keyValueServiceConfig(KeyValueServiceConfig.create(endpoints.getKeyValue()));, +			int minQuery = endpoints.getQuery() != 1 ? endpoints.getQuery() : endpoints.getQueryservice().getMinEndpoints();, +			int maxQuery = endpoints.getQuery() != 1 ? endpoints.getQuery() : endpoints.getQueryservice().getMaxEndpoints();, +			builder = builder.queryServiceConfig(QueryServiceConfig.create(minQuery, maxQuery));, +				int minView = endpoints.getView() != 1 ? endpoints.getView() : endpoints.getViewservice().getMinEndpoints();, +				int maxView = endpoints.getView() != 1 ? endpoints.getView() : endpoints.getViewservice().getMaxEndpoints();, +						.viewServiceConfig(ViewServiceConfig.create(minView, maxView));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import com.couchbase.client.core.env.KeyValueServiceConfig;, +import com.couchbase.client.core.env.QueryServiceConfig;, +import com.couchbase.client.core.env.ViewServiceConfig;, + * @author Yulin Qin, +			builder = builder.keyValueServiceConfig(KeyValueServiceConfig.create(endpoints.getKeyValue()));, +			int minQuery = endpoints.getQuery() != 1 ? endpoints.getQuery() : endpoints.getQueryservice().getMinEndpoints();, +			int maxQuery = endpoints.getQuery() != 1 ? endpoints.getQuery() : endpoints.getQueryservice().getMaxEndpoints();, +			builder = builder.queryServiceConfig(QueryServiceConfig.create(minQuery, maxQuery));, +				int minView = endpoints.getView() != 1 ? endpoints.getView() : endpoints.getViewservice().getMinEndpoints();, +				int maxView = endpoints.getView() != 1 ? endpoints.getView() : endpoints.getViewservice().getMaxEndpoints();, +						.viewServiceConfig(ViewServiceConfig.create(minView, maxView));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;, + * @author Yulin Qin, +		/**, +		 * Dynamic query service configuration., +		 */, +		private Queryservice queryservice = new Queryservice();, +, +		/**, +		 * Dynamic view service configuration., +		 */, +		private Viewservice viewservice = new Viewservice();, +, +		@Deprecated, +		@DeprecatedConfigurationProperty(replacement = "spring.couchbase.env.endpoints.queryservice"), +		@Deprecated, +		@Deprecated, +		@DeprecatedConfigurationProperty(replacement = "spring.couchbase.env.endpoints.viewservice"), +		@Deprecated, +		public Queryservice getQueryservice() {, +			return this.queryservice;, +		public void setQueryservice(Queryservice queryservice) {, +			this.queryservice = queryservice;, +		}, +, +		public Viewservice getViewservice() {, +			return this.viewservice;, +		}, +, +		public void setViewservice(Viewservice viewservice) {, +			this.viewservice = viewservice;, +		}, +, +		public static class Queryservice {, +			/**, +			 * Minimum Number of sockets per node against the query (N1QL) service., +			 */, +			private int minEndpoints = 1;, +			/**, +			 * Maximum Number of sockets per node against the query (N1QL) service., +			 */, +			private int maxEndpoints = 1;, +, +			public int getMinEndpoints() {, +				return this.minEndpoints;, +			}, +, +			public void setMinEndpoints(int minEndpoints) {, +				this.minEndpoints = minEndpoints;, +			}, +, +			public int getMaxEndpoints() {, +				return this.maxEndpoints;, +			}, +, +			public void setMaxEndpoints(int maxEndpoints) {, +				this.maxEndpoints = maxEndpoints;, +			}, +		}, +, +		public static class Viewservice {, +			/**, +			 * Minimum Number of sockets per node against the view service., +			 */, +			private int minEndpoints = 1;, +			/**, +			 * Maximum Number of sockets per node against the view service., +			 */, +			private int maxEndpoints = 1;, +, +			public int getMinEndpoints() {, +				return this.minEndpoints;, +			}, +, +			public void setMinEndpoints(int minEndpoints) {, +				this.minEndpoints = minEndpoints;]