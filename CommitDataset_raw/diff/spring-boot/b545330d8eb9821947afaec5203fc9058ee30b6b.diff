[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.Calendar;, +import java.util.GregorianCalendar;, +	private static final long CONSTANT_TIME_FOR_ZIP_ENTRIES = new GregorianCalendar(1980,, +			Calendar.FEBRUARY, 1, 0, 0, 0).getTimeInMillis();, +, +		prepareEntry(entry, UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);, +		prepareEntry(entry, UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);, +	private void prepareEntry(ZipArchiveEntry entry, int unixMode) {, +		if (!this.preserveFileTimestamps) {, +			entry.setTime(CONSTANT_TIME_FOR_ZIP_ENTRIES);, +		}, +		entry.setUnixMode(unixMode);, +	}, +, +					: CONSTANT_TIME_FOR_ZIP_ENTRIES;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.Calendar;, +import java.util.GregorianCalendar;, +	private static final long CONSTANT_TIME_FOR_ZIP_ENTRIES = new GregorianCalendar(1980,, +			Calendar.FEBRUARY, 1, 0, 0, 0).getTimeInMillis();, +, +		prepareEntry(entry, UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);, +		prepareEntry(entry, UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);, +	private void prepareEntry(ZipArchiveEntry entry, int unixMode) {, +		if (!this.preserveFileTimestamps) {, +			entry.setTime(CONSTANT_TIME_FOR_ZIP_ENTRIES);, +		}, +		entry.setUnixMode(unixMode);, +	}, +, +					: CONSTANT_TIME_FOR_ZIP_ENTRIES;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java, +import org.springframework.boot.loader.tools.FileUtils;, +	public void reproducibleArchive() throws InvalidRunnerConfigurationException,, +			UnexpectedBuildFailure, IOException, InterruptedException {, +		assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName), +				.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		File jar = new File(this.gradleBuild.getProjectDir(), "build/libs"), +				.listFiles()[0];, +		String firstHash = FileUtils.sha1Hash(jar);, +		Thread.sleep(1500);, +		assertThat(this.gradleBuild.build("clean", this.taskName), +				.task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		String secondHash = FileUtils.sha1Hash(jar);, +		assertThat(firstHash).isEqualTo(secondHash);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.Calendar;, +import java.util.GregorianCalendar;, +	private static final long CONSTANT_TIME_FOR_ZIP_ENTRIES = new GregorianCalendar(1980,, +			Calendar.FEBRUARY, 1, 0, 0, 0).getTimeInMillis();, +, +		prepareEntry(entry, UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);, +		prepareEntry(entry, UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);, +	private void prepareEntry(ZipArchiveEntry entry, int unixMode) {, +		if (!this.preserveFileTimestamps) {, +			entry.setTime(CONSTANT_TIME_FOR_ZIP_ENTRIES);, +		}, +		entry.setUnixMode(unixMode);, +	}, +, +					: CONSTANT_TIME_FOR_ZIP_ENTRIES;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java, +import org.springframework.boot.loader.tools.FileUtils;, +	public void reproducibleArchive() throws InvalidRunnerConfigurationException,, +			UnexpectedBuildFailure, IOException, InterruptedException {, +		assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName), +				.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		File jar = new File(this.gradleBuild.getProjectDir(), "build/libs"), +				.listFiles()[0];, +		String firstHash = FileUtils.sha1Hash(jar);, +		Thread.sleep(1500);, +		assertThat(this.gradleBuild.build("clean", this.taskName), +				.task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		String secondHash = FileUtils.sha1Hash(jar);, +		assertThat(firstHash).isEqualTo(secondHash);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/resources/org/springframework/boot/gradle/tasks/bundling/BootJarIntegrationTests-reproducibleArchive.gradle, +buildscript {, +	dependencies {, +		classpath files(pluginClasspath.split(',')), +	}, +}, +, +apply plugin: 'java', +apply plugin: 'org.springframework.boot', +, +bootJar {, +	mainClassName = 'com.example.Application', +	preserveFileTimestamps = false, +    reproducibleFileOrder = true, +}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import java.util.Calendar;, +import java.util.GregorianCalendar;]