[+++ b/spring-boot/pom.xml, +++ b/spring-boot/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializer.java, +	/**, +	 * Placeholder pattern to resolve for application name, +	 */, +	private static final String NAME_PATTERN = "${vcap.application.name:${spring.application.name:${spring.config.name:application}}}";, +	/**, +	 * Placeholder pattern to resolve for application index, +	 */, +	private static final String INDEX_PATTERN = "${vcap.application.instance_index:${spring.application.index:${server.port:${PORT:null}}}}";, +, +	private String name;, +		this(NAME_PATTERN);, +		String index = environment.resolvePlaceholders(INDEX_PATTERN);, +		if (!"null".equals(index)) {, +++ b/spring-boot/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializer.java, +	/**, +	 * Placeholder pattern to resolve for application name, +	 */, +	private static final String NAME_PATTERN = "${vcap.application.name:${spring.application.name:${spring.config.name:application}}}";, +	/**, +	 * Placeholder pattern to resolve for application index, +	 */, +	private static final String INDEX_PATTERN = "${vcap.application.instance_index:${spring.application.index:${server.port:${PORT:null}}}}";, +, +	private String name;, +		this(NAME_PATTERN);, +		String index = environment.resolvePlaceholders(INDEX_PATTERN);, +		if (!"null".equals(index)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void customId() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		this.context = application.run("--spring.application.name=foo");, +		assertEquals("foo", this.context.getId());, +	}, +, +	@Test, +++ b/spring-boot/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializer.java, +	/**, +	 * Placeholder pattern to resolve for application name, +	 */, +	private static final String NAME_PATTERN = "${vcap.application.name:${spring.application.name:${spring.config.name:application}}}";, +	/**, +	 * Placeholder pattern to resolve for application index, +	 */, +	private static final String INDEX_PATTERN = "${vcap.application.instance_index:${spring.application.index:${server.port:${PORT:null}}}}";, +, +	private String name;, +		this(NAME_PATTERN);, +		String index = environment.resolvePlaceholders(INDEX_PATTERN);, +		if (!"null".equals(index)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void customId() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		this.context = application.run("--spring.application.name=foo");, +		assertEquals("foo", this.context.getId());, +	}, +, +	@Test, +++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializerTests.java, +				"spring.config.name:foo", "PORT:8080", "vcap.application.name:bar",, +		assertEquals("bar:2", context.getId());, +++ b/spring-boot/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializer.java, +	/**, +	 * Placeholder pattern to resolve for application name, +	 */, +	private static final String NAME_PATTERN = "${vcap.application.name:${spring.application.name:${spring.config.name:application}}}";, +	/**, +	 * Placeholder pattern to resolve for application index, +	 */, +	private static final String INDEX_PATTERN = "${vcap.application.instance_index:${spring.application.index:${server.port:${PORT:null}}}}";, +, +	private String name;, +		this(NAME_PATTERN);, +		String index = environment.resolvePlaceholders(INDEX_PATTERN);, +		if (!"null".equals(index)) {, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void customId() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		this.context = application.run("--spring.application.name=foo");, +		assertEquals("foo", this.context.getId());, +	}, +, +	@Test, +++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ContextIdApplicationContextInitializerTests.java, +				"spring.config.name:foo", "PORT:8080", "vcap.application.name:bar",, +		assertEquals("bar:2", context.getId());, +++ b/spring-boot/src/test/resources/logback-test.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<configuration>, +	<property name="LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] spring - ${PID:-????} %5p [%t] --- %c{1}: %m%n"/>, +	<property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-/tmp/logs/service.log}}"/>, +	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">]