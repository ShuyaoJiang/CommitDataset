[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java, + * Register a JMX component that allows to administer the current application. Intended, + * for internal use only., +@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false), +	 * admin mbean., +	 * The default {@code ObjectName} of the application admin mbean., +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +	public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java, + * Register a JMX component that allows to administer the current application. Intended, + * for internal use only., +@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false), +	 * admin mbean., +	 * The default {@code ObjectName} of the application admin mbean., +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +	public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationLifecycleAutoConfigurationTests.java, +	private static final String ENABLE_LIFECYCLE_PROP = "spring.application.admin.enabled=true";, +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +				fail("Admin MBean should have been exposed with custom name");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java, + * Register a JMX component that allows to administer the current application. Intended, + * for internal use only., +@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false), +	 * admin mbean., +	 * The default {@code ObjectName} of the application admin mbean., +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +	public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationLifecycleAutoConfigurationTests.java, +	private static final String ENABLE_LIFECYCLE_PROP = "spring.application.admin.enabled=true";, +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +				fail("Admin MBean should have been exposed with custom name");, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java, +	private static final String ENABLE_MBEAN_PROPERTY = "--spring.application.admin.enabled=true";, +	private static final String JMX_NAME_PROPERTY_PREFIX = "--spring.application.admin.jmx-name=";, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java, + * Register a JMX component that allows to administer the current application. Intended, + * for internal use only., +@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false), +	 * admin mbean., +	 * The default {@code ObjectName} of the application admin mbean., +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +	public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationLifecycleAutoConfigurationTests.java, +	private static final String ENABLE_LIFECYCLE_PROP = "spring.application.admin.enabled=true";, +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +				fail("Admin MBean should have been exposed with custom name");, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java, +	private static final String ENABLE_MBEAN_PROPERTY = "--spring.application.admin.enabled=true";, +	private static final String JMX_NAME_PROPERTY_PREFIX = "--spring.application.admin.jmx-name=";, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java, +	private static final Log logger = LogFactory.getLog(SpringApplicationAdmin.class);, +		server.registerMBean(new SpringApplicationAdmin(), this.objectName);, +			logger.debug("Application Admin MBean registered with name '", +	private class SpringApplicationAdmin implements SpringApplicationAdminMXBean {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java, + * Register a JMX component that allows to administer the current application. Intended, + * for internal use only., +@ConditionalOnProperty(prefix = "spring.application.admin", value = "enabled", havingValue = "true", matchIfMissing = false), +	 * admin mbean., +	 * The default {@code ObjectName} of the application admin mbean., +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +	public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar(), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationLifecycleAutoConfigurationTests.java, +	private static final String ENABLE_LIFECYCLE_PROP = "spring.application.admin.enabled=true";, +	private static final String DEFAULT_JMX_NAME = "org.springframework.boot:type=Admin,name=SpringApplication";, +				fail("Admin MBean should have been exposed with custom name");, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java, +	private static final String ENABLE_MBEAN_PROPERTY = "--spring.application.admin.enabled=true";, +	private static final String JMX_NAME_PROPERTY_PREFIX = "--spring.application.admin.jmx-name=";, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrar.java, +	private static final Log logger = LogFactory.getLog(SpringApplicationAdmin.class);, +		server.registerMBean(new SpringApplicationAdmin(), this.objectName);, +			logger.debug("Application Admin MBean registered with name '", +	private class SpringApplicationAdmin implements SpringApplicationAdminMXBean {, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBeanRegistrarTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.admin;, +, +import java.lang.management.ManagementFactory;, +, +import javax.management.InstanceNotFoundException;, +import javax.management.MBeanServer;, +import javax.management.MalformedObjectNameException;, +import javax.management.ObjectName;]