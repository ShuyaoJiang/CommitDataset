[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy;, +	public void hibernate4NoCustomNamingStrategy() throws Exception {, +		JpaProperties properties = load(HibernateVersion.V4);, +		Map<String, String> hibernateProperties = properties, +				.getHibernateProperties(mockStandaloneDataSource());, +		assertThat(hibernateProperties).contains(entry("hibernate.ejb.naming_strategy",, +				SpringNamingStrategy.class.getName()));, +		assertThat(hibernateProperties).doesNotContainKeys(, +				"hibernate.implicit_naming_strategy",, +				"hibernate.physical_naming_strategy");, +	}, +, +	@Test, +		return this.context.getBean(JpaProperties.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy;, +	public void hibernate4NoCustomNamingStrategy() throws Exception {, +		JpaProperties properties = load(HibernateVersion.V4);, +		Map<String, String> hibernateProperties = properties, +				.getHibernateProperties(mockStandaloneDataSource());, +		assertThat(hibernateProperties).contains(entry("hibernate.ejb.naming_strategy",, +				SpringNamingStrategy.class.getName()));, +		assertThat(hibernateProperties).doesNotContainKeys(, +				"hibernate.implicit_naming_strategy",, +				"hibernate.physical_naming_strategy");, +	}, +, +	@Test, +		return this.context.getBean(JpaProperties.class);, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.jpa.hibernate.ddl-auto=create-drop, +	spring.jpa.hibernate.naming.physical-strategy=com.example.MyPhysicalNamingStrategy, +	spring.jpa.database=H2, +	spring.jpa.show-sql=true, +The `ddl-auto` setting is a special case in that it has different defaults depending on, +whether you are using an embedded database (`create-drop`) or not (`none`). In addition, +all properties in `+spring.jpa.properties.*+` are passed through as normal JPA properties, +(with the prefix stripped) when the local `EntityManagerFactory` is created., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy;, +	public void hibernate4NoCustomNamingStrategy() throws Exception {, +		JpaProperties properties = load(HibernateVersion.V4);, +		Map<String, String> hibernateProperties = properties, +				.getHibernateProperties(mockStandaloneDataSource());, +		assertThat(hibernateProperties).contains(entry("hibernate.ejb.naming_strategy",, +				SpringNamingStrategy.class.getName()));, +		assertThat(hibernateProperties).doesNotContainKeys(, +				"hibernate.implicit_naming_strategy",, +				"hibernate.physical_naming_strategy");, +	}, +, +	@Test, +		return this.context.getBean(JpaProperties.class);, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +	spring.jpa.hibernate.ddl-auto=create-drop, +	spring.jpa.hibernate.naming.physical-strategy=com.example.MyPhysicalNamingStrategy, +	spring.jpa.database=H2, +	spring.jpa.show-sql=true, +The `ddl-auto` setting is a special case in that it has different defaults depending on, +whether you are using an embedded database (`create-drop`) or not (`none`). In addition, +all properties in `+spring.jpa.properties.*+` are passed through as normal JPA properties, +(with the prefix stripped) when the local `EntityManagerFactory` is created., +++ b/spring-boot/src/main/java/org/springframework/boot/orm/jpa/hibernate/SpringNamingStrategy.java]