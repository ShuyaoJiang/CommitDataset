[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import java.io.File;, +import java.util.Map;, +, +	/**, +	 * If a fully executable jar (for *nix machines) should be generated by prepending a, +	 * launch script to the jar., +	 */, +	boolean executable = true;, +, +	/**, +	 * The embedded launch script to prepend to the front of the jar if it is fully, +	 * executable. If not specified the 'Spring Boot' default script will be used., +	 */, +	File embeddedLaunchScript;, +, +	/**, +	 * Properties that should be expanded in the embedded launch script., +	 */, +	Map<String,String> embeddedLaunchScriptProperties;, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import java.io.File;, +import java.util.Map;, +, +	/**, +	 * If a fully executable jar (for *nix machines) should be generated by prepending a, +	 * launch script to the jar., +	 */, +	boolean executable = true;, +, +	/**, +	 * The embedded launch script to prepend to the front of the jar if it is fully, +	 * executable. If not specified the 'Spring Boot' default script will be used., +	 */, +	File embeddedLaunchScript;, +, +	/**, +	 * Properties that should be expanded in the embedded launch script., +	 */, +	Map<String,String> embeddedLaunchScriptProperties;, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java, +import org.springframework.boot.loader.tools.DefaultLaunchScript;, +import org.springframework.boot.loader.tools.LaunchScript;, +	void setOutputFile(File file) {, +		this.outputFile = file;, +	}, +, +				LaunchScript launchScript = getLaunchScript();, +				repackager.repackage(file, this.libraries, launchScript);, +, +		private LaunchScript getLaunchScript() throws IOException {, +			if (this.extension.isExecutable()) {, +				return new DefaultLaunchScript(this.extension.getEmbeddedLaunchScript(),, +						this.extension.getEmbeddedLaunchScriptProperties());, +			}, +			return null;, +		}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +import java.io.File;, +import java.util.Map;, +, +	/**, +	 * If a fully executable jar (for *nix machines) should be generated by prepending a, +	 * launch script to the jar., +	 */, +	boolean executable = true;, +, +	/**, +	 * The embedded launch script to prepend to the front of the jar if it is fully, +	 * executable. If not specified the 'Spring Boot' default script will be used., +	 */, +	File embeddedLaunchScript;, +, +	/**, +	 * Properties that should be expanded in the embedded launch script., +	 */, +	Map<String,String> embeddedLaunchScriptProperties;, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java, +import org.springframework.boot.loader.tools.DefaultLaunchScript;, +import org.springframework.boot.loader.tools.LaunchScript;, +	void setOutputFile(File file) {, +		this.outputFile = file;, +	}, +, +				LaunchScript launchScript = getLaunchScript();, +				repackager.repackage(file, this.libraries, launchScript);, +, +		private LaunchScript getLaunchScript() throws IOException {, +			if (this.extension.isExecutable()) {, +				return new DefaultLaunchScript(this.extension.getEmbeddedLaunchScript(),, +						this.extension.getEmbeddedLaunchScriptProperties());, +			}, +			return null;, +		}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/DefaultLaunchScript.java]