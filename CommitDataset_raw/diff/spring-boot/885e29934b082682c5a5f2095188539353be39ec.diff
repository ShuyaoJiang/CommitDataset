[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import org.springframework.util.ObjectUtils;, + * @author Stephane Nicoll, +	protected AnnotationConfigApplicationContext context;, +		if (this.context != null) {, +	}, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(PropertyPlaceholderAutoConfiguration.class,, +		ctx.refresh();, +		load();, +		load(new Class<?>[0],, +				new Class<?>[] { DataSourceTransactionManagerAutoConfiguration.class });, +		load("spring.jpa.properties.a:b", "spring.jpa.properties.a.b:c",, +				"spring.jpa.properties.c:d");, +		load(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class);, +		load(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class);, +		load(TestConfigurationWithTransactionManager.class);, +		load(TestConfigurationWithCustomPersistenceUnitManager.class);, +	protected void load(String... environment) {, +		load(new Class<?>[0], new Class<?>[0], environment);, +	protected void load(Class<?> config, String... environment) {, +		Class<?>[] configs = config != null ? new Class<?>[] { config } : null;, +		load(configs, new Class<?>[0], environment);, +	}, +, +	protected void load(Class<?>[] configs, Class<?>[] autoConfigs, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		TestPropertyValues.of(environment), +				.and("spring.datasource.generate-unique-name", "true"), +				.applyTo(ctx);, +		ctx.register(TestConfiguration.class);, +		if (!ObjectUtils.isEmpty(configs)) {, +			ctx.register(configs);, +		}, +		ctx.register(, +		if (!ObjectUtils.isEmpty(autoConfigs)) {, +			ctx.register(autoConfigs);, +		}, +		ctx.refresh();, +		this.context = ctx;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +import org.springframework.util.ObjectUtils;, + * @author Stephane Nicoll, +	protected AnnotationConfigApplicationContext context;, +		if (this.context != null) {, +	}, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(PropertyPlaceholderAutoConfiguration.class,, +		ctx.refresh();, +		load();, +		load(new Class<?>[0],, +				new Class<?>[] { DataSourceTransactionManagerAutoConfiguration.class });, +		load("spring.jpa.properties.a:b", "spring.jpa.properties.a.b:c",, +				"spring.jpa.properties.c:d");, +		load(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class);, +		load(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class);, +		load(TestConfigurationWithTransactionManager.class);, +		load(TestConfigurationWithCustomPersistenceUnitManager.class);, +	protected void load(String... environment) {, +		load(new Class<?>[0], new Class<?>[0], environment);, +	protected void load(Class<?> config, String... environment) {, +		Class<?>[] configs = config != null ? new Class<?>[] { config } : null;, +		load(configs, new Class<?>[0], environment);, +	}, +, +	protected void load(Class<?>[] configs, Class<?>[] autoConfigs, String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		TestPropertyValues.of(environment), +				.and("spring.datasource.generate-unique-name", "true"), +				.applyTo(ctx);, +		ctx.register(TestConfiguration.class);, +		if (!ObjectUtils.isEmpty(configs)) {, +			ctx.register(configs);, +		}, +		ctx.register(, +		if (!ObjectUtils.isEmpty(autoConfigs)) {, +			ctx.register(autoConfigs);, +		}, +		ctx.refresh();, +		this.context = ctx;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, + * @author Stephane Nicoll, +		load("spring.datasource.data:classpath:/city.sql",, +				// Missing:, +				"spring.datasource.schema:classpath:/ddl.sql");, +	@Test, +	public void testDataScript() throws Exception {, +		this.thrown.expect(BeanCreationException.class);, +		load("spring.datasource.data:classpath:/city.sql");, +		load(new Class<?>[0], new Class<?>[] { FlywayAutoConfiguration.class },, +				"spring.datasource.initialize:false",, +				"spring.jpa.hibernate.ddl-auto:validate");, +		load(new Class<?>[0], new Class<?>[] { LiquibaseAutoConfiguration.class },, +				"spring.datasource.initialize:false",, +				"spring.jpa.hibernate.ddl-auto:validate");, +		load(JtaAutoConfiguration.class);, +		load(JtaAutoConfiguration.class,, +				"spring.jpa.properties.hibernate.transaction.jta.platform:", +						+ TestJtaPlatform.class.getName());, +		load("spring.transaction.default-timeout:30",]