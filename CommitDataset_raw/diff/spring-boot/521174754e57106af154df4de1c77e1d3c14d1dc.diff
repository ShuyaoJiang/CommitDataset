[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.expression.Expression;, +import org.springframework.expression.spel.standard.SpelExpressionParser;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +import org.springframework.web.servlet.View;, +// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is, +// available, +@AutoConfigureBefore(WebMvcAutoConfiguration.class), +	private SpelView defaultErrorView = new SpelView(, +			"<html><body><h1>Whitelabel Error Page</h1>", +					+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>", +					+ "<div id='created'>${timestamp}</div>", +					+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>", +					+ "<div>${message}</div>" + "</body></html>");, +, +	@Bean(name = "error"), +	@ConditionalOnMissingBean(name = "error"), +	public View defaultErrorView() {, +		return this.defaultErrorView;, +	}, +, +	private static class SpelView implements View {, +, +		private final String template;, +, +		private final SpelExpressionParser parser = new SpelExpressionParser();, +, +		private final StandardEvaluationContext context = new StandardEvaluationContext();, +, +		private PropertyPlaceholderHelper helper;, +, +		private PlaceholderResolver resolver;, +, +		public SpelView(String template) {, +			this.template = template;, +			this.context.addPropertyAccessor(new MapAccessor());, +			this.helper = new PropertyPlaceholderHelper("${", "}");, +			this.resolver = new PlaceholderResolver() {, +				public String resolvePlaceholder(String name) {, +					Expression expression = SpelView.this.parser.parseExpression(name);, +					Object value = expression.getValue(SpelView.this.context);, +					return value == null ? null : value.toString();, +				}, +			};, +		}, +, +		public String getContentType() {, +			return "text/html";, +		}, +, +		public void render(Map<String, ?> model, HttpServletRequest request,, +				HttpServletResponse response) throws Exception {, +			if (response.getContentType() == null) {, +				response.setContentType(getContentType());, +			}, +			Map<String, Object> map = new HashMap<String, Object>(model);, +			map.put("path", request.getContextPath());, +			this.context.setRootObject(map);, +			String result = this.helper.replacePlaceholders(this.template, this.resolver);, +			response.getWriter().append(result);, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.expression.Expression;, +import org.springframework.expression.spel.standard.SpelExpressionParser;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +import org.springframework.web.servlet.View;, +// Ensure this loads before the main WebMvcAutoConfiguration so that the error View is, +// available, +@AutoConfigureBefore(WebMvcAutoConfiguration.class), +	private SpelView defaultErrorView = new SpelView(, +			"<html><body><h1>Whitelabel Error Page</h1>", +					+ "<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>", +					+ "<div id='created'>${timestamp}</div>", +					+ "<div>There was an unexpected error (type=${error}, status=${status}).</div>", +					+ "<div>${message}</div>" + "</body></html>");, +, +	@Bean(name = "error")]