[+++ b/spring-bootstrap-actuator/docs/Features.md, +## Providing Defaults for Externalized Configuration, +, +For `@ConfigurationProperties` beans that are provided by the, +framework itself you can always change the values that are bound to it, +by changing `application.properties`.  But it is sometimes also useful, +to change the default values imperatively in Java, so get more control, +over the process.  You can do this by declaring a bean of the same, +type in your application context, e.g. for the server properties:, +, +    @AssertMissingBean(ServerProperties.class), +    @Bean, +    public ServerProperties serverProperties() {, +        ServerProperties server = new ServerProperties();, +        server.setPort(8888);, +        return server;, +    }, +, +Note the use of `@AssertMissingBean` to guard against any mistakes, +where the bean is already defined (and therefore might already have, +been bound)., +, +    $ mvn user:password@localhost:8080/metrics, +If the management server is running on a different port it is, +unsecured by default.  If you want to secure it you can add a security, +auto configuration explicitly, +, +(The presence of either of those properties will switch on the, +valve. Or you can add the `RemoteIpValve` yourself by adding a, +Spring Security can also be configured to require a secure channel for, +all (or some requests). To switch that on in an Actuator application, +you just need to set `security.require_https: true` in, +`application.properties`., +++ b/spring-bootstrap-actuator/docs/Features.md, +## Providing Defaults for Externalized Configuration, +, +For `@ConfigurationProperties` beans that are provided by the, +framework itself you can always change the values that are bound to it, +by changing `application.properties`.  But it is sometimes also useful, +to change the default values imperatively in Java, so get more control, +over the process.  You can do this by declaring a bean of the same, +type in your application context, e.g. for the server properties:, +, +    @AssertMissingBean(ServerProperties.class), +    @Bean, +    public ServerProperties serverProperties() {, +        ServerProperties server = new ServerProperties();, +        server.setPort(8888);, +        return server;, +    }, +, +Note the use of `@AssertMissingBean` to guard against any mistakes, +where the bean is already defined (and therefore might already have, +been bound)., +, +    $ mvn user:password@localhost:8080/metrics, +If the management server is running on a different port it is, +unsecured by default.  If you want to secure it you can add a security, +auto configuration explicitly, +, +(The presence of either of those properties will switch on the, +valve. Or you can add the `RemoteIpValve` yourself by adding a, +Spring Security can also be configured to require a secure channel for, +all (or some requests). To switch that on in an Actuator application, +you just need to set `security.require_https: true` in, +`application.properties`., +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ManagementServerConfiguration.java, +import java.io.IOException;, +, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.bootstrap.context.annotation.ConditionalOnClass;, +import org.springframework.context.annotation.Import;, +import org.springframework.web.filter.GenericFilterBean;, +@Import(ManagementSecurityConfiguration.class), +, +@Configuration, +@ConditionalOnClass(name = {, +		"org.springframework.security.config.annotation.web.EnableWebSecurity",, +		"javax.servlet.Filter" }), +class ManagementSecurityConfiguration {, +, +	@Bean, +	// TODO: enable and get rid of the empty filter when @ConditionalOnBean works, +	// @ConditionalOnBean(name = "springSecurityFilterChain"), +	public Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {, +		BeanFactory parent = beanFactory.getParentBeanFactory();, +		if (parent != null && parent.containsBean("springSecurityFilterChain")) {, +			return parent.getBean("springSecurityFilterChain", Filter.class);, +		}, +		return new GenericFilterBean() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response,, +					FilterChain chain) throws IOException, ServletException {, +				chain.doFilter(request, response);]