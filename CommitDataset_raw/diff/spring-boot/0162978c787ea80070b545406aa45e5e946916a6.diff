[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		Flux<ServerResponse> result = Flux, +				.flatMap((viewName) -> renderErrorView(viewName, response, error));, +		if (this.errorProperties.getWhitelabel().isEnabled()) {, +			result = result.switchIfEmpty(renderDefaultErrorView(response, error));, +		}, +		else {, +			Throwable ex = getError(request);, +			result = result.switchIfEmpty(Mono.error(ex));, +		}, +		return result.next().doOnNext((resp) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java, +		Flux<ServerResponse> result = Flux, +				.flatMap((viewName) -> renderErrorView(viewName, response, error));, +		if (this.errorProperties.getWhitelabel().isEnabled()) {, +			result = result.switchIfEmpty(renderDefaultErrorView(response, error));, +		}, +		else {, +			Throwable ex = getError(request);, +			result = result.switchIfEmpty(Mono.error(ex));, +		}, +		return result.next().doOnNext((resp) -> logError(request, errorStatus));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java, +	public void jsonError() {, +	public void notFound() {, +			client.get().uri("/notFound").exchange(), +					.expectStatus().isNotFound(), +					.expectBody().jsonPath("status"), +	public void htmlError() {, +	public void bindingResultError() {, +					.syncBody("{}").exchange(), +					.expectStatus().isBadRequest(), +					.expectBody().jsonPath("status"), +	public void includeStackTraceOnParam() {, +	public void neverIncludeStackTrace() {, +	public void statusException() {, +					client.get().uri("/badRequest").exchange(), +							.expectStatus().isBadRequest(), +							.expectBody().jsonPath("status").isEqualTo("400"), +							.jsonPath("error"), +	public void defaultErrorView() {, +	public void escapeHtmlInDefaultErrorView() {, +	public void testExceptionWithNullMessage() {, +							.accept(MediaType.TEXT_HTML).exchange(), +							.expectStatus().isNotFound(), +							.expectHeader().contentType(MediaType.TEXT_HTML), +							.expectBody(String.class).returnResult().getResponseBody();, +	public void responseCommitted() {, +	@Test, +	public void whilelabelDisabled() {, +		this.contextRunner, +				.withPropertyValues("server.error.whitelabel.enabled=false",, +						"spring.mustache.prefix=classpath:/unknown/"), +				.run((context) -> {, +			WebTestClient client = WebTestClient.bindToApplicationContext(context), +					.build();, +			client.get().uri("/notfound"), +					.accept(MediaType.TEXT_HTML).exchange(), +					.expectStatus().isNotFound(), +					.expectBody().isEmpty();, +		});, +	}, +]