[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, + * Tests for {@link HealthEndpointAutoConfiguration} in a servlet environment., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, + * Tests for {@link HealthEndpointAutoConfiguration} in a servlet environment., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebFluxEndpointCorsIntegrationTests.java, +		createWebTestClient(), +				.options().uri("/actuator/beans"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, + * Tests for {@link HealthEndpointAutoConfiguration} in a servlet environment., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebFluxEndpointCorsIntegrationTests.java, +		createWebTestClient(), +				.options().uri("/actuator/beans"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +		createMockMvc(), +				.perform(options("/actuator/beans").header("Origin", "foo.example.com"), +						.header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET")), +				.andExpect(header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, + * Tests for {@link HealthEndpointAutoConfiguration} in a servlet environment., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebFluxEndpointCorsIntegrationTests.java, +		createWebTestClient(), +				.options().uri("/actuator/beans"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +		createMockMvc(), +				.perform(options("/actuator/beans").header("Origin", "foo.example.com"), +						.header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET")), +				.andExpect(header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +				int acceptCount) {, +				int maxConnections) {, +				int maxThreads) {, +				int minSpareThreads) {, +				TomcatServletWebServerFactory factory, int maxHttpHeaderSize) {, +				TomcatServletWebServerFactory factory, int maxHttpPostSize) {, +				boolean redirectContextRoot) {, +				boolean useRelativeRedirects) {, +				UndertowServletWebServerFactory factory, int maxHttpHeaderSize) {, +				UndertowServletWebServerFactory factory, long maxHttpPostSize) {, +				JettyServletWebServerFactory factory, int maxHttpHeaderSize) {, +				int maxHttpPostSize) {, +				ServerProperties.Jetty.Accesslog properties) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +		if (attributes != null) {, +			return attributes;, +		}, +						+ "return an @Endpoint or @EndpointExtension");, +		return getEndpointAttributes(attributes.getClass("endpoint"));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionTests.java, + * Tests for {@link HealthEndpointAutoConfiguration} in a servlet environment., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebFluxEndpointCorsIntegrationTests.java, +		createWebTestClient(), +				.options().uri("/actuator/beans"), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointCorsIntegrationTests.java, +		createMockMvc(), +				.perform(options("/actuator/beans").header("Origin", "foo.example.com"), +						.header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET")), +				.andExpect(header().doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +				int acceptCount) {, +				int maxConnections) {, +				int maxThreads) {, +				int minSpareThreads) {, +				TomcatServletWebServerFactory factory, int maxHttpHeaderSize) {, +				TomcatServletWebServerFactory factory, int maxHttpPostSize) {, +				boolean redirectContextRoot) {, +				boolean useRelativeRedirects) {, +				UndertowServletWebServerFactory factory, int maxHttpHeaderSize) {, +				UndertowServletWebServerFactory factory, long maxHttpPostSize) {, +				JettyServletWebServerFactory factory, int maxHttpHeaderSize) {, +				int maxHttpPostSize) {]