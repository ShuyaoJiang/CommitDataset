[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/index.adoc, +:micrometer-registry-documentation: http://micrometer.io/docs/registry, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/index.adoc, +:micrometer-registry-documentation: http://micrometer.io/docs/registry, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +- https://newrelic.com[New Relic], +- https://signalfx.com[SignalFx], +- StatsD, +TIP: To learn more about Micrometer's capabilities, please refer to its, +https://micrometer.io/docs[reference documentation], in particular the, +{micrometer-concepts-documentation}[concepts section]., +, +, +[[production-ready-metrics-getting-started]], +=== Getting started, +Spring Boot auto-configures a composite `MeterRegistry` and adds a registry to the, +composite for each of the supported implementations that it finds on the classpath. Having, +a dependency on `micrometer-registry-{system}` in your runtime classpath is enough for, +Spring Boot to configure the registry., +, +Most registries share common features. For instance, you can disable a particular registry, +even if the Micrometer registry implementation is on the classpath. For instance, to, +disable Datadog:, +, +[source,properties,indent=0], +----, +	management.metrics.export.datadog.enabled=false, +----, +, +Spring Boot will also add any auto-configured registries to the global static composite, +registry on the `Metrics` class unless you explicitly tell it not to:, +, +[source,properties,indent=0], +----, +	management.metrics.use-global-registry=false, +----, +, +You can register any number of `MeterRegistryCustomizer` beans to further configure the, +registry, such as applying common tags, before any meters are registered with the, +registry:, +, +[source,java,indent=0], +----, +	@Bean, +	MeterRegistryCustomizer<MeterRegistry> metricsCommonTags() {, +		return registry -> registry.config().commonTags("region", "us-east-1");, +	}, +----, +, +You can apply customizations to particular registry implementations by being more specific, +about the generic type:, +, +[source,java,indent=0], +----, +	@Bean, +	MeterRegistryCustomizer<GraphiteMeterRegistry> graphiteMetricsNamingConvention() {, +		return registry -> registry.config().namingConvention(MY_CUSTOM_CONVENTION);, +	}, +----, +, +With that setup in place you can inject `MeterRegistry` in your components and register, +metrics:, +, +[source,java,indent=0], +----, +include::{code-examples}/actuate/metrics/SampleBean.java[tag=example], +----, +, +Spring Boot also <<production-ready-metrics-meter,configures built-in instrumentation>>, +(i.e. `MeterBinder` implementations) that you can control via configuration or dedicated, +annotation markers., +, +, +, +[[production-ready-metrics-export]], +=== Supported monitoring systems, +, +, +, +[[production-ready-metrics-export-atlas]], +==== Atlas, +By default, metrics are exported to {micrometer-registry-documentation}/atlas[Atlas], +running on your local machine. The location of the Atlas server to use can be provided, +using:, +, +[source,properties,indent=0], +----, +	management.metrics.export.atlas.uri=http://atlas.example.com:7101/api/v1/publish, +----, +, +, +, +[[production-ready-metrics-export-datadog]], +==== Datadog, +Datadog registry pushes metrics to datadoghq periodically. To export metrics, +to {micrometer-registry-documentation}/datadog[Datadog], your API key must be provided:, +, +[source,properties,indent=0], +----, +	management.metrics.export.datadog.api-key=YOUR_KEY]