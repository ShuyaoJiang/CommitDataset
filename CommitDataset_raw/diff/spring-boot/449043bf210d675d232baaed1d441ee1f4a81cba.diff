[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +			Flyway flyway = new SpringBootFlyway();, +, +	private static class SpringBootFlyway extends Flyway {, +, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +		@Override, +		public void setLocations(String... locations) {, +			if (usesVendorLocation(locations)) {, +				try {, +					String url = (String) JdbcUtils.extractDatabaseMetaData(, +							getDataSource(), "getURL");, +					DatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);, +					if (vendor != DatabaseDriver.UNKNOWN) {, +						for (int i = 0; i < locations.length; i++) {, +							locations[i] = locations[i].replace(, +									VENDOR_PLACEHOLDER,, +									vendor.getId());, +						}, +					}, +				}, +				catch (MetaDataAccessException ex) {, +					throw new IllegalStateException(ex);, +				}, +			}, +			super.setLocations(locations);, +		}, +, +, +		private boolean usesVendorLocation(String... locations) {, +			for (String location : locations) {, +				if (location.contains(VENDOR_PLACEHOLDER)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +			Flyway flyway = new SpringBootFlyway();, +, +	private static class SpringBootFlyway extends Flyway {, +, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +		@Override, +		public void setLocations(String... locations) {, +			if (usesVendorLocation(locations)) {, +				try {, +					String url = (String) JdbcUtils.extractDatabaseMetaData(, +							getDataSource(), "getURL");, +					DatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);, +					if (vendor != DatabaseDriver.UNKNOWN) {, +						for (int i = 0; i < locations.length; i++) {, +							locations[i] = locations[i].replace(, +									VENDOR_PLACEHOLDER,, +									vendor.getId());, +						}, +					}, +				}, +				catch (MetaDataAccessException ex) {, +					throw new IllegalStateException(ex);, +				}, +			}, +			super.setLocations(locations);, +		}, +, +, +		private boolean usesVendorLocation(String... locations) {, +			for (String location : locations) {, +				if (location.contains(VENDOR_PLACEHOLDER)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +	 * Locations of migrations scripts. Can contain the special "{vendor}" placeholder, +	 * to use vendor-specific locations., +	private List<String> locations = new ArrayList<String>(Collections.singletonList("db/migration"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +			Flyway flyway = new SpringBootFlyway();, +, +	private static class SpringBootFlyway extends Flyway {, +, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +		@Override, +		public void setLocations(String... locations) {, +			if (usesVendorLocation(locations)) {, +				try {, +					String url = (String) JdbcUtils.extractDatabaseMetaData(, +							getDataSource(), "getURL");, +					DatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);]