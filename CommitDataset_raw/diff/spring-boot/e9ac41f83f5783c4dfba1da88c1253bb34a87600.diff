[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.data.domain.PageRequest;, +import org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer;, +import org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer;, + * @author Vedran Pavic, +@EnableConfigurationProperties(SpringDataWebProperties.class), +	private final SpringDataWebProperties properties;, +, +	public SpringDataWebAutoConfiguration(SpringDataWebProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public PageableHandlerMethodArgumentResolverCustomizer pageableCustomizer() {, +		return pageableResolver -> {, +			pageableResolver.setFallbackPageable(PageRequest.of(0,, +					this.properties.getPageable().getDefaultPageSize()));, +			pageableResolver.setPageParameterName(, +					this.properties.getPageable().getPageParameter());, +			pageableResolver.setSizeParameterName(, +					this.properties.getPageable().getSizeParameter());, +		};, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public SortHandlerMethodArgumentResolverCustomizer sortCustomizer() {, +		return sortResolver -> sortResolver, +				.setSortParameter(this.properties.getSort().getSortParameter());, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.data.domain.PageRequest;, +import org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer;, +import org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer;, + * @author Vedran Pavic, +@EnableConfigurationProperties(SpringDataWebProperties.class), +	private final SpringDataWebProperties properties;, +, +	public SpringDataWebAutoConfiguration(SpringDataWebProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public PageableHandlerMethodArgumentResolverCustomizer pageableCustomizer() {, +		return pageableResolver -> {, +			pageableResolver.setFallbackPageable(PageRequest.of(0,, +					this.properties.getPageable().getDefaultPageSize()));, +			pageableResolver.setPageParameterName(, +					this.properties.getPageable().getPageParameter());, +			pageableResolver.setSizeParameterName(, +					this.properties.getPageable().getSizeParameter());, +		};, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public SortHandlerMethodArgumentResolverCustomizer sortCustomizer() {, +		return sortResolver -> sortResolver, +				.setSortParameter(this.properties.getSort().getSortParameter());, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebProperties.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.data.web;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +, +/**, + * Configuration properties for Spring Data Web., + *, + * @author Vedran Pavic, + * @since 2.0.0, + */, +@ConfigurationProperties("spring.data.web"), +public class SpringDataWebProperties {, +, +	private final Pageable pageable = new Pageable();, +]