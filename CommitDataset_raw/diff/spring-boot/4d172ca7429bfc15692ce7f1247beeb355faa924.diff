[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/RunApp.java, +		} else {, +					// remove duplicates from resources and build, +					for (File directory : allResources) {, +						if (directory.isDirectory()) {, +							for (String name : directory.list()) {, +								File file = new File(outputs, name);, +								if (file.exists() && file.canWrite()) {, +									getProject().delete(file);, +								}, +							}, +						}, +		} catch (IOException ex) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/RunApp.java, +		} else {, +					// remove duplicates from resources and build, +					for (File directory : allResources) {, +						if (directory.isDirectory()) {, +							for (String name : directory.list()) {, +								File file = new File(outputs, name);, +								if (file.exists() && file.canWrite()) {, +									getProject().delete(file);, +								}, +							}, +						}, +		} catch (IOException ex) {, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java, +import org.codehaus.plexus.util.FileUtils;, +	 * resources., +		catch (IOException ex) {, +			throw new MojoExecutionException("Unable to build classpath", ex);, +		}, +	private void addResources(List<URL> urls) throws MalformedURLException, IOException {, +				File directory = new File(resource.getDirectory());, +				urls.add(directory.toURI().toURL());, +				if (directory.isDirectory()) {, +					// Remove duplicates from the target directory..., +					for (String name : directory.list()) {, +						File file = new File(this.classesDirectory, name);, +						if (file.exists() && file.canWrite()) {, +							if (file.isDirectory()) {, +								FileUtils.deleteDirectory(file);, +							else {, +								file.delete();, +							}, +						}, +					}, +				}]