[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Set;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.AutoConfigurationImportFilter;, +import org.springframework.boot.autoconfigure.AutoConfigurationMetadata;, + * {@link Condition} and {@link AutoConfigurationImportFilter} that checks for the, + * presence or absence of specific classes., +class OnClassCondition extends SpringBootCondition, +		implements AutoConfigurationImportFilter, BeanFactoryAware, BeanClassLoaderAware {, +, +	private BeanFactory beanFactory;, +, +	private ClassLoader beanClassLoader;, +, +	@Override, +	public boolean[] match(String[] autoConfigurationClasses,, +			AutoConfigurationMetadata autoConfigurationMetadata) {, +		ConditionEvaluationReport report = getConditionEvaluationReport();, +		ConditionOutcome[] outcomes = getOutcomes(autoConfigurationClasses,, +				autoConfigurationMetadata);, +		boolean[] match = new boolean[outcomes.length];, +		for (int i = 0; i < outcomes.length; i++) {, +			match[i] = (outcomes[i] == null || outcomes[i].isMatch());, +			if (!match[i] && outcomes[i] != null) {, +				logOutcome(autoConfigurationClasses[i], outcomes[i]);, +				if (report != null) {, +					report.recordConditionEvaluation(autoConfigurationClasses[i], this,, +							outcomes[i]);, +				}, +			}, +		}, +		return match;, +	}, +, +	private ConditionEvaluationReport getConditionEvaluationReport() {, +		if (this.beanFactory != null, +				&& this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ConditionEvaluationReport, +					.get((ConfigurableListableBeanFactory) this.beanFactory);, +		}, +		return null;, +	}, +, +	private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +			AutoConfigurationMetadata autoConfigurationMetadata) {, +		// Split the work and perform half in a background thread. Using a single, +		// additional thread seems to offer the best performance. More threads make, +		// things worse, +		int split = autoConfigurationClasses.length / 2;, +		GetOutcomesThread thread = new GetOutcomesThread(autoConfigurationClasses, 0,, +				split, autoConfigurationMetadata);, +		thread.start();, +		ConditionOutcome[] secondHalf = getOutcomes(autoConfigurationClasses, split,, +				autoConfigurationClasses.length, autoConfigurationMetadata);, +		try {, +			thread.join();, +		}, +		catch (InterruptedException ex) {, +			Thread.currentThread().interrupt();, +		}, +		ConditionOutcome[] firstHalf = thread.getResult();, +		ConditionOutcome[] outcomes = new ConditionOutcome[autoConfigurationClasses.length];, +		System.arraycopy(firstHalf, 0, outcomes, 0, firstHalf.length);, +		System.arraycopy(secondHalf, 0, outcomes, split, secondHalf.length);, +		return outcomes;, +	}, +, +	private ConditionOutcome[] getOutcomes(final String[] autoConfigurationClasses,, +			int start, int end, AutoConfigurationMetadata autoConfigurationMetadata) {, +		ConditionOutcome[] outcomes = new ConditionOutcome[end - start];, +		for (int i = start; i < end; i++) {, +			String autoConfigurationClass = autoConfigurationClasses[i];, +			Set<String> candidates = autoConfigurationMetadata, +					.getSet(autoConfigurationClass, "ConditionalOnClass");, +			if (candidates != null) {, +				outcomes[i - start] = getOutcome(candidates);, +			}, +		}, +		return outcomes;, +	}, +, +	private ConditionOutcome getOutcome(Set<String> candidates) {, +		try {, +			List<String> missing = getMatches(candidates, MatchType.MISSING,, +					this.beanClassLoader);, +			if (!missing.isEmpty()) {, +				return ConditionOutcome, +						.noMatch(ConditionMessage.forCondition(ConditionalOnClass.class), +								.didNotFind("required class", "required classes"), +								.items(Style.QUOTE, missing));, +			}, +		}, +		catch (Exception ex) {]