[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			resolver.setFullModeViewNames(this.properties.getReactive().getFullModeViewNames());, +			resolver.setChunkedModeViewNames(this.properties.getReactive().getChunkedModeViewNames());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			resolver.setFullModeViewNames(this.properties.getReactive().getFullModeViewNames());, +			resolver.setChunkedModeViewNames(this.properties.getReactive().getChunkedModeViewNames());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java, +		/**, +		 * Comma-separated list of view names (patterns allowed) that should be executed in FULL mode, +		 * even if a max chunk size is set., +		 */, +		private String[] fullModeViewNames;, +, +		/**, +		 * Comma-separated list of view names (patterns allowed) that should be the only ones executed, +		 * in CHUNKED mode when a max chunk size is set., +		 */, +		private String[] chunkedModeViewNames;, +, +, +		public String[] getFullModeViewNames() {, +			return this.fullModeViewNames;, +		}, +, +		public void setFullModeViewNames(String[] fullModeViewNames) {, +			this.fullModeViewNames = fullModeViewNames;, +		}, +, +		public String[] getChunkedModeViewNames() {, +			return this.chunkedModeViewNames;, +		}, +, +		public void setChunkedModeViewNames(String[] chunkedModeViewNames) {, +			this.chunkedModeViewNames = chunkedModeViewNames;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			resolver.setFullModeViewNames(this.properties.getReactive().getFullModeViewNames());, +			resolver.setChunkedModeViewNames(this.properties.getReactive().getChunkedModeViewNames());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java, +		/**, +		 * Comma-separated list of view names (patterns allowed) that should be executed in FULL mode, +		 * even if a max chunk size is set., +		 */, +		private String[] fullModeViewNames;, +, +		/**, +		 * Comma-separated list of view names (patterns allowed) that should be the only ones executed, +		 * in CHUNKED mode when a max chunk size is set., +		 */, +		private String[] chunkedModeViewNames;, +, +, +		public String[] getFullModeViewNames() {, +			return this.fullModeViewNames;, +		}, +, +		public void setFullModeViewNames(String[] fullModeViewNames) {, +			this.fullModeViewNames = fullModeViewNames;, +		}, +, +		public String[] getChunkedModeViewNames() {, +			return this.chunkedModeViewNames;, +		}, +, +		public void setChunkedModeViewNames(String[] chunkedModeViewNames) {, +			this.chunkedModeViewNames = chunkedModeViewNames;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafReactiveAutoConfigurationTests.java, +	public void overrideFullModeViewNames() throws Exception {, +		load(BaseConfiguration.class, "spring.thymeleaf.reactive.fullModeViewNames:foo,bar");, +		ThymeleafReactiveViewResolver views = this.context, +				.getBean(ThymeleafReactiveViewResolver.class);, +		assertThat(views.getFullModeViewNames()).isEqualTo(new String[] { "foo", "bar" });, +	}, +, +	@Test, +	public void overrideChunkedModeViewNames() throws Exception {, +		load(BaseConfiguration.class, "spring.thymeleaf.reactive.chunkedModeViewNames:foo,bar");, +		ThymeleafReactiveViewResolver views = this.context, +				.getBean(ThymeleafReactiveViewResolver.class);, +		assertThat(views.getChunkedModeViewNames()).isEqualTo(new String[] { "foo", "bar" });, +	}, +, +	@Test]