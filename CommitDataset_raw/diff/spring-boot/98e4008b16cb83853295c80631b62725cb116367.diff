[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +		runner.setHiddenCommands(HintCommand.class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +		runner.setHiddenCommands(HintCommand.class);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +	private Class<?>[] hiddenCommandClasses = {};, +, +	 * Set the command classes which should be hidden (i.e. executed but not displayed in, +	 * the available commands list)., +	 * @param commandClasses the classes of hidden commands, +	 */, +	public void setHiddenCommands(Class<?>... commandClasses) {, +		Assert.notNull(commandClasses, "CommandClasses must not be null");, +		this.hiddenCommandClasses = commandClasses;, +	}, +, +	/**, +		return isCommandInstanceOf(command, this.optionCommandClasses);, +	}, +, +	private boolean isHiddenCommand(Command command) {, +		return isCommandInstanceOf(command, this.hiddenCommandClasses);, +	}, +, +	private boolean isCommandInstanceOf(Command command, Class<?>[] commandClasses) {, +		for (Class<?> commandClass : commandClasses) {, +			if (commandClass.isInstance(command)) {, +			if (!isOptionCommand(command) && !isHiddenCommand(command)) {]