[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.springframework.boot.test.context.ApplicationContextRunner;, +	public final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withPropertyValues("management.health.diskspace.enabled:false"), +		this.contextRunner.withPropertyValues("management.health.defaults.enabled:false"), +		this.contextRunner.withUserConfiguration(CustomHealthIndicator.class), +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +					assertThat(context.getBean("customHealthIndicator")), +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,, +						SolrAutoConfiguration.class)), +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner, +		this.contextRunner, +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner, +		this.contextRunner, +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +		this.contextRunner.run(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(LdapConfiguration.class)), +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(LdapConfiguration.class)), +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(Neo4jConfiguration.class)), +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(Neo4jConfiguration.class)), +		return (context) -> {, +			assertThat(context).getBeans(HealthIndicator.class).hasSize(1), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.springframework.boot.test.context.ApplicationContextRunner;, +	public final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +		this.contextRunner.withPropertyValues("management.health.diskspace.enabled:false"), +		this.contextRunner.withPropertyValues("management.health.defaults.enabled:false"), +		this.contextRunner.withUserConfiguration(CustomHealthIndicator.class), +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +					assertThat(context.getBean("customHealthIndicator")), +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class,, +						SolrAutoConfiguration.class)), +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner, +		this.contextRunner, +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner, +		this.contextRunner, +				.run((context) -> {, +					Map<String, HealthIndicator> beans = context, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +		this.contextRunner, +				.withConfiguration(AutoConfigurations.of(SolrAutoConfiguration.class)), +		this.contextRunner.run(hasSingleHealthIndicator(DiskSpaceHealthIndicator.class));, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner, +		this.contextRunner]