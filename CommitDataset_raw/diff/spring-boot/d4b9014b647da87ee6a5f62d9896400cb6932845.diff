[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/Banner.java, +		String version = Banner.class.getPackage().getImplementationVersion();, +		printStream.println("  Spring Bootstrap", +				+ (version == null ? "" : " (v" + version + ")"));, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/Banner.java, +		String version = Banner.class.getPackage().getImplementationVersion();, +		printStream.println("  Spring Bootstrap", +				+ (version == null ? "" : " (v" + version + ")"));, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final Log log = LogFactory.getLog(getClass());, +, +	private Class<?> mainApplicationClass;, +, +	private boolean logStartupInfo = true;, +, +		this.mainApplicationClass = deduceMainApplicationClass();, +	private Class<?> deduceMainApplicationClass() {, +		try {, +			StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();, +			for (StackTraceElement stackTraceElement : stackTrace) {, +				if ("main".equals(stackTraceElement.getMethodName())) {, +					return Class.forName(stackTraceElement.getClassName());, +				}, +			}, +		}, +		catch (ClassNotFoundException ex) {, +			// Swallow and continue, +		}, +		return null;, +	}, +, +		if (this.logStartupInfo) {, +			logStartupInfo();, +		}, +	protected void logStartupInfo() {, +		new StartupInfoLogger(this.mainApplicationClass).log(getApplicationLog());, +	}, +, +	/**, +	 * Returns the {@link Log} for the application. By default will be deduced., +	 * @return the application log, +	 */, +	protected Log getApplicationLog() {, +		if (this.mainApplicationClass == null) {, +			return this.log;, +		}, +		return LogFactory.getLog(this.mainApplicationClass);, +	}, +, +	 * Set a specific main application class that will be used as a log source and to, +	 * obtain version information. By default the main application class will be deduced., +	 * Can be set to {@code null} if there is no explicit application class., +	 * @param mainApplicationClass the mainApplicationClass to set or {@code null}, +	 */, +	public void setMainApplicationClass(Class<?> mainApplicationClass) {, +		this.mainApplicationClass = mainApplicationClass;, +	}, +, +	/**, +	 * Sets if the application information should be logged when the application starts., +	 * Defaults to {@code true}, +	 * @param logStartupInfo if startup info should be logged., +	 */, +	public void setLogStartupInfo(boolean logStartupInfo) {, +		this.logStartupInfo = logStartupInfo;, +	}, +, +	/**, +	 * Static helper that can be used to run a {@link SpringApplication} from a script, +	 * using the specified sources with default settings. This method is useful when, +	 * calling this calls from a script environment that will not have a single main, +	 * application class., +	 * @param sources the sources to load, +	 * @param args the application arguments (usually passed from a Java main method), +	 * @return the running {@link ApplicationContext}, +	 */, +	public static ApplicationContext runFromScript(Object[] sources, String[] args) {, +		SpringApplication application = new SpringApplication(sources);, +		application.setMainApplicationClass(null);, +		return application.run(args);, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/Banner.java, +		String version = Banner.class.getPackage().getImplementationVersion();, +		printStream.println("  Spring Bootstrap", +				+ (version == null ? "" : " (v" + version + ")"));, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private final Log log = LogFactory.getLog(getClass());, +, +	private Class<?> mainApplicationClass;, +, +	private boolean logStartupInfo = true;, +, +		this.mainApplicationClass = deduceMainApplicationClass();, +	private Class<?> deduceMainApplicationClass() {]