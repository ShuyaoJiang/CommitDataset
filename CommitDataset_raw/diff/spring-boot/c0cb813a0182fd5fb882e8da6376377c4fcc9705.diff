[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Gary Russell, +			if (config.getChannelCacheSize() != null) {, +				connectionFactory.setChannelCacheSize(config.getChannelCacheSize());, +			}, +			if (config.getCacheMode() != null) {, +				connectionFactory.setCacheMode(config.getCacheMode());, +			}, +			if (config.getConnectionCacheSize() != null) {, +				connectionFactory.setConnectionCacheSize(config.getConnectionCacheSize());, +			}, +			if (config.getChannelCheckoutTimeout() != null) {, +				connectionFactory.setChannelCheckoutTimeout(config.getChannelCheckoutTimeout());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Gary Russell, +			if (config.getChannelCacheSize() != null) {, +				connectionFactory.setChannelCacheSize(config.getChannelCacheSize());, +			}, +			if (config.getCacheMode() != null) {, +				connectionFactory.setCacheMode(config.getCacheMode());, +			}, +			if (config.getConnectionCacheSize() != null) {, +				connectionFactory.setConnectionCacheSize(config.getConnectionCacheSize());, +			}, +			if (config.getChannelCheckoutTimeout() != null) {, +				connectionFactory.setChannelCheckoutTimeout(config.getChannelCheckoutTimeout());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +import org.springframework.amqp.rabbit.connection.CachingConnectionFactory.CacheMode;, + * @author Gary Russell, +	 * Comma-separated list of addresses to which the client should connect., +	 * The number of channels to retain in the cache, or max channels per connection, +	 * when channelCheckoutTimeout is > 0., +	 */, +	private Integer channelCacheSize;, +, +	/**, +	 * The connection factory cache mode; CHANNEL (default) or CONNECTION., +	 */, +	private CacheMode cacheMode;, +, +	/**, +	 * The number of connections to cache (only applies when cacheMode is CONNECTION)., +	 */, +	private Integer connectionCacheSize;, +, +	/**, +	 * The number of milliseconds to wait to obtain a channel if the channelCacheSize, +	 * has been reached; if 0, always create a new channel., +	 */, +	private Long channelCheckoutTimeout;, +, +	/**, +	public Integer getChannelCacheSize() {, +		return this.channelCacheSize;, +	}, +, +	public void setChannelCacheSize(Integer channelCacheSize) {, +		this.channelCacheSize = channelCacheSize;, +	}, +, +	public CacheMode getCacheMode() {, +		return this.cacheMode;, +	}, +, +	public void setCacheMode(CacheMode cacheMode) {, +		this.cacheMode = cacheMode;, +	}, +, +	public Integer getConnectionCacheSize() {, +		return this.connectionCacheSize;, +	}, +, +	public void setConnectionCacheSize(Integer connectionCacheSize) {, +		this.connectionCacheSize = connectionCacheSize;, +	}, +, +	public Long getChannelCheckoutTimeout() {, +		return this.channelCheckoutTimeout;, +	}, +, +	public void setChannelCheckoutTimeout(Long channelCheckoutTimeout) {, +		this.channelCheckoutTimeout = channelCheckoutTimeout;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Gary Russell, +			if (config.getChannelCacheSize() != null) {, +				connectionFactory.setChannelCacheSize(config.getChannelCacheSize());, +			}, +			if (config.getCacheMode() != null) {, +				connectionFactory.setCacheMode(config.getCacheMode());, +			}, +			if (config.getConnectionCacheSize() != null) {, +				connectionFactory.setConnectionCacheSize(config.getConnectionCacheSize());, +			}, +			if (config.getChannelCheckoutTimeout() != null) {, +				connectionFactory.setChannelCheckoutTimeout(config.getChannelCheckoutTimeout());, +			}]