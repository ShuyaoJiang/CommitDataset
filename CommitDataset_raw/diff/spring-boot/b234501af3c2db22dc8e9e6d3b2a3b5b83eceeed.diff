[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +	private void load(Function<String, Long> timeToLive, PathMapper endpointPathMapper,, +			Class<?> configuration,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +	private void load(Function<String, Long> timeToLive, PathMapper endpointPathMapper,, +			Class<?> configuration,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, "my-app-id");, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, null);, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null,, +				"my-app-id");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +	private void load(Function<String, Long> timeToLive, PathMapper endpointPathMapper,, +			Class<?> configuration,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, "my-app-id");, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, null);, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null,, +				"my-app-id");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsConfigurationTests.java, +				.withPropertyValues("management.metrics.cache.metric-name=custom.name",, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +	private void load(Function<String, Long> timeToLive, PathMapper endpointPathMapper,, +			Class<?> configuration,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, "my-app-id");, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,, +				this.securityService, null);, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null,, +				"my-app-id");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsConfigurationTests.java, +				.withPropertyValues("management.metrics.cache.metric-name=custom.name",, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/MissingParametersException.java, +				"Missing parameters: ", +						+ missingParameters.stream().map(OperationParameter::getName), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscoverer.java, +			EndpointMediaTypes endpointMediaTypes, PathMapper endpointPathMapper,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/MappingWebEndpointPathMapper.java, + * A {@link PathMapper} implementation that uses a simple {@link Map} to determine the, + * endpoint path., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java, +		return new CacheMetricsRegistrar(this.registry, this.properties.getMetricName(),, +				this.binderProviders);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryWebEndpointDiscovererTests.java, +	private void load(Function<String, Long> timeToLive, PathMapper endpointPathMapper,, +			Class<?> configuration,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator,]