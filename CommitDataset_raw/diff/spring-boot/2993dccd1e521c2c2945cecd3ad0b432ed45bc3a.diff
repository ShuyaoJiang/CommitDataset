[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>org.glassfish.jersey.ext</groupId>, +			<artifactId>jersey-spring4</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>org.glassfish.jersey.ext</groupId>, +			<artifactId>jersey-spring4</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +	private final EndpointLinksResolver linksResolver;, +			CloudFoundrySecurityInterceptor securityInterceptor,, +			EndpointLinksResolver linksResolver) {, +		this.linksResolver = linksResolver;, +							.resolveLinks(request.getURI().toString());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>org.glassfish.jersey.ext</groupId>, +			<artifactId>jersey-spring4</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +	private final EndpointLinksResolver linksResolver;, +			CloudFoundrySecurityInterceptor securityInterceptor,, +			EndpointLinksResolver linksResolver) {, +		this.linksResolver = linksResolver;, +							.resolveLinks(request.getURI().toString());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.ExposableEndpoint;, +import org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;, +import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +			WebClient.Builder webClientBuilder,, +			ControllerEndpointsSupplier controllerEndpointsSupplier) {, +		Collection<ExposableWebEndpoint> webEndpoints = endpointDiscoverer.getEndpoints();, +		List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();, +		allEndpoints.addAll(webEndpoints);, +		allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());, +				new EndpointMapping("/cloudfoundryapplication"), webEndpoints,, +				endpointMediaTypes, getCorsConfiguration(), securityInterceptor,, +				new EndpointLinksResolver(allEndpoints));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>org.glassfish.jersey.ext</groupId>, +			<artifactId>jersey-spring4</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, +	private final EndpointLinksResolver linksResolver;, +			CloudFoundrySecurityInterceptor securityInterceptor,, +			EndpointLinksResolver linksResolver) {, +		this.linksResolver = linksResolver;, +							.resolveLinks(request.getURI().toString());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.ExposableEndpoint;, +import org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;, +import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +			WebClient.Builder webClientBuilder,, +			ControllerEndpointsSupplier controllerEndpointsSupplier) {, +		Collection<ExposableWebEndpoint> webEndpoints = endpointDiscoverer.getEndpoints();, +		List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();, +		allEndpoints.addAll(webEndpoints);, +		allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());, +				new EndpointMapping("/cloudfoundryapplication"), webEndpoints,, +				endpointMediaTypes, getCorsConfiguration(), securityInterceptor,, +				new EndpointLinksResolver(allEndpoints));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.ExposableEndpoint;, +import org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;, +import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;, +import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;, +import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;, +			RestTemplateBuilder restTemplateBuilder,, +			ServletEndpointsSupplier servletEndpointsSupplier,, +			ControllerEndpointsSupplier controllerEndpointsSupplier) {, +		Collection<ExposableWebEndpoint> webEndpoints = discoverer.getEndpoints();, +		List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>();, +		allEndpoints.addAll(webEndpoints);, +		allEndpoints.addAll(servletEndpointsSupplier.getEndpoints());, +		allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());, +				new EndpointMapping("/cloudfoundryapplication"), webEndpoints,, +				endpointMediaTypes, getCorsConfiguration(), securityInterceptor,, +				new EndpointLinksResolver(allEndpoints));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<groupId>org.glassfish.jersey.ext</groupId>, +			<artifactId>jersey-spring4</artifactId>, +			<scope>test</scope>]