[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +import java.sql.SQLException;, +, +import javax.sql.DataSource;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.context.annotation.Bean;, +	private static final Log logger = LogFactory.getLog(DataSourceJmxConfiguration.class);, +, +	@Configuration, +	@ConditionalOnProperty(prefix = "spring.datasource", name = "jmx-enabled"), +	@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy"), +	@ConditionalOnSingleCandidate(DataSource.class), +	static class TomcatDataSourceJmxConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "dataSourceMBean"), +		public Object dataSourceMBean(DataSource dataSource) {, +			if (dataSource instanceof DataSourceProxy) {, +				try {, +					return ((DataSourceProxy) dataSource).createPool().getJmxPool();, +				}, +				catch (SQLException ex) {, +					logger.warn("Cannot expose DataSource to JMX (could not connect)");, +				}, +			}, +			return null;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +import java.sql.SQLException;, +, +import javax.sql.DataSource;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.context.annotation.Bean;, +	private static final Log logger = LogFactory.getLog(DataSourceJmxConfiguration.class);, +, +	@Configuration, +	@ConditionalOnProperty(prefix = "spring.datasource", name = "jmx-enabled"), +	@ConditionalOnClass(name = "org.apache.tomcat.jdbc.pool.DataSourceProxy"), +	@ConditionalOnSingleCandidate(DataSource.class), +	static class TomcatDataSourceJmxConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "dataSourceMBean"), +		public Object dataSourceMBean(DataSource dataSource) {, +			if (dataSource instanceof DataSourceProxy) {, +				try {, +					return ((DataSourceProxy) dataSource).createPool().getJmxPool();, +				}, +				catch (SQLException ex) {, +					logger.warn("Cannot expose DataSource to JMX (could not connect)");, +				}, +			}, +			return null;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +import java.sql.SQLException;, +import org.apache.tomcat.jdbc.pool.DataSource;, +import org.apache.tomcat.jdbc.pool.DataSourceProxy;, +import org.apache.tomcat.jdbc.pool.jmx.ConnectionPool;, +	@Test, +	public void tomcatDoesNotExposeMBeanPoolByDefault() {, +		load("spring.datasource.type=" + DataSource.class.getName());, +		assertThat(this.context.getBeansOfType(ConnectionPool.class)).isEmpty();, +	}, +, +	@Test, +	public void tomcatAutoConfiguredCanExposeMBeanPool() throws SQLException {, +		load("spring.datasource.type=" + DataSource.class.getName(),, +				"spring.datasource.jmx-enabled=true");, +		assertThat(this.context.getBeansOfType(ConnectionPool.class)).hasSize(1);, +		assertThat(this.context.getBean(DataSourceProxy.class).createPool().getJmxPool()), +				.isSameAs(this.context.getBean(ConnectionPool.class));, +	}, +]