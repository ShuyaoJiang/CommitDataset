[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.min-response-size=2048 # Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.min-response-size=2048 # Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java, +		if (this.compression.getMinResponseSize() >= 0) {, +			builder.compression(this.compression.getMinResponseSize());, +		if (this.compression.getMimeTypes() != null &&, +				this.compression.getMimeTypes().length > 0) {, +			compressPredicate = new CompressibleMimeTypePredicate(this.compression.getMimeTypes());, +		if (this.compression.getExcludedUserAgents() != null &&, +				this.compression.getExcludedUserAgents().length > 0) {, +					new CompressibleAgentPredicate(this.compression.getExcludedUserAgents());, +			for (String excludedAgent : this.excludedAgents) {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.min-response-size=2048 # Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java, +		if (this.compression.getMinResponseSize() >= 0) {, +			builder.compression(this.compression.getMinResponseSize());, +		if (this.compression.getMimeTypes() != null &&, +				this.compression.getMimeTypes().length > 0) {, +			compressPredicate = new CompressibleMimeTypePredicate(this.compression.getMimeTypes());, +		if (this.compression.getExcludedUserAgents() != null &&, +				this.compression.getExcludedUserAgents().length > 0) {, +					new CompressibleAgentPredicate(this.compression.getExcludedUserAgents());, +			for (String excludedAgent : this.excludedAgents) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Compression.java, +	 * Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	server.compression.min-response-size=2048 # Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java, +		if (this.compression.getMinResponseSize() >= 0) {, +			builder.compression(this.compression.getMinResponseSize());, +		if (this.compression.getMimeTypes() != null &&, +				this.compression.getMimeTypes().length > 0) {, +			compressPredicate = new CompressibleMimeTypePredicate(this.compression.getMimeTypes());, +		if (this.compression.getExcludedUserAgents() != null &&, +				this.compression.getExcludedUserAgents().length > 0) {, +					new CompressibleAgentPredicate(this.compression.getExcludedUserAgents());, +			for (String excludedAgent : this.excludedAgents) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Compression.java, +	 * Minimum "Content-Length" value that is required for compression to be performed., +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java, +	public void compressionOfResponseToGetRequest() {, +	public void compressionOfResponseToPostRequest() {, +	public void noCompressionForSmallResponse() {, +		Compression compression = new Compression();, +		compression.setEnabled(true);, +		compression.setMinResponseSize(3001);, +		WebClient client = prepareCompressionTest(compression);, +		ResponseEntity<Void> response = client.get().exchange(), +				.flatMap((res) -> res.toEntity(Void.class)).block();, +		assertResponseIsNotCompressed(response);, +	}, +, +	@Test, +	public void noCompressionForMimeType() {, +	public void noCompressionForUserAgent() {, +		public void channelRead(ChannelHandlerContext ctx, Object msg) {, +			response.getHeaders().setContentLength(this.bytes.readableByteCount());]