[+++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +++ b/pom.xml, +	<version>1.1.0.BUILD-SNAPSHOT</version>, +					<groupId>org.apache.maven.plugins</groupId>, +				<module>spring-boot-docs</module>, +						<groupId>org.apache.maven.plugins</groupId>, +								<id>fixup-dependencies-pom</id>, +										<property name="sourceFile" value="spring-boot-dependencies/pom.xml" />, +		<xsl:value-of select="/m:project/m:version/text()"/>, +						<groupId>org.apache.maven.plugins</groupId>, +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +++ b/pom.xml, +	<version>1.1.0.BUILD-SNAPSHOT</version>, +					<groupId>org.apache.maven.plugins</groupId>, +				<module>spring-boot-docs</module>, +						<groupId>org.apache.maven.plugins</groupId>, +								<id>fixup-dependencies-pom</id>, +										<property name="sourceFile" value="spring-boot-dependencies/pom.xml" />, +		<xsl:value-of select="/m:project/m:version/text()"/>, +						<groupId>org.apache.maven.plugins</groupId>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.0.BUILD-SNAPSHOT</version>, +			<groupId>org.springframework.boot</groupId>, +			<groupId>org.springframework.boot</groupId>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +			<groupId>org.springframework.boot</groupId>, +			<type>test-jar</type>, +++ b/CONTRIBUTING.adoc, +NOTE: As for the standard build, you may need to increase the amount of memory available, +to Maven by setting a `MAVEN_OPTS` environment variable with the value, +`-Xmx512m -XX:MaxPermSize=128m`. We generate more artifacts when running the full build, +(such as Javadoc jars), so you may find the process a little slower than the standard build., +++ b/pom.xml, +	<version>1.1.0.BUILD-SNAPSHOT</version>, +					<groupId>org.apache.maven.plugins</groupId>, +				<module>spring-boot-docs</module>, +						<groupId>org.apache.maven.plugins</groupId>, +								<id>fixup-dependencies-pom</id>, +										<property name="sourceFile" value="spring-boot-dependencies/pom.xml" />, +		<xsl:value-of select="/m:project/m:version/text()"/>, +						<groupId>org.apache.maven.plugins</groupId>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.1.0.BUILD-SNAPSHOT</version>, +			<groupId>org.springframework.boot</groupId>, +			<groupId>org.springframework.boot</groupId>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +			<groupId>org.springframework.boot</groupId>, +			<type>test-jar</type>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.util.AntPathMatcher;, +			FS commandFileSystem = createFileSystem(, +					this.properties.getCommandPathPatterns(),, +					this.properties.getDisabledCommands());, +			FS configurationFileSystem = createFileSystem(, +					this.properties.getConfigPathPatterns(), new String[0]);, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns), +				throws IOException, URISyntaxException {, +			Assert.notNull(filterPatterns, "FilterPatterns must not be null");, +						pathPattern, this.resourceLoader, filterPatterns)));, +		private final String[] filterPatterns;, +, +		private final AntPathMatcher matcher = new AntPathMatcher();, +, +		public DirectoryHandle(String name, ResourcePatternResolver resourceLoader,, +				String[] filterPatterns) {, +			this.filterPatterns = filterPatterns;, +				if (!resource.getURL().getPath().endsWith("/") && !shouldFilter(resource)) {, +		private boolean shouldFilter(Resource resource) {]