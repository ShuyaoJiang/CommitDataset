[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +public class RedisMetricRepository implements MetricRepository {, +	private static final String DEFAULT_METRICS_PREFIX = "spring.metrics.";, +	private static final String DEFAULT_KEY = "keys.spring.metrics";, +	/**, +	 * Create a RedisMetricRepository with a default prefix to apply to all metric names., +	 * If multiple repositories share a redis instance they will feed into the same global, +	 * metrics., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	 */, +		this(redisConnectionFactory, DEFAULT_METRICS_PREFIX);, +	 * Create a RedisMetricRepository with a prefix to apply to all metric names (ideally, +	 * unique to this repository or to a logical repository contributed to by multiple, +	 * instances, where they all see the same values). Recommended constructor for general, +	 * purpose use., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	public RedisMetricRepository(RedisConnectionFactory redisConnectionFactory,, +			String prefix) {, +		this(redisConnectionFactory, prefix, DEFAULT_KEY);, +	}, +, +	/**, +	 * Allows user to set the prefix and key to use to store the index of other keys. The, +	 * redis store will hold a zset under the key just so the metric names can be, +	 * enumerated. Read operations, especially {@link #findAll()} and {@link #count()},, +	 * will only be accurate if the key is unique to the prefix of this repository., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	 * @param prefix the prefix to set for all metrics keys, +	 * @param key the key to set, +	 */, +	public RedisMetricRepository(RedisConnectionFactory redisConnectionFactory,, +			String prefix, String key) {, +		Assert.notNull(redisConnectionFactory, "RedisConnectionFactory must not be null");, +		this.redisOperations = RedisUtils.stringTemplate(redisConnectionFactory);, +		if (!DEFAULT_METRICS_PREFIX.equals(this.prefix)) {, +			if (DEFAULT_KEY.equals(key)) {, +				key = "keys." + prefix;, +		}, +		if (key.endsWith(".")) {, +			key = key.substring(0, key.length() - 1);, +		}, +		this.zSetOperations = this.redisOperations.boundZSetOps(this.key);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java, +public class RedisMetricRepository implements MetricRepository {, +	private static final String DEFAULT_METRICS_PREFIX = "spring.metrics.";, +	private static final String DEFAULT_KEY = "keys.spring.metrics";, +	/**, +	 * Create a RedisMetricRepository with a default prefix to apply to all metric names., +	 * If multiple repositories share a redis instance they will feed into the same global, +	 * metrics., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	 */, +		this(redisConnectionFactory, DEFAULT_METRICS_PREFIX);, +	 * Create a RedisMetricRepository with a prefix to apply to all metric names (ideally, +	 * unique to this repository or to a logical repository contributed to by multiple, +	 * instances, where they all see the same values). Recommended constructor for general, +	 * purpose use., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	public RedisMetricRepository(RedisConnectionFactory redisConnectionFactory,, +			String prefix) {, +		this(redisConnectionFactory, prefix, DEFAULT_KEY);, +	}, +, +	/**, +	 * Allows user to set the prefix and key to use to store the index of other keys. The, +	 * redis store will hold a zset under the key just so the metric names can be, +	 * enumerated. Read operations, especially {@link #findAll()} and {@link #count()},, +	 * will only be accurate if the key is unique to the prefix of this repository., +	 * , +	 * @param redisConnectionFactory the redis connection factory, +	 * @param prefix the prefix to set for all metrics keys, +	 * @param key the key to set, +	 */, +	public RedisMetricRepository(RedisConnectionFactory redisConnectionFactory,, +			String prefix, String key) {, +		Assert.notNull(redisConnectionFactory, "RedisConnectionFactory must not be null");, +		this.redisOperations = RedisUtils.stringTemplate(redisConnectionFactory);, +		if (!DEFAULT_METRICS_PREFIX.equals(this.prefix)) {, +			if (DEFAULT_KEY.equals(key)) {, +				key = "keys." + prefix;, +		}, +		if (key.endsWith(".")) {, +			key = key.substring(0, key.length() - 1);, +		}, +		this.zSetOperations = this.redisOperations.boundZSetOps(this.key);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepositoryTests.java, +		this.repository = new RedisMetricRepository(this.redis.getResource(), this.prefix);]