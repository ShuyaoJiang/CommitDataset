[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + * Copyright 2012-2014 the original author or authors., +import org.springframework.util.Assert;, +import org.springframework.validation.Errors;, + * @author Christian Dupuis, +		factory.setValidator(determineValidator(bean));, +	private Validator determineValidator(Object bean) {, +		if (ClassUtils.isAssignable(Validator.class, bean.getClass())) {, +			if (this.validator == null) {, +				return (Validator) bean;, +			}, +			return new ChainingValidator(this.validator, (Validator) bean);, +		}, +		return this.validator;, +	}, +, +	/**, +	 * {@link Validator} implementation that wraps {@link Validator} instances and chains, +	 * their execution., +	 */, +	private static class ChainingValidator implements Validator {, +, +		private Validator[] validators;, +, +		public ChainingValidator(Validator... validators) {, +			Assert.notNull(validators, "Validators must not be null");, +			this.validators = validators;, +		}, +, +		@Override, +		public boolean supports(Class<?> clazz) {, +			for (Validator validator : this.validators) {, +				if (validator.supports(clazz)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		@Override, +		public void validate(Object target, Errors errors) {, +			for (Validator validator : this.validators) {, +				if (validator.supports(target.getClass())) {, +					validator.validate(target, errors);, +				}, +			}, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, + * Copyright 2012-2014 the original author or authors., +import org.springframework.util.Assert;, +import org.springframework.validation.Errors;, + * @author Christian Dupuis, +		factory.setValidator(determineValidator(bean));, +	private Validator determineValidator(Object bean) {, +		if (ClassUtils.isAssignable(Validator.class, bean.getClass())) {, +			if (this.validator == null) {, +				return (Validator) bean;, +			}, +			return new ChainingValidator(this.validator, (Validator) bean);, +		}, +		return this.validator;, +	}, +, +	/**, +	 * {@link Validator} implementation that wraps {@link Validator} instances and chains, +	 * their execution., +	 */, +	private static class ChainingValidator implements Validator {, +, +		private Validator[] validators;, +, +		public ChainingValidator(Validator... validators) {, +			Assert.notNull(validators, "Validators must not be null");, +			this.validators = validators;, +		}, +, +		@Override, +		public boolean supports(Class<?> clazz) {, +			for (Validator validator : this.validators) {, +				if (validator.supports(clazz)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		@Override, +		public void validate(Object target, Errors errors) {, +			for (Validator validator : this.validators) {, +				if (validator.supports(target.getClass())) {, +					validator.validate(target, errors);, +				}, +			}, +		}, +, +	}, +]