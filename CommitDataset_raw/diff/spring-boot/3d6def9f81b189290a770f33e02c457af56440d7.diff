[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.kafka.support.converter.MessageConverter;, +	private MessageConverter messageConverter;, +	 * Set the {@link MessageConverter} to use., +	void setMessageConverter(MessageConverter messageConverter) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.kafka.support.converter.MessageConverter;, +	private MessageConverter messageConverter;, +	 * Set the {@link MessageConverter} to use., +	void setMessageConverter(MessageConverter messageConverter) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Listener.Type;, +import org.springframework.kafka.support.converter.BatchMessageConverter;, +import org.springframework.kafka.support.converter.BatchMessagingMessageConverter;, +import org.springframework.kafka.support.converter.MessageConverter;, +	private final BatchMessageConverter batchMessageConverter;, +, +			ObjectProvider<BatchMessageConverter> batchMessageConverter,, +		this.batchMessageConverter = batchMessageConverter.getIfUnique(, +				() -> new BatchMessagingMessageConverter(this.messageConverter));, +		MessageConverter messageConverterToUse = (this.properties.getListener().getType(), +				.equals(Type.BATCH)) ? this.batchMessageConverter : this.messageConverter;, +		configurer.setMessageConverter(messageConverterToUse);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.kafka.support.converter.MessageConverter;, +	private MessageConverter messageConverter;, +	 * Set the {@link MessageConverter} to use., +	void setMessageConverter(MessageConverter messageConverter) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Listener.Type;, +import org.springframework.kafka.support.converter.BatchMessageConverter;, +import org.springframework.kafka.support.converter.BatchMessagingMessageConverter;, +import org.springframework.kafka.support.converter.MessageConverter;, +	private final BatchMessageConverter batchMessageConverter;, +, +			ObjectProvider<BatchMessageConverter> batchMessageConverter,, +		this.batchMessageConverter = batchMessageConverter.getIfUnique(, +				() -> new BatchMessagingMessageConverter(this.messageConverter));, +		MessageConverter messageConverterToUse = (this.properties.getListener().getType(), +				.equals(Type.BATCH)) ? this.batchMessageConverter : this.messageConverter;, +		configurer.setMessageConverter(messageConverterToUse);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.kafka.support.converter.BatchMessageConverter;, +import org.springframework.kafka.support.converter.BatchMessagingMessageConverter;, +	public void testConcurrentKafkaListenerContainerFactoryWithCustomMessageConverter() {, +	public void testConcurrentKafkaListenerContainerFactoryInBatchModeWithCustomMessageConverter() {, +		this.contextRunner, +				.withUserConfiguration(BatchMessageConverterConfiguration.class,, +						MessageConverterConfiguration.class), +				.withPropertyValues("spring.kafka.listener.type=batch").run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> kafkaListenerContainerFactory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					assertThat(kafkaListenerContainerFactory).hasFieldOrPropertyWithValue(, +							"messageConverter",, +							context.getBean("myBatchMessageConverter"));, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryInBatchModeWrapsCustomMessageConverter() {, +		this.contextRunner.withUserConfiguration(MessageConverterConfiguration.class), +				.withPropertyValues("spring.kafka.listener.type=batch").run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> kafkaListenerContainerFactory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					Object messageConverter = ReflectionTestUtils, +							.getField(kafkaListenerContainerFactory, "messageConverter");, +					assertThat(messageConverter), +							.isInstanceOf(BatchMessagingMessageConverter.class);, +					assertThat(((BatchMessageConverter) messageConverter), +							.getRecordMessageConverter()), +									.isSameAs(context.getBean("myMessageConverter"));, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryInBatchModeWithNoMessageConverter() {, +		this.contextRunner.withPropertyValues("spring.kafka.listener.type=batch"), +				.run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> kafkaListenerContainerFactory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					Object messageConverter = ReflectionTestUtils, +							.getField(kafkaListenerContainerFactory, "messageConverter");, +					assertThat(messageConverter), +							.isInstanceOf(BatchMessagingMessageConverter.class);, +					assertThat(((BatchMessageConverter) messageConverter), +							.getRecordMessageConverter()).isNull();, +				});, +	}, +, +	@Test, +	protected static class BatchMessageConverterConfiguration {, +, +		@Bean, +		public BatchMessageConverter myBatchMessageConverter() {]