[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.springframework.boot.actuate.properties.SecurityProperties.Headers;, +import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;, +import org.springframework.security.web.header.writers.HstsHeaderWriter;, +import org.springframework.security.web.util.AnyRequestMatcher;, +			if (!this.security.isEnableCsrf()) {, +			}, +			SecurityAutoConfiguration.configureHeaders(http.headers(),, +					this.security.getHeaders());, +, +			SecurityAutoConfiguration.configureHeaders(http.headers(),, +					this.security.getHeaders());, +, +	private static void configureHeaders(HeadersConfigurer<?> configurer,, +			SecurityProperties.Headers headers) throws Exception {, +		if (headers.getHsts() != Headers.HSTS.none) {, +			boolean includeSubdomains = headers.getHsts() == Headers.HSTS.all;, +			HstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);, +			writer.setRequestMatcher(new AnyRequestMatcher());, +			configurer.addHeaderWriter(writer);, +		}, +		if (headers.isContentType()) {, +			configurer.contentTypeOptions();, +		}, +		if (headers.isXss()) {, +			configurer.xssProtection();, +		}, +		if (headers.isCache()) {, +			configurer.cacheControl();, +		}, +		if (headers.isFrame()) {, +			configurer.frameOptions();, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +import org.springframework.boot.actuate.properties.SecurityProperties.Headers;, +import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;, +import org.springframework.security.web.header.writers.HstsHeaderWriter;, +import org.springframework.security.web.util.AnyRequestMatcher;, +			if (!this.security.isEnableCsrf()) {, +			}, +			SecurityAutoConfiguration.configureHeaders(http.headers(),, +					this.security.getHeaders());, +, +			SecurityAutoConfiguration.configureHeaders(http.headers(),, +					this.security.getHeaders());, +, +	private static void configureHeaders(HeadersConfigurer<?> configurer,, +			SecurityProperties.Headers headers) throws Exception {, +		if (headers.getHsts() != Headers.HSTS.none) {, +			boolean includeSubdomains = headers.getHsts() == Headers.HSTS.all;, +			HstsHeaderWriter writer = new HstsHeaderWriter(includeSubdomains);, +			writer.setRequestMatcher(new AnyRequestMatcher());, +			configurer.addHeaderWriter(writer);, +		}, +		if (headers.isContentType()) {, +			configurer.contentTypeOptions();, +		}, +		if (headers.isXss()) {, +			configurer.xssProtection();, +		}, +		if (headers.isCache()) {, +			configurer.cacheControl();, +		}, +		if (headers.isFrame()) {, +			configurer.frameOptions();, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +	// Flip this when session creation is disabled by default, +	private boolean enableCsrf = false;, +, +	private Headers headers = new Headers();, +, +	public Headers getHeaders() {, +		return this.headers;, +	}, +, +	public boolean isEnableCsrf() {, +		return this.enableCsrf;, +	}, +, +	public void setEnableCsrf(boolean enableCsrf) {, +		this.enableCsrf = enableCsrf;, +	}, +, +	public static class Headers {, +, +		public static enum HSTS {, +			none, domain, all, +		}, +, +		private boolean xss;, +, +		private boolean cache;, +, +		private boolean frame;, +]