[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * Copyright 2012-2016 the original author or authors., + * <li>{@link #getLocation() location} specifies the directory where files will be, + * stored. The default is "". A common value is to use the system's temporary directory,, + * which can be obtained.</li>, + * <li>{@link #getMaxFileSize() max-file-size} specifies the maximum size permitted for, + * uploaded files. The default is 1Mb.</li>, + * <li>{@link #getMaxRequestSize() max-request-size} specifies the maximum size allowed, + * for {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>{@link #getFileSizeThreshold() file-size-threshold} specifies the size threshold, + * after which files will be written to disk. Default is 0, which means that the file, + * will be written to disk immediately.</li>, +@ConfigurationProperties(prefix = "spring.http.multipart", ignoreUnknownFields = false), +	 * Enable support of multi-part uploads., +	private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * Copyright 2012-2016 the original author or authors., + * <li>{@link #getLocation() location} specifies the directory where files will be, + * stored. The default is "". A common value is to use the system's temporary directory,, + * which can be obtained.</li>, + * <li>{@link #getMaxFileSize() max-file-size} specifies the maximum size permitted for, + * uploaded files. The default is 1Mb.</li>, + * <li>{@link #getMaxRequestSize() max-request-size} specifies the maximum size allowed, + * for {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>{@link #getFileSizeThreshold() file-size-threshold} specifies the size threshold, + * after which files will be written to disk. Default is 0, which means that the file, + * will be written to disk immediately.</li>, +@ConfigurationProperties(prefix = "spring.http.multipart", ignoreUnknownFields = false), +	 * Enable support of multi-part uploads., +	private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * Copyright 2012-2016 the original author or authors., + * <li>{@link #getLocation() location} specifies the directory where files will be, + * stored. The default is "". A common value is to use the system's temporary directory,, + * which can be obtained.</li>, + * <li>{@link #getMaxFileSize() max-file-size} specifies the maximum size permitted for, + * uploaded files. The default is 1Mb.</li>, + * <li>{@link #getMaxRequestSize() max-request-size} specifies the maximum size allowed, + * for {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>{@link #getFileSizeThreshold() file-size-threshold} specifies the size threshold, + * after which files will be written to disk. Default is 0, which means that the file, + * will be written to disk immediately.</li>, +@ConfigurationProperties(prefix = "spring.http.multipart", ignoreUnknownFields = false), +	 * Enable support of multi-part uploads., +	private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.http.multipart.enabled=" + propertyValue);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * Copyright 2012-2016 the original author or authors., + * <li>{@link #getLocation() location} specifies the directory where files will be, + * stored. The default is "". A common value is to use the system's temporary directory,, + * which can be obtained.</li>, + * <li>{@link #getMaxFileSize() max-file-size} specifies the maximum size permitted for, + * uploaded files. The default is 1Mb.</li>, + * <li>{@link #getMaxRequestSize() max-request-size} specifies the maximum size allowed, + * for {@literal multipart/form-data} requests. The default is 10Mb</li>, + * <li>{@link #getFileSizeThreshold() file-size-threshold} specifies the size threshold, + * after which files will be written to disk. Default is 0, which means that the file, + * will be written to disk immediately.</li>, +@ConfigurationProperties(prefix = "spring.http.multipart", ignoreUnknownFields = false), +	 * Enable support of multi-part uploads., +	private boolean enabled = true;, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfigurationTests.java, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.http.multipart.enabled=" + propertyValue);, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# MULTIPART ({sc-spring-boot-autoconfigure}/web/MultipartProperties.{sc-ext}[MultipartProperties]), +	spring.http.multipart.enabled=true # Enable support of multi-part uploads., +	spring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size., +	spring.http.multipart.location= # Intermediate location of uploaded files., +	spring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size., +	spring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.http.multipart", name = "enabled", matchIfMissing = true), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * Copyright 2012-2016 the original author or authors., + * <li>{@link #getLocation() location} specifies the directory where files will be, + * stored. The default is "". A common value is to use the system's temporary directory,, + * which can be obtained.</li>, + * <li>{@link #getMaxFileSize() max-file-size} specifies the maximum size permitted for, + * uploaded files. The default is 1Mb.</li>, + * <li>{@link #getMaxRequestSize() max-request-size} specifies the maximum size allowed, + * for {@literal multipart/form-data} requests. The default is 10Mb</li>]