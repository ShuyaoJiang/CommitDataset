[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/Log.java, +	public static void infoPrint(String message) {, +		System.out.print(message);, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/Log.java, +	public static void infoPrint(String message) {, +		System.out.print(message);, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler;, +, +import groovy.grape.GrapeEngine;, +import groovy.grape.GrapeIvy;, +, +import java.util.concurrent.TimeUnit;, +, +import org.apache.ivy.Ivy;, +import org.apache.ivy.core.cache.ArtifactOrigin;, +import org.apache.ivy.core.event.IvyEvent;, +import org.apache.ivy.core.event.IvyListener;, +import org.apache.ivy.core.event.resolve.EndResolveEvent;, +import org.apache.ivy.core.module.descriptor.Artifact;, +import org.apache.ivy.core.module.id.ArtifactId;, +import org.apache.ivy.core.module.id.ModuleId;, +import org.apache.ivy.core.settings.IvySettings;, +import org.apache.ivy.plugins.resolver.ChainResolver;, +import org.apache.ivy.plugins.resolver.DependencyResolver;, +import org.apache.ivy.plugins.resolver.IBiblioResolver;, +import org.apache.ivy.util.AbstractMessageLogger;, +import org.apache.ivy.util.MessageLogger;, +import org.springframework.boot.cli.Log;, +, +/**, + * Customizes the groovy grape engine to download from Spring repos and provide simple log, + * progress feedback., + * , + * @author Phillip Webb, + */, +class GrapeEngineCustomizer {, +, +	private GrapeIvy engine;, +, +	public GrapeEngineCustomizer(GrapeEngine engine) {, +		this.engine = (GrapeIvy) engine;, +	}, +, +	@SuppressWarnings("unchecked"), +	public void customize() {, +		Ivy ivy = this.engine.getIvyInstance();, +		IvySettings settings = this.engine.getSettings();, +, +		final DownloadingLog downloadingLog = new DownloadingLog();, +, +		ivy.getLoggerEngine().pushLogger(downloadingLog);, +		ChainResolver resolver = (ChainResolver) settings.getResolver("downloadGrapes");, +, +		// Add an early resolver for spring snapshots that doesn't try to locate, +		// anything non-spring, +		ChainResolver earlySpringResolver = new ChainResolver() {, +			@Override, +			public ArtifactOrigin locate(Artifact artifact) {, +				try {, +					ArtifactId artifactId = artifact.getId().getArtifactId();, +					ModuleId moduleId = artifactId.getModuleId();, +					if (moduleId.getOrganisation().startsWith("org.springframework")) {, +						return super.locate(artifact);, +					}, +				}, +				catch (Exception ex) {, +					return null;, +				}, +				return null;, +			}, +		};, +		earlySpringResolver.setSettings(settings);, +		earlySpringResolver.setReturnFirst(true);, +		addSpringResolvers(earlySpringResolver);, +		resolver.getResolvers().add(0, earlySpringResolver);, +, +		// Add spring resolvers again, but this time without any filtering, +		addSpringResolvers(resolver);, +		ivy.getEventManager().addIvyListener(new IvyListener() {]