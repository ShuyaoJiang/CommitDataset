[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +							resource, "The specified resource does not exist.");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +							resource, "The specified resource does not exist.");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +import org.springframework.util.Assert;, +, +	/**, +	 * Creates a new instance for the specified property {@code name} and {@code value},, +	 * including a {@code reason} why the value is invalid., +	 * @param name the name of the property in canonical format, +	 * @param value the value of the property, can be {@code null}, +	 * @param reason a human-readable text that describes why the reason is invalid., +	 * Starts with an upper-case and ends with a dots. Several sentences and carriage, +	 * returns are allowed., +	 */, +		Assert.notNull(name, "Name must not be null");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +							resource, "The specified resource does not exist.");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +import org.springframework.util.Assert;, +, +	/**, +	 * Creates a new instance for the specified property {@code name} and {@code value},, +	 * including a {@code reason} why the value is invalid., +	 * @param name the name of the property in canonical format, +	 * @param value the value of the property, can be {@code null}, +	 * @param reason a human-readable text that describes why the reason is invalid., +	 * Starts with an upper-case and ends with a dots. Several sentences and carriage, +	 * returns are allowed., +	 */, +		Assert.notNull(name, "Name must not be null");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +			message.append(" Validation failed for the following reason:\n\n");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +							resource, "The specified resource does not exist.");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +import org.springframework.util.Assert;, +, +	/**, +	 * Creates a new instance for the specified property {@code name} and {@code value},, +	 * including a {@code reason} why the value is invalid., +	 * @param name the name of the property in canonical format, +	 * @param value the value of the property, can be {@code null}, +	 * @param reason a human-readable text that describes why the reason is invalid., +	 * Starts with an upper-case and ends with a dots. Several sentences and carriage, +	 * returns are allowed., +	 */, +		Assert.notNull(name, "Name must not be null");, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +			message.append(" Validation failed for the following reason:\n\n");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzerTests.java, +				"test.property", "invalid", "This is not valid.");, +				"test.property", "invalid", "This is not valid.");, +				.contains("This is not valid."), +				"test.property", "invalid", "This is not valid.");, +				"test.key.not.defined", "invalid", "This is not valid.");, +		return analyzer.analyze(failure);]