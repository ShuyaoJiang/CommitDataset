[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +			Assert.isTrue(output.getName().toLowerCase().endsWith(".jar"), "The output '", +					+ output + "' is not a JAR file.");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +			Assert.isTrue(output.getName().toLowerCase().endsWith(".jar"), "The output '", +					+ output + "' is not a JAR file.");, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +import org.springframework.boot.cli.command.jar.JarCommand;, +	public String jar(String... args) throws Exception {, +		Future<JarCommand> future = submitCommand(new JarCommand(), args);, +		this.commands.add(future.get(this.timeout, TimeUnit.MILLISECONDS));, +		return getOutput();, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +			Assert.isTrue(output.getName().toLowerCase().endsWith(".jar"), "The output '", +					+ output + "' is not a JAR file.");, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java, +import org.springframework.boot.cli.command.jar.JarCommand;, +	public String jar(String... args) throws Exception {, +		Future<JarCommand> future = submitCommand(new JarCommand(), args);, +		this.commands.add(future.get(this.timeout, TimeUnit.MILLISECONDS));, +		return getOutput();, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java, + * Copyright 2012-2014 the original author or authors., +import org.junit.rules.ExpectedException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void jarFileExtensionNeeded() throws Exception {, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage("is not a JAR file");, +		this.cli.jar("secure.groovy", "crsh.groovy");, +	}]