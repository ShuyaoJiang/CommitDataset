[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfiguration.java, +public class KafkaHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfiguration.java, +public class KafkaHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfigurationTests.java, +		this.contextRunner.run(, +				(context) -> assertThat(context).hasSingleBean(KafkaHealthIndicator.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfiguration.java, +public class KafkaHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfigurationTests.java, +		this.contextRunner.run(, +				(context) -> assertThat(context).hasSingleBean(KafkaHealthIndicator.class), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/kafka/KafkaHealthIndicator.java, +			DescribeClusterResult result = adminClient, +					.describeCluster(this.describeOptions);, +			builder.status(status).withDetail("clusterId", result.clusterId().get()), +					.withDetail("brokerId", brokerId).withDetail("nodes", nodes);, +	private int getReplicationFactor(String brokerId, AdminClient adminClient), +			throws ExecutionException, InterruptedException {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfiguration.java, +public class KafkaHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<KafkaHealthIndicator, KafkaAdmin> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/kafka/KafkaHealthIndicatorAutoConfigurationTests.java, +		this.contextRunner.run(, +				(context) -> assertThat(context).hasSingleBean(KafkaHealthIndicator.class), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/kafka/KafkaHealthIndicator.java, +			DescribeClusterResult result = adminClient, +					.describeCluster(this.describeOptions);, +			builder.status(status).withDetail("clusterId", result.clusterId().get()), +					.withDetail("brokerId", brokerId).withDetail("nodes", nodes);, +	private int getReplicationFactor(String brokerId, AdminClient adminClient), +			throws ExecutionException, InterruptedException {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/kafka/KafkaHealthIndicatorTests.java, +, +		KafkaHealthIndicator healthIndicator = new KafkaHealthIndicator(this.kafkaAdmin,, +				1000L);, +		KafkaHealthIndicator healthIndicator = new KafkaHealthIndicator(this.kafkaAdmin,, +				1L);, +		KafkaHealthIndicator healthIndicator = new KafkaHealthIndicator(this.kafkaAdmin,, +				1000L);, +		this.kafkaEmbedded.brokerProperties(, +				Collections.singletonMap(KafkaHealthIndicator.REPLICATION_PROPERTY,, +		this.kafkaAdmin = new KafkaAdmin(, +				Collections.singletonMap(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,]