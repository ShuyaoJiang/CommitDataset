[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +import org.springframework.context.ApplicationEvent;, +		CloseManagementContextListener.addIfPossible(this.applicationContext,, +	 * {@link ApplicationListener} to propagate the {@link ContextClosedEvent} and, +	 * {@link ApplicationFailedEvent} from a parent to a child., +	private static class CloseManagementContextListener, +			implements ApplicationListener<ApplicationEvent> {, +		CloseManagementContextListener(ApplicationContext parentContext,, +		public void onApplicationEvent(ApplicationEvent event) {, +			if (event instanceof ContextClosedEvent) {, +				onContextClosedEvent((ContextClosedEvent) event);, +			}, +			if (event instanceof ApplicationFailedEvent) {, +				onApplicationFailedEvent((ApplicationFailedEvent) event);, +			}, +		};, +, +		private void onContextClosedEvent(ContextClosedEvent event) {, +			propagateCloseIfNecessary(event.getApplicationContext());, +		}, +, +		private void onApplicationFailedEvent(ApplicationFailedEvent event) {, +			propagateCloseIfNecessary(event.getApplicationContext());, +		}, +, +		private void propagateCloseIfNecessary(ApplicationContext applicationContext) {, +			if (applicationContext == this.parentContext) {, +					new CloseManagementContextListener(parentContext, childContext));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +import org.springframework.context.ApplicationEvent;, +		CloseManagementContextListener.addIfPossible(this.applicationContext,, +	 * {@link ApplicationListener} to propagate the {@link ContextClosedEvent} and, +	 * {@link ApplicationFailedEvent} from a parent to a child., +	private static class CloseManagementContextListener, +			implements ApplicationListener<ApplicationEvent> {, +		CloseManagementContextListener(ApplicationContext parentContext,, +		public void onApplicationEvent(ApplicationEvent event) {, +			if (event instanceof ContextClosedEvent) {, +				onContextClosedEvent((ContextClosedEvent) event);, +			}, +			if (event instanceof ApplicationFailedEvent) {, +				onApplicationFailedEvent((ApplicationFailedEvent) event);, +			}, +		};, +, +		private void onContextClosedEvent(ContextClosedEvent event) {, +			propagateCloseIfNecessary(event.getApplicationContext());, +		}, +, +		private void onApplicationFailedEvent(ApplicationFailedEvent event) {, +			propagateCloseIfNecessary(event.getApplicationContext());, +		}, +, +		private void propagateCloseIfNecessary(ApplicationContext applicationContext) {, +			if (applicationContext == this.parentContext) {, +					new CloseManagementContextListener(parentContext, childContext));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.event.ApplicationFailedEvent;, +import org.springframework.context.ConfigurableApplicationContext;, +	public void onDifferentPortWithPrimaryFailure() throws Exception {, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				DifferentPortConfig.class, BaseConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);, +		this.applicationContext.refresh();, +		ApplicationContext managementContext = this.applicationContext, +				.getBean(ManagementContextResolver.class).getApplicationContext();, +		ApplicationFailedEvent event = mock(ApplicationFailedEvent.class);, +		given(event.getApplicationContext()).willReturn(this.applicationContext);, +		this.applicationContext.publishEvent(event);, +		assertThat(((ConfigurableApplicationContext) managementContext).isActive()), +				.isFalse();, +		this.applicationContext.close();, +	}, +, +	@Test]