[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.boot.autoconfigure.redis.RedisProperties.Sentinel;, +import org.springframework.data.redis.connection.RedisNode;, +import org.springframework.data.redis.connection.RedisSentinelConfiguration;, +import org.springframework.util.StringUtils;, + * @author Christoph Strobl, +	protected abstract static class RedisHAConnectionConfiguration {, +		protected RedisProperties properties;, +, +		@Autowired(required = false), +		private RedisSentinelConfiguration sentinelConfiguration;, +, +		protected RedisSentinelConfiguration potentiallyGetSentinelConfig() {, +, +			if (this.sentinelConfiguration == null, +					&& this.properties.getSentinel() == null) {, +				return null;, +			}, +, +			RedisSentinelConfiguration sentinelConfig = this.sentinelConfiguration;, +			if (sentinelConfig == null && this.properties.getSentinel() != null) {, +				sentinelConfig = new RedisSentinelConfiguration().master(this.properties, +						.getSentinel().getMaster());, +				sentinelConfig.setSentinels(createRedisNodesForSentinel(this.properties, +						.getSentinel()));, +			}, +			return sentinelConfig;, +		}, +, +		private List<RedisNode> createRedisNodesForSentinel(Sentinel sentinel) {, +, +			String[] nodeStrings = StringUtils.commaDelimitedListToStringArray(sentinel, +					.getNodes());, +, +			List<RedisNode> nodes = new ArrayList<RedisNode>(nodeStrings.length);, +, +			for (String hostAndPort : nodeStrings) {, +				String[] args = StringUtils.split(hostAndPort, ":");, +				nodes.add(new RedisNode(args[0], Integer.valueOf(args[1])));, +			}, +, +			return nodes;, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnMissingClass(name = "org.apache.commons.pool2.impl.GenericObjectPool"), +	protected static class RedisConnectionConfiguration extends, +			RedisHAConnectionConfiguration {, +			JedisConnectionFactory factory = new JedisConnectionFactory(, +					potentiallyGetSentinelConfig());, +	protected static class RedisPooledConnectionConfiguration extends, +			RedisHAConnectionConfiguration {, +, +				return new JedisConnectionFactory(potentiallyGetSentinelConfig(),, +						jedisPoolConfig());, +			else {, +				return new JedisConnectionFactory(potentiallyGetSentinelConfig());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.boot.autoconfigure.redis.RedisProperties.Sentinel;, +import org.springframework.data.redis.connection.RedisNode;, +import org.springframework.data.redis.connection.RedisSentinelConfiguration;, +import org.springframework.util.StringUtils;, + * @author Christoph Strobl, +	protected abstract static class RedisHAConnectionConfiguration {, +		protected RedisProperties properties;, +, +		@Autowired(required = false), +		private RedisSentinelConfiguration sentinelConfiguration;, +, +		protected RedisSentinelConfiguration potentiallyGetSentinelConfig() {, +, +			if (this.sentinelConfiguration == null, +					&& this.properties.getSentinel() == null) {, +				return null;, +			}, +, +			RedisSentinelConfiguration sentinelConfig = this.sentinelConfiguration;, +			if (sentinelConfig == null && this.properties.getSentinel() != null) {, +				sentinelConfig = new RedisSentinelConfiguration().master(this.properties, +						.getSentinel().getMaster());, +				sentinelConfig.setSentinels(createRedisNodesForSentinel(this.properties, +						.getSentinel()));, +			}, +			return sentinelConfig;, +		}, +, +		private List<RedisNode> createRedisNodesForSentinel(Sentinel sentinel) {, +, +			String[] nodeStrings = StringUtils.commaDelimitedListToStringArray(sentinel, +					.getNodes());, +, +			List<RedisNode> nodes = new ArrayList<RedisNode>(nodeStrings.length);, +]