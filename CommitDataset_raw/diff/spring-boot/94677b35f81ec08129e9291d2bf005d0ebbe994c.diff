[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/AuditEventTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getType()).isEqualTo("UNKNOWN");, +		assertThat(event.getPrincipal()).isEqualTo("phil");, +		assertThat(event.getTimestamp()).isNotNull();, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getData().get("c")).isEqualTo("d");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/AuditEventTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getType()).isEqualTo("UNKNOWN");, +		assertThat(event.getPrincipal()).isEqualTo("phil");, +		assertThat(event.getTimestamp()).isNotNull();, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getData().get("c")).isEqualTo("d");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepositoryTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("b");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("b");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +		assertThat(events.get(1).getType()).isEqualTo("d");, +		assertThat(events.size()).isEqualTo(1);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/AuditEventTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getType()).isEqualTo("UNKNOWN");, +		assertThat(event.getPrincipal()).isEqualTo("phil");, +		assertThat(event.getTimestamp()).isNotNull();, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getData().get("c")).isEqualTo("d");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepositoryTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("b");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("b");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +		assertThat(events.get(1).getType()).isEqualTo("d");, +		assertThat(events.size()).isEqualTo(1);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.context.getBean(AuditEventRepository.class)).isNotNull();, +		assertThat(this.context.getBean(AuthenticationAuditListener.class)).isNotNull();, +		assertThat(this.context.getBean(AuthorizationAuditListener.class)).isNotNull();, +		assertThat(this.context.getBean(AuditEventRepository.class)), +				.isInstanceOf(TestAuditEventRepository.class);, +		assertThat(this.context.getBean(AbstractAuthenticationAuditListener.class)), +				.isInstanceOf(TestAuthenticationAuditListener.class);, +		assertThat(this.context.getBean(AbstractAuthorizationAuditListener.class)), +				.isInstanceOf(TestAuthorizationAuditListener.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/AuditEventTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getType()).isEqualTo("UNKNOWN");, +		assertThat(event.getPrincipal()).isEqualTo("phil");, +		assertThat(event.getTimestamp()).isNotNull();, +		assertThat(event.getData().get("a")).isEqualTo("b");, +		assertThat(event.getData().get("c")).isEqualTo("d");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepositoryTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("b");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("b");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("a");, +		assertThat(events.get(1).getType()).isEqualTo("c");, +		assertThat(events.size()).isEqualTo(2);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +		assertThat(events.get(1).getType()).isEqualTo("d");, +		assertThat(events.size()).isEqualTo(1);, +		assertThat(events.get(0).getType()).isEqualTo("c");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/AuditAutoConfigurationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.context.getBean(AuditEventRepository.class)).isNotNull();, +		assertThat(this.context.getBean(AuthenticationAuditListener.class)).isNotNull();, +		assertThat(this.context.getBean(AuthorizationAuditListener.class)).isNotNull();, +		assertThat(this.context.getBean(AuditEventRepository.class)), +				.isInstanceOf(TestAuditEventRepository.class);, +		assertThat(this.context.getBean(AbstractAuthenticationAuditListener.class)), +				.isInstanceOf(TestAuthenticationAuditListener.class);]