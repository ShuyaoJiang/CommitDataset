[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Artsiom Yudovin, +			map.from(properties::getQueue).whenNonNull().to(template::setQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Artsiom Yudovin, +			map.from(properties::getQueue).whenNonNull().to(template::setQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Artsiom Yudovin, +		/**, +		 * Default queue name that will be used for synchronous receives., +		 */, +		private String queue;, +, +		public String getQueue() {, +			return queue;, +		}, +, +		public void setQueue(String queue) {, +			this.queue = queue;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Artsiom Yudovin, +			map.from(properties::getQueue).whenNonNull().to(template::setQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Artsiom Yudovin, +		/**, +		 * Default queue name that will be used for synchronous receives., +		 */, +		private String queue;, +, +		public String getQueue() {, +			return queue;, +		}, +, +		public void setQueue(String queue) {, +			this.queue = queue;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import org.springframework.test.util.ReflectionTestUtils;, +	public void testRabbitTemplateDefaultQueue() {, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.template.queue:default-queue"), +				.run((context) -> {, +					RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +					assertThat(ReflectionTestUtils.getField(rabbitTemplate, "queue")), +							.isEqualTo("default-queue");, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * @author Artsiom Yudovin, +			map.from(properties::getQueue).whenNonNull().to(template::setQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, + * @author Artsiom Yudovin, +		/**, +		 * Default queue name that will be used for synchronous receives., +		 */, +		private String queue;, +, +		public String getQueue() {, +			return queue;, +		}, +, +		public void setQueue(String queue) {, +			this.queue = queue;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import org.springframework.test.util.ReflectionTestUtils;, +	public void testRabbitTemplateDefaultQueue() {, +		this.contextRunner.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues("spring.rabbitmq.template.queue:default-queue"), +				.run((context) -> {, +					RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);, +					assertThat(ReflectionTestUtils.getField(rabbitTemplate, "queue")), +							.isEqualTo("default-queue");, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.rabbitmq.template.queue= # Value of a default queue name that will be used for synchronous receives.]