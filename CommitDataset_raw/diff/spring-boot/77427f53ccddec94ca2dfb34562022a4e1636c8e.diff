[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-parent/pom.xml, +				<groupId>org.projectlombok</groupId>, +				<artifactId>lombok</artifactId>, +				<version>1.12.6</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-parent/pom.xml, +				<groupId>org.projectlombok</groupId>, +				<artifactId>lombok</artifactId>, +				<version>1.12.6</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, +, +		<dependency>, +			<groupId>org.projectlombok</groupId>, +			<artifactId>lombok</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +Properties are discovered via the presence of standard getters and setters with special, +handling for collection types (that will be detected even if only a getter is present). The, +annotation processor also supports the use of the `@Data`, `@Getter` and `@Setter` lombok, +annotations., +++ b/spring-boot-parent/pom.xml, +				<groupId>org.projectlombok</groupId>, +				<artifactId>lombok</artifactId>, +				<version>1.12.6</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-configuration-processor/pom.xml, +, +		<dependency>, +			<groupId>org.projectlombok</groupId>, +			<artifactId>lombok</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import javax.lang.model.type.TypeMirror;, +	static final String LOMBOK_DATA_ANNOTATION = "lombok.Data";, +, +	static final String LOMBOK_GETTER_ANNOTATION = "lombok.Getter";, +, +	static final String LOMBOK_SETTER_ANNOTATION = "lombok.Setter";, +, +		processLombokTypes(prefix, element, members, fieldValues);, +			TypeMirror returnType = getter.getReturnType();, +			Element returnTypeElement = this.processingEnv.getTypeUtils().asElement(, +					returnType);, +			boolean isExcluded = this.typeExcludeFilter.isExcluded(returnType);, +			boolean isNested = isNested(returnTypeElement, field, element);, +			boolean isCollection = this.typeUtils.isCollectionOrMap(returnType);, +				String dataType = this.typeUtils.getType(returnType);, +	private void processLombokTypes(String prefix, TypeElement element,, +			TypeElementMembers members, Map<String, Object> fieldValues) {, +		for (Map.Entry<String, VariableElement> entry : members.getFields(), +				.entrySet()) {, +			String name = entry.getKey();, +			VariableElement field = entry.getValue();, +			if (!isLombokField(field, element)) {, +				continue;, +			}, +			TypeMirror returnType = field.asType();, +			Element returnTypeElement = this.processingEnv.getTypeUtils().asElement(, +					returnType);, +			boolean isExcluded = this.typeExcludeFilter.isExcluded(returnType);, +			boolean isNested = isNested(returnTypeElement, field, element);, +			boolean isCollection = this.typeUtils.isCollectionOrMap(returnType);, +			boolean hasSetter = hasLombokSetter(field, element);, +			if (!isExcluded && !isNested && (hasSetter || isCollection)) {, +				String dataType = this.typeUtils.getType(returnType);, +				String sourceType = this.typeUtils.getType(element);, +				String description = this.typeUtils.getJavaDoc(field);, +				Object defaultValue = fieldValues.get(name);, +				boolean deprecated = hasDeprecateAnnotation(field), +						|| hasDeprecateAnnotation(element);, +				this.metadata.add(ItemMetadata.newProperty(prefix, name, dataType,, +						sourceType, null, description, defaultValue, deprecated));, +			}, +		}, +	}, +, +	private boolean isLombokField(VariableElement field, TypeElement element) {, +		return hasAnnotation(field, LOMBOK_GETTER_ANNOTATION), +				|| hasAnnotation(element, LOMBOK_GETTER_ANNOTATION)]