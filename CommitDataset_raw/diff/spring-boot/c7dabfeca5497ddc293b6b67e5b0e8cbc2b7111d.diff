[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +application when you push it to production. You can choose to manage and monitor your, +application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can, +also be automatically applied to your application., +particular, it does not work with Jersey <<howto.adoc#howto-use-actuator-with-jersey,, +== Enabling Production-ready Features, +For Gradle, use the following declaration:, +Actuator endpoints let you monitor and interact with your application. Spring Boot, +includes a number of built-in endpoints and lets you add your own. For example, the, +The way that endpoints are exposed depends on the type of technology that you choose., +`/application` is mapped to a URL. For example, by default, the `health` endpoint is mapped, +The following technology-agnostic endpoints are available:, +|Allows retrieval and deletion of user sessions from a Spring Session-backed session, +|Lets the application be gracefully shutdown (not enabled by default)., +|Shows application status information (that is, `health` status with no additional details)., +|Displays trace information (by default, the last 100 HTTP requests)., +If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can, +use the following additional endpoints:, +=== Securing Endpoints, +By default, all HTTP endpoints are secured such that only users that have an `ACTUATOR`, +role may access them. Security is enforced by using the standard, +TIP: If you want to use something other than `ACTUATOR` as the role, set the, +`management.security.roles` property to the value you want to use., +If you deploy applications behind a firewall, you may prefer that all your actuator, +endpoints can be accessed without requiring authentication. You can do so by changing, +the `management.security.enabled` property, as follows:, +CAUTION: By default, actuator endpoints are exposed on the same port that serves regular, +If you deploy applications publicly, you may want to add '`Spring Security`' to, +handle user authentication. When '`Spring Security`' is added, by default, '`basic`', +authentication is used. The username is`user` and the password is a random generated, +password (which is printed on the console when the application starts)., +TIP: Generated passwords are logged as the application starts. To find the password in, +the console, search for '`Using default security password`'., +properties in your `application.properties`:, +in your security configuration. Also, you need to change the, +TIP: If you do not have a use case for exposing basic health information to unauthenticated, +users and you have secured the actuator endpoints with custom security, you can set, +`management.security.enabled` to `false`. This tells Spring Boot to skip the, +=== Customizing Endpoints, +Endpoints can be customized by using Spring properties. You can change whether an endpoint is, +For example, the following `application.properties` changes the id of the `beans`, +endpoint and also enables `shutdown`:, +specifically "`opt-in`" endpoint enablement, you can use the `endpoints.default.enabled`, +property. For example, the following settings disables _all_ endpoints except for `info`:, +=== Hypermedia for Actuator Web Endpoints, +When a custom management context path is configured, the "`discovery page`", +automatically moves from `/application` to the root of the management context. For example,, +if the management context path is `/management`, then the discovery page is available, +from `/management`. When the management context path is set to `/`, the discovery page, +=== CORS Support, +flexible way what kind of cross domain requests are authorized. If you use Spring, +`management.endpoints.cors.allowed-origins` property has been set. The following configuration, +TIP: See {sc-spring-boot-actuator-autoconfigure}/endpoint/web/servlet/CorsEndpointProperties.{sc-ext}[CorsEndpointProperties], +=== Adding Custom Endpoints, +`@ReadOperation` or `@WriteOperation` are automatically exposed over JMX and, in a web, +TIP: If you do this as a library feature, consider adding a configuration class, +key, `org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration`. If, +you do so and if your users ask for a separate management port or address, the endpoint, +moves to a child context with all the other web endpoints., +=== Health Information, +You can use health information to check the status of your running application. It is, +often used by monitoring software to alert someone when a production system goes down., +For an unauthenticated connection in a secure application, a simple '`status`' message is, +returned. For an authenticated connection, additional details are also displayed. (See, +<<production-ready-health-access-restrictions>> for HTTP details.), +`HealthIndicators`, and you can also write your own. By default, the final system state is, +derived by the `HealthAggregator`, which sorts the statuses from each `HealthIndicator`, +==== Writing Custom HealthIndicators, +To provide custom health information, you can register Spring beans that implement the, +additional details to be displayed. The following code shows a sample `HealthIndicator`, +implementation:, +`HealthIndicator` suffix, if it exists. In the preceding example, the health information, +is available in an entry named `my`., +new system state. In such cases, a custom implementation of the, +by using the `management.health.status.order` configuration property., +For example, assume a new `Status` with code `FATAL` is being used in one of your, +`HealthIndicator` implementations. To configure the severity order, add the following, +The HTTP status code in the response reflects the overall health status (for example, `UP`, +maps to 200, while `OUT_OF_SERVICE` and `DOWN` map to 503). You might also want to register custom, +property maps `FATAL` to 503 (service unavailable):, +TIP: If you need more control, you can define your own `HealthStatusHttpMapper` bean., +The following table shows the default status mappings for the built-in statuses:, +=== Application Information, +`InfoContributors`, and you can write your own., +The following `InfoContributors` are auto-configured by Spring Boot, when appropriate:, +==== Custom Application Information, +properties. All `Environment` properties under the info key are automatically, +exposed. For example, you could add the following settings to your `application.properties` file:, +Rather than hardcoding those values, you could also, +Assuming you use Maven, you could rewrite the preceding example as follows:, +==== Git Commit Information, +`git.commit.time` properties are exposed., +"<<howto.adoc#howto-git-info,Generate git information>>" for more details., +If you want to display the full git information (that is, the full content of, +`git.properties`), use the `management.info.git.mode` property, as follows:, +==== Build Information, +If a `BuildProperties` bean is available, the `info` endpoint can also publish, +information about your build. This happens if a `META-INF/build-info.properties` file, +is available in the classpath., +TIP: The Maven and Gradle plugins can both generate that file. See]