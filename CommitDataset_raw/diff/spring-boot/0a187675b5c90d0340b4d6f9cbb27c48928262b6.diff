[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java, +import org.springframework.util.ObjectUtils;, +		private static final PropertyMapping[] NONE = {};, +		private final PropertyMapper first;, +, +		private final PropertyMapper second;, +, +		DelegatingPropertyMapper(PropertyMapper first) {, +			this(first, null);, +		}, +, +		DelegatingPropertyMapper(PropertyMapper first, PropertyMapper second) {, +			this.first = first;, +			this.second = second;, +			PropertyMapping[] first = map(this.first, configurationPropertyName);, +			PropertyMapping[] second = map(this.second, configurationPropertyName);, +			return merge(first, second);, +		}, +, +		private PropertyMapping[] map(PropertyMapper mapper,, +				ConfigurationPropertyName configurationPropertyName) {, +			try {, +				return (mapper != null) ? mapper.map(configurationPropertyName) : NONE;, +			}, +			catch (Exception ex) {, +				return NONE;, +			}, +			PropertyMapping[] first = map(this.first, propertySourceName);, +			PropertyMapping[] second = map(this.second, propertySourceName);, +			return merge(first, second);, +		private PropertyMapping[] map(PropertyMapper mapper, String propertySourceName) {, +				return (mapper != null) ? mapper.map(propertySourceName) : NONE;, +				return NONE;, +, +		private PropertyMapping[] merge(PropertyMapping[] first,, +				PropertyMapping[] second) {, +			if (ObjectUtils.isEmpty(second)) {, +				return first;, +			}, +			if (ObjectUtils.isEmpty(first)) {, +				return second;, +			}, +			PropertyMapping[] merged = new PropertyMapping[first.length + second.length];, +			System.arraycopy(first, 0, merged, 0, first.length);, +			System.arraycopy(second, 0, merged, first.length, second.length);, +			return merged;]