[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	static String toString(byte[] bytes) {, +		return new String(bytes, UTF_8);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	static String toString(byte[] bytes) {, +		return new String(bytes, UTF_8);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	protected String getPathFromRoot() {, +		return this.pathFromRoot;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	static String toString(byte[] bytes) {, +		return new String(bytes, UTF_8);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	protected String getPathFromRoot() {, +		return this.pathFromRoot;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +		String spec = extractFullSpec(url, jarFile.getPathFromRoot());, +		int index = 0;, +		while ((separator = spec.indexOf(SEPARATOR, index)) > 0) {, +			jarFile = getNestedJarFile(jarFile, spec.substring(index, separator));, +			index += separator + SEPARATOR.length();, +		this.jarEntryName = getJarEntryName(spec.substring(index));, +	private String extractFullSpec(URL url, String pathFromRoot) {, +		if (separatorIndex < 0) {, +			return "";, +		return file, +				.substring(separatorIndex + SEPARATOR.length() + pathFromRoot.length());, +			if (source.length() == 0 || (source.indexOf('%') < 0)) {, +				return source;, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length());, +			return AsciiBytes.toString(bos.toByteArray());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	static String toString(byte[] bytes) {, +		return new String(bytes, UTF_8);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	protected String getPathFromRoot() {, +		return this.pathFromRoot;, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +		String spec = extractFullSpec(url, jarFile.getPathFromRoot());, +		int index = 0;, +		while ((separator = spec.indexOf(SEPARATOR, index)) > 0) {, +			jarFile = getNestedJarFile(jarFile, spec.substring(index, separator));, +			index += separator + SEPARATOR.length();, +		this.jarEntryName = getJarEntryName(spec.substring(index));, +	private String extractFullSpec(URL url, String pathFromRoot) {, +		if (separatorIndex < 0) {, +			return "";, +		return file, +				.substring(separatorIndex + SEPARATOR.length() + pathFromRoot.length());, +			if (source.length() == 0 || (source.indexOf('%') < 0)) {, +				return source;, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length());, +			return AsciiBytes.toString(bos.toByteArray());, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarURLConnectionTests.java, +	@Test, +	public void connectionToEntryUsingAbsoluteUrlForEntryFromNestedJarFile(), +			throws Exception {, +		URL absoluteUrl = new URL(, +				"jar:file:" + getAbsolutePath() + "!/nested.jar!/3.dat");, +		assertThat(new JarURLConnection(absoluteUrl,, +				this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar"))), +						.getInputStream()).hasSameContentAs(, +								new ByteArrayInputStream(new byte[] { 3 }));, +	}, +, +	@Test, +	public void connectionToEntryUsingRelativeUrlForEntryFromNestedJarFile(), +			throws Exception {, +		URL absoluteUrl = new URL(, +				"jar:file:" + getRelativePath() + "!/nested.jar!/3.dat");, +		assertThat(new JarURLConnection(absoluteUrl,, +				this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar"))), +						.getInputStream()).hasSameContentAs(, +								new ByteArrayInputStream(new byte[] { 3 }));, +	}, +]