[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import org.springframework.core.env.PropertySource;, +import de.flapdoodle.embed.process.store.ArtifactStoreBuilder;, + * @since 1.3.0, +	@Autowired(required = false), +	private IRuntimeConfig runtimeConfig;, +		return new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger), +				.processOutput(processOutput).artifactStore(getArtifactStore(logger)), +	private ArtifactStoreBuilder getArtifactStore(Logger logger) {, +		return new ExtractedArtifactStoreBuilder().defaults(Command.MongoD).download(, +				new DownloadConfigBuilder().defaultsForCommand(Command.MongoD), +						.progressListener(new Slf4jProgressListener(logger)));, +	}, +, +	@Bean(initMethod = "start", destroyMethod = "stop"), +	@ConditionalOnMissingBean, +	public MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig), +			throws IOException {, +		if (getPort() == 0) {, +			publishPortInfo(mongodConfig.net().getPort());, +		}, +		MongodStarter mongodStarter = getMongodStarter(this.runtimeConfig);, +		return mongodStarter.prepare(mongodConfig);, +	}, +, +	private MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {, +		if (runtimeConfig == null) {, +			return MongodStarter.getDefaultInstance();, +		}, +		return MongodStarter.getInstance(runtimeConfig);, +	}, +, +		if (this.properties.getPort() == null) {, +			return MongoProperties.DEFAULT_PORT;, +		}, +		return this.properties.getPort();, +			MutablePropertySources sources = ((ConfigurableApplicationContext) currentContext), +					.getEnvironment().getPropertySources();, +			getMongoPorts(sources).put("local.mongo.port", port);, +	@SuppressWarnings("unchecked"), +	private Map<String, Object> getMongoPorts(MutablePropertySources sources) {, +		PropertySource<?> propertySource = sources.get("mongo.ports");, +		if (propertySource == null) {, +			propertySource = new MapPropertySource("mongo.ports",, +					new HashMap<String, Object>());, +			sources.addFirst(propertySource);, +		}, +		return (Map<String, Object>) propertySource.getSource();, +	}, +, +			this.features = (features == null ? Collections.<Feature>emptySet(), +					: features);, +			if (getClass() == obj.getClass()) {, +				boolean equals = true;, +				equals &= this.features.equals(other.features);, +				equals &= this.version.equals(other.version);, +				return equals;, +			return super.equals(obj);, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import org.springframework.core.env.PropertySource;, +import de.flapdoodle.embed.process.store.ArtifactStoreBuilder;, + * @since 1.3.0, +	@Autowired(required = false), +	private IRuntimeConfig runtimeConfig;, +		return new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger), +				.processOutput(processOutput).artifactStore(getArtifactStore(logger)), +	private ArtifactStoreBuilder getArtifactStore(Logger logger) {, +		return new ExtractedArtifactStoreBuilder().defaults(Command.MongoD).download(, +				new DownloadConfigBuilder().defaultsForCommand(Command.MongoD), +						.progressListener(new Slf4jProgressListener(logger)));, +	}, +, +	@Bean(initMethod = "start", destroyMethod = "stop"), +	@ConditionalOnMissingBean, +	public MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig), +			throws IOException {, +		if (getPort() == 0) {, +			publishPortInfo(mongodConfig.net().getPort());, +		}, +		MongodStarter mongodStarter = getMongodStarter(this.runtimeConfig);, +		return mongodStarter.prepare(mongodConfig);, +	}, +, +	private MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {, +		if (runtimeConfig == null) {, +			return MongodStarter.getDefaultInstance();, +		}, +		return MongodStarter.getInstance(runtimeConfig);, +	}, +, +		if (this.properties.getPort() == null) {, +			return MongoProperties.DEFAULT_PORT;, +		}, +		return this.properties.getPort();, +			MutablePropertySources sources = ((ConfigurableApplicationContext) currentContext), +					.getEnvironment().getPropertySources();, +			getMongoPorts(sources).put("local.mongo.port", port);, +	@SuppressWarnings("unchecked"), +	private Map<String, Object> getMongoPorts(MutablePropertySources sources) {]