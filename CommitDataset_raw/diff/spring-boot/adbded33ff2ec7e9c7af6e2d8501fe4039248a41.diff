[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricDataSourceAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} that provides metrics on dataSource, + * usage., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricDataSourceAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} that provides metrics on dataSource, + * usage., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +, + * A {@link PublicMetrics} implementation that provides data source usage statistics., +	private final Map<String, DataSourceMetadata> dataSourceMetadataByPrefix = new HashMap<String, DataSourceMetadata>();, +		Map<String, DataSource> dataSources = this.applicationContext, +				.getBeansOfType(DataSource.class);, +		DataSourceMetadataProvider provider = new CompositeDataSourceMetadataProvider(, +				this.dataSourceMetadataProviders);, +			String prefix = createPrefix(entry.getKey(), entry.getValue(), entry, +					.getValue().equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(entry, +					.getValue());, +				this.dataSourceMetadataByPrefix.put(prefix, dataSourceMetadata);, +		for (Map.Entry<String, DataSourceMetadata> entry : this.dataSourceMetadataByPrefix, +				.entrySet()) {, +	 * Create the prefix to use for the metrics to associate with the given, +	 * {@link DataSource}., +	protected String createPrefix(String dataSourceName, DataSource dataSource,, +			boolean primary) {, +		else if (endWithDataSource(dataSourceName)) { // Strip the data source part out of, +														// the name, +			sb.append(dataSourceName.substring(0, dataSourceName.length(), +					- DATASOURCE_SUFFIX.length()));, +			return this.applicationContext.getBean(DataSource.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricDataSourceAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} that provides metrics on dataSource, + * usage., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +, + * A {@link PublicMetrics} implementation that provides data source usage statistics., +	private final Map<String, DataSourceMetadata> dataSourceMetadataByPrefix = new HashMap<String, DataSourceMetadata>();, +		Map<String, DataSource> dataSources = this.applicationContext, +				.getBeansOfType(DataSource.class);, +		DataSourceMetadataProvider provider = new CompositeDataSourceMetadataProvider(, +				this.dataSourceMetadataProviders);, +			String prefix = createPrefix(entry.getKey(), entry.getValue(), entry, +					.getValue().equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(entry, +					.getValue());, +				this.dataSourceMetadataByPrefix.put(prefix, dataSourceMetadata);, +		for (Map.Entry<String, DataSourceMetadata> entry : this.dataSourceMetadataByPrefix, +				.entrySet()) {, +	 * Create the prefix to use for the metrics to associate with the given, +	 * {@link DataSource}., +	protected String createPrefix(String dataSourceName, DataSource dataSource,, +			boolean primary) {, +		else if (endWithDataSource(dataSourceName)) { // Strip the data source part out of, +														// the name, +			sb.append(dataSourceName.substring(0, dataSourceName.length(), +					- DATASOURCE_SUFFIX.length()));, +			return this.applicationContext.getBean(DataSource.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricDataSourceAutoConfigurationTests.java, +import com.zaxxer.hikari.HikariDataSource;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +		assertMetrics(metrics, "datasource.tomcat.active", "datasource.tomcat.usage",, +		JdbcTemplate jdbcTemplate = new JdbcTemplate(this.context.getBean("hikariDS",, +				DataSource.class));, +			public Void doInConnection(Connection connection) throws SQLException,, +					DataAccessException {, +		assertMetrics(anotherMetrics, "datasource.tomcat.active",, +				"datasource.tomcat.usage", "datasource.hikariDS.active",, +				"datasource.hikariDS.usage", "datasource.commonsDbcp.active",, +				"datasource.commonsDbcp.usage");, +		assertMetrics(metrics, "datasource.primary.active", "datasource.primary.usage",, +		load(MultipleDataSourcesWithPrimaryConfig.class,, +				CustomDataSourcePublicMetrics.class);, +		assertMetrics(metrics, "ds.first.active", "ds.first.usage", "ds.second.active",, +				"ds.second.usage");, +			return initializeBuilder().type(org.apache.tomcat.jdbc.pool.DataSource.class), +					.build();, +			return initializeBuilder().type(org.apache.tomcat.jdbc.pool.DataSource.class), +					.build();, +				protected String createPrefix(String dataSourceName,, +						DataSource dataSource, boolean primary) {, +		return DataSourceBuilder.create().driverClassName("org.hsqldb.jdbc.JDBCDriver"), +				.url("jdbc:hsqldb:mem:test").username("sa");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricDataSourceAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} that provides metrics on dataSource, + * usage., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java, +, + * A {@link PublicMetrics} implementation that provides data source usage statistics., +	private final Map<String, DataSourceMetadata> dataSourceMetadataByPrefix = new HashMap<String, DataSourceMetadata>();, +		Map<String, DataSource> dataSources = this.applicationContext, +				.getBeansOfType(DataSource.class);, +		DataSourceMetadataProvider provider = new CompositeDataSourceMetadataProvider(, +				this.dataSourceMetadataProviders);, +			String prefix = createPrefix(entry.getKey(), entry.getValue(), entry, +					.getValue().equals(primaryDataSource));, +			DataSourceMetadata dataSourceMetadata = provider.getDataSourceMetadata(entry, +					.getValue());]