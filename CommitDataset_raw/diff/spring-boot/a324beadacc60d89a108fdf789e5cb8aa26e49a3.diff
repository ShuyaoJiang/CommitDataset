[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java, +import org.springframework.bootstrap.SpringApplication;, +import org.springframework.bootstrap.SpringApplicationInitializer;, +import org.springframework.bootstrap.logging.LoggingSystem;, +		ApplicationContextInitializer<ConfigurableApplicationContext>,, +		SpringApplicationInitializer, Ordered {, +	private final Log logger = LogFactory.getLog(getClass());, +, +	@Override, +	public void initialize(SpringApplication springApplication) {, +		LoggingSystem.get(springApplication.getClass().getClassLoader()), +				.beforeInitialize();, +	}, +, +, +		// User specified configuration, +		if (environment.containsProperty("logging.config")) {, +			String value = environment.getProperty("logging.config");, +			try {, +				ResourceUtils.getURL(value).openStream().close();, +				system.initialize(value);, +				return;, +			}, +			catch (Exception ex) {, +				// Swallow exception and continue, +			}, +			this.logger.warn("Logging environment value '" + value, +					+ "' cannot be opened and will be ignored");, +		}, +, +		system.initialize();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java, +import org.springframework.bootstrap.SpringApplication;, +import org.springframework.bootstrap.SpringApplicationInitializer;, +import org.springframework.bootstrap.logging.LoggingSystem;, +		ApplicationContextInitializer<ConfigurableApplicationContext>,, +		SpringApplicationInitializer, Ordered {, +	private final Log logger = LogFactory.getLog(getClass());, +, +	@Override, +	public void initialize(SpringApplication springApplication) {, +		LoggingSystem.get(springApplication.getClass().getClassLoader()), +				.beforeInitialize();, +	}, +, +, +		// User specified configuration, +		if (environment.containsProperty("logging.config")) {, +			String value = environment.getProperty("logging.config");, +			try {, +				ResourceUtils.getURL(value).openStream().close();, +				system.initialize(value);, +				return;, +			}, +			catch (Exception ex) {, +				// Swallow exception and continue, +			}, +			this.logger.warn("Logging environment value '" + value, +					+ "' cannot be opened and will be ignored");, +		}, +, +		system.initialize();, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/logging/AbstractLoggingSystem.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.bootstrap.logging;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.util.ClassUtils;, +, +/**, + * Abstract base class for {@link LoggingSystem} implementations., + * , + * @author Phillip Webb, + * @author Dave Syer, + */, +abstract class AbstractLoggingSystem extends LoggingSystem {, +, +	private final ClassLoader classLoader;, +, +	private final String[] paths;, +, +	public AbstractLoggingSystem(ClassLoader classLoader, String... paths) {, +		this.classLoader = classLoader;, +		this.paths = paths.clone();, +	}]