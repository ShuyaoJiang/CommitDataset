[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import de.flapdoodle.embed.process.config.store.IDownloadConfig;, +import org.springframework.beans.factory.ObjectProvider;, +		private static Logger EMBEDDED_MONGO_LOGGER = LoggerFactory, +				.getLogger(RuntimeConfigConfiguration.class.getPackage().getName(), +						+ ".EmbeddedMongo");, +, +		public IRuntimeConfig embeddedMongoRuntimeConfig(, +				IDownloadConfig embeddedMongoDownloadConfig) {, +					Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.INFO),, +					Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.ERROR),, +					Processors.named("[console>]",, +							Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.DEBUG)));, +			return new RuntimeConfigBuilder(), +					.defaultsWithLogger(Command.MongoD, EMBEDDED_MONGO_LOGGER), +					.processOutput(processOutput), +					.artifactStore(getArtifactStore(embeddedMongoDownloadConfig)).build();, +		@Bean, +		@ConditionalOnMissingBean, +		public IDownloadConfig embeddedMongoDownloadConfig(, +				ObjectProvider<EmbeddedMongoDownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizer) {, +			DownloadConfigBuilder downloadConfigBuilder = new DownloadConfigBuilder(), +					.defaultsForCommand(Command.MongoD);, +, +			downloadConfigBuilder, +					.progressListener(new Slf4jProgressListener(EMBEDDED_MONGO_LOGGER));, +, +			downloadConfigBuilderCustomizer.stream(), +					.forEach((c) -> c.customize(downloadConfigBuilder));, +, +			return downloadConfigBuilder.build();, +		}, +, +		private ArtifactStoreBuilder getArtifactStore(IDownloadConfig downloadConfig) {, +					.download(downloadConfig);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java, +import de.flapdoodle.embed.process.config.store.IDownloadConfig;, +import org.springframework.beans.factory.ObjectProvider;, +		private static Logger EMBEDDED_MONGO_LOGGER = LoggerFactory, +				.getLogger(RuntimeConfigConfiguration.class.getPackage().getName(), +						+ ".EmbeddedMongo");, +, +		public IRuntimeConfig embeddedMongoRuntimeConfig(, +				IDownloadConfig embeddedMongoDownloadConfig) {, +					Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.INFO),, +					Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.ERROR),, +					Processors.named("[console>]",, +							Processors.logTo(EMBEDDED_MONGO_LOGGER, Slf4jLevel.DEBUG)));, +			return new RuntimeConfigBuilder(), +					.defaultsWithLogger(Command.MongoD, EMBEDDED_MONGO_LOGGER), +					.processOutput(processOutput), +					.artifactStore(getArtifactStore(embeddedMongoDownloadConfig)).build();, +		@Bean, +		@ConditionalOnMissingBean, +		public IDownloadConfig embeddedMongoDownloadConfig(, +				ObjectProvider<EmbeddedMongoDownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizer) {, +			DownloadConfigBuilder downloadConfigBuilder = new DownloadConfigBuilder(), +					.defaultsForCommand(Command.MongoD);, +, +			downloadConfigBuilder, +					.progressListener(new Slf4jProgressListener(EMBEDDED_MONGO_LOGGER));, +, +			downloadConfigBuilderCustomizer.stream(), +					.forEach((c) -> c.customize(downloadConfigBuilder));, +, +			return downloadConfigBuilder.build();, +		}, +, +		private ArtifactStoreBuilder getArtifactStore(IDownloadConfig downloadConfig) {, +					.download(downloadConfig);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoDownloadConfigBuilderCustomizer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.mongo.embedded;, +, +import de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;, +, +/**, + * Callback interface that can be implemented by beans wishing to customize the, + * EmbeddedMongo {@link DownloadConfigBuilder} outcome whilst retaining default, + * auto-configuration., + *, + * @author Michael Gmeiner, + * @since 2.2.0, + */, +@FunctionalInterface]