[+++ b/docs/howto.md, +`oracle`, `mysql`, `postgresql` etc.). Spring Boot enables the, +failfast feature of the Spring JDBC initializer by default, so if , +the scripts cause exceptions the application will fail., +, +To disable the failfast you can set, +`spring.datasource.continueOnError=true`. This can be useful once an, +application has matured and been deployed a few times, since the, +scripts can act as "poor man's migrations" - inserts that fail mean, +that the data is already there, so there would be no need to prevent, +the application from running, for instance., +++ b/docs/howto.md, +`oracle`, `mysql`, `postgresql` etc.). Spring Boot enables the, +failfast feature of the Spring JDBC initializer by default, so if , +the scripts cause exceptions the application will fail., +, +To disable the failfast you can set, +`spring.datasource.continueOnError=true`. This can be useful once an, +application has matured and been deployed a few times, since the, +scripts can act as "poor man's migrations" - inserts that fail mean, +that the data is already there, so there would be no need to prevent, +the application from running, for instance., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		boolean continueOnError = this.environment.getProperty("continueOnError",, +				Boolean.class, false);, +				populator.setContinueOnError(continueOnError);, +++ b/docs/howto.md, +`oracle`, `mysql`, `postgresql` etc.). Spring Boot enables the, +failfast feature of the Spring JDBC initializer by default, so if , +the scripts cause exceptions the application will fail., +, +To disable the failfast you can set, +`spring.datasource.continueOnError=true`. This can be useful once an, +application has matured and been deployed a few times, since the, +scripts can act as "poor man's migrations" - inserts that fail mean, +that the data is already there, so there would be no need to prevent, +the application from running, for instance., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		boolean continueOnError = this.environment.getProperty("continueOnError",, +				Boolean.class, false);, +				populator.setContinueOnError(continueOnError);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import java.util.Random;, +import org.junit.Before;, +	@Before, +	public void init() {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt());, +	}, +, +						"spring.datasource.url:jdbc:foo://localhost");, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:true");, +		EnvironmentTestUtils.addEnvironment(, +				this.context,, +				"spring.datasource.initialize:true",, +				"spring.datasource.schema:", +						+ ClassUtils.addResourcePathToPackagePath(getClass(),, +								"schema.sql"), +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +++ b/docs/howto.md, +`oracle`, `mysql`, `postgresql` etc.). Spring Boot enables the, +failfast feature of the Spring JDBC initializer by default, so if , +the scripts cause exceptions the application will fail., +, +To disable the failfast you can set, +`spring.datasource.continueOnError=true`. This can be useful once an, +application has matured and been deployed a few times, since the, +scripts can act as "poor man's migrations" - inserts that fail mean, +that the data is already there, so there would be no need to prevent, +the application from running, for instance., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		boolean continueOnError = this.environment.getProperty("continueOnError",, +				Boolean.class, false);, +				populator.setContinueOnError(continueOnError);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import java.util.Random;, +import org.junit.Before;, +	@Before, +	public void init() {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt());, +	}, +, +						"spring.datasource.url:jdbc:foo://localhost");, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:true");, +		EnvironmentTestUtils.addEnvironment(, +				this.context,, +				"spring.datasource.initialize:true",, +				"spring.datasource.schema:", +						+ ClassUtils.addResourcePathToPackagePath(getClass(),, +								"schema.sql"), +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/test/resources/application.properties, +++ b/docs/howto.md]