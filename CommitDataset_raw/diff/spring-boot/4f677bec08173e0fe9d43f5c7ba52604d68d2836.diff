[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import org.gradle.api.artifacts.ResolvedArtifact;, + * @author Andy Wilkinson, +	private static final Set<String> SUPPORTED_TYPES = Collections, +			.unmodifiableSet(new HashSet<String>(Arrays.asList("jar", "ejb",, +					"ejb-client", "test-jar", "bundle")));, +, +		Configuration custom = this.customConfigurationName != null ? this.project, +			libraries(LibraryScope.CUSTOM, getResolvedArtifacts(custom), callback);, +			Set<ResolvedArtifact> compileArtifacts = getResolvedArtifacts("compile");, +			Set<ResolvedArtifact> runtimeArtifacts = getResolvedArtifacts("runtime");, +			runtimeArtifacts.removeAll(compileArtifacts);, +			Set<ResolvedArtifact> providedArtifacts = getResolvedArtifacts(this.providedConfigurationName);, +			compileArtifacts.removeAll(providedArtifacts);, +			runtimeArtifacts.removeAll(providedArtifacts);, +			libraries(LibraryScope.COMPILE, compileArtifacts, callback);, +			libraries(LibraryScope.RUNTIME, runtimeArtifacts, callback);, +			libraries(LibraryScope.PROVIDED, providedArtifacts, callback);, +		}, +	private Set<ResolvedArtifact> getResolvedArtifacts(Configuration configuration) {, +		if (configuration != null) {, +			return configuration.getResolvedConfiguration().getResolvedArtifacts();, +		}, +		else {, +			return Collections.emptySet();, +		}, +	private Set<ResolvedArtifact> getResolvedArtifacts(String configurationName) {, +		Configuration configuration = this.project.getConfigurations().findByName(, +				configurationName);, +		return getResolvedArtifacts(configuration);, +	private void libraries(LibraryScope scope, Set<ResolvedArtifact> artifacts,, +		for (ResolvedArtifact artifact : artifacts) {, +			if (SUPPORTED_TYPES.contains(artifact.getType())) {, +				callback.library(artifact.getFile(), scope);]