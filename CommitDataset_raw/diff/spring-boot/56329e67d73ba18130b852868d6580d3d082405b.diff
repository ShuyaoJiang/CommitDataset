[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnyMongoClientAvailable;, +import org.springframework.data.mongodb.core.MongoDbFactorySupport;, +@ConditionalOnClass({ MongoClient.class, com.mongodb.client.MongoClient.class,, +		MongoTemplate.class }), +@Conditional(AnyMongoClientAvailable.class), +	public MongoDataAutoConfiguration(MongoProperties properties) {, +	public MongoDbFactorySupport<?> mongoDbFactory(ObjectProvider<MongoClient> mongo,, +			ObjectProvider<com.mongodb.client.MongoClient> mongoClient) {, +		MongoClient preferredClient = mongo.getIfAvailable();, +		if (preferredClient != null) {, +			return new SimpleMongoDbFactory(preferredClient,, +					this.properties.getMongoClientDatabase());, +		}, +		com.mongodb.client.MongoClient fallbackClient = mongoClient.getIfAvailable();, +		if (fallbackClient != null) {, +			return new SimpleMongoClientDbFactory(fallbackClient,, +					this.properties.getMongoClientDatabase());, +		}, +		throw new IllegalStateException("Expected to find at least one MongoDB client.");, +	 * Check if either a {@link com.mongodb.MongoClient} or, +	 * {@link com.mongodb.client.MongoClient} bean is available., +	static class AnyMongoClientAvailable extends AnyNestedCondition {, +		AnyMongoClientAvailable() {, +		@ConditionalOnBean(MongoClient.class), +		static class PreferredClientAvailable {, +		static class FallbackClientAvailable {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnyMongoClientAvailable;, +import org.springframework.data.mongodb.core.MongoDbFactorySupport;, +@ConditionalOnClass({ MongoClient.class, com.mongodb.client.MongoClient.class,, +		MongoTemplate.class }), +@Conditional(AnyMongoClientAvailable.class), +	public MongoDataAutoConfiguration(MongoProperties properties) {, +	public MongoDbFactorySupport<?> mongoDbFactory(ObjectProvider<MongoClient> mongo,, +			ObjectProvider<com.mongodb.client.MongoClient> mongoClient) {, +		MongoClient preferredClient = mongo.getIfAvailable();, +		if (preferredClient != null) {, +			return new SimpleMongoDbFactory(preferredClient,, +					this.properties.getMongoClientDatabase());, +		}, +		com.mongodb.client.MongoClient fallbackClient = mongoClient.getIfAvailable();, +		if (fallbackClient != null) {, +			return new SimpleMongoClientDbFactory(fallbackClient,, +					this.properties.getMongoClientDatabase());, +		}, +		throw new IllegalStateException("Expected to find at least one MongoDB client.");, +	 * Check if either a {@link com.mongodb.MongoClient} or, +	 * {@link com.mongodb.client.MongoClient} bean is available., +	static class AnyMongoClientAvailable extends AnyNestedCondition {, +		AnyMongoClientAvailable() {, +		@ConditionalOnBean(MongoClient.class), +		static class PreferredClientAvailable {, +		static class FallbackClientAvailable {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import org.springframework.data.mongodb.core.SimpleMongoDbFactory;, +	public void createsMongoDbFactoryForPreferredMongoClient() {, +		this.contextRunner.run((context) -> {, +			MongoDbFactory dbFactory = context.getBean(MongoDbFactory.class);, +			assertThat(dbFactory).isInstanceOf(SimpleMongoDbFactory.class);, +		});, +	}, +	@Test, +	public void createsMongoDbFactoryForFallbackMongoClient() {, +		this.contextRunner.withUserConfiguration(FallbackMongoClientConfiguration.class), +	static class FallbackMongoClientConfiguration {, +		com.mongodb.client.MongoClient fallbackMongoClient() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnyMongoClientAvailable;, +import org.springframework.data.mongodb.core.MongoDbFactorySupport;, +@ConditionalOnClass({ MongoClient.class, com.mongodb.client.MongoClient.class,, +		MongoTemplate.class }), +@Conditional(AnyMongoClientAvailable.class), +	public MongoDataAutoConfiguration(MongoProperties properties) {, +	public MongoDbFactorySupport<?> mongoDbFactory(ObjectProvider<MongoClient> mongo,, +			ObjectProvider<com.mongodb.client.MongoClient> mongoClient) {, +		MongoClient preferredClient = mongo.getIfAvailable();, +		if (preferredClient != null) {, +			return new SimpleMongoDbFactory(preferredClient,, +					this.properties.getMongoClientDatabase());, +		}, +		com.mongodb.client.MongoClient fallbackClient = mongoClient.getIfAvailable();, +		if (fallbackClient != null) {, +			return new SimpleMongoClientDbFactory(fallbackClient,, +					this.properties.getMongoClientDatabase());, +		}, +		throw new IllegalStateException("Expected to find at least one MongoDB client.");, +	 * Check if either a {@link com.mongodb.MongoClient} or, +	 * {@link com.mongodb.client.MongoClient} bean is available., +	static class AnyMongoClientAvailable extends AnyNestedCondition {, +		AnyMongoClientAvailable() {, +		@ConditionalOnBean(MongoClient.class), +		static class PreferredClientAvailable {, +		static class FallbackClientAvailable {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java, +import org.springframework.data.mongodb.core.SimpleMongoDbFactory;, +	public void createsMongoDbFactoryForPreferredMongoClient() {, +		this.contextRunner.run((context) -> {, +			MongoDbFactory dbFactory = context.getBean(MongoDbFactory.class);, +			assertThat(dbFactory).isInstanceOf(SimpleMongoDbFactory.class);]