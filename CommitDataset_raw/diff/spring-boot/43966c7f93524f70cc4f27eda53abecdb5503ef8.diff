[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.webflux.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.webflux.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    },, +    {, +      "name": "spring.webflux.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.webflux.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    },, +    {, +      "name": "spring.webflux.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +	public void hiddenHttpMethodFilterCanBeDisabled() {, +		this.contextRunner, +				.withPropertyValues("spring.webflux.hiddenmethod.filter.enabled=false"), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "spring.webflux.hiddenmethod.filter", name = "enabled", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    },, +    {, +      "name": "spring.webflux.hiddenmethod.filter.enabled",, +      "type": "java.lang.Boolean",, +      "description": "Whether to enable Spring's HiddenHttpMethodFilter.",, +      "defaultValue": true, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +	public void hiddenHttpMethodFilterCanBeDisabled() {, +		this.contextRunner, +				.withPropertyValues("spring.webflux.hiddenmethod.filter.enabled=false"), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(HiddenHttpMethodFilter.class));, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.webflux.hiddenmethod.filter.enabled=true # Whether to enable Spring's HiddenHttpMethodFilter.]