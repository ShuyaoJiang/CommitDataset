[+++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, + * Copyright 2012-2016 the original author or authors., +			String groupId = source.getGroupId();, +			String dottedPrefix = groupId + ".";, +			if (hasLength(groupId) && id.startsWith(dottedPrefix)) {, +, +	private static boolean hasLength(String s) {, +		return (s != null && s.length() > 0);, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, + * Copyright 2012-2016 the original author or authors., +			String groupId = source.getGroupId();, +			String dottedPrefix = groupId + ".";, +			if (hasLength(groupId) && id.startsWith(dottedPrefix)) {, +, +	private static boolean hasLength(String s) {, +		return (s != null && s.length() > 0);, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilderTests.java, + * Copyright 2012-2016 the original author or authors., +	public void emptyGroups() throws IOException {, +		InputStream in = getInputStreamFor("empty-groups");, +		try {, +			ConfigurationMetadataRepository repo = ConfigurationMetadataRepositoryJsonBuilder, +					.create(in).build();, +			validateEmptyGroup(repo);, +			assertEquals(1, repo.getAllGroups().size());, +			contains(repo.getAllProperties(), "name", "title");, +			assertEquals(2, repo.getAllProperties().size());, +		}, +		finally {, +			in.close();, +		}, +	}, +, +	@Test, +	private void validateEmptyGroup(ConfigurationMetadataRepository repo) {, +		ConfigurationMetadataGroup group = repo.getAllGroups().get("");, +		contains(group.getSources(), "org.acme.Foo", "org.acme.Bar");, +		ConfigurationMetadataSource source = group.getSources().get("org.acme.Foo");, +		contains(source.getProperties(), "name");, +		assertEquals(1, source.getProperties().size());, +		ConfigurationMetadataSource source2 = group.getSources(), +				.get("org.acme.Bar");, +		contains(source2.getProperties(), "title");, +		assertEquals(1, source2.getProperties().size());, +		validatePropertyHints(repo.getAllProperties().get("name"), 0, 0);, +		validatePropertyHints(repo.getAllProperties().get("title"), 0, 0);, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java, + * Copyright 2012-2016 the original author or authors., +			String groupId = source.getGroupId();, +			String dottedPrefix = groupId + ".";, +			if (hasLength(groupId) && id.startsWith(dottedPrefix)) {, +, +	private static boolean hasLength(String s) {, +		return (s != null && s.length() > 0);, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilderTests.java, + * Copyright 2012-2016 the original author or authors., +	public void emptyGroups() throws IOException {, +		InputStream in = getInputStreamFor("empty-groups");, +		try {, +			ConfigurationMetadataRepository repo = ConfigurationMetadataRepositoryJsonBuilder, +					.create(in).build();, +			validateEmptyGroup(repo);, +			assertEquals(1, repo.getAllGroups().size());, +			contains(repo.getAllProperties(), "name", "title");, +			assertEquals(2, repo.getAllProperties().size());, +		}, +		finally {, +			in.close();, +		}, +	}, +, +	@Test, +	private void validateEmptyGroup(ConfigurationMetadataRepository repo) {, +		ConfigurationMetadataGroup group = repo.getAllGroups().get("");, +		contains(group.getSources(), "org.acme.Foo", "org.acme.Bar");, +		ConfigurationMetadataSource source = group.getSources().get("org.acme.Foo");, +		contains(source.getProperties(), "name");, +		assertEquals(1, source.getProperties().size());, +		ConfigurationMetadataSource source2 = group.getSources(), +				.get("org.acme.Bar");, +		contains(source2.getProperties(), "title");, +		assertEquals(1, source2.getProperties().size());, +		validatePropertyHints(repo.getAllProperties().get("name"), 0, 0);, +		validatePropertyHints(repo.getAllProperties().get("title"), 0, 0);, +	}, +, +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/test/java/org/springframework/boot/configurationmetadata/JsonReaderTests.java, +		RawConfigurationMetadata rawMetadata = readFor("empty-groups");, +		assertEquals(2, items.size());, +		ConfigurationMetadataItem name = items.get(0);, +		assertProperty(name, "name", "name", String.class, null);, +		ConfigurationMetadataItem dotTitle = items.get(1);]