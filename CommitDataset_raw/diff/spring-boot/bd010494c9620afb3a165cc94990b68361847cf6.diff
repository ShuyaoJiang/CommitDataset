[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be, +negated using the {@code !} character. If both negated and non-negated profiles, +are specified for a single document, at least one non-negated profile must match, +and no negated profiles may match., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be, +negated using the {@code !} character. If both negated and non-negated profiles, +are specified for a single document, at least one non-negated profile must match, +and no negated profiles may match., +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +import org.springframework.util.StringUtils;, + * document may define a "spring.profiles" element as a comma-separated list of Spring, + * profile names, optionally negated using the {@code !} character. If both negated and, + * non-negated profiles are specified for a single document, at least one non-negated, + * profile must match and no negated profiles may match., + * @author Matt Benson, +	private static final String SPRING_PROFILES = "spring.profiles";, +		ArrayDocumentMatcher next = new ArrayDocumentMatcher(SPRING_PROFILES, profiles);, +, +		if (properties.containsKey(SPRING_PROFILES)) {, +			properties = new Properties(properties);, +, +			Map<Boolean, String> sortedProfiles = sortProfiles(, +					properties.getProperty(SPRING_PROFILES));, +, +			// handle negated profiles:, +			if (sortedProfiles.containsKey(Boolean.FALSE)) {, +				properties.setProperty(SPRING_PROFILES,, +						sortedProfiles.get(Boolean.FALSE));, +, +				MatchStatus matchStatus = next.matches(properties);, +				switch (matchStatus) {, +				case FOUND:, +					return MatchStatus.NOT_FOUND;, +				case NOT_FOUND:, +					return MatchStatus.FOUND;, +				default:, +					break;, +				}, +			}, +			properties.setProperty(SPRING_PROFILES, sortedProfiles.get(Boolean.TRUE));, +		}, +		return next.matches(properties);, +	}, +, +	private Map<Boolean, String> sortProfiles(String value) {, +		if (value.indexOf('!') >= 0) {, +			Set<String> positive = new HashSet<String>();, +			Set<String> negative = new HashSet<String>();, +			for (String s : StringUtils.commaDelimitedListToSet(value)) {, +				if (s.charAt(0) == '!') {, +					negative.add(s.substring(1));, +				}, +				else {, +					positive.add(s);, +				}, +			}, +			if (!negative.isEmpty()) {, +				Map<Boolean, String> result = new HashMap<Boolean, String>();, +				result.put(Boolean.FALSE,, +						StringUtils.collectionToCommaDelimitedString(negative));, +				if (!positive.isEmpty()) {, +					result.put(Boolean.TRUE,, +							StringUtils.collectionToCommaDelimitedString(positive));, +				}, +				return result;, +			}, +		}, +		return Collections.singletonMap(Boolean.TRUE, value);, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be, +negated using the {@code !} character. If both negated and non-negated profiles, +are specified for a single document, at least one non-negated profile must match, +and no negated profiles may match., +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +import org.springframework.util.StringUtils;, + * document may define a "spring.profiles" element as a comma-separated list of Spring, + * profile names, optionally negated using the {@code !} character. If both negated and, + * non-negated profiles are specified for a single document, at least one non-negated, + * profile must match and no negated profiles may match., + * @author Matt Benson, +	private static final String SPRING_PROFILES = "spring.profiles";, +		ArrayDocumentMatcher next = new ArrayDocumentMatcher(SPRING_PROFILES, profiles);, +, +		if (properties.containsKey(SPRING_PROFILES)) {, +			properties = new Properties(properties);, +, +			Map<Boolean, String> sortedProfiles = sortProfiles(, +					properties.getProperty(SPRING_PROFILES));, +, +			// handle negated profiles:]