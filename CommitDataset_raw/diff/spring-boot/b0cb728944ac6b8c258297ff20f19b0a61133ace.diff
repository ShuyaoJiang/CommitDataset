[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.util;, +, +import java.util.Collection;, +import java.util.Optional;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.function.Predicate;, +import java.util.function.Supplier;, +import java.util.stream.Stream;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Utility that can be used to invoke lambdas in a safe way. Primarily designed to help, + * support generically typed callbacks where {@link ClassCastException class cast, + * exceptions} need to be dealt with due to class erasure., + *, + * @author Phillip Webb, + * @since 2.0.0, + */, +public final class LambdaSafe {, +, +	private LambdaSafe() {, +	}, +, +	/**, +	 * Start a call to a single callback instance, dealing with common generic type, +	 * concerns and exceptions., +	 * @param callbackType the callback type (a {@link FunctionalInterface functional, +	 * interface}), +	 * @param callbackInstance the callback instance (may be a lambda), +	 * @param argument the primary argument passed to the callback, +	 * @param additionalArguments any additional argument passed to the callback, +	 * @param <C> the callback type, +	 * @param <A> the primary argument type, +	 * @return a {@link Callback} instance that can be invoked., +	 */, +	public static <C, A> Callback<C, A> callback(Class<C> callbackType,, +			C callbackInstance, A argument, Object... additionalArguments) {, +		Assert.notNull(callbackType, "CallbackType must not be null");, +		Assert.notNull(callbackInstance, "CallbackInstance must not be null");, +		return new Callback<>(callbackType, callbackInstance, argument,, +				additionalArguments);, +	}, +, +	/**, +	 * Start a call to a single callback instance, dealing with common generic type, +	 * concerns and exceptions., +	 * @param callbackType the callback type (a {@link FunctionalInterface functional, +	 * interface}), +	 * @param callbackInstances the callback instances (elements may be lambdas), +	 * @param argument the primary argument passed to the callbacks, +	 * @param additionalArguments any additional argument passed to the callbacks, +	 * @param <C> the callback type, +	 * @param <A> the primary argument type, +	 * @return a {@link Callbacks} instance that can be invoked., +	 */, +	public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,, +			Collection<? extends C> callbackInstances, A argument,, +			Object... additionalArguments) {, +		Assert.notNull(callbackType, "CallbackType must not be null");, +		Assert.notNull(callbackInstances, "CallbackInstances must not be null");, +		return new Callbacks<C, A>(callbackType, callbackInstances, argument,, +				additionalArguments);, +	}, +, +	/**, +	 * Abstract base class for lambda safe callbacks., +	 */, +	private static abstract class LambdaSafeCallback<C, A, SELF extends LambdaSafeCallback<C, A, SELF>> {, +, +		private final Class<C> callbackType;, +, +		private final A argument;, +, +		private final Object[] additionalArguments;, +, +		private Log logger;]