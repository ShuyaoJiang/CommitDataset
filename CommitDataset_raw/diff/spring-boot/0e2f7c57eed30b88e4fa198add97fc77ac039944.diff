[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/RedisReactiveHealthIndicator.java, +import org.springframework.data.redis.connection.ReactiveRedisConnection;, + * @author Mark Paluch, +		ReactiveRedisConnection connection = this.connectionFactory, +				.getReactiveConnection();, +		return connection.serverCommands().info(), +				.map(info -> builder.up(), +						.withDetail(RedisHealthIndicator.VERSION,, +								info.getProperty(RedisHealthIndicator.REDIS_VERSION)), +						.build()), +				.doFinally(signal -> connection.close());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/RedisReactiveHealthIndicator.java, +import org.springframework.data.redis.connection.ReactiveRedisConnection;, + * @author Mark Paluch, +		ReactiveRedisConnection connection = this.connectionFactory, +				.getReactiveConnection();, +		return connection.serverCommands().info(), +				.map(info -> builder.up(), +						.withDetail(RedisHealthIndicator.VERSION,, +								info.getProperty(RedisHealthIndicator.REDIS_VERSION)), +						.build()), +				.doFinally(signal -> connection.close());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisReactiveHealthIndicatorTests.java, +import static org.mockito.Mockito.verify;, + * @author Mark Paluch, +		ReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);, +		RedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);, +		verify(redisConnection).close();, +		ReactiveRedisConnection redisConnection = mock(ReactiveRedisConnection.class);, +		RedisReactiveHealthIndicator healthIndicator = createHealthIndicator(redisConnection, commands);, +		StepVerifier.create(health).consumeNextWith(h -> {, +			assertThat(h.getStatus()).isEqualTo(Status.DOWN);, +		}).verifyComplete();, +		verify(redisConnection).close();, +			ReactiveRedisConnection redisConnection, ReactiveServerCommands serverCommands) {, +]