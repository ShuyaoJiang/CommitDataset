[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +				"spring.data.neo4j.uri=file:relative/path/to/my.db");, +				"file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +				"spring.data.neo4j.uri=file:relative/path/to/my.db");, +				"file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory");, +		emptyDirectory.mkdirs();, +		this.contextRunner, +				.withPropertyValues("spring.freemarker.templateLoaderPath:", +						+ "classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +				+ "classpath:/does-not-exist/,classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +				"spring.data.neo4j.uri=file:relative/path/to/my.db");, +				"file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory");, +		emptyDirectory.mkdirs();, +		this.contextRunner, +				.withPropertyValues("spring.freemarker.templateLoaderPath:", +						+ "classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +				+ "classpath:/does-not-exist/,classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +				"spring.data.neo4j.uri=file:relative/path/to/my.db");, +				"file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory");, +		emptyDirectory.mkdirs();, +		this.contextRunner, +				.withPropertyValues("spring.freemarker.templateLoaderPath:", +						+ "classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +				+ "classpath:/does-not-exist/,classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +			this.pool.setUrl("jdbc:hsqldb:mem:overridedb");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +				"spring.data.neo4j.uri=file:relative/path/to/my.db");, +				"file:relative/path/to/my.db");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());, +, +		File emptyDirectory = new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory");, +		emptyDirectory.mkdirs();, +		this.contextRunner, +				.withPropertyValues("spring.freemarker.templateLoaderPath:", +						+ "classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +		new File(this.buildOutput.getTestResourcesLocation(),, +				"empty-templates/empty-directory").mkdirs();, +				+ "classpath:/does-not-exist/,classpath:/empty-templates/empty-directory/"), +				.run((context) -> assertThat(this.output.toString()), +						.doesNotContain("Cannot find template location"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfigurationTests.java, +import org.springframework.boot.testsupport.BuildOutput;, +	private final BuildOutput buildOutput = new BuildOutput(getClass());]