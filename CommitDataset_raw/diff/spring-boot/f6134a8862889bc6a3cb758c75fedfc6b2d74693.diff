[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootSecurity.java, + * Provides request matchers that can be used to configure security for static resources, + * and the error controller path in a custom {@link WebSecurityConfigurerAdapter}., + * @since 2.0.0, +	SpringBootSecurity(EndpointPathResolver endpointPathResolver,, +			ErrorController errorController) {, +			return new AntPathRequestMatcher(this.endpointPathResolver.resolvePath(, +					ALL_ENDPOINTS), null);, +			throw new IllegalArgumentException(, +					"Only classes annotated with @Endpoint are supported.");, +			throw new IllegalStateException(, +					"Path for error controller could not be determined.");, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootSecurity.java, + * Provides request matchers that can be used to configure security for static resources, + * and the error controller path in a custom {@link WebSecurityConfigurerAdapter}., + * @since 2.0.0, +	SpringBootSecurity(EndpointPathResolver endpointPathResolver,, +			ErrorController errorController) {, +			return new AntPathRequestMatcher(this.endpointPathResolver.resolvePath(, +					ALL_ENDPOINTS), null);, +			throw new IllegalArgumentException(, +					"Only classes annotated with @Endpoint are supported.");, +			throw new IllegalStateException(, +					"Path for error controller could not be determined.");, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, + * If the user specifies their own {@link WebSecurityConfigurerAdapter}, this will, + * back-off completely and the users should specify all the bits that they want to, + * configure as part of the custom security configuration., + * @since 2.0.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootSecurity.java, + * Provides request matchers that can be used to configure security for static resources, + * and the error controller path in a custom {@link WebSecurityConfigurerAdapter}., + * @since 2.0.0, +	SpringBootSecurity(EndpointPathResolver endpointPathResolver,, +			ErrorController errorController) {, +			return new AntPathRequestMatcher(this.endpointPathResolver.resolvePath(, +					ALL_ENDPOINTS), null);, +			throw new IllegalArgumentException(, +					"Only classes annotated with @Endpoint are supported.");, +			throw new IllegalStateException(, +					"Path for error controller could not be determined.");, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, + * If the user specifies their own {@link WebSecurityConfigurerAdapter}, this will, + * back-off completely and the users should specify all the bits that they want to, + * configure as part of the custom security configuration., + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, + * If there is a bean of type WebSecurityConfigurerAdapter, this adds the, + * {@code @EnableWebSecurity} annotation if it is not already specified. This will make, + * sure that the annotation is present with default security auto-configuration and also, + * if the user adds custom security and forgets to add the annotation., + * @since 2.0.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ManagementEndpointPathResolver.java, + * @since 2.0.0, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +@Import({ SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,, +		AuthenticationManagerConfiguration.class, SecurityDataConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootSecurity.java, + * Provides request matchers that can be used to configure security for static resources, + * and the error controller path in a custom {@link WebSecurityConfigurerAdapter}., + * @since 2.0.0, +	SpringBootSecurity(EndpointPathResolver endpointPathResolver,, +			ErrorController errorController) {, +			return new AntPathRequestMatcher(this.endpointPathResolver.resolvePath(, +					ALL_ENDPOINTS), null);]