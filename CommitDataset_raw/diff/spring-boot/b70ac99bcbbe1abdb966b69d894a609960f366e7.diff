[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +				if (ssl.getKeyStoreType() != null) {, +					factory.setKeyStoreType(ssl.getKeyStoreType());, +				}, +				if (ssl.getTrustStoreType() != null) {, +					factory.setTrustStoreType(ssl.getTrustStoreType());, +				}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +				if (ssl.getKeyStoreType() != null) {, +					factory.setKeyStoreType(ssl.getKeyStoreType());, +				}, +				if (ssl.getTrustStoreType() != null) {, +					factory.setTrustStoreType(ssl.getTrustStoreType());, +				}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		 * Set the key store type (jks, pkcs12, etc)., +		 */, +		private String keyStoreType;, +, +		/**, +		 * Set the trust store type (jks, pkcs12, etc)., +		 */, +		private String trustStoreType;, +, +		/**, +		public String getKeyStoreType() {, +			return this.keyStoreType;, +		}, +, +		public void setKeyStoreType(String keyStoreType) {, +			this.keyStoreType = keyStoreType;, +		}, +, +		public String getTrustStoreType() {, +			return this.trustStoreType;, +		}, +, +		public void setTrustStoreType(String trustStoreType) {, +			this.trustStoreType = trustStoreType;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +				if (ssl.getKeyStoreType() != null) {, +					factory.setKeyStoreType(ssl.getKeyStoreType());, +				}, +				if (ssl.getTrustStoreType() != null) {, +					factory.setTrustStoreType(ssl.getTrustStoreType());, +				}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		 * Set the key store type (jks, pkcs12, etc)., +		 */, +		private String keyStoreType;, +, +		/**, +		 * Set the trust store type (jks, pkcs12, etc)., +		 */, +		private String trustStoreType;, +, +		/**, +		public String getKeyStoreType() {, +			return this.keyStoreType;, +		}, +, +		public void setKeyStoreType(String keyStoreType) {, +			this.keyStoreType = keyStoreType;, +		}, +, +		public String getTrustStoreType() {, +			return this.trustStoreType;, +		}, +, +		public void setTrustStoreType(String trustStoreType) {, +			this.trustStoreType = trustStoreType;, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import java.security.NoSuchAlgorithmException;, +, +	public void enableSslWithNonexistingKeystoreShouldFail() {, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +						"spring.rabbitmq.ssl.keyStorePassword=secret"), +				.run(context -> {, +					assertThat(context).hasFailed();, +					assertThat(context).getFailure().hasMessageContaining("foo");, +					assertThat(context).getFailure().hasMessageContaining("does not exist");, +				});, +	}, +, +	@Test, +	// Make sure that we at least attempt to load the store, +	public void enableSslWithNonexistingTruststoreShouldFail() {, +		this.contextRunner, +				.withUserConfiguration(TestConfiguration.class), +				.withPropertyValues(, +						"spring.rabbitmq.ssl.enabled:true",, +					assertThat(context).getFailure().hasMessageContaining("bar");, +					assertThat(context).getFailure().hasMessageContaining("does not exist");, +	@Test, +	public void enableSslWithInvalidKeystoreTypeShouldFail() throws Exception {]