[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +		this.mapper = mapper;, +			return new DelegatingPropertyMapper(SystemEnvironmentPropertyMapper.INSTANCE,, +					DefaultPropertyMapper.INSTANCE);, +		return new DelegatingPropertyMapper(DefaultPropertyMapper.INSTANCE);, +	 * {@link PropertyMapper} that delegates to other {@link PropertyMapper}s., +	 * It also swallows exceptions when the mapping fails., +	private static class DelegatingPropertyMapper implements PropertyMapper {, +		private final PropertyMapper[] mappers;, +		DelegatingPropertyMapper(PropertyMapper... mappers) {, +			this.mappers = mappers;, +			List<PropertyMapping> mappings = new ArrayList<>();, +			for (PropertyMapper mapper : this.mappers) {, +					mappings.addAll(Arrays.asList(mapper.map(configurationPropertyName)));, +, +			return mappings.toArray(new PropertyMapping[] {});, +		}, +			List<PropertyMapping> mappings = new ArrayList<>();, +			for (PropertyMapper mapper : this.mappers) {, +					mappings.addAll(Arrays.asList(mapper.map(propertySourceName)));, +, +			return mappings.toArray(new PropertyMapping[] {});, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +		this.mapper = mapper;, +			return new DelegatingPropertyMapper(SystemEnvironmentPropertyMapper.INSTANCE,, +					DefaultPropertyMapper.INSTANCE);, +		return new DelegatingPropertyMapper(DefaultPropertyMapper.INSTANCE);, +	 * {@link PropertyMapper} that delegates to other {@link PropertyMapper}s., +	 * It also swallows exceptions when the mapping fails., +	private static class DelegatingPropertyMapper implements PropertyMapper {, +		private final PropertyMapper[] mappers;, +		DelegatingPropertyMapper(PropertyMapper... mappers) {, +			this.mappers = mappers;, +			List<PropertyMapping> mappings = new ArrayList<>();, +			for (PropertyMapper mapper : this.mappers) {, +					mappings.addAll(Arrays.asList(mapper.map(configurationPropertyName)));, +, +			return mappings.toArray(new PropertyMapping[] {});, +		}, +			List<PropertyMapping> mappings = new ArrayList<>();, +			for (PropertyMapper mapper : this.mappers) {, +					mappings.addAll(Arrays.asList(mapper.map(propertySourceName)));, +, +			return mappings.toArray(new PropertyMapping[] {});, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesTests.java, +	public void loadWhenDotsInSystemEnvironmentPropertiesShouldBind() {, +		this.context.getEnvironment().getPropertySources(), +				.addLast(new SystemEnvironmentPropertySource(, +						StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +						Collections.singletonMap("com.example.bar", "baz")));, +		load(SimplePrefixedProperties.class);, +		SimplePrefixedProperties bean = this.context, +				.getBean(SimplePrefixedProperties.class);, +		assertThat(bean.getBar()).isEqualTo("baz");, +	}, +, +	@Test]