[+++ b/spring-boot-docs/src/main/asciidoc/deployment.adoc, +You can then run your application by typing `./my-application.jar` (where, +`my-application` is the name of your artifact)., +, +If you've configured Spring Boot's Maven or Gradle plugin to generate a, +<<deployment-install,fully executable jar>>, and you're not using a custom, +`embeddedLaunchScript`, then your application can be used as an `init.d` service. Simply, +symlink the jar to `init.d` to support the standard `start`, `stop`, `restart` and, +`status` commands., +, +The script supports the following features:, +Once installed, you can start and stop the service in the usual way. For example:, +, +[indent=0,subs="verbatim,quotes,attributes"], +----, +	$ /etc/init.d/myapp start, +----, +, +TIP: If you're application fails to start, check the log file written to, +`/var/log/<appname>.log` for errors., +, +You can also flag the application to start automatically using your standard operating, +system tools. For example, if you use Debian:, +, +, +The default embedded startup script written by the Maven or Gradle plugin can be, +customized in a number of ways. For most people, using the default script along with, +a few customizations is usually enough. If you find you can't customize something that, +you need to, you can always use the `embeddedLaunchScript` option to write your own, +file entirely., +, +, +, +[[deployment-script-customization-when-it-written]], +===== Customizing script when it's written, +It often makes sense to customize elements of the start script as it's written into the, +jar file. For example, init.d scripts can provide a "`description`" and, since you know, +this up front (and it won't change), you may as well provide it when the jar is generated., +, +To customize written elements, use the `embeddedLaunchScriptProperties` option of the, +Spring Boot Maven or Gradle plugins., +, +The following property substitutions are supported with the default script:, +, +[cols="1,6"], +|===, +|Name |Description, +, +|`mode`, +|The script mode. Defaults to `auto`., +, +|`initInfoProvides`, +|The `Provides` section of "`INIT INFO`". Defaults to `spring-boot-application` for Gradle, + and to `${project.artifactId}` for Maven., +, +|`initInfoShortDescription`, +|The `Short-Description` section of "`INIT INFO`". Defaults to `Spring Boot Application`, +for Gradle and to `${project.name}` for Maven., +, +|`initInfoDescription`, +|The `Description` section of "`INIT INFO`". Defaults to `Spring Boot Application` for, + Gradle and to `${project.description}` (falling back to `${project.name}`) for Maven., +, +|`initInfoChkconfig`, +|The `chkconfig` section of "`INIT INFO`". Defaults to `2345 99 01`., +, +|`logFolder`, +|The default value for `LOG_FOLDER`. Only valid for an `init.d` service., +, +|`pidFolder`, +|The default value for `PID_FOLDER`. Only valid for an `init.d` service., +, +|`useStartStopDaemon`, +|If the `start-stop-daemon` command, when it's available, should be used to control the, + process. Defaults to `true`., +|===, +, +, +[[deployment-script-customization-when-it-runs]], +[[deployment-script-customization-conf-file]], +===== Customizing script when it runs, +For items of the script that need to be customized _after_ the jar has been written you, +can use environment variables or a, +<<deployment-script-customization-conf-file, config file>>., +, +The following environment properties are supported with the default script:, +a `.conf` file. The file is expected next to the jar file and have the same name but, +suffixed with `.conf` rather than `.jar`. For example, a jar named `/var/myapp/myapp.jar`, +will use the configuration file named `/var/myapp/myapp.conf`., +.myapp.conf, +TIP: You can use a `CONF_FOLDER` environment variable to customize the location of the, +config file if you don't like it living next to the jar.]