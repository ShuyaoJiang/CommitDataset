[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/RequestPredicateFactory.java, +		String path = getPath(rootPath, method);, +	private String getPath(String rootPath, Method method) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/RequestPredicateFactory.java, +		String path = getPath(rootPath, method);, +	private String getPath(String rootPath, Method method) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics.java, + * Copyright 2012-2018 the original author or authors., +		this.metadataProvider = new CachingDataSourcePoolMetadataProvider(, +		CachingDataSourcePoolMetadataProvider(, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/RequestPredicateFactory.java, +		String path = getPath(rootPath, method);, +	private String getPath(String rootPath, Method method) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics.java, + * Copyright 2012-2018 the original author or authors., +		this.metadataProvider = new CachingDataSourcePoolMetadataProvider(, +		CachingDataSourcePoolMetadataProvider(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +							beanDefinition);, +			BeanDefinition definition) {, +			return doGetFactoryBeanGeneric(beanFactory, definition);, +			BeanDefinition definition), +			return getConfigurationClassFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws Exception {, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/RequestPredicateFactory.java, +		String path = getPath(rootPath, method);, +	private String getPath(String rootPath, Method method) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics.java, + * Copyright 2012-2018 the original author or authors., +		this.metadataProvider = new CachingDataSourcePoolMetadataProvider(, +		CachingDataSourcePoolMetadataProvider(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +							beanDefinition);, +			BeanDefinition definition) {, +			return doGetFactoryBeanGeneric(beanFactory, definition);, +			BeanDefinition definition), +			return getConfigurationClassFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws Exception {, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, + * Copyright 2012-2018 the original author or authors., +		StoreType required = SessionStoreMappings.getType(this.webApplicationType,, +				((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java, +			DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescriptionProvider() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/annotation/RequestPredicateFactory.java, +		String path = getPath(rootPath, method);, +	private String getPath(String rootPath, Method method) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jdbc/DataSourcePoolMetrics.java, + * Copyright 2012-2018 the original author or authors., +		this.metadataProvider = new CachingDataSourcePoolMetadataProvider(, +		CachingDataSourcePoolMetadataProvider(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +							beanDefinition);, +			BeanDefinition definition) {, +			return doGetFactoryBeanGeneric(beanFactory, definition);, +			BeanDefinition definition), +			return getConfigurationClassFactoryBeanGeneric(beanFactory, definition);, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws Exception {, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition), +					throws ClassNotFoundException, LinkageError {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/AbstractSessionCondition.java, + * Copyright 2012-2018 the original author or authors., +		StoreType required = SessionStoreMappings.getType(this.webApplicationType,, +				((AnnotationMetadata) metadata).getClassName());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +		protected final String[] selectImports(WebApplicationType webApplicationType) {, +			return super.selectImports(WebApplicationType.REACTIVE);, +			return super.selectImports(WebApplicationType.SERVLET);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/CloudFoundryAuthorizationException.java]