[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;, +	private static final ConfigurableListableBeanFactory BeanDefinitionRegistry = null;, +, +		AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();, +		registerEmbeddedServletContainerFactory(childContext);, +	private void registerEmbeddedServletContainerFactory(, +			AnnotationConfigEmbeddedWebApplicationContext childContext) {, +		try {, +			EmbeddedServletContainerFactory servletContainerFactory = this.applicationContext, +					.getBean(EmbeddedServletContainerFactory.class);, +			ConfigurableListableBeanFactory beanFactory = childContext.getBeanFactory();, +			if (beanFactory instanceof BeanDefinitionRegistry) {, +				BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;, +				registry.registerBeanDefinition("embeddedServletContainerFactory",, +						new RootBeanDefinition(servletContainerFactory.getClass()));, +			}, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignore and assume auto-configuration, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;, +	private static final ConfigurableListableBeanFactory BeanDefinitionRegistry = null;, +, +		AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();, +		registerEmbeddedServletContainerFactory(childContext);, +	private void registerEmbeddedServletContainerFactory(, +			AnnotationConfigEmbeddedWebApplicationContext childContext) {, +		try {, +			EmbeddedServletContainerFactory servletContainerFactory = this.applicationContext, +					.getBean(EmbeddedServletContainerFactory.class);, +			ConfigurableListableBeanFactory beanFactory = childContext.getBeanFactory();, +			if (beanFactory instanceof BeanDefinitionRegistry) {, +				BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;, +				registry.registerBeanDefinition("embeddedServletContainerFactory",, +						new RootBeanDefinition(servletContainerFactory.getClass()));, +			}, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignore and assume auto-configuration, +		}, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;, +import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;, +import static org.hamcrest.Matchers.sameInstance;, +	public void onDifferentPortWithSpecificContainer() throws Exception {, +		this.applicationContext.register(SpecificContainerConfig.class, RootConfig.class,, +				DifferentPortConfig.class, EndpointConfig.class, BaseConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);, +		this.applicationContext.refresh();, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		assertContent("/error", ports.get().management, startsWith("{"));, +		ApplicationContext managementContext = this.applicationContext, +				.getBean(ManagementContextResolver.class).getApplicationContext();, +		List<?> interceptors = (List<?>) ReflectionTestUtils.getField(, +				managementContext.getBean(EndpointHandlerMapping.class), "interceptors");, +		assertEquals(1, interceptors.size());, +		EmbeddedServletContainerFactory parentContainerFactory = this.applicationContext, +				.getBean(EmbeddedServletContainerFactory.class);, +		EmbeddedServletContainerFactory managementContainerFactory = managementContext, +				.getBean(EmbeddedServletContainerFactory.class);, +		assertThat(parentContainerFactory,, +				instanceOf(SpecificEmbeddedServletContainerFactory.class));, +		assertThat(managementContainerFactory,, +				instanceOf(SpecificEmbeddedServletContainerFactory.class));, +		assertThat(managementContainerFactory, not(sameInstance(parentContainerFactory)));, +		this.applicationContext.close();, +		assertAllClosed();, +	}, +, +	@Test, +	public static class SpecificContainerConfig {, +, +		@Bean, +		public SpecificEmbeddedServletContainerFactory embeddedServletContainerFactory() {, +			return new SpecificEmbeddedServletContainerFactory();, +		}, +, +	}, +, +	@Configuration, +, +, +	private static class SpecificEmbeddedServletContainerFactory, +			extends TomcatEmbeddedServletContainerFactory {, +]