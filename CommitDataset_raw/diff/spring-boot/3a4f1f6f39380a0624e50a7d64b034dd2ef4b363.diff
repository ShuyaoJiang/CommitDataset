[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import java.util.Arrays;, +import java.util.EnumSet;, +, +import javax.servlet.DispatcherType;, +import org.glassfish.jersey.CommonProperties;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.context.embedded.FilterRegistrationBean;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(JerseyProperties.class), +	private JerseyProperties jersey;, +	, +	@Autowired, +	public FilterRegistrationBean requestContextFilter() {, +		FilterRegistrationBean registration = new FilterRegistrationBean();, +		registration.setFilter(new RequestContextFilter());, +		registration.setOrder(jersey.getFilter().getOrder()-1);, +		registration.setName("requestContextFilter");, +		return registration;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(name = "jerseyFilterRegistration"), +	@ConditionalOnExpression("'${spring.jersey.type:servlet}' == 'filter'"), +	public FilterRegistrationBean jerseyFilterRegistration() {, +		Class<? extends ResourceConfig> configType = this.config.getClass();, +		FilterRegistrationBean registration = new FilterRegistrationBean();, +		registration.setFilter(new ServletContainer());, +		registration.setUrlPatterns(Arrays.asList(this.path));, +		registration.setOrder(jersey.getFilter().getOrder());, +		registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,, +				configType.getName());, +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");, +		registration.setName("jerseyFilter");, +        registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));, +		return registration;, +	@ConditionalOnExpression("'${spring.jersey.type:servlet}' == 'servlet'"), +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import java.util.Arrays;, +import java.util.EnumSet;, +, +import javax.servlet.DispatcherType;, +import org.glassfish.jersey.CommonProperties;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.boot.context.embedded.FilterRegistrationBean;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(JerseyProperties.class), +	private JerseyProperties jersey;, +	, +	@Autowired, +	public FilterRegistrationBean requestContextFilter() {, +		FilterRegistrationBean registration = new FilterRegistrationBean();, +		registration.setFilter(new RequestContextFilter());, +		registration.setOrder(jersey.getFilter().getOrder()-1);, +		registration.setName("requestContextFilter");, +		return registration;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean(name = "jerseyFilterRegistration"), +	@ConditionalOnExpression("'${spring.jersey.type:servlet}' == 'filter'"), +	public FilterRegistrationBean jerseyFilterRegistration() {, +		Class<? extends ResourceConfig> configType = this.config.getClass();, +		FilterRegistrationBean registration = new FilterRegistrationBean();, +		registration.setFilter(new ServletContainer());, +		registration.setUrlPatterns(Arrays.asList(this.path));, +		registration.setOrder(jersey.getFilter().getOrder());, +		registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,, +				configType.getName());, +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");, +		registration.setName("jerseyFilter");, +        registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));, +		return registration;, +	@ConditionalOnExpression("'${spring.jersey.type:servlet}' == 'servlet'"), +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,  "true");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java, +/*, + * Copyright 2013-2104 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.autoconfigure.jersey;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +, +/**, + * @author Dave Syer, + *, + */]