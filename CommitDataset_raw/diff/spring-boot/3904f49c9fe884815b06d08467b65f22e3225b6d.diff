[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		factory.setSession(this.serverProperties.getServlet().getSession());, +			TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +					tomcatFactory);, +			TomcatServletCustomizer.customizeTomcat(this.serverProperties,, +					this.environment, tomcatFactory);, +		factory.setInitParameters(, +				this.serverProperties.getServlet().getContextParameters());, +				ConfigurableTomcatWebServerFactory factory,, +				boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		factory.setSession(this.serverProperties.getServlet().getSession());, +			TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +					tomcatFactory);, +			TomcatServletCustomizer.customizeTomcat(this.serverProperties,, +					this.environment, tomcatFactory);, +		factory.setInitParameters(, +				this.serverProperties.getServlet().getContextParameters());, +				ConfigurableTomcatWebServerFactory factory,, +				boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.session.web.http.CookieHttpSessionIdResolver;, +import org.springframework.session.web.http.DefaultCookieSerializer;, +	@Test, +	public void sessionCookieConfigurationIsPickedUp() {, +		new WebApplicationContextRunner(, +				AnnotationConfigServletWebServerApplicationContext::new), +						.withConfiguration(AutoConfigurations, +								.of(ServletWebServerFactoryAutoConfiguration.class)), +						.withUserConfiguration(SessionRepositoryConfiguration.class), +						.withPropertyValues("server.port=0",, +								"server.servlet.session.cookie.name=testname"), +						.run((context) -> {, +							SessionRepositoryFilter<?> filter = context, +									.getBean(SessionRepositoryFilter.class);, +							CookieHttpSessionIdResolver sessionIdResolver = (CookieHttpSessionIdResolver) ReflectionTestUtils, +									.getField(filter, "httpSessionIdResolver");, +							DefaultCookieSerializer cookieSerializer = (DefaultCookieSerializer) ReflectionTestUtils, +									.getField(sessionIdResolver, "cookieSerializer");, +							String cookieName = (String) ReflectionTestUtils, +									.getField(cookieSerializer, "cookieName");, +							assertThat(cookieName).isEqualTo("testname");, +						});, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.web.servlet.server.Session;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		factory.setSession(this.serverProperties.getServlet().getSession());, +			TomcatCustomizer.customizeTomcat(this.serverProperties, this.environment,, +					tomcatFactory);, +			TomcatServletCustomizer.customizeTomcat(this.serverProperties,, +					this.environment, tomcatFactory);, +		factory.setInitParameters(, +				this.serverProperties.getServlet().getContextParameters());, +				ConfigurableTomcatWebServerFactory factory,, +				boolean useRelativeRedirects) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.session.web.http.CookieHttpSessionIdResolver;, +import org.springframework.session.web.http.DefaultCookieSerializer;, +	@Test, +	public void sessionCookieConfigurationIsPickedUp() {, +		new WebApplicationContextRunner(, +				AnnotationConfigServletWebServerApplicationContext::new), +						.withConfiguration(AutoConfigurations, +								.of(ServletWebServerFactoryAutoConfiguration.class)), +						.withUserConfiguration(SessionRepositoryConfiguration.class), +						.withPropertyValues("server.port=0",, +								"server.servlet.session.cookie.name=testname"), +						.run((context) -> {, +							SessionRepositoryFilter<?> filter = context, +									.getBean(SessionRepositoryFilter.class);, +							CookieHttpSessionIdResolver sessionIdResolver = (CookieHttpSessionIdResolver) ReflectionTestUtils]