[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import org.springframework.boot.context.properties.bind.Binder;, +		String name = "spring.autoconfigure.exclude";, +			Binder binder = Binder.get(getEnvironment());, +			return binder.bind(name, String[].class).map(Arrays::asList), +					.orElse(Collections.emptyList());, +		String[] excludes = getEnvironment().getProperty(name, String[].class);, +		return (excludes == null ? Collections.emptyList() : Arrays.asList(excludes));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import org.springframework.boot.context.properties.bind.Binder;, +		String name = "spring.autoconfigure.exclude";, +			Binder binder = Binder.get(getEnvironment());, +			return binder.bind(name, String[].class).map(Arrays::asList), +					.orElse(Collections.emptyList());, +		String[] excludes = getEnvironment().getProperty(name, String[].class);, +		return (excludes == null ? Collections.emptyList() : Arrays.asList(excludes));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +import org.springframework.boot.context.properties.bind.BindException;, +import org.springframework.boot.context.properties.bind.BindResult;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.core.env.Environment;, + * @author Madhura Bhave, +		Environment environment = context.getEnvironment();, +		try {, +			BindResult<CacheType> specified = Binder.get(environment), +					.bind("spring.cache.type", CacheType.class);, +			if (!specified.isBound()) {, +			CacheType required = CacheConfigurations, +			if (specified.get() == required) {, +				return ConditionOutcome, +						.match(message.because(specified.get() + " cache type"));, +		}, +		catch (BindException ex) {, +		}, +		return ConditionOutcome.noMatch(message.because("unknown cache type"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import org.springframework.boot.context.properties.bind.Binder;, +		String name = "spring.autoconfigure.exclude";, +			Binder binder = Binder.get(getEnvironment());, +			return binder.bind(name, String[].class).map(Arrays::asList), +					.orElse(Collections.emptyList());, +		String[] excludes = getEnvironment().getProperty(name, String[].class);, +		return (excludes == null ? Collections.emptyList() : Arrays.asList(excludes));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +import org.springframework.boot.context.properties.bind.BindException;, +import org.springframework.boot.context.properties.bind.BindResult;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.core.env.Environment;, + * @author Madhura Bhave, +		Environment environment = context.getEnvironment();, +		try {, +			BindResult<CacheType> specified = Binder.get(environment), +					.bind("spring.cache.type", CacheType.class);, +			if (!specified.isBound()) {, +			CacheType required = CacheConfigurations, +			if (specified.get() == required) {, +				return ConditionOutcome, +						.match(message.because(specified.get() + " cache type"));, +		}, +		catch (BindException ex) {, +		}, +		return ConditionOutcome.noMatch(message.because("unknown cache type"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +			super("EhCache", "spring.cache.ehcache.config", "classpath:/ehcache.xml");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import org.springframework.boot.context.properties.bind.Binder;, +		String name = "spring.autoconfigure.exclude";, +			Binder binder = Binder.get(getEnvironment());, +			return binder.bind(name, String[].class).map(Arrays::asList), +					.orElse(Collections.emptyList());, +		String[] excludes = getEnvironment().getProperty(name, String[].class);, +		return (excludes == null ? Collections.emptyList() : Arrays.asList(excludes));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +import org.springframework.boot.context.properties.bind.BindException;, +import org.springframework.boot.context.properties.bind.BindResult;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.core.env.Environment;, + * @author Madhura Bhave, +		Environment environment = context.getEnvironment();, +		try {, +			BindResult<CacheType> specified = Binder.get(environment), +					.bind("spring.cache.type", CacheType.class);, +			if (!specified.isBound()) {, +			CacheType required = CacheConfigurations, +			if (specified.get() == required) {, +				return ConditionOutcome, +						.match(message.because(specified.get() + " cache type"));, +		}, +		catch (BindException ex) {, +		}, +		return ConditionOutcome.noMatch(message.because("unknown cache type"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java, + * Copyright 2012-2017 the original author or authors., + * @author Madhura Bhave, +			super("EhCache", "spring.cache.ehcache.config", "classpath:/ehcache.xml");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java, + * @author Madhura Bhave, +			String providerProperty = "spring.cache.jcache.provider";]