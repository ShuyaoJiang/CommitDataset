[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.jpa.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.jpa.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.mongo.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.jpa.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.mongo.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.solr.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.jpa.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.mongo.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.solr.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jpa/city/CityRepository.java, +import org.springframework.data.jpa.repository.JpaRepository;, +public interface CityRepository extends JpaRepository<City, Long> {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnExpression("${spring.data.elasticsearch.repositories.enabled:true}"), +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.jpa.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.mongo.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport;, +@ConditionalOnMissingBean(RepositoryFactoryBeanSupport.class), +@ConditionalOnExpression("${spring.data.solr.repositories.enabled:true}"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/jpa/city/CityRepository.java, +import org.springframework.data.jpa.repository.JpaRepository;, +public interface CityRepository extends JpaRepository<City, Long> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MixedMongoRepositoriesAutoConfigurationTests.java, +import java.util.ArrayList;, +import java.util.List;, +]