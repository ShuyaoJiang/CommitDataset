[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +			DataSourceConfiguration.Dbcp.class, DataSourceConfiguration.Dbcp2.class,, +			DataSourceConfiguration.Generic.class}), +	 * {@link AnyNestedCondition} that checks that either {@code spring.datasource.type}, +	 * is set or {@link PooledDataSourceAvailableCondition} applies., +	 */, +	static class PooledDataSourceCondition extends AnyNestedCondition {, +, +		PooledDataSourceCondition() {, +			super(ConfigurationPhase.PARSE_CONFIGURATION);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.datasource", name = "type"), +		static class ExplicitType { }, +, +		@Conditional(PooledDataSourceAvailableCondition.class), +		static class PooledDataSourceAvailable { }, +, +	}, +, +	/**, +	static class PooledDataSourceAvailableCondition extends SpringBootCondition {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +			DataSourceConfiguration.Dbcp.class, DataSourceConfiguration.Dbcp2.class,, +			DataSourceConfiguration.Generic.class}), +	 * {@link AnyNestedCondition} that checks that either {@code spring.datasource.type}, +	 * is set or {@link PooledDataSourceAvailableCondition} applies., +	 */, +	static class PooledDataSourceCondition extends AnyNestedCondition {, +, +		PooledDataSourceCondition() {, +			super(ConfigurationPhase.PARSE_CONFIGURATION);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.datasource", name = "type"), +		static class ExplicitType { }, +, +		@Conditional(PooledDataSourceAvailableCondition.class), +		static class PooledDataSourceAvailable { }, +, +	}, +, +	/**, +	static class PooledDataSourceAvailableCondition extends SpringBootCondition {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +		return (T) properties.initializeDataSourceBuilder().type(type).build();, +	@ConditionalOnMissingBean(DataSource.class), +	@ConditionalOnProperty(name = "spring.datasource.type"), +	static class Generic {, +, +		@Bean, +		public DataSource dataSource(, +				DataSourceProperties properties) {, +			return properties.initializeDataSourceBuilder().build();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +			DataSourceConfiguration.Dbcp.class, DataSourceConfiguration.Dbcp2.class,, +			DataSourceConfiguration.Generic.class}), +	 * {@link AnyNestedCondition} that checks that either {@code spring.datasource.type}, +	 * is set or {@link PooledDataSourceAvailableCondition} applies., +	 */, +	static class PooledDataSourceCondition extends AnyNestedCondition {, +, +		PooledDataSourceCondition() {, +			super(ConfigurationPhase.PARSE_CONFIGURATION);, +		}, +, +		@ConditionalOnProperty(prefix = "spring.datasource", name = "type"), +		static class ExplicitType { }, +, +		@Conditional(PooledDataSourceAvailableCondition.class), +		static class PooledDataSourceAvailable { }, +, +	}, +, +	/**, +	static class PooledDataSourceAvailableCondition extends SpringBootCondition {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +		return (T) properties.initializeDataSourceBuilder().type(type).build();, +	@ConditionalOnMissingBean(DataSource.class), +	@ConditionalOnProperty(name = "spring.datasource.type"), +	static class Generic {, +, +		@Bean, +		public DataSource dataSource(, +				DataSourceProperties properties) {, +			return properties.initializeDataSourceBuilder().build();, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +	/**, +	 * Initialize a {@link DataSourceBuilder} with the state of this instance.]