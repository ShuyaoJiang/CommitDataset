[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +import io.micrometer.core.instrument.composite.CompositeMeterRegistry;, +	public ListNamesResponse listNames() {, +		return new ListNamesResponse(recurseListNames(this.registry));, +	}, +, +	private Set<String> recurseListNames(MeterRegistry registry) {, +		Set<String> names = new HashSet<>();, +		if (registry instanceof CompositeMeterRegistry) {, +			for (MeterRegistry compositeMember : ((CompositeMeterRegistry) registry), +					.getRegistries()) {, +				names.addAll(recurseListNames(compositeMember));, +			}, +		}, +		else {, +			registry.getMeters().stream().map(this::getMeterIdName).forEach(names::add);, +		}, +		return names;, +	public MetricResponse metric(@Selector String requiredMetricName,, +		Collection<Meter> meters = recurseFindMeter(this.registry, requiredMetricName, tags);, +		return new MetricResponse(requiredMetricName,, +						.map((sample) -> new MetricResponse.Sample(sample.getKey(),, +						.collect(Collectors.toList()),, +						.map((tagValues) -> new MetricResponse.AvailableTag(, +								tagValues.getKey(), tagValues.getValue())), +	private Collection<Meter> recurseFindMeter(MeterRegistry registry, String name,, +			Iterable<Tag> tags) {, +		Collection<Meter> meters = new ArrayList<>();, +		if (registry instanceof CompositeMeterRegistry) {, +			for (MeterRegistry compositeMember : ((CompositeMeterRegistry) registry), +					.getRegistries()) {, +				meters.addAll(recurseFindMeter(compositeMember, name, tags));, +			}, +		}, +		else {, +			meters.addAll(registry.find(name).tags(tags).meters());, +		}, +		return meters;, +	}, +, +	 * Response payload for a metric name listing., +	static class ListNamesResponse {, +, +		private final Set<String> names;, +, +		ListNamesResponse(Set<String> names) {, +			this.names = names;, +		}, +, +		public Set<String> getNames() {, +			return this.names;, +		}, +	}, +, +	/**, +	 * Response payload for a metric name selector., +	 */, +	static class MetricResponse {, +		MetricResponse(String name, List<Sample> measurements,, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +import io.micrometer.core.instrument.composite.CompositeMeterRegistry;, +	public ListNamesResponse listNames() {, +		return new ListNamesResponse(recurseListNames(this.registry));, +	}, +, +	private Set<String> recurseListNames(MeterRegistry registry) {, +		Set<String> names = new HashSet<>();, +		if (registry instanceof CompositeMeterRegistry) {, +			for (MeterRegistry compositeMember : ((CompositeMeterRegistry) registry), +					.getRegistries()) {, +				names.addAll(recurseListNames(compositeMember));, +			}, +		}, +		else {, +			registry.getMeters().stream().map(this::getMeterIdName).forEach(names::add);, +		}, +		return names;, +	public MetricResponse metric(@Selector String requiredMetricName,, +		Collection<Meter> meters = recurseFindMeter(this.registry, requiredMetricName, tags);, +		return new MetricResponse(requiredMetricName,, +						.map((sample) -> new MetricResponse.Sample(sample.getKey(),, +						.collect(Collectors.toList()),, +						.map((tagValues) -> new MetricResponse.AvailableTag(, +								tagValues.getKey(), tagValues.getValue())), +	private Collection<Meter> recurseFindMeter(MeterRegistry registry, String name,, +			Iterable<Tag> tags) {, +		Collection<Meter> meters = new ArrayList<>();, +		if (registry instanceof CompositeMeterRegistry) {, +			for (MeterRegistry compositeMember : ((CompositeMeterRegistry) registry), +					.getRegistries()) {, +				meters.addAll(recurseFindMeter(compositeMember, name, tags));, +			}, +		}, +		else {]