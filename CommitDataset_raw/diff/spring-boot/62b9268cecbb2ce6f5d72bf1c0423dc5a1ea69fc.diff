[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.LinkedHashMap;, +import org.springframework.util.Assert;, +	private final JobLauncher jobLauncher;, +, +	private final JobExplorer jobExplorer;, +, +	private final JobRepository jobRepository;, +	 * @deprecated since 2.0.7 in favor of, +	 * {@link #JobLauncherCommandLineRunner(JobLauncher, JobExplorer, JobRepository)}. A, +	 * job repository is required to check if a job instance exists with the given, +	 * parameters when running a job (which is not possible with the job explorer)., +		this.jobRepository = null;, +		Assert.notNull(jobLauncher, "JobLauncher must not be null");, +		Assert.notNull(jobExplorer, "JobExplorer must not be null");, +		Assert.notNull(jobRepository, "JobRepository must not be null");, +	private void executeLocalJobs(JobParameters jobParameters), +			throws JobExecutionException {, +		for (Job job : this.jobs) {, +			if (StringUtils.hasText(this.jobNames)) {, +				String[] jobsToRun = this.jobNames.split(",");, +				if (!PatternMatchUtils.simpleMatch(jobsToRun, job.getName())) {, +					logger.debug("Skipped job: " + job.getName());, +					continue;, +				}, +			}, +			execute(job, jobParameters);, +		}, +	}, +, +		JobParameters parameters = getNextJobParameters(job, jobParameters);, +	private JobParameters getNextJobParameters(Job job, JobParameters jobParameters) {, +		if (this.jobRepository != null, +				&& this.jobRepository.isJobInstanceExists(job.getName(), jobParameters)) {, +			return getNextJobParametersForExisting(job, jobParameters);, +		if (job.getJobParametersIncrementer() == null) {, +			return jobParameters;, +		JobParameters nextParameters = new JobParametersBuilder(jobParameters,, +				this.jobExplorer).getNextJobParameters(job).toJobParameters();, +		return merge(nextParameters, jobParameters);, +	private JobParameters getNextJobParametersForExisting(Job job,, +			JobParameters jobParameters) {, +		JobExecution lastExecution = this.jobRepository.getLastJobExecution(job.getName(),, +				jobParameters);, +		if (isStoppedOrFailed(lastExecution) && job.isRestartable()) {, +			JobParameters previousIdentifyingParameters = getGetIdentifying(, +					lastExecution.getJobParameters());, +			return merge(previousIdentifyingParameters, jobParameters);, +		return jobParameters;, +		BatchStatus status = (execution != null) ? execution.getStatus() : null;, +	private JobParameters getGetIdentifying(JobParameters parameters) {, +		HashMap<String, JobParameter> nonIdentifying = new LinkedHashMap<>(, +				parameters.getParameters().size());, +		parameters.getParameters().forEach((key, value) -> {, +			if (value.isIdentifying()) {, +				nonIdentifying.put(key, value);, +			}, +		});, +		return new JobParameters(nonIdentifying);, +	}, +, +		Map<String, JobParameter> merged = new LinkedHashMap<>();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.LinkedHashMap;, +import org.springframework.util.Assert;, +	private final JobLauncher jobLauncher;, +, +	private final JobExplorer jobExplorer;, +, +	private final JobRepository jobRepository;, +	 * @deprecated since 2.0.7 in favor of, +	 * {@link #JobLauncherCommandLineRunner(JobLauncher, JobExplorer, JobRepository)}. A, +	 * job repository is required to check if a job instance exists with the given, +	 * parameters when running a job (which is not possible with the job explorer)., +		this.jobRepository = null;, +		Assert.notNull(jobLauncher, "JobLauncher must not be null");, +		Assert.notNull(jobExplorer, "JobExplorer must not be null");, +		Assert.notNull(jobRepository, "JobRepository must not be null");, +	private void executeLocalJobs(JobParameters jobParameters), +			throws JobExecutionException {, +		for (Job job : this.jobs) {, +			if (StringUtils.hasText(this.jobNames)) {, +				String[] jobsToRun = this.jobNames.split(",");, +				if (!PatternMatchUtils.simpleMatch(jobsToRun, job.getName())) {, +					logger.debug("Skipped job: " + job.getName());, +					continue;, +				}, +			}, +			execute(job, jobParameters);, +		}, +	}, +, +		JobParameters parameters = getNextJobParameters(job, jobParameters);, +	private JobParameters getNextJobParameters(Job job, JobParameters jobParameters) {, +		if (this.jobRepository != null, +				&& this.jobRepository.isJobInstanceExists(job.getName(), jobParameters)) {, +			return getNextJobParametersForExisting(job, jobParameters);, +		if (job.getJobParametersIncrementer() == null) {, +			return jobParameters;, +		JobParameters nextParameters = new JobParametersBuilder(jobParameters,]