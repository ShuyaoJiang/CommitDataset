[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/EntityManagerFactoryDependsOnPostProcessor.java, + * Copyright 2012-2015 the original author or authors., +	private final String[] dependsOn;, +	public EntityManagerFactoryDependsOnPostProcessor(String... dependsOn) {, +			String[] dependencies = definition.getDependsOn();, +			for (String bean : this.dependsOn) {, +				dependencies = StringUtils.addStringToArray(dependencies, bean);, +			}, +			definition.setDependsOn(dependencies);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/EntityManagerFactoryDependsOnPostProcessor.java, + * Copyright 2012-2015 the original author or authors., +	private final String[] dependsOn;, +	public EntityManagerFactoryDependsOnPostProcessor(String... dependsOn) {, +			String[] dependencies = definition.getDependsOn();, +			for (String bean : this.dependsOn) {, +				dependencies = StringUtils.addStringToArray(dependencies, bean);, +			}, +			definition.setDependsOn(dependencies);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.factory.InitializingBean;, +		@Bean, +		@ConditionalOnMissingBean, +		public FlywayMigrationStrategy flywayMigrationStrategy() {, +			return new FlywayMigrationStrategy();, +		}, +, +		@Bean, +		@Bean, +		public FlywayMigrationInitializer flywayInitializer(Flyway flyway,, +				FlywayMigrationStrategy migrationStrategy) {, +			return new FlywayMigrationInitializer(flyway, migrationStrategy);, +, +		}, +, +			super("flywayInitializer", "flyway");, +		}, +, +	}, +, +	/**, +	 * {@link InitializingBean} used to trigger {@link Flyway} migration via the, +	 * {@link FlywayMigrationStrategy}., +	 */, +	private static class FlywayMigrationInitializer implements InitializingBean {, +, +		private final Flyway flyway;, +, +		private final FlywayMigrationStrategy migrationStrategy;, +, +		public FlywayMigrationInitializer(Flyway flyway,, +				FlywayMigrationStrategy migrationStrategy) {, +			this.flyway = flyway;, +			this.migrationStrategy = migrationStrategy;, +		}, +, +		@Override, +		public void afterPropertiesSet() throws Exception {, +			this.migrationStrategy.migrate(this.flyway);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/jpa/EntityManagerFactoryDependsOnPostProcessor.java, + * Copyright 2012-2015 the original author or authors., +	private final String[] dependsOn;, +	public EntityManagerFactoryDependsOnPostProcessor(String... dependsOn) {, +			String[] dependencies = definition.getDependsOn();, +			for (String bean : this.dependsOn) {, +				dependencies = StringUtils.addStringToArray(dependencies, bean);, +			}, +			definition.setDependsOn(dependencies);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.factory.InitializingBean;, +		@Bean, +		@ConditionalOnMissingBean, +		public FlywayMigrationStrategy flywayMigrationStrategy() {, +			return new FlywayMigrationStrategy();, +		}, +, +		@Bean, +		@Bean, +		public FlywayMigrationInitializer flywayInitializer(Flyway flyway,, +				FlywayMigrationStrategy migrationStrategy) {, +			return new FlywayMigrationInitializer(flyway, migrationStrategy);, +, +		}, +, +			super("flywayInitializer", "flyway");, +		}, +, +	}, +, +	/**, +	 * {@link InitializingBean} used to trigger {@link Flyway} migration via the, +	 * {@link FlywayMigrationStrategy}., +	 */, +	private static class FlywayMigrationInitializer implements InitializingBean {, +, +		private final Flyway flyway;, +, +		private final FlywayMigrationStrategy migrationStrategy;, +]