[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.bind.convert.BinderConversionService;, +import org.springframework.core.env.MutablePropertySources;, +	private BinderConversionService binderConversionService;, +		if (this.propertySources instanceof MutablePropertySources) {, +			this.configurationSources = ConfigurationPropertySources, +					.from((MutablePropertySources) this.propertySources);, +		}, +		else {, +	}, +		Binder binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				getBinderConversionService());, +	private BinderConversionService getBinderConversionService() {, +		BinderConversionService binderConversionService = this.binderConversionService;, +		if (binderConversionService == null) {, +			binderConversionService = new BinderConversionService(conversionService);, +			this.binderConversionService = binderConversionService;, +		return binderConversionService;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.bind.convert.BinderConversionService;, +import org.springframework.core.env.MutablePropertySources;, +	private BinderConversionService binderConversionService;, +		if (this.propertySources instanceof MutablePropertySources) {, +			this.configurationSources = ConfigurationPropertySources, +					.from((MutablePropertySources) this.propertySources);, +		}, +		else {, +	}, +		Binder binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				getBinderConversionService());, +	private BinderConversionService getBinderConversionService() {, +		BinderConversionService binderConversionService = this.binderConversionService;, +		if (binderConversionService == null) {, +			binderConversionService = new BinderConversionService(conversionService);, +			this.binderConversionService = binderConversionService;, +		return binderConversionService;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +	 * instances adapted from the given Spring {@link MutablePropertySources}., +	 * <p>, +	 * This method will flatten any nested property sources and will filter all, +	 * {@link StubPropertySource stub property sources}. Updates to the underlying source, +	 * will be automatically tracked., +	 * @param sources the Spring property sources to adapt, +	 * @return an {@link Iterable} containing a single newly adapted, +	 * {@link SpringConfigurationPropertySource} instances, +	 */, +	public static Iterable<ConfigurationPropertySource> from(, +			MutablePropertySources sources) {, +		return new SpringConfigurationPropertySources(sources);, +	}, +, +	/**, +	 * Return {@link Iterable} containing new {@link ConfigurationPropertySource}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import org.springframework.boot.context.properties.bind.convert.BinderConversionService;, +import org.springframework.core.env.MutablePropertySources;, +	private BinderConversionService binderConversionService;, +		if (this.propertySources instanceof MutablePropertySources) {, +			this.configurationSources = ConfigurationPropertySources, +					.from((MutablePropertySources) this.propertySources);, +		}, +		else {, +	}, +		Binder binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				getBinderConversionService());, +	private BinderConversionService getBinderConversionService() {, +		BinderConversionService binderConversionService = this.binderConversionService;, +		if (binderConversionService == null) {, +			binderConversionService = new BinderConversionService(conversionService);, +			this.binderConversionService = binderConversionService;, +		return binderConversionService;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +	 * instances adapted from the given Spring {@link MutablePropertySources}., +	 * <p>, +	 * This method will flatten any nested property sources and will filter all, +	 * {@link StubPropertySource stub property sources}. Updates to the underlying source, +	 * will be automatically tracked., +	 * @param sources the Spring property sources to adapt, +	 * @return an {@link Iterable} containing a single newly adapted, +	 * {@link SpringConfigurationPropertySource} instances, +	 */, +	public static Iterable<ConfigurationPropertySource> from(, +			MutablePropertySources sources) {, +		return new SpringConfigurationPropertySources(sources);, +	}, +, +	/**, +	 * Return {@link Iterable} containing new {@link ConfigurationPropertySource}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +import java.util.LinkedHashMap;, +import org.springframework.context.annotation.Scope;, +	@Test, +	public void rebindableConfigurationProperties() throws Exception {, +		// gh-9160, +		this.context = new AnnotationConfigApplicationContext();, +		MutablePropertySources sources = this.context.getEnvironment(), +				.getPropertySources();]