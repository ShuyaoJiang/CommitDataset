[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import com.fasterxml.jackson.databind.AnnotationIntrospector;, +import com.fasterxml.jackson.databind.cfg.MapperConfig;, +import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;, +		private static final String JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME = "com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector";, +, +		public ResourceConfigCustomizer resourceConfigCustomizer(, +				final ObjectMapper objectMapper) {, +			addJaxbAnnotationIntrospectorIfPresent(objectMapper);, +					config.register(new ObjectMapperContextResolver(objectMapper),, +							ContextResolver.class);, +		private void addJaxbAnnotationIntrospectorIfPresent(ObjectMapper objectMapper) {, +			if (ClassUtils.isPresent(JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME,, +					getClass().getClassLoader())) {, +				new ObjectMapperCustomizer().addJaxbAnnotationIntrospector(objectMapper);, +			}, +		}, +, +		private static final class ObjectMapperCustomizer {, +, +			private void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {, +				JaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(, +						objectMapper.getTypeFactory());, +				objectMapper.setAnnotationIntrospectors(, +						createPair(objectMapper.getSerializationConfig(),, +								jaxbAnnotationIntrospector),, +						createPair(objectMapper.getDeserializationConfig(),, +								jaxbAnnotationIntrospector));, +			}, +, +			private AnnotationIntrospector createPair(MapperConfig<?> config,, +					JaxbAnnotationIntrospector jaxbAnnotationIntrospector) {, +				return AnnotationIntrospector.pair(config.getAnnotationIntrospector(),, +						jaxbAnnotationIntrospector);, +			}, +, +		}, +, +		private static final class ObjectMapperContextResolver, +			private final ObjectMapper objectMapper;, +, +			private ObjectMapperContextResolver(ObjectMapper objectMapper) {, +				this.objectMapper = objectMapper;, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import com.fasterxml.jackson.databind.AnnotationIntrospector;, +import com.fasterxml.jackson.databind.cfg.MapperConfig;, +import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;, +		private static final String JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME = "com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector";, +, +		public ResourceConfigCustomizer resourceConfigCustomizer(, +				final ObjectMapper objectMapper) {, +			addJaxbAnnotationIntrospectorIfPresent(objectMapper);, +					config.register(new ObjectMapperContextResolver(objectMapper),, +							ContextResolver.class);, +		private void addJaxbAnnotationIntrospectorIfPresent(ObjectMapper objectMapper) {, +			if (ClassUtils.isPresent(JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME,, +					getClass().getClassLoader())) {, +				new ObjectMapperCustomizer().addJaxbAnnotationIntrospector(objectMapper);, +			}, +		}, +, +		private static final class ObjectMapperCustomizer {, +, +			private void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {, +				JaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(, +						objectMapper.getTypeFactory());, +				objectMapper.setAnnotationIntrospectors(, +						createPair(objectMapper.getSerializationConfig(),, +								jaxbAnnotationIntrospector),, +						createPair(objectMapper.getDeserializationConfig(),, +								jaxbAnnotationIntrospector));, +			}, +, +			private AnnotationIntrospector createPair(MapperConfig<?> config,, +					JaxbAnnotationIntrospector jaxbAnnotationIntrospector) {, +				return AnnotationIntrospector.pair(config.getAnnotationIntrospector(),, +						jaxbAnnotationIntrospector);, +			}, +, +		}, +, +		private static final class ObjectMapperContextResolver, +			private final ObjectMapper objectMapper;, +, +			private ObjectMapperContextResolver(ObjectMapper objectMapper) {, +				this.objectMapper = objectMapper;, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationObjectMapperProviderTests.java, +import javax.xml.bind.annotation.XmlTransient;, + * @author Andy Wilkinson, +@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = "spring.jackson.serialization-inclusion:non-null"), +	public void responseIsSerializedUsingAutoConfiguredObjectMapper() {, +		assertThat(response.getBody()), +				.isEqualTo(String.format("{\"subject\":\"Jersey\"}"));, +		@XmlTransient, +		public String getFoo() {, +			return "foo";, +		}, +]