[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		EndpointId id = EndpointId.of(attributes.getString("id"));, +		String key = "management.endpoint." + id.toLowerCaseString() + ".enabled";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/OnEnabledEndpointCondition.java, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		EndpointId id = EndpointId.of(attributes.getString("id"));, +		String key = "management.endpoint." + id.toLowerCaseString() + ".enabled";, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/condition/ConditionalOnEnabledEndpointTests.java, +	@Test, +	public void outcomeWhenEndpointEnabledPropertyIsTrueAndMixedCaseShouldMatch() {, +		this.contextRunner.withPropertyValues("management.endpoint.foo-bar.enabled=true"), +				.withUserConfiguration(, +						FooBarEndpointEnabledByDefaultFalseConfiguration.class), +				.run((context) -> assertThat(context).hasBean("fooBar"));, +	}, +, +	@Endpoint(id = "fooBar", enableByDefault = false), +	static class FooBarEndpointEnabledByDefaultFalse {, +, +	}, +, +	static class FooBarEndpointEnabledByDefaultFalseConfiguration {, +, +		@Bean, +		@ConditionalOnEnabledEndpoint, +		public FooBarEndpointEnabledByDefaultFalse fooBar() {, +			return new FooBarEndpointEnabledByDefaultFalse();, +		}, +, +	}, +, +	@Configuration]