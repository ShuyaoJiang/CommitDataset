[+++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>infinispan-jcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.infinispan</groupId>, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>infinispan-jcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.infinispan</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.List;, +, +import org.infinispan.configuration.cache.ConfigurationBuilder;, +import org.infinispan.manager.EmbeddedCacheManager;, +, + * @author Stephane Nicoll, +	@Autowired(required = false), +	private ConfigurationBuilder defaultConfigurationBuilder;, +, +	public CacheManager cacheManager(EmbeddedCacheManager embeddedCacheManager) {, +		return new SpringEmbeddedCacheManager(embeddedCacheManager);, +	}, +, +	@Bean(destroyMethod = "stop"), +	@ConditionalOnMissingBean, +	public EmbeddedCacheManager infinispanCacheManager() throws IOException {, +		EmbeddedCacheManager infinispanCacheManager = createEmbeddedCacheManager();, +				infinispanCacheManager.defineConfiguration(cacheName, getDefaultCacheConfiguration());, +		return infinispanCacheManager;, +	private EmbeddedCacheManager createEmbeddedCacheManager() throws IOException {, +			InputStream in = this.cacheProperties.getConfig().getInputStream();, +			try {, +				return new DefaultCacheManager(in);, +			}, +			finally {, +				in.close();, +			}, +	private org.infinispan.configuration.cache.Configuration getDefaultCacheConfiguration() {, +		if (this.defaultConfigurationBuilder != null) {, +			return defaultConfigurationBuilder.build();, +		}, +		return new ConfigurationBuilder().build();, +	}, +, +++ b/spring-boot-autoconfigure/pom.xml, +			<artifactId>infinispan-jcache</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.infinispan</groupId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/InfinispanCacheConfiguration.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.List;, +, +import org.infinispan.configuration.cache.ConfigurationBuilder;, +import org.infinispan.manager.EmbeddedCacheManager;, +, + * @author Stephane Nicoll, +	@Autowired(required = false), +	private ConfigurationBuilder defaultConfigurationBuilder;, +, +	public CacheManager cacheManager(EmbeddedCacheManager embeddedCacheManager) {, +		return new SpringEmbeddedCacheManager(embeddedCacheManager);, +	}, +, +	@Bean(destroyMethod = "stop"), +	@ConditionalOnMissingBean, +	public EmbeddedCacheManager infinispanCacheManager() throws IOException {, +		EmbeddedCacheManager infinispanCacheManager = createEmbeddedCacheManager();, +				infinispanCacheManager.defineConfiguration(cacheName, getDefaultCacheConfiguration());, +		return infinispanCacheManager;, +	private EmbeddedCacheManager createEmbeddedCacheManager() throws IOException {, +			InputStream in = this.cacheProperties.getConfig().getInputStream();, +			try {, +				return new DefaultCacheManager(in);, +			}, +			finally {, +				in.close();, +			}, +	private org.infinispan.configuration.cache.Configuration getDefaultCacheConfiguration() {, +		if (this.defaultConfigurationBuilder != null) {, +			return defaultConfigurationBuilder.build();, +		}, +		return new ConfigurationBuilder().build();, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +import org.infinispan.configuration.cache.ConfigurationBuilder;, +import org.infinispan.jcache.embedded.JCachingProvider;, +import org.infinispan.spring.provider.SpringEmbeddedCacheManager;, +import static org.mockito.Mockito.times;, +	public void infinispanCacheWithConfig() {, +				"spring.cache.config=infinispan.xml");, +		SpringEmbeddedCacheManager cacheManager = validateCacheManager(SpringEmbeddedCacheManager.class);]