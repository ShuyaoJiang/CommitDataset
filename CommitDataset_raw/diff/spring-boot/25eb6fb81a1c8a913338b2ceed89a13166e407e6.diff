[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), this.properties.getEmbedded(), +							.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), this.properties.getEmbedded(), +							.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(),, +				this.properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), this.properties.getEmbedded(), +							.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(),, +				this.properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +			return this.serverId;, +		 * Creates the minimal transport parameters for an embedded transport, +		 * configuration., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), this.properties.getEmbedded(), +							.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(),, +				this.properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +			return this.serverId;, +		 * Creates the minimal transport parameters for an embedded transport, +		 * configuration., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +				"spring.hornetq.host:192.168.1.144", "spring.hornetq.port:9876");, +		load(EmptyConfiguration.class, "spring.hornetq.mode:embedded",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue1,Queue2",, +		load(CustomJmsConfiguration.class, "spring.hornetq.embedded.queues=Queue1,Queue2"); // Ignored, +																							// with, +																							// custom, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=TestQueue",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=TestQueue",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue1");, +		AnnotationConfigApplicationContext anotherContext = doLoad(, +				EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue2");, +			HornetQProperties anotherProperties = anotherContext, +					.getBean(HornetQProperties.class);, +			assertTrue("ServerId should not match", properties.getEmbedded(), +					.getServerId() < anotherProperties.getEmbedded().getServerId());, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.serverId=93",, +		AnnotationConfigApplicationContext anotherContext = doLoad(, +				EmptyConfiguration.class, "spring.hornetq.mode=embedded",, +	private AnnotationConfigApplicationContext doLoad(Class<?> config,, +			String... environment) {, +		applicationContext.register(HornetQAutoConfiguration.class,, +				JmsAutoConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfiguration.java, +					InVMConnectorFactory.class.getName(), this.properties.getEmbedded(), +							.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, +				InVMAcceptorFactory.class.getName(),, +				this.properties.generateTransportParameters());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQProperties.java, +			return this.serverId;, +		 * Creates the minimal transport parameters for an embedded transport, +		 * configuration., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +				"spring.hornetq.host:192.168.1.144", "spring.hornetq.port:9876");, +		load(EmptyConfiguration.class, "spring.hornetq.mode:embedded",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue1,Queue2",, +		load(CustomJmsConfiguration.class, "spring.hornetq.embedded.queues=Queue1,Queue2"); // Ignored, +																							// with, +																							// custom, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=TestQueue",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=TestQueue",, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue1");, +		AnnotationConfigApplicationContext anotherContext = doLoad(, +				EmptyConfiguration.class, "spring.hornetq.embedded.queues=Queue2");, +			HornetQProperties anotherProperties = anotherContext, +					.getBean(HornetQProperties.class);, +			assertTrue("ServerId should not match", properties.getEmbedded(), +					.getServerId() < anotherProperties.getEmbedded().getServerId());, +		load(EmptyConfiguration.class, "spring.hornetq.embedded.serverId=93",, +		AnnotationConfigApplicationContext anotherContext = doLoad(, +				EmptyConfiguration.class, "spring.hornetq.mode=embedded",, +	private AnnotationConfigApplicationContext doLoad(Class<?> config,, +			String... environment) {, +		applicationContext.register(HornetQAutoConfiguration.class,, +				JmsAutoConfiguration.class);, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +	protected Map<String, Object> getEnvironmentProperties(, +			MergedContextConfiguration config) {, +			throw new IllegalStateException("Unexpected could not load properties from '", +					+ content + "'", e);]