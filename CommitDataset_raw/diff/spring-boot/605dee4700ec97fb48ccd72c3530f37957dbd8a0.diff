[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedOperationParameter;, +import org.springframework.jmx.export.annotation.ManagedOperationParameters;, +import org.springframework.util.StringUtils;, + * @author Stephane Nicoll, +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger") }), +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger"),, +			@ManagedOperationParameter(name = "logLevel", description = "New log level (can be null or empty String to remove the custom level)") }), +		getEndpoint().setLogLevel(loggerName, determineLogLevel(logLevel));, +	}, +, +	private LogLevel determineLogLevel(String logLevel) {, +		if (StringUtils.hasText(logLevel)) {, +			return LogLevel.valueOf(logLevel.toUpperCase());, +		}, +		return null;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedOperationParameter;, +import org.springframework.jmx.export.annotation.ManagedOperationParameters;, +import org.springframework.util.StringUtils;, + * @author Stephane Nicoll, +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger") }), +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger"),, +			@ManagedOperationParameter(name = "logLevel", description = "New log level (can be null or empty String to remove the custom level)") }), +		getEndpoint().setLogLevel(loggerName, determineLogLevel(logLevel));, +	}, +, +	private LogLevel determineLogLevel(String logLevel) {, +		if (StringUtils.hasText(logLevel)) {, +			return LogLevel.valueOf(logLevel.toUpperCase());, +		}, +		return null;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java, +	@Test, +	public void setLogLevelToNull() {, +		getEndpointBean().setLogLevel("ROOT", null);, +		verify(getLoggingSystem()).setLogLevel("ROOT", null);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedOperationParameter;, +import org.springframework.jmx.export.annotation.ManagedOperationParameters;, +import org.springframework.util.StringUtils;, + * @author Stephane Nicoll, +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger") }), +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger"),, +			@ManagedOperationParameter(name = "logLevel", description = "New log level (can be null or empty String to remove the custom level)") }), +		getEndpoint().setLogLevel(loggerName, determineLogLevel(logLevel));, +	}, +, +	private LogLevel determineLogLevel(String logLevel) {, +		if (StringUtils.hasText(logLevel)) {, +			return LogLevel.valueOf(logLevel.toUpperCase());, +		}, +		return null;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java, +	@Test, +	public void setLogLevelToNull() {, +		getEndpointBean().setLogLevel("ROOT", null);, +		verify(getLoggingSystem()).setLogLevel("ROOT", null);, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, + * @author Stephane Nicoll, +	public void setLoggerWithNullLogLevel() throws Exception {, +		this.mvc.perform(post(PATH + "/ROOT").contentType(MediaType.APPLICATION_JSON), +				.content("{\"configuredLevel\": null}")), +				.andExpect(status().isNoContent());, +		verify(this.loggingSystem).setLogLevel("ROOT", null);, +	}, +, +	@Test, +	public void setLoggerWithNoLogLevel() throws Exception {, +		this.mvc.perform(post(PATH + "/ROOT").contentType(MediaType.APPLICATION_JSON), +				.content("{}")), +				.andExpect(status().isNoContent());, +		verify(this.loggingSystem).setLogLevel("ROOT", null);, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/LoggersEndpointMBean.java, +import org.springframework.jmx.export.annotation.ManagedOperationParameter;, +import org.springframework.jmx.export.annotation.ManagedOperationParameters;, +import org.springframework.util.StringUtils;, + * @author Stephane Nicoll, +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger") }), +	@ManagedOperationParameters({, +			@ManagedOperationParameter(name = "loggerName", description = "Name of the logger"),, +			@ManagedOperationParameter(name = "logLevel", description = "New log level (can be null or empty String to remove the custom level)") }), +		getEndpoint().setLogLevel(loggerName, determineLogLevel(logLevel));, +	}, +, +	private LogLevel determineLogLevel(String logLevel) {]