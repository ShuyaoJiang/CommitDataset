[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +recommendations that, when followed, make your development process a little easier., +_<<getting-started.adoc#getting-started, Getting Started>>_ guide before diving into this, +section., +<<using-boot-dependency-management,_dependency management_>> and that can consume, +artifacts published to the "`Maven Central`" repository. We would recommend that you, +choose Maven or Gradle. It is possible to get Spring Boot to work with other build systems, +(Ant, for example), but they are not particularly well supported., +practice, you do not need to provide a version for any of these dependencies in your build, +configuration, as Spring Boot is managing that for you. When you upgrade Spring Boot, +itself, these dependencies are upgraded as well in a consistent way., +The curated list contains all the spring modules that you can use with Spring Boot as well, +as a refined list of third party libraries. The list is available as a standard, +  dependency management lets you omit <version> tags for those dependencies when used in, +  your own pom., +* Sensible https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html[resource, +  filtering]., +  profile-specific files (for example, `application-foo.properties` and, +  `application-foo.yml`), +Note that, since the `application.properties` and `application.yml` files accept Spring, +style placeholders (`${...}`), the Maven filtering is changed to use `@..@` placeholders., +(You can override that by setting a Maven property called `resource.delimiter`.), +in your own project. For instance, to upgrade to another Spring Data release train, you, +would add the following to your `pom.xml`:, +The preceding sample setup does not let you override individual dependencies by using a, +property, as explained above. To achieve the same result, you need to add an entry in the, +`dependencyManagement` of your project **before** the `spring-boot-dependencies` entry., +For instance, to upgrade to another Spring Data release train, you could add the following, +element to your `pom.xml`:, +NOTE: In the preceding example, we specify a _BOM_, but any dependency type can be, +overridden in the same way., +Spring Boot includes a <<build-tool-plugins.adoc#build-tool-plugins-maven-plugin, Maven, +plugin>> that can package the project as an executable jar. Add the plugin to your, +`<plugins>` section if you want to use it, as shown in the following example:, +There is no need to configure it unless you want to change the settings defined in the, +parent., +To declare dependencies, a typical `ivy.xml` file looks something like the following, +example:, +As explained in the <<spring-boot-features#boot-features-custom-starter,Creating Your Own, +Starter>> section, third party starters should not start with `spring-boot`, as it is, +reserved for official Spring Boot artifacts. Rather, a third-party starter typically, +starts with the name of the project. For example, a third-party starter project called, +`thirdpartyproject` would typically be named `thirdpartyproject-spring-boot-starter`., +Finally, Spring Boot also includes the following starters that can be used if you want to, +exclude, +{github-master-code}/spring-boot-project/spring-boot-starters/README.adoc[README file] in, +the `spring-boot-starters` module on GitHub., +use the `@ComponentScan`, `@EntityScan`, or `@SpringBootApplication` annotations, since, +every class from every jar is read., +TIP: We recommend that you follow Java's recommended package naming conventions and use a, +reversed domain name (for example, `com.example.project`)., +Using a root package also lets the `@ComponentScan` annotation be used without needing to, +specify a `basePackage` attribute. You can also use the `@SpringBootApplication`, +annotation if your main class is in the root package., +`SpringApplication` with XML sources, we generally recommend that your primary source be a, +single `@Configuration` class. Usually the class that defines the `main` method is a good, +candidate as the primary `@Configuration`., +You need not put all your `@Configuration` into a single class. The `@Import` annotation, +can be used to import additional configuration classes. Alternatively, you can use, +`@ComponentScan` to automatically pick up all Spring components, including, +with a `@Configuration` class. You can then use an `@ImportResource` annotation to load, +XML configuration files., +configuration to replace specific parts of the auto-configuration. For example, if you add, +your own `DataSource` bean, the default embedded database support backs away., +If you need to find out what auto-configuration is currently being applied, and why, start, +your application with the `--debug` switch. Doing so enables debug logs for a selection of, +core loggers and logs an auto-configuration report to the console., +If you find that specific auto-configuration classes that you do not want are being, +applied, you can use the exclude attribute of `@EnableAutoConfiguration` to disable them,, +as shown in the following example:, +If the class is not on the classpath, you can use the `excludeName` attribute of the, +annotation and specify the fully qualified name instead. Finally, you can also control the, +list of auto-configuration classes to exclude by using the `spring.autoconfigure.exclude`, +property., +TIP: Notice how using constructor injection lets the `riskAssessor` field be marked as, +`final`, indicating that it cannot be subsequently changed., +used together (especially if you follow the <<using-boot-structuring-your-code, best, +practices>> above), Spring Boot provides a convenient `@SpringBootApplication`, +alternative., +you first need to import your project. Import steps vary depending on your IDE and build, +system. Most IDEs can import Maven projects directly. For example, Eclipse users can, +select `Import...` -> `Existing Maven Projects` from the `File` menu., +http://maven.apache.org/plugins/maven-idea-plugin/[IDEA]. Gradle offers plugins for, +{gradle-user-guide}/userguide.html[various IDEs]., +TIP: If you accidentally run a web application twice, you see a "`Port already in use`", +error. STS users can use the `Relaunch` button rather than the `Run` button to ensure that, +Doing so lets you attach a debugger to your packaged application, as shown in the, +following example:, +You might also want to use the `MAVEN_OPTS` operating system environment variable, as, +shown in the following example:, +The Spring Boot Gradle plugin also includes a `bootRun` task that can be used to run your, +application in an exploded form. The `bootRun` task is added whenever you apply, +You might also want to use the `JAVA_OPTS` operating system environment variable, as shown, +in the following example:, +devtools support, add the module dependency to your build, as shown in the following, +listings for Maven and Gradle:, +example, <<spring-boot-features#boot-features-spring-mvc-template-engines,template, +engines>> cache compiled templates to avoid repeatedly parsing template files. Also,, +Spring MVC can add HTTP caching headers to responses when serving static resources., +to set these properties manually, the `spring-boot-devtools` module automatically applies]