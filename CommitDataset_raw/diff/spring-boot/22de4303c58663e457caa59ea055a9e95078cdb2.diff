[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Collection;, +, +	private DataSourcePoolMetadataProvider poolMetadataProvider;, +		this.poolMetadataProvider = new CompositeDataSourcePoolMetadataProvider(, +				metadataProviders.getIfAvailable());, +		if (isDataSourceAutoCommitDisabled() && !isJta()) {, +	private boolean isDataSourceAutoCommitDisabled() {, +		DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, +				.getDataSourcePoolMetadata(getDataSource());, +		return poolMetadata != null, +				&& Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit());, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Collection;, +, +	private DataSourcePoolMetadataProvider poolMetadataProvider;, +		this.poolMetadataProvider = new CompositeDataSourcePoolMetadataProvider(, +				metadataProviders.getIfAvailable());, +		if (isDataSourceAutoCommitDisabled() && !isJta()) {, +	private boolean isDataSourceAutoCommitDisabled() {, +		DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, +				.getDataSourcePoolMetadata(getDataSource());, +		return poolMetadata != null, +				&& Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit());, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import com.zaxxer.hikari.HikariDataSource;, +import static org.assertj.core.api.Assertions.entry;, +	@Test, +	public void providerDisablesAutoCommitIsConfigured() {, +		contextRunner().withPropertyValues(, +				"spring.datasource.type:" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.auto-commit:false").run((context) -> {, +			Map<String, Object> jpaProperties = context, +					.getBean(LocalContainerEntityManagerFactoryBean.class), +					.getJpaPropertyMap();, +			assertThat(jpaProperties).contains(entry(, +					"hibernate.connection.provider_disables_autocommit", "true"));, +		});, +	}, +, +	@Test, +	public void providerDisablesAutoCommitIsNotConfiguredIfAutoCommitIsEnabled() {, +		contextRunner().withPropertyValues(, +				"spring.datasource.type:" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.auto-commit:true").run((context) -> {, +			Map<String, Object> jpaProperties = context, +					.getBean(LocalContainerEntityManagerFactoryBean.class), +					.getJpaPropertyMap();, +			assertThat(jpaProperties).doesNotContainKeys(, +					"hibernate.connection.provider_disables_autocommit");, +		});, +	}, +, +	@Test, +	public void providerDisablesAutoCommitIsNotConfiguredIfPropertyIsSet() {, +		contextRunner().withPropertyValues(, +				"spring.datasource.type:" + HikariDataSource.class.getName(),, +				"spring.datasource.hikari.auto-commit:false",, +				"spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false", +		).run((context) -> {, +			Map<String, Object> jpaProperties = context, +					.getBean(LocalContainerEntityManagerFactoryBean.class), +					.getJpaPropertyMap();, +			assertThat(jpaProperties).contains(entry(, +					"hibernate.connection.provider_disables_autocommit", "false"));, +		});, +	}, +, +	@Test, +	public void providerDisablesAutoCommitIsNotConfiguredWihJta() {, +		contextRunner(), +				.withConfiguration(AutoConfigurations.of(JtaAutoConfiguration.class)), +				.withPropertyValues(, +						"spring.datasource.type:" + HikariDataSource.class.getName(),, +						"spring.datasource.hikari.auto-commit:false").run((context) -> {, +			Map<String, Object> jpaProperties = context, +					.getBean(LocalContainerEntityManagerFactoryBean.class), +					.getJpaPropertyMap();, +			assertThat(jpaProperties).doesNotContainKeys(, +					"hibernate.connection.provider_disables_autocommit");, +		});, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Collection;, +, +	private DataSourcePoolMetadataProvider poolMetadataProvider;, +		this.poolMetadataProvider = new CompositeDataSourcePoolMetadataProvider(, +				metadataProviders.getIfAvailable());, +		if (isDataSourceAutoCommitDisabled() && !isJta()) {, +	private boolean isDataSourceAutoCommitDisabled() {, +		DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, +				.getDataSourcePoolMetadata(getDataSource());, +		return poolMetadata != null, +				&& Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit());, +	}]