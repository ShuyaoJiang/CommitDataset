[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +	/**, +	 * The name of the {@link LoggingSystem} bean., +	 */, +	private static final String LOGGING_SYSTEM_BEAN_NAME = "springBootLoggingSystem";, +, +			ApplicationEnvironmentPreparedEvent.class, ApplicationPreparedEvent.class,, +			ContextClosedEvent.class };, +		else if (event instanceof ApplicationPreparedEvent) {, +			onApplicationPreparedEvent((ApplicationPreparedEvent) event);, +		}, +	private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {, +		ConfigurableListableBeanFactory beanFactory = event.getApplicationContext().getBeanFactory();, +		if (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) {, +			beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, this.loggingSystem);, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +	/**, +	 * The name of the {@link LoggingSystem} bean., +	 */, +	private static final String LOGGING_SYSTEM_BEAN_NAME = "springBootLoggingSystem";, +, +			ApplicationEnvironmentPreparedEvent.class, ApplicationPreparedEvent.class,, +			ContextClosedEvent.class };, +		else if (event instanceof ApplicationPreparedEvent) {, +			onApplicationPreparedEvent((ApplicationPreparedEvent) event);, +		}, +	private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {, +		ConfigurableListableBeanFactory beanFactory = event.getApplicationContext().getBeanFactory();, +		if (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) {, +			beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, this.loggingSystem);, +		}, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerIntegrationTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.logging;, +, +import org.junit.Test;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.stereotype.Component;, +, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Integration tests for {@link LoggingApplicationListener}., + *, + * @author Stephane Nicoll, + */, +public class LoggingApplicationListenerIntegrationTests {, +, +, +	@Test, +	public void loggingSystemRegisteredInTheContext() {, +		ConfigurableApplicationContext context = new SpringApplicationBuilder(, +				SampleService.class).web(false).run();, +		try {, +			SampleService service = context.getBean(SampleService.class);, +			assertNotNull(service.loggingSystem);, +		}, +		finally {, +			context.close();, +		}, +	}, +, +, +	@Component, +	static class SampleService {, +, +		private final LoggingSystem loggingSystem;, +, +		@Autowired, +		SampleService(LoggingSystem loggingSystem) {, +			this.loggingSystem = loggingSystem;, +		}, +	}]