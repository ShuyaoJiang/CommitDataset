[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +					.map(pathMappedEndpoints.get()::getPath);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +					.map(pathMappedEndpoints.get()::getPath);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +			streamPaths(this.includes, pathMappedEndpoints.get()).forEach(paths::add);, +			streamPaths(this.excludes, pathMappedEndpoints.get()).forEach(paths::remove);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +					.map(pathMappedEndpoints.get()::getPath);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +			streamPaths(this.includes, pathMappedEndpoints.get()).forEach(paths::add);, +			streamPaths(this.excludes, pathMappedEndpoints.get()).forEach(paths::remove);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/PathRequest.java, +import java.util.function.Supplier;, +, +		protected void initialized(Supplier<H2ConsoleProperties> h2ConsoleProperties) {, +					h2ConsoleProperties.get().getPath() + "/**");, +				Supplier<H2ConsoleProperties> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +					.map(pathMappedEndpoints.get()::getPath);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +			streamPaths(this.includes, pathMappedEndpoints.get()).forEach(paths::add);, +			streamPaths(this.excludes, pathMappedEndpoints.get()).forEach(paths::remove);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/PathRequest.java, +import java.util.function.Supplier;, +, +		protected void initialized(Supplier<H2ConsoleProperties> h2ConsoleProperties) {, +					h2ConsoleProperties.get().getPath() + "/**");, +				Supplier<H2ConsoleProperties> context) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<ServerProperties> serverProperties) {, +			this.delegate = new OrRequestMatcher(, +					getDelegateMatchers(serverProperties.get()));, +		protected boolean matches(HttpServletRequest request,, +				Supplier<ServerProperties> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +				Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +					.map(pathMappedEndpoints.get()::getPath);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {, +				paths.addAll(pathMappedEndpoints.get().getAllPaths());, +			streamPaths(this.includes, pathMappedEndpoints.get()).forEach(paths::add);, +			streamPaths(this.excludes, pathMappedEndpoints.get()).forEach(paths::remove);, +				Supplier<PathMappedEndpoints> context) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/PathRequest.java, +import java.util.function.Supplier;, +, +		protected void initialized(Supplier<H2ConsoleProperties> h2ConsoleProperties) {, +					h2ConsoleProperties.get().getPath() + "/**");, +				Supplier<H2ConsoleProperties> context) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java, +import java.util.function.Supplier;, +		protected void initialized(Supplier<ServerProperties> serverProperties) {, +			this.delegate = new OrRequestMatcher(, +					getDelegateMatchers(serverProperties.get()));, +		protected boolean matches(HttpServletRequest request,, +				Supplier<ServerProperties> context) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/security/reactive/ApplicationContextServerWebExchangeMatcher.java, +import java.util.function.Supplier;, +, + * an {@link ApplicationContext} or a class of an {@link ApplicationContext#getBean(Class), + * existing bean}.]