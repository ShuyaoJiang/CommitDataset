[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ReflectiveOperationInvoker.java, +				.filter((p) -> isMissing(p, arguments)).map(Parameter::getName), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ReflectiveOperationInvoker.java, +				.filter((p) -> isMissing(p, arguments)).map(Parameter::getName), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			if (!ConfigurationPropertySources, +					.isAttachedConfigurationPropertySource(source)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ReflectiveOperationInvoker.java, +				.filter((p) -> isMissing(p, arguments)).map(Parameter::getName), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			if (!ConfigurationPropertySources, +					.isAttachedConfigurationPropertySource(source)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java, +	public void invokeWithParameterMappingExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "getOne", new Object[] { "wrong" },, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()).isEqualTo(, +						String.format("Failed to map wrong of type " + "%s to type %s",, +								String.class, FooName.class));, +	public void invokeWithMissingRequiredParameterExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "read", new Object[] {},, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()), +						.isEqualTo("Failed to invoke operation because the following ", +								+ "required parameters were missing: foo,baz");, +						new Object[] { null, "hello", "world" },, +						new String[] { String.class.getName() });, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ReflectiveOperationInvoker.java, +				.filter((p) -> isMissing(p, arguments)).map(Parameter::getName), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			if (!ConfigurationPropertySources, +					.isAttachedConfigurationPropertySource(source)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java, +	public void invokeWithParameterMappingExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "getOne", new Object[] { "wrong" },, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()).isEqualTo(, +						String.format("Failed to map wrong of type " + "%s to type %s",, +								String.class, FooName.class));, +	public void invokeWithMissingRequiredParameterExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "read", new Object[] {},, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()), +						.isEqualTo("Failed to invoke operation because the following ", +								+ "required parameters were missing: foo,baz");, +						new Object[] { null, "hello", "world" },, +						new String[] { String.class.getName() });, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java, +	public void readOperationWithMissingRequiredParametersReturnsBadRequestResponse(), +			throws Exception {, +		load(RequiredParameterEndpointConfiguration.class, (client) -> client.get(), +				.uri("/requiredparameters").exchange().expectStatus().isBadRequest());, +		load(RequiredParameterEndpointConfiguration.class, (client) -> client.get(), +				.uri("/requiredparameters?foo=hello").exchange().expectStatus().isOk());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ReflectiveOperationInvoker.java, +				.filter((p) -> isMissing(p, arguments)).map(Parameter::getName), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +			if (!ConfigurationPropertySources, +					.isAttachedConfigurationPropertySource(source)) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanTests.java, +	public void invokeWithParameterMappingExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "getOne", new Object[] { "wrong" },, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()).isEqualTo(, +						String.format("Failed to map wrong of type " + "%s to type %s",, +								String.class, FooName.class));, +	public void invokeWithMissingRequiredParameterExceptionMapsToIllegalArgumentException(), +			throws Exception {, +				this.server.invoke(objectName, "read", new Object[] {},, +						new String[] { String.class.getName() });, +				assertThat(ex.getCause()), +						.isExactlyInstanceOf(IllegalArgumentException.class);, +				assertThat(ex.getCause().getMessage()), +						.isEqualTo("Failed to invoke operation because the following ", +								+ "required parameters were missing: foo,baz");, +						new Object[] { null, "hello", "world" },, +						new String[] { String.class.getName() });, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java, +	public void readOperationWithMissingRequiredParametersReturnsBadRequestResponse(), +			throws Exception {, +		load(RequiredParameterEndpointConfiguration.class, (client) -> client.get(), +				.uri("/requiredparameters").exchange().expectStatus().isBadRequest());, +		load(RequiredParameterEndpointConfiguration.class, (client) -> client.get(), +				.uri("/requiredparameters?foo=hello").exchange().expectStatus().isOk());, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java]