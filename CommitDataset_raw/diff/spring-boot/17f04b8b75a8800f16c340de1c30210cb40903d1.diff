[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorAutoConfigurationTests.java, +					assertThat(context.getBean(DiskSpaceHealthIndicator.class)), +							.hasFieldOrPropertyWithValue("threshold",, +									DataSize.ofMegabytes(20));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorAutoConfigurationTests.java, +					assertThat(context.getBean(DiskSpaceHealthIndicator.class)), +							.hasFieldOrPropertyWithValue("threshold",, +									DataSize.ofMegabytes(20));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +					assertThat(connectionFactory.isPublisherConfirms()).isFalse();, +					assertThat(connectionFactory.isPublisherReturns()).isFalse();, +					com.rabbitmq.client.ConnectionFactory rcf = connectionFactory, +							.getRabbitConnectionFactory();, +					assertThat((Address[]) ReflectionTestUtils.getField(connectionFactory,, +							"addresses")).hasSize(1);, +					Address[] addresses = (Address[]) ReflectionTestUtils, +							.getField(connectionFactory, "addresses");, +					ReflectionTestUtils.setField(connectionFactory,, +							"rabbitConnectionFactory", rcf);, +					assertThat(connectionFactory.isPublisherConfirms()).isTrue();, +					assertThat(connectionFactory.isPublisherReturns()).isTrue();, +					assertThat(rabbitTemplate), +							.hasFieldOrPropertyWithValue("retryTemplate", null);, +					assertThat(rabbitTemplate), +							.hasFieldOrPropertyWithValue("receiveTimeout", 123L);, +					assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("replyTimeout",, +							456L);, +					RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils, +							.getField(rabbitTemplate, "retryTemplate");, +					SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) ReflectionTestUtils, +							.getField(retryTemplate, "retryPolicy");, +					ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils, +							.getField(retryTemplate, "backOffPolicy");, +					RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils, +							.getField(rabbitTemplate, "retryTemplate");, +					ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils, +							.getField(retryTemplate, "backOffPolicy");, +					assertThat(backOffPolicy).isSameAs(context.getBean(, +					assertThat(connectionFactory.getChannelCacheSize()).isEqualTo(23);, +					assertThat(connectionFactory.getCacheMode()), +					assertThat(connectionFactory.getConnectionCacheSize()).isEqualTo(2);, +					assertThat(connectionFactory), +							.hasFieldOrPropertyWithValue("channelCheckoutTimeout", 1000L);, +					assertThat(rabbitListenerContainerFactory.getAdviceChain()).isNull();, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("concurrentConsumers", 5);, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("maxConcurrentConsumers", 10);, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("txSize", 20);, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("missingQueuesFatal", false);, +					checkCommonProps(context, rabbitListenerContainerFactory);, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("consumersPerQueue", 5);, +					assertThat(rabbitListenerContainerFactory), +							.hasFieldOrPropertyWithValue("missingQueuesFatal", true);, +					checkCommonProps(context, rabbitListenerContainerFactory);, +		Advice[] adviceChain = rabbitListenerContainerFactory.getAdviceChain();, +		Advice advice = adviceChain[0];, +		RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(advice,, +				"retryOperations");, +		assertThat(retryTemplate).hasFieldOrPropertyWithValue("retryPolicy", retryPolicy);, +			AbstractRabbitListenerContainerFactory containerFactory) {, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("autoStartup",, +				Boolean.FALSE);, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("acknowledgeMode",, +				AcknowledgeMode.MANUAL);, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("prefetchCount", 40);, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("messageConverter",, +				context.getBean("myMessageConverter"));, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("defaultRequeueRejected",, +				Boolean.FALSE);, +		assertThat(containerFactory).hasFieldOrPropertyWithValue("idleEventInterval", 5L);, +		Advice[] adviceChain = containerFactory.getAdviceChain();, +		Advice advice = adviceChain[0];, +		MethodInvocationRecoverer<?> mir = (MethodInvocationRecoverer<?>) ReflectionTestUtils, +				.getField(advice, "recoverer");, +		RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(advice,, +				"retryOperations");, +		SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) ReflectionTestUtils, +				.getField(retryTemplate, "retryPolicy");, +		ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils, +				.getField(retryTemplate, "backOffPolicy");, +		return connectionFactory.getRabbitConnectionFactory();, +		return rabbitTemplate.isMandatoryFor(mock(Message.class));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorAutoConfigurationTests.java, +					assertThat(context.getBean(DiskSpaceHealthIndicator.class)), +							.hasFieldOrPropertyWithValue("threshold",, +									DataSize.ofMegabytes(20));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +					assertThat(connectionFactory.isPublisherConfirms()).isFalse();, +					assertThat(connectionFactory.isPublisherReturns()).isFalse();, +					com.rabbitmq.client.ConnectionFactory rcf = connectionFactory, +							.getRabbitConnectionFactory();, +					assertThat((Address[]) ReflectionTestUtils.getField(connectionFactory,, +							"addresses")).hasSize(1);, +					Address[] addresses = (Address[]) ReflectionTestUtils, +							.getField(connectionFactory, "addresses");, +					ReflectionTestUtils.setField(connectionFactory,]