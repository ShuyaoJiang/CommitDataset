[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +				setClassifier(archive);, +					task.getInputs().file(task.getDependencies());, +		private void setClassifier(Jar archive) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +				setClassifier(archive);, +					task.getInputs().file(task.getDependencies());, +		private void setClassifier(Jar archive) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.boot.loader.tools.LibraryCallback;, +import org.springframework.boot.loader.tools.LibraryScope;, +		ProjectLibraries libraries = getLibraries();, +		project.getTasks().withType(Jar.class, new RepackageAction(extension, libraries));, +	}, +	, +	public File[] getDependencies() {, +		ProjectLibraries libraries = getLibraries();, +		final List<File> files = new ArrayList<File>();, +		try {, +			libraries.doWithLibraries(new LibraryCallback() {, +				@Override, +				public void library(File file, LibraryScope scope) throws IOException {, +					files.add(file);, +				}, +			});, +		} catch (IOException e) {, +			throw new IllegalStateException("Cannot retrieve dependencies", e);, +		}, +		return files.toArray(new File[files.size()]);, +	}, +, +	private ProjectLibraries getLibraries() {, +		Project project = getProject();, +		SpringBootPluginExtension extension = project.getExtensions().getByType(, +				SpringBootPluginExtension.class);, +		return libraries;]