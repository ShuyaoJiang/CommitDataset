[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<String> SKIPPED = Collections.<String>unmodifiableSet(, +			new HashSet<String>(Arrays.asList("/docs", "/logfile", "/heapdump")));, +, +			final String endpointPath = (StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/");, +			if (!SKIPPED.contains(endpointPath)) {, +, +, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<String> SKIPPED = Collections.<String>unmodifiableSet(, +			new HashSet<String>(Arrays.asList("/docs", "/logfile", "/heapdump")));, +, +			final String endpointPath = (StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/");, +			if (!SKIPPED.contains(endpointPath)) {, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint;, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint("heapdump"), +	public HeapdumpMvcEndpoint heapdumpMvcEndpoint() {, +		return new HeapdumpMvcEndpoint();, +	}, +, +	@Bean, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<String> SKIPPED = Collections.<String>unmodifiableSet(, +			new HashSet<String>(Arrays.asList("/docs", "/logfile", "/heapdump")));, +, +			final String endpointPath = (StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/");, +			if (!SKIPPED.contains(endpointPath)) {, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint;, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint("heapdump"), +	public HeapdumpMvcEndpoint heapdumpMvcEndpoint() {, +		return new HeapdumpMvcEndpoint();, +	}, +, +	@Bean, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HeapdumpMvcEndpoint.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.endpoint.mvc;, +, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.lang.management.ManagementFactory;, +import java.lang.management.PlatformManagedObject;, +import java.lang.reflect.Method;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +import java.util.zip.GZIPOutputStream;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.lang.UsesJava7;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StreamUtils;, +import org.springframework.web.bind.annotation.RequestMapping;]