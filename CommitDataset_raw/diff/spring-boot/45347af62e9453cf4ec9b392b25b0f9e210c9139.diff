[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java, +import java.time.Duration;, +	private Duration lifecycleTimeout;, +, +		HttpServer httpServer = createHttpServer();, +		return new NettyWebServer(httpServer, handlerAdapter, this.lifecycleTimeout);, +	/**, +	 * Set the maximum amount of time that should be waited when starting or stopping the, +	 * server., +	 * @param lifecycleTimeout the lefecycle timeout, +	 */, +	public void setLifecycleTimeout(Duration lifecycleTimeout) {, +		this.lifecycleTimeout = lifecycleTimeout;, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java, +import java.time.Duration;, +	private Duration lifecycleTimeout;, +, +		HttpServer httpServer = createHttpServer();, +		return new NettyWebServer(httpServer, handlerAdapter, this.lifecycleTimeout);, +	/**, +	 * Set the maximum amount of time that should be waited when starting or stopping the, +	 * server., +	 * @param lifecycleTimeout the lefecycle timeout, +	 */, +	public void setLifecycleTimeout(Duration lifecycleTimeout) {, +		this.lifecycleTimeout = lifecycleTimeout;, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +import java.time.Duration;, +import org.springframework.util.Assert;, +	private final HttpServer httpServer;, +, +	private final Duration lifecycleTimeout;, +	public NettyWebServer(HttpServer httpServer, ReactorHttpHandlerAdapter handlerAdapter,, +			Duration lifecycleTimeout) {, +		Assert.notNull(httpServer, "HttpServer must not be null");, +		Assert.notNull(handlerAdapter, "HandlerAdapter must not be null");, +		this.httpServer = httpServer;, +		this.lifecycleTimeout = lifecycleTimeout;, +				this.nettyContext = startHttpServer();, +					SocketAddress address = this.httpServer.options().getAddress();, +	private BlockingNettyContext startHttpServer() {, +		if (this.lifecycleTimeout != null) {, +			return this.httpServer.start(this.handlerAdapter, this.lifecycleTimeout);, +		}, +		return this.httpServer.start(this.handlerAdapter);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java, +import java.time.Duration;, +	private Duration lifecycleTimeout;, +, +		HttpServer httpServer = createHttpServer();, +		return new NettyWebServer(httpServer, handlerAdapter, this.lifecycleTimeout);, +	/**, +	 * Set the maximum amount of time that should be waited when starting or stopping the, +	 * server., +	 * @param lifecycleTimeout the lefecycle timeout, +	 */, +	public void setLifecycleTimeout(Duration lifecycleTimeout) {, +		this.lifecycleTimeout = lifecycleTimeout;, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java, +import java.time.Duration;, +import org.springframework.util.Assert;, +	private final HttpServer httpServer;, +, +	private final Duration lifecycleTimeout;, +	public NettyWebServer(HttpServer httpServer, ReactorHttpHandlerAdapter handlerAdapter,, +			Duration lifecycleTimeout) {, +		Assert.notNull(httpServer, "HttpServer must not be null");, +		Assert.notNull(handlerAdapter, "HandlerAdapter must not be null");, +		this.httpServer = httpServer;, +		this.lifecycleTimeout = lifecycleTimeout;, +				this.nettyContext = startHttpServer();, +					SocketAddress address = this.httpServer.options().getAddress();, +	private BlockingNettyContext startHttpServer() {, +		if (this.lifecycleTimeout != null) {, +			return this.httpServer.start(this.handlerAdapter, this.lifecycleTimeout);, +		}, +		return this.httpServer.start(this.handlerAdapter);, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactoryTests.java, +import java.time.Duration;, +import org.springframework.test.util.ReflectionTestUtils;, +import static org.assertj.core.api.Assertions.assertThat;, +	@Test, +	public void customStartupTimeout() {, +		Duration timeout = Duration.ofDays(365);, +		NettyReactiveWebServerFactory factory = getFactory();, +		factory.setLifecycleTimeout(timeout);, +		this.webServer = factory.getWebServer(new EchoHandler());, +		this.webServer.start();, +		Object context = ReflectionTestUtils.getField(this.webServer, "nettyContext");, +		Object actualTimeout = ReflectionTestUtils.getField(context, "lifecycleTimeout");]