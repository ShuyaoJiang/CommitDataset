[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java, +			try {, +			}, +			finally {, +	}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java, +			try {, +			}, +			finally {, +	}, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, +import static org.assertj.core.api.Assertions.entry;, + * @author Stephane Nicoll, +	public void healthIndicatorWithDefaultSettings() {, +		assertThat(health.getStatus()).isEqualTo(Status.UP);, +		assertThat(health.getDetails()).containsOnly(, +				entry("database", "HSQL Database Engine"), entry("result", 1L),, +				entry("validationQuery", DatabaseDriver.HSQLDB.getValidationQuery()));, +	public void healthIndicatorWithCustomValidationQuery() {, +		String customValidationQuery = "SELECT COUNT(*) from FOO";, +		this.indicator.setDataSource(this.dataSource);, +		assertThat(health.getDetails()).containsOnly(, +				entry("database", "HSQL Database Engine"), entry("result", 0L),, +				entry("validationQuery", customValidationQuery));, +	public void healthIndicatorWithInvalidValidationQuery() {, +		String invalidValidationQuery = "SELECT COUNT(*) from BAR";, +		this.indicator.setQuery(invalidValidationQuery);, +		assertThat(health.getDetails()).contains(, +				entry("database", "HSQL Database Engine"),, +				entry("validationQuery", invalidValidationQuery));, +		assertThat(health.getDetails()).containsOnlyKeys("database", "error",, +				"validationQuery");, +	public void healthIndicatorCloseConnection() throws Exception {]