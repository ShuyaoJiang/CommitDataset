[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.getLogManager().reset();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.getLogManager().reset();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j/Log4JLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.shutdown();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.getLogManager().reset();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j/Log4JLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.shutdown();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		getLoggerContext().stop();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.getLogManager().reset();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j/Log4JLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.shutdown();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		getLoggerContext().stop();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		getLoggerContext().stop();, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.getLogManager().reset();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j/Log4JLoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		LogManager.shutdown();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +	@Override, +	public void cleanUp() {, +		super.cleanUp();, +		getLoggerContext().stop();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		getLoggerContext().stop();, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/java/JavaLoggingSystemTests.java, +import java.util.logging.Handler;, +import java.util.logging.LogManager;, +import java.util.logging.LogRecord;, +import static org.hamcrest.Matchers.is;, +	@Test, +	public void cleanUpResetsLogManager() throws Exception {, +		this.loggingSystem.beforeInitialize();, +		this.loggingSystem.initialize(null, null, null);, +		this.logger.getLogger().addHandler(new NoOpHandler());, +		assertThat(this.logger.getLogger().getHandlers().length, is(equalTo(1)));, +		LogManager.getLogManager().reset();]