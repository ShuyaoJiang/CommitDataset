[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/extension/OutputCapture.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.test.extension;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.io.PrintStream;, +import java.util.ArrayList;, +import java.util.List;, +, +import org.hamcrest.Matcher;, +import org.junit.Assert;, +import org.junit.jupiter.api.extension.AfterEachCallback;, +import org.junit.jupiter.api.extension.BeforeAllCallback;, +import org.junit.jupiter.api.extension.BeforeEachCallback;, +import org.junit.jupiter.api.extension.ExtensionContext;, +import org.junit.jupiter.api.extension.ParameterContext;, +import org.junit.jupiter.api.extension.ParameterResolutionException;, +import org.junit.jupiter.api.extension.ParameterResolver;, +, +import org.springframework.boot.ansi.AnsiOutput;, +, +import static org.hamcrest.Matchers.allOf;, +, +/**, + * JUnit5 {@code @Extension} to capture output from System.out and System.err., + *, + * @author Madhura Bhave, + */, +public class OutputCapture implements BeforeEachCallback, AfterEachCallback,, +		BeforeAllCallback, ParameterResolver, CharSequence {, +, +	private CaptureOutputStream captureOut;, +, +	private CaptureOutputStream captureErr;, +, +	private ByteArrayOutputStream methodLevelCopy;, +, +	private ByteArrayOutputStream classLevelCopy;, +, +	private List<Matcher<? super String>> matchers = new ArrayList<>();, +, +	@Override, +	public void afterEach(ExtensionContext context) {, +		try {, +			if (!this.matchers.isEmpty()) {, +				String output = this.toString();, +				Assert.assertThat(output, allOf(this.matchers));, +			}, +		}, +		finally {, +			releaseOutput();, +		}, +, +	}, +, +	@Override, +	public void beforeEach(ExtensionContext context) {, +		releaseOutput();, +		this.methodLevelCopy = new ByteArrayOutputStream();, +		captureOutput(this.methodLevelCopy);, +	}, +, +	private void captureOutput(ByteArrayOutputStream copy) {, +		AnsiOutputControl.get().disableAnsiOutput();, +		this.captureOut = new CaptureOutputStream(System.out, copy);, +		this.captureErr = new CaptureOutputStream(System.err, copy);, +		System.setOut(new PrintStream(this.captureOut));, +		System.setErr(new PrintStream(this.captureErr));, +	}, +, +	private void releaseOutput() {, +		AnsiOutputControl.get().enabledAnsiOutput();, +		System.setOut(this.captureOut.getOriginal());, +		System.setErr(this.captureErr.getOriginal());, +		this.methodLevelCopy = null;, +	}, +, +	private void flush() {, +		try {, +			this.captureOut.flush();, +			this.captureErr.flush();, +		}, +		catch (IOException ex) {, +			// ignore]