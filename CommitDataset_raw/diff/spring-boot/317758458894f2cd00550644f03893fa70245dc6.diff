[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java, +import java.util.Collections;, +, +import org.apache.logging.log4j.LogManager;, +import org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@ConditionalOnClass({ Log4j2Metrics.class, LoggerContext.class, LogManager.class }), +@Conditional(Log4JCoreLoggerContextCondition.class), +		return new Log4j2Metrics(Collections.emptyList(),, +				(LoggerContext) LogManager.getContext(false));, +	}, +, +	static class Log4JCoreLoggerContextCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			org.apache.logging.log4j.spi.LoggerContext loggerContext = LogManager, +					.getContext(false);, +			if (loggerContext instanceof LoggerContext) {, +				return ConditionOutcome.match(, +						"LoggerContext was an instance of org.apache.logging.log4j.spi.LoggerContext");, +			}, +			return ConditionOutcome.noMatch(, +					"Logger context was not an instance of org.apache.logging.log4j.spi.LoggerContext");, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.java, +import java.util.Collections;, +, +import org.apache.logging.log4j.LogManager;, +import org.springframework.boot.actuate.autoconfigure.metrics.Log4J2MetricsAutoConfiguration.Log4JCoreLoggerContextCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@ConditionalOnClass({ Log4j2Metrics.class, LoggerContext.class, LogManager.class }), +@Conditional(Log4JCoreLoggerContextCondition.class), +		return new Log4j2Metrics(Collections.emptyList(),, +				(LoggerContext) LogManager.getContext(false));, +	}, +, +	static class Log4JCoreLoggerContextCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			org.apache.logging.log4j.spi.LoggerContext loggerContext = LogManager, +					.getContext(false);, +			if (loggerContext instanceof LoggerContext) {, +				return ConditionOutcome.match(, +						"LoggerContext was an instance of org.apache.logging.log4j.spi.LoggerContext");, +			}, +			return ConditionOutcome.noMatch(, +					"Logger context was not an instance of org.apache.logging.log4j.spi.LoggerContext");, +		}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsWithSlf4jLoggerContextAutoConfigurationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics;, +, +import io.micrometer.core.instrument.binder.logging.Log4j2Metrics;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.boot.actuate.autoconfigure.metrics.test.MetricsRun;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.testsupport.runner.classpath.ClassPathExclusions;, +import org.springframework.boot.testsupport.runner.classpath.ClassPathOverrides;, +import org.springframework.boot.testsupport.runner.classpath.ModifiedClassPathRunner;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link Log4J2MetricsAutoConfiguration}., + *]