[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +		public ValidatingCouchbaseEventListener validationEventListener(, +				Validator validator) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +		public ValidatingCouchbaseEventListener validationEventListener(, +				Validator validator) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		PropertiesConfigurationFactory<Object> factory = new PropertiesConfigurationFactory<Object>(, +				target);, +			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX",, +					Locale.US);, +			catch (NumberFormatException ex) {, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +		public ValidatingCouchbaseEventListener validationEventListener(, +				Validator validator) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		PropertiesConfigurationFactory<Object> factory = new PropertiesConfigurationFactory<Object>(, +				target);, +			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX",, +					Locale.US);, +			catch (NumberFormatException ex) {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfigurationTests.java, +		load(DefaultConfiguration.class,, +				"spring.data.couchbase.repositories.enabled=false");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +		public ValidatingCouchbaseEventListener validationEventListener(, +				Validator validator) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		PropertiesConfigurationFactory<Object> factory = new PropertiesConfigurationFactory<Object>(, +				target);, +			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX",, +					Locale.US);, +			catch (NumberFormatException ex) {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfigurationTests.java, +		load(DefaultConfiguration.class,, +				"spring.data.couchbase.repositories.enabled=false");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +	public HealthIndicatorAutoConfiguration(HealthIndicatorProperties properties) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java, +		double hitRatio = cacheHitRatio(ehCacheStatistics);, +		if (!Double.isNaN(hitRatio)) {, +	private double cacheHitRatio(StatisticsGateway stats) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +		public ValidatingCouchbaseEventListener validationEventListener(, +				Validator validator) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.java, +		PropertiesConfigurationFactory<Object> factory = new PropertiesConfigurationFactory<Object>(, +				target);, +			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX",, +					Locale.US);, +			catch (NumberFormatException ex) {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfigurationTests.java, +		load(DefaultConfiguration.class,, +				"spring.data.couchbase.repositories.enabled=false");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +, +]