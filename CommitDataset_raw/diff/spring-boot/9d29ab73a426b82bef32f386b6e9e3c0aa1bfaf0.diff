[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String url = this.embeddedDatabaseConnection.getUrl(this.name);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String url = this.embeddedDatabaseConnection.getUrl(this.name);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnection.java, +import org.springframework.util.Assert;, + * @author Stephane Nicoll, +			"jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"),, +			"jdbc:derby:memory:%s;create=true"),, +	HSQL(EmbeddedDatabaseType.HSQL, "org.hsqldb.jdbcDriver", "jdbc:hsqldb:mem:%s");, +, +	private static final String DEFAULT_DATABASE_NAME = "testdb";, +	 * Returns the URL for the connection using the default database name., +		return getUrl(DEFAULT_DATABASE_NAME);, +	}, +, +	/**, +	 * Returns the URL for the connection using the specified {@code databaseName}., +	 * @param databaseName the name of the database, +	 * @return the connection URL, +	 */, +	public String getUrl(String databaseName) {, +		Assert.hasText(databaseName, "DatabaseName must not be null.");, +		return String.format(this.url, databaseName);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String url = this.embeddedDatabaseConnection.getUrl(this.name);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnection.java, +import org.springframework.util.Assert;, + * @author Stephane Nicoll, +			"jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"),, +			"jdbc:derby:memory:%s;create=true"),, +	HSQL(EmbeddedDatabaseType.HSQL, "org.hsqldb.jdbcDriver", "jdbc:hsqldb:mem:%s");, +, +	private static final String DEFAULT_DATABASE_NAME = "testdb";, +	 * Returns the URL for the connection using the default database name., +		return getUrl(DEFAULT_DATABASE_NAME);, +	}, +, +	/**, +	 * Returns the URL for the connection using the specified {@code databaseName}., +	 * @param databaseName the name of the database, +	 * @return the connection URL, +	 */, +	public String getUrl(String databaseName) {, +		Assert.hasText(databaseName, "DatabaseName must not be null.");, +		return String.format(this.url, databaseName);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConnectionTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +, +import static org.hamcrest.CoreMatchers.is;, +import static org.junit.Assert.assertThat;, +, +/**, + * Tests for {@link EmbeddedDatabaseConnection}., + *, + * @author Stephane Nicoll, + */, +public class EmbeddedDatabaseConnectionTests {, +, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void h2CustomDatabaseName() {, +		assertThat(EmbeddedDatabaseConnection.H2.getUrl("mydb"),, +				is("jdbc:h2:mem:mydb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"));, +	}, +, +	@Test, +	public void derbyCustomDatabaseName() {, +		assertThat(EmbeddedDatabaseConnection.DERBY.getUrl("myderbydb"),, +				is("jdbc:derby:memory:myderbydb;create=true"));, +	}, +, +	@Test, +	public void hsqlCustomDatabaseName() {, +		assertThat(EmbeddedDatabaseConnection.HSQL.getUrl("myhsql"),, +				is("jdbc:hsqldb:mem:myhsql"));, +	}, +]