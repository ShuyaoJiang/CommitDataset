[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.url=" + jdbcUrl), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.url=" + jdbcUrl), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariDataSourceConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +				.and("spring.datasource.type=" + HikariDataSource.class.getName()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.url=" + jdbcUrl), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariDataSourceConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +				.and("spring.datasource.type=" + HikariDataSource.class.getName()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +				.and("spring.datasource.generate-unique-name=true").applyTo(ctx);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.url=" + jdbcUrl), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariDataSourceConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +				.and("spring.datasource.type=" + HikariDataSource.class.getName()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +				.and("spring.datasource.generate-unique-name=true").applyTo(ctx);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +	private TestPropertyValues environmentProperties;, +	private TestPropertyValues systemProperties;, +		this.environmentProperties = this.environmentProperties.and(pairs);, +		this.systemProperties = this.systemProperties.and(pairs);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/MixedNeo4jRepositoriesAutoConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.url=" + jdbcUrl), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariDataSourceConfigurationTests.java, +		TestPropertyValues.of(environment).and("spring.datasource.initialize=false"), +				.and("spring.datasource.type=" + HikariDataSource.class.getName()), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +				.and("spring.datasource.generate-unique-name=true").applyTo(ctx);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +	private TestPropertyValues environmentProperties;, +	private TestPropertyValues systemProperties;, +		this.environmentProperties = this.environmentProperties.and(pairs);, +		this.systemProperties = this.systemProperties.and(pairs);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Objects;, +import java.util.stream.Stream;, +	private static final TestPropertyValues EMPTY = new TestPropertyValues(, +			Collections.emptyMap());, +	private final Map<String, Object> properties;, +	private TestPropertyValues(Map<String, Object> properties) {, +		this.properties = Collections.unmodifiableMap(properties);, +	 * Builder method to add more properties., +	 * @param pairs The property pairs to add, +	 * @return a new {@link TestPropertyValues} instance, +	public TestPropertyValues and(String... pairs) {, +		return and(Arrays.stream(pairs).map(Pair::parse));, +	private TestPropertyValues and(Stream<Pair> pairs) {, +		Map<String, Object> properties = new LinkedHashMap<>(this.properties);, +		pairs.filter(Objects::nonNull).forEach((pair) -> pair.addTo(properties));, +		return new TestPropertyValues(properties);, +		Map<String, Object> source = new LinkedHashMap<>(this.properties);, +		sources.addFirst((type.equals(Type.MAP) ? new MapPropertySource(name, source), +				: new SystemEnvironmentPropertySource(name, source)));, +	 * given property pairs. Name-value pairs can be specified with colon (":") or equals, +	 * ("=") separators., +	 * @param pairs The key value pairs for properties that need to be added to the, +	 * environment, +	public static TestPropertyValues of(String... pairs) {, +		return of(Stream.of(pairs));, +			return empty();, +		return of(Streams.stream(pairs));, +	public static TestPropertyValues of(Stream<String> pairs) {, +		if (pairs == null) {, +			return empty();, +		}, +		return empty().and(pairs.map(Pair::parse));, +	}, +, +	/**, +	 * Return a new empty {@link TestPropertyValues} instance., +	 * @return an empty instance, +	 */, +	public static TestPropertyValues empty() {, +		return EMPTY;, +	 * A single name value pair., +	 */, +	public static class Pair {, +, +		private String name;, +, +		private String value;]