[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, +		// Make sure we keep track of final authentication method, +		this.auth = finalAuth;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, +		// Make sure we keep track of final authentication method, +		this.auth = finalAuth;, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +Type `help` for a list of commands. Spring boot provides `metrics`, `beans`, `autoconfig`, +and `endpoint` commands. , +TIP: You can change the search path by settings a `shell.commandPathPatterns` property., +`src/main/resources/commands/hello.groovy`, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, +		// Make sure we keep track of final authentication method, +		this.auth = finalAuth;, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +Type `help` for a list of commands. Spring boot provides `metrics`, `beans`, `autoconfig`, +and `endpoint` commands. , +TIP: You can change the search path by settings a `shell.commandPathPatterns` property., +`src/main/resources/commands/hello.groovy`, +++ b/spring-boot-starters/spring-boot-starter-shell/src/main/resources/commands/crash/endpoint.groovy, +package commands, +, +import org.springframework.boot.actuate.endpoint.Endpoint;, +, +@Usage("Invoke actuator endpoints"), +class endpoint {, +, +	@Usage("List all available and enabled actuator endpoints"), +	@Command, +	def list(InvocationContext context) {, +		, +		context.attributes['spring.beanfactory'].getBeansOfType(Endpoint.class).each { name, endpoint ->, +			if (endpoint.isEnabled()) {, +				out.println name, +			}, +		}, +		"", +	}, +, +	@Usage("Invoke provided actuator endpoint"), +	@Command, +	def invoke(InvocationContext context, @Usage("The object name pattern") @Required @Argument String name) {, +		, +		context.attributes['spring.beanfactory'].getBeansOfType(Endpoint.class).each { n, endpoint ->, +			if (n.equals(name) && endpoint.isEnabled()) {, +				out.println endpoint.invoke(), +			}, +		}, +		"", +	}, +	, +, +}]