[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;, +	public HalJsonMvcEndpoint halJsonMvcEndpoint(, +		if (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {, +			return new HalBrowserMvcEndpoint(managementServletContext);, +		return new HalJsonMvcEndpoint(managementServletContext);, +	public DocsMvcEndpoint docsMvcEndpoint(, +		return new DocsMvcEndpoint(managementServletContext);, +	@ConditionalOnBean(DocsMvcEndpoint.class), +			ManagementServerProperties management, DocsMvcEndpoint endpoint) {, +		private HalJsonMvcEndpoint halJsonMvcEndpoint;, +						this.halJsonMvcEndpoint.getPath());, +			return this.halJsonMvcEndpoint != null && (this.management.getContextPath(), +					+ this.halJsonMvcEndpoint.getPath()).equals(path);, +			return !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;, +	public HalJsonMvcEndpoint halJsonMvcEndpoint(, +		if (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {, +			return new HalBrowserMvcEndpoint(managementServletContext);, +		return new HalJsonMvcEndpoint(managementServletContext);, +	public DocsMvcEndpoint docsMvcEndpoint(, +		return new DocsMvcEndpoint(managementServletContext);, +	@ConditionalOnBean(DocsMvcEndpoint.class), +			ManagementServerProperties management, DocsMvcEndpoint endpoint) {, +		private HalJsonMvcEndpoint halJsonMvcEndpoint;, +						this.halJsonMvcEndpoint.getPath());, +			return this.halJsonMvcEndpoint != null && (this.management.getContextPath(), +					+ this.halJsonMvcEndpoint.getPath()).equals(path);, +			return !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;, +	public HalJsonMvcEndpoint halJsonMvcEndpoint(, +		if (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {, +			return new HalBrowserMvcEndpoint(managementServletContext);, +		return new HalJsonMvcEndpoint(managementServletContext);, +	public DocsMvcEndpoint docsMvcEndpoint(, +		return new DocsMvcEndpoint(managementServletContext);, +	@ConditionalOnBean(DocsMvcEndpoint.class), +			ManagementServerProperties management, DocsMvcEndpoint endpoint) {, +		private HalJsonMvcEndpoint halJsonMvcEndpoint;, +						this.halJsonMvcEndpoint.getPath());, +			return this.halJsonMvcEndpoint != null && (this.management.getContextPath(), +					+ this.halJsonMvcEndpoint.getPath()).equals(path);, +			return !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;, +	public HalJsonMvcEndpoint halJsonMvcEndpoint(, +		if (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {, +			return new HalBrowserMvcEndpoint(managementServletContext);, +		return new HalJsonMvcEndpoint(managementServletContext);, +	public DocsMvcEndpoint docsMvcEndpoint(, +		return new DocsMvcEndpoint(managementServletContext);, +	@ConditionalOnBean(DocsMvcEndpoint.class), +			ManagementServerProperties management, DocsMvcEndpoint endpoint) {, +		private HalJsonMvcEndpoint halJsonMvcEndpoint;, +						this.halJsonMvcEndpoint.getPath());, +			return this.halJsonMvcEndpoint != null && (this.management.getContextPath(), +					+ this.halJsonMvcEndpoint.getPath()).equals(path);, +			return !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint;, +	public HalJsonMvcEndpoint halJsonMvcEndpoint(, +		if (HalBrowserMvcEndpoint.getHalBrowserLocation(resourceLoader) != null) {, +			return new HalBrowserMvcEndpoint(managementServletContext);, +		return new HalJsonMvcEndpoint(managementServletContext);, +	public DocsMvcEndpoint docsMvcEndpoint(, +		return new DocsMvcEndpoint(managementServletContext);, +	@ConditionalOnBean(DocsMvcEndpoint.class), +			ManagementServerProperties management, DocsMvcEndpoint endpoint) {, +		private HalJsonMvcEndpoint halJsonMvcEndpoint;, +						this.halJsonMvcEndpoint.getPath());, +			return this.halJsonMvcEndpoint != null && (this.management.getContextPath(), +					+ this.halJsonMvcEndpoint.getPath()).equals(path);, +			return !HalJsonMvcEndpoint.class.isAssignableFrom(controllerType);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/DocsMvcEndpoint.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]