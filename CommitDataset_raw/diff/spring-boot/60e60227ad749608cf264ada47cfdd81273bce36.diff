[+++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +To configure the more fine grained settings of a logging system you need to use the native, +configuration format supported by the `LoggingSystem` in question. By default Spring Boot, +picks up the native configuration from its default location for the system (e.g., +`classpath:/logback.xml` for Logback), but you can set the location of the config file, +using the "logging.config" property., +, +If you put a `logback.xml` in the root of your classpath it will be picked up from there., +Spring Boot provides a default base configuration that you can include if you just want, +to set levels, e.g., +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +To configure the more fine grained settings of a logging system you need to use the native, +configuration format supported by the `LoggingSystem` in question. By default Spring Boot, +picks up the native configuration from its default location for the system (e.g., +`classpath:/logback.xml` for Logback), but you can set the location of the config file, +using the "logging.config" property., +, +If you put a `logback.xml` in the root of your classpath it will be picked up from there., +Spring Boot provides a default base configuration that you can include if you just want, +to set levels, e.g., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +All the supported logging systems can have the logger levels set in the Spring, +`Environment` (so for example in `application.properties`) using ``logging.level.*=LEVEL'', +where ``LEVEL'' is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF. Example, +`application.properties`:, +, +`logging.config`. (Note however that since logging is initialized *before* the, +`ApplicationContext` is created, it isn't possible to control logging from, +`@PropertySources` in Spring `@Configuration` files.  System properties and the, +conventional Spring Boot external configuration files work just fine.)]