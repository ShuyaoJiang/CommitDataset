[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +import org.springframework.security.config.BeanIds;, +	@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS), +			return parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +import org.springframework.security.config.BeanIds;, +	@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS), +			return parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java, +import org.springframework.security.config.BeanIds;, +				.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +import org.springframework.security.config.BeanIds;, +	@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS), +			return parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java, +import org.springframework.security.config.BeanIds;, +				.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +import org.springframework.security.config.BeanIds;, + * been added or if a bean with name {@value BeanIds#SPRING_SECURITY_FILTER_CHAIN} has been configured by the, +@ConditionalOnMissingBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +import org.springframework.security.config.BeanIds;, +	@ConditionalOnBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN, search = SearchStrategy.ANCESTORS), +			return parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfigurationTests.java, +import org.springframework.security.config.BeanIds;, +				.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +import org.springframework.security.config.BeanIds;, + * been added or if a bean with name {@value BeanIds#SPRING_SECURITY_FILTER_CHAIN} has been configured by the, +@ConditionalOnMissingBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +import org.springframework.security.config.BeanIds;, +				.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN);]