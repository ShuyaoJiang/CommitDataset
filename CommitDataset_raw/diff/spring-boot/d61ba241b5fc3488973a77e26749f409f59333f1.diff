[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, + * Copyright 2012-2018 the original author or authors., +		this.dataSource = new SingleConnectionDataSource(, +				db.getUrl("testdb") + ";shutdown=true", "sa", "", false);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, + * Copyright 2012-2018 the original author or authors., +		this.dataSource = new SingleConnectionDataSource(, +				db.getUrl("testdb") + ";shutdown=true", "sa", "", false);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String databaseName = determineDatabaseName();, +		String url = (databaseName == null ? null, +				: this.embeddedDatabaseConnection.getUrl(databaseName));, +	/**, +	 * Determine the name to used based on this configuration., +	 * @return the database name to use or {@code null}, +	 * @since 2.0.0, +	 */, +	public String determineDatabaseName() {, +		if (StringUtils.hasLength(this.name)) {, +		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {, +			return "testdb";, +		}, +		return null;, +	}, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, + * Copyright 2012-2018 the original author or authors., +		this.dataSource = new SingleConnectionDataSource(, +				db.getUrl("testdb") + ";shutdown=true", "sa", "", false);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String databaseName = determineDatabaseName();, +		String url = (databaseName == null ? null, +				: this.embeddedDatabaseConnection.getUrl(databaseName));, +	/**, +	 * Determine the name to used based on this configuration., +	 * @return the database name to use or {@code null}, +	 * @since 2.0.0, +	 */, +	public String determineDatabaseName() {, +		if (StringUtils.hasLength(this.name)) {, +		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {, +			return "testdb";, +		}, +		return null;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, +				.setType(EmbeddedDatabaseConnection.get(this.classLoader).getType()), +				.setName(this.properties.determineDatabaseName());, +		this.database = builder.build();, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, + * Copyright 2012-2018 the original author or authors., +		this.dataSource = new SingleConnectionDataSource(, +				db.getUrl("testdb") + ";shutdown=true", "sa", "", false);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String databaseName = determineDatabaseName();, +		String url = (databaseName == null ? null, +				: this.embeddedDatabaseConnection.getUrl(databaseName));, +	/**, +	 * Determine the name to used based on this configuration., +	 * @return the database name to use or {@code null}, +	 * @since 2.0.0, +	 */, +	public String determineDatabaseName() {, +		if (StringUtils.hasLength(this.name)) {, +		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {, +			return "testdb";, +		}, +		return null;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, +				.setType(EmbeddedDatabaseConnection.get(this.classLoader).getType()), +				.setName(this.properties.determineDatabaseName());, +		this.database = builder.build();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +		Set<ObjectInstance> existingInstances = mBeanServer, +				.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null);, +		assertThat(mBeanServer, +				.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null).size()), +						.isEqualTo(existingInstances.size() + 2);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicatorTests.java, + * Copyright 2012-2018 the original author or authors., +		this.dataSource = new SingleConnectionDataSource(, +				db.getUrl("testdb") + ";shutdown=true", "sa", "", false);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +		String databaseName = determineDatabaseName();, +		String url = (databaseName == null ? null, +				: this.embeddedDatabaseConnection.getUrl(databaseName));, +	/**, +	 * Determine the name to used based on this configuration., +	 * @return the database name to use or {@code null}, +	 * @since 2.0.0, +	 */, +	public String determineDatabaseName() {, +		if (StringUtils.hasLength(this.name)) {, +		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {, +			return "testdb";, +		}, +		return null;, +	}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDataSourceConfiguration.java, +				.setType(EmbeddedDatabaseConnection.get(this.classLoader).getType())]