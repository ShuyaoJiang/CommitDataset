[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ConfigFileApplicationListener.class);, +, +	private final List<Object> debug = new ArrayList<Object>();, +, +		logDebugMessages();, +	private void logDebugMessages() {, +		// Debug logging is deferred because the Logging initialization might not have, +		// run at the time that config file decisions are taken, +		if (logger.isDebugEnabled()) {, +			for (Object message : this.debug) {, +				logger.debug(message);, +			}, +		}, +		this.debug.clear();, +	}, +, +		private final List<Object> debug = ConfigFileApplicationListener.this.debug;, +, +			PropertySource<?> propertySource = null;, +				propertySource = this.propertiesLoader.load(resource, group, name,, +						profile);, +, +			StringBuilder msg = new StringBuilder();, +			msg.append(propertySource == null ? "Skipped " : "Loaded ");, +			msg.append("config file ");, +			msg.append("'" + location + "' ");, +			msg.append(StringUtils.hasLength(profile) ? "for profile " : "");, +			msg.append(resource == null || !resource.exists() ? "resource not found" : "");, +			this.debug.add(msg);, +, +			return propertySource;, +			if (this.activatedProfiles) {, +				if (value != null) {, +					this.debug.add("Profiles already activated, '" + value, +							+ "' will not be applied");, +				}, +				return;, +			}, +, +				this.debug.add("Activated profiles ", +						+ StringUtils.collectionToCommaDelimitedString(profiles));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ConfigFileApplicationListener.class);, +, +	private final List<Object> debug = new ArrayList<Object>();, +, +		logDebugMessages();, +	private void logDebugMessages() {, +		// Debug logging is deferred because the Logging initialization might not have, +		// run at the time that config file decisions are taken, +		if (logger.isDebugEnabled()) {, +			for (Object message : this.debug) {, +				logger.debug(message);, +			}, +		}, +		this.debug.clear();, +	}, +, +		private final List<Object> debug = ConfigFileApplicationListener.this.debug;, +, +			PropertySource<?> propertySource = null;, +				propertySource = this.propertiesLoader.load(resource, group, name,, +						profile);, +, +			StringBuilder msg = new StringBuilder();, +			msg.append(propertySource == null ? "Skipped " : "Loaded ");, +			msg.append("config file ");, +			msg.append("'" + location + "' ");, +			msg.append(StringUtils.hasLength(profile) ? "for profile " : "");, +			msg.append(resource == null || !resource.exists() ? "resource not found" : "");, +			this.debug.add(msg);, +, +			return propertySource;, +			if (this.activatedProfiles) {, +				if (value != null) {, +					this.debug.add("Profiles already activated, '" + value, +							+ "' will not be applied");, +				}, +				return;, +			}, +, +				this.debug.add("Activated profiles ", +						+ StringUtils.collectionToCommaDelimitedString(profiles));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(RandomValuePropertySource.class);, +, +		if (logger.isTraceEnabled()) {, +			logger.trace("Generating random property for '" + name + "'");, +		}, +		logger.trace("RandomValuePropertySource add to Environment");]