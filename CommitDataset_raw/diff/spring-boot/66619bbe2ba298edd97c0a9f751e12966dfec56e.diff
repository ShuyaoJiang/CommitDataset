[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +			pooledConnectionFactory, +					.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout());, +			pooledConnectionFactory, +					.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory, +					.setReconnectOnException(pool.isReconnectOnException());, +			pooledConnectionFactory, +					.setUseAnonymousProducers(pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +			pooledConnectionFactory, +					.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout());, +			pooledConnectionFactory, +					.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory, +					.setReconnectOnException(pool.isReconnectOnException());, +			pooledConnectionFactory, +					.setUseAnonymousProducers(pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Blocking period, in milliseconds, before throwing an exception if the pool is, +		 * still full., +		public void setMaximumActiveSessionPerConnection(, +				int maximumActiveSessionPerConnection) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +			pooledConnectionFactory, +					.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout());, +			pooledConnectionFactory, +					.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory, +					.setReconnectOnException(pool.isReconnectOnException());, +			pooledConnectionFactory, +					.setUseAnonymousProducers(pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Blocking period, in milliseconds, before throwing an exception if the pool is, +		 * still full., +		public void setMaximumActiveSessionPerConnection(, +				int maximumActiveSessionPerConnection) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +			pooledConnectionFactory, +					.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout());, +			pooledConnectionFactory, +					.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());, +			pooledConnectionFactory, +					.setReconnectOnException(pool.isReconnectOnException());, +			pooledConnectionFactory, +					.setUseAnonymousProducers(pool.isUseAnonymousProducers());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Blocking period, in milliseconds, before throwing an exception if the pool is, +		 * still full., +		public void setMaximumActiveSessionPerConnection(, +				int maximumActiveSessionPerConnection) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, +				factoryCustomizers.getIfAvailable()), +						.createConnectionFactory(ActiveMQConnectionFactory.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfigurationTests.java, +		assertThat(this.context.getBeansOfType(ActiveMQConnectionFactory.class)), +				.hasSize(1);, +		ActiveMQConnectionFactory connectionFactory = this.context, +				.getBean(ActiveMQConnectionFactory.class);, +		assertThat(connectionFactory.getUserName()), +				.isEqualTo(defaultFactory.getUserName());, +		assertThat(connectionFactory.getPassword()), +				.isEqualTo(defaultFactory.getPassword());, +		assertThat(connectionFactory.getCloseTimeout()), +				.isEqualTo(defaultFactory.getCloseTimeout());, +		assertThat(connectionFactory.isNonBlockingRedelivery()), +				.isEqualTo(defaultFactory.isNonBlockingRedelivery());, +		assertThat(connectionFactory.getSendTimeout()), +				.isEqualTo(defaultFactory.getSendTimeout());, +		assertThat(connectionFactory.isTrustAllPackages()), +				.isEqualTo(defaultFactory.isTrustAllPackages());, +				"spring.activemq.user=foo", "spring.activemq.password=bar",, +		assertThat(this.context.getBeansOfType(ActiveMQConnectionFactory.class)), +				.hasSize(1);, +		ActiveMQConnectionFactory connectionFactory = this.context, +				.getBean(ActiveMQConnectionFactory.class);, +		assertThat(connectionFactory.getTrustedPackages()), +				.containsExactly("com.example.acme");, +		PooledConnectionFactory connectionFactory = this.context, +				.getBean(PooledConnectionFactory.class);, +		assertThat(connectionFactory.isBlockIfSessionPoolIsFull()), +				.isEqualTo(defaultFactory.isBlockIfSessionPoolIsFull());, +		assertThat(connectionFactory.getBlockIfSessionPoolIsFullTimeout()), +				.isEqualTo(defaultFactory.getBlockIfSessionPoolIsFullTimeout());, +		assertThat(connectionFactory.isCreateConnectionOnStartup()), +				.isEqualTo(defaultFactory.isCreateConnectionOnStartup());, +		assertThat(connectionFactory.getExpiryTimeout()), +				.isEqualTo(defaultFactory.getExpiryTimeout());, +		assertThat(connectionFactory.getIdleTimeout())]