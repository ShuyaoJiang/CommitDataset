[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		return getMainClass(source.getAST().getClasses());, +		return (classes.isEmpty() ? null : classes.get(0));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		return getMainClass(source.getAST().getClasses());, +		return (classes.isEmpty() ? null : classes.get(0));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +public class SpringTestCompilerAutoConfiguration extends CompilerAutoConfiguration {, +			GroovyCompilerConfiguration configuration, GeneratorContext generatorContext,, +			SourceUnit source, ClassNode classNode) throws CompilationFailedException {, +			AnnotationNode runwith = new AnnotationNode(ClassHelper.make("RunWith"));, +			runwith.addMember("value",, +					new ClassExpression(ClassHelper.make("SpringJUnit4ClassRunner")));, +	public void applyImports(ImportCustomizer imports) throws CompilationFailedException {, +				.addImports("org.springframework.test.context.web.WebAppConfiguration");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		return getMainClass(source.getAST().getClasses());, +		return (classes.isEmpty() ? null : classes.get(0));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +public class SpringTestCompilerAutoConfiguration extends CompilerAutoConfiguration {, +			GroovyCompilerConfiguration configuration, GeneratorContext generatorContext,, +			SourceUnit source, ClassNode classNode) throws CompilationFailedException {, +			AnnotationNode runwith = new AnnotationNode(ClassHelper.make("RunWith"));, +			runwith.addMember("value",, +					new ClassExpression(ClassHelper.make("SpringJUnit4ClassRunner")));, +	public void applyImports(ImportCustomizer imports) throws CompilationFailedException {, +				.addImports("org.springframework.test.context.web.WebAppConfiguration");, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +, +, +[indent=0,subs="attributes"], +----, +----, +[indent=0,subs="attributes"], +----, +----, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +		return getMainClass(source.getAST().getClasses());, +		return (classes.isEmpty() ? null : classes.get(0));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., + * @since 1.1.0, +public class SpringTestCompilerAutoConfiguration extends CompilerAutoConfiguration {, +			GroovyCompilerConfiguration configuration, GeneratorContext generatorContext,, +			SourceUnit source, ClassNode classNode) throws CompilationFailedException {, +			AnnotationNode runwith = new AnnotationNode(ClassHelper.make("RunWith"));, +			runwith.addMember("value",, +					new ClassExpression(ClassHelper.make("SpringJUnit4ClassRunner")));, +	public void applyImports(ImportCustomizer imports) throws CompilationFailedException {, +				.addImports("org.springframework.test.context.web.WebAppConfiguration");, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +, +, +[indent=0,subs="attributes"], +----, +----, +[indent=0,subs="attributes"], +----, +----, +, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +	 * Creates a new {@link org.springframework.boot.SpringApplication} instances from the, +	 * given sources. Subclasses may override in order to provide a custom subclass of, +	 * {@link org.springframework.boot.SpringApplication}, +	 * @since 1.1.0]