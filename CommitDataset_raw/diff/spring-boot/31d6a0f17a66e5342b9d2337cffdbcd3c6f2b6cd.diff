[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricReader.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricReader.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricWriter.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricReader.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricWriter.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.util.CollectionUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for metrics export., + *, + * @since 1.3.0, +	private MetricExportProperties properties;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +	@ExportMetricWriter, +	private Map<String, MetricWriter> writers = Collections.emptyMap();, +, +	@Bean, +	@ConditionalOnMissingBean(name = "metricWritersMetricExporter"), +	public SchedulingConfigurer metricWritersMetricExporter() {, +		Map<String, MetricWriter> writers = new HashMap<String, MetricWriter>();, +		MetricReader reader = this.endpointReader;, +		if (reader == null && !CollectionUtils.isEmpty(this.readers)) {, +			reader = new CompositeMetricReader(, +					this.readers.toArray(new MetricReader[this.readers.size()]));, +		}, +		if (reader != null) {, +			writers.putAll(this.writers);, +			return new MetricExporters(reader, writers, this.properties);, +		}, +		return new NoOpSchedulingConfigurer();, +	}, +, +			export.getRedis().setPrefix(this.prefix);, +, +	private static class NoOpSchedulingConfigurer implements SchedulingConfigurer {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricReader.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricWriter.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.util.CollectionUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for metrics export., + *, + * @since 1.3.0, +	private MetricExportProperties properties;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +	@ExportMetricWriter, +	private Map<String, MetricWriter> writers = Collections.emptyMap();, +, +	@Bean, +	@ConditionalOnMissingBean(name = "metricWritersMetricExporter"), +	public SchedulingConfigurer metricWritersMetricExporter() {, +		Map<String, MetricWriter> writers = new HashMap<String, MetricWriter>();, +		MetricReader reader = this.endpointReader;, +		if (reader == null && !CollectionUtils.isEmpty(this.readers)) {, +			reader = new CompositeMetricReader(, +					this.readers.toArray(new MetricReader[this.readers.size()]));, +		}, +		if (reader != null) {, +			writers.putAll(this.writers);, +			return new MetricExporters(reader, writers, this.properties);, +		}, +		return new NoOpSchedulingConfigurer();, +	}, +, +			export.getRedis().setPrefix(this.prefix);, +, +	private static class NoOpSchedulingConfigurer implements SchedulingConfigurer {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricsChannelAutoConfiguration.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricReader.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ExportMetricWriter.java, + * @since 1.3.0, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.util.CollectionUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for metrics export., + *, + * @since 1.3.0, +	private MetricExportProperties properties;, +, +	@Autowired(required = false), +	private MetricsEndpointMetricReader endpointReader;, +	@ExportMetricWriter, +	private Map<String, MetricWriter> writers = Collections.emptyMap();, +, +	@Bean, +	@ConditionalOnMissingBean(name = "metricWritersMetricExporter"), +	public SchedulingConfigurer metricWritersMetricExporter() {]