[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +				System.err, +						.println("Logging system failed to initialize using configuration from '", +								+ logConfig + "'");, +				ex.printStackTrace(System.err);, +				throw new IllegalStateException(ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +				System.err, +						.println("Logging system failed to initialize using configuration from '", +								+ logConfig + "'");, +				ex.printStackTrace(System.err);, +				throw new IllegalStateException(ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import java.util.List;, +import ch.qos.logback.core.status.Status;, +		List<Status> statuses = context.getStatusManager().getCopyOfStatusList();, +		if (containsError(statuses)) {, +			for (Status status : statuses) {, +				System.err.println(status);, +			}, +			throw new IllegalStateException("Logback configuration error detected");, +		}, +	}, +, +	private boolean containsError(List<Status> statuses) {, +		for (Status status : statuses) {, +			if (status.getLevel() == Status.ERROR) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +				System.err, +						.println("Logging system failed to initialize using configuration from '", +								+ logConfig + "'");, +				ex.printStackTrace(System.err);, +				throw new IllegalStateException(ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import java.util.List;, +import ch.qos.logback.core.status.Status;, +		List<Status> statuses = context.getStatusManager().getCopyOfStatusList();, +		if (containsError(statuses)) {, +			for (Status status : statuses) {, +				System.err.println(status);, +			}, +			throw new IllegalStateException("Logback configuration error detected");, +		}, +	}, +, +	private boolean containsError(List<Status> statuses) {, +		for (Status status : statuses) {, +			if (status.getLevel() == Status.ERROR) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java, +import org.junit.rules.ExpectedException;, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Rule, +		this.thrown.expect(IllegalStateException.class);, +		this.outputCapture, +				.expect(containsString("Logging system failed to initialize using configuration from 'doesnotexist.xml'"));, +	}, +, +	@Test, +	public void overrideConfigBroken() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"logging.config: classpath:logback-broken.xml");, +		this.thrown.expect(IllegalStateException.class);, +		this.outputCapture, +				.expect(containsString("Logging system failed to initialize using configuration from 'classpath:logback-broken.xml'"));, +		this.outputCapture.expect(containsString("ConsolAppender"));, +		this.initializer.initialize(this.context.getEnvironment(),, +				this.context.getClassLoader());, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +				System.err, +						.println("Logging system failed to initialize using configuration from '", +								+ logConfig + "'");, +				ex.printStackTrace(System.err);, +				throw new IllegalStateException(ex);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +import java.util.List;, +import ch.qos.logback.core.status.Status;, +		List<Status> statuses = context.getStatusManager().getCopyOfStatusList();, +		if (containsError(statuses)) {, +			for (Status status : statuses) {, +				System.err.println(status);, +			}, +			throw new IllegalStateException("Logback configuration error detected");, +		}, +	}, +, +	private boolean containsError(List<Status> statuses) {, +		for (Status status : statuses) {, +			if (status.getLevel() == Status.ERROR) {, +				return true;, +			}, +		}]