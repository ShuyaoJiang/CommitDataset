[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicator.java, + * @author Julian Devia Serna, +		JestResult healthResult = this.jestClient, +				.execute(new io.searchbox.cluster.Health.Builder().build());, +		JsonElement root = this.jsonParser.parse(healthResult.getJsonString());, +		JsonElement status = root.getAsJsonObject().get("status");, +		if (!healthResult.isSucceeded() || healthResult.getResponseCode() != 200 || status, +				.getAsString().equals(io.searchbox.cluster.Health.Status.RED.getKey())) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicator.java, + * @author Julian Devia Serna, +		JestResult healthResult = this.jestClient, +				.execute(new io.searchbox.cluster.Health.Builder().build());, +		JsonElement root = this.jsonParser.parse(healthResult.getJsonString());, +		JsonElement status = root.getAsJsonObject().get("status");, +		if (!healthResult.isSucceeded() || healthResult.getResponseCode() != 200 || status, +				.getAsString().equals(io.searchbox.cluster.Health.Status.RED.getKey())) {, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicatorTests.java, + * @author Julian Devia Serna, +				.willReturn(createJestResult("green", 200, true));, +	public void elasticsearchIsOutOfServiceByStatus() throws IOException {, +				.willReturn(createJestResult("red", 200, true));, +	@SuppressWarnings("unchecked"), +	@Test, +	public void elasticsearchIsOutOfServiceByResponseCode() throws IOException {, +		given(this.jestClient.execute(any(Action.class))), +				.willReturn(createJestResult("", 500, true));, +		Health health = this.healthIndicator.health();, +		assertThat(health.getStatus()).isEqualTo(Status.OUT_OF_SERVICE);, +	}, +, +	@SuppressWarnings("unchecked"), +	@Test, +	public void elasticsearchIsOutOfServiceBySucceeded() throws IOException {, +		given(this.jestClient.execute(any(Action.class))), +				.willReturn(createJestResult("red", 500, false));, +		Health health = this.healthIndicator.health();, +		assertThat(health.getStatus()).isEqualTo(Status.OUT_OF_SERVICE);, +	}, +, +	private static JestResult createJestResult(String status, int responseCode,, +			boolean succeeded) {, +		String json = String.format("{\"cluster_name\":\"docker-cluster\",", +				+ "\"status\":\"%s\",\"timed_out\":false,\"number_of_nodes\":1,", +				+ "\"number_of_data_nodes\":1,\"active_primary_shards\":0,", +				+ "\"active_shards\":0,\"relocating_shards\":0,\"initializing_shards\":0,", +				+ "\"unassigned_shards\":0,\"delayed_unassigned_shards\":0,", +				+ "\"number_of_pending_tasks\":0,\"number_of_in_flight_fetch\":0,", +				+ "\"task_max_waiting_in_queue_millis\":0,\"active_shards_percent_as_number\":100.0}",, +				status);, +		searchResult.setResponseCode(responseCode);, +		searchResult.setSucceeded(succeeded);]