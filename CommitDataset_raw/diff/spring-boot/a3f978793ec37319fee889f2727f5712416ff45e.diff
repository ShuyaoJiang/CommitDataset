[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractFilterRegistrationBean.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.embedded;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.EnumSet;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +import javax.servlet.FilterRegistration;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletException;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +, +/**, + * Abstract base {@link ServletContextInitializer} to register {@link Filter}s in a, + * Servlet 3.0+ container., + *, + * @author Phillip Webb, + */, +abstract class AbstractFilterRegistrationBean extends RegistrationBean {, +, +	/**, +	 * Filters that wrap the servlet request should be ordered less than or equal to this., +	 */, +	protected static final int REQUEST_WRAPPER_FILTER_MAX_ORDER = 0;, +, +	private final Log logger = LogFactory.getLog(getClass());, +, +	static final EnumSet<DispatcherType> ASYNC_DISPATCHER_TYPES = EnumSet.of(, +			DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.REQUEST,, +			DispatcherType.ASYNC);, +, +	static final EnumSet<DispatcherType> NON_ASYNC_DISPATCHER_TYPES = EnumSet, +			.of(DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.REQUEST);, +, +	private static final String[] DEFAULT_URL_MAPPINGS = { "/*" };, +, +	private Set<ServletRegistrationBean> servletRegistrationBeans = new LinkedHashSet<ServletRegistrationBean>();, +, +	private Set<String> servletNames = new LinkedHashSet<String>();, +, +	private Set<String> urlPatterns = new LinkedHashSet<String>();, +, +	private EnumSet<DispatcherType> dispatcherTypes;, +, +	private boolean matchAfter = false;, +, +	/**, +	 * Create a new instance to be registered with the specified, +	 * {@link ServletRegistrationBean}s., +	 * @param servletRegistrationBeans associate {@link ServletRegistrationBean}s, +	 */, +	AbstractFilterRegistrationBean(ServletRegistrationBean... servletRegistrationBeans) {, +		Assert.notNull(servletRegistrationBeans,, +				"ServletRegistrationBeans must not be null");, +		Collections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);, +	}, +, +	/**, +	 * Set {@link ServletRegistrationBean}s that the filter will be registered against., +	 * @param servletRegistrationBeans the Servlet registration beans, +	 */, +	public void setServletRegistrationBeans(, +			Collection<? extends ServletRegistrationBean> servletRegistrationBeans) {, +		Assert.notNull(servletRegistrationBeans,, +				"ServletRegistrationBeans must not be null");, +		this.servletRegistrationBeans = new LinkedHashSet<ServletRegistrationBean>(, +				servletRegistrationBeans);, +	}, +, +	/**, +	 * Return a mutable collection of the {@link ServletRegistrationBean} that the filter, +	 * will be registered against. {@link ServletRegistrationBean}s., +	 * @return the Servlet registration beans, +	 * @see #setServletNames, +	 * @see #setUrlPatterns, +	 */]