[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, +import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;, +@AutoConfigureAfter({ GsonAutoConfiguration.class, JacksonAutoConfiguration.class }), +	@ConditionalOnMissingBean(GsonHttpMessageConverter.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, +import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;, +@AutoConfigureAfter({ GsonAutoConfiguration.class, JacksonAutoConfiguration.class }), +	@ConditionalOnMissingBean(GsonHttpMessageConverter.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;, +import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;, +		this.context.register(GsonAutoConfiguration.class,, +		assertConverterBeanExists(GsonHttpMessageConverter.class,, +				"gsonHttpMessageConverter");, +, +		assertConverterBeanRegisteredWithHttpMessageConverters(GsonHttpMessageConverter.class);, +	}, +, +	@Test, +	public void gsonIsPreferredWhenBothGsonAndJacksonAreAvailable() {, +		this.context.register(GsonAutoConfiguration.class,, +				JacksonAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class);, +		this.context.refresh();, +		assertConverterBeanExists(GsonHttpMessageConverter.class,, +				"gsonHttpMessageConverter");, +		assertConverterBeanRegisteredWithHttpMessageConverters(GsonHttpMessageConverter.class);, +		assertEquals(0,, +				this.context.getBeansOfType(MappingJackson2HttpMessageConverter.class), +		this.context.register(GsonAutoConfiguration.class, GsonConverterConfig.class,]