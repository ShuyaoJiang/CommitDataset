[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +					|| ClassUtils.getPackageName(parentType), +							.equals(ClassUtils.getPackageName(type)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +					|| ClassUtils.getPackageName(parentType), +							.equals(ClassUtils.getPackageName(type)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +		Map<String, Object> map = (Map<String, Object>) propertiesMap.get("map");, +		List<String> list = (List<String>) propertiesMap.get("list");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +					|| ClassUtils.getPackageName(parentType), +							.equals(ClassUtils.getPackageName(type)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +		Map<String, Object> map = (Map<String, Object>) propertiesMap.get("map");, +		List<String> list = (List<String>) propertiesMap.get("list");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +					|| ClassUtils.getPackageName(parentType), +							.equals(ClassUtils.getPackageName(type)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +		Map<String, Object> map = (Map<String, Object>) propertiesMap.get("map");, +		List<String> list = (List<String>) propertiesMap.get("list");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +		assertThat(springValidatorBeans).containsExactly("defaultValidator",, +				"webFluxValidator");, +		assertThat(this.context.getBean("webFluxValidator")).isSameAs(, +				this.context.getBean(ValidatorWebFluxConfigurer.class).validator);, +		load(ValidatorJsr303WebFluxConfigurer.class,, +				new Class<?>[] { ValidationAutoConfiguration.class });, +		assertThat(((ValidatorAdapter) validator).getTarget()).isSameAs(, +				this.context.getBean(ValidatorJsr303WebFluxConfigurer.class).validator);, +		assertThat(springValidatorBeans).containsExactly("defaultValidator",, +				"webFluxValidator");, +		assertThat(this.context.getBean("webFluxValidator")).isSameAs(, +				this.context.getBean(ValidatorWebFluxConfigurer.class).validator);, +		assertThat(springValidatorBeans).containsExactly("customValidator",, +				"defaultValidator", "webFluxValidator");, +		assertThat(((ValidatorAdapter) validator).getTarget()).isSameAs(defaultValidator);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/CachePublicMetrics.java, +		if (ClassUtils.isPresent(, +				"org.springframework.cache.transaction.TransactionAwareCacheDecorator",, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +					|| ClassUtils.getPackageName(parentType), +							.equals(ClassUtils.getPackageName(type)), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +		Map<String, Object> map = (Map<String, Object>) propertiesMap.get("map");, +		List<String> list = (List<String>) propertiesMap.get("list");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpointTests.java, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +				.content("{\"configuredLevel\":\"debug\"}")), +				.andExpect(status().isNoContent());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java, +		assertThat(springValidatorBeans).containsExactly("defaultValidator",, +				"webFluxValidator");, +		assertThat(this.context.getBean("webFluxValidator")).isSameAs(, +				this.context.getBean(ValidatorWebFluxConfigurer.class).validator);, +		load(ValidatorJsr303WebFluxConfigurer.class,, +				new Class<?>[] { ValidationAutoConfiguration.class });, +		assertThat(((ValidatorAdapter) validator).getTarget()).isSameAs(, +				this.context.getBean(ValidatorJsr303WebFluxConfigurer.class).validator);, +		assertThat(springValidatorBeans).containsExactly("defaultValidator",, +				"webFluxValidator");, +		assertThat(this.context.getBean("webFluxValidator")).isSameAs(, +				this.context.getBean(ValidatorWebFluxConfigurer.class).validator);, +		assertThat(springValidatorBeans).containsExactly("customValidator",, +				"defaultValidator", "webFluxValidator");, +		assertThat(((ValidatorAdapter) validator).getTarget()).isSameAs(defaultValidator);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		Collection<Object> merged = CollectionFactory]