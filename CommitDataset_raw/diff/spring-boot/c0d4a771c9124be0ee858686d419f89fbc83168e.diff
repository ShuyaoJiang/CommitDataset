[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;, + * @author Madhura Bhave, +		Binder binder = new Binder(convertToConfigurationPropertySource(properties));, +		return binder.bind("server.port", Bindable.of(String.class)).isBound();, +	private MapConfigurationPropertySource convertToConfigurationPropertySource(, +			List<String> properties) {, +		String[] array = properties.toArray(new String[properties.size()]);, +		return new MapConfigurationPropertySource(, +				TestPropertySourceUtils.convertInlinedPropertiesToMap(array));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;, + * @author Madhura Bhave, +		Binder binder = new Binder(convertToConfigurationPropertySource(properties));, +		return binder.bind("server.port", Bindable.of(String.class)).isBound();, +	private MapConfigurationPropertySource convertToConfigurationPropertySource(, +			List<String> properties) {, +		String[] array = properties.toArray(new String[properties.size()]);, +		return new MapConfigurationPropertySource(, +				TestPropertySourceUtils.convertInlinedPropertiesToMap(array));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;, + * @author Madhura Bhave, +				&& deduceWebApplicationType() == WebApplicationType.SERVLET) {, +		ConfigurationPropertySource source = new MapConfigurationPropertySource(, +				TestPropertySourceUtils.convertInlinedPropertiesToMap(, +						configuration.getPropertySourceProperties()));, +		Binder binder = new Binder(source);, +		return binder, +				.bind("spring.main.web-application-type",, +						Bindable.of(WebApplicationType.class)), +				.orElseGet(this::deduceWebApplicationType);, +	private WebApplicationType deduceWebApplicationType() {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;, + * @author Madhura Bhave, +		Binder binder = new Binder(convertToConfigurationPropertySource(properties));, +		return binder.bind("server.port", Bindable.of(String.class)).isBound();, +	private MapConfigurationPropertySource convertToConfigurationPropertySource(, +			List<String> properties) {, +		String[] array = properties.toArray(new String[properties.size()]);, +		return new MapConfigurationPropertySource(, +				TestPropertySourceUtils.convertInlinedPropertiesToMap(array));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.boot.context.properties.source.ConfigurationPropertySource;, +import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;, + * @author Madhura Bhave, +				&& deduceWebApplicationType() == WebApplicationType.SERVLET) {, +		ConfigurationPropertySource source = new MapConfigurationPropertySource(, +				TestPropertySourceUtils.convertInlinedPropertiesToMap(, +						configuration.getPropertySourceProperties()));, +		Binder binder = new Binder(source);, +		return binder, +				.bind("spring.main.web-application-type",, +						Bindable.of(WebApplicationType.class)), +				.orElseGet(this::deduceWebApplicationType);, +	private WebApplicationType deduceWebApplicationType() {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, + * @author Madhura Bhave, +	private final String prefix = "server.servlet.";, +		String contextPath = this.environment.getProperty(this.prefix + "context-path",, +				"");]