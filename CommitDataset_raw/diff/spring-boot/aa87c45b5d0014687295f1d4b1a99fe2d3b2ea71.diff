[+++ b/spring-boot-project/spring-boot-test/pom.xml, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-stdlib</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-reflect</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-test/pom.xml, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-stdlib</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-reflect</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-test/src/main/kotlin/org/springframework/boot/test/web/client/TestRestTemplateExtensions.kt, +++ b/spring-boot-project/spring-boot-test/pom.xml, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-stdlib</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jetbrains.kotlin</groupId>, +			<artifactId>kotlin-reflect</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-test/src/main/kotlin/org/springframework/boot/test/web/client/TestRestTemplateExtensions.kt, +++ b/spring-boot-project/spring-boot-test/src/test/kotlin/org/springframework/boot/test/web/client/TestRestTemplateExtensionsTests.kt, +import org.mockito.Mockito.times, +import org.mockito.Mockito.verify, +		verify(template, times(1)).exchange(url, method, entity,, +				object : ParameterizedTypeReference<List<Foo>>() {}, var1, var2), +		verify(template, times(1)).exchange(url, method, entity,, +				object : ParameterizedTypeReference<List<Foo>>() {}, vars), +		verify(template, times(1)).exchange(url, method, entity,, +				object : ParameterizedTypeReference<List<Foo>>() {}), +		verify(template, times(1)).exchange(entity,, +				object : ParameterizedTypeReference<List<Foo>>() {}), +		val extensions = Class.forName(, +				"org.springframework.boot.test.web.client.TestRestTemplateExtensionsKt"), +					val parameters = mutableListOf<Class<*>>(TestRestTemplate::class.java), +							.apply { addAll(method.parameterTypes.filter { it != kClass.java }) }, +					val f = extensions.getDeclaredMethod(method.name,, +							*parameters.toTypedArray()).kotlinFunction!!, +					Assert.assertEquals(listOf(Any::class.createType()),, +							f.typeParameters[0].upperBounds)]