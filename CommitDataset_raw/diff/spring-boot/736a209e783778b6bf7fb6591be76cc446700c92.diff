[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryException.java, + * Exception thrown when multiple {@link SessionRepository} implementations are available, + * with no way to know which implementation should be used., +	private final List<Class<? extends SessionRepository<?>>> availableCandidates;, +			List<Class<? extends SessionRepository<?>>> availableCandidates) {, +	public List<Class<? extends SessionRepository<?>>> getAvailableCandidates() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryException.java, + * Exception thrown when multiple {@link SessionRepository} implementations are available, + * with no way to know which implementation should be used., +	private final List<Class<? extends SessionRepository<?>>> availableCandidates;, +			List<Class<? extends SessionRepository<?>>> availableCandidates) {, +	public List<Class<? extends SessionRepository<?>>> getAvailableCandidates() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzer.java, +		for (Class<? extends SessionRepository<?>> candidate : cause, +				.getAvailableCandidates()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryException.java, + * Exception thrown when multiple {@link SessionRepository} implementations are available, + * with no way to know which implementation should be used., +	private final List<Class<? extends SessionRepository<?>>> availableCandidates;, +			List<Class<? extends SessionRepository<?>>> availableCandidates) {, +	public List<Class<? extends SessionRepository<?>>> getAvailableCandidates() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzer.java, +		for (Class<? extends SessionRepository<?>> candidate : cause, +				.getAvailableCandidates()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +			List<Class<? extends SessionRepository<?>>> candidates = new ArrayList<>();, +		@SuppressWarnings("unchecked"), +		private void addCandidate(List<Class<? extends SessionRepository<?>>> candidates,, +				String fqn) {, +				Class<? extends SessionRepository<?>> candidate = (Class<? extends SessionRepository<?>>) this.classLoader, +						.loadClass(fqn);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryException.java, + * Exception thrown when multiple {@link SessionRepository} implementations are available, + * with no way to know which implementation should be used., +	private final List<Class<? extends SessionRepository<?>>> availableCandidates;, +			List<Class<? extends SessionRepository<?>>> availableCandidates) {, +	public List<Class<? extends SessionRepository<?>>> getAvailableCandidates() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzer.java, +		for (Class<? extends SessionRepository<?>> candidate : cause, +				.getAvailableCandidates()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +			List<Class<? extends SessionRepository<?>>> candidates = new ArrayList<>();, +		@SuppressWarnings("unchecked"), +		private void addCandidate(List<Class<? extends SessionRepository<?>>> candidates,, +				String fqn) {, +				Class<? extends SessionRepository<?>> candidate = (Class<? extends SessionRepository<?>>) this.classLoader, +						.loadClass(fqn);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzerTests.java, +	@SafeVarargs, +	private final Exception createFailure(, +			Class<? extends SessionRepository<?>>... candidates) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryException.java, + * Exception thrown when multiple {@link SessionRepository} implementations are available, + * with no way to know which implementation should be used., +	private final List<Class<? extends SessionRepository<?>>> availableCandidates;, +			List<Class<? extends SessionRepository<?>>> availableCandidates) {, +	public List<Class<? extends SessionRepository<?>>> getAvailableCandidates() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzer.java, +		for (Class<? extends SessionRepository<?>> candidate : cause, +				.getAvailableCandidates()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +			List<Class<? extends SessionRepository<?>>> candidates = new ArrayList<>();, +		@SuppressWarnings("unchecked"), +		private void addCandidate(List<Class<? extends SessionRepository<?>>> candidates,, +				String fqn) {, +				Class<? extends SessionRepository<?>> candidate = (Class<? extends SessionRepository<?>>) this.classLoader, +						.loadClass(fqn);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzerTests.java, +	@SafeVarargs, +	private final Exception createFailure(, +			Class<? extends SessionRepository<?>>... candidates) {, +++ b/spring-boot-dependencies/pom.xml, +		<spring-session.version>2.0.0.M4</spring-session.version>]