[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +	public Set<String> getNamesForType(Class<?> type) {, +	public Set<String> getNamesForAnnotation(Class<? extends Annotation> annotation) {, +	/**, +	 * Factory method to get the {@link BeanTypeRegistry} for a given {@link BeanFactory}., +	 * @param beanFactory the source bean factory, +	 * @return the {@link BeanTypeRegistry} for the given bean factory, +	 */, +	static BeanTypeRegistry get(ListableBeanFactory beanFactory) {, +		Assert.isInstanceOf(DefaultListableBeanFactory.class, beanFactory);, +		DefaultListableBeanFactory listableBeanFactory = (DefaultListableBeanFactory) beanFactory;, +		Assert.isTrue(listableBeanFactory.isAllowEagerClassLoading(),, +				"Bean factory must allow eager class loading");, +		if (!listableBeanFactory.containsLocalBean(BEAN_NAME)) {, +			BeanDefinition bd = BeanDefinitionBuilder, +					.genericBeanDefinition(BeanTypeRegistry.class,, +							() -> new BeanTypeRegistry(, +									(DefaultListableBeanFactory) beanFactory)), +					.getBeanDefinition();, +			listableBeanFactory.registerBeanDefinition(BEAN_NAME, bd);, +		}, +		return listableBeanFactory.getBean(BEAN_NAME, BeanTypeRegistry.class);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +	public Set<String> getNamesForType(Class<?> type) {, +	public Set<String> getNamesForAnnotation(Class<? extends Annotation> annotation) {, +	/**, +	 * Factory method to get the {@link BeanTypeRegistry} for a given {@link BeanFactory}., +	 * @param beanFactory the source bean factory, +	 * @return the {@link BeanTypeRegistry} for the given bean factory, +	 */, +	static BeanTypeRegistry get(ListableBeanFactory beanFactory) {, +		Assert.isInstanceOf(DefaultListableBeanFactory.class, beanFactory);, +		DefaultListableBeanFactory listableBeanFactory = (DefaultListableBeanFactory) beanFactory;, +		Assert.isTrue(listableBeanFactory.isAllowEagerClassLoading(),, +				"Bean factory must allow eager class loading");, +		if (!listableBeanFactory.containsLocalBean(BEAN_NAME)) {, +			BeanDefinition bd = BeanDefinitionBuilder, +					.genericBeanDefinition(BeanTypeRegistry.class,, +							() -> new BeanTypeRegistry(, +									(DefaultListableBeanFactory) beanFactory)), +					.getBeanDefinition();, +			listableBeanFactory.registerBeanDefinition(BEAN_NAME, bd);, +		}, +		return listableBeanFactory.getBean(BEAN_NAME, BeanTypeRegistry.class);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, + * Copyright 2012-2018 the original author or authors., +import org.junit.After;, +	@After, +	public void cleanup() {, +		this.context.close();, +	}, +, +		load(FooConfiguration.class, OnBeanNameConfiguration.class);, +		load(OnBeanNameConfiguration.class, FooConfiguration.class);, +		// Ideally this would be false, but the ordering is a problem, +		load(FooConfiguration.class, OnBeanNameAndTypeConfiguration.class);, +		// Arguably this should be true, but as things are implemented the conditions, +		// specified in the different attributes of @ConditionalOnBean are combined with, +		// logical OR (not AND) so if any of them match the condition is true., +		load(FooConfiguration.class);, +		load(FooConfiguration.class);, +		load(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class);, +		load(FooConfiguration.class, OnAnnotationConfiguration.class);, +		load(FooConfiguration.class, OnAnnotationConfiguration.class,, +		load(FactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,, +		load(ComponentScannedFactoryBeanBeanMethodConfiguration.class,, +		load(ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class,, +		load(new Class<?>[] { FactoryBeanWithBeanMethodArgumentsConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class }, "theValue:foo");, +		load(ConcreteFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,, +		load(UnhelpfulFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,, +		load(RegisteredFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class,, +		load(NonspecificFactoryBeanClassAttributeConfiguration.class,, +		load(NonspecificFactoryBeanStringAttributeConfiguration.class,, +		load(FactoryBeanXmlConfiguration.class, ConditionalOnFactoryBean.class,, +		load(CustomExampleBeanConfiguration.class, ConditionalOnIgnoredSubclass.class,, +		load(CustomExampleBeanConfiguration.class,, +		load(ExampleBeanConfiguration.class);, +		load(ConcreteFactoryBeanConfiguration.class,, +	private void load(Class<?>... configs) {, +		load(configs, new String[] {});, +	}, +, +	private void load(Class<?>[] configs, String... environmentValues) {, +		this.context.register(configs);, +		TestPropertyValues.of(environmentValues).applyTo(this.context);, +		this.context.refresh();, +	}, +]