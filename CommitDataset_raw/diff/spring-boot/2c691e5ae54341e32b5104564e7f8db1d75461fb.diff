[+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +import static org.hamcrest.Matchers.not;, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +	}, +, +	@Test, +	public void jarCreationWithIncludes() throws Exception {, +		File jar = new File("target/test-app.jar");, +		Invocation invocation = this.cli.invoke("jar", jar.getAbsolutePath(),, +				"--include", "-public/**,-resources/**", "jar.groovy");, +		invocation.await();, +		assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length());, +		assertTrue(jar.exists());, +, +		Process process = new JavaExecutable().processBuilder("-jar",, +				jar.getAbsolutePath()).start();, +		invocation = new Invocation(process);, +		invocation.await();, +, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		assertThat(invocation.getStandardOutput(), containsString("Hello World!"));, +				not(containsString("/public/public.txt")));, +		assertThat(invocation.getStandardOutput(),, +				not(containsString("/resources/resource.txt")));, +		assertThat(invocation.getStandardOutput(), containsString("/static/static.txt"));, +		assertThat(invocation.getStandardOutput(),, +				containsString("/templates/template.txt"));, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +import static org.hamcrest.Matchers.not;, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +	}, +, +	@Test, +	public void jarCreationWithIncludes() throws Exception {, +		File jar = new File("target/test-app.jar");, +		Invocation invocation = this.cli.invoke("jar", jar.getAbsolutePath(),, +				"--include", "-public/**,-resources/**", "jar.groovy");, +		invocation.await();, +		assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length());, +		assertTrue(jar.exists());, +, +		Process process = new JavaExecutable().processBuilder("-jar",, +				jar.getAbsolutePath()).start();, +		invocation = new Invocation(process);, +		invocation.await();, +, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		assertThat(invocation.getStandardOutput(), containsString("Hello World!"));, +				not(containsString("/public/public.txt")));, +		assertThat(invocation.getStandardOutput(),, +				not(containsString("/resources/resource.txt")));, +		assertThat(invocation.getStandardOutput(), containsString("/static/static.txt"));, +		assertThat(invocation.getStandardOutput(),, +				containsString("/templates/template.txt"));, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +			return result == null ? 0, +					: result.isHangup() ? (result.getCode() > 0 ? result.getCode() : 0), +							: 0;, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +import static org.hamcrest.Matchers.not;, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +	}, +, +	@Test, +	public void jarCreationWithIncludes() throws Exception {, +		File jar = new File("target/test-app.jar");, +		Invocation invocation = this.cli.invoke("jar", jar.getAbsolutePath(),, +				"--include", "-public/**,-resources/**", "jar.groovy");, +		invocation.await();, +		assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length());, +		assertTrue(jar.exists());, +, +		Process process = new JavaExecutable().processBuilder("-jar",, +				jar.getAbsolutePath()).start();, +		invocation = new Invocation(process);, +		invocation.await();, +, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		assertThat(invocation.getStandardOutput(), containsString("Hello World!"));, +				not(containsString("/public/public.txt")));, +		assertThat(invocation.getStandardOutput(),, +				not(containsString("/resources/resource.txt")));, +		assertThat(invocation.getStandardOutput(), containsString("/static/static.txt"));, +		assertThat(invocation.getStandardOutput(),, +				containsString("/templates/template.txt"));, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java, +			return result == null ? 0, +					: result.isHangup() ? (result.getCode() > 0 ? result.getCode() : 0), +							: 0;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +					.withRequiredArg().withValuesSeparatedBy(",").defaultsTo("");, +					.withRequiredArg().withValuesSeparatedBy(",").defaultsTo("");, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +import static org.hamcrest.Matchers.not;, +		assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama"));, +	}, +]