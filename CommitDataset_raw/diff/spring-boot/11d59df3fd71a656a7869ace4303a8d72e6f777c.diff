[+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +	private boolean registerErrorPageFilter = true;, +, +	/**, +	 * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if, +	 * error page mappings should be handled via the Servlet container and not Spring, +	 * Boot., +	 * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered., +	 */, +	protected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter) {, +		this.registerErrorPageFilter = registerErrorPageFilter;, +	}, +, +		if (this.registerErrorPageFilter) {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java, +	private boolean registerErrorPageFilter = true;, +, +	/**, +	 * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if, +	 * error page mappings should be handled via the Servlet container and not Spring, +	 * Boot., +	 * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered., +	 */, +	protected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter) {, +		this.registerErrorPageFilter = registerErrorPageFilter;, +	}, +, +		if (this.registerErrorPageFilter) {, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/web/SpringBootServletInitializerTests.java, + * Tests for {@link SpringBootServletInitializer}., +	@SuppressWarnings("rawtypes"), +	@Test, +	public void withErrorPageFilterNotRegistered() throws Exception {, +		new WithErrorPageFilterNotRegistered(), +				.createRootApplicationContext(this.servletContext);, +		assertThat(this.application.getSources(),, +				equalToSet(WithErrorPageFilterNotRegistered.class));, +	}, +, +	public class WithErrorPageFilterNotRegistered extends, +			MockSpringBootServletInitializer {, +, +		public WithErrorPageFilterNotRegistered() {, +			setRegisterErrorPageFilter(false);, +		}, +, +	}, +, +	@Configuration]