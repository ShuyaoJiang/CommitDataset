[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.junit.Before;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.util.SocketUtils;, +	private static ThreadLocal<Ports> ports = new ThreadLocal<Ports>();, +, +	@Before, +	public void grabPorts() {, +		ports.set(new Ports());, +	}, +, +				ServerPortConfig.class,, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, "endpointoutput");, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, null);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		assertThat(managementPort, not(equalTo(ports.get().server)));, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, null);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "server.port:", +				+ ports.get().server, "management.port:" + ports.get().management);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		this.applicationContext.register(RootConfig.class, ServerPortConfig.class,, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/test/endpoint", ports.get().server, "endpointoutput");, +		assertContent("/controller", ports.get().server, null);, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, null);, +	private static class Ports {, +, +		int server = SocketUtils.findAvailableTcpPort();, +, +		int management = SocketUtils.findAvailableTcpPort();, +, +	}, +, +, +	}, +, +	@Configuration, +	public static class ServerPortConfig {, +, +		@Bean, +		public ServerProperties serverProperties() {, +			ServerProperties properties = new ServerProperties();, +			properties.setPort(ports.get().server);, +			return properties;, +		}, +, +	@Import(ServerPortConfig.class), +			properties.setPort(ports.get().management);, +	@Import(ServerPortConfig.class), +	@Import(ServerPortConfig.class), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.junit.Before;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.util.SocketUtils;, +	private static ThreadLocal<Ports> ports = new ThreadLocal<Ports>();, +, +	@Before, +	public void grabPorts() {, +		ports.set(new Ports());, +	}, +, +				ServerPortConfig.class,, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, "endpointoutput");, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, null);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		assertThat(managementPort, not(equalTo(ports.get().server)));, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, null);, +		EnvironmentTestUtils.addEnvironment(this.applicationContext, "server.port:", +				+ ports.get().server, "management.port:" + ports.get().management);, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/endpoint", ports.get().management, "endpointoutput");, +		this.applicationContext.register(RootConfig.class, ServerPortConfig.class,, +		assertContent("/controller", ports.get().server, "controlleroutput");]