[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyNameBuilder.ElementValueProcessor;, +			ElementValueProcessor.identity().withValidName());, +		this.parent = (parent == EMPTY ? null : parent);, +		return BUILDER.from(this, index);, +			return BUILDER.from(this, element);, +		return BUILDER.from(name, '.');, +			this.indexed = isIndexed(value);, +		public static boolean isIndexed(String value) {, +			return value.startsWith("[") && value.endsWith("]");, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyNameBuilder.ElementValueProcessor;, +			ElementValueProcessor.identity().withValidName());, +		this.parent = (parent == EMPTY ? null : parent);, +		return BUILDER.from(this, index);, +			return BUILDER.from(this, element);, +		return BUILDER.from(name, '.');, +			this.indexed = isIndexed(value);, +		public static boolean isIndexed(String value) {, +			return value.startsWith("[") && value.endsWith("]");, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameBuilder.java, +import java.util.Map;, +import org.springframework.util.ConcurrentReferenceHashMap;, +class ConfigurationPropertyNameBuilder {, +, +	private static final Element INDEX_ZERO_ELEMENT = new Element("[0]");, +	private final Map<String, ConfigurationPropertyName> nameCache = new ConcurrentReferenceHashMap<>();, +	ConfigurationPropertyNameBuilder() {, +		this(ElementValueProcessor.identity());, +	ConfigurationPropertyNameBuilder(ElementValueProcessor processor) {, +	 * Build using the specified name split up into elements using a known separator. For, +	 * example {@code from("foo.bar", '.')} will return a new builder containing the, +	 * elements "{@code foo}" and "{@code bar}". Any element in square brackets will be, +	 * considered "indexed" and will not be considered for splitting., +	public ConfigurationPropertyName from(String name, char separator) {, +		ConfigurationPropertyName result = this.nameCache.get(name);, +		if (result != null) {, +			return result;, +		}, +		result = from(elements.stream().filter(Objects::nonNull), +		this.nameCache.put(name, result);, +		return result;, +	private ConfigurationPropertyName from(Iterator<Element> elements) {, +		ConfigurationPropertyName name = null;, +		while (elements.hasNext()) {, +			name = new ConfigurationPropertyName(name, elements.next());, +		}, +		Assert.state(name != null, "At least one element must be defined");, +		return name;, +	public ConfigurationPropertyName from(ConfigurationPropertyName parent, int index) {, +		if (index == 0) {, +			return new ConfigurationPropertyName(parent, INDEX_ZERO_ELEMENT);, +		}, +		return from(parent, "[" + index + "]");, +, +	public ConfigurationPropertyName from(ConfigurationPropertyName parent,, +			String elementValue) {, +		return new ConfigurationPropertyName(parent, buildElement(elementValue));, +		static ElementValueProcessor identity() {, +		/**, +		 * Extend this processor with a to enforce standard element name rules., +		 * @return an element processor that additionally enforces a valid name, +		 */, +		default ElementValueProcessor withValidName() {, +			return (value) -> {, +				value = apply(value);, +				if (!Element.isIndexed(value)) {, +					for (int i = 0; i < value.length(); i++) {, +						char ch = value.charAt(i);, +						boolean isAlpha = ch >= 'a' && ch <= 'z';, +						boolean isNumeric = ch >= '0' && ch <= '9';, +						if (i == 0 && !isAlpha || !(isAlpha || isNumeric || ch == '-')) {, +							throw new IllegalArgumentException(, +									"Element value '" + value + "' is not valid");, +						}, +					}, +				}, +				return value;, +			};, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyNameBuilder.ElementValueProcessor;, +			ElementValueProcessor.identity().withValidName());, +		this.parent = (parent == EMPTY ? null : parent);, +		return BUILDER.from(this, index);, +			return BUILDER.from(this, element);, +		return BUILDER.from(name, '.');, +			this.indexed = isIndexed(value);, +		public static boolean isIndexed(String value) {, +			return value.startsWith("[") && value.endsWith("]");, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameBuilder.java, +import java.util.Map;, +import org.springframework.util.ConcurrentReferenceHashMap;]