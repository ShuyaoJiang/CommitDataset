[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, +		List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, +				managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), +		this.resolutionContext.setManagedDependencies(ManagedDependencies, +				.get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, +		List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, +				managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), +		this.resolutionContext.setManagedDependencies(ManagedDependencies, +				.get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, +		List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, +				managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), +		this.resolutionContext.setManagedDependencies(ManagedDependencies, +				.get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomDependencies;, + * {@link PomDependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, +		List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, +				managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), +		this.resolutionContext.setManagedDependencies(ManagedDependencies, +				.get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomDependencies;, + * {@link PomDependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java, +import org.springframework.boot.dependency.tools.ManagedDependencies;, +		springVersion = ManagedDependencies.get().find("spring-core").getVersion();, +		bootVersion = ManagedDependencies.get().find("spring-boot").getVersion();, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrabMetadataTransformation.java, +import org.springframework.boot.dependency.tools.Dependencies;, +import org.springframework.boot.dependency.tools.PropertiesFileDependencies;, +		List<Dependencies> managedDependencies = new ArrayList<Dependencies>(uris.length);, +				managedDependencies.add(new PropertiesFileDependencies(uri.toURL(), +		this.resolutionContext.setManagedDependencies(ManagedDependencies, +				.get(managedDependencies));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.Dependencies;, + * {@link ArtifactCoordinatesResolver} backed by {@link Dependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomDependencies;, + * {@link PomDependencies}., +		this(ManagedDependencies.get());, +++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java, +import org.springframework.boot.dependency.tools.ManagedDependencies;, +		springVersion = ManagedDependencies.get().find("spring-core").getVersion();, +		bootVersion = ManagedDependencies.get().find("spring-boot").getVersion();, +++ b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/AbstractDependencies.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.dependency.tools;, +, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +/**, + * Abstract base implementation for {@link Dependencies}., + * , + * @author Phillip Webb, + * @since 1.1.0, + */]