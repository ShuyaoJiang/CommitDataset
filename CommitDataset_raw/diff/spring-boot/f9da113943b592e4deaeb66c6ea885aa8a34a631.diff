[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.HashSet;, +import org.springframework.beans.propertyeditors.FileEditor;, +	private static final Set<Class<?>> EXCLUDED_EDITORS;, +	static {, +		Set<Class<?>> excluded = new HashSet<>();, +		excluded.add(FileEditor.class); // gh-12163, +		EXCLUDED_EDITORS = Collections.unmodifiableSet(excluded);, +	}, +, +			if (editor == null || EXCLUDED_EDITORS.contains(editor.getClass())) {, +				return null;, +			}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.HashSet;, +import org.springframework.beans.propertyeditors.FileEditor;, +	private static final Set<Class<?>> EXCLUDED_EDITORS;, +	static {, +		Set<Class<?>> excluded = new HashSet<>();, +		excluded.add(FileEditor.class); // gh-12163, +		EXCLUDED_EDITORS = Collections.unmodifiableSet(excluded);, +	}, +, +			if (editor == null || EXCLUDED_EDITORS.contains(editor.getClass())) {, +				return null;, +			}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesTests.java, +import java.io.File;, +	@Test, +	public void loadWhenBindingCurrentDirectoryToFileShouldBind() {, +		load(FileProperties.class, "test.file=.");, +		FileProperties bean = this.context.getBean(FileProperties.class);, +		assertThat(bean.getFile()).isEqualTo(new File("."));, +	}, +, +	@EnableConfigurationProperties, +	@ConfigurationProperties(prefix = "test"), +	static class FileProperties {, +, +		private File file;, +, +		public File getFile() {, +			return this.file;, +		}, +, +		public void setFile(File file) {, +			this.file = file;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.HashSet;, +import org.springframework.beans.propertyeditors.FileEditor;, +	private static final Set<Class<?>> EXCLUDED_EDITORS;, +	static {, +		Set<Class<?>> excluded = new HashSet<>();, +		excluded.add(FileEditor.class); // gh-12163, +		EXCLUDED_EDITORS = Collections.unmodifiableSet(excluded);, +	}, +, +			if (editor == null || EXCLUDED_EDITORS.contains(editor.getClass())) {, +				return null;, +			}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesTests.java, +import java.io.File;, +	@Test, +	public void loadWhenBindingCurrentDirectoryToFileShouldBind() {, +		load(FileProperties.class, "test.file=.");, +		FileProperties bean = this.context.getBean(FileProperties.class);, +		assertThat(bean.getFile()).isEqualTo(new File("."));, +	}, +, +	@EnableConfigurationProperties, +	@ConfigurationProperties(prefix = "test"), +	static class FileProperties {, +, +		private File file;, +, +		public File getFile() {, +			return this.file;, +		}, +, +		public void setFile(File file) {, +			this.file = file;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BindConverterTests.java, +import java.io.File;, +	@Test, +	public void convertWhenConvertingToFileShouldExcludeFileEditor() {, +		// For back compatibility we want true file conversion and not an accidental, +		// classpath resource reference. See gh-12163, +		BindConverter bindConverter = new BindConverter(new GenericConversionService(),, +				null);, +		assertThat(bindConverter.canConvert(".", ResolvableType.forClass(File.class))), +				.isFalse();, +		this.thrown.expect(ConverterNotFoundException.class);]