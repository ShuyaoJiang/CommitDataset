[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/method/OAuth2MethodSecurityConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.security.access.PermissionEvaluator;, +import org.springframework.security.authentication.AuthenticationTrustResolver;, +public class OAuth2MethodSecurityConfiguration implements BeanFactoryPostProcessor,, +		ApplicationContextAware {, +, +	private ApplicationContext applicationContext;, +, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext), +			throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +		OAuth2ExpressionHandlerInjectionPostProcessor processor = new OAuth2ExpressionHandlerInjectionPostProcessor(, +				this.applicationContext);, +		private ApplicationContext applicationContext;, +, +		public OAuth2ExpressionHandlerInjectionPostProcessor(, +				ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +, +			if (bean instanceof DefaultMethodSecurityExpressionHandler, +					&& !(bean instanceof OAuth2MethodSecurityExpressionHandler)) {, +				return getExpressionHandler((DefaultMethodSecurityExpressionHandler) bean);, +, +		private OAuth2MethodSecurityExpressionHandler getExpressionHandler(, +				DefaultMethodSecurityExpressionHandler bean) {, +			OAuth2MethodSecurityExpressionHandler handler = new OAuth2MethodSecurityExpressionHandler();, +			handler.setApplicationContext(this.applicationContext);, +			AuthenticationTrustResolver trustResolver = findInContext(AuthenticationTrustResolver.class);, +			if (trustResolver != null) {, +				handler.setTrustResolver(trustResolver);, +			}, +			PermissionEvaluator permissions = findInContext(PermissionEvaluator.class);, +			if (permissions != null) {, +				handler.setPermissionEvaluator(permissions);, +			}, +			handler.setExpressionParser(bean.getExpressionParser());, +			return handler;, +		}, +, +		private <T> T findInContext(Class<T> type) {, +			if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(, +					this.applicationContext, type).length == 1) {, +				return this.applicationContext.getBean(type);, +			}, +			return null;, +		}]