[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +		input.forEach((entryKey, value) -> {, +			String key = getFullKey(path, entryKey);, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +		input.forEach((entryKey, value) -> {, +			String key = getFullKey(path, entryKey);, +		});, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +		String namePrefix = (prefix == null ? "" : prefix + ".");, +		map.forEach((key, value) -> extract(namePrefix + key, result, value));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +		input.forEach((entryKey, value) -> {, +			String key = getFullKey(path, entryKey);, +		});, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +		String namePrefix = (prefix == null ? "" : prefix + ".");, +		map.forEach((key, value) -> extract(namePrefix + key, result, value));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) ->, +				context.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +		input.forEach((entryKey, value) -> {, +			String key = getFullKey(path, entryKey);, +		});, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +		String namePrefix = (prefix == null ? "" : prefix + ".");, +		map.forEach((key, value) -> extract(namePrefix + key, result, value));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) ->, +				context.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) ->, +				context.addLocaleEncodingMappingParameter(locale.toString(), charset.toString()));, +		getJsp().getInitParameters().forEach(jspServlet::addInitParameter);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		beans.forEach((beanName, bean) -> {, +		});, +		map.forEach((key, value) -> {, +		});, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, +		healths.values().forEach(health -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +		input.forEach((entryKey, value) -> {, +			String key = getFullKey(path, entryKey);, +		});, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java, +		String namePrefix = (prefix == null ? "" : prefix + ".");, +		map.forEach((key, value) -> extract(namePrefix + key, result, value));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) ->, +				context.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) ->, +				context.addLocaleEncodingMappingParameter(locale.toString(), charset.toString()));, +		getJsp().getInitParameters().forEach(jspServlet::addInitParameter);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistence.java, +		sessionData.forEach((key, value) ->, +				session.put(key, new SerializablePersistentSession(value)));, +		session.forEach((key, value) -> {]