[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/SsoSecurityConfigurer.java, +import java.util.Collections;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;, +import org.springframework.security.web.authentication.HttpStatusEntryPoint;, +import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;, +import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;, +import org.springframework.web.accept.ContentNegotiationStrategy;, +import org.springframework.web.accept.HeaderContentNegotiationStrategy;, +		addAuthenticationEntryPoint(http, sso);, +	}, +, +	private void addAuthenticationEntryPoint(HttpSecurity http, OAuth2SsoProperties sso), +			throws Exception {, +		ExceptionHandlingConfigurer<HttpSecurity> exceptions = http.exceptionHandling();, +		ContentNegotiationStrategy contentNegotiationStrategy = http, +				.getSharedObject(ContentNegotiationStrategy.class);, +		if (contentNegotiationStrategy == null) {, +			contentNegotiationStrategy = new HeaderContentNegotiationStrategy();, +		}, +		MediaTypeRequestMatcher preferredMatcher = new MediaTypeRequestMatcher(, +				contentNegotiationStrategy, MediaType.APPLICATION_XHTML_XML,, +				new MediaType("image", "*"), MediaType.TEXT_HTML, MediaType.TEXT_PLAIN);, +		preferredMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));, +		exceptions.defaultAuthenticationEntryPointFor(, +				new LoginUrlAuthenticationEntryPoint(sso.getLoginPath()),, +				preferredMatcher);, +		// When multiple entry points are provided the default is the first one, +		exceptions.defaultAuthenticationEntryPointFor(, +				new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),, +				new RequestHeaderRequestMatcher("X-Requested-With", "XMLHttpRequest"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/SsoSecurityConfigurer.java, +import java.util.Collections;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;, +import org.springframework.security.web.authentication.HttpStatusEntryPoint;, +import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;, +import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;, +import org.springframework.web.accept.ContentNegotiationStrategy;, +import org.springframework.web.accept.HeaderContentNegotiationStrategy;, +		addAuthenticationEntryPoint(http, sso);, +	}, +, +	private void addAuthenticationEntryPoint(HttpSecurity http, OAuth2SsoProperties sso), +			throws Exception {, +		ExceptionHandlingConfigurer<HttpSecurity> exceptions = http.exceptionHandling();, +		ContentNegotiationStrategy contentNegotiationStrategy = http, +				.getSharedObject(ContentNegotiationStrategy.class);, +		if (contentNegotiationStrategy == null) {, +			contentNegotiationStrategy = new HeaderContentNegotiationStrategy();, +		}, +		MediaTypeRequestMatcher preferredMatcher = new MediaTypeRequestMatcher(, +				contentNegotiationStrategy, MediaType.APPLICATION_XHTML_XML,, +				new MediaType("image", "*"), MediaType.TEXT_HTML, MediaType.TEXT_PLAIN);, +		preferredMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));, +		exceptions.defaultAuthenticationEntryPointFor(, +				new LoginUrlAuthenticationEntryPoint(sso.getLoginPath()),, +				preferredMatcher);, +		// When multiple entry points are provided the default is the first one, +		exceptions.defaultAuthenticationEntryPointFor(, +				new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),, +				new RequestHeaderRequestMatcher("X-Requested-With", "XMLHttpRequest"));, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/sso/BasicOAuth2SsoConfigurationTests.java, +	@Test, +	public void homePageSends401ToXhr() throws Exception {, +		this.mvc.perform(get("/").header("X-Requested-With", "XMLHttpRequest")), +				.andExpect(status().isUnauthorized());, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/SsoSecurityConfigurer.java, +import java.util.Collections;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;, +import org.springframework.security.web.authentication.HttpStatusEntryPoint;, +import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;, +import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;, +import org.springframework.web.accept.ContentNegotiationStrategy;, +import org.springframework.web.accept.HeaderContentNegotiationStrategy;, +		addAuthenticationEntryPoint(http, sso);, +	}, +, +	private void addAuthenticationEntryPoint(HttpSecurity http, OAuth2SsoProperties sso), +			throws Exception {, +		ExceptionHandlingConfigurer<HttpSecurity> exceptions = http.exceptionHandling();, +		ContentNegotiationStrategy contentNegotiationStrategy = http, +				.getSharedObject(ContentNegotiationStrategy.class);, +		if (contentNegotiationStrategy == null) {, +			contentNegotiationStrategy = new HeaderContentNegotiationStrategy();, +		}, +		MediaTypeRequestMatcher preferredMatcher = new MediaTypeRequestMatcher(, +				contentNegotiationStrategy, MediaType.APPLICATION_XHTML_XML,, +				new MediaType("image", "*"), MediaType.TEXT_HTML, MediaType.TEXT_PLAIN);, +		preferredMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));, +		exceptions.defaultAuthenticationEntryPointFor(]