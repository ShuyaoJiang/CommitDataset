[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/com/example/BootRunApplication.java, +import java.io.File;, +import java.lang.management.ManagementFactory;, +		for (String entry : ManagementFactory.getRuntimeMXBean().getClassPath(), +				.split(File.pathSeparator)) {, +			System.out.println(i++ + ". " + entry);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/com/example/BootRunApplication.java, +import java.io.File;, +import java.lang.management.ManagementFactory;, +		for (String entry : ManagementFactory.getRuntimeMXBean().getClassPath(), +				.split(File.pathSeparator)) {, +			System.out.println(i++ + ". " + entry);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/run/BootRunIntegrationTests.java, +		assertThat(result.getOutput()), +				.contains("1. " + canonicalPathOf("build/classes/java/main"));, +		assertThat(result.getOutput()), +				.contains("2. " + canonicalPathOf("build/resources/main"));, +		assertThat(result.getOutput()), +				.doesNotContain(canonicalPathOf("src/main/resources"));, +		assertThat(result.getOutput()), +				.contains("1. " + canonicalPathOf("src/main/resources"));, +		assertThat(result.getOutput()), +				.contains("2. " + canonicalPathOf("build/classes/java/main"));, +		assertThat(result.getOutput()), +				.doesNotContain(canonicalPathOf("build/resources/main"));, +	private String canonicalPathOf(String path) throws IOException {, +		return new File(this.gradleBuild.getProjectDir(), path).getCanonicalPath();]