[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventRepository.java, +	 * Log an event., +	 * @param event the audit event to log, +	 */, +	void add(AuditEvent event);, +, +	/**, +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param type the event type to search for (or {@code null} if unrestricted), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventRepository.java, +	 * Log an event., +	 * @param event the audit event to log, +	 */, +	void add(AuditEvent event);, +, +	/**, +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param type the event type to search for (or {@code null} if unrestricted), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	@Override, +	public synchronized List<AuditEvent> find(Date after) {, +		return find(null, after, null);, +	}, +, +	@Override, +	public synchronized List<AuditEvent> find(String principal, Date after) {, +		return find(principal, after, null);, +	}, +, +	@Override, +	public synchronized List<AuditEvent> find(String principal, Date after, String type) {, +		LinkedList<AuditEvent> events = new LinkedList<AuditEvent>();, +		for (int i = 0; i < this.events.length; i++) {, +			AuditEvent event = resolveTailEvent(i);, +			if (event != null && isMatch(principal, after, type, event)) {, +				events.addFirst(event);, +			}, +		}, +		return events;, +	}, +, +	private boolean isMatch(String principal, Date after, String type, AuditEvent event) {, +		boolean match = true;, +		match &= (principal == null || event.getPrincipal().equals(principal));, +		match &= (after == null || event.getTimestamp().compareTo(after) >= 0);, +		match &= (type == null || event.getType().equals(type));, +		return match;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/AuditEventRepository.java, +	 * Log an event., +	 * @param event the audit event to log, +	 */, +	void add(AuditEvent event);, +, +	/**, +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param principal the principal name to search for (or {@code null} if unrestricted), +	 * @param after timestamp of earliest result required (or {@code null} if, +	 * unrestricted), +	 * @param type the event type to search for (or {@code null} if unrestricted), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java, +	@Override, +	public synchronized List<AuditEvent> find(Date after) {, +		return find(null, after, null);, +	}, +, +	@Override, +	public synchronized List<AuditEvent> find(String principal, Date after) {, +		return find(principal, after, null);, +	}, +, +	@Override, +	public synchronized List<AuditEvent> find(String principal, Date after, String type) {, +		LinkedList<AuditEvent> events = new LinkedList<AuditEvent>();, +		for (int i = 0; i < this.events.length; i++) {, +			AuditEvent event = resolveTailEvent(i);, +			if (event != null && isMatch(principal, after, type, event)) {, +				events.addFirst(event);, +			}, +		}, +		return events;]