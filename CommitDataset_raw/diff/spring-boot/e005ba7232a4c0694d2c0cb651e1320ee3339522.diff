[+++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +import java.util.Collections;, +import java.util.Properties;, +		return properties(getMapFromKeyValuePairs(defaultProperties));, +	 * Default properties for the environment in the form <code>key=value</code> or, +	 * <code>key:value</code>., +	 * , +	 * @param defaultProperties the properties to set., +	 * @return the current builder, +	 */, +	public SpringApplicationBuilder properties(Properties defaultProperties) {, +		return properties(getMapFromProperties(defaultProperties));, +	}, +, +	private Map<String, Object> getMapFromProperties(Properties properties) {, +		HashMap<String, Object> map = new HashMap<String, Object>();, +		for (Object key : Collections.list(properties.propertyNames())) {, +			map.put((String) key, properties.get(key));, +		}, +		return map;, +	}, +, +	/**, +		this.application.setDefaultProperties(this.defaultProperties);, +		if (this.parent != null) {, +			this.parent.properties(this.defaultProperties);, +			this.parent.environment(this.environment);, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +import java.util.Collections;, +import java.util.Properties;, +		return properties(getMapFromKeyValuePairs(defaultProperties));, +	 * Default properties for the environment in the form <code>key=value</code> or, +	 * <code>key:value</code>., +	 * , +	 * @param defaultProperties the properties to set., +	 * @return the current builder, +	 */, +	public SpringApplicationBuilder properties(Properties defaultProperties) {, +		return properties(getMapFromProperties(defaultProperties));, +	}, +, +	private Map<String, Object> getMapFromProperties(Properties properties) {, +		HashMap<String, Object> map = new HashMap<String, Object>();, +		for (Object key : Collections.list(properties.propertyNames())) {, +			map.put((String) key, properties.get(key));, +		}, +		return map;, +	}, +, +	/**, +		this.application.setDefaultProperties(this.defaultProperties);, +		if (this.parent != null) {, +			this.parent.properties(this.defaultProperties);, +			this.parent.environment(this.environment);, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java, +import java.util.Collections;, +import org.springframework.util.StringUtils;, +	public void propertiesAsMap() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(), +				.sources(ExampleConfig.class), +				.contextClass(StaticApplicationContext.class), +				.properties(Collections.<String, Object> singletonMap("bar", "foo"));, +		this.context = application.run();, +		assertThat(this.context.getEnvironment().getProperty("bar"), is(equalTo("foo")));, +	}, +, +	@Test, +	public void propertiesAsProperties() throws Exception {, +		SpringApplicationBuilder application = new SpringApplicationBuilder(), +				.sources(ExampleConfig.class), +				.contextClass(StaticApplicationContext.class), +				.properties(, +						StringUtils.splitArrayElementsIntoProperties(, +								new String[] { "bar=foo" }, "="));, +		this.context = application.run();, +		assertThat(this.context.getEnvironment().getProperty("bar"), is(equalTo("foo")));, +	}, +, +	@Test]