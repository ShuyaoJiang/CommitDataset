[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	public ManagementErrorEndpoint errorEndpoint(ErrorAttributes errorAttributes) {, +		return new ManagementErrorEndpoint(errorAttributes);, +	 * Configuration to add {@link HandlerMapping} for {@link MvcEndpoint}s., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +	public ManagementErrorEndpoint errorEndpoint(ErrorAttributes errorAttributes) {, +		return new ManagementErrorEndpoint(errorAttributes);, +	 * Configuration to add {@link HandlerMapping} for {@link MvcEndpoint}s., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +		@Autowired, +		private SecurityProperties security;, +		@Autowired(required = false), +		private ManagementContextResolver contextResolver;, +			if (this.server != null) {, +				// The ignores are not cumulative, so to prevent overwriting the defaults, +				// we add them back., +				Set<String> ignored = new LinkedHashSet<String>(, +						SpringBootWebSecurityConfiguration.getIgnored(this.security));, +				RequestMatcher requestMatcher = this.management.getSecurity().isEnabled(), +						? null, +						: LazyEndpointPathRequestMatcher, +								.getRequestMatcher(this.contextResolver);, +					List<RequestMatcher> matchers = new ArrayList<RequestMatcher>();, +					for (String pattern : paths) {, +						matchers.add(new AntPathRequestMatcher(pattern, null));, +					}, +					if (requestMatcher != null) {, +						matchers.add(requestMatcher);, +					}, +					requestMatcher = new OrRequestMatcher(matchers);, +				}, +				if (requestMatcher != null) {, +					ignoring.requestMatchers(requestMatcher);, +			RequestMatcher matcher = this.management.getSecurity().isEnabled(), +					? LazyEndpointPathRequestMatcher, +							.getRequestMatcher(this.contextResolver), +					: null;, +			requests.requestMatchers(new LazyEndpointPathRequestMatcher(, +					this.contextResolver, EndpointPaths.NON_SENSITIVE)).permitAll();, +	private static class LazyEndpointPathRequestMatcher implements RequestMatcher {, +, +		private final EndpointPaths endpointPaths;, +, +		private final ManagementContextResolver contextResolver;, +, +		private RequestMatcher delegate;, +, +		public static RequestMatcher getRequestMatcher(, +				ManagementContextResolver contextResolver) {, +			if (contextResolver == null) {, +				return null;, +			}, +			ManagementServerProperties management = contextResolver, +					.getApplicationContext().getBean(ManagementServerProperties.class);, +			ServerProperties server = contextResolver.getApplicationContext(), +					.getBean(ServerProperties.class);, +			String path = management.getContextPath();, +			if (StringUtils.hasText(path)) {, +				AntPathRequestMatcher matcher = new AntPathRequestMatcher(, +						server.getPath(path) + "/**");, +				return matcher;, +			}, +			// Match everything, including the sensitive and non-sensitive paths, +			return new LazyEndpointPathRequestMatcher(contextResolver, EndpointPaths.ALL);, +		}, +, +		LazyEndpointPathRequestMatcher(ManagementContextResolver contextResolver,, +				EndpointPaths endpointPaths) {, +			this.contextResolver = contextResolver;, +			this.endpointPaths = endpointPaths;, +		}, +, +		@Override, +		public boolean matches(HttpServletRequest request) {, +			if (this.delegate == null) {, +				this.delegate = createDelegate();, +			}, +			return this.delegate.matches(request);, +		}, +, +		private RequestMatcher createDelegate() {, +			ServerProperties server = this.contextResolver.getApplicationContext(), +					.getBean(ServerProperties.class);, +			List<RequestMatcher> matchers = new ArrayList<RequestMatcher>();, +			EndpointHandlerMapping endpointHandlerMapping = getRequiredEndpointHandlerMapping();, +			for (String path : this.endpointPaths.getPaths(endpointHandlerMapping)) {, +				matchers.add(new AntPathRequestMatcher(server.getPath(path)));, +			}, +			return (matchers.isEmpty() ? MATCH_NONE : new OrRequestMatcher(matchers));, +		}, +, +		private EndpointHandlerMapping getRequiredEndpointHandlerMapping() {, +			EndpointHandlerMapping endpointHandlerMapping = null;, +			ApplicationContext context = this.contextResolver.getApplicationContext();, +			if (context.getBeanNamesForType(EndpointHandlerMapping.class).length > 0) {, +				endpointHandlerMapping = context.getBean(EndpointHandlerMapping.class);, +			}, +			if (endpointHandlerMapping == null) {, +				// Maybe there are actually no endpoints (e.g. management.port=-1), +				endpointHandlerMapping = new EndpointHandlerMapping(]