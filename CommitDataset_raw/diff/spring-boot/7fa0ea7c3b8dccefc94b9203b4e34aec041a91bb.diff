[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import java.util.Map.Entry;, +import org.springframework.boot.context.embedded.RegistrationBean;, +		registration.setOrder(this.jersey.getFilter().getOrder() - 1);, +		registration.setOrder(this.jersey.getFilter().getOrder());, +		registration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,, +				stripPattern(this.path));, +		addInitParameters(registration);, +	private String stripPattern(String path) {, +		if (path.endsWith("/*")) {, +			path = path.substring(0, path.lastIndexOf("/*"));, +		}, +		return path;, +	}, +, +		addInitParameters(registration);, +	private void addInitParameters(RegistrationBean registration) {, +		Class<? extends ResourceConfig> configType = this.config.getClass();, +		registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,, +				configType.getName());, +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,, +				"true");, +		for (Entry<String, String> entry : this.jersey.getInit().entrySet()) {, +			registration.addInitParameter(entry.getKey(), entry.getValue());, +		}, +	}, +, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		return path.equals("/") ? "/*" : path + "/*";, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import java.util.Map.Entry;, +import org.springframework.boot.context.embedded.RegistrationBean;, +		registration.setOrder(this.jersey.getFilter().getOrder() - 1);, +		registration.setOrder(this.jersey.getFilter().getOrder());, +		registration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,, +				stripPattern(this.path));, +		addInitParameters(registration);, +	private String stripPattern(String path) {, +		if (path.endsWith("/*")) {, +			path = path.substring(0, path.lastIndexOf("/*"));, +		}, +		return path;, +	}, +, +		addInitParameters(registration);, +	private void addInitParameters(RegistrationBean registration) {, +		Class<? extends ResourceConfig> configType = this.config.getClass();, +		registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,, +				configType.getName());, +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,, +				"true");, +		for (Entry<String, String> entry : this.jersey.getInit().entrySet()) {, +			registration.addInitParameter(entry.getKey(), entry.getValue());, +		}, +	}, +, +		if (!path.startsWith("/")) {, +			path = "/" + path;, +		return path.equals("/") ? "/*" : path + "/*";, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java, +import java.util.HashMap;, +import java.util.Map;, +, +	private Map<String, String> init = new HashMap<String, String>();, +, +		return this.filter;, +		return this.type;, +	public Map<String, String> getInit() {, +		return this.init;, +	}, +, +	public void setInit(Map<String, String> init) {, +		this.init = init;, +	}, +, +			return this.order;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java, +import java.util.Map.Entry;, +import org.springframework.boot.context.embedded.RegistrationBean;, +		registration.setOrder(this.jersey.getFilter().getOrder() - 1);, +		registration.setOrder(this.jersey.getFilter().getOrder());, +		registration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH,, +				stripPattern(this.path));, +		addInitParameters(registration);, +	private String stripPattern(String path) {, +		if (path.endsWith("/*")) {, +			path = path.substring(0, path.lastIndexOf("/*"));, +		}, +		return path;, +	}, +, +		addInitParameters(registration);, +	private void addInitParameters(RegistrationBean registration) {, +		Class<? extends ResourceConfig> configType = this.config.getClass();, +		registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS,, +				configType.getName());, +		registration.addInitParameter(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,]