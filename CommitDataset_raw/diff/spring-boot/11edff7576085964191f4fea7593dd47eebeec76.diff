[+++ b/spring-boot/src/main/java/org/springframework/boot/endpoint/AnnotationEndpointDiscoverer.java, +import java.util.Arrays;, +import org.springframework.beans.factory.HierarchicalBeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.util.StringUtils;, +		String[] beanNames = beanNamesForAnnotationIncludingAncestors(, +				this.applicationContext, Endpoint.class);, +		String[] beanNames = beanNamesForAnnotationIncludingAncestors(, +				this.applicationContext, extensionType);, +	private static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				List<String> resultList = new ArrayList<>();, +				resultList.addAll(Arrays.asList(result));, +				for (String beanName : parentResult) {, +					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {, +						resultList.add(beanName);, +					}, +				}, +				result = StringUtils.toStringArray(resultList);, +			}, +		}, +		return result;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/endpoint/AnnotationEndpointDiscoverer.java, +import java.util.Arrays;, +import org.springframework.beans.factory.HierarchicalBeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.util.StringUtils;, +		String[] beanNames = beanNamesForAnnotationIncludingAncestors(, +				this.applicationContext, Endpoint.class);, +		String[] beanNames = beanNamesForAnnotationIncludingAncestors(, +				this.applicationContext, extensionType);, +	private static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				List<String> resultList = new ArrayList<>();, +				resultList.addAll(Arrays.asList(result));, +				for (String beanName : parentResult) {, +					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {, +						resultList.add(beanName);, +					}, +				}, +				result = StringUtils.toStringArray(resultList);, +			}, +		}, +		return result;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/endpoint/AnnotationEndpointDiscovererTests.java, +		load(TestEndpointConfiguration.class, hasTestEndpoint());, +	}, +, +	@Test, +	public void endpointIsInParentContextIsDiscovered() {, +		AnnotationConfigApplicationContext parent =, +				new AnnotationConfigApplicationContext(TestEndpointConfiguration.class);, +		loadWithParent(parent, EmptyConfiguration.class, hasTestEndpoint());, +	}, +, +	private Consumer<AnnotationConfigApplicationContext> hasTestEndpoint() {, +		return (context) -> {, +		};, +		doLoad(null, configuration, consumer);, +	}, +, +	private void loadWithParent(ApplicationContext parent, Class<?> configuration,, +			Consumer<AnnotationConfigApplicationContext> consumer) {, +		doLoad(parent, configuration, consumer);, +	}, +, +	private void doLoad(ApplicationContext parent, Class<?> configuration,, +			Consumer<AnnotationConfigApplicationContext> consumer) {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		if (parent != null) {, +			context.setParent(parent);, +		}, +		context.register(configuration);, +		context.refresh();]