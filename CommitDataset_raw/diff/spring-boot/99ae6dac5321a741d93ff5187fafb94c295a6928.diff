[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean({CouchbaseConfigurer.class, CouchbaseConfiguration.class}), +		public DefaultCouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return initializeEnvironmentBuilder(this.properties).build();, +		 * Initialize an environment builder based on the specified settings., +		 * @return a {@link DefaultCouchbaseEnvironment.Builder}, +		protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {, +					.socketConnectTimeout(timeouts.getSocketConnect()), +			return builder;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean({CouchbaseConfigurer.class, CouchbaseConfiguration.class}), +		public DefaultCouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return initializeEnvironmentBuilder(this.properties).build();, +		 * Initialize an environment builder based on the specified settings., +		 * @return a {@link DefaultCouchbaseEnvironment.Builder}, +		protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {, +					.socketConnectTimeout(timeouts.getSocketConnect()), +			return builder;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +		 * Socket connect connections timeout in milliseconds., +		 */, +		private int socketConnect = 1000;, +, +		/**, +		public int getSocketConnect() {, +			return this.socketConnect;, +		}, +, +		public void setSocketConnect(int socketConnect) {, +			this.socketConnect = socketConnect;, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean({CouchbaseConfigurer.class, CouchbaseConfiguration.class}), +		public DefaultCouchbaseEnvironment couchbaseEnvironment() throws Exception {, +			return initializeEnvironmentBuilder(this.properties).build();, +		 * Initialize an environment builder based on the specified settings., +		 * @return a {@link DefaultCouchbaseEnvironment.Builder}, +		protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {, +					.socketConnectTimeout(timeouts.getSocketConnect()), +			return builder;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +		 * Socket connect connections timeout in milliseconds., +		 */, +		private int socketConnect = 1000;, +, +		/**, +		public int getSocketConnect() {, +			return this.socketConnect;, +		}, +, +		public void setSocketConnect(int socketConnect) {, +			this.socketConnect = socketConnect;, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, +import com.couchbase.client.java.CouchbaseBucket;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.CouchbaseConfiguration;, +import org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +, +import static org.mockito.Mockito.mock;, +				"spring.couchbase.env.timeouts.socket-connect=400",, +				"spring.couchbase.env.timeouts.view=500");, +		assertThat(env.socketConnectTimeout()).isEqualTo(400);, +		assertThat(env.viewTimeout()).isEqualTo(500);, +	@Test, +	public void customizeEnvWithCustomCouchbaseConfiguration() {, +		load(CustomCouchbaseConfiguration.class, "spring.couchbase.bootstrap-hosts=localhost",, +				"spring.couchbase.env.timeouts.connect=100");, +		assertThat(this.context.getBeansOfType(CouchbaseConfiguration.class)).hasSize(1);, +		DefaultCouchbaseEnvironment env = this.context.getBean(DefaultCouchbaseEnvironment.class);, +		assertThat(env.socketConnectTimeout()).isEqualTo(5000);, +		assertThat(env.connectTimeout()).isEqualTo(2000);, +	}, +, +		return new CouchbaseConfiguration(, +	@Configuration, +	@Import(CouchbaseDataAutoConfiguration.class), +	static class CustomCouchbaseConfiguration extends CouchbaseConfiguration {, +, +		CustomCouchbaseConfiguration(CouchbaseProperties properties) {, +			super(properties);, +		}, +, +		@Override, +		protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {, +			return super.initializeEnvironmentBuilder(properties), +					.socketConnectTimeout(5000).connectTimeout(2000);, +		}, +, +		@Override, +		public Cluster couchbaseCluster() throws Exception {, +			return mock(Cluster.class);, +		}, +, +		@Override, +		public ClusterInfo couchbaseClusterInfo() {, +			return mock(ClusterInfo.class);]