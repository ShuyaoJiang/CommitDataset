[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.HashSet;, +import java.util.Set;, +, +import javax.persistence.EntityManagerFactory;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.annotation.Import;, +import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +import org.springframework.util.StringUtils;, +, +import static java.util.Arrays.asList;, +import static org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors;, +import static org.springframework.beans.factory.BeanFactoryUtils.transformedBeanName;, +	@Import(FlywayJpaDependencyConfiguration.class), +	@Configuration, +	@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class), +	@ConditionalOnBean(AbstractEntityManagerFactoryBean.class), +	protected static class FlywayJpaDependencyConfiguration implements, +			BeanFactoryPostProcessor {, +, +		public static final String FLYWAY_JPA_BEAN_NAME = "flyway";, +, +		@Override, +		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {, +, +			for (String beanName : getEntityManagerFactoryBeanNames(beanFactory)) {, +				BeanDefinition definition = getBeanDefinition(beanName, beanFactory);, +				definition.setDependsOn(StringUtils.addStringToArray(, +						definition.getDependsOn(), FLYWAY_JPA_BEAN_NAME));, +			}, +		}, +, +		private static BeanDefinition getBeanDefinition(String beanName,, +				ConfigurableListableBeanFactory beanFactory) {, +			try {, +				return beanFactory.getBeanDefinition(beanName);, +			}, +			catch (NoSuchBeanDefinitionException e) {, +, +				BeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();, +, +				if (parentBeanFactory instanceof ConfigurableListableBeanFactory) {, +					return getBeanDefinition(beanName,, +							(ConfigurableListableBeanFactory) parentBeanFactory);, +				}, +, +				throw e;, +			}, +		}, +, +		private static Iterable<String> getEntityManagerFactoryBeanNames(, +				ListableBeanFactory beanFactory) {, +, +			Set<String> names = new HashSet<String>();, +			names.addAll(asList(beanNamesForTypeIncludingAncestors(beanFactory,, +					EntityManagerFactory.class, true, false)));, +, +			for (String factoryBeanName : beanNamesForTypeIncludingAncestors(beanFactory,, +					AbstractEntityManagerFactoryBean.class, true, false)) {, +				names.add(transformedBeanName(factoryBeanName));, +			}, +, +			return names;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.HashSet;, +import java.util.Set;, +, +import javax.persistence.EntityManagerFactory;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.annotation.Import;, +import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +import org.springframework.util.StringUtils;, +, +import static java.util.Arrays.asList;, +import static org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors;, +import static org.springframework.beans.factory.BeanFactoryUtils.transformedBeanName;, +	@Import(FlywayJpaDependencyConfiguration.class), +	@Configuration, +	@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class), +	@ConditionalOnBean(AbstractEntityManagerFactoryBean.class), +	protected static class FlywayJpaDependencyConfiguration implements, +			BeanFactoryPostProcessor {, +, +		public static final String FLYWAY_JPA_BEAN_NAME = "flyway";]