[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.function.Supplier;, +		bootWar.conventionMapping("mainClass",, +				mainClassConvention(project, bootWar::getClasspath));, +		bootJar.conventionMapping("mainClass",, +				mainClassConvention(project, bootJar::getClasspath));, +	}, +, +	private Callable<Object> mainClassConvention(Project project,, +			Supplier<FileCollection> classpathSupplier) {, +		return () -> {, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +			return new MainClassResolver(classpathSupplier.get()).resolveMainClass();, +		};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.function.Supplier;, +		bootWar.conventionMapping("mainClass",, +				mainClassConvention(project, bootWar::getClasspath));, +		bootJar.conventionMapping("mainClass",, +				mainClassConvention(project, bootJar::getClasspath));, +	}, +, +	private Callable<Object> mainClassConvention(Project project,, +			Supplier<FileCollection> classpathSupplier) {, +		return () -> {, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +			return new MainClassResolver(classpathSupplier.get()).resolveMainClass();, +		};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java, +	private void addBootRunTask(Project project) {, +		JavaPluginConvention javaConvention = project.getConvention(), +		run.getConventionMapping().map("jvmArgs", ((Callable<Object>) () -> {, +		}));, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.function.Supplier;, +		bootWar.conventionMapping("mainClass",, +				mainClassConvention(project, bootWar::getClasspath));, +		bootJar.conventionMapping("mainClass",, +				mainClassConvention(project, bootJar::getClasspath));, +	}, +, +	private Callable<Object> mainClassConvention(Project project,, +			Supplier<FileCollection> classpathSupplier) {, +		return () -> {, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +			return new MainClassResolver(classpathSupplier.get()).resolveMainClass();, +		};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java, +	private void addBootRunTask(Project project) {, +		JavaPluginConvention javaConvention = project.getConvention(), +		run.getConventionMapping().map("jvmArgs", ((Callable<Object>) () -> {, +		}));, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/bundling/AbstractBootArchiveIntegrationTests.java, +import java.io.File;, +import java.util.jar.JarFile;, +	@Test, +	public void applicationPluginMainClassNameIsUsed() throws IOException {, +		assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName), +				.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		try (JarFile jarFile = new JarFile(, +				new File(this.gradleBuild.getProjectDir(), "build/libs"), +						.listFiles()[0])) {, +			assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")), +					.isEqualTo("com.example.CustomMain");, +		}, +, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import java.util.function.Supplier;, +		bootWar.conventionMapping("mainClass",, +				mainClassConvention(project, bootWar::getClasspath));, +		bootJar.conventionMapping("mainClass",, +				mainClassConvention(project, bootJar::getClasspath));, +	}, +, +	private Callable<Object> mainClassConvention(Project project,, +			Supplier<FileCollection> classpathSupplier) {, +		return () -> {, +			if (project.hasProperty("mainClassName")) {, +				return project.property("mainClassName");, +			}, +			return new MainClassResolver(classpathSupplier.get()).resolveMainClass();, +		};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java, +	private void addBootRunTask(Project project) {, +		JavaPluginConvention javaConvention = project.getConvention(), +		run.getConventionMapping().map("jvmArgs", ((Callable<Object>) () -> {]