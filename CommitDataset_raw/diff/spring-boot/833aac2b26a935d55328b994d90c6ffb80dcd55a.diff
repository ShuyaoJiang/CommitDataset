[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +		listeners.add(new ConfigFileApplicationListener());, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +		listeners.add(new ConfigFileApplicationListener());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see org.springframework.boot.context.config.ConfigFileApplicationListener, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +		listeners.add(new ConfigFileApplicationListener());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see org.springframework.boot.context.config.ConfigFileApplicationListener, +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +	// Before ConfigFileApplicationListener so values there can use these ones, +	private int order = ConfigFileApplicationListener.DEFAULT_ORDER - 1;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +		listeners.add(new ConfigFileApplicationListener());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see org.springframework.boot.context.config.ConfigFileApplicationListener, +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +	// Before ConfigFileApplicationListener so values there can use these ones, +	private int order = ConfigFileApplicationListener.DEFAULT_ORDER - 1;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, +		// Apply after ConfigFileApplicationListener has called all, +		return ConfigFileApplicationListener.DEFAULT_ORDER + 1;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/RemoteSpringApplication.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +		listeners.add(new ConfigFileApplicationListener());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +	 * @see org.springframework.boot.context.config.ConfigFileApplicationListener, +++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, +import org.springframework.boot.context.config.ConfigFileApplicationListener;, +	// Before ConfigFileApplicationListener so values there can use these ones, +	private int order = ConfigFileApplicationListener.DEFAULT_ORDER - 1;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/AnsiOutputApplicationListener.java, +		// Apply after ConfigFileApplicationListener has called all, +		return ConfigFileApplicationListener.DEFAULT_ORDER + 1;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.config;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Queue;, +import java.util.Set;, +, +import org.apache.commons.logging.Log;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.bind.PropertiesConfigurationFactory;, +import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;, +import org.springframework.boot.context.event.ApplicationPreparedEvent;, +import org.springframework.boot.env.EnumerableCompositePropertySource;, +import org.springframework.boot.env.EnvironmentPostProcessor;, +import org.springframework.boot.env.PropertySourcesLoader;, +import org.springframework.boot.logging.DeferredLog;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.ConfigurationClassPostProcessor;, +import org.springframework.core.Ordered;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.EnumerablePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.support.SpringFactoriesLoader;, +import org.springframework.util.Assert;]