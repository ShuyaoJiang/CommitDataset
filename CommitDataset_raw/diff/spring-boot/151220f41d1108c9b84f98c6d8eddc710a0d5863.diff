[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.hazelcast</groupId>, +			<artifactId>hazelcast</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>com.hazelcast</groupId>, +			<artifactId>hazelcast-spring</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>javax.cache</groupId>, +			<artifactId>cache-api</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.hazelcast</groupId>, +			<artifactId>hazelcast</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>com.hazelcast</groupId>, +			<artifactId>hazelcast-spring</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>javax.cache</groupId>, +			<artifactId>cache-api</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.cache;, +, +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheConfigurationImportSelector;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.annotation.EnableCaching;, +import org.springframework.cache.interceptor.CacheAspectSupport;, +import org.springframework.cache.interceptor.CacheResolver;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +import org.springframework.context.annotation.ImportSelector;, +import org.springframework.context.annotation.Role;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.util.Assert;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for the cache abstraction. Creates a, + * {@link CacheManager} if necessary when caching is enabled via {@link EnableCaching}., + * <p>, + * Cache store can be auto-detected or specified explicitly via configuration., + *, + * @author Stephane Nicoll, + * @since 1.3.0, + * @see EnableCaching, + */, +@Configuration, +@ConditionalOnClass(CacheManager.class), +@ConditionalOnBean(CacheAspectSupport.class), +@ConditionalOnMissingBean({ CacheManager.class, CacheResolver.class }), +@EnableConfigurationProperties(CacheProperties.class), +@AutoConfigureAfter(RedisAutoConfiguration.class), +@Import(CacheConfigurationImportSelector.class), +public class CacheAutoConfiguration {, +, +	static final String VALIDATOR_BEAN_NAME = "cacheAutoConfigurationValidator";, +, +	@Bean]