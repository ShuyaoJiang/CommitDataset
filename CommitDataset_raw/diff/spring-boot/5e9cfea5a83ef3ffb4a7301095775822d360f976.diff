[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper map = PropertyMapper.get();, +		map.from(config::getConsumersPerQueue).whenNonNull(), +				.to(factory::setConsumersPerQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper map = PropertyMapper.get();, +		map.from(config::getConsumersPerQueue).whenNonNull(), +				.to(factory::setConsumersPerQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import java.time.Duration;, +, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Phillip Webb, +		public CachingConnectionFactory rabbitConnectionFactory(, +				RabbitProperties properties) throws Exception {, +			PropertyMapper map = PropertyMapper.get();, +			CachingConnectionFactory factory = new CachingConnectionFactory(, +					getRabbitConnectionFactoryBean(properties).getObject());, +			map.from(properties::determineAddresses).to(factory::setAddresses);, +			map.from(properties::isPublisherConfirms).to(factory::setPublisherConfirms);, +			map.from(properties::isPublisherReturns).to(factory::setPublisherReturns);, +			RabbitProperties.Cache.Channel channel = properties.getCache().getChannel();, +			map.from(channel::getSize).whenNonNull().to(factory::setChannelCacheSize);, +			map.from(channel::getCheckoutTimeout).whenNonNull(), +					.to(factory::setChannelCheckoutTimeout);, +			RabbitProperties.Cache.Connection connection = properties.getCache(), +					.getConnection();, +			map.from(connection::getMode).whenNonNull().to(factory::setCacheMode);, +			map.from(connection::getSize).whenNonNull(), +					.to(factory::setConnectionCacheSize);, +			return factory;, +		}, +, +		private RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(, +				RabbitProperties properties) throws Exception {, +			PropertyMapper map = PropertyMapper.get();, +			map.from(properties::determineHost).whenNonNull().to(factory::setHost);, +			map.from(properties::determinePort).to(factory::setPort);, +			map.from(properties::determineUsername).whenNonNull(), +					.to(factory::setUsername);, +			map.from(properties::determinePassword).whenNonNull(), +					.to(factory::setPassword);, +			map.from(properties::determineVirtualHost).whenNonNull(), +					.to(factory::setVirtualHost);, +			map.from(properties::getRequestedHeartbeat).whenNonNull(), +					.asInt(Duration::getSeconds).to(factory::setRequestedHeartbeat);, +			RabbitProperties.Ssl ssl = properties.getSsl();, +				map.from(ssl::getAlgorithm).whenNonNull().to(factory::setSslAlgorithm);, +				map.from(ssl::getKeyStoreType).to(factory::setKeyStoreType);, +				map.from(ssl::getKeyStore).to(factory::setKeyStore);, +				map.from(ssl::getKeyStorePassword).to(factory::setKeyStorePassphrase);, +				map.from(ssl::getTrustStoreType).to(factory::setTrustStoreType);, +				map.from(ssl::getTrustStore).to(factory::setTrustStore);, +				map.from(ssl::getTrustStorePassword).to(factory::setTrustStorePassphrase);, +			map.from(properties::getConnectionTimeout).whenNonNull(), +					.asInt(Duration::toMillis).to(factory::setConnectionTimeout);, +			return factory;, +			PropertyMapper map = PropertyMapper.get();, +			RabbitTemplate template = new RabbitTemplate(connectionFactory);, +				template.setMessageConverter(messageConverter);, +			template.setMandatory(determineMandatoryFlag());, +			RabbitProperties.Template properties = this.properties.getTemplate();, +			if (properties.getRetry().isEnabled()) {, +				template.setRetryTemplate(createRetryTemplate(properties.getRetry()));, +			map.from(properties::getReceiveTimeout).whenNonNull(), +					.to(template::setReceiveTimeout);, +			map.from(properties::getReplyTimeout).whenNonNull(), +					.to(template::setReplyTimeout);, +			map.from(properties::getExchange).to(template::setExchange);, +			map.from(properties::getRoutingKey).to(template::setRoutingKey);, +			return template;, +			PropertyMapper map = PropertyMapper.get();, +			map.from(properties::getMaxAttempts).to(policy::setMaxAttempts);, +			map.from(properties::getInitialInterval), +					.to(backOffPolicy::setInitialInterval);, +			map.from(properties::getMultiplier).to(backOffPolicy::setMultiplier);, +			map.from(properties::getMaxInterval).to(backOffPolicy::setMaxInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/DirectRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper map = PropertyMapper.get();, +		map.from(config::getConsumersPerQueue).whenNonNull(), +				.to(factory::setConsumersPerQueue);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import java.time.Duration;, +, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Phillip Webb, +		public CachingConnectionFactory rabbitConnectionFactory(, +				RabbitProperties properties) throws Exception {, +			PropertyMapper map = PropertyMapper.get();, +			CachingConnectionFactory factory = new CachingConnectionFactory(, +					getRabbitConnectionFactoryBean(properties).getObject());, +			map.from(properties::determineAddresses).to(factory::setAddresses);, +			map.from(properties::isPublisherConfirms).to(factory::setPublisherConfirms);, +			map.from(properties::isPublisherReturns).to(factory::setPublisherReturns);, +			RabbitProperties.Cache.Channel channel = properties.getCache().getChannel();, +			map.from(channel::getSize).whenNonNull().to(factory::setChannelCacheSize);, +			map.from(channel::getCheckoutTimeout).whenNonNull()]