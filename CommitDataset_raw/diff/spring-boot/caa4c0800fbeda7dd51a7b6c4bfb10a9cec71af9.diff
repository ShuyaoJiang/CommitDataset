[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					.found("dispatcher servlet bean", "dispatcher servlet beans"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					.found("dispatcher servlet bean", "dispatcher servlet beans"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +					.forCondition("ErrorTemplate Missing");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					.found("dispatcher servlet bean", "dispatcher servlet beans"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +					.forCondition("ErrorTemplate Missing");, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTest.java, + * TestRestTemplate} bean for use in web tests that are using a fully running container., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					.found("dispatcher servlet bean", "dispatcher servlet beans"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +					.forCondition("ErrorTemplate Missing");, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTest.java, + * TestRestTemplate} bean for use in web tests that are using a fully running container., +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +	 * Create a new {@code LocalHostUriTemplateHandler} that will generate URIs with the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +		private final String reason;, +			this.reason = reason;, +			StringBuilder message = new StringBuilder(this.reason);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +			String resource = context.getEnvironment().resolvePlaceholders(location);, +			if (!loader.getResource(resource).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +					.forCondition("EmbeddedDataAvailable");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +					.found("dispatcher servlet bean", "dispatcher servlet beans"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java, +					.forCondition("ErrorTemplate Missing");, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTest.java, + * TestRestTemplate} bean for use in web tests that are using a fully running container., +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +	 * Create a new {@code LocalHostUriTemplateHandler} that will generate URIs with the, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java, +					"Failed to generate build-info.properties. " + ex.getMessage(), ex);]