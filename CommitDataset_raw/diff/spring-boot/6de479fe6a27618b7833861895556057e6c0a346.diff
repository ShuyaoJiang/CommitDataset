[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				PathMappedEndpoints pathMappedEndpoints = context, +						.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints,, +				String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath,, +					paths);, +				delegateMatchers.add(new AntPathRequestMatcher(, +						servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath,, +				Set<String> paths) {, +			return paths.stream(), +					.map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebEndpointProperties properties = context, +						.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(String path,, +				WebEndpointProperties properties) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				PathMappedEndpoints pathMappedEndpoints = context, +						.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints,, +				String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath,, +					paths);, +				delegateMatchers.add(new AntPathRequestMatcher(, +						servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath,, +				Set<String> paths) {, +			return paths.stream(), +					.map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebEndpointProperties properties = context, +						.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(String path,, +				WebEndpointProperties properties) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfigurationTests.java, +		this.contextRunner, +				.withUserConfiguration(WebMvcEndpointChildContextConfiguration.class), +				.run((context) -> assertThat(context, +						.getBean(DispatcherServletPathProvider.class).getServletPath()), +								.isEmpty());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				PathMappedEndpoints pathMappedEndpoints = context, +						.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints,, +				String servletPath) {, +			List<RequestMatcher> delegateMatchers = getDelegateMatchers(servletPath,, +					paths);, +				delegateMatchers.add(new AntPathRequestMatcher(, +						servletPath + pathMappedEndpoints.getBasePath()));, +		private List<RequestMatcher> getDelegateMatchers(String servletPath,, +				Set<String> paths) {, +			return paths.stream(), +					.map((path) -> new AntPathRequestMatcher(servletPath + path + "/**")), +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				WebEndpointProperties properties = context, +						.getBean(WebEndpointProperties.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(String path,, +				WebEndpointProperties properties) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfigurationTests.java, +		this.contextRunner, +				.withUserConfiguration(WebMvcEndpointChildContextConfiguration.class), +				.run((context) -> assertThat(context, +						.getBean(DispatcherServletPathProvider.class).getServletPath()), +								.isEmpty());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration.java, +		public DispatcherServletConfiguration(WebMvcProperties webMvcProperties,, +				ServerProperties serverProperties) {, +			return () -> DispatcherServletConfiguration.this.serverProperties.getServlet(), +					.getPath();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java, +		protected void initialized(, +				Supplier<WebApplicationContext> webApplicationContext) {, +				PathMappedEndpoints pathMappedEndpoints = context, +						.getBean(PathMappedEndpoints.class);, +				DispatcherServletPathProvider pathProvider = context, +						.getBean(DispatcherServletPathProvider.class);, +		private RequestMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints,]