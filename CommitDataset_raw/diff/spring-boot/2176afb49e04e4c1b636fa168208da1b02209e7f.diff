[+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, + * Copyright 2012-2015 the original author or authors., +		entry.setTime(getNestedLibraryTime(file));, +	private long getNestedLibraryTime(File file) {, +		try {, +			JarFile jarFile = new JarFile(file);, +			try {, +				Enumeration<JarEntry> entries = jarFile.entries();, +				while (entries.hasMoreElements()) {, +					JarEntry entry = entries.nextElement();, +					if (!entry.isDirectory()) {, +						return entry.getTime();, +					}, +				}, +			}, +			finally {, +				jarFile.close();, +			}, +		}, +		catch (Exception ex) {, +			// Ignore and just use the source file timestamp, +		}, +		return file.lastModified();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, + * Copyright 2012-2015 the original author or authors., +		entry.setTime(getNestedLibraryTime(file));, +	private long getNestedLibraryTime(File file) {, +		try {, +			JarFile jarFile = new JarFile(file);, +			try {, +				Enumeration<JarEntry> entries = jarFile.entries();, +				while (entries.hasMoreElements()) {, +					JarEntry entry = entries.nextElement();, +					if (!entry.isDirectory()) {, +						return entry.getTime();, +					}, +				}, +			}, +			finally {, +				jarFile.close();, +			}, +		}, +		catch (Exception ex) {, +			// Ignore and just use the source file timestamp, +		}, +		return file.lastModified();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import java.util.Calendar;, +	private static final long JAN_1_1980;, +	private static final long JAN_1_1985;, +	static {, +		Calendar calendar = Calendar.getInstance();, +		calendar.set(1980, 0, 1, 0, 0, 0);, +		calendar.set(Calendar.MILLISECOND, 0);, +		JAN_1_1980 = calendar.getTime().getTime();, +		calendar.set(Calendar.YEAR, 1985);, +		JAN_1_1985 = calendar.getTime().getTime();, +	}, +, +		libJar.addClass("a/b/C.class", ClassWithoutMainMethod.class, JAN_1_1985);, +		libJarFile.setLastModified(JAN_1_1980);, +		JarEntry entry = getEntry(file, "lib/" + libJarFile.getName());, +		assertThat(entry.getTime(), equalTo(JAN_1_1985));, +		entry = getEntry(file, "lib/" + libJarFileToUnpack.getName());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, + * Copyright 2012-2015 the original author or authors., +		entry.setTime(getNestedLibraryTime(file));, +	private long getNestedLibraryTime(File file) {, +		try {, +			JarFile jarFile = new JarFile(file);, +			try {, +				Enumeration<JarEntry> entries = jarFile.entries();, +				while (entries.hasMoreElements()) {, +					JarEntry entry = entries.nextElement();, +					if (!entry.isDirectory()) {, +						return entry.getTime();, +					}, +				}, +			}, +			finally {, +				jarFile.close();, +			}, +		}, +		catch (Exception ex) {, +			// Ignore and just use the source file timestamp, +		}, +		return file.lastModified();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import java.util.Calendar;, +	private static final long JAN_1_1980;, +	private static final long JAN_1_1985;, +	static {, +		Calendar calendar = Calendar.getInstance();, +		calendar.set(1980, 0, 1, 0, 0, 0);]