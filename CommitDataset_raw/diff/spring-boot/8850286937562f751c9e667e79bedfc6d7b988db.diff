[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * Copyright 2012-2015 the original author or authors., + * @author Andy Wilkinson, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions" }), +		private List<String> exclusions;, +, +			this.exclusions = report.getExclusions();, +		public List<String> getExclusions() {, +			return this.exclusions;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * Copyright 2012-2015 the original author or authors., + * @author Andy Wilkinson, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions" }), +		private List<String> exclusions;, +, +			this.exclusions = report.getExclusions();, +		public List<String> getExclusions() {, +			return this.exclusions;, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Arrays;, +, + * @author Andy Wilkinson, +		assertTrue(report.getExclusions().contains("com.foo.Bar"));, +			report.recordExclusions(Arrays.asList("com.foo.Bar"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * Copyright 2012-2015 the original author or authors., + * @author Andy Wilkinson, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions" }), +		private List<String> exclusions;, +, +			this.exclusions = report.getExclusions();, +		public List<String> getExclusions() {, +			return this.exclusions;, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Arrays;, +, + * @author Andy Wilkinson, +		assertTrue(report.getExclusions().contains("com.foo.Bar"));, +			report.recordExclusions(Arrays.asList("com.foo.Bar"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;, +		BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware {, +, +	private ConfigurableListableBeanFactory beanFactory;, +			List<String> excluded = new ArrayList<String>(Arrays.asList(attributes, +					.getStringArray("exclude")));, +			factories.removeAll(excluded);, +			ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		Assert.isInstanceOf(ConfigurableListableBeanFactory.class, beanFactory);, +		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, + * Copyright 2012-2015 the original author or authors., + * @author Andy Wilkinson, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions" }), +		private List<String> exclusions;, +, +			this.exclusions = report.getExclusions();, +		public List<String> getExclusions() {, +			return this.exclusions;, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpointTests.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Arrays;, +, + * @author Andy Wilkinson, +		assertTrue(report.getExclusions().contains("com.foo.Bar"));, +			report.recordExclusions(Arrays.asList("com.foo.Bar"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;, +		BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware {, +, +	private ConfigurableListableBeanFactory beanFactory;, +			List<String> excluded = new ArrayList<String>(Arrays.asList(attributes, +					.getStringArray("exclude")));, +			factories.removeAll(excluded);, +			ConditionEvaluationReport.get(this.beanFactory).recordExclusions(excluded);, +	@Override]