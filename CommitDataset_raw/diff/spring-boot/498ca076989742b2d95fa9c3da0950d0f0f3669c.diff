[+++ b/spring-boot-tools/spring-boot-loader-tools/pom.xml, +			<plugin>, +                <groupId>org.codehaus.mojo</groupId>, +                <artifactId>exec-maven-plugin</artifactId>, +                <version>1.1.1</version>, +                <executions>, +                    <execution>, +                        <phase>generate-resources</phase>, +                        <goals>, +                            <goal>exec</goal>, +                        </goals>, +                    </execution>, +                </executions>, +                <configuration>, +                    <executable>git</executable>, +                    <arguments>, +                        <argument>log</argument>, +                        <argument>--pretty=format:Spring-Boot-Commit-Id: %H</argument>, +                        <argument>-n1</argument>, +                    </arguments>, +                    <outputFile>${project.build.directory}/build-number.mf</outputFile>, +                    <successCodes>, +                        <!-- Skip failures due to missing Git or the project not being a Git repo, +                             (needed for add-ons which ultimately extend this POM but don't use Git) -->, +                        <successCode>0</successCode>, +                        <successCode>1</successCode>, +                        <successCode>127</successCode>, +                        <successCode>128</successCode>, +                    </successCodes>, +                </configuration>, +            </plugin>, +			<plugin>, +				<artifactId>maven-jar-plugin</artifactId>, +				<configuration>, +          			<archive>, +            			<manifestFile>${project.build.directory}/build-number.mf</manifestFile>, +          			</archive>, +        		</configuration>, +			</plugin>, +++ b/spring-boot-tools/spring-boot-loader-tools/pom.xml, +			<plugin>, +                <groupId>org.codehaus.mojo</groupId>, +                <artifactId>exec-maven-plugin</artifactId>, +                <version>1.1.1</version>, +                <executions>, +                    <execution>, +                        <phase>generate-resources</phase>, +                        <goals>, +                            <goal>exec</goal>, +                        </goals>, +                    </execution>, +                </executions>, +                <configuration>, +                    <executable>git</executable>, +                    <arguments>, +                        <argument>log</argument>, +                        <argument>--pretty=format:Spring-Boot-Commit-Id: %H</argument>, +                        <argument>-n1</argument>, +                    </arguments>, +                    <outputFile>${project.build.directory}/build-number.mf</outputFile>, +                    <successCodes>, +                        <!-- Skip failures due to missing Git or the project not being a Git repo, +                             (needed for add-ons which ultimately extend this POM but don't use Git) -->, +                        <successCode>0</successCode>, +                        <successCode>1</successCode>, +                        <successCode>127</successCode>, +                        <successCode>128</successCode>, +                    </successCodes>, +                </configuration>, +            </plugin>, +			<plugin>, +				<artifactId>maven-jar-plugin</artifactId>, +				<configuration>, +          			<archive>, +            			<manifestFile>${project.build.directory}/build-number.mf</manifestFile>, +          			</archive>, +        		</configuration>, +			</plugin>, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +import java.net.URL;, +import java.util.zip.ZipEntry;, +	private static final String GIT_COMMIT_ATTRIBUTE = "Spring-Boot-Commit-Id";, +, +		String gitCommitHash = null;, +		JarFile jarFile = null;, +		try {, +			URL classContainer = getClass().getProtectionDomain().getCodeSource().getLocation();, +			if (classContainer.toString().endsWith(".jar")) {, +				jarFile = new JarFile(new File(classContainer.toURI()), false);, +				ZipEntry manifestEntry = jarFile.getEntry("META-INF/MANIFEST.MF");, +				gitCommitHash = new Manifest(jarFile.getInputStream(manifestEntry))., +						getMainAttributes().getValue(GIT_COMMIT_ATTRIBUTE);, +			}, +		} catch (Exception ignoreAndMoveOn) { }, +		finally {, +			if (jarFile != null) {, +				try { jarFile.close(); }, +				catch (IOException ignored) {}, +			}, +		}]