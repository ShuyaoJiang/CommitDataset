[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.JmxEnabledCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(JmxEnabledCondition.class), +	/**, +	 * Condition to check that spring.jmx and endpoints.jmx are enabled., +	 */, +	static class JmxEnabledCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			boolean jmxEnabled = isEnabled(context, "spring.jmx.");, +			boolean jmxEndpointsEnabled = isEnabled(context, "endpoints.jmx.");, +			return new ConditionOutcome(jmxEnabled && jmxEndpointsEnabled,, +					"JMX Endpoints");, +		}, +, +		private boolean isEnabled(ConditionContext context, String prefix) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(, +					context.getEnvironment(), prefix);, +			return resolver.getProperty("enabled", Boolean.class, true);, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.JmxEnabledCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(JmxEnabledCondition.class), +	/**, +	 * Condition to check that spring.jmx and endpoints.jmx are enabled., +	 */, +	static class JmxEnabledCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			boolean jmxEnabled = isEnabled(context, "spring.jmx.");, +			boolean jmxEndpointsEnabled = isEnabled(context, "endpoints.jmx.");, +			return new ConditionOutcome(jmxEnabled && jmxEndpointsEnabled,, +					"JMX Endpoints");, +		}, +, +		private boolean isEnabled(ConditionContext context, String prefix) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(, +					context.getEnvironment(), prefix);, +			return resolver.getProperty("enabled", Boolean.class, true);, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(JolokiaCondition.class), +	/**, +	 * Condition to check that the Jolokia endpoint is enabled., +	 */, +	static class JolokiaCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			boolean endpointsEnabled = isEnabled(context, "endpoints.", true);, +			boolean enabled = isEnabled(context, "endpoints.jolokia.", endpointsEnabled);, +			return new ConditionOutcome(enabled, "Jolokia enabled");, +		}, +, +		private boolean isEnabled(ConditionContext context, String prefix,, +				boolean defaultValue) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(, +					context.getEnvironment(), prefix);, +			return resolver.getProperty("enabled", Boolean.class, defaultValue);, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.JmxEnabledCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;]