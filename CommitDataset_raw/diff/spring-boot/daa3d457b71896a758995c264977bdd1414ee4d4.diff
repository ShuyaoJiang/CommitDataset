[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.Registration>> STRING_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.Registration.class);, +		Map<String, OAuth2ClientProperties.Registration> registrations = getRegistrations(, +			return ConditionOutcome.match(message, +					.foundExactly("registered clients " + registrations.values().stream(), +							.map(OAuth2ClientProperties.Registration::getClientId), +	private Map<String, OAuth2ClientProperties.Registration> getRegistrations(, +		return Binder.get(environment).bind("spring.security.oauth2.client.registration",, +				STRING_REGISTRATION_MAP).orElse(Collections.emptyMap());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.Registration>> STRING_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.Registration.class);, +		Map<String, OAuth2ClientProperties.Registration> registrations = getRegistrations(, +			return ConditionOutcome.match(message, +					.foundExactly("registered clients " + registrations.values().stream(), +							.map(OAuth2ClientProperties.Registration::getClientId), +	private Map<String, OAuth2ClientProperties.Registration> getRegistrations(, +		return Binder.get(environment).bind("spring.security.oauth2.client.registration",, +				STRING_REGISTRATION_MAP).orElse(Collections.emptyMap());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java, +	private final Map<String, Registration> registration = new HashMap<>();, +	public Map<String, Registration> getRegistration() {, +		this.getRegistration().values().forEach(this::validateRegistration);, +	private void validateRegistration(Registration registration) {, +	/**, +	 * A single client registration., +	 */, +		 * Redirect URI. May be left blank when using a pre-defined provider., +		 */, +		private String redirectUri;, +, +		/**, +		public String getRedirectUri() {, +			return this.redirectUri;, +		}, +, +		public void setRedirectUri(String redirectUri) {, +			this.redirectUri = redirectUri;, +		}, +, +		@Deprecated, +		public String getRedirectUriTemplate() {, +			return getRedirectUri();, +		}, +, +		@Deprecated, +		public void setRedirectUriTemplate(String redirectUri) {, +			setRedirectUri(redirectUri);, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.Registration>> STRING_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.Registration.class);, +		Map<String, OAuth2ClientProperties.Registration> registrations = getRegistrations(, +			return ConditionOutcome.match(message, +					.foundExactly("registered clients " + registrations.values().stream(), +							.map(OAuth2ClientProperties.Registration::getClientId), +	private Map<String, OAuth2ClientProperties.Registration> getRegistrations(, +		return Binder.get(environment).bind("spring.security.oauth2.client.registration",, +				STRING_REGISTRATION_MAP).orElse(Collections.emptyMap());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java, +	private final Map<String, Registration> registration = new HashMap<>();, +	public Map<String, Registration> getRegistration() {, +		this.getRegistration().values().forEach(this::validateRegistration);, +	private void validateRegistration(Registration registration) {, +	/**, +	 * A single client registration., +	 */, +		 * Redirect URI. May be left blank when using a pre-defined provider., +		 */, +		private String redirectUri;, +, +		/**, +		public String getRedirectUri() {, +			return this.redirectUri;, +		}, +, +		public void setRedirectUri(String redirectUri) {, +			this.redirectUri = redirectUri;, +		}, +, +		@Deprecated, +		public String getRedirectUriTemplate() {, +			return getRedirectUri();, +		}, +, +		@Deprecated, +		public void setRedirectUriTemplate(String redirectUri) {, +			setRedirectUri(redirectUri);, +		}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.Registration>> STRING_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.Registration.class);]