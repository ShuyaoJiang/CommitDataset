[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +		sendFailureResponse(request, response);, +	private void sendFailureResponse(HttpServletRequest request,, +			HttpServletResponse response) throws Exception {, +			StringBuilder message = new StringBuilder();, +			for (String role : this.roles) {, +				message.append(role).append(" ");, +			}, +			response.sendError(HttpStatus.FORBIDDEN.value(),, +					"Access is denied. User must have one of the these roles: ", +							+ message.toString().trim());, +			response.sendError(HttpStatus.UNAUTHORIZED.value(),, +					"Full authentication is required to access this resource. ", +							+ "Consider adding Spring Security or set management.security.enabled to false.");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +		sendFailureResponse(request, response);, +	private void sendFailureResponse(HttpServletRequest request,, +			HttpServletResponse response) throws Exception {, +			StringBuilder message = new StringBuilder();, +			for (String role : this.roles) {, +				message.append(role).append(" ");, +			}, +			response.sendError(HttpStatus.FORBIDDEN.value(),, +					"Access is denied. User must have one of the these roles: ", +							+ message.toString().trim());, +			response.sendError(HttpStatus.UNAUTHORIZED.value(),, +					"Full authentication is required to access this resource. ", +							+ "Consider adding Spring Security or set management.security.enabled to false.");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptorTests.java, +import java.security.Principal;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.http.HttpStatus;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	private HttpServletResponse response;, +		this.response = mock(HttpServletResponse.class);, +	public void sensitiveEndpointIfNotAuthenticatedShouldNotAllowAccess(), +		assertThat(this.securityInterceptor.preHandle(this.request, this.response,, +				this.handlerMethod)).isFalse();, +		verify(this.response).sendError(HttpStatus.UNAUTHORIZED.value(),, +				"Full authentication is required to access this resource. ", +						+ "Consider adding Spring Security or set management.security.enabled to false.");, +	}, +, +	@Test, +	public void sensitiveEndpointIfRoleIsNotCorrectShouldNotAllowAccess(), +			throws Exception {, +		Principal principal = mock(Principal.class);, +		this.request.setUserPrincipal(principal);, +		verify(this.response).sendError(HttpStatus.FORBIDDEN.value(),, +				"Access is denied. User must have one of the these roles: SUPER_HERO");]