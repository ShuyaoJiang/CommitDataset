[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	 * JCache (JSR-107) backed caching., +	 */, +	JCACHE,, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	 * JCache (JSR-107) backed caching., +	 */, +	JCACHE,, +, +	/**, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +* <<boot-features-caching-provider-jcache,JCache (JSR-107)>>, +[[boot-features-caching-provider-jcache]], +==== JCache, +JCache is bootstrapped via the presence of a `javax.cache.spi.CachingProvider` on the, +classpath (i.e. a JSR-107 compliant caching library). It might happen than more that one, +provider is present, in which case the provider must be explicitly specified. Even if the, +JSR-107 standard does not enforce a standardized way to define the location of the, +configuration file, Spring Boot does its best to accommodate with implementation details., +, +[source,properties,indent=0], +----, +    # Only necessary if more than one provider is present, +	spring.cache.jcache.provider=com.acme.MyCachingProvider, +	spring.cache.jcache.config=classpath:acme.xml, +----, +, +NOTE: Since a cache library may offer both a native implementation and JSR-107 support, +Spring Boot will prefer the JSR-107 support so that the same features are available if, +you switch to a different JSR-107 implementation., +, +There are several ways to customize the underlying `javax.cache.cacheManager`:, +, +* Caches can be created on startup via the `spring.cache.cache-names` property. If a custom, +`javax.cache.configuration.Configuration` bean is defined, it is used to customize them., +* `org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer` beans are, +invoked with the reference of the `CacheManager` for full customization., +, +TIP: If a standard `javax.cache.CacheManager` bean is defined, it is wrapped, +automatically in a `org.springframework.cache.CacheManager` implementation that the, +abstraction expects. No further customization is applied on it., +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	 * JCache (JSR-107) backed caching., +	 */, +	JCACHE,, +, +	/**, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +* <<boot-features-caching-provider-jcache,JCache (JSR-107)>>, +[[boot-features-caching-provider-jcache]], +==== JCache, +JCache is bootstrapped via the presence of a `javax.cache.spi.CachingProvider` on the, +classpath (i.e. a JSR-107 compliant caching library). It might happen than more that one, +provider is present, in which case the provider must be explicitly specified. Even if the, +JSR-107 standard does not enforce a standardized way to define the location of the, +configuration file, Spring Boot does its best to accommodate with implementation details., +, +[source,properties,indent=0], +----, +    # Only necessary if more than one provider is present, +	spring.cache.jcache.provider=com.acme.MyCachingProvider, +	spring.cache.jcache.config=classpath:acme.xml, +----, +, +NOTE: Since a cache library may offer both a native implementation and JSR-107 support, +Spring Boot will prefer the JSR-107 support so that the same features are available if, +you switch to a different JSR-107 implementation., +, +There are several ways to customize the underlying `javax.cache.cacheManager`:, +, +* Caches can be created on startup via the `spring.cache.cache-names` property. If a custom, +`javax.cache.configuration.Configuration` bean is defined, it is used to customize them., +* `org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer` beans are, +invoked with the reference of the `CacheManager` for full customization., +, +TIP: If a standard `javax.cache.CacheManager` bean is defined, it is wrapped, +automatically in a `org.springframework.cache.CacheManager` implementation that the, +abstraction expects. No further customization is applied on it., +, +, +, +++ b/spring-boot-samples/spring-boot-sample-cache/README.adoc, +* Generic provider based on `org.springframework.Cache` bean definition(s), +=== JCache (JSR-107), +If you want to configure your cache infrastructure via the standard, you need a compliant, +implementation and the JSR-107 api. You first need to add `javax.cache:cache-api` to your, +project. Then you could try the following:, +, +* `Hazelcast`: add `com.hazelcast:hazelcast`, +* `Infinispan`: add `org.infinispan:infinispan-jcache`, +, +TIP: Certain cache providers do not create a default cache on-the-fly if it does not exist, +so you might need to update the sample to create the caches on startup or specify the, +location to the provider-specific file via the `spring.cache.jcache.config` property., +]