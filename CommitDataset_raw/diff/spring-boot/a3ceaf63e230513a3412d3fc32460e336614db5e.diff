[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import org.springframework.boot.loader.jar.Handler;, +, +				Handler.setUseFastConnectionExceptions(true);, +				try {, +				finally {, +					Handler.setUseFastConnectionExceptions(false);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import org.springframework.boot.loader.jar.Handler;, +, +				Handler.setUseFastConnectionExceptions(true);, +				try {, +				finally {, +					Handler.setUseFastConnectionExceptions(false);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +	private static final String SEPARATOR = "!/";, +	/**, +	 * Set if a generic static exception can be thrown when a URL cannot be connected., +	 * This optimization is used during class loading to save creating lots of exceptions, +	 * which are then swallowed., +	 * @param useFastConnectionExceptions if fast connection exceptions can be used., +	 */, +	public static void setUseFastConnectionExceptions(boolean useFastConnectionExceptions) {, +		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import org.springframework.boot.loader.jar.Handler;, +, +				Handler.setUseFastConnectionExceptions(true);, +				try {, +				finally {, +					Handler.setUseFastConnectionExceptions(false);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +	private static final String SEPARATOR = "!/";, +	/**, +	 * Set if a generic static exception can be thrown when a URL cannot be connected., +	 * This optimization is used during class loading to save creating lots of exceptions, +	 * which are then swallowed., +	 * @param useFastConnectionExceptions if fast connection exceptions can be used., +	 */, +	public static void setUseFastConnectionExceptions(boolean useFastConnectionExceptions) {, +		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private static final AsciiBytes SLASH = new AsciiBytes("/");, +, +		return getJarEntryData(new AsciiBytes(name));, +	}, +, +	public JarEntryData getJarEntryData(AsciiBytes name) {, +		if (name == null) {, +			return null;, +		}, +		JarEntryData entryData = entriesByName.get(name);, +		if (entryData == null && !name.endsWith(SLASH)) {, +			entryData = entriesByName.get(name.append(SLASH));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import org.springframework.boot.loader.jar.Handler;, +, +				Handler.setUseFastConnectionExceptions(true);, +				try {, +				finally {, +					Handler.setUseFastConnectionExceptions(false);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +	private static final String SEPARATOR = "!/";, +	/**, +	 * Set if a generic static exception can be thrown when a URL cannot be connected., +	 * This optimization is used during class loading to save creating lots of exceptions, +	 * which are then swallowed., +	 * @param useFastConnectionExceptions if fast connection exceptions can be used., +	 */, +	public static void setUseFastConnectionExceptions(boolean useFastConnectionExceptions) {, +		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	private static final AsciiBytes SLASH = new AsciiBytes("/");, +, +		return getJarEntryData(new AsciiBytes(name));, +	}, +, +	public JarEntryData getJarEntryData(AsciiBytes name) {, +		if (name == null) {, +			return null;, +		}, +		JarEntryData entryData = entriesByName.get(name);, +		if (entryData == null && !name.endsWith(SLASH)) {, +			entryData = entriesByName.get(name.append(SLASH));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, +import java.net.URLConnection;]