[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	@ConditionalOnBean(SolrClient.class), +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {, +		private Map<String, SolrClient> solrClients;, +			return createHealthIndicator(this.solrClients);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	@ConditionalOnBean(SolrClient.class), +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {, +		private Map<String, SolrClient> solrClients;, +			return createHealthIndicator(this.solrClients);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	private final SolrClient solrClient;, +	public SolrHealthIndicator(SolrClient solrClient) {, +		this.solrClient = solrClient;, +		Object status = this.solrClient.ping().getResponse().get("status");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	@ConditionalOnBean(SolrClient.class), +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {, +		private Map<String, SolrClient> solrClients;, +			return createHealthIndicator(this.solrClients);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	private final SolrClient solrClient;, +	public SolrHealthIndicator(SolrClient solrClient) {, +		this.solrClient = solrClient;, +		Object status = this.solrClient.ping().getResponse().get("status");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +		assertThat(this.context.getBeanNamesForType(SolrClient.class).length), +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willReturn(pingResponse);, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);, +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willThrow(new IOException("Connection failed"));, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	@ConditionalOnBean(SolrClient.class), +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {, +		private Map<String, SolrClient> solrClients;, +			return createHealthIndicator(this.solrClients);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	private final SolrClient solrClient;, +	public SolrHealthIndicator(SolrClient solrClient) {, +		this.solrClient = solrClient;, +		Object status = this.solrClient.ping().getResponse().get("status");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +		assertThat(this.context.getBeanNamesForType(SolrClient.class).length), +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willReturn(pingResponse);, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);, +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willThrow(new IOException("Connection failed"));, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/solr/SolrRepositoriesAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, + * Activates when there is no bean of type {@link SolrRepositoryFactoryBean} found in, + * context, and both {@link SolrRepository} and {@link SolrClient} can be found on, + * classpath., +@ConditionalOnClass({ SolrClient.class, SolrRepository.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	@ConditionalOnBean(SolrClient.class), +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrClient> {, +		private Map<String, SolrClient> solrClients;, +			return createHealthIndicator(this.solrClients);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +	private final SolrClient solrClient;, +	public SolrHealthIndicator(SolrClient solrClient) {, +		this.solrClient = solrClient;, +		Object status = this.solrClient.ping().getResponse().get("status");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java, + * Copyright 2012-2016 the original author or authors., +import org.apache.solr.client.solrj.SolrClient;, +		assertThat(this.context.getBeanNamesForType(SolrClient.class).length), +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willReturn(pingResponse);, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);, +		SolrClient solrClient = mock(SolrClient.class);, +		given(solrClient.ping()).willThrow(new IOException("Connection failed"));, +		SolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);]