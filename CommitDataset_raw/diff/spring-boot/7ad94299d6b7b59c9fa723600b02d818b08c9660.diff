[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java, +import io.micrometer.core.instrument.MeterRegistry;, +import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +	@ConditionalOnBean(MeterRegistry.class), +	@ConditionalOnMissingBean({ TomcatMetrics.class, TomcatMetricsBinder.class }), +	public TomcatMetricsBinder tomcatMetricsBinder(MeterRegistry meterRegistry) {, +		return new TomcatMetricsBinder(meterRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java, +import io.micrometer.core.instrument.MeterRegistry;, +import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +	@ConditionalOnBean(MeterRegistry.class), +	@ConditionalOnMissingBean({ TomcatMetrics.class, TomcatMetricsBinder.class }), +	public TomcatMetricsBinder tomcatMetricsBinder(MeterRegistry meterRegistry) {, +		return new TomcatMetricsBinder(meterRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfigurationTests.java, +import io.micrometer.core.instrument.MeterRegistry;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;, +import org.springframework.boot.context.event.ApplicationStartedEvent;, +								MeterRegistryConfiguration.class), +							context.publishEvent(, +									new ApplicationStartedEvent(new SpringApplication(),, +											null, context.getSourceApplicationContext()));, +							assertThat(context).hasSingleBean(TomcatMetricsBinder.class);, +							SimpleMeterRegistry registry = context, +									.getBean(SimpleMeterRegistry.class);, +						.withUserConfiguration(ReactiveWebServerConfiguration.class,, +								MeterRegistryConfiguration.class), +							context.publishEvent(, +									new ApplicationStartedEvent(new SpringApplication(),, +											null, context.getSourceApplicationContext()));, +							SimpleMeterRegistry registry = context, +									.getBean(SimpleMeterRegistry.class);, +				.withUserConfiguration(MeterRegistryConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(TomcatMetricsBinder.class);, +				});, +	}, +, +	@Test, +	public void allowsCustomTomcatMetricsBinderToBeUsed() {, +		new WebApplicationContextRunner(), +				.withConfiguration(, +						AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)), +				.withUserConfiguration(MeterRegistryConfiguration.class,, +						CustomTomcatMetricsBinder.class), +				.run((context) -> assertThat(context), +						.hasSingleBean(TomcatMetricsBinder.class), +						.hasBean("customTomcatMetricsBinder"));, +				.withUserConfiguration(MeterRegistryConfiguration.class,, +						CustomTomcatMetrics.class), +				.run((context) -> assertThat(context), +						.doesNotHaveBean(TomcatMetricsBinder.class), +	static class MeterRegistryConfiguration {, +, +		@Bean, +		public SimpleMeterRegistry meterRegistry() {, +			return new SimpleMeterRegistry();, +		}, +, +	}, +, +	@Configuration, +	static class CustomTomcatMetricsBinder {, +		public TomcatMetricsBinder customTomcatMetricsBinder(, +				MeterRegistry meterRegistry) {, +			return new TomcatMetricsBinder(meterRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java, +import io.micrometer.core.instrument.MeterRegistry;, +import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +	@ConditionalOnBean(MeterRegistry.class), +	@ConditionalOnMissingBean({ TomcatMetrics.class, TomcatMetricsBinder.class }), +	public TomcatMetricsBinder tomcatMetricsBinder(MeterRegistry meterRegistry) {, +		return new TomcatMetricsBinder(meterRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfigurationTests.java, +import io.micrometer.core.instrument.MeterRegistry;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;, +import org.springframework.boot.context.event.ApplicationStartedEvent;, +								MeterRegistryConfiguration.class), +							context.publishEvent(, +									new ApplicationStartedEvent(new SpringApplication(),, +											null, context.getSourceApplicationContext()));, +							assertThat(context).hasSingleBean(TomcatMetricsBinder.class);, +							SimpleMeterRegistry registry = context, +									.getBean(SimpleMeterRegistry.class);, +						.withUserConfiguration(ReactiveWebServerConfiguration.class,, +								MeterRegistryConfiguration.class), +							context.publishEvent(, +									new ApplicationStartedEvent(new SpringApplication(),, +											null, context.getSourceApplicationContext()));, +							SimpleMeterRegistry registry = context, +									.getBean(SimpleMeterRegistry.class);, +				.withUserConfiguration(MeterRegistryConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(TomcatMetricsBinder.class);, +				});]