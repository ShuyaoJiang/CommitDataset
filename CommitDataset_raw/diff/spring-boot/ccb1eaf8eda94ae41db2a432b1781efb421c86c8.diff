[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(ServerProperties.class), +	private final ServerProperties serverProperties;, +, +	HashMapSessionConfiguration(ObjectProvider<ServerProperties> serverProperties) {, +		this.serverProperties = serverProperties.getIfUnique();, +	}, +, +	public MapSessionRepository sessionRepository() {, +		if (this.serverProperties != null) {, +			Integer timeout = this.serverProperties.getSession().getTimeout();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(ServerProperties.class), +	private final ServerProperties serverProperties;, +, +	HashMapSessionConfiguration(ObjectProvider<ServerProperties> serverProperties) {, +		this.serverProperties = serverProperties.getIfUnique();, +	}, +, +	public MapSessionRepository sessionRepository() {, +		if (this.serverProperties != null) {, +			Integer timeout = this.serverProperties.getSession().getTimeout();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.session.hazelcast.HazelcastSessionRepository;, +@ConditionalOnClass(HazelcastSessionRepository.class), +@EnableConfigurationProperties({ ServerProperties.class,, +		HazelcastSessionProperties.class }), +		private final HazelcastSessionProperties sessionProperties;, +, +		private final ServerProperties serverProperties;, +, +		SpringBootHazelcastHttpSessionConfiguration(, +				HazelcastSessionProperties sessionProperties,, +				ObjectProvider<ServerProperties> serverProperties) {, +			this.sessionProperties = sessionProperties;, +			this.serverProperties = serverProperties.getIfUnique();, +		}, +, +		@PostConstruct, +		public void init() {, +			if (this.serverProperties != null) {, +				Integer timeout = this.serverProperties.getSession().getTimeout();, +			}, +			setSessionMapName(this.sessionProperties.getMapName());, +			setHazelcastFlushMode(this.sessionProperties.getFlushMode());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HashMapSessionConfiguration.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@EnableConfigurationProperties(ServerProperties.class), +	private final ServerProperties serverProperties;, +, +	HashMapSessionConfiguration(ObjectProvider<ServerProperties> serverProperties) {, +		this.serverProperties = serverProperties.getIfUnique();, +	}, +, +	public MapSessionRepository sessionRepository() {, +		if (this.serverProperties != null) {, +			Integer timeout = this.serverProperties.getSession().getTimeout();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/HazelcastSessionConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import javax.annotation.PostConstruct;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.session.hazelcast.HazelcastSessionRepository;, +@ConditionalOnClass(HazelcastSessionRepository.class), +@EnableConfigurationProperties({ ServerProperties.class,, +		HazelcastSessionProperties.class }), +		private final HazelcastSessionProperties sessionProperties;, +, +		private final ServerProperties serverProperties;, +, +		SpringBootHazelcastHttpSessionConfiguration(, +				HazelcastSessionProperties sessionProperties,, +				ObjectProvider<ServerProperties> serverProperties) {, +			this.sessionProperties = sessionProperties;, +			this.serverProperties = serverProperties.getIfUnique();, +		}, +, +		@PostConstruct, +		public void init() {]