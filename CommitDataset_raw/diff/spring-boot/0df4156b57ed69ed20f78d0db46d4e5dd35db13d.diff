[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		public static ManagementServerPort get(ApplicationContext beanFactory) {, +			if (!(beanFactory instanceof GenericWebApplicationContext)) {, +				// Current context is no a a webapp, +				return DIFFERENT;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		public static ManagementServerPort get(ApplicationContext beanFactory) {, +			if (!(beanFactory instanceof GenericWebApplicationContext)) {, +				// Current context is no a a webapp, +				return DIFFERENT;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class EndpointWebMvcChildContextConfiguration {, +, +	@Configuration, +	protected static class ServerCustomization implements, +		private ListableBeanFactory beanFactory;, +, +		// This needs to be lazily initialized because EmbeddedServletContainerCustomizer, +		// instances get their callback very early in the context lifecycle., +			if (this.managementServerProperties == null) {, +				this.managementServerProperties = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ManagementServerProperties.class);, +			}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		public static ManagementServerPort get(ApplicationContext beanFactory) {, +			if (!(beanFactory instanceof GenericWebApplicationContext)) {, +				// Current context is no a a webapp, +				return DIFFERENT;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class EndpointWebMvcChildContextConfiguration {, +, +	@Configuration, +	protected static class ServerCustomization implements, +		private ListableBeanFactory beanFactory;, +, +		// This needs to be lazily initialized because EmbeddedServletContainerCustomizer, +		// instances get their callback very early in the context lifecycle., +			if (this.managementServerProperties == null) {, +				this.managementServerProperties = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ManagementServerProperties.class);, +			}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +				EmbeddedServletContainerAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		public static ManagementServerPort get(ApplicationContext beanFactory) {, +			if (!(beanFactory instanceof GenericWebApplicationContext)) {, +				// Current context is no a a webapp, +				return DIFFERENT;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +public class EndpointWebMvcChildContextConfiguration {, +, +	@Configuration, +	protected static class ServerCustomization implements, +		private ListableBeanFactory beanFactory;, +, +		// This needs to be lazily initialized because EmbeddedServletContainerCustomizer, +		// instances get their callback very early in the context lifecycle., +			if (this.managementServerProperties == null) {, +				this.managementServerProperties = BeanFactoryUtils, +						.beanOfTypeIncludingAncestors(this.beanFactory,, +								ManagementServerProperties.class);, +			}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +@ConditionalOnWebApplication]