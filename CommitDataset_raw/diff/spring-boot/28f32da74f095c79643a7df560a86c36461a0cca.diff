[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/links").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/links").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint.HalBrowserLocation;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.ResourceLoader;, +import static org.springframework.hateoas.mvc.BasicLinkBuilder.linkToCurrentMapping;, + * @author Phillip Webb, +	@Conditional(HalBrowserCondition.class), +	@Bean, +	public HalBrowserMvcEndpoint halBrowserMvcEndpoint(, +		return new HalBrowserMvcEndpoint(management);, +	 * {@link SpringBootCondition} to detect the HAL browser., +	protected static class HalBrowserCondition extends SpringBootCondition {, +			ResourceLoader loader = context.getResourceLoader();, +			loader = (loader == null ? new DefaultResourceLoader() : loader);, +			HalBrowserLocation found = HalBrowserMvcEndpoint, +					.getHalBrowserLocation(loader);, +			return new ConditionOutcome(found != null, "HAL Browser ", +					+ (found == null ? "not found" : "at " + found));, +			return new LinksMvcEndpoint();, +				if (pattern != null && body instanceof ResourceSupport) {, +					beforeBodyWrite(pattern.toString(), (ResourceSupport) body);, +			private void beforeBodyWrite(String path, ResourceSupport body) {, +				if (isLinksPath(path)) {, +					this.linksEnhancer.addEndpointLinks(body,, +							this.linksEndpoint.getPath());, +				else if (isHomePage(path)) {, +					body.add(linkToCurrentMapping(), +							.slash(this.management.getContextPath()), +							.slash(this.linksEndpoint.getPath()).withRel("actuator"));, +				}, +						&& !HalBrowserMvcEndpoint.class.isAssignableFrom(controllerType);, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/links").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint.HalBrowserLocation;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.ResourceLoader;, +import static org.springframework.hateoas.mvc.BasicLinkBuilder.linkToCurrentMapping;, + * @author Phillip Webb, +	@Conditional(HalBrowserCondition.class), +	@Bean, +	public HalBrowserMvcEndpoint halBrowserMvcEndpoint(, +		return new HalBrowserMvcEndpoint(management);, +	 * {@link SpringBootCondition} to detect the HAL browser., +	protected static class HalBrowserCondition extends SpringBootCondition {, +			ResourceLoader loader = context.getResourceLoader();, +			loader = (loader == null ? new DefaultResourceLoader() : loader);, +			HalBrowserLocation found = HalBrowserMvcEndpoint, +					.getHalBrowserLocation(loader);, +			return new ConditionOutcome(found != null, "HAL Browser ", +					+ (found == null ? "not found" : "at " + found));, +			return new LinksMvcEndpoint();, +				if (pattern != null && body instanceof ResourceSupport) {, +					beforeBodyWrite(pattern.toString(), (ResourceSupport) body);, +			private void beforeBodyWrite(String path, ResourceSupport body) {, +				if (isLinksPath(path)) {, +					this.linksEnhancer.addEndpointLinks(body,, +							this.linksEndpoint.getPath());, +				else if (isHomePage(path)) {, +					body.add(linkToCurrentMapping(), +							.slash(this.management.getContextPath()), +							.slash(this.linksEndpoint.getPath()).withRel("actuator"));, +				}, +						&& !HalBrowserMvcEndpoint.class.isAssignableFrom(controllerType);, +++ /dev/null, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +		this.mockMvc.perform(get("/links").accept(MediaType.APPLICATION_JSON)), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint;, +import org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpoint.HalBrowserLocation;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.ResourceLoader;, +import static org.springframework.hateoas.mvc.BasicLinkBuilder.linkToCurrentMapping;, + * @author Phillip Webb, +	@Conditional(HalBrowserCondition.class), +	@Bean, +	public HalBrowserMvcEndpoint halBrowserMvcEndpoint(, +		return new HalBrowserMvcEndpoint(management);, +	 * {@link SpringBootCondition} to detect the HAL browser., +	protected static class HalBrowserCondition extends SpringBootCondition {, +			ResourceLoader loader = context.getResourceLoader();, +			loader = (loader == null ? new DefaultResourceLoader() : loader);, +			HalBrowserLocation found = HalBrowserMvcEndpoint, +					.getHalBrowserLocation(loader);, +			return new ConditionOutcome(found != null, "HAL Browser ", +					+ (found == null ? "not found" : "at " + found));, +			return new LinksMvcEndpoint();, +				if (pattern != null && body instanceof ResourceSupport) {, +					beforeBodyWrite(pattern.toString(), (ResourceSupport) body);, +			private void beforeBodyWrite(String path, ResourceSupport body) {, +				if (isLinksPath(path)) {, +					this.linksEnhancer.addEndpointLinks(body,, +							this.linksEndpoint.getPath());, +				else if (isHomePage(path)) {]