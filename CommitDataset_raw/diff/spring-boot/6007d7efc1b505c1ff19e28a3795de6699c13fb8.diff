[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import io.undertow.Undertow;, +import org.eclipse.jetty.server.ServerConnector;, +	/**, +	 * The number of milliseconds connectors will wait for another HTTP request before closing the connection., +	 * The default value is to use the value that has been set for the connectionTimeout attribute., +	 * Use a value of -1 to indicate no (i.e. infinite) timeout., +	 */, +	private int connectionTimeout = -1;, +, +	public int getConnectionTimeout() {, +		return connectionTimeout;, +	}, +, +	public void setConnectionTimeout(final int connectionTimeout) {, +		this.connectionTimeout = connectionTimeout;, +	}, +, +			customizeConnectionTimeout(serverProperties, factory);, +		}, +, +		private void customizeConnectionTimeout(final ServerProperties serverProperties, final TomcatEmbeddedServletContainerFactory factory) {, +			for (Connector connector : factory.getAdditionalTomcatConnectors()) {, +				if (connector.getProtocolHandler() instanceof AbstractProtocol) {, +					final AbstractProtocol handler = (AbstractProtocol) connector.getProtocolHandler();, +					handler.setConnectionTimeout(serverProperties.getConnectionTimeout());, +				}, +			}, +		void customizeJetty(final ServerProperties serverProperties,, +, +			customizeConnectionTimeout(serverProperties, factory);, +		}, +		private void customizeConnectionTimeout(final ServerProperties serverProperties,, +													final JettyEmbeddedServletContainerFactory factory) {, +			factory.addServerCustomizers(new JettyServerCustomizer() {, +				@Override, +				public void customize(final Server server) {, +					for (org.eclipse.jetty.server.Connector connector : server.getConnectors()) {, +						if (connector instanceof ServerConnector) {, +							ServerConnector serverConnector = (ServerConnector) connector;, +							serverConnector.setIdleTimeout(serverProperties.getConnectionTimeout());, +						}, +					}, +				}, +			});, +		void customizeUndertow(final ServerProperties serverProperties,, +, +			customizeConnectionTimeout(serverProperties, factory);, +		}, +		private void customizeConnectionTimeout(final ServerProperties serverProperties,, +													final UndertowEmbeddedServletContainerFactory factory) {, +			factory.addBuilderCustomizers(new UndertowBuilderCustomizer() {, +				@Override, +				public void customize(Builder builder) {, +					builder.setSocketOption(UndertowOptions.NO_REQUEST_TIMEOUT, serverProperties.getConnectionTimeout());, +				}, +			});, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import io.undertow.Undertow;, +import org.eclipse.jetty.server.ServerConnector;, +	/**, +	 * The number of milliseconds connectors will wait for another HTTP request before closing the connection., +	 * The default value is to use the value that has been set for the connectionTimeout attribute., +	 * Use a value of -1 to indicate no (i.e. infinite) timeout., +	 */, +	private int connectionTimeout = -1;, +, +	public int getConnectionTimeout() {, +		return connectionTimeout;, +	}, +, +	public void setConnectionTimeout(final int connectionTimeout) {, +		this.connectionTimeout = connectionTimeout;, +	}, +, +			customizeConnectionTimeout(serverProperties, factory);, +		}, +, +		private void customizeConnectionTimeout(final ServerProperties serverProperties, final TomcatEmbeddedServletContainerFactory factory) {, +			for (Connector connector : factory.getAdditionalTomcatConnectors()) {, +				if (connector.getProtocolHandler() instanceof AbstractProtocol) {, +					final AbstractProtocol handler = (AbstractProtocol) connector.getProtocolHandler();, +					handler.setConnectionTimeout(serverProperties.getConnectionTimeout());, +				}, +			}, +		void customizeJetty(final ServerProperties serverProperties,, +, +			customizeConnectionTimeout(serverProperties, factory);, +		}, +		private void customizeConnectionTimeout(final ServerProperties serverProperties,, +													final JettyEmbeddedServletContainerFactory factory) {, +			factory.addServerCustomizers(new JettyServerCustomizer() {, +				@Override, +				public void customize(final Server server) {, +					for (org.eclipse.jetty.server.Connector connector : server.getConnectors()) {, +						if (connector instanceof ServerConnector) {, +							ServerConnector serverConnector = (ServerConnector) connector;, +							serverConnector.setIdleTimeout(serverProperties.getConnectionTimeout());, +						}, +					}]