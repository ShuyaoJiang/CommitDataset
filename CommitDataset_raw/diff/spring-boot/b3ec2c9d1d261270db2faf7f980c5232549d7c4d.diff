[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private static final Log logger = LogFactory, +			.getLog(AnnotationEndpointDiscoverer.class);, +					logger.debug(, +							"Non-matching EndpointInfo for EndpointFilter: " + filter,, +							ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private static final Log logger = LogFactory, +			.getLog(AnnotationEndpointDiscoverer.class);, +					logger.debug(, +							"Non-matching EndpointInfo for EndpointFilter: " + filter,, +							ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +						// Possibly a lambda-defined CacheMeterBinderProvider which we, +						// could not resolve the generic Cache type for, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private static final Log logger = LogFactory, +			.getLog(AnnotationEndpointDiscoverer.class);, +					logger.debug(, +							"Non-matching EndpointInfo for EndpointFilter: " + filter,, +							ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +						// Possibly a lambda-defined CacheMeterBinderProvider which we, +						// could not resolve the generic Cache type for, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +					assertThat(context).hasSingleBean(MessageSource.class);, +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private static final Log logger = LogFactory, +			.getLog(AnnotationEndpointDiscoverer.class);, +					logger.debug(, +							"Non-matching EndpointInfo for EndpointFilter: " + filter,, +							ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +						// Possibly a lambda-defined CacheMeterBinderProvider which we, +						// could not resolve the generic Cache type for, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +					assertThat(context).hasSingleBean(MessageSource.class);, +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/WebServerFactoryCustomizerBeanPostProcessor.java, +	private static final Log logger = LogFactory, +			.getLog(WebServerFactoryCustomizerBeanPostProcessor.class);, +				// Possibly a lambda-defined WebServerFactoryCustomizer which we could not, +				// resolve the, +			logger.debug(, +					"Non-matching WebServerFactory type for WebServerFactoryCustomizer: ", +							+ customizer,, +					ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscoverer.java, +	private static final Log logger = LogFactory, +			.getLog(AnnotationEndpointDiscoverer.class);, +					logger.debug(, +							"Non-matching EndpointInfo for EndpointFilter: " + filter,, +							ex);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +						// Possibly a lambda-defined CacheMeterBinderProvider which we, +						// could not resolve the generic Cache type for, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +					assertThat(context).hasSingleBean(MessageSource.class);, +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +					assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)), +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/WebServerFactoryCustomizerBeanPostProcessor.java, +	private static final Log logger = LogFactory, +			.getLog(WebServerFactoryCustomizerBeanPostProcessor.class);, +				// Possibly a lambda-defined WebServerFactoryCustomizer which we could not, +				// resolve the, +			logger.debug(, +					"Non-matching WebServerFactory type for WebServerFactoryCustomizer: ", +							+ customizer,, +					ex);, +++ b/spring-boot-tests/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java, +import com.github.dockerjava.api.DockerClientException;, +import com.github.dockerjava.core.CompressArchiveUtil;]