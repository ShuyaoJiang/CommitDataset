[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import org.springframework.util.StringUtils;, +	private boolean fileOutput;, +, +	private boolean consoleOutput;, +, +	public AbstractLoggingSystem(ClassLoader classLoader) {, +		this(classLoader, false, true);, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput,, +			boolean consoleOutput) {, +		this.classLoader = classLoader;, +		this.fileOutput = fileOutput;, +		this.consoleOutput = consoleOutput;, +		this.paths = getLogFileNames();, +	}, +, +	protected abstract String[] getLogFileNames();, +		// Fallback to the non-prefixed value taking into account file and console preferences, +		initialize(getPackagedConfigFile(addChannels(this.paths[this.paths.length - 1])));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +	private String addChannels(String fileName) {, +		String extension = "." + StringUtils.getFilenameExtension(fileName);, +		return fileName.replace(extension, getChannel() + extension);, +	}, +, +	private String getChannel() {, +		return (fileOutput && consoleOutput) ? "-file-console" : (fileOutput ? "-file", +				: (consoleOutput ? "" : "-none"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import org.springframework.util.StringUtils;, +	private boolean fileOutput;, +, +	private boolean consoleOutput;, +, +	public AbstractLoggingSystem(ClassLoader classLoader) {, +		this(classLoader, false, true);, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput,, +			boolean consoleOutput) {, +		this.classLoader = classLoader;, +		this.fileOutput = fileOutput;, +		this.consoleOutput = consoleOutput;, +		this.paths = getLogFileNames();, +	}, +, +	protected abstract String[] getLogFileNames();, +		// Fallback to the non-prefixed value taking into account file and console preferences, +		initialize(getPackagedConfigFile(addChannels(this.paths[this.paths.length - 1])));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +	private String addChannels(String fileName) {, +		String extension = "." + StringUtils.getFilenameExtension(fileName);, +		return fileName.replace(extension, getChannel() + extension);, +	}, +, +	private String getChannel() {, +		return (fileOutput && consoleOutput) ? "-file-console" : (fileOutput ? "-file", +				: (consoleOutput ? "" : "-none"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	public JavaLoggingSystem(ClassLoader classLoader) {, +		this(classLoader, false, true);, +	}, +	, +	public JavaLoggingSystem(ClassLoader classLoader, boolean fileOutput,, +			boolean consoleOutput) {, +	protected String[] getLogFileNames() {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import org.springframework.util.StringUtils;, +	private boolean fileOutput;, +, +	private boolean consoleOutput;, +, +	public AbstractLoggingSystem(ClassLoader classLoader) {, +		this(classLoader, false, true);, +	public AbstractLoggingSystem(ClassLoader classLoader, boolean fileOutput,, +			boolean consoleOutput) {, +		this.classLoader = classLoader;, +		this.fileOutput = fileOutput;, +		this.consoleOutput = consoleOutput;, +		this.paths = getLogFileNames();, +	}, +, +	protected abstract String[] getLogFileNames();, +		// Fallback to the non-prefixed value taking into account file and console preferences, +		initialize(getPackagedConfigFile(addChannels(this.paths[this.paths.length - 1])));, +		initialize(getPackagedConfigFile("basic-" + this.paths[this.paths.length - 1]));, +	private String addChannels(String fileName) {, +		String extension = "." + StringUtils.getFilenameExtension(fileName);, +		return fileName.replace(extension, getChannel() + extension);, +	}, +, +	private String getChannel() {, +		return (fileOutput && consoleOutput) ? "-file-console" : (fileOutput ? "-file", +				: (consoleOutput ? "" : "-none"));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +	public JavaLoggingSystem(ClassLoader classLoader) {]