[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoProperties.java, +		if (this.group == null) {, +			this.group = this.project.getGroup().toString();, +		}, +		return this.group;, +		if (this.version == null) {, +			this.version = this.project.getVersion().toString();, +		}, +		return this.version;, +		if (this.name == null) {, +			this.name = this.project.getName();, +		}, +		return this.name;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoProperties.java, +		if (this.group == null) {, +			this.group = this.project.getGroup().toString();, +		}, +		return this.group;, +		if (this.version == null) {, +			this.version = this.project.getVersion().toString();, +		}, +		return this.version;, +		if (this.name == null) {, +			this.name = this.project.getName();, +		}, +		return this.name;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoIntegrationTests.java, +import org.gradle.testkit.runner.BuildResult;, +	@Test, +	public void notUpToDateWhenExecutedTwiceWithFixedTimeAndChangedProjectVersion() {, +		assertThat(this.gradleBuild.build("buildInfo", "-PnullTime").task(":buildInfo"), +				.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		BuildResult result = this.gradleBuild.build("buildInfo", "-PnullTime",, +				"-PprojectVersion=0.2.0");, +		System.out.println(result.getOutput());, +		assertThat(result.task(":buildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoProperties.java, +		if (this.group == null) {, +			this.group = this.project.getGroup().toString();, +		}, +		return this.group;, +		if (this.version == null) {, +			this.version = this.project.getVersion().toString();, +		}, +		return this.version;, +		if (this.name == null) {, +			this.name = this.project.getName();, +		}, +		return this.name;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoIntegrationTests.java, +import org.gradle.testkit.runner.BuildResult;, +	@Test, +	public void notUpToDateWhenExecutedTwiceWithFixedTimeAndChangedProjectVersion() {, +		assertThat(this.gradleBuild.build("buildInfo", "-PnullTime").task(":buildInfo"), +				.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +		BuildResult result = this.gradleBuild.build("buildInfo", "-PnullTime",, +				"-PprojectVersion=0.2.0");, +		System.out.println(result.getOutput());, +		assertThat(result.task(":buildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/resources/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoIntegrationTests.gradle, +version = property('projectVersion', '0.1.0'), +, +		if (!project.hasProperty('projectVersion')) {, +			version = property('buildInfoVersion', '1.0'), +		}]