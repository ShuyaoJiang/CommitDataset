[+++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +		List<String> candidates = getCandidateLocations(environment, resourceLoader);, +			for (String path : StringUtils.commaDelimitedListToStringArray(environment, +					.resolvePlaceholders(candidate))) {, +, +				if (LOCATION_VARIABLE.equals(candidate) && !path.contains("$")) {, +					if (!path.contains(":")) {, +						path = "file:" + path;, +					}, +					path = StringUtils.cleanPath(path);, +				}, +, +				PropertySource<?> source = load(environment, resourceLoader, path, null);, +, +			}, +	private List<String> getCandidateLocations(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader) {, +						.commaDelimitedListToStringArray(environment, +								.resolvePlaceholders(this.names))) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +		List<String> candidates = getCandidateLocations(environment, resourceLoader);, +			for (String path : StringUtils.commaDelimitedListToStringArray(environment, +					.resolvePlaceholders(candidate))) {, +, +				if (LOCATION_VARIABLE.equals(candidate) && !path.contains("$")) {, +					if (!path.contains(":")) {, +						path = "file:" + path;, +					}, +					path = StringUtils.cleanPath(path);, +				}, +, +				PropertySource<?> source = load(environment, resourceLoader, path, null);, +, +			}, +	private List<String> getCandidateLocations(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader) {, +						.commaDelimitedListToStringArray(environment, +								.resolvePlaceholders(this.names))) {, +++ b/spring-boot/src/test/java/org/springframework/boot/context/listener/ConfigFileApplicationListenerTests.java, +	public void loadTwoPropertiesFile() throws Exception {, +		EnvironmentTestUtils, +				.addEnvironment(, +						this.environment,, +						"spring.config.location:classpath:testproperties.properties,classpath:application.properties");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +	}, +, +	@Test, +	public void loadTwoOfThreePropertiesFile() throws Exception {, +		EnvironmentTestUtils, +				.addEnvironment(, +						this.environment,, +						"spring.config.location:classpath:testproperties.properties,classpath:application.properties,classpath:nonexistent.properties");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +	}, +, +	@Test, +		EnvironmentTestUtils.addEnvironment(this.environment,, +				"spring.profiles.active=specificprofile",, +				"spring.config.name=specificfile");]