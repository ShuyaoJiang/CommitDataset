[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		String endpointKey = ItemMetadata.newItemMetadataPrefix(, +				"management.endpoint.", endpointId);, +				.add(ItemMetadata.newGroup(endpointKey, type, type, null));, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		String endpointKey = ItemMetadata.newItemMetadataPrefix(, +				"management.endpoint.", endpointId);, +				.add(ItemMetadata.newGroup(endpointKey, type, type, null));, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.Locale;, +		return dashed.toString().toLowerCase(Locale.ENGLISH);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		String endpointKey = ItemMetadata.newItemMetadataPrefix(, +				"management.endpoint.", endpointId);, +				.add(ItemMetadata.newGroup(endpointKey, type, type, null));, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.Locale;, +		return dashed.toString().toLowerCase(Locale.ENGLISH);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +import java.util.Locale;, +, +	public static String newItemMetadataPrefix(String prefix, String suffix) {, +		return prefix.toLowerCase(Locale.ENGLISH) +, +				ConfigurationMetadata.toDashedCase(suffix);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		String endpointKey = ItemMetadata.newItemMetadataPrefix(, +				"management.endpoint.", endpointId);, +				.add(ItemMetadata.newGroup(endpointKey, type, type, null));, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.Locale;, +		return dashed.toString().toLowerCase(Locale.ENGLISH);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +import java.util.Locale;, +, +	public static String newItemMetadataPrefix(String prefix, String suffix) {, +		return prefix.toLowerCase(Locale.ENGLISH) +, +				ConfigurationMetadata.toDashedCase(suffix);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.endpoint.CamelCaseEndpoint;, +	public void camelCaseEndpoint() {, +		ConfigurationMetadata metadata = compile(CamelCaseEndpoint.class);, +		assertThat(metadata).has(Metadata.withGroup("management.endpoint.pascal-case"), +				.fromSource(CamelCaseEndpoint.class));, +		assertThat(metadata).has(enabledFlag("PascalCase", "pascal-case", true));, +		assertThat(metadata).has(cacheTtl("pascal-case"));, +		assertThat(metadata.getItems()).hasSize(3);, +	}, +, +	@Test, +			String endpointSuffix, Boolean defaultValue) {, +		return Metadata.withEnabledFlag("management.endpoint." + endpointSuffix, +				+ ".enabled").withDefaultValue(defaultValue).withDescription(, +	private Metadata.MetadataItemCondition enabledFlag(String endpointId,, +			Boolean defaultValue) {, +		return enabledFlag(endpointId, endpointId, defaultValue);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		String endpointKey = ItemMetadata.newItemMetadataPrefix(, +				"management.endpoint.", endpointId);, +				.add(ItemMetadata.newGroup(endpointKey, type, type, null));, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +		this.metadataCollector.add(ItemMetadata.newProperty(endpointKey,, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.Locale;, +		return dashed.toString().toLowerCase(Locale.ENGLISH);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ItemMetadata.java, +import java.util.Locale;, +, +	public static String newItemMetadataPrefix(String prefix, String suffix) {, +		return prefix.toLowerCase(Locale.ENGLISH) +, +				ConfigurationMetadata.toDashedCase(suffix);, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.endpoint.CamelCaseEndpoint;, +	public void camelCaseEndpoint() {, +		ConfigurationMetadata metadata = compile(CamelCaseEndpoint.class);, +		assertThat(metadata).has(Metadata.withGroup("management.endpoint.pascal-case"), +				.fromSource(CamelCaseEndpoint.class));, +		assertThat(metadata).has(enabledFlag("PascalCase", "pascal-case", true));, +		assertThat(metadata).has(cacheTtl("pascal-case"));, +		assertThat(metadata.getItems()).hasSize(3);, +	}, +, +	@Test, +			String endpointSuffix, Boolean defaultValue) {, +		return Metadata.withEnabledFlag("management.endpoint." + endpointSuffix]