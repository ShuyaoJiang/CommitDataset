[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +				if (isQuiet()) {, +			@Override, +			public boolean isQuiet() {, +				return getOptions().has(RunOptionHandler.this.quietOption);, +			}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +				if (isQuiet()) {, +			@Override, +			public boolean isQuiet() {, +				return getOptions().has(RunOptionHandler.this.quietOption);, +			}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +				configuration.getRepositoryConfiguration(), resolutionContext,, +				configuration.isQuiet());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +				if (isQuiet()) {, +			@Override, +			public boolean isQuiet() {, +				return getOptions().has(RunOptionHandler.this.quietOption);, +			}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +				configuration.getRepositoryConfiguration(), resolutionContext,, +				configuration.isQuiet());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompilerConfiguration.java, +	/**, +	 * Returns if running in quiet mode., +	 * @return {@code true} if running in quiet mode, +	 */, +	boolean isQuiet();, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +				if (isQuiet()) {, +			@Override, +			public boolean isQuiet() {, +				return getOptions().has(RunOptionHandler.this.quietOption);, +			}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +				configuration.getRepositoryConfiguration(), resolutionContext,, +				configuration.isQuiet());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompilerConfiguration.java, +	/**, +	 * Returns if running in quiet mode., +	 * @return {@code true} if running in quiet mode, +	 */, +	boolean isQuiet();, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +			DependencyResolutionContext resolutionContext, boolean quiet) {, +		this.progressReporter = getProgressReporter(this.session, quiet);, +	private ProgressReporter getProgressReporter(DefaultRepositorySystemSession session,, +			boolean quiet) {, +		String progressReporter = (quiet ? "none", +				: System.getProperty(, +						"org.springframework.boot.cli.compiler.grape.ProgressReporter"));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionSetGroovyCompilerConfiguration.java, +	@Override, +	public boolean isQuiet() {, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java, +				if (isQuiet()) {, +			@Override, +			public boolean isQuiet() {, +				return getOptions().has(RunOptionHandler.this.quietOption);]