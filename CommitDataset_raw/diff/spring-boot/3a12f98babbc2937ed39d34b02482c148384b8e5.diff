[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +import java.util.function.Function;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		return LambdaSafe.callback(EndpointFilter.class, filter, endpoint), +				.withLogger(EndpointDiscoverer.class).invokeAnd((f) -> f.match(endpoint)), +				.get();, +, +	public <A, B> void doIt(Function<A, B> x) {, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +import java.util.function.Function;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		return LambdaSafe.callback(EndpointFilter.class, filter, endpoint), +				.withLogger(EndpointDiscoverer.class).invokeAnd((f) -> f.match(endpoint)), +				.get();, +, +	public <A, B> void doIt(Function<A, B> x) {, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +import java.util.Objects;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings({ "unchecked" }), +		Tags cacheTags = tags.and(getAdditionalTags(cache));, +		return LambdaSafe, +				.callbacks(CacheMeterBinderProvider.class, this.binderProviders, cache), +				.withLogger(CacheMetricsRegistrar.class), +				.invokeAnd((binderProvider) -> binderProvider.getMeterBinder(cache,, +						this.metricName, cacheTags)), +				.filter(Objects::nonNull).findFirst().orElse(null);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +import java.util.function.Function;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		return LambdaSafe.callback(EndpointFilter.class, filter, endpoint), +				.withLogger(EndpointDiscoverer.class).invokeAnd((f) -> f.match(endpoint)), +				.get();, +, +	public <A, B> void doIt(Function<A, B> x) {, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +import java.util.Objects;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings({ "unchecked" }), +		Tags cacheTags = tags.and(getAdditionalTags(cache));, +		return LambdaSafe, +				.callbacks(CacheMeterBinderProvider.class, this.binderProviders, cache), +				.withLogger(CacheMetricsRegistrar.class), +				.invokeAnd((binderProvider) -> binderProvider.getMeterBinder(cache,, +						this.metricName, cacheTags)), +				.filter(Objects::nonNull).findFirst().orElse(null);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		LambdaSafe.callbacks(CacheManagerCustomizer.class, this.customizers, cacheManager), +				.withLogger(CacheManagerCustomizers.class), +				.invoke((customizer) -> customizer.customize(cacheManager));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +import java.util.function.Function;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		return LambdaSafe.callback(EndpointFilter.class, filter, endpoint), +				.withLogger(EndpointDiscoverer.class).invokeAnd((f) -> f.match(endpoint)), +				.get();, +, +	public <A, B> void doIt(Function<A, B> x) {, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java, +import java.util.Objects;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings({ "unchecked" }), +		Tags cacheTags = tags.and(getAdditionalTags(cache));, +		return LambdaSafe, +				.callbacks(CacheMeterBinderProvider.class, this.binderProviders, cache), +				.withLogger(CacheMetricsRegistrar.class), +				.invokeAnd((binderProvider) -> binderProvider.getMeterBinder(cache,, +						this.metricName, cacheTags)), +				.filter(Objects::nonNull).findFirst().orElse(null);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked"), +		LambdaSafe.callbacks(CacheManagerCustomizer.class, this.customizers, cacheManager), +				.withLogger(CacheManagerCustomizers.class), +				.invoke((customizer) -> customizer.customize(cacheManager));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionManagerCustomizers.java, +import java.util.Collections;, +import org.springframework.boot.util.LambdaSafe;, +		this.customizers = (customizers == null ? Collections.emptyList(), +				: new ArrayList<>(customizers));, +	@SuppressWarnings("unchecked"), +		LambdaSafe, +				.callbacks(PlatformTransactionManagerCustomizer.class, this.customizers,, +						transactionManager), +				.withLogger(TransactionManagerCustomizers.class), +				.invoke((customizer) -> customizer.customize(transactionManager));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java, +import java.util.function.Function;, +import org.springframework.boot.util.LambdaSafe;, +	@SuppressWarnings("unchecked")]