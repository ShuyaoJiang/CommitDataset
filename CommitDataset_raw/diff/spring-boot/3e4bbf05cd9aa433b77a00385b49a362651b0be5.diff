[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# ARTEMIS ({sc-spring-boot-autoconfigure}/jms/artemis/ArtemisProperties.{sc-ext}[ArtemisProperties]), +	spring.artemis.mode= # connection mode (native, embedded), +	spring.artemis.host=localhost # hornetQ host (native mode), +	spring.artemis.port=5445 # hornetQ port (native mode), +	spring.artemis.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar), +	spring.artemis.embedded.server-id= # auto-generated id of the embedded server (integer), +	spring.artemis.embedded.persistent=false # message persistence, +	spring.artemis.embedded.data-directory= # location of data content (when persistence is enabled), +	spring.artemis.embedded.queues= # comma-separated queues to create on startup, +	spring.artemis.embedded.topics= # comma-separated topics to create on startup, +	spring.artemis.embedded.cluster-password= # customer password (randomly generated by default), +, +	# HORNETQ ({sc-spring-boot-autoconfigure}/jms/hornetq/HornetQProperties.{sc-ext}[HornetQProperties]), +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# ARTEMIS ({sc-spring-boot-autoconfigure}/jms/artemis/ArtemisProperties.{sc-ext}[ArtemisProperties]), +	spring.artemis.mode= # connection mode (native, embedded), +	spring.artemis.host=localhost # hornetQ host (native mode), +	spring.artemis.port=5445 # hornetQ port (native mode), +	spring.artemis.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar), +	spring.artemis.embedded.server-id= # auto-generated id of the embedded server (integer), +	spring.artemis.embedded.persistent=false # message persistence, +	spring.artemis.embedded.data-directory= # location of data content (when persistence is enabled), +	spring.artemis.embedded.queues= # comma-separated queues to create on startup, +	spring.artemis.embedded.topics= # comma-separated topics to create on startup, +	spring.artemis.embedded.cluster-password= # customer password (randomly generated by default), +, +	# HORNETQ ({sc-spring-boot-autoconfigure}/jms/hornetq/HornetQProperties.{sc-ext}[HornetQProperties]), +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-activemq]], +==== ActiveMQ support, +Spring Boot can also configure a `ConnectionFactory` when it detects that ActiveMQ is, +available on the classpath. If the broker is present, an embedded broker is started and, +configured automatically (as long as no broker URL is specified through configuration)., +, +ActiveMQ configuration is controlled by external configuration properties in, +`+spring.activemq.*+`. For example, you might declare the following section in, +`application.properties`:, +, +[source,properties,indent=0], +----, +	spring.activemq.broker-url=tcp://192.168.1.210:9876, +	spring.activemq.user=admin, +	spring.activemq.password=secret, +----, +, +See, +{sc-spring-boot-autoconfigure}/jms/activemq/ActiveMQProperties.{sc-ext}[`ActiveMQProperties`], +for more of the supported options., +, +By default, ActiveMQ creates a destination if it does not exist yet, so destinations are, +resolved against their provided names., +, +, +, +[[boot-features-artemis]], +==== Artemis support, +Apache Artemis was formed in 2015 when HornetQ was donated to the Apache Foundation. All, +the features listed in the <<boot-features-hornetq>> section below can be applied to, +Artemis. Simply replace `+++spring.hornetq.*+++` properties with `+++spring.artemis.*+++`, +and use `spring-boot-starter-artemis` instead of `spring-boot-starter-hornetq`., +, +NOTE: You should not try and use Artemis and HornetQ and the same time., +, +, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# ARTEMIS ({sc-spring-boot-autoconfigure}/jms/artemis/ArtemisProperties.{sc-ext}[ArtemisProperties]), +	spring.artemis.mode= # connection mode (native, embedded), +	spring.artemis.host=localhost # hornetQ host (native mode), +	spring.artemis.port=5445 # hornetQ port (native mode), +	spring.artemis.embedded.enabled=true # if the embedded server is enabled (needs hornetq-jms-server.jar), +	spring.artemis.embedded.server-id= # auto-generated id of the embedded server (integer), +	spring.artemis.embedded.persistent=false # message persistence, +	spring.artemis.embedded.data-directory= # location of data content (when persistence is enabled), +	spring.artemis.embedded.queues= # comma-separated queues to create on startup, +	spring.artemis.embedded.topics= # comma-separated topics to create on startup, +	spring.artemis.embedded.cluster-password= # customer password (randomly generated by default), +, +	# HORNETQ ({sc-spring-boot-autoconfigure}/jms/hornetq/HornetQProperties.{sc-ext}[HornetQProperties]), +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-activemq]], +==== ActiveMQ support, +Spring Boot can also configure a `ConnectionFactory` when it detects that ActiveMQ is, +available on the classpath. If the broker is present, an embedded broker is started and, +configured automatically (as long as no broker URL is specified through configuration)., +, +ActiveMQ configuration is controlled by external configuration properties in, +`+spring.activemq.*+`. For example, you might declare the following section in, +`application.properties`:, +, +[source,properties,indent=0], +----, +	spring.activemq.broker-url=tcp://192.168.1.210:9876, +	spring.activemq.user=admin, +	spring.activemq.password=secret, +----, +, +See, +{sc-spring-boot-autoconfigure}/jms/activemq/ActiveMQProperties.{sc-ext}[`ActiveMQProperties`]]