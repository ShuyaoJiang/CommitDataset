[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +|The version number of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Version: 1.0` is printed as `1.0`., +, +|`${application.title}`, +|The title of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Title: MyApp` is printed as `MyApp`., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +|The version number of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Version: 1.0` is printed as `1.0`., +, +|`${application.title}`, +|The title of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Title: MyApp` is printed as `MyApp`., +++ b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java, +import java.util.Collections;, + * @author Vedran Pavic, +		resolvers.add(getTitleResolver(sourceClass));, +	private PropertyResolver getTitleResolver(Class<?> sourceClass) {, +		MutablePropertySources sources = new MutablePropertySources();, +		String applicationTitle = getApplicationTitle(sourceClass);, +		Map<String, Object> titleMap = Collections.<String, Object>singletonMap(, +				"application.title", (applicationTitle == null ? "" : applicationTitle));, +		sources.addFirst(new MapPropertySource("title", titleMap));, +		return new PropertySourcesPropertyResolver(sources);, +	}, +, +	protected String getApplicationTitle(Class<?> sourceClass) {, +		Package sourcePackage = (sourceClass == null ? null : sourceClass.getPackage());, +		return (sourcePackage == null ? null : sourcePackage.getImplementationTitle());, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +|The version number of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Version: 1.0` is printed as `1.0`., +, +|`${application.title}`, +|The title of your application as declared in `MANIFEST.MF`. For example, +`Implementation-Title: MyApp` is printed as `MyApp`., +++ b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java, +import java.util.Collections;, + * @author Vedran Pavic, +		resolvers.add(getTitleResolver(sourceClass));, +	private PropertyResolver getTitleResolver(Class<?> sourceClass) {, +		MutablePropertySources sources = new MutablePropertySources();, +		String applicationTitle = getApplicationTitle(sourceClass);, +		Map<String, Object> titleMap = Collections.<String, Object>singletonMap(, +				"application.title", (applicationTitle == null ? "" : applicationTitle));, +		sources.addFirst(new MapPropertySource("title", titleMap));, +		return new PropertySourcesPropertyResolver(sources);, +	}, +, +	protected String getApplicationTitle(Class<?> sourceClass) {, +		Package sourcePackage = (sourceClass == null ? null : sourceClass.getPackage());, +		return (sourcePackage == null ? null : sourcePackage.getImplementationTitle());, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/ResourceBannerTests.java, + * @author Vedran Pavic, +		String banner = printBanner(resource, "10.2", "2.0", null);, +		String banner = printBanner(resource, null, null, null);, +		String banner = printBanner(resource, "10.2", "2.0", null);, +		String banner = printBanner(resource, null, null, null);, +		String banner = printBanner(resource, null, null, null);, +		String banner = printBanner(resource, null, null, null);, +	@Test, +	public void renderWithTitle() throws Exception {, +		Resource resource = new ByteArrayResource(, +				"banner ${application.title} ${a}".getBytes());, +		String banner = printBanner(resource, null, null, "title");, +		assertThat(banner, startsWith("banner title 1"));, +	}, +, +	@Test, +	public void renderWithoutTitle() throws Exception {, +		Resource resource = new ByteArrayResource(, +				"banner ${application.title} ${a}".getBytes());, +		String banner = printBanner(resource, null, null, null);, +		assertThat(banner, startsWith("banner  1"));, +	}, +, +			String applicationVersion, String applicationTitle) {, +				applicationVersion, applicationTitle);, +		private final String applicationTitle;, +, +				String applicationVersion, String applicationTitle) {, +			this.applicationTitle = applicationTitle;, +		@Override, +		protected String getApplicationTitle(Class<?> sourceClass) {, +			return this.applicationTitle;, +		}, +]