[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.client.reactive;, +, +, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Optional;, +import java.util.stream.Collectors;, +, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.codec.Encoder;, +import org.springframework.http.HttpCookie;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.http.client.reactive.ClientHttpRequest;, +import org.springframework.http.client.reactive.ClientHttpRequestFactory;, +import org.springframework.web.client.RestClientException;, +, +/**, + * Builds a {@link ClientHttpRequest}, + *, + * <p>See static factory methods in {@link HttpRequestBuilders}, + *, + * @author Brian Clozel, + * @see HttpRequestBuilders, + */, +public class DefaultHttpRequestBuilder implements HttpRequestBuilder {, +, +	protected HttpMethod httpMethod;, +, +	protected HttpHeaders httpHeaders;, +, +	protected URI url;, +, +	protected Flux contentPublisher;, +, +	protected List<Encoder<?>> messageEncoders;, +, +	protected final List<HttpCookie> cookies = new ArrayList<HttpCookie>();, +, +	protected DefaultHttpRequestBuilder() {, +	}, +, +	public DefaultHttpRequestBuilder(HttpMethod httpMethod, String urlTemplate, Object... urlVariables) throws RestClientException {, +		this.httpMethod = httpMethod;, +		this.httpHeaders = new HttpHeaders();, +		this.url = parseURI(urlTemplate);, +	}, +, +	public DefaultHttpRequestBuilder(HttpMethod httpMethod, URI url) {, +		this.httpMethod = httpMethod;, +		this.httpHeaders = new HttpHeaders();, +		this.url = url;, +	}, +, +	protected DefaultHttpRequestBuilder setMessageEncoders(List<Encoder<?>> messageEncoders) {, +		this.messageEncoders = messageEncoders;, +		return this;, +	}, +, +	private URI parseURI(String uri) throws RestClientException {, +		try {, +			return new URI(uri);, +		}, +		catch (URISyntaxException e) {, +			throw new RestClientException("could not parse URL template", e);, +		}, +	}, +, +	public DefaultHttpRequestBuilder param(String name, String... values) {, +		return this;, +	}, +, +	public DefaultHttpRequestBuilder header(String name, String... values) {, +		Arrays.stream(values).forEach(value -> this.httpHeaders.add(name, value));]