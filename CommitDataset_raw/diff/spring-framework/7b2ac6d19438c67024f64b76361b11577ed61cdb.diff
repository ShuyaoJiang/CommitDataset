[+++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * @author Nicholas Williams, +	 * @param localeContext the current LocaleContext,, +	 * or {@code null} to reset the thread-bound context, +	 * Associate the given Locale with the current thread,, +	 * preserving any TimeZone that may have been set already., +	 * the locale part of thread-bound context, +	 * @see #setTimeZone(TimeZone), +	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale), +	 * Associate the given Locale with the current thread,, +	 * preserving any TimeZone that may have been set already., +	 * the locale part of thread-bound context, +	 * @see #setTimeZone(TimeZone, boolean), +	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale), +		LocaleContext localeContext = getLocaleContext();, +		TimeZone timeZone = (localeContext instanceof TimeZoneAwareLocaleContext ?, +				((TimeZoneAwareLocaleContext) localeContext).getTimeZone() : null);, +		if (timeZone != null) {, +			localeContext = new SimpleTimeZoneAwareLocaleContext(locale, timeZone);, +		}, +		else if (locale != null) {, +			localeContext = new SimpleLocaleContext(locale);, +		}, +		else {, +			localeContext = null;, +		}, +	 * Associate the given TimeZone with the current thread,, +	 * preserving any Locale that may have been set already., +	 * <p>Will implicitly create a LocaleContext for the given Locale,, +	 * <i>not</i> exposing it as inheritable for child threads., +	 * @param timeZone the current TimeZone, or {@code null} to reset, +	 * the time zone part of the thread-bound context, +	 * @see #setLocale(Locale), +	 * @see SimpleTimeZoneAwareLocaleContext#SimpleTimeZoneAwareLocaleContext(Locale, TimeZone), +	 */, +	public static void setTimeZone(TimeZone timeZone) {, +		setTimeZone(timeZone, false);, +	}, +, +	/**, +	 * Associate the given TimeZone with the current thread,, +	 * preserving any Locale that may have been set already., +	 * <p>Will implicitly create a LocaleContext for the given Locale., +	 * @param timeZone the current TimeZone, or {@code null} to reset, +	 * the time zone part of the thread-bound context, +	 * @param inheritable whether to expose the LocaleContext as inheritable, +	 * for child threads (using an {@link InheritableThreadLocal}), +	 * @see #setLocale(Locale, boolean), +	 * @see SimpleTimeZoneAwareLocaleContext#SimpleTimeZoneAwareLocaleContext(Locale, TimeZone), +	 */, +	public static void setTimeZone(TimeZone timeZone, boolean inheritable) {, +		LocaleContext localeContext = getLocaleContext();, +		Locale locale = (localeContext != null ? localeContext.getLocale() : null);, +		if (timeZone != null) {, +			localeContext = new SimpleTimeZoneAwareLocaleContext(locale, timeZone);, +		}, +		else if (locale != null) {, +			localeContext = new SimpleLocaleContext(locale);, +		}, +		else {, +			localeContext = null;, +		}, +		setLocaleContext(localeContext, inheritable);, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * @author Nicholas Williams, +	 * @param localeContext the current LocaleContext,, +	 * or {@code null} to reset the thread-bound context, +	 * Associate the given Locale with the current thread,, +	 * preserving any TimeZone that may have been set already., +	 * the locale part of thread-bound context, +	 * @see #setTimeZone(TimeZone), +	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale), +	 * Associate the given Locale with the current thread,, +	 * preserving any TimeZone that may have been set already., +	 * the locale part of thread-bound context, +	 * @see #setTimeZone(TimeZone, boolean), +	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale), +		LocaleContext localeContext = getLocaleContext();, +		TimeZone timeZone = (localeContext instanceof TimeZoneAwareLocaleContext ?, +				((TimeZoneAwareLocaleContext) localeContext).getTimeZone() : null);, +		if (timeZone != null) {, +			localeContext = new SimpleTimeZoneAwareLocaleContext(locale, timeZone);, +		}, +		else if (locale != null) {, +			localeContext = new SimpleLocaleContext(locale);, +		}, +		else {, +			localeContext = null;, +		}, +	 * Associate the given TimeZone with the current thread,, +	 * preserving any Locale that may have been set already., +	 * <p>Will implicitly create a LocaleContext for the given Locale,, +	 * <i>not</i> exposing it as inheritable for child threads., +	 * @param timeZone the current TimeZone, or {@code null} to reset, +	 * the time zone part of the thread-bound context, +	 * @see #setLocale(Locale), +	 * @see SimpleTimeZoneAwareLocaleContext#SimpleTimeZoneAwareLocaleContext(Locale, TimeZone)]