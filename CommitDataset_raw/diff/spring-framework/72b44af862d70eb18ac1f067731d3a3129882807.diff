[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +, +		String allowCredentials = annotation.allowCredentials();, +		if ("true".equalsIgnoreCase(allowCredentials)) {, +		else if ("false".equalsIgnoreCase(allowCredentials)) {, +		else if (!allowCredentials.isEmpty()) {, +			throw new IllegalStateException("@CrossOrigin's allowCredentials value must be \"true\", \"false\", ", +					+ "or an empty string (\"\"); current value is [" + allowCredentials + "].");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +, +		String allowCredentials = annotation.allowCredentials();, +		if ("true".equalsIgnoreCase(allowCredentials)) {, +		else if ("false".equalsIgnoreCase(allowCredentials)) {, +		else if (!allowCredentials.isEmpty()) {, +			throw new IllegalStateException("@CrossOrigin's allowCredentials value must be \"true\", \"false\", ", +					+ "or an empty string (\"\"); current value is [" + allowCredentials + "].");, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.context.support.StaticWebApplicationContext;, +import org.springframework.web.cors.CorsConfiguration;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, + * @author Sam Brannen, +	@Rule, +	public ExpectedException exception = ExpectedException.none();, +, +, +	public void bogusAllowCredentialsValue() throws Exception {, +		exception.expect(IllegalStateException.class);, +		exception.expectMessage(containsString("@CrossOrigin's allowCredentials"));, +		exception.expectMessage(containsString("current value is [bogus]"));, +		this.handlerMapping.registerHandler(new MethodLevelControllerWithBogusAllowCredentialsValue());, +	}, +, +	@Test, +		@RequestMapping(path = "/no", method = RequestMethod.GET), +		@RequestMapping(path = "/no", method = RequestMethod.POST), +		@RequestMapping(path = "/default", method = RequestMethod.GET), +		@RequestMapping(path = "/default", method = RequestMethod.GET, params = "q"), +		@RequestMapping(path = "/ambiguous-header", method = RequestMethod.GET, headers = "header1=a"), +		@RequestMapping(path = "/ambiguous-header", method = RequestMethod.GET, headers = "header1=b"), +		@RequestMapping(path = "/ambiguous-produces", method = RequestMethod.GET, produces = "application/xml"), +		@RequestMapping(path = "/ambiguous-produces", method = RequestMethod.GET, produces = "application/json"), +		@RequestMapping(path = "/customized", method = { RequestMethod.GET, RequestMethod.POST }), +	}, +	@Controller, +	private static class MethodLevelControllerWithBogusAllowCredentialsValue {, +, +		@CrossOrigin(allowCredentials = "bogus"), +		@RequestMapping("/bogus"), +		public void bogusAllowCredentialsValue() {, +		}, +		@RequestMapping(path = "/foo", method = RequestMethod.GET)]