[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request);, +			, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request);, +			, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * A FlashMap provides a way for one request to store attributes intended for , + * use in another. This is most commonly needed when redirecting from one URL, + * to another -- e.g. the Post/Redirect/Get pattern. A FlashMap is saved before , + * the redirect (typically in the session) and is made available after the , + * redirect and removed immediately., + * , + * <p>A FlashMap can be set up with a request path and request parameters to , + * help identify the target request. Without this information, a FlashMap is, + * made available to the next request, which may or may not be the intended , + * result. Before a redirect, the target URL is known and when using the, + * {@code org.springframework.web.servlet.view.RedirectView}, FlashMap , + * instances are automatically updated with redirect URL information., + * , + * <p>Annotated controllers will usually not access a FlashMap directly.. TODO, + * , + * @see FlashMapManager, +	private String targetRequestPath;, +	private final Map<String, String> targetRequestParams = new LinkedHashMap<String, String>();, +	private final int createdBy;, +	 * Create a new instance., +	public FlashMap() {, +		this.createdBy = 0;, +	 * Create a new instance with an id uniquely identifying the creator of , +	 * this FlashMap., +	public FlashMap(int createdBy) {, +		this.createdBy = createdBy;, +	 * Provide a URL path to help identify the target request for this FlashMap., +	 * The path may be absolute (e.g. /application/resource) or relative to the, +	 * current request (e.g. ../resource)., +	 * @param path the URI path, never {@code null}, +	 */, +	public void setTargetRequestPath(String path) {, +		Assert.notNull(path, "Expected path must not be null");, +		this.targetRequestPath = path;, +	}, +, +	/**, +	 * Return the URL path of the target request, or {@code null} if none., +	 */, +	public String getTargetRequestPath() {, +		return targetRequestPath;, +	}, +, +	/**, +	 * Provide request parameter pairs to identify the request for this FlashMap. , +	 * If not set, the FlashMap will match to requests with any parameters., +	 * Only simple value types, as defined in {@link BeanUtils#isSimpleValueType}, , +	 * are used., +	public FlashMap addTargetRequestParams(Map<String, ?> params) {, +					this.targetRequestParams.put(name, value.toString());, +	 * Provide a request parameter to identify the request for this FlashMap., +	 * If not set, the FlashMap will match to requests with any parameters., +	 * @param name the name of the expected parameter (never {@code null}), +	 * @param value the value for the expected parameter (never {@code null}), +	public FlashMap addTargetRequestParam(String name, String value) {, +		this.targetRequestParams.put(name, value.toString());, +		return this;, +	/**, +	 * Return the parameters identifying the target request, or an empty Map., +	 */, +	public Map<String, String> getTargetRequestParams() {, +		return targetRequestParams;, +	 * Whether the given id matches the id of the creator of this FlashMap., +	 */, +	public boolean isCreatedBy(int createdBy) {, +		return this.createdBy == createdBy;, +	}, +, +	/**, +	 * Compare two FlashMaps and select the one that has a target URL path or , +	 * has more target request parameters. , +		int thisUrlPath = (this.targetRequestPath != null) ? 1 : 0;, +		int otherUrlPath = (other.targetRequestPath != null) ? 1 : 0;, +			return other.targetRequestParams.size() - this.targetRequestParams.size();, +		result.append(", expecteRequestUri=").append(this.targetRequestPath);, +		result.append(", expectedRequestParameters=" + this.targetRequestParams.toString()).append("]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request);, +			, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * A FlashMap provides a way for one request to store attributes intended for , + * use in another. This is most commonly needed when redirecting from one URL, + * to another -- e.g. the Post/Redirect/Get pattern. A FlashMap is saved before , + * the redirect (typically in the session) and is made available after the , + * redirect and removed immediately., + * , + * <p>A FlashMap can be set up with a request path and request parameters to , + * help identify the target request. Without this information, a FlashMap is, + * made available to the next request, which may or may not be the intended , + * result. Before a redirect, the target URL is known and when using the, + * {@code org.springframework.web.servlet.view.RedirectView}, FlashMap , + * instances are automatically updated with redirect URL information., + * ]