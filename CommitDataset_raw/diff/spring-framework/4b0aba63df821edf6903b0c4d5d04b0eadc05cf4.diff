[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none, + * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is, + * assumed to be present., + * instance. The following example demonstrates how to specify an explicit default, + * {@code JmsListenerContainerFactory}, + *         registrar.setContainerFactory(myJmsListenerContainerFactory());, + *     <jms:annotation-driven container-factory="myJmsListenerContainerFactory"/>, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none, + * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is, + * assumed to be present., + * instance. The following example demonstrates how to specify an explicit default, + * {@code JmsListenerContainerFactory}, + *         registrar.setContainerFactory(myJmsListenerContainerFactory());, + *     <jms:annotation-driven container-factory="myJmsListenerContainerFactory"/>, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * JmsListenerContainerFactory} to use to build the jms listener container. If not, + * set, a <em>default</em> container factory is assumed to be available with a bean, + * name of {@code jmsListenerContainerFactory} unless an explicit default has been, + * provided through configuration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none, + * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is, + * assumed to be present., + * instance. The following example demonstrates how to specify an explicit default, + * {@code JmsListenerContainerFactory}, + *         registrar.setContainerFactory(myJmsListenerContainerFactory());, + *     <jms:annotation-driven container-factory="myJmsListenerContainerFactory"/>, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * JmsListenerContainerFactory} to use to build the jms listener container. If not, + * set, a <em>default</em> container factory is assumed to be available with a bean, + * name of {@code jmsListenerContainerFactory} unless an explicit default has been, + * provided through configuration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +	/**, +	 * The bean name of the default {@link JmsListenerContainerFactory}, +	 */, +	static final String DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME = "jmsListenerContainerFactory";, +, +	private String containerFactoryBeanName = DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME;, +	 * Set the name of the {@link JmsListenerContainerFactory} to use by default., +	 * <p/>If none is specified, {@value #DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME}, +	 * is assumed to be defined., +	public void setContainerFactoryBeanName(String containerFactoryBeanName) {, +		this.containerFactoryBeanName = containerFactoryBeanName;, +, +		registrar.setApplicationContext(this.applicationContext);, +, +, +		if (this.containerFactoryBeanName != null) {, +			registrar.setContainerFactoryBeanName(this.containerFactoryBeanName);, +, +		// Set the custom handler method factory once resolved by the configurer, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none, + * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is, + * assumed to be present., + * instance. The following example demonstrates how to specify an explicit default, + * {@code JmsListenerContainerFactory}, + *         registrar.setContainerFactory(myJmsListenerContainerFactory());, + *     <jms:annotation-driven container-factory="myJmsListenerContainerFactory"/>, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * JmsListenerContainerFactory} to use to build the jms listener container. If not, + * set, a <em>default</em> container factory is assumed to be available with a bean, + * name of {@code jmsListenerContainerFactory} unless an explicit default has been, + * provided through configuration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +	/**, +	 * The bean name of the default {@link JmsListenerContainerFactory}, +	 */, +	static final String DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME = "jmsListenerContainerFactory";, +, +	private String containerFactoryBeanName = DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME;, +	 * Set the name of the {@link JmsListenerContainerFactory} to use by default., +	 * <p/>If none is specified, {@value #DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME}, +	 * is assumed to be defined., +	public void setContainerFactoryBeanName(String containerFactoryBeanName) {, +		this.containerFactoryBeanName = containerFactoryBeanName;, +, +		registrar.setApplicationContext(this.applicationContext);, +, +, +		if (this.containerFactoryBeanName != null) {, +			registrar.setContainerFactoryBeanName(this.containerFactoryBeanName);, +, +		// Set the custom handler method factory once resolved by the configurer, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AnnotationDrivenJmsBeanDefinitionParser.java, +, +			String containerFactory = element.getAttribute("container-factory");, +			if (StringUtils.hasText(containerFactory)) {, +				builder.addPropertyValue("containerFactoryBeanName", containerFactory);, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none, + * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is, + * assumed to be present., + * instance. The following example demonstrates how to specify an explicit default, + * {@code JmsListenerContainerFactory}, + *         registrar.setContainerFactory(myJmsListenerContainerFactory());]