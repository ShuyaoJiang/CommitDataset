[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.ParameterizedType;, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +				Class<T> paramClass = getParamClass(paramType);, +	private Class getParamClass(Type paramType) {, +		if (paramType instanceof Class) {, +			return (Class) paramType;, +		}, +		else if (paramType instanceof GenericArrayType) {, +			Type componentType = ((GenericArrayType) paramType).getGenericComponentType();, +			if (componentType instanceof Class) {, +				// Surely, there should be a nicer way to determine the array type, +				return Array.newInstance((Class<?>) componentType, 0).getClass();, +			}, +		}, +		else if (paramType instanceof ParameterizedType) {, +			ParameterizedType parameterizedType = (ParameterizedType) paramType;, +			if (parameterizedType.getRawType() instanceof Class) {, +				return (Class) parameterizedType.getRawType();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.ParameterizedType;, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +				Class<T> paramClass = getParamClass(paramType);, +	private Class getParamClass(Type paramType) {, +		if (paramType instanceof Class) {, +			return (Class) paramType;, +		}, +		else if (paramType instanceof GenericArrayType) {, +			Type componentType = ((GenericArrayType) paramType).getGenericComponentType();, +			if (componentType instanceof Class) {, +				// Surely, there should be a nicer way to determine the array type, +				return Array.newInstance((Class<?>) componentType, 0).getClass();, +			}, +		}, +		else if (paramType instanceof ParameterizedType) {, +			ParameterizedType parameterizedType = (ParameterizedType) paramType;, +			if (parameterizedType.getRawType() instanceof Class) {, +				return (Class) parameterizedType.getRawType();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			return type.getActualTypeArguments()[0];, +		throw new IllegalArgumentException("HttpEntity parameter (", +				+ parameter.getParameterName() + ") in method " + parameter.getMethod(), +				+ " is not parameterized or has more than one parameter");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.ParameterizedType;, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +				Class<T> paramClass = getParamClass(paramType);, +	private Class getParamClass(Type paramType) {, +		if (paramType instanceof Class) {, +			return (Class) paramType;, +		}, +		else if (paramType instanceof GenericArrayType) {, +			Type componentType = ((GenericArrayType) paramType).getGenericComponentType();, +			if (componentType instanceof Class) {, +				// Surely, there should be a nicer way to determine the array type, +				return Array.newInstance((Class<?>) componentType, 0).getClass();, +			}, +		}, +		else if (paramType instanceof ParameterizedType) {, +			ParameterizedType parameterizedType = (ParameterizedType) paramType;, +			if (parameterizedType.getRawType() instanceof Class) {, +				return (Class) parameterizedType.getRawType();, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			return type.getActualTypeArguments()[0];, +		throw new IllegalArgumentException("HttpEntity parameter (", +				+ parameter.getParameterName() + ") in method " + parameter.getMethod(), +				+ " is not parameterized or has more than one parameter");, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorMockTests.java, +	public void resolveArgumentCannotRead() throws Exception {, +	@Test, +		expect(messageConverter.canRead(String.class, MediaType.APPLICATION_OCTET_STREAM)).andReturn(false);, +		replay(messageConverter);, +		try {, +			fail("Expected exception");, +		catch (HttpMediaTypeNotSupportedException ex) {, +		}]