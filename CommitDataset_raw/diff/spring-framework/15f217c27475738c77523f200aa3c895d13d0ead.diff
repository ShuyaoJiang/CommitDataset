[+++ b/spring-framework-reference/src/testing.xml, +    linkend="unit-testing">unit testing</link> and on the benefits of the, +    Spring Framework's support for <link, +    linkend="integration-testing">integration testing</link>. <emphasis>(A, +    thorough treatment of testing in the enterprise is beyond the scope of, +    this reference manual.)</emphasis></para>, +        <para>Test classes can provide either an array containing the resource, +        locations of XML configuration metadata — typically in the classpath —, +        or an array containing <interfacename>@Configuration</interfacename>, +        classes that is used to configure the application. These locations or, +        classes are the same as or similar to those specified in, +        subsequent test execution is much faster. In this context, the term, +        <emphasis>test suite</emphasis> means all tests run in the same JVM —, +        for example, all tests run from an Ant or Maven build for a given, +        project or module. In the unlikely case that a test corrupts the, +        application context and requires reloading — for example, by modifying, +        a bean definition or the state of an application object — the, +        TestContext framework can be configured to reload the configuration, +        and rebuild the application context before executing the next, +        test.</para>, +        access logic for a <classname>Title</classname> domain entity. We want, +        to write integration tests that test the following areas:</para>, +        behave correctly, according to their configured transactional, +        semantics. In addition, if test methods delete the contents of, +        selected tables while running within a transaction, the transaction, +        will roll back by default, and the database will return to its state, +        prior to execution of the test. Transactional support is provided to, +        your test class via a, +        <classname>PlatformTransactionManager</classname> bean defined in the, +        test's application context.</para>, +      collection of JDBC related utility functions intended to simplify, +      standard database testing scenarios. <emphasis>Note that <link, +          <interfacename>ApplicationContext</interfacename> for test classes., +          Specifically, <interfacename>@ContextConfiguration</interfacename>, +          declares either the application context resource, +          <literal>locations</literal> or the, +          <interfacename>@Configuration</interfacename>, +          <varname>classes</varname> to load as well as the, +          <interfacename>ContextLoader</interfacename> strategy to use for, +          loading the context. Note, however, that you typically do not need, +          to explicitly configure the loader since the default loader supports, +          either resource <varname>locations</varname> or configuration, +          <varname>classes</varname>.</para>]