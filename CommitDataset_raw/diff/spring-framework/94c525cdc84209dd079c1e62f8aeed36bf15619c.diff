[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +, +, +, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestPartMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +		Flux<Part> values = exchange.getMultipartData(), +				.flatMapMany(map -> {, +					List<Part> parts = map.get(name);, +					if (CollectionUtils.isEmpty(parts)) {, +						return isRequired ?, +								Flux.error(getMissingPartException(name, parameter)) :, +								Flux.empty();, +					return Flux.fromIterable(parts);, +				});, +				values = adapter.isMultiValue() ? values : values.take(1);, +				return Mono.just(adapter.fromPublisher(values));, +				return values.next().cast(Object.class);, +		return values.next().flatMap(part -> {, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestPartMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +		Flux<Part> values = exchange.getMultipartData(), +				.flatMapMany(map -> {, +					List<Part> parts = map.get(name);, +					if (CollectionUtils.isEmpty(parts)) {, +						return isRequired ?, +								Flux.error(getMissingPartException(name, parameter)) :, +								Flux.empty();, +					return Flux.fromIterable(parts);, +				});, +				values = adapter.isMultiValue() ? values : values.take(1);, +				return Mono.just(adapter.fromPublisher(values));, +				return values.next().cast(Object.class);, +		return values.next().flatMap(part -> {, +++ b/src/docs/asciidoc/web/webflux.adoc, +You can access individual parts with `@RequestPart`:, +	public String handle(**@RequestPart("meta-data") Part metadata,, +To deserialize the raw part content, for example to JSON (similar to `@RequestBody`),, +simply declare a concrete target Object, instead of `Part`:, +	public String handle(**@RequestPart("meta-data") MetaData metadata**) {, +To access all multipart data in as a `MultiValueMap` use `@RequestBody`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/"), +	public String handle(**@RequestBody Mono<MultiValueMap<String, Part>> parts**) {, +		// ..., +	}, +----, +, +To access multipart data sequentially, in streaming fashion, use `@RequestBody` with, +`Flux<Part>` instead. For example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/"), +	public String handle(**@RequestBody Flux<Part> parts**) {, +		// ..., +	}, +----, +]