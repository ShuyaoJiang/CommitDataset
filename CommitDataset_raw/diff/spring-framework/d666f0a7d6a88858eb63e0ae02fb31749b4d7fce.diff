[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * @see #register, + * @see #scan, + * @see org.springframework.context.support.GenericXmlApplicationContext, +	 * Create a new AnnotationConfigApplicationContext, deriving bean definitions, +	 * from the given annotated classes and automatically refreshing the context., +	 * Create a new AnnotationConfigApplicationContext, scanning for bean definitions, +	 * in the given packages and automatically refreshing the context., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * @see #register, + * @see #scan, + * @see org.springframework.context.support.GenericXmlApplicationContext, +	 * Create a new AnnotationConfigApplicationContext, deriving bean definitions, +	 * from the given annotated classes and automatically refreshing the context., +	 * Create a new AnnotationConfigApplicationContext, scanning for bean definitions, +	 * in the given packages and automatically refreshing the context., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, +	 * Set whether it should be allowed to override bean definitions by registering, +	 * a different definition with the same name, automatically replacing the former., +	 * If not, an exception will be thrown. Default is "true"., +	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding, +	 */, +	public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {, +		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding);, +	}, +, +	/**, +	 * Set whether to allow circular references between beans - and automatically, +	 * try to resolve them., +	 * <p>Default is "true". Turn this off to throw an exception when encountering, +	 * a circular reference, disallowing them completely., +	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences, +	 */, +	public void setAllowCircularReferences(boolean allowCircularReferences) {, +		this.beanFactory.setAllowCircularReferences(allowCircularReferences);, +	}, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * @see #register, + * @see #scan, + * @see org.springframework.context.support.GenericXmlApplicationContext, +	 * Create a new AnnotationConfigApplicationContext, deriving bean definitions, +	 * from the given annotated classes and automatically refreshing the context., +	 * Create a new AnnotationConfigApplicationContext, scanning for bean definitions, +	 * in the given packages and automatically refreshing the context., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, +	 * Set whether it should be allowed to override bean definitions by registering, +	 * a different definition with the same name, automatically replacing the former., +	 * If not, an exception will be thrown. Default is "true"., +	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowBeanDefinitionOverriding, +	 */, +	public void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding) {, +		this.beanFactory.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding);, +	}, +, +	/**, +	 * Set whether to allow circular references between beans - and automatically, +	 * try to resolve them., +	 * <p>Default is "true". Turn this off to throw an exception when encountering, +	 * a circular reference, disallowing them completely., +	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences, +	 */, +	public void setAllowCircularReferences(boolean allowCircularReferences) {, +		this.beanFactory.setAllowCircularReferences(allowCircularReferences);, +	}, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/GenericXmlApplicationContext.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.support;, +, +import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;, +import org.springframework.core.io.Resource;, +, +/**, + * Convenient application context with built-in XML support., + * This is a flexible alternative to {@link ClassPathXmlApplicationContext}, + * and {@link FileSystemXmlApplicationContext}, to be configured via setters,, + * with an eventual {@link #refresh()} call activating the context., + *, + * <p>In case of multiple configuration files, bean definitions in later files, + * will override those defined in earlier files. This can be leveraged to, + * deliberately override certain bean definitions via an extra configuration file., + *]