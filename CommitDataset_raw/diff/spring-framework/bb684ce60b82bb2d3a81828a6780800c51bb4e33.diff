[+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, +import java.io.UnsupportedEncodingException;, +import javax.mail.internet.MimeUtility;, +import org.springframework.http.ContentDisposition;, +				String headerValue = part.getHeader(HttpHeaders.CONTENT_DISPOSITION);, +				ContentDisposition disposition = ContentDisposition.parse(headerValue);, +				String filename = disposition.getFilename();, +					if (filename.startsWith("=?") && filename.endsWith("?=")) {, +						filename = MimeDelegate.decode(filename);, +					}, +, +	/**, +	 * Inner class to avoid a hard dependency on the JavaMail API., +	 */, +	private static class MimeDelegate {, +, +		public static String decode(String value) {, +			try {, +				return MimeUtility.decodeText(value);, +			}, +			catch (UnsupportedEncodingException ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, +import java.io.UnsupportedEncodingException;, +import javax.mail.internet.MimeUtility;, +import org.springframework.http.ContentDisposition;, +				String headerValue = part.getHeader(HttpHeaders.CONTENT_DISPOSITION);, +				ContentDisposition disposition = ContentDisposition.parse(headerValue);, +				String filename = disposition.getFilename();, +					if (filename.startsWith("=?") && filename.endsWith("?=")) {, +						filename = MimeDelegate.decode(filename);, +					}, +, +	/**, +	 * Inner class to avoid a hard dependency on the JavaMail API., +	 */, +	private static class MimeDelegate {, +, +		public static String decode(String value) {, +			try {, +				return MimeUtility.decodeText(value);, +			}, +			catch (UnsupportedEncodingException ex) {, +				throw new IllegalStateException(ex);, +			}, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequestTests.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.multipart.support;, +, +import org.junit.Test;, +, +import org.springframework.mock.web.test.MockHttpServletRequest;, +import org.springframework.mock.web.test.MockPart;, +import org.springframework.web.multipart.MultipartFile;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +/**, + * Unit tests for {@link StandardMultipartHttpServletRequest}., + * @author Rossen Stoyanchev, + */, +public class StandardMultipartHttpServletRequestTests {, +, +, +	@Test, +	public void filename() throws Exception {, +, +		StandardMultipartHttpServletRequest request = getRequest(, +				"file", "form-data; name=\"file\"; filename=\"myFile.txt\"");, +, +		MultipartFile multipartFile = request.getFile("file");, +		assertNotNull(multipartFile);, +		assertEquals("myFile.txt", multipartFile.getOriginalFilename());, +	}, +, +	@Test // SPR-13319, +	public void filenameRfc5987() throws Exception {, +]