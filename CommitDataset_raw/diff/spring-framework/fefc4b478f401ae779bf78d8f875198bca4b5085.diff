[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +, +		if (!SimpMessageType.SUBSCRIBE.equals(messageType)) {, +			throw new IllegalArgumentException("Expected SUBSCRIBE: " + message);, +		}, +, +, +, +, +, +		if (!SimpMessageType.UNSUBSCRIBE.equals(messageType)) {, +			throw new IllegalArgumentException("Expected UNSUBSCRIBE: " + message);, +		}, +, +, +, +	@Override, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		MessageHeaders headers = message.getHeaders();, +, +		SimpMessageType type = SimpMessageHeaderAccessor.getMessageType(headers);, +		if (!SimpMessageType.MESSAGE.equals(type)) {, +			throw new IllegalArgumentException("Unexpected message type: " + type);, +		}, +, +		String destination = SimpMessageHeaderAccessor.getDestination(headers);, +		if (destination == null) {, +			logger.error("No destination in " + message);, +			return null;, +		}, +, +		return findSubscriptionsInternal(destination, message);, +	}, +, +, +	protected abstract void addSubscriptionInternal(String sessionId, String subscriptionId,, +			String destination, Message<?> message);, +, +	protected abstract MultiValueMap<String, String> findSubscriptionsInternal(String destination, Message<?> message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +, +		if (!SimpMessageType.SUBSCRIBE.equals(messageType)) {, +			throw new IllegalArgumentException("Expected SUBSCRIBE: " + message);, +		}, +, +, +, +, +, +		if (!SimpMessageType.UNSUBSCRIBE.equals(messageType)) {, +			throw new IllegalArgumentException("Expected UNSUBSCRIBE: " + message);, +		}, +, +, +, +	@Override, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		MessageHeaders headers = message.getHeaders();, +, +		SimpMessageType type = SimpMessageHeaderAccessor.getMessageType(headers);, +		if (!SimpMessageType.MESSAGE.equals(type)) {, +			throw new IllegalArgumentException("Unexpected message type: " + type);, +		}, +, +		String destination = SimpMessageHeaderAccessor.getDestination(headers);, +		if (destination == null) {, +			logger.error("No destination in " + message);, +			return null;, +		}, +, +		return findSubscriptionsInternal(destination, message);, +	}, +, +, +	protected abstract void addSubscriptionInternal(String sessionId, String subscriptionId,, +			String destination, Message<?> message);, +, +	protected abstract MultiValueMap<String, String> findSubscriptionsInternal(String destination, Message<?> message);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, +import static org.junit.Assert.*;, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));]