[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());, +			assertThat(beanFactory, containsTargetBean());, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());, +			assertThat(beanFactory, containsTargetBean());, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static java.lang.String.format;, +import static org.springframework.util.StringUtils.commaDelimitedListToSet;, +import static org.springframework.util.StringUtils.trimAllWhitespace;, +, +import java.util.Collections;, + * Abstract base class for {@link Environment} implementations. Supports the notion of, + * reserved default profile names and enables specifying active and default profiles, + * through the {@link #ACTIVE_PROFILES_PROPERTY_NAME} and, + * {@link #DEFAULT_PROFILES_PROPERTY_NAME} properties., +	/**, +	 * Name of reserved default profile name: {@value}. If no default profile names are, +	 * explicitly and no active profile names are explictly set, this profile will, +	 * automatically be activated by default., +	 * @see #getReservedDefaultProfiles, +	 * @see ConfigurableEnvironment#setDefaultProfiles, +	 * @see ConfigurableEnvironment#setActiveProfiles, +	 * @see AbstractEnvironment#DEFAULT_PROFILES_PROPERTY_NAME, +	 * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME, +	 */, +	protected static final String RESERVED_DEFAULT_PROFILE_NAME = "default";, +, +	private Set<String> defaultProfiles = new LinkedHashSet<String>(this.getReservedDefaultProfiles());, +	/**, +	 * Return the set of active profiles as explicitly set through, +	 * {@link #setActiveProfiles} or if the current set of active profiles, +	 * is empty, check for the presence of the {@value #ACTIVE_PROFILES_PROPERTY_NAME}, +	 * property and assign its value to the set of active profiles., +	 * @see #getActiveProfiles(), +	 * @see #ACTIVE_PROFILES_PROPERTY_NAME, +	 */, +	/**, +	 * Return the set of default profiles explicitly set via, +	 * {@link #setDefaultProfiles(String...)} or if the current set of default profiles, +	 * consists only of {@linkplain #getReservedDefaultProfiles() reserved default, +	 * profiles}, then check for the presence of the, +	 * {@value #DEFAULT_PROFILES_PROPERTY_NAME} property and assign its value (if any), +	 * to the set of default profiles., +	 * @see #AbstractEnvironment(), +	 * @see #getDefaultProfiles(), +	 * @see #DEFAULT_PROFILES_PROPERTY_NAME, +	 * @see #getReservedDefaultProfiles(), +	 */, +		if (this.defaultProfiles.equals(this.getReservedDefaultProfiles())) {, +			String defaultProfiles = this.propertyResolver.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if (defaultProfiles != null) {, +				this.defaultProfiles = commaDelimitedListToSet(trimAllWhitespace(defaultProfiles));, +	/**, +	 * {@inheritDoc}, +	 * <p>Calling this method removes overrides any reserved default profiles, +	 * that may have been added during construction of the environment., +	 * @see #AbstractEnvironment(), +	 * @see #getReservedDefaultProfiles(), +	 */, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());, +			assertThat(beanFactory, containsTargetBean());, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static java.lang.String.format;, +import static org.springframework.util.StringUtils.commaDelimitedListToSet;, +import static org.springframework.util.StringUtils.trimAllWhitespace;, +, +import java.util.Collections;, + * Abstract base class for {@link Environment} implementations. Supports the notion of, + * reserved default profile names and enables specifying active and default profiles, + * through the {@link #ACTIVE_PROFILES_PROPERTY_NAME} and, + * {@link #DEFAULT_PROFILES_PROPERTY_NAME} properties., +	/**, +	 * Name of reserved default profile name: {@value}. If no default profile names are, +	 * explicitly and no active profile names are explictly set, this profile will, +	 * automatically be activated by default., +	 * @see #getReservedDefaultProfiles, +	 * @see ConfigurableEnvironment#setDefaultProfiles, +	 * @see ConfigurableEnvironment#setActiveProfiles, +	 * @see AbstractEnvironment#DEFAULT_PROFILES_PROPERTY_NAME, +	 * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME, +	 */, +	protected static final String RESERVED_DEFAULT_PROFILE_NAME = "default";, +, +	private Set<String> defaultProfiles = new LinkedHashSet<String>(this.getReservedDefaultProfiles());, +	/**, +	 * Return the set of active profiles as explicitly set through, +	 * {@link #setActiveProfiles} or if the current set of active profiles, +	 * is empty, check for the presence of the {@value #ACTIVE_PROFILES_PROPERTY_NAME}, +	 * property and assign its value to the set of active profiles., +	 * @see #getActiveProfiles(), +	 * @see #ACTIVE_PROFILES_PROPERTY_NAME, +	 */, +	/**, +	 * Return the set of default profiles explicitly set via, +	 * {@link #setDefaultProfiles(String...)} or if the current set of default profiles, +	 * consists only of {@linkplain #getReservedDefaultProfiles() reserved default, +	 * profiles}, then check for the presence of the, +	 * {@value #DEFAULT_PROFILES_PROPERTY_NAME} property and assign its value (if any)]