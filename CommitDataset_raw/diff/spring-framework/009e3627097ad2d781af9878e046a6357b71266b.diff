[+++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, + * <p>This configuration class is automatically imported when using the, + * @{@link EnableMBeanExport} annotation. See its javadoc for complete usage details., +public class MBeanExportConfiguration implements ImportAware, EnvironmentAware, BeanFactoryAware {, +	private Environment environment;, +, +		Assert.notNull(this.attributes,, +				"@EnableMBeanExport is not present on importing class " + importMetadata.getClassName());, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +, +			if (this.environment != null) {, +				defaultDomain = this.environment.resolvePlaceholders(defaultDomain);, +			}, +			if (this.environment != null) {, +				server = this.environment.resolvePlaceholders(server);, +			}, +			}, +			catch (Exception ex) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, + * <p>This configuration class is automatically imported when using the, + * @{@link EnableMBeanExport} annotation. See its javadoc for complete usage details., +public class MBeanExportConfiguration implements ImportAware, EnvironmentAware, BeanFactoryAware {, +	private Environment environment;, +, +		Assert.notNull(this.attributes,, +				"@EnableMBeanExport is not present on importing class " + importMetadata.getClassName());, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +, +			if (this.environment != null) {, +				defaultDomain = this.environment.resolvePlaceholders(defaultDomain);, +			}, +			if (this.environment != null) {, +				server = this.environment.resolvePlaceholders(server);, +			}, +			}, +			catch (Exception ex) {, +, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/EnableMBeanExportConfigurationTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.mock.env.MockEnvironment;, +	public void testPlaceholderBased() throws Exception {, +		MockEnvironment env = new MockEnvironment();, +		env.setProperty("serverName", "server");, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.setEnvironment(env);, +		ctx.register(PlaceholderBasedConfiguration.class);, +		ctx.refresh();, +		try {, +			MBeanServer server = (MBeanServer) ctx.getBean("server");, +			ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4");, +			assertNotNull(server.getObjectInstance(oname));, +			String name = (String) server.getAttribute(oname, "Name");, +			assertEquals("Invalid name returned", "TEST", name);, +		}, +		finally {, +			ctx.close();, +		}, +	}, +, +	@Test, +, +, +	@Configuration, +	@EnableMBeanExport(server = "${serverName}"), +	static class PlaceholderBasedConfiguration {, +, +		@Bean, +		public MBeanServerFactoryBean server() throws Exception {, +			return new MBeanServerFactoryBean();, +		}, +, +		@Bean, +		@Lazy, +		public AnnotationTestBean testBean() {, +			AnnotationTestBean bean = new AnnotationTestBean();, +			bean.setName("TEST");, +			bean.setAge(100);, +			return bean;, +		}, +	}, +, +, +]