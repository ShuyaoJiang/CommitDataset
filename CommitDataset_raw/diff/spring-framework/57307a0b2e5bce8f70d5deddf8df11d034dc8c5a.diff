[+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + * Copyright 2002-2012 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, + * @author Rossen Stoyanchev, +			return decodeInternal(request, source);, +		}, +		return source;, +	}, +, +	private String decodeInternal(HttpServletRequest request, String source) {, +	/**, +	 * Decode the given URI path variables via {@link #decodeRequestString(HttpServletRequest, String)}, +	 * unless {@link #setUrlDecode(boolean)} is set to {@code true} in which case, +	 * it is assumed the URL path from which the variables were extracted is, +	 * already decoded through a call to {@link #getLookupPathForRequest(HttpServletRequest)}., +	 * @param request current HTTP request, +	 * @param vars URI variables extracted from the URL path, +	 * @return the same Map or a new Map instance, +	 */, +	public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {, +		if (this.urlDecode) {, +			return vars;, +		}, +		else {, +			Map<String, String> decodedVars = new LinkedHashMap<String, String>(vars.size());, +			for (Entry<String, String> entry : vars.entrySet()) {, +				decodedVars.put(entry.getKey(), decodeInternal(request, entry.getValue()));, +			}, +			return decodedVars;, +		}, +	}, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + * Copyright 2002-2012 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, + * @author Rossen Stoyanchev, +			return decodeInternal(request, source);, +		}, +		return source;, +	}, +, +	private String decodeInternal(HttpServletRequest request, String source) {, +	/**, +	 * Decode the given URI path variables via {@link #decodeRequestString(HttpServletRequest, String)}, +	 * unless {@link #setUrlDecode(boolean)} is set to {@code true} in which case, +	 * it is assumed the URL path from which the variables were extracted is, +	 * already decoded through a call to {@link #getLookupPathForRequest(HttpServletRequest)}., +	 * @param request current HTTP request, +	 * @param vars URI variables extracted from the URL path, +	 * @return the same Map or a new Map instance, +	 */, +	public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {, +		if (this.urlDecode) {, +			return vars;, +		}, +		else {, +			Map<String, String> decodedVars = new LinkedHashMap<String, String>(vars.size());, +			for (Entry<String, String> entry : vars.entrySet()) {, +				decodedVars.put(entry.getKey(), decodeInternal(request, entry.getValue()));, +			}, +			return decodedVars;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath);, +		Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars);, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedVars);, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, + * Copyright 2002-2012 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, + * @author Rossen Stoyanchev, +			return decodeInternal(request, source);, +		}, +		return source;, +	}, +, +	private String decodeInternal(HttpServletRequest request, String source) {, +	/**, +	 * Decode the given URI path variables via {@link #decodeRequestString(HttpServletRequest, String)}, +	 * unless {@link #setUrlDecode(boolean)} is set to {@code true} in which case, +	 * it is assumed the URL path from which the variables were extracted is, +	 * already decoded through a call to {@link #getLookupPathForRequest(HttpServletRequest)}., +	 * @param request current HTTP request, +	 * @param vars URI variables extracted from the URL path, +	 * @return the same Map or a new Map instance, +	 */, +	public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {, +		if (this.urlDecode) {, +			return vars;, +		}, +		else {, +			Map<String, String> decodedVars = new LinkedHashMap<String, String>(vars.size());]