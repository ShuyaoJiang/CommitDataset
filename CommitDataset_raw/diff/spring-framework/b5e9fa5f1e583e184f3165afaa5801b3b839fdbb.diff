[+++ b/spring-tx/spring-tx.gradle, +	optional("io.vavr:vavr:0.10.0"), +++ b/spring-tx/spring-tx.gradle, +	optional("io.vavr:vavr:0.10.0"), +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +import io.vavr.control.Try;, +	 * Vavr library present on the classpath?, +	 */, +	private static final boolean vavrPresent = ClassUtils.isPresent(, +			"io.vavr.control.Try", TransactionAspectSupport.class.getClassLoader());, +, +	/**, +, +			Object retVal;, +, +			if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {, +				// Set rollback-only in case of Vavr failure matching our rollback rules..., +				TransactionStatus status = txInfo.getTransactionStatus();, +				if (status != null && txAttr != null) {, +					retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status);, +				}, +			}, +, +						Object retVal = invocation.proceedWithInvocation();, +						if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {, +							// Set rollback-only in case of Vavr failure matching our rollback rules..., +							retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status);, +						}, +						return retVal;, +, +	/**, +	 * Inner class to avoid a hard dependency on the Vavr library at runtime., +	 */, +	private static class VavrDelegate {, +, +		public static boolean isVavrTry(Object retVal) {, +			return (retVal instanceof Try);, +		}, +, +		public static Object evaluateTryFailure(Object retVal, TransactionAttribute txAttr, TransactionStatus status) {, +			return ((Try<?>) retVal).onFailure(ex -> {, +				if (txAttr.rollbackOn(ex)) {, +					status.setRollbackOnly();, +				}, +			});, +		}, +	}, +, +++ b/spring-tx/spring-tx.gradle, +	optional("io.vavr:vavr:0.10.0"), +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +import io.vavr.control.Try;, +	 * Vavr library present on the classpath?, +	 */, +	private static final boolean vavrPresent = ClassUtils.isPresent(, +			"io.vavr.control.Try", TransactionAspectSupport.class.getClassLoader());, +, +	/**, +, +			Object retVal;, +, +			if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {, +				// Set rollback-only in case of Vavr failure matching our rollback rules..., +				TransactionStatus status = txInfo.getTransactionStatus();, +				if (status != null && txAttr != null) {, +					retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status);, +				}, +			}, +, +						Object retVal = invocation.proceedWithInvocation();, +						if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {, +							// Set rollback-only in case of Vavr failure matching our rollback rules..., +							retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status);, +						}, +						return retVal;, +, +	/**, +	 * Inner class to avoid a hard dependency on the Vavr library at runtime., +	 */, +	private static class VavrDelegate {, +, +		public static boolean isVavrTry(Object retVal) {, +			return (retVal instanceof Try);, +		}, +, +		public static Object evaluateTryFailure(Object retVal, TransactionAttribute txAttr, TransactionStatus status) {, +			return ((Try<?>) retVal).onFailure(ex -> {, +				if (txAttr.rollbackOn(ex)) {, +					status.setRollbackOnly();, +				}, +			});, +		}, +	}, +, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionInterceptorTests.java, + * Copyright 2002-2019 the original author or authors., +import io.vavr.control.Try;, +	public void withRollbackOnRuntimeException() {]