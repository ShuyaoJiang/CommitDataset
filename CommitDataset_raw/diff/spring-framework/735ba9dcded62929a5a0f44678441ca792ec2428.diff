[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +import java.lang.annotation.Annotation;, +		Collection<Cacheable> cacheables = getAnnotations(ae, Cacheable.class);, +		if (cacheables != null) {, +			for (Cacheable cacheable : cacheables) {, +				ops.add(parseCacheableAnnotation(ae, cacheable));, +		}, +		Collection<CacheEvict> evicts = getAnnotations(ae, CacheEvict.class);, +		if (evicts != null) {, +			for (CacheEvict e : evicts) {, +				ops.add(parseEvictAnnotation(ae, e));, +		}, +		Collection<CachePut> updates = getAnnotations(ae, CachePut.class);, +		if (updates != null) {, +			for (CachePut p : updates) {, +				ops.add(parseUpdateAnnotation(ae, p));, +		}, +		Collection<Caching> caching = getAnnotations(ae, Caching.class);, +			for (Caching c : caching) {, +				ops.addAll(parseCachingAnnotation(ae, c));, +			}, +	private <T extends Annotation> Collection<CacheOperation> lazyInit(Collection<CacheOperation> ops) {, +		return (ops != null ? ops : new ArrayList<CacheOperation>(1));, +, +	private static <T extends Annotation> Collection<T> getAnnotations(AnnotatedElement ae, Class<T> annotationType) {, +		Collection<T> anns = new ArrayList<T>(2);, +, +		// look at raw annotation, +		T ann = ae.getAnnotation(annotationType);, +		if (ann != null) {, +			anns.add(ann);, +		}, +, +		// scan meta-annotations, +		for (Annotation metaAnn : ae.getAnnotations()) {, +			ann = metaAnn.annotationType().getAnnotation(annotationType);, +			if (ann != null) {, +				anns.add(ann);, +			}, +		}, +, +		return anns;, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +import java.lang.annotation.Annotation;, +		Collection<Cacheable> cacheables = getAnnotations(ae, Cacheable.class);, +		if (cacheables != null) {, +			for (Cacheable cacheable : cacheables) {, +				ops.add(parseCacheableAnnotation(ae, cacheable));, +		}, +		Collection<CacheEvict> evicts = getAnnotations(ae, CacheEvict.class);, +		if (evicts != null) {, +			for (CacheEvict e : evicts) {, +				ops.add(parseEvictAnnotation(ae, e));, +		}, +		Collection<CachePut> updates = getAnnotations(ae, CachePut.class);, +		if (updates != null) {, +			for (CachePut p : updates) {, +				ops.add(parseUpdateAnnotation(ae, p));, +		}, +		Collection<Caching> caching = getAnnotations(ae, Caching.class);, +			for (Caching c : caching) {, +				ops.addAll(parseCachingAnnotation(ae, c));, +			}, +	private <T extends Annotation> Collection<CacheOperation> lazyInit(Collection<CacheOperation> ops) {, +		return (ops != null ? ops : new ArrayList<CacheOperation>(1));, +, +	private static <T extends Annotation> Collection<T> getAnnotations(AnnotatedElement ae, Class<T> annotationType) {, +		Collection<T> anns = new ArrayList<T>(2);, +, +		// look at raw annotation, +		T ann = ae.getAnnotation(annotationType);, +		if (ann != null) {, +			anns.add(ann);, +		}, +, +		// scan meta-annotations, +		for (Annotation metaAnn : ae.getAnnotations()) {, +			ann = metaAnn.annotationType().getAnnotation(annotationType);, +			if (ann != null) {, +				anns.add(ann);, +			}, +		}, +, +		return anns;, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTest.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]