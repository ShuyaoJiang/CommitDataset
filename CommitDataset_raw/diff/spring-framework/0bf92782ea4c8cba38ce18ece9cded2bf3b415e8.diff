[+++ b/build-spring-framework/resources/changelog.txt, +* consolidated the initialization and use of MappedInterceptors in AbstractHandlerMapping, +++ b/build-spring-framework/resources/changelog.txt, +* consolidated the initialization and use of MappedInterceptors in AbstractHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorConfigurer.java, +	protected List<MappedInterceptor> getInterceptors() {, +		return mappedInterceptors;, +++ b/build-spring-framework/resources/changelog.txt, +* consolidated the initialization and use of MappedInterceptors in AbstractHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorConfigurer.java, +	protected List<MappedInterceptor> getInterceptors() {, +		return mappedInterceptors;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +	private List<MappedInterceptor> mappedInterceptors;, +, +	private List<HttpMessageConverter<?>> messageConverters;, +	, +		if (configurers == null || configurers.isEmpty()) {, +			return;, +		}, +		mapping.setInterceptors(getMappedInterceptors());, +	private Object[] getMappedInterceptors() {, +		if (mappedInterceptors == null) {, +			mappedInterceptors = configurer.getInterceptors();, +		}, +		return mappedInterceptors.toArray();, +		handlerMapping.setInterceptors(getMappedInterceptors());, +		mapping.setInterceptors(getMappedInterceptors());, +		adapter.setMessageConverters(getMessageConverters());, +	private List<HttpMessageConverter<?>> getMessageConverters() {, +		if (messageConverters == null) {, +			messageConverters = new ArrayList<HttpMessageConverter<?>>();, +			configurers.configureMessageConverters(messageConverters);, +			if (messageConverters.isEmpty()) {, +				addDefaultHttpMessageConverters(messageConverters);, +			}, +		}, +		return messageConverters;, +	}, +	, +	@Bean(name="webMvcConversionService"), +	@Bean(name="webMvcValidator"), +			return NOOP_VALIDATOR;, +	private void addDefaultHttpMessageConverters(List<HttpMessageConverter<?>> messageConverters) {, +		messageConverters.add(new ByteArrayHttpMessageConverter());, +		messageConverters.add(stringConverter);, +		messageConverters.add(new ResourceHttpMessageConverter());, +		messageConverters.add(new SourceHttpMessageConverter<Source>());, +		messageConverters.add(new XmlAwareFormHttpMessageConverter());, +			messageConverters.add(new Jaxb2RootElementHttpMessageConverter());, +			messageConverters.add(new MappingJacksonHttpMessageConverter());, +			messageConverters.add(new AtomFeedHttpMessageConverter());, +			messageConverters.add(new RssChannelHttpMessageConverter());, +		resolver.setMessageConverters(getMessageConverters());, +	private static final Validator NOOP_VALIDATOR = new Validator() {, +, +		public boolean supports(Class<?> clazz) {, +			return false;, +		}, +, +		public void validate(Object target, Errors errors) {, +		}, +	};, +, +++ b/build-spring-framework/resources/changelog.txt, +* consolidated the initialization and use of MappedInterceptors in AbstractHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorConfigurer.java, +	protected List<MappedInterceptor> getInterceptors() {, +		return mappedInterceptors;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +	private List<MappedInterceptor> mappedInterceptors;, +, +	private List<HttpMessageConverter<?>> messageConverters;, +	, +		if (configurers == null || configurers.isEmpty()) {, +			return;, +		}, +		mapping.setInterceptors(getMappedInterceptors());, +	private Object[] getMappedInterceptors() {, +		if (mappedInterceptors == null) {, +			mappedInterceptors = configurer.getInterceptors();, +		}, +		return mappedInterceptors.toArray();, +		handlerMapping.setInterceptors(getMappedInterceptors());, +		mapping.setInterceptors(getMappedInterceptors());, +		adapter.setMessageConverters(getMessageConverters());, +	private List<HttpMessageConverter<?>> getMessageConverters() {, +		if (messageConverters == null) {, +			messageConverters = new ArrayList<HttpMessageConverter<?>>();, +			configurers.configureMessageConverters(messageConverters);, +			if (messageConverters.isEmpty()) {, +				addDefaultHttpMessageConverters(messageConverters);, +			}, +		}, +		return messageConverters;, +	}, +	, +	@Bean(name="webMvcConversionService"), +	@Bean(name="webMvcValidator"), +			return NOOP_VALIDATOR;]