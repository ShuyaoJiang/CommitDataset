[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +import org.springframework.web.context.request.ServletWebRequest;, +				mappedHandler = getHandler(processedRequest);, +				// Determine handler adapter for the current request., +				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());, +, +                // Process last-modified header, if supported by the handler., +				String method = request.getMethod();, +				boolean isGet = "GET".equals(method);, +				if (isGet || "HEAD".equals(method)) {, +					long lastModified = ha.getLastModified(request, mappedHandler.getHandler());, +					if (logger.isDebugEnabled()) {, +						String requestUri = urlPathHelper.getRequestUri(request);, +						logger.debug("Last-Modified value for [" + requestUri + "] is: " + lastModified);, +					}, +					if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {, +						return;, +					}, +				}, +, +	protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {, +			HandlerExecutionChain handler = hm.getHandler(request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +import org.springframework.web.context.request.ServletWebRequest;, +				mappedHandler = getHandler(processedRequest);, +				// Determine handler adapter for the current request., +				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());, +, +                // Process last-modified header, if supported by the handler., +				String method = request.getMethod();, +				boolean isGet = "GET".equals(method);, +				if (isGet || "HEAD".equals(method)) {, +					long lastModified = ha.getLastModified(request, mappedHandler.getHandler());, +					if (logger.isDebugEnabled()) {, +						String requestUri = urlPathHelper.getRequestUri(request);, +						logger.debug("Last-Modified value for [" + requestUri + "] is: " + lastModified);, +					}, +					if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {, +						return;, +					}, +				}, +, +	protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {, +			HandlerExecutionChain handler = hm.getHandler(request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import org.springframework.web.context.request.ServletWebRequest;, + * (according to the guidelines of Page Speed, YSlow, etc.) by allowing for flexible cache settings, + * ({@link #setCacheSeconds "cacheSeconds" property}, last-modified support)., + * <p>The {@link #setLocations "locations" property takes a list of Spring {@link Resource} locations, + * from which static resources are allowed  to be served by this handler. For a given request, the, + * list of locations will be consulted in order for the presence of the requested resource, and the, + * first found match will be written to the response, with {@code Expires} and {@code Cache-Control}, + * headers set as configured. The handler also properly evaluates the {@code Last-Modified} header, + * (if present) so that a {@code 304} status code will be returned as appropriate, avoiding unnecessary, + * overhead for resources that are already cached by the client. The use of {@code Resource} locations, + * allows resource requests to easily be mapped to locations other than the web application root. For, + * <p>To ensure that users with a primed browser cache get the latest changes to application-specific, + * resources upon deployment of new versions of the application, it is recommended that a version string, + * is used in the URL  mapping pattern that selects this handler. Such patterns can be easily parameterized, + * using Spring EL. See the reference manual for further examples of this approach., + * <p>Rather than being directly configured as a bean, this handler will typically be configured, + * through use of the <code>&lt;mvc:resources/&gt;</code> XML configuration element., +		super(METHOD_GET, METHOD_HEAD);, +		setHeaders(resource, response);, +		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified()) ||, +				METHOD_HEAD.equals(request.getMethod())) {, +		writeContent(resource, response);, +	protected Resource getResource(HttpServletRequest request) {, +	protected void setHeaders(Resource resource, HttpServletResponse response) throws IOException {, +	protected void writeContent(Resource resource, HttpServletResponse response) throws IOException {, +		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream());, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +import org.springframework.web.context.request.ServletWebRequest;, +				mappedHandler = getHandler(processedRequest);, +				// Determine handler adapter for the current request., +				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());, +, +                // Process last-modified header, if supported by the handler., +				String method = request.getMethod();, +				boolean isGet = "GET".equals(method);, +				if (isGet || "HEAD".equals(method)) {, +					long lastModified = ha.getLastModified(request, mappedHandler.getHandler());, +					if (logger.isDebugEnabled()) {, +						String requestUri = urlPathHelper.getRequestUri(request);, +						logger.debug("Last-Modified value for [" + requestUri + "] is: " + lastModified);, +					}, +					if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {, +						return;, +					}, +				}, +, +	protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {, +			HandlerExecutionChain handler = hm.getHandler(request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import org.springframework.web.context.request.ServletWebRequest;, + * (according to the guidelines of Page Speed, YSlow, etc.) by allowing for flexible cache settings, + * ({@link #setCacheSeconds "cacheSeconds" property}, last-modified support)., + * <p>The {@link #setLocations "locations" property takes a list of Spring {@link Resource} locations]