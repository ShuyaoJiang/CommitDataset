[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * Copyright 2002-2013 the original author or authors., + * class and adding an additional property for the user. In this way, the user, + * example, one might want to implement {@link Comparable} so that when the, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * Copyright 2002-2013 the original author or authors., + * class and adding an additional property for the user. In this way, the user, + * example, one might want to implement {@link Comparable} so that when the, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, + * Copyright 2002-2013 the original author or authors., + * Concurrent request handling can be initiated by calling, + * {@link #startCallableProcessing(Callable, Object...) startCallableProcessing} or, + * {@link #startDeferredResultProcessing(DeferredResult, Object...) startDeferredResultProcessing},, +	 * @param webAsyncTask a WebAsyncTask containing the target {@code Callable}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * Copyright 2002-2013 the original author or authors., + * class and adding an additional property for the user. In this way, the user, + * example, one might want to implement {@link Comparable} so that when the, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, + * Copyright 2002-2013 the original author or authors., + * Concurrent request handling can be initiated by calling, + * {@link #startCallableProcessing(Callable, Object...) startCallableProcessing} or, + * {@link #startDeferredResultProcessing(DeferredResult, Object...) startDeferredResultProcessing},, +	 * @param webAsyncTask a WebAsyncTask containing the target {@code Callable}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a {@code WebAsyncTask} wrapping the given {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable., +			Assert.state(this.beanFactory != null, "A BeanFactory is required to look up a task executor bean");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * Copyright 2002-2013 the original author or authors., + * class and adding an additional property for the user. In this way, the user, + * example, one might want to implement {@link Comparable} so that when the, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, + * Copyright 2002-2013 the original author or authors., + * Concurrent request handling can be initiated by calling, + * {@link #startCallableProcessing(Callable, Object...) startCallableProcessing} or, + * {@link #startDeferredResultProcessing(DeferredResult, Object...) startDeferredResultProcessing},, +	 * @param webAsyncTask a WebAsyncTask containing the target {@code Callable}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a {@code WebAsyncTask} wrapping the given {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}., +	 * Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable., +			Assert.state(this.beanFactory != null, "A BeanFactory is required to look up a task executor bean");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/AsyncSupportConfigurer.java, + * Copyright 2002-2013 the original author or authors., + * Helps with configuring options for asynchronous request processing., +	 * a per-request basis by returning a {@link WebAsyncTask}., +	 * <p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's, +	 * Configure lifecycle interceptors with callbacks around concurrent request, +	 * Configure lifecycle interceptors with callbacks around concurrent request]