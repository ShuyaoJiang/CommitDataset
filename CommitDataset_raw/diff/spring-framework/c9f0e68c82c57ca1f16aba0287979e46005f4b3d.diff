[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +	/* prereq AspectJ 1.6.7, +	@Test, +	public void testIntroductionBasedOnAnnotationMatch_Spr5307() {, +		AnnotatedTarget target = new AnnotatedTargetImpl();, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new MakeAnnotatedTypeModifiable(),"someBean"));, +		Object proxy = createProxy(target,, +				advisors,, +				AnnotatedTarget.class);, +		System.out.println(advisors.get(1));, +		assertTrue(proxy instanceof Lockable);, +		Lockable lockable = (Lockable)proxy;, +		lockable.locked();, +	}, +    */, +/**, + * Adds a declare parents pointcut - spr5307, + * @author Andy Clement, + * @since 3.0, + */, +@Aspect, +class MakeAnnotatedTypeModifiable extends AbstractMakeModifiable {, +	, +	@DeclareParents(value = "(@org.springframework.aop.aspectj.annotation.Measured *)",, +//	@DeclareParents(value = "(@Measured *)", // this would be a nice alternative..., +			defaultImpl=DefaultLockable.class), +	public static Lockable mixin;, +, +}, +, +/**, + * Used as a target., + * @author Andy Clement, + */, +interface AnnotatedTarget {, +}, +@Measured, +class AnnotatedTargetImpl implements AnnotatedTarget {, +}, +, +@Retention(RetentionPolicy.RUNTIME), +@interface Measured {}]