[+++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, + * Copyright 2002-2017 the original author or authors., +	 * Generate a new id for the session and update the underlying session, +	 * storage to reflect the new id. After a successful call {@link #getId()}, +	 * reflects the new session id., +	 * @return completion notification (success or error), +	 */, +	Mono<Void> changeSessionId();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, + * Copyright 2002-2017 the original author or authors., +	 * Generate a new id for the session and update the underlying session, +	 * storage to reflect the new id. After a successful call {@link #getId()}, +	 * reflects the new session id., +	 * @return completion notification (success or error), +	 */, +	Mono<Void> changeSessionId();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +import java.util.function.BiFunction;, +import org.springframework.util.IdGenerator;, +	private final AtomicReference<String> id;, +, +	private final IdGenerator idGenerator;, +	private final BiFunction<String, WebSession, Mono<Void>> changeIdOperation;, +, +	 * @param idGenerator the session id generator, +	DefaultWebSession(IdGenerator idGenerator, Clock clock,, +			BiFunction<String, WebSession, Mono<Void>> changeIdOperation,, +			Function<WebSession, Mono<Void>> saveOperation) {, +, +		Assert.notNull(idGenerator, "'idGenerator' is required.");, +		Assert.notNull(changeIdOperation, "'changeIdOperation' is required.");, +		Assert.notNull(saveOperation, "'saveOperation' is required.");, +, +		this.id = new AtomicReference<>(String.valueOf(idGenerator.generateId()));, +		this.idGenerator = idGenerator;, +		this.changeIdOperation = changeIdOperation;, +		this.idGenerator = existingSession.idGenerator;, +		this.changeIdOperation = existingSession.changeIdOperation;, +		this.saveOperation = saveOperation;, +		this.idGenerator = existingSession.idGenerator;, +		this.changeIdOperation = existingSession.changeIdOperation;, +		this.saveOperation = existingSession.saveOperation;, +		return this.id.get();, +	public Mono<Void> changeSessionId() {, +		String oldId = this.id.get();, +		String newId = String.valueOf(this.idGenerator.generateId());, +		this.id.set(newId);, +		return this.changeIdOperation.apply(oldId, this).doOnError(ex -> this.id.set(oldId));, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, + * Copyright 2002-2017 the original author or authors., +	 * Generate a new id for the session and update the underlying session, +	 * storage to reflect the new id. After a successful call {@link #getId()}, +	 * reflects the new session id., +	 * @return completion notification (success or error), +	 */, +	Mono<Void> changeSessionId();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +import java.util.function.BiFunction;, +import org.springframework.util.IdGenerator;, +	private final AtomicReference<String> id;, +, +	private final IdGenerator idGenerator;, +	private final BiFunction<String, WebSession, Mono<Void>> changeIdOperation;, +, +	 * @param idGenerator the session id generator, +	DefaultWebSession(IdGenerator idGenerator, Clock clock,, +			BiFunction<String, WebSession, Mono<Void>> changeIdOperation,, +			Function<WebSession, Mono<Void>> saveOperation) {, +, +		Assert.notNull(idGenerator, "'idGenerator' is required.");, +		Assert.notNull(changeIdOperation, "'changeIdOperation' is required.");, +		Assert.notNull(saveOperation, "'saveOperation' is required.");, +, +		this.id = new AtomicReference<>(String.valueOf(idGenerator.generateId()));, +		this.idGenerator = idGenerator;, +		this.changeIdOperation = changeIdOperation;, +		this.idGenerator = existingSession.idGenerator;, +		this.changeIdOperation = existingSession.changeIdOperation;, +		this.saveOperation = saveOperation;, +		this.idGenerator = existingSession.idGenerator;, +		this.changeIdOperation = existingSession.changeIdOperation;, +		this.saveOperation = existingSession.saveOperation;, +		return this.id.get();, +	public Mono<Void> changeSessionId() {, +		String oldId = this.id.get();, +		String newId = String.valueOf(this.idGenerator.generateId());, +		this.id.set(newId);, +		return this.changeIdOperation.apply(oldId, this).doOnError(ex -> this.id.set(oldId));, +	}, +, +	@Override]