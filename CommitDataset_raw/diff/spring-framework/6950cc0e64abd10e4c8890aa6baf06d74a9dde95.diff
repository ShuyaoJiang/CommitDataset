[+++ b/spring-web/src/test/java/org/springframework/web/method/ResolvableMethod.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.method;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Set;, +import java.util.function.Consumer;, +import java.util.function.Predicate;, +import java.util.function.Supplier;, +import java.util.stream.Collectors;, +, +import org.aopalliance.intercept.MethodInterceptor;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.target.EmptyTargetSource;, +import org.springframework.cglib.core.SpringNamingPolicy;, +import org.springframework.cglib.proxy.Callback;, +import org.springframework.cglib.proxy.Enhancer;, +import org.springframework.cglib.proxy.Factory;, +import org.springframework.cglib.proxy.MethodProxy;, +import org.springframework.core.MethodIntrospector;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.objenesis.ObjenesisException;, +import org.springframework.objenesis.SpringObjenesis;, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * Convenience class to resolve a method and its parameters based on hints., + *, + * <h1>Background</h1>, + *, + * <p>When testing annotated methods we create test classes such as, + * "TestController" with a diverse range of method signatures representing, + * supported annotations and argument types. It becomes challenging to use, + * naming strategies to keep track of methods and arguments especially in, + * combination variables for reflection metadata., + *, + * <p>The idea with {@link ResolvableMethod} is NOT to rely on naming techniques, + * but to use hints to zero in on method parameters. Especially in combination, + * with {@link ResolvableType} such hints can be strongly typed and make tests, + * more readable by being explicit about what is being tested and more robust, + * since the provided hints have to match., + *, + * <p>Common use cases:, + *, + * <h2>1. Declared Return Type</h2>, + *, + * When testing return types it's common to have many methods with a unique, + * return type, possibly with or without an annotation., + *, + * <pre>, + *, + * import static org.springframework.web.method.ResolvableMethod.on;, + *, + * // Return type, + * on(TestController.class).resolveReturnType(Foo.class);, + *, + * // Annotation + return type, + * on(TestController.class).annotated(ResponseBody.class).resolveReturnType(Bar.class);, + *, + * // Annotation not present, + * on(TestController.class).isNotAnnotated(ResponseBody.class).resolveReturnType();, + *, + * // Annotation properties, + * on(TestController.class), + *         .annotated(RequestMapping.class, patterns("/foo"), params("p")), + *         .annotated(ResponseBody.class), + *         .resolveReturnType();, + * </pre>, + *, + * <h2>2. Method Arguments</h2>, + *, + * When testing method arguments it's more likely to have one or a small number, + * of methods with a wide array of argument types and parameter annotations., + *]