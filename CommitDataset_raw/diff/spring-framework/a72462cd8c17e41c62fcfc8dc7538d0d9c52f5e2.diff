[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +	/**, +	 * Translate the given request into a default view name. This is useful when, +	 * the application leaves the view name unspecified., +	 * <p>The default implementation strips the leading and trailing slash from, +	 * the as well as any extension and uses that as the view name., +	 * @return the default view name to use; if {@code null} is returned, +	 * processing will result in an IllegalStateException., +	 */, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +	/**, +	 * Translate the given request into a default view name. This is useful when, +	 * the application leaves the view name unspecified., +	 * <p>The default implementation strips the leading and trailing slash from, +	 * the as well as any extension and uses that as the view name., +	 * @return the default view name to use; if {@code null} is returned, +	 * processing will result in an IllegalStateException., +	 */, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +	@Test, +	public void order() throws Exception {, +		TestViewResolver resolver1 = new TestViewResolver();, +		TestViewResolver resolver2 = new TestViewResolver();, +		resolver1.setOrder(2);, +		resolver2.setOrder(1);, +, +		assertEquals(Arrays.asList(resolver2, resolver1),, +				new ViewResolutionResultHandler(Arrays.asList(resolver1, resolver2), this.conversionService), +						.getViewResolvers());, +	}, +, +	@Test, +	public void viewReference() throws Exception {, +		Object value = new TestView("account");, +		handle("/path", value, ResolvableType.forClass(View.class));, +, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +	}, +, +	@Test, +	public void viewReferenceInMono() throws Exception {, +		Object value = Mono.just(new TestView("account"));, +		handle("/path", value, returnTypeFor("handleMonoView"));, +, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +	}, +, +	@Test, +	public void viewName() throws Exception {, +		Object value = "account";, +		handle("/path", value, ResolvableType.forClass(String.class), new TestViewResolver("account"));, +, +		TestSubscriber<DataBuffer> subscriber = new TestSubscriber<>();, +		subscriber.bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +	}, +, +	@Test, +	public void viewNameInMono() throws Exception {, +		Object value = Mono.just("account");, +		handle("/path", value, returnTypeFor("handleMonoString"), new TestViewResolver("account"));, +, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +	}, +, +	@Test, +	public void viewNameWithMultipleResolvers() throws Exception {, +		String value = "profile";, +		handle("/path", value, ResolvableType.forClass(String.class),, +				new TestViewResolver("account"), new TestViewResolver("profile"));, +, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("profile: {id=123}", asString(buf)));, +	}, +, +	@Test, +	public void viewNameUnresolved() throws Exception {, +		TestSubscriber<Void> subscriber = handle("/path", "account", ResolvableType.forClass(String.class));, +, +		subscriber.assertNoValues();, +	}, +, +	@Test, +	public void viewNameIsNull() throws Exception {, +		ViewResolver resolver = new TestViewResolver("account");, +, +		handle("/account", null, ResolvableType.forClass(String.class), resolver);, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +, +		handle("/account/", null, ResolvableType.forClass(String.class), resolver);, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));, +, +		handle("/account.123", null, ResolvableType.forClass(String.class), resolver);, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals("account: {id=123}", asString(buf)));]