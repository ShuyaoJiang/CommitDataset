[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			try {, +			catch (NoSuchBeanDefinitionException ex) {, +				// Shouldn't happen - probably a result of circular reference resolution..., +				if (logger.isDebugEnabled()) {, +					logger.debug("Failed to check manually registered singleton with name '" + beanName + "'", ex);, +				}, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			try {, +			catch (NoSuchBeanDefinitionException ex) {, +				// Shouldn't happen - probably a result of circular reference resolution..., +				if (logger.isDebugEnabled()) {, +					logger.debug("Failed to check manually registered singleton with name '" + beanName + "'", ex);, +				}, +			}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ClassPathFactoryBeanDefinitionScannerTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +import org.springframework.context.support.AbstractApplicationContext;, +import static org.junit.Assert.*;, +, +public class ClassPathFactoryBeanDefinitionScannerTests {, +	@Test, +		assertSame(context.getBean("publicInstance"), clientBean.testBean);, +		assertSame(context.getBean("dependencyBean"), clientBean.dependencyBean);, +		assertSame(context, clientBean.applicationContext);, +, +		@Autowired, +		AbstractApplicationContext applicationContext;]