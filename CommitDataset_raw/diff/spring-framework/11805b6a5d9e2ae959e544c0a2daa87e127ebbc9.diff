[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import javax.servlet.ServletContext;, +import org.springframework.web.context.support.WebApplicationObjectSupport;, + * @author Juergen Hoeller, +public class ServerEndpointExporter extends WebApplicationObjectSupport implements BeanPostProcessor, InitializingBean {, +	private List<Class<?>> annotatedEndpointClasses;, +, +	private Set<Class<?>> annotatedEndpointBeanTypes;, +, +, +	/**, +	 * Set the JSR-356 {@link ServerContainer} to use for endpoint registration., +	 * If not set, the container is going to be retrieved via the {@code ServletContext}., +	 * @since 4.1, +	 */, +	public void setServerContainer(ServerContainer serverContainer) {, +		this.serverContainer = serverContainer;, +	}, +, +	/**, +	 * Return the JSR-356 {@link ServerContainer} to use for endpoint registration., +	 */, +	protected ServerContainer getServerContainer() {, +		return this.serverContainer;, +	}, +		this.annotatedEndpointClasses = Arrays.asList(annotatedEndpointClasses);, +	protected void initApplicationContext(ApplicationContext context) {, +		// Initializes ServletContext given a WebApplicationContext, +		super.initApplicationContext(context);, +, +		// Retrieve beans which are annotated with @ServerEndpoint, +		this.annotatedEndpointBeanTypes = new LinkedHashSet<Class<?>>();, +		String[] beanNames = context.getBeanNamesForAnnotation(ServerEndpoint.class);, +		for (String beanName : beanNames) {, +			Class<?> beanType = context.getType(beanName);, +	@Override, +	protected void initServletContext(ServletContext servletContext) {, +		if (this.serverContainer == null) {, +			this.serverContainer =, +					(ServerContainer) servletContext.getAttribute("javax.websocket.server.ServerContainer");, +	public void afterPropertiesSet() {, +		Assert.state(getServerContainer() != null, "javax.websocket.server.ServerContainer not available");, +		registerEndpoints();, +, +	/**, +	 * Actually register the endpoints. Called by {@link #afterPropertiesSet()}., +	 * @since 4.1, +	 */, +	protected void registerEndpoints() {, +		Set<Class<?>> endpointClasses = new LinkedHashSet<Class<?>>();, +		if (this.annotatedEndpointClasses != null) {, +			endpointClasses.addAll(this.annotatedEndpointClasses);, +		if (this.annotatedEndpointBeanTypes != null) {, +			endpointClasses.addAll(this.annotatedEndpointBeanTypes);, +		}, +		for (Class<?> endpointClass : endpointClasses) {, +			registerEndpoint(endpointClass);, +	private void registerEndpoint(Class<?> endpointClass) {, +				logger.info("Registering @ServerEndpoint type: " + endpointClass);, +			getServerContainer().addEndpoint(endpointClass);, +		catch (DeploymentException ex) {, +			throw new IllegalStateException("Failed to register @ServerEndpoint type " + endpointClass, ex);, +, +, +	@Override, +	public Object postProcessBeforeInitialization(Object bean, String beanName) {, +	public Object postProcessAfterInitialization(Object bean, String beanName) {, +		if (bean instanceof ServerEndpointConfig) {, +			ServerEndpointConfig endpointConfig = (ServerEndpointConfig) bean;, +			try {, +				if (logger.isInfoEnabled()) {, +					logger.info("Registering bean '" + beanName +, +							"' as javax.websocket.Endpoint under path " + endpointConfig.getPath());, +				}, +				getServerContainer().addEndpoint(endpointConfig);, +			}, +			catch (DeploymentException ex) {, +				throw new IllegalStateException("Failed to deploy Endpoint bean with name '" + bean + "'", ex);, +			}, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import javax.servlet.ServletContext;, +import org.springframework.web.context.support.WebApplicationObjectSupport;, + * @author Juergen Hoeller, +public class ServerEndpointExporter extends WebApplicationObjectSupport implements BeanPostProcessor, InitializingBean {, +	private List<Class<?>> annotatedEndpointClasses;, +, +	private Set<Class<?>> annotatedEndpointBeanTypes;, +, +, +	/**, +	 * Set the JSR-356 {@link ServerContainer} to use for endpoint registration., +	 * If not set, the container is going to be retrieved via the {@code ServletContext}., +	 * @since 4.1, +	 */, +	public void setServerContainer(ServerContainer serverContainer) {]