[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified annotation., +	 * @see #getMetaAnnotationTypes(AnnotatedElement, String), +	 * @see #hasMetaAnnotationTypes, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified annotation., +	 * @see #getMetaAnnotationTypes(AnnotatedElement, Class), +	 * @see #hasMetaAnnotationTypes, +		try {, +			Annotation annotation = getAnnotation(element, annotationType);, +			if (annotation != null) {, +				processWithGetSemantics(annotation.annotationType(), annotationType, new SimpleAnnotationProcessor<Object>() {, +, +				}, new HashSet<AnnotatedElement>(), 1);, +			}, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Failed to introspect annotations on " + element, ex);, +		}, +	 * Determine if the supplied {@link AnnotatedElement} is annotated with, +	 * a <em>composed annotation</em> that is meta-annotated with an, +	 * annotation of the specified {@code annotationType}., +	 *, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified element., +	 *, +	 * @param annotationType the fully qualified class name of the meta-annotation, +	 * @return {@code true} if a matching meta-annotation is present, +	 * @see #getMetaAnnotationTypes, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, final String annotationType) {, +				boolean found = annotation.annotationType().getName().equals(annotationType);, +				if (found && (metaDepth > 0)) {, +	 * Determine if an annotation of the specified {@code annotationType}, +	 * is <em>present</em> on the supplied {@link AnnotatedElement} or, +	 * within the annotation hierarchy above the specified element., +	 *, +	 * <p>If this method returns {@code true}, then {@link #getAnnotationAttributes}, +	 * will return a non-null value., +	 *, +	 * @return {@code true} if a matching annotation is present, +	public static boolean isAnnotated(AnnotatedElement element, final String annotationType) {, +				boolean found = annotation.annotationType().getName().equals(annotationType);, +				return (found ? Boolean.TRUE : null);, +		return processWithGetSemantics(element, annotationType, new MergeAnnotationAttributesProcessor(annotationType,, +				annotationType, classValuesAsString, nestedAnnotationsAsMap));, +					// TODO Test for !AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							visited, metaDepth + 1);, +							searchOnMethodsInSuperclasses, processor, visited, metaDepth + 1);, +	private static Annotation getAnnotation(AnnotatedElement element, String annotationType) {, +		for (Annotation annotation : element.getAnnotations()) {, +			if (annotation.annotationType().getName().equals(annotationType)) {, +				return annotation;, +			}, +		}, +		return null;, +	}, +		private final String annotationType;, +		MergeAnnotationAttributesProcessor(String annotationType, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +			this.annotationType = annotationType;, +			boolean found = annotation.annotationType().getName().equals(annotationType);, +			return (!found ? null : AnnotationUtils.getAnnotationAttributes(annotation, classValuesAsString, nestedAnnotationsAsMap));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified annotation., +	 * @see #getMetaAnnotationTypes(AnnotatedElement, String), +	 * @see #hasMetaAnnotationTypes, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified annotation., +	 * @see #getMetaAnnotationTypes(AnnotatedElement, Class), +	 * @see #hasMetaAnnotationTypes, +		try {, +			Annotation annotation = getAnnotation(element, annotationType);, +			if (annotation != null) {, +				processWithGetSemantics(annotation.annotationType(), annotationType, new SimpleAnnotationProcessor<Object>() {, +, +				}, new HashSet<AnnotatedElement>(), 1);, +			}, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Failed to introspect annotations on " + element, ex);, +		}, +	 * Determine if the supplied {@link AnnotatedElement} is annotated with, +	 * a <em>composed annotation</em> that is meta-annotated with an, +	 * annotation of the specified {@code annotationType}., +	 *, +	 * <p>This method finds all meta-annotations in the annotation hierarchy, +	 * above the specified element., +	 *, +	 * @param annotationType the fully qualified class name of the meta-annotation, +	 * @return {@code true} if a matching meta-annotation is present, +	 * @see #getMetaAnnotationTypes, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, final String annotationType) {, +				boolean found = annotation.annotationType().getName().equals(annotationType);, +				if (found && (metaDepth > 0)) {, +	 * Determine if an annotation of the specified {@code annotationType}, +	 * is <em>present</em> on the supplied {@link AnnotatedElement} or, +	 * within the annotation hierarchy above the specified element., +	 *, +	 * <p>If this method returns {@code true}, then {@link #getAnnotationAttributes}]