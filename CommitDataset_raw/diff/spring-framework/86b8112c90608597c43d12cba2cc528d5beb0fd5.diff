[+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +			throw new IllegalArgumentException("Supplied type is not an enum: " + enumType.getName());, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +			throw new IllegalArgumentException("Supplied type is not an enum: " + enumType.getName());, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP request., + * Created via an implementation of the {@link ClientHttpRequestFactory}., + * <p>A {@code ClientHttpRequest} can be {@linkplain #execute() executed},, + * receiving a {@link ClientHttpResponse} which can be read from., +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +			throw new IllegalArgumentException("Supplied type is not an enum: " + enumType.getName());, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP request., + * Created via an implementation of the {@link ClientHttpRequestFactory}., + * <p>A {@code ClientHttpRequest} can be {@linkplain #execute() executed},, + * receiving a {@link ClientHttpResponse} which can be read from., +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpResponse.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP response., + * Obtained via an calling of the {@link ClientHttpRequest#execute()}., + * <p>A {@code ClientHttpResponse} must be {@linkplain #close() closed},, + * typically in a {@code finally} block., +	 * Close this response, freeing any resources created., +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +			throw new IllegalArgumentException("Supplied type is not an enum: " + enumType.getName());, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP request., + * Created via an implementation of the {@link ClientHttpRequestFactory}., + * <p>A {@code ClientHttpRequest} can be {@linkplain #execute() executed},, + * receiving a {@link ClientHttpResponse} which can be read from., +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpResponse.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP response., + * Obtained via an calling of the {@link ClientHttpRequest#execute()}., + * <p>A {@code ClientHttpResponse} must be {@linkplain #close() closed},, + * typically in a {@code finally} block., +	 * Close this response, freeing any resources created., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java, +		fc.setTemplateLoaderPaths("classpath:/", "file://" + System.getProperty("java.io.tmpdir"));, +, +		}, +		catch (Exception ex) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * @since 4.1.4, +		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX));, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +			throw new IllegalArgumentException("Supplied type is not an enum: " + enumType.getName());, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP request., + * Created via an implementation of the {@link ClientHttpRequestFactory}., + * <p>A {@code ClientHttpRequest} can be {@linkplain #execute() executed},, + * receiving a {@link ClientHttpResponse} which can be read from., +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpResponse.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side HTTP response., + * Obtained via an calling of the {@link ClientHttpRequest#execute()}., + * <p>A {@code ClientHttpResponse} must be {@linkplain #close() closed},, + * typically in a {@code finally} block., +	 * Close this response, freeing any resources created., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java, +		fc.setTemplateLoaderPaths("classpath:/", "file://" + System.getProperty("java.io.tmpdir"));, +, +		}, +		catch (Exception ex) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerViewTests.java, + * Copyright 2002-2014 the original author or authors., +			assertTrue(ex.getMessage().contains("FreeMarkerConfig"));, +			assertTrue(ex.getMessage().contains("url"));, +		Map<String, FreeMarkerConfig> configs = new HashMap<String, FreeMarkerConfig>();, +		Map<String, Object> model = new HashMap<String, Object>();, +		Map<String, FreeMarkerConfig> configs = new HashMap<String, FreeMarkerConfig>();, +		Map<String, Object> model = new HashMap<String, Object>();, +				return new Template(name, new StringReader("test"), this) {]