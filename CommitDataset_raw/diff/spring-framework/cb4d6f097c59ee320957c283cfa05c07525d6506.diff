[+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);, +		for (Object o : array) {, +			sj.add(String.valueOf(o));, +		return sj.toString();, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);, +		for (Object o : array) {, +			sj.add(String.valueOf(o));, +		return sj.toString();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineList.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(",", "{", "}");, +			sj.add(getChild(c).toStringAST());, +		return sj.toString();, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);, +		for (Object o : array) {, +			sj.add(String.valueOf(o));, +		return sj.toString();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineList.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(",", "{", "}");, +			sj.add(getChild(c).toStringAST());, +		return sj.toString();, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		StringJoiner joiner = new StringJoiner(", ");, +		for (Charset charset : acceptableCharsets) {, +			joiner.add(charset.name().toLowerCase(Locale.ENGLISH));, +		set(ACCEPT_CHARSET, joiner.toString());, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);, +		for (Object o : array) {, +			sj.add(String.valueOf(o));, +		return sj.toString();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineList.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(",", "{", "}");, +			sj.add(getChild(c).toStringAST());, +		return sj.toString();, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		StringJoiner joiner = new StringJoiner(", ");, +		for (Charset charset : acceptableCharsets) {, +			joiner.add(charset.name().toLowerCase(Locale.ENGLISH));, +		set(ACCEPT_CHARSET, joiner.toString());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/AbstractRequestCondition.java, +import java.util.StringJoiner;, +		String infix = getToStringInfix();, +		StringJoiner joiner = new StringJoiner(infix, "[", "]");, +		for (Object expression : getContent()) {, +			joiner.add(expression.toString());, +		return joiner.toString();, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);, +		for (Object o : array) {, +			sj.add(String.valueOf(o));, +		return sj.toString();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineList.java, +import java.util.StringJoiner;, +		StringJoiner sj = new StringJoiner(",", "{", "}");, +			sj.add(getChild(c).toStringAST());, +		return sj.toString();, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		StringJoiner joiner = new StringJoiner(", ");, +		for (Charset charset : acceptableCharsets) {, +			joiner.add(charset.name().toLowerCase(Locale.ENGLISH));, +		set(ACCEPT_CHARSET, joiner.toString());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/AbstractRequestCondition.java, +import java.util.StringJoiner;, +		String infix = getToStringInfix();, +		StringJoiner joiner = new StringJoiner(infix, "[", "]");, +		for (Object expression : getContent()) {, +			joiner.add(expression.toString());, +		return joiner.toString();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, +import java.util.StringJoiner;, +		String infix = getToStringInfix();, +		StringJoiner joiner = new StringJoiner(infix, "[", "]");, +		for (Object expression : getContent()) {, +			joiner.add(expression.toString());, +		return joiner.toString();]