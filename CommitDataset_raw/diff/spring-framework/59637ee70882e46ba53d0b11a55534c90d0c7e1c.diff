[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;, +	private TypeResolverBuilder<?> defaultTyping;, +, +	 * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing., +	 * @since 4.2.2, +	 */, +	public Jackson2ObjectMapperBuilder defaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {, +		this.defaultTyping = typeResolverBuilder;, +		return this;, +	}, +, +	/**, +, +		if (this.defaultTyping != null) {, +			objectMapper.setDefaultTyping(this.defaultTyping);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;, +	private TypeResolverBuilder<?> defaultTyping;, +, +	 * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing., +	 * @since 4.2.2, +	 */, +	public Jackson2ObjectMapperBuilder defaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {, +		this.defaultTyping = typeResolverBuilder;, +		return this;, +	}, +, +	/**, +, +		if (this.defaultTyping != null) {, +			objectMapper.setDefaultTyping(this.defaultTyping);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;, +	 * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing., +	 * @since 4.2.2, +	 */, +	public void setDefaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {, +		this.builder.defaultTyping(typeResolverBuilder);, +	}, +, +	/**, +	 * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO., +	 * @since 4.2, +	 * @see Jackson2ObjectMapperBuilder#filters(FilterProvider), +	 */, +	public void setFilters(FilterProvider filters) {, +		this.builder.filters(filters);, +	}, +, +	/**, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public void setMixIns(Map<Class<?>, Class<?>> mixIns) {, +		this.builder.mixIns(mixIns);, +	}, +, +	/**, +	@Override, +	public void setBeanClassLoader(ClassLoader beanClassLoader) {, +		this.builder.moduleClassLoader(beanClassLoader);, +	}, +, +, +	@Override, +	public void afterPropertiesSet() {, +		if (this.objectMapper != null) {, +			this.builder.configure(this.objectMapper);, +		}, +		else {, +			this.objectMapper = this.builder.build();, +		}, +	}, +]