[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.util.UriComponentsBuilder;, +		return UriComponentsBuilder.fromUri(this.uri).replacePath(this.uriPath).build(true).toUri();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.util.UriComponentsBuilder;, +		return UriComponentsBuilder.fromUri(this.uri).replacePath(this.uriPath).build(true).toUri();, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpRequestTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	@Test // SPR-16434, +	public void mutatePathWithEncodedQueryParams() throws Exception {, +		ServerHttpRequest request = createHttpRequest("/path?name=%E6%89%8E%E6%A0%B9"), +				.mutate().path("/mutatedPath").build();, +		assertEquals("/mutatedPath", request.getURI().getRawPath());, +		assertEquals("name=%E6%89%8E%E6%A0%B9", request.getURI().getRawQuery());, +, +, +	private ServerHttpRequest createHttpRequest(String path) throws Exception {, +		HttpServletRequest request = createEmptyBodyHttpServletRequest(path);, +	private HttpServletRequest createEmptyBodyHttpServletRequest(String path) {, +		return new MockHttpServletRequest("GET", path) {, +				@Override, +				public ServletInputStream getInputStream() {, +					return new DelegatingServletInputStream(new ByteArrayInputStream(new byte[0])) {, +					};, +			};, +	}, +]