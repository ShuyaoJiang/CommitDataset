[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaSystemException.java, +	public JpaSystemException(RuntimeException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaSystemException.java, +	public JpaSystemException(RuntimeException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java, +import org.hibernate.NonUniqueObjectException;, +import org.hibernate.NonUniqueResultException;, +import org.hibernate.ObjectDeletedException;, +import org.hibernate.OptimisticLockException;, +import org.hibernate.PersistentObjectException;, +import org.hibernate.PessimisticLockException;, +import org.hibernate.PropertyValueException;, +import org.hibernate.QueryException;, +import org.hibernate.QueryTimeoutException;, +import org.hibernate.StaleObjectStateException;, +import org.hibernate.StaleStateException;, +import org.hibernate.TransientObjectException;, +import org.hibernate.UnresolvableObjectException;, +import org.hibernate.WrongClassException;, +import org.hibernate.exception.ConstraintViolationException;, +import org.hibernate.exception.DataException;, +import org.hibernate.exception.JDBCConnectionException;, +import org.hibernate.exception.LockAcquisitionException;, +import org.hibernate.exception.SQLGrammarException;, +import org.springframework.dao.CannotAcquireLockException;, +import org.springframework.dao.DataAccessResourceFailureException;, +import org.springframework.dao.DataIntegrityViolationException;, +import org.springframework.dao.DuplicateKeyException;, +import org.springframework.dao.IncorrectResultSizeDataAccessException;, +import org.springframework.dao.InvalidDataAccessApiUsageException;, +import org.springframework.dao.InvalidDataAccessResourceUsageException;, +import org.springframework.dao.PessimisticLockingFailureException;, +import org.springframework.orm.ObjectOptimisticLockingFailureException;, +import org.springframework.orm.ObjectRetrievalFailureException;, +import org.springframework.orm.jpa.JpaSystemException;, +	private static Class<?> optimisticLockExceptionClass;, +, +	private static Class<?> pessimisticLockExceptionClass;, +, +	static {, +		// Checking for Hibernate 4.x's Optimistic/PessimisticEntityLockException, +		ClassLoader cl = HibernateJpaDialect.class.getClassLoader();, +		try {, +			optimisticLockExceptionClass = cl.loadClass("org.hibernate.dialect.lock.OptimisticEntityLockException");, +		}, +		catch (ClassNotFoundException ex) {, +			optimisticLockExceptionClass = OptimisticLockException.class;, +		}, +		try {, +			pessimisticLockExceptionClass = cl.loadClass("org.hibernate.dialect.lock.PessimisticEntityLockException");, +		}, +		catch (ClassNotFoundException ex) {, +			pessimisticLockExceptionClass = null;, +		}, +	}, +, +, +			return convertHibernateAccessException((HibernateException) ex);, +			return convertHibernateAccessException((HibernateException) ex.getCause());, +	/**, +	 * Convert the given HibernateException to an appropriate exception, +	 * from the {@code org.springframework.dao} hierarchy., +	 * @param ex HibernateException that occurred, +	 * @return the corresponding DataAccessException instance, +	 */, +	protected DataAccessException convertHibernateAccessException(HibernateException ex) {, +		if (ex instanceof JDBCConnectionException) {, +			return new DataAccessResourceFailureException(ex.getMessage(), ex);, +		}, +		if (ex instanceof SQLGrammarException) {, +			SQLGrammarException jdbcEx = (SQLGrammarException) ex;, +			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof QueryTimeoutException) {, +			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex;, +			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof LockAcquisitionException) {, +			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex;, +			return new CannotAcquireLockException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof PessimisticLockException) {, +			PessimisticLockException jdbcEx = (PessimisticLockException) ex;, +			return new PessimisticLockingFailureException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof ConstraintViolationException) {, +			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex;, +			return new DataIntegrityViolationException(ex.getMessage()  + "; SQL [" + jdbcEx.getSQL() +, +					"]; constraint [" + jdbcEx.getConstraintName() + "]", ex);, +		}, +		if (ex instanceof DataException) {, +			DataException jdbcEx = (DataException) ex;, +			return new DataIntegrityViolationException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}]