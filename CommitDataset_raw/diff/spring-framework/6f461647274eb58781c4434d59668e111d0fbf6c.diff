[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.List;, + * <p>By default, this decoder will split the received {@link DataBuffer}s along newline, + * characters ({@code \r\n}), but this can be changed by passing {@code false} as, + * constructor argument., +	private final boolean splitOnNewline;, +	 * <p>By default, this decoder will split along new lines., +	 * @param splitOnNewline whether this decoder should split the received data buffers, +	 * along newline characters, +	public StringDecoder(boolean splitOnNewline) {, +		this.splitOnNewline = splitOnNewline;, +		if (this.splitOnNewline) {, +			inputFlux = inputFlux.flatMap(dataBuffer -> {, +				List<DataBuffer> tokens =, +						DataBufferUtils.tokenize(dataBuffer, b -> b == '\n' || b == '\r');, +				return Flux.fromIterable(tokens);, +			});, +		if (mimeType != null && mimeType.getCharset() != null) {, +			return mimeType.getCharset();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.List;, + * <p>By default, this decoder will split the received {@link DataBuffer}s along newline, + * characters ({@code \r\n}), but this can be changed by passing {@code false} as, + * constructor argument., +	private final boolean splitOnNewline;, +	 * <p>By default, this decoder will split along new lines., +	 * @param splitOnNewline whether this decoder should split the received data buffers, +	 * along newline characters, +	public StringDecoder(boolean splitOnNewline) {, +		this.splitOnNewline = splitOnNewline;, +		if (this.splitOnNewline) {, +			inputFlux = inputFlux.flatMap(dataBuffer -> {, +				List<DataBuffer> tokens =, +						DataBufferUtils.tokenize(dataBuffer, b -> b == '\n' || b == '\r');, +				return Flux.fromIterable(tokens);, +			});, +		if (mimeType != null && mimeType.getCharset() != null) {, +			return mimeType.getCharset();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/XmlEventDecoder.java, +import java.io.InputStream;, +					flatMap(dataBuffer -> {, +							InputStream is = dataBuffer.asInputStream();, +						finally {, +							DataBufferUtils.release(dataBuffer);, +						}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.List;, + * <p>By default, this decoder will split the received {@link DataBuffer}s along newline, + * characters ({@code \r\n}), but this can be changed by passing {@code false} as, + * constructor argument., +	private final boolean splitOnNewline;, +	 * <p>By default, this decoder will split along new lines., +	 * @param splitOnNewline whether this decoder should split the received data buffers, +	 * along newline characters, +	public StringDecoder(boolean splitOnNewline) {, +		this.splitOnNewline = splitOnNewline;, +		if (this.splitOnNewline) {, +			inputFlux = inputFlux.flatMap(dataBuffer -> {, +				List<DataBuffer> tokens =, +						DataBufferUtils.tokenize(dataBuffer, b -> b == '\n' || b == '\r');, +				return Flux.fromIterable(tokens);, +			});, +		if (mimeType != null && mimeType.getCharset() != null) {, +			return mimeType.getCharset();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/XmlEventDecoder.java, +import java.io.InputStream;, +					flatMap(dataBuffer -> {, +							InputStream is = dataBuffer.asInputStream();, +						finally {, +							DataBufferUtils.release(dataBuffer);, +						}, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/StringDecoderTests.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +		this.decoder = new StringDecoder(false);, +		testSubscriber.bindTo(output)., +				assertNoError()., +				assertComplete()., +				assertValues("foo", "bar", "baz");, +	public void decodeNewLine() throws InterruptedException {, +		DataBuffer fooBar = stringBuffer("\nfoo\r\nbar\r");, +		DataBuffer baz = stringBuffer("\nbaz");, +		Flux<DataBuffer> source = Flux.just(fooBar, baz);, +		testSubscriber.bindTo(output)., +				assertNoError()., +				assertComplete()., +				assertValues("foo", "bar", "baz");, +		Flux<DataBuffer> source = Flux.just(stringBuffer(""));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.List;, + * <p>By default, this decoder will split the received {@link DataBuffer}s along newline, + * characters ({@code \r\n}), but this can be changed by passing {@code false} as, + * constructor argument., +	private final boolean splitOnNewline;, +	 * <p>By default, this decoder will split along new lines., +	 * @param splitOnNewline whether this decoder should split the received data buffers, +	 * along newline characters, +	public StringDecoder(boolean splitOnNewline) {, +		this.splitOnNewline = splitOnNewline;, +		if (this.splitOnNewline) {]