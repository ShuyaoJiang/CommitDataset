[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +import java.sql.Connection;, +import java.sql.SQLException;, +, +import org.springframework.dao.DataAccessResourceFailureException;, +			try {, +				Connection connection = this.dataSource.getConnection();, +				try {, +					this.databasePopulator.populate(connection);, +				}, +				finally {, +					try {, +						connection.close();, +					}, +					catch (SQLException ex) {, +						// ignore, +					}, +				}, +			}, +			catch (SQLException ex) {, +				throw new DataAccessResourceFailureException("Failed to populate database", ex);, +			}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +import java.sql.Connection;, +import java.sql.SQLException;, +, +import org.springframework.dao.DataAccessResourceFailureException;, +			try {, +				Connection connection = this.dataSource.getConnection();, +				try {, +					this.databasePopulator.populate(connection);, +				}, +				finally {, +					try {, +						connection.close();, +					}, +					catch (SQLException ex) {, +						// ignore, +					}, +				}, +			}, +			catch (SQLException ex) {, +				throw new DataAccessResourceFailureException("Failed to populate database", ex);, +			}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTest.java, +	public void testCreateEmbeddedDatabaseAgain() throws Exception {, +		// If Derby isn't cleaned up properly this will fail..., +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +				"org/springframework/jdbc/config/jdbc-config.xml");, +		try {, +			assertCorrectSetup(context.getBean("derbyDataSource", DataSource.class));, +		} finally {, +			context.close();, +		}, +	}, +, +	@Test, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +import java.sql.Connection;, +import java.sql.SQLException;, +, +import org.springframework.dao.DataAccessResourceFailureException;, +			try {, +				Connection connection = this.dataSource.getConnection();, +				try {, +					this.databasePopulator.populate(connection);, +				}, +				finally {, +					try {, +						connection.close();, +					}, +					catch (SQLException ex) {, +						// ignore, +					}, +				}, +			}, +			catch (SQLException ex) {, +				throw new DataAccessResourceFailureException("Failed to populate database", ex);, +			}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTest.java, +	public void testCreateEmbeddedDatabaseAgain() throws Exception {, +		// If Derby isn't cleaned up properly this will fail..., +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +				"org/springframework/jdbc/config/jdbc-config.xml");, +		try {, +			assertCorrectSetup(context.getBean("derbyDataSource", DataSource.class));, +		} finally {, +			context.close();, +		}, +	}, +, +	@Test, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +import java.sql.Connection;, +import java.sql.SQLException;, +, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {]