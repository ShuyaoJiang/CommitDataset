[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, + * Copyright 2002-2014 the original author or authors., +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.junit.Test;, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, + * @author Sam Brannen, +@SuppressWarnings("resource"), +	public void viaContextRegistration_WithComposedAnnotation() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ComposedAnnotationConfig.class);, +		ctx.refresh();, +		ctx.getBean(ComposedAnnotationConfig.class);, +		ctx.getBean(SimpleComponent.class);, +		assertThat("config class bean not found",, +			ctx.containsBeanDefinition("componentScanAnnotationIntegrationTests.ComposedAnnotationConfig"), is(true));, +		assertThat("@ComponentScan annotated @Configuration class registered directly against ", +				+ "AnnotationConfigApplicationContext did not trigger component scanning as expected",, +			ctx.containsBean("simpleComponent"), is(true));, +	}, +, +	@Test, +, +	@Configuration, +	@ComponentScan, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface ComposedConfiguration {, +, +		String[] basePackages() default {};, +, +		String[] bundles() default {};, +	}, +, +	@ComposedConfiguration(basePackages = "org.springframework.context.annotation.componentscan.simple"), +	public static class ComposedAnnotationConfig {, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, + * Copyright 2002-2014 the original author or authors., +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.junit.Test;, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, + * @author Sam Brannen, +@SuppressWarnings("resource"), +	public void viaContextRegistration_WithComposedAnnotation() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ComposedAnnotationConfig.class);, +		ctx.refresh();, +		ctx.getBean(ComposedAnnotationConfig.class);, +		ctx.getBean(SimpleComponent.class);, +		assertThat("config class bean not found",, +			ctx.containsBeanDefinition("componentScanAnnotationIntegrationTests.ComposedAnnotationConfig"), is(true));, +		assertThat("@ComponentScan annotated @Configuration class registered directly against ", +				+ "AnnotationConfigApplicationContext did not trigger component scanning as expected",, +			ctx.containsBean("simpleComponent"), is(true));, +	}, +, +	@Test, +, +	@Configuration, +	@ComponentScan, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface ComposedConfiguration {, +, +		String[] basePackages() default {};, +, +		String[] bundles() default {};, +	}, +, +	@ComposedConfiguration(basePackages = "org.springframework.context.annotation.componentscan.simple"), +	public static class ComposedAnnotationConfig {, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, +import org.springframework.core.env.StandardEnvironment;, +	public void postProcessorWorksWithComposedAnnotations() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ComposedAnnotationConfig.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	@Test, +	@Configuration, +	@ComponentScan]