[+++ b/spring-framework-reference/src/expressions.xml, +    <para><programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +    and its sub package and <package>spel.support</package>.</para>, +    <para>The interface <interfacename>ExpressionParser</interfacename> is, +    responsible for parsing an expression string. In this example the, +    expression string is a string literal denoted by the surrounding single, +    quotes. The interface <interfacename>Expression</interfacename> is, +    responsible for evaluating the previously defined expression string. There, +    are two exceptions that can be thrown,, +    <classname>ParseException</classname> and, +    <programlisting lang="" language="java">ExpressionParser parser = new SpelExpressionParser();, +    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +ExpressionParser parser = new SpelExpressionParser();, +      <methodname>setRootObject</methodname> or passing the root object into, +      the constructor. . You can also specify variables and functions that, +      will be used in the expression using the methods, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +StandardEvaluationContext teslaContext = new StandardEvaluationContext(tesla);, +StandardEvaluationContext societyContext = new StandardEvaluationContext(ieee);, +StandardEvaluationContext inventorContext = new StandardEvaluationContext(inventor);, +StandardEvaluationContext context = new StandardEvaluationContext(tesla);, +ExpressionParser parser = new SpelExpressionParser();, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +, +      <para>Also see the next section on the Elvis operator for an even, +      shorter syntax for the ternary operator</para>, +    </section>, +, +    <section>, +      <title>The Elvis Operator</title>, +, +      <para>The Elvis operator is a shortening of the ternary operator syntax, +      and is used in the <ulink, +      url="http://groovy.codehaus.org/Operators#Operators-ElvisOperator(%3F%3A)">Groovy</ulink>, +      language. The ternary operator syntax you usually have to repeat a, +      variable twice, for example</para>, +, +      <programlisting>String name = "Elvis Presley";, +String displayName = name != null ? name : "Unknown";</programlisting>, +, +      <para>Instead you can use the Elvis operator, named for the resemblance, +      to Elvis' hair style. </para>, +, +      <programlisting>ExpressionParser parser = new SpelExpressionParser();, +, +String name = parser.parseExpression("null?:'Unknown'").getValue(String.class);, +, +System.out.println(name);  // 'Unknown', +, +</programlisting>, +, +      <para>Here is a more complex example </para>, +, +      <programlisting>ExpressionParser parser = new SpelExpressionParser();, +, +Inventor tesla = new Inventor("Nikola Tesla", "Serbian");, +StandardEvaluationContext context = new StandardEvaluationContext(tesla);, +, +String name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);, +, +System.out.println(name); // Mike Tesla, +, +tesla.setName(null);, +, +name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);, +, +System.out.println(name); // Elvis Presley</programlisting>, +    </section>, +, +    <section>, +      <title>Safe Navigation operator</title>, +, +      <para>The Safe Navigation operator is used to avoid a, +      <literal>NullPointerException</literal> and comes from the <ulink, +      url="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator(%3F.)">Groovy</ulink>, +      language. Typically when you have a reference to an object you might, +      need to verify that it is not null before accessing methods or, +      properties of the object. To avoid this, the safe navigation operator, +      will simply return null instead of throwing an exception.</para>, +, +      <programlisting>ExpressionParser parser = new SpelExpressionParser();, +, +Inventor tesla = new Inventor("Nikola Tesla", "Serbian");, +tesla.setPlaceOfBirth(new PlaceOfBirth("Smiljan"));, +, +StandardEvaluationContext context = new StandardEvaluationContext(tesla);, +, +String city = parser.parseExpression("PlaceOfBirth?.City").getValue(context, String.class);, +System.out.println(city); // Smiljan, +, +tesla.setPlaceOfBirth(null);, +, +city = parser.parseExpression("PlaceOfBirth?.City").getValue(context, String.class);, +, +System.out.println(city); // null - does not throw NullPointerException!!!</programlisting>]