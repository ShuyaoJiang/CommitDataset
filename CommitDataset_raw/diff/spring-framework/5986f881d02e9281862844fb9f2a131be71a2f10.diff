[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	private HandlerMethod resolvedFromHandlerMethod;, +	 * Return the bean for this handler method., +	 * Return the method for this handler method., +	 * Return the method parameters for this handler method., +	 * Return {@code true} if the method return type is void, {@code false} otherwise., +	 * Return a single annotation on the underlying method traversing its super methods, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 * @since 4.3, +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	private HandlerMethod resolvedFromHandlerMethod;, +	 * Return the bean for this handler method., +	 * Return the method for this handler method., +	 * Return the method parameters for this handler method., +	 * Return {@code true} if the method return type is void, {@code false} otherwise., +	 * Return a single annotation on the underlying method traversing its super methods, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 * @since 4.3, +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	private HttpStatus responseStatus;, +, +	private String responseStatusReason;, +, +	private HandlerMethod resolvedFromHandlerMethod;, +		evaluateResponseStatus();, +		evaluateResponseStatus();, +		evaluateResponseStatus();, +		this.responseStatus = handlerMethod.responseStatus;, +		this.responseStatusReason = handlerMethod.responseStatusReason;, +		this.responseStatus = handlerMethod.responseStatus;, +		this.responseStatusReason = handlerMethod.responseStatusReason;, +	private void evaluateResponseStatus() {, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +		if (annotation != null) {, +			this.responseStatus = annotation.code();, +			this.responseStatusReason = annotation.reason();, +		}, +	}, +, +, +	 * Return the bean for this handler method., +	 * Return the method for this handler method., +	 * Return the method parameters for this handler method., +	 * Return the specified response status, if any., +	 * @since 4.3.8, +	 * @see ResponseStatus#code(), +	protected HttpStatus getResponseStatus() {, +		return this.responseStatus;, +	}, +, +	/**, +	 * Return the associated response status reason, if any., +	 * @since 4.3.8, +	 * @see ResponseStatus#reason(), +	 */, +	protected String getResponseStatusReason() {, +		return this.responseStatusReason;, +	 * Return {@code true} if the method return type is void, {@code false} otherwise., +	 * Return a single annotation on the underlying method traversing its super methods, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	private HandlerMethod resolvedFromHandlerMethod;, +	 * Return the bean for this handler method., +	 * Return the method for this handler method., +	 * Return the method parameters for this handler method., +	 * Return {@code true} if the method return type is void, {@code false} otherwise., +	 * Return a single annotation on the underlying method traversing its super methods, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 * @since 4.3, +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}]