[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +import org.springframework.util.StringUtils;, +	@Nullable, +	 * Configure the name of a header that a subscription message can have for, +	 * the purpose of filtering messages matched to the subscription. The header, +	 * value is expected to be a Spring EL boolean expression to be applied to, +	 * the headers of messages matched to the subscription., +	 * <p>For example:, +	 * <p>By default this is set to "selector". You can set it to a different, +	 * name, or to {@code null} to turn off support for a selector header., +	 * @param selectorHeaderName the name to use for a selector header, +	public void setSelectorHeaderName(@Nullable String selectorHeaderName) {, +		this.selectorHeaderName = StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null;, +	 * Return the name for the selector header name., +	@Nullable, +		Expression expression = getSelectorExpression(message.getHeaders());, +		this.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);, +		this.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);, +	}, +, +	@Nullable, +	private Expression getSelectorExpression(MessageHeaders headers) {, +		if (getSelectorHeaderName() != null) {, +		}, +		return expression;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +import org.springframework.util.StringUtils;, +	@Nullable, +	 * Configure the name of a header that a subscription message can have for, +	 * the purpose of filtering messages matched to the subscription. The header, +	 * value is expected to be a Spring EL boolean expression to be applied to, +	 * the headers of messages matched to the subscription., +	 * <p>For example:, +	 * <p>By default this is set to "selector". You can set it to a different, +	 * name, or to {@code null} to turn off support for a selector header., +	 * @param selectorHeaderName the name to use for a selector header, +	public void setSelectorHeaderName(@Nullable String selectorHeaderName) {, +		this.selectorHeaderName = StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null;, +	 * Return the name for the selector header name., +	@Nullable, +		Expression expression = getSelectorExpression(message.getHeaders());, +		this.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);, +		this.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);, +	}, +, +	@Nullable, +	private Expression getSelectorExpression(MessageHeaders headers) {, +		if (getSelectorHeaderName() != null) {, +		}, +		return expression;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +	private String selectorHeaderName = "selector";, +, +	@Nullable, +	private MessageHeaderInitializer headerInitializer;, +, +, +	private SubscriptionRegistry subscriptionRegistry;, +, +	private final Map<String, SessionInfo> sessions = new ConcurrentHashMap<>();, +	private ScheduledFuture<?> heartbeatFuture;, +		initSelectorHeaderNameToUse();, +	 * Configure the name of a header that a subscription message can have for, +	 * the purpose of filtering messages matched to the subscription. The header, +	 * value is expected to be a Spring EL boolean expression to be applied to, +	 * the headers of messages matched to the subscription., +	 * <p>For example:, +	 * <pre>, +	 * headers.foo == 'bar', +	 * </pre>, +	 * <p>By default this is set to "selector". You can set it to a different, +	 * name, or to {@code null} to turn off support for a selector header., +	 * @param selectorHeaderName the name to use for a selector header, +	 * @since 4.3.17, +	 * @see #setSubscriptionRegistry, +	 * @see DefaultSubscriptionRegistry#setSelectorHeaderName(String), +	 */, +	public void setSelectorHeaderName(@Nullable String selectorHeaderName) {, +		this.selectorHeaderName = selectorHeaderName;, +		initSelectorHeaderNameToUse();, +	}, +, +	private void initSelectorHeaderNameToUse() {, +		if (this.subscriptionRegistry instanceof DefaultSubscriptionRegistry) {, +			((DefaultSubscriptionRegistry) this.subscriptionRegistry).setSelectorHeaderName(this.selectorHeaderName);, +		}, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +import org.springframework.util.StringUtils;, +	@Nullable, +	 * Configure the name of a header that a subscription message can have for, +	 * the purpose of filtering messages matched to the subscription. The header, +	 * value is expected to be a Spring EL boolean expression to be applied to, +	 * the headers of messages matched to the subscription., +	 * <p>For example:, +	 * <p>By default this is set to "selector". You can set it to a different, +	 * name, or to {@code null} to turn off support for a selector header., +	 * @param selectorHeaderName the name to use for a selector header]