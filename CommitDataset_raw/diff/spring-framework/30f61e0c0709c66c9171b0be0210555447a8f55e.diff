[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.Assert;, +		public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {, +		public RequestHeadersSpec<?> body(Object body) {, +			Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by " +, +					"using body(Publisher, Class)");, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.Assert;, +		public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {, +		public RequestHeadersSpec<?> body(Object body) {, +			Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by " +, +					"using body(Publisher, Class)");, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <P> the type of the {@code Publisher}, +		<T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass);, +		RequestHeadersSpec<?> body(Object body);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.Assert;, +		public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {, +		public RequestHeadersSpec<?> body(Object body) {, +			Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by " +, +					"using body(Publisher, Class)");, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <P> the type of the {@code Publisher}, +		<T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass);, +		RequestHeadersSpec<?> body(Object body);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +	public Mono<ServerResponse> body(Object body) {, +		Assert.notNull(body, "'body' must not be null");, +		Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by using " +, +				"body(Publisher, Class)");, +, +		return new DefaultEntityResponseBuilder<>(body,, +				BodyInserters.fromObject(body)), +				.headers(this.headers), +				.status(this.statusCode), +				.build(), +				.map(entityResponse -> entityResponse);, +	}, +, +	@Override, +	public Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> inserter) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.Assert;, +		public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {, +		public RequestHeadersSpec<?> body(Object body) {, +			Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by " +, +					"using body(Publisher, Class)");, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <P> the type of the {@code Publisher}, +		<T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass);, +		RequestHeadersSpec<?> body(Object body);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +	public Mono<ServerResponse> body(Object body) {, +		Assert.notNull(body, "'body' must not be null");, +		Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by using " +, +				"body(Publisher, Class)");, +, +		return new DefaultEntityResponseBuilder<>(body,, +				BodyInserters.fromObject(body)), +				.headers(this.headers), +				.status(this.statusCode), +				.build(), +				.map(entityResponse -> entityResponse);, +	}, +, +	@Override, +	public Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> inserter) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerResponse.java, +		 * @return the built response, +		 * Set the body of the response to the given {@code Object} and return it., +		 * This convenience method combines {@link #body(BodyInserter)} and, +		 * {@link BodyInserters#fromObject(Object)}., +		 * @param body the body of the response, +		 * @return the built response, +		 * @throws IllegalArgumentException if {@code body} is a {@link Publisher}, for which, +		 * {@link #body(Publisher, Class)} should be used., +		 */, +		Mono<ServerResponse> body(Object body);, +, +		/**, +		Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> inserter);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.Assert;, +		public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {, +		public RequestHeadersSpec<?> body(Object body) {, +			Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by " +, +					"using body(Publisher, Class)");]