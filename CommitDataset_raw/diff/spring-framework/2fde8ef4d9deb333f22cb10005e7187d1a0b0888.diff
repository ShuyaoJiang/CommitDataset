[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/URIEditor.java, + * Copyright 2002-2009 the original author or authors., +	 * @throws java.net.URISyntaxException if URI conversion failed, +		int idx = value.indexOf(':');, +		if (idx != -1) {, +			String scheme = value.substring(0, idx);, +			String ssp = value.substring(idx + 1);, +			return new URI(scheme, ssp, null);, +		}, +		else {, +			// value contains no scheme, fallback to default, +			return new URI(value);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/URIEditor.java, + * Copyright 2002-2009 the original author or authors., +	 * @throws java.net.URISyntaxException if URI conversion failed, +		int idx = value.indexOf(':');, +		if (idx != -1) {, +			String scheme = value.substring(0, idx);, +			String ssp = value.substring(idx + 1);, +			return new URI(scheme, ssp, null);, +		}, +		else {, +			// value contains no scheme, fallback to default, +			return new URI(value);, +		}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/propertyeditors/URIEditorTests.java, + * Copyright 2002-2009 the original author or authors., +import static org.junit.Assert.*;, +import org.junit.Test;, + * @author Arjen Poutsma, +public class URIEditorTests {, +	@Test, +	public void standardURI() throws Exception {, +	@Test, +	public void standardURL() throws Exception {, +	@Test, +	public void standardURLWithWhitespace() throws Exception {, +	@Test, +	public void classpathURL() throws Exception {, +	@Test, +	public void classpathURLWithWhitespace() throws Exception {, +	@Test, +	public void classpathURLAsIs() throws Exception {, +	@Test, +	public void withNonExistentResource() throws Exception {, +	@Test, +	public void setAsTextWithNull() throws Exception {, +	@Test, +	public void getAsTextReturnsEmptyStringIfValueNotSet() throws Exception {, +	@Test, +	public void encodeURI() throws Exception {, +		PropertyEditor uriEditor = new URIEditor();, +		uriEditor.setAsText("http://example.com/spaces and \u20AC");, +		Object value = uriEditor.getValue();, +		assertTrue(value instanceof URI);, +		URI uri = (URI) value;, +		assertEquals(uri.toString(), uriEditor.getAsText());, +		assertEquals("http://example.com/spaces%20and%20%E2%82%AC", uri.toASCIIString());, +	}, +]