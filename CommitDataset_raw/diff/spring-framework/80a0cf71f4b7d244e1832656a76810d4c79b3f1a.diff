[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +import java.text.DateFormat;, +	public long getDateHeader(String name) {, +		String headerValue = getHeader(name);, +		if (headerValue == null) {, +			return -1;, +		}, +		try {, +			return newDateFormat().parse(getHeader(name)).getTime();, +		}, +		catch (ParseException ex) {, +			throw new IllegalArgumentException(, +					"Value for header '" + name + "' is not a valid Date: " + headerValue);, +		}, +	}, +, +		return newDateFormat().format(new Date(date));, +	}, +, +	private DateFormat newDateFormat() {, +		return dateFormat;, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +import java.text.DateFormat;, +	public long getDateHeader(String name) {, +		String headerValue = getHeader(name);, +		if (headerValue == null) {, +			return -1;, +		}, +		try {, +			return newDateFormat().parse(getHeader(name)).getTime();, +		}, +		catch (ParseException ex) {, +			throw new IllegalArgumentException(, +					"Value for header '" + name + "' is not a valid Date: " + headerValue);, +		}, +	}, +, +		return newDateFormat().format(new Date(date));, +	}, +, +	private DateFormat newDateFormat() {, +		return dateFormat;, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, +	@Test  // SPR-16160, +	public void getNonExistentDateHeader() {, +		assertNull(response.getHeader("Last-Modified"));, +		assertEquals(-1, response.getDateHeader("Last-Modified"));, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +import java.text.DateFormat;, +	public long getDateHeader(String name) {, +		String headerValue = getHeader(name);, +		if (headerValue == null) {, +			return -1;, +		}, +		try {, +			return newDateFormat().parse(getHeader(name)).getTime();, +		}, +		catch (ParseException ex) {, +			throw new IllegalArgumentException(, +					"Value for header '" + name + "' is not a valid Date: " + headerValue);, +		}, +	}, +, +		return newDateFormat().format(new Date(date));, +	}, +, +	private DateFormat newDateFormat() {, +		return dateFormat;, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, +	@Test  // SPR-16160, +	public void getNonExistentDateHeader() {, +		assertNull(response.getHeader("Last-Modified"));, +		assertEquals(-1, response.getDateHeader("Last-Modified"));, +	}, +, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.text.DateFormat;, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static final TimeZone GMT = TimeZone.getTimeZone("GMT");, +		this.locale = Locale.getDefault();, +	public long getDateHeader(String name) {, +		String headerValue = getHeader(name);, +		if (headerValue == null) {, +			return -1;, +		}, +		try {, +			return newDateFormat().parse(getHeader(name)).getTime();, +		}, +		catch (ParseException ex) {, +			throw new IllegalArgumentException(, +					"Value for header '" + name + "' is not a valid Date: " + headerValue);, +		}, +	}]