[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/GzipResourceResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, + * Unit tests for {@link GzipResourceResolver}., + * @author Rossen Stoyanchev, +, +		createGzFile("/js/foo.js");, +		createGzFile("foo-e36d2e05253c6c7085a91522ce43a0b4.css");, +	}, +, +	private static void createGzFile(String filePath) throws IOException {, +		Resource fileResource = new FileSystemResource(location.createRelative(filePath).getFile());, +		Resource gzFileResource = location.createRelative(filePath + ".gz");, +		if (gzFileResource.getFile().createNewFile()) {, +			GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(gzFileResource.getFile()));, +			FileCopyUtils.copy(fileResource.getInputStream(), out);, +		assertTrue(gzFileResource.exists());, +		this.resolver = new DefaultResourceResolverChain(resolvers);, +, +		this.locations = new ArrayList<>();, +		this.locations.add(new ClassPathResource("test/", getClass()));, +		this.locations.add(new ClassPathResource("testalternatepath/", getClass()));, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		// resolved resource is now cached in CachingResourceResolver, +, +		resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resource = new ClassPathResource("test/"+file, getClass());, +	@Test // SPR-13149, +		Resource resolved = this.resolver.resolveResource(null, file, this.locations);, +, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/GzipResourceResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, + * Unit tests for {@link GzipResourceResolver}., + * @author Rossen Stoyanchev, +, +		createGzFile("/js/foo.js");, +		createGzFile("foo-e36d2e05253c6c7085a91522ce43a0b4.css");, +	}, +, +	private static void createGzFile(String filePath) throws IOException {, +		Resource fileResource = new FileSystemResource(location.createRelative(filePath).getFile());, +		Resource gzFileResource = location.createRelative(filePath + ".gz");, +		if (gzFileResource.getFile().createNewFile()) {, +			GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(gzFileResource.getFile()));, +			FileCopyUtils.copy(fileResource.getInputStream(), out);, +		assertTrue(gzFileResource.exists());, +		this.resolver = new DefaultResourceResolverChain(resolvers);, +, +		this.locations = new ArrayList<>();, +		this.locations.add(new ClassPathResource("test/", getClass()));, +		this.locations.add(new ClassPathResource("testalternatepath/", getClass()));, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		// resolved resource is now cached in CachingResourceResolver, +, +		resolved = this.resolver.resolveResource(request, file, this.locations);, +, +		Resource resource = new ClassPathResource("test/"+file, getClass());, +	@Test // SPR-13149, +		Resource resolved = this.resolver.resolveResource(null, file, this.locations);, +, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java, +import static org.junit.Assert.assertEquals;, +	private ResourceUrlProvider createResourceUrlProvider(List<ResourceResolver> resolvers) {, +		handler.setLocations(Collections.singletonList(new ClassPathResource("test/", getClass())));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/GzipResourceResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, + * Unit tests for {@link GzipResourceResolver}., + * @author Rossen Stoyanchev, +, +		createGzFile("/js/foo.js");, +		createGzFile("foo-e36d2e05253c6c7085a91522ce43a0b4.css");, +	}, +, +	private static void createGzFile(String filePath) throws IOException {, +		Resource fileResource = new FileSystemResource(location.createRelative(filePath).getFile());, +		Resource gzFileResource = location.createRelative(filePath + ".gz");, +		if (gzFileResource.getFile().createNewFile()) {, +			GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(gzFileResource.getFile()));, +			FileCopyUtils.copy(fileResource.getInputStream(), out);, +		assertTrue(gzFileResource.exists());]