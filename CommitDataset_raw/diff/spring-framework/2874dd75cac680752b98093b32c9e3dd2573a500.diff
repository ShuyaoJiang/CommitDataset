[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	/**, +	 * Special logger for tracing Reactive Streams signals., +	 * <p>This logger is not exposed under "org.springframework" because it is, +	 * verbose. To enable this, and other related Reactive Streams loggers in, +	 * this package, set "spring-web.reactivestreams" to TRACE., +	 */, +	protected static Log rsReadLogger = LogFactory.getLog("spring-web.reactivestreams.ReadPublisher");, +, +		rsReadLogger.trace(getLogPrefix() + "onDataAvailable");, +		rsReadLogger.trace(getLogPrefix() + "onAllDataRead");, +		if (rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex);, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "Publishing data read");, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "No more data to read");, +		if (result && rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + oldState + " -> " + newState);, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + n + " requested");, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + "Cancellation");, +						rsReadLogger.trace(logPrefix + "Completed before demand");, +						if (rsReadLogger.isTraceEnabled()) {, +							rsReadLogger.trace(logPrefix + "Completed with error before demand: " + ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	/**, +	 * Special logger for tracing Reactive Streams signals., +	 * <p>This logger is not exposed under "org.springframework" because it is, +	 * verbose. To enable this, and other related Reactive Streams loggers in, +	 * this package, set "spring-web.reactivestreams" to TRACE., +	 */, +	protected static Log rsReadLogger = LogFactory.getLog("spring-web.reactivestreams.ReadPublisher");, +, +		rsReadLogger.trace(getLogPrefix() + "onDataAvailable");, +		rsReadLogger.trace(getLogPrefix() + "onAllDataRead");, +		if (rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex);, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "Publishing data read");, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "No more data to read");, +		if (result && rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + oldState + " -> " + newState);, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + n + " requested");, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + "Cancellation");, +						rsReadLogger.trace(logPrefix + "Completed before demand");, +						if (rsReadLogger.isTraceEnabled()) {, +							rsReadLogger.trace(logPrefix + "Completed with error before demand: " + ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	/**, +	 * Special logger for tracing Reactive Streams signals., +	 * <p>This logger is not exposed under "org.springframework" because it is, +	 * verbose. To enable this, and other related Reactive Streams loggers in, +	 * this package, set "spring-web.reactivestreams" to TRACE., +	 */, +	protected static final Log rsWriteFlushLogger =, +			LogFactory.getLog("spring-web.reactivestreams.WriteFlushProcessor");, +, +		if (rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + "Received onNext publisher");, +		if (rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + "Received onError: " + ex);, +		if (rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + "Received onComplete");, +		if (rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + "Received request to cancel");, +		if (result && rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + oldState + " -> " + newState);, +		if (rsWriteFlushLogger.isTraceEnabled()) {, +			rsWriteFlushLogger.trace(getLogPrefix() + "isWritePossible[" + result + "]");, +				if (rsWriteFlushLogger.isTraceEnabled()) {, +					rsWriteFlushLogger.trace(this.processor.getLogPrefix() + this.processor.state + " writeComplete");, +				this.processor.state.get().writeComplete(this.processor);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	/**, +	 * Special logger for tracing Reactive Streams signals., +	 * <p>This logger is not exposed under "org.springframework" because it is, +	 * verbose. To enable this, and other related Reactive Streams loggers in, +	 * this package, set "spring-web.reactivestreams" to TRACE., +	 */, +	protected static Log rsReadLogger = LogFactory.getLog("spring-web.reactivestreams.ReadPublisher");, +, +		rsReadLogger.trace(getLogPrefix() + "onDataAvailable");, +		rsReadLogger.trace(getLogPrefix() + "onAllDataRead");, +		if (rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex);, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "Publishing data read");, +				if (rsReadLogger.isTraceEnabled()) {, +					rsReadLogger.trace(getLogPrefix() + "No more data to read");, +		if (result && rsReadLogger.isTraceEnabled()) {, +			rsReadLogger.trace(getLogPrefix() + oldState + " -> " + newState);, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + n + " requested");, +			if (rsReadLogger.isTraceEnabled()) {, +				rsReadLogger.trace(getLogPrefix() + "Cancellation");]