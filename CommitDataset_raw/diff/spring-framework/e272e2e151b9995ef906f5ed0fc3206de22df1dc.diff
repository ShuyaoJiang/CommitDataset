[+++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * Get the {@link TestContext} associated with this event., +	 * @see #getTestContext(), +	public final TestContext getSource() {, +	/**, +	 * Alias for {@link #getSource()}., +	 * <p>This method may be favored over {@code getSource()} to improve readability, +	 * in SpEL expressions for event processing, +	 * {@linkplain org.springframework.context.event.EventListener#condition conditions}., +	 * @return the {@code TestContext} associated with this event (never {@code null}), +	 * @see #getSource(), +	 */, +	public final TestContext getTestContext() {, +		return getSource();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * Get the {@link TestContext} associated with this event., +	 * @see #getTestContext(), +	public final TestContext getSource() {, +	/**, +	 * Alias for {@link #getSource()}., +	 * <p>This method may be favored over {@code getSource()} to improve readability, +	 * in SpEL expressions for event processing, +	 * {@linkplain org.springframework.context.event.EventListener#condition conditions}., +	 * @return the {@code TestContext} associated with this event (never {@code null}), +	 * @see #getSource(), +	 */, +	public final TestContext getTestContext() {, +		return getSource();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/annotation/AfterTestClass.java, +import org.springframework.core.annotation.AliasFor;, + * <p>Event processing can optionally be made {@linkplain #value conditional} via, + * a SpEL expression &mdash; for example,, + * {@code @AfterTestClass("event.testContext.testClass.name matches '.+IntegrationTests'")}., + *, + * @author Sam Brannen, +@Documented, +, +	/**, +	 * Alias for {@link EventListener#condition}., +	 */, +	@AliasFor(annotation = EventListener.class, attribute = "condition"), +	String value() default "";, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * Get the {@link TestContext} associated with this event., +	 * @see #getTestContext(), +	public final TestContext getSource() {, +	/**, +	 * Alias for {@link #getSource()}., +	 * <p>This method may be favored over {@code getSource()} to improve readability, +	 * in SpEL expressions for event processing, +	 * {@linkplain org.springframework.context.event.EventListener#condition conditions}., +	 * @return the {@code TestContext} associated with this event (never {@code null}), +	 * @see #getSource(), +	 */, +	public final TestContext getTestContext() {, +		return getSource();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/annotation/AfterTestClass.java, +import org.springframework.core.annotation.AliasFor;, + * <p>Event processing can optionally be made {@linkplain #value conditional} via, + * a SpEL expression &mdash; for example,, + * {@code @AfterTestClass("event.testContext.testClass.name matches '.+IntegrationTests'")}., + *, + * @author Sam Brannen, +@Documented, +, +	/**, +	 * Alias for {@link EventListener#condition}., +	 */, +	@AliasFor(annotation = EventListener.class, attribute = "condition"), +	String value() default "";, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/annotation/AfterTestExecution.java, +import org.springframework.core.annotation.AliasFor;, + * <p>Event processing can optionally be made {@linkplain #value conditional} via, + * a SpEL expression &mdash; for example,, + * {@code @AfterTestExecution("event.testContext.testMethod.name matches 'test.*'")}., + *, + * @author Sam Brannen, +@Documented, +, +	/**, +	 * Alias for {@link EventListener#condition}., +	 */, +	@AliasFor(annotation = EventListener.class, attribute = "condition"), +	String value() default "";, +, +++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * Get the {@link TestContext} associated with this event., +	 * @see #getTestContext(), +	public final TestContext getSource() {, +	/**, +	 * Alias for {@link #getSource()}., +	 * <p>This method may be favored over {@code getSource()} to improve readability]