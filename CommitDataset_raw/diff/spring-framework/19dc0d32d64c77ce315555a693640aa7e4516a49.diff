[+++ b/spring-framework-reference/src/mvc.xml, +    <title>Introduction to Spring Web MVC framework</title>, +    <para>The Spring Web model-view-controller (MVC) framework is designed, +    around a <classname>DispatcherServlet</classname> that dispatches requests, +    to handlers, with configurable handler mappings, view resolution, locale, +    and theme resolution as well as support for uploading files. The default, +    you to create RESTful Web sites and applications, through the, +      <para>A key design principle in Spring Web MVC and in Spring in general, +      is the <quote><emphasis>Open for extension, closed for, +      modification</emphasis></quote> principle.</para>, +      <para>Some methods in the core classes of Spring Web MVC are marked, +      <literal>final</literal>. As a developer you cannot override these, +      methods to supply your own behavior. This has not been done arbitrarily, but, +	  specifically with this principal in mind.</para>, +      <para>For an explanation of this principle, refer to <emphasis>Expert, +      Spring Web MVC and Web Flow</emphasis> by Seth Ladd and others;, +      specifically see the section "A Look At Design," on page 117 of the, +      first edition. Alternatively, see</para>, +      <para>You cannot add advice to final methods when you use Spring MVC., +      For example, you cannot add advice to the, +    <para>In Spring Web MVC you can use any object as a command or, +    form-backing object; you do not need to implement a framework-specific, +    evaluated by the application, not as system errors. Thus you need not, +    duplicate your business objects' properties as simple, untyped strings in, +    your form objects simply to handle invalid submissions, or to convert the, +    Strings properly. Instead, it is often preferable to bind directly to your, +    business objects.</para>, +    directly to the response stream. Typically, a, +    corresponding objects such as a command or form, which contain reference, +    data. View name resolution is highly configurable, through bean names, a, +    properties file, or your own <interfacename>ViewResolver</interfacename>, +    implementation. The model (the M in MVC) is based on the, +    <interfacename>Map</interfacename> interface, which allows for the, +    complete abstraction of the view technology. You can integrate directly, +    JSP, Velocity, or any other rendering technology. The model, +    <interfacename>Map</interfacename> is simply transformed into an, +      <title>Features of Spring Web MVC<!--I moved Features of Spring Web MVC before Pluggability of other MVC implementations. You want to highlight your own imp. first.--></title>, +, +      <!--Second line of sidebar refers to JSF; don't you mean JSP? Other refs in this context are to JSP. Also note, sidebar is read-only.-->, +      <para>Spring's web module includes many unique web support, +      features:</para>, +          <para><emphasis>Clear separation of roles</emphasis>. Each role --, +          controller, validator, command object, form object, model object,, +          resolver, and so on -- can be fulfilled by a specialized, +          <para><emphasis>Powerful and straightforward configuration of both, +          framework and application classes as JavaBeans</emphasis>. This, +          configuration capability includes easy referencing across contexts,, +          such as from web controllers to business objects and, +          validators.</para>, +          <para><emphasis>Adaptability, non-intrusiveness, and, +          flexibility.</emphasis> Define any controller method signature you, +          need, possibly using one of the parameter annotations (such as, +          @RequestParam, @RequestHeader, @PathVariable, and more) for a given, +          scenario.</para>, +          <para><emphasis>Reusable business code</emphasis>,<emphasis> no need, +          for duplication</emphasis>. Use existing business objects as command, +          or form objects instead of mirroring them to extend a particular, +          framework base class.</para>, +          <para><emphasis>Customizable binding and validation</emphasis>. Type, +          mismatches as application-level validation errors that keep the, +          offending value, localized date and number binding, and so on, +          instead of String-only form objects with manual parsing and, +          conversion to business objects.</para>, +          <para><emphasis>Customizable handler mapping and view, +          resolution</emphasis>. Handler mapping and view resolution, +          strategies range from simple URL-based configuration, to, +          sophisticated, purpose-built resolution strategies. Spring is more, +          flexible than web MVC frameworks that mandate a particular, +          technique.</para>, +          <para><emphasis>Flexible model transfer</emphasis>. Model transfer, +          with a name/value <interfacename>Map</interfacename> supports easy, +          integration with any view technology.</para>, +          <para><emphasis>Customizable locale and theme resolution, support, +          for JSPs with or without Spring tag library, support for JSTL,, +          support for Velocity without the need for extra bridges, and so, +          on.</emphasis></para>, +          <para><emphasis>A simple yet powerful JSP tag library known as the, +          Spring tag library that provides support for features such as data, +          binding and themes</emphasis>. The custom tags allow for maximum, +          flexibility in terms of markup code. For information on the tag, +          linkend="spring.tld" /></para>, +          <para><emphasis>A JSP form tag library, introduced in Spring 2.0,, +          that makes writing forms in JSP pages much easier.</emphasis>  For, +          information on the tag library descriptor, see the appendix entitled, +          <xref linkend="spring-form.tld" /></para>, +        </listitem>, +, +        <listitem>, +          <para><emphasis>Beans whose lifecycle is scoped to the current HTTP, +          request or HTTP <interfacename>Session</interfacename>.</emphasis>, +          This is not a specific feature of Spring MVC itself, but rather of, +          the <interfacename>WebApplicationContext</interfacename>, +          container(s) that Spring MVC uses. These bean scopes are described, +          in <xref linkend="beans-factory-scopes-other" /></para>, +, +    <section id="mvc-introduction-pluggability">, +      <title>Pluggability of other MVC implementations</title>, +, +      <para>Non-Spring MVC implementations are preferable for some projects., +      Many teams expect to leverage their existing investment in skills and]