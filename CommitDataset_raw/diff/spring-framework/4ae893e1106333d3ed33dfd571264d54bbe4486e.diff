[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +	 * @see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName, +	 * <p>If no explicit {@link #setMappingResources mapping resources} have been, +	 * specified in addition to these packages, Spring's setup looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * @see DefaultPersistenceUnitManager#setPackagesToScan, +	 * <p>If no explicit mapping resources have been specified next to, +	 * {@link #setPackagesToScan packages to scan}, Spring's setup looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * <p>Note that specifying an empty array/list here suppresses the default, +	 * {@code META-INF/orm.xml} check. On the other hand, explicitly specifying, +	 * {@code META-INF/orm.xml} here will register that file even if it happens, +	 * to be co-located with a {@code persistence.xml} file., +	 * @see DefaultPersistenceUnitManager#setMappingResources, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +	 * @see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName, +	 * <p>If no explicit {@link #setMappingResources mapping resources} have been, +	 * specified in addition to these packages, Spring's setup looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * @see DefaultPersistenceUnitManager#setPackagesToScan, +	 * <p>If no explicit mapping resources have been specified next to, +	 * {@link #setPackagesToScan packages to scan}, Spring's setup looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * <p>Note that specifying an empty array/list here suppresses the default, +	 * {@code META-INF/orm.xml} check. On the other hand, explicitly specifying, +	 * {@code META-INF/orm.xml} here will register that file even if it happens, +	 * to be co-located with a {@code persistence.xml} file., +	 * @see DefaultPersistenceUnitManager#setMappingResources, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2014 the original author or authors., +	private static final String ENTITY_CLASS_RESOURCE_PATTERN = "/**/*.class";, +, +	private static final String DEFAULT_ORM_XML_RESOURCE = "META-INF/orm.xml";, +, +	private static final String PERSISTENCE_XML_FILENAME = "persistence.xml";, +, +	public final static String DEFAULT_PERSISTENCE_XML_LOCATION = "classpath*:META-INF/" + PERSISTENCE_XML_FILENAME;, +	 * <p>Such package scanning defines a "default persistence unit" in Spring, which, +	 * may live next to regularly defined units originating from {@code persistence.xml}., +	 * Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,, +	 * it's simply "default"., +	 * <p>If no explicit {@link #setMappingResources mapping resources} have been, +	 * specified in addition to these packages, this manager looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * @see #setDefaultPersistenceUnitName, +	 * @see #setMappingResources, +	 * <p>If no explicit mapping resources have been specified next to, +	 * {@link #setPackagesToScan packages to scan}, this manager looks for a default, +	 * {@code META-INF/orm.xml} file in the classpath, registering it as a mapping, +	 * resource for the default unit if the mapping file is not co-located with a, +	 * {@code persistence.xml} file (in which case we assume it is only meant to be, +	 * used with the persistence units defined there, like in standard JPA)., +	 * <p>Note that specifying an empty array/list here suppresses the default, +	 * {@code META-INF/orm.xml} check. On the other hand, explicitly specifying, +	 * {@code META-INF/orm.xml} here will register that file even if it happens, +	 * to be co-located with a {@code persistence.xml} file., +	 * @see #setDefaultPersistenceUnitName, +, +, +		else if (useOrmXmlForDefaultPersistenceUnit()) {, +			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE);, +		}, +, +	/**, +	 * Determine whether to register JPA's default "META-INF/orm.xml" with, +	 * Spring's default persistence unit, if any., +	 * <p>Checks whether a "META-INF/orm.xml" file exists in the classpath and, +	 * uses it if it is not co-located with a "META-INF/persistence.xml" file., +	 */, +	private boolean useOrmXmlForDefaultPersistenceUnit() {, +		Resource ormXml = this.resourcePatternResolver.getResource(, +				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE);, +		if (ormXml.exists()) {, +			try {, +				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME);, +				if (!persistenceXml.exists()) {, +					return true;, +				}, +			}, +			catch (IOException ex) {, +				// Cannot resolve relative persistence.xml file - let's assume it's not there., +				return true;, +			}]