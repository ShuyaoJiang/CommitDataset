[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * Copyright 2002-2016 the original author or authors., +		if (resource instanceof VersionedResource) {, +			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"");, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * Copyright 2002-2016 the original author or authors., +		if (resource instanceof VersionedResource) {, +			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"");, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.URI;, +import java.net.URL;, +, +import org.springframework.core.io.AbstractResource;, +			return new FileNameVersionedResource(baseResource, candidateVersion);, +	private class FileNameVersionedResource extends AbstractResource implements VersionedResource {, +, +		private final Resource original;, +, +		private final String version;, +, +		public FileNameVersionedResource(Resource original, String version) {, +			this.original = original;, +			this.version = version;, +		}, +, +		@Override, +		public boolean exists() {, +			return this.original.exists();, +		}, +, +		@Override, +		public boolean isReadable() {, +			return this.original.isReadable();, +		}, +, +		@Override, +		public boolean isOpen() {, +			return this.original.isOpen();, +		}, +, +		@Override, +		public URL getURL() throws IOException {, +			return this.original.getURL();, +		}, +, +		@Override, +		public URI getURI() throws IOException {, +			return this.original.getURI();, +		}, +, +		@Override, +		public File getFile() throws IOException {, +			return this.original.getFile();, +		}, +, +		@Override, +		public String getFilename() {, +			return this.original.getFilename();, +		}, +, +		@Override, +		public long contentLength() throws IOException {, +			return this.original.contentLength();, +		}, +, +		@Override, +		public long lastModified() throws IOException {, +			return this.original.lastModified();, +		}, +, +		@Override, +		public Resource createRelative(String relativePath) throws IOException {, +			return this.original.createRelative(relativePath);, +		}, +, +		@Override, +		public String getDescription() {, +			return original.getDescription();, +		}, +, +		@Override, +		public InputStream getInputStream() throws IOException {, +			return original.getInputStream();, +		}, +, +		@Override, +		public String getVersion() {, +			return this.version;, +		}, +, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * Copyright 2002-2016 the original author or authors.]