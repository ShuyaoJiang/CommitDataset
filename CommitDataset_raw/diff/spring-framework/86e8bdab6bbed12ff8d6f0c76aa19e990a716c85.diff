[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	private static final boolean setStatisticsAvailable =, +			ClassUtils.hasMethod(Ehcache.class, "setStatisticsEnabled", boolean.class);, +			if (setStatisticsAvailable) {, +				if (this.statisticsEnabled) {, +					rawCache.setStatisticsEnabled(true);, +				if (this.sampledStatisticsEnabled) {, +					rawCache.setSampledStatisticsEnabled(true);, +			}, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	private static final boolean setStatisticsAvailable =, +			ClassUtils.hasMethod(Ehcache.class, "setStatisticsEnabled", boolean.class);, +			if (setStatisticsAvailable) {, +				if (this.statisticsEnabled) {, +					rawCache.setStatisticsEnabled(true);, +				if (this.sampledStatisticsEnabled) {, +					rawCache.setSampledStatisticsEnabled(true);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, + * Copyright 2002-2012 the original author or authors., +	private ExpressionParser expressionParser = new SpelExpressionParser();, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	private static final boolean setStatisticsAvailable =, +			ClassUtils.hasMethod(Ehcache.class, "setStatisticsEnabled", boolean.class);, +			if (setStatisticsAvailable) {, +				if (this.statisticsEnabled) {, +					rawCache.setStatisticsEnabled(true);, +				if (this.sampledStatisticsEnabled) {, +					rawCache.setSampledStatisticsEnabled(true);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, + * Copyright 2002-2012 the original author or authors., +	private ExpressionParser expressionParser = new SpelExpressionParser();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	private static final boolean setStatisticsAvailable =, +			ClassUtils.hasMethod(Ehcache.class, "setStatisticsEnabled", boolean.class);, +			if (setStatisticsAvailable) {, +				if (this.statisticsEnabled) {, +					rawCache.setStatisticsEnabled(true);, +				if (this.sampledStatisticsEnabled) {, +					rawCache.setSampledStatisticsEnabled(true);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, + * Copyright 2002-2012 the original author or authors., +	private ExpressionParser expressionParser = new SpelExpressionParser();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, +import org.springframework.util.concurrent.FailureCallback;, +import org.springframework.util.concurrent.SuccessCallback;, +		addCallback(callback, callback);, +	@Override, +	public void addCallback(SuccessCallback<? super V> successCallback, FailureCallback failureCallback) {, +		try {, +			successCallback.onSuccess(this.value);, +		} catch(Throwable t) {, +			failureCallback.onFailure(t);, +		}, +	}, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	private static final boolean setStatisticsAvailable =, +			ClassUtils.hasMethod(Ehcache.class, "setStatisticsEnabled", boolean.class);, +			if (setStatisticsAvailable) {, +				if (this.statisticsEnabled) {, +					rawCache.setStatisticsEnabled(true);, +				if (this.sampledStatisticsEnabled) {, +					rawCache.setSampledStatisticsEnabled(true);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, + * Copyright 2002-2012 the original author or authors., +	private ExpressionParser expressionParser = new SpelExpressionParser();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver());, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, +import org.springframework.util.concurrent.FailureCallback;, +import org.springframework.util.concurrent.SuccessCallback;, +		addCallback(callback, callback);, +	@Override, +	public void addCallback(SuccessCallback<? super V> successCallback, FailureCallback failureCallback) {, +		try {, +			successCallback.onSuccess(this.value);, +		} catch(Throwable t) {, +			failureCallback.onFailure(t);, +		}, +	}, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FailureCallback.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]