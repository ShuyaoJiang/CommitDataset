[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {, +	@SuppressWarnings("unchecked"), +	private boolean safeExtension(HttpServletRequest request, String extension) {, +		if (!StringUtils.hasText(extension)) {, +			return true;, +		}, +		extension = extension.toLowerCase(Locale.ENGLISH);, +		if (this.safeExtensions.contains(extension)) {, +			return true;, +		}, +		if (extension.equals("html")) {, +			String name = HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE;, +			String pattern = (String) request.getAttribute(name);, +			if (pattern != null && pattern.endsWith(".html")) {, +				return true;, +			}, +			name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +			Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(name);, +			if (!CollectionUtils.isEmpty(mediaTypes) && mediaTypes.contains(MediaType.TEXT_HTML)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {, +	@SuppressWarnings("unchecked"), +	private boolean safeExtension(HttpServletRequest request, String extension) {, +		if (!StringUtils.hasText(extension)) {, +			return true;, +		}, +		extension = extension.toLowerCase(Locale.ENGLISH);, +		if (this.safeExtensions.contains(extension)) {, +			return true;, +		}, +		if (extension.equals("html")) {, +			String name = HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE;, +			String pattern = (String) request.getAttribute(name);, +			if (pattern != null && pattern.endsWith(".html")) {, +				return true;, +			}, +			name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +			Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(name);, +			if (!CollectionUtils.isEmpty(mediaTypes) && mediaTypes.contains(MediaType.TEXT_HTML)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +import java.nio.charset.Charset;, +import org.springframework.web.accept.ContentNegotiationManager;, +import org.springframework.web.accept.ContentNegotiationManagerFactoryBean;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +	@Test, +	public void responseBodyAsHtml() throws Exception {, +		initServlet(new ApplicationContextInitializer<GenericWebApplicationContext>() {, +			@Override, +			public void initialize(GenericWebApplicationContext wac) {, +				ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean();, +				factoryBean.afterPropertiesSet();, +				RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject());, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +			}, +		}, TextRestController.class);, +, +		byte[] content = "alert('boo')".getBytes(Charset.forName("ISO-8859-1"));, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a1.html");, +		request.setContent(content);, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		getServlet().service(request, response);, +, +		assertEquals(200, response.getStatus());, +		assertEquals("text/html", response.getContentType());, +		assertEquals("attachment;filename=f.txt", response.getHeader("Content-Disposition"));, +		assertArrayEquals(content, response.getContentAsByteArray());, +	}, +, +	@Test, +	public void responseBodyAsHtmlWithSuffixPresent() throws Exception {, +		initServlet(new ApplicationContextInitializer<GenericWebApplicationContext>() {, +			@Override, +			public void initialize(GenericWebApplicationContext wac) {, +				ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean();, +				factoryBean.afterPropertiesSet();, +				RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject());, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +			}, +		}, TextRestController.class);, +]