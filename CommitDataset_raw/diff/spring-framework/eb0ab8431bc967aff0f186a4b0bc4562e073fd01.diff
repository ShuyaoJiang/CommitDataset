[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param args arguments to use if creating a prototype using explicit arguments, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param args arguments to use if creating a prototype using explicit arguments, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.util.Collections;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.support.LookupOverride;, + * <p>In addition to regular injection points as discussed above, this post-processor, + * also handles Spring's {@link Lookup @Lookup} annotation which identifies lookup, + * methods to be replaced by the container at runtime. This is essentially a type-safe, + * version of {@code getBean(Class, args)} and {@code getBean(String, args)},, + * See {@link Lookup @Lookup's javadoc} for details., + *, +	private final Set<String> lookupMethodsChecked =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException {, +		if (!this.lookupMethodsChecked.contains(beanName)) {, +			ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +					Lookup lookup = method.getAnnotation(Lookup.class);, +					if (lookup != null) {, +						LookupOverride override = new LookupOverride(method, lookup.value());, +						try {, +							RootBeanDefinition mbd = (RootBeanDefinition) beanFactory.getMergedBeanDefinition(beanName);, +							mbd.getMethodOverrides().addOverride(override);, +						}, +						catch (NoSuchBeanDefinitionException ex) {, +							throw new BeanCreationException(beanName,, +									"Cannot apply @Lookup to beans without corresponding bean definition");, +						}, +					}, +				}, +			});, +			this.lookupMethodsChecked.add(beanName);, +		}, +, +								throw new BeanCreationException(beanName,, +										"Invalid autowire-marked constructor: " + candidate +, +									throw new BeanCreationException(beanName,, +											candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param args arguments to use if creating a prototype using explicit arguments, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.util.Collections;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.support.LookupOverride;, + * <p>In addition to regular injection points as discussed above, this post-processor, + * also handles Spring's {@link Lookup @Lookup} annotation which identifies lookup, + * methods to be replaced by the container at runtime. This is essentially a type-safe, + * version of {@code getBean(Class, args)} and {@code getBean(String, args)},, + * See {@link Lookup @Lookup's javadoc} for details., + *, +	private final Set<String> lookupMethodsChecked =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException {, +		if (!this.lookupMethodsChecked.contains(beanName)) {, +			ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +					Lookup lookup = method.getAnnotation(Lookup.class);, +					if (lookup != null) {, +						LookupOverride override = new LookupOverride(method, lookup.value());, +						try {, +							RootBeanDefinition mbd = (RootBeanDefinition) beanFactory.getMergedBeanDefinition(beanName);, +							mbd.getMethodOverrides().addOverride(override);, +						}, +						catch (NoSuchBeanDefinitionException ex) {, +							throw new BeanCreationException(beanName,, +									"Cannot apply @Lookup to beans without corresponding bean definition");, +						}, +					}, +				}, +			});, +			this.lookupMethodsChecked.add(beanName);, +		}, +, +								throw new BeanCreationException(beanName,, +										"Invalid autowire-marked constructor: " + candidate +, +									throw new BeanCreationException(beanName,, +											candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]