[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.HashMap;, +	private static void restoreAttributes(ServerRequest request, Map<String, Object> attributes) {, +		request.attributes().clear();, +		request.attributes().putAll(attributes);, +	}, +, +		public boolean test(ServerRequest request) {, +			Map<String, Object> oldAttributes = new HashMap<>(request.attributes());, +, +			if (this.left.test(request) && this.right.test(request)) {, +				return true;, +			}, +			restoreAttributes(request, oldAttributes);, +			return false;, +		public boolean test(ServerRequest request) {, +			Map<String, Object> oldAttributes = new HashMap<>(request.attributes());, +, +			if (this.left.test(request)) {, +				return true;, +			}, +			else {, +				restoreAttributes(request, oldAttributes);, +				if (this.right.test(request)) {, +					return true;, +				}, +			}, +			restoreAttributes(request, oldAttributes);, +			return false;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.HashMap;, +	private static void restoreAttributes(ServerRequest request, Map<String, Object> attributes) {, +		request.attributes().clear();, +		request.attributes().putAll(attributes);, +	}, +, +		public boolean test(ServerRequest request) {, +			Map<String, Object> oldAttributes = new HashMap<>(request.attributes());, +, +			if (this.left.test(request) && this.right.test(request)) {, +				return true;, +			}, +			restoreAttributes(request, oldAttributes);, +			return false;, +		public boolean test(ServerRequest request) {, +			Map<String, Object> oldAttributes = new HashMap<>(request.attributes());, +, +			if (this.left.test(request)) {, +				return true;, +			}, +			else {, +				restoreAttributes(request, oldAttributes);, +				if (this.right.test(request)) {, +					return true;, +				}, +			}, +			restoreAttributes(request, oldAttributes);, +			return false;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/NestedRouteIntegrationTests.java, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import static org.springframework.web.reactive.function.server.RequestPredicates.GET;, +import static org.springframework.web.reactive.function.server.RequestPredicates.all;, +import static org.springframework.web.reactive.function.server.RequestPredicates.method;, +import static org.springframework.web.reactive.function.server.RequestPredicates.path;, +import static org.springframework.web.reactive.function.server.RouterFunctions.nest;, +import static org.springframework.web.reactive.function.server.RouterFunctions.route;, +				.andRoute(path("/{qux}/quux").and(method(HttpMethod.GET)), nestedHandler::variables), +				.andRoute(all(), nestedHandler::variables);, +	public void removeFailedNestedPathVariables() {, +	// SPR 17210, +	@Test, +	public void removeFailedPathVariablesAnd() {, +		ResponseEntity<String> result =, +				restTemplate.postForEntity("http://localhost:" + port + "/qux/quux", "", String.class);, +, +		assertEquals(HttpStatus.OK, result.getStatusCode());, +		assertEquals("{}", result.getBody());, +, +	}, +, +		@SuppressWarnings("unchecked"), +			Map<String, String> pathVariables = request.pathVariables();, +			Map<String, String> attributePathVariables =, +					(Map<String, String>) request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +			assertTrue( (pathVariables.equals(attributePathVariables)), +					|| (pathVariables.isEmpty() && (attributePathVariables == null)));, +			Mono<String> responseBody = Mono.just(pathVariables.toString());]