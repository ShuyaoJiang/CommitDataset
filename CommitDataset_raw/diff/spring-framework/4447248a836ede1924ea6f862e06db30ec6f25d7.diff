[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2013 the original author or authors., +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +, +	/**, +	 * This implementation always returns {@code null},, +	 * leaving lazy resolution support up to subclasses., +	 */, +	@Override, +	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {, +		return null;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2013 the original author or authors., +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +, +	/**, +	 * This implementation always returns {@code null},, +	 * leaving lazy resolution support up to subclasses., +	 */, +	@Override, +	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {, +		return null;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireCandidateResolver.java, + * Copyright 2002-2013 the original author or authors., + * @author Mark Fisher, +	/**, +	 * Build a proxy for lazy resolution of the actual dependency target,, +	 * if demanded by the injection point., +	 * @param descriptor the descriptor for the target method parameter or field, +	 * @param beanName the name of the bean that contains the injection point, +	 * @return the lazy resolution proxy for the actual dependency target,, +	 * or {@code null} if straight resolution is to be performed, +	 * @since 4.0, +	 */, +	Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2013 the original author or authors., +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +, +	/**, +	 * This implementation always returns {@code null},, +	 * leaving lazy resolution support up to subclasses., +	 */, +	@Override, +	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {, +		return null;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireCandidateResolver.java, + * Copyright 2002-2013 the original author or authors., + * @author Mark Fisher, +	/**, +	 * Build a proxy for lazy resolution of the actual dependency target,, +	 * if demanded by the injection point., +	 * @param descriptor the descriptor for the target method parameter or field, +	 * @param beanName the name of the bean that contains the injection point, +	 * @return the lazy resolution proxy for the actual dependency target,, +	 * or {@code null} if straight resolution is to be performed, +	 * @since 4.0, +	 */, +	Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.util.Collections;, +import java.util.Comparator;, +	/** Optional OrderComparator for dependency Lists and arrays */, +	private Comparator dependencyComparator;, +, +	 * Set a {@link java.util.Comparator} for dependency Lists and arrays., +	 * @see org.springframework.core.OrderComparator, +	 * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 */, +	public void setDependencyComparator(Comparator dependencyComparator) {, +		this.dependencyComparator = dependencyComparator;, +	}, +, +	/**, +	 * Return the dependency comparator for this BeanFactory (may be {@code null}.]