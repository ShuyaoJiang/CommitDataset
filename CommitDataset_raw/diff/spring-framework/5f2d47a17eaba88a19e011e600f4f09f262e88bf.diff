[+++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.FactoryBean;, +				LazyMethodValidationConfig.class, CustomValidatorBean.class, MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	@MyStereotype, +	public static class MyValidFactoryBean implements FactoryBean<String>, MyValidInterface<String> {, +, +		@Override, +		public String getObject() {, +			return null;, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return String.class;, +		}, +, +		@Override, +		public Object myValidMethod(String arg1, int arg2) {, +			return (arg2 == 0 ? null : "value");, +		}, +, +		@Override, +		public void myValidAsyncMethod(String arg1, int arg2) {, +		}, +, +		@Override, +		public String myGenericMethod(String value) {, +			return value;, +		}, +	}, +, +, +++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.FactoryBean;, +				LazyMethodValidationConfig.class, CustomValidatorBean.class, MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	@MyStereotype, +	public static class MyValidFactoryBean implements FactoryBean<String>, MyValidInterface<String> {, +, +		@Override, +		public String getObject() {, +			return null;, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return String.class;, +		}, +, +		@Override, +		public Object myValidMethod(String arg1, int arg2) {, +			return (arg2 == 0 ? null : "value");, +		}, +, +		@Override, +		public void myValidAsyncMethod(String arg1, int arg2) {, +		}, +, +		@Override, +		public String myGenericMethod(String value) {, +			return value;, +		}, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.SmartFactoryBean;, +		// Avoid Validator invocation on FactoryBean.getObjectType/isSingleton, +		if (isFactoryBeanMetadataMethod(invocation.getMethod())) {, +			return invocation.proceed();, +		}, +, +	private boolean isFactoryBeanMetadataMethod(Method method) {, +		Class<?> clazz = method.getDeclaringClass();, +		return ((clazz == FactoryBean.class || clazz == SmartFactoryBean.class) &&, +				!method.getName().equals("getObject"));, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.FactoryBean;, +				LazyMethodValidationConfig.class, CustomValidatorBean.class, MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	@MyStereotype, +	public static class MyValidFactoryBean implements FactoryBean<String>, MyValidInterface<String> {, +, +		@Override, +		public String getObject() {, +			return null;, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return String.class;, +		}]