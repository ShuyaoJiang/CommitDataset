[+++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, + * Copyright 2002-2012 the original author or authors., +import java.util.LinkedList;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.support.EncodedResource;, +import org.springframework.dao.DataAccessException;, +import org.springframework.dao.DataAccessResourceFailureException;, +import org.springframework.jdbc.core.JdbcTemplate;, + * {@code JdbcTestUtils} is a collection of JDBC related utility functions, + * intended to simplify standard database testing scenarios., + * , + * <p>As of Spring 3.2, {@code JdbcTestUtils} supersedes {@link SimpleJdbcTestUtils}. , + * @author Sam Brannen, + * @author Juergen Hoeller, +	private static final Log logger = LogFactory.getLog(JdbcTestUtils.class);, +, +, +	 * Count the rows in the given table., +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableName name of the table to count rows in, +	 * @return the number of rows in the table, +	 * @since 3.2, +	 */, +	public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {, +		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName);, +	}, +, +	/**, +	 * Count the rows in the given table, using the provided {@code WHERE} clause., +	 *, +	 * <p>If the provided {@code WHERE} clause contains text, it will be prefixed, +	 * with {@code " WHERE "} and then appended to the generated {@code SELECT}, +	 * statement. For example, if the provided table name is {@code "person"} and, +	 * the provided where clause is {@code "name = 'Bob' and age > 25"}, the, +	 * resulting SQL statement to execute will be, +	 * {@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}., +	 *, +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableName the name of the table to count rows in, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @return the number of rows in the table that match the provided, +	 * {@code WHERE} clause , +	 * @since 3.2, +	 */, +	public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {, +		String sql = "SELECT COUNT(0) FROM " + tableName;, +, +		if (StringUtils.hasText(whereClause)) {, +			sql += " WHERE " + whereClause;, +		}, +, +		return jdbcTemplate.queryForInt(sql);, +	}, +, +	/**, +	 * Delete all rows from the specified tables., +	 *, +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableNames the names of the tables to delete from, +	 * @return the total number of rows deleted from all specified tables, +	 * @since 3.2, +	 */, +	public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {, +		int totalRowCount = 0;, +		for (String tableName : tableNames) {, +			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName);, +			totalRowCount += rowCount;, +			if (logger.isInfoEnabled()) {, +				logger.info("Deleted " + rowCount + " rows from table " + tableName);, +			}, +		}, +		return totalRowCount;, +	}, +, +	/**, +	 * Drop the specified tables., +	 *, +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableNames the names of the tables to drop , +	 * @since 3.2, +	 */, +	public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {, +		for (String tableName : tableNames) {, +			jdbcTemplate.execute("DROP TABLE " + tableName);, +			if (logger.isInfoEnabled()) {, +				logger.info("Dropped table " + tableName);, +			}, +		}, +	}, +, +	/**, +	 * Execute the given SQL script., +	 *, +	 * <p>The script will typically be loaded from the classpath. There should, +	 * be one statement per line. Any semicolons will be removed., +	 *]