[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.http.HttpHeaders;, +	 * Indicates whether the given response has a message body., +	 * <p>Default implementation returns {@code false} for:, +	 * <ul>, +	 *     <li>a response status of {@code 204} or {@code 304}</li>, +	 *     <li>a {@code Content-Length} of {@code 0}</li>, +	 *     <li>no indication of content (no {@code Content-Length} nor {@code Transfer-encoding: chunked}) and, +	 *     a ({@code Connection: closed}) header. See rfc7230 section 3.4</li>, +	 * </ul>, +		HttpHeaders headers = response.getHeaders();, +		long contentLength = headers.getContentLength();, +		if(contentLength == 0) {, +			return false;, +		}, +		boolean chunked = headers.containsKey(HttpHeaders.TRANSFER_ENCODING), +				&& headers.get(HttpHeaders.TRANSFER_ENCODING).contains("chunked");, +		boolean closed = headers.containsKey(HttpHeaders.CONNECTION), +				&& headers.getConnection().contains("close");, +		if(!chunked && contentLength == -1 && closed) {, +			return false;, +		}, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.http.HttpHeaders;, +	 * Indicates whether the given response has a message body., +	 * <p>Default implementation returns {@code false} for:, +	 * <ul>, +	 *     <li>a response status of {@code 204} or {@code 304}</li>, +	 *     <li>a {@code Content-Length} of {@code 0}</li>, +	 *     <li>no indication of content (no {@code Content-Length} nor {@code Transfer-encoding: chunked}) and, +	 *     a ({@code Connection: closed}) header. See rfc7230 section 3.4</li>, +	 * </ul>, +		HttpHeaders headers = response.getHeaders();, +		long contentLength = headers.getContentLength();, +		if(contentLength == 0) {, +			return false;, +		}, +		boolean chunked = headers.containsKey(HttpHeaders.TRANSFER_ENCODING), +				&& headers.get(HttpHeaders.TRANSFER_ENCODING).contains("chunked");, +		boolean closed = headers.containsKey(HttpHeaders.CONNECTION), +				&& headers.getConnection().contains("close");, +		if(!chunked && contentLength == -1 && closed) {, +			return false;, +		}, +		return true;, +++ b/spring-web/src/test/java/org/springframework/web/client/HttpMessageConverterExtractorTests.java, +	@Test(expected = RestClientException.class), +, +	@Test, +	public void connectionClose() throws IOException {, +		HttpMessageConverter<String> converter = mock(HttpMessageConverter.class);, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();, +		converters.add(converter);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setConnection("close");, +		extractor = new HttpMessageConverterExtractor<String>(String.class, createConverterList(converter));, +		given(response.getStatusCode()).willReturn(HttpStatus.OK);, +		given(response.getHeaders()).willReturn(responseHeaders);, +, +		Object result = extractor.extractData(response);, +		assertNull(result);]