[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import reactor.core.composable.Deferred;, +import reactor.core.composable.spec.DeferredPromiseSpec;, +, +			final Deferred<Boolean, Promise<Boolean>> deferred = new DeferredPromiseSpec<Boolean>().get();, +, +, +					if (!success && StompHeaderAccessor.wrap(message).getCommand() != StompCommand.DISCONNECT) {, +						deferred.accept(false);, +					} else {, +						deferred.accept(true);, +			Boolean success = null;, +, +			try {, +				success = deferred.compose().await();, +, +				if (success == null) {, +					sendError(sessionId, "Timed out waiting for message to be forwarded to the broker");, +				}, +				else if (!success) {, +					sendError(sessionId, "Failed to forward message to the broker");, +				}, +			} catch (InterruptedException ie) {, +				Thread.currentThread().interrupt();, +				sendError(sessionId, "Interrupted while forwarding message to the broker");, +			}, +, +			if (success == null) {, +				success = false;, +			}, +, +			return success;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import reactor.core.composable.Deferred;, +import reactor.core.composable.spec.DeferredPromiseSpec;, +, +			final Deferred<Boolean, Promise<Boolean>> deferred = new DeferredPromiseSpec<Boolean>().get();, +, +, +					if (!success && StompHeaderAccessor.wrap(message).getCommand() != StompCommand.DISCONNECT) {, +						deferred.accept(false);, +					} else {, +						deferred.accept(true);, +			Boolean success = null;, +, +			try {, +				success = deferred.compose().await();, +, +				if (success == null) {, +					sendError(sessionId, "Timed out waiting for message to be forwarded to the broker");, +				}, +				else if (!success) {, +					sendError(sessionId, "Failed to forward message to the broker");, +				}, +			} catch (InterruptedException ie) {, +				Thread.currentThread().interrupt();, +				sendError(sessionId, "Interrupted while forwarding message to the broker");, +			}, +, +			if (success == null) {, +				success = false;, +			}, +, +			return success;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.stomp;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Test;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.MessagingException;, +import org.springframework.messaging.SubscribableChannel;, +import org.springframework.messaging.support.MessageBuilder;, +import org.springframework.messaging.support.channel.ExecutorSubscribableChannel;, +import org.springframework.util.SocketUtils;, +, +import static org.junit.Assert.*;, +, +]