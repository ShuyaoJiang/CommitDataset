[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			connectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +			disconnectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			connectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +			disconnectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				headerAccessor.setUser(this.connectHeaders.getUser());, +				headerAccessor.setImmutable();, +			accessor.setUser(this.connectHeaders.getUser());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			connectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +			disconnectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				headerAccessor.setUser(this.connectHeaders.getUser());, +				headerAccessor.setImmutable();, +			accessor.setUser(this.connectHeaders.getUser());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, +import org.springframework.messaging.simp.TestPrincipal;, +		headers.setUser(new TestPrincipal("joe"));, +		assertEquals("joe", SimpMessageHeaderAccessor.getUser(captured.getHeaders()).getName());, +		assertEquals("joe", connectAckHeaders.getUser().getName());, +		headers.setUser(new TestPrincipal("joe"));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			connectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +			disconnectAck.setUser(SimpMessageHeaderAccessor.getUser(headers));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				headerAccessor.setUser(this.connectHeaders.getUser());, +				headerAccessor.setImmutable();, +			accessor.setUser(this.connectHeaders.getUser());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, +import org.springframework.messaging.simp.TestPrincipal;, +		headers.setUser(new TestPrincipal("joe"));, +		assertEquals("joe", SimpMessageHeaderAccessor.getUser(captured.getHeaders()).getName());, +		assertEquals("joe", connectAckHeaders.getUser().getName());, +		headers.setUser(new TestPrincipal("joe"));, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.simp.TestPrincipal;, +	private StubMessageChannel outboundChannel;, +, +		this.outboundChannel = new StubMessageChannel();, +				this.outboundChannel, new StubMessageChannel(), Arrays.asList("/topic")) {, +		this.tcpClient = new StubTcpOperations();, +	@Test, +	public void testOutboundMessage() throws Exception {, +, +		this.brokerRelay.start();, +, +		String sessionId = "sess1";, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT);, +		headers.setSessionId(sessionId);, +		headers.setUser(new TestPrincipal("joe"));, +		this.brokerRelay.handleMessage(MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()));, +, +		List<Message<byte[]>> sent = this.tcpClient.connection.messages;, +		assertEquals(2, sent.size());, +, +		StompHeaderAccessor responseHeaders = StompHeaderAccessor.create(StompCommand.MESSAGE);, +		responseHeaders.setLeaveMutable(true);, +		Message<byte[]> response = MessageBuilder.createMessage(new byte[0], responseHeaders.getMessageHeaders());, +		this.tcpClient.connectionHandler.handleMessage(response);, +, +		Message<byte[]> actual = this.outboundChannel.getMessages().get(0);, +		StompHeaderAccessor actualHeaders = StompHeaderAccessor.getAccessor(actual, StompHeaderAccessor.class);, +		assertEquals(sessionId, actualHeaders.getSessionId());, +		assertEquals("joe", actualHeaders.getUser().getName());, +	}, +, +		private TcpConnectionHandler<byte[]> connectionHandler;, +, +			this.connectionHandler = connectionHandler;, +			this.connectionHandler = connectionHandler;]