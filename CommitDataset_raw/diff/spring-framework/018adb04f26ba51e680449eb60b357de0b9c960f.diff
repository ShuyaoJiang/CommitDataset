[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.stream.Stream;, +import org.springframework.lang.UsesJava8;, + * @author Stephane Nicoll, +	private static final boolean streamAvailable = ClassUtils.isPresent(, +			"java.util.stream.Stream", TypeDescriptor.class.getClassLoader());, +, +	 * If this type is a {@code Stream}, returns the stream's component type., +		if (streamAvailable && StreamHelper.isStream(this.type)) {, +			return StreamHelper.getStreamElementType(this);, +		}, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class StreamHelper {, +, +		private static boolean isStream(Class<?> type) {, +			return Stream.class.isAssignableFrom(type);, +		}, +, +		private static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +			return getRelatedIfResolvable(source, source.resolvableType.as(Stream.class).getGeneric());, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.stream.Stream;, +import org.springframework.lang.UsesJava8;, + * @author Stephane Nicoll, +	private static final boolean streamAvailable = ClassUtils.isPresent(, +			"java.util.stream.Stream", TypeDescriptor.class.getClassLoader());, +, +	 * If this type is a {@code Stream}, returns the stream's component type., +		if (streamAvailable && StreamHelper.isStream(this.type)) {, +			return StreamHelper.getStreamElementType(this);, +		}, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class StreamHelper {, +, +		private static boolean isStream(Class<?> type) {, +			return Stream.class.isAssignableFrom(type);, +		}, +, +		private static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +			return getRelatedIfResolvable(source, source.resolvableType.as(Stream.class).getGeneric());, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * Copyright 2002-2015 the original author or authors., + * @author Stephane Nicoll, +	/** Java 8's java.util.stream.Stream class available? */, +	private static final boolean streamAvailable = ClassUtils.isPresent(, +			"java.util.stream.Stream", DefaultConversionService.class.getClassLoader());, +, +, +, +		if (streamAvailable) {, +			converterRegistry.addConverter(new StreamConverter(conversionService));, +		}, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.stream.Stream;, +import org.springframework.lang.UsesJava8;, + * @author Stephane Nicoll, +	private static final boolean streamAvailable = ClassUtils.isPresent(, +			"java.util.stream.Stream", TypeDescriptor.class.getClassLoader());, +, +	 * If this type is a {@code Stream}, returns the stream's component type., +		if (streamAvailable && StreamHelper.isStream(this.type)) {, +			return StreamHelper.getStreamElementType(this);, +		}, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class StreamHelper {, +, +		private static boolean isStream(Class<?> type) {, +			return Stream.class.isAssignableFrom(type);, +		}, +, +		private static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +			return getRelatedIfResolvable(source, source.resolvableType.as(Stream.class).getGeneric());, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * Copyright 2002-2015 the original author or authors., + * @author Stephane Nicoll, +	/** Java 8's java.util.stream.Stream class available? */, +	private static final boolean streamAvailable = ClassUtils.isPresent(, +			"java.util.stream.Stream", DefaultConversionService.class.getClassLoader());, +]