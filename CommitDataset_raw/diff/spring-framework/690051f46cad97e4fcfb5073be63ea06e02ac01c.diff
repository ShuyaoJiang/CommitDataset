[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +	private ChannelRegistration clientInboundChannelRegistration;, +, +	private ChannelRegistration clientOutboundChannelRegistration;, +, +	@Bean, +	public AbstractSubscribableChannel clientInboundChannel() {, +		ExecutorSubscribableChannel channel = new ExecutorSubscribableChannel(clientInboundChannelExecutor());, +		ChannelRegistration r = getClientInboundChannelRegistration();, +		if (r.hasInterceptors()) {, +			channel.setInterceptors(r.getInterceptors());, +		}, +		return channel;, +	}, +, +	@Bean, +	public ThreadPoolTaskExecutor clientInboundChannelExecutor() {, +		TaskExecutorRegistration r = getClientInboundChannelRegistration().getTaskExecutorRegistration();, +		ThreadPoolTaskExecutor executor = (r != null) ? r.getTaskExecutor() : new ThreadPoolTaskExecutor();, +		executor.setThreadNamePrefix("ClientInboundChannel-");, +		return executor;, +	}, +, +	protected final ChannelRegistration getClientInboundChannelRegistration() {, +		if (this.clientInboundChannelRegistration == null) {, +			ChannelRegistration registration = new ChannelRegistration();, +			configureClientInboundChannel(registration);, +			this.clientInboundChannelRegistration = registration;, +		}, +		return this.clientInboundChannelRegistration;, +	}, +, +, +	/**, +	 * A hook for sub-classes to customize the message channel for inbound messages, +	 * from WebSocket clients., +	 */, +	protected abstract void configureClientInboundChannel(ChannelRegistration registration);, +, +, +	@Bean, +	public AbstractSubscribableChannel clientOutboundChannel() {, +		ExecutorSubscribableChannel channel = new ExecutorSubscribableChannel(clientOutboundChannelExecutor());, +		ChannelRegistration r = getClientOutboundChannelRegistration();, +		if (r.hasInterceptors()) {, +			channel.setInterceptors(r.getInterceptors());, +		}, +		return channel;, +	}, +, +	@Bean, +	public ThreadPoolTaskExecutor clientOutboundChannelExecutor() {, +		TaskExecutorRegistration r = getClientOutboundChannelRegistration().getTaskExecutorRegistration();, +		ThreadPoolTaskExecutor executor = (r != null) ? r.getTaskExecutor() : new ThreadPoolTaskExecutor();, +		executor.setThreadNamePrefix("ClientOutboundChannel-");, +		return executor;, +	}, +, +	protected final ChannelRegistration getClientOutboundChannelRegistration() {, +		if (this.clientOutboundChannelRegistration == null) {, +			ChannelRegistration registration = new ChannelRegistration();, +			configureClientOutboundChannel(registration);, +			this.clientOutboundChannelRegistration = registration;, +		}, +		return this.clientOutboundChannelRegistration;, +	}, +, +	/**, +	 * A hook for sub-classes to customize the message channel for messages from, +	 * the application or message broker to WebSocket clients., +	 */, +	protected abstract void configureClientOutboundChannel(ChannelRegistration registration);, +, +	@Bean, +	public AbstractSubscribableChannel brokerChannel() {, +		ChannelRegistration r = getBrokerRegistry().getBrokerChannelRegistration();, +		ExecutorSubscribableChannel channel;, +		if (r.hasTaskExecutor()) {, +			channel = new ExecutorSubscribableChannel(); // synchronous by default, +		}, +		else {, +			channel = new ExecutorSubscribableChannel(brokerChannelExecutor());, +		}, +		if (r.hasInterceptors()) {, +			channel.setInterceptors(r.getInterceptors());, +		}, +		return channel;, +	}, +, +	@Bean, +	public ThreadPoolTaskExecutor brokerChannelExecutor() {, +		TaskExecutorRegistration r = getBrokerRegistry().getBrokerChannelRegistration().getTaskExecutorRegistration();, +		ThreadPoolTaskExecutor executor = (r != null) ? r.getTaskExecutor() : new ThreadPoolTaskExecutor();, +		executor.setThreadNamePrefix("BrokerChannel-");, +		return executor;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +	private ChannelRegistration clientInboundChannelRegistration;, +]