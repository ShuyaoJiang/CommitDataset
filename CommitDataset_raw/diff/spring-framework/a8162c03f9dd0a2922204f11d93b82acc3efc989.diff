[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.configurers.configureArgumentResolvers(configurer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.configurers.configureArgumentResolvers(configurer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		ArgumentResolverConfigurer configurer = new ArgumentResolverConfigurer();, +		configureArgumentResolvers(configurer);, +		adapter.setArgumentResolverConfigurer(configurer);, +	 * Configure resolvers for custom controller method arguments., +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.configurers.configureArgumentResolvers(configurer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		ArgumentResolverConfigurer configurer = new ArgumentResolverConfigurer();, +		configureArgumentResolvers(configurer);, +		adapter.setArgumentResolverConfigurer(configurer);, +	 * Configure resolvers for custom controller method arguments., +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	 * Configure resolvers for custom controller method arguments., +	 * @param configurer to configurer to use, +	default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.configurers.configureArgumentResolvers(configurer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		ArgumentResolverConfigurer configurer = new ArgumentResolverConfigurer();, +		configureArgumentResolvers(configurer);, +		adapter.setArgumentResolverConfigurer(configurer);, +	 * Configure resolvers for custom controller method arguments., +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	 * Configure resolvers for custom controller method arguments., +	 * @param configurer to configurer to use, +	default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.delegates.forEach(delegate -> delegate.configureArgumentResolvers(configurer));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.configurers.configureArgumentResolvers(configurer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		ArgumentResolverConfigurer configurer = new ArgumentResolverConfigurer();, +		configureArgumentResolvers(configurer);, +		adapter.setArgumentResolverConfigurer(configurer);, +	 * Configure resolvers for custom controller method arguments., +	protected void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	 * Configure resolvers for custom controller method arguments., +	 * @param configurer to configurer to use, +	default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurerComposite.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +		this.delegates.forEach(delegate -> delegate.configureArgumentResolvers(configurer));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ArgumentResolverConfigurer.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;, +, +/**, + * Helps to configure resolvers for Controller method arguments., + *, + * @author Rossen Stoyanchev]