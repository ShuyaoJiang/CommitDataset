[+++ b/src/docs/asciidoc/web/webflux-cors.adoc, +[.small]#<<web.adoc#mvc-cors,Same in Spring MVC>>#, +, +, +[[webflux-cors-intro]], +[.small]#<<web.adoc#mvc-cors-intro,Same in Spring MVC>>#, +For security reasons browsers prohibit AJAX calls to resources outside the current origin., +For example you could have your bank account in one tab and evil.com in another. Scripts, +from evil.com should not be able to make AJAX requests to your bank API with your, +credentials, e.g. withdrawing money from your account!, +Cross-Origin Resource Sharing (CORS) is a http://www.w3.org/TR/cors/[W3C specification], +implemented by http://caniuse.com/#feat=cors[most browsers] that allows you to specify, +what kind of cross domain requests are authorized rather than using less secure and less, +powerful workarounds based on IFRAME or JSONP., +, +, +[[webflux-cors-processing]], +== Processing, +[.small]#<<web.adoc#mvc-cors-processing,Same in Spring MVC>>#, +, +The CORS specification distinguishes between preflight, simple, and actual requests., +To learn how CORS works, you can read, +https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[this article], among, +many others, or refer to the specification for more details., +, +Spring WebFlux ``HandlerMapping``'s provide built-in support for CORS. After successfully, +mapping a request to a handler, ``HandlerMapping``'s check the CORS configuration for the, +given request and handler and take further actions. Preflight requests are handled, +directly while simple and actual CORS requests are intercepted, validated, and have, +required CORS response headers set., +, +In order to enable cross-origin requests (i.e. the `Origin` header is present and, +differs from the host of the request) you need to have some explicitly declared CORS, +configuration. If no matching CORS configuration is found, preflight requests are, +rejected. No CORS headers are added to the responses of simple and actual CORS requests, +and consequently browsers reject them., +, +Each `HandlerMapping` can be, +{api-spring-framework}/web/reactive/handler/AbstractHandlerMapping.html#setCorsConfigurations-java.util.Map-[configured], +individually with URL pattern based `CorsConfiguration` mappings. In most cases applications, +will use the WebFlux Java config to declare such mappings, which results in a single,, +global map passed to all ``HadlerMappping``'s., +, +Global CORS configuration at the `HandlerMapping` level can be combined with more, +fine-grained, handler-level CORS configuration. For example annotated controllers can use, +class or method-level `@CrossOrigin` annotations (other handlers can implement, +`CorsConfigurationSource`)., +, +The rules for combining global and local configuration are generally additive -- e.g., +all global and all local origins. The only exception are those attributes where only a, +single value can be accepted such as `allowCredentials` and `maxAge`, in which case the, +local overrides the global value., +, +To learn more from the source or make advanced customizations, check:, +, +* `CorsConfiguration`, +* `CorsProcessor`, `DefaultCorsProcessor`, +* `AbstractHandlerMapping`, +, +, +[.small]#<<web.adoc#mvc-cors-controller,Same in Spring MVC>>#, +The {api-spring-framework}/web/bind/annotation/CrossOrigin.html[`@CrossOrigin`], +annotation enables cross-origin requests on annotated controller methods:, +By default `@CrossOrigin` allows:, +, +* All origins., +* All headers., +* All HTTP methods to which the controller method is mapped., +* `allowedCredentials` is not enabled by default since that establishes a trust level, +that exposes sensitive user-specific information such as cookies and CSRF tokens, and, +should only be used where appropriate., +* `maxAge` is set to 30 minutes., +, +`@CrossOrigin` is supported at the class level too and inherited by all methods:, +`CrossOrigin` can be used at both class and method-level:, +	public Mono<Account> retrieve(@PathVariable Long id) {, +	public Mono<Void> remove(@PathVariable Long id) {, +[[webflux-cors-global]], +== Global Config, +[.small]#<<web.adoc#mvc-cors-global,Same in Spring MVC>>#, +, +In addition to fine-grained, controller method level configuration you'll probably want to, +define some global CORS configuration too. You can set URL-based `CorsConfiguration`, +mappings individually on any `HandlerMapping`. Most applications however will use the, +WebFlux Java config to do that., +, +By default global configuration enables the following:, +, +* All origins., +* All headers., +* `GET`, `HEAD`, and `POST` methods., +* `allowedCredentials` is not enabled by default since that establishes a trust level, +that exposes sensitive user-specific information such as cookies and CSRF tokens, and, +should only be used where appropriate., +* `maxAge` is set to 30 minutes., +, +To enable CORS in the WebFlux Java config, use the `CorsRegistry` callback:, +, +		// Add more mappings..., +[.small]#<<web.adoc#mvc-cors-filter,Same in Spring MVC>>#]