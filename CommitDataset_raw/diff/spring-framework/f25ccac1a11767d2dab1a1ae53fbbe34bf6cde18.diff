[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/SessionSubscriptionRegistry.java, +	Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/SessionSubscriptionRegistry.java, +	Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/SimpleBrokerWebMessageHandler.java, +	private SessionSubscriptionRegistry subscriptionRegistry=, +		this.subscriptionRegistry = subscriptionRegistry;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/SessionSubscriptionRegistry.java, +	Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/SimpleBrokerWebMessageHandler.java, +	private SessionSubscriptionRegistry subscriptionRegistry=, +		this.subscriptionRegistry = subscriptionRegistry;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, + * being added and removed and maintains a lookup cache of registrations by destination., +		SessionSubscriptionRegistration reg = this.delegate.getRegistration(sessionId);, +		return (reg != null) ? new CachingSessionSubscriptionRegistration(reg) : null;, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/SessionSubscriptionRegistry.java, +	Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/SimpleBrokerWebMessageHandler.java, +	private SessionSubscriptionRegistry subscriptionRegistry=, +		this.subscriptionRegistry = subscriptionRegistry;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, + * being added and removed and maintains a lookup cache of registrations by destination., +		SessionSubscriptionRegistration reg = this.delegate.getRegistration(sessionId);, +		return (reg != null) ? new CachingSessionSubscriptionRegistration(reg) : null;, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/DefaultSessionSubscriptionRegistry.java, +import java.util.HashSet;, +	/**, +	 * The default implementation performs a lookup by destination on each registration., +	 * For a more efficient algorithm consider decorating an instance of this class with, +	 * {@link CachingSessionSubscriptionRegistry}., +	 */, +	@Override, +	public Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination) {, +		Set<SessionSubscriptionRegistration> result = new HashSet<SessionSubscriptionRegistration>();, +		for (SessionSubscriptionRegistration r : this.registrations.values()) {, +			if (r.getSubscriptionsByDestination(destination) != null) {, +				result.add(r);, +			}, +		}, +		return result.isEmpty() ? null : result;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/SessionSubscriptionRegistry.java, +	Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/SimpleBrokerWebMessageHandler.java, +	private SessionSubscriptionRegistry subscriptionRegistry=, +		this.subscriptionRegistry = subscriptionRegistry;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, + * being added and removed and maintains a lookup cache of registrations by destination., +		SessionSubscriptionRegistration reg = this.delegate.getRegistration(sessionId);, +		return (reg != null) ? new CachingSessionSubscriptionRegistration(reg) : null;, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/DefaultSessionSubscriptionRegistry.java, +import java.util.HashSet;, +	/**, +	 * The default implementation performs a lookup by destination on each registration., +	 * For a more efficient algorithm consider decorating an instance of this class with, +	 * {@link CachingSessionSubscriptionRegistry}., +	 */, +	@Override, +	public Set<SessionSubscriptionRegistration> getRegistrationsByDestination(String destination) {, +		Set<SessionSubscriptionRegistration> result = new HashSet<SessionSubscriptionRegistration>();, +		for (SessionSubscriptionRegistration r : this.registrations.values()) {, +			if (r.getSubscriptionsByDestination(destination) != null) {, +				result.add(r);, +			}, +		}, +		return result.isEmpty() ? null : result;, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/messaging/support/AbstractSessionSubscriptionRegistryTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.messaging.support;, +, +import java.util.Set;, +, +import org.junit.Before;]