[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +	private List<Advisor> freshAdvisorChain() {, +		OrderComparator.sort(beans);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +	private List<Advisor> freshAdvisorChain() {, +		OrderComparator.sort(beans);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +	private List<Advisor> freshAdvisorChain() {, +		OrderComparator.sort(beans);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +		for (String retrievedAlias : retrievedAliases) {, +			String alias = (factoryPrefix ? FACTORY_BEAN_PREFIX : "") + retrievedAlias;, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +	private List<Advisor> freshAdvisorChain() {, +		OrderComparator.sort(beans);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +		for (String retrievedAlias : retrievedAliases) {, +			String alias = (factoryPrefix ? FACTORY_BEAN_PREFIX : "") + retrievedAlias;, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		OrderComparator.sort(priorityOrderedPostProcessors);, +		OrderComparator.sort(orderedPostProcessors);, +		OrderComparator.sort(priorityOrderedPostProcessors);, +		OrderComparator.sort(orderedPostProcessors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2009 the original author or authors., +	private final Comparator<? super Advisor> advisorComparator;, +		this.advisorComparator = OrderComparator.INSTANCE;, +	public AspectJPrecedenceComparator(Comparator<? super Advisor> advisorComparator) {, +		return (hasAspectName(advisor1) && hasAspectName(advisor2) &&, +				getAspectName(advisor1).equals(getAspectName(advisor2)));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +	private List<Advisor> freshAdvisorChain() {, +		OrderComparator.sort(beans);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, +		OrderComparator.sort(advisors);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +		for (String retrievedAlias : retrievedAliases) {]