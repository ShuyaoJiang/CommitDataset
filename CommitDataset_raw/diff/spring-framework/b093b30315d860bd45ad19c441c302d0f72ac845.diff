[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +import org.springframework.util.Assert;, +	private final Object timeoutResult;, +, +	private Object result = RESULT_NONE;, +	private boolean expired;, +	 * Provide a handler to use to handle the result value., +	 * @param resultHandler the handler, +	 * @see {@link DeferredResultProcessingInterceptor}, +		Assert.notNull(resultHandler, "DeferredResultHandler is required");, +		synchronized (this) {, +			if ((this.result != RESULT_NONE) && (!this.expired)) {, +				try {, +					this.resultHandler.handleResult(this.result);, +				}, +				catch (Throwable t) {, +					logger.trace("DeferredResult not handled", t);, +				}, +			}, +		}, +	 * Set the value for the DeferredResult and handle it., +	 * @param result the value to set, +	 * @return "true" if the result was set and passed on for handling; "false", +	 * if the result was already set or the async request expired., +		return setResultInternal(result);, +	private boolean setResultInternal(Object result) {, +		synchronized (this) {, +			if (isSetOrExpired()) {, +			this.result = result;, +			if (this.resultHandler != null) {, +					this.resultHandler.handleResult(this.result);, +			}, +		}, +	/**, +	 * Set an error value for the {@link DeferredResult} and handle it. The value, +	 * may be an {@link Exception} or {@link Throwable} in which case it will be, +	 * processed as if a handler raised the exception., +	 * @param result the error result value, +	 * @return "true" if the result was set to the error value and passed on for, +	 * handling; "false" if the result was already set or the async request, +	 * expired., +	 * @see #isSetOrExpired(), +	 */, +	public boolean setErrorResult(Object result) {, +		return setResultInternal(result);, +	 * because it was previously set or because the underlying request expired., +	 * or {@link #setErrorResult(Object)}, or as a result of a timeout, if a, +	 * timeout result was provided to the constructor. The request may also, +	 * expire due to a timeout or network error., +		return ((this.result != RESULT_NONE) || this.expired);, +	 * Set the "expired" flag if and only if the result value was not already set., +	 * @return {@code true} if expiration succeeded, {@code false} otherwise, +	boolean expire() {, +		synchronized (this) {, +			if (!isSetOrExpired()) {, +				this.expired = true;, +			}, +		}, +		return this.expired;, +		return  hasTimeoutResult() ? setResultInternal(this.timeoutResult) : false;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +import org.springframework.util.Assert;, +	private final Object timeoutResult;, +, +	private Object result = RESULT_NONE;, +	private boolean expired;, +	 * Provide a handler to use to handle the result value., +	 * @param resultHandler the handler, +	 * @see {@link DeferredResultProcessingInterceptor}, +		Assert.notNull(resultHandler, "DeferredResultHandler is required");, +		synchronized (this) {, +			if ((this.result != RESULT_NONE) && (!this.expired)) {, +				try {, +					this.resultHandler.handleResult(this.result);, +				}, +				catch (Throwable t) {, +					logger.trace("DeferredResult not handled", t);, +				}, +			}, +		}, +	 * Set the value for the DeferredResult and handle it., +	 * @param result the value to set, +	 * @return "true" if the result was set and passed on for handling; "false", +	 * if the result was already set or the async request expired., +		return setResultInternal(result);, +	private boolean setResultInternal(Object result) {, +		synchronized (this) {, +			if (isSetOrExpired()) {, +			this.result = result;, +			if (this.resultHandler != null) {, +					this.resultHandler.handleResult(this.result);, +			}, +		}, +	/**, +	 * Set an error value for the {@link DeferredResult} and handle it. The value, +	 * may be an {@link Exception} or {@link Throwable} in which case it will be, +	 * processed as if a handler raised the exception., +	 * @param result the error result value, +	 * @return "true" if the result was set to the error value and passed on for, +	 * handling; "false" if the result was already set or the async request]