[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +		if(clazz.getSuperclass() != null) {, +			Field field = findField(name, clazz.getSuperclass(), mustBeStatic);, +			if(field != null) {, +				return field;, +			}, +		}, +		for (Class<?> implementedInterface : clazz.getInterfaces()) {, +			Field field = findField(name, implementedInterface, mustBeStatic);, +			if(field != null) {, +				return field;, +			}, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +		if(clazz.getSuperclass() != null) {, +			Field field = findField(name, clazz.getSuperclass(), mustBeStatic);, +			if(field != null) {, +				return field;, +			}, +		}, +		for (Class<?> implementedInterface : clazz.getInterfaces()) {, +			Field field = findField(name, implementedInterface, mustBeStatic);, +			if(field != null) {, +				return field;, +			}, +		}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void SPR_10125() throws Exception {, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		String fromInterface = parser.parseExpression("T("+StaticFinalImpl1.class.getName()+").VALUE").getValue(context, String.class);, +		assertThat(fromInterface, is("interfaceValue"));, +		String fromClass = parser.parseExpression("T("+StaticFinalImpl2.class.getName()+").VALUE").getValue(context, String.class);, +		assertThat(fromClass, is("interfaceValue"));, +	}, +, +	public static interface StaticFinal {, +		public static final String VALUE = "interfaceValue";, +	}, +, +	public abstract static class AbstractStaticFinal implements StaticFinal {, +	}, +, +	public static class StaticFinalImpl1 extends AbstractStaticFinal implements StaticFinal {, +	}, +, +	public static class StaticFinalImpl2 extends AbstractStaticFinal {, +	}]