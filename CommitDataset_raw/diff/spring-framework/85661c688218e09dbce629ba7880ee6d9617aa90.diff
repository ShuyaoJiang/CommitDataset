[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2008 the original author or authors., +import java.lang.annotation.Annotation;, +	private static final Set<String> singleValuedAnnotationPcds = new HashSet<String>();, +	private static final Set<String> nonReferencePointcutTokens = new HashSet<String>();, +			int algorithmicStep = STEP_JOIN_POINT_BINDING;, +			while ((this.numberOfRemainingUnboundArguments > 0) && algorithmicStep < STEP_FINISHED) {, +				switch (algorithmicStep++) {, +						throw new IllegalStateException("Unknown algorithmic step: " + (algorithmicStep - 1));, +		List<String> varNames = new ArrayList<String>();, +	private void bindAnnotationsFromVarNames(List<String> varNames) {, +					findAndBind(Annotation.class, varNames.get(0));, +			for (char tokenChar : tokenChars) {, +				if (!Character.isJavaIdentifierPart(tokenChar)) {, +	private void maybeExtractVariableNamesFromArgs(String argsSpec, List<String> varNames) {, +		List<String> varNames = new ArrayList<String>();, +				List<String> candidateVarNames = new ArrayList<String>();, +				for (String varName : candidateVarNames) {, +					bindParameterName(j, varNames.get(0));, +		List<String> varNames = new ArrayList<String>();, +					bindParameterName(j, varNames.get(0));, +			List<String> varNames = new ArrayList<String>();, +			if (isUnbound(i) && isSubtypeOf(Annotation.class, i)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2008 the original author or authors., +import java.lang.annotation.Annotation;, +	private static final Set<String> singleValuedAnnotationPcds = new HashSet<String>();, +	private static final Set<String> nonReferencePointcutTokens = new HashSet<String>();, +			int algorithmicStep = STEP_JOIN_POINT_BINDING;, +			while ((this.numberOfRemainingUnboundArguments > 0) && algorithmicStep < STEP_FINISHED) {, +				switch (algorithmicStep++) {, +						throw new IllegalStateException("Unknown algorithmic step: " + (algorithmicStep - 1));, +		List<String> varNames = new ArrayList<String>();, +	private void bindAnnotationsFromVarNames(List<String> varNames) {, +					findAndBind(Annotation.class, varNames.get(0));, +			for (char tokenChar : tokenChars) {, +				if (!Character.isJavaIdentifierPart(tokenChar)) {, +	private void maybeExtractVariableNamesFromArgs(String argsSpec, List<String> varNames) {, +		List<String> varNames = new ArrayList<String>();, +				List<String> candidateVarNames = new ArrayList<String>();, +				for (String varName : candidateVarNames) {, +					bindParameterName(j, varNames.get(0));, +		List<String> varNames = new ArrayList<String>();, +					bindParameterName(j, varNames.get(0));, +			List<String> varNames = new ArrayList<String>();, +			if (isUnbound(i) && isSubtypeOf(Annotation.class, i)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2008 the original author or authors., +import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;, +	private static final List<Class> APC_PRIORITY_LIST = new ArrayList<Class>();, +		APC_PRIORITY_LIST.add(InfrastructureAdvisorAutoProxyCreator.class);, +		APC_PRIORITY_LIST.add(AspectJAwareAdvisorAutoProxyCreator.class);, +		APC_PRIORITY_LIST.add(AnnotationAwareAspectJAutoProxyCreator.class);, +		return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);, +				int requiredPriority = findPriorityForClass(cls);, +		beanDefinition.getPropertyValues().addPropertyValue("order", Ordered.HIGHEST_PRECEDENCE);, +	private static int findPriorityForClass(Class clazz) {, +		return APC_PRIORITY_LIST.indexOf(clazz);, +			Class clazz = APC_PRIORITY_LIST.get(i);, +			if (clazz.getName().equals(className)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2008 the original author or authors., +import java.lang.annotation.Annotation;, +	private static final Set<String> singleValuedAnnotationPcds = new HashSet<String>();, +	private static final Set<String> nonReferencePointcutTokens = new HashSet<String>();, +			int algorithmicStep = STEP_JOIN_POINT_BINDING;, +			while ((this.numberOfRemainingUnboundArguments > 0) && algorithmicStep < STEP_FINISHED) {, +				switch (algorithmicStep++) {, +						throw new IllegalStateException("Unknown algorithmic step: " + (algorithmicStep - 1));, +		List<String> varNames = new ArrayList<String>();, +	private void bindAnnotationsFromVarNames(List<String> varNames) {, +					findAndBind(Annotation.class, varNames.get(0));, +			for (char tokenChar : tokenChars) {, +				if (!Character.isJavaIdentifierPart(tokenChar)) {, +	private void maybeExtractVariableNamesFromArgs(String argsSpec, List<String> varNames) {, +		List<String> varNames = new ArrayList<String>();, +				List<String> candidateVarNames = new ArrayList<String>();, +				for (String varName : candidateVarNames) {, +					bindParameterName(j, varNames.get(0));, +		List<String> varNames = new ArrayList<String>();, +					bindParameterName(j, varNames.get(0));, +			List<String> varNames = new ArrayList<String>();, +			if (isUnbound(i) && isSubtypeOf(Annotation.class, i)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2008 the original author or authors., +import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;, +	private static final List<Class> APC_PRIORITY_LIST = new ArrayList<Class>();, +		APC_PRIORITY_LIST.add(InfrastructureAdvisorAutoProxyCreator.class);, +		APC_PRIORITY_LIST.add(AspectJAwareAdvisorAutoProxyCreator.class);, +		APC_PRIORITY_LIST.add(AnnotationAwareAspectJAutoProxyCreator.class);, +		return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);, +				int requiredPriority = findPriorityForClass(cls);, +		beanDefinition.getPropertyValues().addPropertyValue("order", Ordered.HIGHEST_PRECEDENCE);, +	private static int findPriorityForClass(Class clazz) {, +		return APC_PRIORITY_LIST.indexOf(clazz);, +			Class clazz = APC_PRIORITY_LIST.get(i);, +			if (clazz.getName().equals(className)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +			List<BeanDefinition> beanDefinitions = new ArrayList<BeanDefinition>();, +			List<BeanReference> beanReferences = new ArrayList<BeanReference>();]