[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertOperations.java, +	 * <p>Note: This is only necessary to include for Oracle since other databases, +	 * supporting synonyms seems to include the synonyms automatically., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertOperations.java, +	 * <p>Note: This is only necessary to include for Oracle since other databases, +	 * supporting synonyms seems to include the synonyms automatically., +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +import org.springframework.jdbc.datasource.ConnectionProxy;, +	private Connection connection;, +, +	private DataSource dataSource;, +, +	private PreparedStatement preparedStatement;, +, +	private Statement statement;, +, +	private ResultSet resultSet;, +, +	private JdbcTemplate template;, +, +	private CallableStatement callableStatement;, +, +, +		doTestStrings(null, null, null, null, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +		doTestStrings(10, 20, 30, null, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +		doTestStrings(null, null, null, null, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +		doTestStrings(null, null, null, argument, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +		doTestStrings(null, null, null, null, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +		doTestStrings(null, null, null, argument, new JdbcTemplateCallback() {, +			public void doInJdbcTemplate(JdbcTemplate template, String sql, RowCallbackHandler rch) {, +	private void doTestStrings(Integer fetchSize, Integer maxRows, Integer queryTimeout,, +			Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception {, +	public void testConnectionCallback() throws Exception {, +		String result = this.template.execute(new ConnectionCallback<String>() {, +			@Override, +			public String doInConnection(Connection con) {, +				assertTrue(con instanceof ConnectionProxy);, +				assertSame(JdbcTemplateTests.this.connection, ((ConnectionProxy) con).getTargetConnection());, +				return "test";, +			}, +		});, +		assertEquals("test", result);, +	}, +, +	@Test, +			throws SQLException {, +, +			throws SQLException {, +, +]