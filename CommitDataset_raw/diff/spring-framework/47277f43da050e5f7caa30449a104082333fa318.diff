[+++ b/build.gradle, +	ext.javamailVersion        = "1.6.0-rc1", +	ext.rxjava2Version         = '2.0.8', +	ext.tomcatVersion          = "8.5.13", +	ext.undertowVersion        = "1.4.12.Final", +	ext.xnioVersion            = "3.4.5.Final", +		optional("org.apache.logging.log4j:log4j-api:${log4jVersion}"), +		optional("org.slf4j:slf4j-api:${slf4jVersion}"), +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/build.gradle, +	ext.javamailVersion        = "1.6.0-rc1", +	ext.rxjava2Version         = '2.0.8', +	ext.tomcatVersion          = "8.5.13", +	ext.undertowVersion        = "1.4.12.Final", +	ext.xnioVersion            = "3.4.5.Final", +		optional("org.apache.logging.log4j:log4j-api:${log4jVersion}"), +		optional("org.slf4j:slf4j-api:${slf4jVersion}"), +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/spring-core/src/main/java/org/apache/commons/logging/Log.java, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements.  See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License.  You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.apache.commons.logging;, +, +/**, + * A simple logging interface abstracting logging APIs.  In order to be, + * instantiated successfully by {@link LogFactory}, classes that implement, + * this interface must have a constructor that takes a single String, + * parameter representing the "name" of this Log., + * <p>, + * The six logging levels used by <code>Log</code> are (in order):, + * <ol>, + * <li>trace (the least serious)</li>, + * <li>debug</li>, + * <li>info</li>, + * <li>warn</li>, + * <li>error</li>, + * <li>fatal (the most serious)</li>, + * </ol>, + * The mapping of these log levels to the concepts used by the underlying, + * logging system is implementation dependent., + * The implementation should ensure, though, that this ordering behaves, + * as expected., + * <p>, + * Performance is often a logging concern., + * By examining the appropriate property,, + * a component can avoid expensive operations (producing information, + * to be logged)., + * <p>, + * For example,, + * <pre>, + *    if (log.isDebugEnabled()) {, + *        ... do something expensive ..., + *        log.debug(theResult);, + *    }, + * </pre>, + * <p>, + * Configuration of the underlying logging system will generally be done, + * external to the Logging APIs, through whatever mechanism is supported by, + * that system., + *, + * @version $Id: Log.java 1606045 2014-06-27 12:11:56Z tn $, + */, +public interface Log {, +, +    /**, +     * Logs a message with debug log level., +     *, +     * @param message log this message, +     */, +    void debug(Object message);, +, +    /**, +     * Logs an error with debug log level., +     *, +     * @param message log this message, +     * @param t log this cause, +     */, +    void debug(Object message, Throwable t);, +, +    /**, +     * Logs a message with error log level., +     *, +     * @param message log this message]