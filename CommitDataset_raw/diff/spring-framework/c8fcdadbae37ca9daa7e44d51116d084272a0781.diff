[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				? ((JmsResponse<?>) result).getResponse() : result);, +			JmsResponse<?> jmsResponse = (JmsResponse) result;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				? ((JmsResponse<?>) result).getResponse() : result);, +			JmsResponse<?> jmsResponse = (JmsResponse) result;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/JmsResponse.java, + * @param <T> the type of the response, +public class JmsResponse<T> {, +	private final T response;, +	protected JmsResponse(T response, Object destination) {, +	public static <T> JmsResponse<T> forQueue(T result, String queueName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(queueName, false));, +	public static <T> JmsResponse<T> forTopic(T result, String topicName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(topicName, true));, +	public static <T> JmsResponse<T> forDestination(T result, Destination destination) {, +		return new JmsResponse<T>(result, destination);, +	/**, +	 * Return the content of the response., +	 */, +	public T getResponse() {, +		return this.response;, +	/**, +	 * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}, +	 * and {@link Session} can be used to resolve a destination at runtime., +	 * @param destinationResolver the destination resolver to use if necessary, +	 * @param session the session to use, if necessary, +	 * @return the {@link Destination} to use, +	 * @throws JMSException if the DestinationResolver failed to resolve the destination, +	 */, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				? ((JmsResponse<?>) result).getResponse() : result);, +			JmsResponse<?> jmsResponse = (JmsResponse) result;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/JmsResponse.java, + * @param <T> the type of the response, +public class JmsResponse<T> {, +	private final T response;, +	protected JmsResponse(T response, Object destination) {, +	public static <T> JmsResponse<T> forQueue(T result, String queueName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(queueName, false));, +	public static <T> JmsResponse<T> forTopic(T result, String topicName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(topicName, true));, +	public static <T> JmsResponse<T> forDestination(T result, Destination destination) {, +		return new JmsResponse<T>(result, destination);, +	/**, +	 * Return the content of the response., +	 */, +	public T getResponse() {, +		return this.response;, +	/**, +	 * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}, +	 * and {@link Session} can be used to resolve a destination at runtime., +	 * @param destinationResolver the destination resolver to use if necessary, +	 * @param session the session to use, if necessary, +	 * @return the {@link Destination} to use, +	 * @throws JMSException if the DestinationResolver failed to resolve the destination, +	 */, +++ b/spring-jms/src/test/java/org/springframework/jms/listener/adapter/JmsResponseTests.java, +		JmsResponse<String> jmsResponse = JmsResponse.forQueue("foo", "myQueue");, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				? ((JmsResponse<?>) result).getResponse() : result);, +			JmsResponse<?> jmsResponse = (JmsResponse) result;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/JmsResponse.java, + * @param <T> the type of the response, +public class JmsResponse<T> {, +	private final T response;, +	protected JmsResponse(T response, Object destination) {, +	public static <T> JmsResponse<T> forQueue(T result, String queueName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(queueName, false));, +	public static <T> JmsResponse<T> forTopic(T result, String topicName) {, +		return new JmsResponse<T>(result, new DestinationNameHolder(topicName, true));, +	public static <T> JmsResponse<T> forDestination(T result, Destination destination) {, +		return new JmsResponse<T>(result, destination);, +	/**, +	 * Return the content of the response., +	 */, +	public T getResponse() {, +		return this.response;, +	/**, +	 * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}, +	 * and {@link Session} can be used to resolve a destination at runtime., +	 * @param destinationResolver the destination resolver to use if necessary, +	 * @param session the session to use, if necessary, +	 * @return the {@link Destination} to use, +	 * @throws JMSException if the DestinationResolver failed to resolve the destination, +	 */, +++ b/spring-jms/src/test/java/org/springframework/jms/listener/adapter/JmsResponseTests.java, +		JmsResponse<String> jmsResponse = JmsResponse.forQueue("foo", "myQueue");, +++ b/spring-jms/src/test/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapterTests.java, +		public JmsResponse<String> replyPayloadToQueue(Message<String> input) {, +		public JmsResponse<String> replyPayloadToTopic(Message<String> input) {, +		public JmsResponse<String> replyPayloadToDestination(Message<String> input) {, +		public JmsResponse<String> replyPayloadNoDestination(Message<String> input) {, +			return new JmsResponse<>(input.getPayload(), null);]