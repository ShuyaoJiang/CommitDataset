[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/MethodOverride.java, + * Copyright 2002-2014 the original author or authors., + * Object representing the override of a method on a managed object by the IoC, + * container., + * <p>Note that the override mechanism is <em>not</em> intended as a generic, + * means of inserting crosscutting code: use AOP for that., + * @author Sam Brannen, +	 * Set whether the overridden method is <em>overloaded</em> (i.e., whether argument, +	 * type matching needs to occur to disambiguate methods of the same name)., +	 * <p>Default is {@code true}; can be switched to {@code false} to optimize, +	 * runtime performance., +	 * Return whether the overridden method is <em>overloaded</em> (i.e., whether argument, +	 * type matching needs to occur to disambiguate methods of the same name)., +	 * Subclasses must override this to indicate whether they <em>match</em> the, +	 * given method. This allows for argument list checking as well as method, +	 * name checking., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/MethodOverride.java, + * Copyright 2002-2014 the original author or authors., + * Object representing the override of a method on a managed object by the IoC, + * container., + * <p>Note that the override mechanism is <em>not</em> intended as a generic, + * means of inserting crosscutting code: use AOP for that., + * @author Sam Brannen, +	 * Set whether the overridden method is <em>overloaded</em> (i.e., whether argument, +	 * type matching needs to occur to disambiguate methods of the same name)., +	 * <p>Default is {@code true}; can be switched to {@code false} to optimize, +	 * runtime performance., +	 * Return whether the overridden method is <em>overloaded</em> (i.e., whether argument, +	 * type matching needs to occur to disambiguate methods of the same name)., +	 * Subclasses must override this to indicate whether they <em>match</em> the, +	 * given method. This allows for argument list checking as well as method, +	 * name checking., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/DefinitionMetadataEqualsHashCodeTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +/**, + * Unit tests for {@code equals()} and {@code hashCode()} in bean definitions., + *, + * @author Rob Harrop, + * @author Sam Brannen, + */, +public class DefinitionMetadataEqualsHashCodeTests {, +, +	@Test, +	public void rootBeanDefinition() {, +		RootBeanDefinition subclass = new RootBeanDefinition(TestBean.class) {, +		};, +		assertEqualsAndHashCodeContracts(master, equal, notEqual, subclass);, +	/**, +	 * @since 3.2.8, +	 * @see <a href="https://jira.springsource.org/browse/SPR-11420">SPR-11420</a>, +	 */, +	@Test, +	public void rootBeanDefinitionAndMethodOverridesWithDifferentOverloadedValues() {, +		RootBeanDefinition master = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition equal = new RootBeanDefinition(TestBean.class);, +, +		setBaseProperties(master);, +		setBaseProperties(equal);, +, +		// Simulate AbstractBeanDefinition.validate() which delegates to, +		// AbstractBeanDefinition.prepareMethodOverrides():, +		master.getMethodOverrides().getOverrides().iterator().next().setOverloaded(false);, +		// But do not simulate validation of the 'equal' bean. As a consequence, a method, +		// override in 'equal' will be marked as overloaded, but the corresponding, +		// override in 'master' will not. But... the bean definitions should still be, +		// considered equal., +, +		assertEquals("Should be equal", master, equal);, +		assertEquals("Hash code for equal instances must match", master.hashCode(), equal.hashCode());, +	}, +, +	@Test, +	public void childBeanDefinition() {, +		ChildBeanDefinition subclass = new ChildBeanDefinition("foo") {, +		};, +		assertEqualsAndHashCodeContracts(master, equal, notEqual, subclass);, +	@Test, +	public void runtimeBeanReference() {, +		RuntimeBeanReference subclass = new RuntimeBeanReference("name") {, +		};, +		assertEqualsAndHashCodeContracts(master, equal, notEqual, subclass);, +, +	private void assertEqualsAndHashCodeContracts(Object master, Object equal, Object notEqual, Object subclass) {, +		assertEquals("Hash code for equal instances should match", master.hashCode(), equal.hashCode());, +, +		assertNotEquals("Should not be equal", master, notEqual);, +		assertNotEquals("Hash code for non-equal instances should not match", master.hashCode(), notEqual.hashCode());, +, +		assertEquals("Hash code for subclass should match", master.hashCode(), subclass.hashCode());]