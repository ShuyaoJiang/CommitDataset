[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Function<String, String> urlEncoder = url -> url;, +, +	@Override, +	@Override, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +		this.bodyWithFlushes = Flux.from(body).map(Flux::from);, +		return Flux.from(getBody()), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +				.map(buffer -> dumpString(buffer, charset));, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		Charset charset = null;, +			charset = contentType.getCharset();, +		return (charset != null ? charset : StandardCharsets.UTF_8);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Function<String, String> urlEncoder = url -> url;, +, +	@Override, +	@Override, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +		this.bodyWithFlushes = Flux.from(body).map(Flux::from);, +		return Flux.from(getBody()), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +				.map(buffer -> dumpString(buffer, charset));, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		Charset charset = null;, +			charset = contentType.getCharset();, +		return (charset != null ? charset : StandardCharsets.UTF_8);, +++ b/spring-web/src/test/java/org/springframework/mock/http/server/reactive/test/MockServerHttpRequest.java, + * @since 5.0, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Function<String, String> urlEncoder = url -> url;, +, +	@Override, +	@Override, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +		this.bodyWithFlushes = Flux.from(body).map(Flux::from);, +		return Flux.from(getBody()), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +				.map(buffer -> dumpString(buffer, charset));, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		Charset charset = null;, +			charset = contentType.getCharset();, +		return (charset != null ? charset : StandardCharsets.UTF_8);, +++ b/spring-web/src/test/java/org/springframework/mock/http/server/reactive/test/MockServerHttpRequest.java, + * @since 5.0, +++ b/spring-web/src/test/java/org/springframework/mock/http/server/reactive/test/MockServerHttpResponse.java, + * @since 5.0, +		this.bodyWithFlushes = Flux.from(body).map(Flux::from);, +		return Flux.from(getBody()), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charset));, +		Charset charset = null;, +			charset = contentType.getCharset();, +		return (charset != null ? charset : StandardCharsets.UTF_8);]