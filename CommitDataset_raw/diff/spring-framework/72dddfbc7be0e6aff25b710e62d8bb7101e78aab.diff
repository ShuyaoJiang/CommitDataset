[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor from a {@link ResolvableType}., +	 * <p>This constructor is used internally and may also be used by subclasses, +	 * that support non-Java languages with extended type systems. It is public, +	 * as of 5.1.4 whereas it was protected before., +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor from a {@link ResolvableType}., +	 * <p>This constructor is used internally and may also be used by subclasses, +	 * that support non-Java languages with extended type systems. It is public, +	 * as of 5.1.4 whereas it was protected before., +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * Copyright 2002-2019 the original author or authors., +	default DataBuffer ensureCapacity(int capacity) {, +		return this;, +	}, +		Assert.notNull(charSequence, "CharSequence must not be null");, +		Assert.notNull(charset, "Charset must not be null");, +		while (true) {, +			CoderResult cr = (inBuffer.hasRemaining() ?, +					charsetEncoder.encode(inBuffer, outBuffer, true) : CoderResult.UNDERFLOW);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor from a {@link ResolvableType}., +	 * <p>This constructor is used internally and may also be used by subclasses, +	 * that support non-Java languages with extended type systems. It is public, +	 * as of 5.1.4 whereas it was protected before., +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * Copyright 2002-2019 the original author or authors., +	default DataBuffer ensureCapacity(int capacity) {, +		return this;, +	}, +		Assert.notNull(charSequence, "CharSequence must not be null");, +		Assert.notNull(charset, "Charset must not be null");, +		while (true) {, +			CoderResult cr = (inBuffer.hasRemaining() ?, +					charsetEncoder.encode(inBuffer, outBuffer, true) : CoderResult.UNDERFLOW);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, + * Copyright 2002-2019 the original author or authors., + * @author Brian Clozel, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		if (newCapacity <= 0) {, +			throw new IllegalArgumentException(String.format("'newCapacity' %d must be higher than 0", newCapacity));, +		}, +		return (direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity));, +		assertIndex(index <= this.writePosition - 1, "index %d must be <= %d", index, this.writePosition - 1);, +		Assert.notNull(destination, "Byte array must not be null");, +		Assert.notNull(destination, "Byte array must not be null");, +		Assert.notNull(source, "Byte array must not be null");, +		Assert.notNull(source, "Byte array must not be null");, +	public DefaultDataBuffer write(ByteBuffer... buffers) {, +		if (!ObjectUtils.isEmpty(buffers)) {, +			int capacity = Arrays.stream(buffers).mapToInt(ByteBuffer::remaining).sum();, +			Arrays.stream(buffers).forEach(this::write);, +		}, +	private void assertIndex(boolean expression, String format, Object... args) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor from a {@link ResolvableType}., +	 * <p>This constructor is used internally and may also be used by subclasses, +	 * that support non-Java languages with extended type systems. It is public, +	 * as of 5.1.4 whereas it was protected before., +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * Copyright 2002-2019 the original author or authors., +	default DataBuffer ensureCapacity(int capacity) {, +		return this;, +	}, +		Assert.notNull(charSequence, "CharSequence must not be null");, +		Assert.notNull(charset, "Charset must not be null");, +		while (true) {, +			CoderResult cr = (inBuffer.hasRemaining() ?, +					charsetEncoder.encode(inBuffer, outBuffer, true) : CoderResult.UNDERFLOW);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, + * Copyright 2002-2019 the original author or authors., + * @author Brian Clozel, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		if (newCapacity <= 0) {, +			throw new IllegalArgumentException(String.format("'newCapacity' %d must be higher than 0", newCapacity));, +		}, +		return (direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity));, +		assertIndex(index <= this.writePosition - 1, "index %d must be <= %d", index, this.writePosition - 1);, +		Assert.notNull(destination, "Byte array must not be null");, +		Assert.notNull(destination, "Byte array must not be null");, +		Assert.notNull(source, "Byte array must not be null");, +		Assert.notNull(source, "Byte array must not be null");, +	public DefaultDataBuffer write(ByteBuffer... buffers) {, +		if (!ObjectUtils.isEmpty(buffers)) {, +			int capacity = Arrays.stream(buffers).mapToInt(ByteBuffer::remaining).sum();, +			Arrays.stream(buffers).forEach(this::write);, +		}, +	private void assertIndex(boolean expression, String format, Object... args) {, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, + * Copyright 2002-2019 the original author or authors., + * @author Brian Clozel, +		Assert.notNull(charSequence, "CharSequence must not be null");, +		Assert.notNull(charset, "Charset must not be null");, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor from a {@link ResolvableType}., +	 * <p>This constructor is used internally and may also be used by subclasses, +	 * that support non-Java languages with extended type systems. It is public, +	 * as of 5.1.4 whereas it was protected before.]