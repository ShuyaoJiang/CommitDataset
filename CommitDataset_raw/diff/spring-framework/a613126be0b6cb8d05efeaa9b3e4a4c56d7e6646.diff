[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * General utility methods for working with annotations, handling bridge methods, + * (which the compiler generates for generic declarations) as well as super methods, + * (for optional &quot;annotation inheritance&quot;). Note that none of this is, + * provided by the JDK's introspection facilities themselves., + * <p>As a general rule for runtime-retained annotations (e.g. for transaction, + * control, authorization, or service exposure), always use the lookup methods, + * on this class (e.g., {@link #findAnnotation(Method, Class)},, + * {@link #getAnnotation(Method, Class)}, and {@link #getAnnotations(Method)}), + * instead of the plain annotation lookup methods in the JDK. You can still, + * explicitly choose between a <em>get</em> lookup on the given class level only, + * ({@link #getAnnotation(Method, Class)}) and a <em>find</em> lookup in the entire, + * inheritance hierarchy of the given method ({@link #findAnnotation(Method, Class)})., +	 * Find a single {@link Annotation} of {@code annotationType} from the supplied, +	 * {@link Method}, traversing its super methods (i.e., from super classes and, +	 * interfaces) if no annotation can be found on the given method itself., +	 * <p>Annotations on methods are not inherited by default, so we need to handle, +	 * this explicitly., +	 * Find a single {@link Annotation} of {@code annotationType} from the supplied, +	 * {@link Class}, traversing its annotations, interfaces, and superclasses if, +	 * no annotation can be found on the given class itself., +	 * <p>This method explicitly handles class-level annotations which are not, +	 * declared as {@link java.lang.annotation.Inherited inherited} <i>as well, +	 * as meta-annotations and annotations on interfaces</i>., +	 * <p>The algorithm operates as follows:, +	 * <ol>, +	 * <li>Search for an annotation on the given class and return it if found., +	 * <li>Recursively search through all interfaces that the given class, +	 * declares, returning the annotation from the first matching candidate, if any., +	 * <li>Recursively search through all annotations that the given class, +	 * declares, returning the annotation from the first matching candidate, if any., +	 * <li>Proceed with introspection of the superclass hierarchy of the given, +	 * class by returning to step #1 with the superclass as the class to look for, +	 * annotations on., +	 * </ol>]