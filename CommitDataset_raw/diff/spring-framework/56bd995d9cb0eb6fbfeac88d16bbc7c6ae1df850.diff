[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/JspAwareRequestContext.java, +import javax.servlet.http.HttpServletResponse;, +		initContext((HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse(),, +				pageContext.getServletContext(), model);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/JspAwareRequestContext.java, +import javax.servlet.http.HttpServletResponse;, +		initContext((HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse(),, +				pageContext.getServletContext(), model);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +			"javax.servlet.jsp.jstl.core.Config", RequestContext.class.getClassLoader());, +	private HttpServletResponse response;, +, +		initContext(request, null, null, null);, +		initContext(request, null, servletContext, null);, +		initContext(request, null, null, model);, +	 * @param response current HTTP response, +	public RequestContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +, +		initContext(request, response, servletContext, model);, +	protected void initContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +, +		this.response = response;, +	 * Return a context-aware URl for the given relative URL., +	 * @param relativeUrl the relative URL part, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl) {, +		String url = getContextPath() + relativeUrl;, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/JspAwareRequestContext.java, +import javax.servlet.http.HttpServletResponse;, +		initContext((HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse(),, +				pageContext.getServletContext(), model);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +			"javax.servlet.jsp.jstl.core.Config", RequestContext.class.getClassLoader());, +	private HttpServletResponse response;, +, +		initContext(request, null, null, null);, +		initContext(request, null, servletContext, null);, +		initContext(request, null, null, model);, +	 * @param response current HTTP response, +	public RequestContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +, +		initContext(request, response, servletContext, model);, +	protected void initContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +, +		this.response = response;, +	 * Return a context-aware URl for the given relative URL., +	 * @param relativeUrl the relative URL part, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl) {, +		String url = getContextPath() + relativeUrl;, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractTemplateView.java, + * Copyright 2002-2009 the original author or authors., +					new RequestContext(request, response, getServletContext(), model));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/JspAwareRequestContext.java, +import javax.servlet.http.HttpServletResponse;, +		initContext((HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse(),, +				pageContext.getServletContext(), model);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +			"javax.servlet.jsp.jstl.core.Config", RequestContext.class.getClassLoader());, +	private HttpServletResponse response;, +, +		initContext(request, null, null, null);, +		initContext(request, null, servletContext, null);, +		initContext(request, null, null, model);, +	 * @param response current HTTP response, +	public RequestContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +, +		initContext(request, response, servletContext, model);, +	protected void initContext(HttpServletRequest request, HttpServletResponse response,, +			ServletContext servletContext, Map<String, Object> model) {, +]