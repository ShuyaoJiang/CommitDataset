[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +	public static Session getTransactionalSession(final ConnectionFactory cf,, +			final Connection existingCon, final boolean synchedLocalTransactionAllowed), +	public static QueueSession getTransactionalQueueSession(final QueueConnectionFactory cf,, +			final QueueConnection existingCon, final boolean synchedLocalTransactionAllowed), +	public static TopicSession getTransactionalTopicSession(final TopicConnectionFactory cf,, +			final TopicConnection existingCon, final boolean synchedLocalTransactionAllowed), +				return ((TopicConnection) con).createTopicSession(, +						synchedLocalTransactionAllowed, Session.AUTO_ACKNOWLEDGE);, +					new JmsResourceSynchronization(resourceHolderToUse, connectionFactory,, +							resourceFactory.isSynchedLocalTransactionAllowed()));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +	public static Session getTransactionalSession(final ConnectionFactory cf,, +			final Connection existingCon, final boolean synchedLocalTransactionAllowed), +	public static QueueSession getTransactionalQueueSession(final QueueConnectionFactory cf,, +			final QueueConnection existingCon, final boolean synchedLocalTransactionAllowed), +	public static TopicSession getTransactionalTopicSession(final TopicConnectionFactory cf,, +			final TopicConnection existingCon, final boolean synchedLocalTransactionAllowed), +				return ((TopicConnection) con).createTopicSession(, +						synchedLocalTransactionAllowed, Session.AUTO_ACKNOWLEDGE);, +					new JmsResourceSynchronization(resourceHolderToUse, connectionFactory,, +							resourceFactory.isSynchedLocalTransactionAllowed()));, +++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionCallbackWithoutResult.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +	public static Session getTransactionalSession(final ConnectionFactory cf,, +			final Connection existingCon, final boolean synchedLocalTransactionAllowed), +	public static QueueSession getTransactionalQueueSession(final QueueConnectionFactory cf,, +			final QueueConnection existingCon, final boolean synchedLocalTransactionAllowed), +	public static TopicSession getTransactionalTopicSession(final TopicConnectionFactory cf,, +			final TopicConnection existingCon, final boolean synchedLocalTransactionAllowed), +				return ((TopicConnection) con).createTopicSession(, +						synchedLocalTransactionAllowed, Session.AUTO_ACKNOWLEDGE);, +					new JmsResourceSynchronization(resourceHolderToUse, connectionFactory,, +							resourceFactory.isSynchedLocalTransactionAllowed()));, +++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionCallbackWithoutResult.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +	public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(, +			P publisher, Class<T> elementClass) {, +	public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(, +			P publisher, ResolvableType elementType) {, +	 * <p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will, +	 * be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>., +						"Could not find HttpMessageWriter that supports Resource objects"));, +	public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(, +			MultiValueMap<String, String> formData) {, +		Assert.notNull(formData, "'formData' must not be null");, +	private static <T> HttpMessageWriter<T> findMessageWriter(, +			BodyInserter.Context context, ResolvableType type, MediaType mediaType) {, +	 * Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body., +	public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(, +			T publisher) {, +		Assert.notNull(publisher, "'publisher' must not be null");, +	private static <T, P extends Publisher<?>, M extends ReactiveHttpOutputMessage> BodyInserter<T, M> bodyInserterFor(, +			P body, ResolvableType bodyType) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/support/SqlLobValue.java, + * Copyright 2002-2017 the original author or authors., +	public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/package-info.java, + * Provides a strategy interface for Large OBject handling,, + * as well as a customizable default implementation., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +	public static Session getTransactionalSession(final ConnectionFactory cf,, +			final Connection existingCon, final boolean synchedLocalTransactionAllowed), +	public static QueueSession getTransactionalQueueSession(final QueueConnectionFactory cf,, +			final QueueConnection existingCon, final boolean synchedLocalTransactionAllowed), +	public static TopicSession getTransactionalTopicSession(final TopicConnectionFactory cf,, +			final TopicConnection existingCon, final boolean synchedLocalTransactionAllowed)]