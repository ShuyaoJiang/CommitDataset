[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java, + * Copyright 2002-2015 the original author or authors., +import java.util.HashMap;, +, +, + * A WebSocketClient based on standard Java WebSocket API., +	private final Map<String,Object> userProperties = new HashMap<String, Object>();, +, +	 * The standard Java WebSocket API allows passing "user properties" to the, +	 * server via {@link ClientEndpointConfig#getUserProperties() userProperties}., +	 * Use this property to configure one or more properties to be passed on, +	 * every handshake., +	 */, +	public void setUserProperties(Map<String, Object> userProperties) {, +		if (userProperties != null) {, +			this.userProperties.putAll(userProperties);, +		}, +	}, +, +	/**, +	 * The configured user properties, or {@code null}., +	 */, +	public Map<String, Object> getUserProperties() {, +		return this.userProperties;, +	}, +, +	/**, +		final ClientEndpointConfig endpointConfig = ClientEndpointConfig.Builder.create(), +				.configurator(new StandardWebSocketClientConfigurator(headers)), +				.preferredSubprotocols(protocols), +				.extensions(adaptExtensions(extensions)).build();, +, +		endpointConfig.getUserProperties().putAll(getUserProperties());, +, +				webSocketContainer.connectToServer(endpoint, endpointConfig, uri);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java, + * Copyright 2002-2015 the original author or authors., +import java.util.HashMap;, +, +, + * A WebSocketClient based on standard Java WebSocket API., +	private final Map<String,Object> userProperties = new HashMap<String, Object>();, +, +	 * The standard Java WebSocket API allows passing "user properties" to the, +	 * server via {@link ClientEndpointConfig#getUserProperties() userProperties}., +	 * Use this property to configure one or more properties to be passed on, +	 * every handshake., +	 */, +	public void setUserProperties(Map<String, Object> userProperties) {, +		if (userProperties != null) {, +			this.userProperties.putAll(userProperties);, +		}, +	}, +, +	/**, +	 * The configured user properties, or {@code null}., +	 */, +	public Map<String, Object> getUserProperties() {, +		return this.userProperties;, +	}, +, +	/**, +		final ClientEndpointConfig endpointConfig = ClientEndpointConfig.Builder.create(), +				.configurator(new StandardWebSocketClientConfigurator(headers)), +				.preferredSubprotocols(protocols), +				.extensions(adaptExtensions(extensions)).build();, +, +		endpointConfig.getUserProperties().putAll(getUserProperties());, +, +				webSocketContainer.connectToServer(endpoint, endpointConfig, uri);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/client/standard/StandardWebSocketClientTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +, +, +	public void testGetLocalAddress() throws Exception {, +		URI uri = new URI("ws://localhost/abc");, +	public void testGetLocalAddressWss() throws Exception {, +		URI uri = new URI("wss://localhost/abc");, +	public void testGetLocalAddressNoScheme() throws Exception {, +		URI uri = new URI("localhost/abc");, +	public void testGetRemoteAddress() throws Exception {, +		URI uri = new URI("wss://localhost/abc");, +		assertEquals("localhost", session.getRemoteAddress().getHostName());, +	public void handshakeHeaders() throws Exception {, +		URI uri = new URI("ws://localhost/abc");, +		List<String> protocols = Collections.singletonList("abc");, +		assertEquals(1, session.getHandshakeHeaders().size());, +		assertEquals("bar", session.getHandshakeHeaders().getFirst("foo"));, +	public void clientEndpointConfig() throws Exception {, +		URI uri = new URI("ws://localhost/abc");, +		List<String> protocols = Collections.singletonList("abc");, +, +		this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get();, +, +		ArgumentCaptor<ClientEndpointConfig> captor = ArgumentCaptor.forClass(ClientEndpointConfig.class);, +		verify(this.wsContainer).connectToServer(any(Endpoint.class), captor.capture(), any(URI.class));, +		ClientEndpointConfig endpointConfig = captor.getValue();, +]