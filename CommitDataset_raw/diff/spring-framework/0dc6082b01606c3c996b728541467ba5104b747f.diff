[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	/** Java 8's java.util.Optional.empty() instance */, +	private static Object javaUtilOptionalEmpty = null;, +, +	static {, +		try {, +			Class<?> clazz = ClassUtils.forName("java.util.Optional", TypeConverterDelegate.class.getClassLoader());, +			javaUtilOptionalEmpty = ClassUtils.getMethod(clazz, "empty").invoke(null);, +		} catch (Exception ex) {, +			// Java 8 not available - conversion to Optional not supported then., +		}, +	}, +, +, +			else if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {, +				convertedValue = javaUtilOptionalEmpty;, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	/** Java 8's java.util.Optional.empty() instance */, +	private static Object javaUtilOptionalEmpty = null;, +, +	static {, +		try {, +			Class<?> clazz = ClassUtils.forName("java.util.Optional", TypeConverterDelegate.class.getClassLoader());, +			javaUtilOptionalEmpty = ClassUtils.getMethod(clazz, "empty").invoke(null);, +		} catch (Exception ex) {, +			// Java 8 not available - conversion to Optional not supported then., +		}, +	}, +, +, +			else if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {, +				convertedValue = javaUtilOptionalEmpty;, +			}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +	/** Java 8's java.util.Optional class available? */, +	private static final boolean javaUtilOptionalClassAvailable =, +			ClassUtils.isPresent("java.util.Optional", DefaultConversionService.class.getClassLoader());, +, +		if (javaUtilOptionalClassAvailable) {, +			converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry));, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	/** Java 8's java.util.Optional.empty() instance */, +	private static Object javaUtilOptionalEmpty = null;, +, +	static {, +		try {, +			Class<?> clazz = ClassUtils.forName("java.util.Optional", TypeConverterDelegate.class.getClassLoader());, +			javaUtilOptionalEmpty = ClassUtils.getMethod(clazz, "empty").invoke(null);, +		} catch (Exception ex) {, +			// Java 8 not available - conversion to Optional not supported then., +		}, +	}, +, +, +			else if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {, +				convertedValue = javaUtilOptionalEmpty;, +			}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +	/** Java 8's java.util.Optional class available? */, +	private static final boolean javaUtilOptionalClassAvailable =, +			ClassUtils.isPresent("java.util.Optional", DefaultConversionService.class.getClassLoader());, +, +		if (javaUtilOptionalClassAvailable) {, +			converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry));, +		}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	/** Java 8's java.util.Optional.empty() */, +	private static Object javaUtilOptionalEmpty = null;, +, +	static {, +		try {, +			Class<?> clazz = ClassUtils.forName("java.util.Optional", GenericConversionService.class.getClassLoader());, +			javaUtilOptionalEmpty = ClassUtils.getMethod(clazz, "empty").invoke(null);, +		} catch (Exception ex) {, +			// Java 8 not available - conversion to Optional not supported then., +		}, +	}, +, +	 * <p>Default implementation returns {@code null} or the Java 8, +	 * {@link java.util.Optional#empty()} instance if the target type is, +	 * {@code java.uti.Optional}., +		if (targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {, +			return javaUtilOptionalEmpty;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	/** Java 8's java.util.Optional.empty() instance */, +	private static Object javaUtilOptionalEmpty = null;, +, +	static {, +		try {, +			Class<?> clazz = ClassUtils.forName("java.util.Optional", TypeConverterDelegate.class.getClassLoader());, +			javaUtilOptionalEmpty = ClassUtils.getMethod(clazz, "empty").invoke(null);, +		} catch (Exception ex) {, +			// Java 8 not available - conversion to Optional not supported then., +		}, +	}, +, +]