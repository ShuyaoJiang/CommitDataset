[+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +		if (annotations.size() == 1) {, +			return annotations.iterator().next().value();, +		}, +, +		// Allow directly-present annotation to override annotations that are meta-present., +		BootstrapWith bootstrapWith = testClass.getDeclaredAnnotation(BootstrapWith.class);, +		if (bootstrapWith != null) {, +			return bootstrapWith.value();, +		}, +, +		throw new IllegalStateException(String.format(, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +		if (annotations.size() == 1) {, +			return annotations.iterator().next().value();, +		}, +, +		// Allow directly-present annotation to override annotations that are meta-present., +		BootstrapWith bootstrapWith = testClass.getDeclaredAnnotation(BootstrapWith.class);, +		if (bootstrapWith != null) {, +			return bootstrapWith.value();, +		}, +, +		throw new IllegalStateException(String.format(, +++ b/spring-test/src/test/java/org/springframework/test/context/BootstrapUtilsTests.java, +	/**, +	 * @since 5.1, +	 */, +	@Test, +	public void resolveTestContextBootstrapperWithLocalDeclarationThatOverridesMetaBootstrapWithAnnotations() {, +		assertBootstrapper(LocalDeclarationAndMetaAnnotatedBootstrapWithAnnotationClass.class, EnigmaBootstrapper.class);, +	}, +, +	static class EnigmaBootstrapper extends DefaultTestContextBootstrapper {}, +, +	@BootWithFoo, +	@BootWithBar, +	@BootstrapWith(EnigmaBootstrapper.class), +	static class LocalDeclarationAndMetaAnnotatedBootstrapWithAnnotationClass {}, +	]