[+++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, + * Copyright 2002-2013 the original author or authors., +		assertEquals(Integer.class,, +			resolveReturnTypeArgument(findMethod(MyTypeWithMethods.class, "integer"), MyInterfaceType.class));, +		assertEquals(String.class,, +			resolveReturnTypeArgument(findMethod(MyTypeWithMethods.class, "string"), MyInterfaceType.class));, +		assertEquals(null,, +			resolveReturnTypeArgument(findMethod(MyTypeWithMethods.class, "object"), MyInterfaceType.class));, +		Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage",, +			MyInterfaceType[].class);, +		Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage",, +			Object[].class);, +, +		public MyInterfaceType<Integer> integer() {, +			return null;, +		}, +, +		public MySimpleInterfaceType string() {, +			return null;, +		}, +, +		public Object object() {, +			return null;, +		}, +, +		public MyInterfaceType raw() {, +			return null;, +		}, +, +		public String notParameterized() {, +			return null;, +		}, +, +		public String notParameterizedWithArguments(Integer x, Boolean b) {, +			return null;, +		}, +		 * Simulates a factory method that wraps the supplied object in a proxy of the, +		 * same type., +		 * Similar to {@link #createProxy(Object)} but adds an additional argument before, +		 * the argument of type {@code T}. Note that they may potentially be of the same, +		 * time when invoked!, +		 * Similar to {@link #createMock(Class)} but adds an additional method argument, +		 * before the parameterized argument., +		 * Extract some value of the type supported by the interface (i.e., by a concrete,, +		 * non-generic implementation of the interface).]