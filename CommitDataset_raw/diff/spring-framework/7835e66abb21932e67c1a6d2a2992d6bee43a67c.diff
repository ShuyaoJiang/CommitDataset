[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				String localName = parserContext.getDelegate().getLocalName(node);, +				if (isAdviceNode(node, parserContext)) {, +	private boolean isAdviceNode(Node aNode, ParserContext parserContext) {, +			String name = parserContext.getDelegate().getLocalName(aNode);, +			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));, +		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));, +	private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {, +		String elementName = parserContext.getDelegate().getLocalName(adviceElement);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				String localName = parserContext.getDelegate().getLocalName(node);, +				if (isAdviceNode(node, parserContext)) {, +	private boolean isAdviceNode(Node aNode, ParserContext parserContext) {, +			String name = parserContext.getDelegate().getLocalName(aNode);, +			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));, +		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));, +	private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {, +		String elementName = parserContext.getDelegate().getLocalName(adviceElement);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java, +							"Id is required for element '" + parserContext.getDelegate().getLocalName(element), +									+ "' when used as a top-level tag", element);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				String localName = parserContext.getDelegate().getLocalName(node);, +				if (isAdviceNode(node, parserContext)) {, +	private boolean isAdviceNode(Node aNode, ParserContext parserContext) {, +			String name = parserContext.getDelegate().getLocalName(aNode);, +			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));, +		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));, +	private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {, +		String elementName = parserContext.getDelegate().getLocalName(adviceElement);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java, +							"Id is required for element '" + parserContext.getDelegate().getLocalName(element), +									+ "' when used as a top-level tag", element);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandler.java, +			String propertyName = parserContext.getDelegate().getLocalName(attr);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				String localName = parserContext.getDelegate().getLocalName(node);, +				if (isAdviceNode(node, parserContext)) {, +	private boolean isAdviceNode(Node aNode, ParserContext parserContext) {, +			String name = parserContext.getDelegate().getLocalName(aNode);, +			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));, +		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));, +	private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {, +		String elementName = parserContext.getDelegate().getLocalName(adviceElement);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java, +							"Id is required for element '" + parserContext.getDelegate().getLocalName(element), +									+ "' when used as a top-level tag", element);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandler.java, +			String propertyName = parserContext.getDelegate().getLocalName(attr);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java, +	private static final String ELEMENT_SCHEDULED = "scheduled";, +, +			if (!isScheduledElement(child, parserContext)) {, +	private boolean isScheduledElement(Node node, ParserContext parserContext) {, +		return node.getNodeType() == Node.ELEMENT_NODE &&, +				ELEMENT_SCHEDULED.equals(parserContext.getDelegate().getLocalName(node));, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				String localName = parserContext.getDelegate().getLocalName(node);, +				if (isAdviceNode(node, parserContext)) {, +	private boolean isAdviceNode(Node aNode, ParserContext parserContext) {, +			String name = parserContext.getDelegate().getLocalName(aNode);, +			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)));, +		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext));, +	private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {, +		String elementName = parserContext.getDelegate().getLocalName(adviceElement);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java, +							"Id is required for element '" + parserContext.getDelegate().getLocalName(element), +									+ "' when used as a top-level tag", element);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandler.java, +			String propertyName = parserContext.getDelegate().getLocalName(attr);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java, +	private static final String ELEMENT_SCHEDULED = "scheduled";, +, +			if (!isScheduledElement(child, parserContext)) {, +	private boolean isScheduledElement(Node node, ParserContext parserContext) {, +		return node.getNodeType() == Node.ELEMENT_NODE &&, +				ELEMENT_SCHEDULED.equals(parserContext.getDelegate().getLocalName(node));, +	}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, +				String localName = parserContext.getDelegate().getLocalName(child);]