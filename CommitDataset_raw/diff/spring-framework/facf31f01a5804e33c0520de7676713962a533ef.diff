[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java, +	 * Set the ThreadFactory to use for the ExecutorService's thread pool., +	 * Default is the underlying ExecutorService's default thread factory., +	 * Set the RejectedExecutionHandler to use for the ExecutorService., +	 * Default is the ExecutorService's default abort policy., +	 * Perform a shutdown on the underlying ExecutorService., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java, +	 * Set the ThreadFactory to use for the ExecutorService's thread pool., +	 * Default is the underlying ExecutorService's default thread factory., +	 * Set the RejectedExecutionHandler to use for the ExecutorService., +	 * Default is the ExecutorService's default abort policy., +	 * Perform a shutdown on the underlying ExecutorService., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2013 the original author or authors., + * cancelling it on destruction of the context. In scenarios that only require static, + * {@link ScheduledExecutorService} instance itself in application code at all;, + * ScheduledExecutorFactoryBean is then just being used for lifecycle integration., +	public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {, +		return (this.continueScheduledExecutionAfterException ?, +				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :, +				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER));, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java, +	 * Set the ThreadFactory to use for the ExecutorService's thread pool., +	 * Default is the underlying ExecutorService's default thread factory., +	 * Set the RejectedExecutionHandler to use for the ExecutorService., +	 * Default is the ExecutorService's default abort policy., +	 * Perform a shutdown on the underlying ExecutorService., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2013 the original author or authors., + * cancelling it on destruction of the context. In scenarios that only require static, + * {@link ScheduledExecutorService} instance itself in application code at all;, + * ScheduledExecutorFactoryBean is then just being used for lifecycle integration., +	public void setScheduledExecutorTasks(ScheduledExecutorTask... scheduledExecutorTasks) {, +		return (this.continueScheduledExecutionAfterException ?, +				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER) :, +				new DelegatingErrorHandlingRunnable(task.getRunnable(), TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER));, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.java, +	 * <p>Default is "false".]