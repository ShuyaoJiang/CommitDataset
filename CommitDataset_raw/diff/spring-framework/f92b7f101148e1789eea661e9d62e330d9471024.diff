[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.http.HttpInputMessage;, + * #setSupportedMediaTypes(List) supportedMediaTypes} bean property. It also adds support for {@code Content-Type} and, + * {@code Content-Length} when writing to output messages., +	 * {@inheritDoc} <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}. Future, +	 * implementations might add some default behavior, however., +	 */, +	public final T read(Class<T> clazz, HttpInputMessage inputMessage) throws IOException {, +		return readInternal(clazz, inputMessage);, +	}, +, +	/**, +	 * Abstract template method that reads the actualy object. Invoked from {@link #read(Class, HttpInputMessage)}., +	 * @param clazz the type of object to return, +	 * @param inputMessage the HTTP input message to read from, +	 * @return the converted object, +	 * @throws IOException in case of I/O errors, +	 * @throws HttpMessageNotReadableException in case of conversion errors, +	 */, +	protected abstract T readInternal(Class<T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException;, +, +	/**, +	 * {@inheritDoc} <p>This implementation delegates to {@link #getContentType(Object)} and {@link, +	 * #getContentLength(Object)}, and sets the corresponding headers on the output message. It then calls {@link, +	 * #writeInternal(Object, HttpOutputMessage)}., +	 * Returns the content type for the given type. <p>By default, this returns the first element of the {@link, +	 * #setSupportedMediaTypes(List) supportedMediaTypes} property, if any. Can be overriden in subclasses., +	 * Returns the content length for the given type. <p>By default, this returns <code>null</code>. Can be overriden in, +	 * subclasses., +	 * @throws HttpMessageNotWritableException in case of conversion errors, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.http.HttpInputMessage;, + * #setSupportedMediaTypes(List) supportedMediaTypes} bean property. It also adds support for {@code Content-Type} and, + * {@code Content-Length} when writing to output messages., +	 * {@inheritDoc} <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}. Future, +	 * implementations might add some default behavior, however., +	 */, +	public final T read(Class<T> clazz, HttpInputMessage inputMessage) throws IOException {, +		return readInternal(clazz, inputMessage);, +	}, +, +	/**, +	 * Abstract template method that reads the actualy object. Invoked from {@link #read(Class, HttpInputMessage)}., +	 * @param clazz the type of object to return, +	 * @param inputMessage the HTTP input message to read from, +	 * @return the converted object, +	 * @throws IOException in case of I/O errors, +	 * @throws HttpMessageNotReadableException in case of conversion errors, +	 */, +	protected abstract T readInternal(Class<T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException;, +, +	/**, +	 * {@inheritDoc} <p>This implementation delegates to {@link #getContentType(Object)} and {@link, +	 * #getContentLength(Object)}, and sets the corresponding headers on the output message. It then calls {@link, +	 * #writeInternal(Object, HttpOutputMessage)}., +	 * Returns the content type for the given type. <p>By default, this returns the first element of the {@link, +	 * #setSupportedMediaTypes(List) supportedMediaTypes} property, if any. Can be overriden in subclasses., +	 * Returns the content length for the given type. <p>By default, this returns <code>null</code>. Can be overriden in, +	 * subclasses., +	 * @throws HttpMessageNotWritableException in case of conversion errors, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ByteArrayHttpMessageConverter.java, +	@Override, +	public byte[] readInternal(Class<byte[]> clazz, HttpInputMessage inputMessage) throws IOException {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.http.HttpInputMessage;, + * #setSupportedMediaTypes(List) supportedMediaTypes} bean property. It also adds support for {@code Content-Type} and, + * {@code Content-Length} when writing to output messages., +	 * {@inheritDoc} <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}. Future, +	 * implementations might add some default behavior, however., +	 */, +	public final T read(Class<T> clazz, HttpInputMessage inputMessage) throws IOException {, +		return readInternal(clazz, inputMessage);, +	}, +, +	/**, +	 * Abstract template method that reads the actualy object. Invoked from {@link #read(Class, HttpInputMessage)}., +	 * @param clazz the type of object to return, +	 * @param inputMessage the HTTP input message to read from, +	 * @return the converted object, +	 * @throws IOException in case of I/O errors, +	 * @throws HttpMessageNotReadableException in case of conversion errors, +	 */, +	protected abstract T readInternal(Class<T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException;, +, +	/**, +	 * {@inheritDoc} <p>This implementation delegates to {@link #getContentType(Object)} and {@link, +	 * #getContentLength(Object)}, and sets the corresponding headers on the output message. It then calls {@link, +	 * #writeInternal(Object, HttpOutputMessage)}., +	 * Returns the content type for the given type. <p>By default, this returns the first element of the {@link, +	 * #setSupportedMediaTypes(List) supportedMediaTypes} property, if any. Can be overriden in subclasses., +	 * Returns the content length for the given type. <p>By default, this returns <code>null</code>. Can be overriden in, +	 * subclasses., +	 * @throws HttpMessageNotWritableException in case of conversion errors]