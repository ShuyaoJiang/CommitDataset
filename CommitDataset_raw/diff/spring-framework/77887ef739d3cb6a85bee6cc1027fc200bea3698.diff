[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, +		Object objectToValidate = AopProxyUtils.getSingletonTarget(bean);, +		if (objectToValidate == null) {, +			objectToValidate = bean;, +		}, +		Set<ConstraintViolation<Object>> result = this.validator.validate(objectToValidate);, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, +		Object objectToValidate = AopProxyUtils.getSingletonTarget(bean);, +		if (objectToValidate == null) {, +			objectToValidate = bean;, +		}, +		Set<ConstraintViolation<Object>> result = this.validator.validate(objectToValidate);, +, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;, +	public void testNotNullConstraintAfterInitializationWithProxy() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		RootBeanDefinition bvpp = new RootBeanDefinition(BeanValidationPostProcessor.class);, +		bvpp.getPropertyValues().add("afterInitialization", true);, +		ac.registerBeanDefinition("bvpp", bvpp);, +		ac.registerBeanDefinition("capp", new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class));, +		ac.registerBeanDefinition("bean", new RootBeanDefinition(AfterInitConstraintBean.class));, +		ac.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class));, +		ac.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class));, +		ac.refresh();, +		ac.close();, +	}, +, +	@Test, +, +		@Async, +		void asyncMethod() {, +		}]