[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +import java.util.function.Function;, +	static PathContainer createFromPath(String path) {, +		return parsePathInternal(path, DefaultPathSegment::new);, +	}, +, +	private static PathContainer parsePathInternal(String path, Function<String, PathSegment> segmentParser) {, +				elements.add(segmentParser.apply(segment));, +	static PathContainer createFromUrlPath(String path, Charset charset) {, +		return parsePathInternal(path, segment -> parseUrlPathSegment(segment, charset));, +	}, +, +	private static PathContainer.UrlPathSegment parseUrlPathSegment(String input, Charset charset) {, +			return new DefaultUrlPathSegment(input, valueToMatch, EMPTY_MAP);, +			MultiValueMap<String, String> parameters = parsePathParams(pathParameterContent, charset);, +			return new DefaultUrlPathSegment(input, valueToMatch, parameters);, +	private static MultiValueMap<String, String> parsePathParams(String input, Charset charset) {, +			parsePathParamValues(param, charset, result);, +	private static void parsePathParamValues(String input, Charset charset, MultiValueMap<String, String> output) {, +	private static class DefaultPathSegment implements PathSegment {, +		private final char[] valueAsChars;, +		DefaultPathSegment(String value) {, +			this.valueAsChars = value.toCharArray();, +, +			return this.value;, +			return this.valueAsChars;, +			return "[value='" + this.value + "']"; }, +	}, +, +, +	private static class DefaultUrlPathSegment extends DefaultPathSegment implements UrlPathSegment {, +, +		private final String valueToMatch;, +, +		private final char[] valueToMatchAsChars;, +, +		private final MultiValueMap<String, String> parameters;, +, +, +		DefaultUrlPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			super(value);, +			Assert.isTrue(!value.contains("/"), () -> "Invalid path segment value: " + value);, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +			this.parameters = CollectionUtils.unmodifiableMultiValueMap(params);, +		}, +, +, +		@Override, +		public String valueToMatch() {, +			return this.valueToMatch;, +		}, +, +		@Override, +		public char[] valueToMatchAsChars() {, +			return this.valueToMatchAsChars;, +		}, +, +		@Override, +		public MultiValueMap<String, String> parameters() {, +			return this.parameters;, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +import java.util.function.Function;, +	static PathContainer createFromPath(String path) {, +		return parsePathInternal(path, DefaultPathSegment::new);, +	}, +, +	private static PathContainer parsePathInternal(String path, Function<String, PathSegment> segmentParser) {, +				elements.add(segmentParser.apply(segment));, +	static PathContainer createFromUrlPath(String path, Charset charset) {, +		return parsePathInternal(path, segment -> parseUrlPathSegment(segment, charset));, +	}, +, +	private static PathContainer.UrlPathSegment parseUrlPathSegment(String input, Charset charset) {, +			return new DefaultUrlPathSegment(input, valueToMatch, EMPTY_MAP);, +			MultiValueMap<String, String> parameters = parsePathParams(pathParameterContent, charset);, +			return new DefaultUrlPathSegment(input, valueToMatch, parameters);, +	private static MultiValueMap<String, String> parsePathParams(String input, Charset charset) {, +			parsePathParamValues(param, charset, result);, +	private static void parsePathParamValues(String input, Charset charset, MultiValueMap<String, String> output) {, +	private static class DefaultPathSegment implements PathSegment {, +		private final char[] valueAsChars;, +		DefaultPathSegment(String value) {, +			this.valueAsChars = value.toCharArray();, +, +			return this.value;, +			return this.valueAsChars;, +			return "[value='" + this.value + "']"; }, +	}, +, +, +	private static class DefaultUrlPathSegment extends DefaultPathSegment implements UrlPathSegment {, +, +		private final String valueToMatch;, +, +		private final char[] valueToMatchAsChars;, +, +		private final MultiValueMap<String, String> parameters;, +]