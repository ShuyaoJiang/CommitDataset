[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, +import java.util.ArrayList;, +import java.util.Collections;, +	private final List<ChannelInterceptor> interceptors = new ArrayList<ChannelInterceptor>(5);, +		this.interceptors.clear();, +		this.interceptors.addAll(interceptors);, +		this.interceptors.add(interceptor);, +		return Collections.unmodifiableList(this.interceptors);, +		ChannelInterceptorChain chain = new ChannelInterceptorChain();, +		boolean sent = false;, +		try {, +			message = chain.applyPreSend(message, this);, +			sent = sendInternal(message, timeout);, +			chain.applyPostSend(message, this, sent);, +			chain.triggerAfterSendCompletion(message, this, sent, null);, +		catch (Exception ex) {, +			chain.triggerAfterSendCompletion(message, this, sent, ex);, +			if (ex instanceof MessagingException) {, +				throw (MessagingException) ex;, +			throw new MessageDeliveryException(message,"Failed to send message to " + this, ex);, +		}, +		catch (Error ex) {, +			MessageDeliveryException ex2 = new MessageDeliveryException(message, "Failed to send message to " + this, ex);, +			chain.triggerAfterSendCompletion(message, this, sent, ex2);, +			throw ex2;, +		return getClass().getSimpleName() + "[" + this.beanName + "]";, +	}, +, +, +	/**, +	 * Assists with the invocation of the configured channel interceptors., +	 */, +	protected class ChannelInterceptorChain {, +, +		private int sendInterceptorIndex = -1;, +, +		private int receiveInterceptorIndex = -1;, +, +, +		public Message<?> applyPreSend(Message<?> message, MessageChannel channel) {, +			for (ChannelInterceptor interceptor : interceptors) {, +				message = interceptor.preSend(message, channel);, +				if (message == null) {, +					String name = interceptor.getClass().getSimpleName();, +					logger.debug(name + " returned null from preSend, i.e. precluding the send.");, +					triggerAfterSendCompletion(message, channel, false, null);, +					return null;, +				}, +				this.sendInterceptorIndex++;, +			}, +			return message;, +		}, +, +		public void applyPostSend(Message<?> message, MessageChannel channel, boolean sent) {, +			for (ChannelInterceptor interceptor : interceptors) {, +				interceptor.postSend(message, channel, sent);, +			}, +		}, +, +		public void triggerAfterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {, +			for (int i = this.sendInterceptorIndex; i >= 0; i--) {, +				ChannelInterceptor interceptor = interceptors.get(i);, +				try {, +					interceptor.afterSendCompletion(message, channel, sent, ex);, +				}, +				catch (Throwable ex2) {, +					logger.error("Exception from afterSendCompletion in " + interceptor, ex2);, +				}, +			}, +		}, +, +		public boolean applyPreReceive(MessageChannel channel) {, +			for (ChannelInterceptor interceptor : interceptors) {, +				if (!interceptor.preReceive(channel)) {, +					triggerAfterReceiveCompletion(null, channel, null);, +					return false;, +				}, +				this.receiveInterceptorIndex++;, +			}, +			return true;, +		}, +, +		public Message<?> applyPostReceive(Message<?> message, MessageChannel channel) {, +			for (ChannelInterceptor interceptor : interceptors) {, +				message = interceptor.postReceive(message, channel);, +				if (message == null) {, +					return null;, +				}, +			}, +			return message;, +		}, +, +		public void triggerAfterReceiveCompletion(Message<?> message, MessageChannel channel, Exception ex) {, +			for (int i = this.receiveInterceptorIndex; i >= 0; i--) {, +				ChannelInterceptor interceptor = interceptors.get(i);, +				try {, +					interceptor.afterReceiveCompletion(message, channel, ex);, +				}, +				catch (Throwable ex2) {, +					logger.error("Exception from afterReceiveCompletion in " + interceptor, ex2);]