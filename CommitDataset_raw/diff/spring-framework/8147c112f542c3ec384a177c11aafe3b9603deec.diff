[+++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +import java.io.Serializable;, +import java.util.Collection;, +import java.util.Set;, +public class LinkedCaseInsensitiveMap<V> implements Map<String, V>, Serializable, Cloneable {, +	private final LinkedHashMap<String, V> targetMap;, +, +	private final HashMap<String, String> caseInsensitiveKeys;, +		this((Locale) null);, +		this(16, locale);, +		this.targetMap = new LinkedHashMap<String, V>(initialCapacity) {, +			@Override, +			protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {, +				boolean doRemove = LinkedCaseInsensitiveMap.this.removeEldestEntry(eldest);, +				if (doRemove) {, +					caseInsensitiveKeys.remove(convertKey(eldest.getKey()));, +				}, +				return doRemove;, +			}, +		};, +	/**, +	 * Copy constructor., +	 */, +	@SuppressWarnings("unchecked"), +	private LinkedCaseInsensitiveMap(LinkedCaseInsensitiveMap<V> other) {, +		this.targetMap = (LinkedHashMap<String, V>) other.targetMap.clone();, +		this.caseInsensitiveKeys = (HashMap<String, String>) other.caseInsensitiveKeys.clone();, +		this.locale = other.locale;, +	}, +, +, +	@Override, +	public int size() {, +		return this.targetMap.size();, +	}, +, +	@Override, +	public boolean isEmpty() {, +		return this.targetMap.isEmpty();, +	}, +, +	@Override, +	public boolean containsValue(Object value) {, +		return this.targetMap.containsValue(value);, +	}, +, +	@Override, +	public Set<String> keySet() {, +		return this.targetMap.keySet();, +	}, +, +	@Override, +	public Collection<V> values() {, +		return this.targetMap.values();, +	}, +, +	@Override, +	public Set<Entry<String, V>> entrySet() {, +		return this.targetMap.entrySet();, +	}, +			this.targetMap.remove(oldKey);, +		return this.targetMap.put(key, value);, +				return this.targetMap.get(caseInsensitiveKey);, +				return this.targetMap.get(caseInsensitiveKey);, +				return this.targetMap.remove(caseInsensitiveKey);, +		this.targetMap.clear();, +	}, +, +, +	@Override, +	public LinkedCaseInsensitiveMap<V> clone() {, +		return new LinkedCaseInsensitiveMap<>(this);, +	public boolean equals(Object obj) {, +		return this.targetMap.equals(obj);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.targetMap.hashCode();, +	}, +, +	@Override, +	public String toString() {, +		return this.targetMap.toString();, +	/**, +	 * Determine whether this map should remove the given eldest entry., +	 * @param eldest the candidate entry, +	 * @return {@code true} for removing it, {@code false} for keeping it, +	 * @see LinkedHashMap#removeEldestEntry, +	 */, +	protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {, +		return false;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +import java.io.Serializable;, +import java.util.Collection;, +import java.util.Set;, +public class LinkedCaseInsensitiveMap<V> implements Map<String, V>, Serializable, Cloneable {, +	private final LinkedHashMap<String, V> targetMap;]