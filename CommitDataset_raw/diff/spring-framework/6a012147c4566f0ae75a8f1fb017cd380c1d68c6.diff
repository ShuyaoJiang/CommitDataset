[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.1.4, +	 * @since 5.1.4, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(ZoneId.of("GMT")));, +	 * @since 5.1.4, +	 */, +	public void setInstant(String headerName, Instant date) {, +		setZonedDateTime(headerName, ZonedDateTime.ofInstant(date, GMT));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +		setInstant(headerName, Instant.ofEpochMilli(date));, +	// Package-private: used in ResponseCookie, +	static String formatDate(long date) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.1.4, +	 * @since 5.1.4, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(ZoneId.of("GMT")));, +	 * @since 5.1.4, +	 */, +	public void setInstant(String headerName, Instant date) {, +		setZonedDateTime(headerName, ZonedDateTime.ofInstant(date, GMT));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +		setInstant(headerName, Instant.ofEpochMilli(date));, +	// Package-private: used in ResponseCookie, +	static String formatDate(long date) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +		 * @since 5.1.4, +		B lastModified(Instant lastModified);, +		 * @since 5.1.4, +		B lastModified(ZonedDateTime lastModified);, +		public BodyBuilder lastModified(Instant date) {, +		public BodyBuilder lastModified(ZonedDateTime date) {, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.1.4, +	 * @since 5.1.4, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(ZoneId.of("GMT")));, +	 * @since 5.1.4, +	 */, +	public void setInstant(String headerName, Instant date) {, +		setZonedDateTime(headerName, ZonedDateTime.ofInstant(date, GMT));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +		setInstant(headerName, Instant.ofEpochMilli(date));, +	// Package-private: used in ResponseCookie, +	static String formatDate(long date) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +		 * @since 5.1.4, +		B lastModified(Instant lastModified);, +		 * @since 5.1.4, +		B lastModified(ZonedDateTime lastModified);, +		public BodyBuilder lastModified(Instant date) {, +		public BodyBuilder lastModified(ZonedDateTime date) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +import java.time.Instant;, +	public EntityResponse.Builder<T> lastModified(Instant lastModified) {, +		this.headers.setLastModified(lastModified);, +		return this;, +	}, +, +	@Override, +		this.headers.setLastModified(lastModified);, +		this.headers.setCacheControl(cacheControl);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.1.4, +	 * @since 5.1.4, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(ZoneId.of("GMT")));, +	 * @since 5.1.4, +	 */, +	public void setInstant(String headerName, Instant date) {, +		setZonedDateTime(headerName, ZonedDateTime.ofInstant(date, GMT));, +	}, +]