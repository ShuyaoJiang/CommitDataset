[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2015 the original author or authors., +	 * @since 3.0, +	/**, +	 * Return the nested type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 3.1, +	 */, +	 * Return the nested generic type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 4.2, +	 */, +	public Type getNestedGenericParameterType() {, +		if (this.nestingLevel > 1) {, +			Type type = getGenericParameterType();, +			for (int i = 2; i <= this.nestingLevel; i++) {, +				if (type instanceof ParameterizedType) {, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Integer index = getTypeIndexForLevel(i);, +					type = args[index != null ? index : args.length - 1];, +				}, +			}, +			return type;, +		}, +		else {, +			return getGenericParameterType();, +		}, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2015 the original author or authors., +	 * @since 3.0, +	/**, +	 * Return the nested type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 3.1, +	 */, +	 * Return the nested generic type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 4.2, +	 */, +	public Type getNestedGenericParameterType() {, +		if (this.nestingLevel > 1) {, +			Type type = getGenericParameterType();, +			for (int i = 2; i <= this.nestingLevel; i++) {, +				if (type instanceof ParameterizedType) {, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Integer index = getTypeIndexForLevel(i);, +					type = args[index != null ? index : args.length - 1];, +				}, +			}, +			return type;, +		}, +		else {, +			return getGenericParameterType();, +		}, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +	 * @param methodParam the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter methodParam,, +			Type targetType) throws IOException, HttpMediaTypeNotSupportedException {, +		Class<?> contextClass = (methodParam != null ? methodParam.getContainingClass() : null);, +		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null);, +		if (targetClass == null) {, +			ResolvableType resolvableType = (methodParam != null ?, +					ResolvableType.forMethodParameter(methodParam) : ResolvableType.forType(targetType));, +			targetClass = (Class<T>) resolvableType.resolve();, +		}, +			else if (targetClass != null) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2015 the original author or authors., +	 * @since 3.0, +	/**, +	 * Return the nested type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 3.1, +	 */, +	 * Return the nested generic type of the method/constructor parameter., +	 * @return the parameter type (never {@code null}), +	 * @see #getNestingLevel(), +	 * @since 4.2, +	 */, +	public Type getNestedGenericParameterType() {, +		if (this.nestingLevel > 1) {, +			Type type = getGenericParameterType();, +			for (int i = 2; i <= this.nestingLevel; i++) {, +				if (type instanceof ParameterizedType) {, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Integer index = getTypeIndexForLevel(i);, +					type = args[index != null ? index : args.length - 1];, +				}]