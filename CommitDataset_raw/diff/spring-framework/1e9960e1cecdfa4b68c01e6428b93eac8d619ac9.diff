[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, + * Copyright 2002-2014 the original author or authors., +, +	@Override, +	public void configureWebSocketTransport(WebSocketTransportRegistration registry) {, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, + * Copyright 2002-2014 the original author or authors., +, +	@Override, +	public void configureWebSocketTransport(WebSocketTransportRegistration registry) {, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +			WebSocketTransportRegistration transportRegistration, UserSessionRegistry userSessionRegistry,, +			TaskScheduler defaultSockJsTaskScheduler, MessageBrokerRegistry brokerRegistry) {, +		Assert.notNull(webSocketHandler, "'webSocketHandler' is required ");, +		Assert.notNull(transportRegistration, "'transportRegistration' is required");, +		Assert.notNull(userSessionRegistry, "'userSessionRegistry' is required");, +, +		if (transportRegistration.getSendTimeLimit() != null) {, +			this.subProtocolWebSocketHandler.setSendTimeLimit(transportRegistration.getSendTimeLimit());, +		}, +		if (transportRegistration.getSendBufferSizeLimit() != null) {, +			this.subProtocolWebSocketHandler.setSendBufferSizeLimit(transportRegistration.getSendBufferSizeLimit());, +		}, +, +, +		if (transportRegistration.getMessageBufferSizeLimit() != null) {, +			this.stompHandler.setMessageBufferSizeLimit(transportRegistration.getMessageBufferSizeLimit());, +		}, +, +, +	private static SubProtocolWebSocketHandler unwrapSubProtocolWebSocketHandler(WebSocketHandler wsHandler) {, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(wsHandler);, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual, "No SubProtocolWebSocketHandler in " + wsHandler);, +		WebMvcStompWebSocketEndpointRegistration registration =, +				new WebMvcStompWebSocketEndpointRegistration(paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, + * Copyright 2002-2014 the original author or authors., +, +	@Override, +	public void configureWebSocketTransport(WebSocketTransportRegistration registry) {, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +			WebSocketTransportRegistration transportRegistration, UserSessionRegistry userSessionRegistry,, +			TaskScheduler defaultSockJsTaskScheduler, MessageBrokerRegistry brokerRegistry) {, +		Assert.notNull(webSocketHandler, "'webSocketHandler' is required ");, +		Assert.notNull(transportRegistration, "'transportRegistration' is required");, +		Assert.notNull(userSessionRegistry, "'userSessionRegistry' is required");, +, +		if (transportRegistration.getSendTimeLimit() != null) {, +			this.subProtocolWebSocketHandler.setSendTimeLimit(transportRegistration.getSendTimeLimit());, +		}, +		if (transportRegistration.getSendBufferSizeLimit() != null) {, +			this.subProtocolWebSocketHandler.setSendBufferSizeLimit(transportRegistration.getSendBufferSizeLimit());, +		}, +, +, +		if (transportRegistration.getMessageBufferSizeLimit() != null) {, +			this.stompHandler.setMessageBufferSizeLimit(transportRegistration.getMessageBufferSizeLimit());, +		}, +, +, +	private static SubProtocolWebSocketHandler unwrapSubProtocolWebSocketHandler(WebSocketHandler wsHandler) {, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(wsHandler);, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual, "No SubProtocolWebSocketHandler in " + wsHandler);, +		WebMvcStompWebSocketEndpointRegistration registration =, +				new WebMvcStompWebSocketEndpointRegistration(paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java, +import org.springframework.messaging.simp.config.MessageBrokerRegistry;, +import org.springframework.messaging.simp.user.UserSessionRegistry;, +	private WebSocketTransportRegistration transportRegistration;, +, +, +, +		WebSocketHandler webSocketHandler = subProtocolWebSocketHandler();, +		UserSessionRegistry sessionRegistry = userSessionRegistry();, +		WebSocketTransportRegistration transportRegistration = getTransportRegistration();, +		ThreadPoolTaskScheduler taskScheduler = messageBrokerSockJsTaskScheduler();, +		MessageBrokerRegistry brokerRegistry = getBrokerRegistry();, +, +				webSocketHandler, transportRegistration, sessionRegistry, taskScheduler, brokerRegistry);, +, +, +	protected final WebSocketTransportRegistration getTransportRegistration() {, +		if (this.transportRegistration == null) {, +			this.transportRegistration = new WebSocketTransportRegistration();, +			configureWebSocketTransport(this.transportRegistration);, +		}, +		return this.transportRegistration;, +	}, +, +	protected void configureWebSocketTransport(WebSocketTransportRegistration registry) {, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, + * Copyright 2002-2014 the original author or authors.]