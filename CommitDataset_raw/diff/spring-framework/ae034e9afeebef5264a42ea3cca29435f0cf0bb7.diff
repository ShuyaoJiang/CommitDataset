[+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, + * Copyright 2002-2017 the original author or authors., +import static java.nio.charset.StandardCharsets.ISO_8859_1;, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +, +	 * Private constructor. See static factory methods in this class., +, +	/**, +	 * Return a builder for a {@code ContentDisposition}., +	 * @param type the disposition type like for example {@literal inline},, +	 * {@literal attachment}, or {@literal form-data}, +	 * @return the builder, +	 */, +	public static Builder builder(String type) {, +		return new BuilderImpl(type);, +	}, +, +	/**, +	 * Return an empty content disposition., +	 */, +	public static ContentDisposition empty() {, +		return new ContentDisposition(null, null, null, null, null);, +	}, +, +			String part = parts[i];, +			int eqIndex = part.indexOf('=');, +				String attribute = part.substring(0, eqIndex);, +				String value = (part.startsWith("\"", eqIndex + 1) && part.endsWith("\"") ?, +						part.substring(eqIndex + 2, part.length() - 1) :, +						part.substring(eqIndex + 1, part.length()));, +					Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset),, +		Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset),, +	/**, +	 * Encode the given header field param as describe in RFC 5987., +	 * @param input the header field param, +	 * @param charset the charset of the header field param string,, +	 * only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported, +	 * @return the encoded header field param, +	 * @see <a href="https://tools.ietf.org/html/rfc5987">RFC 5987</a>, +	 */, +	private static String encodeHeaderFieldParam(String input, Charset charset) {, +		Assert.notNull(input, "Input String should not be null");, +		Assert.notNull(charset, "Charset should not be null");, +		if (StandardCharsets.US_ASCII.equals(charset)) {, +			return input;, +		}, +		Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset),, +				"Charset should be UTF-8 or ISO-8859-1");, +		byte[] source = input.getBytes(charset);, +		int len = source.length;, +		StringBuilder sb = new StringBuilder(len << 1);, +		sb.append(charset.name());, +		sb.append("''");, +		for (byte b : source) {, +			if (isRFC5987AttrChar(b)) {, +				sb.append((char) b);, +			}, +			else {, +				sb.append('%');, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +				sb.append(hex1);, +				sb.append(hex2);, +			}, +		}, +		return sb.toString();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, + * Copyright 2002-2017 the original author or authors., +import static java.nio.charset.StandardCharsets.ISO_8859_1;, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +, +	 * Private constructor. See static factory methods in this class., +, +	/**, +	 * Return a builder for a {@code ContentDisposition}., +	 * @param type the disposition type like for example {@literal inline},, +	 * {@literal attachment}, or {@literal form-data}, +	 * @return the builder, +	 */, +	public static Builder builder(String type) {, +		return new BuilderImpl(type);, +	}, +, +	/**, +	 * Return an empty content disposition., +	 */, +	public static ContentDisposition empty() {, +		return new ContentDisposition(null, null, null, null, null);, +	}, +, +			String part = parts[i];, +			int eqIndex = part.indexOf('=');, +				String attribute = part.substring(0, eqIndex);, +				String value = (part.startsWith("\"", eqIndex + 1) && part.endsWith("\"") ?, +						part.substring(eqIndex + 2, part.length() - 1) :, +						part.substring(eqIndex + 1, part.length()));]