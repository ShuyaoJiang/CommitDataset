[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +					if (value != null) {, +						value = URLDecoder.decode(value, "UTF-8");, +					}, +					request.addParameter(name, value);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +					if (value != null) {, +						value = URLDecoder.decode(value, "UTF-8");, +					}, +					request.addParameter(name, value);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java, +import static java.util.Arrays.asList;, +		// Append Locale.ENGLISH since MockHttpServletRequest automatically sets it as the, +		// preferred locale., +		List<Locale> expected = asList(new Locale("da"), new Locale("en", "gb", "0.8"), new Locale("en", "", "0.7"), Locale.ENGLISH);, +		for (HttpMethod expectedMethod : HttpMethod.values()) {, +	public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParam() {, +		webRequest.setRequestParameters(asList(new NameValuePair("name", "value")));, +	public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithNullValue() {, +		webRequest.setRequestParameters(asList(new NameValuePair("name", null)));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), nullValue());, +	}, +, +	@Test, +	public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithEmptyValue() {, +		webRequest.setRequestParameters(asList(new NameValuePair("name", "")));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), equalTo(""));, +	}, +, +	@Test, +	public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithValueSetToSpace() {, +		webRequest.setRequestParameters(asList(new NameValuePair("name", " ")));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), equalTo(" "));, +	}, +, +	@Test, +	public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithMultipleRequestParams() {, +		webRequest.setRequestParameters(asList(new NameValuePair("name1", "value1"), new NameValuePair("name2", "value2")));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(2));, +		assertThat(actualRequest.getParameter("name1"), equalTo("value1"));, +		assertThat(actualRequest.getParameter("name2"), equalTo("value2"));, +	}, +, +	@Test, +	public void buildRequestParameterMapFromSingleQueryParamWithoutValueAndWithoutEqualsSign() throws Exception {, +		webRequest.setUrl(new URL("http://example.com/example/?name"));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), nullValue());, +	}, +, +	@Test, +	public void buildRequestParameterMapFromSingleQueryParamWithoutValueButWithEqualsSign() throws Exception {, +		webRequest.setUrl(new URL("http://example.com/example/?name="));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), equalTo(""));, +	}, +, +	@Test, +	public void buildRequestParameterMapFromSingleQueryParamWithValueSetToEncodedSpace() throws Exception {, +		webRequest.setUrl(new URL("http://example.com/example/?name=%20"));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getParameterMap().size(), equalTo(1));, +		assertThat(actualRequest.getParameter("name"), equalTo(" "));, +	}, +, +	@Test, +	public void buildRequestQueryWithSingleQueryParamWithoutValueAndWithoutEqualsSign() throws Exception {, +		String expectedQuery = "param";, +		webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery));, +, +		MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext);, +, +		assertThat(actualRequest.getQueryString(), equalTo(expectedQuery));, +	}, +, +	@Test, +	public void buildRequestQueryWithSingleQueryParamWithoutValueButWithEqualsSign() throws Exception {]