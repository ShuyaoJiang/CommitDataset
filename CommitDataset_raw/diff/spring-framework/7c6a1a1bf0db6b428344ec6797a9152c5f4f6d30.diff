[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HandlerMethodAnnotationDetectionTests.java, +import java.lang.reflect.Method;, +import org.aopalliance.aop.Advice;, +import org.springframework.aop.Pointcut;, +import org.springframework.aop.support.StaticMethodMatcherPointcut;, +import org.springframework.core.annotation.AnnotationUtils;, +	public HandlerMethodAnnotationDetectionTests(final Class<?> controllerType, boolean useAutoProxy) {, +		context.registerBeanDefinition("handlerMapping", new RootBeanDefinition(RequestMappingHandlerMapping.class));, +		context.registerBeanDefinition("handlerAdapter", new RootBeanDefinition(RequestMappingHandlerAdapter.class));, +		context.registerBeanDefinition("exceptionResolver", new RootBeanDefinition(ExceptionHandlerExceptionResolver.class));, +			context.registerBeanDefinition("controllerAdvice", new RootBeanDefinition(ControllerAdvice.class));, +		this.handlerMapping = context.getBean(RequestMappingHandlerMapping.class);, +		this.handlerAdapter = context.getBean(RequestMappingHandlerAdapter.class);, +		this.exceptionResolver = context.getBean(ExceptionHandlerExceptionResolver.class);, +	}, +, +	class TestPointcut extends StaticMethodMatcherPointcut {, +		public boolean matches(Method method, Class<?> clazz) {, +			return method.getName().equals("hashCode");, +		}, +	 *, +	 * Without AOP:, +	 * Annotations can be on interface methods except parameter annotations., +, +	static class ControllerAdvice extends DefaultPointcutAdvisor {, +, +		public ControllerAdvice() {, +			super(getControllerPointcut(), new SimpleTraceInterceptor());, +		}, +, +		private static StaticMethodMatcherPointcut getControllerPointcut() {, +			return new StaticMethodMatcherPointcut() {, +				public boolean matches(Method method, Class<?> targetClass) {, +					return ((AnnotationUtils.findAnnotation(targetClass, Controller.class) != null) ||, +							(AnnotationUtils.findAnnotation(targetClass, RequestMapping.class) != null));, +				}, +			};, +		}, +	}, +]