[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.BinaryOperator;, +	private static final BinaryOperator<DataBuffer> WRITE_AGGREGATOR =, +			(dataBuffer1, dataBuffer2) -> {, +				DataBuffer result = dataBuffer1.write(dataBuffer2);, +				release(dataBuffer2);, +				return result;, +			};, +, +	//---------------------------------------------------------------------, +	// Various, +	//---------------------------------------------------------------------, +, +	 * Return a consumer that calls {@link #release(DataBuffer)} on all, +	/**, +	 * Return an aggregator function that can be used to {@linkplain Flux#reduce(BiFunction) reduce}, +	 * a {@code Flux} of data buffers into a single data buffer by writing all subsequent buffers, +	 * into the first buffer. All buffers except the first buffer are, +	 * {@linkplain #release(DataBuffer) released}., +	 * <p>For example:, +	 * <pre class="code">, +	 * Flux&lt;DataBuffer&gt; flux = ..., +	 * Mono&lt;DataBuffer&gt; mono = flux.reduce(DataBufferUtils.writeAggregator());, +	 * </pre>, +	 * @see Flux#reduce(BiFunction), +	 */, +	public static BinaryOperator<DataBuffer> writeAggregator() {, +		return WRITE_AGGREGATOR;, +	}, +, +, +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.BinaryOperator;, +	private static final BinaryOperator<DataBuffer> WRITE_AGGREGATOR =, +			(dataBuffer1, dataBuffer2) -> {, +				DataBuffer result = dataBuffer1.write(dataBuffer2);, +				release(dataBuffer2);, +				return result;, +			};, +, +	//---------------------------------------------------------------------, +	// Various, +	//---------------------------------------------------------------------, +, +	 * Return a consumer that calls {@link #release(DataBuffer)} on all, +	/**, +	 * Return an aggregator function that can be used to {@linkplain Flux#reduce(BiFunction) reduce}, +	 * a {@code Flux} of data buffers into a single data buffer by writing all subsequent buffers, +	 * into the first buffer. All buffers except the first buffer are, +	 * {@linkplain #release(DataBuffer) released}., +	 * <p>For example:, +	 * <pre class="code">, +	 * Flux&lt;DataBuffer&gt; flux = ..., +	 * Mono&lt;DataBuffer&gt; mono = flux.reduce(DataBufferUtils.writeAggregator());, +	 * </pre>, +	 * @see Flux#reduce(BiFunction), +	 */, +	public static BinaryOperator<DataBuffer> writeAggregator() {, +		return WRITE_AGGREGATOR;, +	}, +, +, +, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.charset.StandardCharsets;, +import io.netty.buffer.ByteBuf;, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, +		assertReleased(foo);, +		assertReleased(bar);, +		assertReleased(baz);, +	}, +	, +	private static void assertReleased(DataBuffer dataBuffer) {, +		if (dataBuffer instanceof NettyDataBuffer) {, +			ByteBuf byteBuf = ((NettyDataBuffer) dataBuffer).getNativeBuffer();, +			assertEquals(0, byteBuf.refCnt());, +		}, +	}, +, +	@Test, +	public void writeAggregator() {, +		DataBuffer foo = stringBuffer("foo");, +		DataBuffer bar = stringBuffer("bar");, +		DataBuffer baz = stringBuffer("baz");, +		Flux<DataBuffer> flux = Flux.just(foo, bar, baz);, +, +		DataBuffer result =, +				flux.reduce(DataBufferUtils.writeAggregator()).block(Duration.ofSeconds(1));, +, +		assertEquals("foobarbaz", DataBufferTestUtils.dumpString(result, StandardCharsets.UTF_8));, +, +		release(result);, +				.thenAnswer(putByte('a')), +				.thenAnswer(putByte('b')), +				.thenAnswer(putByte('c')), +		StepVerifier.create(read)]