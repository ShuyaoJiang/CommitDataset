[+++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			if (this.currentElapsedTime >= maxElapsedTime) {, +			this.currentElapsedTime += nextInterval;, +			return this.currentInterval;, +			StringBuilder sb = new StringBuilder("ExponentialBackOff{");, +			sb.append("currentInterval=").append(this.currentInterval < 0 ? "n/a" : this.currentInterval + "ms");, +++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			if (this.currentElapsedTime >= maxElapsedTime) {, +			this.currentElapsedTime += nextInterval;, +			return this.currentInterval;, +			StringBuilder sb = new StringBuilder("ExponentialBackOff{");, +			sb.append("currentInterval=").append(this.currentInterval < 0 ? "n/a" : this.currentInterval + "ms");, +++ b/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			String attemptValue = (FixedBackOff.this.maxAttempts == Long.MAX_VALUE ?, +					"unlimited" : String.valueOf(FixedBackOff.this.maxAttempts));, +++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			if (this.currentElapsedTime >= maxElapsedTime) {, +			this.currentElapsedTime += nextInterval;, +			return this.currentInterval;, +			StringBuilder sb = new StringBuilder("ExponentialBackOff{");, +			sb.append("currentInterval=").append(this.currentInterval < 0 ? "n/a" : this.currentInterval + "ms");, +++ b/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			String attemptValue = (FixedBackOff.this.maxAttempts == Long.MAX_VALUE ?, +					"unlimited" : String.valueOf(FixedBackOff.this.maxAttempts));, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2016 the original author or authors., +	private BackOff backOff = new FixedBackOff(DEFAULT_RECOVERY_INTERVAL, Long.MAX_VALUE);, +	 * @since 4.1, +		this.backOff = new FixedBackOff(recoveryInterval, Long.MAX_VALUE);, +						.append("': back-off policy does not allow ").append("for further attempts.");, +	 * Apply the next back-off time using the specified {@link BackOffExecution}., +	 * <p>Return {@code true} if the back-off period has been applied and a new, +	 * @since 4.1, +		 * Apply the back-off time once. In a regular scenario, the back-off is only applied if we, +++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			if (this.currentElapsedTime >= maxElapsedTime) {, +			this.currentElapsedTime += nextInterval;, +			return this.currentInterval;, +			StringBuilder sb = new StringBuilder("ExponentialBackOff{");, +			sb.append("currentInterval=").append(this.currentInterval < 0 ? "n/a" : this.currentInterval + "ms");, +++ b/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java, + * Copyright 2002-2016 the original author or authors., +, +			String attemptValue = (FixedBackOff.this.maxAttempts == Long.MAX_VALUE ?, +					"unlimited" : String.valueOf(FixedBackOff.this.maxAttempts));, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2016 the original author or authors., +	private BackOff backOff = new FixedBackOff(DEFAULT_RECOVERY_INTERVAL, Long.MAX_VALUE);, +	 * @since 4.1, +		this.backOff = new FixedBackOff(recoveryInterval, Long.MAX_VALUE);, +						.append("': back-off policy does not allow ").append("for further attempts.");, +	 * Apply the next back-off time using the specified {@link BackOffExecution}., +	 * <p>Return {@code true} if the back-off period has been applied and a new, +	 * @since 4.1, +		 * Apply the back-off time once. In a regular scenario, the back-off is only applied if we, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +			ResolvableType resolvedType = resolveVariable(, +					(TypeVariable<?>) type, ResolvableType.forClass(contextClass));, +		for (ResolvableType ifc : contextType.getInterfaces()) {, +			resolvedType = resolveVariable(typeVariable, ifc);]