[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.SortedSet;, +import java.util.TreeSet;, +		// Active profiles must be sorted due to cache key generation in, +		// TestContext. Specifically, profile sets {foo,bar} and {bar,foo}, +		// must both result in the same array (e.g., [bar,foo])., +		final SortedSet<String> activeProfiles = new TreeSet<String>();, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].", annotation,, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.SortedSet;, +import java.util.TreeSet;, +		// Active profiles must be sorted due to cache key generation in, +		// TestContext. Specifically, profile sets {foo,bar} and {bar,foo}, +		// must both result in the same array (e.g., [bar,foo])., +		final SortedSet<String> activeProfiles = new TreeSet<String>();, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].", annotation,, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +					if (logger.isDebugEnabled()) {, +						logger.debug(String.format(, +							"Storing ApplicationContext for test class [%s] in cache under key [%s].", testClass,, +							contextKey));, +					}, +			else {, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format(, +						"Retrieved ApplicationContext for test class [%s] from cache with key [%s].", testClass,, +						contextKey));, +				}, +			}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.SortedSet;, +import java.util.TreeSet;, +		// Active profiles must be sorted due to cache key generation in, +		// TestContext. Specifically, profile sets {foo,bar} and {bar,foo}, +		// must both result in the same array (e.g., [bar,foo])., +		final SortedSet<String> activeProfiles = new TreeSet<String>();, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].", annotation,, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +					if (logger.isDebugEnabled()) {, +						logger.debug(String.format(, +							"Storing ApplicationContext for test class [%s] in cache under key [%s].", testClass,, +							contextKey));, +					}, +			else {, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format(, +						"Retrieved ApplicationContext for test class [%s] from cache with key [%s].", testClass,, +						contextKey));, +				}, +			}, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java, + * Copyright 2002-2011 the original author or authors., + * @see TestContextCacheKeyTests, +	 * Asserts the statistics of the context cache in {@link TestContextManager}., +	private static final void assertContextCacheStatistics(String usageScenario, int expectedSize,, +			int expectedHitCount, int expectedMissCount) {, +		assertContextCacheStatistics(TestContextManager.contextCache, usageScenario, expectedSize, expectedHitCount,, +			expectedMissCount);, +	}, +	/**, +	 * Asserts the statistics of the supplied context cache., +	 * , +	 * @param contextCache the cache to assert against, +	 * @param usageScenario the scenario in which the statistics are used, +	 * @param expectedSize the expected number of contexts in the cache, +	 * @param expectedHitCount the expected hit count, +	 * @param expectedMissCount the expected miss count, +	 */, +	public static final void assertContextCacheStatistics(ContextCache contextCache, String usageScenario,, +			int expectedSize, int expectedHitCount, int expectedMissCount) {, +, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.SortedSet;, +import java.util.TreeSet;, +		// Active profiles must be sorted due to cache key generation in, +		// TestContext. Specifically, profile sets {foo,bar} and {bar,foo}, +		// must both result in the same array (e.g., [bar,foo])., +		final SortedSet<String> activeProfiles = new TreeSet<String>();, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].", annotation,, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +					if (logger.isDebugEnabled()) {, +						logger.debug(String.format(, +							"Storing ApplicationContext for test class [%s] in cache under key [%s].", testClass,, +							contextKey));, +					}, +			else {, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format(, +						"Retrieved ApplicationContext for test class [%s] from cache with key [%s].", testClass,, +						contextKey));, +				}, +			}, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java, + * Copyright 2002-2011 the original author or authors., + * @see TestContextCacheKeyTests, +	 * Asserts the statistics of the context cache in {@link TestContextManager}., +	private static final void assertContextCacheStatistics(String usageScenario, int expectedSize,, +			int expectedHitCount, int expectedMissCount) {, +		assertContextCacheStatistics(TestContextManager.contextCache, usageScenario, expectedSize, expectedHitCount,, +			expectedMissCount);]