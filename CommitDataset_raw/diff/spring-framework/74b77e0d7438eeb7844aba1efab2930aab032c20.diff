[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import java.util.Collections;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +@SuppressWarnings("unused"), +	@SuppressWarnings("ConstantConditions"), +		this.resolver.setCustomArgumentResolvers(Collections.singletonList(resolver));, +		this.resolver.setArgumentResolvers(Collections.singletonList(resolver));, +		this.resolver.setCustomReturnValueHandlers(Collections.singletonList(handler));, +		this.resolver.setReturnValueHandlers(Collections.singletonList(handler));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import java.util.Collections;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +@SuppressWarnings("unused"), +	@SuppressWarnings("ConstantConditions"), +		this.resolver.setCustomArgumentResolvers(Collections.singletonList(resolver));, +		this.resolver.setArgumentResolvers(Collections.singletonList(resolver));, +		this.resolver.setCustomReturnValueHandlers(Collections.singletonList(handler));, +		this.resolver.setReturnValueHandlers(Collections.singletonList(handler));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/WebSocketAnnotationMethodMessageHandler.java, +, +, +	public WebSocketAnnotationMethodMessageHandler(SubscribableChannel clientInChannel,, +			MessageChannel clientOutChannel, SimpMessageSendingOperations brokerTemplate) {, +		List<ControllerAdviceBean> beans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());, +		AnnotationAwareOrderComparator.sort(beans);, +		initMessagingAdviceCache(MessagingControllerAdviceBean.createFromList(beans));, +			Class<?> type = bean.getBeanType();, +			AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(type);, +		public static List<MessagingAdviceBean> createFromList(List<ControllerAdviceBean> beans) {, +			List<MessagingAdviceBean> result = new ArrayList<MessagingAdviceBean>(beans.size());, +			for (ControllerAdviceBean bean : beans) {, +				result.add(new MessagingControllerAdviceBean(bean));, +			return result;]