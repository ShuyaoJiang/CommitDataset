[+++ b/spring-core/src/main/java/org/springframework/core/NestedCheckedException.java, + * Copyright 2002-2017 the original author or authors., +		return NestedExceptionUtils.getRootCause(this);, +++ b/spring-core/src/main/java/org/springframework/core/NestedCheckedException.java, + * Copyright 2002-2017 the original author or authors., +		return NestedExceptionUtils.getRootCause(this);, +++ b/spring-core/src/main/java/org/springframework/core/NestedExceptionUtils.java, + * Copyright 2002-2017 the original author or authors., +		if (cause == null) {, +			return message;, +		}, +		StringBuilder sb = new StringBuilder(64);, +, +	/**, +	 * Retrieve the innermost cause of the given exception, if any., +	 * @param original the original exception to introspect, +	 * @return the innermost exception, or {@code null} if none, +	 * @since 4.3.9, +	 */, +	public static Throwable getRootCause(Throwable original) {, +		if (original == null) {, +			return null;, +		Throwable rootCause = null;, +		Throwable cause = original.getCause();, +		while (cause != null && cause != rootCause) {, +			rootCause = cause;, +			cause = cause.getCause();, +		}, +		return rootCause;, +	}, +, +	/**, +	 * Retrieve the most specific cause of the given exception, that is,, +	 * either the innermost cause (root cause) or the exception itself., +	 * <p>Differs from {@link #getRootCause} in that it falls back, +	 * to the original exception if there is no root cause., +	 * @param original the original exception to introspect, +	 * @return the most specific cause (never {@code null}), +	 * @since 4.3.9, +	 */, +	public static Throwable getMostSpecificCause(Throwable original) {, +		Throwable rootCause = getRootCause(original);, +		return (rootCause != null ? rootCause : original);, +++ b/spring-core/src/main/java/org/springframework/core/NestedCheckedException.java, + * Copyright 2002-2017 the original author or authors., +		return NestedExceptionUtils.getRootCause(this);, +++ b/spring-core/src/main/java/org/springframework/core/NestedExceptionUtils.java, + * Copyright 2002-2017 the original author or authors., +		if (cause == null) {, +			return message;, +		}, +		StringBuilder sb = new StringBuilder(64);, +, +	/**, +	 * Retrieve the innermost cause of the given exception, if any., +	 * @param original the original exception to introspect, +	 * @return the innermost exception, or {@code null} if none, +	 * @since 4.3.9, +	 */, +	public static Throwable getRootCause(Throwable original) {, +		if (original == null) {, +			return null;, +		Throwable rootCause = null;, +		Throwable cause = original.getCause();, +		while (cause != null && cause != rootCause) {, +			rootCause = cause;, +			cause = cause.getCause();, +		}, +		return rootCause;, +	}, +, +	/**, +	 * Retrieve the most specific cause of the given exception, that is,, +	 * either the innermost cause (root cause) or the exception itself., +	 * <p>Differs from {@link #getRootCause} in that it falls back, +	 * to the original exception if there is no root cause., +	 * @param original the original exception to introspect, +	 * @return the most specific cause (never {@code null}), +	 * @since 4.3.9, +	 */, +	public static Throwable getMostSpecificCause(Throwable original) {, +		Throwable rootCause = getRootCause(original);, +		return (rootCause != null ? rootCause : original);, +++ b/spring-core/src/main/java/org/springframework/core/NestedRuntimeException.java, + * Copyright 2002-2017 the original author or authors., +		return NestedExceptionUtils.getRootCause(this);, +++ b/spring-core/src/main/java/org/springframework/core/NestedCheckedException.java, + * Copyright 2002-2017 the original author or authors., +		return NestedExceptionUtils.getRootCause(this);, +++ b/spring-core/src/main/java/org/springframework/core/NestedExceptionUtils.java, + * Copyright 2002-2017 the original author or authors., +		if (cause == null) {, +			return message;, +		}, +		StringBuilder sb = new StringBuilder(64);, +, +	/**, +	 * Retrieve the innermost cause of the given exception, if any., +	 * @param original the original exception to introspect, +	 * @return the innermost exception, or {@code null} if none]