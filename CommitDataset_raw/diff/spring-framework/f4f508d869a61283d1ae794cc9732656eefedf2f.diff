[+++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormatterTests.java, +		String[] chars = { "S", "M", "-" };, +					}, +					else if (d.equals("-")) {, +	private void testJodaStylePatterns(String style, Locale locale, Date date) throws Exception {, +		DateTimeFormatter jodaFormatter = DateTimeFormat.forStyle(style).withLocale(locale).withZone(DateTimeZone.UTC);, +	public void shouldThrowOnUnsupportedStylePattern() throws Exception {, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormatterTests.java, +		String[] chars = { "S", "M", "-" };, +					}, +					else if (d.equals("-")) {, +	private void testJodaStylePatterns(String style, Locale locale, Date date) throws Exception {, +		DateTimeFormatter jodaFormatter = DateTimeFormat.forStyle(style).withLocale(locale).withZone(DateTimeZone.UTC);, +	public void shouldThrowOnUnsupportedStylePattern() throws Exception {, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormattingTests.java, +	public void testBindLong() {, +		propertyValues.add("millis", "1256961600");, +		assertEquals("1256961600", binder.getBindingResult().getFieldValue("millis"));, +	public void testBindLongAnnotated() {, +		propertyValues.add("millisAnnotated", "10/31/09");, +		assertEquals("10/31/09", binder.getBindingResult().getFieldValue("millisAnnotated"));, +	}, +, +	@Test, +	public void testBindCalendarAnnotated() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("calendarAnnotated", "10/31/09");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("10/31/09", binder.getBindingResult().getFieldValue("calendarAnnotated"));, +	public void testBindDateArray() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("dateAnnotated", new String[]{"10/31/09 12:00 PM"});, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +	}, +, +	@Test, +	public void testBindDateAnnotatedPattern() {, +		propertyValues.add("dateAnnotatedPattern", "10/31/09 1:05");, +		assertEquals("10/31/09 1:05", binder.getBindingResult().getFieldValue("dateAnnotatedPattern"));, +		@DateTimeFormat(style="S-"), +		private Calendar calendarAnnotated;, +, +		@DateTimeFormat(style="S-"), +		private Date dateAnnotated;, +, +		@DateTimeFormat(pattern="M/d/yy h:mm"), +		public Calendar getCalendarAnnotated() {, +			return calendarAnnotated;, +		}, +, +		public void setCalendarAnnotated(Calendar calendarAnnotated) {, +			this.calendarAnnotated = calendarAnnotated;, +		}, +, +		public Date getDateAnnotated() {, +			return dateAnnotated;, +		}, +, +		public void setDateAnnotated(Date dateAnnotated) {, +			this.dateAnnotated = dateAnnotated;, +		}, +, +		public Date getDateAnnotatedPattern() {, +			return dateAnnotatedPattern;, +		}, +, +		public void setDateAnnotatedPattern(Date dateAnnotatedPattern) {, +			this.dateAnnotatedPattern = dateAnnotatedPattern;, +		}, +, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormatterTests.java, +		String[] chars = { "S", "M", "-" };, +					}, +					else if (d.equals("-")) {, +	private void testJodaStylePatterns(String style, Locale locale, Date date) throws Exception {, +		DateTimeFormatter jodaFormatter = DateTimeFormat.forStyle(style).withLocale(locale).withZone(DateTimeZone.UTC);, +	public void shouldThrowOnUnsupportedStylePattern() throws Exception {, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormattingTests.java, +	public void testBindLong() {, +		propertyValues.add("millis", "1256961600");, +		assertEquals("1256961600", binder.getBindingResult().getFieldValue("millis"));, +	public void testBindLongAnnotated() {, +		propertyValues.add("millisAnnotated", "10/31/09");, +		assertEquals("10/31/09", binder.getBindingResult().getFieldValue("millisAnnotated"));, +	}, +, +	@Test, +	public void testBindCalendarAnnotated() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("calendarAnnotated", "10/31/09");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("10/31/09", binder.getBindingResult().getFieldValue("calendarAnnotated"));, +	public void testBindDateArray() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("dateAnnotated", new String[]{"10/31/09 12:00 PM"});, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());]