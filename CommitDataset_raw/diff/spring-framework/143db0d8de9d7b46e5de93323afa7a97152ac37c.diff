[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format("PropertySource [%s] contains '%s'", getName(), name));, +				}, +		if (logger.isTraceEnabled()) {, +			logger.trace(String.format("PropertySource [%s] does not contain '%s'", getName(), name));, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format("PropertySource [%s] contains '%s'", getName(), name));, +				}, +		if (logger.isTraceEnabled()) {, +			logger.trace(String.format("PropertySource [%s] does not contain '%s'", getName(), name));, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * @see SystemEnvironmentPropertySource, +		propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format("PropertySource [%s] contains '%s'", getName(), name));, +				}, +		if (logger.isTraceEnabled()) {, +			logger.trace(String.format("PropertySource [%s] does not contain '%s'", getName(), name));, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * @see SystemEnvironmentPropertySource, +		propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.env;, +, +import java.util.Map;, +, +import org.springframework.util.Assert;, +, +/**, + * Specialization of {@link MapPropertySource} designed for use with, + * {@linkplain AbstractEnvironment#getSystemEnvironment() system environment variables}., + * Compensates for constraints in Bash and other shells that do not allow for variables, + * containing the period character; also allows for uppercase variations on property, + * names for more idiomatic shell use., + *, + * <p>For example, a call to {@code getProperty("foo.bar")} will attempt to find a value, + * for the original property or any 'equivalent' property, returning the first found:, + * <ul>, + * <li>{@code foo.bar} - the original name</li>, + * <li>{@code foo_bar} - with underscores for periods (if any)</li>, + * <li>{@code FOO.BAR} - original, with upper case</li>, + * <li>{@code FOO_BAR} - with underscores and upper case</li>, + * </ul>, + *, + * The same applies for calls to {@link #containsProperty(String)}, which returns, + * {@code true} if any of the above properties are present, otherwise {@code false}., + *, + * <p>This feature is particularly useful when specifying active or default profiles as, + * environment variables. The following is not allowable under Bash, + *, + * <pre class="code">spring.profiles.active=p1 java -classpath ... MyApp</pre>, + *, + * However, the following syntax is permitted and is also more conventional., + *, + * <pre class="code">SPRING_PROFILES_ACTIVE=p1 java -classpath ... MyApp</pre>, + *, + * <p>Enable debug- or trace-level logging for this class (or package) for messages, + * explaining when these 'property name resolutions' occur., + *, + * <p>This property source is included by default in {@link StandardEnvironment} and all, + * its subclasses., + *, + * @author Chris Beams, + * @since 3.1, + * @see StandardEnvironment, + * @see AbstractEnvironment#getSystemEnvironment()]