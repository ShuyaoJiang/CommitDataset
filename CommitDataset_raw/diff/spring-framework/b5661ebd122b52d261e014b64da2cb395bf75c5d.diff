[+++ b/spring-framework-reference/src/scheduling.xml, +<section id="scheduling-quartz">, +		<title>Using the OpenSymphony Quartz Scheduler</title>, +		<para>Quartz uses <classname>Trigger</classname>, <classname>Job</classname> and , +		<classname>JobDetail</classname> objects to realize scheduling of all kinds of jobs., +		For the basic concepts behind Quartz, have a look at, +		<ulink url="http://www.opensymphony.com/quartz" />. For convenience purposes,, +		Spring offers a couple of classes that simplify the usage of Quartz within, +		Spring-based applications., +		</para>, +		<section id="scheduling-quartz-jobdetail">, +			<title>Using the JobDetailBean</title>, +			<para>, +			<classname>JobDetail</classname> objects contain all information needed to, +			run a job. The Spring Framework provides a <classname>JobDetailBean</classname>, +			that makes the <classname>JobDetail</classname> more of an actual JavaBean, +			with sensible defaults. Let's have a look at an example:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<bean name="exampleJob" class="org.springframework.scheduling.quartz.JobDetailBean">, +  <property name="jobClass" value="example.ExampleJob" />, +  <property name="jobDataAsMap">, +    <map>, +      <entry key="timeout" value="5" />, +    </map>, +  </property>, +</bean>]]></programlisting>, +			<para>The job detail bean has all information it needs to run the job (<classname>ExampleJob</classname>)., +			The timeout is specified in the job data map. The job data map is, +			available through the <classname>JobExecutionContext</classname>, +			(passed to you at execution time), but the <classname>JobDetailBean</classname>, +			also maps the properties from the job data map to properties of the actual job., +			So in this case, if the <classname>ExampleJob</classname> contains a property, +			named <literal>timeout</literal>, the <classname>JobDetailBean</classname> will, +			automatically apply it:</para>, +			<programlisting language="java"><![CDATA[package example;, +, +public class ExampleJob extends QuartzJobBean {, +, +  private int timeout;, +  , +  /**, +   * Setter called after the ExampleJob is instantiated, +   * with the value from the JobDetailBean (5), +   */ , +  public void setTimeout(int timeout) {, +    this.timeout = timeout;, +  }, +  , +  protected void executeInternal(JobExecutionContext ctx) throws JobExecutionException {, +      ]]><lineannotation>// do the actual work</lineannotation><![CDATA[, +  }, +}]]></programlisting>, +			<para>All additional settings from the job detail bean are of course available to you as well.</para>, +			<para><emphasis>Note: Using the <literal>name</literal> and <literal>group</literal> properties,, +			you can modify the name and the group of the job, respectively. By default, the name of, +			the job matches the bean name of the job detail bean (in the example above, this is, +			<literal>exampleJob</literal>).</emphasis></para>, +		</section>, +		<section id="scheduling-quartz-method-invoking-job">, +			<title>Using the <classname>MethodInvokingJobDetailFactoryBean</classname></title>, +			<para>Often you just need to invoke a method on a specific object. Using the, +			<classname>MethodInvokingJobDetailFactoryBean</classname> you can do exactly this:</para>, +			<programlisting language="xml"><![CDATA[<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">, +  <property name="targetObject" ref="exampleBusinessObject" />, +  <property name="targetMethod" value="doIt" />, +</bean>]]></programlisting>, +			<para>The above example will result in the <literal>doIt</literal> method being called on the, +			<literal>exampleBusinessObject</literal> method (see below):</para>, +			<programlisting language="java"><![CDATA[public class ExampleBusinessObject {, +  , +  ]]><lineannotation>// properties and collaborators</lineannotation><![CDATA[, +  , +  public void doIt() {, +    ]]><lineannotation>// do the actual work</lineannotation><![CDATA[, +  }, +}]]></programlisting>, +, +			<programlisting language="xml"><![CDATA[, +<bean id="exampleBusinessObject" class="examples.ExampleBusinessObject"/>]]></programlisting>, +			<para>Using the <classname>MethodInvokingJobDetailFactoryBean</classname>, you don't need to, +			create one-line jobs that just invoke a method, and you only need to create the actual, +			business object and wire up the detail object.</para>, +			<para>By default, Quartz Jobs are stateless, resulting in the possibility of jobs interfering, +			with each other. If you specify two triggers for the same <classname>JobDetail</classname>,, +			it might be possible that before the first job has finished, the second one will start., +			If <classname>JobDetail</classname> classes implement the, +			<interfacename>Stateful</interfacename> interface, this won't happen. The second job, +			will not start before the first one has finished. To make jobs resulting from the, +			<classname>MethodInvokingJobDetailFactoryBean</classname> non-concurrent, set the, +			<literal>concurrent</literal> flag to <literal>false</literal>.</para>, +			<programlisting language="xml"><![CDATA[, +<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">, +  <property name="targetObject" ref="exampleBusinessObject" />, +  <property name="targetMethod" value="doIt" />, +  <property name="concurrent" value="false" />, +</bean>]]></programlisting>, +			<note>, +				<para>By default, jobs will run in a concurrent fashion.</para>, +			</note>]