[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +		return checkParameterType(parameter, Errors.class::isAssignableFrom);, +		Object errors = getErrors(parameter, context);, +			return ((Mono<?>) errors).cast(Object.class);, +			return Mono.just(errors);, +	private Object getErrors(MethodParameter parameter, BindingContext context) {, +		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class);, +		String name = (annot != null && StringUtils.hasText(annot.value()) ?, +				annot.value() : Conventions.getVariableNameForParameter(attributeParam));, +, +		Object errors = context.getModel().asMap().get(BindingResult.MODEL_KEY_PREFIX + name);, +, +		Assert.notNull(errors, "An Errors/BindingResult argument is expected to be declared " +, +				"immediately after the @ModelAttribute argument to which it applies: " +, +				parameter.getMethod());, +, +		return errors;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +		return checkParameterType(parameter, Errors.class::isAssignableFrom);, +		Object errors = getErrors(parameter, context);, +			return ((Mono<?>) errors).cast(Object.class);, +			return Mono.just(errors);, +	private Object getErrors(MethodParameter parameter, BindingContext context) {, +		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class);, +		String name = (annot != null && StringUtils.hasText(annot.value()) ?, +				annot.value() : Conventions.getVariableNameForParameter(attributeParam));, +, +		Object errors = context.getModel().asMap().get(BindingResult.MODEL_KEY_PREFIX + name);, +, +		Assert.notNull(errors, "An Errors/BindingResult argument is expected to be declared " +, +				"immediately after the @ModelAttribute argument to which it applies: " +, +				parameter.getMethod());, +, +		return errors;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolverTests.java, +		assertTrue(this.resolver.supportsParameter(parameter));, +, +		parameter = this.testMethod.arg(String.class);, +		assertFalse(this.resolver.supportsParameter(parameter));, +	public void resolve() throws Exception {, +	public void resolveWithMono() throws Exception {, +	public void resolveWithMonoOnBindingResultAndModelAttribute() throws Exception {, +	@Test // SPR-16187, +	public void resolveWithBindingResultNotFound() throws Exception {, +, +		this.expectedException.expectMessage("An Errors/BindingResult argument is expected " +, +				"to be declared immediately after the @ModelAttribute argument");, +, +		MethodParameter parameter = this.testMethod.arg(Errors.class);, +		this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange), +				.block(Duration.ofMillis(5000));, +	}, +]