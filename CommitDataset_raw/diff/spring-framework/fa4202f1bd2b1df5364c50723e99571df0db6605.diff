[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +	private final Map<String, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	private PathMatcher pathMatcher = new AntPathMatcher();, +	 * Set the PathMatcher implementation to use for matching URL paths, +	 * against registered URL patterns. Default is AntPathMatcher., +	 * @see AntPathMatcher, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		Assert.notNull(pathMatcher, "PathMatcher must not be null");, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +			this.corsConfigurations.putAll(corsConfigurations);, +	public Map<String, CorsConfiguration> getCorsConfigurations() {, +		this.corsConfigurations.put(path, config);, +		for (Map.Entry<String, CorsConfiguration> entry : this.corsConfigurations.entrySet()) {, +			if (this.pathMatcher.match(entry.getKey(), lookupPath)) {, +				return entry.getValue();, +			}, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +	private final Map<String, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	private PathMatcher pathMatcher = new AntPathMatcher();, +	 * Set the PathMatcher implementation to use for matching URL paths, +	 * against registered URL patterns. Default is AntPathMatcher., +	 * @see AntPathMatcher, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		Assert.notNull(pathMatcher, "PathMatcher must not be null");, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +			this.corsConfigurations.putAll(corsConfigurations);, +	public Map<String, CorsConfiguration> getCorsConfigurations() {, +		this.corsConfigurations.put(path, config);, +		for (Map.Entry<String, CorsConfiguration> entry : this.corsConfigurations.entrySet()) {, +			if (this.pathMatcher.match(entry.getKey(), lookupPath)) {, +				return entry.getValue();, +			}, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +	private final Map<String, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	private PathMatcher pathMatcher = new AntPathMatcher();, +	 * Set the PathMatcher implementation to use for matching URL paths, +	 * against registered URL patterns. Default is AntPathMatcher., +	 * @see AntPathMatcher, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		Assert.notNull(pathMatcher, "PathMatcher must not be null");, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +			this.corsConfigurations.putAll(corsConfigurations);, +	public Map<String, CorsConfiguration> getCorsConfigurations() {, +		this.corsConfigurations.put(path, config);, +		for (Map.Entry<String, CorsConfiguration> entry : this.corsConfigurations.entrySet()) {, +			if (this.pathMatcher.match(entry.getKey(), lookupPath)) {, +				return entry.getValue();, +			}, +++ /dev/null, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		this.configSource.getCorsConfigurations().put("/**", new CorsConfiguration());, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +	private final Map<String, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	private PathMatcher pathMatcher = new AntPathMatcher();, +	 * Set the PathMatcher implementation to use for matching URL paths, +	 * against registered URL patterns. Default is AntPathMatcher., +	 * @see AntPathMatcher, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		Assert.notNull(pathMatcher, "PathMatcher must not be null");, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +			this.corsConfigurations.putAll(corsConfigurations);, +	public Map<String, CorsConfiguration> getCorsConfigurations() {, +		this.corsConfigurations.put(path, config);, +		for (Map.Entry<String, CorsConfiguration> entry : this.corsConfigurations.entrySet()) {, +			if (this.pathMatcher.match(entry.getKey(), lookupPath)) {, +				return entry.getValue();, +			}, +++ /dev/null, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		this.configSource.getCorsConfigurations().put("/**", new CorsConfiguration());, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +	private final Map<String, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();]