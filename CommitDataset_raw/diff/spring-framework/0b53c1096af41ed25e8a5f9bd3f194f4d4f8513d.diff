[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			return TypeDescriptor.nested(property(this.pd), level);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			return TypeDescriptor.nested(property(this.pd), level);, +++ b/spring-beans/src/main/java/org/springframework/beans/InvalidPropertyException.java, +		return this.beanClass;, +		return this.propertyName;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			return TypeDescriptor.nested(property(this.pd), level);, +++ b/spring-beans/src/main/java/org/springframework/beans/InvalidPropertyException.java, +		return this.beanClass;, +		return this.propertyName;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						Assert.state(this.beanFactory != null, "No BeanFactory available");, +							RootBeanDefinition mbd = (RootBeanDefinition) this.beanFactory.getMergedBeanDefinition(beanName);, +			Assert.state(this.beanFactory != null, "No BeanFactory available");, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			return TypeDescriptor.nested(property(this.pd), level);, +++ b/spring-beans/src/main/java/org/springframework/beans/InvalidPropertyException.java, +		return this.beanClass;, +		return this.propertyName;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						Assert.state(this.beanFactory != null, "No BeanFactory available");, +							RootBeanDefinition mbd = (RootBeanDefinition) this.beanFactory.getMergedBeanDefinition(beanName);, +			Assert.state(this.beanFactory != null, "No BeanFactory available");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +				if (this.initAnnotationType != null && method.isAnnotationPresent(this.initAnnotationType)) {, +				if (this.destroyAnnotationType != null && method.isAnnotationPresent(this.destroyAnnotationType)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = (clazz -> !this.introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java, +			return this.beanName;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RegexpMethodPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +			return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/RootClassFilter.java, +		return this.clazz.isAssignableFrom(candidate);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			return TypeDescriptor.nested(property(this.pd), level);, +++ b/spring-beans/src/main/java/org/springframework/beans/InvalidPropertyException.java, +		return this.beanClass;, +		return this.propertyName;]