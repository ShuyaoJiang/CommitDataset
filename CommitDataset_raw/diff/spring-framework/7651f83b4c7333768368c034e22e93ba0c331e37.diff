[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	private volatile ServerHttpResponse response;, +, +	private volatile ServerHttpAsyncRequestControl asyncRequestControl;, +, +	private volatile SockJsFrameFormat frameFormat;, +, +	private volatile boolean requestInitialized;, +, +, +	private final Queue<String> messageCache;, +, +, +	 * Unlike WebSocket where sub-protocol negotiation is part of the initial, +	 * handshake, in HTTP transports the same negotiation must be emulated and, +	 * the selected protocol set through this setter., +	/**, +	 * Return response for the current request, or {@code null} if between requests., +	 */, +	protected ServerHttpResponse getResponse() {, +		return this.response;, +	}, +, +	/**, +	 * Return the SockJS buffer for messages stored transparently between polling, +	 * requests. If the polling request takes longer than 5 seconds, the session, +	 * will be closed., +	 *, +	 * @see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService, +	 */, +	protected Queue<String> getMessageCache() {, +		return this.messageCache;, +	}, +, +	@Override, +	public boolean isActive() {, +		ServerHttpAsyncRequestControl control = this.asyncRequestControl;, +		return (control != null && !control.isCompleted());, +	}, +]