[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			if (ref != null) {, +				if (result != null) {, +			// Lenient fallback: dummy factory in case of original factory not found..., +			return new StaticListableBeanFactory(Collections.<String, Object> emptyMap());, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			if (ref != null) {, +				if (result != null) {, +			// Lenient fallback: dummy factory in case of original factory not found..., +			return new StaticListableBeanFactory(Collections.<String, Object> emptyMap());, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +	private final Map<String, Object> beans;, +, +, +	/**, +	 * Create a regular {@code StaticListableBeanFactory}, to be populated, +	 * with singleton bean instances through {@link #addBean} calls., +	 */, +	public StaticListableBeanFactory() {, +		this.beans = new LinkedHashMap<String, Object>();, +	}, +, +	/**, +	 * Create a {@code StaticListableBeanFactory} wrapping the given {@code Map}., +	 * <p>Note that the given {@code Map} may be pre-populated with beans;, +	 * or new, still allowing for beans to be registered via {@link #addBean};, +	 * or {@link java.util.Collections#emptyMap()} for a dummy factory which, +	 * enforces operating against an empty set of beans., +	 * @param beans a {@code Map} for holding this factory's beans, with the, +	 * bean name String as key and the corresponding singleton object as value, +	 * @since 4.3, +	 */, +	public StaticListableBeanFactory(Map<String, Object> beans) {, +		Assert.notNull(beans, "Beans Map must not be null");, +		this.beans = beans;, +	}, +		Map<String, T> matches = new LinkedHashMap<String, T>();]