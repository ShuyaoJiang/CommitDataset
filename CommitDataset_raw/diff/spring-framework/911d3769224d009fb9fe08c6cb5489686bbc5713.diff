[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +import org.springframework.web.reactive.HandlerResult;, +import org.springframework.web.reactive.HandlerResultHandler;, +	private final List<MediaType> allMediaTypes;, +, +	private final Map<Encoder<?>, List<MediaType>> mediaTypesByEncoder;, +, +		this.allMediaTypes = getAllMediaTypes(encoders);, +		this.mediaTypesByEncoder = getMediaTypesByEncoder(encoders);, +	private static List<MediaType> getAllMediaTypes(List<Encoder<?>> encoders) {, +		Set<MediaType> set = new LinkedHashSet<>();, +		encoders.forEach(encoder -> set.addAll(toMediaTypes(encoder.getSupportedMimeTypes())));, +		List<MediaType> result = new ArrayList<>(set);, +	private static Map<Encoder<?>, List<MediaType>> getMediaTypesByEncoder(List<Encoder<?>> encoders) {, +		Map<Encoder<?>, List<MediaType>> result = new HashMap<>(encoders.size());, +		encoders.forEach(encoder -> result.put(encoder, toMediaTypes(encoder.getSupportedMimeTypes())));, +		return Collections.unmodifiableMap(result);, +	}, +, +	/**, +	 * TODO: MediaType static method, +	 */, +	private static List<MediaType> toMediaTypes(List<MimeType> mimeTypes) {, +		return mimeTypes.stream().map(ResponseBodyResultHandler::toMediaType).collect(Collectors.toList());, +	}, +, +	/**, +	 * TODO: MediaType constructor, +	 */, +	private static MediaType toMediaType(MimeType mimeType) {, +		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters());, +	}, +, +			producibleMediaTypes.add(MediaType.ALL);, +		return Publishers.error(new HttpMediaTypeNotAcceptableException(this.allMediaTypes));, +		return this.encoders.stream(), +				.filter(encoder -> encoder.canEncode(type, null)), +				.flatMap(encoder -> this.mediaTypesByEncoder.get(encoder).stream()), +				.collect(Collectors.toList());]