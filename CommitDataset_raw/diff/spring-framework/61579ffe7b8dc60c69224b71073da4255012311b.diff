[+++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	protected AbstractNamedValueSyncArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	protected AbstractNamedValueSyncArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * is to provide access to multiple matrix variables, either all or associated with a specific, +				(ann, type) -> (Map.class.isAssignableFrom(type) && !StringUtils.hasText(ann.name())));, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	protected AbstractNamedValueSyncArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * is to provide access to multiple matrix variables, either all or associated with a specific, +				(ann, type) -> (Map.class.isAssignableFrom(type) && !StringUtils.hasText(ann.name())));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +, +	public MatrixVariableMethodArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +				(ann, type) -> !Map.class.isAssignableFrom(type) || StringUtils.hasText(ann.name()));, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	protected AbstractNamedValueSyncArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * is to provide access to multiple matrix variables, either all or associated with a specific, +				(ann, type) -> (Map.class.isAssignableFrom(type) && !StringUtils.hasText(ann.name())));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +, +	public MatrixVariableMethodArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +				(ann, type) -> !Map.class.isAssignableFrom(type) || StringUtils.hasText(ann.name()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +	protected AbstractNamedValueSyncArgumentResolver(, +			@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {, +	public Object resolveArgumentValue(, +			MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * is to provide access to multiple matrix variables, either all or associated with a specific, +				(ann, type) -> (Map.class.isAssignableFrom(type) && !StringUtils.hasText(ann.name())));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +, +	public MatrixVariableMethodArgumentResolver(]