[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, + *, +	 * @param inputMessage the request to extract from, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageReader}s, +		 * to be used for body extraction., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, + *, +	 * @param inputMessage the request to extract from, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageReader}s, +		 * to be used for body extraction., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +, +			ReactiveHttpInputMessage inputMessage, BodyExtractor.Context context, ResolvableType elementType,, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError) {, +	private static HttpMessageReader<MultiValueMap<String, String>> formMessageReader(BodyExtractor.Context context) {, +		return context.messageReaders().get(), +				.filter(messageReader -> messageReader, +						.canRead(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)), +				.findFirst(), +				.map(BodyExtractors::<MultiValueMap<String, String>>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageReader that supports " +, +								MediaType.APPLICATION_FORM_URLENCODED_VALUE));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, + *, +	 * @param inputMessage the request to extract from, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageReader}s, +		 * to be used for body extraction., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +, +			ReactiveHttpInputMessage inputMessage, BodyExtractor.Context context, ResolvableType elementType,, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError) {, +	private static HttpMessageReader<MultiValueMap<String, String>> formMessageReader(BodyExtractor.Context context) {, +		return context.messageReaders().get(), +				.filter(messageReader -> messageReader, +						.canRead(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)), +				.findFirst(), +				.map(BodyExtractors::<MultiValueMap<String, String>>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageReader that supports " +, +								MediaType.APPLICATION_FORM_URLENCODED_VALUE));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserter.java, + *, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageWriter}s, +		 * to be used for response body conversion., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, + *, +	 * @param inputMessage the request to extract from, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageReader}s, +		 * to be used for body extraction., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +, +			ReactiveHttpInputMessage inputMessage, BodyExtractor.Context context, ResolvableType elementType,, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError) {, +	private static HttpMessageReader<MultiValueMap<String, String>> formMessageReader(BodyExtractor.Context context) {, +		return context.messageReaders().get(), +				.filter(messageReader -> messageReader, +						.canRead(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)), +				.findFirst(), +				.map(BodyExtractors::<MultiValueMap<String, String>>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageReader that supports " +, +								MediaType.APPLICATION_FORM_URLENCODED_VALUE));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserter.java, + *, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageWriter}s, +		 * to be used for response body conversion., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +	private static final ResolvableType RESOURCE_TYPE =, +			ResolvableType.forClass(Resource.class);, +	private static <T> HttpMessageWriter<T> findMessageWriter(, +			BodyInserter.Context context, ResolvableType type, MediaType mediaType) {, +, +		return context.messageWriters().get(), +				.filter(messageWriter -> messageWriter.canWrite(type, mediaType)), +				.findFirst(), +				.map(BodyInserters::<T>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageWriter that supports " + mediaType));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, + *, +	 * @param inputMessage the request to extract from, +, +		 * Supply a {@linkplain Stream stream} of {@link HttpMessageReader}s, +		 * to be used for body extraction., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java]