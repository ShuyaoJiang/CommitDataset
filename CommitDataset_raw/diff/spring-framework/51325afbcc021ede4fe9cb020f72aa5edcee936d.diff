[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +					.map(info -> new SubPathServerRequestWrapper(request, info));, +		private final Map<String, String> pathVariables;, +, +			this.pathVariables = mergePathVariables(request, info.getUriVariables());, +		}, +, +		private static Map<String, String> mergePathVariables(ServerRequest request,, +				Map<String, String> pathVariables) {, +, +			Map<String, String> result = new LinkedHashMap<>(request.pathVariables());, +			result.putAll(pathVariables);, +			return Collections.unmodifiableMap(result);, +			return this.pathVariables;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +					.map(info -> new SubPathServerRequestWrapper(request, info));, +		private final Map<String, String> pathVariables;, +, +			this.pathVariables = mergePathVariables(request, info.getUriVariables());, +		}, +, +		private static Map<String, String> mergePathVariables(ServerRequest request,, +				Map<String, String> pathVariables) {, +, +			Map<String, String> result = new LinkedHashMap<>(request.pathVariables());, +			result.putAll(pathVariables);, +			return Collections.unmodifiableMap(result);, +			return this.pathVariables;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/NestedRouteIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +								route(GET("/{baz}"), nestedHandler::variables))), +				.andRoute(GET("/{qux}/quux"), nestedHandler::variables);, +		assertEquals("{foo=1, bar=2, baz=3}", result.getBody());, +	}, +, +	// SPR 16692, +	@Test, +	public void removeFailedPathVariables() throws Exception {, +		ResponseEntity<String> result =, +				restTemplate.getForEntity("http://localhost:" + port + "/qux/quux", String.class);, +, +		assertEquals(HttpStatus.OK, result.getStatusCode());, +		assertEquals("{qux=qux}", result.getBody());, +, +			assertEquals(request.pathVariables(),, +					request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE));, +, +			Mono<String> responseBody = Mono.just(request.pathVariables().toString());, +]