[+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +		BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean {, +	/** Indicates whether Spring should modify generated ObjectNames */, +	private boolean ensureUniqueRuntimeObjectNames = true;, +, +	/** Indicates whether Spring should expose the managed resource ClassLoader in the MBean */, +	private boolean exposeManagedResourceClassLoader = true;, +, +	 * Indicates whether Spring should ensure that {@link ObjectName ObjectNames}, +	 * generated by the configured {@link ObjectNamingStrategy} for, +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed {@code Class}., +	 * <p>The default value is {@code true}., +	 * @see #registerManagedResource, +	 * @see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object), +	 */, +	public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {, +		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames;, +	}, +, +	/**, +	 * Indicates whether or not the managed resource should be exposed on the, +	 * {@link Thread#getContextClassLoader() thread context ClassLoader} before, +	 * allowing any invocations on the MBean to occur., +	 * <p>The default value is {@code true}, exposing a {@link SpringModelMBean}, +	 * which performs thread context ClassLoader management. Switch this flag off to, +	 * expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}., +	 */, +	public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {, +		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader;, +	}, +, +	/**, +, +	//---------------------------------------------------------------------, +	// Lifecycle in bean factory: automatically register/unregister beans, +	//---------------------------------------------------------------------, +, +		register();  // TODO: to be replaced with some ContextRefreshedEvent-like callback, +	/**, +	 * Kick off bean registration automatically when deployed in an {@code ApplicationContext}., +	 * @see #registerBeans(), +	 */, +	public void register() {, +			logger.info("Registering beans for JMX exposure on startup");, +			throw ex;, +		}, +	}, +, +	/**, +	 * Unregisters all beans that this exported has exposed via JMX, +	 * when the enclosing {@code ApplicationContext} is destroyed., +	 */, +	@Override, +	public void destroy() {, +		logger.info("Unregistering JMX-exposed beans on shutdown");, +		unregisterNotificationListeners();, +		unregisterBeans();, +				logger.debug("Autodetecting user-defined JMX MBeans");, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +		BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean {, +	/** Indicates whether Spring should modify generated ObjectNames */, +	private boolean ensureUniqueRuntimeObjectNames = true;, +, +	/** Indicates whether Spring should expose the managed resource ClassLoader in the MBean */, +	private boolean exposeManagedResourceClassLoader = true;, +, +	 * Indicates whether Spring should ensure that {@link ObjectName ObjectNames}, +	 * generated by the configured {@link ObjectNamingStrategy} for, +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed {@code Class}., +	 * <p>The default value is {@code true}., +	 * @see #registerManagedResource, +	 * @see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object), +	 */, +	public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {, +		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames;, +	}, +, +	/**, +	 * Indicates whether or not the managed resource should be exposed on the, +	 * {@link Thread#getContextClassLoader() thread context ClassLoader} before, +	 * allowing any invocations on the MBean to occur., +	 * <p>The default value is {@code true}, exposing a {@link SpringModelMBean}, +	 * which performs thread context ClassLoader management. Switch this flag off to, +	 * expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}., +	 */, +	public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {, +		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader;, +	}, +, +	/**, +, +	//---------------------------------------------------------------------, +	// Lifecycle in bean factory: automatically register/unregister beans, +	//---------------------------------------------------------------------, +, +		register();  // TODO: to be replaced with some ContextRefreshedEvent-like callback, +	/**, +	 * Kick off bean registration automatically when deployed in an {@code ApplicationContext}.]