[+++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +	 * Return the form parts from the body of the request or an empty {@code Mono}, +	 * if the Content-Type is not "multipart/form-data"., +	 */, +	Mono<MultiValueMap<String, Part>> getMultipartData();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +	 * Return the form parts from the body of the request or an empty {@code Mono}, +	 * if the Content-Type is not "multipart/form-data"., +	 */, +	Mono<MultiValueMap<String, Part>> getMultipartData();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchangeDecorator.java, +import org.springframework.http.codec.multipart.Part;, +	public Mono<MultiValueMap<String, Part>> getMultipartData() {, +		return getDelegate().getMultipartData();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +	 * Return the form parts from the body of the request or an empty {@code Mono}, +	 * if the Content-Type is not "multipart/form-data"., +	 */, +	Mono<MultiValueMap<String, Part>> getMultipartData();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchangeDecorator.java, +import org.springframework.http.codec.multipart.Part;, +	public Mono<MultiValueMap<String, Part>> getMultipartData() {, +		return getDelegate().getMultipartData();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +import static org.springframework.http.codec.multipart.MultipartHttpMessageReader.*;, +	private static final Mono<MultiValueMap<String, Part>> EMPTY_MULTIPART_DATA =, +			Mono.just(CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<String, Part>(0))), +					.cache();, +, +	private final Mono<MultiValueMap<String, Part>> multipartDataMono;, +, +		this.multipartDataMono = initMultipartData(request, codecConfigurer);, +	@SuppressWarnings("unchecked"), +	private static Mono<MultiValueMap<String, Part>> initMultipartData(, +			ServerHttpRequest request, ServerCodecConfigurer codecConfigurer) {, +, +		MediaType contentType;, +		try {, +			contentType = request.getHeaders().getContentType();, +			if (MULTIPART_FORM_DATA.isCompatibleWith(contentType)) {, +				return ((HttpMessageReader<MultiValueMap<String, Part>>)codecConfigurer, +						.getReaders(), +						.stream(), +						.filter(messageReader -> messageReader.canRead(MULTIPART_VALUE_TYPE, MULTIPART_FORM_DATA)), +						.findFirst(), +						.orElseThrow(() -> new IllegalStateException("Could not find HttpMessageReader that supports " + MULTIPART_FORM_DATA))), +						.readMono(FORM_DATA_VALUE_TYPE, request, Collections.emptyMap()), +						.switchIfEmpty(EMPTY_MULTIPART_DATA), +						.cache();, +			}, +		}, +		catch (InvalidMediaTypeException ex) {, +			// Ignore, +		}, +		return EMPTY_MULTIPART_DATA;, +	}, +, +	public Mono<MultiValueMap<String, Part>> getMultipartData() {, +		return this.multipartDataMono;, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +	 * Return the form parts from the body of the request or an empty {@code Mono}, +	 * if the Content-Type is not "multipart/form-data"., +	 */, +	Mono<MultiValueMap<String, Part>> getMultipartData();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchangeDecorator.java, +import org.springframework.http.codec.multipart.Part;, +	public Mono<MultiValueMap<String, Part>> getMultipartData() {, +		return getDelegate().getMultipartData();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +import org.springframework.http.codec.multipart.Part;, +import static org.springframework.http.codec.multipart.MultipartHttpMessageReader.*;, +	private static final Mono<MultiValueMap<String, Part>> EMPTY_MULTIPART_DATA =, +			Mono.just(CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<String, Part>(0))), +					.cache();, +]