[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * A base class for {@link RequestCondition} types providing implementations of , + * {@link #equals(Object)}, {@link #hashCode()}, and {@link #toString()}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * A base class for {@link RequestCondition} types providing implementations of , + * {@link #equals(Object)}, {@link #hashCode()}, and {@link #toString()}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * A logical disjunction (' || ') request condition to match a request's 'Content-Type' , + * header to a list of media type expressions. Two kinds of media type expressions are , + * supported, which are described in {@link RequestMapping#consumes()} and , + * {@link RequestMapping#headers()} where the header name is 'Content-Type'. , + * Regardless of which syntax is used, the semantics are the same., +	 * Creates a new instance from 0 or more "consumes" expressions., +	 * @param consumes expressions with the syntax described in {@link RequestMapping#consumes()}, +	 * 		if 0 expressions are provided, the condition will match to every request, +	 * Creates a new instance with "consumes" and "header" expressions. "Header" expressions , +	 * where the header name is not 'Content-Type' or have no header value defined are ignored., +	 * If 0 expressions are provided in total, the condition will match to every request, +	 * @param consumes expressions with the syntax described in {@link RequestMapping#consumes()}, +	 * @param headers expressions with the syntax described in {@link RequestMapping#headers()}, +	 * Private constructor accepting parsed media type expressions., +	 * Returns the media types for this condition., +	 * Whether the condition has any media type expressions., +	 * Returns the "other" instance if it has any expressions; returns "this" , +	 * instance otherwise. Practically that means a method-level "consumes" , +	 * overrides a type-level "consumes" condition., +	 * Checks if any of the contained media type expressions match the given , +	 * request 'Accept' header and returns an instance that is guaranteed to , +	 * contain matching expressions only. The match is performed via, +	 * {@link MediaType#includes(MediaType)}., +	 * 		or a new condition with matching expressions only; , +	 * 		or {@code null} if no expressions match., +	 * 	<li>Less than 1 if "this" has more or more specific media type expressions, +	 * 	<li>Greater than 1 if "other" has more or more specific media type expressions, +	 * <p>It is assumed that both instances have been obtained via , +	 * {@link #getMatchingCondition(HttpServletRequest)} and each instance contains , +	 * the matching consumable media type expression only or is otherwise empty., +	 * Parses and matches a single media type expression to a request's 'Content-Type' header. , +		protected boolean matchMediaType(HttpServletRequest request) {, +			return getMediaType().includes(contentType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * A base class for {@link RequestCondition} types providing implementations of , + * {@link #equals(Object)}, {@link #hashCode()}, and {@link #toString()}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * A logical disjunction (' || ') request condition to match a request's 'Content-Type' , + * header to a list of media type expressions. Two kinds of media type expressions are , + * supported, which are described in {@link RequestMapping#consumes()} and , + * {@link RequestMapping#headers()} where the header name is 'Content-Type'. , + * Regardless of which syntax is used, the semantics are the same., +	 * Creates a new instance from 0 or more "consumes" expressions., +	 * @param consumes expressions with the syntax described in {@link RequestMapping#consumes()}, +	 * 		if 0 expressions are provided, the condition will match to every request, +	 * Creates a new instance with "consumes" and "header" expressions. "Header" expressions , +	 * where the header name is not 'Content-Type' or have no header value defined are ignored., +	 * If 0 expressions are provided in total, the condition will match to every request, +	 * @param consumes expressions with the syntax described in {@link RequestMapping#consumes()}, +	 * @param headers expressions with the syntax described in {@link RequestMapping#headers()}, +	 * Private constructor accepting parsed media type expressions., +	 * Returns the media types for this condition., +	 * Whether the condition has any media type expressions., +	 * Returns the "other" instance if it has any expressions; returns "this" , +	 * instance otherwise. Practically that means a method-level "consumes" , +	 * overrides a type-level "consumes" condition., +	 * Checks if any of the contained media type expressions match the given , +	 * request 'Accept' header and returns an instance that is guaranteed to , +	 * contain matching expressions only. The match is performed via, +	 * {@link MediaType#includes(MediaType)}., +	 * 		or a new condition with matching expressions only; , +	 * 		or {@code null} if no expressions match., +	 * 	<li>Less than 1 if "this" has more or more specific media type expressions, +	 * 	<li>Greater than 1 if "other" has more or more specific media type expressions, +	 * <p>It is assumed that both instances have been obtained via , +	 * {@link #getMatchingCondition(HttpServletRequest)} and each instance contains , +	 * the matching consumable media type expression only or is otherwise empty., +	 * Parses and matches a single media type expression to a request's 'Content-Type' header. , +		protected boolean matchMediaType(HttpServletRequest request) {, +			return getMediaType().includes(contentType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, + * A logical conjunction (' && ') request condition that matches a request against , + * a set of header expressions with syntax defined in {@link RequestMapping#headers()}., + * <p>Expressions passed to the constructor with header names 'Accept' or , + * 'Content-Type' are ignored. See {@link ConsumesRequestCondition} and, + * {@link ProducesRequestCondition} for those. , +	 * Create a new instance from the given header expressions. Expressions with , +	 * header names 'Accept' or 'Content-Type' are ignored. See {@link ConsumesRequestCondition} , +	 * and {@link ProducesRequestCondition} for those. , +	 * @param headers media type expressions with syntax defined in {@link RequestMapping#headers()};, +	 * 		if 0, the condition will match to every request., +	 * Returns a new instance with the union of the header expressions , +	 * from "this" and the "other" instance., +	 * Returns "this" instance if the request matches all expressions; , +	 * or {@code null} otherwise., +	 * <p>It is assumed that both instances have been obtained via , +	 * {@link #getMatchingCondition(HttpServletRequest)} and each instance , +	 * contains the matching header expression only or is otherwise empty., +	 * Parses and matches a single header expression to a request. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * A base class for {@link RequestCondition} types providing implementations of , + * {@link #equals(Object)}, {@link #hashCode()}, and {@link #toString()}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java]