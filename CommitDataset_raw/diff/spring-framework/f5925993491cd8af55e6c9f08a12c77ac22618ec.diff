[+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java, + * Copyright 2002-2016 the original author or authors., +	 * Return whether this is an optional value, that is, to be ignored, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java, + * Copyright 2002-2016 the original author or authors., +	 * Return whether this is an optional value, that is, to be ignored, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.messaging.Message;, +import org.springframework.util.Assert;, +, +	private final StompDecoder stompDecoder;, +, +		Assert.notNull(encoder, "StompEncoder is required");, +		Assert.notNull(decoder, "StompDecoder is required");, +		this.encodingFunction = new EncodingFunction(encoder);, +, +		return this.encodingFunction.apply(message);, +, +		public EncodingFunction(StompEncoder encoder) {, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java, + * Copyright 2002-2016 the original author or authors., +	 * Return whether this is an optional value, that is, to be ignored, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.messaging.Message;, +import org.springframework.util.Assert;, +, +	private final StompDecoder stompDecoder;, +, +		Assert.notNull(encoder, "StompEncoder is required");, +		Assert.notNull(decoder, "StompDecoder is required");, +		this.encodingFunction = new EncodingFunction(encoder);, +, +		return this.encodingFunction.apply(message);, +, +		public EncodingFunction(StompEncoder encoder) {, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.java, +import java.util.Collections;, +			List<DispatcherConfiguration> configList = Collections.<DispatcherConfiguration>singletonList(config);, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java, + * Copyright 2002-2016 the original author or authors., +	 * Return whether this is an optional value, that is, to be ignored, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.messaging.Message;, +import org.springframework.util.Assert;, +, +	private final StompDecoder stompDecoder;, +, +		Assert.notNull(encoder, "StompEncoder is required");, +		Assert.notNull(decoder, "StompDecoder is required");, +		this.encodingFunction = new EncodingFunction(encoder);, +, +		return this.encodingFunction.apply(message);, +, +		public EncodingFunction(StompEncoder encoder) {, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.java, +import java.util.Collections;, +			List<DispatcherConfiguration> configList = Collections.<DispatcherConfiguration>singletonList(config);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +		catch (Throwable ex) {, +		if (ioThreadCount <= 0) {, +		return new NioEventLoopGroup(ioThreadCount, new NamedDaemonThreadFactory("reactor-tcp-io"));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java, + * Copyright 2002-2016 the original author or authors., +	 * Return whether this is an optional value, that is, to be ignored, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.messaging.Message;, +import org.springframework.util.Assert;, +, +	private final StompDecoder stompDecoder;, +, +		Assert.notNull(encoder, "StompEncoder is required");, +		Assert.notNull(decoder, "StompDecoder is required");, +		this.encodingFunction = new EncodingFunction(encoder);, +, +		return this.encodingFunction.apply(message);, +, +		public EncodingFunction(StompEncoder encoder) {, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.java, +import java.util.Collections;, +			List<DispatcherConfiguration> configList = Collections.<DispatcherConfiguration>singletonList(config);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +		catch (Throwable ex) {, +		if (ioThreadCount <= 0) {, +		return new NioEventLoopGroup(ioThreadCount, new NamedDaemonThreadFactory("reactor-tcp-io"));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java, + * @param <P> the payload type of messages read or written to the TCP stream., +	public Reactor2TcpConnection(ChannelStream<Message<P>, Message<P>> channelStream, Promise<Void> closePromise) {]