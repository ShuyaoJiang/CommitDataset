[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +				return path.subPath(0, i + 1);, +		return fullPath.subPath(contextPath.elements().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +				return path.subPath(0, i + 1);, +		return fullPath.subPath(contextPath.elements().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, + * Structured representation of a path whose {@link Element Elements} are, + * accessible as a sequence of either {@link Separator Separator} and/or, + * {@link Segment Segment} (element) types., + * <p>Each {@code Segment} exposes its own structure decoded safely without the, + * risk of encoded reserved characters altering the path or segment structure., + *, + * <p>An instance of this class can also be created via, + * {@link #parse(String, Charset)}. The path for an HTTP request is parsed once, + * and subsequently accessible via {@link ServerHttpRequest#getPath()}., +	/**, +	 * Extract a sub-path from the given offset into the elements list., +	 * @param index the start element index (inclusive), +	 * @return the sub-path, +	 */, +	default PathContainer subPath(int index) {, +		return subPath(index, elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the, +	 * element list and to the end offset (exclusive)., +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	default PathContainer subPath(int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(this, startIndex, endIndex);, +	}, +, +	 * Common representation of a path element, e.g. separator or segment., +	 * Path separator element., +	 * Path segment element., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +				return path.subPath(0, i + 1);, +		return fullPath.subPath(contextPath.elements().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, + * Structured representation of a path whose {@link Element Elements} are, + * accessible as a sequence of either {@link Separator Separator} and/or, + * {@link Segment Segment} (element) types., + * <p>Each {@code Segment} exposes its own structure decoded safely without the, + * risk of encoded reserved characters altering the path or segment structure., + *, + * <p>An instance of this class can also be created via, + * {@link #parse(String, Charset)}. The path for an HTTP request is parsed once, + * and subsequently accessible via {@link ServerHttpRequest#getPath()}., +	/**, +	 * Extract a sub-path from the given offset into the elements list., +	 * @param index the start element index (inclusive), +	 * @return the sub-path, +	 */, +	default PathContainer subPath(int index) {, +		return subPath(index, elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the, +	 * element list and to the end offset (exclusive)., +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	default PathContainer subPath(int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(this, startIndex, endIndex);, +	}, +, +	 * Common representation of a path element, e.g. separator or segment., +	 * Path separator element., +	 * Path segment element., +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +				info = new PathRemainingMatchInfo(pathContainer.subPath(matchingContext.remainingPathIndex),, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +				return path.subPath(0, i + 1);, +		return fullPath.subPath(contextPath.elements().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, + * Structured representation of a path whose {@link Element Elements} are, + * accessible as a sequence of either {@link Separator Separator} and/or, + * {@link Segment Segment} (element) types., + * <p>Each {@code Segment} exposes its own structure decoded safely without the, + * risk of encoded reserved characters altering the path or segment structure., + *, + * <p>An instance of this class can also be created via, + * {@link #parse(String, Charset)}. The path for an HTTP request is parsed once, + * and subsequently accessible via {@link ServerHttpRequest#getPath()}., +	/**, +	 * Extract a sub-path from the given offset into the elements list., +	 * @param index the start element index (inclusive), +	 * @return the sub-path, +	 */, +	default PathContainer subPath(int index) {, +		return subPath(index, elements().size());, +	}, +, +	/**]