[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.util.Assert;, +	private final AtomicReference<Object> asyncResult = new AtomicReference<Object>(RESULT_NONE);, +		this.asyncResult.set(asyncResult);, +	public Object getAsyncResult(long timeToWait) {, +, +		if (this.mockRequest.getAsyncContext() != null) {, +			timeToWait = (timeToWait == -1 ? this.mockRequest.getAsyncContext().getTimeout() : timeToWait);, +		if (timeToWait > 0) {, +			long endTime = System.currentTimeMillis() + timeToWait;, +			while (System.currentTimeMillis() < endTime && this.asyncResult.get() == RESULT_NONE) {, +					Thread.sleep(200);, +				catch (InterruptedException ex) {, +					throw new IllegalStateException("Interrupted while waiting for " +, +							"async result to be set for handler [" + this.handler + "]", ex);, +		Assert.state(this.asyncResult.get() != RESULT_NONE,, +				"Async result for handler [" + this.handler + "] " +, +						"was not set during the specified timeToWait=" + timeToWait);, +, +		return this.asyncResult.get();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.util.Assert;, +	private final AtomicReference<Object> asyncResult = new AtomicReference<Object>(RESULT_NONE);, +		this.asyncResult.set(asyncResult);, +	public Object getAsyncResult(long timeToWait) {, +, +		if (this.mockRequest.getAsyncContext() != null) {, +			timeToWait = (timeToWait == -1 ? this.mockRequest.getAsyncContext().getTimeout() : timeToWait);, +		if (timeToWait > 0) {, +			long endTime = System.currentTimeMillis() + timeToWait;, +			while (System.currentTimeMillis() < endTime && this.asyncResult.get() == RESULT_NONE) {, +					Thread.sleep(200);, +				catch (InterruptedException ex) {, +					throw new IllegalStateException("Interrupted while waiting for " +, +							"async result to be set for handler [" + this.handler + "]", ex);, +		Assert.state(this.asyncResult.get() != RESULT_NONE,, +				"Async result for handler [" + this.handler + "] " +, +						"was not set during the specified timeToWait=" + timeToWait);, +, +		return this.asyncResult.get();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MvcResult.java, + * Copyright 2002-2014 the original author or authors., +	 * Get the result of async execution. This method will wait for the async result, +	 * to be set for up to the amount of time configured on the async request,, +	 * i.e. {@link org.springframework.mock.web.MockAsyncContext#getTimeout()}., +	 * @throws IllegalStateException if the async result was not set., +	 * Get the result of async execution. This method will wait for the async result, +	 * to be set for up to the specified amount of time., +	 * @param timeToWait how long to wait for the async result to be set, in, +	 * 	milliseconds; if -1, then the async request timeout value is used,, +	 *  i.e.{@link org.springframework.mock.web.MockAsyncContext#getTimeout()}., +	 *, +	 * @throws IllegalStateException if the async result was not set., +	Object getAsyncResult(long timeToWait);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.util.Assert;, +	private final AtomicReference<Object> asyncResult = new AtomicReference<Object>(RESULT_NONE);, +		this.asyncResult.set(asyncResult);, +	public Object getAsyncResult(long timeToWait) {, +, +		if (this.mockRequest.getAsyncContext() != null) {, +			timeToWait = (timeToWait == -1 ? this.mockRequest.getAsyncContext().getTimeout() : timeToWait);, +		if (timeToWait > 0) {, +			long endTime = System.currentTimeMillis() + timeToWait;, +			while (System.currentTimeMillis() < endTime && this.asyncResult.get() == RESULT_NONE) {, +					Thread.sleep(200);, +				catch (InterruptedException ex) {, +					throw new IllegalStateException("Interrupted while waiting for " +, +							"async result to be set for handler [" + this.handler + "]", ex);, +		Assert.state(this.asyncResult.get() != RESULT_NONE,, +				"Async result for handler [" + this.handler + "] " +, +						"was not set during the specified timeToWait=" + timeToWait);, +, +		return this.asyncResult.get();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MvcResult.java, + * Copyright 2002-2014 the original author or authors., +	 * Get the result of async execution. This method will wait for the async result, +	 * to be set for up to the amount of time configured on the async request,, +	 * i.e. {@link org.springframework.mock.web.MockAsyncContext#getTimeout()}., +	 * @throws IllegalStateException if the async result was not set., +	 * Get the result of async execution. This method will wait for the async result, +	 * to be set for up to the specified amount of time., +	 * @param timeToWait how long to wait for the async result to be set, in, +	 * 	milliseconds; if -1, then the async request timeout value is used,, +	 *  i.e.{@link org.springframework.mock.web.MockAsyncContext#getTimeout()}., +	 *, +	 * @throws IllegalStateException if the async result was not set., +	Object getAsyncResult(long timeToWait);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, + * Copyright 2002-2014 the original author or authors., +	protected void service(HttpServletRequest request, HttpServletResponse response), +			throws ServletException, IOException {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.util.Assert;, +	private final AtomicReference<Object> asyncResult = new AtomicReference<Object>(RESULT_NONE);, +		this.asyncResult.set(asyncResult);]