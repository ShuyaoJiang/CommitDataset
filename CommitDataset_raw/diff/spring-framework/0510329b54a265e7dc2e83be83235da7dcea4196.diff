[+++ b/build.gradle, +	ext.undertowVersion      = "1.3.0.CR2", +++ b/build.gradle, +	ext.undertowVersion      = "1.3.0.CR2", +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, +import java.lang.reflect.Method;, +import io.undertow.connector.ByteBufferPool;, +import io.undertow.connector.PooledByteBuffer;, +import io.undertow.server.DefaultByteBufferPool;, +import org.xnio.IoFuture;, +import org.xnio.Pool;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, + * Compatible with Undertow from version 1.0 to 1.3., +	private static final boolean undertow13Present = ClassUtils.isPresent("io.undertow.connector.ByteBufferPool",, +			UndertowXhrTransport.class.getClassLoader());, +, +	private final UndertowBufferSupport undertowBufferSupport;, +		if (undertow13Present) {, +			this.undertowBufferSupport = new Undertow13BufferSupport();, +		}, +		else {, +			this.undertowBufferSupport = new Undertow10BufferSupport();, +		}, +		ClientCallback<ClientConnection> clientCallback = new ClientCallback<ClientConnection>() {, +, +		};, +, +		this.undertowBufferSupport.httpClientConnect(this.httpClient, clientCallback, url, worker, this.optionMap);, +, +			ClientConnection connection = this.undertowBufferSupport, +					.httpClientConnect(this.httpClient, url, this.worker, this.optionMap).get();, +, +, +			Object pooled = undertowBufferSupport.allocatePooledResource();, +					ByteBuffer buffer = undertowBufferSupport.getByteBuffer(pooled);, +				undertowBufferSupport.closePooledResource(pooled);, +	private interface UndertowBufferSupport {, +, +		Object allocatePooledResource();, +, +		ByteBuffer getByteBuffer(Object pooled);, +, +		void closePooledResource(Object pooled);, +, +		void httpClientConnect(UndertowClient httpClient, final ClientCallback<ClientConnection> listener,, +				final URI uri, final XnioWorker worker, OptionMap options);, +, +		IoFuture<ClientConnection> httpClientConnect(UndertowClient httpClient, final URI uri,, +				final XnioWorker worker, OptionMap options);, +	}, +, +	private class Undertow10BufferSupport implements UndertowBufferSupport {, +, +		private final org.xnio.Pool<ByteBuffer> xnioBufferPool;, +, +		private final Method httpClientConnectCallbackMethod;, +, +		private final Method httpClientConnectMethod;, +, +		public Undertow10BufferSupport() {, +			this.xnioBufferPool = new org.xnio.ByteBufferSlicePool(1048, 1048);, +			this.httpClientConnectCallbackMethod = ReflectionUtils.findMethod(UndertowClient.class, "connect",, +					ClientCallback.class, URI.class, XnioWorker.class, Pool.class, OptionMap.class);, +			this.httpClientConnectMethod = ReflectionUtils.findMethod(UndertowClient.class, "connect",, +					URI.class, XnioWorker.class, Pool.class, OptionMap.class);, +		}, +, +		@Override, +		public Object allocatePooledResource() {, +			return this.xnioBufferPool.allocate();, +		}, +, +		@Override, +		@SuppressWarnings("unchecked"), +		public ByteBuffer getByteBuffer(Object pooled) {, +			return ((org.xnio.Pooled<ByteBuffer>) pooled).getResource();, +		}, +, +		@Override, +		@SuppressWarnings("unchecked"), +		public void closePooledResource(Object pooled) {, +			((org.xnio.Pooled<ByteBuffer>) pooled).close();, +		}, +, +		@Override, +		public void httpClientConnect(UndertowClient httpClient, ClientCallback<ClientConnection> listener, URI uri,, +				XnioWorker worker, OptionMap options) {, +			ReflectionUtils.invokeMethod(httpClientConnectCallbackMethod, httpClient, listener, uri, worker,, +					this.xnioBufferPool, options);, +, +		}, +, +		@Override, +		@SuppressWarnings("unchecked"), +		public IoFuture<ClientConnection> httpClientConnect(UndertowClient httpClient, URI uri,, +				XnioWorker worker, OptionMap options) {, +			return (IoFuture<ClientConnection>) ReflectionUtils.invokeMethod(httpClientConnectMethod, httpClient, uri,, +					worker, this.xnioBufferPool, options);, +		}]