[+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, +	 * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources, +	 * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}, +					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());, +		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));, +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, +	 * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources, +	 * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}, +					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());, +		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));, +++ b/spring-context/src/test/java/org/springframework/context/support/PropertyResourceConfigurerIntegrationTests.java, +	@Test, +	public void testPropertyPlaceholderConfigurerWithNestedUnresolvableReference() {, +		StaticApplicationContext ac = new StaticApplicationContext();, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("name", "name${var}");, +		ac.registerSingleton("tb1", TestBean.class, pvs);, +		pvs = new MutablePropertyValues();, +		pvs.add("properties", "var=${m}var\nm=${var2}\nvar2=${m2}");, +		ac.registerSingleton("configurer1", PropertyPlaceholderConfigurer.class, pvs);, +		try {, +			ac.refresh();, +			fail("Should have thrown BeanDefinitionStoreException");, +		}, +		catch (BeanDefinitionStoreException ex) {, +			// expected, +			ex.printStackTrace();, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, +	 * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources, +	 * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}, +					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());, +		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));, +++ b/spring-context/src/test/java/org/springframework/context/support/PropertyResourceConfigurerIntegrationTests.java, +	@Test, +	public void testPropertyPlaceholderConfigurerWithNestedUnresolvableReference() {, +		StaticApplicationContext ac = new StaticApplicationContext();, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("name", "name${var}");, +		ac.registerSingleton("tb1", TestBean.class, pvs);, +		pvs = new MutablePropertyValues();, +		pvs.add("properties", "var=${m}var\nm=${var2}\nvar2=${m2}");, +		ac.registerSingleton("configurer1", PropertyPlaceholderConfigurer.class, pvs);, +		try {, +			ac.refresh();, +			fail("Should have thrown BeanDefinitionStoreException");, +		}, +		catch (BeanDefinitionStoreException ex) {, +			// expected, +			ex.printStackTrace();, +		}, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java, +		pc.setProperties(new Properties() {{, +			put("my.name", "local");, +		}});, +	@Test(expected=BeanDefinitionStoreException.class), +	public void nestedUnresolvablePlaceholder() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("testBean",, +				genericBeanDefinition(TestBean.class), +						.addPropertyValue("name", "${my.name}"), +						.getBeanDefinition());, +, +		PropertySourcesPlaceholderConfigurer pc = new PropertySourcesPlaceholderConfigurer();, +		pc.setProperties(new Properties() {{, +			put("my.name", "${bogus}");, +		}});, +		pc.postProcessBeanFactory(bf); // should throw, +	}, +, +	@Test, +	public void ignoredNestedUnresolvablePlaceholder() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("testBean",, +				genericBeanDefinition(TestBean.class), +						.addPropertyValue("name", "${my.name}"), +						.getBeanDefinition());, +, +		PropertySourcesPlaceholderConfigurer pc = new PropertySourcesPlaceholderConfigurer();, +		pc.setProperties(new Properties() {{, +			put("my.name", "${bogus}");, +		}});, +		pc.setIgnoreUnresolvablePlaceholders(true);, +		pc.postProcessBeanFactory(bf);, +		assertThat(bf.getBean(TestBean.class).getName(), equalTo("${bogus}"));, +	}, +, +		}, +		else {, +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, +	 * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources, +	 * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}, +					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());, +		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));, +++ b/spring-context/src/test/java/org/springframework/context/support/PropertyResourceConfigurerIntegrationTests.java, +	@Test]