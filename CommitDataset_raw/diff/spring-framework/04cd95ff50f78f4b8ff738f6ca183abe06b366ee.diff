[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class elementType = null;, +		if (methodParam != null) {, +			elementType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam);, +		}, +		if (elementType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class keyType = null;, +		Class valueType = null;, +		if (methodParam != null) {, +			keyType = GenericCollectionTypeResolver.getMapKeyParameterType(methodParam);, +			valueType = GenericCollectionTypeResolver.getMapValueParameterType(methodParam);, +		}, +		if (keyType == null && valueType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class elementType = null;, +		if (methodParam != null) {, +			elementType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam);, +		}, +		if (elementType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class keyType = null;, +		Class valueType = null;, +		if (methodParam != null) {, +			keyType = GenericCollectionTypeResolver.getMapKeyParameterType(methodParam);, +			valueType = GenericCollectionTypeResolver.getMapValueParameterType(methodParam);, +		}, +		if (keyType == null && valueType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +++ b/org.springframework.beans/src/test/java/test/beans/DerivedTestBean.java, + * Copyright 2002-2009 the original author or authors., +	public void setActualSpouse(TestBean spouse) {, +		setSpouse(spouse);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class elementType = null;, +		if (methodParam != null) {, +			elementType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam);, +		}, +		if (elementType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class keyType = null;, +		Class valueType = null;, +		if (methodParam != null) {, +			keyType = GenericCollectionTypeResolver.getMapKeyParameterType(methodParam);, +			valueType = GenericCollectionTypeResolver.getMapValueParameterType(methodParam);, +		}, +		if (keyType == null && valueType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +++ b/org.springframework.beans/src/test/java/test/beans/DerivedTestBean.java, + * Copyright 2002-2009 the original author or authors., +	public void setActualSpouse(TestBean spouse) {, +		setSpouse(spouse);, +	}, +, +++ b/org.springframework.beans/src/test/java/test/beans/TestBean.java, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class elementType = null;, +		if (methodParam != null) {, +			elementType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam);, +		}, +		if (elementType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class keyType = null;, +		Class valueType = null;, +		if (methodParam != null) {, +			keyType = GenericCollectionTypeResolver.getMapKeyParameterType(methodParam);, +			valueType = GenericCollectionTypeResolver.getMapValueParameterType(methodParam);, +		}]