[+++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2014 the original author or authors., + * Convenient superclass for application objects running in a {@link WebApplicationContext}., + * Provides {@code getWebApplicationContext()}, {@code getServletContext()}, and, + * {@code getTempDir()} accessors., + *, + * <p>Note: It is generally recommended to use individual callback interfaces for the actual, + * callbacks needed. This broad base class is primarily intended for use within the framework,, + * in case of {@link ServletContext} access etc typically being needed., +public abstract class WebApplicationObjectSupport extends ApplicationObjectSupport implements ServletContextAware {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2014 the original author or authors., + * Convenient superclass for application objects running in a {@link WebApplicationContext}., + * Provides {@code getWebApplicationContext()}, {@code getServletContext()}, and, + * {@code getTempDir()} accessors., + *, + * <p>Note: It is generally recommended to use individual callback interfaces for the actual, + * callbacks needed. This broad base class is primarily intended for use within the framework,, + * in case of {@link ServletContext} access etc typically being needed., +public abstract class WebApplicationObjectSupport extends ApplicationObjectSupport implements ServletContextAware {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java, + * A {@link org.springframework.web.servlet.ViewResolver} implementation that uses, + * bean definitions in a {@link ResourceBundle}, specified by the bundle basename., + * <p>The bundle is typically defined in a properties file, located in the classpath., + * The default bundle basename is "views"., + * <p>This {@code ViewResolver} supports localized view definitions, using the, + * default support of {@link java.util.PropertyResourceBundle}. For example, the, + * basename "views" will be resolved as class path resources "views_de_AT.properties",, + * "views_de.properties", "views.properties" - for a given Locale "de_AT"., + * <p>Note: This {@code ViewResolver} implements the {@link Ordered} interface, + * in order to allow for flexible participation in {@code ViewResolver} chaining., + * For example, some special views could be defined via this {@code ViewResolver}, + * (giving it 0 as "order" value), while all remaining views could be resolved by, + * a {@link UrlBasedViewResolver}., +		setBasenames(basename);, +	public void setLocalesToInitialize(Locale... localesToInitialize) {, +			// Allow for ViewResolver chaining..., +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2014 the original author or authors., + * Convenient superclass for application objects running in a {@link WebApplicationContext}., + * Provides {@code getWebApplicationContext()}, {@code getServletContext()}, and, + * {@code getTempDir()} accessors., + *, + * <p>Note: It is generally recommended to use individual callback interfaces for the actual, + * callbacks needed. This broad base class is primarily intended for use within the framework,, + * in case of {@link ServletContext} access etc typically being needed., +public abstract class WebApplicationObjectSupport extends ApplicationObjectSupport implements ServletContextAware {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java, + * A {@link org.springframework.web.servlet.ViewResolver} implementation that uses, + * bean definitions in a {@link ResourceBundle}, specified by the bundle basename., + * <p>The bundle is typically defined in a properties file, located in the classpath., + * The default bundle basename is "views"., + * <p>This {@code ViewResolver} supports localized view definitions, using the, + * default support of {@link java.util.PropertyResourceBundle}. For example, the, + * basename "views" will be resolved as class path resources "views_de_AT.properties",, + * "views_de.properties", "views.properties" - for a given Locale "de_AT"., + * <p>Note: This {@code ViewResolver} implements the {@link Ordered} interface, + * in order to allow for flexible participation in {@code ViewResolver} chaining., + * For example, some special views could be defined via this {@code ViewResolver}, + * (giving it 0 as "order" value), while all remaining views could be resolved by, + * a {@link UrlBasedViewResolver}., +		setBasenames(basename);, +	public void setLocalesToInitialize(Locale... localesToInitialize) {, +			// Allow for ViewResolver chaining..., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java, + * A {@link org.springframework.web.servlet.ViewResolver} implementation that uses, + * bean definitions in a dedicated XML file for view definitions, specified by, + * resource location. The file will typically be located in the WEB-INF directory;, + * the default is "/WEB-INF/views.xml"., + * <p>This {@code ViewResolver} does not support internationalization at the level, + * of its definition resources. Consider {@link ResourceBundleViewResolver} if you, + * need to apply different view resources per locale., + * <p>Note: This {@code ViewResolver} implements the {@link Ordered} interface, + * in order to allow for flexible participation in {@code ViewResolver} chaining., + * For example, some special views could be defined via this {@code ViewResolver}, + * (giving it 0 as "order" value), while all remaining views could be resolved by, + * a {@link UrlBasedViewResolver}., +		return this.order;, +			// Allow for ViewResolver chaining...]