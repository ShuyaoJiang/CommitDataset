[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default"), +	public Object varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default"), +	public Object varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T varArgsKey(Object... args);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default"), +	public Object varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T varArgsKey(Object... args);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@Cacheable(value = "default"), +	public Long varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default"), +	public Object varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T varArgsKey(Object... args);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@Cacheable(value = "default"), +	public Long varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +		public CacheOperationContext(CacheOperation operation, Method method,, +				Object[] args, Object target, Class<?> targetClass) {, +			this.args = extractArgs(method, args);, +		private Object[] extractArgs(Method method, Object[] args) {, +			if (!method.isVarArgs()) {, +				return args;, +			}, +			Object[] varArgs = (Object[]) args[args.length - 1];, +			Object[] combinedArgs = new Object[args.length - 1 + varArgs.length];, +			System.arraycopy(args, 0, combinedArgs, 0, args.length - 1);, +			System.arraycopy(varArgs, 0, combinedArgs, args.length - 1, varArgs.length);, +			return combinedArgs;, +		}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default"), +	public Object varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T varArgsKey(Object... args);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@Cacheable(value = "default"), +	public Long varArgsKey(Object... args) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +		public CacheOperationContext(CacheOperation operation, Method method,, +				Object[] args, Object target, Class<?> targetClass) {, +			this.args = extractArgs(method, args);, +		private Object[] extractArgs(Method method, Object[] args) {, +			if (!method.isVarArgs()) {, +				return args;, +			}, +			Object[] varArgs = (Object[]) args[args.length - 1];, +			Object[] combinedArgs = new Object[args.length - 1 + varArgs.length];, +			System.arraycopy(args, 0, combinedArgs, 0, args.length - 1);, +			System.arraycopy(varArgs, 0, combinedArgs, args.length - 1, varArgs.length);, +			return combinedArgs;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/KeyGenerator.java, + * Copyright 2002-2013 the original author or authors.]