[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +import java.util.HashMap;, +import java.util.Map;, +import org.hamcrest.Matcher;, +import org.junit.BeforeClass;, +import static org.mockito.Matchers.*;, +	static Map<Class<?>, String> importFrom = new HashMap<Class<?>, String>();, +, +	@BeforeClass, +	public static void clearImportFrom() {, +		ImportSelectorTests.importFrom.clear();, +	}, +, +	@Test, +	public void correctMetaDataOnIndirectImports() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(IndirectConfig.class);, +		Matcher<String> isFromIndirect = equalTo(IndirectImport.class.getName());, +		System.out.println(importFrom);, +		assertThat(importFrom.get(ImportSelector1.class), isFromIndirect);, +		assertThat(importFrom.get(ImportSelector2.class), isFromIndirect);, +		assertThat(importFrom.get(DeferredImportSelector1.class), isFromIndirect);, +		assertThat(importFrom.get(DeferredImportSelector2.class), isFromIndirect);, +	}, +, +			ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName());, +			ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName());, +			ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName());, +			ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName());, +	@Configuration, +	@Import(IndirectImportSelector.class), +	public static class IndirectConfig {, +, +	}, +, +	public static class IndirectImportSelector implements ImportSelector {, +		@Override, +		public String[] selectImports(AnnotationMetadata importingClassMetadata) {, +			return new String[] { IndirectImport.class.getName()};, +		}, +	}, +, +	@Sample, +	public static class IndirectImport {, +, +	}, +]