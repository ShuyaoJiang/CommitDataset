[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +	@Nullable, +	private final Consumer<RequestHeadersSpec<?>> defaultRequest;, +, +			@Nullable Consumer<RequestHeadersSpec<?>> defaultRequest, DefaultWebClientBuilder builder) {, +		this.defaultRequest = defaultRequest;, +			if (defaultRequest != null) {, +				defaultRequest.accept(this);, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +	@Nullable, +	private final Consumer<RequestHeadersSpec<?>> defaultRequest;, +, +			@Nullable Consumer<RequestHeadersSpec<?>> defaultRequest, DefaultWebClientBuilder builder) {, +		this.defaultRequest = defaultRequest;, +			if (defaultRequest != null) {, +				defaultRequest.accept(this);, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	private Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest;, +, +	@Nullable, +		this.defaultRequest = other.defaultRequest;, +	public WebClient.Builder defaultRequest(Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest) {, +		this.defaultRequest = this.defaultRequest != null ?, +				this.defaultRequest.andThen(defaultRequest) : defaultRequest;, +		return this;, +	}, +, +	@Override, +				this.defaultRequest, new DefaultWebClientBuilder(this));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +	@Nullable, +	private final Consumer<RequestHeadersSpec<?>> defaultRequest;, +, +			@Nullable Consumer<RequestHeadersSpec<?>> defaultRequest, DefaultWebClientBuilder builder) {, +		this.defaultRequest = defaultRequest;, +			if (defaultRequest != null) {, +				defaultRequest.accept(this);, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	private Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest;, +, +	@Nullable, +		this.defaultRequest = other.defaultRequest;, +	public WebClient.Builder defaultRequest(Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest) {, +		this.defaultRequest = this.defaultRequest != null ?, +				this.defaultRequest.andThen(defaultRequest) : defaultRequest;, +		return this;, +	}, +, +	@Override, +				this.defaultRequest, new DefaultWebClientBuilder(this));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * Global option to specify a header to be added to every request,, +		 * Global option to specify a cookie to be added to every request,, +		 * Provide a consumer to modify every request being built just before the, +		 * call to {@link RequestHeadersSpec#exchange() exchange()}., +		 * @param defaultRequest the consumer to use for modifying requests, +		 * @since 5.1, +		 */, +		Builder defaultRequest(Consumer<RequestHeadersSpec<?>> defaultRequest);, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +	@Nullable, +	private final Consumer<RequestHeadersSpec<?>> defaultRequest;, +, +			@Nullable Consumer<RequestHeadersSpec<?>> defaultRequest, DefaultWebClientBuilder builder) {, +		this.defaultRequest = defaultRequest;, +			if (defaultRequest != null) {, +				defaultRequest.accept(this);, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	private Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest;, +, +	@Nullable, +		this.defaultRequest = other.defaultRequest;, +	public WebClient.Builder defaultRequest(Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest) {, +		this.defaultRequest = this.defaultRequest != null ?, +				this.defaultRequest.andThen(defaultRequest) : defaultRequest;, +		return this;, +	}, +, +	@Override, +				this.defaultRequest, new DefaultWebClientBuilder(this));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * Global option to specify a header to be added to every request,, +		 * Global option to specify a cookie to be added to every request,, +		 * Provide a consumer to modify every request being built just before the, +		 * call to {@link RequestHeadersSpec#exchange() exchange()}., +		 * @param defaultRequest the consumer to use for modifying requests, +		 * @since 5.1, +		 */, +		Builder defaultRequest(Consumer<RequestHeadersSpec<?>> defaultRequest);, +, +		/**, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java, +import org.springframework.core.NamedInheritableThreadLocal;, +import org.springframework.core.NamedThreadLocal;]