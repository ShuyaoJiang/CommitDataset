[+++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, + * Copyright 2002-2014 the original author or authors., +	private static final Method EQUALS_METHOD = ReflectionUtils.findMethod(Object.class,, +			"equals", Object.class);, +, +	private static final Method GET_TYPE_PROVIDER_METHOD = ReflectionUtils.findMethod(, +			SerializableTypeProxy.class, "getTypeProvider");, +				Class<?>[] interfaces = new Class<?>[] { type,, +					SerializableTypeProxy.class, Serializable.class };, +	 * Additional interface implemented by the type proxy., +	 */, +	static interface SerializableTypeProxy {, +, +		/**, +		 * Return the underlying type provider., +		 */, +		TypeProvider getTypeProvider();, +, +	}, +, +, +	/**, +			if (GET_TYPE_PROVIDER_METHOD.equals(method)) {, +				return this.provider;, +			}, +			if (EQUALS_METHOD.equals(method)) {, +				Object other = args[0];, +				// Unwrap proxies for speed, +				while (other instanceof SerializableTypeProxy) {, +					other = ((SerializableTypeProxy) other).getTypeProvider().getType();, +				}, +				return this.provider.getType().equals(other);, +			}]