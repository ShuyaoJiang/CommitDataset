[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractConfigurableJasperReportsViewTests.java, + * Copyright 2002-2015 the original author or authors., +	@Test(expected = IllegalArgumentException.class), +	public void noConfiguredExporter() throws Exception {, +		// Should not be able to set up view class without an exporter class., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractConfigurableJasperReportsViewTests.java, + * Copyright 2002-2015 the original author or authors., +	@Test(expected = IllegalArgumentException.class), +	public void noConfiguredExporter() throws Exception {, +		// Should not be able to set up view class without an exporter class., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsTests.java, + * Copyright 2002-2015 the original author or authors., +, +	protected final MockHttpServletResponse response = new MockHttpServletResponse();, +	protected final MockHttpServletRequest request = new MockHttpServletRequest();, +	{, +		request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver());, +		request.addPreferredLocale(Locale.GERMAN);, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractConfigurableJasperReportsViewTests.java, + * Copyright 2002-2015 the original author or authors., +	@Test(expected = IllegalArgumentException.class), +	public void noConfiguredExporter() throws Exception {, +		// Should not be able to set up view class without an exporter class., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsTests.java, + * Copyright 2002-2015 the original author or authors., +, +	protected final MockHttpServletResponse response = new MockHttpServletResponse();, +	protected final MockHttpServletRequest request = new MockHttpServletRequest();, +	{, +		request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver());, +		request.addPreferredLocale(Locale.GERMAN);, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsViewTests.java, + * Copyright 2002-2015 the original author or authors., +, +, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import static org.junit.Assume.*;, +@SuppressWarnings("deprecation"), +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	public void compiledReport() throws Exception {, +, +		assumeTrue(view instanceof AbstractJasperReportsSingleFormatView, +				&& ((AbstractJasperReportsSingleFormatView) view).useWriter());, +, +	public void uncompiledReport() throws Exception {, +		assumeTrue(canCompileReport);, +	@Test, +	public void withInvalidPath() throws Exception {, +		exception.expect(ApplicationContextException.class);, +	@Test, +	public void invalidExtension() throws Exception {, +		exception.expect(IllegalArgumentException.class);, +	public void contentType() throws Exception {, +	public void withoutDatasource() throws Exception {, +	public void withCollection() throws Exception {, +	public void withMultipleCollections() throws Exception {, +	public void withJRDataSourceProvider() throws Exception {, +	public void withSpecificCollection() throws Exception {, +	public void withArray() throws Exception {, +	public void withMultipleArrays() throws Exception {, +	public void withSpecificArray() throws Exception {, +	public void withSubReport() throws Exception {, +		assumeTrue(canCompileReport);, +	public void withNonExistentSubReport() throws Exception {, +		assumeTrue(canCompileReport);, +		// Invalid report URL should throw ApplicationContextException, +		exception.expect(ApplicationContextException.class);, +	// TODO Determine why encoding does not get overridden., +	@Ignore("Disabled since encoding does not get overridden"), +	@Test, +	public void overrideExporterParameters() throws Exception {, +		assumeTrue(view instanceof AbstractJasperReportsSingleFormatView, +				&& ((AbstractJasperReportsSingleFormatView) view).useWriter());, +		parameters.put(net.sf.jasperreports.engine.JRExporterParameter.CHARACTER_ENCODING, characterEncoding);, +		model.put(net.sf.jasperreports.engine.JRExporterParameter.CHARACTER_ENCODING.toString(),, +			overiddenCharacterEncoding);, +	public void subReportWithUnspecifiedParentDataSource() throws Exception {, +		assumeTrue(canCompileReport);, +		// Unspecified reportDataKey should throw exception when subReportDataSources is specified, +		exception.expect(ApplicationContextException.class);, +	public void contentDisposition() throws Exception {, +	public void overrideContentDisposition() throws Exception {, +	public void setCustomHeaders() throws Exception {, +	public void withJdbcDataSource() throws Exception {, +		assumeTrue(canCompileReport);, +		// DataSource was not used as report DataSource, +		exception.expect(SQLException.class);, +	public void withJdbcDataSourceInModel() throws Exception {, +		assumeTrue(canCompileReport);, +		// DataSource was not used as report DataSource, +		exception.expect(SQLException.class);, +	public void jrDataSourceOverridesJdbcDataSource() throws Exception {, +		assumeTrue(canCompileReport);, +	public void withCharacterEncoding() throws Exception {, +		assumeTrue(view instanceof AbstractJasperReportsSingleFormatView]