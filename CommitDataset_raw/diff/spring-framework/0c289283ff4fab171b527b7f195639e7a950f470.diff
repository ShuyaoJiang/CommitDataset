[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("deprecation"), +		RequestExpectation expectation = null;, +				// Try this first for backwards compatibility, +				ClientHttpResponse response = validateRequestInternal(request);, +				if (response != null) {, +					return response;, +				}, +				else {, +					expectation = matchRequest(request);, +				}, +		return expectation.createResponse(request);, +	 * @deprecated as of 5.0.3 sub-classes should implement, +	 * {@link #matchRequest(ClientHttpRequest)} instead and return only the matched, +	 * expectation, leaving the call to create the response as a separate step, +	 * (to be invoked by this class)., +	@Deprecated, +	@Nullable, +	protected ClientHttpResponse validateRequestInternal(ClientHttpRequest request), +			throws IOException {, +, +		return null;, +	}, +, +	/**, +	 * As of 5.0.3 subclasses should implement this method instead of, +	 * {@link #validateRequestInternal(ClientHttpRequest)} in order to match the, +	 * request to an expectation, leaving the call to create the response as a separate step, +	 * (to be invoked by this class)., +	 * @param request the current request, +	 * @return the matched expectation with its request count updated via, +	 * {@link RequestExpectation#incrementAndValidate()}., +	 * @since 5.0.3, +	 */, +	protected RequestExpectation matchRequest(ClientHttpRequest request) throws IOException {, +		throw new java.lang.UnsupportedOperationException(, +				"It looks like neither the deprecated \"validateRequestInternal\"" +, +						"nor its replacement (this method) are implemented.");, +	}, +, +		public void addAllExpectations(Collection<RequestExpectation> expectations) {, +			this.expectations.addAll(expectations);, +		}, +, +		 * <p>The count of the given expectation is incremented, then it is, +		 * either stored if remainingCount > 0 or removed otherwise., +			expectation.incrementAndValidate();, +			updateInternal(expectation);, +		}, +, +		private void updateInternal(RequestExpectation expectation) {, +		 * Add expectations to this group., +		 * @deprecated as of 5.0.3 please use {@link #addAllExpectations(Collection)} instead., +		@Deprecated, +			expectations.forEach(this::updateInternal);, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("deprecation"), +		RequestExpectation expectation = null;, +				// Try this first for backwards compatibility, +				ClientHttpResponse response = validateRequestInternal(request);, +				if (response != null) {, +					return response;, +				}, +				else {, +					expectation = matchRequest(request);, +				}, +		return expectation.createResponse(request);, +	 * @deprecated as of 5.0.3 sub-classes should implement, +	 * {@link #matchRequest(ClientHttpRequest)} instead and return only the matched, +	 * expectation, leaving the call to create the response as a separate step, +	 * (to be invoked by this class)., +	@Deprecated, +	@Nullable, +	protected ClientHttpResponse validateRequestInternal(ClientHttpRequest request), +			throws IOException {, +, +		return null;, +	}, +, +	/**, +	 * As of 5.0.3 subclasses should implement this method instead of, +	 * {@link #validateRequestInternal(ClientHttpRequest)} in order to match the, +	 * request to an expectation, leaving the call to create the response as a separate step, +	 * (to be invoked by this class)., +	 * @param request the current request, +	 * @return the matched expectation with its request count updated via, +	 * {@link RequestExpectation#incrementAndValidate()}., +	 * @since 5.0.3, +	 */, +	protected RequestExpectation matchRequest(ClientHttpRequest request) throws IOException {, +		throw new java.lang.UnsupportedOperationException(, +				"It looks like neither the deprecated \"validateRequestInternal\"" +, +						"nor its replacement (this method) are implemented.");, +	}, +, +		public void addAllExpectations(Collection<RequestExpectation> expectations) {, +			this.expectations.addAll(expectations);, +		}]