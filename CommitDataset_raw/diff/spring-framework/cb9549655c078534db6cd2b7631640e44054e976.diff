[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * Determine whether an embedded value resolver has been registered with this, +	 * bean factory, to be applied through {@link #resolveEmbeddedValue(String)}., +	 * @since 4.3, +	 */, +	boolean hasEmbeddedValueResolver();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * Determine whether an embedded value resolver has been registered with this, +	 * bean factory, to be applied through {@link #resolveEmbeddedValue(String)}., +	 * @since 4.3, +	 */, +	boolean hasEmbeddedValueResolver();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	public boolean hasEmbeddedValueResolver() {, +		return !this.embeddedValueResolvers.isEmpty();, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * Determine whether an embedded value resolver has been registered with this, +	 * bean factory, to be applied through {@link #resolveEmbeddedValue(String)}., +	 * @since 4.3, +	 */, +	boolean hasEmbeddedValueResolver();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	public boolean hasEmbeddedValueResolver() {, +		return !this.embeddedValueResolvers.isEmpty();, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.util.StringValueResolver;, +		// Register a default embedded value resolver if no bean post-processor, +		// (such as a PropertyPlaceholderConfigurer bean) registered any before:, +		// at this point, primarily for resolution in annotation attribute values., +		if (!beanFactory.hasEmbeddedValueResolver()) {, +			beanFactory.addEmbeddedValueResolver(new StringValueResolver() {, +				@Override, +				public String resolveStringValue(String strVal) {, +					return getEnvironment().resolvePlaceholders(strVal);, +				}, +			});, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * Determine whether an embedded value resolver has been registered with this, +	 * bean factory, to be applied through {@link #resolveEmbeddedValue(String)}., +	 * @since 4.3, +	 */, +	boolean hasEmbeddedValueResolver();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	public boolean hasEmbeddedValueResolver() {, +		return !this.embeddedValueResolvers.isEmpty();, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.util.StringValueResolver;, +		// Register a default embedded value resolver if no bean post-processor, +		// (such as a PropertyPlaceholderConfigurer bean) registered any before:, +		// at this point, primarily for resolution in annotation attribute values., +		if (!beanFactory.hasEmbeddedValueResolver()) {, +			beanFactory.addEmbeddedValueResolver(new StringValueResolver() {, +				@Override, +				public String resolveStringValue(String strVal) {, +					return getEnvironment().resolvePlaceholders(strVal);, +				}, +			});, +		}, +, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java, +	private MethodParameter paramResolvedNameWithExpression;, +	private MethodParameter paramResolvedNameWithPlaceholder;, +		paramResolvedNameWithExpression = new SynthesizingMethodParameter(method, 4);, +		paramResolvedNameWithPlaceholder = new SynthesizingMethodParameter(method, 5);, +		paramNamedValueMap = new SynthesizingMethodParameter(method, 6);, +	public void resolveNameFromSystemPropertyThroughExpression() throws Exception {, +			Object result = resolver.resolveArgument(paramResolvedNameWithExpression, null, webRequest, null);, +			assertTrue(result instanceof String);, +			assertEquals("Invalid result", expected, result);, +		}, +		finally {, +			System.clearProperty("systemProperty");, +		}, +	}]