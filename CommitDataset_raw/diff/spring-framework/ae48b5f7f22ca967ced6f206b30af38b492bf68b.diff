[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +	private boolean hasVersionResolver;, +, +	private boolean hasCssLinkTransformer;, +, +		if (resolver instanceof VersionResourceResolver) {, +			this.hasVersionResolver = true;, +		}, +		if (transformer instanceof CssLinkResourceTransformer) {, +			this.hasCssLinkTransformer = true;, +		ResourceTransformer cachingTransformer = null;, +		if (!this.isDevMode) {, +			if (ClassUtils.isAssignable(CachingResourceTransformer.class, first.getClass())) {, +				cachingTransformer = first;, +			}, +			else {, +				cachingTransformer = new CachingResourceTransformer(getDefaultResourceCache());, +				transformers.add(cachingTransformer);, +			}, +		if (this.hasVersionResolver && !this.hasCssLinkTransformer) {, +			transformers.add(cachingTransformer != null ? 1 : 0, new CssLinkResourceTransformer());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +	private boolean hasVersionResolver;, +, +	private boolean hasCssLinkTransformer;, +, +		if (resolver instanceof VersionResourceResolver) {, +			this.hasVersionResolver = true;, +		}, +		if (transformer instanceof CssLinkResourceTransformer) {, +			this.hasCssLinkTransformer = true;, +		ResourceTransformer cachingTransformer = null;, +		if (!this.isDevMode) {, +			if (ClassUtils.isAssignable(CachingResourceTransformer.class, first.getClass())) {, +				cachingTransformer = first;, +			}, +			else {, +				cachingTransformer = new CachingResourceTransformer(getDefaultResourceCache());, +				transformers.add(cachingTransformer);, +			}, +		if (this.hasVersionResolver && !this.hasCssLinkTransformer) {, +			transformers.add(cachingTransformer != null ? 1 : 0, new CssLinkResourceTransformer());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, + * Resolves request paths containing a version string that can be used as part, + * of an HTTP caching strategy in which a resource is cached with a far future, + * date (e.g. 1 year) and cached until the version, and therefore the URL, is, + * changed., + * <p>Different versioning strategies exist and this resolver must be configured, + * with one or more such strategies along with path mappings to indicate which, + * strategy applies to which resources., + * <p>{@code ContentVersionStrategy} is a good default choice except in cases, + * where it cannot be used. Most notably the {@code ContentVersionStrategy}, + * cannot be combined with JavaScript module loaders. For such cases the, + * {@code FixedVersionStrategy} is a better choice., + * <p>Note that using this resolver to serve CSS files means the, + * {@link CssLinkResourceTransformer} should also be used in order to modify, + * links within CSS files to also contain versions., + * @author Rossen Stoyanchev, +	public Map<String, VersionStrategy> getStrategyMap() {, +	/**, +	 * Insert a content-based version in resource URLs that match the given path, +	 * patterns. The version is computed from the content of the file, e.g., +	 * {@code "css/main-e36d2e05253c6c7085a91522ce43a0b4.css"}. This is a good, +	 * default strategy to use except when it cannot be, for example when using, +	 * JavaScript module loaders, use {@link #addFixedVersionStrategy} instead, +	 * for serving JavaScript files., +	 * @param pathPatterns one or more resource URL path patterns, +	 * @return the current instance for chained method invocation, +	 * @see ContentVersionStrategy, +	 */, +	public VersionResourceResolver addContentVersionStrategy(String... pathPatterns) {, +		addVersionStrategy(new ContentVersionStrategy(), pathPatterns);, +		return this;, +	}, +, +	/**, +	 * Insert a fixed, prefix-based version in resource URLs that match the given, +	 * path patterns, e.g. {@code "{version}/js/main.js"}. This is useful (vs, +	 * content-based versions) when using JavaScript module loaders., +	 * <p>The version may be a random number, the current date, fetched from a, +	 * git commit sha, a property file, environment variable, and set with SpEL, +	 * expressions in the configuration (e.g. see {@code @Value} in Java config)., +	 * @param version a version string, +	 * @param pathPatterns one or more resource URL path patterns, +	 * @return the current instance for chained method invocation, +	 * @see FixedVersionStrategy, +	 */, +	public VersionResourceResolver addFixedVersionStrategy(String version, String... pathPatterns) {, +		addVersionStrategy(new FixedVersionStrategy(version), pathPatterns);, +		return this;, +	}, +, +	/**, +	 * Register a custom VersionStrategy to apply to resource URLs that match the, +	 * given path patterns., +	 * @param strategy the custom strategy, +	 * @param pathPatterns one or more resource URL path patterns, +	 * @return the current instance for chained method invocation]