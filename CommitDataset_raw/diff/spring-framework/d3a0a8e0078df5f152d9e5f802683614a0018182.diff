[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +		this.mergedBeanDefinitions.keySet().removeIf(bean -> !isBeanEligibleForMetadataCaching(bean));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +		this.mergedBeanDefinitions.keySet().removeIf(bean -> !isBeanEligibleForMetadataCaching(bean));, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +		this.scriptBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +		this.mergedBeanDefinitions.keySet().removeIf(bean -> !isBeanEligibleForMetadataCaching(bean));, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +		this.scriptBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, + * Copyright 2002-2018 the original author or authors., +		this.remoteRegistries.entrySet().removeIf(entry -> entry.getValue().isExpired(now));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +		this.mergedBeanDefinitions.keySet().removeIf(bean -> !isBeanEligibleForMetadataCaching(bean));, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +		this.scriptBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, + * Copyright 2002-2018 the original author or authors., +		this.remoteRegistries.entrySet().removeIf(entry -> entry.getValue().isExpired(now));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +		result.removeIf(expression -> !expression.match(exchange));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, + * Copyright 2002-2018 the original author or authors., +		internalBeanFactory.getBeanPostProcessors().removeIf(beanPostProcessor ->, +				beanPostProcessor instanceof AopInfrastructureBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +		acceptedClassLoaders.removeIf(registeredLoader ->, +				isUnderneathClassLoader(registeredLoader, classLoader));, +		strongClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +		softClassCache.keySet().removeIf(beanClass ->, +				isUnderneathClassLoader(beanClass.getClassLoader(), classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java]