[+++ b/src/docs/asciidoc/testing.adoc, +testing. The Spring team advocates test-driven development (TDD). The Spring team has, +found that the correct use of inversion of control (IoC) certainly does make both unit, +and integration testing easier (in that the presence of setter methods and appropriate, +isolation. If you follow the architecture recommendations for Spring, the resulting clean, +layering and componentization of your codebase facilitate easier unit testing. For, +example, you can test service layer objects by stubbing or mocking DAO or repository, +interfaces, without needing to access persistent data while running unit tests., +True unit tests typically run extremely quickly, as there is no runtime infrastructure to, +set up. Emphasizing true unit tests as part of your development methodology can boost, +your productivity. You may not need this section of the testing chapter to help you write, +effective unit tests for your IoC-based applications. For certain unit testing scenarios,, +however, the Spring Framework provides mock objects and testing support classes, which, +are described in this chapter., +applications. If, for example, JDBC `DataSource` instances get bound to the same JNDI, +names in test code as they do in a Java EE container, you can reuse both application code, +and configuration in testing scenarios without modification., +convenient to use than dynamic mock objects (such as http://www.easymock.org[EasyMock]), +or alternative Servlet API mock objects (such as http://www.mockobjects.com[MockObjects])., +TIP: Since Spring Framework 5.0, the mock objects in `org.springframework.mock.web` are, +based on the Servlet 4.0 API., +integration testing framework for Spring MVC. See <<spring-mvc-test-framework>>., +The `org.springframework.mock.http.server.reactive` package contains mock implementations, +of `ServerHttpRequest` and `ServerHttpResponse` for use in WebFlux applications. The, +`org.springframework.mock.web.server` package contains a mock `ServerWebExchange` that, +depends on those mock request and response objects., +Both `MockServerHttpRequest` and `MockServerHttpResponse` extend from the same abstract, +base classes as server-specific implementations and share behavior with them. For, +example, a mock request is immutable once created, but you can use the `mutate()` method, +`cache().then()`, which buffers the data and makes it available for assertions in tests., +Applications can set a custom write function (for example, to test an infinite stream)., +configuration or lifecycle callback method when testing application code for use cases, +such as the following:, +  that provide dependency injection for `private` or `protected` fields, setter methods,, +  and configuration methods., +{api-spring-framework}/test/util/AopTestUtils.html[`AopTestUtils`] is a collection of, +AOP-related utility methods. You can use these methods to obtain a reference to the, +underlying target object hidden behind one or more Spring proxies. For example, if you, +have configured a bean as a dynamic mock by using a library such as EasyMock or Mockito,, +and the mock is wrapped in a Spring proxy, you may need direct access to the underlying, +mock to configure expectations on it and perform verifications. For Spring's core AOP, +utilities, see {api-spring-framework}/aop/support/AopUtils.html[`AopUtils`] and, +{api-spring-framework}/aop/framework/AopProxyUtils.html[`AopProxyUtils`]., +The `org.springframework.test.web` package contains, +{api-spring-framework}/test/web/ModelAndViewAssert.html[`ModelAndViewAssert`], which you, +can use in combination with JUnit, TestNG, or any other testing framework for unit tests, +TIP: To unit test your Spring MVC `Controller` classes as POJOs, use `ModelAndViewAssert`, +combined with `MockHttpServletRequest`, `MockHttpSession`, and so on from Spring's, +This section (most of the rest of this chapter) covers integration testing for Spring, +applications. It includes the following topics:, +* Data access using JDBC or an ORM tool. This can include such things as the correctness, +  of SQL statements, Hibernate queries, JPA entity mappings, and so forth., +and might also be in the long `org.springframework.test` form, depending on where you get, +it from (see the <<core.adoc#dependency-management,section on Dependency Management>> for, +an explanation). This library includes the `org.springframework.test` package, which, +slower to run than unit tests but much faster than the equivalent Selenium tests or, +remote tests that rely on deployment to an application server., +`ApplicationContext` instances and `WebApplicationContext` instances as well as caching, +of those contexts. Support for the caching of loaded contexts is important, because, +startup time can become an issue -- not because of the overhead of Spring itself, but, +because the objects instantiated by the Spring container take time to instantiate. For, +example, a project with 50 to 100 Hibernate mapping files might take 10 to 20 seconds to, +load the mapping files, and incurring that cost before running every test in every test, +fixture leads to slower overall test runs that reduce developer productivity., +configuration metadata -- often in the classpath -- or an array of annotated classes that, +is used to configure the application. These locations or classes are the same as or, +JVM -- for example, all tests run from an Ant, Maven, or Gradle build for a given project, +or module. In the unlikely case that a test corrupts the application context and requires, +reloading (for example, by modifying a bean definition or the state of an application, +object) the TestContext framework can be configured to reload the configuration and, +rebuild the application context before executing the next test., +across various testing scenarios (for example, for configuring Spring-managed object, +graphs, transactional proxies, `DataSource` instances, and others), thus avoiding the, +need to duplicate complex test fixture setup for individual test cases., +* The logic of the `HibernateTitleRepository`: Does the configured instance of this class, +  perform as anticipated?, +One common issue in tests that access a real database is their effect on the state of the, +persistence store. Even when you use a development database, changes to the state may, +affect future tests. Also, many operations -- such as inserting or modifying persistent, +data -- cannot be performed (or verified) outside of a transaction., +The TestContext framework addresses this issue. By default, the framework creates and, +rolls back a transaction for each test. You can write code that can assume the existence, +of a transaction. If you call transactionally proxied objects in your tests, they behave, +correctly, according to their configured transactional semantics. In addition, if a test, +method deletes the contents of selected tables while running within the transaction, +managed for the test, the transaction rolls back by default, and the database returns to, +its state prior to execution of the test. Transactional support is provided to a test by, +using a `PlatformTransactionManager` bean defined in the test's application context., +particular test to populate or modify the database), you can tell the TestContext, +framework to cause the transaction to commit instead of roll back by using the, +* A `JdbcTemplate`, for executing SQL statements to query the database. You can use such, +  queries to confirm database state both before and after execution of database-related, +  application code, and Spring ensures that such queries run in the scope of the same, +  transaction as the application code. When used in conjunction with an ORM tool, be sure, +  to avoid <<testcontext-tx-false-positives,false positives>>., +* `countRowsInTableWhere(..)`: Counts the number of rows in the given table by using the, +  provided `WHERE` clause., +<<testcontext-support-classes-junit4,`AbstractTransactionalJUnit4SpringContextTests`>>, +and <<testcontext-support-classes-testng,`AbstractTransactionalTestNGSpringContextTests`>>, +details, see <<data-access.adoc#jdbc-embedded-database-support,Embedded Database]