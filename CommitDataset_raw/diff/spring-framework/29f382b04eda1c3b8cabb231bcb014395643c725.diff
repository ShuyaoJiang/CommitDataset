[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), ", ") + '>';, +		return this.resolved.getName();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), ", ") + '>';, +		return this.resolved.getName();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +		return prefix() + getChild(0).toStringAST() + "]";, +, +	private String prefix() {, +		switch (this.variant) {, +			case ALL:   return "?[";, +			case FIRST: return "^[";, +			case LAST:  return "$[";, +		}, +		return "";, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), ", ") + '>';, +		return this.resolved.getName();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +		return prefix() + getChild(0).toStringAST() + "]";, +, +	private String prefix() {, +		switch (this.variant) {, +			case ALL:   return "?[";, +			case FIRST: return "^[";, +			case LAST:  return "$[";, +		}, +		return "";, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +			String value = this.contentType;, +			if (StringUtils.hasLength(this.characterEncoding) && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {, +				value += ';' + CHARSET_PREFIX + this.characterEncoding;, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), ", ") + '>';, +		return this.resolved.getName();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +		return prefix() + getChild(0).toStringAST() + "]";, +, +	private String prefix() {, +		switch (this.variant) {, +			case ALL:   return "?[";, +			case FIRST: return "^[";, +			case LAST:  return "$[";, +		}, +		return "";, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +			String value = this.contentType;, +			if (StringUtils.hasLength(this.characterEncoding) && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {, +				value += ';' + CHARSET_PREFIX + this.characterEncoding;, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/AbstractMediaTypeExpression.java, +			return '!' + this.mediaType.toString();, +		return this.mediaType.toString();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java, +		return getShortDescription() + ": " + this.beanDefinition;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), ", ") + '>';, +		return this.resolved.getName();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +		return prefix() + getChild(0).toStringAST() + "]";, +, +	private String prefix() {, +		switch (this.variant) {, +			case ALL:   return "?[";, +			case FIRST: return "^[";, +			case LAST:  return "$[";, +		}, +		return "";, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +			String value = this.contentType;, +			if (StringUtils.hasLength(this.characterEncoding) && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {, +				value += ';' + CHARSET_PREFIX + this.characterEncoding;, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/AbstractMediaTypeExpression.java, +			return '!' + this.mediaType.toString();, +		return this.mediaType.toString();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, +			return '!' + this.mediaType.toString();, +		return this.mediaType.toString();]