[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + * @author Rob Winch, +	public void applyBeforeConcurrentHandling(NativeWebRequest request, Callable<?> task) throws Exception {, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +			interceptor.beforeConcurrentHandling(request, task);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + * @author Rob Winch, +	public void applyBeforeConcurrentHandling(NativeWebRequest request, Callable<?> task) throws Exception {, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +			interceptor.beforeConcurrentHandling(request, task);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * @author Rob Winch, +	/**, +	 * Invoked <em>before</em> the start of concurrent handling in the original, +	 * thread in which the {@code Callable} is submitted for concurrent handling., +	 *, +	 * <p>, +	 * This is useful for capturing the state of the current thread just prior to, +	 * invoking the {@link Callable}. Once the state is captured, it can then be, +	 * transfered to the new {@link Thread} in, +	 * {@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of, +	 * Spring Security's SecurityContextHolder and migrating it to the new Thread, +	 * is a concrete example of where this is useful., +	 * </p>, +	 *, +	 * @param request the current request, +	 * @param task the task for the current async request, +	 * @throws Exception in case of errors, +	 */, +	<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + * @author Rob Winch, +	public void applyBeforeConcurrentHandling(NativeWebRequest request, Callable<?> task) throws Exception {, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +			interceptor.beforeConcurrentHandling(request, task);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * @author Rob Winch, +	/**, +	 * Invoked <em>before</em> the start of concurrent handling in the original, +	 * thread in which the {@code Callable} is submitted for concurrent handling., +	 *, +	 * <p>, +	 * This is useful for capturing the state of the current thread just prior to, +	 * invoking the {@link Callable}. Once the state is captured, it can then be, +	 * transfered to the new {@link Thread} in, +	 * {@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of, +	 * Spring Security's SecurityContextHolder and migrating it to the new Thread, +	 * is a concrete example of where this is useful., +	 * </p>, +	 *, +	 * @param request the current request, +	 * @param task the task for the current async request, +	 * @throws Exception in case of errors, +	 */, +	<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.java, + * @author Rob Winch, +	public <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +, +	/**, +	 * This implementation is empty., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, + * @author Rob Winch, +	public void applyBeforeConcurrentHandling(NativeWebRequest request, Callable<?> task) throws Exception {, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +			interceptor.beforeConcurrentHandling(request, task);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * @author Rob Winch, +	/**, +	 * Invoked <em>before</em> the start of concurrent handling in the original, +	 * thread in which the {@code Callable} is submitted for concurrent handling., +	 *, +	 * <p>, +	 * This is useful for capturing the state of the current thread just prior to, +	 * invoking the {@link Callable}. Once the state is captured, it can then be, +	 * transfered to the new {@link Thread} in, +	 * {@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of, +	 * Spring Security's SecurityContextHolder and migrating it to the new Thread, +	 * is a concrete example of where this is useful., +	 * </p>, +	 *, +	 * @param request the current request, +	 * @param task the task for the current async request, +	 * @throws Exception in case of errors, +	 */, +	<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception;]