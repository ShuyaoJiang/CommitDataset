[+++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("javax.servlet:javax.servlet-api:3.1.0"), +		testCompile("log4j:log4j:1.2.17"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0-SNAPSHOT"), +		maven { url "https://repository.apache.org/content/repositories/snapshots" } // tomcat-websocket-* snapshots, +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("javax.servlet:javax.servlet-api:3.1.0"), +		testCompile("log4j:log4j:1.2.17"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0-SNAPSHOT"), +		maven { url "https://repository.apache.org/content/repositories/snapshots" } // tomcat-websocket-* snapshots, +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/AbstractWebSocketIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.socket.server.support.TomcatRequestUpgradeStrategy;, +import reactor.util.Assert;, +	protected Log logger = LogFactory.getLog(getClass());, +, +		upgradeStrategyConfigTypes.put(TomcatTestServer.class, TomcatUpgradeStrategyConfig.class);, +		Class<?> upgradeStrategyConfigClass = upgradeStrategyConfigTypes.get(this.server.getClass());, +		Assert.notNull(upgradeStrategyConfigClass, "No UpgradeStrategyConfig class");, +, +		this.wac.register(upgradeStrategyConfigClass);, +		this.wac.refresh();, +		this.server.deployConfig(this.wac);, +		catch (Throwable t) {, +			logger.error("Failed to stop WebSocket client", t);, +		}, +, +		try {, +			this.server.undeployConfig();, +		}, +		catch (Throwable t) {, +			logger.error("Failed to undeploy application config", t);, +		}, +, +		try {, +		catch (Throwable t) {, +			logger.error("Failed to stop server", t);, +		}, +	@Configuration, +	static class TomcatUpgradeStrategyConfig extends AbstractRequestUpgradeStrategyConfig {, +, +		@Bean, +		public RequestUpgradeStrategy requestUpgradeStrategy() {, +			return new TomcatRequestUpgradeStrategy();, +		}, +	}, +, +++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("javax.servlet:javax.servlet-api:3.1.0"), +		testCompile("log4j:log4j:1.2.17"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0-SNAPSHOT"), +		maven { url "https://repository.apache.org/content/repositories/snapshots" } // tomcat-websocket-* snapshots, +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0-SNAPSHOT"), +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/AbstractWebSocketIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.web.socket.server.support.TomcatRequestUpgradeStrategy;, +import reactor.util.Assert;, +	protected Log logger = LogFactory.getLog(getClass());, +, +		upgradeStrategyConfigTypes.put(TomcatTestServer.class, TomcatUpgradeStrategyConfig.class);, +		Class<?> upgradeStrategyConfigClass = upgradeStrategyConfigTypes.get(this.server.getClass());, +		Assert.notNull(upgradeStrategyConfigClass, "No UpgradeStrategyConfig class");, +, +		this.wac.register(upgradeStrategyConfigClass);, +		this.wac.refresh();, +		this.server.deployConfig(this.wac);, +		catch (Throwable t) {, +			logger.error("Failed to stop WebSocket client", t);, +		}, +, +		try {, +			this.server.undeployConfig();, +		}, +		catch (Throwable t) {, +			logger.error("Failed to undeploy application config", t);, +		}, +, +		try {, +		catch (Throwable t) {, +			logger.error("Failed to stop server", t);, +		}, +	@Configuration, +	static class TomcatUpgradeStrategyConfig extends AbstractRequestUpgradeStrategyConfig {, +, +		@Bean, +		public RequestUpgradeStrategy requestUpgradeStrategy() {, +			return new TomcatRequestUpgradeStrategy();]