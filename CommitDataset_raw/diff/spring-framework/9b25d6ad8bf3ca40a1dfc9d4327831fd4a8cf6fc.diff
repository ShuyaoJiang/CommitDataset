[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		catch (BeanCreationException ex) {, +			// Can only happen when getting a FactoryBean., +			if (logger.isDebugEnabled()) {, +				logger.debug("Bean creation exception on non-singleton FactoryBean type check: " + ex);, +			}, +			onSuppressedException(ex);, +			return null;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		catch (BeanCreationException ex) {, +			// Can only happen when getting a FactoryBean., +			if (logger.isDebugEnabled()) {, +				logger.debug("Bean creation exception on non-singleton FactoryBean type check: " + ex);, +			}, +			onSuppressedException(ex);, +			return null;, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, + * Copyright 2002-2015 the original author or authors., +		bd1.setDependsOn("tb2");, +		bd2.setDependsOn("tb1");, +		bd1.setDependsOn("tb2");, +		bd2.setDependsOn("tb3");, +		bd3.setDependsOn("tb1");, +	public void testGetBeanByTypeInstanceWithPrimary() {, +	public void testGetBeanByTypeInstanceWithMultiplePrimary() {, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +	@Test, +	public void testGetBeanWithArgsNotCreatedForFactoryBeanChecking() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("bd1", bd1);, +		RootBeanDefinition bd2 = new RootBeanDefinition(ConstructorDependencyFactoryBean.class);, +		bd2.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		lbf.registerBeanDefinition("bd2", bd2);, +, +		ConstructorDependency bean = lbf.getBean(ConstructorDependency.class, 42);, +		assertThat(bean.beanName, equalTo("bd1"));, +		assertThat(bean.spouseAge, equalTo(42));, +, +		assertEquals(1, lbf.getBeanNamesForType(ConstructorDependency.class).length);, +		assertEquals(1, lbf.getBeanNamesForType(ConstructorDependencyFactoryBean.class).length);, +	}, +, +	private RootBeanDefinition createConstructorDependencyBeanDefinition(int age) {, +		RootBeanDefinition bd = new RootBeanDefinition(ConstructorDependency.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bd.getConstructorArgumentValues().addGenericArgumentValue(String.valueOf(age));, +		return bd;, +			assertTrue(ex.getMessage().contains("test"));, +			assertTrue(ex.getMessage().contains("spouse"));, +			assertTrue(ex.getMessage().contains("test"));, +			assertTrue(ex.getMessage().contains("spouse"));]