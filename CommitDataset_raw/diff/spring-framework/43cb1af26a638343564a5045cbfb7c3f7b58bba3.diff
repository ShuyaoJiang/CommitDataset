[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, + * Copyright 2002-2019 the original author or authors., +		Set<String> annTypes = importingClassMetadata.getAnnotationTypes();, +		for (String annType : annTypes) {, +			AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, + * Copyright 2002-2019 the original author or authors., +		Set<String> annTypes = importingClassMetadata.getAnnotationTypes();, +		for (String annType : annTypes) {, +			AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2019 the original author or authors., +	 * bean definition metadata (typically declared as a lambda expression)., +	 * Register a bean from the given bean class, optionally customizing its, +	 * bean definition metadata (typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, + * Copyright 2002-2019 the original author or authors., +		Set<String> annTypes = importingClassMetadata.getAnnotationTypes();, +		for (String annType : annTypes) {, +			AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2019 the original author or authors., +	 * bean definition metadata (typically declared as a lambda expression)., +	 * Register a bean from the given bean class, optionally customizing its, +	 * bean definition metadata (typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, + * Copyright 2002-2019 the original author or authors., +	@Test  // SPR-11649, +	@Test  // SPR-11649, +	@Test  // SPR-11649, +	@Test  // SPR-11649, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, + * Copyright 2002-2019 the original author or authors., +		Set<String> annTypes = importingClassMetadata.getAnnotationTypes();, +		for (String annType : annTypes) {, +			AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2019 the original author or authors., +	 * bean definition metadata (typically declared as a lambda expression)., +	 * Register a bean from the given bean class, optionally customizing its, +	 * bean definition metadata (typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +	 * (again typically declared as a lambda expression)., +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, + * Copyright 2002-2019 the original author or authors., +	@Test  // SPR-11649, +	@Test  // SPR-11649, +	@Test  // SPR-11649, +	@Test  // SPR-11649, +++ b/src/docs/asciidoc/core/core-null-safety.adoc, +[[null-safety]]]