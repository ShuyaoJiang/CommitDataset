[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				new String[] { "get", "is" }, clazz, mustBeStatic, 0);, +		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				new String[] { "set" }, clazz, mustBeStatic, 1);, +	}, +, +	private Method findMethodForProperty(String[] methodSuffixes, String[] prefixes, Class<?> clazz,, +			boolean mustBeStatic, int numberOfParams) {, +		for (String methodSuffix : methodSuffixes) {, +			for (String prefix : prefixes) {, +					if (method.getName().equals(prefix + methodSuffix), +							&& method.getParameterTypes().length == numberOfParams, +							&& (!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {, +			}, +		}, +, +	/**, +	 * Return the method suffixes for a given property name. The default implementation, +	 * uses JavaBean conventions with additional support for properties of the form 'xY', +	 * where the method 'getXY()' is used in preference to the JavaBean convention of, +	 * 'getxY()'., +	 */, +	protected String[] getPropertyMethodSuffixes(String propertyName) {, +		String suffix = getPropertyMethodSuffix(propertyName);, +		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {, +			return new String[] { suffix };, +		}, +		return new String[] { suffix, StringUtils.capitalize(suffix) };, +	}, +, +	/**, +	 * Return the method suffix for a given property name. The default implementation, +	 * uses JavaBean conventions., +	 */, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				new String[] { "get", "is" }, clazz, mustBeStatic, 0);, +		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				new String[] { "set" }, clazz, mustBeStatic, 1);, +	}, +, +	private Method findMethodForProperty(String[] methodSuffixes, String[] prefixes, Class<?> clazz,, +			boolean mustBeStatic, int numberOfParams) {, +		for (String methodSuffix : methodSuffixes) {, +			for (String prefix : prefixes) {, +					if (method.getName().equals(prefix + methodSuffix), +							&& method.getParameterTypes().length == numberOfParams, +							&& (!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {, +			}, +		}, +, +	/**, +	 * Return the method suffixes for a given property name. The default implementation, +	 * uses JavaBean conventions with additional support for properties of the form 'xY', +	 * where the method 'getXY()' is used in preference to the JavaBean convention of, +	 * 'getxY()'., +	 */, +	protected String[] getPropertyMethodSuffixes(String propertyName) {, +		String suffix = getPropertyMethodSuffix(propertyName);, +		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {, +			return new String[] { suffix };, +		}, +		return new String[] { suffix, StringUtils.capitalize(suffix) };, +	}, +, +	/**, +	 * Return the method suffix for a given property name. The default implementation, +	 * uses JavaBean conventions., +	 */, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, +		// repro SPR-10994, +		assertEquals("xyZ",rpr.read(ctx,t,"xyZ").getValue());, +		assertTrue(rpr.canRead(ctx,t,"xyZ"));, +		assertEquals("xY",rpr.read(ctx,t,"xY").getValue());, +		assertTrue(rpr.canRead(ctx,t,"xY"));, +, +		String xY = "xY";, +		String xyZ = "xyZ";, +		public String getXY() { return xY; }, +, +		public String getXyZ() { return xyZ; }, +]