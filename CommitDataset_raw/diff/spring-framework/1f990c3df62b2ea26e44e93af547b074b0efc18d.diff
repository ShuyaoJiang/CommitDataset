[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.ByteBuffer;, +, +, +	private static final ByteBuffer EMPTY_PAYLOAD = ByteBuffer.wrap(new byte[0]);, +, +, +			ByteBuffer payload = frame.getPayload() != null ? frame.getPayload() : EMPTY_PAYLOAD;, +			PongMessage message = new PongMessage(payload);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.ByteBuffer;, +, +, +	private static final ByteBuffer EMPTY_PAYLOAD = ByteBuffer.wrap(new byte[0]);, +, +, +			ByteBuffer payload = frame.getPayload() != null ? frame.getPayload() : EMPTY_PAYLOAD;, +			PongMessage message = new PongMessage(payload);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/WebSocketIntegrationTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import org.springframework.web.socket.handler.AbstractWebSocketHandler;, +		session.close();, +	}, +, +	// SPR-12727, +, +	@Test, +	public void unsolicitedPongWithEmptyPayload() throws Exception {, +		TestWebSocketHandler serverHandler = this.wac.getBean(TestWebSocketHandler.class);, +		serverHandler.setWaitMessageCount(1);, +, +		String url = getWsBaseUrl() + "/ws";, +		WebSocketSession session = this.webSocketClient.doHandshake(new AbstractWebSocketHandler() {}, url).get();, +		session.sendMessage(new PongMessage());, +, +		serverHandler.await();, +		assertNull(serverHandler.getTransportError());, +		assertEquals(1, serverHandler.getReceivedMessages().size());, +		assertEquals(PongMessage.class, serverHandler.getReceivedMessages().get(0).getClass());, +		public TestWebSocketHandler handler() {, +			return new TestWebSocketHandler();, +		}, +, +	}, +, +	private static class TestWebSocketHandler extends AbstractWebSocketHandler {, +, +		private List<WebSocketMessage> receivedMessages = new ArrayList<>();, +, +		private int waitMessageCount;, +, +		private final CountDownLatch latch = new CountDownLatch(1);, +, +		private Throwable transportError;, +, +, +		public void setWaitMessageCount(int waitMessageCount) {, +			this.waitMessageCount = waitMessageCount;, +		}, +, +		public List<WebSocketMessage> getReceivedMessages() {, +			return this.receivedMessages;, +		}, +, +		public Throwable getTransportError() {, +			return this.transportError;, +		}, +, +		@Override, +		public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {, +			this.receivedMessages.add(message);, +			if (this.receivedMessages.size() >= this.waitMessageCount) {, +				this.latch.countDown();, +			}, +		}, +, +		@Override, +		public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {, +			this.transportError = exception;, +			this.latch.countDown();, +		}, +, +		public void await() throws InterruptedException {, +			this.latch.await(5, TimeUnit.SECONDS);]