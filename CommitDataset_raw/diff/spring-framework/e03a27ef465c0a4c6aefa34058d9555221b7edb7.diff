[+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +import javax.xml.stream.XMLEventReader;, +import javax.xml.stream.XMLEventWriter;, +import javax.xml.stream.XMLStreamReader;, +import javax.xml.stream.XMLStreamWriter;, +import javax.xml.transform.Result;, +import javax.xml.transform.Source;, +import javax.xml.transform.stax.StAXResult;, +import javax.xml.transform.stax.StAXSource;, + * Contains common behavior relating to {@link javax.xml.transform.Transformer Transformers}, and the, + * <code>javax.xml.transform</code> package in general., + * @author Arjen Poutsma, +	 * The indent amount of characters if {@link #enableIndenting(javax.xml.transform.Transformer) indenting is enabled}., +	 * Enable indenting for the supplied {@link javax.xml.transform.Transformer}. <p>If the underlying XSLT engine is, +	 * Xalan, then the special output key <code>indent-amount</code> will be also be set to a value of {@link, +	 * #DEFAULT_INDENT_AMOUNT} characters., +	 *, +	 * Enable indenting for the supplied {@link javax.xml.transform.Transformer}. <p>If the underlying XSLT engine is, +	 * Xalan, then the special output key <code>indent-amount</code> will be also be set to a value of {@link, +	 * #DEFAULT_INDENT_AMOUNT} characters., +	 *, +	 *, +	/**, +	 * Indicates whether the given {@link Source} is a StAX Source., +	 *, +	 * @return <code>true</code> if <code>source</code> is a Spring {@link StaxSource} or JAXP 1.4 {@link StAXSource};, +	 *         <code>false</code> otherwise., +	 */, +	public static boolean isStaxSource(Source source) {, +		if (source instanceof StaxSource) {, +			return true;, +		}, +		else if (JaxpVersion.isAtLeastJaxp14()) {, +			return Jaxp14StaxHandler.isStaxSource(source);, +		}, +		else {, +			return false;, +		}, +	}, +, +	/**, +	 * Indicates whether the given {@link Result} is a StAX Result., +	 *, +	 * @return <code>true</code> if <code>result</code> is a Spring {@link StaxResult} or JAXP 1.4 {@link StAXResult};, +	 *         <code>false</code> otherwise., +	 */, +	public static boolean isStaxResult(Result result) {, +		if (result instanceof StaxResult) {, +			return true;, +		}, +		else if (JaxpVersion.isAtLeastJaxp14()) {, +			return Jaxp14StaxHandler.isStaxResult(result);, +		}, +		else {, +			return false;, +		}, +	}, +, +	/**, +	 * Returns the {@link XMLStreamReader} for the given StAX Source., +	 *, +	 * @param source a Spring {@link StaxSource} or {@link StAXSource}, +	 * @return the {@link XMLStreamReader}, +	 * @throws IllegalArgumentException if <code>source</code> is neither a Spring-WS {@link StaxSource} or {@link, +	 *                                  StAXSource}, +	 */, +	public static XMLStreamReader getXMLStreamReader(Source source) {, +		if (source instanceof StaxSource) {, +			return ((StaxSource) source).getXMLStreamReader();, +		}, +		else if (JaxpVersion.isAtLeastJaxp14()) {, +			return Jaxp14StaxHandler.getXMLStreamReader(source);, +		}, +		else {, +			throw new IllegalArgumentException("Source '" + source + "' is neither StaxSource nor StAXSource");, +		}, +	}, +, +	/**, +	 * Returns the {@link XMLEventReader} for the given StAX Source., +	 *, +	 * @param source a Spring {@link StaxSource} or {@link StAXSource}, +	 * @return the {@link XMLEventReader}, +	 * @throws IllegalArgumentException if <code>source</code> is neither a Spring {@link StaxSource} or {@link, +	 *                                  StAXSource}, +	 */, +	public static XMLEventReader getXMLEventReader(Source source) {, +		if (source instanceof StaxSource) {, +			return ((StaxSource) source).getXMLEventReader();, +		}, +		else if (JaxpVersion.isAtLeastJaxp14()) {, +			return Jaxp14StaxHandler.getXMLEventReader(source);, +		}, +		else {, +			throw new IllegalArgumentException("Source '" + source + "' is neither StaxSource nor StAXSource");, +		}, +	}, +, +	/**, +	 * Returns the {@link XMLStreamWriter} for the given StAX Result.]