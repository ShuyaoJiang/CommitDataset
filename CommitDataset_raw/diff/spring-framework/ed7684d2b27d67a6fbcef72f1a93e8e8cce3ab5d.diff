[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +import java.util.EnumSet;, +import java.util.Set;, +, +	private static final Set<HttpMethod> SAFE_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +, +				if (SAFE_METHODS.contains(inputMessage.getMethod()), +						&& isResourceNotModified(inputMessage, outputMessage)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +import java.util.EnumSet;, +import java.util.Set;, +, +	private static final Set<HttpMethod> SAFE_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +, +				if (SAFE_METHODS.contains(inputMessage.getMethod()), +						&& isResourceNotModified(inputMessage, outputMessage)) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.temporal.ChronoUnit;, +	public void shouldNotFailPreconditionForPutRequests() throws Exception {, +		servletRequest.setMethod("PUT");, +		ZonedDateTime dateTime = ofEpochMilli(new Date().getTime()).atZone(GMT);, +		servletRequest.addHeader(HttpHeaders.IF_UNMODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime));, +, +		long justModified = dateTime.plus(1, ChronoUnit.SECONDS).toEpochSecond() * 1000;, +		ResponseEntity<String> returnValue = ResponseEntity.ok(), +				.lastModified(justModified).body("body");, +		initStringMessageConversion(TEXT_PLAIN);, +		processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest);, +, +		assertConditionalResponse(HttpStatus.OK, null, null, justModified);, +	}, +, +	@Test]