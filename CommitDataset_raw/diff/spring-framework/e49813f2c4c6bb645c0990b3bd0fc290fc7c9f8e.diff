[+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	 * The exact element for which the {@code Class} is retrieved will depend, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	 * The exact element for which the {@code Class} is retrieved will depend, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToStringConverter.java, + * Copyright 2002-2016 the original author or authors., +, +, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType, this.conversionService);, +		if (sourceCollection.isEmpty()) {, +			Object targetElement = this.conversionService.convert(, +					sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	 * The exact element for which the {@code Class} is retrieved will depend, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToStringConverter.java, + * Copyright 2002-2016 the original author or authors., +, +, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType, this.conversionService);, +		if (sourceCollection.isEmpty()) {, +			Object targetElement = this.conversionService.convert(, +					sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +	 * Return whether conversion between the source type and the target type can be bypassed., +	 * converted to the target type by returning the source object unchanged., +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +			Assert.isTrue(source == null, "Source must be [null] if source type == [null]");, +			throw new IllegalArgumentException("Source to convert from must be an instance of [" +, +					sourceType + "]; instead it was a [" + source.getClass().getName() + "]");, +	 * where the target type is a descriptor that provides additional conversion context., +	 * encapsulates the construction of the source type descriptor using, +	 * @param sourceType the source type to convert from, +	 * @param targetType the target type to convert to, +	 * <p>Returns a NO_OP Converter if the source type is assignable to the target type., +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	 * The exact element for which the {@code Class} is retrieved will depend, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToStringConverter.java, + * Copyright 2002-2016 the original author or authors., +, +, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType, this.conversionService);, +		if (sourceCollection.isEmpty()) {, +			Object targetElement = this.conversionService.convert(, +					sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +	 * Return whether conversion between the source type and the target type can be bypassed., +	 * converted to the target type by returning the source object unchanged., +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +			Assert.isTrue(source == null, "Source must be [null] if source type == [null]");, +			throw new IllegalArgumentException("Source to convert from must be an instance of [" +, +					sourceType + "]; instead it was a [" + source.getClass().getName() + "]");, +	 * where the target type is a descriptor that provides additional conversion context., +	 * encapsulates the construction of the source type descriptor using, +	 * @param sourceType the source type to convert from, +	 * @param targetType the target type to convert to, +	 * <p>Returns a NO_OP Converter if the source type is assignable to the target type., +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java, +		else if (targetType.getResolvableType() != null) {, +		else {, +			return Optional.of(source);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	 * The exact element for which the {@code Class} is retrieved will depend, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToStringConverter.java, + * Copyright 2002-2016 the original author or authors., +, +, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType, this.conversionService);, +		if (sourceCollection.isEmpty()) {, +			Object targetElement = this.conversionService.convert(, +					sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +	 * Return whether conversion between the source type and the target type can be bypassed., +	 * converted to the target type by returning the source object unchanged., +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +		Assert.notNull(targetType, "Target type to convert to cannot be null");, +			Assert.isTrue(source == null, "Source must be [null] if source type == [null]");, +			throw new IllegalArgumentException("Source to convert from must be an instance of [" +, +					sourceType + "]; instead it was a [" + source.getClass().getName() + "]");, +	 * where the target type is a descriptor that provides additional conversion context., +	 * encapsulates the construction of the source type descriptor using, +	 * @param sourceType the source type to convert from, +	 * @param targetType the target type to convert to, +	 * <p>Returns a NO_OP Converter if the source type is assignable to the target type., +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java]