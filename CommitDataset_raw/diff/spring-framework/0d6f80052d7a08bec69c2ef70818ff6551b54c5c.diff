[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2016 the original author or authors., +, +	private static final String HEADER_IF_UNMODIFIED_SINCE = "If-Unmodified-Since";, +, +	private static final String METHOD_POST = "POST";, +, +	private static final String METHOD_PUT = "PUT";, +, +	private static final String METHOD_DELETE = "DELETE";, +, +					if (supportsNotModifiedStatus()) {, +						if (this.notModified) {, +					else if (supportsConditionalUpdate()) {, +						if (this.notModified) {, +							response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED);, +						}, +					}, +				}, +					if (supportsNotModifiedStatus()) {, +						if (this.notModified) {, +					else if (supportsConditionalUpdate()) {, +						if (this.notModified) {, +							response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED);, +						}, +					}, +				}, +		}, +		catch (IllegalArgumentException e) {, +	private boolean supportsConditionalUpdate() {, +		String method = getRequest().getMethod();, +		String ifUnmodifiedHeader = getRequest().getHeader(HEADER_IF_UNMODIFIED_SINCE);, +		return (METHOD_POST.equals(method) || METHOD_PUT.equals(method) || METHOD_DELETE.equals(method)), +				&& StringUtils.hasLength(ifUnmodifiedHeader);, +	}, +, +		long ifModifiedSince = parseDateHeader(HEADER_IF_MODIFIED_SINCE);, +		if (ifModifiedSince != -1) {, +			return (ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000));, +		}, +		long ifUnmodifiedSince = parseDateHeader(HEADER_IF_UNMODIFIED_SINCE);, +		if (ifUnmodifiedSince != -1) {, +			return (ifUnmodifiedSince < (lastModifiedTimestamp / 1000 * 1000));, +		}, +		return false;, +	}, +, +	@SuppressWarnings("deprecation"), +	private long parseDateHeader(String headerName) {, +		long dateValue = -1;, +			dateValue = getRequest().getDateHeader(headerName);, +			String headerValue = getRequest().getHeader(headerName);, +					dateValue = Date.parse(datePart);, +		return dateValue;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2016 the original author or authors., +, +	private static final String HEADER_IF_UNMODIFIED_SINCE = "If-Unmodified-Since";, +, +	private static final String METHOD_POST = "POST";, +, +	private static final String METHOD_PUT = "PUT";, +, +	private static final String METHOD_DELETE = "DELETE";, +, +					if (supportsNotModifiedStatus()) {, +						if (this.notModified) {, +					else if (supportsConditionalUpdate()) {, +						if (this.notModified) {, +							response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED);, +						}, +					}, +				}, +					if (supportsNotModifiedStatus()) {, +						if (this.notModified) {, +					else if (supportsConditionalUpdate()) {, +						if (this.notModified) {, +							response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED);, +						}, +					}, +				}, +		}, +		catch (IllegalArgumentException e) {, +	private boolean supportsConditionalUpdate() {, +		String method = getRequest().getMethod();, +		String ifUnmodifiedHeader = getRequest().getHeader(HEADER_IF_UNMODIFIED_SINCE);, +		return (METHOD_POST.equals(method) || METHOD_PUT.equals(method) || METHOD_DELETE.equals(method)), +				&& StringUtils.hasLength(ifUnmodifiedHeader);, +	}, +, +		long ifModifiedSince = parseDateHeader(HEADER_IF_MODIFIED_SINCE);, +		if (ifModifiedSince != -1) {, +			return (ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000));, +		}, +		long ifUnmodifiedSince = parseDateHeader(HEADER_IF_UNMODIFIED_SINCE);, +		if (ifUnmodifiedSince != -1) {, +			return (ifUnmodifiedSince < (lastModifiedTimestamp / 1000 * 1000));, +		}, +		return false;, +	}]