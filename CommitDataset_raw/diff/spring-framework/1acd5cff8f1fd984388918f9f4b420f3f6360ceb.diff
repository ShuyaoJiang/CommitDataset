[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required");, +	/**, +	 * Register a {@link CallableProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param interceptor the interceptor to register, +	 */, +	public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required");, +		for (CallableProcessingInterceptor interceptor : interceptors) {, +			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode();, +			this.callableInterceptors.put(key, interceptor);, +		}, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required");, +	/**, +	 * Register a {@link DeferredResultProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param key the key, +	 * @param interceptors the interceptor to register, +	 */, +	public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required");, +		for (DeferredResultProcessingInterceptor interceptor : interceptors) {, +			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode();, +			this.deferredResultInterceptors.put(key, interceptor);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required");, +	/**, +	 * Register a {@link CallableProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param interceptor the interceptor to register, +	 */, +	public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required");, +		for (CallableProcessingInterceptor interceptor : interceptors) {, +			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode();, +			this.callableInterceptors.put(key, interceptor);, +		}, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required");, +	/**, +	 * Register a {@link DeferredResultProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param key the key, +	 * @param interceptors the interceptor to register, +	 */, +	public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required");, +		for (DeferredResultProcessingInterceptor interceptor : interceptors) {, +			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode();, +			this.deferredResultInterceptors.put(key, interceptor);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +	private CallableProcessingInterceptor[] callableInterceptors = new CallableProcessingInterceptor[] {};, +	private DeferredResultProcessingInterceptor[] deferredResultInterceptors = new DeferredResultProcessingInterceptor[] {};, +		this.callableInterceptors = interceptors.toArray(new CallableProcessingInterceptor[interceptors.size()]);, +		this.deferredResultInterceptors = interceptors.toArray(new DeferredResultProcessingInterceptor[interceptors.size()]);, +		asyncManager.registerCallableInterceptor(this.callableInterceptors);, +		asyncManager.registerDeferredResultInterceptor(this.deferredResultInterceptors);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required");, +	/**, +	 * Register a {@link CallableProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param interceptor the interceptor to register, +	 */, +	public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required");, +		for (CallableProcessingInterceptor interceptor : interceptors) {, +			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode();, +			this.callableInterceptors.put(key, interceptor);, +		}, +		Assert.notNull(key, "Key is required");, +		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required");, +	/**, +	 * Register a {@link DeferredResultProcessingInterceptor} without a key., +	 * The key is derived from the class name and hashcode., +	 * @param key the key, +	 * @param interceptors the interceptor to register, +	 */, +	public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors) {, +		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required");, +		for (DeferredResultProcessingInterceptor interceptor : interceptors) {, +			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode();, +			this.deferredResultInterceptors.put(key, interceptor);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +	private CallableProcessingInterceptor[] callableInterceptors = new CallableProcessingInterceptor[] {};, +	private DeferredResultProcessingInterceptor[] deferredResultInterceptors = new DeferredResultProcessingInterceptor[] {};, +		this.callableInterceptors = interceptors.toArray(new CallableProcessingInterceptor[interceptors.size()]);, +		this.deferredResultInterceptors = interceptors.toArray(new DeferredResultProcessingInterceptor[interceptors.size()]);, +		asyncManager.registerCallableInterceptor(this.callableInterceptors);, +		asyncManager.registerDeferredResultInterceptor(this.deferredResultInterceptors);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		CallableProcessingInterceptor[] callableInterceptors =]