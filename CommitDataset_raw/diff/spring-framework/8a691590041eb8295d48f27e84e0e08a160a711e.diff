[+++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * Copyright 2002-2016 the original author or authors., +	 * The convertible source/target type pair is derived from the Converter's parameterized types., +	 * The convertible source/target type pair is specified explicitly., +	 * <p>Allows for a Converter to be reused for multiple distinct pairs without, +	 * having to create a Converter class for each pair., +	<S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter);, +	 * The convertible source/target type pair is derived from the ConverterFactory's parameterized types., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * Copyright 2002-2016 the original author or authors., +	 * The convertible source/target type pair is derived from the Converter's parameterized types., +	 * The convertible source/target type pair is specified explicitly., +	 * <p>Allows for a Converter to be reused for multiple distinct pairs without, +	 * having to create a Converter class for each pair., +	<S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter);, +	 * The convertible source/target type pair is derived from the ConverterFactory's parameterized types., +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * Copyright 2002-2016 the original author or authors., +		converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * Copyright 2002-2016 the original author or authors., +	 * The convertible source/target type pair is derived from the Converter's parameterized types., +	 * The convertible source/target type pair is specified explicitly., +	 * <p>Allows for a Converter to be reused for multiple distinct pairs without, +	 * having to create a Converter class for each pair., +	<S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter);, +	 * The convertible source/target type pair is derived from the ConverterFactory's parameterized types., +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * Copyright 2002-2016 the original author or authors., +		converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2016 the original author or authors., +	public <S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter) {]