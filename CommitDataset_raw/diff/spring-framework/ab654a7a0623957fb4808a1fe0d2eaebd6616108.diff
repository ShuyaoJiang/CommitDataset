[+++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * Copyright 2002-2011 the original author or authors., +	@Override, +	public String toString() {, +		StringBuilder builder = new StringBuilder("<");, +		if (body != null) {, +			builder.append(body);, +			if (headers != null) {, +				builder.append(',');, +			}, +		}, +		if (headers != null) {, +			builder.append(headers);, +		}, +		builder.append('>');, +		return builder.toString();, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * Copyright 2002-2011 the original author or authors., +	@Override, +	public String toString() {, +		StringBuilder builder = new StringBuilder("<");, +		if (body != null) {, +			builder.append(body);, +			if (headers != null) {, +				builder.append(',');, +			}, +		}, +		if (headers != null) {, +			builder.append(headers);, +		}, +		builder.append('>');, +		return builder.toString();, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/ResponseEntity.java, + * Copyright 2002-2011 the original author or authors., +, +	@Override, +	public String toString() {, +		StringBuilder builder = new StringBuilder("<");, +		builder.append(statusCode.toString());, +		builder.append(' ');, +		builder.append(statusCode.getReasonPhrase());, +		builder.append(',');, +		T body = getBody();, +		HttpHeaders headers = getHeaders();, +		if (body != null) {, +			builder.append(body);, +			if (headers != null) {, +				builder.append(',');, +			}, +		}, +		if (headers != null) {, +			builder.append(headers);, +		}, +		builder.append('>');, +		return builder.toString();, +	}, +]