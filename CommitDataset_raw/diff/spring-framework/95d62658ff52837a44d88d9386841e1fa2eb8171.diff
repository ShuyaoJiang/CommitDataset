[+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * Copyright 2002-2015 the original author or authors., + * containing the period character and/or hyphen character; also allows for uppercase, + * variations on property names for more idiomatic shell use., + * Any hyphen variant of the above would work as well, or even mix dot/hyphen variants., + * <p>The same applies for calls to {@link #containsProperty(String)}, which returns, +		String resolvedName = checkPropertyName(name);, +		if (resolvedName != null) {, +			return resolvedName;, +		}, +		String uppercasedName = name.toUpperCase();, +		if (!name.equals(uppercasedName)) {, +			resolvedName = checkPropertyName(uppercasedName);, +			if (resolvedName != null) {, +				return resolvedName;, +			}, +		}, +		return name;, +	}, +, +	private String checkPropertyName(String name) {, +		// Check name as-is, +		// Check name with just dots replaced, +		String noDotName = name.replace('.', '_');, +		if (!name.equals(noDotName) && containsKey(noDotName)) {, +			return noDotName;, +		// Check name with just hyphens replaced, +		String noHyphenName = name.replace('-', '_');, +		if (!name.equals(noHyphenName) && containsKey(noHyphenName)) {, +			return noHyphenName;, +		// Check name with dots and hyphens replaced, +		String noDotNoHyphenName = noDotName.replace('-', '_');, +		if (!noDotName.equals(noDotNoHyphenName) && containsKey(noDotNoHyphenName)) {, +			return noDotNoHyphenName;, +		// Give up, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * Copyright 2002-2015 the original author or authors., + * containing the period character and/or hyphen character; also allows for uppercase, + * variations on property names for more idiomatic shell use., + * Any hyphen variant of the above would work as well, or even mix dot/hyphen variants., + * <p>The same applies for calls to {@link #containsProperty(String)}, which returns, +		String resolvedName = checkPropertyName(name);, +		if (resolvedName != null) {, +			return resolvedName;, +		}, +		String uppercasedName = name.toUpperCase();, +		if (!name.equals(uppercasedName)) {, +			resolvedName = checkPropertyName(uppercasedName);, +			if (resolvedName != null) {, +				return resolvedName;, +			}, +		}, +		return name;, +	}, +, +	private String checkPropertyName(String name) {, +		// Check name as-is, +		// Check name with just dots replaced, +		String noDotName = name.replace('.', '_');, +		if (!name.equals(noDotName) && containsKey(noDotName)) {, +			return noDotName;, +		// Check name with just hyphens replaced, +		String noHyphenName = name.replace('-', '_');, +		if (!name.equals(noHyphenName) && containsKey(noHyphenName)) {, +			return noHyphenName;, +		// Check name with dots and hyphens replaced, +		String noDotNoHyphenName = noDotName.replace('-', '_');, +		if (!noDotName.equals(noDotNoHyphenName) && containsKey(noDotNoHyphenName)) {, +			return noDotNoHyphenName;, +		// Give up, +		return null;, +++ b/spring-core/src/test/java/org/springframework/core/env/SystemEnvironmentPropertySourceTests.java, + * Copyright 2002-2015 the original author or authors., +		envMap.put("A_LONG_KEY", "a_long_value");, +		envMap.put("A_DOT.KEY", "a_dot_value");, +		envMap.put("A_HYPHEN-KEY", "a_hyphen_value");, +		assertThat(ps.containsProperty("A-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("a-key"), equalTo(true));, +		assertThat(ps.containsProperty("A_LONG_KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.LONG.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-LONG-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.LONG-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-LONG.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A_long_KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.long.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-long-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.long-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-long.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A_DOT.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-DOT.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A_dot.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A-dot.KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A_HYPHEN-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.HYPHEN-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A_hyphen-KEY"), equalTo(true));, +		assertThat(ps.containsProperty("A.hyphen-KEY"), equalTo(true));, +		assertThat(ps.getProperty("A_KEY"), equalTo("a_value"));, +		assertThat(ps.getProperty("A.KEY"), equalTo("a_value"));, +		assertThat(ps.getProperty("A-KEY"), equalTo("a_value"));]