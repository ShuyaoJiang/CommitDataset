[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +	 * @param charset the character set, +	public MimeType(String type, String subtype, Charset charset) {, +		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));, +	}, +, +	/**, +	 * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},, +	 * and allows to set the specified character set., +	 * @param other the other media type, +	 * @param charset the character set, +	 * @throws IllegalArgumentException if any of the parameters contains illegal characters, +	 */, +	public MimeType(MimeType other, Charset charset) {, +		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()));, +	}, +, +	private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {, +		Map<String, String> map = new LinkedHashMap<String, String>(parameters);, +		map.put(PARAM_CHARSET, charset.name());, +		return map;, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +	 * @param charset the character set, +	public MimeType(String type, String subtype, Charset charset) {, +		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));, +	}, +, +	/**, +	 * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},, +	 * and allows to set the specified character set., +	 * @param other the other media type, +	 * @param charset the character set, +	 * @throws IllegalArgumentException if any of the parameters contains illegal characters, +	 */, +	public MimeType(MimeType other, Charset charset) {, +		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()));, +	}, +, +	private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {, +		Map<String, String> map = new LinkedHashMap<String, String>(parameters);, +		map.put(PARAM_CHARSET, charset.name());, +		return map;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, + * Copyright 2002-2016 the original author or authors., +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +	 * @param charset the character set, +	public MimeType(String type, String subtype, Charset charset) {, +		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));, +	}, +, +	/**, +	 * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},, +	 * and allows to set the specified character set., +	 * @param other the other media type, +	 * @param charset the character set, +	 * @throws IllegalArgumentException if any of the parameters contains illegal characters, +	 */, +	public MimeType(MimeType other, Charset charset) {, +		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()));, +	}, +, +	private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {, +		Map<String, String> map = new LinkedHashMap<String, String>(parameters);, +		map.put(PARAM_CHARSET, charset.name());, +		return map;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, + * Copyright 2002-2016 the original author or authors., +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)), +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java, +			.andExpect(content().contentType(MediaType.valueOf("text/plain;charset=ISO-8859-1"))), +			.andExpect(content().contentType("text/plain;charset=ISO-8859-1")), +			.andExpect(content().contentTypeCompatibleWith("text/plain")), +			.andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN));, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +	 * @param charset the character set, +	public MimeType(String type, String subtype, Charset charset) {, +		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));, +	}, +, +	/**, +	 * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},]