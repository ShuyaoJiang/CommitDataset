[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the map with attributes associated with the WebSocket session., +	 *, +	 * <p>When the WebSocketSession is created, on the server side, the map can be, +	 * through a {@link org.springframework.web.socket.server.HandshakeInterceptor}., +	 * On the client side, the map can be populated by passing attributes to the, +	 * {@link org.springframework.web.socket.client.WebSocketClient} handshake, +	 * methods., +	Map<String, Object> getAttributes();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the map with attributes associated with the WebSocket session., +	 *, +	 * <p>When the WebSocketSession is created, on the server side, the map can be, +	 * through a {@link org.springframework.web.socket.server.HandshakeInterceptor}., +	 * On the client side, the map can be populated by passing attributes to the, +	 * {@link org.springframework.web.socket.client.WebSocketClient} handshake, +	 * methods., +	Map<String, Object> getAttributes();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes;, +	 * Create a new instance and associate the given attributes with it., +	 *, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public AbstractWebSocketSession(Map<String, Object> attributes) {, +		this.attributes = attributes;, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the map with attributes associated with the WebSocket session., +	 *, +	 * <p>When the WebSocketSession is created, on the server side, the map can be, +	 * through a {@link org.springframework.web.socket.server.HandshakeInterceptor}., +	 * On the client side, the map can be populated by passing attributes to the, +	 * {@link org.springframework.web.socket.client.WebSocketClient} handshake, +	 * methods., +	Map<String, Object> getAttributes();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes;, +	 * Create a new instance and associate the given attributes with it., +	 *, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public AbstractWebSocketSession(Map<String, Object> attributes) {, +		this.attributes = attributes;, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public JettyWebSocketSession(Map<String, Object> attributes) {, +		this(attributes, null);, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	 * @param user the user associated with the session; if {@code null} we'll fallback on the user, +	 *  available via {@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +	public JettyWebSocketSession(Map<String, Object> attributes, Principal user) {, +		super(attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the map with attributes associated with the WebSocket session., +	 *, +	 * <p>When the WebSocketSession is created, on the server side, the map can be, +	 * through a {@link org.springframework.web.socket.server.HandshakeInterceptor}., +	 * On the client side, the map can be populated by passing attributes to the, +	 * {@link org.springframework.web.socket.client.WebSocketClient} handshake, +	 * methods., +	Map<String, Object> getAttributes();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes;, +	 * Create a new instance and associate the given attributes with it., +	 *, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public AbstractWebSocketSession(Map<String, Object> attributes) {, +		this.attributes = attributes;, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public JettyWebSocketSession(Map<String, Object> attributes) {, +		this(attributes, null);, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	 * @param user the user associated with the session; if {@code null} we'll fallback on the user, +	 *  available via {@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +	public JettyWebSocketSession(Map<String, Object> attributes, Principal user) {, +		super(attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	public StandardWebSocketSession(HttpHeaders headers, Map<String, Object> attributes,, +		this(headers, attributes, localAddress, remoteAddress, null);, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket session, +	 * @param user the user associated with the session; if {@code null} we'll, +	 * 	fallback on the user available in the underlying WebSocket session, +	public StandardWebSocketSession(HttpHeaders headers, Map<String, Object> attributes,, +		super(attributes);, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the map with attributes associated with the WebSocket session., +	 *, +	 * <p>When the WebSocketSession is created, on the server side, the map can be, +	 * through a {@link org.springframework.web.socket.server.HandshakeInterceptor}., +	 * On the client side, the map can be populated by passing attributes to the, +	 * {@link org.springframework.web.socket.client.WebSocketClient} handshake, +	 * methods.]