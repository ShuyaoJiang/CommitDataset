[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +				ServletWebRequest webRequest = new ServletWebRequest(request, response);, +					return getModelAndView(handlerMethod, handler.getClass(), retVal, webRequest);, +	/**, +	 * Returns the best matching method. Uses the {@link DepthComparator}., +	 */, +	/**, +	 * Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}., +	 */, +	private ModelAndView getModelAndView(Method handlerMethod,, +			Class handlerType,, +			Object returnValue,, +			ServletWebRequest webRequest) throws Exception {, +, +		if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {, +			ResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);, +			HttpServletResponse response = webRequest.getResponse();, +			response.setStatus(responseStatus.value().value());, +		}, +	/**, +	 * Comparator capable of sorting exceptions based on their depth from the thrown exception type., +	 */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +				ServletWebRequest webRequest = new ServletWebRequest(request, response);, +					return getModelAndView(handlerMethod, handler.getClass(), retVal, webRequest);, +	/**, +	 * Returns the best matching method. Uses the {@link DepthComparator}., +	 */, +	/**, +	 * Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}., +	 */, +	private ModelAndView getModelAndView(Method handlerMethod,, +			Class handlerType,, +			Object returnValue,, +			ServletWebRequest webRequest) throws Exception {, +, +		if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {, +			ResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);, +			HttpServletResponse response = webRequest.getResponse();, +			response.setStatus(responseStatus.value().value());, +		}, +	/**, +	 * Comparator capable of sorting exceptions based on their depth from the thrown exception type., +	 */, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +import org.springframework.http.HttpStatus;, +		assertEquals("Invalid status code returned", 406, response.getStatus());, +, +		@ResponseStatus(HttpStatus.NOT_ACCEPTABLE), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +				ServletWebRequest webRequest = new ServletWebRequest(request, response);, +					return getModelAndView(handlerMethod, handler.getClass(), retVal, webRequest);, +	/**, +	 * Returns the best matching method. Uses the {@link DepthComparator}., +	 */, +	/**, +	 * Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}., +	 */, +	private ModelAndView getModelAndView(Method handlerMethod,, +			Class handlerType,, +			Object returnValue,, +			ServletWebRequest webRequest) throws Exception {, +, +		if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {, +			ResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);, +			HttpServletResponse response = webRequest.getResponse();, +			response.setStatus(responseStatus.value().value());, +		}, +	/**, +	 * Comparator capable of sorting exceptions based on their depth from the thrown exception type., +	 */, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +import org.springframework.http.HttpStatus;, +		assertEquals("Invalid status code returned", 406, response.getStatus());, +, +		@ResponseStatus(HttpStatus.NOT_ACCEPTABLE), +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/ExceptionHandler.java, + * <p>In Servlet environments, you can combine the {@code ExceptionHandler} annotation, + * with {@link ResponseStatus @ResponseStatus}, to define the response status, + * for the HTTP response., + *]