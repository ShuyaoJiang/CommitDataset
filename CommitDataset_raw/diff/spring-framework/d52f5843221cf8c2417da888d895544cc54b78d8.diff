[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +import org.springframework.util.ClassUtils;, +		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);, +		if (checkingGeneric ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved, typeResolved)) {, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +import org.springframework.util.ClassUtils;, +		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);, +		if (checkingGeneric ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved, typeResolved)) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Return the underlying {@link ResolvableType}., +	public ResolvableType getResolvableType() {, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +import org.springframework.util.ClassUtils;, +		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);, +		if (checkingGeneric ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved, typeResolved)) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Return the underlying {@link ResolvableType}., +	public ResolvableType getResolvableType() {, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalConverter.java, + * Copyright 2002-2014 the original author or authors., + * <p>As another example, when converting from a String field to an {@code Account} field,, + * an implementation might return {@code true} if the target Account class defines a, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +import org.springframework.util.ClassUtils;, +		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);, +		if (checkingGeneric ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved, typeResolved)) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Return the underlying {@link ResolvableType}., +	public ResolvableType getResolvableType() {, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalConverter.java, + * Copyright 2002-2014 the original author or authors., + * <p>As another example, when converting from a String field to an {@code Account} field,, + * an implementation might return {@code true} if the target Account class defines a, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Set;, +, +, +		@Override, +		public String toString() {, +			return this.sourceType.getName() + " -> " + this.targetType.getName();, +		}, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +import org.springframework.util.ClassUtils;, +		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);, +		if (checkingGeneric ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved, typeResolved)) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Return the underlying {@link ResolvableType}., +	public ResolvableType getResolvableType() {, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalConverter.java, + * Copyright 2002-2014 the original author or authors., + * <p>As another example, when converting from a String field to an {@code Account} field,, + * an implementation might return {@code true} if the target Account class defines a, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Set;, +, +, +		@Override, +		public String toString() {, +			return this.sourceType.getName() + " -> " + this.targetType.getName();, +		}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2014 the original author or authors., +		ResolvableType[] typeInfo = getRequiredTypeInfo(converter, Converter.class);, +		addConverter(new ConverterAdapter(converter, typeInfo[0], typeInfo[1]));, +		addConverter(new ConverterAdapter(converter, ResolvableType.forClass(sourceType), ResolvableType.forClass(targetType)));, +		ResolvableType[] typeInfo = getRequiredTypeInfo(converterFactory, ConverterFactory.class);, +		Assert.notNull("Unable to the determine sourceType <S> and targetRangeType R which your " +, +				"ConverterFactory<S, R> converts between; declare these generic types.");, +		addConverter(new ConverterFactoryAdapter(converterFactory,, +				new ConvertiblePair(typeInfo[0].resolve(), typeInfo[1].resolve())));, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +		return canConvert((sourceType != null ? TypeDescriptor.valueOf(sourceType) : null),, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +	private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) {, +		return generics;, +		private final ConvertiblePair typeInfo;, +		private final ResolvableType targetType;, +, +		public ConverterAdapter(Converter<?, ?> converter, ResolvableType sourceType, ResolvableType targetType) {, +			this.typeInfo = new ConvertiblePair(sourceType.resolve(Object.class), targetType.resolve(Object.class));, +			this.targetType = targetType;, +			ResolvableType rt = targetType.getResolvableType();, +			if (!rt.isAssignableFrom(this.targetType)) {, +				// Generic type structure not fully assignable -> try lenient fallback if, +				// unresolvable generics remain, just requiring the raw type to match then, +				if (!rt.hasUnresolvableGenerics() || !this.typeInfo.getTargetType().equals(targetType.getObjectType())) {, +			}, +			return this.typeInfo + " : " + this.converter.toString();, +		private final ConvertiblePair typeInfo;, +		public ConverterFactoryAdapter(ConverterFactory<?, ?> converterFactory, ConvertiblePair typeInfo) {, +			return this.typeInfo + " : " + this.converterFactory.toString();, +			return ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType) &&, +					ObjectUtils.nullSafeEquals(this.targetType, otherKey.targetType);, +			return ObjectUtils.nullSafeHashCode(this.sourceType) * 29 +, +					ObjectUtils.nullSafeHashCode(this.targetType);]