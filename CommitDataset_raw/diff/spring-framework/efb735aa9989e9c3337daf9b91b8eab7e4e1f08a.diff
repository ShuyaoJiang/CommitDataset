[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * @author Juergen Hoeller, +		List<ClientHttpRequest> requests = getRequests();, +		synchronized (requests) {, +			if (requests.isEmpty()) {, +			requests.add(request);, +			getExpectations().clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * @author Juergen Hoeller, +		List<ClientHttpRequest> requests = getRequests();, +		synchronized (requests) {, +			if (requests.isEmpty()) {, +			requests.add(request);, +			getExpectations().clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/RequestExpectationManager.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws IOException in case of any validation errors, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * @author Juergen Hoeller, +		List<ClientHttpRequest> requests = getRequests();, +		synchronized (requests) {, +			if (requests.isEmpty()) {, +			requests.add(request);, +			getExpectations().clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/RequestExpectationManager.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws IOException in case of any validation errors, +++ b/spring-test/src/main/java/org/springframework/test/web/client/SimpleRequestExpectationManager.java, + * @author Juergen Hoeller, +		RequestExpectation expectation = this.repeatExpectations.findExpectation(request);, +			if (!this.expectationIterator.hasNext()) {, +				throw createUnexpectedRequestError(request);, +			expectation = this.expectationIterator.next();, +			expectation.match(request);, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * @author Juergen Hoeller, +		List<ClientHttpRequest> requests = getRequests();, +		synchronized (requests) {, +			if (requests.isEmpty()) {, +			requests.add(request);, +			getExpectations().clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/RequestExpectationManager.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws IOException in case of any validation errors, +++ b/spring-test/src/main/java/org/springframework/test/web/client/SimpleRequestExpectationManager.java, + * @author Juergen Hoeller, +		RequestExpectation expectation = this.repeatExpectations.findExpectation(request);, +			if (!this.expectationIterator.hasNext()) {, +				throw createUnexpectedRequestError(request);, +			expectation = this.expectationIterator.next();, +			expectation.match(request);, +++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.mock.http.client.MockClientHttpRequest;, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.test.web.client.ExpectedCount.*;, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, + *, +	private final SimpleRequestExpectationManager manager = new SimpleRequestExpectationManager();, +	@Test  // SPR-15672, +	public void sequentialRequestsWithDifferentCount() throws Exception {, +		this.manager.expectRequest(times(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(once(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +, +		this.manager.validateRequest(createRequest(GET, "/foo"));, +		this.manager.validateRequest(createRequest(GET, "/foo"));, +		this.manager.validateRequest(createRequest(GET, "/bar"));, +	}, +, +			return new MockClientHttpRequest(method, new URI(url));]