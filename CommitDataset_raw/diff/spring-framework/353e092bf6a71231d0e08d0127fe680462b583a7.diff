[+++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener, + * EventPublishingTestExecutionListener}</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener, + * EventPublishingTestExecutionListener}</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/event/EventPublishingTestExecutionListener.java, +import java.util.function.Function;, +, + * that publishes test execution events to the, + * {@link org.springframework.context.ApplicationContext ApplicationContext}, + * for the currently executing test. Events are only published if the, + * {@code ApplicationContext} {@linkplain TestContext#hasApplicationContext(), + * has already been loaded}., + * @author Frank Scheffler, +	 * Returns {@code 10000}., +	public final int getOrder() {, +		return 10_000;, +	 * Publish a {@link BeforeTestClassEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestClassEvent::new);, +	 * Publish a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, PrepareTestInstanceEvent::new);, +	 * Publish a {@link BeforeTestMethodEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestMethodEvent::new);, +	 * Publish a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestExecutionEvent::new);, +	 * Publish an {@link AfterTestExecutionEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestExecutionEvent::new);, +	 * Publish an {@link AfterTestMethodEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestMethodEvent::new);, +	 * Publish an {@link AfterTestClassEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestClassEvent::new);, +	}, +, +	private void publishEvent(TestContext testContext, Function<TestContext, TestContextEvent> eventFactory) {, +		if (testContext.hasApplicationContext()) {, +			testContext.getApplicationContext().publishEvent(eventFactory.apply(testContext));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener, + * EventPublishingTestExecutionListener}</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/event/EventPublishingTestExecutionListener.java, +import java.util.function.Function;, +, + * that publishes test execution events to the, + * {@link org.springframework.context.ApplicationContext ApplicationContext}, + * for the currently executing test. Events are only published if the, + * {@code ApplicationContext} {@linkplain TestContext#hasApplicationContext(), + * has already been loaded}., + * @author Frank Scheffler, +	 * Returns {@code 10000}., +	public final int getOrder() {, +		return 10_000;, +	 * Publish a {@link BeforeTestClassEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestClassEvent::new);, +	 * Publish a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, PrepareTestInstanceEvent::new);, +	 * Publish a {@link BeforeTestMethodEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestMethodEvent::new);, +	 * Publish a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestExecutionEvent::new);, +	 * Publish an {@link AfterTestExecutionEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestExecutionEvent::new);, +	 * Publish an {@link AfterTestMethodEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestMethodEvent::new);, +	 * Publish an {@link AfterTestClassEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, AfterTestClassEvent::new);, +	}, +, +	private void publishEvent(TestContext testContext, Function<TestContext, TestContextEvent> eventFactory) {, +		if (testContext.hasApplicationContext()) {, +			testContext.getApplicationContext().publishEvent(eventFactory.apply(testContext));, +		}, +++ b/spring-test/src/main/resources/META-INF/spring.factories, +	org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener,\, +	org.springframework.test.context.event.EventPublishingTestExecutionListener, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener, + * EventPublishingTestExecutionListener}</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/event/EventPublishingTestExecutionListener.java, +import java.util.function.Function;, +, + * that publishes test execution events to the, + * {@link org.springframework.context.ApplicationContext ApplicationContext}, + * for the currently executing test. Events are only published if the, + * {@code ApplicationContext} {@linkplain TestContext#hasApplicationContext(), + * has already been loaded}., + * @author Frank Scheffler, +	 * Returns {@code 10000}., +	public final int getOrder() {, +		return 10_000;, +	 * Publish a {@link BeforeTestClassEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestClassEvent::new);, +	 * Publish a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, PrepareTestInstanceEvent::new);, +	 * Publish a {@link BeforeTestMethodEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestMethodEvent::new);, +	 * Publish a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext}, +		publishEvent(testContext, BeforeTestExecutionEvent::new);, +	 * Publish an {@link AfterTestExecutionEvent} to the {@code ApplicationContext}]