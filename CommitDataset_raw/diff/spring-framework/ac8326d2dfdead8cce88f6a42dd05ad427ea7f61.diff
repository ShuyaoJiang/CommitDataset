[+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(key);, +		willThrow(exception).given(cache).put(key, 234L);, +		willThrow(exception).given(cache).evict(key);, +		willThrow(exception).given(cache).clear();, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(key);, +		willThrow(exception).given(cache).put(key, 234L);, +		willThrow(exception).given(cache).evict(key);, +		willThrow(exception).given(cache).clear();, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L); // Update of the cache will fail as well, +		willReturn(new SimpleValueWrapper(2L)).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).clear();, +		willThrow(exception).given(cache).clear();, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(key);, +		willThrow(exception).given(cache).put(key, 234L);, +		willThrow(exception).given(cache).evict(key);, +		willThrow(exception).given(cache).clear();, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L); // Update of the cache will fail as well, +		willReturn(new SimpleValueWrapper(2L)).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).clear();, +		willThrow(exception).given(cache).clear();, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +		willThrow(thrown).given(listener).onApplicationEvent(evt);, +		willThrow(new RuntimeException()).given(listener).onApplicationEvent(evt);, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(key);, +		willThrow(exception).given(cache).put(key, 234L);, +		willThrow(exception).given(cache).evict(key);, +		willThrow(exception).given(cache).clear();, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L); // Update of the cache will fail as well, +		willReturn(new SimpleValueWrapper(2L)).given(cache).get(0L);, +		willThrow(exception).given(cache).get(0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).put(0L, 0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).evict(0L);, +		willThrow(exception).given(cache).clear();, +		willThrow(exception).given(cache).clear();, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +		willThrow(thrown).given(listener).onApplicationEvent(evt);, +		willThrow(new RuntimeException()).given(listener).onApplicationEvent(evt);, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, +		willThrow(org.springframework.jms.support.converter.MessageConversionException.class), +				.given(messageConverter).toMessage(eq(message), anyObject());, +		willThrow(org.springframework.jms.support.converter.MessageConversionException.class), +				.given(messageConverter).fromMessage(message);, +		willThrow(MessageNotReadableException.class).given(jmsTemplate).receive("myQueue");, +		willThrow(DestinationResolutionException.class).given(jmsTemplate).send(eq(destination), anyObject());, +		willThrow(DestinationResolutionException.class).given(jmsTemplate).receive(destination);, +		willThrow(MessageFormatException.class).given(messageConverter).toMessage(eq(message), anyObject());, +		willThrow(MessageNotWriteableException.class).given(messageConverter).toMessage(eq(message), anyObject());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq("unknownQueue"), anyObject());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq(destination), anyObject());, +		willAnswer(new Answer<Object>() {, +		}).given(jmsTemplate).send(eq("myQueue"), anyObject());, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.mockito.BDDMockito.*;, +, +		willThrow(exception).given(cache).get(key);]