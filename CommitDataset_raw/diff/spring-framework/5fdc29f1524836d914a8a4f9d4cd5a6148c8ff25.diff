[+++ b/org.springframework.context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, +++ b/org.springframework.context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +, +, + *, +	 * Create a new DateTimeParser., +, +++ b/org.springframework.context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +, +, + *, +	 * Create a new DateTimeParser., +, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +, + *, +, +	/**, +	 * Set the user's chronology., +	 */, +	public void setChronology(Chronology chronology) {, +		this.chronology = chronology;, +	}, +, +		return this.chronology;, +	 * Set the user's timezone., +	public void setTimeZone(DateTimeZone timeZone) {, +		this.timeZone = timeZone;, +++ b/org.springframework.context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +, +, + *, +	 * Create a new DateTimeParser., +, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +, + *, +, +	/**, +	 * Set the user's chronology., +	 */, +	public void setChronology(Chronology chronology) {, +		this.chronology = chronology;, +	}, +, +		return this.chronology;, +	 * Set the user's timezone., +	public void setTimeZone(DateTimeZone timeZone) {, +		this.timeZone = timeZone;, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +, +, + *, +	private static final ThreadLocal<JodaTimeContext> jodaTimeContextHolder =, +			new NamedInheritableThreadLocal<JodaTimeContext>("JodaTime Context");, +	 * Return the JodaTimeContext associated with the current thread, if any., +	 * @return the current JodaTimeContext, or <code>null</code> if none, +	 */, +	public static JodaTimeContext getJodaTimeContext() {, +		return jodaTimeContextHolder.get();, +	}, +, +	/**, +		return (context != null ? context.getFormatter(formatter) : formatter);, +++ b/org.springframework.context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +, +, + *, +	 * Create a new DateTimeParser., +, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +, + *, +, +	/**, +	 * Set the user's chronology., +	 */, +	public void setChronology(Chronology chronology) {, +		this.chronology = chronology;, +	}, +, +		return this.chronology;, +	 * Set the user's timezone., +	public void setTimeZone(DateTimeZone timeZone) {, +		this.timeZone = timeZone;, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +, +, + *, +	private static final ThreadLocal<JodaTimeContext> jodaTimeContextHolder =, +			new NamedInheritableThreadLocal<JodaTimeContext>("JodaTime Context");, +	 * Return the JodaTimeContext associated with the current thread, if any., +	 * @return the current JodaTimeContext, or <code>null</code> if none, +	 */, +	public static JodaTimeContext getJodaTimeContext() {, +		return jodaTimeContextHolder.get();]