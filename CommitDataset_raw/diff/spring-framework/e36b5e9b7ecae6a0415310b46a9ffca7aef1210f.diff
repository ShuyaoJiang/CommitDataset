[+++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, + * <p>As of Spring 3.1, {@code ContextLoader} supports injecting the root web, + * application context via the {@link #ContextLoader(WebApplicationContext)}, + * constructor, allowing for programmatic configuration in Servlet 3.0+ environments. See, + * {@link org.springframework.web.WebApplicationInitializer} for usage examples., + *, +	 * Create a new {@code ContextLoader} that will create a web application context, +	 * based on the "contextClass" and "contextConfigLocation" servlet context-params., +	 * See class-level documentation for details on default values for each., +	 * <p>This constructor is typically used when declaring the {@code, +	 * ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as, +	 * a no-arg constructor is required., +	 * <p>The created application context will be registered into the ServletContext under, +	 * the attribute name {@link WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}, +	 * and subclasses are free to call the {@link #closeWebApplicationContext} method on, +	 * container shutdown to close the application context., +	 * @see #ContextLoader(WebApplicationContext), +	 * @see #initWebApplicationContext(ServletContext), +	 * @see #closeWebApplicationContext(ServletContext), +	 */, +	public ContextLoader() {, +	}, +, +	/**, +	 * Create a new {@code ContextLoader} with the given application context. This, +	 * constructor is useful in Servlet 3.0+ environments where instance-based, +	 * registration of listeners is possible through the {@link ServletContext#addListener}, +	 * API., +	 * <p>The context may or may not yet be {@linkplain, +	 * ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation, +	 * of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>, +	 * already been refreshed (the recommended approach), then the following will occur:, +	 * <ul>, +	 * <li>If the given context has not already been assigned an {@linkplain, +	 * ConfigurableApplicationContext#setId id}, one will be assigned to it</li>, +	 * <li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to, +	 * the application context</li>, +	 * <li>{@link #customizeContext} will be called</li>, +	 * <li>Any {@link ApplicationContextInitializer}s specified through the, +	 * "contextInitializerClasses" init-param will be applied.</li>, +	 * <li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>, +	 * </ul>, +	 * If the context has already been refreshed or does not implement, +	 * {@code ConfigurableWebApplicationContext}, none of the above will occur under the, +	 * assumption that the user has performed these actions (or not) per his or her, +	 * specific needs., +	 * <p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples., +	 * <p>In any case, the given application context will be registered into the, +	 * ServletContext under the attribute name {@link, +	 * WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are, +	 * free to call the {@link #closeWebApplicationContext} method on container shutdown, +	 * to close the application context., +	 * @param context the application context to manage, +	 * @see #initWebApplicationContext(ServletContext), +	 * @see #closeWebApplicationContext(ServletContext), +	 */, +	public ContextLoader(WebApplicationContext context) {, +		this.context = context;, +	}, +, +	/**, +	 * using the application context provided at construction time, or creating a new one, +	 * @see #ContextLoader(WebApplicationContext), +			if (this.context == null) {, +				this.context = createWebApplicationContext(servletContext);, +			}, +			if (this.context instanceof ConfigurableWebApplicationContext) {, +				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext);, +			}, +	protected WebApplicationContext createWebApplicationContext(ServletContext sc) {, +		return wac;, +	}, +	/**, +	 * @deprecated as of Spring 3.1 in favor of, +	 * {@link #createWebApplicationContext(ServletContext)} and, +	 * {@link #configureAndRefreshWebApplicationContext(WebApplicationContext, ServletContext)}, +	 */, +	@Deprecated, +	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {, +		return createWebApplicationContext(sc);, +	}, +, +	protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) {, +		if (ObjectUtils.identityToString(wac).equals(wac.getId())) {, +			// The application context id is still set to its original default value, +			// -> assign a more useful id based on available information, +		}, +, +		// Determine parent for root web application context, if any., +		ApplicationContext parent = loadParentContext(sc);, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, + * <p>As of Spring 3.1, {@code ContextLoader} supports injecting the root web, + * application context via the {@link #ContextLoader(WebApplicationContext)}, + * constructor, allowing for programmatic configuration in Servlet 3.0+ environments. See, + * {@link org.springframework.web.WebApplicationInitializer} for usage examples., + *, +	 * Create a new {@code ContextLoader} that will create a web application context, +	 * based on the "contextClass" and "contextConfigLocation" servlet context-params., +	 * See class-level documentation for details on default values for each., +	 * <p>This constructor is typically used when declaring the {@code]