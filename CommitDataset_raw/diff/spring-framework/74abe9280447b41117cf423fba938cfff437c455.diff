[+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +import java.util.function.IntPredicate;, +	 * Returns the index of the first byte in this buffer that matches the given, +	 * predicate., +	 * @param predicate the predicate to match, +	 * @return the index of the first byte that matches {@code predicate}; or {@code -1}, +	 * if none match, +	int indexOf(IntPredicate predicate);, +, +	/**, +	 * Returns the index of the last byte in this buffer that matches the given, +	 * predicate., +	 * @param predicate the predicate to match, +	 * @return the index of the last byte that matches {@code predicate}; or {@code -1}, +	 * if none match, +	 */, +	int lastIndexOf(IntPredicate predicate);, +	 * Creates a new {@code DataBuffer} whose contents is a shared subsequence of this, +	 * data buffer's content.  Data between this data buffer and the returned buffer is, +	 * shared; though changes in the returned buffer's position will not be reflected, +	 * in the reading nor writing position of this data buffer., +	 * @param index the index at which to start the slice, +	 * @param length the length of the slice, +	 * @return the specified slice of this data buffer, +	 */, +	DataBuffer slice(int index, int length);, +, +	/**, +	 * in the reading nor writing position of this data buffer., +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +import java.util.function.IntPredicate;, +	 * Returns the index of the first byte in this buffer that matches the given, +	 * predicate., +	 * @param predicate the predicate to match, +	 * @return the index of the first byte that matches {@code predicate}; or {@code -1}, +	 * if none match, +	int indexOf(IntPredicate predicate);, +, +	/**, +	 * Returns the index of the last byte in this buffer that matches the given, +	 * predicate., +	 * @param predicate the predicate to match, +	 * @return the index of the last byte that matches {@code predicate}; or {@code -1}, +	 * if none match, +	 */, +	int lastIndexOf(IntPredicate predicate);, +	 * Creates a new {@code DataBuffer} whose contents is a shared subsequence of this, +	 * data buffer's content.  Data between this data buffer and the returned buffer is, +	 * shared; though changes in the returned buffer's position will not be reflected, +	 * in the reading nor writing position of this data buffer., +	 * @param index the index at which to start the slice, +	 * @param length the length of the slice, +	 * @return the specified slice of this data buffer, +	 */, +	DataBuffer slice(int index, int length);, +, +	/**, +	 * in the reading nor writing position of this data buffer., +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +import java.util.function.IntPredicate;, +	public int indexOf(IntPredicate predicate) {, +		for (int i = 0; i < readableByteCount(); i++) {, +			byte b = this.byteBuffer.get(i);, +			if (predicate.test(b)) {, +				return i;, +			}, +		}, +		return -1;, +	}, +, +	@Override, +	public int lastIndexOf(IntPredicate predicate) {, +		for (int i = readableByteCount() - 1; i >= 0; i--) {, +			byte b = this.byteBuffer.get(i);, +			if (predicate.test(b)) {, +				return i;, +			}, +		}, +		return -1;, +		try {, +			return function.apply(this.byteBuffer);, +		}, +		finally {, +		}, +		try {, +			return function.apply(this.byteBuffer);, +		}, +		finally {, +		}, +	}, +, +	@Override, +	public DataBuffer slice(int index, int length) {, +		int oldPosition = this.byteBuffer.position();, +		try {, +			this.byteBuffer.position(index);, +			ByteBuffer slice = this.byteBuffer.slice();, +			slice.limit(length);, +			return new SlicedDefaultDataBuffer(slice, 0, length, this.allocator);, +		}]