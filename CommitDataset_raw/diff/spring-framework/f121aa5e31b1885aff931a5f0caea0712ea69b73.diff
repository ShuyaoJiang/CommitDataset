[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/DefaultResourceResolverChain.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.ListIterator;, + * Default immutable implementation of {@link ResourceResolverChain}., +	@Nullable, +	private final ResourceResolver resolver;, +	@Nullable, +	private final ResourceResolverChain nextChain;, +		resolvers = resolvers != null ? resolvers : Collections.emptyList();, +		DefaultResourceResolverChain chain = initChain(new ArrayList<>(resolvers));, +		this.resolver = chain.resolver;, +		this.nextChain = chain.nextChain;, +, +	private static DefaultResourceResolverChain initChain(ArrayList<? extends ResourceResolver> resolvers) {, +		DefaultResourceResolverChain chain = new DefaultResourceResolverChain(null, null);, +		ListIterator<? extends ResourceResolver> itr = resolvers.listIterator(resolvers.size());, +		while (itr.hasPrevious()) {, +			chain = new DefaultResourceResolverChain(itr.previous(), chain);, +		}, +		return chain;, +	}, +, +	private DefaultResourceResolverChain(@Nullable ResourceResolver resolver,, +			@Nullable ResourceResolverChain chain) {, +, +		Assert.isTrue((resolver == null && chain == null) || (resolver != null && chain != null),, +				"Both resolver and resolver chain must be null, or neither is");, +, +		this.resolver = resolver;, +		this.nextChain = chain;, +	@SuppressWarnings("ConstantConditions"), +		return this.resolver != null ?, +				this.resolver.resolveResource(exchange, requestPath, locations, this.nextChain) :, +				Mono.empty();, +	@SuppressWarnings("ConstantConditions"), +		return this.resolver != null ?, +				this.resolver.resolveUrlPath(resourcePath, locations, this.nextChain) :, +				Mono.empty();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/DefaultResourceResolverChain.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.ListIterator;, + * Default immutable implementation of {@link ResourceResolverChain}., +	@Nullable, +	private final ResourceResolver resolver;, +	@Nullable, +	private final ResourceResolverChain nextChain;, +		resolvers = resolvers != null ? resolvers : Collections.emptyList();, +		DefaultResourceResolverChain chain = initChain(new ArrayList<>(resolvers));, +		this.resolver = chain.resolver;, +		this.nextChain = chain.nextChain;, +, +	private static DefaultResourceResolverChain initChain(ArrayList<? extends ResourceResolver> resolvers) {, +		DefaultResourceResolverChain chain = new DefaultResourceResolverChain(null, null);, +		ListIterator<? extends ResourceResolver> itr = resolvers.listIterator(resolvers.size());, +		while (itr.hasPrevious()) {, +			chain = new DefaultResourceResolverChain(itr.previous(), chain);, +		}, +		return chain;, +	}, +, +	private DefaultResourceResolverChain(@Nullable ResourceResolver resolver,, +			@Nullable ResourceResolverChain chain) {, +, +		Assert.isTrue((resolver == null && chain == null) || (resolver != null && chain != null),, +				"Both resolver and resolver chain must be null, or neither is");, +, +		this.resolver = resolver;, +		this.nextChain = chain;, +	@SuppressWarnings("ConstantConditions"), +		return this.resolver != null ?, +				this.resolver.resolveResource(exchange, requestPath, locations, this.nextChain) :, +				Mono.empty();, +	@SuppressWarnings("ConstantConditions"), +		return this.resolver != null ?, +				this.resolver.resolveUrlPath(resourcePath, locations, this.nextChain) :, +				Mono.empty();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/DefaultResourceTransformerChain.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.ListIterator;, + * Default immutable implementation of {@link ResourceTransformerChain}., +	@Nullable, +	private final ResourceTransformer transformer;, +	@Nullable, +	private final ResourceTransformerChain nextChain;, +, +		transformers = transformers != null ? transformers : Collections.emptyList();, +		DefaultResourceTransformerChain chain = initTransformerChain(resolverChain, new ArrayList<>(transformers));, +		this.transformer = chain.transformer;, +		this.nextChain = chain.nextChain;, +	private DefaultResourceTransformerChain initTransformerChain(ResourceResolverChain resolverChain,, +			ArrayList<ResourceTransformer> transformers) {, +, +		DefaultResourceTransformerChain chain = new DefaultResourceTransformerChain(resolverChain, null, null);, +		ListIterator<? extends ResourceTransformer> itr = transformers.listIterator(transformers.size());, +		while (itr.hasPrevious()) {, +			chain = new DefaultResourceTransformerChain(resolverChain, itr.previous(), chain);, +		}]