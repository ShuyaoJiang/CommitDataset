[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +		RuntimeBeanReference pathMatcherRef = null;, +		if (element.hasAttribute("path-matcher")) {, +			pathMatcherRef = new RuntimeBeanReference(element.getAttribute("path-matcher"));, +		}, +, +			if (pathMatcherRef != null) {, +				mappedInterceptorDef.getPropertyValues().add("pathMatcher", pathMatcherRef);, +			}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +		RuntimeBeanReference pathMatcherRef = null;, +		if (element.hasAttribute("path-matcher")) {, +			pathMatcherRef = new RuntimeBeanReference(element.getAttribute("path-matcher"));, +		}, +, +			if (pathMatcherRef != null) {, +				mappedInterceptorDef.getPropertyValues().add("pathMatcher", pathMatcherRef);, +			}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +import java.util.*;, +import org.springframework.util.PathMatcher;, +	private PathMatcher pathMatcher;, +, +, +	 * A PathMatcher implementation to use with this interceptor. This is an optional,, +	 * advanced property required only if using custom PathMatcher implementations, +	 * that support mapping metadata other than the Ant path patterns supported, +	 * by default., +	 */, +	public InterceptorRegistration pathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +		return this;, +	}, +, +	/**, +		MappedInterceptor mappedInterceptor = new MappedInterceptor(, +				toArray(this.includePatterns), toArray(this.excludePatterns), interceptor);, +		if (this.pathMatcher != null) {, +			mappedInterceptor.setPathMatcher(this.pathMatcher);, +		}, +		return mappedInterceptor;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +		RuntimeBeanReference pathMatcherRef = null;, +		if (element.hasAttribute("path-matcher")) {, +			pathMatcherRef = new RuntimeBeanReference(element.getAttribute("path-matcher"));, +		}, +, +			if (pathMatcherRef != null) {, +				mappedInterceptorDef.getPropertyValues().add("pathMatcher", pathMatcherRef);, +			}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +import java.util.*;, +import org.springframework.util.PathMatcher;, +	private PathMatcher pathMatcher;, +, +, +	 * A PathMatcher implementation to use with this interceptor. This is an optional,, +	 * advanced property required only if using custom PathMatcher implementations, +	 * that support mapping metadata other than the Ant path patterns supported, +	 * by default., +	 */, +	public InterceptorRegistration pathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +		return this;, +	}, +, +	/**, +		MappedInterceptor mappedInterceptor = new MappedInterceptor(, +				toArray(this.includePatterns), toArray(this.excludePatterns), interceptor);, +		if (this.pathMatcher != null) {, +			mappedInterceptor.setPathMatcher(this.pathMatcher);, +		}, +		return mappedInterceptor;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +	private PathMatcher pathMatcher;, +, +, +	 * Configure a PathMatcher to use with this MappedInterceptor instead of the, +	 * one passed by default to the {@link #matches(String, org.springframework.util.PathMatcher)}, +	 * method. This is an advanced property that is only required when using custom, +	 * PathMatcher implementations that support mapping metadata other than the, +	 * Ant-style path patterns supported by default., +	 *, +	 * @param pathMatcher the path matcher to use, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +	 * The configured PathMatcher, or {@code null}., +	 */, +	public PathMatcher getPathMatcher() {, +		return this.pathMatcher;]