[+++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +import org.springframework.context.support.GenericApplicationContext;, +	 * @param loadContextExtractor a function that extracts the {@code loadContext}, +	 * flag from the annotation, +			Function<A, String> expressionExtractor, Function<A, String> reasonExtractor,, +			Function<A, Boolean> loadContextExtractor, boolean enabledOnTrue, ExtensionContext context) {, +		boolean loadContext = annotation.map(loadContextExtractor).get();, +		boolean evaluatedToTrue = evaluateExpression(expression, loadContext, annotationType, context);, +	private <A extends Annotation> boolean evaluateExpression(String expression, boolean loadContext,, +			Class<A> annotationType, ExtensionContext extensionContext) {, +		AnnotatedElement element = extensionContext.getElement().get();, +		GenericApplicationContext gac = null;, +		ApplicationContext applicationContext;, +, +		if (loadContext) {, +			applicationContext = SpringExtension.getApplicationContext(extensionContext);, +		} else {, +			gac = new GenericApplicationContext();, +			gac.refresh();, +			applicationContext = gac;, +		}, +						annotationType.getSimpleName(), expression, element, contextType));, +		if (gac != null) {, +			gac.close();, +		}, +		if (result instanceof Boolean) {, +			return ((Boolean) result).booleanValue();, +		}, +		else if (result instanceof String) {, +			String str = ((String) result).trim().toLowerCase();, +			if ("true".equals(str)) {, +				return true;, +			}, +			Assert.state("false".equals(str),, +				() -> String.format("@%s(\"%s\") on %s must evaluate to \"true\" or \"false\", not \"%s\"",, +					annotationType.getSimpleName(), expression, element, result));, +			return false;, +		}, +		else {, +			String message = String.format("@%s(\"%s\") on %s must evaluate to a String or a Boolean, not %s",, +					annotationType.getSimpleName(), expression, element,, +					(result != null ? result.getClass().getName() : "null"));, +			throw new IllegalStateException(message);, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +import org.springframework.context.support.GenericApplicationContext;, +	 * @param loadContextExtractor a function that extracts the {@code loadContext}, +	 * flag from the annotation, +			Function<A, String> expressionExtractor, Function<A, String> reasonExtractor,, +			Function<A, Boolean> loadContextExtractor, boolean enabledOnTrue, ExtensionContext context) {, +		boolean loadContext = annotation.map(loadContextExtractor).get();, +		boolean evaluatedToTrue = evaluateExpression(expression, loadContext, annotationType, context);, +	private <A extends Annotation> boolean evaluateExpression(String expression, boolean loadContext,, +			Class<A> annotationType, ExtensionContext extensionContext) {, +		AnnotatedElement element = extensionContext.getElement().get();, +		GenericApplicationContext gac = null;, +		ApplicationContext applicationContext;, +, +		if (loadContext) {, +			applicationContext = SpringExtension.getApplicationContext(extensionContext);, +		} else {, +			gac = new GenericApplicationContext();, +			gac.refresh();, +			applicationContext = gac;, +		}, +						annotationType.getSimpleName(), expression, element, contextType));, +		if (gac != null) {, +			gac.close();, +		}, +		if (result instanceof Boolean) {, +			return ((Boolean) result).booleanValue();, +		}, +		else if (result instanceof String) {, +			String str = ((String) result).trim().toLowerCase();, +			if ("true".equals(str)) {, +				return true;, +			}, +			Assert.state("false".equals(str),, +				() -> String.format("@%s(\"%s\") on %s must evaluate to \"true\" or \"false\", not \"%s\"",, +					annotationType.getSimpleName(), expression, element, result));, +			return false;, +		}, +		else {, +			String message = String.format("@%s(\"%s\") on %s must evaluate to a String or a Boolean, not %s",, +					annotationType.getSimpleName(), expression, element,, +					(result != null ? result.getClass().getName() : "null"));, +			throw new IllegalStateException(message);, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIf.java, +	 * Alias for {@link #expression}; only intended to be used if {@link #reason}, +	 * and {@link #loadContext} are not specified., +	 * @see #loadContext, +	/**, +	 * Whether the {@code ApplicationContext} associated with the current test, +	 * should be eagerly loaded in order to evaluate the {@link #expression}., +	 *, +	 * <p>Defaults to {@code false} so that test application contexts are not, +	 * eagerly loaded unnecessarily. If an expression is based solely on system, +	 * properties or environment variables or does not interact with beans in, +	 * the test's application context, there is no need to load the context]