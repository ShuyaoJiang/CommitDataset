[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, +import java.util.ArrayList;, +import java.util.Collections;, +	private final List<String> contentCodings = new ArrayList<>(EncodedResourceResolver.DEFAULT_CODINGS);, +, +	/**, +	 * Configure the supported content codings from the, +	 * {@literal "Accept-Encoding"} header for which to cache resource variations., +	 *, +	 * <p>The codings configured here are generally expected to match those, +	 * configured on {@link EncodedResourceResolver#setContentCodings(List)}., +	 *, +	 * <p>By default this property is set to {@literal ["br", "gzip"]} based on, +	 * the value of {@link EncodedResourceResolver#DEFAULT_CODINGS}., +	 *, +	 * @param codings one or more supported content codings, +	 * @since 5.1, +	 */, +	public void setContentCodings(List<String> codings) {, +		Assert.notEmpty(codings, "At least one content coding expected.");, +		this.contentCodings.clear();, +		this.contentCodings.addAll(codings);, +	}, +, +	/**, +	 * Return a read-only list with the supported content codings., +	 * @since 5.1, +	 */, +	public List<String> getContentCodings() {, +		return Collections.unmodifiableList(this.contentCodings);, +	}, +, +			if (StringUtils.hasText(codingKey)) {, +	private String getContentCodingKey(ServerWebExchange exchange) {, +				.filter(this.contentCodings::contains), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, +import java.util.ArrayList;, +import java.util.Collections;, +	private final List<String> contentCodings = new ArrayList<>(EncodedResourceResolver.DEFAULT_CODINGS);, +, +	/**, +	 * Configure the supported content codings from the, +	 * {@literal "Accept-Encoding"} header for which to cache resource variations., +	 *, +	 * <p>The codings configured here are generally expected to match those, +	 * configured on {@link EncodedResourceResolver#setContentCodings(List)}., +	 *, +	 * <p>By default this property is set to {@literal ["br", "gzip"]} based on, +	 * the value of {@link EncodedResourceResolver#DEFAULT_CODINGS}., +	 *, +	 * @param codings one or more supported content codings, +	 * @since 5.1, +	 */, +	public void setContentCodings(List<String> codings) {, +		Assert.notEmpty(codings, "At least one content coding expected.");, +		this.contentCodings.clear();, +		this.contentCodings.addAll(codings);, +	}, +, +	/**, +	 * Return a read-only list with the supported content codings., +	 * @since 5.1, +	 */, +	public List<String> getContentCodings() {, +		return Collections.unmodifiableList(this.contentCodings);, +	}, +, +			if (StringUtils.hasText(codingKey)) {, +	private String getContentCodingKey(ServerWebExchange exchange) {, +				.filter(this.contentCodings::contains), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/EncodedResourceResolver.java, +	public static final List<String> DEFAULT_CODINGS = Arrays.asList("br", "gzip");, +, +, +	private final List<String> contentCodings = new ArrayList<>(DEFAULT_CODINGS);, +	 * extension via {@link #registerExtension} or {@link #setExtensions}. Also, +	 * customizations to the list of codings here should be matched by, +	 * customizations to the same list in {@link CachingResourceResolver} to, +	 * ensure encoded variants of a resource are cached under separate keys., +	 * @since 5.1, +	 * @since 5.1, +	 * @since 5.1, +	 * @since 5.1, +	 * @since 5.1, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, +import java.util.ArrayList;, +import java.util.Collections;, +	private final List<String> contentCodings = new ArrayList<>(EncodedResourceResolver.DEFAULT_CODINGS);, +, +	/**, +	 * Configure the supported content codings from the, +	 * {@literal "Accept-Encoding"} header for which to cache resource variations., +	 *, +	 * <p>The codings configured here are generally expected to match those, +	 * configured on {@link EncodedResourceResolver#setContentCodings(List)}., +	 *, +	 * <p>By default this property is set to {@literal ["br", "gzip"]} based on, +	 * the value of {@link EncodedResourceResolver#DEFAULT_CODINGS}., +	 *, +	 * @param codings one or more supported content codings]