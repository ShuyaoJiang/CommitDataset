[+++ b/spring-framework-reference/src/testing.xml, +        in combination with JUnit, TestNG, or any other testing framework, +        for unit tests dealing, +      TestContext framework is agnostic of the actual testing framework in, +        <title>JUnit 3.8 support is deprecated</title>, +        <para>As of Spring 3.0, the legacy JUnit 3.8 base class hierarchy (i.e.,, +        Any test classes based on this code should be migrated to the, +        <link linkend="testcontext-framework">Spring, +        TestContext Framework</link>.</para>, +, +        <para>As of Spring 3.1, the JUnit 3.8 base classes in the Spring, +        TestContext Framework (i.e.,, +        <classname>AbstractJUnit38SpringContextTests</classname> and, +        <classname>AbstractTransactionalJUnit38SpringContextTests</classname>), +        have been officially deprecated and will be removed in a later release., +        Any test classes based on this code should be migrated to the JUnit 4, +        or TestNG support provided by the <link linkend="testcontext-framework">Spring, +        to reload the configuration and rebuild the application, +        framework</link>.</para>, +        linkend="testcontext-fixture-di">TestContext framework</link>.</para>, +        linkend="testcontext-tx">TestContext framework</link>.</para>, +        framework</link>.</para>, +      linkend="testcontext-support-classes-junit4"><classname>AbstractTransactionalJUnit4SpringContextTests</classname></link>, +          <para>With JUnit 4.5+ or TestNG you can use, +      when used in conjunction with the <link, +      the <link, +      linkend="testcontext-support-classes-junit4">JUnit</link> support, +          conjunction with JUnit's, +          choose one or the other when integrating with JUnit, in which case, +          it is generally preferable to use the explicit JUnit configuration.</para>, +          different semantics than JUnit's, +          Specifically, due to the manner in which JUnit handles test, +      agnostic of the testing framework in use, whether JUnit or TestNG., +      The TestContext framework also places a, +      framework provides explicit support for JUnit and TestNG in the, +      form of <literal>abstract</literal> support classes., +      For JUnit, Spring also provides a custom JUnit, +      <interfacename>Runner</interfacename> that allows one to write , +      so called <emphasis>POJO test classes</emphasis>. POJO test classes, +      are not required to extend a particular class hierarchy.</para>, +        <classname>AbstractJUnit4SpringContextTests</classname> and, +        <para>In contrast to the deprecated JUnit 3.8 legacy class, +        the configuration and rebuild the application context before, +        <para>When you use the, +        250. As of Spring 3.0 you may alternatively use the , +        <interfacename>@Inject</interfacename> annotation from JSR 330. For, +        example, if you prefer <link, +        <interfacename>@Autowired</interfacename> or, +        <interfacename>@Inject</interfacename>. If you prefer to have your, +          <interfacename>@Autowired</interfacename> or, +          <interfacename>@Inject</interfacename> for constructors has no, +        conjunction with <interfacename>@Qualifier</interfacename>. As of , +        Spring 3.0 you may also choose to use , +        <interfacename>@Inject</interfacename> in conjunction with , +        <interfacename>@Named</interfacename>.</para>, +        <interfacename>@Autowired</interfacename>,, +        <interfacename>@Inject</interfacename> or, +          listings is not specific to JUnit. The same DI, +        <para>The first code listing shows a JUnit-based implementation, +        linkend="testcontext-support-classes-junit4"><classname>AbstractTransactionalJUnit4SpringContextTests</classname></link>, +          <para>Any <emphasis>before methods</emphasis> (such as methods, +          annotated with JUnit's <interfacename>@Before</interfacename>), +          and any <emphasis>after methods</emphasis> (such as methods annotated, +          with JUnit's <interfacename>@After</interfacename>), +        <para>The following JUnit-based example displays a fictitious, +          <title>JUnit support classes</title>, +          <title>Spring JUnit Runner</title>, +          JUnit 4.5 &ndash; 4.8.1). By annotating test classes with, +          developers can implement standard JUnit-based unit and integration, +        framework inspired by JUnit with added support for Java 5, +        etc.</para>]