[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, + * Copyright 2002-2015 the original author or authors., +		this.pathHelper = (urlPathHelper != null ? urlPathHelper : new UrlPathHelper());, +		this.pathMatcher = (pathMatcher != null ? pathMatcher : new AntPathMatcher());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, + * Copyright 2002-2015 the original author or authors., +		this.pathHelper = (urlPathHelper != null ? urlPathHelper : new UrlPathHelper());, +		this.pathMatcher = (pathMatcher != null ? pathMatcher : new AntPathMatcher());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof RequestMappingInfo)) {, +		RequestMappingInfo otherInfo = (RequestMappingInfo) other;, +		return (this.patternsCondition.equals(otherInfo.patternsCondition) &&, +				this.methodsCondition.equals(otherInfo.methodsCondition) &&, +				this.paramsCondition.equals(otherInfo.paramsCondition) &&, +				this.headersCondition.equals(otherInfo.headersCondition) &&, +				this.consumesCondition.equals(otherInfo.consumesCondition) &&, +				this.producesCondition.equals(otherInfo.producesCondition) &&, +				this.customConditionHolder.equals(otherInfo.customConditionHolder));, +	}, +, +, +, +	 * @see Builder#options, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, + * Copyright 2002-2015 the original author or authors., +		this.pathHelper = (urlPathHelper != null ? urlPathHelper : new UrlPathHelper());, +		this.pathMatcher = (pathMatcher != null ? pathMatcher : new AntPathMatcher());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof RequestMappingInfo)) {, +		RequestMappingInfo otherInfo = (RequestMappingInfo) other;, +		return (this.patternsCondition.equals(otherInfo.patternsCondition) &&, +				this.methodsCondition.equals(otherInfo.methodsCondition) &&, +				this.paramsCondition.equals(otherInfo.paramsCondition) &&, +				this.headersCondition.equals(otherInfo.headersCondition) &&, +				this.consumesCondition.equals(otherInfo.consumesCondition) &&, +				this.producesCondition.equals(otherInfo.producesCondition) &&, +				this.customConditionHolder.equals(otherInfo.customConditionHolder));, +	}, +, +, +, +	 * @see Builder#options, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));, +	protected RequestMappingInfo createRequestMappingInfo(, +			RequestMapping requestMapping, RequestCondition<?> customCondition) {, +		if (annotation.maxAge() >= 0 && config.getMaxAge() == null) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, + * Copyright 2002-2015 the original author or authors., +		this.pathHelper = (urlPathHelper != null ? urlPathHelper : new UrlPathHelper());, +		this.pathMatcher = (pathMatcher != null ? pathMatcher : new AntPathMatcher());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof RequestMappingInfo)) {, +		RequestMappingInfo otherInfo = (RequestMappingInfo) other;, +		return (this.patternsCondition.equals(otherInfo.patternsCondition) &&, +				this.methodsCondition.equals(otherInfo.methodsCondition) &&, +				this.paramsCondition.equals(otherInfo.paramsCondition) &&, +				this.headersCondition.equals(otherInfo.headersCondition) &&, +				this.consumesCondition.equals(otherInfo.consumesCondition) &&, +				this.producesCondition.equals(otherInfo.producesCondition) &&, +				this.customConditionHolder.equals(otherInfo.customConditionHolder));, +	}, +, +, +, +	 * @see Builder#options, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));, +	protected RequestMappingInfo createRequestMappingInfo(, +			RequestMapping requestMapping, RequestCondition<?> customCondition) {, +		if (annotation.maxAge() >= 0 && config.getMaxAge() == null) {, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.2.xsd, +			<xsd:documentation source="java:org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"><![CDATA[, +	Configures one or more HttpMessageConverter types to use for converting @RequestBody method parameters and, +	@ResponseBody method return values. Using this configuration element is optional., +	HttpMessageConverter registrations provided here will take precedence over HttpMessageConverter types registered, +	by default. Also see the register-defaults attribute if you want to turn off default registrations entirely., +	Whether or not default HttpMessageConverter registrations should be added in addition to the ones provided, +	within this element., +	In Servlet 3, the timeout begins after the main request processing thread has exited and ends when the request, +	is dispatched again for further processing of the concurrently produced result. If this value is not set,, +	the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3., +	This attribute is not required, and only needs to be specified if custom converters need to be configured., +	If not specified, a default FormattingConversionService is registered with converters to/from common value types., +	This attribute is not required, and only needs to be specified if a custom Validator needs to be configured., +	The bean name of a ContentNegotiationManager that is to be used to determine requested media types., +	If not specified, a default ContentNegotiationManager is configured that checks the request path extension, +	first and the "Accept" header second where path extensions such as ".json", ".xml", ".atom", and ".rss" are, +	recognized if Jackson, JAXB2, or the Rome libraries are available. As a fallback option, the path extension, +	is also used to perform a lookup through the ServletContext and the Java Activation Framework (if available)., +	Alternatively a controller method can declare a RedirectAttributes argument and use it to provide attributes, +	for a redirect. Setting this flag to true ensures the "default" model is never used in a redirect scenario, +	even if a RedirectAttributes argument is not declared. Setting it to false means the "default" model, +	may be used in a redirect if the controller method doesn't declare a RedirectAttributes argument.]