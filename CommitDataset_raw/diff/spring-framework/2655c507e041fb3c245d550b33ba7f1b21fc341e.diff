[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			adapter.setResponseBodyInterceptors(interceptors);, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			exceptionHandlerExceptionResolver.setResponseBodyInterceptors(interceptors);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			adapter.setResponseBodyInterceptors(interceptors);, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			exceptionHandlerExceptionResolver.setResponseBodyInterceptors(interceptors);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyInterceptor.java, +public abstract class AbstractMappingJacksonResponseBodyInterceptor, +		implements ResponseBodyInterceptor<Object> {, +	public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {, +		return MappingJackson2HttpMessageConverter.class.equals(converterType);, +, +	@Override, +	public final Object beforeBodyWrite(Object body, MethodParameter returnType,, +			MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType,, +			ServerHttpRequest request, ServerHttpResponse response) {, +, +		return container;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			adapter.setResponseBodyInterceptors(interceptors);, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			exceptionHandlerExceptionResolver.setResponseBodyInterceptors(interceptors);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyInterceptor.java, +public abstract class AbstractMappingJacksonResponseBodyInterceptor, +		implements ResponseBodyInterceptor<Object> {, +	public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {, +		return MappingJackson2HttpMessageConverter.class.equals(converterType);, +, +	@Override, +	public final Object beforeBodyWrite(Object body, MethodParameter returnType,, +			MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType,, +			ServerHttpRequest request, ServerHttpResponse response) {, +, +		return container;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.ClassUtils;, +					returnValue = this.interceptorChain.invoke(returnValue, returnType, selectedMediaType,, +							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			adapter.setResponseBodyInterceptors(interceptors);, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			exceptionHandlerExceptionResolver.setResponseBodyInterceptors(interceptors);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyInterceptor.java, +public abstract class AbstractMappingJacksonResponseBodyInterceptor, +		implements ResponseBodyInterceptor<Object> {, +	public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {, +		return MappingJackson2HttpMessageConverter.class.equals(converterType);, +, +	@Override, +	public final Object beforeBodyWrite(Object body, MethodParameter returnType,, +			MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType,, +			ServerHttpRequest request, ServerHttpResponse response) {, +, +		return container;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.ClassUtils;, +					returnValue = this.interceptorChain.invoke(returnValue, returnType, selectedMediaType,, +							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	public void setResponseBodyInterceptors(List<ResponseBodyInterceptor<?>> responseBodyInterceptors) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			adapter.setResponseBodyInterceptors(interceptors);, +			List<ResponseBodyInterceptor<?>> interceptors = new ArrayList<ResponseBodyInterceptor<?>>();, +			interceptors.add(new JsonViewResponseBodyInterceptor());, +			exceptionHandlerExceptionResolver.setResponseBodyInterceptors(interceptors);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyInterceptor.java, +public abstract class AbstractMappingJacksonResponseBodyInterceptor, +		implements ResponseBodyInterceptor<Object> {, +	public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {, +		return MappingJackson2HttpMessageConverter.class.equals(converterType);, +, +	@Override, +	public final Object beforeBodyWrite(Object body, MethodParameter returnType,, +			MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType,, +			ServerHttpRequest request, ServerHttpResponse response) {, +, +		return container;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.ClassUtils;, +					returnValue = this.interceptorChain.invoke(returnValue, returnType, selectedMediaType,, +							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	public void setResponseBodyInterceptors(List<ResponseBodyInterceptor<?>> responseBodyInterceptors) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyInterceptor.java]