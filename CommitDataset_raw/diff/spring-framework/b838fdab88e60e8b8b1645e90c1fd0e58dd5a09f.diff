[+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * Returns the {@link DataBufferAllocator} that created this buffer., +	 * @return the creating buffer allocator, +	 */, +	DataBufferAllocator allocator();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * Returns the {@link DataBufferAllocator} that created this buffer., +	 * @return the creating buffer allocator, +	 */, +	DataBufferAllocator allocator();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	private final DefaultDataBufferAllocator allocator;, +, +	DefaultDataBuffer(ByteBuffer byteBuffer, DefaultDataBufferAllocator allocator) {, +		this(byteBuffer, byteBuffer.position(), byteBuffer.position(), allocator);, +	DefaultDataBuffer(ByteBuffer byteBuffer, int readPosition, int writePosition, DefaultDataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");, +		this.allocator = allocator;, +	}, +, +	@Override, +	public DefaultDataBufferAllocator allocator() {, +		return this.allocator;, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * Returns the {@link DataBufferAllocator} that created this buffer., +	 * @return the creating buffer allocator, +	 */, +	DataBufferAllocator allocator();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	private final DefaultDataBufferAllocator allocator;, +, +	DefaultDataBuffer(ByteBuffer byteBuffer, DefaultDataBufferAllocator allocator) {, +		this(byteBuffer, byteBuffer.position(), byteBuffer.position(), allocator);, +	DefaultDataBuffer(ByteBuffer byteBuffer, int readPosition, int writePosition, DefaultDataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");, +		this.allocator = allocator;, +	}, +, +	@Override, +	public DefaultDataBufferAllocator allocator() {, +		return this.allocator;, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBufferAllocator.java, +				new DefaultDataBuffer(ByteBuffer.allocateDirect(initialCapacity), this) :, +				new DefaultDataBuffer(ByteBuffer.allocate(initialCapacity), this);, +		return new DefaultDataBuffer(sliced, 0, byteBuffer.remaining(), this);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * Returns the {@link DataBufferAllocator} that created this buffer., +	 * @return the creating buffer allocator, +	 */, +	DataBufferAllocator allocator();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	private final DefaultDataBufferAllocator allocator;, +, +	DefaultDataBuffer(ByteBuffer byteBuffer, DefaultDataBufferAllocator allocator) {, +		this(byteBuffer, byteBuffer.position(), byteBuffer.position(), allocator);, +	DefaultDataBuffer(ByteBuffer byteBuffer, int readPosition, int writePosition, DefaultDataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");, +		this.allocator = allocator;, +	}, +, +	@Override, +	public DefaultDataBufferAllocator allocator() {, +		return this.allocator;, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBufferAllocator.java, +				new DefaultDataBuffer(ByteBuffer.allocateDirect(initialCapacity), this) :, +				new DefaultDataBuffer(ByteBuffer.allocate(initialCapacity), this);, +		return new DefaultDataBuffer(sliced, 0, byteBuffer.remaining(), this);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	private final NettyDataBufferAllocator allocator;, +, +	NettyDataBuffer(ByteBuf byteBuf, NettyDataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");, +		this.allocator = allocator;, +	}, +, +	@Override, +	public NettyDataBufferAllocator allocator() {, +		return allocator;, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * Returns the {@link DataBufferAllocator} that created this buffer., +	 * @return the creating buffer allocator, +	 */, +	DataBufferAllocator allocator();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	private final DefaultDataBufferAllocator allocator;, +, +	DefaultDataBuffer(ByteBuffer byteBuffer, DefaultDataBufferAllocator allocator) {, +		this(byteBuffer, byteBuffer.position(), byteBuffer.position(), allocator);, +	DefaultDataBuffer(ByteBuffer byteBuffer, int readPosition, int writePosition, DefaultDataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");]