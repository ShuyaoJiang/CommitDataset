[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	private static final Set<PointcutPrimitive> DEFAULT_SUPPORTED_PRIMITIVES = new HashSet<PointcutPrimitive>();, +	private final Map<Method, ShadowMatch> shadowMatchCache = new HashMap<Method, ShadowMatch>();, +		synchronized (this.shadowMatchCache) {, +			ShadowMatch shadowMatch = this.shadowMatchCache.get(targetMethod);, +				this.shadowMatchCache.put(targetMethod, shadowMatch);, +				for (String alias : aliases) {, +					if (this.expressionPattern.matches(alias)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	private static final Set<PointcutPrimitive> DEFAULT_SUPPORTED_PRIMITIVES = new HashSet<PointcutPrimitive>();, +	private final Map<Method, ShadowMatch> shadowMatchCache = new HashMap<Method, ShadowMatch>();, +		synchronized (this.shadowMatchCache) {, +			ShadowMatch shadowMatch = this.shadowMatchCache.get(targetMethod);, +				this.shadowMatchCache.put(targetMethod, shadowMatch);, +				for (String alias : aliases) {, +					if (this.expressionPattern.matches(alias)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2008 the original author or authors., +	private static final Map<Class, Object> aspectCache = new HashMap<Class, Object>();, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	private static final Set<PointcutPrimitive> DEFAULT_SUPPORTED_PRIMITIVES = new HashSet<PointcutPrimitive>();, +	private final Map<Method, ShadowMatch> shadowMatchCache = new HashMap<Method, ShadowMatch>();, +		synchronized (this.shadowMatchCache) {, +			ShadowMatch shadowMatch = this.shadowMatchCache.get(targetMethod);, +				this.shadowMatchCache.put(targetMethod, shadowMatch);, +				for (String alias : aliases) {, +					if (this.expressionPattern.matches(alias)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2008 the original author or authors., +	private static final Map<Class, Object> aspectCache = new HashMap<Class, Object>();, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.java, +			for (Object interceptor : this.preInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +			for (Object interceptor : this.postInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +		this.proxy = proxyFactory.getProxy(this.proxyClassLoader);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	private static final Set<PointcutPrimitive> DEFAULT_SUPPORTED_PRIMITIVES = new HashSet<PointcutPrimitive>();, +	private final Map<Method, ShadowMatch> shadowMatchCache = new HashMap<Method, ShadowMatch>();, +		synchronized (this.shadowMatchCache) {, +			ShadowMatch shadowMatch = this.shadowMatchCache.get(targetMethod);, +				this.shadowMatchCache.put(targetMethod, shadowMatch);, +				for (String alias : aliases) {, +					if (this.expressionPattern.matches(alias)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2008 the original author or authors., +	private static final Map<Class, Object> aspectCache = new HashMap<Class, Object>();, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.java, +			for (Object interceptor : this.preInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +			for (Object interceptor : this.postInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +		this.proxy = proxyFactory.getProxy(this.proxyClassLoader);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, + * Copyright 2002-2008 the original author or authors., +	protected final List<Advisor> getAdvisorsInternal() {, +	public List<Object> getInterceptorsAndDynamicInterceptionAdvice(Method method, Class targetClass) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	private static final Set<PointcutPrimitive> DEFAULT_SUPPORTED_PRIMITIVES = new HashSet<PointcutPrimitive>();, +	private final Map<Method, ShadowMatch> shadowMatchCache = new HashMap<Method, ShadowMatch>();, +		synchronized (this.shadowMatchCache) {, +			ShadowMatch shadowMatch = this.shadowMatchCache.get(targetMethod);, +				this.shadowMatchCache.put(targetMethod, shadowMatch);, +				for (String alias : aliases) {, +					if (this.expressionPattern.matches(alias)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2008 the original author or authors., +	private static final Map<Class, Object> aspectCache = new HashMap<Class, Object>();, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.java, +			for (Object interceptor : this.preInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +			for (Object interceptor : this.postInterceptors) {, +				proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor));, +		this.proxy = proxyFactory.getProxy(this.proxyClassLoader);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, + * Copyright 2002-2008 the original author or authors., +	protected final List<Advisor> getAdvisorsInternal() {, +	public List<Object> getInterceptorsAndDynamicInterceptionAdvice(Method method, Class targetClass) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +	private static final Map<Class, Boolean> validatedClasses = new WeakHashMap<Class, Boolean>();, +	private transient Map<String, Integer> fixedInterceptorMap;, +				for (Class additionalInterface : additionalInterfaces) {, +		for (Method method : methods) {, +					new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource());, +					new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource());, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp();, +			this.fixedInterceptorMap = new HashMap<String, Integer>(methods.length);, +				List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);, +				this.fixedInterceptorMap.put(methods[x].toString(), x);, +				return true;]