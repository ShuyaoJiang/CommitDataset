[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +	 * A time zone for which the cron expression will be resolved., +	 * By default, the server's local time zone will be used., +	 * @return a zone id accepted by {@link java.util.TimeZone#getTimeZone(String)}, +	 * @see org.springframework.scheduling.support.CronTrigger#CronTrigger(String, java.util.TimeZone), +	 * @see java.util.TimeZone, +	 * @since 4.0, +	 */, +	String zone() default "";, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +	 * A time zone for which the cron expression will be resolved., +	 * By default, the server's local time zone will be used., +	 * @return a zone id accepted by {@link java.util.TimeZone#getTimeZone(String)}, +	 * @see org.springframework.scheduling.support.CronTrigger#CronTrigger(String, java.util.TimeZone), +	 * @see java.util.TimeZone, +	 * @since 4.0, +	 */, +	String zone() default "";, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.TimeZone;, +import org.springframework.scheduling.support.CronTrigger;, +				String zone = scheduled.zone();, +					zone = this.embeddedValueResolver.resolveStringValue(zone);, +				TimeZone timeZone;, +				if (!"".equals(zone)) {, +					timeZone = TimeZone.getTimeZone(zone);, +					// Check for that silly TimeZone fallback..., +					if ("GMT".equals(timeZone.getID()) && !zone.startsWith("GMT")) {, +						throw new IllegalArgumentException("Invalid time zone id '" + zone + "'");, +					}, +				}, +				else {, +					timeZone = TimeZone.getDefault();, +				}, +				this.registrar.addCronTask(new CronTask(runnable, new CronTrigger(cron, timeZone)));, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +	 * A time zone for which the cron expression will be resolved., +	 * By default, the server's local time zone will be used., +	 * @return a zone id accepted by {@link java.util.TimeZone#getTimeZone(String)}, +	 * @see org.springframework.scheduling.support.CronTrigger#CronTrigger(String, java.util.TimeZone), +	 * @see java.util.TimeZone, +	 * @since 4.0, +	 */, +	String zone() default "";, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.TimeZone;, +import org.springframework.scheduling.support.CronTrigger;, +				String zone = scheduled.zone();, +					zone = this.embeddedValueResolver.resolveStringValue(zone);, +				TimeZone timeZone;, +				if (!"".equals(zone)) {, +					timeZone = TimeZone.getTimeZone(zone);, +					// Check for that silly TimeZone fallback..., +					if ("GMT".equals(timeZone.getID()) && !zone.startsWith("GMT")) {, +						throw new IllegalArgumentException("Invalid time zone id '" + zone + "'");, +					}, +				}, +				else {, +					timeZone = TimeZone.getDefault();, +				}, +				this.registrar.addCronTask(new CronTask(runnable, new CronTrigger(cron, timeZone)));, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +import java.util.Calendar;, +import java.util.Date;, +import java.util.TimeZone;, +import org.springframework.scheduling.Trigger;, +import org.springframework.scheduling.TriggerContext;, +import org.springframework.scheduling.support.CronTrigger;, +import org.springframework.scheduling.support.SimpleTriggerContext;, + * @author Stevo SlaviÄ‡, +	@Test, +	public void severalFixedRatesWithRepeatedScheduledAnnotation() {, +		BeanDefinition processorDefinition = new, +		RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean.class);, +		severalFixedRates(context, processorDefinition, targetDefinition);, +	}, +	public void cronTaskWithZone() throws InterruptedException {, +		Assume.group(TestGroup.LONG_RUNNING);, +, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.CronWithTimezoneTestBean.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		@SuppressWarnings("unchecked"), +		List<CronTask> cronTasks = (List<CronTask>), +				new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");, +		assertEquals(1, cronTasks.size());]