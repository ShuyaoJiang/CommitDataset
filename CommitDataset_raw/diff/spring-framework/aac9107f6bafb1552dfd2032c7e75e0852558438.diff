[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/PropertiesEditor.java, +						"Failed to parse [" + text + "] into Properties", ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/PropertiesEditor.java, +						"Failed to parse [" + text + "] into Properties", ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +			if (submittedValue == null || submittedValue.length() == 0) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/PropertiesEditor.java, +						"Failed to parse [" + text + "] into Properties", ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +			if (submittedValue == null || submittedValue.length() == 0) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import static org.junit.Assert.assertNull;, +	@Test, +	public void testPrintNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +	}, +, +	@Test, +	public void testParseNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testParseEmptyString() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testPrintNullDefault() throws ParseException {, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +	}, +, +	@Test, +	public void testParseNullDefault() throws ParseException {, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testParseEmptyStringDefault() throws ParseException {, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/PropertiesEditor.java, +						"Failed to parse [" + text + "] into Properties", ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +			if (submittedValue == null || submittedValue.length() == 0) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import static org.junit.Assert.assertNull;, +	@Test, +	public void testPrintNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +	}, +, +	@Test, +	public void testParseNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testParseEmptyString() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testPrintNullDefault() throws ParseException {, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +	}, +, +	@Test, +	public void testParseNullDefault() throws ParseException {, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void testParseEmptyStringDefault() throws ParseException {, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToMapConverter.java, +import static org.springframework.core.convert.support.ConversionUtils.asList;, +, +	private final CollectionToMapConverter helperConverter;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/PropertiesEditor.java, +						"Failed to parse [" + text + "] into Properties", ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +			if (submittedValue == null || submittedValue.length() == 0) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import static org.junit.Assert.assertNull;, +	@Test, +	public void testPrintNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +	}, +]