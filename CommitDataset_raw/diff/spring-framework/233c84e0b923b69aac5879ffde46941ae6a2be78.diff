[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +			if (operand==null) {, +				if (nullSafe) { , +							"null");, +				}, +			} else {, +				throw new SpelEvaluationException(getStartPosition(), SpelMessages.INVALID_TYPE_FOR_SELECTION,, +						operand.getClass().getName());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +			if (operand==null) {, +				if (nullSafe) { , +							"null");, +				}, +			} else {, +				throw new SpelEvaluationException(getStartPosition(), SpelMessages.INVALID_TYPE_FOR_SELECTION,, +						operand.getClass().getName());, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/InProgressTests.java, +		evaluateAndCheckError("null.![true]", SpelMessages.PROJECTION_NOT_SUPPORTED_ON_TYPE);, +		evaluate("null?.![true]", null, null);, +, +	public void testSelection05() {, +		evaluate("mapOfNumbersUpToTen.?[key>11].size()", "0", Integer.class);, +		evaluate("mapOfNumbersUpToTen.^[key>11]", null, null);, +		evaluate("mapOfNumbersUpToTen.$[key>11]", null, null);, +		evaluate("null?.$[key>11]", null, null);, +		evaluateAndCheckError("null.?[key>11]", SpelMessages.INVALID_TYPE_FOR_SELECTION);, +		evaluateAndCheckError("'abc'.?[key>11]", SpelMessages.INVALID_TYPE_FOR_SELECTION);, +	}, +, +	@Test, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +			if (operand==null) {, +				if (nullSafe) { , +							"null");, +				}, +			} else {, +				throw new SpelEvaluationException(getStartPosition(), SpelMessages.INVALID_TYPE_FOR_SELECTION,, +						operand.getClass().getName());, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/InProgressTests.java, +		evaluateAndCheckError("null.![true]", SpelMessages.PROJECTION_NOT_SUPPORTED_ON_TYPE);, +		evaluate("null?.![true]", null, null);, +, +	public void testSelection05() {, +		evaluate("mapOfNumbersUpToTen.?[key>11].size()", "0", Integer.class);, +		evaluate("mapOfNumbersUpToTen.^[key>11]", null, null);, +		evaluate("mapOfNumbersUpToTen.$[key>11]", null, null);, +		evaluate("null?.$[key>11]", null, null);, +		evaluateAndCheckError("null.?[key>11]", SpelMessages.INVALID_TYPE_FOR_SELECTION);, +		evaluateAndCheckError("'abc'.?[key>11]", SpelMessages.INVALID_TYPE_FOR_SELECTION);, +	}, +, +	@Test, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ParsingTests.java, +	@Test, +	public void testElvis() {, +		parseCheck("3?:1", "3 ?: 1");, +	}, +	]