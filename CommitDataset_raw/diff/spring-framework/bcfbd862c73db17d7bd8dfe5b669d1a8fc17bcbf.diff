[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java, +	 * A SpEL expression to be evaluated against the payload object as the root context., +	 * This attribute may or may not be supported depending on whether the message being, +	 * handled contains a non-primitive Object as its payload or is in serialized form, +	 * and requires message conversion., +	 * <p>, +	 * When processing STOMP over WebSocket messages this attribute is not supported., +	 */, +	String value() default "";, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java, +	 * A SpEL expression to be evaluated against the payload object as the root context., +	 * This attribute may or may not be supported depending on whether the message being, +	 * handled contains a non-primitive Object as its payload or is in serialized form, +	 * and requires message conversion., +	 * <p>, +	 * When processing STOMP over WebSocket messages this attribute is not supported., +	 */, +	String value() default "";, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.util.StringUtils;, +		if ((annot != null) && StringUtils.hasText(annot.value())) {, +			throw new IllegalStateException("@Payload SpEL expressions not supported by this resolver.");, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java, +	 * A SpEL expression to be evaluated against the payload object as the root context., +	 * This attribute may or may not be supported depending on whether the message being, +	 * handled contains a non-primitive Object as its payload or is in serialized form, +	 * and requires message conversion., +	 * <p>, +	 * When processing STOMP over WebSocket messages this attribute is not supported., +	 */, +	String value() default "";, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.util.StringUtils;, +		if ((annot != null) && StringUtils.hasText(annot.value())) {, +			throw new IllegalStateException("@Payload SpEL expressions not supported by this resolver.");, +		}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java, +	private MethodParameter paramWithSpelExpression;, +				String.class, String.class, String.class);, +		this.paramWithSpelExpression = new MethodParameter(method , 2);, +	@Test(expected=IllegalStateException.class), +	public void resolveSpelExpressionNotSupported() throws Exception {, +		Message<?> message = MessageBuilder.withPayload("ABC".getBytes()).build();, +		this.resolver.resolveArgument(this.paramWithSpelExpression, message);, +	}, +, +			@Payload(required=false) String paramNotRequired,, +			@Payload("foo.bar") String paramWithSpelExpression) {]