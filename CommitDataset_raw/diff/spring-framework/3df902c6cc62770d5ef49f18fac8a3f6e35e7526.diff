[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http.server.reactive;, +, +import java.net.URI;, +, +import reactor.core.publisher.Flux;, +, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.http.HttpCookie;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +, +/**, + * Package private default implementation of {@link ServerHttpRequest.Builder}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +class DefaultServerHttpRequestBuilder implements ServerHttpRequest.Builder {, +, +	private final ServerHttpRequest delegate;, +, +, +	private HttpMethod httpMethod;, +, +	private URI uri;, +, +	private String contextPath;, +, +	private MultiValueMap<String, String> queryParams;, +, +	private HttpHeaders headers;, +, +	private MultiValueMap<String, HttpCookie> cookies;, +, +	private Flux<DataBuffer> body;, +, +, +	public DefaultServerHttpRequestBuilder(ServerHttpRequest delegate) {, +		Assert.notNull(delegate, "ServerHttpRequest delegate is required.");, +		this.delegate = delegate;, +	}, +, +, +	@Override, +	public ServerHttpRequest.Builder method(HttpMethod httpMethod) {, +		this.httpMethod = httpMethod;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder uri(URI uri) {, +		this.uri = uri;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder contextPath(String contextPath) {, +		this.contextPath = contextPath;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder queryParams(MultiValueMap<String, String> queryParams) {, +		this.queryParams = queryParams;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder headers(HttpHeaders headers) {, +		this.headers = headers;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder cookies(MultiValueMap<String, HttpCookie> cookies) {, +		this.cookies = cookies;, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder body(Flux<DataBuffer> body) {, +		this.body = body;]