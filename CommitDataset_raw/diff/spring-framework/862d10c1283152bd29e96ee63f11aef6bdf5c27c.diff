[+++ b/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, + * @author Brian Clozel, +	 * <p>Default implementation returns:, +	 * <ul>, +	 *     <li>{@code Boolean.FALSE} for boolean fields, +	 *     <li>an empty array for array types, +	 *     <li>Collection implementations for Collection types, +	 *     <li>Map implementations for Map types, +	 *     <li>else, {@code null} is used as default, +	 * </ul>, +		if (fieldType != null) {, +			try {, +				if (boolean.class == fieldType || Boolean.class == fieldType) {, +				else if (fieldType.isArray()) {, +				else if (Collection.class.isAssignableFrom(fieldType)) {, +					return CollectionFactory.createCollection(fieldType, 0);, +				}, +				else if (Map.class.isAssignableFrom(fieldType)) {, +					return CollectionFactory.createMap(fieldType, 0);, +				}, +			} catch (IllegalArgumentException exc) {, +		// Default value: try null., +		return null;, +	}, +++ b/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, + * @author Brian Clozel, +	 * <p>Default implementation returns:, +	 * <ul>, +	 *     <li>{@code Boolean.FALSE} for boolean fields, +	 *     <li>an empty array for array types, +	 *     <li>Collection implementations for Collection types, +	 *     <li>Map implementations for Map types, +	 *     <li>else, {@code null} is used as default, +	 * </ul>, +		if (fieldType != null) {, +			try {, +				if (boolean.class == fieldType || Boolean.class == fieldType) {, +				else if (fieldType.isArray()) {, +				else if (Collection.class.isAssignableFrom(fieldType)) {, +					return CollectionFactory.createCollection(fieldType, 0);, +				}, +				else if (Map.class.isAssignableFrom(fieldType)) {, +					return CollectionFactory.createMap(fieldType, 0);, +				}, +			} catch (IllegalArgumentException exc) {, +		// Default value: try null., +		return null;, +	}, +++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebRequestDataBinderTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +import java.util.List;, +import java.util.Set;, +	// SPR-13502, +	@Test, +	public void testCollectionFieldsDefault() throws Exception {, +		TestBean target = new TestBean();, +		target.setSomeSet(null);, +		target.setSomeList(null);, +		target.setSomeMap(null);, +		WebRequestDataBinder binder = new WebRequestDataBinder(target);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addParameter("_someSet", "visible");, +		request.addParameter("_someList", "visible");, +		request.addParameter("_someMap", "visible");, +, +		binder.bind(new ServletWebRequest(request));, +		assertThat(target.getSomeSet(), notNullValue());, +		assertThat(target.getSomeSet(), isA(Set.class));, +, +		assertThat(target.getSomeList(), notNullValue());, +		assertThat(target.getSomeList(), isA(List.class));, +, +		assertThat(target.getSomeMap(), notNullValue());, +		assertThat(target.getSomeMap(), isA(Map.class));, +	}, +]