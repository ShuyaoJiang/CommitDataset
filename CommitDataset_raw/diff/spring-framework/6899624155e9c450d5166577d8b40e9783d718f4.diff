[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +				int keyEnd = getPropertyNameKeyEnd(propertyName, keyStart + PROPERTY_KEY_PREFIX.length());, +	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {, +		int unclosedPrefixes = 0;, +		int length = propertyName.length();, +		for (int i = startIndex; i < length; i++) {, +			switch (propertyName.charAt(i)) {, +				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:, +					// The property name contains opening prefix(es), +					unclosedPrefixes++;, +					break;, +				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:, +					if (unclosedPrefixes == 0) {, +						// No unclosed prefix(es) in the property name (left), this is the suffix we are looking for, +						return i;, +					} else {, +						// This suffix does not close the initial prefix, but one that occurred within the property name, +						unclosedPrefixes--;, +					}, +					break;, +			}, +		}, +		return -1;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +				int keyEnd = getPropertyNameKeyEnd(propertyName, keyStart + PROPERTY_KEY_PREFIX.length());, +	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {, +		int unclosedPrefixes = 0;, +		int length = propertyName.length();, +		for (int i = startIndex; i < length; i++) {, +			switch (propertyName.charAt(i)) {, +				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:, +					// The property name contains opening prefix(es), +					unclosedPrefixes++;, +					break;, +				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:, +					if (unclosedPrefixes == 0) {, +						// No unclosed prefix(es) in the property name (left), this is the suffix we are looking for, +						return i;, +					} else {, +						// This suffix does not close the initial prefix, but one that occurred within the property name, +						unclosedPrefixes--;, +					}, +					break;, +			}, +		}, +		return -1;, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java, +		TestBean tb8 = ((TestBean) target.getMap().get("key5[foo]"));, +		assertEquals("name8", tb8.getName());, +		assertEquals("name8", accessor.getPropertyValue("map[key5[foo]].name"));, +		assertEquals("name8", accessor.getPropertyValue("map['key5[foo]'].name"));, +		assertEquals("name8", accessor.getPropertyValue("map[\"key5[foo]\"].name"));, +		pvs.add("map[key5[foo]].name", "name10");, +		assertEquals("name10", accessor.getPropertyValue("map[key5[foo]].name"));, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +				int keyEnd = getPropertyNameKeyEnd(propertyName, keyStart + PROPERTY_KEY_PREFIX.length());, +	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {, +		int unclosedPrefixes = 0;, +		int length = propertyName.length();, +		for (int i = startIndex; i < length; i++) {, +			switch (propertyName.charAt(i)) {, +				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:, +					// The property name contains opening prefix(es), +					unclosedPrefixes++;, +					break;, +				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:, +					if (unclosedPrefixes == 0) {, +						// No unclosed prefix(es) in the property name (left), this is the suffix we are looking for, +						return i;, +					} else {, +						// This suffix does not close the initial prefix, but one that occurred within the property name, +						unclosedPrefixes--;, +					}, +					break;, +			}, +		}, +		return -1;, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java, +		TestBean tb8 = ((TestBean) target.getMap().get("key5[foo]"));, +		assertEquals("name8", tb8.getName());, +		assertEquals("name8", accessor.getPropertyValue("map[key5[foo]].name"));, +		assertEquals("name8", accessor.getPropertyValue("map['key5[foo]'].name"));, +		assertEquals("name8", accessor.getPropertyValue("map[\"key5[foo]\"].name"));, +		pvs.add("map[key5[foo]].name", "name10");, +		assertEquals("name10", accessor.getPropertyValue("map[key5[foo]].name"));, +++ b/spring-beans/src/test/java/org/springframework/tests/sample/beans/IndexedTestBean.java, +		TestBean tb8 = new TestBean("name8", 0);, +		this.map.put("key5[foo]", tb8);]