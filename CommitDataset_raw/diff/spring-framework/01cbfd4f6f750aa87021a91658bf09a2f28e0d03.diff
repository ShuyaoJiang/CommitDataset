[+++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import org.springframework.util.StringUtils;, +			if (source == null) {, +				return "";, +			}, +			return this.printer.print(source, LocaleContextHolder.getLocale());, +			if (!StringUtils.hasText(text)) {, +			if (result == null) {, +				throw new IllegalStateException("Parsers are not allowed to return null");, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import org.springframework.util.StringUtils;, +			if (source == null) {, +				return "";, +			}, +			return this.printer.print(source, LocaleContextHolder.getLocale());, +			if (!StringUtils.hasText(text)) {, +			if (result == null) {, +				throw new IllegalStateException("Parsers are not allowed to return null");, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.format.Formatter;, +	public void testParseBlankString() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert("     ", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test(expected=ConversionFailedException.class), +	public void testParseParserReturnsNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Integer.class, new NullReturningFormatter());, +		assertNull(formattingService.convert("1", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test(expected=ConversionFailedException.class), +	public void testParseNullPrimitiveProperty() throws ParseException {, +		formattingService.addFormatterForFieldType(Integer.class, new NumberFormatter());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(int.class)));, +	}, +, +	@Test, +	public static class NullReturningFormatter implements Formatter<Integer> {, +, +		public String print(Integer object, Locale locale) {, +			return null;, +		}, +, +		public Integer parse(String text, Locale locale) throws ParseException {, +			return null;, +		}, +		, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import org.springframework.util.StringUtils;, +			if (source == null) {, +				return "";, +			}, +			return this.printer.print(source, LocaleContextHolder.getLocale());, +			if (!StringUtils.hasText(text)) {, +			if (result == null) {, +				throw new IllegalStateException("Parsers are not allowed to return null");, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.format.Formatter;, +	public void testParseBlankString() throws ParseException {, +		formattingService.addFormatterForFieldType(Number.class, new NumberFormatter());, +		assertNull(formattingService.convert("     ", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test(expected=ConversionFailedException.class), +	public void testParseParserReturnsNull() throws ParseException {, +		formattingService.addFormatterForFieldType(Integer.class, new NullReturningFormatter());, +		assertNull(formattingService.convert("1", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test(expected=ConversionFailedException.class), +	public void testParseNullPrimitiveProperty() throws ParseException {, +		formattingService.addFormatterForFieldType(Integer.class, new NumberFormatter());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(int.class)));, +	}, +, +	@Test, +	public static class NullReturningFormatter implements Formatter<Integer> {, +, +		public String print(Integer object, Locale locale) {, +			return null;, +		}, +, +		public Integer parse(String text, Locale locale) throws ParseException {, +			return null;, +		}, +		, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			if (result == null) {, +				assertNotPrimitiveTargetType(sourceType, targetType);, +			}]