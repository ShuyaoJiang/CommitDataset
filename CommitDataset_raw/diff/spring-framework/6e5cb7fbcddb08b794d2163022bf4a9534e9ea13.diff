[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +import java.util.LinkedList;, +import org.springframework.web.util.HierarchicalUriComponents.PathComponent;, + * @author Phillip Webb, +	private CompositePathComponentBuilder pathBuilder = new CompositePathComponentBuilder();, +				this.pathBuilder = new CompositePathComponentBuilder(uri.getRawPath());, +		this.pathBuilder = new CompositePathComponentBuilder();, +		this.pathBuilder.addPath(path);, +		this.pathBuilder = new CompositePathComponentBuilder(path);, +	 * Appends the given path segments to the existing path of this builder. Each given, +	 * path segments may contain URI template variables., +		this.pathBuilder.addPathSegments(pathSegments);, +, +		PathComponent build();, +	private static class CompositePathComponentBuilder implements PathComponentBuilder {, +		private LinkedList<PathComponentBuilder> componentBuilders = new LinkedList<PathComponentBuilder>();, +		public CompositePathComponentBuilder() {, +		public CompositePathComponentBuilder(String path) {, +			addPath(path);, +		public void addPathSegments(String... pathSegments) {, +			if (!ObjectUtils.isEmpty(pathSegments)) {, +				PathSegmentComponentBuilder psBuilder = getLastBuilder(PathSegmentComponentBuilder.class);, +				FullPathComponentBuilder fpBuilder = getLastBuilder(FullPathComponentBuilder.class);, +				if (psBuilder == null) {, +					psBuilder = new PathSegmentComponentBuilder();, +					this.componentBuilders.add(psBuilder);, +					if (fpBuilder != null) {, +						fpBuilder.removeTrailingSlash();, +				}, +				psBuilder.append(pathSegments);, +		public void addPath(String path) {, +			if (StringUtils.hasText(path)) {, +				PathSegmentComponentBuilder psBuilder = getLastBuilder(PathSegmentComponentBuilder.class);, +				FullPathComponentBuilder fpBuilder = getLastBuilder(FullPathComponentBuilder.class);, +				if (psBuilder != null) {, +					path = path.startsWith("/") ? path : "/" + path;, +				if (fpBuilder == null) {, +					fpBuilder = new FullPathComponentBuilder();, +					this.componentBuilders.add(fpBuilder);, +				fpBuilder.append(path);, +		@SuppressWarnings("unchecked"), +		private <T> T getLastBuilder(Class<T> builderClass) {, +			if (!this.componentBuilders.isEmpty()) {, +				PathComponentBuilder last = this.componentBuilders.getLast();, +				if (builderClass.isInstance(last)) {, +					return (T) last;, +			return null;, +		}, +		public PathComponent build() {, +			int size = this.componentBuilders.size();, +			List<PathComponent> components = new ArrayList<PathComponent>(size);, +			for (int i = 0; i < size; i++) {, +				PathComponent pathComponent = this.componentBuilders.get(i).build();, +				if (pathComponent != null) {, +					components.add(pathComponent);, +				}, +			}, +			if (components.isEmpty()) {, +			if (components.size() == 1) {, +				return components.get(0);, +			}, +			return new HierarchicalUriComponents.PathComponentComposite(components);, +		}, +	private static class FullPathComponentBuilder implements PathComponentBuilder {, +, +		private StringBuilder path = new StringBuilder();, +, +		public void append(String path) {, +			this.path.append(path);, +, +		public PathComponent build() {, +			if (this.path.length() == 0) {, +				return null;, +			}, +			String path = this.path.toString().replace("//", "/");, +			return new HierarchicalUriComponents.FullPathComponent(path);, +		}, +, +		public void removeTrailingSlash() {, +			int index = this.path.length() - 1;, +			if (this.path.charAt(index) == '/') {, +				this.path.deleteCharAt(index);, +			}, +		}, +	}, +, +	private static class PathSegmentComponentBuilder implements PathComponentBuilder {, +, +		private List<String> pathSegments = new LinkedList<String>();, +, +		public void append(String... pathSegments) {, +			for (String pathSegment : pathSegments) {, +				if (StringUtils.hasText(pathSegment)) {, +					this.pathSegments.add(pathSegment);, +				}, +			}, +		}, +, +		public PathComponent build() {, +			return this.pathSegments.isEmpty() ?]