[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +	private final RequestCondition consumesCondition;, +, +		this(patterns, methods, null, null, null);, +							 RequestCondition headersCondition,, +							 RequestCondition consumesCondition) {, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +	 * <li>Consumes .. TODO, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestMappingInfo(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +		builder.append(",consumes=").append(consumesCondition.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +	private final RequestCondition consumesCondition;, +, +		this(patterns, methods, null, null, null);, +							 RequestCondition headersCondition,, +							 RequestCondition consumesCondition) {, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +	 * <li>Consumes .. TODO, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestMappingInfo(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +		builder.append(",consumes=").append(consumesCondition.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyComparatorTests.java, +				new RequestMappingInfo(null, asList(RequestMethod.GET), RequestConditionFactory.parseParams("foo"), null, null);, +		RequestMappingInfo html = new RequestMappingInfo(null, null, null, RequestConditionFactory.parseHeaders("accept=text/html"), null);, +		RequestMappingInfo xml = new RequestMappingInfo(null, null, null, RequestConditionFactory.parseHeaders("accept=application/xml"), null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +	private final RequestCondition consumesCondition;, +, +		this(patterns, methods, null, null, null);, +							 RequestCondition headersCondition,, +							 RequestCondition consumesCondition) {, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +	 * <li>Consumes .. TODO, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestMappingInfo(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +		builder.append(",consumes=").append(consumesCondition.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyComparatorTests.java, +				new RequestMappingInfo(null, asList(RequestMethod.GET), RequestConditionFactory.parseParams("foo"), null, null);, +		RequestMappingInfo html = new RequestMappingInfo(null, null, null, RequestConditionFactory.parseHeaders("accept=text/html"), null);, +		RequestMappingInfo xml = new RequestMappingInfo(null, null, null, RequestConditionFactory.parseHeaders("accept=application/xml"), null);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyTests.java, +		RequestMappingInfo key = new RequestMappingInfo(asList("/foo"), null, RequestConditionFactory.parseParams("foo=bar"), null, null);, +		key = new RequestMappingInfo(singleton("/foo"), null, RequestConditionFactory.parseParams("foo!=bar"), null, null);, +		RequestMappingInfo key = new RequestMappingInfo(singleton("/foo"), null, null, RequestConditionFactory.parseHeaders("foo=bar"), null);, +		key = new RequestMappingInfo(singleton("/foo"), null, null, RequestConditionFactory.parseHeaders("foo!=bar"), null);, +	@Test, +	public void consumesCondition() {, +		PathMatcher pathMatcher = new AntPathMatcher();, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.setContentType("text/plain");, +		String lookupPath = new UrlPathHelper().getLookupPathForRequest(request);, +, +		RequestMappingInfo key = new RequestMappingInfo(singleton("/foo"), null, null, null, RequestConditionFactory.parseConsumes(, +				"text/plain"));, +		RequestMappingInfo match = key.getMatchingRequestMapping(lookupPath, request, pathMatcher);, +, +		assertNotNull(match);, +, +		key = new RequestMappingInfo(singleton("/foo"), null, null, null, RequestConditionFactory.parseConsumes(, +				"application/xml"));, +		match = key.getMatchingRequestMapping(lookupPath, request, pathMatcher);, +, +		assertNull(match);, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +	private final RequestCondition consumesCondition;, +, +		this(patterns, methods, null, null, null);, +							 RequestCondition headersCondition,, +							 RequestCondition consumesCondition) {, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +	 * <li>Consumes .. TODO]