[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, + * Copyright 2002-2011 the original author or authors., +			Lifecycle bean = entry.getValue();, +			if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {, +				int phase = getPhase(bean);, +					group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);, +				group.add(entry.getKey(), bean);, +	private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {, +				doStart(lifecycleBeans, dependency, autoStartupOnly);, +			if (!bean.isRunning() &&, +					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {, +			Lifecycle bean = entry.getValue();, +			int shutdownOrder = getPhase(bean);, +				group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false);, +			group.add(entry.getKey(), bean);, +		private final boolean autoStartupOnly;, +, +		public LifecycleGroup(int phase, long timeout, Map<String, ? extends Lifecycle> lifecycleBeans, boolean autoStartupOnly) {, +			this.autoStartupOnly = autoStartupOnly;, +					doStart(this.lifecycleBeans, member.name, this.autoStartupOnly);, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, + * Copyright 2002-2011 the original author or authors., +			Lifecycle bean = entry.getValue();, +			if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {, +				int phase = getPhase(bean);, +					group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);, +				group.add(entry.getKey(), bean);, +	private void doStart(Map<String, ? extends Lifecycle> lifecycleBeans, String beanName, boolean autoStartupOnly) {, +				doStart(lifecycleBeans, dependency, autoStartupOnly);, +			if (!bean.isRunning() &&, +					(!autoStartupOnly || !(bean instanceof SmartLifecycle) || ((SmartLifecycle) bean).isAutoStartup())) {, +			Lifecycle bean = entry.getValue();, +			int shutdownOrder = getPhase(bean);, +				group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false);, +			group.add(entry.getKey(), bean);, +		private final boolean autoStartupOnly;, +, +		public LifecycleGroup(int phase, long timeout, Map<String, ? extends Lifecycle> lifecycleBeans, boolean autoStartupOnly) {, +			this.autoStartupOnly = autoStartupOnly;, +					doStart(this.lifecycleBeans, member.name, this.autoStartupOnly);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/DefaultLifecycleProcessorTests.java, + * Copyright 2002-2011 the original author or authors., +import static org.junit.Assert.*;, +, +		assertEquals(1000L, new DirectFieldAccessor(contextLifecycleProcessor).getPropertyValue(, +				"timeoutPerShutdownPhase"));, +	public void singleSmartLifecycleAutoStartupWithNonAutoStartupDependency() throws Exception {, +		CopyOnWriteArrayList<Lifecycle> startedBeans = new CopyOnWriteArrayList<Lifecycle>();, +		TestSmartLifecycleBean bean = TestSmartLifecycleBean.forStartupTests(1, startedBeans);, +		bean.setAutoStartup(true);, +		TestSmartLifecycleBean dependency = TestSmartLifecycleBean.forStartupTests(1, startedBeans);, +		dependency.setAutoStartup(false);, +		StaticApplicationContext context = new StaticApplicationContext();, +		context.getBeanFactory().registerSingleton("bean", bean);, +		context.getBeanFactory().registerSingleton("dependency", dependency);, +		context.getBeanFactory().registerDependentBean("dependency", "bean");, +		assertFalse(bean.isRunning());, +		assertFalse(dependency.isRunning());, +		context.refresh();, +		assertTrue(bean.isRunning());, +		assertFalse(dependency.isRunning());, +		context.stop();, +		assertFalse(bean.isRunning());, +		assertFalse(dependency.isRunning());, +		assertEquals(1, startedBeans.size());, +	}, +, +	@Test]