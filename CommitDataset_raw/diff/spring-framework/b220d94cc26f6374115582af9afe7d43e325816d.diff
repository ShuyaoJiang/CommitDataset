[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					key -> new DeferredImportSelectorGrouping(createGroup(group)));, +			grouping.getImports().forEach(entry -> {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					key -> new DeferredImportSelectorGrouping(createGroup(group)));, +			grouping.getImports().forEach(entry -> {, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, +		return activeProfile -> Arrays.stream(profiles).anyMatch(, +		return activeProfile -> Arrays.stream(profiles).allMatch(, +		return activeProfile -> !profiles.matches(activeProfile);, +		return activeProfile -> activeProfile.test(profile);, +		return profiles -> profiles.matches(activeProfile);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					key -> new DeferredImportSelectorGrouping(createGroup(group)));, +			grouping.getImports().forEach(entry -> {, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, +		return activeProfile -> Arrays.stream(profiles).anyMatch(, +		return activeProfile -> Arrays.stream(profiles).allMatch(, +		return activeProfile -> !profiles.matches(activeProfile);, +		return activeProfile -> activeProfile.test(profile);, +		return profiles -> profiles.matches(activeProfile);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +							.map(resolvedPath ->  mapping.value() + resolvedPath);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					key -> new DeferredImportSelectorGrouping(createGroup(group)));, +			grouping.getImports().forEach(entry -> {, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, +		return activeProfile -> Arrays.stream(profiles).anyMatch(, +		return activeProfile -> Arrays.stream(profiles).allMatch(, +		return activeProfile -> !profiles.matches(activeProfile);, +		return activeProfile -> activeProfile.test(profile);, +		return profiles -> profiles.matches(activeProfile);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +							.map(resolvedPath ->  mapping.value() + resolvedPath);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, +										.map(version -> strategy.addVersion(baseUrl, version)));]