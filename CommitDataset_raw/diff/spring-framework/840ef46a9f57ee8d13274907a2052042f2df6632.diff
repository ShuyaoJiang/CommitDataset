[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +	/**, +	 * @return true to continue error handling, or false to bypass any further, +	 * error handling, +	 */, +	public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex), +				return false;, +				return false;, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +	/**, +	 * @return true to continue error handling, or false to bypass any further, +	 * error handling, +	 */, +	public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex), +				return false;, +				return false;, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultProcessingInterceptor.java, +	 * @return {@code true} if error handling should continue, or {@code false} if, +	 * other interceptors should by bypassed and not be invoked, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +	/**, +	 * @return true to continue error handling, or false to bypass any further, +	 * error handling, +	 */, +	public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex), +				return false;, +				return false;, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultProcessingInterceptor.java, +	 * @return {@code true} if error handling should continue, or {@code false} if, +	 * other interceptors should by bypassed and not be invoked, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +	/**, +	 * @return true to continue error handling, or false to bypass any further, +	 * error handling, +	 */, +	public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex), +				return false;, +				return false;, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultProcessingInterceptor.java, +	 * @return {@code true} if error handling should continue, or {@code false} if, +	 * other interceptors should by bypassed and not be invoked, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +	/**, +	 * @return true to continue error handling, or false to bypass any further, +	 * error handling, +	 */, +	public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex), +				return false;, +				return false;, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultProcessingInterceptor.java, +	 * @return {@code true} if error handling should continue, or {@code false} if, +	 * other interceptors should by bypassed and not be invoked, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		this.asyncWebRequest.addErrorHandler(ex -> {, +			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex);, +			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex);, +		this.asyncWebRequest.addErrorHandler(ex -> {, +				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {, +					return;, +				deferredResult.setErrorResult(ex);, +			}, +			catch (Throwable interceptorEx) {, +				setConcurrentResultAndDispatch(interceptorEx);]