[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +		@Nullable, +			return resolveBeanReference(beanMethod, beanMethodArgs, beanFactory, beanName);, +		@Nullable, +		private Object resolveBeanReference(Method beanMethod, Object[] beanMethodArgs,, +					if (beanInstance.equals(null)) {, +						if (logger.isDebugEnabled()) {, +							logger.debug(String.format("@Bean method %s.%s called as bean reference " +, +									"for type [%s] returned null bean; resolving to null value.",, +									beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(),, +									beanMethod.getReturnType().getName()));, +						}, +						beanInstance = null;, +					}, +					else {, +						String msg = String.format("@Bean method %s.%s called as bean reference " +, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +		@Nullable, +			return resolveBeanReference(beanMethod, beanMethodArgs, beanFactory, beanName);, +		@Nullable, +		private Object resolveBeanReference(Method beanMethod, Object[] beanMethodArgs,, +					if (beanInstance.equals(null)) {, +						if (logger.isDebugEnabled()) {, +							logger.debug(String.format("@Bean method %s.%s called as bean reference " +, +									"for type [%s] returned null bean; resolving to null value.",, +									beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(),, +									beanMethod.getReturnType().getName()));, +						}, +						beanInstance = null;, +					}, +					else {, +						String msg = String.format("@Bean method %s.%s called as bean reference " +, +				}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, +	public void configurationWithNullReference() {, +		BeanFactory factory = initBeanFactory(ConfigWithNullReference.class);, +, +		TestBean foo = factory.getBean("foo", TestBean.class);, +		assertTrue(factory.getBean("bar").equals(null));, +		assertNull(foo.getSpouse());, +	}, +, +	@Test, +	@Configuration, +	static class ConfigWithNullReference extends ConfigWithPrototypeBean {, +, +		@Override, +		public TestBean bar() {, +			return null;, +		}, +	}, +, +]