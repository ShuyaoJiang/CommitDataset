[+++ b/src/docs/asciidoc/integration.adoc, +==== HTTP Message Converters, +[.small]#<<web-reactive.adoc#webflux-codecs,Same in Spring WebFlux>>#, +The `spring-web` module contains the `HttpMessageConverter` contract for reading and, +writing the body of HTTP requests and responses via `InputStream` and `OutputStream`., +``HttpMessageConverter``'s are used on the client side, e.g. in the `RestTemplate`, and, +also on the server side, e.g. in Spring MVC REST controllers., +`RequestMethodHandlerAdapter` on the server-side (see, +<<web.adoc#mvc-config-message-converters,Configuring Message Converters>>)., +++ b/src/docs/asciidoc/integration.adoc, +==== HTTP Message Converters, +[.small]#<<web-reactive.adoc#webflux-codecs,Same in Spring WebFlux>>#, +The `spring-web` module contains the `HttpMessageConverter` contract for reading and, +writing the body of HTTP requests and responses via `InputStream` and `OutputStream`., +``HttpMessageConverter``'s are used on the client side, e.g. in the `RestTemplate`, and, +also on the server side, e.g. in Spring MVC REST controllers., +`RequestMethodHandlerAdapter` on the server-side (see, +<<web.adoc#mvc-config-message-converters,Configuring Message Converters>>)., +++ b/src/docs/asciidoc/web/webflux.adoc, +The `spring-web` module contains the reactive foundation that underlies Spring WebFlux, +including HTTP abstractions, Reactive Streams <<webflux-httphandler,adapters>> for supported, +servers, <<webflux-codecs,codecs>>, and a core <<webflux-web-handler-api>> comparable to, +the Servlet API but with non-blocking contracts., +=== HTTP Message Codecs, +[.small]#<<integration.adoc#rest-message-conversion,Same in Spring MVC>>#, +The `spring-web` module defines the, +{api-spring-framework}/http/codec/HttpMessageWriter.html[HttpMessageWriter] contracts, +for encoding and decoding the body of HTTP requests and responses via Rective Streams, +``Publisher``'s. These contacts are used on the client side, e.g. in the `WebClient`,, +and on the server side, e.g. in annotated controllers and functional endpoints., +The `spring-core` module defines the, +{api-spring-framework}/core/codec/Encoder.html[Encoder] and, +{api-spring-framework}/core/codec/Decoder.html[Decoder] contracts that are independent of, +HTTP and rely on the {api-spring-framework}/core/io/buffer/DataBuffer.html[DataBuffer], +contract that abstracts different byte buffer representations such as the Netty `ByteBuf`, +and `java.nio.ByteBuffer` (see <<core#databuffers, Data Buffers and Codecs>>)., +An `Encoder` can be wrapped with `EncoderHttpMessageWriter` to be used as an, +`HttpMessageWriter` while a `Decoder` can be wrapped with `DecoderHttpMessageReader` to, +be used as an `HttpMessageReader`., +The `spring-core` module contains basic `Encoder` and `Decoder` implementations for, +`byte[]`, `ByteBuffer`, `DataBuffer`, `Resource`, and `String`. The `spring-web` module, +adds ``Encoder``'s and ``Decoder``'s for Jackson JSON, Jackson Smile, and JAXB2., +The `spring-web` module also contains some web-specific readers and writers for, +server-sent events, form data, and multipart requests., +To configure or customize the readers and writers to use applications will typically use, +`ClientCodecConfigurer` or `ServerCodecConfigurer`., +++ b/src/docs/asciidoc/integration.adoc, +==== HTTP Message Converters, +[.small]#<<web-reactive.adoc#webflux-codecs,Same in Spring WebFlux>>#, +The `spring-web` module contains the `HttpMessageConverter` contract for reading and, +writing the body of HTTP requests and responses via `InputStream` and `OutputStream`., +``HttpMessageConverter``'s are used on the client side, e.g. in the `RestTemplate`, and, +also on the server side, e.g. in Spring MVC REST controllers., +`RequestMethodHandlerAdapter` on the server-side (see, +<<web.adoc#mvc-config-message-converters,Configuring Message Converters>>)., +++ b/src/docs/asciidoc/web/webflux.adoc, +The `spring-web` module contains the reactive foundation that underlies Spring WebFlux, +including HTTP abstractions, Reactive Streams <<webflux-httphandler,adapters>> for supported, +servers, <<webflux-codecs,codecs>>, and a core <<webflux-web-handler-api>> comparable to, +the Servlet API but with non-blocking contracts., +=== HTTP Message Codecs, +[.small]#<<integration.adoc#rest-message-conversion,Same in Spring MVC>>#, +The `spring-web` module defines the, +{api-spring-framework}/http/codec/HttpMessageWriter.html[HttpMessageWriter] contracts, +for encoding and decoding the body of HTTP requests and responses via Rective Streams, +``Publisher``'s. These contacts are used on the client side, e.g. in the `WebClient`,, +and on the server side, e.g. in annotated controllers and functional endpoints., +The `spring-core` module defines the, +{api-spring-framework}/core/codec/Encoder.html[Encoder] and, +{api-spring-framework}/core/codec/Decoder.html[Decoder] contracts that are independent of, +HTTP and rely on the {api-spring-framework}/core/io/buffer/DataBuffer.html[DataBuffer], +contract that abstracts different byte buffer representations such as the Netty `ByteBuf`, +and `java.nio.ByteBuffer` (see <<core#databuffers, Data Buffers and Codecs>>)., +An `Encoder` can be wrapped with `EncoderHttpMessageWriter` to be used as an, +`HttpMessageWriter` while a `Decoder` can be wrapped with `DecoderHttpMessageReader` to, +be used as an `HttpMessageReader`., +The `spring-core` module contains basic `Encoder` and `Decoder` implementations for, +`byte[]`, `ByteBuffer`, `DataBuffer`, `Resource`, and `String`. The `spring-web` module, +adds ``Encoder``'s and ``Decoder``'s for Jackson JSON, Jackson Smile, and JAXB2., +The `spring-web` module also contains some web-specific readers and writers for, +server-sent events, form data, and multipart requests., +To configure or customize the readers and writers to use applications will typically use, +`ClientCodecConfigurer` or `ServerCodecConfigurer`., +++ b/src/docs/asciidoc/web/webmvc.adoc, +non-multipart request to a target object with the help of an, +<<integration.adoc#rest-message-conversion,HttpMessageConverter>>., +You convert the request body to the method argument by using an, +<<integration.adoc#rest-message-conversion,HttpMessageConverter>>., +an <<integration.adoc#rest-message-conversion,HttpMessageConverter>>., +As with `@ResponseBody`, Spring uses, +<<integration.adoc#rest-message-conversion,HttpMessageConverter>> to, +response with an <<integration.adoc#rest-message-conversion,HttpMessageConverter>>., +response through an <<integration.adoc#rest-message-conversion,HttpMessageConverter>>., +This is probably the most common case, for example when writing JSON data., +However sometimes it is useful to bypass message conversion and write directly to the, +response `OutputStream` for example for a file download. This can be done with the help, +of the `StreamingResponseBody` return value type.]