[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.beans.factory.InitializingBean;, +public abstract class AbstractSockJsService, +		implements SockJsService, SockJsConfiguration, InitializingBean, DisposableBean {, +	private final TaskSchedulerHolder heartbeatSchedulerHolder;, +, +		this.heartbeatSchedulerHolder = new TaskSchedulerHolder("SockJs-heartbeat-");, +	public AbstractSockJsService(String prefix, TaskScheduler heartbeatScheduler) {, +		Assert.hasText(prefix, "prefix is required");, +		Assert.notNull(heartbeatScheduler, "heartbeatScheduler is required");, +		this.prefix = prefix;, +		this.heartbeatSchedulerHolder = new TaskSchedulerHolder(heartbeatScheduler);, +		return this.heartbeatSchedulerHolder.getScheduler();, +	@Override, +	public void afterPropertiesSet() throws Exception {, +		this.heartbeatSchedulerHolder.initialize();, +	}, +, +	@Override, +	public void destroy() throws Exception {, +		this.heartbeatSchedulerHolder.destroy();, +	}, +, +	/**, +	 * Holds an externally provided or an internally managed TaskScheduler. Provides, +	 * initialize and destroy methods have no effect if the scheduler is externally, +	 * managed., +	 */, +	protected static class TaskSchedulerHolder {, +, +		private final TaskScheduler taskScheduler;, +, +		private final boolean isDefaultTaskScheduler;, +, +		public TaskSchedulerHolder(TaskScheduler taskScheduler) {, +			Assert.notNull(taskScheduler, "taskScheduler is required");, +			this.taskScheduler = taskScheduler;, +			this.isDefaultTaskScheduler = false;, +		}, +, +		public TaskSchedulerHolder(String threadNamePrefix) {, +			ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();, +			scheduler.setThreadNamePrefix(threadNamePrefix);, +			this.taskScheduler = scheduler;, +			this.isDefaultTaskScheduler = true;, +		}, +, +		public TaskScheduler getScheduler() {, +			return this.taskScheduler;, +		}, +, +		public void initialize() {, +			if (this.isDefaultTaskScheduler) {, +				((ThreadPoolTaskScheduler) this.taskScheduler).afterPropertiesSet();, +			}, +		}, +, +		public void destroy() {, +			if (this.isDefaultTaskScheduler) {, +				((ThreadPoolTaskScheduler) this.taskScheduler).shutdown();, +			}, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.beans.factory.InitializingBean;, +public abstract class AbstractSockJsService, +		implements SockJsService, SockJsConfiguration, InitializingBean, DisposableBean {, +	private final TaskSchedulerHolder heartbeatSchedulerHolder;, +, +		this.heartbeatSchedulerHolder = new TaskSchedulerHolder("SockJs-heartbeat-");, +	public AbstractSockJsService(String prefix, TaskScheduler heartbeatScheduler) {, +		Assert.hasText(prefix, "prefix is required");, +		Assert.notNull(heartbeatScheduler, "heartbeatScheduler is required");, +		this.prefix = prefix;, +		this.heartbeatSchedulerHolder = new TaskSchedulerHolder(heartbeatScheduler);, +		return this.heartbeatSchedulerHolder.getScheduler();, +	@Override, +	public void afterPropertiesSet() throws Exception {, +		this.heartbeatSchedulerHolder.initialize();, +	}, +, +	@Override, +	public void destroy() throws Exception {, +		this.heartbeatSchedulerHolder.destroy();, +	}, +, +	/**, +	 * Holds an externally provided or an internally managed TaskScheduler. Provides, +	 * initialize and destroy methods have no effect if the scheduler is externally, +	 * managed., +	 */, +	protected static class TaskSchedulerHolder {, +, +		private final TaskScheduler taskScheduler;, +, +		private final boolean isDefaultTaskScheduler;, +]