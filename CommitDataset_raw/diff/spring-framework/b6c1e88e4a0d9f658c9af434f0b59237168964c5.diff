[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriBuilder.java, +import java.util.EnumSet;, +		String port = portAsString();, +		String path = null;, +			StringBuilder pathBuilder = new StringBuilder();, +				boolean endsWithSlash = pathBuilder.length() > 0 && pathBuilder.charAt(pathBuilder.length() - 1) == '/';, +					pathBuilder.append('/');, +				pathBuilder.append(pathSegment);, +			path = pathBuilder.toString();, +		String query = queryAsString();, +		String uri = UriUtils.buildUri(scheme, null, userInfo, host, port, path, query, fragment);, +		return buildFromMap(uriVariables, true);, +		return buildFromMap(uriVariables, false);, +	private URI buildFromMap(Map<String, ?> uriVariables, boolean encodeUriVariableValues) {, +		String scheme = expand(this.scheme, UriComponent.SCHEME, uriVariables, encodeUriVariableValues);, +		String userInfo = expand(this.userInfo, UriComponent.USER_INFO, uriVariables, encodeUriVariableValues);, +		String host = expand(this.host, UriComponent.HOST, uriVariables, encodeUriVariableValues);, +		String port = expand(this.portAsString(), UriComponent.PORT, uriVariables, encodeUriVariableValues);, +		String path = null;, +		if (!this.pathSegments.isEmpty()) {, +			StringBuilder pathBuilder = new StringBuilder();, +			for (String pathSegment : this.pathSegments) {, +				boolean endsWithSlash = pathBuilder.length() > 0 && pathBuilder.charAt(pathBuilder.length() - 1) == '/';, +					pathBuilder.append('/');, +				pathSegment = expand(pathSegment, UriComponent.PATH_SEGMENT, uriVariables, encodeUriVariableValues);, +				pathBuilder.append(pathSegment);, +			path = pathBuilder.toString();, +		String query = expand(this.queryAsString(), UriComponent.QUERY, uriVariables, encodeUriVariableValues);, +		String fragment = expand(this.fragment, UriComponent.FRAGMENT, uriVariables, encodeUriVariableValues);, +, +		String uri = UriUtils.buildUri(scheme, null, userInfo, host, port, path, query, fragment);, +		return URI.create(uri);, +	private String expand(String source,, +						  UriComponent uriComponent,, +						  Map<String, ?> uriVariables,, +						  boolean encodeUriVariableValues) {, +		if (source == null) {, +			return null;, +		if (source.indexOf('{') == -1) {, +			return source;, +		}, +		UriTemplate template = new UriComponentTemplate(source, uriComponent, encodeUriVariableValues);, +		return template.expandAsString(uriVariables);, +			this.scheme = encodeUriComponent(scheme, UriComponent.SCHEME);, +			this.userInfo = encodeUriComponent(userInfo, UriComponent.USER_INFO);, +			this.host = encodeUriComponent(host, UriComponent.HOST);, +	private String portAsString() {, +		return this.port != -1 ? Integer.toString(this.port) : null;, +	}, +, +			this.pathSegments.add(encodeUriComponent(segment, UriComponent.PATH_SEGMENT));, +		String encodedName = encodeUriComponent(name, UriComponent.QUERY_PARAM);, +					queryBuilder.append(encodeUriComponent(valueAsString, UriComponent.QUERY_PARAM));, +	private String queryAsString() {, +		return queryBuilder.length() != 0 ? queryBuilder.toString() : null;, +	}, +, +			this.fragment = encodeUriComponent(fragment, UriComponent.FRAGMENT);, +	private String encodeUriComponent(String source, UriComponent uriComponent) {, +		return UriUtils.encodeUriComponent(source, uriComponent, EnumSet.of(UriUtils.EncodingOption.ALLOW_TEMPLATE_VARS));, +	}, +, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriBuilder.java, +import java.util.EnumSet;, +		String port = portAsString();, +		String path = null;, +			StringBuilder pathBuilder = new StringBuilder();, +				boolean endsWithSlash = pathBuilder.length() > 0 && pathBuilder.charAt(pathBuilder.length() - 1) == '/';, +					pathBuilder.append('/');, +				pathBuilder.append(pathSegment);, +			path = pathBuilder.toString();, +		String query = queryAsString();, +		String uri = UriUtils.buildUri(scheme, null, userInfo, host, port, path, query, fragment);, +		return buildFromMap(uriVariables, true);, +		return buildFromMap(uriVariables, false);, +	private URI buildFromMap(Map<String, ?> uriVariables, boolean encodeUriVariableValues) {, +		String scheme = expand(this.scheme, UriComponent.SCHEME, uriVariables, encodeUriVariableValues);, +		String userInfo = expand(this.userInfo, UriComponent.USER_INFO, uriVariables, encodeUriVariableValues);, +		String host = expand(this.host, UriComponent.HOST, uriVariables, encodeUriVariableValues);, +		String port = expand(this.portAsString(), UriComponent.PORT, uriVariables, encodeUriVariableValues);, +		String path = null;, +		if (!this.pathSegments.isEmpty()) {, +			StringBuilder pathBuilder = new StringBuilder();, +			for (String pathSegment : this.pathSegments) {, +				boolean endsWithSlash = pathBuilder.length() > 0 && pathBuilder.charAt(pathBuilder.length() - 1) == '/';, +					pathBuilder.append('/');, +				pathSegment = expand(pathSegment, UriComponent.PATH_SEGMENT, uriVariables, encodeUriVariableValues);, +				pathBuilder.append(pathSegment);, +			path = pathBuilder.toString();, +		String query = expand(this.queryAsString(), UriComponent.QUERY, uriVariables, encodeUriVariableValues);, +		String fragment = expand(this.fragment, UriComponent.FRAGMENT, uriVariables, encodeUriVariableValues);, +, +		String uri = UriUtils.buildUri(scheme, null, userInfo, host, port, path, query, fragment);, +		return URI.create(uri);, +	private String expand(String source,, +						  UriComponent uriComponent,, +						  Map<String, ?> uriVariables,, +						  boolean encodeUriVariableValues) {, +		if (source == null) {]