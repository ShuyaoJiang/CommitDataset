[+++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, + *, +	 * Return message headers for the message, never {@code null}., +	 * Return the message payload., +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, + *, +	 * Return message headers for the message, never {@code null}., +	 * Return the message payload., +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, + * Defines methods for sending messages., +	 * Send a {@link Message} to this channel. If the message is sent successfully,, +	 * the method returns {@code true}. If the message cannot be sent due to a, +	 * non-fatal reason, the method returns {@code false}. The method may also, +	 * throw a RuntimeException in case of non-recoverable errors., +	 * <p>, +	 * This method may block indefinitely, depending on the implementation., +	 * To provide a maximum wait time, use {@link #send(Message, long)}., +	 *, +	 * @param message the message to send, +	 * @return whether or not the message was sent, +	 * Send a message, blocking until either the message is accepted or the, +	 * specified timeout period elapses., +	 *, +	 * @param message the message to send, +	 * @param timeout the timeout in milliseconds or {@link #INDEFINITE_TIMEOUT}, +	 * @return {@code true} if the message is sent, {@code false} if not including, +	 * 		a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, + *, +	 * Return message headers for the message, never {@code null}., +	 * Return the message payload., +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, + * Defines methods for sending messages., +	 * Send a {@link Message} to this channel. If the message is sent successfully,, +	 * the method returns {@code true}. If the message cannot be sent due to a, +	 * non-fatal reason, the method returns {@code false}. The method may also, +	 * throw a RuntimeException in case of non-recoverable errors., +	 * <p>, +	 * This method may block indefinitely, depending on the implementation., +	 * To provide a maximum wait time, use {@link #send(Message, long)}., +	 *, +	 * @param message the message to send, +	 * @return whether or not the message was sent, +	 * Send a message, blocking until either the message is accepted or the, +	 * specified timeout period elapses., +	 *, +	 * @param message the message to send, +	 * @param timeout the timeout in milliseconds or {@link #INDEFINITE_TIMEOUT}, +	 * @return {@code true} if the message is sent, {@code false} if not including, +	 * 		a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, + *, +	 * Return message headers for the message, never {@code null}., +	 * Return the message payload., +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, + * Defines methods for sending messages., +	 * Send a {@link Message} to this channel. If the message is sent successfully,, +	 * the method returns {@code true}. If the message cannot be sent due to a, +	 * non-fatal reason, the method returns {@code false}. The method may also, +	 * throw a RuntimeException in case of non-recoverable errors., +	 * <p>, +	 * This method may block indefinitely, depending on the implementation., +	 * To provide a maximum wait time, use {@link #send(Message, long)}., +	 *, +	 * @param message the message to send, +	 * @return whether or not the message was sent, +	 * Send a message, blocking until either the message is accepted or the, +	 * specified timeout period elapses., +	 *, +	 * @param message the message to send, +	 * @param timeout the timeout in milliseconds or {@link #INDEFINITE_TIMEOUT}, +	 * @return {@code true} if the message is sent, {@code false} if not including, +	 * 		a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, + * Contract for handling a {@link Message}., +	 * Handle the given message., +	 *, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, + *, +	 * Return message headers for the message, never {@code null}., +	 * Return the message payload., +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, + * Defines methods for sending messages., +	 * Send a {@link Message} to this channel. If the message is sent successfully,, +	 * the method returns {@code true}. If the message cannot be sent due to a, +	 * non-fatal reason, the method returns {@code false}. The method may also, +	 * throw a RuntimeException in case of non-recoverable errors., +	 * <p>, +	 * This method may block indefinitely, depending on the implementation., +	 * To provide a maximum wait time, use {@link #send(Message, long)}., +	 *, +	 * @param message the message to send, +	 * @return whether or not the message was sent, +	 * Send a message, blocking until either the message is accepted or the, +	 * specified timeout period elapses., +	 *]