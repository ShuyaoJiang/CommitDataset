[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, + * supports methods annotated with {@link SubscribeEvent} unless they're also annotated, + * with {@link ReplyTo} or {@link ReplyToUser}., + * <p>, + * The value returned from the method is converted, and turned to a {@link Message} and, +				"No subsriptiondId in input message to method " + returnType.getMethod());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, + * supports methods annotated with {@link SubscribeEvent} unless they're also annotated, + * with {@link ReplyTo} or {@link ReplyToUser}., + * <p>, + * The value returned from the method is converted, and turned to a {@link Message} and, +				"No subsriptiondId in input message to method " + returnType.getMethod());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, + * An abstract base class class for configuring STOMP over WebSocket/SockJS endpoints., +	private final TaskScheduler sockJsTaskScheduler;, +			TaskScheduler sockJsTaskScheduler) {, +		this.sockJsTaskScheduler = sockJsTaskScheduler;, +	/**, +	 * Provide a custom or pre-configured {@link HandshakeHandler}. This property is, +	 * optional., +	 */, +	/**, +	 * Enable SockJS fallback options., +	 */, +		this.sockJsServiceRegistration = new StompSockJsServiceRegistration(this.sockJsTaskScheduler);, +	protected final M getMappings() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, + * supports methods annotated with {@link SubscribeEvent} unless they're also annotated, + * with {@link ReplyTo} or {@link ReplyToUser}., + * <p>, + * The value returned from the method is converted, and turned to a {@link Message} and, +				"No subsriptiondId in input message to method " + returnType.getMethod());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, + * An abstract base class class for configuring STOMP over WebSocket/SockJS endpoints., +	private final TaskScheduler sockJsTaskScheduler;, +			TaskScheduler sockJsTaskScheduler) {, +		this.sockJsTaskScheduler = sockJsTaskScheduler;, +	/**, +	 * Provide a custom or pre-configured {@link HandshakeHandler}. This property is, +	 * optional., +	 */, +	/**, +	 * Enable SockJS fallback options., +	 */, +		this.sockJsServiceRegistration = new StompSockJsServiceRegistration(this.sockJsTaskScheduler);, +	protected final M getMappings() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerConfigurer.java, +	private final MessageChannel webSocketResponseChannel;, +	public MessageBrokerConfigurer(MessageChannel webSocketResponseChannel) {, +		Assert.notNull(webSocketResponseChannel);, +		this.webSocketResponseChannel = webSocketResponseChannel;, +		this.simpleBroker = new SimpleBrokerRegistration(this.webSocketResponseChannel, destinationPrefixes);, +		this.stompRelay = new StompBrokerRelayRegistration(this.webSocketResponseChannel, destinationPrefixes);, +			this.simpleBroker = new SimpleBrokerRegistration(this.webSocketResponseChannel, null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, + * supports methods annotated with {@link SubscribeEvent} unless they're also annotated, + * with {@link ReplyTo} or {@link ReplyToUser}., + * <p>, + * The value returned from the method is converted, and turned to a {@link Message} and, +				"No subsriptiondId in input message to method " + returnType.getMethod());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, + * An abstract base class class for configuring STOMP over WebSocket/SockJS endpoints., +	private final TaskScheduler sockJsTaskScheduler;, +			TaskScheduler sockJsTaskScheduler) {, +		this.sockJsTaskScheduler = sockJsTaskScheduler;, +	/**, +	 * Provide a custom or pre-configured {@link HandshakeHandler}. This property is, +	 * optional., +	 */, +	/**, +	 * Enable SockJS fallback options., +	 */, +		this.sockJsServiceRegistration = new StompSockJsServiceRegistration(this.sockJsTaskScheduler);, +	protected final M getMappings() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerConfigurer.java, +	private final MessageChannel webSocketResponseChannel;, +	public MessageBrokerConfigurer(MessageChannel webSocketResponseChannel) {, +		Assert.notNull(webSocketResponseChannel);, +		this.webSocketResponseChannel = webSocketResponseChannel;, +		this.simpleBroker = new SimpleBrokerRegistration(this.webSocketResponseChannel, destinationPrefixes);, +		this.stompRelay = new StompBrokerRelayRegistration(this.webSocketResponseChannel, destinationPrefixes);, +			this.simpleBroker = new SimpleBrokerRegistration(this.webSocketResponseChannel, null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/StompBrokerRelayRegistration.java, +	private boolean autoStartup = true;, +, +	 * Configure whether the {@link StompBrokerRelayMessageHandler} should start, +	 * automatically when the Spring ApplicationContext is refreshed., +	 * <p>, +	 * The default setting is {@code true}., +	public StompBrokerRelayRegistration setAutoStartup(boolean autoStartup) {, +		this.autoStartup = autoStartup;, +		return this;, +		handler.setAutoStartup(this.autoStartup);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, + * supports methods annotated with {@link SubscribeEvent} unless they're also annotated, + * with {@link ReplyTo} or {@link ReplyToUser}., + * <p>, + * The value returned from the method is converted, and turned to a {@link Message} and, +				"No subsriptiondId in input message to method " + returnType.getMethod());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java]