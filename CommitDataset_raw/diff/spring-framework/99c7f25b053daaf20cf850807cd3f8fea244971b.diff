[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java, + * Copyright 2002-2013 the original author or authors., + * Oracle 9i (or more specifically, the Oracle 9i JDBC driver) just accepts, + * Blob/Clob instances created via its own proprietary BLOB/CLOB API,, + * and additionally doesn't accept large streams for PreparedStatement's, + * corresponding setter methods. Therefore, you need to use a strategy like, + * this LobHandler implementation, or upgrade to the Oracle 10g/11g driver, + * (which still supports access to Oracle 9i databases)., + *, + * <p><b>NOTE: As of Oracle 10.2, {@link DefaultLobHandler} should work equally, + * well out of the box. On Oracle 11g, JDBC 4.0 based options such as, + * {@link DefaultLobHandler#setStreamAsLob} and {@link DefaultLobHandler#setCreateTemporaryLob}, + * are available as well, rendering this proprietary OracleLobHandler obsolete.</b>, + * Also, consider upgrading to a new driver even when accessing an older database., + * See the {@link LobHandler} interface javadoc for a summary of recommendations., + * connection pool (the usual case in a Java EE environment), you need to set an, + * @see DefaultLobHandler, + * @deprecated in favor of {@link DefaultLobHandler} for the Oracle 10g driver and, + * higher. Consider using the 10g/11g driver even against an Oracle 9i database!, + * {@link DefaultLobHandler#setCreateTemporaryLob} is the direct equivalent of this, + * OracleLobHandler's implementation strategy, just using standard JDBC 4.0 API., + * That said, in most cases, regular DefaultLobHandler setup will work fine as well., +@Deprecated, +	 * Set whether to aggressively release any resources used by the LOB. If set to {@code true}, +					open.invoke(lob, this.modeReadOnlyConstants.get(lob.getClass()));, +		private final List<Object> temporaryLobs = new LinkedList<Object>();, +				this.temporaryLobs.add(lob);, +				for (Iterator it = this.temporaryLobs.iterator(); it.hasNext();) {]