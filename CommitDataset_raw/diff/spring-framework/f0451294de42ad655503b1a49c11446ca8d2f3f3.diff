[+++ b/src/asciidoc/testing.adoc, +===== @ContextConfiguration, +`@ContextConfiguration` defines class-level metadata that is used to determine how to, +load and configure an `ApplicationContext` for integration tests. Specifically,, +`@ContextConfiguration` declares the application context resource `locations` or the, +annotated `classes` that will be used to load the context., +===== @WebAppConfiguration, +`@WebAppConfiguration` is a class-level annotation that is used to declare that the, +`ApplicationContext` loaded for an integration test should be a `WebApplicationContext`., +The mere presence of `@WebAppConfiguration` on a test class ensures that a, +`WebApplicationContext` will be loaded for the test, using the default value of, +`"file:src/main/webapp"` for the path to the root of the web application (i.e., the, +__resource base path__). The resource base path is used behind the scenes to create a, +`MockServletContext` which serves as the `ServletContext` for the test's, +`WebApplicationContext`., +===== @ContextHierarchy, +`@ContextHierarchy` is a class-level annotation that is used to define a hierarchy of, +++ApplicationContext++s for integration tests. `@ContextHierarchy` should be declared, +with a list of one or more `@ContextConfiguration` instances, each of which defines a, +level in the context hierarchy. The following examples demonstrate the use of, +`@ContextHierarchy` within a single test class; however, `@ContextHierarchy` can also be, +used within a test class hierarchy., +===== @ActiveProfiles, +`@ActiveProfiles` is a class-level annotation that is used to declare which __bean, +definition profiles__ should be active when loading an `ApplicationContext` for an, +integration test., +===== @TestPropertySource, +`@TestPropertySource` is a class-level annotation that is used to configure the locations, +of properties files and inlined properties to be added to the set of `PropertySources` in, +the `Environment` for an `ApplicationContext` loaded for an integration test., +===== @DirtiesContext, +`@DirtiesContext` indicates that the underlying Spring `ApplicationContext` has been, +__dirtied__ during the execution of a test (i.e., modified or corrupted in some manner --, +for example, by changing the state of a singleton bean) and should be closed. When an, +application context is marked __dirty__, it is removed from the testing framework's cache, +and closed. As a consequence, the underlying Spring container will be rebuilt for any, +* Before the current test class, when declared on a class with class mode set to, +* After the current test class, when declared on a class with class mode set to, +* Before each test method in the current test class, when declared on a class with class, +* After each test method in the current test class, when declared on a class with class, +* Before the current test, when declared on a method with the method mode set to, +* After the current test, when declared on a method with the method mode set to, +===== @TestExecutionListeners, +`@TestExecutionListeners` defines class-level metadata for configuring the, +`TestExecutionListener` implementations that should be registered with the, +`TestContextManager`. Typically, `@TestExecutionListeners` is used in conjunction with, +`@ContextConfiguration`., +`@TestExecutionListeners` supports _inherited_ listeners by default. See the javadocs, +===== @Commit, +`@Commit` indicates that the transaction for a transactional test method should be, +__committed__ after the test method has completed. `@Commit` can be used as a direct, +replacement for `@Rollback(false)` in order to more explicitly convey the intent of the, +code. Analogous to `@Rollback`, `@Commit` may also be declared as a class-level or, +method-level annotation., +===== @Rollback, +`@Rollback` indicates whether the transaction for a transactional test method should be, +__rolled back__ after the test method has completed. If `true`, the transaction is rolled, +back; otherwise, the transaction is committed (see also `@Commit`). Rollback semantics, +for integration tests in the Spring TestContext Framework default to `true` even if, +===== @BeforeTransaction, +`@BeforeTransaction` indicates that the annotated `void` method should be executed, +__before__ a transaction is started for test methods configured to run within a, +transaction via Spring's `@Transactional` annotation. As of Spring Framework 4.3,, +`@BeforeTransaction` methods are not required to be `public` and may be declared on Java, +8 based interface default methods., +===== @AfterTransaction, +`@AfterTransaction` indicates that the annotated `void` method should be executed, +__after__ a transaction is ended for test methods configured to run within a transaction, +via Spring's `@Transactional` annotation. As of Spring Framework 4.3, `@AfterTransaction`, +methods are not required to be `public` and may be declared on Java 8 based interface, +default methods., +===== @Sql, +`@Sql` is used to annotate a test class or test method to configure SQL scripts to be, +executed against a given database during integration tests., +===== @SqlConfig, +`@SqlConfig` defines metadata that is used to determine how to parse and execute SQL, +scripts configured via the `@Sql` annotation., +===== @SqlGroup, +`@SqlGroup` is a container annotation that aggregates several `@Sql` annotations., +`@SqlGroup` can be used natively, declaring several nested `@Sql` annotations, or it can, +be used in conjunction with Java 8's support for repeatable annotations, where `@Sql` can, +simply be declared several times on the same class or method, implicitly generating this, +container annotation., +===== @IfProfileValue, +`@IfProfileValue` indicates that the annotated test is enabled for a specific testing, +environment. If the configured `ProfileValueSource` returns a matching `value` for the, +provided `name`, the test is enabled. Otherwise, the test will be disabled and, +effectively _ignored_., +===== @ProfileValueSourceConfiguration, +`@ProfileValueSourceConfiguration` is a class-level annotation that specifies what type, +of `ProfileValueSource` to use when retrieving __profile values__ configured through the, +`@IfProfileValue` annotation. If `@ProfileValueSourceConfiguration` is not declared for a, +test, `SystemProfileValueSource` is used by default., +===== @Timed, +`@Timed` indicates that the annotated test method must finish execution in a specified, +time period (in milliseconds). If the text execution time exceeds the specified time, +period, the test fails., +===== @Repeat, +`@Repeat` indicates that the annotated test method must be executed repeatedly. The, +number of times that the test method is to be executed is specified in the annotation.]