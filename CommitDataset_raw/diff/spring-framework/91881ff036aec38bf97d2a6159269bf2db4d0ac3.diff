[+++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java, + * constructor, allowing for programmatic configuration in Servlet 3.0+ environments., + * See {@link org.springframework.web.WebApplicationInitializer} for usage examples., +	 * Config param for the root WebApplicationContext implementation class to use: {@value}, +	 * @see #determineContextClass(ServletContext), +	 * @see #createWebApplicationContext(ServletContext, ApplicationContext), +	 */, +	public static final String CONTEXT_CLASS_PARAM = "contextClass";, +, +	/**, +	 * Config param for {@link ApplicationContextInitializer} classes to use, +	 * for initializing the root web application context: {@value}, +	 * @see #customizeContext(ServletContext, ConfigurableWebApplicationContext), +	 */, +	public static final String CONTEXT_INITIALIZER_CLASSES_PARAM = "contextInitializerClasses";, +, +	/**, +	 * Config param for global {@link ApplicationContextInitializer} classes to use, +	 * for initializing all web application contexts in the current application: {@value}, +	 * @see #customizeContext(ServletContext, ConfigurableWebApplicationContext), +	 */, +	public static final String GLOBAL_INITIALIZER_CLASSES_PARAM = "globalInitializerClasses";, +, +	/**, +	 * Any number of these characters are considered delimiters between, +	 * multiple values in a single init-param String value., +	 */, +	private static final String INIT_PARAM_DELIMITERS = ",; \t\n";, +, +	/**, +		String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);, +		if (configLocationParam != null) {, +			wac.setConfigLocation(configLocationParam);, +, +		// The wac environment's #initPropertySources will be called in any case when the context, +		// is refreshed; do it eagerly here to ensure servlet property sources are in place for, +		// use in any post-processing or initialization that occurs below prior to #refresh, +		ConfigurableEnvironment env = wac.getEnvironment();, +		if (env instanceof ConfigurableWebEnvironment) {, +			((ConfigurableWebEnvironment) env).initPropertySources(sc, null);, +		}, +, +	 * Customize the {@link ConfigurableWebApplicationContext} created by this, +	 * ContextLoader after config locations have been supplied to the context, +	 * but before the context is <em>refreshed</em>., +	 * <p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext), +	 * determines} what (if any) context initializer classes have been specified through, +	 * {@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and, +	 * {@linkplain ApplicationContextInitializer#initialize invokes each} with the, +	 * given web application context., +	 * <p>Any {@code ApplicationContextInitializers} implementing, +	 * {@link org.springframework.core.Ordered Ordered} or marked with @{@link, +	 * org.springframework.core.annotation.Order Order} will be sorted appropriately., +	 * @param sc the current servlet context, +	 * @param wac the newly created application context, +	 * @see #createWebApplicationContext(ServletContext, ApplicationContext), +	 * @see #CONTEXT_INITIALIZER_CLASSES_PARAM, +	 * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext), +	 */, +	protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {, +		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =, +				determineContextInitializerClasses(sc);, +		if (initializerClasses.isEmpty()) {, +			// no ApplicationContextInitializers have been declared -> nothing to do, +			return;, +		}, +, +		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =, +				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>();, +, +		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {, +			Class<?> initializerContextClass =, +					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);, +			if (initializerContextClass != null) {, +				Assert.isAssignable(initializerContextClass, wac.getClass(), String.format(, +						"Could not add context initializer [%s] since its generic parameter [%s] " +, +						"is not assignable from the type of application context used by this " +, +						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),, +						wac.getClass().getName()));, +			}, +			initializerInstances.add(BeanUtils.instantiateClass(initializerClass));, +		}, +, +		AnnotationAwareOrderComparator.sort(initializerInstances);, +		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {, +			initializer.initialize(wac);, +		}, +	}, +, +	/**, +, +, +		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM);, +		if (globalClassNames != null) {, +			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {, +				classes.add(loadInitializerClass(className));, +, +		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM);, +		if (localClassNames != null) {, +			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {]