[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +import java.beans.ConstructorProperties;, +import java.lang.reflect.Constructor;, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +import org.springframework.util.Assert;, + * @author Juergen Hoeller, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +	 * {@code @ModelAttribute} annotation, +	 * and the next method parameter is not of type {@link Errors}, +	 * @throws Exception if WebDataBinder initialization fails, +		return (parameter.getParameterType().isInstance(attribute) ? attribute :, +				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter));, +	 * Extension point to create the model attribute if not found in the model,, +	 * with subsequent parameter binding through bean properties (unless suppressed)., +	 * <p>The default implementation uses the unique public no-arg constructor, if any,, +	 * which may have arguments: It understands the JavaBeans {@link ConstructorProperties}, +	 * annotation as well as runtime-retained parameter names in the bytecode,, +	 * associating request parameters with constructor arguments by name. If no such, +	 * constructor is found, the default constructor will be used (even if not public),, +	 * assuming subsequent bean property bindings through setter methods., +	 * @param parameter the method parameter declaration, +	 * @param webRequest the current request, +	protected Object createAttribute(String attributeName, MethodParameter parameter,, +			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {, +		Constructor<?>[] ctors = parameter.getParameterType().getConstructors();, +		if (ctors.length != 1) {, +			// No standard data class or standard JavaBeans arrangement ->, +			// defensively go with default constructor, expecting regular bean property bindings., +			return BeanUtils.instantiateClass(parameter.getParameterType());, +		}, +		Constructor<?> ctor = ctors[0];, +		if (ctor.getParameterCount() == 0) {, +			// A single default constructor -> clearly a standard JavaBeans arrangement., +			return BeanUtils.instantiateClass(ctor);, +		}, +, +		// A single data class constructor -> resolve constructor arguments from request parameters., +		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class);, +		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor));, +		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor);, +		Class<?>[] paramTypes = ctor.getParameterTypes();, +		Assert.state(paramNames.length == paramTypes.length,, +				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor);, +		Object[] args = new Object[paramTypes.length];, +		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName);, +		for (int i = 0; i < paramNames.length; i++) {, +			args[i] = binder.convertIfNecessary(, +					webRequest.getParameterValues(paramNames[i]), paramTypes[i], new MethodParameter(ctor, i));, +		}, +		return BeanUtils.instantiateClass(ctor, args);, +	 * @param parameter the method parameter declaration, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {, +		Annotation[] annotations = parameter.getParameterAnnotations();, +	 * @param parameter the method parameter declaration, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {, +		int i = parameter.getParameterIndex();, +		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes();, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +import java.beans.ConstructorProperties;, +import java.lang.reflect.Constructor;, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +import org.springframework.util.Assert;, + * @author Juergen Hoeller, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +	 * {@code @ModelAttribute} annotation, +	 * and the next method parameter is not of type {@link Errors}, +	 * @throws Exception if WebDataBinder initialization fails, +		return (parameter.getParameterType().isInstance(attribute) ? attribute :, +				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter));, +	 * Extension point to create the model attribute if not found in the model,, +	 * with subsequent parameter binding through bean properties (unless suppressed)., +	 * <p>The default implementation uses the unique public no-arg constructor, if any,, +	 * which may have arguments: It understands the JavaBeans {@link ConstructorProperties}, +	 * annotation as well as runtime-retained parameter names in the bytecode,, +	 * associating request parameters with constructor arguments by name. If no such, +	 * constructor is found, the default constructor will be used (even if not public),, +	 * assuming subsequent bean property bindings through setter methods., +	 * @param parameter the method parameter declaration, +	 * @param webRequest the current request, +	protected Object createAttribute(String attributeName, MethodParameter parameter,, +			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {, +		Constructor<?>[] ctors = parameter.getParameterType().getConstructors();, +		if (ctors.length != 1) {, +			// No standard data class or standard JavaBeans arrangement ->, +			// defensively go with default constructor, expecting regular bean property bindings., +			return BeanUtils.instantiateClass(parameter.getParameterType());, +		}, +		Constructor<?> ctor = ctors[0];, +		if (ctor.getParameterCount() == 0) {, +			// A single default constructor -> clearly a standard JavaBeans arrangement., +			return BeanUtils.instantiateClass(ctor);, +		}, +, +		// A single data class constructor -> resolve constructor arguments from request parameters., +		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class);, +		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor));]