[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);, +		if (method.getParameterCount() == 1) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);, +		if (method.getParameterCount() == 1) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				method.getParameterCount() == 0);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);, +		if (method.getParameterCount() == 1) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				method.getParameterCount() == 0);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java, +					method.getParameterCount() == 1 &&, +					method.getParameterCount() == 0);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);, +		if (method.getParameterCount() == 1) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				method.getParameterCount() == 0);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java, +					method.getParameterCount() == 1 &&, +					method.getParameterCount() == 0);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, +				m.getParameterCount(), parameterNames.length);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);, +		if (method.getParameterCount() == 1) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				method.getParameterCount() == 0);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java, +					method.getParameterCount() == 1 &&, +					method.getParameterCount() == 0);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, +				m.getParameterCount(), parameterNames.length);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +				int numParams = method.getParameterCount();, +				if (targetMethod == null || numParams < targetMethod.getParameterCount()) {, +				else if (!method.isBridge() && targetMethod.getParameterCount() == numParams) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +			if (this.aspectJAdviceMethod.getParameterCount() == this.argumentNames.length + 1) {, +		int numExpectedArgumentNames = this.aspectJAdviceMethod.getParameterCount();, +		if (this.aspectJAdviceMethod.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +			if (method.getParameterCount() == 0) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&, +					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1]), +				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method);]