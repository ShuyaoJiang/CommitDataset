[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +						attributeName, value.getClass().getSimpleName(), expectedType.getSimpleName()));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +						attributeName, value.getClass().getSimpleName(), expectedType.getSimpleName()));, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAttributesTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Sam Brannen, +	static enum Color {, +		RED, WHITE, BLUE, +	}, +, +	private final AnnotationAttributes attributes = new AnnotationAttributes();, +, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	public void typeSafeAttributeAccess() {, +		attributes.put("name", "dave");, +		attributes.put("names", new String[] { "dave", "frank", "hal" });, +		attributes.put("bool1", true);, +		attributes.put("bool2", false);, +		attributes.put("color", Color.RED);, +		attributes.put("clazz", Integer.class);, +		attributes.put("classes", new Class<?>[] { Number.class, Short.class, Integer.class });, +		attributes.put("number", 42);, +		attributes.put("numbers", new int[] { 42, 43 });, +		AnnotationAttributes nestedAttributes = new AnnotationAttributes();, +		nestedAttributes.put("value", 10);, +		nestedAttributes.put("name", "algernon");, +		attributes.put("anno", nestedAttributes);, +		attributes.put("annoArray", new AnnotationAttributes[] { nestedAttributes });, +		assertThat(attributes.getString("name"), equalTo("dave"));, +		assertThat(attributes.getStringArray("names"), equalTo(new String[] { "dave", "frank", "hal" }));, +		assertThat(attributes.getBoolean("bool1"), equalTo(true));, +		assertThat(attributes.getBoolean("bool2"), equalTo(false));, +		assertThat(attributes.<Color>getEnum("color"), equalTo(Color.RED));, +		assertTrue(attributes.getClass("clazz").equals(Integer.class));, +		assertThat(attributes.getClassArray("classes"), equalTo(new Class[] { Number.class, Short.class, Integer.class }));, +		assertThat(attributes.<Integer>getNumber("number"), equalTo(42));, +		assertThat(attributes.getAnnotation("anno").<Integer>getNumber("value"), equalTo(10));, +		assertThat(attributes.getAnnotationArray("annoArray")[0].getString("name"), equalTo("algernon"));, +	public void getEnumWithNullAttributeName() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage(containsString("attributeName must not be null or empty"));, +		attributes.getEnum(null);, +	public void getEnumWithEmptyAttributeName() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage(containsString("attributeName must not be null or empty"));, +		attributes.getEnum("");, +	public void getEnumWithUnknownAttributeName() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage(containsString("Attribute 'bogus' not found"));, +		attributes.getEnum("bogus");, +, +	@Test, +	public void getEnumWithTypeMismatch() {, +		attributes.put("color", "RED");, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage(containsString("Attribute 'color' is of type [String], but [Enum] was expected"));, +		attributes.getEnum("color");]