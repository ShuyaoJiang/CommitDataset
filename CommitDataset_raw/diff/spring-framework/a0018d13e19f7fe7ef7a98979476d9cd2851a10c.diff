[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractEncoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractEncoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractEncoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.util.ObjectUtils;, +	private final List<HandlerMethodArgumentResolver> argumentResolvers = new ArrayList<>();, +	private ConversionService conversionService = new DefaultConversionService();, +		if (ObjectUtils.isEmpty(this.argumentResolvers)) {, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractEncoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.util.ObjectUtils;, +	private final List<HandlerMethodArgumentResolver> argumentResolvers = new ArrayList<>();, +	private ConversionService conversionService = new DefaultConversionService();, +		if (ObjectUtils.isEmpty(this.argumentResolvers)) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +		Publisher<?> publisher;, +		ResolvableType elementType;, +		if (this.conversionService.canConvert(returnType.getRawClass(), Publisher.class)) {, +			publisher = this.conversionService.convert(value, Publisher.class);, +			elementType = returnType.getGeneric(0);, +		}, +		else {, +			publisher = Publishers.just(value);, +			elementType = returnType;, +		}, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(elementType);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractEncoder.java, +		if (mimeType == null) {, +			return true;, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.util.ObjectUtils;, +	private final List<HandlerMethodArgumentResolver> argumentResolvers = new ArrayList<>();, +	private ConversionService conversionService = new DefaultConversionService();, +		if (ObjectUtils.isEmpty(this.argumentResolvers)) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +		Publisher<?> publisher;, +		ResolvableType elementType;, +		if (this.conversionService.canConvert(returnType.getRawClass(), Publisher.class)) {, +			publisher = this.conversionService.convert(value, Publisher.class);, +			elementType = returnType.getGeneric(0);, +		}, +		else {, +			publisher = Publishers.just(value);, +			elementType = returnType;, +		}, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(elementType);, +++ b/spring-web-reactive/src/main/resources/log4j.properties, +log4j.logger.org.springframework.http=DEBUG, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractDecoder.java, +		if (mimeType == null) {, +			return true;, +		}]