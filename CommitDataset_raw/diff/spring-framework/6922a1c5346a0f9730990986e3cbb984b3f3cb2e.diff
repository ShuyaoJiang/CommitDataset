[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +		implements BiFunction<WebsocketInbound, WebsocketOutbound, Publisher<Void>> {, +	public Publisher<Void> apply(WebsocketInbound inbound, WebsocketOutbound outbound) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +		implements BiFunction<WebsocketInbound, WebsocketOutbound, Publisher<Void>> {, +	public Publisher<Void> apply(WebsocketInbound inbound, WebsocketOutbound outbound) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +import reactor.ipc.netty.NettyPipeline;, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +	protected ReactorNettyWebSocketSession(WebsocketInbound inbound,, +			WebsocketOutbound outbound,, +		WebsocketInbound inbound = getDelegate().getWebsocketInbound();, +		WebsocketOutbound outbound = getDelegate().getWebsocketOutbound();, +		return outbound.options(NettyPipeline.SendOptions::flushOnEach), +		               .sendObject(frameFlux), +		               .then();, +	 * Simple container for {@link WebsocketInbound} and {@link WebsocketOutbound}., +		private final WebsocketInbound inbound;, +		private final WebsocketOutbound outbound;, +		public WebSocketConnection(WebsocketInbound inbound, WebsocketOutbound outbound) {, +		public WebsocketInbound getWebsocketInbound() {, +		public WebsocketOutbound getWebsocketOutbound() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +		implements BiFunction<WebsocketInbound, WebsocketOutbound, Publisher<Void>> {, +	public Publisher<Void> apply(WebsocketInbound inbound, WebsocketOutbound outbound) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +import reactor.ipc.netty.NettyPipeline;, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +	protected ReactorNettyWebSocketSession(WebsocketInbound inbound,, +			WebsocketOutbound outbound,, +		WebsocketInbound inbound = getDelegate().getWebsocketInbound();, +		WebsocketOutbound outbound = getDelegate().getWebsocketOutbound();, +		return outbound.options(NettyPipeline.SendOptions::flushOnEach), +		               .sendObject(frameFlux), +		               .then();, +	 * Simple container for {@link WebsocketInbound} and {@link WebsocketOutbound}., +		private final WebsocketInbound inbound;, +		private final WebsocketOutbound outbound;, +		public WebSocketConnection(WebsocketInbound inbound, WebsocketOutbound outbound) {, +		public WebsocketInbound getWebsocketInbound() {, +		public WebsocketOutbound getWebsocketOutbound() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/ReactorNettyRequestUpgradeStrategy.java, +		return response.getReactorResponse().sendWebsocket(protocols, reactorHandler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +		implements BiFunction<WebsocketInbound, WebsocketOutbound, Publisher<Void>> {, +	public Publisher<Void> apply(WebsocketInbound inbound, WebsocketOutbound outbound) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +import reactor.ipc.netty.NettyPipeline;, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +	protected ReactorNettyWebSocketSession(WebsocketInbound inbound,, +			WebsocketOutbound outbound,, +		WebsocketInbound inbound = getDelegate().getWebsocketInbound();, +		WebsocketOutbound outbound = getDelegate().getWebsocketOutbound();, +		return outbound.options(NettyPipeline.SendOptions::flushOnEach), +		               .sendObject(frameFlux), +		               .then();, +	 * Simple container for {@link WebsocketInbound} and {@link WebsocketOutbound}., +		private final WebsocketInbound inbound;, +		private final WebsocketOutbound outbound;, +		public WebSocketConnection(WebsocketInbound inbound, WebsocketOutbound outbound) {, +		public WebsocketInbound getWebsocketInbound() {, +		public WebsocketOutbound getWebsocketOutbound() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/ReactorNettyRequestUpgradeStrategy.java, +		return response.getReactorResponse().sendWebsocket(protocols, reactorHandler);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +		implements BiFunction<WebsocketInbound, WebsocketOutbound, Publisher<Void>> {, +	public Publisher<Void> apply(WebsocketInbound inbound, WebsocketOutbound outbound) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +import reactor.ipc.netty.NettyPipeline;, +import reactor.ipc.netty.http.websocket.WebsocketInbound;, +import reactor.ipc.netty.http.websocket.WebsocketOutbound;, +	protected ReactorNettyWebSocketSession(WebsocketInbound inbound,, +			WebsocketOutbound outbound,, +		WebsocketInbound inbound = getDelegate().getWebsocketInbound();, +		WebsocketOutbound outbound = getDelegate().getWebsocketOutbound();, +		return outbound.options(NettyPipeline.SendOptions::flushOnEach), +		               .sendObject(frameFlux), +		               .then();, +	 * Simple container for {@link WebsocketInbound} and {@link WebsocketOutbound}., +		private final WebsocketInbound inbound;, +		private final WebsocketOutbound outbound;, +		public WebSocketConnection(WebsocketInbound inbound, WebsocketOutbound outbound) {, +		public WebsocketInbound getWebsocketInbound() {, +		public WebsocketOutbound getWebsocketOutbound() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/ReactorNettyRequestUpgradeStrategy.java, +		return response.getReactorResponse().sendWebsocket(protocols, reactorHandler);]