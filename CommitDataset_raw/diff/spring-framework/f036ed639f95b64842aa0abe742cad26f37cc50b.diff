[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(getSessionFactory());, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(getSessionFactory());, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(getSessionFactory());, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private static class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter;, +	private class SessionBindingCallableInterceptor extends CallableProcessingInterceptorAdapter {, +		@Override, +		public <T> void preProcess(NativeWebRequest request, Callable<T> task) {, +		@Override, +		public <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(getSessionFactory());, +		}, +]