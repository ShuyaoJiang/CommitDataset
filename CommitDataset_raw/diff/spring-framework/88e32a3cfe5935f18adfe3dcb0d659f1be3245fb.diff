[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, +		// TODO both getValueType() methods could use getValueInternal and return a type descriptor from the resultant TypedValue, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, +		// TODO both getValueType() methods could use getValueInternal and return a type descriptor from the resultant TypedValue, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java, +		// pos combines start and end so can never be zero because tokens cannot be zero length, +		assert pos!=0;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, +		// TODO both getValueType() methods could use getValueInternal and return a type descriptor from the resultant TypedValue, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java, +		// pos combines start and end so can never be zero because tokens cannot be zero length, +		assert pos!=0;, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java, +	public void testErrorCase() {, +		setValueExpectError("3=4", null);, +	}, +, +	@Test, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, +		// TODO both getValueType() methods could use getValueInternal and return a type descriptor from the resultant TypedValue, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java, +		// pos combines start and end so can never be zero because tokens cannot be zero length, +		assert pos!=0;, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java, +	public void testErrorCase() {, +		setValueExpectError("3=4", null);, +	}, +, +	@Test, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +		Assert.assertEquals(2,expr.getAST().getValue(null));, +	}, +	, +	@Test, +	public void valueType() throws Exception {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		EvaluationContext ctx = new StandardEvaluationContext();, +		Class c = parser.parse("2").getValueType();, +		Assert.assertEquals(Integer.class,c);, +		c = parser.parse("12").getValueType(ctx);, +		Assert.assertEquals(Integer.class,c);, +		c = parser.parse("null").getValueType();, +		Assert.assertNull(c);, +		c = parser.parse("null").getValueType(ctx);, +		Assert.assertNull(c);, +		Object o = parser.parse("null").getValue(ctx,Integer.class);, +		Assert.assertNull(o);]