[+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractStaxXMLReader.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.xml;, +, +import javax.xml.namespace.QName;, +import javax.xml.stream.Location;, +import javax.xml.stream.XMLStreamException;, +, +import org.xml.sax.ContentHandler;, +import org.xml.sax.InputSource;, +import org.xml.sax.Locator;, +import org.xml.sax.SAXException;, +import org.xml.sax.SAXNotRecognizedException;, +import org.xml.sax.SAXNotSupportedException;, +import org.xml.sax.SAXParseException;, +, +import org.springframework.util.StringUtils;, +, +/**, + * Abstract base class for SAX <code>XMLReader</code> implementations that use StAX as a basis., + *, + * @author Arjen Poutsma, + * @see #setContentHandler(org.xml.sax.ContentHandler), + * @see #setDTDHandler(org.xml.sax.DTDHandler), + * @see #setEntityResolver(org.xml.sax.EntityResolver), + * @see #setErrorHandler(org.xml.sax.ErrorHandler), + * @since 3.0, + */, +abstract class AbstractStaxXmlReader extends AbstractXmlReader {, +, +	private static final String NAMESPACES_FEATURE_NAME = "http://xml.org/sax/features/namespaces";, +, +	private static final String NAMESPACE_PREFIXES_FEATURE_NAME = "http://xml.org/sax/features/namespace-prefixes";, +, +	private static final String IS_STANDALONE_FEATURE_NAME = "http://xml.org/sax/features/is-standalone";, +, +	private boolean namespacesFeature = true;, +, +	private boolean namespacePrefixesFeature = false;, +, +	private Boolean isStandalone;, +, +	@Override, +	public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {, +		if (NAMESPACES_FEATURE_NAME.equals(name)) {, +			return namespacesFeature;, +		}, +		else if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {, +			return namespacePrefixesFeature;, +		}, +		else if (IS_STANDALONE_FEATURE_NAME.equals(name)) {, +			if (isStandalone != null) {, +				return isStandalone;, +			}, +			else {, +				throw new SAXNotSupportedException("startDocument() callback not completed yet");, +			}, +		}, +		else {, +			return super.getFeature(name);, +		}, +	}, +, +	@Override, +	public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {, +		if (NAMESPACES_FEATURE_NAME.equals(name)) {, +			this.namespacesFeature = value;, +		}, +		else if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {, +			this.namespacePrefixesFeature = value;, +		}, +		else {, +			super.setFeature(name, value);, +		}, +	}, +, +	/** Indicates whether the SAX feature <code>http://xml.org/sax/features/namespaces</code> is turned on. */, +	protected boolean hasNamespacesFeature() {, +		return namespacesFeature;, +	}, +, +	/** Indicates whether the SAX feature <code>http://xml.org/sax/features/namespaces-prefixes</code> is turned on. */, +	protected boolean hasNamespacePrefixesFeature() {, +		return namespacePrefixesFeature;, +	}]