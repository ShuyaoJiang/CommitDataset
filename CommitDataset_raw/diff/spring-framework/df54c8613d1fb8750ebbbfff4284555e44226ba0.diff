[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2010 the original author or authors., +	 * Return the name of the default transaction manager bean., +	 */, +	protected final String getTransactionManagerBeanName() {, +		return this.transactionManagerBeanName;, +	}, +, +	/**, +	 * Return the BeanFactory to use for retrieving PlatformTransactionManager beans., +	 */, +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2010 the original author or authors., +	 * Return the name of the default transaction manager bean., +	 */, +	protected final String getTransactionManagerBeanName() {, +		return this.transactionManagerBeanName;, +	}, +, +	/**, +	 * Return the BeanFactory to use for retrieving PlatformTransactionManager beans., +	 */, +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +		oos.writeObject(getTransactionManagerBeanName());, +		oos.writeObject(getBeanFactory());, +		setTransactionManagerBeanName((String) ois.readObject());, +		setBeanFactory((BeanFactory) ois.readObject());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2010 the original author or authors., +	 * Return the name of the default transaction manager bean., +	 */, +	protected final String getTransactionManagerBeanName() {, +		return this.transactionManagerBeanName;, +	}, +, +	/**, +	 * Return the BeanFactory to use for retrieving PlatformTransactionManager beans., +	 */, +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +		oos.writeObject(getTransactionManagerBeanName());, +		oos.writeObject(getBeanFactory());, +		setTransactionManagerBeanName((String) ois.readObject());, +		setBeanFactory((BeanFactory) ois.readObject());, +++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/config/AnnotationDrivenTests.java, + * Copyright 2002-2010 the original author or authors., +import java.io.Serializable;, +, +import org.springframework.util.SerializationTestUtils;, +	public void testSerializableWithPreviousUsage() throws Exception {, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("annotationDrivenProxyTargetClassTests.xml", getClass());, +		TransactionalService service = context.getBean("service", TransactionalService.class);, +		service.setSomething("someName");, +		service = (TransactionalService) SerializationTestUtils.serializeAndDeserialize(service);, +		service.setSomething("someName");, +	}, +	public void testSerializableWithoutPreviousUsage() throws Exception {, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("annotationDrivenProxyTargetClassTests.xml", getClass());, +		TransactionalService service = context.getBean("service", TransactionalService.class);, +		service = (TransactionalService) SerializationTestUtils.serializeAndDeserialize(service);, +		service.setSomething("someName");, +	}, +, +, +	public static class TransactionCheckingInterceptor implements MethodInterceptor, Serializable {, +				assertTrue(TransactionSynchronizationManager.isActualTransactionActive());, +				assertFalse(TransactionSynchronizationManager.isActualTransactionActive());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, + * Copyright 2002-2010 the original author or authors., +	 * Return the name of the default transaction manager bean., +	 */, +	protected final String getTransactionManagerBeanName() {, +		return this.transactionManagerBeanName;, +	}, +, +	/**, +	 * Return the BeanFactory to use for retrieving PlatformTransactionManager beans., +	 */, +	protected final BeanFactory getBeanFactory() {, +		return this.beanFactory;, +	}, +]