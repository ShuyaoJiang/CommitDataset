[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, + * Copyright 2002-2015 the original author or authors., + * Encapsulates information about a handler method consisting of a, + * {@linkplain #getMethod() method} and a {@linkplain #getBean() bean}., + * Provides convenient access to method parameters, method return value, method annotations., + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., + * @author Juergen Hoeller, +	/** Logger that is available to subclasses */, +	protected final Log logger = LogFactory.getLog(getClass());, +	private final Class<?> beanType;, +, +		this.beanType = ClassUtils.getUserClass(bean);, +		this.beanType = ClassUtils.getUserClass(bean);, +		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName));, +	 * Copy constructor for use in subclasses., +		this.beanType = handlerMethod.beanType;, +		this.beanType = handlerMethod.beanType;, +	 * This method returns the type of the handler for this handler method., +	 * <p>Note that if the bean type is a CGLIB-generated class, the original, +	 * user-defined class is returned., +		return this.beanType;, +	 * If the bean method is a bridge method, this method returns the bridged, +	 * (user-defined) method. Otherwise it returns the same method as {@link #getMethod()}., +	 * Returns a single annotation on the underlying method traversing its super methods, +	 * if no annotation can be found on the given method itself., +	 * If the provided instance contains a bean name rather than an object instance,, +	 * the bean name is resolved before a {@link HandlerMethod} is created and returned., +	public String getShortLogMessage() {, +		int args = this.method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof HandlerMethod)) {, +		HandlerMethod otherMethod = (HandlerMethod) other;, +		return (this.bean.equals(otherMethod.bean) && this.method.equals(otherMethod.method));, +	}, +		return (this.bean.hashCode() * 31 + this.method.hashCode());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, + * Copyright 2002-2015 the original author or authors., + * Encapsulates information about a handler method consisting of a, + * {@linkplain #getMethod() method} and a {@linkplain #getBean() bean}., + * Provides convenient access to method parameters, method return value, method annotations., + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., + * @author Juergen Hoeller, +	/** Logger that is available to subclasses */, +	protected final Log logger = LogFactory.getLog(getClass());, +	private final Class<?> beanType;, +, +		this.beanType = ClassUtils.getUserClass(bean);, +		this.beanType = ClassUtils.getUserClass(bean);, +		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName));, +	 * Copy constructor for use in subclasses., +		this.beanType = handlerMethod.beanType;, +		this.beanType = handlerMethod.beanType;, +	 * This method returns the type of the handler for this handler method., +	 * <p>Note that if the bean type is a CGLIB-generated class, the original, +	 * user-defined class is returned., +		return this.beanType;, +	 * If the bean method is a bridge method, this method returns the bridged, +	 * (user-defined) method. Otherwise it returns the same method as {@link #getMethod()}., +	 * Returns a single annotation on the underlying method traversing its super methods, +	 * if no annotation can be found on the given method itself., +	 * If the provided instance contains a bean name rather than an object instance,, +	 * the bean name is resolved before a {@link HandlerMethod} is created and returned., +	public String getShortLogMessage() {, +		int args = this.method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof HandlerMethod)) {, +		HandlerMethod otherMethod = (HandlerMethod) other;, +		return (this.bean.equals(otherMethod.bean) && this.method.equals(otherMethod.method));, +	}, +		return (this.bean.hashCode() * 31 + this.method.hashCode());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +	 * it should be sufficient to use {@link #setCustomArgumentResolvers}., +	 * it should be sufficient to use {@link #setCustomReturnValueHandlers}., +	public void setApplicationContext(ApplicationContext applicationContext) {, +	 * have not already been set via {@link #setArgumentResolvers}., +	 * <p>Subclasses should also take into account custom argument types configured via, +	 * {@link #setCustomArgumentResolvers}., +	 * value handlers have not already been set via {@link #setReturnValueHandlers}., +	 * <p>Subclasses should also take into account custom return value types configured, +	 * via {@link #setCustomReturnValueHandlers}., +		Class<?> handlerType = (handler instanceof String ?, +				this.applicationContext.getType((String) handler) : handler.getClass());, +		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping);, +			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +, +					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +, +					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.");]