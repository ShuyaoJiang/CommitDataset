[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestResponseBodyMethodProcessor.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, + * In case of validation failure, a {@link MethodArgumentNotValidException} is thrown and handled , +			BindingResult bindingResult = binder.getBindingResult();, +			if (bindingResult.hasErrors()) {, +				throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestResponseBodyMethodProcessor.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, + * In case of validation failure, a {@link MethodArgumentNotValidException} is thrown and handled , +			BindingResult bindingResult = binder.getBindingResult();, +			if (bindingResult.hasErrors()) {, +				throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestPart;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +			else if (ex instanceof MethodArgumentNotValidException) {, +				return handleMethodArgumentNotValidException((MethodArgumentNotValidException) ex, request, response, handler);, +	 * Handle the case where an argument annotated with {@code @Valid} such as , +	 * an {@link RequestBody} or {@link RequestPart} argument fails validation. , +	 * An HTTP 400 error is sent back to the client., +	protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestResponseBodyMethodProcessor.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, + * In case of validation failure, a {@link MethodArgumentNotValidException} is thrown and handled , +			BindingResult bindingResult = binder.getBindingResult();, +			if (bindingResult.hasErrors()) {, +				throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestPart;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +			else if (ex instanceof MethodArgumentNotValidException) {, +				return handleMethodArgumentNotValidException((MethodArgumentNotValidException) ex, request, response, handler);, +	 * Handle the case where an argument annotated with {@code @Valid} such as , +	 * an {@link RequestBody} or {@link RequestPart} argument fails validation. , +	 * An HTTP 400 error is sent back to the client., +	protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolverTests.java, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +		} catch (MethodArgumentNotValidException e) {, +			assertEquals("requestPart", e.getBindingResult().getObjectName());, +			assertEquals(1, e.getBindingResult().getErrorCount());, +			assertNotNull(e.getBindingResult().getFieldError("name"));, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					throw new MethodArgumentNotValidException(parameter, bindingResult);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestResponseBodyMethodProcessor.java, +import org.springframework.validation.BindingResult;, +import org.springframework.web.method.annotation.support.MethodArgumentNotValidException;, + * In case of validation failure, a {@link MethodArgumentNotValidException} is thrown and handled , +			BindingResult bindingResult = binder.getBindingResult();]