[+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +	/**, +	 * Indicates whether the specified cron expression can be parsed into a, +	 * valid cron sequence generator, +	 * @param cronExpression the expression to evaluate, +	 * @return a boolean indicating whether the given expression is a valid cron, +	 *         expression, +	 */, +	public static boolean isValidExpression(String cronExpression) {, +		String[] fields = StringUtils.tokenizeToStringArray(cronExpression, " ");, +		return validateCronFields(fields);, +	}, +, +	private static boolean validateCronFields(String[] fields) {, +		return fields != null && fields.length == 6;, +	}, +, +		if (!validateCronFields(fields)) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +	/**, +	 * Indicates whether the specified cron expression can be parsed into a, +	 * valid cron sequence generator, +	 * @param cronExpression the expression to evaluate, +	 * @return a boolean indicating whether the given expression is a valid cron, +	 *         expression, +	 */, +	public static boolean isValidExpression(String cronExpression) {, +		String[] fields = StringUtils.tokenizeToStringArray(cronExpression, " ");, +		return validateCronFields(fields);, +	}, +, +	private static boolean validateCronFields(String[] fields) {, +		return fields != null && fields.length == 6;, +	}, +, +		if (!validateCronFields(fields)) {, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java, +	@Test, +	public void testValidExpression() {, +		assertTrue(CronSequenceGenerator.isValidExpression("0 */2 1-4 * * *"));, +	}, +, +	@Test, +	public void testNotValidExpression() {, +		assertFalse(CronSequenceGenerator.isValidExpression("0 */2 1-4 * * * *"));, +	}, +, +	@Test, +	public void testNullExpression() {, +		assertFalse(CronSequenceGenerator.isValidExpression(null));, +	}, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +	/**, +	 * Indicates whether the specified cron expression can be parsed into a, +	 * valid cron sequence generator, +	 * @param cronExpression the expression to evaluate, +	 * @return a boolean indicating whether the given expression is a valid cron, +	 *         expression, +	 */, +	public static boolean isValidExpression(String cronExpression) {, +		String[] fields = StringUtils.tokenizeToStringArray(cronExpression, " ");, +		return validateCronFields(fields);, +	}, +, +	private static boolean validateCronFields(String[] fields) {, +		return fields != null && fields.length == 6;, +	}, +, +		if (!validateCronFields(fields)) {, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java, +	@Test, +	public void testValidExpression() {, +		assertTrue(CronSequenceGenerator.isValidExpression("0 */2 1-4 * * *"));, +	}, +, +	@Test, +	public void testNotValidExpression() {, +		assertFalse(CronSequenceGenerator.isValidExpression("0 */2 1-4 * * * *"));, +	}, +, +	@Test, +	public void testNullExpression() {, +		assertFalse(CronSequenceGenerator.isValidExpression(null));, +	}, +++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +	/**, +	 * Indicates whether the specified cron expression can be parsed into a, +	 * valid cron sequence generator, +	 * @param cronExpression the expression to evaluate, +	 * @return a boolean indicating whether the given expression is a valid cron, +	 *         expression, +	 */, +	public static boolean isValidExpression(String cronExpression) {, +		String[] fields = StringUtils.tokenizeToStringArray(cronExpression, " ");, +		return validateCronFields(fields);, +	}, +, +	private static boolean validateCronFields(String[] fields) {, +		return fields != null && fields.length == 6;]