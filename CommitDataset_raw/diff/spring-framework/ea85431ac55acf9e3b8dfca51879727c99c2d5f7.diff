[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +	public void filter() throws Exception {, +				.retrieve(), +				.bodyToMono(String.class);, +	public void errorHandlingFilter() throws Exception {, +		ExchangeFilterFunction filter = ExchangeFilterFunction.ofResponseProcessor(, +						clientResponse -> {, +							List<String> headerValues = clientResponse.headers().header("Foo");, +							return headerValues.isEmpty() ? Mono.error(, +									new MyException("Response does not contain Foo header")) :, +									Mono.just(clientResponse);, +						}, +				);, +, +		WebClient filteredClient = this.webClient.filter(filter);, +, +		// header not present, +		this.server.enqueue(new MockResponse().setHeader("Content-Type", "text/plain").setBody("Hello Spring!"));, +				.retrieve(), +				.bodyToMono(String.class);, +, +		StepVerifier.create(result), +				.expectError(MyException.class), +				.verify(Duration.ofSeconds(3));, +, +		// header present, +, +		this.server.enqueue(new MockResponse().setHeader("Content-Type", "text/plain"), +				.setHeader("Foo", "Bar"), +				.setBody("Hello Spring!"));, +, +		result = filteredClient.get(), +				.uri("/greeting?name=Spring"), +				.retrieve(), +				.bodyToMono(String.class);, +		Assert.assertEquals(2, server.getRequestCount());, +	}, +, +	@SuppressWarnings("serial"), +	private static class MyException extends RuntimeException {, +, +		public MyException(String message) {, +			super(message);, +		}]