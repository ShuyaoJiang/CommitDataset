[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(convertedValue);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(convertedValue);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		typeDescriptorCache.put(boolean.class, new TypeDescriptor(boolean.class));, +		typeDescriptorCache.put(Boolean.class, new TypeDescriptor(Boolean.class));, +, +		typeDescriptorCache.put(double.class, new TypeDescriptor(double.class));, +		typeDescriptorCache.put(Double.class, new TypeDescriptor(Double.class));, +		typeDescriptorCache.put(float.class, new TypeDescriptor(float.class));, +		typeDescriptorCache.put(Float.class, new TypeDescriptor(Float.class));, +		typeDescriptorCache.put(short.class, new TypeDescriptor(short.class));, +		typeDescriptorCache.put(Short.class, new TypeDescriptor(Short.class));, +, +	 * Create a new descriptor for the type of the given value., +	 * <p>Use this constructor when a conversion point comes from a source such as a Map or, +	 * Collection, where no additional context is available but elements can be introspected., +	 * @param type the actual type to wrap, +	 */, +	private TypeDescriptor(Object value) {, +		Assert.notNull(value, "Value must not be null");, +		this.value = value;, +		this.type = value.getClass();, +	}, +, +	/**, +	 * Create a new descriptor for the given type., +	 * <p>Use this constructor when a conversion point comes from a plain source type,, +	 * where no additional context is available., +	 * @param type the actual type to wrap, +	 */, +	private TypeDescriptor(Class<?> type) {, +		Assert.notNull(type, "Type must not be null");, +		this.type = type;, +	}, +, +, +	/**, +, +	// static factory methods, +, +	/**, +	 * Create a new type descriptor for the given class., +	 * @param type the class, +	 * @return the type descriptor, +	 */, +	public static TypeDescriptor valueOf(Class<?> type) {, +		if (type == null) {, +			return TypeDescriptor.NULL;, +		}, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return (desc != null ? desc : new TypeDescriptor(type));, +	}, +, +	/**, +	 * Create a new type descriptor for the class of the given object., +	 * @param object the object, +	 * @return the type descriptor, +	 */, +	public static TypeDescriptor forObject(Object object) {, +		if (object == null) {, +			return NULL;, +		}, +		else if (object instanceof Collection || object instanceof Map) {, +			return new TypeDescriptor(object);, +		}, +		else {, +			return valueOf(object.getClass());, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(convertedValue);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		typeDescriptorCache.put(boolean.class, new TypeDescriptor(boolean.class));, +		typeDescriptorCache.put(Boolean.class, new TypeDescriptor(Boolean.class));, +, +		typeDescriptorCache.put(double.class, new TypeDescriptor(double.class));, +		typeDescriptorCache.put(Double.class, new TypeDescriptor(Double.class));, +		typeDescriptorCache.put(float.class, new TypeDescriptor(float.class));, +		typeDescriptorCache.put(Float.class, new TypeDescriptor(Float.class));, +		typeDescriptorCache.put(short.class, new TypeDescriptor(short.class));, +		typeDescriptorCache.put(Short.class, new TypeDescriptor(Short.class));, +, +	 * Create a new descriptor for the type of the given value., +	 * <p>Use this constructor when a conversion point comes from a source such as a Map or, +	 * Collection, where no additional context is available but elements can be introspected., +	 * @param type the actual type to wrap, +	 */, +	private TypeDescriptor(Object value) {, +		Assert.notNull(value, "Value must not be null");, +		this.value = value;, +		this.type = value.getClass();, +	}, +, +	/**, +	 * Create a new descriptor for the given type., +	 * <p>Use this constructor when a conversion point comes from a plain source type,, +	 * where no additional context is available.]