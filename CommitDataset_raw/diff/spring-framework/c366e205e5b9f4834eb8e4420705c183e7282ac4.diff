[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2019 the original author or authors., +	/**, +	 * A convenient constant for a default {@code AnnotationBeanNameGenerator} instance,, +	 * as used for component scanning purposes., +	 * @since 5.2, +	 */, +	public static final AnnotationBeanNameGenerator INSTANCE = new AnnotationBeanNameGenerator();, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2019 the original author or authors., +	/**, +	 * A convenient constant for a default {@code AnnotationBeanNameGenerator} instance,, +	 * as used for component scanning purposes., +	 * @since 5.2, +	 */, +	public static final AnnotationBeanNameGenerator INSTANCE = new AnnotationBeanNameGenerator();, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2019 the original author or authors., +	/**, +	 * A convenient constant for a default {@code AnnotationBeanNameGenerator} instance,, +	 * as used for component scanning purposes., +	 * @since 5.2, +	 */, +	public static final AnnotationBeanNameGenerator INSTANCE = new AnnotationBeanNameGenerator();, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	/**, +	 * A {@code BeanNameGenerator} using fully qualified class names as default bean names., +	 * <p>This default for configuration-level import purposes may be overridden through, +	 * {@link #setBeanNameGenerator}. Note that the default for component scanning purposes, +	 * is a plain {@link AnnotationBeanNameGenerator#INSTANCE}, unless overridden through, +	 * {@link #setBeanNameGenerator} with a unified user-level bean name generator., +	 * @since 5.2, +	 * @see #setBeanNameGenerator, +	 */, +	public static final AnnotationBeanNameGenerator IMPORT_BEAN_NAME_GENERATOR = new AnnotationBeanNameGenerator() {, +		@Override, +		protected String buildDefaultBeanName(BeanDefinition definition) {, +			String beanClassName = definition.getBeanClassName();, +			Assert.state(beanClassName != null, "No bean class name set");, +			return beanClassName;, +		}, +	};, +, +	/* Using short class names as default bean names by default. */, +	private BeanNameGenerator componentScanBeanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +	/* Using fully qualified class names as default bean names by default. */, +	private BeanNameGenerator importBeanNameGenerator = IMPORT_BEAN_NAME_GENERATOR;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2019 the original author or authors., +	/**, +	 * A convenient constant for a default {@code AnnotationBeanNameGenerator} instance,, +	 * as used for component scanning purposes., +	 * @since 5.2, +	 */, +	public static final AnnotationBeanNameGenerator INSTANCE = new AnnotationBeanNameGenerator();, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2019 the original author or authors., +	private BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;, +		this.beanNameGenerator =, +				(beanNameGenerator != null ? beanNameGenerator : AnnotationBeanNameGenerator.INSTANCE);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java]