[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.core.MethodParameter;, +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache = new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.core.MethodParameter;, +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache = new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpSession;, +	// dummy method placeholder, +	private static final Method NO_METHOD_FOUND = ClassUtils, +			.getMethodIfAvailable(System.class, "currentTimeMillis", null);, +, +	private final Map<Class<?>, Map<Class<? extends Throwable>, Method>> exceptionHandlerCache = new ConcurrentHashMap<Class<?>, Map<Class<? extends Throwable>, Method>>();, +, +		Method handlerMethod = null;, +		Map<Class<? extends Throwable>, Method> handlers = exceptionHandlerCache, +				.get(handlerType);, +, +		if (handlers != null) {, +			handlerMethod = handlers.get(thrownExceptionType);, +			if (handlerMethod != null) {, +				return (handlerMethod == NO_METHOD_FOUND ? null : handlerMethod);, +			}, +		} else {, +			handlers = new ConcurrentHashMap<Class<? extends Throwable>, Method>();, +			exceptionHandlerCache.put(handlerType, handlers);, +		}, +, +		final Map<Class<? extends Throwable>, Method> resolverMethods = handlers;, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.core.MethodParameter;, +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache = new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpSession;, +	// dummy method placeholder, +	private static final Method NO_METHOD_FOUND = ClassUtils, +			.getMethodIfAvailable(System.class, "currentTimeMillis", null);, +, +	private final Map<Class<?>, Map<Class<? extends Throwable>, Method>> exceptionHandlerCache = new ConcurrentHashMap<Class<?>, Map<Class<? extends Throwable>, Method>>();, +, +		Method handlerMethod = null;, +		Map<Class<? extends Throwable>, Method> handlers = exceptionHandlerCache, +				.get(handlerType);, +, +		if (handlers != null) {, +			handlerMethod = handlers.get(thrownExceptionType);, +			if (handlerMethod != null) {, +				return (handlerMethod == NO_METHOD_FOUND ? null : handlerMethod);, +			}, +		} else {, +			handlers = new ConcurrentHashMap<Class<? extends Throwable>, Method>();, +			exceptionHandlerCache.put(handlerType, handlers);, +		}, +, +		final Map<Class<? extends Throwable>, Method> resolverMethods = handlers;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.concurrent.ConcurrentHashMap;, +, +	private final Map<Class<?>, ServletHandlerMethodResolver> methodResolverCache = new ConcurrentHashMap<Class<?>, ServletHandlerMethodResolver>();, +, +	private final Map<Class<?>, Boolean> sessionAnnotatedClassesCache = new ConcurrentHashMap<Class<?>, Boolean>();, +		Class<?> clazz = ClassUtils.getUserClass(handler);, +		Boolean annotated = sessionAnnotatedClassesCache.get(clazz);, +, +		if (annotated == null) {, +			annotated = Boolean.valueOf(AnnotationUtils.findAnnotation(handler, +					.getClass(), SessionAttributes.class) != null);, +			sessionAnnotatedClassesCache.put(clazz, annotated);, +		}, +, +		if (annotated) {, +		private final Map<Method, RequestMappingInfo> mappings = new ConcurrentHashMap<Method, RequestMappingInfo>();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.core.MethodParameter;, +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache = new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpSession;, +	// dummy method placeholder, +	private static final Method NO_METHOD_FOUND = ClassUtils, +			.getMethodIfAvailable(System.class, "currentTimeMillis", null);]