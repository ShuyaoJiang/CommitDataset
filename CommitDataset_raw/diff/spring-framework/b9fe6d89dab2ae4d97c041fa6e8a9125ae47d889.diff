[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +				Object target = beanFactory.doResolveDependency(descriptor, beanName, null, null);, +				if (target == null) {, +					throw new NoSuchBeanDefinitionException(descriptor.getDependencyType(),, +							"Optional dependency not present for lazy injection point");, +				}, +				return target;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +				Object target = beanFactory.doResolveDependency(descriptor, beanName, null, null);, +				if (target == null) {, +					throw new NoSuchBeanDefinitionException(descriptor.getDependencyType(),, +							"Optional dependency not present for lazy injection point");, +				}, +				return target;, +++ b/spring-context/src/test/java/org/springframework/context/annotation/LazyAutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test, +	public void testLazyOptionalResourceInjectionWithNonExistingTarget() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(OptionalFieldResourceInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +, +		OptionalFieldResourceInjectionBean bean = (OptionalFieldResourceInjectionBean) bf.getBean("annotatedBean");, +		assertNotNull(bean.getTestBean());, +		try {, +			bean.getTestBean().getName();, +			fail("Should have thrown NoSuchBeanDefinitionException");, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// expected;, +		}, +	}, +, +	public static class OptionalFieldResourceInjectionBean implements TestBeanHolder {, +, +		@Autowired(required = false) @Lazy, +		private TestBean testBean;, +, +		public TestBean getTestBean() {, +			return this.testBean;, +		}, +	}, +, +]