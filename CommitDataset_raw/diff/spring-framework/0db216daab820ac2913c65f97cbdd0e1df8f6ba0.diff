[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractAsyncReturnValueHandler.java, + * Convenient base class for {@link AsyncHandlerMethodReturnValueHandler}, + * implementations that support only asynchronous (Future-like) return values a, + * and merely serve as adapters of such types to Spring's, + * {@link org.springframework.util.concurrent.ListenableFuture ListenableFuture}., +, +	@Override, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) {, +		// Should never be called since we return "true" from isAsyncReturnValue, +		throw new IllegalStateException("Unexpected invocation.");, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractAsyncReturnValueHandler.java, + * Convenient base class for {@link AsyncHandlerMethodReturnValueHandler}, + * implementations that support only asynchronous (Future-like) return values a, + * and merely serve as adapters of such types to Spring's, + * {@link org.springframework.util.concurrent.ListenableFuture ListenableFuture}., +, +	@Override, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) {, +		// Should never be called since we return "true" from isAsyncReturnValue, +		throw new IllegalStateException("Unexpected invocation.");, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +					future.addCallback(new ReturnValueListenableFutureCallback(invocable, message));, +		public ReturnValueListenableFutureCallback(InvocableHandlerMethod handlerMethod, Message<?> message) {, +				MethodParameter returnType = this.handlerMethod.getAsyncReturnValueType(result);, +				returnValueHandlers.handleReturnValue(result, returnType, this.message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractAsyncReturnValueHandler.java, + * Convenient base class for {@link AsyncHandlerMethodReturnValueHandler}, + * implementations that support only asynchronous (Future-like) return values a, + * and merely serve as adapters of such types to Spring's, + * {@link org.springframework.util.concurrent.ListenableFuture ListenableFuture}., +, +	@Override, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) {, +		// Should never be called since we return "true" from isAsyncReturnValue, +		throw new IllegalStateException("Unexpected invocation.");, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +					future.addCallback(new ReturnValueListenableFutureCallback(invocable, message));, +		public ReturnValueListenableFutureCallback(InvocableHandlerMethod handlerMethod, Message<?> message) {, +				MethodParameter returnType = this.handlerMethod.getAsyncReturnValueType(result);, +				returnValueHandlers.handleReturnValue(result, returnType, this.message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AsyncHandlerMethodReturnValueHandler.java, +import org.springframework.messaging.Message;, + * An extension of {@link HandlerMethodReturnValueHandler} for handling async,, + * Future-like return value types that support success and error callbacks., + * Essentially anything that can be adapted to a {@link ListenableFuture}., + * <p>Implementations should consider extending the convenient base class, + * {@link AbstractAsyncReturnValueHandler}., +	 * Whether the return value represents an asynchronous, Future-like type, +	 * with success and error callbacks. If this method returns {@code true},, +	 * then {@link #toListenableFuture} is invoked next. If it returns, +	 * {@code false}, then {@link #handleReturnValue} is called., +	 *, +	 * <p><strong>Note:</strong> this method will only be invoked after, +	 * is called and it returns {@code true}., +	 *, +	 * @param returnValue the value returned from the handler method, +	 * @param returnType the type of the return value., +	 * Adapt the asynchronous return value to a {@link ListenableFuture}., +	 * Implementations should consider returning an instance of, +	 * {@link org.springframework.util.concurrent.SettableListenableFuture, +	 * SettableListenableFuture}. Return value handling will then continue when, +	 * the ListenableFuture is completed with either success or error., +	 *, +	 * <p><strong>Note:</strong> this method will only be invoked after, +	 * is called and it returns {@code true}., +	 *, +	 * @param returnValue the value returned from the handler method, +	 * @param returnType the type of the return value., +	 * @return the resulting ListenableFuture or {@code null} in which case no, +	 * further handling will be performed., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractAsyncReturnValueHandler.java, + * Convenient base class for {@link AsyncHandlerMethodReturnValueHandler}, + * implementations that support only asynchronous (Future-like) return values a, + * and merely serve as adapters of such types to Spring's, + * {@link org.springframework.util.concurrent.ListenableFuture ListenableFuture}., +, +	@Override, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) {, +		// Should never be called since we return "true" from isAsyncReturnValue, +		throw new IllegalStateException("Unexpected invocation.");, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +					future.addCallback(new ReturnValueListenableFutureCallback(invocable, message));, +		public ReturnValueListenableFutureCallback(InvocableHandlerMethod handlerMethod, Message<?> message) {, +				MethodParameter returnType = this.handlerMethod.getAsyncReturnValueType(result);, +				returnValueHandlers.handleReturnValue(result, returnType, this.message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AsyncHandlerMethodReturnValueHandler.java, +import org.springframework.messaging.Message;, + * An extension of {@link HandlerMethodReturnValueHandler} for handling async,, + * Future-like return value types that support success and error callbacks., + * Essentially anything that can be adapted to a {@link ListenableFuture}., + * <p>Implementations should consider extending the convenient base class, + * {@link AbstractAsyncReturnValueHandler}.]