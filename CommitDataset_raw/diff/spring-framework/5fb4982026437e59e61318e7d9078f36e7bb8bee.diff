[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +import java.util.function.BiFunction;, +import java.util.function.UnaryOperator;, +		public PathComponent encode(BiFunction<String, Type, String> encoder) {, +		public PathComponent expand(UriTemplateVariables uriVariables, @Nullable UnaryOperator<String> encoder) {, +	private final EncodeState encodeState;, +, +	@Nullable, +	private UnaryOperator<String> variableEncoder;, +			@Nullable MultiValueMap<String, String> queryParams, boolean encoded) {, +		this.encodeState = encoded ? EncodeState.FULLY_ENCODED : EncodeState.RAW;, +		// Check for illegal characters.., +		if (encoded) {, +	private HierarchicalUriComponents(@Nullable String scheme, @Nullable String fragment, @Nullable String userInfo,, +			@Nullable String host, @Nullable String port, @Nullable PathComponent path,, +			@Nullable MultiValueMap<String, String> queryParams, EncodeState encodeState,, +			@Nullable UnaryOperator<String> variableEncoder) {, +, +		super(scheme, fragment);, +, +		this.userInfo = userInfo;, +		this.host = host;, +		this.port = port;, +		this.path = (path != null ? path : NULL_PATH_COMPONENT);, +		this.queryParams = CollectionUtils.unmodifiableMultiValueMap(, +				queryParams != null ? queryParams : new LinkedMultiValueMap<>(0));, +		this.encodeState = encodeState;, +		this.variableEncoder = variableEncoder;, +	}, +, +	HierarchicalUriComponents encodeTemplate(Charset charset) {, +, +		if (this.encodeState.isEncoded()) {, +			return this;, +		}, +, +		// Remember the charset to encode URI variables later.., +		this.variableEncoder = value -> encodeUriComponent(value, charset, Type.URI);, +, +		UriTemplateEncoder encoder = new UriTemplateEncoder(charset);, +		String schemeTo = (getScheme() != null ? encoder.apply(getScheme(), Type.SCHEME) : null);, +		String fragmentTo = (getFragment() != null ? encoder.apply(getFragment(), Type.FRAGMENT) : null);, +		String userInfoTo = (getUserInfo() != null ? encoder.apply(getUserInfo(), Type.USER_INFO) : null);, +		String hostTo = (getHost() != null ? encoder.apply(getHost(), getHostType()) : null);, +		PathComponent pathTo = this.path.encode(encoder);, +		MultiValueMap<String, String> paramsTo = encodeQueryParams(encoder);, +, +		return new HierarchicalUriComponents(schemeTo, fragmentTo, userInfoTo,, +				hostTo, this.port, pathTo, paramsTo, EncodeState.TEMPLATE_ENCODED, this.variableEncoder);, +	}, +, +		if (this.encodeState.isEncoded()) {, +		BiFunction<String, Type, String> encoder = (s, type) -> encodeUriComponent(s, charset, type);, +		PathComponent pathTo = this.path.encode(encoder);, +		MultiValueMap<String, String> paramsTo = encodeQueryParams(encoder);, +, +		return new HierarchicalUriComponents(schemeTo, fragmentTo, userInfoTo,, +				hostTo, this.port, pathTo, paramsTo, EncodeState.FULLY_ENCODED, null);, +	private MultiValueMap<String, String> encodeQueryParams(BiFunction<String, Type, String> encoder) {, +			String name = encoder.apply(key, Type.QUERY_PARAM);, +				encodedValues.add(encoder.apply(value, Type.QUERY_PARAM));, +	 * Check if any of the URI components contain any illegal characters., +		Assert.state(!this.encodeState.equals(EncodeState.FULLY_ENCODED),, +				"URI components already encoded, and could not possibly contain '{' or '}'.");, +, +		String schemeTo = expandUriComponent(getScheme(), uriVariables, this.variableEncoder);, +		String fragmentTo = expandUriComponent(getFragment(), uriVariables, this.variableEncoder);, +		String userInfoTo = expandUriComponent(this.userInfo, uriVariables, this.variableEncoder);, +		String hostTo = expandUriComponent(this.host, uriVariables, this.variableEncoder);, +		String portTo = expandUriComponent(this.port, uriVariables, this.variableEncoder);, +		PathComponent pathTo = this.path.expand(uriVariables, this.variableEncoder);, +		return new HierarchicalUriComponents(schemeTo, fragmentTo, userInfoTo,, +				hostTo, portTo, pathTo, paramsTo, this.encodeState, this.variableEncoder);, +			String name = expandUriComponent(key, queryVariables, this.variableEncoder);, +				expandedValues.add(expandUriComponent(value, queryVariables, this.variableEncoder));, +		FullPathComponent path = new FullPathComponent(normalizedPath);, +				path, this.queryParams, this.encodeState, this.variableEncoder);, +			if (this.encodeState.isEncoded()) {, +	private enum EncodeState {, +, +		/**, +		 * Not encoded., +		 */, +		RAW,, +, +		/**, +		 * URI vars expanded first and then each URI component encoded by, +		 * quoting only illegal characters within that URI component., +		 */, +		FULLY_ENCODED,, +, +		/**, +		 * URI template encoded first by quoting illegal characters only, and, +		 * then URI vars encoded more strictly when expanded, by quoting both, +		 * illegal chars and chars with reserved meaning., + 		 */, +		TEMPLATE_ENCODED;, +, +, +		public boolean isEncoded() {]