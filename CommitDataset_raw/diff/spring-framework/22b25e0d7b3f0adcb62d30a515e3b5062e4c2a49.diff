[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/AnnotationAdapter.java, +	 *        {@link AsmUtils#ASM_EMPTY_VISITOR}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/AnnotationAdapter.java, +	 *        {@link AsmUtils#ASM_EMPTY_VISITOR}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/AsmUtils.java, +import static java.lang.String.*;, +import static org.springframework.util.ClassUtils.*;, +, +import java.io.FileNotFoundException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Proxy;, +import org.springframework.util.ClassUtils;, + * Various utility methods commonly used when interacting with ASM, classloading, + * and creating {@link MutableAnnotation} instances., + * , + * @author Chris Beams, +	public static final EmptyVisitor ASM_EMPTY_VISITOR = new EmptyVisitor();, +	public static String convertAsmTypeDescriptorToClassName(String typeDescriptor) {, +	public static String getReturnTypeFromAsmMethodDescriptor(String methodDescriptor) {, +		return convertAsmTypeDescriptorToClassName(returnTypeDescriptor);, +	public static ClassReader newAsmClassReader(String pathToClass, ClassLoader classLoader) {, +		InputStream is = getClassAsStream(pathToClass, classLoader);, +		return newAsmClassReader(is);, +	public static ClassReader newAsmClassReader(InputStream is) {, +	/**, +	 * Uses the default ClassLoader to load <var>pathToClass</var>. Appends '.class' to, +	 * pathToClass before attempting to load., +	 * , +	 * @param pathToClass resource path to class, not including .class suffix. e.g.:, +	 *        com/acme/MyClass, +	 * , +	 * @return inputStream for <var>pathToClass</var>, +	 * , +	 * @throws RuntimeException if <var>pathToClass</var> does not exist, +	 */, +	public static InputStream getClassAsStream(String pathToClass, ClassLoader classLoader) {, +		String classFileName = pathToClass + ClassUtils.CLASS_FILE_SUFFIX;, +	, +		InputStream is = classLoader.getResourceAsStream(classFileName);, +	, +		if (is == null), +			throw new RuntimeException(, +					new FileNotFoundException("Class file [" + classFileName + "] not found"));, +	, +		return is;, +	}, +, +	/**, +	 * Loads the specified class using the default class loader, rethrowing any, +	 * {@link ClassNotFoundException} as an unchecked exception., +	 * , +	 * @param <T> type of class to be returned, +	 * @param fqClassName fully-qualified class name, +	 * , +	 * @return newly loaded class instance, +	 * , +	 * @throws IllegalArgumentException if configClassName cannot be loaded., +	 * , +	 * @see #loadClass(String), +	 * @see #loadToolingSafeClass(String), +	 * @see ClassUtils#getDefaultClassLoader(), +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> Class<? extends T> loadRequiredClass(String fqClassName) {, +		try {, +			return (Class<? extends T>) getDefaultClassLoader().loadClass(fqClassName);, +		} catch (ClassNotFoundException ex) {, +			throw new IllegalArgumentException(format(, +			        "Class [%s] could not be loaded, check your CLASSPATH.", fqClassName), ex);, +		}, +	}, +, +	/**, +	 * Loads the specified class using the default class loader, gracefully handling any, +	 * {@link ClassNotFoundException} that may be thrown by issuing a WARN level logging, +	 * statement and return null. This functionality is specifically implemented to, +	 * accomodate tooling (Spring IDE) concerns, where user-defined types will not be, +	 * available to the tooling., +	 * <p>, +	 * Because {@link ClassNotFoundException} is compensated for by returning null, callers, +	 * must take care to handle the null case appropriately., +	 * <p>, +	 * In cases where the WARN logging statement is not desired, use the, +	 * {@link #loadClass(String)} method, which returns null but issues no logging, +	 * statements., +	 * <p>, +	 * This method should only ever return null in the case of a user-defined type be, +	 * processed at tooling time. Therefore, tooling may not be able to represent any custom, +	 * annotation semantics, but JavaConfig itself will not have any problem loading and, +	 * respecting them at actual runtime., +	 * , +	 * @param <T> type of class to be returned, +	 * @param fqClassName fully-qualified class name, +	 * , +	 * @return newly loaded class, null if class could not be found., +	 * , +	 * @see #loadClass(String), +	 * @see #loadRequiredClass(String), +	 * @see ClassUtils#getDefaultClassLoader(), +	 */]