[+++ b/src/docs/asciidoc/data-access.adoc, +		xmlns:oxm="http://www.springframework.org/schema/oxm" <1>, +    xsi:schemaLocation="http://www.springframework.org/schema/beans, +      http://www.springframework.org/schema/beans/spring-beans.xsd, +      http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd"> <2>, +<2> Specify the `oxm` schema location., +++ b/src/docs/asciidoc/data-access.adoc, +		xmlns:oxm="http://www.springframework.org/schema/oxm" <1>, +    xsi:schemaLocation="http://www.springframework.org/schema/beans, +      http://www.springframework.org/schema/beans/spring-beans.xsd, +      http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd"> <2>, +<2> Specify the `oxm` schema location., +++ b/src/docs/asciidoc/integration-appendix.adoc, +=== The `jee` Schema, +The `jee` elements deal with issues related to Java EE (Java Enterprise Edition) configuration,, +To use the elements in the `jee` schema, you need to have the following preamble at the top, +of your Spring XML configuration file. The text in the following snippet references the, +correct schema so that the elements in the `jee` namespace are available to you:, +====, +			__http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd"__>, +			<!-- bean definitions here -->, +====, +, +The following example shows how to use JNDI to look up a data source without the `jee`, +schema:, +====, +====, +The following example shows how to use JNDI to look up a data source with the `jee`, +schema:, +====, +====, +, +==== `<jee:jndi-lookup/>` (with Single JNDI Environment Setting), +The following example shows how to use JNDI to look up an environment variable without, +`jee`:, +====, +====, +The following example shows how to use JNDI to look up an environment variable with `jee`:, +		<jee:environment>ping=pong</jee:environment>, +	</jee:jndi-lookup>, +----, +, +, +[[xsd-schemas-jee-jndi-lookup-evironment-multiple]], +==== `<jee:jndi-lookup/>` (with Multiple JNDI Environment Settings), +, +The following example shows how to use JNDI to look up multiple environment variables, +without `jee`:, +, +====, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<bean id="simple" class="org.springframework.jndi.JndiObjectFactoryBean">, +		<property name="jndiName" value="jdbc/MyDataSource"/>, +		<property name="jndiEnvironment">, +			<props>, +				<prop key="sing">song</prop>, +				<prop key="ping">pong</prop>, +			</props>, +		</property>, +	</bean>, +----, +====, +, +The following example shows how to use JNDI to look up multiple environment variables with, +`jee`:, +, +====, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<jee:jndi-lookup id="simple" jndi-name="jdbc/MyDataSource">, +			sing=song, +====, +==== `<jee:jndi-lookup/>` (Complex), +The following example shows how to use JNDI to look up a data source and a number of, +different properties without `jee`:, +====, +		<property name="expectedType" value="com.myapp.DefaultThing"/>, +		<property name="proxyInterface" value="com.myapp.Thing"/>, +====, +The following example shows how to use JNDI to look up a data source and a number of, +different properties with `jee`:, +====, +			expected-type="com.myapp.DefaultThing", +			proxy-interface="com.myapp.Thing"/>, +====, +, +==== `<jee:local-slsb/>` (Simple), +The `<jee:local-slsb/>` element configures a reference to a local EJB Stateless SessionBean., +The following example shows how to configures a reference to a local EJB Stateless, +SessionBean without `jee`:, +====, +====, +The following example shows how to configures a reference to a local EJB Stateless, +SessionBean with `jee`:, +====, +====, +]