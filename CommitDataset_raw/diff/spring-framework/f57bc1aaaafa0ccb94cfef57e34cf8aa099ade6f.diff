[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java, + * Copyright 2002-2013 the original author or authors., +import java.io.IOException;, + * @author Juergen Hoeller, +	 * Default content type: "application/json"., +	 * Overridable through {@link #setContentType}., +, +	 * Construct a new {@code MappingJackson2JsonView}, setting the content type to {@code application/json}., +	 * Set the {@code ObjectMapper} for this view., +	 * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} will be used., +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of, +	 * the JSON serialization process. The other option is to use Jackson's provided annotations, +	 * on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary., +	/**, +	 * Return the {@code ObjectMapper} for this view., +	 */, +	public final ObjectMapper getObjectMapper() {, +		return this.objectMapper;, +	 * Set the {@code JsonEncoding} for this view., +	 * Return the {@code JsonEncoding} for this view., +	 */, +	public final JsonEncoding getEncoding() {, +		return this.encoding;, +	}, +, +	/**, +	 * Default is {@code false}., +	 * Whether to use the default pretty printer when writing JSON., +	private void configurePrettyPrint() {, +		if (this.prettyPrint != null) {, +			this.objectMapper.configure(SerializationFeature.INDENT_OUTPUT, this.prettyPrint);, +		}, +	}, +, +	public final Set<String> getModelKeys() {, +	public final Set<String> getRenderedAttributes() {, +, +		OutputStream stream = (this.updateContentLength ? createTemporaryOutputStream() : response.getOutputStream());, +		writeContent(stream, value, this.prefixJson);, +	 * Filter out undesired attributes from the given model., +	 * @return the value to be rendered, +	/**, +	 * Write the actual JSON content to the stream., +	 * @param stream the output stream to use, +	 * @param value the value to be rendered, as returned from {@link #filterModel}, +	 * @param prefixJson whether the JSON output by this view should be prefixed, +	 * with <tt>"{} && "</tt> (as indicated through {@link #setPrefixJson}), +	 * @throws IOException if writing failed, +	 */, +	protected void writeContent(OutputStream stream, Object value, boolean prefixJson) throws IOException {, +		JsonGenerator generator = this.objectMapper.getJsonFactory().createJsonGenerator(stream, this.encoding);, +, +		// A workaround for JsonGenerators not applying serialization features, +		// https://github.com/FasterXML/jackson-databind/issues/12, +		if (this.objectMapper.isEnabled(SerializationFeature.INDENT_OUTPUT)) {, +			generator.useDefaultPrettyPrinter();, +		}, +, +		if (prefixJson) {, +			generator.writeRaw("{} && ");, +		}, +		this.objectMapper.writeValue(generator, value);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java, + * Copyright 2002-2013 the original author or authors., +import java.io.IOException;, + * @author Juergen Hoeller, +	 * Default content type: "application/json"., +	 * Overridable through {@link #setContentType}., +, +	 * Construct a new {@code MappingJackson2JsonView}, setting the content type to {@code application/json}., +	 * Set the {@code ObjectMapper} for this view., +	 * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} will be used., +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of, +	 * the JSON serialization process. The other option is to use Jackson's provided annotations, +	 * on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary., +	/**, +	 * Return the {@code ObjectMapper} for this view., +	 */, +	public final ObjectMapper getObjectMapper() {, +		return this.objectMapper;, +	 * Set the {@code JsonEncoding} for this view., +	 * Return the {@code JsonEncoding} for this view., +	 */, +	public final JsonEncoding getEncoding() {, +		return this.encoding;, +	}, +, +	/**, +	 * Default is {@code false}., +	 * Whether to use the default pretty printer when writing JSON., +	private void configurePrettyPrint() {, +		if (this.prettyPrint != null) {, +			this.objectMapper.configure(SerializationFeature.INDENT_OUTPUT, this.prettyPrint);, +		}, +	}, +, +	public final Set<String> getModelKeys() {, +	public final Set<String> getRenderedAttributes() {]