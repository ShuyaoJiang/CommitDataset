[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.security.AccessControlContext;, +import java.security.AccessController;, +import java.security.PrivilegedActionException;, +import java.security.PrivilegedExceptionAction;, +	/** The security context used for invoking the property methods */, +	private AccessControlContext acc;, +, +	/**, +	 * Set the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 * , +	 * @param acc, +	 */, +	public void setSecurityContext(AccessControlContext acc) {, +		this.acc = acc;, +	}, +, +		final Method readMethod = pd.getReadMethod();, +			, +			Object value = null; , +				, +			if (System.getSecurityManager() != null) {, +				try {, +					value = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {, +						public Object run() throws Exception {, +							return readMethod.invoke(object, (Object[]) null);, +						}, +					},acc);, +				} catch (PrivilegedActionException pae) {, +					throw pae.getException();, +				}, +			}, +			else {, +					value = readMethod.invoke(object, (Object[]) null);, +			}, +				, +		, +		catch (Exception ex) {, +			throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,, +					"Invalid index in property path '" + propertyName + "'", ex);, +		}, +							final Method readMethod = pd.getReadMethod();, +								if (System.getSecurityManager() != null) {, +									oldValue = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {, +										public Object run() throws Exception {, +											return readMethod.invoke(object);, +										}, +									},acc);, +								}, +								else {, +									oldValue = readMethod.invoke(object);, +								}, +								if (ex instanceof PrivilegedActionException) {, +									ex = ((PrivilegedActionException) ex).getException();, +								}, +				final Method writeMethod = pd.getWriteMethod();, +				final Object value = valueToApply;, +				, +				if (System.getSecurityManager() != null) {, +					try {, +						AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {, +							public Object run() throws Exception {, +								writeMethod.invoke(object, value);, +								return null;, +							}, +						},acc);, +					} catch (PrivilegedActionException ex) {, +						throw ex.getException();, +					}, +				}, +				else {, +					writeMethod.invoke(object, value);, +				}, +					, +			catch (Exception ex) {, +				PropertyChangeEvent pce =, +					new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new MethodInvocationException(pce, ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.security.AccessControlContext;, +import java.security.AccessController;, +import java.security.PrivilegedActionException;, +import java.security.PrivilegedExceptionAction;, +	/** The security context used for invoking the property methods */, +	private AccessControlContext acc;, +, +	/**, +	 * Set the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 * , +	 * @param acc, +	 */, +	public void setSecurityContext(AccessControlContext acc) {, +		this.acc = acc;, +	}, +, +		final Method readMethod = pd.getReadMethod();, +			]