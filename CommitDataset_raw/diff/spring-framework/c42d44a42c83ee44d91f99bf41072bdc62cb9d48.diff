[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, + * Implementation of the {@link ServerRequest} interface that can be subclassed, + * to adapt the request to a {@link HandlerFunction handler function}., + * All methods default to calling through to the wrapped request., +	private final ServerRequest delegate;, +	 * @param delegate the request to wrap, +	public ServerRequestWrapper(ServerRequest delegate) {, +		Assert.notNull(delegate, "Delegate must not be null");, +		this.delegate = delegate;, +, +		return this.delegate;, +		return this.delegate.method();, +		return this.delegate.uri();, +		return this.delegate.path();, +		return this.delegate.headers();, +		return this.delegate.body(extractor);, +		return this.delegate.body(extractor, hints);, +		return this.delegate.bodyToMono(elementClass);, +		return this.delegate.bodyToFlux(elementClass);, +		return this.delegate.attribute(name);, +		return this.delegate.queryParam(name);, +		return this.delegate.queryParams(name);, +		return this.delegate.pathVariable(name);, +		return this.delegate.pathVariables();, +		return this.delegate.session();, +, +	 * Implementation of the {@code Headers} interface that can be subclassed, +	 * to adapt the headers to a {@link HandlerFunction handler function}., +	 * All methods default to calling through to the wrapped headers., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, + * Implementation of the {@link ServerRequest} interface that can be subclassed, + * to adapt the request to a {@link HandlerFunction handler function}., + * All methods default to calling through to the wrapped request., +	private final ServerRequest delegate;, +	 * @param delegate the request to wrap, +	public ServerRequestWrapper(ServerRequest delegate) {, +		Assert.notNull(delegate, "Delegate must not be null");, +		this.delegate = delegate;, +, +		return this.delegate;, +		return this.delegate.method();, +		return this.delegate.uri();, +		return this.delegate.path();, +		return this.delegate.headers();, +		return this.delegate.body(extractor);, +		return this.delegate.body(extractor, hints);, +		return this.delegate.bodyToMono(elementClass);, +		return this.delegate.bodyToFlux(elementClass);, +		return this.delegate.attribute(name);, +		return this.delegate.queryParam(name);, +		return this.delegate.queryParams(name);, +		return this.delegate.pathVariable(name);, +		return this.delegate.pathVariables();, +		return this.delegate.session();, +, +	 * Implementation of the {@code Headers} interface that can be subclassed, +	 * to adapt the headers to a {@link HandlerFunction handler function}., +	 * All methods default to calling through to the wrapped headers., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, + * Copyright 2002-2017 the original author or authors., + * <p>Also an implementation of {@code Subscriber&lt;Void&gt;} so it can be used as, +	 * Alternative constructor with completion {@code Mono&lt;Void&gt;} to propagate, +, +			return (message.getPayload().readableByteCount() == 0);, +			return (this.isReady && this.currentData != null);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, + * Implementation of the {@link ServerRequest} interface that can be subclassed, + * to adapt the request to a {@link HandlerFunction handler function}., + * All methods default to calling through to the wrapped request., +	private final ServerRequest delegate;, +	 * @param delegate the request to wrap, +	public ServerRequestWrapper(ServerRequest delegate) {, +		Assert.notNull(delegate, "Delegate must not be null");, +		this.delegate = delegate;, +, +		return this.delegate;, +		return this.delegate.method();, +		return this.delegate.uri();, +		return this.delegate.path();, +		return this.delegate.headers();, +		return this.delegate.body(extractor);, +		return this.delegate.body(extractor, hints);, +		return this.delegate.bodyToMono(elementClass);, +		return this.delegate.bodyToFlux(elementClass);, +		return this.delegate.attribute(name);, +		return this.delegate.queryParam(name);, +		return this.delegate.queryParams(name);, +		return this.delegate.pathVariable(name);, +		return this.delegate.pathVariables();, +		return this.delegate.session();, +, +	 * Implementation of the {@code Headers} interface that can be subclassed, +	 * to adapt the headers to a {@link HandlerFunction handler function}., +	 * All methods default to calling through to the wrapped headers., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, + * Copyright 2002-2017 the original author or authors., + * <p>Also an implementation of {@code Subscriber&lt;Void&gt;} so it can be used as, +	 * Alternative constructor with completion {@code Mono&lt;Void&gt;} to propagate, +, +			return (message.getPayload().readableByteCount() == 0);]