[+++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Mono<Void> setBody(Publisher<DataBuffer> body);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Mono<Void> setBody(Publisher<DataBuffer> body);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +	public Mono<Void> setBody(Publisher<DataBuffer> publisher) {, +	protected abstract Mono<Void> setBodyInternal(Publisher<DataBuffer> publisher);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Mono<Void> setBody(Publisher<DataBuffer> body);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +	public Mono<Void> setBody(Publisher<DataBuffer> publisher) {, +	protected abstract Mono<Void> setBodyInternal(Publisher<DataBuffer> publisher);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBufferAllocator;, +	private final DataBufferAllocator allocator;, +	public ReactorHttpHandlerAdapter(HttpHandler httpHandler,, +			DataBufferAllocator allocator) {, +		this.allocator = allocator;, +		ReactorServerHttpRequest adaptedRequest =, +				new ReactorServerHttpRequest(channel, allocator);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Mono<Void> setBody(Publisher<DataBuffer> body);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +	public Mono<Void> setBody(Publisher<DataBuffer> publisher) {, +	protected abstract Mono<Void> setBodyInternal(Publisher<DataBuffer> publisher);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBufferAllocator;, +	private final DataBufferAllocator allocator;, +	public ReactorHttpHandlerAdapter(HttpHandler httpHandler,, +			DataBufferAllocator allocator) {, +		this.allocator = allocator;, +		ReactorServerHttpRequest adaptedRequest =, +				new ReactorServerHttpRequest(channel, allocator);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	private final DataBufferAllocator allocator;, +	public ReactorServerHttpRequest(HttpChannel<Buffer, ?> request,, +			DataBufferAllocator allocator) {, +		Assert.notNull("'request' must not be null");, +		Assert.notNull(allocator, "'allocator' must not be null");, +		this.allocator = allocator;, +	public Flux<DataBuffer> getBody() {, +		return Flux.from(this.channel.input()).map(bytes -> {, +			ByteBuffer byteBuffer = bytes.byteBuffer();, +			return allocator.wrap(byteBuffer);, +		});, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpInputMessage.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +, +	Flux<DataBuffer> getBody();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors.]