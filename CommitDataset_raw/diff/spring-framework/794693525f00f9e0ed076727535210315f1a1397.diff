[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctionBuilder.java, +import java.util.function.Predicate;, +	public RouterFunctions.Builder filterBefore(, +	public RouterFunctions.Builder filterAfter(, +	public RouterFunctions.Builder filterException(Predicate<? super Throwable> predicate,, +			BiFunction<? super Throwable, ServerRequest, Mono<ServerResponse>> responseProvider) {, +, +		Assert.notNull(predicate, "'exceptionType' must not be null");, +		Assert.notNull(responseProvider, "'fallback' must not be null");, +				.onErrorResume(predicate, t -> responseProvider.apply(t, request)));, +	}, +, +	@Override, +	public <T extends Throwable> RouterFunctions.Builder filterException(, +			Class<T> exceptionType,, +			BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider) {, +		Assert.notNull(exceptionType, "'exceptionType' must not be null");, +		Assert.notNull(responseProvider, "'fallback' must not be null");, +, +		return filter((request, next) -> next.handle(request), +				.onErrorResume(exceptionType, t -> responseProvider.apply(t, request)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctionBuilder.java, +import java.util.function.Predicate;, +	public RouterFunctions.Builder filterBefore(, +	public RouterFunctions.Builder filterAfter(, +	public RouterFunctions.Builder filterException(Predicate<? super Throwable> predicate,, +			BiFunction<? super Throwable, ServerRequest, Mono<ServerResponse>> responseProvider) {, +, +		Assert.notNull(predicate, "'exceptionType' must not be null");, +		Assert.notNull(responseProvider, "'fallback' must not be null");, +				.onErrorResume(predicate, t -> responseProvider.apply(t, request)));, +	}, +, +	@Override, +	public <T extends Throwable> RouterFunctions.Builder filterException(, +			Class<T> exceptionType,, +			BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider) {, +		Assert.notNull(exceptionType, "'exceptionType' must not be null");, +		Assert.notNull(responseProvider, "'fallback' must not be null");, +, +		return filter((request, next) -> next.handle(request), +				.onErrorResume(exceptionType, t -> responseProvider.apply(t, request)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +import java.util.function.Predicate;, +		 *     .filterBefore(request -> {, +		Builder filterBefore(Function<ServerRequest, Mono<ServerRequest>> requestProcessor);, +		 *     .filterAfter((request, response) -> {, +		Builder filterAfter(BiFunction<ServerRequest, ServerResponse, Mono<ServerResponse>> responseProcessor);, +		/**, +		 * Filters all exceptions that match the predicate by applying the given response provider, +		 * function., +		 * <p>For instance, the following example creates a filter that returns a 500 response, +		 * status when an {@code IllegalStateException} occurs., +		 * <pre class="code">, +		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =, +		 *   RouterFunctions.builder(), +		 *     .routeGet("/user", this::listUsers), +		 *     .filterException(e -> e instanceof IllegalStateException,, +		 *       (e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build()), +		 *     .build();, +		 * </pre>, +		 * @param predicate the type of exception to filter, +		 * @param responseProvider a function that creates a response, +		 * @return this builder, +		 */, +		Builder filterException(Predicate<? super Throwable> predicate,, +				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider);, +, +		/**, +		 * Filters all exceptions of the given type by applying the given response provider, +		 * function., +		 * <p>For instance, the following example creates a filter that returns a 500 response, +		 * status when an {@code IllegalStateException} occurs., +		 * <pre class="code">, +		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =, +		 *   RouterFunctions.builder(), +		 *     .routeGet("/user", this::listUsers), +		 *     .filterException(IllegalStateException.class,, +		 *       (e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build()), +		 *     .build();, +		 * </pre>, +		 * @param exceptionType the type of exception to filter, +		 * @param responseProvider a function that creates a response, +		 * @return this builder, +		 */, +		<T extends Throwable> Builder filterException(Class<T> exceptionType,, +				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctionBuilder.java, +import java.util.function.Predicate;, +	public RouterFunctions.Builder filterBefore(, +	public RouterFunctions.Builder filterAfter(, +	public RouterFunctions.Builder filterException(Predicate<? super Throwable> predicate,, +			BiFunction<? super Throwable, ServerRequest, Mono<ServerResponse>> responseProvider) {, +, +		Assert.notNull(predicate, "'exceptionType' must not be null");, +		Assert.notNull(responseProvider, "'fallback' must not be null");, +				.onErrorResume(predicate, t -> responseProvider.apply(t, request)));, +	}, +, +	@Override]