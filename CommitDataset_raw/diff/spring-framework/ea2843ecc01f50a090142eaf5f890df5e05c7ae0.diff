[+++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, + * @author Juergen Hoeller, +	 * {@link Serializable} {@link InvocationHandler} used by the proxied {@link Type}., +		private transient Method method;, +, +		private transient volatile Object result;, +			this.method = method;, +			Object result = this.result;, +			if (result == null) {, +				// Lazy invocation of the target method, +				result = ReflectionUtils.invokeMethod(this.method, this.provider.getType());, +				// Cache the result for further calls, +				this.result = result;, +			return (result instanceof Type[] ? ((Type[]) result)[this.index] : (Type) result);, +			this.method = ReflectionUtils.findMethod(this.provider.getType().getClass(), this.methodName);, +			Assert.state(this.method.getReturnType() == Type.class || this.method.getReturnType() == Type[].class);]