[+++ b/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java, +		if (this.statusMapping.containsKey(statusCode)) {, +			return this.statusMapping.get(statusCode) != null;, +		}, +		else if (this.seriesMapping.containsKey(statusCode.series())) {, +			return this.seriesMapping.get(statusCode.series()) != null;, +		}, +		else {, +			return super.hasError(statusCode);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java, +		if (this.statusMapping.containsKey(statusCode)) {, +			return this.statusMapping.get(statusCode) != null;, +		}, +		else if (this.seriesMapping.containsKey(statusCode.series())) {, +			return this.seriesMapping.get(statusCode.series()) != null;, +		}, +		else {, +			return super.hasError(statusCode);, +		}, +++ b/spring-web/src/test/java/org/springframework/web/client/ExtractingResponseErrorHandlerTests.java, +	public void hasErrorOverride() throws Exception {, +		this.errorHandler.setSeriesMapping(Collections, +				.singletonMap(HttpStatus.Series.CLIENT_ERROR, null));, +, +		given(this.response.getStatusCode()).willReturn(HttpStatus.I_AM_A_TEAPOT);, +		assertTrue(this.errorHandler.hasError(this.response));, +, +		given(this.response.getStatusCode()).willReturn(HttpStatus.NOT_FOUND);, +		assertFalse(this.errorHandler.hasError(this.response));, +, +		given(this.response.getStatusCode()).willReturn(HttpStatus.OK);, +		assertFalse(this.errorHandler.hasError(this.response));, +	}, +, +	@Test, +]