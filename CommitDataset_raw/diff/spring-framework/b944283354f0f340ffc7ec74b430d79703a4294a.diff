[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,, +								getUserDeclaredConstructor(candidate), autowiring);, +			for (Method candidate : candidates) {, +	protected Constructor<?> getUserDeclaredConstructor(Constructor<?> constructor) {, +		Class<?> declaringClass = constructor.getDeclaringClass();, +		Class<?> userClass = ClassUtils.getUserClass(declaringClass);, +		if (userClass != declaringClass) {, +			try {, +				return userClass.getDeclaredConstructor(constructor.getParameterTypes());, +			}, +			catch (NoSuchMethodException ex) {, +				// No equivalent constructor on user class (superclass)..., +				// Let's proceed with the given constructor as we usually would., +			}, +		}, +		return constructor;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,, +								getUserDeclaredConstructor(candidate), autowiring);, +			for (Method candidate : candidates) {, +	protected Constructor<?> getUserDeclaredConstructor(Constructor<?> constructor) {, +		Class<?> declaringClass = constructor.getDeclaringClass();, +		Class<?> userClass = ClassUtils.getUserClass(declaringClass);, +		if (userClass != declaringClass) {, +			try {, +				return userClass.getDeclaredConstructor(constructor.getParameterTypes());, +			}, +			catch (NoSuchMethodException ex) {, +				// No equivalent constructor on user class (superclass)..., +				// Let's proceed with the given constructor as we usually would., +			}, +		}, +		return constructor;, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.ObjectFactory;, +	public void testObjectFactoryConstructorWithTypeVariable() {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(, +				new ClassPathResource("annotation-config.xml", ObjectFactoryConstructorConfig.class));, +		GenericApplicationContext ctx = new GenericApplicationContext(factory);, +		ctx.registerBeanDefinition("config1", new RootBeanDefinition(ObjectFactoryConstructorConfig.class));, +		ctx.registerBeanDefinition("config2", new RootBeanDefinition(ColorConfig.class));, +		ctx.refresh();, +		assertSame(ctx.getBean(ObjectFactoryConstructorConfig.class).colour, ctx.getBean(Colour.class));, +	}, +, +	@Test, +	static class ObjectFactoryConstructorConfig {, +, +		Colour colour;, +, +		// @Autowired, +		ObjectFactoryConstructorConfig(ObjectFactory<Colour> colourFactory) {, +			this.colour = colourFactory.getObject();, +		}, +	}, +, +, +	@Configuration]