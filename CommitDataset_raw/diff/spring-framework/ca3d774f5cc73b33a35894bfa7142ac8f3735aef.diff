[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +	private boolean detectHandlerMethodsInAncestorContexts = false;, +, +	 * Whether to detect handler methods in beans in ancestor ApplicationContexts., +	 * <p>Default is "false": Only beans in the current ApplicationContext are, +	 * considered, i.e. only in the context that this HandlerMapping itself, +	 * is defined in (typically the current DispatcherServlet's context)., +	 * <p>Switch this flag on to detect handler beans in ancestor contexts, +	 * (typically the Spring root WebApplicationContext) as well., +	 */, +	public void setDetectHandlerMethodsInAncestorContexts(boolean detectHandlerMethodsInAncestorContexts) {, +		this.detectHandlerMethodsInAncestorContexts = detectHandlerMethodsInAncestorContexts;, +	}, +	, +	/**, +		, +		String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?, +				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :, +				getApplicationContext().getBeanNamesForType(Object.class));, +, +		for (String beanName : beanNames) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +	private boolean detectHandlerMethodsInAncestorContexts = false;, +, +	 * Whether to detect handler methods in beans in ancestor ApplicationContexts., +	 * <p>Default is "false": Only beans in the current ApplicationContext are, +	 * considered, i.e. only in the context that this HandlerMapping itself, +	 * is defined in (typically the current DispatcherServlet's context)., +	 * <p>Switch this flag on to detect handler beans in ancestor contexts, +	 * (typically the Spring root WebApplicationContext) as well., +	 */, +	public void setDetectHandlerMethodsInAncestorContexts(boolean detectHandlerMethodsInAncestorContexts) {, +		this.detectHandlerMethodsInAncestorContexts = detectHandlerMethodsInAncestorContexts;, +	}, +	, +	/**, +		, +		String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?, +				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :, +				getApplicationContext().getBeanNamesForType(Object.class));, +, +		for (String beanName : beanNames) {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/handler/HandlerMethodMappingTests.java, +import org.springframework.context.support.StaticApplicationContext;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.annotation.RequestMapping;, +	@Test, +	public void testDetectHandlerMethodsInAncestorContexts() {, +		StaticApplicationContext cxt = new StaticApplicationContext();, +		cxt.registerSingleton("myHandler", MyHandler.class);, +		, +		AbstractHandlerMethodMapping<String> mapping1 = new MyHandlerMethodMapping();, +		mapping1.setApplicationContext(new StaticApplicationContext(cxt));, +, +		assertEquals(0, mapping1.getHandlerMethods().size());, +, +		AbstractHandlerMethodMapping<String> mapping2 = new MyHandlerMethodMapping();, +		mapping2.setDetectHandlerMethodsInAncestorContexts(true);, +		mapping2.setApplicationContext(new StaticApplicationContext(cxt));, +, +		assertEquals(2, mapping2.getHandlerMethods().size());, +	}, +, +	, +	@Controller, +	static class MyHandler {, +		@RequestMapping, +		@RequestMapping]