[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.condition;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +import edu.emory.mathcs.backport.java.util.Collections;, +, +/**, + * Implements the {@link RequestCondition} contract by delegating to multiple, + * {@code RequestCondition} types and using a logical conjunction (' && ') to, + * ensure all conditions match a given request., + *, + * <p>When {@code CompositeRequestCondition} instances are combined or compared, + * they are expected to (a) contain the same number of conditions and (b) that, + * conditions in the respective index are of the same type. It is acceptable to, + * provide {@code null} conditions or no conditions at all to the constructor., + *, + * @author Rossen Stoyanchev, + * @since 3.2, + */, +public class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition> {, +, +	private final RequestConditionHolder[] requestConditions;, +, +	/**, +	 * Create an instance with 0 or more {@code RequestCondition} types. It is, +	 * important to create {@code CompositeRequestCondition} instances with the, +	 * same number of conditions so they may be compared and combined., +	 * It is acceptable to provide {@code null} conditions., +	 */, +	public CompositeRequestCondition(RequestCondition<?>... requestConditions) {, +		this.requestConditions = wrap(requestConditions);, +	}, +, +	private RequestConditionHolder[] wrap(RequestCondition<?>... rawConditions) {, +		RequestConditionHolder[] wrappedConditions = new RequestConditionHolder[rawConditions.length];, +		for (int i = 0; i < rawConditions.length; i++) {, +			wrappedConditions[i] = new RequestConditionHolder(rawConditions[i]);, +		}, +		return wrappedConditions;, +	}, +, +	private CompositeRequestCondition(RequestConditionHolder[] requestConditions) {, +		this.requestConditions = requestConditions;, +	}, +, +	/**, +	 * Whether this instance contains 0 conditions or not., +	 */, +	public boolean isEmpty() {, +		return ObjectUtils.isEmpty(this.requestConditions);, +	}, +, +	/**, +	 * Return the underlying conditions, possibly empty but never {@code null}., +	 */, +	public List<RequestCondition<?>> getConditions() {, +		return unwrap();, +	}, +, +	private List<RequestCondition<?>> unwrap() {, +		List<RequestCondition<?>> result = new ArrayList<RequestCondition<?>>();, +		for (RequestConditionHolder holder : this.requestConditions) {, +			result.add(holder.getCondition());, +		}, +		return result;, +	}, +, +	@Override, +	protected Collection<?> getContent() {, +		return (isEmpty()) ? Collections.emptyList() : getConditions();, +	}, +, +	@Override, +	protected String getToStringInfix() {, +		return " && ";, +	}]