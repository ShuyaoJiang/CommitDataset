[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeConverter.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a conversion with additional context about the targetType to convert to., +	 * @param targetType context about the target type to convert to, +	boolean canConvert(Class<?> sourceType, TypeDescriptor<?> targetType);, +	 * @param targetType context about the target type to convert to, +	 * @return the converted object, an instance of {@link TypeDescriptor#getType()}</code>, or <code>null</code> if a null source was provided, +	<S, T> T convert(S source, TypeDescriptor<T> targetType);, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeConverter.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a conversion with additional context about the targetType to convert to., +	 * @param targetType context about the target type to convert to, +	boolean canConvert(Class<?> sourceType, TypeDescriptor<?> targetType);, +	 * @param targetType context about the target type to convert to, +	 * @return the converted object, an instance of {@link TypeDescriptor#getType()}</code>, or <code>null</code> if a null source was provided, +	<S, T> T convert(S source, TypeDescriptor<T> targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +/*, + * Copyright 2004-2009 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.core.convert;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.Collection;, +import java.util.Map;, +, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.core.MethodParameter;, +import org.springframework.util.Assert;, +, +// TODO doesn't support more than depth of one (eg. Map<String,List<Foo>> or List<String>[]), +/**, + * Context about a type to convert to., + * @author Keith Donald, + * @author Andy Clement, + */, +public class TypeDescriptor<T> {, +, +	/**, +	 * Constant value for the null object, +	 */, +	@SuppressWarnings("unchecked"), +	public final static TypeDescriptor NULL = new TypeDescriptor((Class<?>) null);, +, +	private MethodParameter methodParameter;, +, +	private Field field;, +, +	private Annotation[] cachedFieldAnnotations;, +, +	private Class<?> type;, +, +	/**, +	 * Creates a new descriptor for the given type., +	 * Use this constructor when a conversion point comes from a source such as a Map or collection, where no additional context is available., +	 * @param type the actual type, +	 */, +	public TypeDescriptor(Class<?> type) {, +		this.type = type;, +	}, +, +	/**, +	 * Create a new type descriptor from a method or constructor parameter., +	 * Use this constructor when a target conversion point originates from a method parameter, such as a setter method argument., +	 * @param methodParameter the MethodParameter to wrap, +	 */, +	public TypeDescriptor(MethodParameter methodParameter) {, +		Assert.notNull(methodParameter, "MethodParameter must not be null");, +		this.methodParameter = methodParameter;, +	}, +, +	/**, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 */, +	public TypeDescriptor(Field field) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +	}, +, +	/**, +	 * Determine the declared (non-generic) type of the wrapped parameter/field., +	 * @return the declared type (never <code>null</code>), +	 */]