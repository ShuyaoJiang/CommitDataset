[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.SubscribableChannel;, +import org.springframework.util.Assert;, +	private final SubscribableChannel clientInboundChannel;, +, +	private final MessageChannel clientOutboundChannel;, +, +	private final SubscribableChannel brokerChannel;, +, +	/**, +	 * Constructor with no destination prefixes (matches all destinations)., +	 * @param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients), +	 * @param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients), +	 * @param brokerChannel the channel for the application to send messages to the broker, +	 */, +	public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,, +			SubscribableChannel brokerChannel) {, +, +		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList());, +	/**, +	 * Constructor with destination prefixes to match to destinations of messages., +	 * @param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients), +	 * @param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients), +	 * @param brokerChannel the channel for the application to send messages to the broker, +	 * @param destinationPrefixes prefixes to use to filter out messages, +	 */, +	public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,, +			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {, +, +		Assert.notNull(inboundChannel, "'inboundChannel' must not be null");, +		Assert.notNull(outboundChannel, "'outboundChannel' must not be null");, +		Assert.notNull(brokerChannel, "'brokerChannel' must not be null");, +, +		this.clientInboundChannel = inboundChannel;, +		this.clientOutboundChannel = outboundChannel;, +		this.brokerChannel = brokerChannel;, +, +	public SubscribableChannel getClientInboundChannel() {, +		return this.clientInboundChannel;, +	}, +, +	public MessageChannel getClientOutboundChannel() {, +		return this.clientOutboundChannel;, +	}, +, +	public SubscribableChannel getBrokerChannel() {, +		return this.brokerChannel;, +	}, +, +			this.clientInboundChannel.subscribe(this);, +			this.brokerChannel.subscribe(this);, +			this.clientInboundChannel.unsubscribe(this);, +			this.brokerChannel.unsubscribe(this);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.SubscribableChannel;, +import org.springframework.util.Assert;, +	private final SubscribableChannel clientInboundChannel;, +, +	private final MessageChannel clientOutboundChannel;, +, +	private final SubscribableChannel brokerChannel;, +, +	/**, +	 * Constructor with no destination prefixes (matches all destinations)., +	 * @param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients), +	 * @param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients), +	 * @param brokerChannel the channel for the application to send messages to the broker, +	 */, +	public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,, +			SubscribableChannel brokerChannel) {, +, +		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList());, +	/**, +	 * Constructor with destination prefixes to match to destinations of messages., +	 * @param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients), +	 * @param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients), +	 * @param brokerChannel the channel for the application to send messages to the broker, +	 * @param destinationPrefixes prefixes to use to filter out messages, +	 */, +	public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,, +			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {, +, +		Assert.notNull(inboundChannel, "'inboundChannel' must not be null");, +		Assert.notNull(outboundChannel, "'outboundChannel' must not be null");, +		Assert.notNull(brokerChannel, "'brokerChannel' must not be null");, +, +		this.clientInboundChannel = inboundChannel;, +		this.clientOutboundChannel = outboundChannel;, +		this.brokerChannel = brokerChannel;, +, +	public SubscribableChannel getClientInboundChannel() {, +		return this.clientInboundChannel;, +	}, +, +	public MessageChannel getClientOutboundChannel() {, +		return this.clientOutboundChannel;, +	}, +]