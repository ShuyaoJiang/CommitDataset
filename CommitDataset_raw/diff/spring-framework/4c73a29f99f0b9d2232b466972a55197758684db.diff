[+++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +, +	 * Find a single {@link Annotation} of <code>annotationType</code> from the supplied {@link Class},, +	 * traversing its interfaces and super classes if no annotation can be found on the given class itself., +	 * <p>This method explicitly handles class-level annotations which are not declared as, +	 * {@link Inherited inherited} <i>as well as annotations on interfaces</i>., +	 * <p>The algorithm operates as follows: Searches for an annotation on the given class and returns, +	 * it if found. Else searches all interfaces that the given class declares, returning the annotation, +	 * from the first matching candidate, if any. Else proceeds with introspection of the superclass, +	 * of the given class, checking the superclass itself; if no annotation found there, proceeds, +	 * with the interfaces that the superclass declares. Recursing up through the entire superclass, +	 * hierarchy if no match is found., +	 * Find the first {@link Class} in the inheritance hierarchy of the specified <code>clazz</code>, +	 * (including the specified <code>clazz</code> itself) which declares an annotation for the, +	 * specified <code>annotationType</code>, or <code>null</code> if not found. If the supplied, +	 * <code>clazz</code> is <code>null</code>, <code>null</code> will be returned., +	 * <p>If the supplied <code>clazz</code> is an interface, only the interface itself will be checked;, +	 * the inheritance hierarchy for interfaces will not be traversed., +	 * <p>The standard {@link Class} API does not provide a mechanism for determining which class, +	 * in an inheritance hierarchy actually declares an {@link Annotation}, so we need to handle, +	 * this explicitly., +	 * @param clazz the Class object corresponding to the class on which to check for the annotation,, +	 * or <code>null</code>, +	 * @return the first {@link Class} in the inheritance hierarchy of the specified <code>clazz</code>, +	 * which declares an annotation for the specified <code>annotationType</code>, or <code>null</code>, +	 * if not found, +++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +, +	 * Find a single {@link Annotation} of <code>annotationType</code> from the supplied {@link Class},, +	 * traversing its interfaces and super classes if no annotation can be found on the given class itself., +	 * <p>This method explicitly handles class-level annotations which are not declared as, +	 * {@link Inherited inherited} <i>as well as annotations on interfaces</i>., +	 * <p>The algorithm operates as follows: Searches for an annotation on the given class and returns, +	 * it if found. Else searches all interfaces that the given class declares, returning the annotation, +	 * from the first matching candidate, if any. Else proceeds with introspection of the superclass, +	 * of the given class, checking the superclass itself; if no annotation found there, proceeds, +	 * with the interfaces that the superclass declares. Recursing up through the entire superclass, +	 * hierarchy if no match is found., +	 * Find the first {@link Class} in the inheritance hierarchy of the specified <code>clazz</code>, +	 * (including the specified <code>clazz</code> itself) which declares an annotation for the, +	 * specified <code>annotationType</code>, or <code>null</code> if not found. If the supplied, +	 * <code>clazz</code> is <code>null</code>, <code>null</code> will be returned., +	 * <p>If the supplied <code>clazz</code> is an interface, only the interface itself will be checked;, +	 * the inheritance hierarchy for interfaces will not be traversed., +	 * <p>The standard {@link Class} API does not provide a mechanism for determining which class, +	 * in an inheritance hierarchy actually declares an {@link Annotation}, so we need to handle, +	 * this explicitly., +	 * @param clazz the Class object corresponding to the class on which to check for the annotation,, +	 * or <code>null</code>, +	 * @return the first {@link Class} in the inheritance hierarchy of the specified <code>clazz</code>, +	 * which declares an annotation for the specified <code>annotationType</code>, or <code>null</code>, +	 * if not found, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +, +	 * Comparator capable of sorting {@link RequestSpecificMappingInfo}s (RHIs) so that, +	 * sorting a list with this comparator will result in:, +	 * <li>RHIs with {@linkplain AnnotationMethodHandlerAdapter.RequestSpecificMappingInfo#matchedPatterns better matched paths}, +	 * take prescedence over those with a weaker match (as expressed by the {@linkplain PathMatcher#getPatternComparator(String), +	 * path pattern comparator}.) Typically, this means that patterns without wild cards and uri templates, +	 * will be ordered before those without.</li>, +	 * <li>RHIs with more {@linkplain RequestMappingInfo#params request parameters} will be ordered, +	 * before those with less parameters</li>]