[+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractPromiseToListenableFutureAdapter.java, +import reactor.fn.Consumer;, +import reactor.rx.Promise;, +, +				catch (Throwable ex) {, +					registry.failure(ex);, +			public void accept(Throwable ex) {, +				registry.failure(ex);, +, +	protected abstract T adapt(S result);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractPromiseToListenableFutureAdapter.java, +import reactor.fn.Consumer;, +import reactor.rx.Promise;, +, +				catch (Throwable ex) {, +					registry.failure(ex);, +			public void accept(Throwable ex) {, +				registry.failure(ex);, +, +	protected abstract T adapt(S result);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +					public void accept(Throwable ex) {, +						connectionHandler.afterConnectFailure(ex);, +		throw new IllegalStateException("No compatible Reactor version found");, +			return new ReactorConfiguration(, +					Collections.<DispatcherConfiguration>emptyList(), "sync", new Properties());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractPromiseToListenableFutureAdapter.java, +import reactor.fn.Consumer;, +import reactor.rx.Promise;, +, +				catch (Throwable ex) {, +					registry.failure(ex);, +			public void accept(Throwable ex) {, +				registry.failure(ex);, +, +	protected abstract T adapt(S result);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +					public void accept(Throwable ex) {, +						connectionHandler.afterConnectFailure(ex);, +		throw new IllegalStateException("No compatible Reactor version found");, +			return new ReactorConfiguration(, +					Collections.<DispatcherConfiguration>emptyList(), "sync", new Properties());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, +		Assert.notNull(webSocketHandler, "WebSocketHandler must not be null");, +		Assert.notNull(wsSession, "WebSocketSession must not be null");, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +			catch (Throwable ex) {, +				ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			if (logger.isErrorEnabled()) {, +				logger.error("Unhandled error for " + this.wsSession, ex);, +			}, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractPromiseToListenableFutureAdapter.java, +import reactor.fn.Consumer;, +import reactor.rx.Promise;, +, +				catch (Throwable ex) {, +					registry.failure(ex);, +			public void accept(Throwable ex) {, +				registry.failure(ex);, +, +	protected abstract T adapt(S result);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +					public void accept(Throwable ex) {, +						connectionHandler.afterConnectFailure(ex);, +		throw new IllegalStateException("No compatible Reactor version found");, +			return new ReactorConfiguration(, +					Collections.<DispatcherConfiguration>emptyList(), "sync", new Properties());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, +		Assert.notNull(webSocketHandler, "WebSocketHandler must not be null");, +		Assert.notNull(wsSession, "WebSocketSession must not be null");, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +			catch (Throwable ex) {, +				ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +		catch (Throwable ex) {, +			if (logger.isErrorEnabled()) {, +				logger.error("Unhandled error for " + this.wsSession, ex);, +			}, +		catch (Throwable ex) {, +			ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, + * Copyright 2002-2015 the original author or authors., +		Assert.notNull(handler, "WebSocketHandler must not be null");, +		Assert.notNull(wsSession, "WebSocketSession must not be null");]