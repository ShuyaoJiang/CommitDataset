[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * {@link org.springframework.context.annotation.Configuration Configuration}, + * classes as follows:, + * <p>{@code @EnableJms} enables detection of {@link JmsListener} annotations on any, + * Spring-managed bean in the container. For example, given a class {@code MyService}:, + * see {@link JmsListener} Javadoc for more details. For instance, the following would, + * Validated} are first validated against a custom {@code Validator}., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * {@link org.springframework.context.annotation.Configuration Configuration}, + * classes as follows:, + * <p>{@code @EnableJms} enables detection of {@link JmsListener} annotations on any, + * Spring-managed bean in the container. For example, given a class {@code MyService}:, + * see {@link JmsListener} Javadoc for more details. For instance, the following would, + * Validated} are first validated against a custom {@code Validator}., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	 * @see org.springframework.jms.config.JmsListenerEndpointRegistry#getListenerContainer(String), +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * {@link org.springframework.context.annotation.Configuration Configuration}, + * classes as follows:, + * <p>{@code @EnableJms} enables detection of {@link JmsListener} annotations on any, + * Spring-managed bean in the container. For example, given a class {@code MyService}:, + * see {@link JmsListener} Javadoc for more details. For instance, the following would, + * Validated} are first validated against a custom {@code Validator}., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	 * @see org.springframework.jms.config.JmsListenerEndpointRegistry#getListenerContainer(String), +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, + * Bean post-processor that registers methods annotated with {@link JmsListener}, + * <p>Annotated methods can use flexible arguments as defined by {@link JmsListener}., + * {@code <jms:annotation-driven>} XML element, and also by the {@link EnableJms}, + * {@link EnableJms} Javadoc for complete usage details., +	private ApplicationContext applicationContext;, +, +	private final AtomicInteger counter = new AtomicInteger();, +, +, +	public int getOrder() {, +		return LOWEST_PRECEDENCE;, +	 * <p>If none is specified, "jmsListenerContainerFactory" is assumed to be defined., +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.applicationContext = applicationContext;, +, +		endpoint.setJmsHandlerMethodFactory(this.jmsHandlerMethodFactory);, +				factory = this.applicationContext.getBean(containerFactoryBeanName, JmsListenerContainerFactory.class);, +			catch (NoSuchBeanDefinitionException ex) {, +				throw new BeanInitializationException("Could not register jms listener endpoint on [" +, +						method + "], no " + JmsListenerContainerFactory.class.getSimpleName() + " with id '" +, +						containerFactoryBeanName + "' was found in the application context", ex);, +		this.registrar.setApplicationContext(this.applicationContext);, +		if (this.registrar.getEndpointRegistry() == null) {, +			if (this.endpointRegistry == null) {, +				this.endpointRegistry = this.applicationContext.getBean(, +						AnnotationConfigUtils.JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME, JmsListenerEndpointRegistry.class);, +			this.registrar.setEndpointRegistry(this.endpointRegistry);, +			this.registrar.setContainerFactoryBeanName(this.containerFactoryBeanName);, +			this.registrar.afterPropertiesSet();, +		catch (Exception ex) {, +			throw new BeanInitializationException("Failed to initialize JmsListenerEndpointRegistrar", ex);, +			return "org.springframework.jms.JmsListenerEndpointContainer#" + counter.getAndIncrement();, +, +		public void setJmsHandlerMethodFactory(JmsHandlerMethodFactory jmsHandlerMethodFactory) {, +			if (this.jmsHandlerMethodFactory == null) {, +				this.jmsHandlerMethodFactory = createDefaultJmsHandlerMethodFactory();, +			return this.jmsHandlerMethodFactory;, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * {@link org.springframework.context.annotation.Configuration Configuration}, + * classes as follows:, + * <p>{@code @EnableJms} enables detection of {@link JmsListener} annotations on any, + * Spring-managed bean in the container. For example, given a class {@code MyService}:, + * see {@link JmsListener} Javadoc for more details. For instance, the following would, + * Validated} are first validated against a custom {@code Validator}., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	 * @see org.springframework.jms.config.JmsListenerEndpointRegistry#getListenerContainer(String), +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, + * Bean post-processor that registers methods annotated with {@link JmsListener}, + * <p>Annotated methods can use flexible arguments as defined by {@link JmsListener}., + * {@code <jms:annotation-driven>} XML element, and also by the {@link EnableJms}, + * {@link EnableJms} Javadoc for complete usage details., +	private ApplicationContext applicationContext;, +, +	private final AtomicInteger counter = new AtomicInteger();, +, +, +	public int getOrder() {, +		return LOWEST_PRECEDENCE;, +	 * <p>If none is specified, "jmsListenerContainerFactory" is assumed to be defined., +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.applicationContext = applicationContext;, +, +		endpoint.setJmsHandlerMethodFactory(this.jmsHandlerMethodFactory);, +				factory = this.applicationContext.getBean(containerFactoryBeanName, JmsListenerContainerFactory.class);, +			catch (NoSuchBeanDefinitionException ex) {, +				throw new BeanInitializationException("Could not register jms listener endpoint on [" +, +						method + "], no " + JmsListenerContainerFactory.class.getSimpleName() + " with id '" +, +						containerFactoryBeanName + "' was found in the application context", ex);, +		this.registrar.setApplicationContext(this.applicationContext);, +		if (this.registrar.getEndpointRegistry() == null) {, +			if (this.endpointRegistry == null) {, +				this.endpointRegistry = this.applicationContext.getBean(, +						AnnotationConfigUtils.JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME, JmsListenerEndpointRegistry.class);, +			this.registrar.setEndpointRegistry(this.endpointRegistry);]