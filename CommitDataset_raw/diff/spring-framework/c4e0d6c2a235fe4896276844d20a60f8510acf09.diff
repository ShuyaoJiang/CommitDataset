[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.net.UnknownHostException;, +			catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.net.UnknownHostException;, +			catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamSource.java, + * Copyright 2002-2017 the original author or authors., +	 * Return an {@link InputStream} for the content of an underlying resource., +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content stream could not be opened, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.net.UnknownHostException;, +			catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamSource.java, + * Copyright 2002-2017 the original author or authors., +	 * Return an {@link InputStream} for the content of an underlying resource., +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content stream could not be opened, +++ b/spring-core/src/main/java/org/springframework/core/io/Resource.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws java.io.FileNotFoundException if the resource cannot be resolved as, +	 * absolute file path, i.e. if the resource is not available in a file system, +	 * @throws IOException in case of general resolution/reading failures, +	 * @see #getInputStream(), +	 * <p>The default implementation returns {@link Channels#newChannel(InputStream)}, +	 * with the result of {@link #getInputStream()}., +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content channel could not be opened, +	 * @see #getInputStream(), +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.net.UnknownHostException;, +			catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamSource.java, + * Copyright 2002-2017 the original author or authors., +	 * Return an {@link InputStream} for the content of an underlying resource., +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content stream could not be opened, +++ b/spring-core/src/main/java/org/springframework/core/io/Resource.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws java.io.FileNotFoundException if the resource cannot be resolved as, +	 * absolute file path, i.e. if the resource is not available in a file system, +	 * @throws IOException in case of general resolution/reading failures, +	 * @see #getInputStream(), +	 * <p>The default implementation returns {@link Channels#newChannel(InputStream)}, +	 * with the result of {@link #getInputStream()}., +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content channel could not be opened, +	 * @see #getInputStream(), +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, +import java.net.UnknownHostException;, +				catch (FileNotFoundException | UnknownHostException ex) {]