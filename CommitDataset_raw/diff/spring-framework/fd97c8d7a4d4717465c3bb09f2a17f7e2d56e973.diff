[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import org.springframework.web.context.ContextLoader;, +import org.springframework.web.context.WebApplicationContext;, +		targetUrl = updateTargetUrl(targetUrl, model, request, response);, +	 * Find the registered {@link RequestDataValueProcessor}, if any, and allow, +	 * it to update the redirect target URL., +	 * @return the updated URL or the same as URL as the one passed in, +	 */, +	protected String updateTargetUrl(String targetUrl, Map<String, Object> model, , +								  HttpServletRequest request, HttpServletResponse response) {, +		, +		RequestContext requestContext = null;, +		if (getWebApplicationContext() != null) {, +			requestContext = createRequestContext(request, response, model);, +		}, +		else {, +			WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();, +			if (wac != null && wac.getServletContext() != null) {, +				requestContext = new RequestContext(request, response, wac.getServletContext(), model);, +			}, +		}, +, +		if (requestContext != null) {, +			RequestDataValueProcessor processor = requestContext.getRequestDataValueProcessor();, +			if (processor != null) {, +				targetUrl = processor.processUrl(request, targetUrl);, +			}, +		}, +		, +		return targetUrl;, +	}, +	, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import org.springframework.web.context.ContextLoader;, +import org.springframework.web.context.WebApplicationContext;, +		targetUrl = updateTargetUrl(targetUrl, model, request, response);, +	 * Find the registered {@link RequestDataValueProcessor}, if any, and allow, +	 * it to update the redirect target URL., +	 * @return the updated URL or the same as URL as the one passed in, +	 */, +	protected String updateTargetUrl(String targetUrl, Map<String, Object> model, , +								  HttpServletRequest request, HttpServletResponse response) {, +		, +		RequestContext requestContext = null;, +		if (getWebApplicationContext() != null) {, +			requestContext = createRequestContext(request, response, model);, +		}, +		else {, +			WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();, +			if (wac != null && wac.getServletContext() != null) {, +				requestContext = new RequestContext(request, response, wac.getServletContext(), model);, +			}, +		}, +, +		if (requestContext != null) {, +			RequestDataValueProcessor processor = requestContext.getRequestDataValueProcessor();, +			if (processor != null) {, +				targetUrl = processor.processUrl(request, targetUrl);, +			}, +		}, +		, +		return targetUrl;, +	}, +	, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java, +			RedirectView view = new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());, +			return applyLifecycleMethods(viewName, view);, +		View result = applyLifecycleMethods(viewName, view);, +	private View applyLifecycleMethods(String viewName, AbstractView view) {, +		return (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import org.springframework.web.context.ContextLoader;, +import org.springframework.web.context.WebApplicationContext;, +		targetUrl = updateTargetUrl(targetUrl, model, request, response);, +	 * Find the registered {@link RequestDataValueProcessor}, if any, and allow, +	 * it to update the redirect target URL., +	 * @return the updated URL or the same as URL as the one passed in, +	 */, +	protected String updateTargetUrl(String targetUrl, Map<String, Object> model, , +								  HttpServletRequest request, HttpServletResponse response) {, +		, +		RequestContext requestContext = null;, +		if (getWebApplicationContext() != null) {, +			requestContext = createRequestContext(request, response, model);, +		}, +		else {, +			WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();, +			if (wac != null && wac.getServletContext() != null) {, +				requestContext = new RequestContext(request, response, wac.getServletContext(), model);, +			}, +		}, +, +		if (requestContext != null) {, +			RequestDataValueProcessor processor = requestContext.getRequestDataValueProcessor();, +			if (processor != null) {, +				targetUrl = processor.processUrl(request, targetUrl);]