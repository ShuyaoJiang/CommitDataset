[+++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/CodebaseAwareObjectInputStream.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase., +	 * @param in the InputStream to read from, +	 * @param classLoader the ClassLoader to use for loading local classes, +	 * (may be <code>null</code> to indicate RMI's default ClassLoader), +	 * @param acceptProxyClasses whether to accept deserialization of proxy classes, +	 * (may be deactivated as a security measure), +	 * @see java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream), +	 */, +	public CodebaseAwareObjectInputStream(, +			InputStream in, ClassLoader classLoader, boolean acceptProxyClasses) throws IOException {, +, +		super(in, classLoader, acceptProxyClasses);, +		this.codebaseUrl = null;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/CodebaseAwareObjectInputStream.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase., +	 * @param in the InputStream to read from, +	 * @param classLoader the ClassLoader to use for loading local classes, +	 * (may be <code>null</code> to indicate RMI's default ClassLoader), +	 * @param acceptProxyClasses whether to accept deserialization of proxy classes, +	 * (may be deactivated as a security measure), +	 * @see java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream), +	 */, +	public CodebaseAwareObjectInputStream(, +			InputStream in, ClassLoader classLoader, boolean acceptProxyClasses) throws IOException {, +, +		super(in, classLoader, acceptProxyClasses);, +		this.codebaseUrl = null;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2011 the original author or authors., +	private boolean acceptProxyClasses = true;, +, +	/**, +	 * Set whether to accept deserialization of proxy classes., +	 * <p>Default is "true". May be deactivated as a security measure., +	 */, +	public void setAcceptProxyClasses(boolean acceptProxyClasses) {, +		this.acceptProxyClasses = acceptProxyClasses;, +	}, +, +	/**, +	 * Return whether to accept deserialization of proxy classes., +	 */, +	public boolean isAcceptProxyClasses() {, +		return this.acceptProxyClasses;, +	}, +, +		return new CodebaseAwareObjectInputStream(is, getBeanClassLoader(), isAcceptProxyClasses());, +++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/CodebaseAwareObjectInputStream.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Create a new CodebaseAwareObjectInputStream for the given InputStream and codebase., +	 * @param in the InputStream to read from, +	 * @param classLoader the ClassLoader to use for loading local classes, +	 * (may be <code>null</code> to indicate RMI's default ClassLoader), +	 * @param acceptProxyClasses whether to accept deserialization of proxy classes, +	 * (may be deactivated as a security measure), +	 * @see java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream), +	 */, +	public CodebaseAwareObjectInputStream(, +			InputStream in, ClassLoader classLoader, boolean acceptProxyClasses) throws IOException {, +, +		super(in, classLoader, acceptProxyClasses);, +		this.codebaseUrl = null;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2011 the original author or authors., +	private boolean acceptProxyClasses = true;, +, +	/**, +	 * Set whether to accept deserialization of proxy classes., +	 * <p>Default is "true". May be deactivated as a security measure., +	 */, +	public void setAcceptProxyClasses(boolean acceptProxyClasses) {, +		this.acceptProxyClasses = acceptProxyClasses;, +	}, +, +	/**, +	 * Return whether to accept deserialization of proxy classes., +	 */, +	public boolean isAcceptProxyClasses() {, +		return this.acceptProxyClasses;, +	}, +, +		return new CodebaseAwareObjectInputStream(is, getBeanClassLoader(), isAcceptProxyClasses());, +++ b/org.springframework.core/src/main/java/org/springframework/core/ConfigurableObjectInputStream.java, + * Copyright 2002-2011 the original author or authors., +import java.io.NotSerializableException;, +	private final boolean acceptProxyClasses;, +, +		this(in, classLoader, true);]