[+++ b/spring-web/src/main/java/org/springframework/http/RequestEntity.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http;, +, +import java.net.URI;, +import java.nio.charset.Charset;, +import java.util.Arrays;, +import java.util.Map;, +, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.util.UriTemplate;, +, +/**, + * Extension of {@link HttpEntity} that adds a {@linkplain HttpMethod method} and, + * {@linkplain URI uri}., + * Used in {@code RestTemplate} as well {@code @Controller} methods., + *, + * <p>In {@code RestTemplate}, this class is used as parameter in, + * {@link org.springframework.web.client.RestTemplate#exchange(RequestEntity, Class) exchange()}:, + * <pre class="code">, + * MyRequest body = ..., + * RequestEntity&lt;MyRequest&gt; request = RequestEntity.post(&quot;http://example.com/{foo}&quot;, &quot;bar&quot;).accept(MediaType.APPLICATION_JSON).body(body);, + * ResponseEntity&lt;MyResponse&gt; response = template.exchange(request, MyResponse.class);, + * </pre>, + *, + * <p>Can also be used in Spring MVC, as a parameter in a @Controller method:, + * <pre class="code">, + * &#64;RequestMapping("/handle"), + * public void handle(RequestEntity&lt;String&gt; request) {, + *   HttpMethod method = request.getMethod();, + *   URI url = request.getUrl();, + *   String body = request.getBody();, + * }, + * </pre>, + *, + * @author Arjen Poutsma, + * @since 4.1, + * @see #getMethod(), + * @see #getUrl(), + */, +public class RequestEntity<T> extends HttpEntity<T> {, +, +	private final HttpMethod method;, +, +	private final URI url;, +, +	/**, +	 * Create a new {@code RequestEntity} with the given method and URL, and no body nor headers., +	 * @param method the method, +	 * @param url the URL, +	 */, +	public RequestEntity(HttpMethod method, URI url) {, +		super();, +		this.method = method;, +		this.url = url;, +	}, +, +	/**, +	 * Create a new {@code RequestEntity} with the given method, URL, body, and no headers., +	 * @param body the body, +	 * @param method the method, +	 * @param url the URL, +	 */, +	public RequestEntity(T body, HttpMethod method, URI url) {, +		super(body);, +		this.method = method;, +		this.url = url;, +	}, +, +	/**, +	 * Create a new {@code RequestEntity} with the given method, URL, body, headers and no, +	 * body, +	 * @param headers the headers, +	 * @param method the method, +	 * @param url the URL, +	 */, +	public RequestEntity(MultiValueMap<String, String> headers, HttpMethod method, URI url) {, +		super(headers);, +		this.method = method;, +		this.url = url;, +	}, +, +	/**, +	 * Create a new {@code RequestEntity} with the given method, URL, body, headers and]