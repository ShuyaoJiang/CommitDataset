[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +			builder.addPropertyValue("databasePopulator", createDatabasePopulator(element, scripts, context, "INIT"));, +			builder.addPropertyValue("databaseCleaner", createDatabasePopulator(element, scripts, context, "DESTROY"));, +	private BeanDefinition createDatabasePopulator(Element element, List<Element> scripts, ParserContext context, String execution) {, +			String executionAttr = scriptElement.getAttribute("execution");, +			if (!StringUtils.hasText(executionAttr)) {, +				executionAttr = "INIT";, +			}, +			if (!execution.equals(executionAttr)) {, +				continue;, +			}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +			builder.addPropertyValue("databasePopulator", createDatabasePopulator(element, scripts, context, "INIT"));, +			builder.addPropertyValue("databaseCleaner", createDatabasePopulator(element, scripts, context, "DESTROY"));, +	private BeanDefinition createDatabasePopulator(Element element, List<Element> scripts, ParserContext context, String execution) {, +			String executionAttr = scriptElement.getAttribute("execution");, +			if (!StringUtils.hasText(executionAttr)) {, +				executionAttr = "INIT";, +			}, +			if (!execution.equals(executionAttr)) {, +				continue;, +			}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +import org.springframework.beans.factory.DisposableBean;, +public class DataSourceInitializer implements InitializingBean, DisposableBean {, +	private DatabasePopulator databaseCleaner;, +	private boolean enabled = true;, +	 * Set a script execution to be run in the bean destruction callback, cleaning up the database and leaving it in , +	 * a known state for others., +	 * , +	 * @param databaseCleaner the database script executor to run on destroy, +	 */, +	public void setDatabaseCleaner(DatabasePopulator databaseCleaner) {, +		this.databaseCleaner = databaseCleaner;, +	}, +, +	/**, +		if (this.databasePopulator != null) {, +			execute(this.databasePopulator);, +		}, +	}, +, +	/**, +	 * Use the populator to clean up data in the data source., +	 */, +	public void destroy() throws Exception {, +		if (this.databaseCleaner != null) {, +			execute(this.databaseCleaner);, +		}, +	}, +, +	private void execute(DatabasePopulator populator) throws Exception {, +			Assert.state(populator != null, "DatabasePopulator must be provided");, +					populator.populate(connection);, +				} finally {, +					} catch (SQLException ex) {, +			} catch (Exception ex) {, +				throw new DataAccessResourceFailureException("Failed to execute database script", ex);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +			builder.addPropertyValue("databasePopulator", createDatabasePopulator(element, scripts, context, "INIT"));, +			builder.addPropertyValue("databaseCleaner", createDatabasePopulator(element, scripts, context, "DESTROY"));, +	private BeanDefinition createDatabasePopulator(Element element, List<Element> scripts, ParserContext context, String execution) {, +			String executionAttr = scriptElement.getAttribute("execution");, +			if (!StringUtils.hasText(executionAttr)) {, +				executionAttr = "INIT";, +			}, +			if (!execution.equals(executionAttr)) {, +				continue;, +			}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +import org.springframework.beans.factory.DisposableBean;, +public class DataSourceInitializer implements InitializingBean, DisposableBean {, +	private DatabasePopulator databaseCleaner;, +	private boolean enabled = true;, +	 * Set a script execution to be run in the bean destruction callback, cleaning up the database and leaving it in , +	 * a known state for others., +	 * , +	 * @param databaseCleaner the database script executor to run on destroy, +	 */, +	public void setDatabaseCleaner(DatabasePopulator databaseCleaner) {, +		this.databaseCleaner = databaseCleaner;, +	}, +, +	/**, +		if (this.databasePopulator != null) {, +			execute(this.databasePopulator);, +		}, +	}, +, +	/**, +	 * Use the populator to clean up data in the data source., +	 */, +	public void destroy() throws Exception {, +		if (this.databaseCleaner != null) {, +			execute(this.databaseCleaner);, +		}, +	}]