[+++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + *, +, +	@Override, +	public void close() {, +		this.closed = true;, +	}, +, +		return this.closed;, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + *, +, +	@Override, +	public void close() {, +		this.closed = true;, +	}, +, +		return this.closed;, +++ b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java, +, +, +		return (this.cursor != this.events.size());, +		if (this.cursor < this.events.size()) {, +			return this.events.get(this.cursor++);, +		if (this.cursor < this.events.size()) {, +			return this.events.get(this.cursor);, +, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + *, +, +	@Override, +	public void close() {, +		this.closed = true;, +	}, +, +		return this.closed;, +++ b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java, +, +, +		return (this.cursor != this.events.size());, +		if (this.cursor < this.events.size()) {, +			return this.events.get(this.cursor++);, +		if (this.cursor < this.events.size()) {, +			return this.events.get(this.cursor);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +import java.util.Map;, +	private final Map<Object, PlatformTransactionManager> transactionManagerCache =, +					"Setting the property 'transactionManager' or running in a BeanFactory is required");, +			// We need a transaction for this method..., +			// The transaction manager will flag an error if an incompatible tx already exists., +			// The TransactionInfo.hasTransaction() method will return false. We created it only, +			// to preserve the integrity of the ThreadLocal stack maintained in this class.]