[+++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ehcache the backing Ehcache instance, +		if (!Status.STATUS_ALIVE.equals(status)) {, +			throw new IllegalArgumentException(, +		}, +				element = lookup(key);  // one more attempt with the write lock, +			throw new IllegalStateException(, +					"Cached value is not of required type [" + type.getName() + "]: " + value);, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ehcache the backing Ehcache instance, +		if (!Status.STATUS_ALIVE.equals(status)) {, +			throw new IllegalArgumentException(, +		}, +				element = lookup(key);  // one more attempt with the write lock, +			throw new IllegalStateException(, +					"Cached value is not of required type [" + type.getName() + "]: " + value);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ehcache the backing Ehcache instance, +		if (!Status.STATUS_ALIVE.equals(status)) {, +			throw new IllegalArgumentException(, +		}, +				element = lookup(key);  // one more attempt with the write lock, +			throw new IllegalStateException(, +					"Cached value is not of required type [" + type.getName() + "]: " + value);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	protected Object fromStoreValue(@Nullable Object storeValue) {, +		if (storeValue != null && this.serialization != null) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ehcache the backing Ehcache instance, +		if (!Status.STATUS_ALIVE.equals(status)) {, +			throw new IllegalArgumentException(, +		}, +				element = lookup(key);  // one more attempt with the write lock, +			throw new IllegalStateException(, +					"Cached value is not of required type [" + type.getName() + "]: " + value);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	protected Object fromStoreValue(@Nullable Object storeValue) {, +		if (storeValue != null && this.serialization != null) {, +++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractValueAdaptingCache.java, + * Copyright 2002-2018 the original author or authors., +			throw new IllegalStateException(, +					"Cached value is not of required type [" + type.getName() + "]: " + value);, +	 * @return the raw store value for the key, or {@code null} if none, +	@Nullable, +	protected Object fromStoreValue(@Nullable Object storeValue) {, +					"Cache '" + getName() + "' is configured to not allow null values but null was provided");]