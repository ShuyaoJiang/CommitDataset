[+++ b/src/docs/asciidoc/kotlin.adoc, +https://kotlinlang.org[Kotlin] is a statically-typed language targeting the JVM (and other platforms), +which allows to write concise and elegant code while providing a very good, +https://kotlinlang.org/docs/reference/java-interop.html[interoperability] with libraries, +Spring Framework 5 introduces first-class support for Kotlin and allows developers to write, +Spring + Kotlin applications almost like if Spring Framework was a native Kotlin framework., +Spring Framework supports Kotlin 1.1+ and requires, +https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib[`kotlin-stdlib`], +(or one of its https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib-jre7[`kotlin-stdlib-jre7`], +[NOTE], +====, +Other libraries like Reactor or Spring Data also provide Kotlin extensions for their API, +in order to allow a better Kotlin development experience., +====, +, +Although Java does not allow to express null-safety in its type-system, Spring Framework now, +provides https://jira.spring.io/browse/SPR-15540[null-safety of the whole Spring Framework API], + * `@NonNullApi` annotations at package level declare non-null as the default behavior, +meta-annotations (a dormant JSR but supported by tools like IDEA, Findbugs, etc.), +Spring Framework supports various Kotlin constructs like instantiating Kotlin classes, +classpath, and a warning message will be logged if Jackson + Kotlin are detected without, +Jackson Kotlin module., +Spring Framework 5 introduces a new way to register beans in a functional way using lambdas, +as an alternative to XML or JavaConfig (`@Configuration` and `@Bean`). In a nutshell,, +In order to allow a more declarative approach and cleaner syntax, Spring Framework provides, +a {doc-root}/spring-framework/docs/{spring-version}/kdoc-api/spring-framework/org.springframework.context.support/-bean-definition-dsl/[Kotlin bean definition DSL], +Spring Boot is based on Java Config and, +https://github.com/spring-projects/spring-boot/issues/8115[does not provide specific support for functional bean definition yet],, +but you can experimentally use functional bean definitions via its `ApplicationContextInitializer` support,, +see https://stackoverflow.com/questions/45935931/how-to-use-functional-bean-definition-kotlin-dsl-with-spring-boot-and-spring-w/46033685#46033685[this Stack Overflow answer], +Spring Framework now comes with a, +depending on dynamic data (from a database for example)., +Kotlin provides such support and allows to render Kotlin based templates, see, +This section provides a focus on some specific hints and recommendations worth to know when, +developing Spring projects in Kotlin., +, +Try to favor constructor injection with `val` read-only (and non-nullable when possible), +https://kotlinlang.org/docs/reference/properties.html[properties]., +properties since immutable classes initialized by constructor are not supported yet., +See these issues about https://github.com/spring-projects/spring-boot/issues/8762[`@ConfigurationProperties` binding for immutable POJOs], +and https://github.com/spring-projects/spring-boot/issues/1254[`@ConfigurationProperties` binding on interfaces], +for more details., +=== Annotation array attributes, +, +Kotlin annotations are mostly similar to Java ones, but array attributes - which are, +extensively used in Spring - behaves differently. As explained in https://kotlinlang.org/docs/reference/annotations.html[Kotlin documentation], +unlike other attributes, `value` attribute name can be omitted and when it is an array, +attribute it is specified as a `vararg` parameter., +, +To understand what that means more concretely, let's take `@RequestMapping`, which is one, +of the most used Spring annotation as an example. This Java annotation is declared as following:, +, +[source,java], +----, +public @interface RequestMapping {, +, +  @AliasFor("path"), +  String[] value() default {};, +, +  @AliasFor("value"), +  String[] path() default {};, +, +  RequestMethod[] method() default {};, +, +  // ..., +}, +----, +, +The typical use case for `@RequestMapping` is to map an handler method to a specific path, ++ method. In Java, it is possible to specify single value for annotation array attribute,, +they will be automatically converted to arrays. That's why you can write, +`@RequestMapping(value = "/foo", method = RequestMethod.GET)` or, +`@RequestMapping(path = "/foo", method = RequestMethod.GET)`., +, +In Kotlin, you will have to write `@RequestMapping("/foo", method = arrayOf(RequestMethod.GET))`., +The variant using `path` is not recommended as it need to be written, +`@RequestMapping(path = arrayOf("/foo"), method = arrayOf(RequestMethod.GET))`., +, +A workaround for this specific `method` attribute (the most common one)  is to use shortcut, +annotation like `@GetMapping`, `@PostMapping`, etc., +, +[NOTE], +====, +Remininder: if you don't specify `@RequestMapping` `method` attribute, all HTTP methods will be matched,, +not just `GET` ones., +====, +, +Improving syntax and consistency of Kotlin annotation array attributes is discussed in, +https://youtrack.jetbrains.com/issue/KT-11235[this Kotlin language design issue]., +, +* https://github.com/spring-projects/spring-boot/issues/8762[Allow `@ConfigurationProperties` binding for immutable POJOs], +* https://github.com/spring-projects/spring-boot/issues/1254[Allow `@ConfigurationProperties` binding on interfaces]]