[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.function.server, +, +import org.springframework.core.io.Resource, +import org.springframework.http.HttpMethod, +import org.springframework.http.MediaType, +import reactor.core.publisher.Mono, +, +/**, + * Provide a [RouterFunction] Kotlin DSL in order to be able to write idiomatic Kotlin code as below:, + *, + * ```kotlin, + *, + * @Configuration, + * class ApplicationRoutes(val userHandler: UserHandler) {, + *, + * 		@Bean, + * 		fun mainRouter() = router {, + * 			accept(TEXT_HTML).nest {, + * 				(GET("/user/") or GET("/users/")).invoke(userHandler::findAllView), + * 				GET("/users/{login}", userHandler::findViewById), + * 			}, + * 			accept(APPLICATION_JSON).nest {, + * 				(GET("/api/user/") or GET("/api/users/")).invoke(userHandler::findAll), + * 				POST("/api/users/", userHandler::create), + * 			}, + * 		}, + *, + * 	}, + * ```, + *, + * @author Sebastien Deleuze, + * @author Yevhenii Melnyk, + * @since 5.0, + * @see <a href="https://youtrack.jetbrains.com/issue/KT-15667">Kotlin issue about supporting ::foo for member functions</a>, + */, +, +typealias Routes = RouterFunctionDsl.() -> Unit, +, +/**, + * Allow to create easily a [RouterFunction] from [Routes], + */, +fun router(routes: Routes) = RouterFunctionDsl().apply(routes).router(), +, +class RouterFunctionDsl {, +, +	val routes = mutableListOf<RouterFunction<ServerResponse>>(), +, +	infix fun RequestPredicate.and(other: String): RequestPredicate = this.and(path(other)), +, +	infix fun RequestPredicate.or(other: String): RequestPredicate = this.or(path(other)), +, +	infix fun String.and(other: RequestPredicate): RequestPredicate = path(this).and(other), +, +	infix fun String.or(other: RequestPredicate): RequestPredicate = path(this).or(other), +, +	infix fun RequestPredicate.and(other: RequestPredicate): RequestPredicate = this.and(other), +, +	infix fun RequestPredicate.or(other: RequestPredicate): RequestPredicate = this.or(other), +, +	operator fun RequestPredicate.not(): RequestPredicate = this.negate(), +, +	fun RequestPredicate.nest(r: Routes) {, +		routes += RouterFunctions.nest(this, RouterFunctionDsl().apply(r).router()), +	}, +, +	fun String.nest(r: Routes) {, +		routes += RouterFunctions.nest(path(this), RouterFunctionDsl().apply(r).router()), +	}, +, +	operator fun RequestPredicate.invoke(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(this, HandlerFunction { f(it) }), +	}, +, +	fun GET(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction { f(it) }), +	}, +, +	fun GET(pattern: String): RequestPredicate = RequestPredicates.GET(pattern), +, +	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction { f(it) }), +	}, +]