[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +import java.util.Collection;, +import javax.servlet.ServletRegistration;, +	@Nullable, +	private String servletPath;, +	/**, +	 * Return the Servlet path under which the Servlet is deployed by checking, +	 * the Servlet registration from {@link #init(ServletConfig)}., +	 * @return the path, or an empty string if the Servlet is deployed without, +	 * a prefix (i.e. "/" or "/*"), or {@code null} if this method is invoked, +	 * before the {@link #init(ServletConfig)} Servlet container callback., +	 */, +	@Nullable, +	public String getServletPath() {, +		return this.servletPath;, +	}, +, +	// Servlet methods..., +, +	@Override, +	public void init(ServletConfig config) {, +		this.servletPath = getServletPath(config);, +	}, +, +	@Nullable, +	private String getServletPath(ServletConfig config) {, +		String name = config.getServletName();, +		ServletRegistration registration = config.getServletContext().getServletRegistration(name);, +		Assert.notNull(registration, "ServletRegistration not found for Servlet '" + name + "'.");, +, +		Collection<String> mappings = registration.getMappings();, +		if (mappings.size() == 1) {, +			String mapping = mappings.iterator().next();, +			if (mapping.equals("/")) {, +				return "";, +			}, +			if (mapping.endsWith("/*")) {, +				String path = mapping.substring(0, mapping.length() - 2);, +				if (!path.isEmpty()) {, +					logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'.");, +				}, +				return path;, +			}, +		}, +, +		throw new IllegalArgumentException("Expected a single Servlet mapping -- " +, +				"either the default Servlet mapping (i.e. '/'), " +, +				"or a path based mapping (e.g. '/*', '/foo/*'). " +, +				"Actual mappings: " + mappings + " for Servlet '" + name + "'.");, +	}, +, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context), +			throws IOException {, +, +		Assert.notNull(this.servletPath, "servletPath is not initialized.");, +, +				request, context, this.servletPath, getDataBufferFactory(), getBufferSize());, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +	public String getServletInfo() {, +		return "";, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +import java.util.Collection;, +import javax.servlet.ServletRegistration;, +	@Nullable, +	private String servletPath;, +	/**, +	 * Return the Servlet path under which the Servlet is deployed by checking, +	 * the Servlet registration from {@link #init(ServletConfig)}., +	 * @return the path, or an empty string if the Servlet is deployed without, +	 * a prefix (i.e. "/" or "/*"), or {@code null} if this method is invoked, +	 * before the {@link #init(ServletConfig)} Servlet container callback., +	 */, +	@Nullable, +	public String getServletPath() {, +		return this.servletPath;, +	}, +, +	// Servlet methods..., +, +	@Override, +	public void init(ServletConfig config) {, +		this.servletPath = getServletPath(config);, +	}, +, +	@Nullable, +	private String getServletPath(ServletConfig config) {, +		String name = config.getServletName();, +		ServletRegistration registration = config.getServletContext().getServletRegistration(name);, +		Assert.notNull(registration, "ServletRegistration not found for Servlet '" + name + "'.");, +, +		Collection<String> mappings = registration.getMappings();, +		if (mappings.size() == 1) {, +			String mapping = mappings.iterator().next();, +			if (mapping.equals("/")) {, +				return "";, +			}, +			if (mapping.endsWith("/*")) {]