[+++ b/.gitignore, +build, +++ b/.gitignore, +build, +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +		testCompile(project(":spring-build-junit")), +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	// Don't actually generate any artifacts, +, +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile(project(":spring-web").sourceSets.test.output), +		testCompile("xmlunit:xmlunit:1.2"), +		optional("xmlunit:xmlunit:1.2"), +++ b/.gitignore, +build, +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +		testCompile(project(":spring-build-junit")), +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	// Don't actually generate any artifacts, +, +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile(project(":spring-web").sourceSets.test.output), +		testCompile("xmlunit:xmlunit:1.2"), +		optional("xmlunit:xmlunit:1.2"), +++ /dev/null, +++ b/.gitignore, +build, +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +		testCompile(project(":spring-build-junit")), +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	// Don't actually generate any artifacts, +, +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile("xmlunit:xmlunit:1.2"), +		testCompile(project(":spring-web").sourceSets.test.output), +		testCompile("xmlunit:xmlunit:1.2"), +		optional("xmlunit:xmlunit:1.2"), +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +build, +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +		testCompile(project(":spring-build-junit")), +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +]