[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter = new ExchangeMutatingWebFilter();, +		this.filters.add(this.exchangeMutatingWebFilter);, +		this.exchangeMutatingWebFilter.registerGlobalMutator(mutator);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatingWebFilter);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter = new ExchangeMutatingWebFilter();, +		this.filters.add(this.exchangeMutatingWebFilter);, +		this.exchangeMutatingWebFilter.registerGlobalMutator(mutator);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatingWebFilter);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter;, +			ExchangeMutatingWebFilter exchangeMutatingWebFilter, Duration timeout) {, +		this.exchangeMutatingWebFilter = exchangeMutatingWebFilter;, +		this.exchangeMutatingWebFilter = webTestClient.exchangeMutatingWebFilter;, +		Assert.notNull(this.exchangeMutatingWebFilter,, +			this.exchangeMutatingWebFilter.registerPerRequestMutator(requestId, mutator);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter = new ExchangeMutatingWebFilter();, +		this.filters.add(this.exchangeMutatingWebFilter);, +		this.exchangeMutatingWebFilter.registerGlobalMutator(mutator);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatingWebFilter);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter;, +			ExchangeMutatingWebFilter exchangeMutatingWebFilter, Duration timeout) {, +		this.exchangeMutatingWebFilter = exchangeMutatingWebFilter;, +		this.exchangeMutatingWebFilter = webTestClient.exchangeMutatingWebFilter;, +		Assert.notNull(this.exchangeMutatingWebFilter,, +			this.exchangeMutatingWebFilter.registerPerRequestMutator(requestId, mutator);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter;, +		this.exchangeMutatingWebFilter = null;, +	DefaultWebTestClientBuilder(HttpHandler httpHandler, ExchangeMutatingWebFilter exchangeMutatingWebFilter) {, +		this.exchangeMutatingWebFilter = exchangeMutatingWebFilter;, +				this.exchangeMutatingWebFilter, this.responseTimeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter = new ExchangeMutatingWebFilter();, +		this.filters.add(this.exchangeMutatingWebFilter);, +		this.exchangeMutatingWebFilter.registerGlobalMutator(mutator);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatingWebFilter);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter;, +			ExchangeMutatingWebFilter exchangeMutatingWebFilter, Duration timeout) {, +		this.exchangeMutatingWebFilter = exchangeMutatingWebFilter;, +		this.exchangeMutatingWebFilter = webTestClient.exchangeMutatingWebFilter;, +		Assert.notNull(this.exchangeMutatingWebFilter,, +			this.exchangeMutatingWebFilter.registerPerRequestMutator(requestId, mutator);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +	private final ExchangeMutatingWebFilter exchangeMutatingWebFilter;, +		this.exchangeMutatingWebFilter = null;, +	DefaultWebTestClientBuilder(HttpHandler httpHandler, ExchangeMutatingWebFilter exchangeMutatingWebFilter) {, +		this.exchangeMutatingWebFilter = exchangeMutatingWebFilter;, +				this.exchangeMutatingWebFilter, this.responseTimeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeMutatingWebFilter.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.web.reactive.server;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.function.Function;, +import java.util.function.UnaryOperator;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.util.Assert;, +import org.springframework.web.server.ServerWebExchange;, +import org.springframework.web.server.WebFilter;, +import org.springframework.web.server.WebFilterChain;, +, +/**, + * WebFilter for applying global and per-request transformations to a, + * {@link ServerWebExchange}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +class ExchangeMutatingWebFilter implements WebFilter {, +, +	private static final Function<ServerWebExchange, ServerWebExchange> NO_OP_MUTATOR = e -> e;, +, +, +	private volatile Function<ServerWebExchange, ServerWebExchange> globalMutator = NO_OP_MUTATOR;, +, +	private final Map<String, Function<ServerWebExchange, ServerWebExchange>> perRequestMutators =, +			new ConcurrentHashMap<>(4);]