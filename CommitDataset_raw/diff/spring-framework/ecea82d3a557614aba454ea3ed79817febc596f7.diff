[+++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, + * Copyright 2002-2017 the original author or authors., +			Set<MethodMetadata> annotatedMethods = new LinkedHashSet<>(4);, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, + * Copyright 2002-2017 the original author or authors., +			Set<MethodMetadata> annotatedMethods = new LinkedHashSet<>(4);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +		String className = Type.getType(desc).getClassName();, +, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, + * Copyright 2002-2017 the original author or authors., +			Set<MethodMetadata> annotatedMethods = new LinkedHashSet<>(4);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +		String className = Type.getType(desc).getClassName();, +, +++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, +import static java.nio.charset.StandardCharsets.*;, +import static java.time.format.DateTimeFormatter.*;, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof ContentDisposition)) {, +			return false;, +		}, +		ContentDisposition otherCd = (ContentDisposition) other;, +		return (ObjectUtils.nullSafeEquals(this.type, otherCd.type) &&, +				ObjectUtils.nullSafeEquals(this.name, otherCd.name) &&, +				ObjectUtils.nullSafeEquals(this.filename, otherCd.filename) &&, +				ObjectUtils.nullSafeEquals(this.charset, otherCd.charset) &&, +				ObjectUtils.nullSafeEquals(this.size, otherCd.size) &&, +				ObjectUtils.nullSafeEquals(this.creationDate, otherCd.creationDate)&&, +				ObjectUtils.nullSafeEquals(this.modificationDate, otherCd.modificationDate)&&, +				ObjectUtils.nullSafeEquals(this.readDate, otherCd.readDate));, +	}, +, +	@Override, +	public int hashCode() {, +		int result = ObjectUtils.nullSafeHashCode(this.type);, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.name);, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.filename);, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.charset);, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.size);, +		result = 31 * result + (creationDate != null ? creationDate.hashCode() : 0);, +		result = 31 * result + (modificationDate != null ? modificationDate.hashCode() : 0);, +		result = 31 * result + (readDate != null ? readDate.hashCode() : 0);, +		return result;, +	}, +, +	/**, +	 * Return the header value for this content disposition as defined in RFC 2183., +	 * @see #parse(String), +	 */, +	@Override, +	public String toString() {, +		StringBuilder sb = new StringBuilder();, +		if (this.type != null) {, +			sb.append(this.type);, +		}, +		if (this.name != null) {, +			sb.append("; name=\"");, +			sb.append(this.name).append('\"');, +		}, +		if (this.filename != null) {, +			if(this.charset == null || StandardCharsets.US_ASCII.equals(this.charset)) {, +				sb.append("; filename=\"");, +				sb.append(this.filename).append('\"');, +			}, +			else {, +				sb.append("; filename*=");, +				sb.append(encodeHeaderFieldParam(this.filename, this.charset));, +			}, +		}, +		if (this.size != null) {, +			sb.append("; size=");, +			sb.append(this.size);, +		}, +		if (this.creationDate != null) {, +			sb.append("; creation-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.creationDate));, +			sb.append('\"');, +		}, +		if (this.modificationDate != null) {, +			sb.append("; modification-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.modificationDate));, +			sb.append('\"');, +		}, +		if (this.readDate != null) {, +			sb.append("; read-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.readDate));, +			sb.append('\"');, +		}, +		return sb.toString();, +	}, +, +]