[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/ProducesRequestConditionTests.java, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/"), +				.header("Accept", "application/xml, text/html"));, +		assertEquals(0, html.compareTo(xml, exchange));, +		assertEquals(0, xml.compareTo(html, exchange));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/ProducesRequestConditionTests.java, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/"), +				.header("Accept", "application/xml, text/html"));, +		assertEquals(0, html.compareTo(xml, exchange));, +		assertEquals(0, xml.compareTo(html, exchange));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +			return !isNegated() == match;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/ProducesRequestConditionTests.java, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/"), +				.header("Accept", "application/xml, text/html"));, +		assertEquals(0, html.compareTo(xml, exchange));, +		assertEquals(0, xml.compareTo(html, exchange));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +			return !isNegated() == match;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +			return !isNegated() == match;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/ProducesRequestConditionTests.java, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/"), +				.header("Accept", "application/xml, text/html"));, +		assertEquals(0, html.compareTo(xml, exchange));, +		assertEquals(0, xml.compareTo(html, exchange));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +			return !isNegated() == match;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +			return !isNegated() == match;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/condition/ProducesRequestConditionTests.java, +import java.util.Arrays;, +import javax.servlet.http.HttpServletRequest;, +		HttpServletRequest request = createRequest("text/plain");, +		HttpServletRequest request = createRequest("text/plain");, +		assertNotNull(condition.getMatchingCondition(new MockHttpServletRequest()));, +		HttpServletRequest request = createRequest("text/plain");, +		HttpServletRequest request = createRequest("text/plain");, +		HttpServletRequest request = createRequest("application/xml");, +		HttpServletRequest request = createRequest("bogus");, +		HttpServletRequest request = createRequest("bogus");, +		String[] produces = {"text/plain"};, +		String[] headers = {};, +		ProducesRequestCondition condition = new ProducesRequestCondition(produces, headers);, +		HttpServletRequest request = new MockHttpServletRequest("GET", "/foo.txt");, +		HttpServletRequest request = createRequest(, +		HttpServletRequest request = createRequest("application/xml, text/html");, +		request = createRequest("application/xml, text/*");, +		request = createRequest("application/pdf");, +		assertEquals(0, html.compareTo(xml, request));, +		assertEquals(0, xml.compareTo(html, request));, +		request = createRequest("text/html;q=0.9,application/xml");, +		HttpServletRequest request = createRequest("text/plain");, +		HttpServletRequest request = createRequest("text/plain");, +		HttpServletRequest request = createRequest("text/plain", "application/xml");, +		request = createRequest("application/xml", "text/plain");, +		HttpServletRequest request = createRequest("*/*;q=0.9");, +		HttpServletRequest request = createRequest("text/*");, +		HttpServletRequest request = createRequest("text/plain");, +	private MockHttpServletRequest createRequest(String... headerValue) {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		Arrays.stream(headerValue).forEach(value -> request.addHeader("Accept", headerValue));, +		return request;, +	}, +]