[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnection.java, + * MockMvcWebConnection mockConnection = new MockMvcWebConnection(mockMvc, webClient);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnection.java, + * MockMvcWebConnection mockConnection = new MockMvcWebConnection(mockMvc, webClient);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnectionBuilderSupport.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection.DelegateWebConnection;, +	private final List<WebRequestMatcher> requestMatchers = new ArrayList<WebRequestMatcher>();, +		this.requestMatchers.add(new HostRequestMatcher("localhost"));, +			this.requestMatchers.add(matcher);, +		this.requestMatchers.add(new HostRequestMatcher(hosts));, +	 * @since 4.3, +		WebConnection connection = new MockMvcWebConnection(this.mockMvc, webClient, this.contextPath);, +			return connection;, +		List<DelegateWebConnection> delegates = new ArrayList<DelegateWebConnection>(this.requestMatchers.size());, +		for (WebRequestMatcher matcher : this.requestMatchers) {, +			delegates.add(new DelegateWebConnection(matcher, connection));, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnection.java, + * MockMvcWebConnection mockConnection = new MockMvcWebConnection(mockMvc, webClient);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnectionBuilderSupport.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection.DelegateWebConnection;, +	private final List<WebRequestMatcher> requestMatchers = new ArrayList<WebRequestMatcher>();, +		this.requestMatchers.add(new HostRequestMatcher("localhost"));, +			this.requestMatchers.add(matcher);, +		this.requestMatchers.add(new HostRequestMatcher(hosts));, +	 * @since 4.3, +		WebConnection connection = new MockMvcWebConnection(this.mockMvc, webClient, this.contextPath);, +			return connection;, +		List<DelegateWebConnection> delegates = new ArrayList<DelegateWebConnection>(this.requestMatchers.size());, +		for (WebRequestMatcher matcher : this.requestMatchers) {, +			delegates.add(new DelegateWebConnection(matcher, connection));, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcConnectionBuilderSupportTests.java, + * Copyright 2002-2016 the original author or authors., +import com.gargoylesoftware.htmlunit.WebClient;, +import com.gargoylesoftware.htmlunit.WebConnection;, +import com.gargoylesoftware.htmlunit.WebRequest;, +import com.gargoylesoftware.htmlunit.WebResponse;, + * @author Rossen Stoyanchev, +	private WebClient client;, +	private MockMvcWebConnectionBuilderSupport builder;, +, +		this.client = mock(WebClient.class);, +		when(this.client.getWebConnection()).thenReturn(mock(WebConnection.class));, +		this.builder = new MockMvcWebConnectionBuilderSupport(this.wac) {};, +, +		WebConnection conn = this.builder.createConnection(this.client);, +		assertMockMvcUsed(conn, "http://localhost/");, +		assertMockMvcNotUsed(conn, "http://example.com/");, +		MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();, +		WebConnection conn = new MockMvcWebConnectionBuilderSupport(mockMvc) {}.createConnection(this.client);, +, +		assertMockMvcUsed(conn, "http://localhost/");, +		assertMockMvcNotUsed(conn, "http://example.com/");, +		WebConnection conn = this.builder.useMockMvcForHosts("example.com").createConnection(this.client);, +		assertMockMvcUsed(conn, "http://localhost/");, +		assertMockMvcUsed(conn, "http://example.com/");, +		assertMockMvcNotUsed(conn, "http://other.com/");, +		WebConnection conn = this.builder.alwaysUseMockMvc().createConnection(this.client);, +		assertMockMvcUsed(conn, "http://other.com/");, +		WebConnection conn = this.builder.createConnection(this.client);, +		assertThat(getResponse(conn, "http://localhost/abc").getContentAsString(), equalTo(""));, +		WebConnection conn = this.builder.contextPath("/abc").createConnection(this.client);, +		assertThat(getResponse(conn, "http://localhost/abc/def").getContentAsString(), equalTo("/abc"));, +, +	private void assertMockMvcUsed(WebConnection connection, String url) throws Exception {, +		assertThat(getResponse(connection, url), notNullValue());, +	private void assertMockMvcNotUsed(WebConnection connection, String url) throws Exception {, +		assertThat(getResponse(connection, url), nullValue());, +	private WebResponse getResponse(WebConnection connection, String url) throws IOException {, +	@SuppressWarnings("unused"), +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/DelegatingWebConnection.java, + * MockMvcWebConnection mockConnection = new MockMvcWebConnection(mockMvc, webClient);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnectionBuilderSupport.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection.DelegateWebConnection;, +	private final List<WebRequestMatcher> requestMatchers = new ArrayList<WebRequestMatcher>();, +		this.requestMatchers.add(new HostRequestMatcher("localhost"));, +			this.requestMatchers.add(matcher);, +		this.requestMatchers.add(new HostRequestMatcher(hosts));, +	 * @since 4.3, +		WebConnection connection = new MockMvcWebConnection(this.mockMvc, webClient, this.contextPath);, +			return connection;, +		List<DelegateWebConnection> delegates = new ArrayList<DelegateWebConnection>(this.requestMatchers.size());, +		for (WebRequestMatcher matcher : this.requestMatchers) {, +			delegates.add(new DelegateWebConnection(matcher, connection));, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcConnectionBuilderSupportTests.java, + * Copyright 2002-2016 the original author or authors., +import com.gargoylesoftware.htmlunit.WebClient;, +import com.gargoylesoftware.htmlunit.WebConnection;, +import com.gargoylesoftware.htmlunit.WebRequest;, +import com.gargoylesoftware.htmlunit.WebResponse;, + * @author Rossen Stoyanchev, +	private WebClient client;, +	private MockMvcWebConnectionBuilderSupport builder;, +, +		this.client = mock(WebClient.class);]