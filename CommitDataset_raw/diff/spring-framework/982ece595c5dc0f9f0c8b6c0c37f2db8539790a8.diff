[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlElementTag.java, +import java.util.HashMap;, +import java.util.Map;, +import javax.servlet.jsp.JspException;, +import javax.servlet.jsp.tagext.DynamicAttributes;, +, +import org.springframework.util.CollectionUtils;, + * <p>Additionally, this base class allows for rendering non-standard attributes , + * as part of the tag's output.  These attributes are accessible to subclasses if , + * needed via the {@link AbstractHtmlElementTag#getDynamicAttributes() dynamicAttributes} , + * map., + * , + * @author Jeremy Grelle, +public abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes{, +	private Map<String, Object> dynamicAttributes;, +, +	/**, +	 * Get the map of dynamic attributes. , +	 */, +	protected Map<String, Object> getDynamicAttributes() {, +		return this.dynamicAttributes;, +	}, +	, +	/**, +	 * {@inheritDoc}, +	 */, +	public void setDynamicAttribute(String uri, String localName, Object value ) throws JspException {, +		if (this.dynamicAttributes == null) {, +			this.dynamicAttributes = new HashMap<String, Object>();, +		}, +		dynamicAttributes.put(localName, value);, +	}, +	 * The set of optional attributes that will be rendered includes any non-standard dynamic attributes., +		, +		if (!CollectionUtils.isEmpty(this.dynamicAttributes)) {, +			for (String attr : this.dynamicAttributes.keySet()) {, +				tagWriter.writeOptionalAttributeValue(attr, getDisplayString(this.dynamicAttributes.get(attr)));, +			}, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlElementTag.java, +import java.util.HashMap;, +import java.util.Map;, +import javax.servlet.jsp.JspException;, +import javax.servlet.jsp.tagext.DynamicAttributes;, +, +import org.springframework.util.CollectionUtils;, + * <p>Additionally, this base class allows for rendering non-standard attributes , + * as part of the tag's output.  These attributes are accessible to subclasses if , + * needed via the {@link AbstractHtmlElementTag#getDynamicAttributes() dynamicAttributes} , + * map., + * , + * @author Jeremy Grelle, +public abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes{, +	private Map<String, Object> dynamicAttributes;, +, +	/**, +	 * Get the map of dynamic attributes. , +	 */, +	protected Map<String, Object> getDynamicAttributes() {, +		return this.dynamicAttributes;, +	}, +	, +	/**, +	 * {@inheritDoc}, +	 */, +	public void setDynamicAttribute(String uri, String localName, Object value ) throws JspException {, +		if (this.dynamicAttributes == null) {, +			this.dynamicAttributes = new HashMap<String, Object>();, +		}, +		dynamicAttributes.put(localName, value);, +	}, +	 * The set of optional attributes that will be rendered includes any non-standard dynamic attributes., +		, +		if (!CollectionUtils.isEmpty(this.dynamicAttributes)) {, +			for (String attr : this.dynamicAttributes.keySet()) {, +				tagWriter.writeOptionalAttributeValue(attr, getDisplayString(this.dynamicAttributes.get(attr)));, +			}, +		}, +++ b/org.springframework.web.servlet/src/main/resources/META-INF/spring-form.tld, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +		<dynamic-attributes>true</dynamic-attributes>, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlElementTag.java, +import java.util.HashMap;, +import java.util.Map;, +import javax.servlet.jsp.JspException;, +import javax.servlet.jsp.tagext.DynamicAttributes;, +, +import org.springframework.util.CollectionUtils;, + * <p>Additionally, this base class allows for rendering non-standard attributes ]