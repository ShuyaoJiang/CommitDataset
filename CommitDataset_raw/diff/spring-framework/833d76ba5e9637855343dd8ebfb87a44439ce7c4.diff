[+++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +     *            a String whose UTF8 encoded length must be less than 65536., +        if (charLength > 65535) {, +            throw new IllegalArgumentException();, +        }, +                if (byteLength > 65535) {, +                    throw new IllegalArgumentException();, +                }, +++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +     *            a String whose UTF8 encoded length must be less than 65536., +        if (charLength > 65535) {, +            throw new IllegalArgumentException();, +        }, +                if (byteLength > 65535) {, +                    throw new IllegalArgumentException();, +                }, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +    private boolean computeMaxs;, +    private boolean computeFrames;, +            anns = null;, +            ianns = null;, +            attrs = null;, +            innerClassesCount = 0;, +            innerClasses = null;, +            bootstrapMethodsCount = 0;, +            bootstrapMethods = null;, +            firstField = null;, +            lastField = null;, +            firstMethod = null;, +            lastMethod = null;, +            computeMaxs = false;, +            computeFrames = true;, +            invalidFrames = false;, +            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES);, +            return toByteArray();, +++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +     *            a String whose UTF8 encoded length must be less than 65536., +        if (charLength > 65535) {, +            throw new IllegalArgumentException();, +        }, +                if (byteLength > 65535) {, +                    throw new IllegalArgumentException();, +                }, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +    private boolean computeMaxs;, +    private boolean computeFrames;, +            anns = null;, +            ianns = null;, +            attrs = null;, +            innerClassesCount = 0;, +            innerClasses = null;, +            bootstrapMethodsCount = 0;, +            bootstrapMethods = null;, +            firstField = null;, +            lastField = null;, +            firstMethod = null;, +            lastMethod = null;, +            computeMaxs = false;, +            computeFrames = true;, +            invalidFrames = false;, +            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES);, +            return toByteArray();, +++ b/spring-core/src/main/java/org/springframework/asm/Handle.java, +     * The internal name of the class that owns the field or method designated, +     * by this handle., +     *            the internal name of the class that owns the field or method, +     *            designated by this handle., +     * Returns the internal name of the class that owns the field or method, +     * designated by this handle., +     * @return the internal name of the class that owns the field or method, +     *         designated by this handle., +     * <pre>]