[+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			StringBuffer url = this.servletRequest.getRequestURL();, +			String queryStr = this.servletRequest.getQueryString();, +			if (StringUtils.hasText(queryStr)) {, +				url.append('?').append(queryStr);, +			}, +			return new URI(url.toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			StringBuffer url = this.servletRequest.getRequestURL();, +			String queryStr = this.servletRequest.getQueryString();, +			if (StringUtils.hasText(queryStr)) {, +				url.append('?').append(queryStr);, +			}, +			return new URI(url.toString());, +++ b/spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java, +        URI uri = new URI("https://example.com/%E4%B8%AD%E6%96%87?redirect=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-framework");, +        mockRequest.setScheme(uri.getScheme());, +        // NOTE: should use getRawPath() instead of getPath() is decoded, while HttpServletRequest.setRequestURI() is encoded, +        mockRequest.setRequestURI(uri.getRawPath());, +        // NOTE: should use getRawQuery() instead of getQuery() is decoded, while HttpServletRequest.getQueryString() is encoded, +        mockRequest.setQueryString(uri.getRawQuery());, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			StringBuffer url = this.servletRequest.getRequestURL();, +			String queryStr = this.servletRequest.getQueryString();, +			if (StringUtils.hasText(queryStr)) {, +				url.append('?').append(queryStr);, +			}, +			return new URI(url.toString());, +++ b/spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java, +        URI uri = new URI("https://example.com/%E4%B8%AD%E6%96%87?redirect=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-framework");, +        mockRequest.setScheme(uri.getScheme());, +        // NOTE: should use getRawPath() instead of getPath() is decoded, while HttpServletRequest.setRequestURI() is encoded, +        mockRequest.setRequestURI(uri.getRawPath());, +        // NOTE: should use getRawQuery() instead of getQuery() is decoded, while HttpServletRequest.getQueryString() is encoded, +        mockRequest.setQueryString(uri.getRawQuery());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +		// using default port (which is 80), so do not need to append the port (-1 means ignore), +		assertEquals("Invalid url", new URI("http", null, "www.example.com", -1, "/path", null, null), requestEntity.getUrl());, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			StringBuffer url = this.servletRequest.getRequestURL();, +			String queryStr = this.servletRequest.getQueryString();, +			if (StringUtils.hasText(queryStr)) {, +				url.append('?').append(queryStr);, +			}, +			return new URI(url.toString());, +++ b/spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java, +        URI uri = new URI("https://example.com/%E4%B8%AD%E6%96%87?redirect=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-framework");, +        mockRequest.setScheme(uri.getScheme());, +        // NOTE: should use getRawPath() instead of getPath() is decoded, while HttpServletRequest.setRequestURI() is encoded, +        mockRequest.setRequestURI(uri.getRawPath());, +        // NOTE: should use getRawQuery() instead of getQuery() is decoded, while HttpServletRequest.getQueryString() is encoded, +        mockRequest.setQueryString(uri.getRawQuery());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +		// using default port (which is 80), so do not need to append the port (-1 means ignore), +		assertEquals("Invalid url", new URI("http", null, "www.example.com", -1, "/path", null, null), requestEntity.getUrl());, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/handler/HttpSendingTransportHandlerTests.java, +import org.springframework.web.util.UriUtils;, +			// need to encode the query parameter, +			this.servletRequest.setQueryString("c=" + UriUtils.encodeQueryParam(callbackValue, "UTF-8"));]