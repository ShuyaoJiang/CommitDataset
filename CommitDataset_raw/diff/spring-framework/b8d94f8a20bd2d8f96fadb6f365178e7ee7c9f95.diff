[+++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.lang.Nullable;, +import org.springframework.web.bind.annotation.ResponseStatus;, + * Handle instances of {@link ResponseStatusException}, or of exceptions annotated, + * with {@link ResponseStatus @ResponseStatus}, by extracting the, + * {@code HttpStatus} from them and updating the status of the response., + *, + * <p>If the response is already committed, the error remains unresolved and is, + * propagated., +		HttpStatus status = resolveHttpStatus(ex);, +		if (status != null && exchange.getResponse().setStatusCode(status)) {, +	@Nullable, +	private HttpStatus resolveHttpStatus(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ((ResponseStatusException) ex).getStatus();, +		}, +		ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);, +		if (status != null) {, +			return status.code();, +		}, +		if (ex.getCause() != null) {, +			return resolveHttpStatus(ex.getCause());, +		}, +		return null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.lang.Nullable;, +import org.springframework.web.bind.annotation.ResponseStatus;, + * Handle instances of {@link ResponseStatusException}, or of exceptions annotated, + * with {@link ResponseStatus @ResponseStatus}, by extracting the, + * {@code HttpStatus} from them and updating the status of the response., + *, + * <p>If the response is already committed, the error remains unresolved and is, + * propagated., +		HttpStatus status = resolveHttpStatus(ex);, +		if (status != null && exchange.getResponse().setStatusCode(status)) {, +	@Nullable, +	private HttpStatus resolveHttpStatus(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ((ResponseStatusException) ex).getStatus();, +		}, +		ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);, +		if (status != null) {, +			return status.code();, +		}, +		if (ex.getCause() != null) {, +			return resolveHttpStatus(ex.getCause());, +		}, +		return null;, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/server/handler/ResponseStatusExceptionHandlerTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.bind.annotation.ResponseStatus;, +	public void handleResponseStatusException() {, +	public void handleAnnotatedException() {, +		Throwable ex = new CustomException();, +		this.handler.handle(this.exchange, ex).block(Duration.ofSeconds(5));, +		assertEquals(HttpStatus.I_AM_A_TEAPOT, this.exchange.getResponse().getStatusCode());, +	}, +, +	@Test, +	public void handleNestedResponseStatusException() {, +		Throwable ex = new Exception(new ResponseStatusException(HttpStatus.BAD_REQUEST, ""));, +		this.handler.handle(this.exchange, ex).block(Duration.ofSeconds(5));, +		assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode());, +	}, +, +	@Test, +	public void handleNestedAnnotatedException() {, +		Throwable ex = new Exception(new CustomException());, +		this.handler.handle(this.exchange, ex).block(Duration.ofSeconds(5));, +		assertEquals(HttpStatus.I_AM_A_TEAPOT, this.exchange.getResponse().getStatusCode());, +	}, +, +	@Test, +	public void unresolvedException() {, +	public void responseCommitted() {, +, +	@ResponseStatus(HttpStatus.I_AM_A_TEAPOT), +	private static class CustomException extends Exception {, +	}, +]