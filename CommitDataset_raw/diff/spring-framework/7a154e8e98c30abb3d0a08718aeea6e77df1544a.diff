[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, +import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, +import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, +import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, +import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, +import org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.handler.invocation;, +, +import org.springframework.core.ExceptionDepthComparator;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +import java.lang.reflect.Method;, +import java.util.*;, +import java.util.concurrent.ConcurrentHashMap;, +, +/**, + * Cache exception handling method mappings and provide options to look up a method, + * that should handle an exception. If multiple methods match, they are sorted using, + * {@link ExceptionDepthComparator} and the top match is returned., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractExceptionHandlerMethodResolver {, +, +	private static final Method NO_METHOD_FOUND = ClassUtils.getMethodIfAvailable(System.class, "currentTimeMillis");, +, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new ConcurrentHashMap<Class<? extends Throwable>, Method>(16);, +, +	private final Map<Class<? extends Throwable>, Method> exceptionLookupCache = new ConcurrentHashMap<Class<? extends Throwable>, Method>(16);, +, +, +	/**, +	 * Protected constructor accepting exception-to-method mappings., +	 */, +	protected AbstractExceptionHandlerMethodResolver(Map<Class<? extends Throwable>, Method> mappedMethods) {, +		Assert.notNull(mappedMethods, "Mapped Methods must not be null");, +		this.mappedMethods.putAll(mappedMethods);, +	}, +, +	/**, +	 * Extract the exceptions this method handles.This implementation looks for, +	 * sub-classes of Throwable in the method signature., +	 * The method is static to ensure safe use from sub-class constructors., +	 */, +	@SuppressWarnings("unchecked"), +	protected static List<Class<? extends Throwable>> getExceptionsFromMethodSignature(Method method) {, +		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>();]