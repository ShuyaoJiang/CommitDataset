[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class)));, +++ /dev/null, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class)));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +					TypedValue kvpair = new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class));, +								result.put(entry.getKey(),entry.getValue());, +							result.put(entry.getKey(),entry.getValue());, +							if (variant == FIRST) {, +							}, +++ /dev/null, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class)));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +					TypedValue kvpair = new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class));, +								result.put(entry.getKey(),entry.getValue());, +							result.put(entry.getKey(),entry.getValue());, +							if (variant == FIRST) {, +							}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/InProgressTests.java, + * These are tests for language features that are not yet considered 'live'.  Either missing implementation or documentation., +	public void testRelOperatorsBetween01() {, +		evaluate("1 between listOneFive", "true", Boolean.class);, +		// evaluate("1 between {1, 5}", "true", Boolean.class); // no inline list building at the moment, +	}, +	, +	public void testRelOperatorsBetweenErrors01() {, +		 evaluateAndCheckError("1 between T(String)", SpelMessages.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST, 12);, +	}, +	, +	public void testRelOperatorsBetweenErrors03() {, +		 evaluateAndCheckError("1 between listOfNumbersUpToTen", SpelMessages.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST, 10);, +	}, +	, +	// PROJECTION , +	public void testProjection01() {, +		evaluate("listOfNumbersUpToTen.![#this<5?'y':'n']","[y, y, y, y, n, n, n, n, n, n]",ArrayList.class);, +		// inline list creation not supported at the moment, +        // evaluate("{1,2,3,4,5,6,7,8,9,10}.!{#isEven(#this)}", "[n, y, n, y, n, y, n, y, n, y]", ArrayList.class);, +	}, +	, +	public void testProjection02() {, +		// inline map creation not supported at the moment, +		// evaluate("#{'a':'y','b':'n','c':'y'}.![value=='y'?key:null].nonnull().sort()", "[a, c]", ArrayList.class);, +		evaluate("mapOfNumbersUpToTen.![key>5?value:null]", "[null, null, null, null, null, six, seven, eight, nine, ten]", ArrayList.class);, +	}, +	, +	public void testProjection05() {, +		evaluateAndCheckError("'abc'.![true]", SpelMessages.PROJECTION_NOT_SUPPORTED_ON_TYPE);, +	}, +	, +	public void testProjection06() throws Exception {, +		SpelExpression expr = (SpelExpression)parser.parseExpression("'abc'.![true]");, +		assertEquals("'abc'.![true]",expr.toStringAST());, +		assertFalse(expr.isWritable(new StandardEvaluationContext()));, +	}, +, +	// SELECTION, +	, +	public void testSelection02() {, +		 evaluate("testMap.keySet().?[#this matches '.*o.*']", "[monday]", ArrayList.class);, +		 evaluate("testMap.keySet().?[#this matches '.*r.*'].contains('saturday')", "true", Boolean.class);, +		 evaluate("testMap.keySet().?[#this matches '.*r.*'].size()", "3", Integer.class);, +	}, +	 , +	 public void testSelectionError_NonBooleanSelectionCriteria() {, +		 evaluateAndCheckError("listOfNumbersUpToTen.?['nonboolean']",, +				 SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);, +	 }, +	 , +	public void testSelection03() {, +		evaluate("mapOfNumbersUpToTen.?[key>5].size()", "5", Integer.class);, +//		evaluate("listOfNumbersUpToTen.?{#this>5}", "5", ArrayList.class);, +	}, +, +	public void testSelection04() {, +		evaluateAndCheckError("mapOfNumbersUpToTen.?['hello'].size()",SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);, +	}, +, +	public void testSelectionFirst01() {, +		evaluate("listOfNumbersUpToTen.^[#isEven(#this) == 'y']", "2", Integer.class);, +	}, +, +	public void testSelectionFirst02() {, +		evaluate("mapOfNumbersUpToTen.^[key>5].size()", "1", Integer.class);, +	}, +, +	public void testSelectionLast01() {, +		evaluate("listOfNumbersUpToTen.$[#isEven(#this) == 'y']", "10", Integer.class);, +	}, +, +	public void testSelectionLast02() {, +		evaluate("mapOfNumbersUpToTen.$[key>5].size()", "1", Integer.class);, +	}, +, +	public void testSelectionAST() throws Exception {, +		SpelExpression expr = (SpelExpression)parser.parseExpression("'abc'.^[true]");]