[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	 * Return whether a fallback match is allowed., +	 * <p>This is {@code false} by default but may be overridden to return {@code true} in order, +	 * to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}, +	 * that a fallback match is acceptable as well., +	 */, +	public boolean fallbackMatchAllowed() {, +		return false;, +	}, +, +	/**, +	 * Return a variant of this descriptor that is intended for a fallback match., +	 * @see #fallbackMatchAllowed(), +	 */, +	public DependencyDescriptor forFallbackMatch() {, +		return new DependencyDescriptor(this) {, +			@Override, +			public boolean fallbackMatchAllowed() {, +				return true;, +			}, +		};, +	}, +, +	/**, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Type arg = args[args.length - 1];, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	 * Return whether a fallback match is allowed., +	 * <p>This is {@code false} by default but may be overridden to return {@code true} in order, +	 * to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}, +	 * that a fallback match is acceptable as well., +	 */, +	public boolean fallbackMatchAllowed() {, +		return false;, +	}, +, +	/**, +	 * Return a variant of this descriptor that is intended for a fallback match., +	 * @see #fallbackMatchAllowed(), +	 */, +	public DependencyDescriptor forFallbackMatch() {, +		return new DependencyDescriptor(this) {, +			@Override, +			public boolean fallbackMatchAllowed() {, +				return true;, +			}, +		};, +	}, +, +	/**, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Type arg = args[args.length - 1];, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (result.isEmpty()) {, +			DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch();, +			for (String candidateName : candidateNames) {, +				if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) {, +					result.put(candidateName, getBean(candidateName));, +				}, +			}, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	 * Return whether a fallback match is allowed., +	 * <p>This is {@code false} by default but may be overridden to return {@code true} in order, +	 * to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}, +	 * that a fallback match is acceptable as well., +	 */, +	public boolean fallbackMatchAllowed() {, +		return false;, +	}, +, +	/**, +	 * Return a variant of this descriptor that is intended for a fallback match., +	 * @see #fallbackMatchAllowed(), +	 */, +	public DependencyDescriptor forFallbackMatch() {, +		return new DependencyDescriptor(this) {, +			@Override, +			public boolean fallbackMatchAllowed() {, +				return true;, +			}, +		};, +	}, +, +	/**, +					Type[] args = ((ParameterizedType) type).getActualTypeArguments();, +					Type arg = args[args.length - 1];, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (result.isEmpty()) {, +			DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch();, +			for (String candidateName : candidateNames) {, +				if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) {, +					result.put(candidateName, getBean(candidateName));, +				}, +			}, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, +		return (descriptor == null || checkGenericTypeMatch(bdHolder, descriptor));, +	protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {, +		ResolvableType dependencyType = descriptor.getResolvableType();]