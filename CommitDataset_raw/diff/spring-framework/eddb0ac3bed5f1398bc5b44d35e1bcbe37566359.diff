[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +import java.util.ArrayList;, +import java.util.Collection;, + * <p>This class reads Spring's JDK 1.5+ {@link Cacheable}, {@link CacheUpdate} and {@link CacheEvict} , +	protected Collection<CacheOperation> findCacheOperations(Class<?> clazz) {, +		return determineCacheOperations(clazz);, +	protected Collection<CacheOperation> findCacheOperations(Method method) {, +		return determineCacheOperations(method);, +	protected Collection<CacheOperation> determineCacheOperations(AnnotatedElement ae) {, +		Collection<CacheOperation> ops = null;, +, +			Collection<CacheOperation> annOps = annotationParser.parseCacheAnnotations(ae);, +			if (annOps != null) {, +				if (ops == null) {, +					ops = new ArrayList<CacheOperation>();, +				}, +				ops.addAll(annOps);, +		return ops;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +import java.util.ArrayList;, +import java.util.Collection;, + * <p>This class reads Spring's JDK 1.5+ {@link Cacheable}, {@link CacheUpdate} and {@link CacheEvict} , +	protected Collection<CacheOperation> findCacheOperations(Class<?> clazz) {, +		return determineCacheOperations(clazz);, +	protected Collection<CacheOperation> findCacheOperations(Method method) {, +		return determineCacheOperations(method);, +	protected Collection<CacheOperation> determineCacheOperations(AnnotatedElement ae) {, +		Collection<CacheOperation> ops = null;, +, +			Collection<CacheOperation> annOps = annotationParser.parseCacheAnnotations(ae);, +			if (annOps != null) {, +				if (ops == null) {, +					ops = new ArrayList<CacheOperation>();, +				}, +				ops.addAll(annOps);, +		return ops;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, +import java.util.Collection;, + * {@link Cacheable}, {@link CacheUpdate} or {@link CacheEvict}., +	Collection<CacheOperation> parseCacheAnnotations(AnnotatedElement ae);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +import java.util.ArrayList;, +import java.util.Collection;, + * <p>This class reads Spring's JDK 1.5+ {@link Cacheable}, {@link CacheUpdate} and {@link CacheEvict} , +	protected Collection<CacheOperation> findCacheOperations(Class<?> clazz) {, +		return determineCacheOperations(clazz);, +	protected Collection<CacheOperation> findCacheOperations(Method method) {, +		return determineCacheOperations(method);, +	protected Collection<CacheOperation> determineCacheOperations(AnnotatedElement ae) {, +		Collection<CacheOperation> ops = null;, +, +			Collection<CacheOperation> annOps = annotationParser.parseCacheAnnotations(ae);, +			if (annOps != null) {, +				if (ops == null) {, +					ops = new ArrayList<CacheOperation>();, +				}, +				ops.addAll(annOps);, +		return ops;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, +import java.util.Collection;, + * {@link Cacheable}, {@link CacheUpdate} or {@link CacheEvict}., +	Collection<CacheOperation> parseCacheAnnotations(AnnotatedElement ae);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheDefinition.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * Group annotation for multiple cacheable annotations (of different or the same type)., + * , + * @author Costin Leau, + * @since 3.1, + */, +@Target({ ElementType.METHOD, ElementType.TYPE }), +@Retention(RetentionPolicy.RUNTIME), +@Inherited, +@Documented, +public @interface CacheDefinition {, +]