[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +, +	public InetSocketAddress getRemoteAddress() {, +		return this.remoteAddress;, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +, +	public InetSocketAddress getRemoteAddress() {, +		return this.remoteAddress;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +		public Validator getValidator() {, +			return this.validator;, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +, +	public InetSocketAddress getRemoteAddress() {, +		return this.remoteAddress;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +		public Validator getValidator() {, +			return this.validator;, +++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java, + * An {@code HttpCookie} subclass with the additional attributes allowed in, +	private final String domain;, +	private final String path;, +		this.domain = domain;, +		this.path = path;, +	 * Return the cookie "Domain" attribute, or {@code null} if not set., +	public String getDomain() {, +	 * Return the cookie "Path" attribute, or {@code null} if not set., +	public String getPath() {, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +, +	public InetSocketAddress getRemoteAddress() {, +		return this.remoteAddress;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +		public Validator getValidator() {, +			return this.validator;, +++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java, + * An {@code HttpCookie} subclass with the additional attributes allowed in, +	private final String domain;, +	private final String path;, +		this.domain = domain;, +		this.path = path;, +	 * Return the cookie "Domain" attribute, or {@code null} if not set., +	public String getDomain() {, +	 * Return the cookie "Path" attribute, or {@code null} if not set., +	public String getPath() {, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEvent.java, + * Copyright 2002-2017 the original author or authors., + * Representation for a Server-Sent Event for use with Spring's reactive Web support., + * {@code Flux<ServerSentEvent>} or {@code Observable<ServerSentEvent>} is the, + *, + * @since 5.0, +, +    /**, +     * Return the {@code id} field of this event, if available., +     */, +    public String id() {, +        return this.id;, +    }, +, +    /**, +     * Return the {@code event} field of this event, if available., +     */, +    public String event() {, +        return this.event;, +    }, +, +    /**, +     * Return the {@code data} field of this event, if available., +     */, +    public T data() {, +        return this.data;, +    }, +, +    /**, +     * Return the {@code retry} field of this event, if available., +     */, +    public Duration retry() {, +        return this.retry;, +    }, +, +    /**, +     * Return the comment of this event, if available., +     */, +    public String comment() {, +        return this.comment;, +    }, +, +, +    @Override, +    public String toString() {, +        return ("ServerSentEvent [id = '" + this.id + '\'' + ", event='" + this.event + '\'' +]