[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.io.InputStream;, +import java.io.PushbackInputStream;, +import org.springframework.http.HttpHeaders;, +	private static final Object NO_VALUE = new Object();, +, +, +	 * @param targetType the target type, not necessarily the same as the method, +	 * parameter type, e.g. for {@code HttpEntity<String>}., +		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage);, +		Object body = NO_VALUE;, +, +					if (inputMessage.getBody() != null) {, +						body = genericConverter.read(targetType, contextClass, inputMessage);, +						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType);, +					}, +					else {, +						body = null;, +						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType);, +					}, +					break;, +					if (inputMessage.getBody() != null) {, +						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage);, +						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType);, +					}, +					else {, +						body = null;, +						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType);, +					}, +					break;, +		if (body == NO_VALUE) {, +		return body;, +	}, +, +, +	private static class EmptyBodyCheckingHttpInputMessage implements HttpInputMessage {, +, +		private final HttpHeaders headers;, +, +		private final InputStream body;, +, +, +		public EmptyBodyCheckingHttpInputMessage(HttpInputMessage inputMessage) throws IOException {, +			this.headers = inputMessage.getHeaders();, +			InputStream inputStream = inputMessage.getBody();, +			if (inputStream == null) {, +				this.body = null;, +			}, +			else if (inputStream.markSupported()) {, +				inputStream.mark(1);, +				this.body = (inputStream.read() != -1 ? inputStream : null);, +				inputStream.reset();, +			}, +			else {, +				PushbackInputStream pushbackInputStream = new PushbackInputStream(inputStream);, +				int b = pushbackInputStream.read();, +				if (b == -1) {, +					this.body = null;, +				}, +				else {, +					this.body = pushbackInputStream;, +					pushbackInputStream.unread(b);, +				}, +			}, +		}, +, +		@Override, +		public HttpHeaders getHeaders() {, +			return this.headers;, +		}, +, +		@Override, +		public InputStream getBody() throws IOException {, +			return this.body;, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.io.InputStream;, +import java.io.PushbackInputStream;, +import org.springframework.http.HttpHeaders;, +	private static final Object NO_VALUE = new Object();, +, +, +	 * @param targetType the target type, not necessarily the same as the method, +	 * parameter type, e.g. for {@code HttpEntity<String>}., +		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage);, +		Object body = NO_VALUE;, +, +					if (inputMessage.getBody() != null) {, +						body = genericConverter.read(targetType, contextClass, inputMessage);, +						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType);, +					}, +					else {, +						body = null;, +						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType);, +					}, +					break;, +					if (inputMessage.getBody() != null) {, +						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage);]