[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, + * Copyright 2002-2015 the original author or authors., +			if(!this.handlerMap.isEmpty()) {, +				this.autodetect = false;, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, + * Copyright 2002-2015 the original author or authors., +			if(!this.handlerMap.isEmpty()) {, +				this.autodetect = false;, +			}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderTests.java, + * Copyright 2002-2015 the original author or authors., +import org.hamcrest.Matchers;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.mock.web.test.MockServletContext;, +import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;, +import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;, +	// SPR-12592, +	@Test, +	public void initializeOnce() throws Exception {, +		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +		context.setServletContext(new MockServletContext());, +		context.register(HandlerMappingConfiguration.class);, +		context.refresh();, +		ResourceUrlProvider translator = context.getBean(ResourceUrlProvider.class);, +		assertThat(translator.getHandlerMap(), Matchers.hasKey("/resources/**"));, +		assertFalse(translator.isAutodetect());, +	}, +, +	@Configuration, +	public static class HandlerMappingConfiguration {, +		@Bean, +		public SimpleUrlHandlerMapping simpleUrlHandlerMapping() {, +			ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();, +			HashMap<String, ResourceHttpRequestHandler> handlerMap = new HashMap<String, ResourceHttpRequestHandler>();, +			handlerMap.put("/resources/**", handler);, +			SimpleUrlHandlerMapping hm = new SimpleUrlHandlerMapping();, +			hm.setUrlMap(handlerMap);, +			return hm;, +		}, +, +		@Bean, +		public ResourceUrlProvider resourceUrlProvider() {, +			return new ResourceUrlProvider();, +		}, +	}, +]