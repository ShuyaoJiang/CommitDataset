[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +import java.util.LinkedList;, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.FatalBeanException;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, + * @author Juergen Hoeller, +public class Jackson2ObjectMapperFactoryBean implements FactoryBean<ObjectMapper>, BeanClassLoaderAware, InitializingBean {, +	private JsonInclude.Include serializationInclusion;, +, +	private final Map<Object, Boolean> features = new HashMap<Object, Boolean>();, +, +	private final List<Module> modules = new LinkedList<Module>();, +, +	private boolean findModules;, +, +	private ClassLoader beanClassLoader;, +	 * Set an {@link AnnotationIntrospector} for both serialization and deserialization., +	 * Set a custom inclusion strategy for serialization., +	 * @see com.fasterxml.jackson.annotation.JsonInclude.Include, +	 */, +	public void setSerializationInclusion(JsonInclude.Include serializationInclusion) {, +		this.serializationInclusion = serializationInclusion;, +	}, +, +	/**, +	 * Set whether to let Jackson find available modules via the ServiceLoader., +	 * Requires Jackson 2.2 or higher., +	 * <p>If this mode is not set, Spring's Jackson2ObjectMapperFactoryBean itself, +	 * will try to find the JSR-310 and Joda-Time support modules on the classpath -, +	 * provided that Java 8 and Joda-Time themselves are available, respectively., +	 * @see com.fasterxml.jackson.databind.ObjectMapper#findModules(), +	public void setFindModules(boolean findModules) {, +		this.findModules = findModules;, +	 * Set the list of modules to be registered with the {@link ObjectMapper}., +	 * @see com.fasterxml.jackson.databind.Module, +	public void setBeanClassLoader(ClassLoader beanClassLoader) {, +		this.beanClassLoader = beanClassLoader;, +	}, +, +, +	@Override, +		if (this.annotationIntrospector != null) {, +			this.objectMapper.setAnnotationIntrospector(this.annotationIntrospector);, +		}, +, +		if (this.serializationInclusion != null) {, +			this.objectMapper.setSerializationInclusion(this.serializationInclusion);, +		}, +, +		if (this.findModules) {, +			this.objectMapper.registerModules(ObjectMapper.findModules(this.beanClassLoader));, +		}, +		else {, +			registerWellKnownModulesIfAvailable();, +			throw new FatalBeanException("Unknown feature class: " + feature.getClass().getName());, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +	private void registerWellKnownModulesIfAvailable() {, +		ClassLoader cl = this.beanClassLoader;, +		if (cl == null) {, +			cl = getClass().getClassLoader();, +		}, +		// Java 8 java.time package present?, +		if (ClassUtils.isPresent("java.time.LocalDate", cl)) {, +			try {, +				Class<? extends Module> jsr310Module = (Class<? extends Module>), +						cl.loadClass("com.fasterxml.jackson.datatype.jsr310.JSR310Module");, +				this.objectMapper.registerModule(BeanUtils.instantiate(jsr310Module));, +			}, +			catch (ClassNotFoundException ex) {, +				// jackson-datatype-jsr310 not available, +			}, +		}, +		// Joda-Time present?, +		if (ClassUtils.isPresent("org.joda.time.LocalDate", cl)) {, +			try {, +				Class<? extends Module> jodaModule = (Class<? extends Module>), +						cl.loadClass("com.fasterxml.jackson.datatype.joda.JodaModule");, +				this.objectMapper.registerModule(BeanUtils.instantiate(jodaModule));, +			}, +			catch (ClassNotFoundException ex) {, +				// jackson-datatype-joda not available, +			}]