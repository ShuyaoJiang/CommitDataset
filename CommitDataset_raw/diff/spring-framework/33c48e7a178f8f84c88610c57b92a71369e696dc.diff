[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistration.java, + * Assists with the creation of a {@link CorsConfiguration} instance mapped to, + * a path pattern., + * <p>If no path pattern is specified, by default cross-origin request handling, + * is mapped to {@code "/**"}. Also by default, all origins, headers,, + * credentials and {@code GET}, {@code HEAD}, and {@code POST} methods are, + * allowed, while the max age is set to 30 minutes., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistration.java, + * Assists with the creation of a {@link CorsConfiguration} instance mapped to, + * a path pattern., + * <p>If no path pattern is specified, by default cross-origin request handling, + * is mapped to {@code "/**"}. Also by default, all origins, headers,, + * credentials and {@code GET}, {@code HEAD}, and {@code POST} methods are, + * allowed, while the max age is set to 30 minutes., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistry.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistration.java, + * Assists with the creation of a {@link CorsConfiguration} instance mapped to, + * a path pattern., + * <p>If no path pattern is specified, by default cross-origin request handling, + * is mapped to {@code "/**"}. Also by default, all origins, headers,, + * credentials and {@code GET}, {@code HEAD}, and {@code POST} methods are, + * allowed, while the max age is set to 30 minutes., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistry.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.Jackson2ServerHttpMessageReader;, +import org.springframework.http.codec.Jackson2ServerHttpMessageWriter;, +	private Map<String, CorsConfiguration> corsConfigurations;, +, +	 * Callback for building the global CORS configuration. This method is final., +	 * Use {@link #addCorsMappings(CorsRegistry)} to customize the CORS conifg., +	 */, +	protected final Map<String, CorsConfiguration> getCorsConfigurations() {, +		if (this.corsConfigurations == null) {, +			CorsRegistry registry = new CorsRegistry();, +			addCorsMappings(registry);, +			this.corsConfigurations = registry.getCorsConfigurations();, +		}, +		return this.corsConfigurations;, +	}, +, +	/**, +	 * Override this method to configure cross origin requests processing., +	 * @see CorsRegistry, +	 */, +	protected void addCorsMappings(CorsRegistry registry) {, +	}, +, +	/**, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistration.java, + * Assists with the creation of a {@link CorsConfiguration} instance mapped to, + * a path pattern., + * <p>If no path pattern is specified, by default cross-origin request handling, + * is mapped to {@code "/**"}. Also by default, all origins, headers,, + * credentials and {@code GET}, {@code HEAD}, and {@code POST} methods are, + * allowed, while the max age is set to 30 minutes., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/CorsRegistry.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.Jackson2ServerHttpMessageReader;, +import org.springframework.http.codec.Jackson2ServerHttpMessageWriter;, +	private Map<String, CorsConfiguration> corsConfigurations;, +, +	 * Callback for building the global CORS configuration. This method is final., +	 * Use {@link #addCorsMappings(CorsRegistry)} to customize the CORS conifg., +	 */, +	protected final Map<String, CorsConfiguration> getCorsConfigurations() {, +		if (this.corsConfigurations == null) {, +			CorsRegistry registry = new CorsRegistry();, +			addCorsMappings(registry);, +			this.corsConfigurations = registry.getCorsConfigurations();, +		}, +		return this.corsConfigurations;, +	}, +, +	/**, +	 * Override this method to configure cross origin requests processing., +	 * @see CorsRegistry, +	 */, +	protected void addCorsMappings(CorsRegistry registry) {, +	}, +, +	/**, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	private final UrlBasedCorsConfigurationSource globalCorsConfigSource = new UrlBasedCorsConfigurationSource();, +	private CorsProcessor corsProcessor = new DefaultCorsProcessor();, +, +		this.globalCorsConfigSource.setPathMatcher(pathMatcher);, +	 * Set "global" CORS configuration based on URL patterns. By default the, +	 * first matching URL pattern is combined with handler-level CORS, +	 * configuration if any., +	 */, +	public void setCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations) {, +		this.globalCorsConfigSource.setCorsConfigurations(corsConfigurations);, +	}, +, +	/**]