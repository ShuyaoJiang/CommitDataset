[+++ b/src/asciidoc/data-access.adoc, +We also support metadata lookup of stored functions for MySQL, Microsoft SQL Server,, +==== Creating an embedded database using Spring XML, +, +`ApplicationContext`, use the `embedded-database` tag in the `spring-jdbc` namespace:, +`schema.sql` and `test-data.sql` resources in the root of the root of the classpath. The, +database instance is made available to the Spring container as a bean of type, +`javax.sql.DataSource`. This bean can then be injected into data access objects as needed., +==== Creating an embedded database programmatically, +, +database programmatically. Use this when you need to create an embedded database in a, +standalone environment or in a standalone integration test:, +EmbeddedDatabase db = new EmbeddedDatabaseBuilder(), +    .setType(H2), +    .setScriptEncoding("UTF-8"), +    .ignoreFailedDrops(true), +    .addScript("schema.sql"), +    .addScripts("user_data.sql", "country_data.sql"), +    .build();, +, +, +The `EmbeddedDatabaseBuilder` can also be used to create an embedded database using Java, +Config like in the following example., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +@Configuration, +public class DataSourceConfig {, +, +    @Bean, +    public DataSource dataSource() {, +        return new EmbeddedDatabaseBuilder(), +            .setType(H2), +            .setScriptEncoding("UTF-8"), +            .ignoreFailedDrops(true), +            .addScript("schema.sql"), +            .addScripts("user_data.sql", "country_data.sql"), +            .build();, +    }, +}, +----, +, +* Implement `EmbeddedDatabaseConfigurer` to support a new embedded database type., +* Implement `DataSourceFactory` to support a new `DataSource` implementation, such as a, +  connection pool to manage embedded database connections., +Spring supports HSQL 1.8.0 and above. HSQL is the default embedded database if no type is, +specified explicitly. To specify HSQL explicitly, set the `type` attribute of the, +attribute of the `embedded-database` tag to `DERBY`. If you are using the builder API,, +call the `setType(EmbeddedDatabaseType)` method with `EmbeddedDatabaseType.DERBY`., +, +Embedded databases provide a lightweight way to test data access code. The following is a, +data access integration test template that uses an embedded database. Using a template, +like this can be useful for _one-offs_ when the embedded database does not need to be, +reused across test classes. However, if you wish to create an embedded database that is, +shared within a test suite, consider using the <<testcontext-framework,Spring TestContext, +Framework>> and configuring the embedded database as a bean in the Spring, +`ApplicationContext` as described in <<jdbc-embedded-database-xml>> and, +<<jdbc-embedded-database-java>>., +	public class DataAccessIntegrationTestTemplate {, +			template.query( /* ... */ );, +==== Initializing a database using Spring XML, +If you want to initialize a database and you can provide a reference to a `DataSource`, +The example above executes the two scripts specified against the database: the first, +script creates a schema, and the second populates tables with a test data set. The script, +locations can also be patterns with wildcards in the usual ant style used for resources, +in Spring (e.g., +`classpath{asterisk}:/com/foo/{asterisk}{asterisk}/sql/{asterisk}-data.sql`). If a, +pattern is used, the scripts are executed in lexical order of their URL or filename., +scripts provided. This will not always be what you want, for instance, if you are, +executing the scripts against a database that already has test data in it. The likelihood, +of accidentally deleting data is reduced by following the common pattern (as shown above), +of creating the tables first and then inserting the data -- the first step will fail if, +the tables already exist., +However, to gain more control over the creation and deletion of existing data, the XML, +namespace provides a few additional options. The first is a flag to switch the, +initialization on and off. This can be set according to the environment (e.g. to pull a, +boolean value from system properties or an environment bean), for example:, +errors in the SQL it executes from the scripts, for example:, +In this example we are saying we expect that sometimes the scripts will be executed, +against an empty database, and there are some `DROP` statements in the scripts which, +would therefore fail. So failed SQL `DROP` statements will be ignored, but other failures, +will cause an exception. This is useful if your SQL dialect doesn't support `DROP ... IF, +re-creating it. In that case the first script is usually a set of `DROP` statements,, +followed by a set of `CREATE` statements., +drops), or `ALL` (ignore all failures)., +`DataSourceInitializer` directly and define it as a component in your application., +===== Initialization of other components that depend on the database, +, +started. If your application is __not__ one of those then you might need to read the rest, +of this section., +The database initializer depends on a `DataSource` instance and executes the scripts, +provided in its initialization callback (analogous to an `init-method` in an XML bean, +definition, a `@PostConstruct` method in a component, or the `afterPropertiesSet()`, +method in a component that implements `InitializingBean`). If other beans depend on the, +same data source and also use the data source in an initialization callback, then there, +might be a problem because the data has not yet been initialized. A common example of, +this is a cache that initializes eagerly and loads data from the database on application, +startup., +To get around this issue you have two options: change your cache initialization strategy]