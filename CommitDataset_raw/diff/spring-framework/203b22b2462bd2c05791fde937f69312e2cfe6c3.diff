[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2013 the original author or authors., +	private static final Pattern QUERY_PARAM_PATTERN = Pattern.compile("([^&=]+)(=?)([^&]+)?");, +				String eq = m.group(2);, +				String value = m.group(3);, +				queryParam(name, (value != null ? value :, +					(StringUtils.hasLength(eq) ? "" : null)));, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2013 the original author or authors., +	private static final Pattern QUERY_PARAM_PATTERN = Pattern.compile("([^&=]+)(=?)([^&]+)?");, +				String eq = m.group(2);, +				String value = m.group(3);, +				queryParam(name, (value != null ? value :, +					(StringUtils.hasLength(eq) ? "" : null)));, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.equalTo;, + * @author Phillip Webb, +	@Test, +	public void queryParamWithValueWithEquals() throws Exception {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/foo?bar=baz").build();, +		assertThat(uriComponents.toUriString(), equalTo("http://example.com/foo?bar=baz"));, +	}, +, +	@Test, +	public void queryParamWithoutValueWithEquals() throws Exception {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/foo?bar=").build();, +		assertThat(uriComponents.toUriString(), equalTo("http://example.com/foo?bar="));, +	}, +, +	@Test, +	public void queryParamWithoutValueWithoutEquals() throws Exception {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/foo?bar").build();, +		assertThat(uriComponents.toUriString(), equalTo("http://example.com/foo?bar"));, +	}, +]