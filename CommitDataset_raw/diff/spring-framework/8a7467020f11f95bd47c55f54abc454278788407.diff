[+++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import javax.xml.parsers.DocumentBuilder;, +import javax.xml.parsers.DocumentBuilderFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.transform.Result;, +import javax.xml.transform.dom.DOMResult;, +import javax.xml.transform.stream.StreamResult;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +	private static final Predicate<Node> nodeFilter = (n -> n.getNodeType() != Node.COMMENT_NODE &&, +			n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE);, +, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import javax.xml.parsers.DocumentBuilder;, +import javax.xml.parsers.DocumentBuilderFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.transform.Result;, +import javax.xml.transform.dom.DOMResult;, +import javax.xml.transform.stream.StreamResult;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +	private static final Predicate<Node> nodeFilter = (n -> n.getNodeType() != Node.COMMENT_NODE &&, +			n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE);, +, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +++ b/spring-core/src/test/java/org/springframework/util/xml/StaxEventHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +	protected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {, +++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import javax.xml.parsers.DocumentBuilder;, +import javax.xml.parsers.DocumentBuilderFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.transform.Result;, +import javax.xml.transform.dom.DOMResult;, +import javax.xml.transform.stream.StreamResult;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +	private static final Predicate<Node> nodeFilter = (n -> n.getNodeType() != Node.COMMENT_NODE &&, +			n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE);, +, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +++ b/spring-core/src/test/java/org/springframework/util/xml/StaxEventHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +	protected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {, +++ b/spring-core/src/test/java/org/springframework/util/xml/StaxStreamHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +	protected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {, +++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import javax.xml.parsers.DocumentBuilder;, +import javax.xml.parsers.DocumentBuilderFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.transform.Result;, +import javax.xml.transform.dom.DOMResult;, +import javax.xml.transform.stream.StreamResult;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +	private static final Predicate<Node> nodeFilter = (n -> n.getNodeType() != Node.COMMENT_NODE &&, +			n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE);, +, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +++ b/spring-core/src/test/java/org/springframework/util/xml/StaxEventHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +	protected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {, +++ b/spring-core/src/test/java/org/springframework/util/xml/StaxStreamHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +	protected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +		private final Map<HandlerMethod, CorsConfiguration> corsLookup = new ConcurrentHashMap<>();, +++ b/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxHandlerTestCase.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringReader;, +import java.io.StringWriter;, +import java.net.Socket;, +import javax.xml.parsers.DocumentBuilder;, +import javax.xml.parsers.DocumentBuilderFactory;]