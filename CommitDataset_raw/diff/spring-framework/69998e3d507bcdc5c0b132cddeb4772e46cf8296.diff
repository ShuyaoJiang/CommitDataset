[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewFilter.java, + * Copyright 2002-2014 the original author or authors., + * the default bean name is "persistenceManagerFactory"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewFilter.java, + * Copyright 2002-2014 the original author or authors., + * the default bean name is "persistenceManagerFactory"., +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	 * Find a custom {@link WebApplicationContext} for this web app., +	 * @param servletContext the ServletContext that we're running within, +	 * @param servletConfig the ServletConfig of the containing Portlet, +			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {, +		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {, +			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext);, +		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {, +			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig);, +			if (servletContext != null) {, +				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames();, +					parameterMap.put(paramName, servletContext.getInitParameter(paramName));, +			if (servletConfig != null) {, +				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames();, +					parameterMap.put(paramName, servletConfig.getInitParameter(paramName));, +			if (servletContext != null) {, +				Enumeration<?> attrNameEnum = servletContext.getAttributeNames();, +					attributeMap.put(attrName, servletContext.getAttribute(attrName));, +	public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewFilter.java, + * Copyright 2002-2014 the original author or authors., + * the default bean name is "persistenceManagerFactory"., +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	 * Find a custom {@link WebApplicationContext} for this web app., +	 * @param servletContext the ServletContext that we're running within, +	 * @param servletConfig the ServletConfig of the containing Portlet, +			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {, +		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {, +			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext);, +		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {, +			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig);, +			if (servletContext != null) {, +				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames();, +					parameterMap.put(paramName, servletContext.getInitParameter(paramName));, +			if (servletConfig != null) {, +				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames();, +					parameterMap.put(paramName, servletConfig.getInitParameter(paramName));, +			if (servletContext != null) {, +				Enumeration<?> attrNameEnum = servletContext.getAttributeNames();, +					attributeMap.put(attrName, servletContext.getAttribute(attrName));, +	public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {, +++ b/spring-web/src/main/java/org/springframework/web/jsf/FacesContextUtils.java, + * Copyright 2002-2014 the original author or authors., +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException {, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * the default bean name is "sessionFactory"., +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/support/OpenPersistenceManagerInViewFilter.java, + * Copyright 2002-2014 the original author or authors., + * the default bean name is "persistenceManagerFactory"., +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {, +	 * Find the root {@link WebApplicationContext} for this web app, typically, +	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}., +	 * Find a custom {@link WebApplicationContext} for this web app., +	 * @param servletContext the ServletContext that we're running within, +	 * @param servletConfig the ServletConfig of the containing Portlet, +			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {, +		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {]