[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java, +	 * <p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against, +	 * <p><b>NOTE: Per the explanation above, you may have to turn this flag off, +	 * when using Hibernate in a JTA environment, e.g. on WebLogic.</b> Alternatively,, +	 * set Hibernate 5.2's "hibernate.connection.handling_mode" property to, +	 * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even, +	 * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario., +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java, +	 * <p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against, +	 * <p><b>NOTE: Per the explanation above, you may have to turn this flag off, +	 * when using Hibernate in a JTA environment, e.g. on WebLogic.</b> Alternatively,, +	 * set Hibernate 5.2's "hibernate.connection.handling_mode" property to, +	 * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even, +	 * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario., +++ b/src/asciidoc/data-access.adoc, +You can omit the `transaction-manager` attribute in the transactional advice, +(`<tx:advice/>`) if the bean name of the `PlatformTransactionManager` that you want to, +which is available in WebSphere Application Server 6.1.0.9 and later. With this adapter,, +Spring-driven transaction suspension (suspend/resume as initiated by, +`PROPAGATION_REQUIRES_NEW`) is officially supported by IBM., +[[jdbc-initializing-datasource]], +, +As of Spring 5.0, Spring requires Hibernate ORM 4.3 or later for JPA support and even, +Hibernate ORM 5.0+ for programming against the native Hibernate Session API. Note that, +the Hibernate team does not maintain any versions prior to 5.0 anymore and is likely, +to focus on 5.2+ exclusively soon., +You may annotate the service layer with `@Transactional` annotations and instruct the, +Spring container to find these annotations and provide transactional semantics for, +these annotated methods., +All you need to set up in the container is the `PlatformTransactionManager`, +implementation as a bean as well as a "<tx:annotation-driven/>" entry,, +opting into `@Transactional` processing at runtime., +Use this option when deploying to a Java EE server. Check your server's documentation, +Obtaining an `EntityManagerFactory` from JNDI (for example in a Java EE environment),, +This action assumes standard Java EE bootstrapping: the Java EE server autodetects, +This option may conflict with the built-in JPA capabilities of a Java EE server. In a, +full Java EE environment, consider obtaining your `EntityManagerFactory` from JNDI., +application jar files. Because the Java EE server only looks for default, +Not all JPA providers require a JVM agent. Hibernate is an example of one that does not., +If your provider does not require an agent or you have other alternatives, such as, +[[orm-jpa-multiple]], +[[orm-jpa-dao]], +==== Implementing DAOs based on JPA: EntityManagerFactory and EntityManager, +On the Java EE platform, they are used for dependency declaration and not for resource, +==== Spring-driven JPA transactions, +, +The recommended strategy for JPA is local transactions via JPA's native transaction, +support. Spring's `JpaTransactionManager` provides many capabilities known from local, +JDBC transactions, such as transaction-specific isolation levels and resource-level, +read-only optimizations, against any regular JDBC connection pool (no XA requirement)., +Spring JPA also allows a configured `JpaTransactionManager` to expose a JPA transaction, +to JDBC access code that accesses the same `DataSource`, provided that the registered, +==== JpaDialect and JpaVendorAdapter, +not provide any special capabilities and if the above features are required, you have, +to specify the appropriate dialect., +[TIP], +====, +As an even broader provider adaptation facility primarily for Spring's full-featured, +`LocalContainerEntityManagerFactoryBean` setup, `JpaVendorAdapter` combines the, +capabilities of `JpaDialect` with other provider-specific defaults. Specifying a, +`HibernateJpaVendorAdapter` or `EclipseLinkJpaVendorAdapter` is the most convenient, +way of auto-configuring an `EntityManagerFactory` setup for Hibernate or EclipseLink,, +respectively. Note that those provider adapters are primarily designed for use with, +Spring-driven transaction management, i.e. for use with `JpaTransactionManager`., +====, +, +See the `JpaDialect` and `JpaVendorAdapter` javadocs for more details of its operations, +and how they are used within Spring's JPA support., +, +, +, +[[orm-jpa-jta]], +==== Setting up JPA with JTA transaction management, +, +As an alternative to `JpaTransactionManager`, Spring also allows for multi-resource, +transaction coordination via JTA, either in a Java EE environment or with a, +standalone transaction coordinator such as Atomikos. Aside from choosing Spring's, +`JtaTransactionManager` instead of `JpaTransactionManager`, there are a few further, +steps to take:, +, +* The underlying JDBC connection pools need to be XA-capable and integrated with, +your transaction coordinator. This is usually straightforward in a Java EE environment,, +simply exposing a different kind of `DataSource` via JNDI. Check your application server, +documentation for details. Analogously, a standalone transaction coordinator usually, +comes with special XA-integrated `DataSource` implementations; again, check its docs., +, +* The JPA `EntityManagerFactory` setup needs to be configured for JTA. This is, +provider-specific, typically via special properties to be specified as "jpaProperties", +on `LocalContainerEntityManagerFactoryBean`. In the case of Hibernate, these properties, +are even version-specific; please check your Hibernate documentation for details., +, +* Spring's `HibernateJpaVendorAdapter` enforces certain Spring-oriented defaults such, +as the connection release mode "on-close" which matches Hibernate's own default in, +Hibernate 5.0 but not anymore in 5.1/5.2. For a JTA setup, either do not declare, +`HibernateJpaVendorAdapter` to begin with, or turn off its `prepareConnection` flag., +Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode" property to, +"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" to restore Hibernate's own default., +See <<orm-hibernate-invalid-jdbc-access-error>> for a related note about WebLogic., +, +* Alternatively, consider obtaining the `EntityManagerFactory` from your application]