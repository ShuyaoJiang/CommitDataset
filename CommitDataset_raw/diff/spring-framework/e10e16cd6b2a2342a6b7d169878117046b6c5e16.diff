[+++ b/build.gradle, +		optional("org.testng:testng:6.8.5"), +			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/build.gradle, +		optional("org.testng:testng:6.8.5"), +			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/build.gradle, +		optional("org.testng:testng:6.8.5"), +			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxMetaspaceSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%, +++ b/build.gradle, +		optional("org.testng:testng:6.8.5"), +			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxMetaspaceSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%, +++ b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPoolTargetSource.java, + * Copyright 2002-2013 the original author or authors., + * properties are explicitly not mirrored because the implementation of, +++ b/build.gradle, +		optional("org.testng:testng:6.8.5"), +			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m", +++ b/gradlew, +GRADLE_OPTS="-XX:MaxMetaspaceSize=1024m -Xmx1024m $GRADLE_OPTS", +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxMetaspaceSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%, +++ b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPoolTargetSource.java, + * Copyright 2002-2013 the original author or authors., + * properties are explicitly not mirrored because the implementation of, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import static org.junit.Assert.*;, +		List<Integer> input = new ArrayList<Integer>();, +	 * Tests support for parameterized static {@code factory-method} declarations such as, +	 * Mockito's {@code mock()} method which has the following signature., +	 * <pre>, +	 * {@code, +	 * }, +	 * </pre>, +	 * <p>, +	 * , +	public void parameterizedStaticFactoryMethod() {, +	/**, +	 * Tests support for parameterized instance {@code factory-method} declarations such, +	 * as EasyMock's {@code IMocksControl.createMock()} method which has the following, +	 * signature., +	 * , +	 * <pre>, +	 * {@code, +	 * public <T> T createMock(Class<T> toMock), +	 * }, +	 * </pre>, +	 * , +	 * <p>, +	 * See SPR-10411, +	 * , +	 * @since 4.0, +	 */, +	@Test, +	public void parameterizedInstanceFactoryMethod() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +, +		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class);, +		bf.registerBeanDefinition("mocksControl", rbd);, +, +		rbd = new RootBeanDefinition();, +		rbd.setFactoryBeanName("mocksControl");, +		rbd.setFactoryMethodName("createMock");, +		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class);, +, +		bf.registerBeanDefinition("mock", rbd);, +, +		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class);, +		assertEquals(1, beans.size());, +	}, +	/**, +	 * Pseudo-implementation of EasyMock's {@code MocksControl} class., +	 */, +	public static class MocksControl {, +, +		@SuppressWarnings("unchecked"), +		public <T> T createMock(Class<T> toMock) {, +, +			return (T) Proxy.newProxyInstance(, +					BeanFactoryGenericsTests.class.getClassLoader(),, +					new Class[] { toMock }, new InvocationHandler() {, +, +						@Override, +						public Object invoke(Object proxy, Method method, Object[] args), +								throws Throwable {, +							throw new UnsupportedOperationException("mocked!");, +						}]