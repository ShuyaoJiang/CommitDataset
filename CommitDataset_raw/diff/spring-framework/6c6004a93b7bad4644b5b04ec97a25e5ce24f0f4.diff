[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectUtils.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	 * @param bf the BeanFactory to get the PlatformTransactionManager bean from, +			if (isQualifierMatch(qualifier, beanName, bf)) {, +	/**, +	 * Check whether we have a qualifier match for the given candidate bean., +	 * @param qualifier the qualifier that we are looking for, +	 * @param beanName the name of the candidate bean, +	 * @param bf the BeanFactory to get the bean definition from, +	 * @return <code>true</code> if either the bean definition (in the XML case), +	 * or the bean's factory method (in the @Bean case) defines a matching qualifier, +	 * value (through &lt;qualifier<&gt; or @Qualifier), +	 */, +	private static boolean isQualifierMatch(String qualifier, String beanName, ConfigurableListableBeanFactory bf) {, +		if (bf.containsBeanDefinition(beanName)) {, +			BeanDefinition bd = bf.getMergedBeanDefinition(beanName);, +			if (bd instanceof AbstractBeanDefinition) {, +				AbstractBeanDefinition abd = (AbstractBeanDefinition) bd;, +				AutowireCandidateQualifier candidate = abd.getQualifier(Qualifier.class.getName());, +				if ((candidate != null && qualifier.equals(candidate.getAttribute(AutowireCandidateQualifier.VALUE_KEY))) ||, +						qualifier.equals(beanName) || ObjectUtils.containsElement(bf.getAliases(beanName), qualifier)) {, +					return true;, +				}, +			}, +			if (bd instanceof RootBeanDefinition) {, +				Method factoryMethod = ((RootBeanDefinition) bd).getResolvedFactoryMethod();, +				if (factoryMethod != null) {, +					Qualifier targetAnnotation = factoryMethod.getAnnotation(Qualifier.class);, +					if (targetAnnotation != null && qualifier.equals(targetAnnotation.value())) {, +						return true;, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectUtils.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	 * @param bf the BeanFactory to get the PlatformTransactionManager bean from, +			if (isQualifierMatch(qualifier, beanName, bf)) {, +	/**, +	 * Check whether we have a qualifier match for the given candidate bean., +	 * @param qualifier the qualifier that we are looking for, +	 * @param beanName the name of the candidate bean, +	 * @param bf the BeanFactory to get the bean definition from, +	 * @return <code>true</code> if either the bean definition (in the XML case), +	 * or the bean's factory method (in the @Bean case) defines a matching qualifier, +	 * value (through &lt;qualifier<&gt; or @Qualifier), +	 */, +	private static boolean isQualifierMatch(String qualifier, String beanName, ConfigurableListableBeanFactory bf) {, +		if (bf.containsBeanDefinition(beanName)) {, +			BeanDefinition bd = bf.getMergedBeanDefinition(beanName);, +			if (bd instanceof AbstractBeanDefinition) {, +				AbstractBeanDefinition abd = (AbstractBeanDefinition) bd;, +				AutowireCandidateQualifier candidate = abd.getQualifier(Qualifier.class.getName());, +				if ((candidate != null && qualifier.equals(candidate.getAttribute(AutowireCandidateQualifier.VALUE_KEY))) ||, +						qualifier.equals(beanName) || ObjectUtils.containsElement(bf.getAliases(beanName), qualifier)) {, +					return true;, +				}, +			}, +			if (bd instanceof RootBeanDefinition) {, +				Method factoryMethod = ((RootBeanDefinition) bd).getResolvedFactoryMethod();, +				if (factoryMethod != null) {, +					Qualifier targetAnnotation = factoryMethod.getAnnotation(Qualifier.class);, +					if (targetAnnotation != null && qualifier.equals(targetAnnotation.value())) {, +						return true;, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/config/AnnotationDrivenTests.java, +	public void testWithConfigurationClass() throws Exception {, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("annotationDrivenConfigurationClassTests.xml", getClass());, +		CallCountingTransactionManager tm1 = context.getBean("transactionManager1", CallCountingTransactionManager.class);, +		CallCountingTransactionManager tm2 = context.getBean("transactionManager2", CallCountingTransactionManager.class);, +		TransactionalService service = context.getBean("service", TransactionalService.class);, +		assertTrue(AopUtils.isCglibProxy(service));, +		service.setSomething("someName");, +		assertEquals(1, tm1.commits);, +		assertEquals(0, tm2.commits);, +		service.doSomething();, +		assertEquals(1, tm1.commits);, +		assertEquals(1, tm2.commits);, +		service.setSomething("someName");, +		assertEquals(2, tm1.commits);, +		assertEquals(1, tm2.commits);, +		service.doSomething();, +		assertEquals(2, tm1.commits);, +		assertEquals(2, tm2.commits);, +	}, +, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectUtils.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;]