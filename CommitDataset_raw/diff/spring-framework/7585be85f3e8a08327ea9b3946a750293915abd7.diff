[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate the payload if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param message the currently processed message, +	 * @param parameter the method parameter, +	 * @param target the target payload object, +	 * @throws MethodArgumentNotValidException in case of binding errors, +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate the payload if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param message the currently processed message, +	 * @param parameter the method parameter, +	 * @param target the target payload object, +	 * @throws MethodArgumentNotValidException in case of binding errors, +	 */, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, + * Copyright 2002-2015 the original author or authors., +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Returns {@code true} if the parameter is annotated with {@link ModelAttribute}, +	 * or in default resolution mode, and also if it is not a simple type., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate the payload if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param message the currently processed message, +	 * @param parameter the method parameter, +	 * @param target the target payload object, +	 * @throws MethodArgumentNotValidException in case of binding errors, +	 */, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, + * Copyright 2002-2015 the original author or authors., +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Returns {@code true} if the parameter is annotated with {@link ModelAttribute}, +	 * or in default resolution mode, and also if it is not a simple type., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.validation.Errors;, +, +	/**, +	 * Whether to raise a handler method invocation exception on validation errors., +	 * @param parameter the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}, +	 * @since 4.1.5, +	 */, +	protected boolean isBindingErrorFatal(MethodParameter parameter) {, +		int i = parameter.getParameterIndex();, +		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes();, +		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]));, +		return !hasBindingResult;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate the payload if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param message the currently processed message, +	 * @param parameter the method parameter, +	 * @param target the target payload object, +	 * @throws MethodArgumentNotValidException in case of binding errors, +	 */, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, + * Copyright 2002-2015 the original author or authors., +	protected final Log logger = LogFactory.getLog(getClass());, +	 * Returns {@code true} if the parameter is annotated with {@link ModelAttribute}, +	 * or in default resolution mode, and also if it is not a simple type., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.validation.Errors;, +, +	/**, +	 * Whether to raise a handler method invocation exception on validation errors., +	 * @param parameter the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}, +	 * @since 4.1.5, +	 */, +	protected boolean isBindingErrorFatal(MethodParameter parameter) {]