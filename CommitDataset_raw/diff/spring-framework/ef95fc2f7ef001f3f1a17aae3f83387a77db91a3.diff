[+++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java, + * Cache decorator which synchronizes its {@link #put}, {@link #evict} and {@link #clear}, + * operations with Spring-managed transactions (through Spring's {@link TransactionSynchronizationManager},, + * performing the actual cache put/evict/clear operation only in the after-commit phase of a, + * successful transaction. If no transaction is active, {@link #put}, {@link #evict} and, + * {@link #clear} operations will be performed immediately, as usual., + * @author Stas Volsky, +		if (TransactionSynchronizationManager.isSynchronizationActive()) {, +			TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {, +				@Override, +				public void afterCommit() {, +					targetCache.clear();, +				}, +			});, +		}, +		else {, +	}, +++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java, + * Cache decorator which synchronizes its {@link #put}, {@link #evict} and {@link #clear}, + * operations with Spring-managed transactions (through Spring's {@link TransactionSynchronizationManager},, + * performing the actual cache put/evict/clear operation only in the after-commit phase of a, + * successful transaction. If no transaction is active, {@link #put}, {@link #evict} and, + * {@link #clear} operations will be performed immediately, as usual., + * @author Stas Volsky, +		if (TransactionSynchronizationManager.isSynchronizationActive()) {, +			TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {, +				@Override, +				public void afterCommit() {, +					targetCache.clear();, +				}, +			});, +		}, +		else {, +	}, +++ b/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java, +	@Test, +	public void clearNonTransactional() {, +		Cache target = new ConcurrentMapCache("testCache");, +		Cache cache = new TransactionAwareCacheDecorator(target);, +		Object key = new Object();, +		cache.put(key, "123");, +, +		cache.clear();, +		assertNull(target.get(key));, +	}, +, +	@Test, +	public void clearTransactional() {, +		Cache target = new ConcurrentMapCache("testCache");, +		Cache cache = new TransactionAwareCacheDecorator(target);, +		Object key = new Object();, +		cache.put(key, "123");, +, +, +		TransactionStatus status = txManager.getTransaction(new DefaultTransactionAttribute(, +				TransactionDefinition.PROPAGATION_REQUIRED));, +		cache.clear();, +		assertEquals("123", target.get(key, String.class));, +		txManager.commit(status);, +, +		assertNull(target.get(key));, +	}]