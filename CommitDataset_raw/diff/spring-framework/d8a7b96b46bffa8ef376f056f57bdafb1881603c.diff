[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +	private ReactiveAdapterRegistry reactiveAdapterRegistry = new ReactiveAdapterRegistry();, +, +	/**, +	 * Configure a reactive registry. This is needed for cases where the response, +	 * is fully handled within the controller in combination with an async void, +	 * return value., +	 * <p>By default this is an instance of {@link ReactiveAdapterRegistry} with, +	 * default settings., +	 * @param registry the registry to use, +	 */, +	public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {, +		this.reactiveAdapterRegistry = registry;, +	}, +, +, +, +				MethodParameter returnType = getReturnType();, +				ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType());, +				boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter);, +				if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {, +					logger.debug("Response fully handled in controller method");, +					return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty();, +				}, +, +				HandlerResult result = new HandlerResult(this, value, returnType, bindingContext);, +	@Nullable, +	private boolean isAsyncVoidReturnType(MethodParameter returnType,, +			@Nullable ReactiveAdapter reactiveAdapter) {, +, +		if (reactiveAdapter != null && reactiveAdapter.supportsEmpty()) {, +			if (reactiveAdapter.isNoValue()) {, +				return true;, +			}, +			Type parameterType = returnType.getGenericParameterType();, +			if (parameterType instanceof ParameterizedType) {, +				ParameterizedType type = (ParameterizedType) parameterType;, +				if (type.getActualTypeArguments().length == 1) {, +					return Void.class.equals(type.getActualTypeArguments()[0]);, +				}, +			}, +		}, +		return false;, +	}, +, +	private boolean isResponseHandled(Object[] args, ServerWebExchange exchange) {, +		if (getResponseStatus() != null || exchange.isNotModified()) {, +			return true;, +		}, +		for (Object arg : args) {, +			if (arg instanceof ServerHttpResponse || arg instanceof ServerWebExchange) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +	private ReactiveAdapterRegistry reactiveAdapterRegistry = new ReactiveAdapterRegistry();, +, +	/**, +	 * Configure a reactive registry. This is needed for cases where the response, +	 * is fully handled within the controller in combination with an async void, +	 * return value., +	 * <p>By default this is an instance of {@link ReactiveAdapterRegistry} with, +	 * default settings., +	 * @param registry the registry to use, +	 */, +	public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {, +		this.reactiveAdapterRegistry = registry;, +	}, +, +, +, +				MethodParameter returnType = getReturnType();, +				ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType());, +				boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter);, +				if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {, +					logger.debug("Response fully handled in controller method");, +					return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty();, +				}, +, +				HandlerResult result = new HandlerResult(this, value, returnType, bindingContext);, +	@Nullable, +	private boolean isAsyncVoidReturnType(MethodParameter returnType,, +			@Nullable ReactiveAdapter reactiveAdapter) {, +, +		if (reactiveAdapter != null && reactiveAdapter.supportsEmpty()) {, +			if (reactiveAdapter.isNoValue()) {, +				return true;]