[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketSession;, +	public Mono<Void> execute(URI url, WebSocketHandler handler) {, +		return execute(url, new HttpHeaders(), handler);, +	public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {, +		Observable<Void> completion = connectInternal(handler, info);, +		return Mono.from(RxReactiveStreams.toPublisher(completion));, +	private Observable<Void> connectInternal(WebSocketHandler handler, HandshakeInfo info) {, +				.flatMap(tuple -> {, +					WebSocketSession session = new RxNettyWebSocketSession(conn, info, bufferFactory);, +					return RxReactiveStreams.toObservable(handler.handle(session));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketSession;, +	public Mono<Void> execute(URI url, WebSocketHandler handler) {, +		return execute(url, new HttpHeaders(), handler);, +	public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {, +		Observable<Void> completion = connectInternal(handler, info);, +		return Mono.from(RxReactiveStreams.toPublisher(completion));, +	private Observable<Void> connectInternal(WebSocketHandler handler, HandshakeInfo info) {, +				.flatMap(tuple -> {, +					WebSocketSession session = new RxNettyWebSocketSession(conn, info, bufferFactory);, +					return RxReactiveStreams.toObservable(handler.handle(session));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/WebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, + * Contract for connecting and handling a WebSocket session., +	 * Execute a handshake request to the given url and handle the resulting, +	 * WebSocket session with the given handler., +	 * @param handler the handler of the WebSocket session, +	 * @return completion {@code Mono<Void>} to indicate the outcome of the, +	 * WebSocket session handling, +	Mono<Void> execute(URI url, WebSocketHandler handler);, +	 * A variant of {@link #execute(URI, WebSocketHandler)} with custom headers., +	 * @param headers custom headers for the handshake request, +	 * @param handler the handler of the WebSocket session, +	 * @return completion {@code Mono<Void>} to indicate the outcome of the, +	 * WebSocket session handling, +	Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketSession;, +	public Mono<Void> execute(URI url, WebSocketHandler handler) {, +		return execute(url, new HttpHeaders(), handler);, +	public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {, +		Observable<Void> completion = connectInternal(handler, info);, +		return Mono.from(RxReactiveStreams.toPublisher(completion));, +	private Observable<Void> connectInternal(WebSocketHandler handler, HandshakeInfo info) {, +				.flatMap(tuple -> {, +					WebSocketSession session = new RxNettyWebSocketSession(conn, info, bufferFactory);, +					return RxReactiveStreams.toObservable(handler.handle(session));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/WebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, + * Contract for connecting and handling a WebSocket session., +	 * Execute a handshake request to the given url and handle the resulting, +	 * WebSocket session with the given handler., +	 * @param handler the handler of the WebSocket session, +	 * @return completion {@code Mono<Void>} to indicate the outcome of the, +	 * WebSocket session handling, +	Mono<Void> execute(URI url, WebSocketHandler handler);, +	 * A variant of {@link #execute(URI, WebSocketHandler)} with custom headers., +	 * @param headers custom headers for the handshake request, +	 * @param handler the handler of the WebSocket session, +	 * @return completion {@code Mono<Void>} to indicate the outcome of the, +	 * WebSocket session handling, +	Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/AbstractWebSocketIntegrationTests.java, +import java.net.URI;, +import java.net.URISyntaxException;, +import org.jetbrains.annotations.NotNull;, +	@NotNull, +	protected URI getUrl(String path) throws URISyntaxException {, +		return new URI("ws://localhost:" + this.port + path);, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketSession;, +	public Mono<Void> execute(URI url, WebSocketHandler handler) {, +		return execute(url, new HttpHeaders(), handler);, +	public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {, +		Observable<Void> completion = connectInternal(handler, info);, +		return Mono.from(RxReactiveStreams.toPublisher(completion));, +	private Observable<Void> connectInternal(WebSocketHandler handler, HandshakeInfo info) {, +				.flatMap(tuple -> {, +					WebSocketSession session = new RxNettyWebSocketSession(conn, info, bufferFactory);, +					return RxReactiveStreams.toObservable(handler.handle(session));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/WebSocketClient.java, +import org.springframework.web.reactive.socket.WebSocketHandler;, + * Contract for connecting and handling a WebSocket session., +	 * Execute a handshake request to the given url and handle the resulting, +	 * WebSocket session with the given handler., +	 * @param handler the handler of the WebSocket session, +	 * @return completion {@code Mono<Void>} to indicate the outcome of the, +	 * WebSocket session handling, +	Mono<Void> execute(URI url, WebSocketHandler handler);, +	 * A variant of {@link #execute(URI, WebSocketHandler)} with custom headers., +	 * @param headers custom headers for the handshake request, +	 * @param handler the handler of the WebSocket session]