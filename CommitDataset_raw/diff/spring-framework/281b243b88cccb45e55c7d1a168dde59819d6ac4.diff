[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType());, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType());, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +, +	private MethodParameter paramRequestEntity;, +	private MethodParameter returnTypeHttpEntity;, +	private MethodParameter returnTypeHttpEntitySubclass;, +	private MethodParameter returnTypeInt;, +	private MockHttpServletRequest servletRequest;, +	private ServletWebRequest webRequest;, +		paramRequestEntity = new MethodParameter(handle1, 3);, +		returnTypeResponseEntityProduces = new MethodParameter(getClass().getMethod("handle4"), -1);, +		returnTypeHttpEntitySubclass = new MethodParameter(getClass().getMethod("handle2x", HttpEntity.class), -1);, +, +		assertTrue("Custom HttpEntity subclass not supported", processor.supportsReturnType(returnTypeHttpEntitySubclass));, +	public CustomHttpEntity handle2x(HttpEntity<?> entity) {, +		return new CustomHttpEntity();, +	}, +, +	public static class CustomHttpEntity extends HttpEntity<Object> {, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType());, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +, +	private MethodParameter paramRequestEntity;, +	private MethodParameter returnTypeHttpEntity;, +	private MethodParameter returnTypeHttpEntitySubclass;, +	private MethodParameter returnTypeInt;, +	private MockHttpServletRequest servletRequest;, +	private ServletWebRequest webRequest;, +		paramRequestEntity = new MethodParameter(handle1, 3);, +		returnTypeResponseEntityProduces = new MethodParameter(getClass().getMethod("handle4"), -1);, +		returnTypeHttpEntitySubclass = new MethodParameter(getClass().getMethod("handle2x", HttpEntity.class), -1);, +, +		assertTrue("Custom HttpEntity subclass not supported", processor.supportsReturnType(returnTypeHttpEntitySubclass));, +	public CustomHttpEntity handle2x(HttpEntity<?> entity) {, +		return new CustomHttpEntity();, +	}, +, +	public static class CustomHttpEntity extends HttpEntity<Object> {, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorTests.java, + * Copyright 2002-2014 the original author or authors., +, +import static org.junit.Assert.*;, +, +, +	private WebDataBinderFactory binderFactory;, +	private MockHttpServletResponse servletResponse;, +, +	private ServletWebRequest webRequest;, +, +		binderFactory = new ValidatingBinderFactory();, +		HttpEntity<SimpleBean> result = (HttpEntity<SimpleBean>), +				processor.resolveArgument(methodParam, mavContainer, webRequest, binderFactory);, +, +, +, +		public void handleDto(HttpEntity<DTO> dto) {, +		}, +, +	private static class MySimpleParameterizedController extends MyParameterizedController<SimpleBean> {, +	}, +, +, +, +, +, +, +, +		public WebDataBinder createBinder(NativeWebRequest webRequest, Object target, String objectName) {]