[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +	private Mono<HandlerResult> handleException(Throwable exception, HandlerMethod handlerMethod,, +		InvocableHandlerMethod invocable = this.methodResolver.getExceptionHandlerMethod(exception, handlerMethod);, +				Throwable cause = exception.getCause();, +				if (cause != null) {, +					return invocable.invoke(exchange, bindingContext, exception, cause, handlerMethod);, +				}, +				else {, +					return invocable.invoke(exchange, bindingContext, exception, handlerMethod);, +				}, +		return Mono.error(exception);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +	private Mono<HandlerResult> handleException(Throwable exception, HandlerMethod handlerMethod,, +		InvocableHandlerMethod invocable = this.methodResolver.getExceptionHandlerMethod(exception, handlerMethod);, +				Throwable cause = exception.getCause();, +				if (cause != null) {, +					return invocable.invoke(exchange, bindingContext, exception, cause, handlerMethod);, +				}, +				else {, +					return invocable.invoke(exchange, bindingContext, exception, handlerMethod);, +				}, +		return Mono.error(exception);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java, +import java.io.IOException;, +, + * @author Juergen Hoeller, +	public void controllerThrowingExceptionWithCause() throws Exception {, +		String expected = "Recovered from error: State";, +		assertEquals(expected, performGet("/thrown-exception-with-cause", new HttpHeaders(), String.class).getBody());, +	}, +, +	@Test, +	public void controllerThrowingExceptionWithCauseToHandle() throws Exception {, +		String expected = "Recovered from error: IO";, +		assertEquals(expected, performGet("/thrown-exception-with-cause-to-handle", new HttpHeaders(), String.class).getBody());, +	}, +, +	@Test, +		@GetMapping("/thrown-exception-with-cause"), +		public Publisher<String> handleAndThrowExceptionWithCause() {, +			throw new IllegalStateException("State", new IOException("IO"));, +		}, +, +		@GetMapping("/thrown-exception-with-cause-to-handle"), +		public Publisher<String> handleAndThrowExceptionWithCauseToHandle() {, +			throw new RuntimeException("State", new IOException("IO"));, +		}, +, +		public Publisher<String> handleArgumentException(IOException ex) {, +			return Mono.just("Recovered from error: " + ex.getMessage());, +		}, +, +		@ExceptionHandler]