[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2010 the original author or authors., +		public final ITestBean testBean3 = null;, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2010 the original author or authors., +		public final ITestBean testBean3 = null;, +++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, + * Copyright 2002-2010 the original author or authors., +	 * Attempt to find a {@link Field field} on the supplied {@link Class} with the, +	 * supplied <code>name</code>. Searches all superclasses up to {@link Object}., +	 * Attempt to find a {@link Field field} on the supplied {@link Class} with the, +	 * supplied <code>name</code> and/or {@link Class type}. Searches all superclasses, +	 * up to {@link Object}., +			throw new IllegalStateException(, +					"Unexpected reflection exception - " + ex.getClass().getName() + ": " + ex.getMessage());, +		if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) ||, +				Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {, +, +]