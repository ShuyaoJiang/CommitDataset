[+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java, + * Represents the context of a client-side HTTP request execution., + *, + * <p>Used to invoke the next interceptor in the interceptor chain, or - if the, + * calling interceptor is last - execute the request itself., + * @author Rossen Stoyanchev, + * @since 4.3, +     * Resume the request execution by invoking next interceptor in the chain, +     * or executing the request to the remote service., +    ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body), +            throws IOException;, +, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java, + * Represents the context of a client-side HTTP request execution., + *, + * <p>Used to invoke the next interceptor in the interceptor chain, or - if the, + * calling interceptor is last - execute the request itself., + * @author Rossen Stoyanchev, + * @since 4.3, +     * Resume the request execution by invoking next interceptor in the chain, +     * or executing the request to the remote service., +    ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body), +            throws IOException;, +, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java, + * Intercepts client-side HTTP requests. Implementations of this interface can be, + * {@linkplain org.springframework.web.client.AsyncRestTemplate#setInterceptors(java.util.List), + * registered} with the {@link org.springframework.web.client.AsyncRestTemplate, + * AsyncRestTemplate} as to modify the outgoing {@link HttpRequest} and/or, + * register to modify the incoming {@link ClientHttpResponse} with help of a, + * {@link org.springframework.util.concurrent.ListenableFutureAdapter, + * ListenableFutureAdapter}., + *, + * <p>The main entry point for interceptors is {@link #intercept}., + * @author Rossen Stoyanchev, + * @since 4.3, +     * Intercept the given request, and return a response future. The given, +     * {@link AsyncClientHttpRequestExecution} allows the interceptor to pass on, +     * the request to the next entity in the chain., +     * <p>An implementation might follow this pattern:, +     * <ol>, +     * <li>Examine the {@linkplain HttpRequest request} and body</li>, +     * <li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper, +     * wrap} the request to filter HTTP attributes.</li>, +     * <li>Optionally modify the body of the request.</li>, +     * <li>One of the following:, +     * <ul>, +     * <li>execute the request through {@link ClientHttpRequestExecution}</li>, +     * <li>don't execute the request to block the execution altogether</li>, +     * </ul>, +     * <li>Optionally adapt the response to filter HTTP attributes with the help of, +     * {@link org.springframework.util.concurrent.ListenableFutureAdapter, +     * ListenableFutureAdapter}.</li>, +     * </ol>, +     *, +     * @param request the request, containing method, URI, and headers, +     * @param body the body of the request, +     * @param execution the request execution, +     * @return the response future, +    ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body,, +            AsyncClientHttpRequestExecution execution) throws IOException;, +, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestExecution.java, + * Represents the context of a client-side HTTP request execution., + *, + * <p>Used to invoke the next interceptor in the interceptor chain, or - if the, + * calling interceptor is last - execute the request itself., + * @author Rossen Stoyanchev, + * @since 4.3, +     * Resume the request execution by invoking next interceptor in the chain, +     * or executing the request to the remote service., +    ListenableFuture<ClientHttpResponse> executeAsync(HttpRequest request, byte[] body), +            throws IOException;, +, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestInterceptor.java, + * Intercepts client-side HTTP requests. Implementations of this interface can be, + * {@linkplain org.springframework.web.client.AsyncRestTemplate#setInterceptors(java.util.List), + * registered} with the {@link org.springframework.web.client.AsyncRestTemplate, + * AsyncRestTemplate} as to modify the outgoing {@link HttpRequest} and/or, + * register to modify the incoming {@link ClientHttpResponse} with help of a, + * {@link org.springframework.util.concurrent.ListenableFutureAdapter, + * ListenableFutureAdapter}., + *, + * <p>The main entry point for interceptors is {@link #intercept}., + * @author Rossen Stoyanchev, + * @since 4.3, +     * Intercept the given request, and return a response future. The given, +     * {@link AsyncClientHttpRequestExecution} allows the interceptor to pass on, +     * the request to the next entity in the chain., +     * <p>An implementation might follow this pattern:, +     * <ol>, +     * <li>Examine the {@linkplain HttpRequest request} and body</li>, +     * <li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper, +     * wrap} the request to filter HTTP attributes.</li>, +     * <li>Optionally modify the body of the request.</li>, +     * <li>One of the following:, +     * <ul>, +     * <li>execute the request through {@link ClientHttpRequestExecution}</li>, +     * <li>don't execute the request to block the execution altogether</li>, +     * </ul>]