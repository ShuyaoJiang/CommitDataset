[+++ b/spring-framework-reference/src/validation.xml, +				The Formatter SPI to implement UI formatting logic is simple and strongly typed:, +				To create your own Formatter, simply implement the interface above., +				Parameterize T to be the type of Object you are formatting; for example, <classname>java.lang.BigDecimal</classname>., +				Take care to ensure your Formatter implementation is thread safe., +				The <filename>number</filename> package provides a DecimalFormatter, IntegerFormatter, CurrencyFormatter, and PercentFormatter to format java.lang.Number objects using a java.text.NumberFormat., +			</para>, +			<para>, +			<para>, +				The Spring team welcomes community-driven Formatter contributions; see <ulink url="http://jira.springframework.org">http://jira.springframework.org</ulink> to contribute., +				In particular, the team expects to integrate support for Joda Time and Money Formatters in the future., +			</para>, +				The @Formatted annotation allows you to easily associate a Formatter implementation with one of your classes., +				The example above says <emphasis>"Money objects should be formatted by a MoneyFormatter"</emphasis>., +				With this configuation, whenever a field is of type Money, MoneyFormatter will format the field value., +				Bind a custom annotation to a Formatter instance by implementing an AnnotationFormatterFactory: , +				This annotation allows the format pattern to be configured as its value., +				Formatters are typically registered in a FormatterRegistry., +				With a shared FormatterRegistry, you define these rules once and they are applied whenever formatting is needed., +				This implementation may be configured programatically or declaratively as a Spring bean., +				To apply a Formatter to a single field, create an @InitBinder callback on your @Controller, then call binder.registerFormatter(String, Formatter):, +            binder.registerFormatter("myFieldName", new MyCustomFieldFormatter());]