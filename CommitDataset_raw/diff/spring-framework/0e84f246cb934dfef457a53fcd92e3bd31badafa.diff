[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +, +			return new DefaultResponseSpec(exchangeResult, clientResponse, getTimeout());, +, +	private static class UndecodedExchangeResult extends ExchangeResult {, +		private final Duration timeout;, +, +		UndecodedExchangeResult(ExchangeResult result, ClientResponse response, Duration timeout) {, +			this.timeout = timeout;, +		public <T> EntityExchangeResult<T> decode(ResolvableType bodyType) {, +			T body = (T) this.response.body(toMono(bodyType)).block(this.timeout);, +			return new EntityExchangeResult<>(this, body);, +		public <T> EntityExchangeResult<List<T>> decodeToList(ResolvableType elementType) {, +			Flux<T> flux = this.response.body(toFlux(elementType));, +			List<T> body = flux.collectList().block(this.timeout);, +			return new EntityExchangeResult<>(this, body);, +		}, +, +		public <T> FluxExchangeResult<T> decodeToFlux(ResolvableType elementType) {, +			Flux<T> body = this.response.body(toFlux(elementType));, +			return new FluxExchangeResult<>(this, body, this.timeout);, +		}, +, +		public EntityExchangeResult<Void> decodeToEmpty() {, +			DataBuffer buffer = this.response.body(toDataBuffers()).blockFirst(this.timeout);, +, +	private static class DefaultResponseSpec implements ResponseSpec {, +		DefaultResponseSpec(ExchangeResult result, ClientResponse response, Duration timeout) {, +			this.result = new UndecodedExchangeResult(result, response, timeout);, +		public <B> BodySpec<B, ?> expectBody(Class<B> bodyType) {, +			return expectBody(ResolvableType.forClass(bodyType));, +		public <B> BodySpec<B, ?> expectBody(ResolvableType bodyType) {, +			return new DefaultBodySpec<>(this.result.decode(bodyType));, +		public <E> ListBodySpec<E> expectBodyList(Class<E> elementType) {, +			return expectBodyList(ResolvableType.forClass(elementType));, +		}, +, +		@Override, +		public <E> ListBodySpec<E> expectBodyList(ResolvableType elementType) {, +			return new DefaultListBodySpec<>(this.result.decodeToList(elementType));, +		}, +, +		@Override, +		public BodyContentSpec expectBody() {, +			return new DefaultBodyContentSpec(this.result);, +		}, +, +		@Override, +		public <T> FluxExchangeResult<T> returnResult(Class<T> elementType) {, +			return returnResult(ResolvableType.forClass(elementType));, +		}, +, +		@Override, +		public <T> FluxExchangeResult<T> returnResult(ResolvableType elementType) {, +			return this.result.decodeToFlux(elementType);, +, +	private static class DefaultBodySpec<B, S extends BodySpec<B, S>> implements BodySpec<B, S> {, +, +		private final EntityExchangeResult<B> result;, +, +, +		DefaultBodySpec(EntityExchangeResult<B> result) {, +			this.result = result;, +		}, +, +, +		protected EntityExchangeResult<B> getResult() {, +			return this.result;, +		}, +, +		@Override, +		public <T extends S> T isEqualTo(B expected) {, +			Object actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			return self();, +		}, +, +		@SuppressWarnings("unchecked"), +		private <T extends S> T self() {, +			return (T) this;, +		}, +, +		@Override, +		public EntityExchangeResult<B> returnResult() {, +			return this.result;, +		}, +	}, +, +, +	private static class DefaultListBodySpec<E> extends DefaultBodySpec<List<E>, ListBodySpec<E>>, +			implements ListBodySpec<E> {, +, +, +		DefaultListBodySpec(EntityExchangeResult<List<E>> result) {, +			super(result);, +		}, +, +, +		@Override, +		public ListBodySpec<E> hasSize(int size) {]