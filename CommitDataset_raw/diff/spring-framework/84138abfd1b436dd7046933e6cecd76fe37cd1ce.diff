[+++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +import org.springframework.web.util.WebUtils;, + * avoid adding CORS headers to the response. CORS processing is also skipped, + * if the response already contains CORS headers, or if the request is detected, + * as a same-origin one., +		if (WebUtils.isSameOrigin(serverRequest)) {, +			logger.debug("Skip CORS processing, request is a same-origin one");, +			return true;, +		}, +			logger.debug("Skip CORS processing, response already contains \"Access-Control-Allow-Origin\" header");, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +import org.springframework.web.util.WebUtils;, + * avoid adding CORS headers to the response. CORS processing is also skipped, + * if the response already contains CORS headers, or if the request is detected, + * as a same-origin one., +		if (WebUtils.isSameOrigin(serverRequest)) {, +			logger.debug("Skip CORS processing, request is a same-origin one");, +			return true;, +		}, +			logger.debug("Skip CORS processing, response already contains \"Access-Control-Allow-Origin\" header");, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +			return isSameOrigin(request);, +	/**, +	 * Check if the request is a same-origin one, based on {@code Origin}, {@code Host},, +	 * {@code Forwarded} and {@code X-Forwarded-Host} headers., +	 * @return {@code true} if the request is a same-origin one, {@code false} in case, +	 * of cross-origin request., +	 * @since 4.2, +	 */, +	public static boolean isSameOrigin(HttpRequest request) {, +		String origin = request.getHeaders().getOrigin();, +		if (origin == null) {, +			return true;, +		}, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +import org.springframework.web.util.WebUtils;, + * avoid adding CORS headers to the response. CORS processing is also skipped, + * if the response already contains CORS headers, or if the request is detected, + * as a same-origin one., +		if (WebUtils.isSameOrigin(serverRequest)) {, +			logger.debug("Skip CORS processing, request is a same-origin one");, +			return true;, +		}, +			logger.debug("Skip CORS processing, response already contains \"Access-Control-Allow-Origin\" header");, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +			return isSameOrigin(request);, +	/**, +	 * Check if the request is a same-origin one, based on {@code Origin}, {@code Host},, +	 * {@code Forwarded} and {@code X-Forwarded-Host} headers., +	 * @return {@code true} if the request is a same-origin one, {@code false} in case, +	 * of cross-origin request., +	 * @since 4.2, +	 */, +	public static boolean isSameOrigin(HttpRequest request) {, +		String origin = request.getHeaders().getOrigin();, +		if (origin == null) {, +			return true;, +		}, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl));, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/util/WebUtilsTests.java, +	public void isValidOrigin() {, +		assertTrue(checkValidOrigin("mydomain1.com", -1, "http://mydomain1.com", allowed));, +		assertFalse(checkValidOrigin("mydomain1.com", -1, "http://mydomain2.com", allowed));, +		assertTrue(checkValidOrigin("mydomain1.com", -1, "http://mydomain2.com", allowed));, +		assertTrue(checkValidOrigin("mydomain2.com", -1, "http://mydomain1.com", allowed));, +		assertFalse(checkValidOrigin("mydomain2.com", -1, "http://mydomain3.com", allowed));, +	public void isSameOrigin() {, +		assertTrue(checkSameOrigin("mydomain1.com", -1, "http://mydomain1.com"));, +		assertTrue(checkSameOrigin("mydomain1.com", -1, "http://mydomain1.com:80"));, +		assertTrue(checkSameOrigin("mydomain1.com", 443, "https://mydomain1.com"));, +		assertTrue(checkSameOrigin("mydomain1.com", 443, "https://mydomain1.com:443"));, +		assertTrue(checkSameOrigin("mydomain1.com", 123, "http://mydomain1.com:123"));, +		assertTrue(checkSameOrigin("mydomain1.com", -1, "ws://mydomain1.com"));, +		assertTrue(checkSameOrigin("mydomain1.com", 443, "wss://mydomain1.com"));, +		assertFalse(checkSameOrigin("mydomain1.com", -1, "http://mydomain2.com"));, +		assertFalse(checkSameOrigin("mydomain1.com", -1, "https://mydomain1.com"));, +		assertFalse(checkSameOrigin("mydomain1.com", -1, "invalid-origin"));, +, +	private boolean checkValidOrigin(String serverName, int port, String originHeader, List<String> allowed) {, +	private boolean checkSameOrigin(String serverName, int port, String originHeader) {, +		MockHttpServletRequest servletRequest = new MockHttpServletRequest();, +		ServerHttpRequest request = new ServletServerHttpRequest(servletRequest);, +		servletRequest.setServerName(serverName);, +		if (port != -1) {, +			servletRequest.setServerPort(port);, +		}, +		request.getHeaders().set(HttpHeaders.ORIGIN, originHeader);, +		return WebUtils.isSameOrigin(request);, +	}, +]