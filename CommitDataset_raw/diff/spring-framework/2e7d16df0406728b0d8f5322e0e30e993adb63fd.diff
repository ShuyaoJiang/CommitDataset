[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	ReactiveTypeDescriptor getDescriptor();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	ReactiveTypeDescriptor getDescriptor();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import java.util.ArrayList;, +import java.util.List;, + * <p>By default, depending on classpath availability, adapters are registered, + * for RxJava 1, RxJava 2 types, and {@link CompletableFuture}. In addition the, + * registry contains adapters for Reactor's own Flux and Mono types (no-op), + * along with adaption for any other Reactive Streams {@link Publisher}., +, +	private final List<ReactiveAdapter> adapters = new ArrayList<>(32);, +, +, +				ReactiveTypeDescriptor.singleOptionalValue(Mono.class));, +, +		registerFluxAdapter(Flux.class,, +				source -> (Flux<?>) source, source -> source);, +, +		registerFluxAdapter(Publisher.class,, +				source -> Flux.from((Publisher<?>) source), source -> source);, +				ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class), +	public void registerMonoAdapter(Class<?> reactiveType, Function<Object, Mono<?>> toAdapter,, +			Function<Mono<?>, Object> fromAdapter, ReactiveTypeDescriptor descriptor) {, +		this.adapters.add(new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor));, +	public void registerFluxAdapter(Class<?> reactiveType, Function<Object, Flux<?>> toAdapter,, +		this.adapters.add(new FluxReactiveAdapter(toAdapter, fromAdapter,, +				ReactiveTypeDescriptor.multiValue(reactiveType)));, +	 * Get the adapter for the given reactive type to adapt from., +	public ReactiveAdapter getAdapterFrom(Class<?> reactiveType) {, +		return getAdapterFrom(reactiveType, null);, +	 * Get the adapter for the given reactive type to adapt from., +	public ReactiveAdapter getAdapterFrom(Class<?> reactiveType, Object adaptee) {, +		Class<?> actualType = getActualType(reactiveType, adaptee);, +	 * Get the adapter for the given reactive type to adapt to., +	public ReactiveAdapter getAdapterTo(Class<?> reactiveType) {, +		return getAdapterTo(reactiveType, null);, +	 * Get the adapter for the given reactive type to adapt to., +	public ReactiveAdapter getAdapterTo(Class<?> reactiveType, Object adaptee) {, +		Class<?> actualType = getActualType(reactiveType, adaptee);, +	private ReactiveAdapter getAdapterInternal(Predicate<Class<?>> predicate) {, +		return this.adapters.stream(), +				.filter(adapter -> predicate.test(adapter.getDescriptor().getReactiveType())), +	private static Class<?> getActualType(Class<?> reactiveType, Object adaptee) {, +		return (adaptee != null ? adaptee.getClass() : reactiveType);, +		private final ReactiveTypeDescriptor descriptor;, +		MonoReactiveAdapter(Function<Object, Mono<?>> to, Function<Mono<?>, Object> from,, +				ReactiveTypeDescriptor descriptor) {, +, +		public ReactiveTypeDescriptor getDescriptor() {, +		private final ReactiveTypeDescriptor descriptor;, +		FluxReactiveAdapter(Function<Object, Flux<?>> to, Function<Flux<?>, Object> from,, +				ReactiveTypeDescriptor descriptor) {, +, +			this.descriptor = descriptor;, +		public ReactiveTypeDescriptor getDescriptor() {, +			registry.registerFluxAdapter(rx.Observable.class,, +					source -> Flux.from(RxReactiveStreams.toPublisher((rx.Observable<?>) source)),, +			registry.registerMonoAdapter(rx.Single.class,, +					source -> Mono.from(RxReactiveStreams.toPublisher((rx.Single<?>) source)),, +					ReactiveTypeDescriptor.singleRequiredValue(rx.Single.class), +			registry.registerMonoAdapter(rx.Completable.class,, +					source -> Mono.from(RxReactiveStreams.toPublisher((rx.Completable) source)),, +					ReactiveTypeDescriptor.noValue(rx.Completable.class), +					ReactiveTypeDescriptor.singleRequiredValue(io.reactivex.Single.class), +					ReactiveTypeDescriptor.singleOptionalValue(Maybe.class), +					ReactiveTypeDescriptor.noValue(io.reactivex.Completable.class), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	ReactiveTypeDescriptor getDescriptor();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import java.util.ArrayList;, +import java.util.List;, + * <p>By default, depending on classpath availability, adapters are registered, + * for RxJava 1, RxJava 2 types, and {@link CompletableFuture}. In addition the, + * registry contains adapters for Reactor's own Flux and Mono types (no-op), + * along with adaption for any other Reactive Streams {@link Publisher}., +, +	private final List<ReactiveAdapter> adapters = new ArrayList<>(32);, +, +, +				ReactiveTypeDescriptor.singleOptionalValue(Mono.class));, +, +		registerFluxAdapter(Flux.class,, +				source -> (Flux<?>) source, source -> source);, +, +		registerFluxAdapter(Publisher.class,, +				source -> Flux.from((Publisher<?>) source), source -> source);, +				ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class), +	public void registerMonoAdapter(Class<?> reactiveType, Function<Object, Mono<?>> toAdapter,, +			Function<Mono<?>, Object> fromAdapter, ReactiveTypeDescriptor descriptor) {, +		this.adapters.add(new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor));, +	public void registerFluxAdapter(Class<?> reactiveType, Function<Object, Flux<?>> toAdapter,, +		this.adapters.add(new FluxReactiveAdapter(toAdapter, fromAdapter,, +				ReactiveTypeDescriptor.multiValue(reactiveType)));, +	 * Get the adapter for the given reactive type to adapt from., +	public ReactiveAdapter getAdapterFrom(Class<?> reactiveType) {, +		return getAdapterFrom(reactiveType, null);, +	 * Get the adapter for the given reactive type to adapt from., +	public ReactiveAdapter getAdapterFrom(Class<?> reactiveType, Object adaptee) {]