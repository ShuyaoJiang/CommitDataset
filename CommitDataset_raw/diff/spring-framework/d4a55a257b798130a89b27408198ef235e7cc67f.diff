[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java, + * Copyright 2002-2018 the original author or authors., +, +		super("Variable not available");, +	public final String getName() {, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java, + * Copyright 2002-2018 the original author or authors., +, +		super("Variable not available");, +	public final String getName() {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +			"Array initializer size does not match array dimensions"),, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR, 1065,, +			"Unexpected escape character"),, +			"The expression component ''{0}'' does not support increment"),, +			"The expression component ''{0}'' does not support decrement"),, +			"The expression component ''{0}'' is not assignable"),, +			"Missing expected character ''{0}''"),, +	/** @since 4.1 */, +			"An exception occurred whilst evaluating a compiled expression"),, +, +	/** @since 4.3.17 */, +	FLAWED_PATTERN(Kind.ERROR, 1073,, +			"Failed to efficiently evaluate pattern ''{0}'': consider redesigning it");, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java, + * Copyright 2002-2018 the original author or authors., +, +		super("Variable not available");, +	public final String getName() {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +			"Array initializer size does not match array dimensions"),, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR, 1065,, +			"Unexpected escape character"),, +			"The expression component ''{0}'' does not support increment"),, +			"The expression component ''{0}'' does not support decrement"),, +			"The expression component ''{0}'' is not assignable"),, +			"Missing expected character ''{0}''"),, +	/** @since 4.1 */, +			"An exception occurred whilst evaluating a compiled expression"),, +, +	/** @since 4.3.17 */, +	FLAWED_PATTERN(Kind.ERROR, 1073,, +			"Failed to efficiently evaluate pattern ''{0}'': consider redesigning it");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java, + * Copyright 2002-2018 the original author or authors., +	private static final int PATTERN_ACCESS_THRESHOLD = 1000000;, +, +			Matcher matcher = pattern.matcher(new MatcherInput(left, new AccessCount()));, +			throw new SpelEvaluationException(, +					rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right);, +		}, +		catch (IllegalStateException ex) {, +			throw new SpelEvaluationException(, +					rightOp.getStartPosition(), ex, SpelMessage.FLAWED_PATTERN, right);, +		}, +	}, +, +, +	private static class AccessCount {, +, +		private int count;, +, +		public void check() throws IllegalStateException {, +			if (this.count++ > PATTERN_ACCESS_THRESHOLD) {, +				throw new IllegalStateException("Pattern access threshold exceeded");, +			}, +		}, +	}, +, +, +	private static class MatcherInput implements CharSequence {, +, +		private final CharSequence value;, +, +		private AccessCount access;, +, +		public MatcherInput(CharSequence value, AccessCount access) {, +			this.value = value;, +			this.access = access;, +		}, +, +		public char charAt(int index) {, +			this.access.check();, +			return this.value.charAt(index);, +		}, +, +		public CharSequence subSequence(int start, int end) {, +			return new MatcherInput(this.value.subSequence(start, end), this.access);, +		}, +, +		public int length() {, +			return this.value.length();, +		}, +, +		@Override, +		public String toString() {, +			return this.value.toString();]