[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/DelegatingCompletableFuture.java, +import org.springframework.util.Assert;, +, +, +		Assert.notNull(delegate, "Delegate must not be null");, +, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/DelegatingCompletableFuture.java, +import org.springframework.util.Assert;, +, +, +		Assert.notNull(delegate, "Delegate must not be null");, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +	 * <p>The header is removed before sending the message to avoid propagation., +	 * Return the configured send-timeout header., +		return this.sendTimeoutHeader;, +	 * Return the configured receive-timeout header., +		return this.receiveTimeoutHeader;, +, +, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/DelegatingCompletableFuture.java, +import org.springframework.util.Assert;, +, +, +		Assert.notNull(delegate, "Delegate must not be null");, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +	 * <p>The header is removed before sending the message to avoid propagation., +	 * Return the configured send-timeout header., +		return this.sendTimeoutHeader;, +	 * Return the configured receive-timeout header., +		return this.receiveTimeoutHeader;, +, +, +++ b/src/docs/asciidoc/languages/kotlin.adoc, +In Kotlin, it is very convenient and considered best practice to declare read-only properties, +within the primary constructor, as in the following example:, +to make the compiler automatically derive the following members from all properties declared, +in the primary constructor:, +This allows for easy changes to individual properties even if `Person` properties are read-only:, +val jack = Person(name = "Jack", age = 1), +Common persistence technologies such as JPA require a default constructor, preventing this, +If you need to leverage this kind of mechanism for other persistence technologies, you can configure, +the https://kotlinlang.org/docs/reference/compiler-plugins.html#how-to-use-no-arg-plugin[kotlin-noarg], +As of the Kay release train, Spring Data supports Kotlin immutable class instances and, +does not require the `kotlin-noarg` plugin if the module leverages Spring Data object, +mappings (like with MongoDB, Redis, Cassandra, etc).]