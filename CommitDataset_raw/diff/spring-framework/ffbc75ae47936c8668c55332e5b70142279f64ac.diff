[+++ b/spring-messaging/spring-messaging.gradle, +	optional("io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/spring-messaging.gradle, +	optional("io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import reactor.netty.Connection;, +import reactor.netty.FutureMono;, +import reactor.netty.NettyInbound;, +import reactor.netty.NettyOutbound;, +import reactor.netty.resources.ConnectionProvider;, +import reactor.netty.resources.LoopResources;, +import reactor.netty.tcp.TcpClient;, +	private ConnectionProvider poolResources;, +		Assert.notNull(host, "host is required");, +		Assert.notNull(port, "port is required");, +		this.poolResources = ConnectionProvider.elastic("tcp-client-pool");, +		this.tcpClient = TcpClient.create(poolResources), +								.host(host), +								.port(port), +								.runOn(loopResources, false), +								.doOnConnected(c -> channelGroup.add(c.channel()));, +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.flatMap(Connection::onDispose)             // post-connect issues, +			inbound.withConnection(c -> {, +					logger.debug("Connected to " + c.address());, +			});, +			inbound.withConnection(c -> c.addHandler(new StompMessageDecoder<>(codec)));, +++ b/spring-messaging/spring-messaging.gradle, +	optional("io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import reactor.netty.Connection;, +import reactor.netty.FutureMono;, +import reactor.netty.NettyInbound;, +import reactor.netty.NettyOutbound;, +import reactor.netty.resources.ConnectionProvider;, +import reactor.netty.resources.LoopResources;, +import reactor.netty.tcp.TcpClient;, +	private ConnectionProvider poolResources;, +		Assert.notNull(host, "host is required");, +		Assert.notNull(port, "port is required");, +		this.poolResources = ConnectionProvider.elastic("tcp-client-pool");, +		this.tcpClient = TcpClient.create(poolResources), +								.host(host), +								.port(port), +								.runOn(loopResources, false), +								.doOnConnected(c -> channelGroup.add(c.channel()));, +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.flatMap(Connection::onDispose)             // post-connect issues, +			inbound.withConnection(c -> {, +					logger.debug("Connected to " + c.address());, +			});, +			inbound.withConnection(c -> c.addHandler(new StompMessageDecoder<>(codec)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java, +import reactor.netty.NettyInbound;, +import reactor.netty.NettyOutbound;, +		this.inbound.withConnection(c -> c.onReadIdle(inactivityDuration, runnable));, +		this.inbound.withConnection(c -> c.onWriteIdle(inactivityDuration, runnable));, +++ b/spring-messaging/spring-messaging.gradle, +	optional("io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import reactor.netty.Connection;, +import reactor.netty.FutureMono;, +import reactor.netty.NettyInbound;, +import reactor.netty.NettyOutbound;, +import reactor.netty.resources.ConnectionProvider;, +import reactor.netty.resources.LoopResources;, +import reactor.netty.tcp.TcpClient;, +	private ConnectionProvider poolResources;, +		Assert.notNull(host, "host is required");, +		Assert.notNull(port, "port is required");, +		this.poolResources = ConnectionProvider.elastic("tcp-client-pool");, +		this.tcpClient = TcpClient.create(poolResources), +								.host(host), +								.port(port), +								.runOn(loopResources, false), +								.doOnConnected(c -> channelGroup.add(c.channel()));, +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.handle(new ReactorNettyHandler(handler)), +				.connect(), +				.flatMap(Connection::onDispose)             // post-connect issues, +			inbound.withConnection(c -> {, +					logger.debug("Connected to " + c.address());, +			});, +			inbound.withConnection(c -> c.addHandler(new StompMessageDecoder<>(codec)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java, +import reactor.netty.NettyInbound;, +import reactor.netty.NettyOutbound;, +		this.inbound.withConnection(c -> c.onReadIdle(inactivityDuration, runnable));, +		this.inbound.withConnection(c -> c.onWriteIdle(inactivityDuration, runnable));, +++ b/spring-test/spring-test.gradle, +	testCompile('io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT'), +++ b/spring-messaging/spring-messaging.gradle, +	optional("io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT")]