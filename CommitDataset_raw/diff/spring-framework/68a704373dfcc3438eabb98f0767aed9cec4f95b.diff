[+++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, + * <p>{@code MergedContextConfiguration} is also used by the, + * {@link org.springframework.test.context.cache.ContextCache ContextCache}, + * as the key for caching an, +		// Active profiles must be unique, +		Set<String> profilesSet = new LinkedHashSet<String>(Arrays.asList(activeProfiles));, +		return StringUtils.toStringArray(profilesSet);, +++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, + * <p>{@code MergedContextConfiguration} is also used by the, + * {@link org.springframework.test.context.cache.ContextCache ContextCache}, + * as the key for caching an, +		// Active profiles must be unique, +		Set<String> profilesSet = new LinkedHashSet<String>(Arrays.asList(activeProfiles));, +		return StringUtils.toStringArray(profilesSet);, +++ b/spring-test/src/main/java/org/springframework/test/context/support/ActiveProfilesUtils.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +		final List<String[]> profileArrays = new ArrayList<String[]>();, +			profileArrays.add(profiles);, +, +			descriptor = (annotation.inheritProfiles() ? MetaAnnotationUtils.findAnnotationDescriptor(, +				rootDeclaringClass.getSuperclass(), annotationType) : null);, +		}, +, +		// Reverse the list so that we can traverse "down" the hierarchy., +		Collections.reverse(profileArrays);, +, +		final Set<String> activeProfiles = new LinkedHashSet<String>();, +		for (String[] profiles : profileArrays) {, +++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, + * <p>{@code MergedContextConfiguration} is also used by the, + * {@link org.springframework.test.context.cache.ContextCache ContextCache}, + * as the key for caching an, +		// Active profiles must be unique, +		Set<String> profilesSet = new LinkedHashSet<String>(Arrays.asList(activeProfiles));, +		return StringUtils.toStringArray(profilesSet);, +++ b/spring-test/src/main/java/org/springframework/test/context/support/ActiveProfilesUtils.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +		final List<String[]> profileArrays = new ArrayList<String[]>();, +			profileArrays.add(profiles);, +, +			descriptor = (annotation.inheritProfiles() ? MetaAnnotationUtils.findAnnotationDescriptor(, +				rootDeclaringClass.getSuperclass(), annotationType) : null);, +		}, +, +		// Reverse the list so that we can traverse "down" the hierarchy., +		Collections.reverse(profileArrays);, +, +		final Set<String> activeProfiles = new LinkedHashSet<String>();, +		for (String[] profiles : profileArrays) {, +++ b/spring-test/src/main/java/org/springframework/test/context/support/DefaultActiveProfilesResolver.java, +import java.util.LinkedHashSet;, +		final Set<String> activeProfiles = new LinkedHashSet<String>();, +++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, + * <p>{@code MergedContextConfiguration} is also used by the, + * {@link org.springframework.test.context.cache.ContextCache ContextCache}, + * as the key for caching an, +		// Active profiles must be unique, +		Set<String> profilesSet = new LinkedHashSet<String>(Arrays.asList(activeProfiles));, +		return StringUtils.toStringArray(profilesSet);, +++ b/spring-test/src/main/java/org/springframework/test/context/support/ActiveProfilesUtils.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +		final List<String[]> profileArrays = new ArrayList<String[]>();, +			profileArrays.add(profiles);, +, +			descriptor = (annotation.inheritProfiles() ? MetaAnnotationUtils.findAnnotationDescriptor(, +				rootDeclaringClass.getSuperclass(), annotationType) : null);, +		}, +, +		// Reverse the list so that we can traverse "down" the hierarchy., +		Collections.reverse(profileArrays);, +, +		final Set<String> activeProfiles = new LinkedHashSet<String>();, +		for (String[] profiles : profileArrays) {, +++ b/spring-test/src/main/java/org/springframework/test/context/support/DefaultActiveProfilesResolver.java, +import java.util.LinkedHashSet;, +		final Set<String> activeProfiles = new LinkedHashSet<String>();, +++ b/spring-test/src/test/java/org/springframework/test/context/MergedContextConfigurationTests.java, +		assertNotEquals(mergedConfig1.hashCode(), mergedConfig2.hashCode());, +		assertNotEquals(mergedConfig1, mergedConfig2);, +++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, + * <p>{@code MergedContextConfiguration} is also used by the]