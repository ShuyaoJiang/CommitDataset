[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/SseHandlerFunctionIntegrationTests.java, +import org.springframework.http.codec.BodyExtractors;, +import org.springframework.web.client.reactive.ClientRequest;, +	private static final MediaType EVENT_STREAM = new MediaType("text", "event-stream");, +, +		this.webClient = WebClient.create(new ReactorClientHttpConnector());, +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/string", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/person", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/event", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		;, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/SseHandlerFunctionIntegrationTests.java, +import org.springframework.http.codec.BodyExtractors;, +import org.springframework.web.client.reactive.ClientRequest;, +	private static final MediaType EVENT_STREAM = new MediaType("text", "event-stream");, +, +		this.webClient = WebClient.create(new ReactorClientHttpConnector());, +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/string", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/person", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/event", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		;, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.http.codec.BodyExtractors;, +import org.springframework.web.client.reactive.ClientRequest;, +	private static final MediaType EVENT_STREAM = new MediaType("text", "event-stream");, +, +, +	@Override, +		this.webClient = WebClient.create(new ReactorClientHttpConnector());, +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/sse/string", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/sse/person", this.port), +						.accept(EVENT_STREAM), +						.build();, +, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +				ClientRequest, +						.GET("http://localhost:{port}/sse/event", this.port), +						.accept(EVENT_STREAM), +						.build();, +				.exchange(request), +				.flatMap(response -> response.body(BodyExtractors.toFlux(String.class))), +		ClientRequest<Void> request =, +		ClientRequest, +				.GET("http://localhost:{port}/sse/event", this.port), +				.accept(EVENT_STREAM), +				.build();]