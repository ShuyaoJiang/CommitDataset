[+++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeFormatterRegistrar.java, +import java.util.EnumMap;, +	 * User-defined formatters., +	private final Map<Type, DateTimeFormatter> formatters = new EnumMap<>(Type.class);, +	private final Map<Type, DateTimeFormatterFactory> factories = new EnumMap<>(Type.class);, +		DateTimeFormatter df = getFormatter(Type.DATE);, +		DateTimeFormatter tf = getFormatter(Type.TIME);, +		DateTimeFormatter dtf = getFormatter(Type.DATE_TIME);, +, +		// Efficient ISO_LOCAL_* variants for printing since they are twice as fast..., +				new TemporalAccessorPrinter(, +						df == DateTimeFormatter.ISO_DATE ? DateTimeFormatter.ISO_LOCAL_DATE : df),, +				new TemporalAccessorParser(LocalDate.class, df));, +				new TemporalAccessorPrinter(, +						tf == DateTimeFormatter.ISO_TIME ? DateTimeFormatter.ISO_LOCAL_TIME : tf),, +				new TemporalAccessorParser(LocalTime.class, tf));, +				new TemporalAccessorPrinter(, +						dtf == DateTimeFormatter.ISO_DATE_TIME ? DateTimeFormatter.ISO_LOCAL_DATE_TIME : dtf),, +				new TemporalAccessorParser(LocalDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(ZonedDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(OffsetDateTime.class, dtf));, +				new TemporalAccessorPrinter(tf),, +				new TemporalAccessorParser(OffsetTime.class, tf));, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeFormatterRegistrar.java, +import java.util.EnumMap;, +	 * User-defined formatters., +	private final Map<Type, DateTimeFormatter> formatters = new EnumMap<>(Type.class);, +	private final Map<Type, DateTimeFormatterFactory> factories = new EnumMap<>(Type.class);, +		DateTimeFormatter df = getFormatter(Type.DATE);, +		DateTimeFormatter tf = getFormatter(Type.TIME);, +		DateTimeFormatter dtf = getFormatter(Type.DATE_TIME);, +, +		// Efficient ISO_LOCAL_* variants for printing since they are twice as fast..., +				new TemporalAccessorPrinter(, +						df == DateTimeFormatter.ISO_DATE ? DateTimeFormatter.ISO_LOCAL_DATE : df),, +				new TemporalAccessorParser(LocalDate.class, df));, +				new TemporalAccessorPrinter(, +						tf == DateTimeFormatter.ISO_TIME ? DateTimeFormatter.ISO_LOCAL_TIME : tf),, +				new TemporalAccessorParser(LocalTime.class, tf));, +				new TemporalAccessorPrinter(, +						dtf == DateTimeFormatter.ISO_DATE_TIME ? DateTimeFormatter.ISO_LOCAL_DATE_TIME : dtf),, +				new TemporalAccessorParser(LocalDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(ZonedDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(OffsetDateTime.class, dtf));, +				new TemporalAccessorPrinter(tf),, +				new TemporalAccessorParser(OffsetTime.class, tf));, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.java, +, +		// Efficient ISO_LOCAL_* variants for printing since they are twice as fast..., +		if (formatter == DateTimeFormatter.ISO_DATE) {, +			if (isLocal(fieldType)) {, +				formatter = DateTimeFormatter.ISO_LOCAL_DATE;, +			}, +		}, +		else if (formatter == DateTimeFormatter.ISO_TIME) {, +			if (isLocal(fieldType)) {, +				formatter = DateTimeFormatter.ISO_LOCAL_TIME;, +			}, +		}, +		else if (formatter == DateTimeFormatter.ISO_DATE_TIME) {, +			if (isLocal(fieldType)) {, +				formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;, +			}, +		}, +, +	 * @param fieldType the declared type of the field, +	private boolean isLocal(Class<?> fieldType) {, +		return fieldType.getSimpleName().startsWith("Local");, +	}, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeFormatterRegistrar.java, +import java.util.EnumMap;, +	 * User-defined formatters., +	private final Map<Type, DateTimeFormatter> formatters = new EnumMap<>(Type.class);, +	private final Map<Type, DateTimeFormatterFactory> factories = new EnumMap<>(Type.class);, +		DateTimeFormatter df = getFormatter(Type.DATE);, +		DateTimeFormatter tf = getFormatter(Type.TIME);, +		DateTimeFormatter dtf = getFormatter(Type.DATE_TIME);, +, +		// Efficient ISO_LOCAL_* variants for printing since they are twice as fast..., +				new TemporalAccessorPrinter(, +						df == DateTimeFormatter.ISO_DATE ? DateTimeFormatter.ISO_LOCAL_DATE : df),, +				new TemporalAccessorParser(LocalDate.class, df));, +				new TemporalAccessorPrinter(, +						tf == DateTimeFormatter.ISO_TIME ? DateTimeFormatter.ISO_LOCAL_TIME : tf),, +				new TemporalAccessorParser(LocalTime.class, tf));, +				new TemporalAccessorPrinter(, +						dtf == DateTimeFormatter.ISO_DATE_TIME ? DateTimeFormatter.ISO_LOCAL_DATE_TIME : dtf),, +				new TemporalAccessorParser(LocalDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(ZonedDateTime.class, dtf));, +				new TemporalAccessorPrinter(dtf),, +				new TemporalAccessorParser(OffsetDateTime.class, dtf));, +				new TemporalAccessorPrinter(tf),, +				new TemporalAccessorParser(OffsetTime.class, tf));, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.java]