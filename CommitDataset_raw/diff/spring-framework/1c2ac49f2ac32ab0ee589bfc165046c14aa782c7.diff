[+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +, +	private boolean writeWeakETag = false;, +, +	/**, +	 * Set whether the ETag value written to the response should be weak, as per rfc7232., +	 * <p>Should be configured using an {@code <init-param>} for parameter name, +	 * "writeWeakETag" in the filter definition in {@code web.xml}., +	 * @see  <a href="https://tools.ietf.org/html/rfc7232#section-2.3">rfc7232 section-2.3</a>, +	 */, +	public boolean isWriteWeakETag() {, +		return writeWeakETag;, +	}, +, +	/**, +	 * Return whether the ETag value written to the response should be weak, as per rfc7232., +	 */, +	public void setWriteWeakETag(boolean writeWeakETag) {, +		this.writeWeakETag = writeWeakETag;, +	}, +			String responseETag = generateETagHeaderValue(responseWrapper.getContentInputStream(), this.writeWeakETag);, +			if (requestETag != null, +					&& (responseETag.equals(requestETag), +					|| responseETag.replaceFirst("^W/", "").equals(requestETag.replaceFirst("^W/", "")), +					|| "*".equals(requestETag))) {, +	 * @param isWeak whether the generated ETag should be weak, +	protected String generateETagHeaderValue(InputStream inputStream, boolean isWeak) throws IOException {, +		// length of W/ + 0 + " + 32bits md5 hash + ", +		StringBuilder builder = new StringBuilder(37);, +		if (isWeak) {, +			builder.append("W/");, +		}, +		builder.append("\"0");, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +, +	private boolean writeWeakETag = false;, +, +	/**, +	 * Set whether the ETag value written to the response should be weak, as per rfc7232., +	 * <p>Should be configured using an {@code <init-param>} for parameter name, +	 * "writeWeakETag" in the filter definition in {@code web.xml}., +	 * @see  <a href="https://tools.ietf.org/html/rfc7232#section-2.3">rfc7232 section-2.3</a>, +	 */, +	public boolean isWriteWeakETag() {, +		return writeWeakETag;, +	}, +, +	/**, +	 * Return whether the ETag value written to the response should be weak, as per rfc7232., +	 */, +	public void setWriteWeakETag(boolean writeWeakETag) {, +		this.writeWeakETag = writeWeakETag;, +	}, +			String responseETag = generateETagHeaderValue(responseWrapper.getContentInputStream(), this.writeWeakETag);, +			if (requestETag != null, +					&& (responseETag.equals(requestETag), +					|| responseETag.replaceFirst("^W/", "").equals(requestETag.replaceFirst("^W/", "")), +					|| "*".equals(requestETag))) {, +	 * @param isWeak whether the generated ETag should be weak, +	protected String generateETagHeaderValue(InputStream inputStream, boolean isWeak) throws IOException {, +		// length of W/ + 0 + " + 32bits md5 hash + ", +		StringBuilder builder = new StringBuilder(37);, +		if (isWeak) {, +			builder.append("W/");, +		}, +		builder.append("\"0");, +++ b/spring-web/src/test/java/org/springframework/web/filter/ShallowEtagHeaderFilterTests.java, + * Copyright 2002-2016 the original author or authors., +	public void filterNoMatchWeakETag() throws Exception {, +		this.filter.setWriteWeakETag(true);, +		final MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		final byte[] responseBody = "Hello World".getBytes("UTF-8");, +		FilterChain filterChain = (filterRequest, filterResponse) -> {, +			assertEquals("Invalid request passed", request, filterRequest);, +			((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK);, +			FileCopyUtils.copy(responseBody, filterResponse.getOutputStream());, +		};, +		filter.doFilter(request, response, filterChain);, +, +		assertEquals("Invalid status", 200, response.getStatus());, +		assertEquals("Invalid ETag header", "W/\"0b10a8db164e0754105b7a99be72e3fe5\"", response.getHeader("ETag"));, +		assertTrue("Invalid Content-Length header", response.getContentLength() > 0);, +		assertArrayEquals("Invalid content", responseBody, response.getContentAsByteArray());, +	}, +, +	@Test, +	public void filterMatchWeakEtag() throws Exception {, +		final MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels");, +		String etag = "\"0b10a8db164e0754105b7a99be72e3fe5\"";, +		request.addHeader("If-None-Match", "W/" + etag);, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		FilterChain filterChain = (filterRequest, filterResponse) -> {, +			assertEquals("Invalid request passed", request, filterRequest);, +			byte[] responseBody = "Hello World".getBytes("UTF-8");, +			FileCopyUtils.copy(responseBody, filterResponse.getOutputStream());, +			filterResponse.setContentLength(responseBody.length);, +		};]