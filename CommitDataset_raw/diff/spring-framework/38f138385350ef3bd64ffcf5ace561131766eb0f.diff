[+++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * as system properties: e.g. <code>${user.dir}</code>.  By default unresolvable, + * placeholders are ignored, but if an exception is preferred set the , + * {@link #setIgnoreUnresolvablePlaceholders(boolean) ignoreUnresolvablePlaceholders} , + * flag to false., + * @author Dave Syer, +	private boolean ignoreUnresolvablePlaceholders = true;, +	/**, +	 * Flag to determine if unresolvable placeholders in System properties, +	 * @param ignoreUnresolvablePlaceholders, +	 */, +	public void setIgnoreUnresolvablePlaceholders(boolean ignoreUnresolvablePlaceholders) {, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +	}, +		return SystemPropertyUtils.resolvePlaceholders(path, ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * as system properties: e.g. <code>${user.dir}</code>.  By default unresolvable, + * placeholders are ignored, but if an exception is preferred set the , + * {@link #setIgnoreUnresolvablePlaceholders(boolean) ignoreUnresolvablePlaceholders} , + * flag to false., + * @author Dave Syer, +	private boolean ignoreUnresolvablePlaceholders = true;, +	/**, +	 * Flag to determine if unresolvable placeholders in System properties, +	 * @param ignoreUnresolvablePlaceholders, +	 */, +	public void setIgnoreUnresolvablePlaceholders(boolean ignoreUnresolvablePlaceholders) {, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +	}, +		return SystemPropertyUtils.resolvePlaceholders(path, ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/util/SystemPropertyUtils.java, + * <code>${user.dir}</code>.  Default values can be supplied using the ":" separator between key , + * and value., + * @author Dave Syer, +	/** Value separator for system property placeholders: ":" */, +	private static final PropertyPlaceholderHelper strictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX,, +			PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, false);, +	private static final PropertyPlaceholderHelper nonStrictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX,, +			PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, true);, +	 *, +	 * @throws IllegalArgumentException if there is an unresolvable placeholder, +		return resolvePlaceholders(text, false);, +	}, +, +	/**, +	 * Resolve ${...} placeholders in the given text, replacing them with corresponding system property values., +	 * Unresolvable placeholders with no default value are ignored and passed through unchanged if the, +	 * flag is set to true., +	 * , +	 * @param text the String to resolve, +	 * @param ignoreUnresolvablePlaceholders flag to determine is unresolved placeholders are ignored, +	 * @return the resolved String, +	 * @see #PLACEHOLDER_PREFIX, +	 * @see #PLACEHOLDER_SUFFIX, +	 * , +	 * @throws IllegalArgumentException if there is an unresolvable placeholder and the flag is false, +	 * , +	 */, +	public static String resolvePlaceholders(final String text, boolean ignoreUnresolvablePlaceholders) {, +		if (ignoreUnresolvablePlaceholders) {, +			return nonStrictHelper.replacePlaceholders(text, new PlaceholderResolverImplementation(text));, +		}, +		return strictHelper.replacePlaceholders(text, new PlaceholderResolverImplementation(text));, +	}, +, +	private static final class PlaceholderResolverImplementation implements PlaceholderResolver {, +		private final String text;, +, +		private PlaceholderResolverImplementation(String text) {, +			this.text = text;, +		}, +, +					System.err.println("Could not resolve placeholder '" + placeholderName + "' in [" + text, +							+ "] as system property: neither system property nor environment variable found");, +			} catch (Throwable ex) {, +				System.err.println("Could not resolve placeholder '" + placeholderName + "' in [" + text, +						+ "] as system property: " + ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * as system properties: e.g. <code>${user.dir}</code>.  By default unresolvable, + * placeholders are ignored, but if an exception is preferred set the , + * {@link #setIgnoreUnresolvablePlaceholders(boolean) ignoreUnresolvablePlaceholders} , + * flag to false., + * @author Dave Syer, +	private boolean ignoreUnresolvablePlaceholders = true;, +	/**, +	 * Flag to determine if unresolvable placeholders in System properties, +	 * @param ignoreUnresolvablePlaceholders, +	 */, +	public void setIgnoreUnresolvablePlaceholders(boolean ignoreUnresolvablePlaceholders) {, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +	}, +		return SystemPropertyUtils.resolvePlaceholders(path, ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/util/SystemPropertyUtils.java, + * <code>${user.dir}</code>.  Default values can be supplied using the ":" separator between key , + * and value., + * @author Dave Syer, +	/** Value separator for system property placeholders: ":" */, +	private static final PropertyPlaceholderHelper strictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX,, +			PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, false);, +	private static final PropertyPlaceholderHelper nonStrictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX,]