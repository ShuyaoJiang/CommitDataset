[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.util;, +, +import java.net.URI;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Default implementation of {@link UriBuilderFactory} using, + * {@link UriComponentsBuilder} for building, encoding, and expanding URI, + * templates., + *, + * <p>Exposes configuration properties that customize the creation of all URIs, + * built through this factory instance including a base URI, default URI, + * variables, and an encoding mode., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +public class DefaultUriBuilderFactory implements UriBuilderFactory {, +, +	public enum EncodingMode {URI_COMPONENT, VALUES_ONLY, NONE };, +, +, +	private final UriComponentsBuilder baseUri;, +, +	private final Map<String, Object> defaultUriVariables = new HashMap<>();, +, +	private EncodingMode encodingMode = EncodingMode.URI_COMPONENT;, +, +, +	/**, +	 * Default constructor without a base URI., +	 */, +	public DefaultUriBuilderFactory() {, +		this(UriComponentsBuilder.fromPath(null));, +	}, +, +	/**, +	 * Constructor with a String "base URI"., +	 * <p>The String given here is used to create a single "base", +	 * {@code UriComponentsBuilder}. Each time a new URI is prepared via, +	 * {@link #uriString(String)} a new {@code UriComponentsBuilder} is created and, +	 * merged with a clone of the "base" {@code UriComponentsBuilder}., +	 * <p>Note that the base URI may contain any or all components of a URI and, +	 * those will apply to every URI., +	 */, +	public DefaultUriBuilderFactory(String baseUri) {, +		this(UriComponentsBuilder.fromUriString(baseUri));, +	}, +, +	/**, +	 * Alternate constructor with a {@code UriComponentsBuilder} as the base URI., +	 */, +	public DefaultUriBuilderFactory(UriComponentsBuilder baseUri) {, +		Assert.notNull(baseUri, "'baseUri' is required.");, +		this.baseUri = baseUri;, +	}, +, +, +	/**, +	 * Configure default URI variable values to use when expanding a URI with a, +	 * Map of values. The map supplied when expanding a given URI can override, +	 * default values., +	 * @param defaultUriVariables the default URI variables, +	 */, +	public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {, +		this.defaultUriVariables.clear();, +		if (defaultUriVariables != null) {, +			this.defaultUriVariables.putAll(defaultUriVariables);, +		}, +	}, +, +	/**, +	 * Return the configured default URI variable values., +	 */, +	public Map<String, ?> getDefaultUriVariables() {, +		return Collections.unmodifiableMap(this.defaultUriVariables);, +	}]