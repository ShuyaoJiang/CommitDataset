[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.lang.reflect.Modifier;, +public class ScheduledAnnotationBeanPostProcessor implements BeanPostProcessor, Ordered,, +		EmbeddedValueResolverAware, BeanFactoryAware, SmartInitializingSingleton, DisposableBean {, +							"@Scheduled method '%s' found on bean target class '%s' but not " +, +							"found in any interface(s) for a dynamic proxy. Either pull the " +, +							"method up to a declared interface or switch to subclass (CGLIB) " +, +							"proxies by setting proxy-target-class/proxyTargetClass to 'true'",, +							method.getName(), method.getDeclaringClass().getSimpleName()));, +				}, +			}, +			else if (AopUtils.isCglibProxy(bean)) {, +				// Common problem: private methods end up in the proxy instance, not getting delegated., +				if (Modifier.isPrivate(method.getModifiers())) {, +					throw new IllegalStateException(String.format(, +							"@Scheduled method '%s' found on CGLIB proxy for target class '%s' but cannot " +, +							"be delegated to target bean. Switch its visibility to package or protected.",, +							method.getName(), method.getDeclaringClass().getSimpleName()));, +			String errorMessage =, +					"Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required";, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.lang.reflect.Modifier;, +public class ScheduledAnnotationBeanPostProcessor implements BeanPostProcessor, Ordered,, +		EmbeddedValueResolverAware, BeanFactoryAware, SmartInitializingSingleton, DisposableBean {, +							"@Scheduled method '%s' found on bean target class '%s' but not " +, +							"found in any interface(s) for a dynamic proxy. Either pull the " +, +							"method up to a declared interface or switch to subclass (CGLIB) " +, +							"proxies by setting proxy-target-class/proxyTargetClass to 'true'",, +							method.getName(), method.getDeclaringClass().getSimpleName()));, +				}, +			}, +			else if (AopUtils.isCglibProxy(bean)) {, +				// Common problem: private methods end up in the proxy instance, not getting delegated., +				if (Modifier.isPrivate(method.getModifiers())) {, +					throw new IllegalStateException(String.format(, +							"@Scheduled method '%s' found on CGLIB proxy for target class '%s' but cannot " +, +							"be delegated to target bean. Switch its visibility to package or protected.",, +							method.getName(), method.getDeclaringClass().getSimpleName()));, +			String errorMessage =, +					"Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required";, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.After;, +import org.springframework.validation.annotation.Validated;, +import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;, +, +	@After, +	public void closeContextAfterTest() {, +		context.close();, +	}, +, +, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean.class);, +, +		TriggerContext triggerContext = new SimpleTriggerContext(, +				lastScheduledExecutionTime, lastActualExecutionTime, lastCompletionTime);, +	@Test(expected = BeanCreationException.class), +	public void cronTaskWithMethodValidation() throws InterruptedException {, +		BeanDefinition validationDefinition = new RootBeanDefinition(MethodValidationPostProcessor.class);, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.CronTestBean.class);, +		context.registerBeanDefinition("methodValidation", validationDefinition);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +	}, +, +	@Validated, +		private void cron() throws IOException {, +		protected void cron() throws IOException {, +	private static @interface BusinessHours {, +	}]