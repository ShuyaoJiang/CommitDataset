[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import org.hamcrest.CoreMatchers;, +import org.hamcrest.MatcherAssert;, +		MatcherAssert.assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +		MatcherAssert.assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +				AssertionErrors.fail("No matching value at JSON path \"" + this.expression + "\"");, +				AssertionErrors.fail("Got a list of values " + actualValue +, +						" instead of the expected single value " + expectedValue);, +		AssertionErrors.assertEquals("JSON path \"" + this.expression + "\"", expectedValue, actualValue);, +		MatcherAssert.assertThat(failureReason("a string", value), value, CoreMatchers.instanceOf(String.class));, +		MatcherAssert.assertThat(failureReason("a boolean", value), value, CoreMatchers.instanceOf(Boolean.class));, +		MatcherAssert.assertThat(failureReason("a number", value), value, CoreMatchers.instanceOf(Number.class));, +		MatcherAssert.assertThat(failureReason("an array", value), value, CoreMatchers.instanceOf(List.class));, +		MatcherAssert.assertThat(failureReason("a map", value), value, CoreMatchers.instanceOf(Map.class));, +			AssertionErrors.assertTrue(reason, ((List<?>) value).isEmpty());, +			AssertionErrors.assertTrue(reason, (value == null));, +		AssertionErrors.assertTrue(failureReason("an empty value", value), ObjectUtils.isEmpty(value));, +		AssertionErrors.assertTrue(failureReason("a non-empty value", value), !ObjectUtils.isEmpty(value));, +			String message = "No values for JSON path \"" + this.expression + "\"";, +			AssertionErrors.assertTrue(message, !((List<?>) value).isEmpty());, +			AssertionErrors.assertTrue(failureReason("no values", value), ((List<?>) value).isEmpty());, +			AssertionErrors.fail(failureReason("no value", value));, +	/**, +	 * Evaluate the JSON path and return the resulting value., +	 * @param content the content to evaluate against, +	 * @return the result of the evaluation, +	 * @throws AssertionError if the evaluation fails, +	 */, +	public Object evaluateJsonPath(String content) {, +			throw new AssertionError("No value at JSON path \"" + this.expression + "\"", ex);, +	/**, +	 * Variant of {@link #evaluateJsonPath(String)} with a target type., +	 * This can be useful for matching numbers reliably for example coercing an, +	 * integer into a double., +	 * @param content the content to evaluate against, +	 * @return the result of the evaluation, +	 * @throws AssertionError if the evaluation fails, +	 */, +	public Object evaluateJsonPath(String content, Class<?> targetType) {, +		AssertionErrors.assertTrue(reason, value != null);, +			AssertionErrors.assertTrue(reason, !((List<?>) value).isEmpty());, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import org.hamcrest.CoreMatchers;, +import org.hamcrest.MatcherAssert;, +		MatcherAssert.assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +		MatcherAssert.assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +				AssertionErrors.fail("No matching value at JSON path \"" + this.expression + "\"");, +				AssertionErrors.fail("Got a list of values " + actualValue +, +						" instead of the expected single value " + expectedValue);, +		AssertionErrors.assertEquals("JSON path \"" + this.expression + "\"", expectedValue, actualValue);, +		MatcherAssert.assertThat(failureReason("a string", value), value, CoreMatchers.instanceOf(String.class));, +		MatcherAssert.assertThat(failureReason("a boolean", value), value, CoreMatchers.instanceOf(Boolean.class));, +		MatcherAssert.assertThat(failureReason("a number", value), value, CoreMatchers.instanceOf(Number.class));, +		MatcherAssert.assertThat(failureReason("an array", value), value, CoreMatchers.instanceOf(List.class));, +		MatcherAssert.assertThat(failureReason("a map", value), value, CoreMatchers.instanceOf(Map.class));, +			AssertionErrors.assertTrue(reason, ((List<?>) value).isEmpty());, +			AssertionErrors.assertTrue(reason, (value == null));, +		AssertionErrors.assertTrue(failureReason("an empty value", value), ObjectUtils.isEmpty(value));, +		AssertionErrors.assertTrue(failureReason("a non-empty value", value), !ObjectUtils.isEmpty(value));, +			String message = "No values for JSON path \"" + this.expression + "\"";, +			AssertionErrors.assertTrue(message, !((List<?>) value).isEmpty());, +			AssertionErrors.assertTrue(failureReason("no values", value), ((List<?>) value).isEmpty());, +			AssertionErrors.fail(failureReason("no value", value));, +	/**, +	 * Evaluate the JSON path and return the resulting value., +	 * @param content the content to evaluate against, +	 * @return the result of the evaluation, +	 * @throws AssertionError if the evaluation fails, +	 */, +	public Object evaluateJsonPath(String content) {, +			throw new AssertionError("No value at JSON path \"" + this.expression + "\"", ex);, +	/**, +	 * Variant of {@link #evaluateJsonPath(String)} with a target type., +	 * This can be useful for matching numbers reliably for example coercing an, +	 * integer into a double., +	 * @param content the content to evaluate against, +	 * @return the result of the evaluation, +	 * @throws AssertionError if the evaluation fails, +	 */, +	public Object evaluateJsonPath(String content, Class<?> targetType) {, +		AssertionErrors.assertTrue(reason, value != null);, +			AssertionErrors.assertTrue(reason, !((List<?>) value).isEmpty());, +++ b/spring-test/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import org.hamcrest.MatcherAssert;, +	private static XPathExpression compileXpathExpression(String expression,, +			@Nullable Map<String, String> namespaces) throws XPathExpressionException {, +, +, +		Node node = evaluateXpath(content, encoding, Node.class);, +		MatcherAssert.assertThat("XPath " + this.expression, node, matcher);, +	}, +, +	/**, +	 * Apply the XPath expression and assert the resulting content exists., +	 * @throws Exception if content parsing or expression evaluation fails, +	 */, +	public void exists(byte[] content, @Nullable String encoding) throws Exception {, +		Node node = evaluateXpath(content, encoding, Node.class);, +		AssertionErrors.assertTrue("XPath " + this.expression + " does not exist", node != null);, +	}]