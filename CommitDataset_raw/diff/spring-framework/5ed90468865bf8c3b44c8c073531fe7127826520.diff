[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2016 the original author or authors., +					boolean useArgs = !ObjectUtils.isEmpty(beanMethodArgs);, +					if (useArgs && beanFactory.isSingleton(beanName)) {, +						// Stubbed null arguments just for reference purposes,, +						// expecting them to be autowired for regular singleton references?, +						// A safe assumption since @Bean singleton arguments cannot be optional..., +						for (Object arg : beanMethodArgs) {, +							if (arg == null) {, +								useArgs = false;, +								break;, +							}, +						}, +					}, +					Object beanInstance = (useArgs ? beanFactory.getBean(beanName, beanMethodArgs) :, +							beanFactory.getBean(beanName));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2016 the original author or authors., +					boolean useArgs = !ObjectUtils.isEmpty(beanMethodArgs);, +					if (useArgs && beanFactory.isSingleton(beanName)) {, +						// Stubbed null arguments just for reference purposes,, +						// expecting them to be autowired for regular singleton references?, +						// A safe assumption since @Bean singleton arguments cannot be optional..., +						for (Object arg : beanMethodArgs) {, +							if (arg == null) {, +								useArgs = false;, +								break;, +							}, +						}, +					}, +					Object beanInstance = (useArgs ? beanFactory.getBean(beanName, beanMethodArgs) :, +							beanFactory.getBean(beanName));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +	public void testPrototypeArgumentThroughBeanMethodCall() {, +	public void testSingletonArgumentThroughBeanMethodCall() {, +	@Test, +	public void testNullArgumentThroughBeanMethodCall() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfigWithNull.class);, +		ctx.getBean("aFoo");, +	}, +, +		public DependingFoo foo(BarArgument bar) {, +				public DependingFoo createFoo(BarArgument bar) {, +		public DependingFoo foo(BarArgument bar) {, +				public DependingFoo createFoo(BarArgument bar) {, +	@Configuration, +	static class BeanArgumentConfigWithNull {, +, +		@Bean, +		public DependingFoo aFoo() {, +			return foo(null);, +		}, +, +		@Bean @Lazy, +		public DependingFoo foo(BarArgument bar) {, +			return new DependingFoo(bar);, +		}, +, +		@Bean, +		public BarArgument bar() {, +			return new BarArgument();, +		}, +	}, +, +			Assert.notNull(bar);]