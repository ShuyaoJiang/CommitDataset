[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDec.java, +import java.math.BigDecimal;, +, + * @author Giovanni Dall'Oglio Risso, +			if (op1 instanceof BigDecimal) {, +				newValue = new TypedValue(((BigDecimal) op1).subtract(BigDecimal.ONE),, +						operandTypedValue.getTypeDescriptor());, +			}, +			else if (op1 instanceof Double) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDec.java, +import java.math.BigDecimal;, +, + * @author Giovanni Dall'Oglio Risso, +			if (op1 instanceof BigDecimal) {, +				newValue = new TypedValue(((BigDecimal) op1).subtract(BigDecimal.ONE),, +						operandTypedValue.getTypeDescriptor());, +			}, +			else if (op1 instanceof Double) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java, +import java.math.BigDecimal;, +import java.math.RoundingMode;, +, +import org.springframework.util.NumberUtils;, + * @author Giovanni Dall'Oglio Risso, +, +		Object leftOperand = getLeftOperand().getValueInternal(state).getValue();, +		Object rightOperand = getRightOperand().getValueInternal(state).getValue();, +, +		if (leftOperand instanceof Number && rightOperand instanceof Number) {, +			Number leftNumber = (Number) leftOperand;, +			Number rightNumber = (Number) rightOperand;, +, +			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {, +				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class);, +				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class);, +				int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale());, +				return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN));, +, +			if (leftNumber instanceof Double || rightNumber instanceof Double) {, +				return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue());, +			if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return new TypedValue(leftNumber.floatValue() / rightNumber.floatValue());, +			if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				return new TypedValue(leftNumber.longValue() / rightNumber.longValue());, +			}, +, +			return new TypedValue(leftNumber.intValue() / rightNumber.intValue());, +, +		return state.operate(Operation.DIVIDE, leftOperand, rightOperand);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDec.java, +import java.math.BigDecimal;, +, + * @author Giovanni Dall'Oglio Risso, +			if (op1 instanceof BigDecimal) {, +				newValue = new TypedValue(((BigDecimal) op1).subtract(BigDecimal.ONE),, +						operandTypedValue.getTypeDescriptor());, +			}, +			else if (op1 instanceof Double) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java, +import java.math.BigDecimal;, +import java.math.RoundingMode;, +, +import org.springframework.util.NumberUtils;, + * @author Giovanni Dall'Oglio Risso, +, +		Object leftOperand = getLeftOperand().getValueInternal(state).getValue();, +		Object rightOperand = getRightOperand().getValueInternal(state).getValue();, +, +		if (leftOperand instanceof Number && rightOperand instanceof Number) {, +			Number leftNumber = (Number) leftOperand;, +			Number rightNumber = (Number) rightOperand;, +, +			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {, +				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class);, +				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class);, +				int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale());, +				return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN));, +, +			if (leftNumber instanceof Double || rightNumber instanceof Double) {, +				return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue());, +			if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return new TypedValue(leftNumber.floatValue() / rightNumber.floatValue());, +			if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				return new TypedValue(leftNumber.longValue() / rightNumber.longValue());, +			}, +, +			return new TypedValue(leftNumber.intValue() / rightNumber.intValue());, +, +		return state.operate(Operation.DIVIDE, leftOperand, rightOperand);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGE.java, +import java.math.BigDecimal;, +, +import org.springframework.util.NumberUtils;, + * @author Giovanni Dall'Oglio Risso, +, +, +			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {, +				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class);, +				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class);, +				return BooleanTypedValue.forValue(leftBigDecimal.compareTo(rightBigDecimal) >= 0);]