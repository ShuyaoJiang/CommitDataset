[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.server.ServerHttpRequest;, +						new RequestMappingInfoComparator(pathComparator, request);, +	 * result in:, +	 * <ul>, +	 * <li>RHIs with {@linkplain RequestMappingInfo#matchedPaths better matched paths} take prescedence, +	 * before those without.</li>, +	 * <li>RHIs with one single {@linkplain RequestMappingInfo#methods request method} will be, +	 * ordered before those without a method, or with more than one method.</li>, +	 * <li>RHIs with more {@linkplain RequestMappingInfo#params request parameters} will be ordered before those with, +	 * less parameters</li>, +	 * </ol>, +		private final ServerHttpRequest request;, +, +		RequestMappingInfoComparator(Comparator<String> pathComparator, HttpServletRequest request) {, +			this.request = new ServletServerHttpRequest(request);, +			int acceptComparison = compareAcceptHeaders(info1, info2);, +			if (acceptComparison != 0) {, +				return acceptComparison;, +			}, +, +		private int compareAcceptHeaders(RequestMappingInfo info1, RequestMappingInfo info2) {, +			List<MediaType> requestAccepts = request.getHeaders().getAccept();, +			List<MediaType> info1Accepts = getAcceptHeaderValue(info1);, +			List<MediaType> info2Accepts = getAcceptHeaderValue(info2);, +, +			for (MediaType requestAccept : requestAccepts) {, +				int pos1 = indexOfIncluded(info1Accepts, requestAccept);, +				int pos2 = indexOfIncluded(info2Accepts, requestAccept);, +				if (pos1 != pos2) {, +					return pos2 - pos1;, +				}, +			}, +			return 0;, +		private int indexOfIncluded(List<MediaType> infoAccepts, MediaType requestAccept) {, +			for (int i = 0; i < infoAccepts.size(); i++) {, +				MediaType info1Accept = infoAccepts.get(i);, +				if (requestAccept.includes(info1Accept)) {, +					return i;, +				}, +			}, +			return -1;, +		}, +, +		private List<MediaType> getAcceptHeaderValue(RequestMappingInfo info) {, +			for (String header : info.headers) {, +				int separator = header.indexOf('=');, +				if (separator != -1) {, +					String key = header.substring(0, separator);, +					String value = header.substring(separator + 1);, +					if ("Accept".equalsIgnoreCase(key)) {, +						return MediaType.parseMediaTypes(value);, +					}, +				}, +			}, +			return Collections.emptyList();, +		}, +, +, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.server.ServerHttpRequest;, +						new RequestMappingInfoComparator(pathComparator, request);, +	 * result in:, +	 * <ul>, +	 * <li>RHIs with {@linkplain RequestMappingInfo#matchedPaths better matched paths} take prescedence, +	 * before those without.</li>, +	 * <li>RHIs with one single {@linkplain RequestMappingInfo#methods request method} will be, +	 * ordered before those without a method, or with more than one method.</li>, +	 * <li>RHIs with more {@linkplain RequestMappingInfo#params request parameters} will be ordered before those with, +	 * less parameters</li>, +	 * </ol>, +		private final ServerHttpRequest request;, +, +		RequestMappingInfoComparator(Comparator<String> pathComparator, HttpServletRequest request) {, +			this.request = new ServletServerHttpRequest(request);, +			int acceptComparison = compareAcceptHeaders(info1, info2);, +			if (acceptComparison != 0) {, +				return acceptComparison;, +			}, +, +		private int compareAcceptHeaders(RequestMappingInfo info1, RequestMappingInfo info2) {, +			List<MediaType> requestAccepts = request.getHeaders().getAccept();, +			List<MediaType> info1Accepts = getAcceptHeaderValue(info1);, +			List<MediaType> info2Accepts = getAcceptHeaderValue(info2);, +, +			for (MediaType requestAccept : requestAccepts) {, +				int pos1 = indexOfIncluded(info1Accepts, requestAccept);, +				int pos2 = indexOfIncluded(info2Accepts, requestAccept);, +				if (pos1 != pos2) {, +					return pos2 - pos1;, +				}, +			}, +			return 0;, +		private int indexOfIncluded(List<MediaType> infoAccepts, MediaType requestAccept) {, +			for (int i = 0; i < infoAccepts.size(); i++) {, +				MediaType info1Accept = infoAccepts.get(i);, +				if (requestAccept.includes(info1Accept)) {, +					return i;, +				}]