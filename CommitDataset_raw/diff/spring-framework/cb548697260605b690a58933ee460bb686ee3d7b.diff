[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectGenericConverter.java, +import java.lang.reflect.Array;, +, +		int length = Array.getLength(source);, +		if (length == 0) {, +			return null;, +		} else {, +			TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +			if (sourceElementType.isAssignableTo(targetType)) {, +				return Array.get(source, 0);, +			} else {, +				GenericConverter converter = conversionService.getConverter(sourceElementType, targetType);, +				return converter.convert(Array.get(source, 0), sourceElementType, targetType);, +			}, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectGenericConverter.java, +import java.lang.reflect.Array;, +, +		int length = Array.getLength(source);, +		if (length == 0) {, +			return null;, +		} else {, +			TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +			if (sourceElementType.isAssignableTo(targetType)) {, +				return Array.get(source, 0);, +			} else {, +				GenericConverter converter = conversionService.getConverter(sourceElementType, targetType);, +				return converter.convert(Array.get(source, 0), sourceElementType, targetType);, +			}, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectGenericConverter.java, +import java.util.Collection;, +, +		Collection sourceCollection = (Collection) source;, +		if (sourceCollection.size() == 0) {, +			return null;, +		} else {, +			TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +			if (sourceElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetType)) {, +				return sourceCollection.iterator().next();, +			} else {, +				GenericConverter converter = conversionService.getConverter(sourceElementType, targetType);, +				return converter.convert(sourceCollection.iterator().next(), sourceElementType, targetType);, +		}, +	}]