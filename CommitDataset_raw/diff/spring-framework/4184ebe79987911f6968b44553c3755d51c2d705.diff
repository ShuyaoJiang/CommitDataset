[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * string may contain a simple profile name (for example {@code "p1"}) or a profile, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * string may contain a simple profile name (for example {@code "p1"}) or a profile, +++ b/spring-core/src/main/java/org/springframework/core/env/Environment.java, +	 * i.e. the method will return {@code true} if the given profile is <em>not</em> active., +	 * For example, {@code env.acceptsProfiles("p1", "!p2")} will return {@code true} if, +	 * profile 'p1' is active or 'p2' is not active., +	 * or if any profile is {@code null}, empty, or whitespace only, +	 * Return whether the {@linkplain #getActiveProfiles() active profiles}, +	 * match the given {@link Profiles} predicate., +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * string may contain a simple profile name (for example {@code "p1"}) or a profile, +++ b/spring-core/src/main/java/org/springframework/core/env/Environment.java, +	 * i.e. the method will return {@code true} if the given profile is <em>not</em> active., +	 * For example, {@code env.acceptsProfiles("p1", "!p2")} will return {@code true} if, +	 * profile 'p1' is active or 'p2' is not active., +	 * or if any profile is {@code null}, empty, or whitespace only, +	 * Return whether the {@linkplain #getActiveProfiles() active profiles}, +	 * match the given {@link Profiles} predicate., +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, + * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles), + * accepted} by an {@link Environment}., + *, + * <p>May be implemented directly or, more usually, created using the, + * {@link #of(String...) of(...)} factory method., +	 * Test if this profile predicate matches against the given active profiles, +	 * predicate., +	 * @param activeProfiles predicate that tests whether a given profile is, +	 * currently active, +	 * profile strings., +	 *, +	 * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}, +	 * if any one of the given profile strings matches., +	 *, +	 * <p>A profile string may contain a simple profile name (for example, +	 * {@code "production"}) or a profile expression. A profile expression allows, +	 * for more complicated profile logic to be expressed, for example, +	 *, +	 * <p>The following operators are supported in profile expressions:, +	 * <li>{@code |} - A logical <em>or</em> of the profiles</li>, +	 * </ul>, +	 *, +	 * <p>Please note that the {@code &} and {@code |} operators may not be mixed, +	 * without using parentheses. For example {@code "a & b | c"} is not a valid, +	 * expression; it must be expressed as {@code "(a & b) | c"} or, +	 * {@code "a & (b | c)"}., +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * string may contain a simple profile name (for example {@code "p1"}) or a profile, +++ b/spring-core/src/main/java/org/springframework/core/env/Environment.java, +	 * i.e. the method will return {@code true} if the given profile is <em>not</em> active., +	 * For example, {@code env.acceptsProfiles("p1", "!p2")} will return {@code true} if, +	 * profile 'p1' is active or 'p2' is not active., +	 * or if any profile is {@code null}, empty, or whitespace only, +	 * Return whether the {@linkplain #getActiveProfiles() active profiles}, +	 * match the given {@link Profiles} predicate., +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, + * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles), + * accepted} by an {@link Environment}., + *, + * <p>May be implemented directly or, more usually, created using the, + * {@link #of(String...) of(...)} factory method., +	 * Test if this profile predicate matches against the given active profiles, +	 * predicate., +	 * @param activeProfiles predicate that tests whether a given profile is, +	 * currently active, +	 * profile strings., +	 *, +	 * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}, +	 * if any one of the given profile strings matches., +	 *, +	 * <p>A profile string may contain a simple profile name (for example, +	 * {@code "production"}) or a profile expression. A profile expression allows, +	 * for more complicated profile logic to be expressed, for example, +	 *, +	 * <p>The following operators are supported in profile expressions:, +	 * <li>{@code |} - A logical <em>or</em> of the profiles</li>, +	 * </ul>, +	 *, +	 * <p>Please note that the {@code &} and {@code |} operators may not be mixed, +	 * without using parentheses. For example {@code "a & b | c"} is not a valid, +	 * expression; it must be expressed as {@code "(a & b) | c"} or, +	 * {@code "a & (b | c)"}., +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, + * @since 5.1, +		Assert.hasText(expression, () ->, +				() -> "Malformed profile expression [" + expression + "]");, +	private enum Operator {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * string may contain a simple profile name (for example {@code "p1"}) or a profile, +++ b/spring-core/src/main/java/org/springframework/core/env/Environment.java, +	 * i.e. the method will return {@code true} if the given profile is <em>not</em> active., +	 * For example, {@code env.acceptsProfiles("p1", "!p2")} will return {@code true} if, +	 * profile 'p1' is active or 'p2' is not active., +	 * or if any profile is {@code null}, empty, or whitespace only, +	 * Return whether the {@linkplain #getActiveProfiles() active profiles}, +	 * match the given {@link Profiles} predicate., +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, + * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles), + * accepted} by an {@link Environment}.]