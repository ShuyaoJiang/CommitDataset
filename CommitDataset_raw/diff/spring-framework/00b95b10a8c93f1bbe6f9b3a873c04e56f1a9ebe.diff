[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, + * <li>{@link Rendering} -- use case driven API for view resolution</li>, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, + * <li>{@link Rendering} -- use case driven API for view resolution</li>, +++ b/src/docs/asciidoc/web/webflux.adoc, +, +, +[[webflux-web-handler-api-special-beans]], +==== Special bean types, +, +==== Form data, +==== Multipart data, +appropriate responses. By "special beans" we mean Spring-managed, Object instances that, +implement WebFlux framework contracts. Those usually come with built-in contracts but, +you can customize their properties, extend then, or replaced., +, +The table below lists the special beans detected by the `DispatcherHandler`. Note that, +there are also some other beans detected at a lower level, see, +<<webflux-web-handler-api-special-beans>> in the Web Handler API., +  The main `HandlerMapping` implementations are `RequestMappingHandlerMapping` for, +  `@RequestMapping` annotated methods, `RouterFunctionMapping` for functional endpoint, +  routes, and `SimpleUrlHandlerMapping` for explicit registrations of URI path patterns, +  and ``WebHandler``'s., +See <<webflux-resulthandling>>., +=== WebFlux Config, +Applications can declare the infrastructure beans listed under, +<<webflux-web-handler-api-special-beans,Web Handler API>> and, +<<webflux-special-bean-types,DispatcherHandler>> that are required to process requests., +However in most cases the <<webflux-config>> is the best starting point. It declares the, +required beans and provides a higher level configuration callback API to customize it., +, +[NOTE], +====, +Spring Boot relies on the WebFlux config to configure Spring WebFlux and also provides, +many extra convenient options., +====, +[[webflux-resulthandling]], +=== Result Handling, +, +When `DispatcherHandler` needs to process the return value from a handler, it finds a, +`HandlerResultHandler` that support it and invokes it. The available implementations are, +listed below with their default order (all are declared in the <<webflux-config>>):, +, +* `ResponseEntityResultHandler` -- handles `ResponseEntity` return values typically, +returned from annotated controllers. The order is set to 0 since it safely matches return, +values by type., +* `ServerResponseResultHandler` -- supports `ServerResponse` return values typically, +returned from functional endpoints. The order is set to 0 since it safely matches return, +values by type., +* `ResponseBodyResultHandler` -- handles return values from `@ResponseBody` methods or, +`@RestController` classes. The order is set to 100, i.e. after result handlers that, +check for a specific type., +* `ViewResolutionResultHandler` -- performs the <<webflux-viewresolution>> algorithm for, +HTML template rendering. The order is set to `Ordered.LOWEST_PRECEDENCE` since it, +supports several specific types, e.g. `String`, `Map`, `Rendering`, and others, but will, +also treat any other Object as a model attribute. This is why it needs to be last in, +the order., +, +, +, +[[webflux-viewresolution]], +=== View Resolution, +[.small]#<<web.adoc#mvc-viewresolver,Same in Spring MVC>>#, +, +View resolution enables rendering to a browser with an HTML template and a model without, +tying you to a specific view technology. In Spring WebFlux, view resolution is, +supported through the `ViewResolutionResultHandler` that relies on a list of, +``ViewResolver``'s to map a String-based view name to a `View` to render the response, +with. The <<webflux-config-view-resolvers,WebFlux Config>> can be used to configure the, +view resolvers to use., +, +The `HandlerResult` passed into `ViewResolutionResultHandler` contains the return value, +along with a map of attributes (i.e. the model) from the handler. The return value is, +then processed as one of the following:, +, +* `String`, `CharSequence` -- a logical view name to be resolved to a `View` through, +the list of configured ``ViewResolver``'s., +* `void` or no value (e.g. model attribute returned) -- select default view name based on, +the request path minus the leading and trailing slash, and the resolved to a `View`., +* `Model`, `Map` -- attributes to be added to the model., +* {api-spring-framework}/web/reactive/result/view/Rendering.html[Rendering] -- API for, +view resolution scenarios; easiest to explore the options with code completion., +* Other -- attribute to be added to the model; the name of the attribute is derived using, +Class name conventions, or from a handler method `@ModelAttribute` annotation if present., +, +The model can contain asynchronous, reactive types (e.g. from Reactor, RxJava). Prior, +to rendering, `AbstractView` resolves such model attributes into their concrete values, +and updates the model. Single-value reactive types are resolved to a single, +value, or no value (if empty) while multi-value reactive types, e.g. `Flux<T>` are, +collected and resolved to `List<T>`., +, +, +[[webflux-redirecting-redirect-prefix]], +==== Redirect, +[.small]#<<web.adoc#mvc-redirecting-redirect-prefix,Same in Spring MVC>>#, +, +The special `redirect:` prefix in a view name allows you to perform a redirect. The, +`UrlBasedViewResolver` (and sub-classes) recognize this as an instruction that a, +redirect is needed. The rest of the view name is the redirect URL., +]