[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if, +	 * not found, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if, +	 * not found, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if, +	 * not found, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if, +	 * not found, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if, +	 * not found, +	 * @return a {@link MultiValueMap} containing the annotation attributes, +	 * from all annotations found, or {@code null} if not found, +	 * @param classValuesAsString whether to convert Class references into, +	 * Strings or to preserve them as Class references, +	 * @param nestedAnnotationsAsMap whether to convert nested Annotation, +	 * instances into {@link AnnotationAttributes} maps or to preserve them, +	 * as Annotation instances, +	 * @return a {@link MultiValueMap} containing the annotation attributes, +	 * from all annotations found, or {@code null} if not found, +, +, +	 * @return the result of the processor, potentially {@code null}, +			throw new IllegalStateException("Failed to introspect annotations on " + element, ex);, +	 * <p>The {@code metaDepth} parameter is explained in the, +	 * {@link Processor#process process()} method of the {@link Processor}, +	 * API., +	 * @param metaDepth the meta-depth of the annotation, +	 * @return the result of the processor, potentially {@code null}, +	 * @return the result of the processor, potentially {@code null}, +			throw new IllegalStateException("Failed to introspect annotations on " + element, ex);, +	 * Perform the search algorithm for the {@link #processWithFindSemantics}, +	 * method, avoiding endless recursion by tracking which annotated elements, +	 * have already been <em>visited</em>., +	 * <p>The {@code metaDepth} parameter is explained in the, +	 * {@link Processor#process process()} method of the {@link Processor}, +	 * API., +	 * @param metaDepth the meta-depth of the annotation, +	 * @return the result of the processor, potentially {@code null}, +	 * Callback interface that is used to process a target annotation (or, +	 * multiple instances of the target annotation) that has been found by, +	 * the currently executing search and to post-process the result as the, +	 * search algorithm goes back down the annotation hierarchy from the, +	 * target annotation to the initial {@link AnnotatedElement} that was, +	 * supplied to the search algorithm., +	 * @param <T> the type of result returned by the processor, +		 * Process an actual target annotation once it has been found by, +		 * annotation relative to the first annotated element in the, +		 * annotation hierarchy. For example, an annotation that is, +		 * <em>present</em> on a non-annotation element will have a depth, +		 * of 0; a meta-annotation will have a depth of 1; and a, +		 * meta-meta-annotation will have a depth of 2; etc., +		 * @param metaDepth the meta-depth of the annotation, +		 * searching for additional target annotations, +		 * {@link AnnotatedElement} but below a target annotation found by]