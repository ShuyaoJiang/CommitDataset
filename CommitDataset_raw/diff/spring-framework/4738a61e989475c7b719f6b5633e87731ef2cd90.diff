[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +	private final RequestBodyPublisher bodyPublisher;, +			DataBufferFactory bufferFactory, int bufferSize) throws IOException {, +, +		// Tomcat expects ReadListener registration on initial thread, +		ServletInputStream inputStream = request.getInputStream();, +		this.bodyPublisher = new RequestBodyPublisher(inputStream, bufferFactory, bufferSize);, +		this.bodyPublisher.registerReadListener();, +, +		return Flux.from(this.bodyPublisher);, +			bodyPublisher.onError(ex);, +			bodyPublisher.onError(event.getThrowable());, +			this.inputStream.setReadListener(new RequestBodyPublisherReadListener());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +	private final RequestBodyPublisher bodyPublisher;, +			DataBufferFactory bufferFactory, int bufferSize) throws IOException {, +, +		// Tomcat expects ReadListener registration on initial thread, +		ServletInputStream inputStream = request.getInputStream();, +		this.bodyPublisher = new RequestBodyPublisher(inputStream, bufferFactory, bufferSize);, +		this.bodyPublisher.registerReadListener();, +, +		return Flux.from(this.bodyPublisher);, +			bodyPublisher.onError(ex);, +			bodyPublisher.onError(event.getThrowable());, +			this.inputStream.setReadListener(new RequestBodyPublisherReadListener());, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpRequestTests.java, +import java.io.ByteArrayInputStream;, +import javax.servlet.ReadListener;, +import javax.servlet.ServletInputStream;, +import org.springframework.mock.web.test.DelegatingServletInputStream;, +		HttpServletRequest request = new MockHttpServletRequest("GET", path) {, +			@Override, +			public ServletInputStream getInputStream() {, +				return new TestServletInputStream();, +			}, +		};, +	private static class TestServletInputStream extends DelegatingServletInputStream {, +, +		public TestServletInputStream() {, +			super(new ByteArrayInputStream(new byte[0]));, +		}, +, +		@Override, +		public void setReadListener(ReadListener readListener) {, +			// Ignore, +		}, +	}]