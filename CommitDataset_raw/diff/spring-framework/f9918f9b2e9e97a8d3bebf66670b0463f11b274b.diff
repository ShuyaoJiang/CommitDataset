[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, + * Annotation indicating that a class is a "Java Configuration" class, meaning that it, + * exposes one or more {@link Bean} methods. Holds similar information to that held in the, + * default values of a bean factory; can generally be thought of as the JavaConfig, + * equivalent of XML's 'beans' root element., + * <p>, + * Note however that the information here is not used to populate the defaults of the owning, + * bean factory, which would affect other configurations. In the style of the Java, + * configuration mechanism generally, each Java configuration class is kept isolated., + * </p>, + * <p>, + * Configuration-annotated classes are also candidates for component scanning thanks to the, + * fact that this annotation is meta-annotated with {@link Component @Component}., + * </p>, +	 * Configuration name. Allow different variants, such as test, production etc. Default, +	 * will always match., +	 * , +	 * Do we check {@link Required @Required} methods to make sure they've been called?, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, + * Annotation indicating that a class is a "Java Configuration" class, meaning that it, + * exposes one or more {@link Bean} methods. Holds similar information to that held in the, + * default values of a bean factory; can generally be thought of as the JavaConfig, + * equivalent of XML's 'beans' root element., + * <p>, + * Note however that the information here is not used to populate the defaults of the owning, + * bean factory, which would affect other configurations. In the style of the Java, + * configuration mechanism generally, each Java configuration class is kept isolated., + * </p>, + * <p>, + * Configuration-annotated classes are also candidates for component scanning thanks to the, + * fact that this annotation is meta-annotated with {@link Component @Component}., + * </p>, +	 * Configuration name. Allow different variants, such as test, production etc. Default, +	 * will always match., +	 * , +	 * Do we check {@link Required @Required} methods to make sure they've been called?, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/ConfigurationClass.java, + * Abstract representation of a user-defined {@link Configuration @Configuration} class., + * Includes a set of Bean methods, AutoBean methods, ExternalBean methods, ExternalValue, + * methods, etc. Includes all such methods defined in the ancestry of the class, in a, + * 'flattened-out' manner. Note that each BeanMethod representation does still contain, + * source information about where it was originally detected (for the purpose of tooling, + * with Spring IDE)., + * <p>, + * Like the rest of the {@link org.springframework.config.java.model model} package, this, + * class follows the fluent interface / builder pattern such that a model can be built up, + * easily by method chaining., + * </p>, +	public ConfigurationClass() {, +	}, +		@Configuration, +		class Prototype {, +		}, +	 * @param id Bean name/id (if any) of this configuration class. used only in the case of, +	 *        XML integration where {@link Configuration} beans may have a user-specified, +	 *        id., +	 * @param metadata Configuration annotation resident on this class. May be null, +	 *        indicating that the user specified this class to be processed but failed to, +	 *        properly annotate it., +		return format("%s; modifiers=%d; methods=%s", super.toString(), modifiers, methods);, +			        + "Update the class definition to continue.", getSimpleName(), Configuration.class, +			        .getSimpleName());, +	 * Error raised when a Bean marked as 'allowOverriding=false' is attempted to be, +	 * overridden by another bean definition., +		 *        that the violating class is unknown or that there is no class to speak of, +		 *        (in the case of an XML bean definition doing the illegal overriding), +		 * @param finalMethodInQuestion the method that has been marked, +		 *        'allowOverriding=false', +		public IllegalBeanOverrideError(ConfigurationClass violatingClass, ModelMethod finalMethodInQuestion) {, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, + * Annotation indicating that a class is a "Java Configuration" class, meaning that it, + * exposes one or more {@link Bean} methods. Holds similar information to that held in the, + * default values of a bean factory; can generally be thought of as the JavaConfig, + * equivalent of XML's 'beans' root element., + * <p>, + * Note however that the information here is not used to populate the defaults of the owning, + * bean factory, which would affect other configurations. In the style of the Java, + * configuration mechanism generally, each Java configuration class is kept isolated., + * </p>, + * <p>, + * Configuration-annotated classes are also candidates for component scanning thanks to the, + * fact that this annotation is meta-annotated with {@link Component @Component}., + * </p>, +	 * Configuration name. Allow different variants, such as test, production etc. Default, +	 * will always match., +	 * , +	 * Do we check {@link Required @Required} methods to make sure they've been called?, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/ConfigurationClass.java, + * Abstract representation of a user-defined {@link Configuration @Configuration} class., + * Includes a set of Bean methods, AutoBean methods, ExternalBean methods, ExternalValue, + * methods, etc. Includes all such methods defined in the ancestry of the class, in a, + * 'flattened-out' manner. Note that each BeanMethod representation does still contain, + * source information about where it was originally detected (for the purpose of tooling, + * with Spring IDE)., + * <p>, + * Like the rest of the {@link org.springframework.config.java.model model} package, this, + * class follows the fluent interface / builder pattern such that a model can be built up, + * easily by method chaining., + * </p>, +	public ConfigurationClass() {]