[+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +	 * Whether this status code is in the HTTP series, +	 * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or, +	 * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}., +	 * This is a shortcut for checking the value of {@link #series()}., +	 */, +	public boolean isError() {, +		return is4xxClientError() || is5xxServerError();, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +	 * Whether this status code is in the HTTP series, +	 * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or, +	 * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}., +	 * This is a shortcut for checking the value of {@link #series()}., +	 */, +	public boolean isError() {, +		return is4xxClientError() || is5xxServerError();, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.ArrayList;, +import java.util.Optional;, +import java.util.function.Predicate;, +		private static final Function<ClientResponse, Optional<? extends Throwable>> DEFAULT_STATUS_HANDLER =, +				clientResponse -> {, +					HttpStatus statusCode = clientResponse.statusCode();, +					if (statusCode.isError()) {, +						return Optional.of(new WebClientException(, +								"ClientResponse has erroneous status code: " + statusCode.value() +, +										" " + statusCode.getReasonPhrase()));, +					} else {, +						return Optional.empty();, +					}, +				};, +, +		private List<Function<ClientResponse, Optional<? extends Throwable>>> statusHandlers =, +				new ArrayList<>(1);, +, +			this.statusHandlers.add(DEFAULT_STATUS_HANDLER);, +		}, +, +		@Override, +		public ResponseSpec onStatus(Predicate<HttpStatus> statusPredicate,, +				Function<ClientResponse, ? extends Throwable> exceptionFunction) {, +, +			Assert.notNull(statusPredicate, "'statusPredicate' must not be null");, +			Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null");, +, +			if (this.statusHandlers.size() == 1 && this.statusHandlers.get(0) == DEFAULT_STATUS_HANDLER) {, +				this.statusHandlers.clear();, +			}, +, +			Function<ClientResponse, Optional<? extends Throwable>> statusHandler =, +					clientResponse -> {, +						if (statusPredicate.test(clientResponse.statusCode())) {, +							return Optional.of(exceptionFunction.apply(clientResponse));, +						}, +						else {, +							return Optional.empty();, +						}, +					};, +			this.statusHandlers.add(statusHandler);, +, +			return this;, +				Function<Throwable, T> errorFunction) {, +			return this.statusHandlers.stream(), +					.map(statusHandler -> statusHandler.apply(response)), +					.filter(Optional::isPresent), +					.findFirst(), +					.map(Optional::get), +					.map(errorFunction::apply), +					.orElse(response.body(extractor));, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +	 * Whether this status code is in the HTTP series, +	 * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or, +	 * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}., +	 * This is a shortcut for checking the value of {@link #series()}., +	 */, +	public boolean isError() {, +		return is4xxClientError() || is5xxServerError();, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.ArrayList;, +import java.util.Optional;, +import java.util.function.Predicate;, +		private static final Function<ClientResponse, Optional<? extends Throwable>> DEFAULT_STATUS_HANDLER =, +				clientResponse -> {, +					HttpStatus statusCode = clientResponse.statusCode();, +					if (statusCode.isError()) {, +						return Optional.of(new WebClientException(, +								"ClientResponse has erroneous status code: " + statusCode.value() +, +										" " + statusCode.getReasonPhrase()));, +					} else {, +						return Optional.empty();, +					}]