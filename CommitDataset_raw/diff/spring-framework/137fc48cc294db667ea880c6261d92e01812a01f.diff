[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.ipc.netty.http.client.HttpClient;, + * Reactor-Netty implementation of {@link ClientHttpConnector}., +		return this.httpClient, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.ipc.netty.http.client.HttpClient;, + * Reactor-Netty implementation of {@link ClientHttpConnector}., +		return this.httpClient, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +		Publisher<Publisher<ByteBuf>> byteBufs = Flux.from(body).map(ReactorClientHttpRequest::toByteBufs);, +		return Flux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf);, +		getHeaders().entrySet().forEach(e -> this.httpRequest.requestHeaders().set(e.getKey(), e.getValue()));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		return (this.state.get() != State.NEW);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpConnector.java, + * Copyright 2002-2017 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +, +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.ipc.netty.http.client.HttpClient;, + * Reactor-Netty implementation of {@link ClientHttpConnector}., +		return this.httpClient, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +		Publisher<Publisher<ByteBuf>> byteBufs = Flux.from(body).map(ReactorClientHttpRequest::toByteBufs);, +		return Flux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf);, +		getHeaders().entrySet().forEach(e -> this.httpRequest.requestHeaders().set(e.getKey(), e.getValue()));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, + * Copyright 2002-2017 the original author or authors., +		this.response.responseHeaders().entries(), +, +				"request=[" + this.response.method().name() + " " + this.response.uri() + "]," +, +				"status=" + getStatusCode() + '}';]