[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import java.lang.annotation.Annotation;, +	 * <p>Optional semantics are derived from Java 8's {@link java.util.Optional},, +	 * any variant of a parameter-level {@code Nullable} annotation (such as from, +	 * JSR-305 or the FindBugs set of annotations), or a language-level nullable, +	 * type declaration in Kotlin., +			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||, +	 * Check whether the underlying field is annotated with any variant of a, +	 * {@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or, +	 * {@code edu.umd.cs.findbugs.annotations.Nullable}., +	 */, +	private boolean hasNullableAnnotation() {, +		for (Annotation ann : getAnnotations()) {, +			if ("Nullable".equals(ann.annotationType().getSimpleName())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import java.lang.annotation.Annotation;, +	 * <p>Optional semantics are derived from Java 8's {@link java.util.Optional},, +	 * any variant of a parameter-level {@code Nullable} annotation (such as from, +	 * JSR-305 or the FindBugs set of annotations), or a language-level nullable, +	 * type declaration in Kotlin., +			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||, +	 * Check whether the underlying field is annotated with any variant of a, +	 * {@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or, +	 * {@code edu.umd.cs.findbugs.annotations.Nullable}., +	 */, +	private boolean hasNullableAnnotation() {, +		for (Annotation ann : getAnnotations()) {, +			if ("Nullable".equals(ann.annotationType().getSimpleName())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/InjectAnnotationBeanPostProcessorTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +	public void testNullableFieldInjectionWithBeanAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableFieldInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +, +		NullableFieldInjectionBean bean = (NullableFieldInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testNullableFieldInjectionWithBeanNotAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableFieldInjectionBean.class));, +, +		NullableFieldInjectionBean bean = (NullableFieldInjectionBean) bf.getBean("annotatedBean");, +		assertNull(bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testNullableMethodInjectionWithBeanAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableMethodInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +, +		NullableMethodInjectionBean bean = (NullableMethodInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testNullableMethodInjectionWithBeanNotAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableMethodInjectionBean.class));, +, +		NullableMethodInjectionBean bean = (NullableMethodInjectionBean) bf.getBean("annotatedBean");, +		assertNull(bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	@Retention(RetentionPolicy.RUNTIME)]