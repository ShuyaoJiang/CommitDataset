[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.net.InetSocketAddress;, +		URI uri = new URI(this.channel.uri());, +		InetSocketAddress remoteAddress = this.channel.remoteAddress();, +		return new URI(, +				uri.getScheme(),, +				uri.getUserInfo(),, +				(remoteAddress != null ? remoteAddress.getHostString() : null),, +				(remoteAddress != null ? remoteAddress.getPort() : -1),, +				uri.getPath(),, +				uri.getQuery(),, +				uri.getFragment());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.net.InetSocketAddress;, +		URI uri = new URI(this.channel.uri());, +		InetSocketAddress remoteAddress = this.channel.remoteAddress();, +		return new URI(, +				uri.getScheme(),, +				uri.getUserInfo(),, +				(remoteAddress != null ? remoteAddress.getHostString() : null),, +				(remoteAddress != null ? remoteAddress.getPort() : -1),, +				uri.getPath(),, +				uri.getQuery(),, +				uri.getFragment());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +import java.net.InetSocketAddress;, +		URI uri = new URI(this.request.getUri());, +		InetSocketAddress remoteAddress = this.getHeaders().getHost();, +		return new URI(, +				uri.getScheme(),, +				uri.getUserInfo(),, +				(remoteAddress != null ? remoteAddress.getHostString() : null),, +				(remoteAddress != null ? remoteAddress.getPort() : -1),, +				uri.getPath(),, +				uri.getQuery(),, +				uri.getFragment());, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.net.InetSocketAddress;, +		URI uri = new URI(this.channel.uri());, +		InetSocketAddress remoteAddress = this.channel.remoteAddress();, +		return new URI(, +				uri.getScheme(),, +				uri.getUserInfo(),, +				(remoteAddress != null ? remoteAddress.getHostString() : null),, +				(remoteAddress != null ? remoteAddress.getPort() : -1),, +				uri.getPath(),, +				uri.getQuery(),, +				uri.getFragment());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +import java.net.InetSocketAddress;, +		URI uri = new URI(this.request.getUri());, +		InetSocketAddress remoteAddress = this.getHeaders().getHost();, +		return new URI(, +				uri.getScheme(),, +				uri.getUserInfo(),, +				(remoteAddress != null ? remoteAddress.getHostString() : null),, +				(remoteAddress != null ? remoteAddress.getPort() : -1),, +				uri.getPath(),, +				uri.getQuery(),, +				uri.getFragment());, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpRequestIntegrationTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.server.reactive;, +, +import java.net.URI;, +, +import static org.junit.Assert.*;, +import org.junit.Test;, +import reactor.core.publisher.Mono;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.RequestEntity;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.client.RestTemplate;, +, +public class ServerHttpRequestIntegrationTests extends AbstractHttpHandlerIntegrationTests {, +, +	@Override, +	protected CheckRequestHandler createHttpHandler() {, +		return new CheckRequestHandler();, +	}, +, +	@Test]