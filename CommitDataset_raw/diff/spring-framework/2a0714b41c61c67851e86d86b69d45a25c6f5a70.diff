[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java, + * Copyright 2002-2012 the original author or authors., +			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java, + * Copyright 2002-2012 the original author or authors., +			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex);, +++ b/org.springframework.transaction/src/main/java/org/springframework/dao/EmptyResultDataAccessException.java, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Constructor for EmptyResultDataAccessException., +	 * @param msg the detail message, +	 * @param expectedSize the expected result size, +	 * @param ex the wrapped exception, +	 */, +	public EmptyResultDataAccessException(String msg, int expectedSize, Throwable ex) {, +		super(msg, expectedSize, 0, ex);, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java, + * Copyright 2002-2012 the original author or authors., +			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex);, +++ b/org.springframework.transaction/src/main/java/org/springframework/dao/EmptyResultDataAccessException.java, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Constructor for EmptyResultDataAccessException., +	 * @param msg the detail message, +	 * @param expectedSize the expected result size, +	 * @param ex the wrapped exception, +	 */, +	public EmptyResultDataAccessException(String msg, int expectedSize, Throwable ex) {, +		super(msg, expectedSize, 0, ex);, +	}, +, +++ b/org.springframework.transaction/src/main/java/org/springframework/dao/IncorrectResultSizeDataAccessException.java, + * Copyright 2002-2012 the original author or authors., +	 * @param ex the wrapped exception, +	/**, +	 * Constructor for IncorrectResultSizeDataAccessException., +	 * @param msg the detail message, +	 * @param expectedSize the expected result size, +	 * @param actualSize the actual result size (or -1 if unknown), +	 * @param ex the wrapped exception, +	 */, +	public IncorrectResultSizeDataAccessException(String msg, int expectedSize, int actualSize, Throwable ex) {, +		super(msg, ex);, +		this.expectedSize = expectedSize;, +		this.actualSize = actualSize;, +	}, +, +		return this.expectedSize;, +		return this.actualSize;]