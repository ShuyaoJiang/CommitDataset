[+++ b/src/asciidoc/index.adoc, +[[websocket-fallback-sockjs-overview]], +==== Overview of SockJS, +, +The goal of SockJS is to let applications use a WebSocket API but fall back to, +non-WebSocket alternatives when necessary at runtime, i.e. without the need to, +change application code., +, +SockJS consists of:, +, +* The https://github.com/sockjs/sockjs-protocol[SockJS protocol], +defined in the form of executable, +http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html[narrated tests]., +* The https://github.com/sockjs/sockjs-client[SockJS client] - a JavaScript library for use in browsers., +* SockJS server implementations including one in the Spring Framework `spring-websocket` module., +, +SockJS is designed for use in browsers. It goes to great lengths, +to support a wide range of browser versions using a variety of techniques., +For the full list of SockJS transport types and browsers see the, +https://github.com/sockjs/sockjs-client[SockJS client] page. Transports, +fall in 3 general categories: WebSocket, HTTP Streaming, and HTTP Long Polling., +For an overview of these categories see, +https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/[this blog post]., +, +The SockJS client begins by sending `"GET /info"` to, +obtain basic information from the server. After that it must decide what transport, +to use. If possible WebSocket is used. If not, in most browsers, +there is at least one HTTP streaming option and if not then HTTP (long), +polling is used., +, +All transport requests have the following URL structure:, +----, +http://host:port/myApp/myEndpoint/{server-id}/{session-id}/{transport}, +----, +, +* `{server-id}` - useful for routing requests in a cluster but not used otherwise., +* `{session-id}` - correlates HTTP requests belonging to a SockJS session., +* `{transport}` - indicates the transport type, e.g. "websocket", "xhr-streaming", etc., +, +The WebSocket transport needs only a single HTTP request to do the WebSocket handshake., +All messages thereafter are exchanged on that socket., +, +HTTP transports require more requests. Ajax/XHR streaming for example relies on, +one long-running request for server-to-client messages and additional HTTP POST, +requests for client-to-server messages. Long polling is similar except it, +ends the current request after each server-to-client send., +, +SockJS adds minimal message framing. For example the server sends the letter +o+, +("open" frame) initially, messages are sent as +a["message1","message2"]+, +(JSON-encoded array), the letter +h+ ("heartbeat" frame) if no messages flow, +for 25 seconds by default, and the letter +c+ ("close" frame) to close the session., +, +To learn more run an example in a browser and watch HTTP requests., +The SockJS client allows fixing the list of transports so it is possible to, +see each transport one at a time. The SockJS client also provides a debug flag, +which enables helpful messages in the browser console. On the server side enable, +TRACE logging for `org.springframework.web.socket`., +For even more detail refer to the SockJS protocol, +http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html[narrated test]., +==== Heartbeat Messages, +==== Servlet 3 Async Requests, +==== CORS Headers for SockJS Requests, +polling transports. Therefore CORS headers are added automatically unless the, +presence of CORS headers in the response is detected. So if an application is, +already configured to provide CORS support, e.g. through a Servlet Filter,, +Spring's SockJsService will skip this part., +The following is the list of headers and values expected by SockJS:, +For the exact implementation see `addCorsHeaders` in `AbstractSockJsService` as well, +as the `TransportType` enum in the source code., +Alternatively if the CORS configuration allows it consider excluding URLs with the, +SockJS endpoint prefix thus letting Spring's SockJsService handle it.]