[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +						// Candidate class is an ImportSelector -> delegate to it to determine imports, +						// Candidate class is an ImportBeanDefinitionRegistrar -> delegate to it to register additional bean definitions, +						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -> process it as a @Configuration class, +						if (!this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +						// Candidate class is an ImportSelector -> delegate to it to determine imports, +						// Candidate class is an ImportBeanDefinitionRegistrar -> delegate to it to register additional bean definitions, +						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -> process it as a @Configuration class, +						if (!this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {, +			}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +	@Test, +	public void metadataFromImportsOneThenTwo() {, +		AnnotationMetadata importMetadata = new AnnotationConfigApplicationContext(, +				ConfigurationOne.class, ConfigurationTwo.class), +				.getBean(MetadataHolder.class).importMetadata;, +		assertEquals(ConfigurationOne.class,, +				((StandardAnnotationMetadata) importMetadata).getIntrospectedClass());, +	}, +, +	@Test, +	public void metadataFromImportsTwoThenOne() {, +		AnnotationMetadata importMetadata = new AnnotationConfigApplicationContext(, +				ConfigurationTwo.class, ConfigurationOne.class), +				.getBean(MetadataHolder.class).importMetadata;, +		assertEquals(ConfigurationOne.class,, +				((StandardAnnotationMetadata) importMetadata).getIntrospectedClass());, +	}, +, +, +	static class BPP implements BeanPostProcessor, BeanFactoryAware {, +, +		@Override, +		public void setBeanFactory(BeanFactory beanFactory) {, +		}, +, +	@EnableSomeConfiguration("bar"), +	@Configuration, +	public static class ConfigurationOne {, +	}, +, +, +	@Conditional(NeverMatchingCondition.class), +	@EnableSomeConfiguration("foo"), +	@Configuration, +	public static class ConfigurationTwo {, +	}, +, +, +	@Import(SomeConfiguration.class), +	@Target(ElementType.TYPE), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface EnableSomeConfiguration {, +, +		String value() default "";, +	}, +, +, +	@Configuration, +	public static class SomeConfiguration implements ImportAware {, +, +		private AnnotationMetadata importMetadata;, +, +		@Override, +		public void setImportMetadata(AnnotationMetadata importMetadata) {, +			this.importMetadata = importMetadata;, +		}, +, +		@Bean, +		public MetadataHolder holder() {, +			return new MetadataHolder(this.importMetadata);, +		}, +	}, +, +, +	public static class MetadataHolder {, +, +		private final AnnotationMetadata importMetadata;, +, +		public MetadataHolder(AnnotationMetadata importMetadata) {, +			this.importMetadata = importMetadata;, +		}, +	}, +, +, +	private static final class NeverMatchingCondition implements ConfigurationCondition {, +, +		@Override, +		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {, +			return false;, +		}, +, +		@Override, +		public ConfigurationPhase getConfigurationPhase() {]