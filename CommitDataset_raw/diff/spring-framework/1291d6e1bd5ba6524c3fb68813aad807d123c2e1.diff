[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +		if (returnValue != null && returnValue instanceof CharSequence) {, +			returnValueClass = String.class;, +			returnValueType = String.class;, +			returnValue = (T) returnValue.toString();, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +		if (returnValue != null && returnValue instanceof CharSequence) {, +			returnValueClass = String.class;, +			returnValueType = String.class;, +			returnValue = (T) returnValue.toString();, +		}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.ResponseEntity;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +	// SPR-13423, +, +	@Test, +	public void handleReturnValueCharSequence() throws Exception {, +		List<HttpMessageConverter<?>>converters = new ArrayList<>();, +		converters.add(new ByteArrayHttpMessageConverter());, +		converters.add(new StringHttpMessageConverter());, +, +		Method method = getClass().getDeclaredMethod("handle");, +		MethodParameter returnType = new MethodParameter(method, -1);, +		ResponseEntity<StringBuilder> returnValue = ResponseEntity.ok(new StringBuilder("Foo"));, +, +		HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters);, +		processor.handleReturnValue(returnValue, returnType, mavContainer, webRequest);, +, +		assertEquals("text/plain;charset=ISO-8859-1", servletResponse.getHeader("Content-Type"));, +		assertEquals("Foo", servletResponse.getContentAsString());, +	}, +, +, +	ResponseEntity<CharSequence> handle() {, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +		if (returnValue != null && returnValue instanceof CharSequence) {, +			returnValueClass = String.class;, +			returnValueType = String.class;, +			returnValue = (T) returnValue.toString();, +		}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.ResponseEntity;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +	// SPR-13423, +, +	@Test, +	public void handleReturnValueCharSequence() throws Exception {, +		List<HttpMessageConverter<?>>converters = new ArrayList<>();, +		converters.add(new ByteArrayHttpMessageConverter());, +		converters.add(new StringHttpMessageConverter());, +, +		Method method = getClass().getDeclaredMethod("handle");, +		MethodParameter returnType = new MethodParameter(method, -1);, +		ResponseEntity<StringBuilder> returnValue = ResponseEntity.ok(new StringBuilder("Foo"));, +, +		HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters);, +		processor.handleReturnValue(returnValue, returnType, mavContainer, webRequest);, +, +		assertEquals("text/plain;charset=ISO-8859-1", servletResponse.getHeader("Content-Type"));, +		assertEquals("Foo", servletResponse.getContentAsString());, +	}, +, +, +	ResponseEntity<CharSequence> handle() {, +		return null;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +	// SPR-13423, +	, +	@Test, +	public void handleReturnValueCharSequence() throws Exception {, +		List<HttpMessageConverter<?>>converters = new ArrayList<>();, +		converters.add(new ByteArrayHttpMessageConverter());, +		converters.add(new StringHttpMessageConverter());, +]