[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, + * Non-blocking, reactive client for testing web servers. It uses the reactive, + * {@link WebClient} internally to perform requests and provides a fluent API, + * to verify responses., + * <p>{@code WebTestClient} can connect to any server over an HTTP connection., + * It can also bind directly to WebFlux applications using mock request and, + * response objects, without the need for an HTTP server., + *, + * <p>See the static {@code bindToXxx} entry points for creating an instance., +	 * Use this server setup to test one `@Controller` at a time., +	 * This option loads the default configuration of, +	 * {@link org.springframework.web.reactive.config.EnableWebFlux @EnableWebFlux}., +	 * There are builder methods to customize the Java config. The resulting, +	 * WebFlux application will be tested without an HTTP server using a mock, +	 * request and response., +	 * @param controllers one or more controller instances to tests, +	 * @return chained API to customize server and client config; use, +	 * {@link MockServerSpec#configureClient()} to transition to client config, +	 * Use this option to set up a server from a {@link RouterFunction}., +	 * Internally the provided configuration is passed to, +	 * {@code RouterFunctions#toWebHandler}. The resulting WebFlux application, +	 * will be tested without an HTTP server using a mock request and response., +	 * @return chained API to customize server and client config; use, +	 * {@link MockServerSpec#configureClient()} to transition to client config, +	 * Use this option to setup a server from the Spring configuration of your, +	 * application, or some subset of it. Internally the provided configuration, +	 * is passed to {@code WebHttpHandlerBuilder} to set up the request, +	 * processing chain. The resulting WebFlux application will be tested, +	 * without an HTTP server using a mock request and response., +	 * <p>Consider using the TestContext framework and, +	 * {@link org.springframework.test.context.ContextConfiguration @ContextConfiguration}, +	 * in order to efficently load and inject the Spring configuration into the, +	 * test class., +	 * @param applicationContext the Spring context, +	 * @return chained API to customize server and client config; use, +	 * {@link MockServerSpec#configureClient()} to transition to client config, +	 */, +	static MockServerSpec<?> bindToApplicationContext(ApplicationContext applicationContext) {, +		return new ApplicationContextSpec(applicationContext);, +	}, +, +	/**, +	 * @return chained API to customize server and client config; use, +	 * {@link MockServerSpec#configureClient()} to transition to client config, +	 * This server setup option allows you to connect to a running server., +	 * <p><pre class="code">, +	 * WebTestClient client = WebTestClient.bindToServer(), +	 *         .baseUrl("http://localhost:8080"), +	 *         .build();, +	 * </pre>, +	 * @return chained API to customize client config, +	 * Chained API for applying assertions to a response., +		 * Assertions on the response status., +		 * Assertions on the headers of the response., +		 * Consume and decode the response body to a single object of type, +		 * {@code <B>} and then apply assertions., +		 * Alternative to {@link #expectBody(Class)} that accepts information, +		 * about a target type with generics., +		 * Consume and decode the response body to {@code List<E>} and then apply, +		 * List-specific assertions., +		 * Alternative to {@link #expectBodyList(Class)} that accepts information, +		 * about a target type with generics., +		 * Consume and decode the response body to {@code byte[]} and then apply, +		 * assertions on the raw content (e.g. isEmpty, JSONPath, etc.), +		 * Exit the chained API and consume the response body externally. This, +		 * is useful for testing infinite streams (e.g. SSE) where you need to, +		 * to assert decoded objects as they come and then cancel at some point, +		 * when test objectives are met. Consider using {@code StepVerifier}, +		 * from {@literal "reactor-test"} to assert the {@code Flux<T>} stream, +		 * of decoded objects., +		 * <p><strong>Note:</strong> Do not use this option for cases where there, +		 * is no content (e.g. 204, 4xx) or you're not interested in the content., +		 * For such cases you can use {@code expectBody().isEmpty()} or, +		 * {@code expectBody(Void.class)} which ensures that resources are, +		 * released regardless of whether the response has content or not., +		 * Alternative to {@link #returnResult(Class)} that accepts information, +		 * about a target type with generics., +		 * Exit the chained API and return an {@code ExchangeResult} with the, +		 * decoded response content., +		 * Exit the chained API and return an {@code ExchangeResult} with the, +		 * raw response content., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, + * Non-blocking, reactive client for testing web servers. It uses the reactive, + * {@link WebClient} internally to perform requests and provides a fluent API, + * to verify responses., + * <p>{@code WebTestClient} can connect to any server over an HTTP connection., + * It can also bind directly to WebFlux applications using mock request and, + * response objects, without the need for an HTTP server., + *, + * <p>See the static {@code bindToXxx} entry points for creating an instance., +	 * Use this server setup to test one `@Controller` at a time., +	 * This option loads the default configuration of, +	 * {@link org.springframework.web.reactive.config.EnableWebFlux @EnableWebFlux}., +	 * There are builder methods to customize the Java config. The resulting, +	 * WebFlux application will be tested without an HTTP server using a mock, +	 * request and response., +	 * @param controllers one or more controller instances to tests]