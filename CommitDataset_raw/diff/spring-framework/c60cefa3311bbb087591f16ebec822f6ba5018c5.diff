[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.Expression;, +	private final TypedValue rootObject;, +, +			@Nullable TypeConverter converter, @Nullable TypedValue rootObject) {, +		this.rootObject = (rootObject != null ? rootObject : TypedValue.NULL);, +	 * Return the specified root object, if any., +		return this.rootObject;, +		@Nullable, +		private TypedValue rootObject;, +, +, +		/**, +		 * Register a custom {@link ConversionService}., +		 * <p>By default a {@link StandardTypeConverter} backed by a, +		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used., +		 * @see #withTypeConverter, +		 * @see StandardTypeConverter#StandardTypeConverter(ConversionService), +		 */, +		public Builder withConversionService(ConversionService conversionService) {, +			this.typeConverter = new StandardTypeConverter(conversionService);, +			return this;, +		}, +		 * Specify a default root object to resolve against., +		 * <p>Default is none, expecting an object argument at evaluation time., +		 * @see Expression#getValue(EvaluationContext), +		 * @see Expression#getValue(EvaluationContext, Object), +		public Builder withRootObject(Object rootObject) {, +			this.rootObject = new TypedValue(rootObject);, +			return this;, +		}, +, +		/**, +		 * Specify a typed root object to resolve against., +		 * <p>Default is none, expecting an object argument at evaluation time., +		 * @see Expression#getValue(EvaluationContext), +		 * @see Expression#getValue(EvaluationContext, Object), +		 */, +		public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor) {, +			this.rootObject = new TypedValue(rootObject, typeDescriptor);, +			return new SimpleEvaluationContext(this.accessors, this.resolvers, this.typeConverter, this.rootObject);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.Expression;, +	private final TypedValue rootObject;, +, +			@Nullable TypeConverter converter, @Nullable TypedValue rootObject) {, +		this.rootObject = (rootObject != null ? rootObject : TypedValue.NULL);, +	 * Return the specified root object, if any., +		return this.rootObject;, +		@Nullable, +		private TypedValue rootObject;, +, +, +		/**, +		 * Register a custom {@link ConversionService}., +		 * <p>By default a {@link StandardTypeConverter} backed by a, +		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used., +		 * @see #withTypeConverter, +		 * @see StandardTypeConverter#StandardTypeConverter(ConversionService), +		 */, +		public Builder withConversionService(ConversionService conversionService) {, +			this.typeConverter = new StandardTypeConverter(conversionService);, +			return this;, +		}, +		 * Specify a default root object to resolve against., +		 * <p>Default is none, expecting an object argument at evaluation time., +		 * @see Expression#getValue(EvaluationContext), +		 * @see Expression#getValue(EvaluationContext, Object), +		public Builder withRootObject(Object rootObject) {, +			this.rootObject = new TypedValue(rootObject);, +			return this;, +		}, +, +		/**, +		 * Specify a typed root object to resolve against., +		 * <p>Default is none, expecting an object argument at evaluation time., +		 * @see Expression#getValue(EvaluationContext), +		 * @see Expression#getValue(EvaluationContext, Object), +		 */, +		public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor) {, +			this.rootObject = new TypedValue(rootObject, typeDescriptor);, +			return new SimpleEvaluationContext(this.accessors, this.resolvers, this.typeConverter, this.rootObject);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java, +	public void propertyReadWriteWithRootObject() {, +		Person target = new Person("p1");, +		EvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().withRootObject(target).build();, +		assertSame(target, context.getRootObject().getValue());, +, +		Expression expr = parser.parseExpression("name");, +		assertEquals("p1", expr.getValue(context, target));, +		target.setName("p2");, +		assertEquals("p2", expr.getValue(context, target));, +, +		parser.parseExpression("name='p3'").getValue(context, target);, +		assertEquals("p3", target.getName());, +		assertEquals("p3", expr.getValue(context, target));, +, +		expr.setValue(context, target, "p4");]