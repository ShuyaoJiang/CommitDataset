[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +import java.net.URISyntaxException;, +import org.springframework.stereotype.Controller;, +import static org.springframework.http.MediaType.APPLICATION_JSON;, +	private MockServerHttpResponse response = new MockServerHttpResponse();, +	private ServerWebExchange exchange;, +		WebSessionManager manager = new DefaultWebSessionManager();, +		this.exchange = new DefaultServerWebExchange(this.request, this.response, manager);, +		Object handler = new Object();, +		HandlerMethod hm = handlerMethod(new TestController(), "modelAttributeMethod");, +, +		testSupports(handler, ResolvableType.forClass(String.class), true);, +		testSupports(handler, ResolvableType.forClass(View.class), true);, +		testSupports(handler, ResolvableType.forClassWithGenerics(Mono.class, String.class), true);, +		testSupports(handler, ResolvableType.forClassWithGenerics(Mono.class, View.class), true);, +		testSupports(handler, ResolvableType.forClassWithGenerics(Single.class, String.class), true);, +		testSupports(handler, ResolvableType.forClassWithGenerics(Single.class, View.class), true);, +		testSupports(handler, ResolvableType.forClass(Model.class), true);, +		testSupports(handler, ResolvableType.forClass(Map.class), true);, +		testSupports(handler, ResolvableType.forClass(TestBean.class), true);, +		testSupports(handler, ResolvableType.forClass(Integer.class), false);, +		testSupports(hm, ResolvableType.forMethodParameter(hm.getReturnType()), true);, +	}, +, +	private void testSupports(Object handler, ResolvableType returnType, boolean result) {, +		ViewResolutionResultHandler resultHandler = createResultHandler(mock(ViewResolver.class));, +		HandlerResult handlerResult = new HandlerResult(handler, null, returnType, new ExtendedModelMap());, +		assertEquals(result, resultHandler.supports(handlerResult));, +	public void viewResolverOrder() throws Exception {, +		TestViewResolver resolver1 = new TestViewResolver("account");, +		TestViewResolver resolver2 = new TestViewResolver("profile");, +		List<ViewResolver> resolvers = createResultHandler(resolver1, resolver2).getViewResolvers();, +		assertEquals(Arrays.asList(resolver2, resolver1), resolvers);, +	public void handleReturnValueTypes() throws Exception {, +		Object handler = new Object();, +		Object returnValue;, +		ResolvableType returnType;, +		returnValue = new TestView("account");, +		returnType = ResolvableType.forClass(View.class);, +		testHandle("/path", handler, returnValue, returnType, "account: {id=123}");, +		returnValue = Mono.just(new TestView("account"));, +		returnType = ResolvableType.forClassWithGenerics(Mono.class, View.class);, +		testHandle("/path", handler, returnValue, returnType, "account: {id=123}");, +		returnValue = "account";, +		returnType = ResolvableType.forClass(String.class);, +		testHandle("/path", handler, returnValue, returnType, "account: {id=123}", resolver);, +, +		returnValue = Mono.just("account");, +		returnType = ResolvableType.forClassWithGenerics(Mono.class, String.class);, +		testHandle("/path", handler, returnValue, returnType, "account: {id=123}", resolver);, +, +		returnValue = new ExtendedModelMap().addAttribute("name", "Joe");, +		returnType = ResolvableType.forClass(Model.class);, +		testHandle("/account", handler, returnValue, returnType, "account: {id=123, name=Joe}", resolver);, +, +		returnValue = Collections.singletonMap("name", "Joe");, +		returnType = ResolvableType.forClass(Map.class);, +		testHandle("/account", handler, returnValue, returnType, "account: {id=123, name=Joe}", resolver);, +, +		HandlerMethod hm = handlerMethod(new TestController(), "modelAttributeMethod");, +		returnValue = "Joe";, +		returnType = ResolvableType.forMethodParameter(hm.getReturnType());, +		testHandle("/account", hm, returnValue, returnType, "account: {id=123, name=Joe}", resolver);, +, +		returnValue = new TestBean("Joe");, +		returnType = ResolvableType.forClass(TestBean.class);, +		testHandle("/account", handler, returnValue, returnType, "account: {id=123, testBean=TestBean[name=Joe]}", resolver);, +	public void handleWithMultipleResolvers() throws Exception {, +		Object handler = new Object();, +		Object returnValue = "profile";, +		ResolvableType returnType = ResolvableType.forClass(String.class);, +		ViewResolver[] resolvers = {new TestViewResolver("account"), new TestViewResolver("profile")};, +		testHandle("/account", handler, returnValue, returnType, "profile: {id=123}", resolvers);, +	public void defaultViewName() throws Exception {, +		testDefaultViewName(null, ResolvableType.forClass(String.class));, +		testDefaultViewName(Mono.empty(), ResolvableType.forClassWithGenerics(Mono.class, String.class));, +	}, +	private void testDefaultViewName(Object returnValue, ResolvableType returnType), +			throws URISyntaxException {, +, +		ModelMap model = new ExtendedModelMap().addAttribute("id", "123");, +		HandlerResult result = new HandlerResult(new Object(), returnValue, returnType, model);, +		ViewResolutionResultHandler handler =  createResultHandler(new TestViewResolver("account"));, +, +		this.request.setUri(new URI("/account"));, +		handler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +		assertResponseBody("account: {id=123}");, +, +		this.request.setUri(new URI("/account/"));, +		handler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +		assertResponseBody("account: {id=123}");, +, +		this.request.setUri(new URI("/account.123"));, +		handler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +		assertResponseBody("account: {id=123}");, +	public void unresolvedViewName() throws Exception {, +		String returnValue = "account";, +		ResolvableType returnType = ResolvableType.forClass(String.class);, +		ExtendedModelMap model = new ExtendedModelMap();, +		HandlerResult handlerResult = new HandlerResult(new Object(), returnValue, returnType, model);]