[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			this.tokenStream = tokenizer.process();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			this.tokenStream = tokenizer.process();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * @author Juergen Hoeller, +	// If this gets changed, it must remain sorted..., +	private static final String[] ALTERNATIVE_OPERATOR_NAMES =, +			{"DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"};, +	private String expressionString;, +	private char[] charsToProcess;, +	private int pos;, +	private int max;, +	private List<Token> tokens = new ArrayList<>();, +		this.charsToProcess = (inputData + "\0").toCharArray();, +		this.max = this.charsToProcess.length;, +	public List<Token> process() {, +			char ch = this.charsToProcess[this.pos];, +							raiseParseException(this.pos, SpelMessage.MISSING_CHARACTER, "|");, +						raiseParseException(this.pos, SpelMessage.UNEXPECTED_ESCAPE_CHAR);, +						break;, +, +			char ch = this.charsToProcess[this.pos];, +				if (this.charsToProcess[this.pos + 1] == '\'') {, +			if (isExhausted()) {, +				raiseParseException(start, SpelMessage.NON_TERMINATING_QUOTED_STRING);, +			char ch = this.charsToProcess[this.pos];, +				if (this.charsToProcess[this.pos + 1] == '"') {, +			if (isExhausted()) {, +				raiseParseException(start, SpelMessage.NON_TERMINATING_DOUBLE_QUOTED_STRING);, +		char ch = this.charsToProcess[this.pos + 1];, +			while (isHexadecimalDigit(this.charsToProcess[this.pos]));, +		while (isDigit(this.charsToProcess[this.pos]));, +		ch = this.charsToProcess[this.pos];, +			while (isDigit(this.charsToProcess[this.pos]));, +		// Is it a long ?, +				raiseParseException(start, SpelMessage.REAL_CANNOT_BE_LONG);, +		else if (isExponentChar(this.charsToProcess[this.pos])) {, +			char possibleSign = this.charsToProcess[this.pos];, +			while (isDigit(this.charsToProcess[this.pos]));, +			if (isFloatSuffix(this.charsToProcess[this.pos])) {, +			else if (isDoubleSuffix(this.charsToProcess[this.pos])) {, +			ch = this.charsToProcess[this.pos];, +		while (isIdentifier(this.charsToProcess[this.pos]));, +				raiseParseException(start, SpelMessage.NOT_A_LONG, this.expressionString.substring(start, end + 1));, +				raiseParseException(start, SpelMessage.NOT_AN_INTEGER, this.expressionString.substring(start, end));, +		System.arraycopy(this.charsToProcess, start, result, 0, end - start);, +				this.charsToProcess[this.pos] == kind.tokenChars[0] &&, +				this.charsToProcess[this.pos + 1] == kind.tokenChars[1]);, +		char ch = this.charsToProcess[this.pos];, +	private boolean isExhausted() {, +		return (this.pos == this.max - 1);, +	}, +, +	private void raiseParseException(int start, SpelMessage msg, Object... inserts) {, +		throw new InternalParseException(new SpelParseException(this.expressionString, start, msg, inserts));, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			this.tokenStream = tokenizer.process();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * @author Juergen Hoeller, +	// If this gets changed, it must remain sorted..., +	private static final String[] ALTERNATIVE_OPERATOR_NAMES =, +			{"DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"};, +	private String expressionString;, +	private char[] charsToProcess;, +	private int pos;, +	private int max;, +	private List<Token> tokens = new ArrayList<>();, +		this.charsToProcess = (inputData + "\0").toCharArray();, +		this.max = this.charsToProcess.length;, +	public List<Token> process() {, +			char ch = this.charsToProcess[this.pos];, +							raiseParseException(this.pos, SpelMessage.MISSING_CHARACTER, "|");, +						raiseParseException(this.pos, SpelMessage.UNEXPECTED_ESCAPE_CHAR);, +						break;, +, +			char ch = this.charsToProcess[this.pos];, +				if (this.charsToProcess[this.pos + 1] == '\'') {, +			if (isExhausted()) {, +				raiseParseException(start, SpelMessage.NON_TERMINATING_QUOTED_STRING);, +			char ch = this.charsToProcess[this.pos];, +				if (this.charsToProcess[this.pos + 1] == '"') {, +			if (isExhausted()) {, +				raiseParseException(start, SpelMessage.NON_TERMINATING_DOUBLE_QUOTED_STRING);, +		char ch = this.charsToProcess[this.pos + 1];, +			while (isHexadecimalDigit(this.charsToProcess[this.pos]));, +		while (isDigit(this.charsToProcess[this.pos]));, +		ch = this.charsToProcess[this.pos];, +			while (isDigit(this.charsToProcess[this.pos]));, +		// Is it a long ?, +				raiseParseException(start, SpelMessage.REAL_CANNOT_BE_LONG);, +		else if (isExponentChar(this.charsToProcess[this.pos])) {, +			char possibleSign = this.charsToProcess[this.pos];, +			while (isDigit(this.charsToProcess[this.pos]));, +			if (isFloatSuffix(this.charsToProcess[this.pos])) {, +			else if (isDoubleSuffix(this.charsToProcess[this.pos])) {, +			ch = this.charsToProcess[this.pos];, +		while (isIdentifier(this.charsToProcess[this.pos]));]