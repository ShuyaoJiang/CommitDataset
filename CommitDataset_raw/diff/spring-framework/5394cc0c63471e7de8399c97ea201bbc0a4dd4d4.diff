[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * The empty {@code HttpHeaders} instance (immutable)., +	 */, +	public static final HttpHeaders EMPTY = new HttpHeaders(new LinkedHashMap<>(0), true);, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * The empty {@code HttpHeaders} instance (immutable)., +	 */, +	public static final HttpHeaders EMPTY = new HttpHeaders(new LinkedHashMap<>(0), true);, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.nio.charset.StandardCharsets;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.util.MimeType;, +		private static final StatusHandler DEFAULT_STATUS_HANDLER = new StatusHandler(HttpStatus::isError, DefaultResponseSpec::createResponseException);, +		private List<StatusHandler> statusHandlers = new ArrayList<>(1);, +				Function<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {, +			this.statusHandlers.add(new StatusHandler(statusPredicate, exceptionFunction));, +		@SuppressWarnings("unchecked"), +							this::monoThrowableToMono));, +		@SuppressWarnings("unchecked"), +							mono -> (Mono<T>)mono));, +		}, +, +		private <T> Mono<T> monoThrowableToMono(Mono<? extends Throwable> mono) {, +			return mono.flatMap(Mono::error);, +							this::monoThrowableToFlux));, +							this::monoThrowableToFlux));, +		}, +, +		private <T> Flux<T> monoThrowableToFlux(Mono<? extends Throwable> mono) {, +			return mono.flatMapMany(Flux::error);, +				Function<Mono<? extends Throwable>, T> errorFunction) {, +					.filter(statusHandler -> statusHandler.test(response.statusCode())), +					.map(statusHandler -> statusHandler.apply(response)), +		private static Mono<WebClientResponseException> createResponseException(ClientResponse response) {, +, +			return response.body(BodyExtractors.toDataBuffers()), +					.reduce(DataBuffer::write), +					.map(dataBuffer -> {, +						byte[] bytes = new byte[dataBuffer.readableByteCount()];, +						dataBuffer.read(bytes);, +						DataBufferUtils.release(dataBuffer);, +						return bytes;, +					}), +					.map(bodyBytes -> {, +						String msg = String.format("ClientResponse has erroneous status code: %d %s", response.statusCode().value(),, +								response.statusCode().getReasonPhrase());, +						Charset charset = response.headers().contentType(), +								.map(MimeType::getCharset), +								.orElse(StandardCharsets.ISO_8859_1);, +						return new WebClientResponseException(msg,, +								response.statusCode().value(),, +								response.statusCode().getReasonPhrase(),, +								response.headers().asHttpHeaders(),, +								bodyBytes,, +								charset, +								);, +					});, +		}, +, +		private static class StatusHandler {, +, +			private final Predicate<HttpStatus> predicate;, +, +			private final Function<ClientResponse, Mono<? extends Throwable>> exceptionFunction;, +, +			public StatusHandler(Predicate<HttpStatus> predicate,, +					Function<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {, +				this.predicate = predicate;, +				this.exceptionFunction = exceptionFunction;, +			}, +, +			public boolean test(HttpStatus status) {, +				return this.predicate.test(status);, +			}, +, +			public Mono<? extends Throwable> apply(ClientResponse response) {, +				return this.exceptionFunction.apply(response);, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * The empty {@code HttpHeaders} instance (immutable)., +	 */, +	public static final HttpHeaders EMPTY = new HttpHeaders(new LinkedHashMap<>(0), true);, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.nio.charset.StandardCharsets;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.util.MimeType;, +		private static final StatusHandler DEFAULT_STATUS_HANDLER = new StatusHandler(HttpStatus::isError, DefaultResponseSpec::createResponseException);, +		private List<StatusHandler> statusHandlers = new ArrayList<>(1);, +				Function<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {, +			this.statusHandlers.add(new StatusHandler(statusPredicate, exceptionFunction));, +		@SuppressWarnings("unchecked"), +							this::monoThrowableToMono));, +		@SuppressWarnings("unchecked")]