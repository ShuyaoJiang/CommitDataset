[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +						boolean useSuffixPattern = useSuffixPattern(request);, +						if (getMatchingPattern(typeLevelPattern, lookupPath, useSuffixPattern) != null) {, +		private boolean useSuffixPattern(HttpServletRequest request) {, +			Object value = request.getAttribute(DefaultAnnotationHandlerMapping.USE_DEFAULT_SUFFIX_PATTERN);, +			return (value != null) ? (Boolean) value : Boolean.TRUE;, +		}, +, +			boolean useSuffixPattern = useSuffixPattern(request);, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +			return getMatchingPattern(methodLevelPattern, lookupPath, useSuffixPattern);, +		private String getMatchingPattern(String pattern, String lookupPath, boolean useSuffixPattern) {, +			if (useSuffixPattern && !hasSuffix) {, +			if (useSuffixPattern && !endsWithSlash) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +						boolean useSuffixPattern = useSuffixPattern(request);, +						if (getMatchingPattern(typeLevelPattern, lookupPath, useSuffixPattern) != null) {, +		private boolean useSuffixPattern(HttpServletRequest request) {, +			Object value = request.getAttribute(DefaultAnnotationHandlerMapping.USE_DEFAULT_SUFFIX_PATTERN);, +			return (value != null) ? (Boolean) value : Boolean.TRUE;, +		}, +, +			boolean useSuffixPattern = useSuffixPattern(request);, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +			return getMatchingPattern(methodLevelPattern, lookupPath, useSuffixPattern);, +		private String getMatchingPattern(String pattern, String lookupPath, boolean useSuffixPattern) {, +			if (useSuffixPattern && !hasSuffix) {, +			if (useSuffixPattern && !endsWithSlash) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +, +	static final String USE_DEFAULT_SUFFIX_PATTERN = DefaultAnnotationHandlerMapping.class.getName() + ".useDefaultSuffixPattern";, +, +	private final Map<Class<?>, RequestMapping> cachedMappings = new HashMap<Class<?>, RequestMapping>();, +		request.setAttribute(USE_DEFAULT_SUFFIX_PATTERN, this.useDefaultSuffixPattern);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +						boolean useSuffixPattern = useSuffixPattern(request);, +						if (getMatchingPattern(typeLevelPattern, lookupPath, useSuffixPattern) != null) {, +		private boolean useSuffixPattern(HttpServletRequest request) {, +			Object value = request.getAttribute(DefaultAnnotationHandlerMapping.USE_DEFAULT_SUFFIX_PATTERN);, +			return (value != null) ? (Boolean) value : Boolean.TRUE;, +		}, +, +			boolean useSuffixPattern = useSuffixPattern(request);, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath, useSuffixPattern);, +			return getMatchingPattern(methodLevelPattern, lookupPath, useSuffixPattern);, +		private String getMatchingPattern(String pattern, String lookupPath, boolean useSuffixPattern) {, +			if (useSuffixPattern && !hasSuffix) {, +			if (useSuffixPattern && !endsWithSlash) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +, +	static final String USE_DEFAULT_SUFFIX_PATTERN = DefaultAnnotationHandlerMapping.class.getName() + ".useDefaultSuffixPattern";, +, +	private final Map<Class<?>, RequestMapping> cachedMappings = new HashMap<Class<?>, RequestMapping>();, +		request.setAttribute(USE_DEFAULT_SUFFIX_PATTERN, this.useDefaultSuffixPattern);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, + * Copyright 2002-2012 the original author or authors., +	// SPR-9333, +	@Test, +	@SuppressWarnings("serial"), +	public void suppressDefaultSuffixPattern() throws Exception {, +		servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent), +					throws BeansException {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(VariableNamesController.class));, +				RootBeanDefinition mappingDef = new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);, +				mappingDef.getPropertyValues().add("useDefaultSuffixPattern", false);, +				wac.registerBeanDefinition("handlerMapping", mappingDef);, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test/jsmith@mail.com");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("foo-jsmith@mail.com", response.getContentAsString());, +	}, +]