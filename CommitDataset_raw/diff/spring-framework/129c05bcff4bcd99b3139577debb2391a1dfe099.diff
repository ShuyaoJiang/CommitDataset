[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				if (annotations.length > 0) {, +				}, +						result = searchOnInterfaces(method, annotationType, annotationName,, +								containerType, processor, visited, metaDepth, ifcs);, +						Set<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(clazz);, +						if (!annotatedMethods.isEmpty()) {, +							for (Method annotatedMethod : annotatedMethods) {, +								if (annotatedMethod.getName().equals(method.getName()) &&, +										Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, +									Method resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);, +									result = searchWithFindSemantics(resolvedSuperMethod, annotationType, annotationName,, +						}, +						result = searchOnInterfaces(method, annotationType, annotationName,, +								containerType, processor, visited, metaDepth, clazz.getInterfaces());, +						T result = searchWithFindSemantics(ifc, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +						T result = searchWithFindSemantics(superclass, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +			Set<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(ifc);, +			if (!annotatedMethods.isEmpty()) {, +				for (Method annotatedMethod : annotatedMethods) {, +					if (annotatedMethod.getName().equals(method.getName()) &&, +							Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, +						T result = searchWithFindSemantics(annotatedMethod, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				if (annotations.length > 0) {, +				}, +						result = searchOnInterfaces(method, annotationType, annotationName,, +								containerType, processor, visited, metaDepth, ifcs);, +						Set<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(clazz);, +						if (!annotatedMethods.isEmpty()) {, +							for (Method annotatedMethod : annotatedMethods) {, +								if (annotatedMethod.getName().equals(method.getName()) &&, +										Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, +									Method resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);, +									result = searchWithFindSemantics(resolvedSuperMethod, annotationType, annotationName,, +						}, +						result = searchOnInterfaces(method, annotationType, annotationName,, +								containerType, processor, visited, metaDepth, clazz.getInterfaces());, +						T result = searchWithFindSemantics(ifc, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +						T result = searchWithFindSemantics(superclass, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +			Set<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(ifc);, +			if (!annotatedMethods.isEmpty()) {, +				for (Method annotatedMethod : annotatedMethods) {, +					if (annotatedMethod.getName().equals(method.getName()) &&, +							Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, +						T result = searchWithFindSemantics(annotatedMethod, annotationType, annotationName,, +								containerType, processor, visited, metaDepth);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import java.util.Arrays;, +	private static final Map<Class<?>, Set<Method>> annotatedBaseTypeCache =, +			Set<Method> annotatedMethods = getAnnotatedMethodsInBaseType(ifc);, +			if (!annotatedMethods.isEmpty()) {, +				for (Method annotatedMethod : annotatedMethods) {, +					if (annotatedMethod.getName().equals(method.getName()) &&, +							Arrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {, +						A annotation = getAnnotation(annotatedMethod, annotationType);, +					}, +				}, +			}, +		}, +		return null;, +	static Set<Method> getAnnotatedMethodsInBaseType(Class<?> baseType) {, +		if (ClassUtils.isJavaLanguageInterface(baseType)) {, +			return Collections.emptySet();, +, +		Set<Method> annotatedMethods = annotatedBaseTypeCache.get(baseType);, +		if (annotatedMethods != null) {, +			return annotatedMethods;, +		}, +		Method[] methods = (baseType.isInterface() ? baseType.getMethods() : baseType.getDeclaredMethods());, +		for (Method baseMethod : methods) {, +				if (hasSearchableAnnotations(baseMethod)) {, +					if (annotatedMethods == null) {, +						annotatedMethods = new HashSet<>();, +					}, +					annotatedMethods.add(baseMethod);, +				handleIntrospectionFailure(baseMethod, ex);, +		if (annotatedMethods == null) {, +			annotatedMethods = Collections.emptySet();, +		}, +		annotatedBaseTypeCache.put(baseType, annotatedMethods);, +		return annotatedMethods;, +	}, +, +	private static boolean hasSearchableAnnotations(Method ifcMethod) {, +		Annotation[] anns = ifcMethod.getAnnotations();, +		if (anns.length == 0) {, +			return false;, +		}, +		if (anns.length == 1) {, +			Class<?> annType = anns[0].annotationType();, +			return (annType != Nullable.class && annType != Deprecated.class);, +		}, +		return true;, +	/**]