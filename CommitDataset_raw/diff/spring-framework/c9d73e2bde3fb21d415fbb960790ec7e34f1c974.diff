[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +import java.lang.reflect.Array;, +	private final ConversionService conversionService;, +		this.conversionService = conversionService;, +		return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, conversionService);, +		if (source == null) {, +			return null;, +		}, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +		if (Array.getLength(source) == 0) {, +			return null;, +		}, +		Object firstElement = Array.get(source, 0);, +		return this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +import java.lang.reflect.Array;, +	private final ConversionService conversionService;, +		this.conversionService = conversionService;, +		return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, conversionService);, +		if (source == null) {, +			return null;, +		}, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +		if (Array.getLength(source) == 0) {, +			return null;, +		}, +		Object firstElement = Array.get(source, 0);, +		return this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +import java.lang.reflect.Array;, +	private final ConversionService conversionService;, +		this.conversionService = conversionService;, +		return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, conversionService);, +		if (source == null) {, +			return null;, +		}, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +		if (Array.getLength(source) == 0) {, +			return null;, +		}, +		Object firstElement = Array.get(source, 0);, +		return this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		Object result = conversionService.convert(array, Long.class);, +	public void convertArrayToObjectAssignableTargetType() {, +		Long[] array = new Long[] { 3L };, +		Long[] result = (Long[]) conversionService.convert(array, Object.class);, +		assertEquals(array, result);, +	}, +, +	@Test, +	public void convertCollectionToObjectAssignableTarget() throws Exception {, +		Collection<String> source = new ArrayList<String>();, +		source.add("foo");, +		Object result = conversionService.convert(source, new TypeDescriptor(getClass().getField("assignableTarget")));, +		assertEquals(source, result);, +	}, +	, +	@Test, +	public Object assignableTarget;, +	]