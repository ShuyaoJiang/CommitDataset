[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import org.springframework.web.servlet.SmartView;, +		for (View candidateView : candidateViews) {, +			if (candidateView instanceof SmartView) {, +				SmartView smartView = (SmartView) candidateView;, +				if (smartView.isRedirectView()) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Returning redirect view [" + candidateView + "]");, +					}, +					return candidateView;, +				}, +			}, +		}, +		for (MediaType mediaType : requestedMediaTypes) {, +					if (mediaType.includes(candidateContentType)) {, +							logger.debug("Returning [" + candidateView + "] based on requested media type '", +									+ mediaType + "'");, +						return candidateView;, +			}, +		}, +		return null;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import org.springframework.web.servlet.SmartView;, +		for (View candidateView : candidateViews) {, +			if (candidateView instanceof SmartView) {, +				SmartView smartView = (SmartView) candidateView;, +				if (smartView.isRedirectView()) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Returning redirect view [" + candidateView + "]");, +					}, +					return candidateView;, +				}, +			}, +		}, +		for (MediaType mediaType : requestedMediaTypes) {, +					if (mediaType.includes(candidateContentType)) {, +							logger.debug("Returning [" + candidateView + "] based on requested media type '", +									+ mediaType + "'");, +						return candidateView;, +			}, +		}, +		return null;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +	public void resolveViewNameRedirectView() throws Exception {, +		request.addHeader("Accept", "application/json");, +		request.setRequestURI("/test");, +, +		ViewResolver xmlViewResolver = createMock(ViewResolver.class);, +		viewResolver.setViewResolvers(Arrays.<ViewResolver>asList(xmlViewResolver, new UrlBasedViewResolver()));, +, +		View xmlView = createMock("application_xml", View.class);, +		View jsonView = createMock("application_json", View.class);, +		viewResolver.setDefaultViews(Arrays.asList(jsonView));, +		, +		String viewName = "redirect:anotherTest";, +		Locale locale = Locale.ENGLISH;, +, +		expect(xmlViewResolver.resolveViewName(viewName, locale)).andReturn(xmlView);, +		expect(jsonView.getContentType()).andReturn("application/json").anyTimes();, +, +		replay(xmlViewResolver, xmlView, jsonView);, +, +		View actualView = viewResolver.resolveViewName(viewName, locale);, +		assertEquals("Invalid view", RedirectView.class, actualView.getClass());, +, +		verify(xmlViewResolver, xmlView, jsonView);, +	}, +	, +	@Test]