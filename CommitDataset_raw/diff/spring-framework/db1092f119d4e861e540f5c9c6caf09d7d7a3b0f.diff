[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, + * A {@link RequestCondition} that consists of the following other conditions:, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, + * A {@link RequestCondition} that consists of the following other conditions:, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoTests.java, +import javax.servlet.http.HttpServletRequest;, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.springframework.web.bind.annotation.RequestMethod.GET;, +import static org.springframework.web.servlet.mvc.method.RequestMappingInfo.paths;, +, +		RequestMappingInfo info = paths().build();, +		HttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		RequestMappingInfo info = paths("/foo*", "/bar").build();, +		RequestMappingInfo expected = paths("/foo*").build();, +		info = paths("/**", "/foo*", "/foo").build();, +		expected = paths("/foo", "/foo*", "/**").build();, +		RequestMappingInfo info = paths("/foo").params("foo=bar").build();, +		info = paths("/foo").params("foo!=bar").build();, +		RequestMappingInfo info = paths("/foo").headers("foo=bar").build();, +		info = paths("/foo").headers("foo!=bar").build();, +		RequestMappingInfo info = paths("/foo").consumes("text/plain").build();, +		info = paths("/foo").consumes("application/xml").build();, +		RequestMappingInfo info = paths("/foo").produces("text/plain").build();, +		info = paths("/foo").produces("application/xml").build();, +		RequestMappingInfo info = paths("/foo").params("foo=bar").build();, +		info = paths("/foo").params("foo!=bar").params("foo!=bar").build();, +	public void compareToWithImpicitVsExplicitHttpMethodDeclaration() {, +		RequestMappingInfo noMethods = paths().build();, +		RequestMappingInfo oneMethod = paths().methods(GET).build();, +		RequestMappingInfo oneMethodOneParam = paths().methods(GET).params("foo").build();, +		Comparator<RequestMappingInfo> comparator =, +				(info, otherInfo) -> info.compareTo(otherInfo, new MockHttpServletRequest());, +		List<RequestMappingInfo> list = asList(noMethods, oneMethod, oneMethodOneParam);, +		assertEquals(noMethods, list.get(2));, +		RequestMappingInfo info1 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		RequestMappingInfo info2 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		info2 = paths("/foo", "/NOOOOOO").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		info2 = paths("/foo").methods(GET, RequestMethod.POST), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		info2 = paths("/foo").methods(GET), +				.params("/NOOOOOO", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		info2 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("/NOOOOOO"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		info2 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/NOOOOOO").produces("text/plain"), +				.build();, +		info2 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=customBar").headers("foo=bar"), +				.consumes("text/plain").produces("text/NOOOOOO"), +				.build();, +		info2 = paths("/foo").methods(GET), +				.params("foo=bar", "customFoo=NOOOOOO").headers("foo=bar"), +				.consumes("text/plain").produces("text/plain"), +				.build();, +		RequestMappingInfo info = paths("/foo").methods(RequestMethod.POST).build();, +		info = paths("/foo").methods(RequestMethod.OPTIONS).build();]