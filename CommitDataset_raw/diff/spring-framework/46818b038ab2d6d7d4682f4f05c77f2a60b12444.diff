[+++ b/spring-framework-reference/src/beans.xml, +      <para><literal>&lt;context:annotation-config/&gt;</literal> only looks, +      for annotations on beans in the same application context in which it is, +      defined. This means that, if you put, +        annotation which has a <literal>required</literal> property to, +        indicate if the value being injected is optional. This behavior is, +        enabled automatically if you have the JSR 330 JAR on the, +        classpath.</para>, +        <para>JSR 330's <interfacename>@Qualifier</interfacename> annotation, +        can only be applied as a meta-annotation unlike Spring's @Qualifier, +        which takes a string property to discriminate among multiple injection, +        candidates and can be placed on annotations as well as types, fields,, +        methods, constructors, and parameters.</para>, +      <interfacename>@Bean</interfacename>,, +      <interfacename>@Import</interfacename>, and, +      <interfacename>@DependsOn</interfacename> annotations for examples of, +      how to use these new features.</para>, +        when using @Named. This behavior as well as mapping of JSR 330 and JSR, +        299 scopes is planned for Spring 3.0 GA assuming the JSRs are stable, +        at that time.</para>, +        <para>JSR 330's @Named annotation can be used as a means to both, +        detect components and to provide them with a name. This behavior is, +        enabled automatically if you have the JSR 330 JAR on the, +        classpath.</para>, +, +        <classname>ResourceBundleMessageSource</classname>, Spring provides a, +        <classname>ReloadableResourceBundleMessageSource</classname> class., +        This variant supports the same bundle file format but is more flexible, +        than the standard JDK based, +        implementation.</emphasis> In particular, it allows for reading files, +        from any Spring resource location (not just from the classpath) and, +        supports hot reloading of bundle property files (while efficiently, +        caching them in between). Check out the, +        not expose components to the outside world, not even to other modules, +        of the same application. Interaction with a RAR-based, +        system (or the like). If it needs to allow synchronous access from the, +        outside, it could for example export RMI endpoints, which of course, +        may be used by other application modules on the same machine.</para>]