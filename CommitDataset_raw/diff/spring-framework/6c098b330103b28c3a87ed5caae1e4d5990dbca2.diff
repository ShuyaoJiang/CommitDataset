[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/DelegatingWebReactiveConfiguration.java, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +		this.configurers.configureContentTypeResolver(builder);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/DelegatingWebReactiveConfiguration.java, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +		this.configurers.configureContentTypeResolver(builder);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/EnableWebReactive.java, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * public class MyConfiguration {, + * <p>To customize the imported configuration implement, + * {@link WebReactiveConfigurer} and override individual methods as shown below:, + * &#064;EnableWebReactive, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * <p><strong>Note:</strong> only one {@code @Configuration} class may have the, + * {@code @EnableWebReactive} annotation to import the Spring Web Reactive, + * configuration. There can however be multiple {@code @Configuration} classes, + * implementing {@code WebReactiveConfigurer} in order to customize the provided, + * configuration., + *, + * <p>If {@link WebReactiveConfigurer} does not expose some more advanced setting, + * that needs to be configured consider removing the {@code @EnableWebReactive}, + * @author Rossen Stoyanchev, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/DelegatingWebReactiveConfiguration.java, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +		this.configurers.configureContentTypeResolver(builder);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/EnableWebReactive.java, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * public class MyConfiguration {, + * <p>To customize the imported configuration implement, + * {@link WebReactiveConfigurer} and override individual methods as shown below:, + * &#064;EnableWebReactive, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * <p><strong>Note:</strong> only one {@code @Configuration} class may have the, + * {@code @EnableWebReactive} annotation to import the Spring Web Reactive, + * configuration. There can however be multiple {@code @Configuration} classes, + * implementing {@code WebReactiveConfigurer} in order to customize the provided, + * configuration., + *, + * <p>If {@link WebReactiveConfigurer} does not expose some more advanced setting, + * that needs to be configured consider removing the {@code @EnableWebReactive}, + * @author Rossen Stoyanchev, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java, +		configureContentTypeResolver(builder);, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +	 * {@link #configureMessageReaders(List)} for {@code byte[]},, +	 * {@code ByteBuffer}, {@code String}, {@code Resource}, JAXB2, and Jackson, +	 * (if present on the classpath)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/DelegatingWebReactiveConfiguration.java, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +		this.configurers.configureContentTypeResolver(builder);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/EnableWebReactive.java, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * public class MyConfiguration {, + * <p>To customize the imported configuration implement, + * {@link WebReactiveConfigurer} and override individual methods as shown below:, + * &#064;EnableWebReactive, + * &#064;ComponentScan(basePackageClasses = MyConfiguration.class), + * <p><strong>Note:</strong> only one {@code @Configuration} class may have the, + * {@code @EnableWebReactive} annotation to import the Spring Web Reactive, + * configuration. There can however be multiple {@code @Configuration} classes, + * implementing {@code WebReactiveConfigurer} in order to customize the provided, + * configuration., + *, + * <p>If {@link WebReactiveConfigurer} does not expose some more advanced setting, + * that needs to be configured consider removing the {@code @EnableWebReactive}, + * @author Rossen Stoyanchev, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java, +		configureContentTypeResolver(builder);, +	protected void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +	 * {@link #configureMessageReaders(List)} for {@code byte[]},, +	 * {@code ByteBuffer}, {@code String}, {@code Resource}, JAXB2, and Jackson, +	 * (if present on the classpath)., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurer.java, + * @author Rossen Stoyanchev, +	 * Configure how the content type requested for the response is resolved., +	 * {@link RequestedContentTypeResolver}s, each defining a way to resolve, +	 * the the requested content type (accept HTTP header, path extension,, +	 * parameter, etc)., +	 * @param builder factory that creates a {@link CompositeContentTypeResolver}, +	default void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {, +	 * Provide custom controller method argument resolvers. Such resolvers do, +	 * not override and will be invoked after the built-in ones., +	 * @param resolvers a list of resolvers to add, +	 * Configure the message readers to use for decoding the request body where, +	 * {@code @RequestBody} and {@code HttpEntity} controller method arguments, +	 * are used. If none are specified, default ones are added based on, +	 * <p>See {@link #extendMessageReaders(List)} for adding readers, +	 * in addition to the default ones., +	 * @param readers an empty list to add message readers to, +	 * An alternative to {@link #configureMessageReaders(List)} that allows, +	 * modifying the message readers to use after default ones have been added., +	 * Add custom {@link Converter}s and {@link Formatter}s for performing type, +	 * conversion and formatting of controller method arguments., +	 * Provide a custom {@link Validator}., +	 * <p>By default a validator for standard bean validation is created if, +	 * bean validation api is present on the classpath., +	 * Provide a custom {@link MessageCodesResolver} to use for data binding, +	 * instead of the one created by default in, +	 * {@link org.springframework.validation.DataBinder}., +	 * Configure the message writers to use to encode the response body based on]