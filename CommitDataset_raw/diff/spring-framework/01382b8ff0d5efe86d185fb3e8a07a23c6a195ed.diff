[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +			refName = String.valueOf(doEvaluate(refName));, +		Object result = doEvaluate(value.getValue());, +	 * @param value the original value (may be an expression), +	 * @return the resolved value if necessary, or the original value, +			return doEvaluate((String) value);, +		}, +		else if (value instanceof String[]) {, +			String[] values = (String[]) value;, +			boolean actuallyResolved = false;, +			Object[] resolvedValues = new Object[values.length];, +			for (int i = 0; i < values.length; i++) {, +				String originalValue = values[i];, +				Object resolvedValue = doEvaluate(originalValue);, +				if (resolvedValue != originalValue) {, +					actuallyResolved = true;, +				}, +				resolvedValues[i] = resolvedValue;, +			}, +			return (actuallyResolved ? resolvedValues : values);, +	 * Evaluate the given String value as an expression, if necessary., +	 * @param value the original value (may be an expression), +	 * @return the resolved value if necessary, or the original String value, +	 */, +	private Object doEvaluate(String value) {, +		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition);, +	}, +, +	/**, +			refName = String.valueOf(doEvaluate(refName));]