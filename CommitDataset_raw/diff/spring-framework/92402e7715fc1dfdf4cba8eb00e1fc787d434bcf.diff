[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, +	, +		registerBeanDefinitionParser("view-resolvers", new ViewResolversBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, +	, +		registerBeanDefinitionParser("view-resolvers", new ViewResolversBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +package org.springframework.web.servlet.config;, +, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.parsing.CompositeComponentDefinition;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.util.xml.DomUtils;, +import org.springframework.web.servlet.view.BeanNameViewResolver;, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +, +import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +import org.springframework.web.servlet.view.tiles2.TilesConfigurer;, +import org.springframework.web.servlet.view.tiles2.TilesView;, +import org.springframework.web.servlet.view.tiles2.TilesViewResolver;, +import org.w3c.dom.Element;, +, +, +public class ViewResolversBeanDefinitionParser implements BeanDefinitionParser {, +	, +	private static final String INTERNAL_VIEW_RESOLVER_BEAN_NAME =, +			"org.springframework.web.servlet.view.InternalResourceViewResolver";, +	private static final String TILES2_VIEW_RESOLVER_BEAN_NAME =, +			"org.springframework.web.servlet.view.tiles2.TilesViewResolver";, +	private static final String TILES2_CONFIGURER_BEAN_NAME =, +			"org.springframework.web.servlet.view.tiles2.TilesConfigurer";, +	private static final String BEANNAME_VIEW_RESOLVER_BEAN_NAME =, +			"org.springframework.web.servlet.view.BeanNameViewResolver";, +	private static final String FREEMARKER_CONFIGURER_BEAN_NAME =, +			"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer";, +	private static final String FREEMARKER_VIEW_RESOLVER_BEAN_NAME =, +			"org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver";, +	, +	private ParserContext parserContext;, +	private Object source;, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		, +		this.parserContext=parserContext;		, +		, +		 source= parserContext.extractSource(element);, +		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(),source);, +		parserContext.pushContainingComponent(compDefinition);, +		, +		, +		, +		List<Element> viewResolverElements = //DomUtils.getChildElements(element);, +		DomUtils.getChildElementsByTagName(element, new String[] { "jsp", "tiles","bean-name","freemarker" });, +		for (Element viewResolverElement : viewResolverElements) {		, +			, +			if ("jsp".equals(viewResolverElement.getLocalName())) {, +				registerInternalResourceViewResolverBean(parserContext,viewResolverElement);			, +				System.out.println("Registered Internalresource view resolver");, +			}		, +			, +			if("bean-name".equals(viewResolverElement.getLocalName())){, +				registerBeanNameViewResolverBean(parserContext,viewResolverElement);, +				System.out.println("Registered BeanNameViewResolverBean view resolver");, +			}, +			if ("tiles".equals(viewResolverElement.getLocalName())) {, +				registerTilesViewResolverBean(parserContext,viewResolverElement);				, +				registerTilesConfigurerBean(parserContext,viewResolverElement);, +			}, +			if("freemarker".equals(viewResolverElement.getLocalName())){, +				registerFreemarkerViewResolverBean(parserContext,viewResolverElement);, +				registerFreemarkerConfigurerBean(parserContext,viewResolverElement);, +			}, +			, +		}, +		, +	//	MvcNamespaceUtils.registerDefaultComponents(parserContext, source);, +		parserContext.popAndRegisterContainingComponent();, +		return null;, +		, +, +	}, +	, +	private void registerBean(String beanName,Map<String,Object> propertyMap,Class beanClass ){, +		RootBeanDefinition beanDef = new RootBeanDefinition(beanClass);, +		beanDef.setSource(source);, +		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		, +		for(String propertyName:propertyMap.keySet()){, +			beanDef.getPropertyValues().add(propertyName, propertyMap.get(propertyName));, +		}, +		parserContext.getRegistry().registerBeanDefinition(beanName, beanDef);, +		parserContext.registerComponent(new BeanComponentDefinition(beanDef, beanName));]