[+++ b/spring-web/src/main/java/org/springframework/web/server/MethodNotAllowedException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMethod;, +	private final String method;, +	private final Set<HttpMethod> supportedMethods;, +	public MethodNotAllowedException(HttpMethod method, Collection<HttpMethod> supportedMethods) {, +		this(method.name(), supportedMethods);, +	}, +, +	public MethodNotAllowedException(String method, Collection<HttpMethod> supportedMethods) {, +		if (supportedMethods == null) {, +			supportedMethods = Collections.emptySet();, +		}, +	public Set<HttpMethod> getSupportedMethods() {, +++ b/spring-web/src/main/java/org/springframework/web/server/MethodNotAllowedException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMethod;, +	private final String method;, +	private final Set<HttpMethod> supportedMethods;, +	public MethodNotAllowedException(HttpMethod method, Collection<HttpMethod> supportedMethods) {, +		this(method.name(), supportedMethods);, +	}, +, +	public MethodNotAllowedException(String method, Collection<HttpMethod> supportedMethods) {, +		if (supportedMethods == null) {, +			supportedMethods = Collections.emptySet();, +		}, +	public Set<HttpMethod> getSupportedMethods() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.util.EnumSet;, +	private static final Set<HttpMethod> SUPPORTED_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +						HttpMethod httpMethod = exchange.getRequest().getMethod();, +						if (!SUPPORTED_METHODS.contains(httpMethod)) {, +							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS));, +++ b/spring-web/src/main/java/org/springframework/web/server/MethodNotAllowedException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMethod;, +	private final String method;, +	private final Set<HttpMethod> supportedMethods;, +	public MethodNotAllowedException(HttpMethod method, Collection<HttpMethod> supportedMethods) {, +		this(method.name(), supportedMethods);, +	}, +, +	public MethodNotAllowedException(String method, Collection<HttpMethod> supportedMethods) {, +		if (supportedMethods == null) {, +			supportedMethods = Collections.emptySet();, +		}, +	public Set<HttpMethod> getSupportedMethods() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.util.EnumSet;, +	private static final Set<HttpMethod> SUPPORTED_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +						HttpMethod httpMethod = exchange.getRequest().getMethod();, +						if (!SUPPORTED_METHODS.contains(httpMethod)) {, +							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java, + * Copyright 2002-2017 the original author or authors., +import java.util.EnumSet;, +			Set<HttpMethod> methods = helper.getAllowedMethods();, +			throw new MethodNotAllowedException(httpMethod, methods);, +			return this.partialMatches.stream()., +					noneMatch(PartialMatch::hasMethodsMatch);, +			return this.partialMatches.stream()., +					noneMatch(PartialMatch::hasConsumesMatch);, +			return this.partialMatches.stream()., +					noneMatch(PartialMatch::hasProducesMatch);, +			return this.partialMatches.stream()., +					noneMatch(PartialMatch::hasParamsMatch);, +		public Set<HttpMethod> getAllowedMethods() {, +					map(requestMethod -> HttpMethod.resolve(requestMethod.name()))., +					collect(Collectors.toSet());, +		public HttpOptionsHandler(Set<HttpMethod> declaredMethods) {, +		private static Set<HttpMethod> initAllowedHttpMethods(Set<HttpMethod> declaredMethods) {, +				return EnumSet.allOf(HttpMethod.class).stream(), +						.filter(method -> !method.equals(HttpMethod.TRACE)), +						.collect(Collectors.toSet());, +				Set<HttpMethod> result = new LinkedHashSet<>(declaredMethods);, +				if (result.contains(HttpMethod.GET)) {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/MethodNotAllowedException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMethod;, +	private final String method;, +	private final Set<HttpMethod> supportedMethods;, +	public MethodNotAllowedException(HttpMethod method, Collection<HttpMethod> supportedMethods) {, +		this(method.name(), supportedMethods);, +	}, +, +	public MethodNotAllowedException(String method, Collection<HttpMethod> supportedMethods) {, +		if (supportedMethods == null) {, +			supportedMethods = Collections.emptySet();, +		}, +	public Set<HttpMethod> getSupportedMethods() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.util.EnumSet;, +	private static final Set<HttpMethod> SUPPORTED_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +						HttpMethod httpMethod = exchange.getRequest().getMethod();, +						if (!SUPPORTED_METHODS.contains(httpMethod)) {]