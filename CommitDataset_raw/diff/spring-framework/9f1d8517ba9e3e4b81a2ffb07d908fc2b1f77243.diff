[+++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, + * Extension for [ListableBeanFactory.getBeanNamesForType] providing a, + * `getBeanNamesForType<Foo>()` variant., +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Map<String, T> =, + * Extension for [ListableBeanFactory.getBeanNamesForAnnotation] providing a, + * `getBeansOfType<Foo>()` variant., + * Extension for [ListableBeanFactory.getBeansWithAnnotation] providing a, + * `getBeansWithAnnotation<Foo>()` variant., + * Extension for [ListableBeanFactory.findAnnotationOnBean] providing a, + * `findAnnotationOnBean<Foo>("foo")` variant., +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, + * Extension for [ListableBeanFactory.getBeanNamesForType] providing a, + * `getBeanNamesForType<Foo>()` variant., +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Map<String, T> =, + * Extension for [ListableBeanFactory.getBeanNamesForAnnotation] providing a, + * `getBeansOfType<Foo>()` variant., + * Extension for [ListableBeanFactory.getBeansWithAnnotation] providing a, + * `getBeansWithAnnotation<Foo>()` variant., + * Extension for [ListableBeanFactory.findAnnotationOnBean] providing a, + * `findAnnotationOnBean<Foo>("foo")` variant., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt, + * Kotlin tests for {@link BeanUtils}., +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, + * Extension for [ListableBeanFactory.getBeanNamesForType] providing a, + * `getBeanNamesForType<Foo>()` variant., +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Map<String, T> =, + * Extension for [ListableBeanFactory.getBeanNamesForAnnotation] providing a, + * `getBeansOfType<Foo>()` variant., + * Extension for [ListableBeanFactory.getBeansWithAnnotation] providing a, + * `getBeansWithAnnotation<Foo>()` variant., + * Extension for [ListableBeanFactory.findAnnotationOnBean] providing a, + * `findAnnotationOnBean<Foo>("foo")` variant., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt, + * Kotlin tests for {@link BeanUtils}., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Mock object based tests for BeanFactory Kotlin extensions., +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, + * Extension for [ListableBeanFactory.getBeanNamesForType] providing a, + * `getBeanNamesForType<Foo>()` variant., +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Map<String, T> =, + * Extension for [ListableBeanFactory.getBeanNamesForAnnotation] providing a, + * `getBeansOfType<Foo>()` variant., + * Extension for [ListableBeanFactory.getBeansWithAnnotation] providing a, + * `getBeansWithAnnotation<Foo>()` variant., + * Extension for [ListableBeanFactory.findAnnotationOnBean] providing a, + * `findAnnotationOnBean<Foo>("foo")` variant., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt, + * Kotlin tests for {@link BeanUtils}., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Mock object based tests for BeanFactory Kotlin extensions., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/annotation/KotlinAutowiredTests.kt, +		@Autowired constructor(injectedFromSecondaryConstructor: Colour, injectedFromConstructor: TestBean,, +							   optional: String = "bar") : this(optional, injectedFromConstructor) {, +		constructor(injectedFromSecondaryConstructor: Colour, injectedFromConstructor: TestBean,, +					optional: String = "bar") : this(optional, injectedFromConstructor) {, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, + * Extension for [ListableBeanFactory.getBeanNamesForType] providing a, + * `getBeanNamesForType<Foo>()` variant., +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true,, +		allowEagerInit: Boolean = true): Map<String, T> =, + * Extension for [ListableBeanFactory.getBeanNamesForAnnotation] providing a, + * `getBeansOfType<Foo>()` variant., + * Extension for [ListableBeanFactory.getBeansWithAnnotation] providing a, + * `getBeansWithAnnotation<Foo>()` variant., + * Extension for [ListableBeanFactory.findAnnotationOnBean] providing a, + * `findAnnotationOnBean<Foo>("foo")` variant., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt, + * Kotlin tests for {@link BeanUtils}., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Mock object based tests for BeanFactory Kotlin extensions., +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/annotation/KotlinAutowiredTests.kt, +		@Autowired constructor(injectedFromSecondaryConstructor: Colour, injectedFromConstructor: TestBean,, +							   optional: String = "bar") : this(optional, injectedFromConstructor) {, +		constructor(injectedFromSecondaryConstructor: Colour, injectedFromConstructor: TestBean,, +					optional: String = "bar") : this(optional, injectedFromConstructor) {, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, + * @param condition the predicate to fulfill in order to take in account the inner, + * bean definition block, +open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) -> Boolean = { true }), +	: ApplicationContextInitializer<GenericApplicationContext> {]