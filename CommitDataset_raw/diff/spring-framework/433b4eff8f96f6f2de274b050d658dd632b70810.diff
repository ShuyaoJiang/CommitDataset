[+++ b/org.springframework.context.support/src/main/java/org/springframework/mail/MailSendException.java, + * Copyright 2002-2010 the original author or authors., +	 * @param msg the detail message, +	 * @param cause the root cause from the mail API in use, +	 * @param failedMessages Map of failed messages as keys and thrown, +	 * exceptions as values, +	 */, +	public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {, +		super(msg, cause);, +		this.failedMessages = new LinkedHashMap<Object, Exception>(failedMessages);, +		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()]);, +	}, +, +	/**, +	 * Constructor for registration of failed messages, with the, +	 * messages that failed as keys, and the thrown exceptions as values., +	 * <p>The messages should be the same that were originally passed, +	 * to the invoked send method., +		this(null, null, failedMessages);, +			StringBuilder sb = new StringBuilder();, +			String baseMessage = super.getMessage();, +			if (baseMessage != null) {, +				sb.append(baseMessage).append(". ");, +			}, +			sb.append("Failed messages: ");, +			StringBuilder sb = new StringBuilder(super.toString());, +			sb.append("; message exceptions (").append(this.messageExceptions.length).append(") are:");, +			ps.println(super.toString() + "; message exception details (" +, +			pw.println(super.toString() + "; message exception details (" +, +++ b/org.springframework.context.support/src/main/java/org/springframework/mail/MailSendException.java, + * Copyright 2002-2010 the original author or authors., +	 * @param msg the detail message, +	 * @param cause the root cause from the mail API in use, +	 * @param failedMessages Map of failed messages as keys and thrown, +	 * exceptions as values, +	 */, +	public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {, +		super(msg, cause);, +		this.failedMessages = new LinkedHashMap<Object, Exception>(failedMessages);, +		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()]);, +	}, +, +	/**, +	 * Constructor for registration of failed messages, with the, +	 * messages that failed as keys, and the thrown exceptions as values., +	 * <p>The messages should be the same that were originally passed, +	 * to the invoked send method., +		this(null, null, failedMessages);, +			StringBuilder sb = new StringBuilder();, +			String baseMessage = super.getMessage();, +			if (baseMessage != null) {, +				sb.append(baseMessage).append(". ");, +			}, +			sb.append("Failed messages: ");, +			StringBuilder sb = new StringBuilder(super.toString());, +			sb.append("; message exceptions (").append(this.messageExceptions.length).append(") are:");, +			ps.println(super.toString() + "; message exception details (" +, +			pw.println(super.toString() + "; message exception details (" +, +++ b/org.springframework.context.support/src/main/java/org/springframework/mail/javamail/JavaMailSenderImpl.java, + * Copyright 2002-2010 the original author or authors., +, +		Transport transport;, +			transport = getTransport(getSession());, +		}, +		catch (AuthenticationFailedException ex) {, +			throw new MailAuthenticationException(ex);, +		}, +		catch (MessagingException ex) {, +			// Effectively, all messages failed..., +			for (int i = 0; i < mimeMessages.length; i++) {, +				Object original = (originalMessages != null ? originalMessages[i] : mimeMessages[i]);, +				failedMessages.put(original, ex);, +			}, +			throw new MailSendException("Mail server connection failed", ex, failedMessages);, +		}, +, +			try {, +				if (!failedMessages.isEmpty()) {, +					throw new MailSendException("Failed to close server connection after message failures", ex,, +							failedMessages);, +				else {, +					throw new MailSendException("Failed to close server connection after message sending", ex);, +				}, +			}, +		}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/mail/MailSendException.java, + * Copyright 2002-2010 the original author or authors., +	 * @param msg the detail message, +	 * @param cause the root cause from the mail API in use, +	 * @param failedMessages Map of failed messages as keys and thrown, +	 * exceptions as values, +	 */, +	public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {, +		super(msg, cause);, +		this.failedMessages = new LinkedHashMap<Object, Exception>(failedMessages);, +		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()]);, +	}, +, +	/**]