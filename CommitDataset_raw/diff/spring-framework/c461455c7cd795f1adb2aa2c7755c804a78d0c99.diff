[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, + * @author Sam Brannen, +		List<ValueHolder> argumentValues = mbd.getConstructorArgumentValues().getGenericArgumentValues();, +		Object[] args = new Object[argumentValues.size()];, +		for (int i = 0; i < args.length; i++) {, +			args[i] = argumentValues.get(i).getValue();, +		}, +, +		Set<Class<?>> returnTypes = new HashSet<Class<?>>(1);, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic, +					&& factoryMethod.getName().equals(mbd.getFactoryMethodName()), +					&& factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +, +				Class<?> returnType = GenericTypeResolver.resolveParameterizedReturnType(factoryMethod, args);, +				if (returnType != null) {, +					returnTypes.add(returnType);, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, + * @author Sam Brannen, +		List<ValueHolder> argumentValues = mbd.getConstructorArgumentValues().getGenericArgumentValues();, +		Object[] args = new Object[argumentValues.size()];, +		for (int i = 0; i < args.length; i++) {, +			args[i] = argumentValues.get(i).getValue();, +		}, +, +		Set<Class<?>> returnTypes = new HashSet<Class<?>>(1);, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic, +					&& factoryMethod.getName().equals(mbd.getFactoryMethodName()), +					&& factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +, +				Class<?> returnType = GenericTypeResolver.resolveParameterizedReturnType(factoryMethod, args);, +				if (returnType != null) {, +					returnTypes.add(returnType);, +				}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, + * Copyright 2002-2012 the original author or authors., +, +import org.easymock.EasyMock;, + * @author Sam Brannen, +	/**, +	 * Tests support for parameterized {@code factory-method} declarations such, +	 * as EasyMock's {@code createMock()} method which has the following signature., +	 *, +	 * <pre>{@code, +	 * public static <T> T createMock(Class<T> toMock), +	 * }</pre>, +	 *, +	 * @since 3.2, +	 * @see SPR-9493, +	 */, +	@Test, +	public void parameterizedFactoryMethod() {, +		RootBeanDefinition rbd = new RootBeanDefinition(EasyMock.class);, +		rbd.setFactoryMethodName("createMock");, +		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class);, +, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("easyMock", rbd);, +, +		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class);, +		assertEquals(1, beans.size());, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, + * @author Sam Brannen, +		List<ValueHolder> argumentValues = mbd.getConstructorArgumentValues().getGenericArgumentValues();, +		Object[] args = new Object[argumentValues.size()];, +		for (int i = 0; i < args.length; i++) {, +			args[i] = argumentValues.get(i).getValue();, +		}, +, +		Set<Class<?>> returnTypes = new HashSet<Class<?>>(1);, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic, +					&& factoryMethod.getName().equals(mbd.getFactoryMethodName()), +					&& factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +, +				Class<?> returnType = GenericTypeResolver.resolveParameterizedReturnType(factoryMethod, args);, +				if (returnType != null) {, +					returnTypes.add(returnType);, +				}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, + * Copyright 2002-2012 the original author or authors., +, +import org.easymock.EasyMock;, + * @author Sam Brannen, +	/**, +	 * Tests support for parameterized {@code factory-method} declarations such, +	 * as EasyMock's {@code createMock()} method which has the following signature., +	 *, +	 * <pre>{@code, +	 * public static <T> T createMock(Class<T> toMock), +	 * }</pre>, +	 *, +	 * @since 3.2]