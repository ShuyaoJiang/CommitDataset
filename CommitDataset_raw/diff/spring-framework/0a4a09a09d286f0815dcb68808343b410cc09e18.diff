[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +		int statusCode = responseWrapper.getStatusCode();, +, +		if (isEligibleForEtag(request, responseWrapper, statusCode, body)) {, +				response.setContentLength(0);, +				copyBodyToResponse(body, response);, +			}, +		}, +		else {, +			if (logger.isTraceEnabled()) {, +				logger.trace("Response with status code [" + statusCode + "] not eligible for ETag");, +			}, +			copyBodyToResponse(body, response);, +		}, +	}, +, +	private void copyBodyToResponse(byte[] body, HttpServletResponse response) throws IOException {, +		if (body.length > 0) {, +	 * Indicates whether the given request and response are eligible for ETag generation., +	 *, +	 * <p>Default implementation returns {@code true} for response status codes in the {@code 2xx} series., +	 *, +	 * @param request the HTTP request, +	 * @param response the HTTP response, +	 * @param responseStatusCode the HTTP response status code, +	 * @param responseBody the response body, +	 * @return {@code true} if eligible for ETag generation; {@code false} otherwise, +	 */, +	protected boolean isEligibleForEtag(HttpServletRequest request,, +			HttpServletResponse response,, +			int responseStatusCode,, +			byte[] responseBody) {, +		return (responseStatusCode >= 200 && responseStatusCode < 300);, +	}, +, +	/**, +		private int statusCode = -1;, +, +		public void setStatus(int sc) {, +			super.setStatus(sc);, +			this.statusCode = sc;, +		}, +, +		@Override, +		public void setStatus(int sc, String sm) {, +			super.setStatus(sc, sm);, +			this.statusCode = sc;, +		}, +, +		@Override, +		public void sendError(int sc) throws IOException {, +			super.sendError(sc);, +			this.statusCode = sc;, +		}, +, +		@Override, +		public void sendError(int sc, String msg) throws IOException {, +			super.sendError(sc, msg);, +			this.statusCode = sc;, +		}, +, +		@Override, +		private int getStatusCode() {, +			return statusCode;, +		}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +		int statusCode = responseWrapper.getStatusCode();, +, +		if (isEligibleForEtag(request, responseWrapper, statusCode, body)) {, +				response.setContentLength(0);, +				copyBodyToResponse(body, response);, +			}, +		}, +		else {, +			if (logger.isTraceEnabled()) {, +				logger.trace("Response with status code [" + statusCode + "] not eligible for ETag");, +			}, +			copyBodyToResponse(body, response);, +		}, +	}, +, +	private void copyBodyToResponse(byte[] body, HttpServletResponse response) throws IOException {, +		if (body.length > 0) {, +	 * Indicates whether the given request and response are eligible for ETag generation., +	 *, +	 * <p>Default implementation returns {@code true} for response status codes in the {@code 2xx} series., +	 *, +	 * @param request the HTTP request, +	 * @param response the HTTP response, +	 * @param responseStatusCode the HTTP response status code, +	 * @param responseBody the response body, +	 * @return {@code true} if eligible for ETag generation; {@code false} otherwise, +	 */, +	protected boolean isEligibleForEtag(HttpServletRequest request,, +			HttpServletResponse response,, +			int responseStatusCode,, +			byte[] responseBody) {, +		return (responseStatusCode >= 200 && responseStatusCode < 300);, +	}]