[+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2015 the original author or authors., + * {@link Resource} implementation for class path resources. Uses either a, + * given {@link ClassLoader} or a given {@link Class} for loading resources., +, +++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2015 the original author or authors., + * {@link Resource} implementation for class path resources. Uses either a, + * given {@link ClassLoader} or a given {@link Class} for loading resources., +, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2015 the original author or authors., +	 * This implementation checks whether the underlying file is marked as writable, +	 * (and corresponds to an actual file with content, not to a directory)., +	 * @see java.io.File#canWrite(), +	 * @see java.io.File#isDirectory(), +	 */, +	@Override, +	public boolean isWritable() {, +		return (this.file.canWrite() && !this.file.isDirectory());, +	}, +, +	/**, +	 * This implementation opens a FileOutputStream for the underlying file., +	 * @see java.io.FileOutputStream, +	 */, +	@Override, +	public OutputStream getOutputStream() throws IOException {, +		return new FileOutputStream(this.file);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2015 the original author or authors., + * {@link Resource} implementation for class path resources. Uses either a, + * given {@link ClassLoader} or a given {@link Class} for loading resources., +, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2015 the original author or authors., +	 * This implementation checks whether the underlying file is marked as writable, +	 * (and corresponds to an actual file with content, not to a directory)., +	 * @see java.io.File#canWrite(), +	 * @see java.io.File#isDirectory(), +	 */, +	@Override, +	public boolean isWritable() {, +		return (this.file.canWrite() && !this.file.isDirectory());, +	}, +, +	/**, +	 * This implementation opens a FileOutputStream for the underlying file., +	 * @see java.io.FileOutputStream, +	 */, +	@Override, +	public OutputStream getOutputStream() throws IOException {, +		return new FileOutputStream(this.file);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * Supports resolution as File, and also as URL., + * Implements the extended {@link WritableResource} interface., + * @author Juergen Hoeller, +	 * This implementation checks whether the underlying file is marked as writable, +	 * (and corresponds to an actual file with content, not to a directory)., +	 * @see java.nio.file.Files#isWritable(Path), +	 * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...), +	 */, +	@Override, +	public boolean isWritable() {, +		return (Files.isWritable(this.path) && !Files.isDirectory(this.path));, +	}, +, +	/**, +	 * This implementation opens a OutputStream for the underlying file., +	 * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...), +	 */, +	@Override, +	public OutputStream getOutputStream() throws IOException {, +		if (Files.isDirectory(this.path)) {, +			throw new FileNotFoundException(getPath() + " (is a directory)");, +		}, +		return Files.newOutputStream(this.path);, +	}, +, +	/**, +		// We can not use the superclass method since it uses conversion to a File and, +		// only a Path on the default file system can be converted to a File...]