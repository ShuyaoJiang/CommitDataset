[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassWithPlaceholderConfigurerBeanTests.java, + * Copyright 2002-2017 the original author or authors., + * A configuration class that registers a non-static placeholder configurer {@code @Bean}, + * method cannot also have {@code @Value} fields. Logically, the config class must be, + * instantiated in order to invoke the placeholder configurer bean method, and it is a, + * chicken-and-egg problem to process the {@code @Value} field., + * <p>Therefore, placeholder configurer bean methods should either be {@code static} or, + * put in separate configuration classes as has been done in the tests below. Simply said,, + * placeholder configurer {@code @Bean} methods and {@code @Value} fields in the same, + * configuration class are mutually exclusive unless the placeholder configurer, + * {@code @Bean} method is {@code static}., + * @author Sam Brannen, +	 * Test which proves that a non-static property placeholder bean cannot be declared, +	 * in the same configuration class that has a {@code @Value} field in need of, +	 * placeholder replacement. It's an obvious chicken-and-egg issue., +	 *, +	 * <p>One solution is to do as {@link #valueFieldsAreProcessedWhenPlaceholderConfigurerIsSegregated()}, +	 *, +	 * <p>Another solution is to simply make the {@code @Bean} method for the property, +	 * placeholder {@code static} as in, +	 * {@link #valueFieldsAreProcessedWhenStaticPlaceholderConfigurerIsIntegrated()}., +	@Test, +	@SuppressWarnings("resource"), +		// Proof that the @Value field did not get set:, +	@SuppressWarnings("resource"), +	public void valueFieldsAreProcessedWhenStaticPlaceholderConfigurerIsIntegrated() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithValueFieldAndStaticPlaceholderConfigurer.class);, +		System.setProperty("test.name", "foo");, +		ctx.refresh();, +		System.clearProperty("test.name");, +, +		TestBean testBean = ctx.getBean(TestBean.class);, +		assertThat(testBean.getName(), equalTo("foo"));, +	}, +, +	@Test, +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +	public void valueFieldsResolveToPlaceholderSpecifiedDefaultValuesWithPlaceholderConfigurer() {, +	@Test, +	@SuppressWarnings("resource"), +	public void valueFieldsResolveToPlaceholderSpecifiedDefaultValuesWithoutPlaceholderConfigurer() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithValueField.class);, +		// ctx.register(ConfigWithPlaceholderConfigurer.class);, +		ctx.refresh();, +, +		TestBean testBean = ctx.getBean(TestBean.class);, +		assertThat(testBean.getName(), equalTo("bar"));, +	}, +, +	@Configuration, +	static class ConfigWithValueFieldAndStaticPlaceholderConfigurer {, +, +		@Value("${test.name}"), +		private String name;, +, +		@Bean, +		public ITestBean testBean() {, +			return new TestBean(this.name);, +		}, +, +		@Bean, +		public static PropertySourcesPlaceholderConfigurer ppc() {, +			return new PropertySourcesPlaceholderConfigurer();, +		}, +	}, +]