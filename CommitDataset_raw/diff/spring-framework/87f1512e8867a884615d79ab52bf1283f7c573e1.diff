[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +		properties.putAll(getFlattenedMap(map));, +	/**, +	 * Return a flattened version of the given map, recursively following any nested Map, +	 * or Collection values. Entries from the resulting map retain the same order as the, +	 * source. When called with the Map from a {@link MatchCallback} the result will, +	 * contain the same values as the {@link MatchCallback} Properties., +	 * @param source the source map, +	 * @return a flattened map, +	 * @since 4.2.3, +	 */, +	protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {, +		Map<String, Object> result = new LinkedHashMap<String, Object>();, +		buildFlattenedMap(result, source, null);, +		return result;, +	}, +, +	private void buildFlattenedMap(Map<String, Object> result, Map<String, Object> source, String path) {, +		for (Entry<String, Object> entry : source.entrySet()) {, +				result.put(key, value);, +				buildFlattenedMap(result, map, key);, +					buildFlattenedMap(result,, +				result.put(key, value == null ? "" : value);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +		properties.putAll(getFlattenedMap(map));, +	/**, +	 * Return a flattened version of the given map, recursively following any nested Map, +	 * or Collection values. Entries from the resulting map retain the same order as the, +	 * source. When called with the Map from a {@link MatchCallback} the result will, +	 * contain the same values as the {@link MatchCallback} Properties., +	 * @param source the source map, +	 * @return a flattened map, +	 * @since 4.2.3, +	 */, +	protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {, +		Map<String, Object> result = new LinkedHashMap<String, Object>();, +		buildFlattenedMap(result, source, null);, +		return result;, +	}, +, +	private void buildFlattenedMap(Map<String, Object> result, Map<String, Object> source, String path) {, +		for (Entry<String, Object> entry : source.entrySet()) {, +				result.put(key, value);, +				buildFlattenedMap(result, map, key);, +					buildFlattenedMap(result,, +				result.put(key, value == null ? "" : value);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/YamlProcessorTests.java, +import java.util.LinkedHashMap;, +, +	@Test, +	@SuppressWarnings("unchecked"), +	public void flattenedMapIsSameAsPropertiesButOrdered() {, +		this.processor.setResources(new ByteArrayResource(, +				"foo: bar\nbar:\n spam: bucket".getBytes()));, +		this.processor.process(new MatchCallback() {, +			@Override, +			public void process(Properties properties, Map<String, Object> map) {, +				assertEquals("bucket", properties.get("bar.spam"));, +				assertEquals(2, properties.size());, +				Map<String, Object> flattenedMap = processor.getFlattenedMap(map);, +				assertEquals("bucket", flattenedMap.get("bar.spam"));, +				assertEquals(2, flattenedMap.size());, +				assertTrue(flattenedMap instanceof LinkedHashMap);, +				Map<String, Object> bar = (Map<String, Object>) map.get("bar");, +				assertEquals("bucket", bar.get("spam"));, +			}, +		});, +	}]