[+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);, +++ b/spring-core/src/main/java/org/springframework/core/PrioritizedParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * {@link ParameterNameDiscoverer} implementation that tries several discoverer, + * delegates in succession. Those added first in the {@code addDiscoverer} method, + * have highest priority. If one returns {@code null}, the next will be tried., + * <p>The default behavior is to return {@code null} if no discoverer matches., +	private final List<ParameterNameDiscoverer> parameterNameDiscoverers = new LinkedList<>();, +	 * Add a further {@link ParameterNameDiscoverer} delegate to the list of, +	 * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks., +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);, +++ b/spring-core/src/main/java/org/springframework/core/PrioritizedParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * {@link ParameterNameDiscoverer} implementation that tries several discoverer, + * delegates in succession. Those added first in the {@code addDiscoverer} method, + * have highest priority. If one returns {@code null}, the next will be tried., + * <p>The default behavior is to return {@code null} if no discoverer matches., +	private final List<ParameterNameDiscoverer> parameterNameDiscoverers = new LinkedList<>();, +	 * Add a further {@link ParameterNameDiscoverer} delegate to the list of, +	 * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks., +++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * @see java.lang.reflect.Method#getParameters(), +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);, +++ b/spring-core/src/main/java/org/springframework/core/PrioritizedParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * {@link ParameterNameDiscoverer} implementation that tries several discoverer, + * delegates in succession. Those added first in the {@code addDiscoverer} method, + * have highest priority. If one returns {@code null}, the next will be tried., + * <p>The default behavior is to return {@code null} if no discoverer matches., +	private final List<ParameterNameDiscoverer> parameterNameDiscoverers = new LinkedList<>();, +	 * Add a further {@link ParameterNameDiscoverer} delegate to the list of, +	 * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks., +++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * @see java.lang.reflect.Method#getParameters(), +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, + * Copyright 2002-2017 the original author or authors., +	private final Comparator<T> comparator;, +	private final Converter<S, T> converter;, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java, +	private void collectStereotypesOnAnnotations(Set<Element> seen, Set<String> stereotypes, Element element) {, +	private void collectStereotypesOnTypes(Set<Element> seen, Set<String> stereotypes, Element type) {, +	private Element collectStereotypes(Set<Element> seen, Set<String> stereotypes, Element element,, +			AnnotationMirror annotation) {, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);, +++ b/spring-core/src/main/java/org/springframework/core/PrioritizedParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * {@link ParameterNameDiscoverer} implementation that tries several discoverer, + * delegates in succession. Those added first in the {@code addDiscoverer} method, + * have highest priority. If one returns {@code null}, the next will be tried., + * <p>The default behavior is to return {@code null} if no discoverer matches., +	private final List<ParameterNameDiscoverer> parameterNameDiscoverers = new LinkedList<>();, +	 * Add a further {@link ParameterNameDiscoverer} delegate to the list of, +	 * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks., +++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java, + * Copyright 2002-2017 the original author or authors., + * @see java.lang.reflect.Method#getParameters(), +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, + * Copyright 2002-2017 the original author or authors., +	private final Comparator<T> comparator;, +	private final Converter<S, T> converter;, +++ b/spring-core/src/main/java/org/springframework/util/InvalidMimeTypeException.java, + * Copyright 2002-2017 the original author or authors.]