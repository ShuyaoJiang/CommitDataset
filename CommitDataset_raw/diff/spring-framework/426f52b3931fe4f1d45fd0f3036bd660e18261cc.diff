[+++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, + * Copyright 2002-2014 the original author or authors., +import test.mixin.LockMixinAdvisor;, +, +		assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.getName());, +			@Override, +			public int hashCode() {, +				return 0;, +			}, +		aop.setConstructorArguments(new Object[] {"Rob Harrop", 22}, new Class<?>[] {String.class, int.class});, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, + * Copyright 2002-2014 the original author or authors., +import test.mixin.LockMixinAdvisor;, +, +		assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.getName());, +			@Override, +			public int hashCode() {, +				return 0;, +			}, +		aop.setConstructorArguments(new Object[] {"Rob Harrop", 22}, new Class<?>[] {String.class, int.class});, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	private static final ConcurrentReferenceHashMap<ResolvableType, ResolvableType> cache =, +			new ConcurrentReferenceHashMap<ResolvableType, ResolvableType>(256);, +, +		return forType(type, null, null);, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, + * Copyright 2002-2014 the original author or authors., +import test.mixin.LockMixinAdvisor;, +, +		assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.getName());, +			@Override, +			public int hashCode() {, +				return 0;, +			}, +		aop.setConstructorArguments(new Object[] {"Rob Harrop", 22}, new Class<?>[] {String.class, int.class});, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	private static final ConcurrentReferenceHashMap<ResolvableType, ResolvableType> cache =, +			new ConcurrentReferenceHashMap<ResolvableType, ResolvableType>(256);, +, +		return forType(type, null, null);, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2014 the original author or authors., +	 * @param referenceType the reference type used for entries (soft or weak), +	 */, +	public ConcurrentReferenceHashMap(int initialCapacity, ReferenceType referenceType) {, +		this(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, referenceType);, +	}, +, +	/**, +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * @param initialCapacity the initial capacity of the map, +	 * @param referenceType the reference type used for entries (soft or weak), +		int roundedUpSegmentCapacity = (int) ((initialCapacity + size - 1L) / size);, +			this.segments[i] = new Segment(roundedUpSegmentCapacity);, +	 * Factory method that returns the {@link ReferenceManager}., +	 * This method will be called once for each {@link Segment}., +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, + * Copyright 2002-2014 the original author or authors., +import test.mixin.LockMixinAdvisor;, +, +		assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.getName());, +			@Override, +			public int hashCode() {, +				return 0;, +			}, +		aop.setConstructorArguments(new Object[] {"Rob Harrop", 22}, new Class<?>[] {String.class, int.class});, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	private static final ConcurrentReferenceHashMap<ResolvableType, ResolvableType> cache =, +			new ConcurrentReferenceHashMap<ResolvableType, ResolvableType>(256);, +, +		return forType(type, null, null);, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2014 the original author or authors., +	 * @param referenceType the reference type used for entries (soft or weak), +	 */, +	public ConcurrentReferenceHashMap(int initialCapacity, ReferenceType referenceType) {, +		this(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, referenceType);, +	}, +, +	/**, +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * @param initialCapacity the initial capacity of the map, +	 * @param referenceType the reference type used for entries (soft or weak), +		int roundedUpSegmentCapacity = (int) ((initialCapacity + size - 1L) / size);, +			this.segments[i] = new Segment(roundedUpSegmentCapacity);, +	 * Factory method that returns the {@link ReferenceManager}., +	 * This method will be called once for each {@link Segment}., +++ b/spring-core/src/main/java/org/springframework/util/CustomizableThreadCreator.java, + * Simple customizable helper class for creating new {@link Thread} instances., + * Provides various bean properties: thread name prefix, thread priority, etc., +	private final AtomicInteger threadCount = new AtomicInteger(0);, +	 * <p>Default is "false": Concrete factories usually support explicit cancelling., +	 * Hence, if the application shuts down, Runnables will by default finish their, +	 * execution., +	 * <p>Specify "true" for eager shutdown of threads which still actively execute, +	 * a {@link Runnable} at the time that the application itself shuts down., +	 * (or {@code null} for the default group)., +	 * Template method for the creation of a new {@link Thread}., +	 * <p>The default implementation creates a new Thread for the given, +	 * {@link Runnable}, applying an appropriate thread name.]