[+++ b/src/docs/asciidoc/web/webflux.adoc, +[[webflux-codecs-streaming]], +==== HTTP Streaming, +[.small]#<<web.adoc#mvc-ann-async-http-streaming,Same in Spring MVC>>#, +, +When a multi-value, reactive type such as `Flux` is used for response rendering, it may, +be collected to a `List` and rendered as a whole (e.g. JSON array), or it may be treated, +as an infinite stream with each item flushed immediately. The determination for which is, +which is made based on content negotiation and the selected media type which may imply a, +streaming format (e.g. "text/event-stream", "application/stream+json"), or not, +(e.g. "application/json")., +, +When streaming to the HTTP response, regardless of the media type (e.g. text/event-stream,, +application/stream+json), it is important to send data periodically, since the write would, +fail if the client has disconnected. The send could take the form of an empty, +(comment-only) SSE event, or any other data that the other side would have to interpret as, +a heartbeat and ignore., +, +, +For additional details, see <<webflux-codecs-streaming>> and, +<<webflux-codecs-jackson,JSON rendering>>., +See <<webflux-ann-jackson>> for details., +++ b/src/docs/asciidoc/web/webflux.adoc, +[[webflux-codecs-streaming]], +==== HTTP Streaming, +[.small]#<<web.adoc#mvc-ann-async-http-streaming,Same in Spring MVC>>#, +, +When a multi-value, reactive type such as `Flux` is used for response rendering, it may, +be collected to a `List` and rendered as a whole (e.g. JSON array), or it may be treated, +as an infinite stream with each item flushed immediately. The determination for which is, +which is made based on content negotiation and the selected media type which may imply a, +streaming format (e.g. "text/event-stream", "application/stream+json"), or not, +(e.g. "application/json")., +, +When streaming to the HTTP response, regardless of the media type (e.g. text/event-stream,, +application/stream+json), it is important to send data periodically, since the write would, +fail if the client has disconnected. The send could take the form of an empty, +(comment-only) SSE event, or any other data that the other side would have to interpret as, +a heartbeat and ignore., +, +, +For additional details, see <<webflux-codecs-streaming>> and, +<<webflux-codecs-jackson,JSON rendering>>., +See <<webflux-ann-jackson>> for details., +++ b/src/docs/asciidoc/web/webmvc.adoc, +The Servlet API was originally built for making a single pass through the Filter-Servlet, +chain. Asynchronous request processing, added in Servlet 3.0, allows applications to exit, +the Filter-Servlet chain but leave the response open for further processing. The Spring MVC, +async support is built around that mechanism. When a controller returns a `DeferredResult`,, +the Filter-Servlet chain is exited and the Servlet container thread is released. Later when, +the `DeferredResult` is set, an ASYNC dispatch (to the same URL) is made during which the, +controller is mapped again but rather than invoking it, the `DeferredResult` value is used, +(as if the controller returned it) to resume processing., +By contrast Spring WebFlux is neither built on the Servlet API, nor does it need such an, +asynchronous request processing feature because it is asynchronous by design. Asynchronous, +handling is built into all framework contracts and is intrinsically supported through ::, +stages of request processing., +From a programming model perspective, both Spring MVC and Spring WebFlux support, +asynchronous and <<mvc-ann-async-reactive-types>> as return values in controller methods., +Spring MVC even supports streaming, including reactive back pressure. However individual, +writes to the response remain blocking (and performed on a separate thread) unlike WebFlux, +that relies on non-blocking I/O and does not need an extra thread for each write., +model attributes. Spring WebFlux does support all that., +[.small]#<<web-reactive.adoc#webflux-codecs-streaming,Same in Spring WebFlux>>#, +[.small]#<<web-reactive.adoc#webflux-codecs-streaming,Same in Spring WebFlux>>#, +When streaming to the response via reactive types, Spring MVC supports reactive back, +pressure, but still needs to use blocking I/O to perform actual writes. This is done, +through the <<mvc-ann-async-configuration-spring-mvc,configured>> MVC `TaskExecutor` on, +a separate thread in order to avoid blocking the upstream source (e.g. a `Flux` returned, +from the `WebClient`). By default a `SyncTaskExecutor` is used which is not suitable for, +production. https://jira.spring.io/browse/SPR-16203[SPR-16203] will provide better, +defaults in Spring Framework 5.1. In the mean time please configure the executor through, +the <<mvc-ann-async-configuration-spring-mvc,MVC config>>., +, +, +, +[[mvc-ann-async-disconnects]], +=== Disconnects, +[.small]#<<web-reactive.adoc#webflux-codecs-streaming,Same in Spring WebFlux>>#, +, +The Servlet API does not provide any notification when a remote client goes away., +Therefore while streaming to the response, whether via <<mvc-ann-async-sse,SseEmitter>> or, +<<mvc-ann-async-reactive-types,reactive types>, it is important to send data periodically,, +since the write would fail if the client has disconnected. The send could take the form, +of an empty (comment-only) SSE event, or any other data that the other side would have to, +to interpret as a heartbeat and ignore., +, +Alternatively consider using web messaging solutions such as, +<<websocket-stomp,STOMP over WebSocket>> or WebSocket with <<websocket-fallback,SockJS>>, +that have a built-in heartbeat mechanism.]