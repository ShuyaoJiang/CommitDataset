[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +	private static final ResolvableType FORM_MAP_TYPE =, +	private static final ResolvableType MULTIPART_MAP_TYPE = ResolvableType.forClassWithGenerics(, +	private static final ResolvableType PART_TYPE = ResolvableType.forClass(Part.class);, +, +					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context);, +					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()));, +	 * Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a, +	 * {@link MultiValueMap}., +					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context);, +					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,, +							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()));, +		};, +	}, +, +	/**, +	 * Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a, +	 * {@link MultiValueMap}., +	 * @return a {@code BodyExtractor} that reads multipart data, +	 */, +	// Note that the returned BodyExtractor is parameterized to ServerHttpRequest, not, +	// ReactiveHttpInputMessage like other methods, since reading form data only typically happens on, +	// the server-side, +	public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {, +		return (serverRequest, context) -> {, +			HttpMessageReader<Part> messageReader =, +					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context);, +			return context.serverResponse(), +					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()));, +	private static <T> HttpMessageReader<T> messageReader(ResolvableType elementType,, +			MediaType mediaType, BodyExtractor.Context context) {, +				.filter(messageReader -> messageReader.canRead(elementType, mediaType)), +				.map(BodyExtractors::<T>cast), +						"Could not find HttpMessageReader that supports \"" + mediaType +, +								"\" and \"" + elementType + "\""));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +	private static final ResolvableType FORM_MAP_TYPE =, +	private static final ResolvableType MULTIPART_MAP_TYPE = ResolvableType.forClassWithGenerics(, +	private static final ResolvableType PART_TYPE = ResolvableType.forClass(Part.class);, +, +					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context);, +					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()));, +	 * Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a, +	 * {@link MultiValueMap}., +					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context);, +					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,, +							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()));, +		};, +	}, +, +	/**, +	 * Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a, +	 * {@link MultiValueMap}., +	 * @return a {@code BodyExtractor} that reads multipart data, +	 */, +	// Note that the returned BodyExtractor is parameterized to ServerHttpRequest, not, +	// ReactiveHttpInputMessage like other methods, since reading form data only typically happens on, +	// the server-side, +	public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {, +		return (serverRequest, context) -> {, +			HttpMessageReader<Part> messageReader =, +					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context);, +			return context.serverResponse(), +					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()));, +	private static <T> HttpMessageReader<T> messageReader(ResolvableType elementType,, +			MediaType mediaType, BodyExtractor.Context context) {, +				.filter(messageReader -> messageReader.canRead(elementType, mediaType)), +				.map(BodyExtractors::<T>cast), +						"Could not find HttpMessageReader that supports \"" + mediaType +, +								"\" and \"" + elementType + "\""));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.http.codec.multipart.FilePart;, +import org.springframework.http.codec.multipart.FormFieldPart;, +import org.springframework.http.codec.multipart.MultipartHttpMessageReader;, +import org.springframework.http.codec.multipart.Part;, +import org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader;, +import org.springframework.util.FileCopyUtils;, +		SynchronossPartHttpMessageReader partReader = new SynchronossPartHttpMessageReader();, +		messageReaders.add(partReader);, +		messageReaders.add(new MultipartHttpMessageReader(partReader));, +, +		messageReaders.add(new FormHttpMessageReader());, +	public void toParts() throws Exception {, +		BodyExtractor<Flux<Part>, ServerHttpRequest> extractor = BodyExtractors.toParts();, +, +		String bodyContents = "-----------------------------9051914041544843365972754266\r\n" +, +				"Content-Disposition: form-data; name=\"text\"\r\n" +, +				"\r\n" +, +				"text default\r\n" +, +				"-----------------------------9051914041544843365972754266\r\n" +, +				"Content-Disposition: form-data; name=\"file1\"; filename=\"a.txt\"\r\n" +, +				"Content-Type: text/plain\r\n" +]