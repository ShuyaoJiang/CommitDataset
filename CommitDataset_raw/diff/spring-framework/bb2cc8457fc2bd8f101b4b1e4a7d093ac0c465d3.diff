[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()),, +						RequestConditionFactory.parseProduces(annotation.produces(), annotation.headers()), +				);, +			result = mapping.getProduces().compareTo(otherMapping.getProduces(), this.requestAcceptHeader);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()),, +						RequestConditionFactory.parseProduces(annotation.produces(), annotation.headers()), +				);, +			result = mapping.getProduces().compareTo(otherMapping.getProduces(), this.requestAcceptHeader);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.ProducesRequestCondition;, +	private final ProducesRequestCondition producesCondition;, +, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null, null);, +							 ConsumesRequestCondition consumesCondition,, +							 ProducesRequestCondition producesCondition) {, +		this.producesCondition = producesCondition != null ? producesCondition : new ProducesRequestCondition();, +	 * Returns the patterns of this request mapping info., +	 * Returns the request method conditions of this request mapping info., +	 * Returns the request parameters conditions of this request mapping info., +	 * Returns the request headers conditions of this request mapping info., +	 * Returns the request consumes conditions of this request mapping info., +	 * Returns the request produces conditions of this request mapping info., +	 */, +	public ProducesRequestCondition getProduces() {, +		return producesCondition;, +	}, +, +	/**, +	 * @return a new request mapping info containing conditions from both keys, +		ProducesRequestCondition produces = this.producesCondition.combine(methodKey.producesCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes, produces);, +	 * @return a new request mapping info that contains all matching attributes, or {@code null} if not all conditions match, +		ProducesRequestCondition matchingProducesCondition = producesCondition.getMatchingCondition(request);, +				matchingConsumesCondition == null || matchingProducesCondition == null)  {, +						matchingHeadersCondition, matchingConsumesCondition, matchingProducesCondition);, +					this.consumesCondition.equals(other.consumesCondition) &&, +					this.producesCondition.equals(other.producesCondition));, +			result = 31 * result + producesCondition.hashCode();, +		builder.append(",produces=").append(producesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()),, +						RequestConditionFactory.parseProduces(annotation.produces(), annotation.headers()), +				);, +			result = mapping.getProduces().compareTo(otherMapping.getProduces(), this.requestAcceptHeader);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.ProducesRequestCondition;, +	private final ProducesRequestCondition producesCondition;, +, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null, null);, +							 ConsumesRequestCondition consumesCondition,, +							 ProducesRequestCondition producesCondition) {, +		this.producesCondition = producesCondition != null ? producesCondition : new ProducesRequestCondition();, +	 * Returns the patterns of this request mapping info., +	 * Returns the request method conditions of this request mapping info., +	 * Returns the request parameters conditions of this request mapping info., +	 * Returns the request headers conditions of this request mapping info., +	 * Returns the request consumes conditions of this request mapping info., +	 * Returns the request produces conditions of this request mapping info., +	 */, +	public ProducesRequestCondition getProduces() {, +		return producesCondition;, +	}, +, +	/**, +	 * @return a new request mapping info containing conditions from both keys, +		ProducesRequestCondition produces = this.producesCondition.combine(methodKey.producesCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes, produces);, +	 * @return a new request mapping info that contains all matching attributes, or {@code null} if not all conditions match, +		ProducesRequestCondition matchingProducesCondition = producesCondition.getMatchingCondition(request);, +				matchingConsumesCondition == null || matchingProducesCondition == null)  {, +						matchingHeadersCondition, matchingConsumesCondition, matchingProducesCondition);, +					this.consumesCondition.equals(other.consumesCondition) &&, +					this.producesCondition.equals(other.producesCondition));, +			result = 31 * result + producesCondition.hashCode();, +		builder.append(",produces=").append(producesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, + * Represents a collection of consumes conditions, typically obtained from {@link org.springframework.web.bind.annotation.RequestMapping#consumes(), + * &#64;RequestMapping.consumes()}., + * @see RequestConditionFactory#parseConsumes(String...), + * @see RequestConditionFactory#parseConsumes(String[], String[]), +		extends MediaTypesRequestCondition<ConsumesRequestCondition.ConsumeRequestCondition>, +	 * Creates a default set of consumes request conditions., +	 * Combines this collection of request condition with another. Returns {@code other}, unless it has the default value, +	 * (i.e. <code>&#42;/&#42;</code>)., +		return this.getMostSpecificCondition().compareTo(other.getMostSpecificCondition());, +	static class ConsumeRequestCondition extends MediaTypesRequestCondition.MediaTypeRequestCondition {, +, +		ConsumeRequestCondition(String expression) {, +			super(expression);, +		}, +, +		ConsumeRequestCondition(MediaType mediaType, boolean negated) {, +			super(mediaType, negated);, +		}, +, +		@Override, +		protected boolean match(HttpServletRequest request, MediaType mediaType) {, +			MediaType contentType = getContentType(request);]