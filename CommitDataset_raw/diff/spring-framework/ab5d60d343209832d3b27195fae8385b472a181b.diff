[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsHandler.java, +import org.springframework.websocket.CloseStatus;, +, + * A handler for SockJS messages., +	/**, +	 * A new connection was opened and is ready for use., +	 */, +	void afterConnectionEstablished(SockJsSession session) throws Exception;, +	/**, +	 * Handle an incoming message., +	 */, +	void handleMessage(String message, SockJsSession session) throws Exception;, +	/**, +	 * TODO, +	 */, +	void handleError(Throwable exception, SockJsSession session);, +	/**, +	 * A connection has been closed., +	 */, +	void afterConnectionClosed(CloseStatus status, SockJsSession session);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsHandler.java, +import org.springframework.websocket.CloseStatus;, +, + * A handler for SockJS messages., +	/**, +	 * A new connection was opened and is ready for use., +	 */, +	void afterConnectionEstablished(SockJsSession session) throws Exception;, +	/**, +	 * Handle an incoming message., +	 */, +	void handleMessage(String message, SockJsSession session) throws Exception;, +	/**, +	 * TODO, +	 */, +	void handleError(Throwable exception, SockJsSession session);, +	/**, +	 * A connection has been closed., +	 */, +	void afterConnectionClosed(CloseStatus status, SockJsSession session);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsHandlerAdapter.java, +import org.springframework.websocket.CloseStatus;, +, +	public void afterConnectionEstablished(SockJsSession session) throws Exception {, +	public void handleMessage(String message, SockJsSession session) throws Exception {, +	public void handleError(Throwable exception, SockJsSession session) {, +	public void afterConnectionClosed(CloseStatus status, SockJsSession session) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsHandler.java, +import org.springframework.websocket.CloseStatus;, +, + * A handler for SockJS messages., +	/**, +	 * A new connection was opened and is ready for use., +	 */, +	void afterConnectionEstablished(SockJsSession session) throws Exception;, +	/**, +	 * Handle an incoming message., +	 */, +	void handleMessage(String message, SockJsSession session) throws Exception;, +	/**, +	 * TODO, +	 */, +	void handleError(Throwable exception, SockJsSession session);, +	/**, +	 * A connection has been closed., +	 */, +	void afterConnectionClosed(CloseStatus status, SockJsSession session);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsHandlerAdapter.java, +import org.springframework.websocket.CloseStatus;, +, +	public void afterConnectionEstablished(SockJsSession session) throws Exception {, +	public void handleMessage(String message, SockJsSession session) throws Exception {, +	public void handleError(Throwable exception, SockJsSession session) {, +	public void afterConnectionClosed(CloseStatus status, SockJsSession session) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +import org.springframework.websocket.CloseStatus;, +, + * Allows sending SockJS messages as well as closing the underlying connection., +	/**, +	 * Return a unique SockJS session identifier., +	 */, +	/**, +	 * Return whether the connection is still open., +	 */, +	boolean isOpen();, +, +	/**, +	 * Send a message., +	 */, +	/**, +	 * Close the underlying connection with status 1000, i.e. equivalent to:, +	 * <pre>, +	 * session.close(CloseStatus.NORMAL);, +	 * </pre>, +	 */, +	void close() throws IOException;, +, +	/**, +	 * Close the underlying connection with the given close status., +	 */]