[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/scheduling/backportconcurrent/ScheduledExecutorFactoryBeanTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.backportconcurrent;, +, +import edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler;, +import edu.emory.mathcs.backport.java.util.concurrent.ScheduledExecutorService;, +import edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory;, +import junit.framework.AssertionFailedError;, +import junit.framework.TestCase;, +import org.easymock.MockControl;, +, +import org.springframework.core.task.NoOpRunnable;, +, +/**, + * @author Rick Evans, + * @author Juergen Hoeller, + */, +public class ScheduledExecutorFactoryBeanTests extends TestCase {, +, +	public void testThrowsExceptionIfPoolSizeIsLessThanZero() throws Exception {, +		try {, +			ScheduledExecutorFactoryBean factory = new ScheduledExecutorFactoryBean();, +			factory.setPoolSize(-1);, +			factory.setScheduledExecutorTasks(new ScheduledExecutorTask[]{, +				new NoOpScheduledExecutorTask(), +			});, +			factory.afterPropertiesSet();, +			fail("Pool size less than zero");, +		}, +		catch (IllegalArgumentException expected) {, +		}, +	}, +, +	public void testShutdownNowIsPropagatedToTheExecutorOnDestroy() throws Exception {, +		MockControl mockScheduledExecutorService = MockControl.createNiceControl(ScheduledExecutorService.class);, +		final ScheduledExecutorService executor = (ScheduledExecutorService) mockScheduledExecutorService.getMock();, +		executor.shutdownNow();, +		mockScheduledExecutorService.setReturnValue(null);, +		mockScheduledExecutorService.replay();, +, +		ScheduledExecutorFactoryBean factory = new ScheduledExecutorFactoryBean() {, +			protected ScheduledExecutorService createExecutor(int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {, +				return executor;, +			}, +		};, +		factory.setScheduledExecutorTasks(new ScheduledExecutorTask[]{, +			new NoOpScheduledExecutorTask(), +		});, +		factory.afterPropertiesSet();, +		factory.destroy();, +, +		mockScheduledExecutorService.verify();, +	}, +, +	public void testShutdownIsPropagatedToTheExecutorOnDestroy() throws Exception {, +		MockControl mockScheduledExecutorService = MockControl.createNiceControl(ScheduledExecutorService.class);, +		final ScheduledExecutorService executor = (ScheduledExecutorService) mockScheduledExecutorService.getMock();, +		executor.shutdown();, +		mockScheduledExecutorService.setVoidCallable();, +		mockScheduledExecutorService.replay();, +, +		ScheduledExecutorFactoryBean factory = new ScheduledExecutorFactoryBean() {, +			protected ScheduledExecutorService createExecutor(int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {, +				return executor;, +			}, +		};, +		factory.setScheduledExecutorTasks(new ScheduledExecutorTask[]{, +			new NoOpScheduledExecutorTask(), +		});, +		factory.setWaitForTasksToCompleteOnShutdown(true);, +		factory.afterPropertiesSet();, +		factory.destroy();, +, +		mockScheduledExecutorService.verify();, +	}, +, +	public void testOneTimeExecutionIsSetUpAndFiresCorrectly() throws Exception {, +		MockControl mockRunnable = MockControl.createControl(Runnable.class);, +		Runnable runnable = (Runnable) mockRunnable.getMock();, +		runnable.run();, +		mockRunnable.setVoidCallable();, +		mockRunnable.replay();, +]