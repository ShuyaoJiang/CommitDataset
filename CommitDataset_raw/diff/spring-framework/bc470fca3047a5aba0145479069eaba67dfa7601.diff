[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * via {@code @SessionAttributes} on the underlying controller., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * via {@code @SessionAttributes} on the underlying controller., +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/SessionAttributesHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr1", String.class));, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr2", String.class));, +		assertFalse(sessionAttributesHandler.isHandlerSessionAttribute("simple", String.class));, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * via {@code @SessionAttributes} on the underlying controller., +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/SessionAttributesHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr1", String.class));, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr2", String.class));, +		assertFalse(sessionAttributesHandler.isHandlerSessionAttribute("simple", String.class));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java, + * Context to assist with binding request data onto Objects and provide access, + * to a shared {@link Model} with controller-specific attributes., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * via {@code @SessionAttributes} on the underlying controller., +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/SessionAttributesHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr1", String.class));, +		assertTrue(sessionAttributesHandler.isHandlerSessionAttribute("attr2", String.class));, +		assertFalse(sessionAttributesHandler.isHandlerSessionAttribute("simple", String.class));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java, + * Context to assist with binding request data onto Objects and provide access, + * to a shared {@link Model} with controller-specific attributes., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +import org.springframework.lang.Nullable;, +		return Mono, +				.zip(resultList, objectArray -> {, +							.map(object -> handleResult(((HandlerResult) object), bindingContext)), +				}), +				.flatMap(completionList -> Mono.when(completionList));, +			if (isAsyncVoidType(type, adapter)) {, +	private boolean isAsyncVoidType(ResolvableType type, @Nullable  ReactiveAdapter adapter) {, +		return adapter != null && (adapter.isNoValue() || type.resolveGeneric() == Void.class);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +	 * Derive the model attribute name for the given method parameter based on, +	 * a {@code @ModelAttribute} parameter annotation (if present) or falling, +	 * back on parameter type based conventions., +	 * @return the derived name, +	 * @see Conventions#getVariableNameForParameter(MethodParameter), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java]