[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/SmartObjectFactory.java, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * <p>Allows for specifying explicit construction arguments, along the, +	 * lines of {@link BeanFactory#getBean(String, Object...)}., +	 * @param args arguments to use when creating a corresponding instance, +	 * @return an instance of the bean, +	 * @throws BeansException in case of creation errors, +	 * @see #getObject(), +	 */, +	T getObject(Object... args) throws BeansException;, +, +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/SmartObjectFactory.java, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * <p>Allows for specifying explicit construction arguments, along the, +	 * lines of {@link BeanFactory#getBean(String, Object...)}., +	 * @param args arguments to use when creating a corresponding instance, +	 * @return an instance of the bean, +	 * @throws BeansException in case of creation errors, +	 * @see #getObject(), +	 */, +	T getObject(Object... args) throws BeansException;, +, +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import org.springframework.beans.factory.BeanFactory;, +	/**, +	 * Resolve the specified bean name, as a candidate result of the matching, +	 * algorithm for this dependency, to a bean instance from the given factory., +	 * <p>The default implementation calls {@link BeanFactory#getBean(String)}., +	 * Subclasses may provide additional arguments or other customizations., +	 * @param beanName the bean name, as a candidate result for this dependency, +	 * @param beanFactory the associated factory, +	 * @return the bean instance (never {@code null}), +	 * @see BeanFactory#getBean(String), +	 */, +	public Object resolveCandidate(String beanName, BeanFactory beanFactory) {, +		return beanFactory.getBean(beanName);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/SmartObjectFactory.java, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * <p>Allows for specifying explicit construction arguments, along the, +	 * lines of {@link BeanFactory#getBean(String, Object...)}., +	 * @param args arguments to use when creating a corresponding instance, +	 * @return an instance of the bean, +	 * @throws BeansException in case of creation errors, +	 * @see #getObject(), +	 */, +	T getObject(Object... args) throws BeansException;, +, +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import org.springframework.beans.factory.BeanFactory;, +	/**, +	 * Resolve the specified bean name, as a candidate result of the matching, +	 * algorithm for this dependency, to a bean instance from the given factory., +	 * <p>The default implementation calls {@link BeanFactory#getBean(String)}., +	 * Subclasses may provide additional arguments or other customizations., +	 * @param beanName the bean name, as a candidate result for this dependency, +	 * @param beanFactory the associated factory, +	 * @return the bean instance (never {@code null}), +	 * @see BeanFactory#getBean(String), +	 */, +	public Object resolveCandidate(String beanName, BeanFactory beanFactory) {, +		return beanFactory.getBean(beanName);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				if (descriptor.isRequired() || !indicatesMultipleBeans(type)) {, +				result.put(candidateName, descriptor.resolveCandidate(candidateName, this));, +					result.put(candidateName, descriptor.resolveCandidate(candidateName, this));, +						result.put(candidateName, descriptor.resolveCandidate(candidateName, this));, +		public Object createOptionalDependency(DependencyDescriptor descriptor, String beanName, final Object... args) {, +				@Override, +				public Object resolveCandidate(String beanName, BeanFactory beanFactory) {, +					return (!ObjectUtils.isEmpty(args) ? beanFactory.getBean(beanName, args) :, +							super.resolveCandidate(beanName, beanFactory));, +				}, +		public Object getObject(final Object... args) throws BeansException {, +			if (this.optional) {, +				return new OptionalDependencyFactory().createOptionalDependency(this.descriptor, this.beanName, args);, +			}, +			else {, +				DependencyDescriptor descriptorToUse = new DependencyDescriptor(descriptor) {]