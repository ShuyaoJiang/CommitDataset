[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java, + * @author Stephane Nicoll, +	 * #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * {@link #createDispatcherServlet(WebApplicationContext)}., +		DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext);, +	 * Create a {@link DispatcherServlet} with the specified {@link WebApplicationContext}., +	 */, +	protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +		return new DispatcherServlet(servletAppContext);, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java, + * @author Stephane Nicoll, +	 * #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * {@link #createDispatcherServlet(WebApplicationContext)}., +		DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext);, +	 * Create a {@link DispatcherServlet} with the specified {@link WebApplicationContext}., +	 */, +	protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +		return new DispatcherServlet(servletAppContext);, +	}, +, +	/**, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java, + * Copyright 2002-2015 the original author or authors., +		assertEquals(MyDispatcherServlet.class, servlet.getClass());, +, +		protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +			return new MyDispatcherServlet(servletAppContext);, +		}, +, +		@Override, +	}, +	private static class MyDispatcherServlet extends DispatcherServlet {, +		public MyDispatcherServlet(WebApplicationContext webApplicationContext) {, +			super(webApplicationContext);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java, + * @author Stephane Nicoll, +	 * #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * {@link #createDispatcherServlet(WebApplicationContext)}., +		DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext);, +	 * Create a {@link DispatcherServlet} with the specified {@link WebApplicationContext}., +	 */, +	protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +		return new DispatcherServlet(servletAppContext);, +	}, +, +	/**, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java, + * Copyright 2002-2015 the original author or authors., +		assertEquals(MyDispatcherServlet.class, servlet.getClass());, +, +		protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +			return new MyDispatcherServlet(servletAppContext);, +		}, +, +		@Override, +	}, +	private static class MyDispatcherServlet extends DispatcherServlet {, +		public MyDispatcherServlet(WebApplicationContext webApplicationContext) {, +			super(webApplicationContext);, +		}, +++ b/src/asciidoc/web-mvc.adoc, +container. An abstract base class implementation of this interface named, +Finally, if you need to further customize the `DispatcherServlet` itself, you can, +override the `createDispatcherServlet` method., +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java, + * @author Stephane Nicoll, +	 * #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * {@link #createDispatcherServlet(WebApplicationContext)}., +		DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext);, +	 * Create a {@link DispatcherServlet} with the specified {@link WebApplicationContext}., +	 */, +	protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +		return new DispatcherServlet(servletAppContext);, +	}, +, +	/**, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java, + * Copyright 2002-2015 the original author or authors., +		assertEquals(MyDispatcherServlet.class, servlet.getClass());, +, +		protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {, +			return new MyDispatcherServlet(servletAppContext);, +		}, +, +		@Override, +	}, +	private static class MyDispatcherServlet extends DispatcherServlet {, +		public MyDispatcherServlet(WebApplicationContext webApplicationContext) {, +			super(webApplicationContext);, +		}, +++ b/src/asciidoc/web-mvc.adoc, +container. An abstract base class implementation of this interface named, +Finally, if you need to further customize the `DispatcherServlet` itself, you can, +override the `createDispatcherServlet` method., +]