[+++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, +				LazyMethodValidationConfig.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	}, +, +	@Test, +	public void testLazyValidatorForMethodValidationWithProxyTargetClass() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(, +				LazyMethodValidationConfigWithProxyTargetClass.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +, +	@Configuration, +	public static class LazyMethodValidationConfigWithProxyTargetClass {, +, +		@Bean, +		public static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {, +			MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor();, +			postProcessor.setValidator(validator);, +			postProcessor.setProxyTargetClass(true);, +			return postProcessor;, +		}, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, +				LazyMethodValidationConfig.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	}, +, +	@Test, +	public void testLazyValidatorForMethodValidationWithProxyTargetClass() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(, +				LazyMethodValidationConfigWithProxyTargetClass.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +, +	@Configuration, +	public static class LazyMethodValidationConfigWithProxyTargetClass {, +, +		@Bean, +		public static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {, +			MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor();, +			postProcessor.setValidator(validator);, +			postProcessor.setProxyTargetClass(true);, +			return postProcessor;, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, +, +		// Call from interface-based proxy handle, allowing for an efficient check?, +		if (clazz.isInterface()) {, +		// Call from CGLIB proxy handle, potentially implementing a FactoryBean method?, +		Class<?> factoryBeanType = null;, +		if (SmartFactoryBean.class.isAssignableFrom(clazz)) {, +			factoryBeanType = SmartFactoryBean.class;, +		}, +		else if (FactoryBean.class.isAssignableFrom(clazz)) {, +			factoryBeanType = FactoryBean.class;, +		}, +		return (factoryBeanType != null && !method.getName().equals("getObject") &&, +				ClassUtils.hasMethod(factoryBeanType, method.getName(), method.getParameterTypes()));, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/MethodValidationTests.java, +				LazyMethodValidationConfig.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +		ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5));, +	}, +, +	@Test, +	public void testLazyValidatorForMethodValidationWithProxyTargetClass() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(, +				LazyMethodValidationConfigWithProxyTargetClass.class, CustomValidatorBean.class,, +				MyValidBean.class, MyValidFactoryBean.class);, +, +	@Configuration, +	public static class LazyMethodValidationConfigWithProxyTargetClass {, +, +		@Bean, +		public static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {, +			MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor();, +			postProcessor.setValidator(validator);, +			postProcessor.setProxyTargetClass(true);, +			return postProcessor;, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, +, +		// Call from interface-based proxy handle, allowing for an efficient check?, +		if (clazz.isInterface()) {, +		// Call from CGLIB proxy handle, potentially implementing a FactoryBean method?, +		Class<?> factoryBeanType = null;, +		if (SmartFactoryBean.class.isAssignableFrom(clazz)) {, +			factoryBeanType = SmartFactoryBean.class;, +		}, +		else if (FactoryBean.class.isAssignableFrom(clazz)) {, +			factoryBeanType = FactoryBean.class;, +		}]