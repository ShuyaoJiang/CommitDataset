[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java, +		// Similar to when writing Java, it only knows about java.lang by default, +	public void removeImport(String prefix) {, +		this.knownPackagePrefixes.remove(prefix);		, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java, +		// Similar to when writing Java, it only knows about java.lang by default, +	public void removeImport(String prefix) {, +		this.knownPackagePrefixes.remove(prefix);		, +	}, +, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	public void testResolvingList() throws Exception {, +		StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		try {, +			assertFalse(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +			fail("should have failed to find List");, +		} catch (EvaluationException ee) {, +			// success - List not found, +		}, +		((StandardTypeLocator)context.getTypeLocator()).registerImport("java.util");, +		assertTrue(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +	}, +	, +	public void testResolvingString() throws Exception {, +		Class stringClass = parser.parseExpression("T(String)").getValue(Class.class);, +		assertEquals(String.class,stringClass);, +	}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java, +		// Similar to when writing Java, it only knows about java.lang by default, +	public void removeImport(String prefix) {, +		this.knownPackagePrefixes.remove(prefix);		, +	}, +, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	public void testResolvingList() throws Exception {, +		StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		try {, +			assertFalse(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +			fail("should have failed to find List");, +		} catch (EvaluationException ee) {, +			// success - List not found, +		}, +		((StandardTypeLocator)context.getTypeLocator()).registerImport("java.util");, +		assertTrue(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +	}, +	, +	public void testResolvingString() throws Exception {, +		Class stringClass = parser.parseExpression("T(String)").getValue(Class.class);, +		assertEquals(String.class,stringClass);, +	}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/StandardTypeLocatorTests.java, +	public void testImports() throws EvaluationException {, +		assertEquals(1,prefixes.size());, +		assertFalse(prefixes.contains("java.util"));, +		// currently does not know about java.util by default, +//		assertEquals(java.util.List.class,locator.findType("List"));, +		, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java, +		// Similar to when writing Java, it only knows about java.lang by default, +	public void removeImport(String prefix) {, +		this.knownPackagePrefixes.remove(prefix);		, +	}, +, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	public void testResolvingList() throws Exception {, +		StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		try {, +			assertFalse(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +			fail("should have failed to find List");, +		} catch (EvaluationException ee) {, +			// success - List not found, +		}, +		((StandardTypeLocator)context.getTypeLocator()).registerImport("java.util");, +		assertTrue(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +	}, +	, +	public void testResolvingString() throws Exception {, +		Class stringClass = parser.parseExpression("T(String)").getValue(Class.class);, +		assertEquals(String.class,stringClass);, +	}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/StandardTypeLocatorTests.java, +	public void testImports() throws EvaluationException {, +		assertEquals(1,prefixes.size());, +		assertFalse(prefixes.contains("java.util"));, +		// currently does not know about java.util by default, +//		assertEquals(java.util.List.class,locator.findType("List"));]