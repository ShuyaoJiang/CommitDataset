[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +		Set<String> result = new LinkedHashSet<String>();, +			result.addAll(resolver.resolveFileExtensions(mediaType));, +		return new ArrayList<String>(result);, +	}, +, +	/**, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all known file extensions., +	 */, +	public List<String> getAllFileExtensions() {, +		Set<String> result = new LinkedHashSet<String>();, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			result.addAll(resolver.getAllFileExtensions());, +		}, +		return new ArrayList<String>(result);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +		Set<String> result = new LinkedHashSet<String>();, +			result.addAll(resolver.resolveFileExtensions(mediaType));, +		return new ArrayList<String>(result);, +	}, +, +	/**, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all known file extensions., +	 */, +	public List<String> getAllFileExtensions() {, +		Set<String> result = new LinkedHashSet<String>();, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			result.addAll(resolver.getAllFileExtensions());, +		}, +		return new ArrayList<String>(result);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +import java.util.ArrayList;, +	private final List<String> allFileExtensions = new ArrayList<String>();, +, +	 * Find the file extensions mapped to the given MediaType., +	public List<String> getAllFileExtensions() {, +		return Collections.unmodifiableList(this.allFileExtensions);, +	}, +, +	protected MediaType lookupMediaType(String extension) {, +			this.allFileExtensions.add(extension);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +		Set<String> result = new LinkedHashSet<String>();, +			result.addAll(resolver.resolveFileExtensions(mediaType));, +		return new ArrayList<String>(result);, +	}, +, +	/**, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all known file extensions., +	 */, +	public List<String> getAllFileExtensions() {, +		Set<String> result = new LinkedHashSet<String>();, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			result.addAll(resolver.getAllFileExtensions());, +		}, +		return new ArrayList<String>(result);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +import java.util.ArrayList;, +	private final List<String> allFileExtensions = new ArrayList<String>();, +, +	 * Find the file extensions mapped to the given MediaType., +	public List<String> getAllFileExtensions() {, +		return Collections.unmodifiableList(this.allFileExtensions);, +	}, +, +	protected MediaType lookupMediaType(String extension) {, +			this.allFileExtensions.add(extension);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MediaTypeFileExtensionResolver.java, +	/**, +	 * Return all known file extensions., +	 * @return a list of extensions or an empty list, never {@code null}, +	 */, +	List<String> getAllFileExtensions();, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +		Set<String> result = new LinkedHashSet<String>();, +			result.addAll(resolver.resolveFileExtensions(mediaType));, +		return new ArrayList<String>(result);, +	}, +, +	/**, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all known file extensions., +	 */, +	public List<String> getAllFileExtensions() {, +		Set<String> result = new LinkedHashSet<String>();, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			result.addAll(resolver.getAllFileExtensions());, +		}, +		return new ArrayList<String>(result);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +import java.util.ArrayList;, +	private final List<String> allFileExtensions = new ArrayList<String>();, +, +	 * Find the file extensions mapped to the given MediaType., +	public List<String> getAllFileExtensions() {, +		return Collections.unmodifiableList(this.allFileExtensions);]