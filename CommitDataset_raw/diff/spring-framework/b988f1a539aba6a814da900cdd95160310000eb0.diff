[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +/**, + * Base class for converters that convert to and from collection types (arrays and java.util.Collection types), + * @author Keith Donald, + */, +	/**, +	 * The collection type to convert to., +	 */, +	/**, +	 * The type of elements in the target collection., +	 */, +	/**, +	 * The converter to use to convert elements to the {@link #getTargetElementType()}., +	 * Returns {@link NoOpConversionExecutor#INSTANCE} if no converter could be eagerly resolved from type descriptor metadata., +	 */, +	/**, +	 * Override to perform collection conversion , +	 * @param sourceCollection the source collection to convert from, an instance of sourceCollectionType, which must be either an array or java.util.Collection type, +	 * @return the converted target collection, an instance of targetCollectionType, +	 * @throws Exception an exception occurred during the conversion, +	 */, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +/**, + * Base class for converters that convert to and from collection types (arrays and java.util.Collection types), + * @author Keith Donald, + */, +	/**, +	 * The collection type to convert to., +	 */, +	/**, +	 * The type of elements in the target collection., +	 */, +	/**, +	 * The converter to use to convert elements to the {@link #getTargetElementType()}., +	 * Returns {@link NoOpConversionExecutor#INSTANCE} if no converter could be eagerly resolved from type descriptor metadata., +	 */, +	/**, +	 * Override to perform collection conversion , +	 * @param sourceCollection the source collection to convert from, an instance of sourceCollectionType, which must be either an array or java.util.Collection type, +	 * @return the converted target collection, an instance of targetCollectionType, +	 * @throws Exception an exception occurred during the conversion, +	 */, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/ArrayToCollection.java, + * specified. Supports type conversion of array elements when a parameterized target collection type descriptor is provided., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +/**, + * Base class for converters that convert to and from collection types (arrays and java.util.Collection types), + * @author Keith Donald, + */, +	/**, +	 * The collection type to convert to., +	 */, +	/**, +	 * The type of elements in the target collection., +	 */, +	/**, +	 * The converter to use to convert elements to the {@link #getTargetElementType()}., +	 * Returns {@link NoOpConversionExecutor#INSTANCE} if no converter could be eagerly resolved from type descriptor metadata., +	 */, +	/**, +	 * Override to perform collection conversion , +	 * @param sourceCollection the source collection to convert from, an instance of sourceCollectionType, which must be either an array or java.util.Collection type, +	 * @return the converted target collection, an instance of targetCollectionType, +	 * @throws Exception an exception occurred during the conversion, +	 */, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/ArrayToCollection.java, + * specified. Supports type conversion of array elements when a parameterized target collection type descriptor is provided., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionConversionUtils.java, +/**, + * Util code shared by collection converters extending from {@link AbstractCollectionConverter}., + */, +	/**, +	 * Get the java.util.Collection implementation class that should be used for the given target collection type., +	 * @param targetCollectionType the target collection type, may be an interface, +	 * @return the collection impl to use, +	 */, +	public static Class<?> getImpl(Class<?> targetCollectionType) {, +		if (targetCollectionType.isInterface()) {, +			if (List.class.equals(targetCollectionType)) {, +			} else if (Set.class.equals(targetCollectionType)) {, +			} else if (SortedSet.class.equals(targetCollectionType)) {, +			} else if (Collection.class.equals(targetCollectionType)) {, +				throw new IllegalArgumentException("Unsupported collection interface [" + targetCollectionType.getName() + "]");, +			return targetCollectionType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +/**, + * Base class for converters that convert to and from collection types (arrays and java.util.Collection types), + * @author Keith Donald, + */, +	/**, +	 * The collection type to convert to., +	 */, +	/**, +	 * The type of elements in the target collection., +	 */, +	/**, +	 * The converter to use to convert elements to the {@link #getTargetElementType()}., +	 * Returns {@link NoOpConversionExecutor#INSTANCE} if no converter could be eagerly resolved from type descriptor metadata., +	 */, +	/**]