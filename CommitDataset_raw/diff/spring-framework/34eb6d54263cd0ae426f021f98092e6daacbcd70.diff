[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			Observable<byte[]> observable = RxJava1Converter.from(writePublisher), +					.map(buffer -> new Buffer(buffer).asBytes());, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			Observable<byte[]> observable = RxJava1Converter.from(writePublisher), +					.map(buffer -> new Buffer(buffer).asBytes());, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +	public Publisher<Void> setBody(final Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return (s -> writePublisher.subscribe(subscriber));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			Observable<byte[]> observable = RxJava1Converter.from(writePublisher), +					.map(buffer -> new Buffer(buffer).asBytes());, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +	public Publisher<Void> setBody(final Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return (s -> writePublisher.subscribe(subscriber));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, +import reactor.Publishers;, +	@Override, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			applyHeaders();, +			return (subscriber -> writePublisher.subscribe(bodySubscriber));, +		}));, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return this.channel.writeWith(Publishers.map(writePublisher, Buffer::new));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			Observable<byte[]> observable = RxJava1Converter.from(writePublisher), +					.map(buffer -> new Buffer(buffer).asBytes());, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +	public Publisher<Void> setBody(final Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			return (s -> writePublisher.subscribe(subscriber));, +		}));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, +import reactor.Publishers;, +	@Override, +	public Publisher<Void> setBody(Publisher<ByteBuffer> publisher) {, +		return Publishers.lift(publisher, new WriteWithOperator<>(writePublisher -> {, +			applyHeaders();, +			return (subscriber -> writePublisher.subscribe(bodySubscriber));, +		}));, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/WriteWithOperator.java, +					writeFunction.apply(this).subscribe(new DownstreamBridge(downstream()));, +					writeFunction.apply(this).subscribe(new DownstreamBridge(downstream()));, +		public void subscribe(Subscriber<? super T> writeSubscriber) {, +				this.writeSubscriber = writeSubscriber;, +			if (readyToWrite) {, +	private class DownstreamBridge implements Subscriber<Void> {, +, +		private final Subscriber<? super Void> downstream;, +]