[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, + * {@link DispatcherServlet}. Add this annotation to an application @{@link Configuration} class. It will in, + * turn import the @{@link Configuration} class {@link WebMvcConfiguration}, which provides default Spring MVC , + * configuration., + * <p>To customize the imported configuration implement {@link WebMvcConfigurer}, or more conveniently extend, + * {@link WebMvcConfigurerAdapter} overriding specific methods. Your @{@link Configuration} class and any other, + * Spring bean that implements {@link WebMvcConfigurer} will be detected and given an opportunity to customize , + * the default Spring MVC configuration through the callback methods on the {@link WebMvcConfigurer} interface., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, + * {@link DispatcherServlet}. Add this annotation to an application @{@link Configuration} class. It will in, + * turn import the @{@link Configuration} class {@link WebMvcConfiguration}, which provides default Spring MVC , + * configuration., + * <p>To customize the imported configuration implement {@link WebMvcConfigurer}, or more conveniently extend, + * {@link WebMvcConfigurerAdapter} overriding specific methods. Your @{@link Configuration} class and any other, + * Spring bean that implements {@link WebMvcConfigurer} will be detected and given an opportunity to customize , + * the default Spring MVC configuration through the callback methods on the {@link WebMvcConfigurer} interface., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorConfigurer.java, + * {@link WebRequestInterceptor}. Interceptors can be registered with a set of path patterns., +	private final List<Object> interceptors = new ArrayList<Object>();, +		register(interceptor);, +		register(asHandlerInterceptorArray(interceptor));, +		register( interceptors);, +		register(asHandlerInterceptorArray(interceptors));, +		registerMappedInterceptors(pathPatterns, interceptor);, +		registerMappedInterceptors(pathPatterns, asHandlerInterceptorArray(interceptors));, +		registerMappedInterceptors(pathPatterns, interceptors);, +		registerMappedInterceptors(pathPatterns, asHandlerInterceptorArray(interceptors));, +	 * Stores the given set of {@link HandlerInterceptor}s internally., +	 * @param interceptors one or more interceptors to be stored, +	 */, +	protected void register(HandlerInterceptor...interceptors) {, +		Assert.notEmpty(interceptors, "At least one interceptor must be provided");, +		for (HandlerInterceptor interceptor : interceptors) {, +			this.interceptors.add(interceptor);, +		}, +	}, +, +	/**, +	protected void registerMappedInterceptors(String[] pathPatterns, HandlerInterceptor...interceptors) {, +		Assert.notEmpty(pathPatterns, "Path patterns must be provided");, +			this.interceptors.add(new MappedInterceptor(pathPatterns, interceptor));, +	protected List<Object> getInterceptors() {, +		return interceptors;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, + * {@link DispatcherServlet}. Add this annotation to an application @{@link Configuration} class. It will in, + * turn import the @{@link Configuration} class {@link WebMvcConfiguration}, which provides default Spring MVC , + * configuration., + * <p>To customize the imported configuration implement {@link WebMvcConfigurer}, or more conveniently extend, + * {@link WebMvcConfigurerAdapter} overriding specific methods. Your @{@link Configuration} class and any other, + * Spring bean that implements {@link WebMvcConfigurer} will be detected and given an opportunity to customize , + * the default Spring MVC configuration through the callback methods on the {@link WebMvcConfigurer} interface., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorConfigurer.java, + * {@link WebRequestInterceptor}. Interceptors can be registered with a set of path patterns., +	private final List<Object> interceptors = new ArrayList<Object>();, +		register(interceptor);, +		register(asHandlerInterceptorArray(interceptor));, +		register( interceptors);, +		register(asHandlerInterceptorArray(interceptors));, +		registerMappedInterceptors(pathPatterns, interceptor);, +		registerMappedInterceptors(pathPatterns, asHandlerInterceptorArray(interceptors));, +		registerMappedInterceptors(pathPatterns, interceptors);, +		registerMappedInterceptors(pathPatterns, asHandlerInterceptorArray(interceptors));, +	 * Stores the given set of {@link HandlerInterceptor}s internally., +	 * @param interceptors one or more interceptors to be stored, +	 */, +	protected void register(HandlerInterceptor...interceptors) {, +		Assert.notEmpty(interceptors, "At least one interceptor must be provided");, +		for (HandlerInterceptor interceptor : interceptors) {, +			this.interceptors.add(interceptor);, +		}, +	}, +, +	/**, +	protected void registerMappedInterceptors(String[] pathPatterns, HandlerInterceptor...interceptors) {, +		Assert.notEmpty(pathPatterns, "Path patterns must be provided");, +			this.interceptors.add(new MappedInterceptor(pathPatterns, interceptor));, +	protected List<Object> getInterceptors() {, +		return interceptors;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, + * Provides default configuration for Spring MVC applications by registering Spring MVC infrastructure components , + * to be detected by the {@link DispatcherServlet}. This class is imported whenever @{@link EnableWebMvc} is , + * added to an @{@link Configuration} class., + * <p>See the base class {@link WebMvcConfigurationSupport} for a list of registered instances. This class is closed, + * for extension. However, the configuration it provides can be customized by having your @{@link Configuration}, + * class implement {@link WebMvcConfigurer} or more conveniently extend from {@link WebMvcConfigurerAdapter}., + * <p>This class will detect your @{@link Configuration} class and any other @{@link Configuration} classes that , + * implement {@link WebMvcConfigurer} via autowiring and will allow each of them to participate in the process , + * of configuring Spring MVC through the configuration callbacks defined in {@link WebMvcConfigurer}., +class WebMvcConfiguration extends WebMvcConfigurationSupport {, +	@Override, +	protected void configureInterceptors(InterceptorConfigurer configurer) {, +	@Override, +	protected void configureViewControllers(ViewControllerConfigurer configurer) {, +	@Override, +	protected void configureResourceHandling(ResourceConfigurer configurer) {, +	@Override, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +	@Override, +		RequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter();, +	@Override]