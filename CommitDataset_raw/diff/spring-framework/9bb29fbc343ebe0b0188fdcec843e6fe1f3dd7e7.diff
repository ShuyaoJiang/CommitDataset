[+++ b/src/asciidoc/testing.adoc, +The __Spring MVC Test framework__ provides first class JUnit support for testing, +Spring MVC code using a fluent API. It's built on the, +http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/package-summary.html[Servlet API mock objects], +from the `spring-test` module and hence does not require a running Servlet container,, +it uses the `DispatcherServlet` thus providing full Spring MVC support, and, +may optionally load actual Spring configuration with the __TestContext framework__, +in addition to a standalone mode in which controllers may be instantiated manually, +and tested one at a time., +__Spring MVC Test__ also provides client-side support for testing code that uses, +the `RestTemplate`. Client-side tests mock the server responses and also do not, +require a running server., +It's easy to write a plain JUnit test for a Spring MVC controller. Simply instantiate, +the controller, inject it with mock or stub dependencies, and call its methods, +passing `MockHttpServletRequest`, `MockHttpServletResponse`, etc. if necessary., +However much remains untested, e.g. request mappings, data binding, type conversion,, +validation and much more. Furthermore other controller methods such as `@InitBinder`,, +`@ModelAttribute`, and `@ExceptionHandler` may also be invoked as part of the request, +processing lifecycle., +The goal of __Spring MVC Test__ is to provide an effective way of testing controllers, +by performing requests and generating responses through the `DispatcherServlet`., +__Spring MVC Test__ builds on the familiar "mock" implementations of the Servlet API, +everything should work as it does at runtime with a few notable exceptions as, +explained further below. Here is an example of using Spring MVC Test:, +The above test relies on the `WebApplicationContext` support of the __TestContext framework__, +to loads Spring configuration from an XML configuration file located in the same package, +as the test class but also supported is Java-based configuration. See these, +https://github.com/spring-projects/spring-framework/tree/master/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context[sample tests]., +The `MockMvc` instance is used to perform a request to `"/accounts/1"` and verify the, +resulting response has status 200, content type is `"application/json"`, and, +response body has a JSON property called "name" with the value "Lee". The jsonPath, +syntax is supported  through the Jayway https://github.com/jayway/JsonPath[JsonPath, +request that will be discussed below., +There are two main options for creating an instance of `MockMvc`., +The first is to load Spring MVC configuration through the __TestContext, +The second is to simply create a controller instance manually without loading Spring, +configuration. Instead basic default configuration, roughly comparable to that of, +the MVC JavaConfig or the MVC namespace, is automatically created and can be customized, +to a degree:, +Which setup option should you use?, +It's easy to perform requests using any HTTP method:, +You can also perform file upload requests that internally use, +`MockMultipartHttpServletRequest` so that there is no actual parsing of a multipart, +request but rather you have to set it up:, +You can specify query parameters in URI template style:, +Or you can add Servlet request parameters representing either query of form parameters:, +If application code relies on Servlet request parameters and doesn't check the query, +string explicitly (as is most often the case) then it doesn't matter which option you use., +Keep in mind however that query params provided with the URI template will be decoded while, +request parameters provided through the `param(...)` method are expected to be decoded., +servletPath with every performed request. Instead you can set up default request, +properties:, +The above properties will affect every request performed through the `MockMvc` instance., +If the same property is also specified on a given request, it overrides the default value., +That is why the HTTP method and URI in default request don't matter since they must be, +specified on every request., +Expectations can be defined by appending one or more `.andExpect(..)` calls after, +performing a request:, +`MockMvcResultMatchers.*` provides a number of expectations some of which are further, +nested with more detailed expectations., +Expectations fall in two general categories. The first category of assertions verify, +properties of the response, i.e the response status, headers, and content. Those, +are the most important results to assert., +The second category of assertions go beyond the response. They allow inspecting Spring, +MVC specific things such as which controller method processed the request, whether, +selected, what flash attributes were added, and so on. They also allow inspecting, +Servlet specific things such as request and session attributes. The following test, +When all tests repeat the same expectations you can set up common expectations once, +when building the `MockMvc` instance:]