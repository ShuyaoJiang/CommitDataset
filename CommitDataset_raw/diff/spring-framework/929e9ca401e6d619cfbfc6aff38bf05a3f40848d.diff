[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.messaging.converter.MessageConversionException;, +		Object payload = message.getPayload();, +, +		if (isEmptyPayload(payload)) {, +				String paramName = getParameterName(param);, +				BindingResult bindingResult = new BeanPropertyBindingResult(payload, paramName);, +		Class<?> targetClass = param.getParameterType();, +		if (ClassUtils.isAssignable(targetClass, payload.getClass())) {, +			validate(message, param, payload);, +			return payload;, +		else {, +			payload = this.converter.fromMessage(message, targetClass);, +			if (payload == null) {, +				throw new MessageConversionException(message,, +						"No converter found to convert to " + targetClass + ", message=" + message, null);, +			}, +			validate(message, param, payload);, +			return payload;, +		}, +	private String getParameterName(MethodParameter param) {, +		String paramName = param.getParameterName();, +		return (paramName == null ? "Arg " + param.getParameterIndex() : paramName);, +, +		if (this.validator == null) {, +			return;, +		}, +, +		for (Annotation annot : parameter.getParameterAnnotations()) {, +, +				BeanPropertyBindingResult bindingResult =, +						new BeanPropertyBindingResult(target, getParameterName(parameter));, +, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +				else {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.messaging.converter.MessageConversionException;, +		Object payload = message.getPayload();, +, +		if (isEmptyPayload(payload)) {, +				String paramName = getParameterName(param);, +				BindingResult bindingResult = new BeanPropertyBindingResult(payload, paramName);, +		Class<?> targetClass = param.getParameterType();, +		if (ClassUtils.isAssignable(targetClass, payload.getClass())) {, +			validate(message, param, payload);, +			return payload;, +		else {, +			payload = this.converter.fromMessage(message, targetClass);, +			if (payload == null) {, +				throw new MessageConversionException(message,, +						"No converter found to convert to " + targetClass + ", message=" + message, null);, +			}, +			validate(message, param, payload);, +			return payload;, +		}, +	private String getParameterName(MethodParameter param) {, +		String paramName = param.getParameterName();, +		return (paramName == null ? "Arg " + param.getParameterIndex() : paramName);, +, +		if (this.validator == null) {, +			return;, +		}, +, +		for (Annotation annot : parameter.getParameterAnnotations()) {, +, +				BeanPropertyBindingResult bindingResult =, +						new BeanPropertyBindingResult(target, getParameterName(parameter));, +, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +				else {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java, +import org.springframework.messaging.converter.MessageConversionException;, +		thrown.expect(MessageConversionException.class);, +		thrown.expectMessage("No converter found");, +		thrown.expect(MethodArgumentNotValidException.class);, +		thrown.expectMessage("invalid value");, +		assertEquals("invalidValue", this.resolver.resolveArgument(this.paramValidatedNotAnnotated, message));]