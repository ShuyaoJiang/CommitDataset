[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +		boolean inEscape = false;, +			if (inEscape) {, +				inEscape = false;, +				sb.append(c);, +				continue;				, +			}, +			// MySQL style escapes, +			if (c == '\\') {, +				inEscape = true;, +				sb.append(c);, +				continue;, +			}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +		boolean inEscape = false;, +			if (inEscape) {, +				inEscape = false;, +				sb.append(c);, +				continue;				, +			}, +			// MySQL style escapes, +			if (c == '\\') {, +				inEscape = true;, +				sb.append(c);, +				continue;, +			}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +		assertTestDatabaseCreated("Keith");, +	}, +, +	private void assertTestDatabaseCreated(String name) {, +		assertEquals(name, jdbcTemplate.queryForObject("select NAME from T_TEST", String.class));, +	public void testBuildWithNormalEscapedLiteral() throws Exception {, +		databasePopulator.addScript(resourceLoader.getResource("db-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("db-test-data-escaped-literal.sql"));, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {, +			connection.close();, +		}, +, +		assertTestDatabaseCreated("'Keith'");, +	}, +, +	@Test, +	public void testBuildWithMySQLEscapedLiteral() throws Exception {, +		databasePopulator.addScript(resourceLoader.getResource("db-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("db-test-data-mysql-escaped-literal.sql"));, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {, +			connection.close();, +		}, +, +		assertTestDatabaseCreated("\\$Keith\\$");, +	}, +, +	@Test, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +		boolean inEscape = false;, +			if (inEscape) {, +				inEscape = false;, +				sb.append(c);, +				continue;				, +			}, +			// MySQL style escapes, +			if (c == '\\') {, +				inEscape = true;, +				sb.append(c);, +				continue;, +			}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +		assertTestDatabaseCreated("Keith");, +	}, +, +	private void assertTestDatabaseCreated(String name) {, +		assertEquals(name, jdbcTemplate.queryForObject("select NAME from T_TEST", String.class));, +	public void testBuildWithNormalEscapedLiteral() throws Exception {, +		databasePopulator.addScript(resourceLoader.getResource("db-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("db-test-data-escaped-literal.sql"));, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {, +			connection.close();, +		}, +, +		assertTestDatabaseCreated("'Keith'");, +	}, +, +	@Test, +	public void testBuildWithMySQLEscapedLiteral() throws Exception {, +		databasePopulator.addScript(resourceLoader.getResource("db-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("db-test-data-mysql-escaped-literal.sql"));, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {]