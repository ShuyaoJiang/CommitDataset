[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.StandardOpenOption;, +			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.StandardOpenOption;, +			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.Files;, +import java.nio.file.StandardOpenOption;, + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation, + * uses NIO.2 API for read/write interactions. Nevertheless, in contrast to, + * {@link PathResource}, it primarily manages a {@code java.io.File} handle., + *, + * @see PathResource, + * @see java.nio.file.Files, +		return Files.newInputStream(this.file.toPath());, +		return Files.newOutputStream(this.file.toPath());, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.StandardOpenOption;, +			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.Files;, +import java.nio.file.StandardOpenOption;, + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation, + * uses NIO.2 API for read/write interactions. Nevertheless, in contrast to, + * {@link PathResource}, it primarily manages a {@code java.io.File} handle., + *, + * @see PathResource, + * @see java.nio.file.Files, +		return Files.newInputStream(this.file.toPath());, +		return Files.newOutputStream(this.file.toPath());, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * @see FileSystemResource, + * @see java.nio.file.Files, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path");, +		return Files.getLastModifiedTime(this.path).toMillis();, +	 * This implementation creates a PathResource, applying the given path, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.StandardOpenOption;, +			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.Files;, +import java.nio.file.StandardOpenOption;, + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation, + * uses NIO.2 API for read/write interactions. Nevertheless, in contrast to, + * {@link PathResource}, it primarily manages a {@code java.io.File} handle., + *, + * @see PathResource, + * @see java.nio.file.Files, +		return Files.newInputStream(this.file.toPath());, +		return Files.newOutputStream(this.file.toPath());, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * @see FileSystemResource, + * @see java.nio.file.Files, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path");, +		return Files.getLastModifiedTime(this.path).toMillis();, +	 * This implementation creates a PathResource, applying the given path, +++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java, +import java.nio.file.Files;, + * @see FileSystemUtils, +		return copy(Files.newInputStream(in.toPath()), Files.newOutputStream(out.toPath()));, +		copy(new ByteArrayInputStream(in), Files.newOutputStream(out.toPath()));, +		return copyToByteArray(Files.newInputStream(in.toPath()));, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.StandardOpenOption;, +			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.channels.FileChannel;, +import java.nio.file.Files;, +import java.nio.file.StandardOpenOption;, + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation, + * uses NIO.2 API for read/write interactions. Nevertheless, in contrast to, + * {@link PathResource}, it primarily manages a {@code java.io.File} handle., + *, + * @see PathResource, + * @see java.nio.file.Files, +		return Files.newInputStream(this.file.toPath());, +		return Files.newOutputStream(this.file.toPath());, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.READ);, +		return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);]