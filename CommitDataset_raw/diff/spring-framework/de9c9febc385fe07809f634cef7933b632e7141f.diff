[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.web.util.UriComponents;, +, +		UriComponents uriComponents = ServletUriComponentsBuilder.fromRequest(request).build();, +		MultiValueMap<String, String> actualParams = uriComponents.getQueryParams();, +		MultiValueMap<String, String> expectedParams = flashMap.getTargetRequestParams();, +		for (String expectedName : expectedParams.keySet()) {, +			List<String> actualValues = actualParams.get(expectedName);, +			if (actualValues == null) {, +				return false;, +			}, +			for (String expectedValue : expectedParams.get(expectedName)) {, +				if (!actualValues.contains(expectedValue)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.web.util.UriComponents;, +, +		UriComponents uriComponents = ServletUriComponentsBuilder.fromRequest(request).build();, +		MultiValueMap<String, String> actualParams = uriComponents.getQueryParams();, +		MultiValueMap<String, String> expectedParams = flashMap.getTargetRequestParams();, +		for (String expectedName : expectedParams.keySet()) {, +			List<String> actualValues = actualParams.get(expectedName);, +			if (actualValues == null) {, +				return false;, +			}, +			for (String expectedValue : expectedParams.get(expectedName)) {, +				if (!actualValues.contains(expectedValue)) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +, +		request.setQueryString("name=value");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.web.util.UriComponents;, +, +		UriComponents uriComponents = ServletUriComponentsBuilder.fromRequest(request).build();, +		MultiValueMap<String, String> actualParams = uriComponents.getQueryParams();, +		MultiValueMap<String, String> expectedParams = flashMap.getTargetRequestParams();, +		for (String expectedName : expectedParams.keySet()) {, +			List<String> actualValues = actualParams.get(expectedName);, +			if (actualValues == null) {, +				return false;, +			}, +			for (String expectedValue : expectedParams.get(expectedName)) {, +				if (!actualValues.contains(expectedValue)) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +, +		request.setQueryString("name=value");, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/FlashMapManagerTests.java, +import java.net.URLEncoder;, +		this.request.setQueryString("number=");, +		this.request.setQueryString("number=two");, +		this.request.setQueryString("number=one");, +		this.request.setQueryString("id=1");, +		this.request.setQueryString("id=1&id=2");, +		flashMap.put("key", "value");, +		flashMap.setTargetRequestPath("/path");, +		flashMap.addTargetRequestParam("param", "%D0%90%D0%90");, +		flashMap.addTargetRequestParam("param", "%D0%91%D0%91");, +		flashMap.addTargetRequestParam("param", "%D0%92%D0%92");, +, +		this.request.setCharacterEncoding("UTF-8");, +		MockHttpServletRequest requestAfterRedirect = new MockHttpServletRequest("GET", "/path");, +		requestAfterRedirect.setQueryString("param=%D0%90%D0%90&param=%D0%91%D0%91&param=%D0%92%D0%92&%3A%2F%3F%23%5B%5D%40=value");, +		requestAfterRedirect.addParameter("param", "\u0410\u0410");, +		requestAfterRedirect.addParameter("param", "\u0411\u0411");, +		requestAfterRedirect.addParameter("param", "\u0412\u0412");, +		requestAfterRedirect.addParameter(":/?#[]@", "value");, +, +		flashMap = this.flashMapManager.retrieveAndUpdate(requestAfterRedirect, new MockHttpServletResponse());, +		assertNotNull(flashMap);, +		assertEquals(1, flashMap.size());, +		assertEquals("value", flashMap.get("key"));, +	}, +, +	// SPR-12569, +, +	@Test, +	public void flashAttributesWithQueryParamsWithSpace() throws Exception {, +, +		String encodedValue = URLEncoder.encode("1 2", "UTF-8");, +, +		FlashMap flashMap = new FlashMap();, +		flashMap.put("key", "value");, +		flashMap.setTargetRequestPath("/path");, +		flashMap.addTargetRequestParam("param", encodedValue);, +, +		this.request.setCharacterEncoding("UTF-8");, +		this.flashMapManager.saveOutputFlashMap(flashMap, this.request, this.response);, +, +		MockHttpServletRequest requestAfterRedirect = new MockHttpServletRequest("GET", "/path");]