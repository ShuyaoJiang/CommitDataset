[+++ b/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java, +			cl.loadClass("org.apache.logging.log4j.spi.ExtendedLogger");, +				// Try SLF4J 1.7 SPI, +				cl.loadClass("org.slf4j.spi.LocationAwareLogger");, +				logApi = LogApi.SLF4J_LAL;, +				try {, +					// Try SLF4J 1.7 API, +					cl.loadClass("org.slf4j.Logger");, +					logApi = LogApi.SLF4J;, +				}, +				catch (ClassNotFoundException ex3) {, +	}, +			case SLF4J_LAL:, +				return Slf4jDelegate.createLocationAwareLog(name);, +	private enum LogApi {LOG4J, SLF4J_LAL, SLF4J, JUL}, +		public static Log createLocationAwareLog(String name) {, +			Logger logger = LoggerFactory.getLogger(name);, +			return (logger instanceof LocationAwareLogger ?, +					new Slf4jLocationAwareLog((LocationAwareLogger) logger) : new Slf4jLog<>(logger));, +		}, +, +			return new Slf4jLog<>(LoggerFactory.getLogger(name));, +	private static class Slf4jLog<T extends Logger> implements Log, Serializable {, +		protected final String name;, +		protected transient T logger;, +		public Slf4jLog(T logger) {, +			this.name = logger.getName();, +			this.logger = logger;, +			return Slf4jDelegate.createLog(this.name);, +		}, +	}, +, +, +	@SuppressWarnings("serial"), +	private static class Slf4jLocationAwareLog extends Slf4jLog<LocationAwareLogger> implements Serializable {, +, +		private static final String FQCN = Slf4jLocationAwareLog.class.getName();, +, +		public Slf4jLocationAwareLog(LocationAwareLogger logger) {, +			super(logger);, +		}, +, +		public void debug(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, null);, +		}, +, +		public void debug(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, exception);, +		}, +, +		public void error(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, null);, +		}, +, +		public void error(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, exception);, +		}, +, +		public void fatal(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, null);, +		}, +, +		public void fatal(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, exception);, +		}, +, +		public void info(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, null);, +		}, +, +		public void info(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, exception);, +		}, +, +		public void trace(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, null);, +		}, +, +		public void trace(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, exception);, +		}, +, +		public void warn(Object message) {, +			this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, null);, +		}, +, +		public void warn(Object message, Throwable exception) {, +			this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, exception);, +		}, +, +		protected Object readResolve() {, +			return Slf4jDelegate.createLocationAwareLog(this.name);]