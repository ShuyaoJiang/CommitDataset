[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +		if (!copyRequired && sourceCollection.isEmpty()) {, +			return sourceCollection;, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +		if (!copyRequired && sourceCollection.isEmpty()) {, +			return sourceCollection;, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +		if (!copyRequired && sourceMap.isEmpty()) {, +			return sourceMap;, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +		if (!copyRequired && sourceCollection.isEmpty()) {, +			return sourceCollection;, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +		if (!copyRequired && sourceMap.isEmpty()) {, +			return sourceMap;, +		}, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java, +import java.util.Collections;, +	@Test, +	public void testCollectionsEmptyList() throws Exception {, +		CollectionToCollectionConverter converter = new CollectionToCollectionConverter(new GenericConversionService());, +		TypeDescriptor type = new TypeDescriptor(getClass().getField("list"));, +		converter.convert(list, type, TypeDescriptor.valueOf(Class.forName("java.util.Collections$EmptyList")));, +	}, +, +	public List list = Collections.emptyList();, +]