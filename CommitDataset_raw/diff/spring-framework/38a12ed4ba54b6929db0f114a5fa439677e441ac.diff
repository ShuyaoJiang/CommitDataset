[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		super(uri, contextPath, headers);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		super(uri, contextPath, headers);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	private final RequestPath path;, +, +	 * @param contextPath the context path for the request, +	public AbstractServerHttpRequest(URI uri, String contextPath, HttpHeaders headers) {, +		this.path = new DefaultRequestPath(uri, contextPath, StandardCharsets.UTF_8);, +	public RequestPath getPath() {, +		return this.path;, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		super(uri, contextPath, headers);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	private final RequestPath path;, +, +	 * @param contextPath the context path for the request, +	public AbstractServerHttpRequest(URI uri, String contextPath, HttpHeaders headers) {, +		this.path = new DefaultRequestPath(uri, contextPath, StandardCharsets.UTF_8);, +	public RequestPath getPath() {, +		return this.path;, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, + * {@link ServerHttpRequest#getPath()}., +		String path = request.getPath().pathWithinApplication().value();, +					String contextPath = request.getPath().contextPath().value() + entry.getKey();, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		super(uri, contextPath, headers);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	private final RequestPath path;, +, +	 * @param contextPath the context path for the request, +	public AbstractServerHttpRequest(URI uri, String contextPath, HttpHeaders headers) {, +		this.path = new DefaultRequestPath(uri, contextPath, StandardCharsets.UTF_8);, +	public RequestPath getPath() {, +		return this.path;, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, + * {@link ServerHttpRequest#getPath()}., +		String path = request.getPath().pathWithinApplication().value();, +					String contextPath = request.getPath().contextPath().value() + entry.getKey();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +	DefaultRequestPath(RequestPath requestPath, String contextPath, Charset charset) {, +		this.fullPath = new DefaultPathSegmentContainer(requestPath.value(), requestPath.pathSegments());, +		this.contextPath = initContextPath(this.fullPath, contextPath);, +		this.pathWithinApplication = initPathWithinApplication(this.fullPath, this.contextPath);, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		super(uri, contextPath, headers);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	private final RequestPath path;, +, +	 * @param contextPath the context path for the request, +	public AbstractServerHttpRequest(URI uri, String contextPath, HttpHeaders headers) {, +		this.path = new DefaultRequestPath(uri, contextPath, StandardCharsets.UTF_8);, +	public RequestPath getPath() {, +		return this.path;, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, + * {@link ServerHttpRequest#getPath()}., +		String path = request.getPath().pathWithinApplication().value();, +					String contextPath = request.getPath().contextPath().value() + entry.getKey();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +	DefaultRequestPath(RequestPath requestPath, String contextPath, Charset charset) {, +		this.fullPath = new DefaultPathSegmentContainer(requestPath.value(), requestPath.pathSegments());, +		this.contextPath = initContextPath(this.fullPath, contextPath);, +		this.pathWithinApplication = initPathWithinApplication(this.fullPath, this.contextPath);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import java.nio.charset.StandardCharsets;, +		URI uriToUse = getUriToUse();, +		RequestPath path = getRequestPathToUse(uriToUse);, +		HttpHeaders headers = getHeadersToUse();, +		return new MutativeDecorator(this.delegate, this.httpMethod, uriToUse, path, headers);, +	}, +, +	@Nullable, +	private URI getUriToUse() {, +		if (this.path == null) {, +			return null;, +		}, +		URI uri = this.delegate.getURI();, +			return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(),, +, +	@Nullable, +	private RequestPath getRequestPathToUse(@Nullable URI uriToUse) {, +		if (uriToUse == null && this.contextPath == null) {, +			return null;, +		}, +		else if (uriToUse == null) {]