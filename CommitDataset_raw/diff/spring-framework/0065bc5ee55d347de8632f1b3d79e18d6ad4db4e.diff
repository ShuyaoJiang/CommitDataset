[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +import java.util.Collections;, +import org.springframework.util.CollectionUtils;, +		List<String> queryParamValues = queryParams().get(name);, +		if (CollectionUtils.isEmpty(queryParamValues)) {, +			String value = queryParamValues.get(0);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +import java.util.Collections;, +import org.springframework.util.CollectionUtils;, +		List<String> queryParamValues = queryParams().get(name);, +		if (CollectionUtils.isEmpty(queryParamValues)) {, +			String value = queryParamValues.get(0);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultServerRequestTests.java, +	public void absentQueryParam() throws Exception {, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo").build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +, +		assertEquals(Optional.empty(), request.queryParam("bar"));, +	}, +, +	@Test]