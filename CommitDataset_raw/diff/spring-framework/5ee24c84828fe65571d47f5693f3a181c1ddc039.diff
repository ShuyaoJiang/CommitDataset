[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java, +import com.jayway.jsonpath.JsonPath;, +, + * Factory for assertions on the request content using, + * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expressions., + * {@link MockRestRequestMatchers#jsonPath(String, Matcher)} or, + * {@link MockRestRequestMatchers#jsonPath(String, Object...)}., + * @author Sam Brannen, +	private final JsonPathExpectationsHelper jsonPathHelper;, +	 * Protected constructor., +	 * <p>Use {@link MockRestRequestMatchers#jsonPath(String, Matcher)} or, +	 * @param expression the {@link JsonPath} expression; never {@code null} or empty, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +, +	 * Evaluate the JSON path expression against the request content and, +	 * assert the resulting value with the given Hamcrest {@link Matcher}., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValue(request.getBodyAsString(), matcher);, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that the result is equal to the supplied value., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValue(request.getBodyAsString(), expectedValue);, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite, +	 * definite}, this method asserts that the value at the given path is not, +	 * <em>empty</em>., +				JsonPathRequestMatchers.this.jsonPathHelper.exists(request.getBodyAsString());, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite, +	 * definite}, this method asserts that the value at the given path is, +	 * <em>empty</em>., +				JsonPathRequestMatchers.this.jsonPathHelper.doesNotExist(request.getBodyAsString());, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that the result is an array., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValueIsArray(request.getBodyAsString());, +	 * Abstract base class for {@code JsonPath}-based {@link RequestMatcher}s., +	 * @see #matchInternal, +		abstract void matchInternal(MockClientHttpRequest request) throws IOException, ParseException;, +, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java, +import com.jayway.jsonpath.JsonPath;, +, + * Factory for assertions on the request content using, + * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expressions., + * {@link MockRestRequestMatchers#jsonPath(String, Matcher)} or, + * {@link MockRestRequestMatchers#jsonPath(String, Object...)}., + * @author Sam Brannen, +	private final JsonPathExpectationsHelper jsonPathHelper;, +	 * Protected constructor., +	 * <p>Use {@link MockRestRequestMatchers#jsonPath(String, Matcher)} or, +	 * @param expression the {@link JsonPath} expression; never {@code null} or empty, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +, +	 * Evaluate the JSON path expression against the request content and, +	 * assert the resulting value with the given Hamcrest {@link Matcher}., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValue(request.getBodyAsString(), matcher);, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that the result is equal to the supplied value., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValue(request.getBodyAsString(), expectedValue);, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite, +	 * definite}, this method asserts that the value at the given path is not, +	 * <em>empty</em>., +				JsonPathRequestMatchers.this.jsonPathHelper.exists(request.getBodyAsString());, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite, +	 * definite}, this method asserts that the value at the given path is, +	 * <em>empty</em>., +				JsonPathRequestMatchers.this.jsonPathHelper.doesNotExist(request.getBodyAsString());, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that the result is an array., +				JsonPathRequestMatchers.this.jsonPathHelper.assertValueIsArray(request.getBodyAsString());, +	 * Abstract base class for {@code JsonPath}-based {@link RequestMatcher}s., +	 * @see #matchInternal, +		abstract void matchInternal(MockClientHttpRequest request) throws IOException, ParseException;, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/JsonPathResultMatchers.java, +import com.jayway.jsonpath.JsonPath;, +, + * {@link MockMvcResultMatchers#jsonPath(String, Matcher)} or, + * {@link MockMvcResultMatchers#jsonPath(String, Object...)}., +	 * @param expression the {@link JsonPath} expression; never {@code null} or empty, +	 * @param args arguments to parameterize the {@code JsonPath} expression with,, +	 * using formatting specifiers defined in {@link String#format(String, Object...)}, +	 * <p>If the JSON path expression is not {@linkplain JsonPath#isDefinite, +	 * definite}, this method asserts that the value at the given path is not, +	 * <em>empty</em>.]