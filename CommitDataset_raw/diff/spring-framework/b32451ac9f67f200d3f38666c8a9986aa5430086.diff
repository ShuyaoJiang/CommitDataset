[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +	 * introspection results for all classes underneath that ClassLoader, and, +	 * removing the ClassLoader (and its children) from the acceptance list., +				Class<?> beanClass = it.next();, +	static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException {, +	private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {, +			Class<?> classToFlush = beanClass;, +	Class<?> getBeanClass() {, +	private PropertyDescriptor buildGenericTypeAwarePropertyDescriptor(Class<?> beanClass, PropertyDescriptor pd) {, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +	 * introspection results for all classes underneath that ClassLoader, and, +	 * removing the ClassLoader (and its children) from the acceptance list., +				Class<?> beanClass = it.next();, +	static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException {, +	private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {, +			Class<?> classToFlush = beanClass;, +	Class<?> getBeanClass() {, +	private PropertyDescriptor buildGenericTypeAwarePropertyDescriptor(Class<?> beanClass, PropertyDescriptor pd) {, +++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2013 the original author or authors., + * Extension of the standard JavaBeans {@link PropertyDescriptor} class,, + * overriding {@code getPropertyType()} such that a generically declared, + * type variable will be resolved against the containing bean class., +	private final Class<?> beanClass;, +	private final Class<?> propertyEditorClass;, +	private Class<?> propertyType;, +	public GenericTypeAwarePropertyDescriptor(Class<?> beanClass, String propertyName,, +			Method readMethod, Method writeMethod, Class<?> propertyEditorClass), +	public Class<?> getPropertyEditorClass() {, +	public synchronized Class<?> getPropertyType() {]