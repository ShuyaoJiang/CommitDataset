[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +import org.eclipse.jetty.reactive.client.ContentChunk;, + * {@link ClientHttpConnector} for the Jetty Reactive Streams HttpClient., +	public JettyClientHttpConnector(, +			JettyResourceFactory resourceFactory, @Nullable Consumer<HttpClient> customizer) {, +, +, +				clientHttpRequest.getReactiveRequest().response((response, chunks) -> {, +					Flux<DataBuffer> content = Flux.from(chunks).map(this::toDataBuffer);, +					return Mono.just(new JettyClientHttpResponse(response, content));, +				})));, +	}, +, +	private DataBuffer toDataBuffer(ContentChunk chunk) {, +, +		// We must copy until this is resolved:, +		// https://github.com/eclipse/jetty.project/issues/2429, +, +		// Use copy instead of buffer wrapping because Callback#succeeded() is, +		// used not only to release the buffer but also to request more data, +		// which is a problem for codecs that buffer data., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +import org.eclipse.jetty.reactive.client.ContentChunk;, + * {@link ClientHttpConnector} for the Jetty Reactive Streams HttpClient., +	public JettyClientHttpConnector(, +			JettyResourceFactory resourceFactory, @Nullable Consumer<HttpClient> customizer) {, +, +, +				clientHttpRequest.getReactiveRequest().response((response, chunks) -> {, +					Flux<DataBuffer> content = Flux.from(chunks).map(this::toDataBuffer);, +					return Mono.just(new JettyClientHttpResponse(response, content));, +				})));, +	}, +, +	private DataBuffer toDataBuffer(ContentChunk chunk) {, +, +		// We must copy until this is resolved:, +		// https://github.com/eclipse/jetty.project/issues/2429, +, +		// Use copy instead of buffer wrapping because Callback#succeeded() is, +		// used not only to release the buffer but also to request more data, +		// which is a problem for codecs that buffer data., +, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		Flux<ContentChunk> chunks = Flux.from(body).map(this::toContentChunk);, +		ReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType());, +		this.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).content(content).build();, +		ReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType());, +	private String getContentType() {, +		MediaType contentType = getHeaders().getContentType();, +		return contentType != null ? contentType.toString() : MediaType.APPLICATION_OCTET_STREAM_VALUE;, +	}, +, +]