[+++ b/org.springframework.core/src/main/java/org/springframework/core/type/ClassMetadata.java, +	 * Return the names of all interfaces that the underlying class, +	/**, +	 * Return the names of all classes declared as members of the class represented by, +	 * this ClassMetadata object. This includes public, protected, default (package), +	 * access, and private classes and interfaces declared by the class, but excludes, +	 * inherited classes and interfaces. An empty array is returned if no member classes, +	 * or interfaces exist., +	 */, +	String[] getMemberClassNames();, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/ClassMetadata.java, +	 * Return the names of all interfaces that the underlying class, +	/**, +	 * Return the names of all classes declared as members of the class represented by, +	 * this ClassMetadata object. This includes public, protected, default (package), +	 * access, and private classes and interfaces declared by the class, but excludes, +	 * inherited classes and interfaces. An empty array is returned if no member classes, +	 * or interfaces exist., +	 */, +	String[] getMemberClassNames();, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, +import java.util.LinkedHashSet;, +	public String[] getMemberClassNames() {, +		LinkedHashSet<String> memberClassNames = new LinkedHashSet<String>();, +		for (Class<?> nestedClass : this.introspectedClass.getDeclaredClasses()) {, +			memberClassNames.add(nestedClass.getName());, +		}, +		return memberClassNames.toArray(new String[memberClassNames.size()]);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/ClassMetadata.java, +	 * Return the names of all interfaces that the underlying class, +	/**, +	 * Return the names of all classes declared as members of the class represented by, +	 * this ClassMetadata object. This includes public, protected, default (package), +	 * access, and private classes and interfaces declared by the class, but excludes, +	 * inherited classes and interfaces. An empty array is returned if no member classes, +	 * or interfaces exist., +	 */, +	String[] getMemberClassNames();, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, +import java.util.LinkedHashSet;, +	public String[] getMemberClassNames() {, +		LinkedHashSet<String> memberClassNames = new LinkedHashSet<String>();, +		for (Class<?> nestedClass : this.introspectedClass.getDeclaredClasses()) {, +			memberClassNames.add(nestedClass.getName());, +		}, +		return memberClassNames.toArray(new String[memberClassNames.size()]);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private Set<String> memberClassNames = new LinkedHashSet<String>();, +, +		String fqName = ClassUtils.convertResourcePathToClassName(name);, +		String fqOuterName = ClassUtils.convertResourcePathToClassName(outerName);, +		if (outerName != null) {, +			if (this.className.equals(fqName)) {, +				this.enclosingClassName = fqOuterName;, +			else if (this.className.equals(fqOuterName)) {, +				this.memberClassNames.add(fqName);, +			}, +		}, +	public String[] getMemberClassNames() {, +		return this.memberClassNames.toArray(new String[this.memberClassNames.size()]);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/ClassMetadata.java, +	 * Return the names of all interfaces that the underlying class, +	/**, +	 * Return the names of all classes declared as members of the class represented by, +	 * this ClassMetadata object. This includes public, protected, default (package), +	 * access, and private classes and interfaces declared by the class, but excludes, +	 * inherited classes and interfaces. An empty array is returned if no member classes, +	 * or interfaces exist., +	 */, +	String[] getMemberClassNames();, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, +import java.util.LinkedHashSet;, +	public String[] getMemberClassNames() {, +		LinkedHashSet<String> memberClassNames = new LinkedHashSet<String>();, +		for (Class<?> nestedClass : this.introspectedClass.getDeclaredClasses()) {, +			memberClassNames.add(nestedClass.getName());, +		}, +		return memberClassNames.toArray(new String[memberClassNames.size()]);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private Set<String> memberClassNames = new LinkedHashSet<String>();, +, +		String fqName = ClassUtils.convertResourcePathToClassName(name);]