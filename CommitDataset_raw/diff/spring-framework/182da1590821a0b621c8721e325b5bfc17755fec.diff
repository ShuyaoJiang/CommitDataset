[+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +	private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {, +	 * Searches for the generic {@link Method} declaration whose erased signature, +	 * matches that of the supplied bridge method., +	 * @throws IllegalStateException if the generic declaration cannot be found, +	 */, +	@Nullable, +	private static Method findGenericDeclaration(Method bridgeMethod) {, +		// Search parent types for method that has same signature as bridge., +		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();, +		while (superclass != null && Object.class != superclass) {, +			Method method = searchForMatch(superclass, bridgeMethod);, +			if (method != null && !method.isBridge()) {, +				return method;, +			}, +			superclass = superclass.getSuperclass();, +		}, +, +		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());, +		return searchInterfaces(interfaces, bridgeMethod);, +	}, +, +	@Nullable, +	private static Method searchInterfaces(Class<?>[] interfaces, Method bridgeMethod) {, +		for (Class<?> ifc : interfaces) {, +			Method method = searchForMatch(ifc, bridgeMethod);, +			if (method != null && !method.isBridge()) {, +				return method;, +			}, +			else {, +				return searchInterfaces(ifc.getInterfaces(), bridgeMethod);, +			}, +		}, +		return null;, +	}, +, +	/**, +		try {, +			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes());, +		}, +		catch (NoSuchMethodException ex) {, +			return null;, +		}, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +	private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {, +	 * Searches for the generic {@link Method} declaration whose erased signature, +	 * matches that of the supplied bridge method., +	 * @throws IllegalStateException if the generic declaration cannot be found, +	 */, +	@Nullable, +	private static Method findGenericDeclaration(Method bridgeMethod) {, +		// Search parent types for method that has same signature as bridge., +		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();, +		while (superclass != null && Object.class != superclass) {, +			Method method = searchForMatch(superclass, bridgeMethod);, +			if (method != null && !method.isBridge()) {, +				return method;, +			}, +			superclass = superclass.getSuperclass();, +		}, +, +		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());, +		return searchInterfaces(interfaces, bridgeMethod);, +	}, +, +	@Nullable, +	private static Method searchInterfaces(Class<?>[] interfaces, Method bridgeMethod) {, +		for (Class<?> ifc : interfaces) {, +			Method method = searchForMatch(ifc, bridgeMethod);, +			if (method != null && !method.isBridge()) {, +				return method;, +			}, +			else {, +				return searchInterfaces(ifc.getInterfaces(), bridgeMethod);, +			}, +		}, +		return null;, +	}, +, +	/**, +		try {, +			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes());, +		}, +		catch (NoSuchMethodException ex) {, +			return null;, +		}, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +	@Test  // SPR-16103, +	public void testClassHierarchy() throws Exception {, +		doTestHierarchyResolution(FooClass.class);, +	}, +	@Test  // SPR-16103, +	public void testInterfaceHierarchy() throws Exception {, +		doTestHierarchyResolution(FooInterface.class);, +	}, +, +	private void doTestHierarchyResolution(Class<?> clazz) throws Exception {, +		for (Method method : clazz.getDeclaredMethods()){, +			Method bridged = BridgeMethodResolver.findBridgedMethod(method);, +			Method expected = clazz.getMethod("test", FooEntity.class);]