[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.bind.annotation.SessionAttributes;, +	public void sessionAttributeExposure() throws Exception {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(MySessionAttributesController.class));, +				wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		HttpSession session = request.getSession();, +		assertTrue(session.getAttribute("object1") != null);, +		assertTrue(session.getAttribute("object2") != null);, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object1"));, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object2"));, +, +		request = new MockHttpServletRequest("POST", "/myPage");, +		request.setSession(session);, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertTrue(session.getAttribute("object1") != null);, +		assertTrue(session.getAttribute("object2") != null);, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object1"));, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object2"));, +	}, +, +	@Test, +	@RequestMapping("/myPage"), +	@SessionAttributes({"object1", "object2"}), +	public static class MySessionAttributesController {, +, +		@RequestMapping(method = RequestMethod.GET), +		public String get(Model model) {, +			model.addAttribute("object1", new Object());, +			model.addAttribute("object2", new Object());, +			return "myPage";, +		}, +, +		@RequestMapping(method = RequestMethod.POST), +		public String post(@ModelAttribute("object1") Object object1) {, +			//do something with object1, +			return "myPage";, +		}, +	}, +, +	@Controller, +	private static class ModelExposingViewResolver implements ViewResolver {, +, +		public View resolveViewName(String viewName, Locale locale) throws Exception {, +			return new View() {, +				public String getContentType() {, +					return null;, +				}, +				public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) {, +					request.getSession().setAttribute("model", model);, +				}, +			};, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.bind.annotation.SessionAttributes;, +	public void sessionAttributeExposure() throws Exception {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(MySessionAttributesController.class));, +				wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		HttpSession session = request.getSession();, +		assertTrue(session.getAttribute("object1") != null);, +		assertTrue(session.getAttribute("object2") != null);, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object1"));, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object2"));, +, +		request = new MockHttpServletRequest("POST", "/myPage");, +		request.setSession(session);, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertTrue(session.getAttribute("object1") != null);, +		assertTrue(session.getAttribute("object2") != null);, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object1"));, +		assertTrue(((Map) session.getAttribute("model")).containsKey("object2"));]