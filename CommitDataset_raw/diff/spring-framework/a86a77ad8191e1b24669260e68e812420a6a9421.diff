[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import java.util.Arrays;, +import org.springframework.cglib.proxy.Callback;, +import org.springframework.cglib.proxy.CallbackFilter;, +import org.springframework.cglib.proxy.Enhancer;, +import org.springframework.cglib.proxy.MethodInterceptor;, +import org.springframework.cglib.proxy.MethodProxy;, +import org.springframework.cglib.proxy.NoOp;, +		this.callbackInstances = new Callback[], +				{new BeanMethodInterceptor(beanFactory), DISPOSABLE_BEAN_METHOD_INTERCEPTOR, NoOp.INSTANCE};, +			return this.beanFactory.getBean(this.beanName);, +		private static final Class<?>[] CALLBACK_TYPES = {GetObjectMethodInterceptor.class, NoOp.class};, +		private static final CallbackFilter CALLBACK_FILTER = new CallbackFilter() {, +				return (method.getName().equals("getObject") ? 0 : 1);, +			if (factoryContainsBean(BeanFactory.FACTORY_BEAN_PREFIX + beanName) && factoryContainsBean(beanName)) {, +				Object factoryBean = this.beanFactory.getBean(BeanFactory.FACTORY_BEAN_PREFIX + beanName);, +			if (isCurrentlyInvokedFactoryMethod(beanMethod) && !this.beanFactory.containsSingleton(beanName)) {, +		 * Check the BeanFactory to see whether the bean named <var>beanName</var> already, +			return (this.beanFactory.containsBean(beanName) && !this.beanFactory.isCurrentlyInCreation(beanName));, +		}, +, +		/**, +		 * Check whether the given method corresponds to the container's currently invoked, +		 * factory method. Compares method name and parameter types only in order to work, +		 * around a potential problem with covariant return types (currently only known, +		 * to happen on Groovy classes)., +		 */, +		private boolean isCurrentlyInvokedFactoryMethod(Method method) {, +			Method currentlyInvoked = SimpleInstantiationStrategy.getCurrentlyInvokedFactoryMethod();, +			return (currentlyInvoked != null && method.getName().equals(currentlyInvoked.getName()) &&, +					Arrays.equals(method.getParameterTypes(), currentlyInvoked.getParameterTypes()));, +			enhancer.setCallbackFilter(CALLBACK_FILTER);]