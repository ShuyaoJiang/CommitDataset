[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +	private final String port;, +	HierarchicalUriComponents(String scheme, String userInfo, String host, String port, PathComponent path,, +		return Integer.parseInt(this.port);, +		String expandedPort = expandUriComponent(this.port, uriVariables);, +		return new HierarchicalUriComponents(expandedScheme, expandedUserInfo, expandedHost, expandedPort, expandedPath,, +			if (!"-1".equals(this.port)) {, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.port);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +	private final String port;, +	HierarchicalUriComponents(String scheme, String userInfo, String host, String port, PathComponent path,, +		return Integer.parseInt(this.port);, +		String expandedPort = expandUriComponent(this.port, uriVariables);, +		return new HierarchicalUriComponents(expandedScheme, expandedUserInfo, expandedHost, expandedPort, expandedPath,, +			if (!"-1".equals(this.port)) {, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.port);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String PORT_PATTERN = "(\\d*(?:\\{[^/]+?\\})?)";, +	private String port = "-1";, +					builder.port(port);, +				builder.port(port);, +			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, String.valueOf(this.port),, +				this.port = String.valueOf(uri.getPort());, +		this.port = "-1";, +				this.port = String.valueOf(uriComponents.getPort());, +		this.port = String.valueOf(port);, +		resetSchemeSpecificPart();, +		return this;, +	}, +, +	/**, +	 * Set the URI port. Passing {@code "-1"} will clear the port of this builder., +	 * The given port may contain URI template variables., +	 * @param port the URI port, +	 * @return this UriComponentsBuilder, +	 */, +	public UriComponentsBuilder port(String port) {, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +	private final String port;, +	HierarchicalUriComponents(String scheme, String userInfo, String host, String port, PathComponent path,, +		return Integer.parseInt(this.port);, +		String expandedPort = expandUriComponent(this.port, uriVariables);, +		return new HierarchicalUriComponents(expandedScheme, expandedUserInfo, expandedHost, expandedPort, expandedPath,, +			if (!"-1".equals(this.port)) {, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.port);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String PORT_PATTERN = "(\\d*(?:\\{[^/]+?\\})?)";, +	private String port = "-1";, +					builder.port(port);, +				builder.port(port);, +			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, String.valueOf(this.port),, +				this.port = String.valueOf(uri.getPort());, +		this.port = "-1";, +				this.port = String.valueOf(uriComponents.getPort());, +		this.port = String.valueOf(port);, +		resetSchemeSpecificPart();, +		return this;, +	}, +, +	/**, +	 * Set the URI port. Passing {@code "-1"} will clear the port of this builder., +	 * The given port may contain URI template variables., +	 * @param port the URI port, +	 * @return this UriComponentsBuilder, +	 */, +	public UriComponentsBuilder port(String port) {, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +	protected static int port;, +		port = SocketUtils.findAvailableTcpPort();, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +	private final String port;, +	HierarchicalUriComponents(String scheme, String userInfo, String host, String port, PathComponent path,, +		return Integer.parseInt(this.port);, +		String expandedPort = expandUriComponent(this.port, uriVariables);, +		return new HierarchicalUriComponents(expandedScheme, expandedUserInfo, expandedHost, expandedPort, expandedPath,, +			if (!"-1".equals(this.port)) {, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.port);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String PORT_PATTERN = "(\\d*(?:\\{[^/]+?\\})?)";, +	private String port = "-1";, +					builder.port(port);, +				builder.port(port);, +			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, String.valueOf(this.port),, +				this.port = String.valueOf(uri.getPort());, +		this.port = "-1";, +				this.port = String.valueOf(uriComponents.getPort());, +		this.port = String.valueOf(port);, +		resetSchemeSpecificPart();, +		return this;, +	}, +, +	/**, +	 * Set the URI port. Passing {@code "-1"} will clear the port of this builder., +	 * The given port may contain URI template variables., +	 * @param port the URI port, +	 * @return this UriComponentsBuilder, +	 */, +	public UriComponentsBuilder port(String port) {, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +	protected static int port;]