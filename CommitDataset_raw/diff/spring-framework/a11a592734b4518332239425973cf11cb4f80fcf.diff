[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java, + * Copyright 2002-2019 the original author or authors., +import java.util.StringJoiner;, +import org.springframework.jdbc.core.SqlParameterValue;, +import org.springframework.jdbc.support.JdbcUtils;, + * Provides registration of SQL types per parameter and a friendly, + * {@link #toString() toString} representation enumerating all parameters for, + * a {@code SqlParameterSource} implementing {@link #getParameterNames()}., + * Concrete subclasses must implement {@link #hasValue} and {@link #getValue}., + * @author Jens Schauder, + * @see #hasValue(String), + * @see #getValue(String), + * @see #getParameterNames(), +, +	/**, +	 * Enumerate the parameter names and values with their corresponding SQL type if available,, +	 * or just return the simple {@code SqlParameterSource} implementation class name otherwise., +	 * @since 5.2, +	 * @see #getParameterNames(), +	 */, +	@Override, +	public String toString() {, +		String[] parameterNames = getParameterNames();, +		if (parameterNames != null) {, +			StringJoiner result = new StringJoiner(", ", getClass().getSimpleName() + " {", "}");, +			for (String parameterName : parameterNames) {, +				Object value = getValue(parameterName);, +				if (value instanceof SqlParameterValue) {, +					value = ((SqlParameterValue) value).getValue();, +				}, +				String typeName = getTypeName(parameterName);, +				if (typeName == null) {, +					int sqlType = getSqlType(parameterName);, +					if (sqlType != TYPE_UNKNOWN) {, +						typeName = JdbcUtils.resolveTypeName(sqlType);, +						if (typeName == null) {, +							typeName = String.valueOf(sqlType);, +						}, +					}, +				}, +				StringBuilder entry = new StringBuilder();, +				entry.append(parameterName).append('=').append(value);, +				if (typeName != null) {, +					entry.append(" (type:").append(typeName).append(')');, +				}, +				result.add(entry);, +			}, +			return result.toString();, +		}, +		else {, +			return getClass().getSimpleName();, +		}, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java, + * Copyright 2002-2019 the original author or authors., +import java.util.StringJoiner;, +import org.springframework.jdbc.core.SqlParameterValue;, +import org.springframework.jdbc.support.JdbcUtils;, + * Provides registration of SQL types per parameter and a friendly, + * {@link #toString() toString} representation enumerating all parameters for, + * a {@code SqlParameterSource} implementing {@link #getParameterNames()}., + * Concrete subclasses must implement {@link #hasValue} and {@link #getValue}., + * @author Jens Schauder, + * @see #hasValue(String), + * @see #getValue(String), + * @see #getParameterNames(), +, +	/**, +	 * Enumerate the parameter names and values with their corresponding SQL type if available,, +	 * or just return the simple {@code SqlParameterSource} implementation class name otherwise., +	 * @since 5.2, +	 * @see #getParameterNames(), +	 */, +	@Override, +	public String toString() {, +		String[] parameterNames = getParameterNames();, +		if (parameterNames != null) {, +			StringJoiner result = new StringJoiner(", ", getClass().getSimpleName() + " {", "}");, +			for (String parameterName : parameterNames) {, +				Object value = getValue(parameterName);, +				if (value instanceof SqlParameterValue) {, +					value = ((SqlParameterValue) value).getValue();, +				}, +				String typeName = getTypeName(parameterName);, +				if (typeName == null) {, +					int sqlType = getSqlType(parameterName);, +					if (sqlType != TYPE_UNKNOWN) {, +						typeName = JdbcUtils.resolveTypeName(sqlType);, +						if (typeName == null) {, +							typeName = String.valueOf(sqlType);, +						}, +					}, +				}, +				StringBuilder entry = new StringBuilder();, +				entry.append(parameterName).append('=').append(value);, +				if (typeName != null) {, +					entry.append(" (type:").append(typeName).append(')');, +				}, +				result.add(entry);]