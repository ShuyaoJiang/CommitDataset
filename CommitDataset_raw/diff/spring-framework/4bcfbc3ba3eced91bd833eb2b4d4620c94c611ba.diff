[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +	 * Determine whether the given method is declared by the user or at least pointing to, +	 * a user-declared method., +	 * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the, +	 * {@code GroovyObject} interface (for interface methods; on an implementation class,, +	 * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway)., +	 * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered, +	 * as user-level methods since they are eventually pointing to a user-declared generic method., +	 * @param method the method to check, +	 * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise, +	 */, +	public static boolean isUserLevelMethod(Method method) {, +		return (method.isBridge() ||, +				(!method.isSynthetic() && !method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject")));, +	}, +, +	/**, +	private static boolean isOverridable(Method method, Class<?> targetClass) {, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +	 * Determine whether the given method is declared by the user or at least pointing to, +	 * a user-declared method., +	 * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the, +	 * {@code GroovyObject} interface (for interface methods; on an implementation class,, +	 * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway)., +	 * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered, +	 * as user-level methods since they are eventually pointing to a user-declared generic method., +	 * @param method the method to check, +	 * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise, +	 */, +	public static boolean isUserLevelMethod(Method method) {, +		return (method.isBridge() ||, +				(!method.isSynthetic() && !method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject")));, +	}, +, +	/**, +	private static boolean isOverridable(Method method, Class<?> targetClass) {, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ClassUtils;, +		return (ClassUtils.isUserLevelMethod(method) ? this.transactionAttribute : null);, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +	 * Determine whether the given method is declared by the user or at least pointing to, +	 * a user-declared method., +	 * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the, +	 * {@code GroovyObject} interface (for interface methods; on an implementation class,, +	 * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway)., +	 * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered, +	 * as user-level methods since they are eventually pointing to a user-declared generic method., +	 * @param method the method to check, +	 * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise, +	 */, +	public static boolean isUserLevelMethod(Method method) {, +		return (method.isBridge() ||, +				(!method.isSynthetic() && !method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject")));, +	}, +, +	/**, +	private static boolean isOverridable(Method method, Class<?> targetClass) {, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ClassUtils;, +		return (ClassUtils.isUserLevelMethod(method) ? this.transactionAttribute : null);, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/NameMatchTransactionAttributeSource.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ClassUtils;, +		if (!ClassUtils.isUserLevelMethod(method)) {, +			return null;, +		}, +, +		// Look for direct name match.]