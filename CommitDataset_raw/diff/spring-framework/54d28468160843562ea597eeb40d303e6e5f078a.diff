[+++ b/.gitignore, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +++ b/.gitignore, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7") {, +			exclude group: "stax", module: "stax-api", +		}, +, +	task testNG(type: Test) {, +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +		// Generate TestNG reports alongside JUnit reports., +		testReport true, +, +	test {, +		dependsOn testNG, +		useJUnit(), +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +	}, +, +		dependsOn {, +			subprojects.collect {, +				it.tasks.getByName("jar"), +			}, +		}, +++ b/.gitignore, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7") {, +			exclude group: "stax", module: "stax-api", +		}, +, +	task testNG(type: Test) {, +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +		// Generate TestNG reports alongside JUnit reports., +		testReport true, +, +	test {, +		dependsOn testNG, +		useJUnit(), +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +	}, +, +		dependsOn {, +			subprojects.collect {, +				it.tasks.getByName("jar"), +			}, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., +	private final Map<Class, Boolean> eligibleBeans = new ConcurrentHashMap<Class, Boolean>(64);, +	 * <p>Implements caching of {@code canApply} results per bean target class., +	 * Can be overridden e.g. to specifically exclude certain beans by name., +	 * @see AopUtils#getTargetClass(Object), +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +		Boolean eligible = this.eligibleBeans.get(targetClass);, +		this.eligibleBeans.put(targetClass, eligible);, +++ b/.gitignore, +# Eclipse artifacts, including WTP generated manifests, +.classpath, +.project, +spring-*/src/main/java/META-INF/MANIFEST.MF, +, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7") {, +			exclude group: "stax", module: "stax-api", +		}, +, +	task testNG(type: Test) {, +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +		// Generate TestNG reports alongside JUnit reports., +		testReport true, +, +	test {, +		dependsOn testNG, +		useJUnit(), +		// "TestCase" classes are run by other test classes, not the build., +		exclude "**/*TestCase.class", +	}, +]