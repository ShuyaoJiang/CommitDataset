[+++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, + * @author David Boden, +	private ParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();, +, +	/**, +	 * Set the ParameterNameDiscoverer to use for resolving method parameter, +	 * names if needed (e.g. for parameter names of MBean operation methods)., +	 * <p>The default is {@link LocalVariableTableParameterNameDiscoverer}., +	 */, +	public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {, +		this.parameterNameDiscoverer = parameterNameDiscoverer;, +	}, +, +	/**, +	 * Return the ParameterNameDiscoverer to use for resolving method parameter, +	 * names if needed (may be {@code null} in order to skip parameter detection)., +	 */, +	protected ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.parameterNameDiscoverer;, +	}, +, +	 * @param name the logical name for the operation (method name or property name);, +	 * not used by the default implementation but possibly by subclasses, +			return new ModelMBeanOperationInfo(method.getName(),, +	 * <p>The default implementation returns an empty array of {@code MBeanParameterInfo}., +		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer();, +		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null);, +		if (paramNames == null) {, +		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length];, +		Class<?>[] typeParameters = method.getParameterTypes();, +		for(int i = 0; i < info.length; i++) {, +			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i]);, +		}, +, +		return info;, +	}, +++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, + * @author David Boden, +	private ParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();, +, +	/**, +	 * Set the ParameterNameDiscoverer to use for resolving method parameter, +	 * names if needed (e.g. for parameter names of MBean operation methods)., +	 * <p>The default is {@link LocalVariableTableParameterNameDiscoverer}., +	 */, +	public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {, +		this.parameterNameDiscoverer = parameterNameDiscoverer;, +	}, +, +	/**, +	 * Return the ParameterNameDiscoverer to use for resolving method parameter, +	 * names if needed (may be {@code null} in order to skip parameter detection)., +	 */, +	protected ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.parameterNameDiscoverer;, +	}, +, +	 * @param name the logical name for the operation (method name or property name);, +	 * not used by the default implementation but possibly by subclasses, +			return new ModelMBeanOperationInfo(method.getName(),, +	 * <p>The default implementation returns an empty array of {@code MBeanParameterInfo}., +		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer();, +		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null);, +		if (paramNames == null) {, +		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length];, +		Class<?>[] typeParameters = method.getParameterTypes();, +		for(int i = 0; i < info.length; i++) {, +			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i]);, +		}, +, +		return info;, +	}, +++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +		if (ObjectUtils.isEmpty(params)) {, +			return super.getOperationParameters(method, beanKey);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, + * @author David Boden, +	private ParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();, +, +	/**, +	 * Set the ParameterNameDiscoverer to use for resolving method parameter, +	 * names if needed (e.g. for parameter names of MBean operation methods)., +	 * <p>The default is {@link LocalVariableTableParameterNameDiscoverer}., +	 */, +	public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {, +		this.parameterNameDiscoverer = parameterNameDiscoverer;, +	}, +, +	/**]