[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriBuilder.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +import java.net.URI;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * Builder for {@link URI} objects., + *, + * <p>Typical usage involves:, + * <ol>, + *     <li>Create a {@code UriBuilder} with one of the static factory methods (such as {@link #fromPath(String)} or, + *     {@link #fromUri(URI)})</li>, + *     <li>Set the various URI components through the respective methods ({@link #scheme(String)},, + *     {@link #userInfo(String)}, {@link #host(String)}, {@link #port(int)}, {@link #path(String)},, + *     {@link #pathSegment(String...)}, {@link #queryParam(String, Object...)}, and {@link #fragment(String)}.</li>, + *     <li>Build the URI with one of the {@link #build} method variants.</li>, + * </ol>, + *, + * <p>Most of the URI component methods accept URI template variables (i.e. {@code "{foo}"}), which are expanded by, + * calling {@code build}., + * one , are allowed in most components of a URI but their value is, + * restricted to a particular component. E.g., + * <blockquote><code>UriBuilder.fromPath("{arg1}").build("foo#bar");</code></blockquote>, + * would result in encoding of the '#' such that the resulting URI is, + * "foo%23bar". To create a URI "foo#bar" use, + * <blockquote><code>UriBuilder.fromPath("{arg1}").fragment("{arg2}").build("foo", "bar")</code></blockquote>, + * instead. URI template names and delimiters are never encoded but their, + * values are encoded when a URI is built., + * Template parameter regular expressions are ignored when building a URI, i.e., + * no validation is performed., + * <p>Inspired by {@link javax.ws.rs.core.UriBuilder}., + *, + * @author Arjen Poutsma, + * @since 3.1, + * @see #newInstance(), + * @see #fromPath(String), + * @see #fromUri(URI), + */, +public class UriBuilder {, +, +	private String scheme;, +, +	private String userInfo;, +, +	private String host;, +, +	private int port = -1;, +, +	private final List<String> pathSegments = new ArrayList<String>();, +, +	private final StringBuilder queryBuilder = new StringBuilder();, +, +	private String fragment;, +, +	/**, +	 * Default constructor. Protected to prevent direct instantiation., +	 *, +	 * @see #newInstance(), +	 * @see #fromPath(String), +	 * @see #fromUri(URI), +	 */, +	protected UriBuilder() {, +	}, +, +	// Factory methods, +, +	/**, +	 * Returns a new, empty URI builder., +	 *, +	 * @return the new {@code UriBuilder}, +	 */, +	public static UriBuilder newInstance() {, +		return new UriBuilder();, +	}, +]