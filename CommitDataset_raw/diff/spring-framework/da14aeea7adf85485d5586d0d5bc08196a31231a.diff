[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		super(payload != null ? ByteBuffer.wrap(payload, offset, length) : null, isLast);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		super(payload != null ? ByteBuffer.wrap(payload, offset, length) : null, isLast);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		super(payload != null ? ByteBuffer.wrap(payload, offset, length) : null, isLast);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		super(payload != null ? ByteBuffer.wrap(payload, offset, length) : null, isLast);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, + * Copyright 2002-2014 the original author or authors., +	 * Create a new text WebSocket message from the given byte[]. It is assumed, +	 * the byte array can be encoded into an UTF-8 String., +		String payload = getPayload();, +		return (payload.length() > 10 ? payload.substring(0, 10) + ".." : payload);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.payload);, +	}, +, +	@Override, +		return getClass().getSimpleName() + " payload=[" + toStringPayload() +, +				"], byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		super(payload != null ? ByteBuffer.wrap(payload, offset, length) : null, isLast);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, +		return (getPayload() != null ? getPayload().remaining() : 0);, +		return (getPayload() != null ? getPayload().toString() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, + * Copyright 2002-2014 the original author or authors., +	 * Create a new text WebSocket message from the given byte[]. It is assumed, +	 * the byte array can be encoded into an UTF-8 String., +		String payload = getPayload();, +		return (payload.length() > 10 ? payload.substring(0, 10) + ".." : payload);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TextMessageTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]