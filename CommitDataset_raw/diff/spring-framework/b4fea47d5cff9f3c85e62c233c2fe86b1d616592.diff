[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, +import org.springframework.beans.factory.parsing.ComponentRegistrar;, +import org.w3c.dom.Element;, +	/**, +	 * @deprecated since Spring 3.1 in favor of, +	 * {@link #registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry, ComponentRegistrar, Object, Boolean, Boolean)}, +	 */, +	@Deprecated, +	public static void registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, ComponentRegistrar parserContext, Object source, Boolean proxyTargetClass, Boolean exposeProxy) {, +, +		BeanDefinition beanDefinition =, +			AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry, source);, +		useClassProxyingIfNecessary(registry, proxyTargetClass, exposeProxy);, +		registerComponentIfNecessary(beanDefinition, parserContext);, +	}, +, +	public static void registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, ComponentRegistrar parserContext, Object source, Boolean proxyTargetClass) {, +		registerAutoProxyCreatorIfNecessary(registry, parserContext, source, proxyTargetClass, false);, +	}, +, +	/**, +	 * @deprecated since Spring 3.1 in favor of, +	 * {@link #useClassProxyingIfNecessary(BeanDefinitionRegistry, Boolean, Boolean)}, +	 * which does not require a parameter of type org.w3c.dom.Element, +	 */, +	@Deprecated, +	private static void useClassProxyingIfNecessary(BeanDefinitionRegistry registry, Boolean proxyTargetClass, Boolean exposeProxy) {, +		if (proxyTargetClass) {, +			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);, +		}, +		if (exposeProxy) {, +			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);, +		}, +	}, +, +	private static void registerComponentIfNecessary(BeanDefinition beanDefinition, ComponentRegistrar componentRegistrar) {, +			componentRegistrar.registerComponent(componentDefinition);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, +import org.springframework.beans.factory.parsing.ComponentRegistrar;, +import org.w3c.dom.Element;, +	/**, +	 * @deprecated since Spring 3.1 in favor of, +	 * {@link #registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry, ComponentRegistrar, Object, Boolean, Boolean)}, +	 */, +	@Deprecated, +	public static void registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, ComponentRegistrar parserContext, Object source, Boolean proxyTargetClass, Boolean exposeProxy) {, +, +		BeanDefinition beanDefinition =, +			AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry, source);, +		useClassProxyingIfNecessary(registry, proxyTargetClass, exposeProxy);, +		registerComponentIfNecessary(beanDefinition, parserContext);, +	}, +, +	public static void registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, ComponentRegistrar parserContext, Object source, Boolean proxyTargetClass) {, +		registerAutoProxyCreatorIfNecessary(registry, parserContext, source, proxyTargetClass, false);, +	}, +, +	/**, +	 * @deprecated since Spring 3.1 in favor of, +	 * {@link #useClassProxyingIfNecessary(BeanDefinitionRegistry, Boolean, Boolean)}, +	 * which does not require a parameter of type org.w3c.dom.Element, +	 */, +	@Deprecated, +	private static void useClassProxyingIfNecessary(BeanDefinitionRegistry registry, Boolean proxyTargetClass, Boolean exposeProxy) {, +		if (proxyTargetClass) {, +			AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);, +		}, +		if (exposeProxy) {, +			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);, +		}, +	}, +, +	private static void registerComponentIfNecessary(BeanDefinition beanDefinition, ComponentRegistrar componentRegistrar) {, +			componentRegistrar.registerComponent(componentDefinition);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Instantiate a class using its no-arg constructor., +	 * Instantiate a class using its no-arg constructor and return the new instance, +	 * as the the specified assignable type., +	 * <p>Useful in cases where, +	 * the type of the class to instantiate (clazz) is not available, but the type, +	 * desired (assignableTo) is known., +	 * <p>As this method doesn't try to load classes by name, it should avoid, +	 * class-loading issues., +	 * <p>Note that this method tries to set the constructor accessible, +	 * if given a non-accessible (that is, non-public) constructor., +	 * @param clazz class to instantiate, +	 * @param assignableTo type that clazz must be assignableTo, +	 * @return the new instance, +	 * @throws BeanInstantiationException if the bean cannot be instantiated, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T instantiateClass(Class<?> clazz, Class<T> assignableTo) throws BeanInstantiationException {, +		Assert.isAssignable(assignableTo, clazz);, +		return (T)instantiateClass(clazz);, +	}, +]