[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2014 the original author or authors., +		Set<String> result = new HashSet<String>();, +		for (String sessionId : info.getSessionIds()) {, +			result.add(getTargetDestination(, +					headers.getDestination(), info.getDestination(), sessionId, info.getUser()));, +		return result;, +		Set<String> sessionIds;, +				logger.error("Ignoring message, no user info available");, +				return null;, +			}, +			if (headers.getSessionId() == null) {, +				logger.error("Ignoring message, no session id available");, +			sessionIds = Collections.singleton(headers.getSessionId());, +			sessionIds = this.userSessionRegistry.getSessionIds(targetUser);, +		return new UserDestinationInfo(targetUser, targetDestination, sessionIds);, +	protected String getTargetDestination(String origDestination, String targetDestination, String sessionId, String user) {, +		return targetDestination + "-user" + sessionId;, +	}, +, +		private final Set<String> sessionIds;, +, +		private UserDestinationInfo(String user, String destination, Set<String> sessionIds) {, +			this.sessionIds = sessionIds;, +		public String getUser() {, +		public String getDestination() {, +, +		public Set<String> getSessionIds() {, +			return this.sessionIds;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2014 the original author or authors., +		Set<String> result = new HashSet<String>();, +		for (String sessionId : info.getSessionIds()) {, +			result.add(getTargetDestination(, +					headers.getDestination(), info.getDestination(), sessionId, info.getUser()));, +		return result;, +		Set<String> sessionIds;, +				logger.error("Ignoring message, no user info available");, +				return null;, +			}, +			if (headers.getSessionId() == null) {, +				logger.error("Ignoring message, no session id available");, +			sessionIds = Collections.singleton(headers.getSessionId());, +			sessionIds = this.userSessionRegistry.getSessionIds(targetUser);, +		return new UserDestinationInfo(targetUser, targetDestination, sessionIds);, +	protected String getTargetDestination(String origDestination, String targetDestination, String sessionId, String user) {, +		return targetDestination + "-user" + sessionId;, +	}, +, +		private final Set<String> sessionIds;, +, +		private UserDestinationInfo(String user, String destination, Set<String> sessionIds) {, +			this.sessionIds = sessionIds;, +		public String getUser() {, +		public String getDestination() {, +, +		public Set<String> getSessionIds() {, +			return this.sessionIds;, +		}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolverTests.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ID = "123";, +, +		this.registry.registerSessionId("joe", SESSION_ID);, +, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, "joe", SESSION_ID, "/user/queue/foo");, +		Set<String> actual = this.resolver.resolveDestination(message);, +, +		assertEquals(1, actual.size());, +		assertEquals("/queue/foo-user123", actual.iterator().next());, +	}, +, +	// SPR-11325, +, +	@Test, +	public void handleSubscribeOneUserMultipleSessions() {, +, +		this.registry.registerSessionId("joe", "456");, +		this.registry.registerSessionId("joe", "789");, +, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, "joe", SESSION_ID, "/user/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.UNSUBSCRIBE, "joe", SESSION_ID, "/user/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.MESSAGE, "joe", SESSION_ID, "/user/joe/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.MESSAGE, "joe", SESSION_ID, null);, +		message = createMessage(SimpMessageType.MESSAGE, "joe", SESSION_ID, "/queue/foo");, +		message = createMessage(SimpMessageType.SUBSCRIBE, null, SESSION_ID, "/user/queue/foo");, +		message = createMessage(SimpMessageType.SUBSCRIBE, "joe", SESSION_ID, "/queue/foo");, +		message = createMessage(SimpMessageType.CONNECT, "joe", SESSION_ID, "user/joe/queue/foo");, +	private Message<?> createMessage(SimpMessageType messageType, String user, String sessionId, String destination) {, +		if (sessionId != null) {, +			headers.setSessionId(sessionId);, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2014 the original author or authors., +		Set<String> result = new HashSet<String>();, +		for (String sessionId : info.getSessionIds()) {, +			result.add(getTargetDestination(, +					headers.getDestination(), info.getDestination(), sessionId, info.getUser()));, +		return result;]