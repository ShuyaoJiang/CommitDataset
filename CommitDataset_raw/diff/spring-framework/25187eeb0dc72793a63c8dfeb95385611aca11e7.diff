[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import org.springframework.util.Assert;, +	/**, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 */, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +, +	/**, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 */, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +, +	/**, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 */, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type to find; never {@code null}, +		Assert.notNull(annotationType, "annotationType must not be null");, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	/**, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 */, +	/**, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 */, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +]