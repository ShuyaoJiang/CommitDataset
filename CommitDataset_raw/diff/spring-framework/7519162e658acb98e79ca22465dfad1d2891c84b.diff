[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import java.util.ArrayList;, +	private BeanDefinition createDatabasePopulator(List<Element> scripts, ParserContext context) {, +, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ResourceDatabasePopulator.class);, +, +		List<String> locations = new ArrayList<String>();, +			String location = scriptElement.getAttribute("location");, +			locations.add(location);, +, +		// Use a factory bean for the resources so they can be given an order if a pattern is used, +		BeanDefinitionBuilder resourcesFactory = BeanDefinitionBuilder, +				.genericBeanDefinition(SortedResourcesFactoryBean.class);, +		resourcesFactory.addConstructorArgValue(context.getReaderContext().getResourceLoader());, +		resourcesFactory.addConstructorArgValue(locations);, +		builder.addPropertyValue("scripts", resourcesFactory.getBeanDefinition());, +, +		return builder.getBeanDefinition();, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import java.util.ArrayList;, +	private BeanDefinition createDatabasePopulator(List<Element> scripts, ParserContext context) {, +, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ResourceDatabasePopulator.class);, +, +		List<String> locations = new ArrayList<String>();, +			String location = scriptElement.getAttribute("location");, +			locations.add(location);, +, +		// Use a factory bean for the resources so they can be given an order if a pattern is used, +		BeanDefinitionBuilder resourcesFactory = BeanDefinitionBuilder, +				.genericBeanDefinition(SortedResourcesFactoryBean.class);, +		resourcesFactory.addConstructorArgValue(context.getReaderContext().getResourceLoader());, +		resourcesFactory.addConstructorArgValue(locations);, +		builder.addPropertyValue("scripts", resourcesFactory.getBeanDefinition());, +, +		return builder.getBeanDefinition();, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +		// Use a factory bean for the resources so they can be given an order if a pattern is used, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import java.util.ArrayList;, +	private BeanDefinition createDatabasePopulator(List<Element> scripts, ParserContext context) {, +, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ResourceDatabasePopulator.class);, +, +		List<String> locations = new ArrayList<String>();, +			String location = scriptElement.getAttribute("location");, +			locations.add(location);, +, +		// Use a factory bean for the resources so they can be given an order if a pattern is used, +		BeanDefinitionBuilder resourcesFactory = BeanDefinitionBuilder, +				.genericBeanDefinition(SortedResourcesFactoryBean.class);, +		resourcesFactory.addConstructorArgValue(context.getReaderContext().getResourceLoader());, +		resourcesFactory.addConstructorArgValue(locations);, +		builder.addPropertyValue("scripts", resourcesFactory.getBeanDefinition());, +, +		return builder.getBeanDefinition();, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +		// Use a factory bean for the resources so they can be given an order if a pattern is used, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +/**, + * , + */, +package org.springframework.jdbc.config;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.support.ResourcePatternResolver;, +, +public class SortedResourcesFactoryBean implements FactoryBean<Resource[]> {, +, +	private static final Log logger = LogFactory.getLog(SortedResourcesFactoryBean.class);, +	, +	private ResourceLoader resourceLoader;, +	private List<String> locations;, +, +	public SortedResourcesFactoryBean(ResourceLoader resourceLoader, List<String> locations) {, +		super();, +		this.resourceLoader = resourceLoader;, +		this.locations = locations;, +	}, +, +	public Resource[] getObject() throws Exception {, +		List<Resource> scripts = new ArrayList<Resource>();, +		for (String location : locations) {, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Adding resources from pattern: "+location);]