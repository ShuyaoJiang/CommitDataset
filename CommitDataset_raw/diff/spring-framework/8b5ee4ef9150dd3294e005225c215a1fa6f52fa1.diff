[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	@Test, +	public void testAnnotatedDefaultConstructor() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new AutowiredAnnotationBeanPostProcessor());, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedDefaultConstructorBean.class));, +, +		assertNotNull(bf.getBean("annotatedBean"));, +	}, +, +	}, +, +	public static class AnnotatedDefaultConstructorBean {, +, +		@Autowired, +		public AnnotatedDefaultConstructorBean() {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	@Test, +	public void testAnnotatedDefaultConstructor() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new AutowiredAnnotationBeanPostProcessor());, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedDefaultConstructorBean.class));, +, +		assertNotNull(bf.getBean("annotatedBean"));, +	}, +, +	}, +, +	public static class AnnotatedDefaultConstructorBean {, +, +		@Autowired, +		public AnnotatedDefaultConstructorBean() {, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/InjectAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test, +	public void testAnnotatedDefaultConstructor() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new AutowiredAnnotationBeanPostProcessor());, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedDefaultConstructorBean.class));, +, +		assertNotNull(bf.getBean("annotatedBean"));, +	}, +, +, +	public static class AnnotatedDefaultConstructorBean {, +, +		@Inject, +		public AnnotatedDefaultConstructorBean() {, +		}, +	}, +]