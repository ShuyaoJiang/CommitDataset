[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/AbstractBeanFactoryTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory;, +, +import java.beans.PropertyEditorSupport;, +import java.util.StringTokenizer;, +, +import junit.framework.TestCase;, +import junit.framework.Assert;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.PropertyBatchUpdateException;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +, +/**, + * Subclasses must implement setUp() to initialize bean factory, + * and any other variables they need., + *, + * @author Rod Johnson, + * @author Juergen Hoeller, + */, +public abstract class AbstractBeanFactoryTests extends TestCase {, +, +	protected abstract BeanFactory getBeanFactory();, +, +	/**, +	 * Roderick beans inherits from rod, overriding name only., +	 */, +	public void testInheritance() {, +		assertTrue(getBeanFactory().containsBean("rod"));, +		assertTrue(getBeanFactory().containsBean("roderick"));, +		TestBean rod = (TestBean) getBeanFactory().getBean("rod");, +		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick");, +		assertTrue("not == ", rod != roderick);, +		assertTrue("rod.name is Rod", rod.getName().equals("Rod"));, +		assertTrue("rod.age is 31", rod.getAge() == 31);, +		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"));, +		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge());, +	}, +, +	public void testGetBeanWithNullArg() {, +		try {, +			getBeanFactory().getBean(null);, +			fail("Can't get null bean");, +		}, +		catch (IllegalArgumentException ex) {, +			// OK, +		}, +	}, +, +	/**, +	 * Test that InitializingBean objects receive the afterPropertiesSet() callback, +	 */, +	public void testInitializingBeanCallback() {, +		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized");, +		// The dummy business method will throw an exception if the, +		// afterPropertiesSet() callback wasn't invoked, +		mbi.businessMethod();, +	}, +, +	/**, +	 * Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the, +	 * afterPropertiesSet() callback before BeanFactoryAware callbacks, +	 */, +	public void testLifecycleCallbacks() {, +		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle");, +		Assert.assertEquals("lifecycle", lb.getBeanName());, +		// The dummy business method will throw an exception if the, +		// necessary callbacks weren't invoked in the right order., +		lb.businessMethod();, +		assertTrue("Not destroyed", !lb.isDestroyed());, +	}, +, +	public void testFindsValidInstance() {, +		try {, +			Object o = getBeanFactory().getBean("rod");, +			assertTrue("Rod bean is a TestBean", o instanceof TestBean);, +			TestBean rod = (TestBean) o;, +			assertTrue("rod.name is Rod", rod.getName().equals("Rod"));, +			assertTrue("rod.age is 31", rod.getAge() == 31);, +		}, +		catch (Exception ex) {, +			ex.printStackTrace();, +			fail("Shouldn't throw exception on getting valid instance");]