[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		// Explicit alias for a different target meta-annotation?, +		if (!searchWithinSameAnnotation && !targetAnnotationType.equals(aliasedAnnotationType)) {, +			return null;, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		// Explicit alias for a different target meta-annotation?, +		if (!searchWithinSameAnnotation && !targetAnnotationType.equals(aliasedAnnotationType)) {, +			return null;, +		}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +	public void findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames() {, +		final String[] xmlLocations = new String[] { "test.xml" };, +		final String[] propFiles = new String[] { "test.properties" };, +, +		Class<?> element = AliasedComposedContextConfigAndTestPropSourceClass.class;, +, +		ContextConfig contextConfig = findMergedAnnotation(element, ContextConfig.class);, +		assertNotNull("@ContextConfig on " + element, contextConfig);, +		assertArrayEquals("locations", xmlLocations, contextConfig.locations());, +		assertArrayEquals("value", xmlLocations, contextConfig.value());, +, +		// Synthesized annotation, +		TestPropSource testPropSource = AnnotationUtils.findAnnotation(element, TestPropSource.class);, +		assertArrayEquals("locations", propFiles, testPropSource.locations());, +		assertArrayEquals("value", propFiles, testPropSource.value());, +, +		// Merged annotation, +		testPropSource = findMergedAnnotation(element, TestPropSource.class);, +		assertNotNull("@TestPropSource on " + element, testPropSource);, +		assertArrayEquals("locations", propFiles, testPropSource.locations());, +		assertArrayEquals("value", propFiles, testPropSource.value());, +	}, +, +	@Test, +	 * Mock of {@code org.springframework.test.context.TestPropertySource}., +	 */, +	@Retention(RetentionPolicy.RUNTIME), +	@interface TestPropSource {, +, +		@AliasFor("locations"), +		String[] value() default {};, +, +		@AliasFor("value"), +		String[] locations() default {};, +	}, +, +	/**, +	@ContextConfig(locations = "shadowed.xml"), +	@TestPropSource(locations = "test.properties"), +	@Retention(RetentionPolicy.RUNTIME), +	@interface AliasedComposedContextConfigAndTestPropSource {, +, +		@AliasFor(annotation = ContextConfig.class, attribute = "locations"), +		String[] xmlConfigFiles() default "default.xml";, +	}, +, +	@AliasedComposedContextConfigAndTestPropSource(xmlConfigFiles = "test.xml"), +	static class AliasedComposedContextConfigAndTestPropSourceClass {, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		// Explicit alias for a different target meta-annotation?, +		if (!searchWithinSameAnnotation && !targetAnnotationType.equals(aliasedAnnotationType)) {, +			return null;, +		}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +	public void findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames() {, +		final String[] xmlLocations = new String[] { "test.xml" };, +		final String[] propFiles = new String[] { "test.properties" };, +, +		Class<?> element = AliasedComposedContextConfigAndTestPropSourceClass.class;, +, +		ContextConfig contextConfig = findMergedAnnotation(element, ContextConfig.class);, +		assertNotNull("@ContextConfig on " + element, contextConfig);, +		assertArrayEquals("locations", xmlLocations, contextConfig.locations());, +		assertArrayEquals("value", xmlLocations, contextConfig.value());, +, +		// Synthesized annotation, +		TestPropSource testPropSource = AnnotationUtils.findAnnotation(element, TestPropSource.class);, +		assertArrayEquals("locations", propFiles, testPropSource.locations());, +		assertArrayEquals("value", propFiles, testPropSource.value());, +, +		// Merged annotation, +		testPropSource = findMergedAnnotation(element, TestPropSource.class);, +		assertNotNull("@TestPropSource on " + element, testPropSource);, +		assertArrayEquals("locations", propFiles, testPropSource.locations());, +		assertArrayEquals("value", propFiles, testPropSource.value());, +	}, +, +	@Test, +	 * Mock of {@code org.springframework.test.context.TestPropertySource}., +	 */, +	@Retention(RetentionPolicy.RUNTIME), +	@interface TestPropSource {, +, +		@AliasFor("locations")]