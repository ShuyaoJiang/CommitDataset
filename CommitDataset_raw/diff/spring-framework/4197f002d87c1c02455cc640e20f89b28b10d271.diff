[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return new WriteWithOperator<>(publisher, writePublisher ->, +						applyBeforeCommit().after(() -> setBodyInternal(writePublisher)));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return new WriteWithOperator<>(publisher, writePublisher ->, +						applyBeforeCommit().after(() -> setBodyInternal(writePublisher)));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/WriteWithOperator.java, +import reactor.core.publisher.MonoSource;, +import org.springframework.util.Assert;, +, + * @author Stephane Maldini, +public class WriteWithOperator<T> extends MonoSource<T, Void> {, +	public WriteWithOperator(Publisher<? extends T> source,, +			Function<Publisher<T>, Publisher<Void>> writeFunction) {, +		super(source);, +	public void subscribe(Subscriber<? super Void> s) {, +		source.subscribe(new WriteWithBarrier(s));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return new WriteWithOperator<>(publisher, writePublisher ->, +						applyBeforeCommit().after(() -> setBodyInternal(writePublisher)));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/WriteWithOperator.java, +import reactor.core.publisher.MonoSource;, +import org.springframework.util.Assert;, +, + * @author Stephane Maldini, +public class WriteWithOperator<T> extends MonoSource<T, Void> {, +	public WriteWithOperator(Publisher<? extends T> source,, +			Function<Publisher<T>, Publisher<Void>> writeFunction) {, +		super(source);, +	public void subscribe(Subscriber<? super Void> s) {, +		source.subscribe(new WriteWithBarrier(s));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +				return Mono.from((Publisher<Void>)publisher);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return new WriteWithOperator<>(publisher, writePublisher ->, +						applyBeforeCommit().after(() -> setBodyInternal(writePublisher)));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/WriteWithOperator.java, +import reactor.core.publisher.MonoSource;, +import org.springframework.util.Assert;, +, + * @author Stephane Maldini, +public class WriteWithOperator<T> extends MonoSource<T, Void> {, +	public WriteWithOperator(Publisher<? extends T> source,, +			Function<Publisher<T>, Publisher<Void>> writeFunction) {, +		super(source);, +	public void subscribe(Subscriber<? super Void> s) {, +		source.subscribe(new WriteWithBarrier(s));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +				return Mono.from((Publisher<Void>)publisher);, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/WriteWithOperatorTests.java, +import reactor.core.publisher.Mono;, + * @author Stephane Maldini, +	}, +, +	private <T> Mono<Void> writeWithOperator(Publisher<String> source){, +		return new WriteWithOperator<>(source, writer::writeWith);, +		Mono<Void> completion = Mono.<String>error(error).as(this::writeWithOperator);, +		Mono<Void> completion = Flux.<String>empty().as(this::writeWithOperator);, +		Mono<Void> completion = Flux.just("one").as(this::writeWithOperator);, +		List<Signal<Void>> signals =completion.as(Fluxion::from).materialize().toList().get();, +		Mono<Void> completion = Flux.fromIterable(items).as(this::writeWithOperator);, +		List<Signal<Void>> signals = completion.as(Fluxion::from).materialize().toList().get();, +		Mono<Void> completion = publisher.as(this::writeWithOperator);, +		List<Signal<Void>> signals = completion.as(Fluxion::from).materialize().toList().get();]