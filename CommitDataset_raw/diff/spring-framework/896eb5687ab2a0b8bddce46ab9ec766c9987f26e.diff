[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		String actualScheme = uri.getScheme();, +		Assert.notNull(actualScheme, "Actual request scheme must not be null");, +		return (actualScheme.equals(originUrl.getScheme()) &&, +				actualHost.equals(originUrl.getHost()) &&, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		String actualScheme = uri.getScheme();, +		Assert.notNull(actualScheme, "Actual request scheme must not be null");, +		return (actualScheme.equals(originUrl.getScheme()) &&, +				actualHost.equals(originUrl.getHost()) &&, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +		return (ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		String actualScheme = uri.getScheme();, +		Assert.notNull(actualScheme, "Actual request scheme must not be null");, +		return (actualScheme.equals(originUrl.getScheme()) &&, +				actualHost.equals(originUrl.getHost()) &&, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +		return (ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsUtilsTests.java, +	@Test  // SPR-16362, +	public void isSameOriginWithDifferentSchemes() {, +		MockServerHttpRequest request = MockServerHttpRequest, +				.get("http://mydomain1.com"), +				.header(HttpHeaders.ORIGIN, "https://mydomain1.com"), +				.build();, +		assertFalse(CorsUtils.isSameOrigin(request));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		String actualScheme = uri.getScheme();, +		Assert.notNull(actualScheme, "Actual request scheme must not be null");, +		return (actualScheme.equals(originUrl.getScheme()) &&, +				actualHost.equals(originUrl.getHost()) &&, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +		return (ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsUtilsTests.java, +	@Test  // SPR-16362, +	public void isSameOriginWithDifferentSchemes() {, +		MockServerHttpRequest request = MockServerHttpRequest, +				.get("http://mydomain1.com"), +				.header(HttpHeaders.ORIGIN, "https://mydomain1.com"), +				.build();, +		assertFalse(CorsUtils.isSameOrigin(request));, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/util/WebUtilsTests.java, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com:80"));, +		assertTrue(checkSameOrigin("https", "mydomain1.com", 443, "https://mydomain1.com"));, +		assertTrue(checkSameOrigin("https", "mydomain1.com", 443, "https://mydomain1.com:443"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", 123, "http://mydomain1.com:123"));, +		assertTrue(checkSameOrigin("ws", "mydomain1.com", -1, "ws://mydomain1.com"));, +		assertTrue(checkSameOrigin("wss", "mydomain1.com", 443, "wss://mydomain1.com"));, +		assertFalse(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain2.com"));, +		assertFalse(checkSameOrigin("http", "mydomain1.com", -1, "https://mydomain1.com"));, +		assertFalse(checkSameOrigin("http", "mydomain1.com", -1, "invalid-origin"));, +		assertFalse(checkSameOrigin("https", "mydomain1.com", -1, "http://mydomain1.com"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com/"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com:80/"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com/path"));, +		assertTrue(checkSameOrigin("http", "mydomain1.com", -1, "http://mydomain1.com:80/path"));, +		assertFalse(checkSameOrigin("http", "mydomain2.com", -1, "http://mydomain1.com/"));, +		assertFalse(checkSameOrigin("http", "mydomain2.com", -1, "http://mydomain1.com:80/"));, +		assertFalse(checkSameOrigin("http", "mydomain2.com", -1, "http://mydomain1.com/path"));, +		assertFalse(checkSameOrigin("http", "mydomain2.com", -1, "http://mydomain1.com:80/path"));, +		assertTrue(checkSameOrigin("http", "[::1]", -1, "http://[::1]"));, +		assertTrue(checkSameOrigin("http", "[::1]", 8080, "http://[::1]:8080"));, +		assertTrue(checkSameOrigin("http",, +		assertTrue(checkSameOrigin("http",, +		assertFalse(checkSameOrigin("http", "[::1]", -1, "http://[::1]:8080"));, +		assertFalse(checkSameOrigin("http", "[::1]", 8080,, +	private boolean checkSameOrigin(String scheme, String serverName, int port, String originHeader) {, +		servletRequest.setScheme(scheme);]