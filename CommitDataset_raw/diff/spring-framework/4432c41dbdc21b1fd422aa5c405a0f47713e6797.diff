[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (isSingletonCurrentlyInCreation(beanName) ||, +					(mbd.getFactoryBeanName() != null && isSingletonCurrentlyInCreation(mbd.getFactoryBeanName()))) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (isSingletonCurrentlyInCreation(beanName) ||, +					(mbd.getFactoryBeanName() != null && isSingletonCurrentlyInCreation(mbd.getFactoryBeanName()))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationWithFactoryBeanAndAutowiringTests.java, + * Copyright 2002-2014 the original author or authors., +, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +	@Test, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +	@Test, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (isSingletonCurrentlyInCreation(beanName) ||, +					(mbd.getFactoryBeanName() != null && isSingletonCurrentlyInCreation(mbd.getFactoryBeanName()))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationWithFactoryBeanAndAutowiringTests.java, + * Copyright 2002-2014 the original author or authors., +, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +	@Test, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +	@Test, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +import org.springframework.beans.factory.FactoryBean;, +	public void withResolvablePlaceholderAndFactoryBean() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithResolvablePlaceholderAndFactoryBean.class);, +		System.setProperty("path.to.properties", "org/springframework/context/annotation");, +		ctx.refresh();, +		assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"));, +		System.clearProperty("path.to.properties");, +	}, +, +	@Test, +	@PropertySource(value="classpath:${path.to.properties}/p1.properties"), +	static class ConfigWithResolvablePlaceholderAndFactoryBean {, +, +		@Inject Environment env;, +, +		@Bean, +		public FactoryBean testBean() {, +			final String name = env.getProperty("testbean.name");, +			return new FactoryBean() {, +				@Override, +				public Object getObject() {, +					return new TestBean(name);, +				}, +				@Override, +				public Class<?> getObjectType() {, +					return TestBean.class;, +				}, +				@Override, +				public boolean isSingleton() {, +					return false;, +				}, +			};, +		}, +	}, +, +, +	@Configuration]