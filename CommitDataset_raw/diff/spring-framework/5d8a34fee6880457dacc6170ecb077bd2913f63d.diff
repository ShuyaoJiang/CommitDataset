[+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java, +, +		// Preferred option: JDK 9+ Lookup.defineClass API if ClassLoader matches, +		if (contextClass != null && contextClass.getClassLoader() == loader &&, +				privateLookupInMethod != null && lookupDefineClassMethod != null) {, +, +		// Classic option: protected ClassLoader.defineClass method, +		if (c == null && classLoaderDefineClassMethod != null) {, +				// Fall through if setAccessible fails with InaccessibleObjectException on JDK 9+, +				// (on the module path and/or with a JVM bootstrapped with --illegal-access=deny), +				if (!ex.getClass().getName().endsWith("InaccessibleObjectException")) {, +		}, +, +		// Fallback option: JDK 9+ Lookup.defineClass API even if ClassLoader does not match, +		if (c == null && contextClass != null && contextClass.getClassLoader() != loader &&, +				privateLookupInMethod != null && lookupDefineClassMethod != null) {, +			try {, +				MethodHandles.Lookup lookup = (MethodHandles.Lookup), +						privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());, +				c = (Class) lookupDefineClassMethod.invoke(lookup, b);, +			}, +			catch (InvocationTargetException ex) {, +				throw new CodeGenerationException(ex.getTargetException());, +			}, +			catch (Throwable ex) {, +				throw new CodeGenerationException(ex);, +			}, +		}, +, +		// No defineClass variant available at all?, +		if (c == null) {, +]