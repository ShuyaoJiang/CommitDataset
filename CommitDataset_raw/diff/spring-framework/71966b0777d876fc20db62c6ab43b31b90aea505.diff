[+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, +				Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +	 * Determine the conventional variable name for the supplied {@code Object}, +	 * based on its concrete type. The convention used is to return the, +	 * un-capitalized short name of the {@code Class}, according to JavaBeans, +	 * property naming rules., +	 *, +	 * <p>For example:<br>, +	 * {@code com.myapp.Product} becomes {@code "product"}<br>, +	 * {@code com.myapp.MyProduct} becomes {@code "myProduct"}<br>, +	 * {@code com.myapp.UKProduct} becomes {@code "UKProduct"}<br>, +	 *, +	 * <p>For arrays the pluralized version of the array component type is used., +	 * For {@code Collection}s an attempt is made to 'peek ahead' to determine, +	 * the component type and return its pluralized version., +	 *, +				throw new IllegalArgumentException(, +						"Cannot generate variable name for an empty Collection");, +	 * Determine the conventional variable name for the given parameter taking, +	 * the generic collection type, if any, into account., +	 * @param parameter the method or constructor parameter, +	 * Determine the conventional variable name for the return type of the, +	 * given method, taking the generic collection type, if any, into account., +	 * Determine the conventional variable name for the return type of the given, +	 * method, taking the generic collection type, if any, into account, falling, +	 * back on the given actual return value if the method declaration is not, +	 * specific enough, e.g. {@code Object} return type or untyped collection., +	 * Determine the conventional variable name for the return type of the given, +	 * method, taking the generic collection type, if any, into account, falling, +	 * back on the given return value if the method declaration is not specific, +	 * enough, e.g. {@code Object} return type or untyped collection., +				throw new IllegalArgumentException(, +						"Cannot generate variable name for an Object return type with null value");, +					throw new IllegalArgumentException("Cannot generate variable name " +, +							"for non-typed Collection return type and a non-Collection value");, +					throw new IllegalArgumentException("Cannot generate variable name " +, +							"for non-typed Collection return type and an empty Collection value");, +	 * Convert {@code String}s in attribute name format (e.g. lowercase, hyphens, +	 * separating words) into property name format (camel-case). For example, +	 * {@code transaction-manager} becomes {@code "transactionManager"}., +	 * Return an attribute name qualified by the given enclosing {@link Class}., +	 * For example the attribute name '{@code foo}' qualified by {@link Class}, +	 * '{@code com.myapp.SomeClass}' would be '{@code com.myapp.SomeClass.foo}', +	 * Determine the class to use for naming a variable containing the given value., +	 * <p>Will return the class of the given value, except when encountering a, +	 * JDK proxy, in which case it will determine the 'primary' interface, +	 * implemented by that proxy., +	 * Retrieve the {@code Class} of an element in the {@code Collection}., +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, +				Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +	 * Determine the conventional variable name for the supplied {@code Object}, +	 * based on its concrete type. The convention used is to return the, +	 * un-capitalized short name of the {@code Class}, according to JavaBeans, +	 * property naming rules., +	 *, +	 * <p>For example:<br>, +	 * {@code com.myapp.Product} becomes {@code "product"}<br>, +	 * {@code com.myapp.MyProduct} becomes {@code "myProduct"}<br>, +	 * {@code com.myapp.UKProduct} becomes {@code "UKProduct"}<br>, +	 *, +	 * <p>For arrays the pluralized version of the array component type is used., +	 * For {@code Collection}s an attempt is made to 'peek ahead' to determine, +	 * the component type and return its pluralized version., +	 *, +				throw new IllegalArgumentException(, +						"Cannot generate variable name for an empty Collection");, +	 * Determine the conventional variable name for the given parameter taking, +	 * the generic collection type, if any, into account., +	 * @param parameter the method or constructor parameter, +	 * Determine the conventional variable name for the return type of the, +	 * given method, taking the generic collection type, if any, into account., +	 * Determine the conventional variable name for the return type of the given, +	 * method, taking the generic collection type, if any, into account, falling, +	 * back on the given actual return value if the method declaration is not, +	 * specific enough, e.g. {@code Object} return type or untyped collection., +	 * Determine the conventional variable name for the return type of the given, +	 * method, taking the generic collection type, if any, into account, falling, +	 * back on the given return value if the method declaration is not specific, +	 * enough, e.g. {@code Object} return type or untyped collection., +				throw new IllegalArgumentException(, +						"Cannot generate variable name for an Object return type with null value");, +					throw new IllegalArgumentException("Cannot generate variable name " +, +							"for non-typed Collection return type and a non-Collection value");, +					throw new IllegalArgumentException("Cannot generate variable name " +, +							"for non-typed Collection return type and an empty Collection value");, +	 * Convert {@code String}s in attribute name format (e.g. lowercase, hyphens, +	 * separating words) into property name format (camel-case). For example, +	 * {@code transaction-manager} becomes {@code "transactionManager"}., +	 * Return an attribute name qualified by the given enclosing {@link Class}., +	 * For example the attribute name '{@code foo}' qualified by {@link Class}, +	 * '{@code com.myapp.SomeClass}' would be '{@code com.myapp.SomeClass.foo}', +	 * Determine the class to use for naming a variable containing the given value., +	 * <p>Will return the class of the given value, except when encountering a, +	 * JDK proxy, in which case it will determine the 'primary' interface, +	 * implemented by that proxy., +	 * Retrieve the {@code Class} of an element in the {@code Collection}., +++ b/spring-core/src/test/java/org/springframework/core/ConventionsTests.java, + * Copyright 2002-2017 the original author or authors.]