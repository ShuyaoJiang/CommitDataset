[+++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(Class<?> sourceType, Class<?> targetType);, +, +	/**, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(Class<?> sourceType, Class<?> targetType);, +, +	/**, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ArrayToArrayConverter.java, + * Copyright 2002-2012 the original author or authors., +import java.util.List;, + * Converts an Array to another Array. First adapts the source array to a List, then, + * delegates to {@link CollectionToArrayConverter} to perform the target array conversion., + * @author Phillip Webb, +	private final ConversionService conversionService;, +, +		this.conversionService = conversionService;, +	public Object convert(Object source, TypeDescriptor sourceType,, +			TypeDescriptor targetType) {, +		if (conversionService.canBypassConvert(sourceType.getElementTypeDescriptor(),, +				targetType.getElementTypeDescriptor())) {, +			return source;, +		}, +		List<Object> sourceList = Arrays.asList(ObjectUtils.toObjectArray(source));, +		return this.helperConverter.convert(sourceList, sourceType, targetType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(Class<?> sourceType, Class<?> targetType);, +, +	/**, +	 * Returns true if conversion between the sourceType and targetType can be bypassed., +	 * More precisely this method will return true if objects of sourceType can be, +	 * converted to the targetType by returning the source object unchanged., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * @param targetType context about the target type to convert to (required), +	 * @return true if conversion can be bypassed, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ArrayToArrayConverter.java, + * Copyright 2002-2012 the original author or authors., +import java.util.List;, + * Converts an Array to another Array. First adapts the source array to a List, then, + * delegates to {@link CollectionToArrayConverter} to perform the target array conversion., + * @author Phillip Webb, +	private final ConversionService conversionService;, +]