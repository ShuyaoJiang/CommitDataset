[+++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/FileEditor.java, +		File file = null;, +			file = new File(text);, +		if (file == null || resource.exists()) {, +			// Set a relative File reference and hope for the best., +			setValue(file);, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/FileEditor.java, +		File file = null;, +			file = new File(text);, +		if (file == null || resource.exists()) {, +			// Set a relative File reference and hope for the best., +			setValue(file);, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java, + * qualified standard URL and Spring's special "classpath:" pseudo-URL, as, + * well as Spring's context-specific relative file paths. As a fallback, a, + * path will be resolved in the file system via {@code Paths#get(String)}, + * if no existing context-relative resource could be found., +		boolean nioPathCandidate = !text.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX);, +		if (nioPathCandidate && !text.startsWith("/")) {, +					nioPathCandidate = false;, +		if (resource == null) {, +			setValue(null);, +		}, +		else if (!resource.exists() && nioPathCandidate) {, +			setValue(Paths.get(text).normalize());, +		}, +		else {, +				setValue(resource.getFile().toPath());, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/FileEditor.java, +		File file = null;, +			file = new File(text);, +		if (file == null || resource.exists()) {, +			// Set a relative File reference and hope for the best., +			setValue(file);, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java, + * qualified standard URL and Spring's special "classpath:" pseudo-URL, as, + * well as Spring's context-specific relative file paths. As a fallback, a, + * path will be resolved in the file system via {@code Paths#get(String)}, + * if no existing context-relative resource could be found., +		boolean nioPathCandidate = !text.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX);, +		if (nioPathCandidate && !text.startsWith("/")) {, +					nioPathCandidate = false;, +		if (resource == null) {, +			setValue(null);, +		}, +		else if (!resource.exists() && nioPathCandidate) {, +			setValue(Paths.get(text).normalize());, +		}, +		else {, +				setValue(resource.getFile().toPath());, +	}, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/FileEditorTests.java, + * @author Juergen Hoeller, +		String absolutePath = file.getAbsolutePath().replace('\\', '/');, +		String absolutePath = file.getAbsolutePath().replace('\\', '/');, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/FileEditor.java, +		File file = null;, +			file = new File(text);, +		if (file == null || resource.exists()) {, +			// Set a relative File reference and hope for the best., +			setValue(file);, +++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java, + * qualified standard URL and Spring's special "classpath:" pseudo-URL, as, + * well as Spring's context-specific relative file paths. As a fallback, a, + * path will be resolved in the file system via {@code Paths#get(String)}, + * if no existing context-relative resource could be found., +		boolean nioPathCandidate = !text.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX);, +		if (nioPathCandidate && !text.startsWith("/")) {, +					nioPathCandidate = false;, +		if (resource == null) {, +			setValue(null);, +		}, +		else if (!resource.exists() && nioPathCandidate) {, +			setValue(Paths.get(text).normalize());, +		}, +		else {, +				setValue(resource.getFile().toPath());, +	}, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/FileEditorTests.java, + * @author Juergen Hoeller, +		String absolutePath = file.getAbsolutePath().replace('\\', '/');, +		String absolutePath = file.getAbsolutePath().replace('\\', '/');, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/PathEditorTests.java, +	public void testAbsolutePath() throws Exception {, +		PropertyEditor pathEditor = new PathEditor();, +		pathEditor.setAsText("/no_way_this_file_is_found.doc");, +		Object value = pathEditor.getValue();, +		assertTrue(value instanceof Path);, +		Path path = (Path) value;, +		assertTrue(!path.toFile().exists());, +	}, +, +	@Test, +	@Test, +	public void testUnqualifiedPathNameNotFound() throws Exception {, +		PropertyEditor pathEditor = new PathEditor();, +		String fileName = ClassUtils.classPackageAsResourcePath(getClass()) + "/" +, +				ClassUtils.getShortName(getClass()) + ".clazz";, +		pathEditor.setAsText(fileName);]