[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +		return resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));, +	}, +, +	/**, +	 * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts, +	 * an already extracted key., +	 * @since 3.2.16, +	 */, +	public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key), +			throws HttpMediaTypeNotAcceptableException {, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +		return resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));, +	}, +, +	/**, +	 * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts, +	 * an already extracted key., +	 * @since 3.2.16, +	 */, +	public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key), +			throws HttpMediaTypeNotAcceptableException {, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * Return the configured content negotiation strategies., +	 * @since 3.2.16, +	 */, +	public List<ContentNegotiationStrategy> getStrategies() {, +		return this.strategies;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +		return resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));, +	}, +, +	/**, +	 * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts, +	 * an already extracted key., +	 * @since 3.2.16, +	 */, +	public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key), +			throws HttpMediaTypeNotAcceptableException {, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * Return the configured content negotiation strategies., +	 * @since 3.2.16, +	 */, +	public List<ContentNegotiationStrategy> getStrategies() {, +		return this.strategies;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.web.accept.ContentNegotiationStrategy;, +import org.springframework.web.accept.PathExtensionContentNegotiationStrategy;, +	private static final Set<String> WHITELISTED_MEDIA_BASE_TYPES = new HashSet<String>(, +			Arrays.asList("audio", "image", "video"));, +, +	private final PathExtensionContentNegotiationStrategy pathStrategy;, +, +, +		this.pathStrategy = initPathStrategy(this.contentNegotiationManager);, +	private static PathExtensionContentNegotiationStrategy initPathStrategy(ContentNegotiationManager manager) {, +		for (ContentNegotiationStrategy strategy : manager.getStrategies()) {, +			if (strategy instanceof PathExtensionContentNegotiationStrategy) {, +				return (PathExtensionContentNegotiationStrategy) strategy;, +			}, +		}, +		return new PathExtensionContentNegotiationStrategy();, +	}, +, +		return safeMediaTypesForExtension(extension);, +	}, +, +	private boolean safeMediaTypesForExtension(String extension) {, +		List<MediaType> mediaTypes = null;, +		try {, +			mediaTypes = this.pathStrategy.resolveMediaTypeKey(null, extension);, +		}, +		catch (HttpMediaTypeNotAcceptableException e) {, +			// Ignore, +		}, +		if (CollectionUtils.isEmpty(mediaTypes)) {, +		for (MediaType mediaType : mediaTypes) {, +			if (!safeMediaType(mediaType)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +	private boolean safeMediaType(MediaType mediaType) {, +		return (WHITELISTED_MEDIA_BASE_TYPES.contains(mediaType.getType()) ||, +				mediaType.getSubtype().endsWith("+xml"));, +	}]