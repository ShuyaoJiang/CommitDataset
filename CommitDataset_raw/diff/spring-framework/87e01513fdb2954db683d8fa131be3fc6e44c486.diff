[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., +	 * Whether the type of the given session matches the transport type of this, +	 * {@code TransportHandler} where session id and the transport type are, +	 * extracted from the SockJS URL., +	 * @since 4.3.3, +	 */, +	boolean checkSessionType(SockJsSession session);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., +	 * Whether the type of the given session matches the transport type of this, +	 * {@code TransportHandler} where session id and the transport type are, +	 * extracted from the SockJS URL., +	 * @since 4.3.3, +	 */, +	boolean checkSessionType(SockJsSession session);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java, +				if (!transportHandler.checkSessionType(session)) {, +					logger.debug("Session type does not match the transport type for the request.");, +					response.setStatusCode(HttpStatus.NOT_FOUND);, +					return;, +				}, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., +	 * Whether the type of the given session matches the transport type of this, +	 * {@code TransportHandler} where session id and the transport type are, +	 * extracted from the SockJS URL., +	 * @since 4.3.3, +	 */, +	boolean checkSessionType(SockJsSession session);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java, +				if (!transportHandler.checkSessionType(session)) {, +					logger.debug("Session type does not match the transport type for the request.");, +					response.setStatusCode(HttpStatus.NOT_FOUND);, +					return;, +				}, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler.java, +	@Override, +	public boolean checkSessionType(SockJsSession session) {, +		return session instanceof AbstractHttpSockJsSession;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., +	 * Whether the type of the given session matches the transport type of this, +	 * {@code TransportHandler} where session id and the transport type are, +	 * extracted from the SockJS URL., +	 * @since 4.3.3, +	 */, +	boolean checkSessionType(SockJsSession session);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java, +				if (!transportHandler.checkSessionType(session)) {, +					logger.debug("Session type does not match the transport type for the request.");, +					response.setStatusCode(HttpStatus.NOT_FOUND);, +					return;, +				}, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler.java, +	@Override, +	public boolean checkSessionType(SockJsSession session) {, +		return session instanceof AbstractHttpSockJsSession;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/EventSourceTransportHandler.java, +import org.springframework.web.socket.sockjs.transport.SockJsSession;, +import org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession;, +	public boolean checkSessionType(SockJsSession session) {, +		return session instanceof EventSourceStreamingSockJsSession;, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandler.java, + * Copyright 2002-2016 the original author or authors., +	 * Whether the type of the given session matches the transport type of this, +	 * {@code TransportHandler} where session id and the transport type are, +	 * extracted from the SockJS URL., +	 * @since 4.3.3, +	 */, +	boolean checkSessionType(SockJsSession session);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java, +				if (!transportHandler.checkSessionType(session)) {, +					logger.debug("Session type does not match the transport type for the request.");]