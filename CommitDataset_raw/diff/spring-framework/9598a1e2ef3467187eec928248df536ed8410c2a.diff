[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2014 the original author or authors., + * Annotation that indicates the return value of a message-handling method should, + * be sent as a {@link org.springframework.messaging.Message} to the specified, + * destination(s) prepended with {@code "/user/{username}"} where the user, + * name is extracted from the headers of the input message being handled., + * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, + * @see org.springframework.messaging.simp.SimpMessageHeaderAccessor#getUser(), +	 * One or more destinations to send a message to. If left unspecified, a, +	 * default destination is selected based on the destination of the input, +	 * message being handled., +	 * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, +	 * Whether messages should be sent to all sessions associated with the user, +	 * or only to the session of the input message being handled., +	 * <p>By default this is set to {@code true} in which case messages are, +	 * broadcast to all sessions., +    boolean broadcast() default true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2014 the original author or authors., + * Annotation that indicates the return value of a message-handling method should, + * be sent as a {@link org.springframework.messaging.Message} to the specified, + * destination(s) prepended with {@code "/user/{username}"} where the user, + * name is extracted from the headers of the input message being handled., + * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, + * @see org.springframework.messaging.simp.SimpMessageHeaderAccessor#getUser(), +	 * One or more destinations to send a message to. If left unspecified, a, +	 * default destination is selected based on the destination of the input, +	 * message being handled., +	 * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, +	 * Whether messages should be sent to all sessions associated with the user, +	 * or only to the session of the input message being handled., +	 * <p>By default this is set to {@code true} in which case messages are, +	 * broadcast to all sessions., +    boolean broadcast() default true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import java.lang.annotation.Annotation;, +import java.security.Principal;, +, +				if (sendToUser.broadcast()) {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue);, +				else {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue, createHeaders(sessionId));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2014 the original author or authors., + * Annotation that indicates the return value of a message-handling method should, + * be sent as a {@link org.springframework.messaging.Message} to the specified, + * destination(s) prepended with {@code "/user/{username}"} where the user, + * name is extracted from the headers of the input message being handled., + * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, + * @see org.springframework.messaging.simp.SimpMessageHeaderAccessor#getUser(), +	 * One or more destinations to send a message to. If left unspecified, a, +	 * default destination is selected based on the destination of the input, +	 * message being handled., +	 * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, +	 * Whether messages should be sent to all sessions associated with the user, +	 * or only to the session of the input message being handled., +	 * <p>By default this is set to {@code true} in which case messages are, +	 * broadcast to all sessions., +    boolean broadcast() default true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import java.lang.annotation.Annotation;, +import java.security.Principal;, +, +				if (sendToUser.broadcast()) {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue);, +				else {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue, createHeaders(sessionId));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);, +			sessionIds = (sessionId != null ?, +					Collections.singleton(sessionId) : this.userSessionRegistry.getSessionIds(user));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2014 the original author or authors., + * Annotation that indicates the return value of a message-handling method should, + * be sent as a {@link org.springframework.messaging.Message} to the specified, + * destination(s) prepended with {@code "/user/{username}"} where the user, + * name is extracted from the headers of the input message being handled., + * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, + * @see org.springframework.messaging.simp.SimpMessageHeaderAccessor#getUser(), +	 * One or more destinations to send a message to. If left unspecified, a, +	 * default destination is selected based on the destination of the input, +	 * message being handled., +	 * @see org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, +	 * Whether messages should be sent to all sessions associated with the user, +	 * or only to the session of the input message being handled., +	 * <p>By default this is set to {@code true} in which case messages are, +	 * broadcast to all sessions., +    boolean broadcast() default true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import java.lang.annotation.Annotation;, +import java.security.Principal;, +, +				if (sendToUser.broadcast()) {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue);, +				else {, +					this.messagingTemplate.convertAndSendToUser(user, destination, returnValue, createHeaders(sessionId));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);, +			sessionIds = (sessionId != null ?, +					Collections.singleton(sessionId) : this.userSessionRegistry.getSessionIds(user));]