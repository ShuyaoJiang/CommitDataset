[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Properties mediaTypes = new Properties();, +	private String parameterName;, +, +	 * Add mappings from file extensions to media types., +	 * <p>If this property is not set, the Java Action Framework, if available, may, +	 * still be used in conjunction with {@link #setFavorPathExtension(boolean)}., +			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	 * nor a request parameter, nor the {@code Accept} header could help determine, +	 * the requested content type., +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Properties mediaTypes = new Properties();, +	private String parameterName;, +, +	 * Add mappings from file extensions to media types., +	 * <p>If this property is not set, the Java Action Framework, if available, may, +	 * still be used in conjunction with {@link #setFavorPathExtension(boolean)}., +			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	 * nor a request parameter, nor the {@code Accept} header could help determine, +	 * the requested content type., +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ParameterContentNegotiationStrategy.java, +		Assert.notEmpty(mediaTypes, "Cannot look up media types without any mappings");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Properties mediaTypes = new Properties();, +	private String parameterName;, +, +	 * Add mappings from file extensions to media types., +	 * <p>If this property is not set, the Java Action Framework, if available, may, +	 * still be used in conjunction with {@link #setFavorPathExtension(boolean)}., +			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	 * nor a request parameter, nor the {@code Accept} header could help determine, +	 * the requested content type., +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ParameterContentNegotiationStrategy.java, +		Assert.notEmpty(mediaTypes, "Cannot look up media types without any mappings");, +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, +import java.util.Properties;, +		Properties mediaTypes = new Properties();, +		mediaTypes.put("json", MediaType.APPLICATION_JSON_VALUE);, +		this.factoryBean.setMediaTypes(mediaTypes);, +		this.factoryBean.setParameterName("f");, +		Properties mediaTypes = new Properties();, +		mediaTypes.put("json", MediaType.APPLICATION_JSON_VALUE);, +		this.factoryBean.setMediaTypes(mediaTypes);, +		this.servletRequest.addParameter("f", "json");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Properties mediaTypes = new Properties();, +	private String parameterName;, +, +	 * Add mappings from file extensions to media types., +	 * <p>If this property is not set, the Java Action Framework, if available, may, +	 * still be used in conjunction with {@link #setFavorPathExtension(boolean)}., +			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	 * nor a request parameter, nor the {@code Accept} header could help determine, +	 * the requested content type., +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ParameterContentNegotiationStrategy.java, +		Assert.notEmpty(mediaTypes, "Cannot look up media types without any mappings");, +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, +import java.util.Properties;, +		Properties mediaTypes = new Properties();, +		mediaTypes.put("json", MediaType.APPLICATION_JSON_VALUE);]