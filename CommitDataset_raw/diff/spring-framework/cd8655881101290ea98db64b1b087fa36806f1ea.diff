[+++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +		if (matchingContext.determineRemainingPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +		if (matchingContext.determineRemainingPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, + * '/foo/{bar}/goo' the {bar} is represented as a {@link CaptureVariablePathElement}. There, + * must be at least one character to bind to the variable., +		// There must be at least one character to capture:, +		if (nextPos == candidateIndex) {, +			return false;, +		}, +			if (matchingContext.determineRemainingPath && nextPos > candidateIndex) {, +				if (!match && matchingContext.isAllowOptionalTrailingSlash()) {, +					match = (nextPos > candidateIndex) &&, +						    (nextPos + 1) == matchingContext.candidateLength && , +						     matchingContext.candidate[nextPos] == separator;, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +		if (matchingContext.determineRemainingPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, + * '/foo/{bar}/goo' the {bar} is represented as a {@link CaptureVariablePathElement}. There, + * must be at least one character to bind to the variable., +		// There must be at least one character to capture:, +		if (nextPos == candidateIndex) {, +			return false;, +		}, +			if (matchingContext.determineRemainingPath && nextPos > candidateIndex) {, +				if (!match && matchingContext.isAllowOptionalTrailingSlash()) {, +					match = (nextPos > candidateIndex) &&, +						    (nextPos + 1) == matchingContext.candidateLength && , +						     matchingContext.candidate[nextPos] == separator;, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +	// If true the PathPatterns produced by the parser will allow patterns, +	// that don't have a trailing slash to match paths that may or may not, +	// have a trailing slash, +	private boolean matchOptionalTrailingSlash = false;, +	, +	 * @param separator the path separator to look for when parsing, +	 * @param caseSensitive true if PathPatterns should be sensitive to case, +	 * @param matchOptionalTrailingSlash true if patterns without a trailing slash can match paths that do have a trailing slash, +	public InternalPathPatternParser(char separator, boolean caseSensitive, boolean matchOptionalTrailingSlash) {, +		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash;, +		return new PathPattern(pathPattern, headPE, separator, caseSensitive, matchOptionalTrailingSlash);, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +		if (matchingContext.determineRemainingPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, + * '/foo/{bar}/goo' the {bar} is represented as a {@link CaptureVariablePathElement}. There, + * must be at least one character to bind to the variable., +		// There must be at least one character to capture:, +		if (nextPos == candidateIndex) {, +			return false;, +		}, +			if (matchingContext.determineRemainingPath && nextPos > candidateIndex) {, +				if (!match && matchingContext.isAllowOptionalTrailingSlash()) {, +					match = (nextPos > candidateIndex) &&, +						    (nextPos + 1) == matchingContext.candidateLength && , +						     matchingContext.candidate[nextPos] == separator;, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +	// If true the PathPatterns produced by the parser will allow patterns, +	// that don't have a trailing slash to match paths that may or may not, +	// have a trailing slash, +	private boolean matchOptionalTrailingSlash = false;, +	, +	 * @param separator the path separator to look for when parsing, +	 * @param caseSensitive true if PathPatterns should be sensitive to case, +	 * @param matchOptionalTrailingSlash true if patterns without a trailing slash can match paths that do have a trailing slash, +	public InternalPathPatternParser(char separator, boolean caseSensitive, boolean matchOptionalTrailingSlash) {, +		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash;, +		return new PathPattern(pathPattern, headPE, separator, caseSensitive, matchOptionalTrailingSlash);, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/LiteralPathElement.java, +			if (matchingContext.determineRemainingPath && nextIfExistsIsSeparator(candidateIndex, matchingContext)) {, +				if (candidateIndex == matchingContext.candidateLength) {, +					return true;, +				}, +				else {, +					return matchingContext.isAllowOptionalTrailingSlash() &&, +						   (candidateIndex + 1) == matchingContext.candidateLength && , +						   matchingContext.candidate[candidateIndex] == separator;, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +		if (matchingContext.determineRemainingPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, + * '/foo/{bar}/goo' the {bar} is represented as a {@link CaptureVariablePathElement}. There, + * must be at least one character to bind to the variable., +		// There must be at least one character to capture:, +		if (nextPos == candidateIndex) {, +			return false;, +		}, +			if (matchingContext.determineRemainingPath && nextPos > candidateIndex) {, +				if (!match && matchingContext.isAllowOptionalTrailingSlash()) {, +					match = (nextPos > candidateIndex) &&, +						    (nextPos + 1) == matchingContext.candidateLength && , +						     matchingContext.candidate[nextPos] == separator;, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +	// If true the PathPatterns produced by the parser will allow patterns, +	// that don't have a trailing slash to match paths that may or may not, +	// have a trailing slash]