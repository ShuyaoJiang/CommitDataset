[+++ b/src/asciidoc/web-view.adoc, +`Controller` interface. The XSLT Controller will turn the list of words into a simple XML, +Configuration is standard for a simple Spring application., +The MVC configuration has to define a `XsltViewResolver` bean and, +regular MVC annotation configuration., +[source,java,indent=0], +@EnableWebMvc, +@ComponentScan, +@Configuration, +public class WebConfig extends WebMvcConfigurerAdapter {, +, +	@Bean, +	public XsltViewResolver xsltViewResolver() {, +		XsltViewResolver viewResolver = new XsltViewResolver();, +		viewResolver.setPrefix("/WEB-INF/xsl/");, +		viewResolver.setSuffix(".xslt");, +		return viewResolver;, +	}, +, +}, +And we need a Controller that encapsulates our word generation logic., +, +The controller logic is encapsulated in a `@Controller` class, with the, +	@Controller, +	public class XsltController {, +		@RequestMapping("/"), +		public String home(Model model) throws Exception {, +			Element root = document.createElement("wordList");, +			List<String> words = Arrays.asList("Hello", "Spring", "Framework");, +			for (String word : words) {, +				Text textNode = document.createTextNode(word);, +, +			model.addAttribute("wordList", root);, +			return "home";, +So far we've only created a DOM document and added it to the Model map. Note that you, +can also load an XML file as a `Resource` and use it instead of a custom DOM document., +Of course, there are software packages available that will automatically 'domify', +an object graph, but within Spring, you have complete flexibility to create the DOM, +from your model in any way you choose. This prevents the transformation of XML playing, +too great a part in the structure of your model data which is a danger when using tools, +to manage the domification process., +Next, `XsltViewResolver` will resolve the "home" XSLT template file and merge the, +DOM document into it to generate our view., +, +Finally, the `XsltViewResolver` will resolve the "home" XSLT template file and merge the, +DOM document into it to generate our view. As shown in the `XsltViewResolver`, +configuration, XSLT templates live in the war file in the `'WEB-INF/xsl'` directory, +and end with a `"xslt"` file extension., +, +					<ul>, +					</ul>, +			<li><xsl:value-of select="."/></li>, +This is rendered as:, +[source,html,indent=0], +<html>, +	<head>, +		<META http-equiv="Content-Type" content="text/html; charset=UTF-8">, +		<title>Hello!</title>, +	</head>, +	<body>, +		<h1>My First Words</h1>, +		<ul>, +			<li>Hello</li>, +			<li>Spring</li>, +			<li>Framework</li>, +		</ul>, +	</body>, +</html>]