[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +						return TypeDescriptor.nested(property(pd), tokens.keys.length);, +						return new TypeDescriptor(property(pd));, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(property(pd)));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +	private Property property(PropertyDescriptor pd) {, +		GenericTypeAwarePropertyDescriptor typeAware = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(typeAware.getBeanClass(), typeAware.getReadMethod(), typeAware.getWriteMethod());, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +						return TypeDescriptor.nested(property(pd), tokens.keys.length);, +						return new TypeDescriptor(property(pd));, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(property(pd)));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +	private Property property(PropertyDescriptor pd) {, +		GenericTypeAwarePropertyDescriptor typeAware = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(typeAware.getBeanClass(), typeAware.getReadMethod(), typeAware.getWriteMethod());, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	protected AbstractDescriptor(Class<?> type) {, +		return Collection.class.isAssignableFrom(getType());, +		return getType().isArray();, +		return Map.class.isAssignableFrom(getType());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +						return TypeDescriptor.nested(property(pd), tokens.keys.length);, +						return new TypeDescriptor(property(pd));, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(property(pd)));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +	private Property property(PropertyDescriptor pd) {, +		GenericTypeAwarePropertyDescriptor typeAware = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(typeAware.getBeanClass(), typeAware.getReadMethod(), typeAware.getWriteMethod());, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	protected AbstractDescriptor(Class<?> type) {, +		return Collection.class.isAssignableFrom(getType());, +		return getType().isArray();, +		return Map.class.isAssignableFrom(getType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BeanPropertyDescriptor.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +	private final Property property;, +	public BeanPropertyDescriptor(Property property) {, +		super(property.getType());, +		this.methodParameter = property.getMethodParameter();, +		this.annotations = property.getAnnotations();, +		return new BeanPropertyDescriptor(type, property, methodParameter, annotations);, +	private BeanPropertyDescriptor(Class<?> type, Property propertyDescriptor, MethodParameter methodParameter, Annotation[] annotations) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +						return TypeDescriptor.nested(property(pd), tokens.keys.length);, +						return new TypeDescriptor(property(pd));, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(property(pd)));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));, +	private Property property(PropertyDescriptor pd) {, +		GenericTypeAwarePropertyDescriptor typeAware = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(typeAware.getBeanClass(), typeAware.getReadMethod(), typeAware.getWriteMethod());, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	protected AbstractDescriptor(Class<?> type) {, +		return Collection.class.isAssignableFrom(getType());, +		return getType().isArray();, +		return Map.class.isAssignableFrom(getType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BeanPropertyDescriptor.java, +import org.springframework.core.convert.TypeDescriptor.Property;, +	private final Property property;, +	public BeanPropertyDescriptor(Property property) {, +		super(property.getType());, +		this.methodParameter = property.getMethodParameter();, +		this.annotations = property.getAnnotations();, +		return new BeanPropertyDescriptor(type, property, methodParameter, annotations);, +	private BeanPropertyDescriptor(Class<?> type, Property propertyDescriptor, MethodParameter methodParameter, Annotation[] annotations) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +	 * @param property the property, +	public TypeDescriptor(Property property) {, +		this(new BeanPropertyDescriptor(property));, +	public static TypeDescriptor nested(Property property, int nestingLevel) {, +		return nested(new BeanPropertyDescriptor(property), nestingLevel);, +		boolean annotatedTypeEquals = ObjectUtils.nullSafeEquals(getType(), other.getType()), +				&& ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());, +		} else if (isMap()) {, +			return ObjectUtils.nullSafeEquals(getMapKeyType(), other.getMapKeyType())]