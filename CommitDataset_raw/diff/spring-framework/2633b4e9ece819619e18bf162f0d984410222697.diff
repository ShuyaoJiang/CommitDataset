[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, +import java.nio.charset.StandardCharsets;, + * View that redirects to an absolute or context relative URL. The URL may be a, + * URI template in which case the URI template variables will be replaced with, + * values from the model or with URI variables from the current request., + * <p>By default {@link HttpStatus#SEE_OTHER} is used but alternate status, + * codes may be via constructor or setters arguments., + * @author Rossen Stoyanchev, +	 * Create a new {@code RedirectView} with the given redirect URL., +	 * Status code {@link HttpStatus#SEE_OTHER} is used by default., +	 * Create a new {@code RedirectView} with the given URL and an alternate, +	 * redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or, +	 * {@link HttpStatus#PERMANENT_REDIRECT}., +	 * Whether to interpret a given redirect URLs that starts with a slash ("/"), +	 * Whether to interpret URLs as relative to the current context path., +		return this.contextRelative;, +	 * Set an alternate redirect status code such as, +	 * {@link HttpStatus#TEMPORARY_REDIRECT} or, +	 * {@link HttpStatus#PERMANENT_REDIRECT}., +		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)");, +	 * Get the redirect status code to use., +		return this.statusCode;, +	 * Whether to append the query string of the current URL to the redirect URL, +	 * Whether the query string of the current URL is appended to the redirect URL., +		return this.propagateQuery;, +	 * <p>In effect this provides a way turn off encoding via, +	 * {@link ServerHttpResponse#encodeUrl(String)} for URLs that have a, +	 * host and that host is not listed as a known host., +	 * <p>If not set (the default) all redirect URLs are encoded., +, +	@Override, +	public void afterPropertiesSet() throws Exception {, +		super.afterPropertiesSet();, +		if (getStatusCode() == null) {, +			throw new IllegalArgumentException("Property 'statusCode' is required");, +		}, +	}, +, +, +	@Override, +	public boolean checkResourceExists(Locale locale) throws Exception {, +		return true;, +	}, +, +, +		return sendRedirect(targetUrl, exchange);, +	 * Create the target URL if necessary pre-pending the contextPath, expanding, +	 * URI template variables, and appending the current request query., +		if (isContextRelative() && getUrl().startsWith("/")) {, +			targetUrl.append(exchange.getRequest().getContextPath());, +			Map<String, String> uriVars = getCurrentUriVariables(exchange);, +			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars);, +, +		if (isPropagateQuery()) {, +			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), exchange.getRequest());, +	private Map<String, String> getCurrentUriVariables(ServerWebExchange exchange) {, +	 * Expand URI template variables in the target URL with either model, +	 * attribute values or as a fallback with URI variable values from the, +	 * current request. Values are encoded., +	protected StringBuilder expandTargetUrlTemplate(String targetUrl,, +			Map<String, Object> model, Map<String, String> uriVariables) {, +, +		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl);, +		boolean found = matcher.find();, +		if (!found) {, +			return new StringBuilder(targetUrl);, +		}, +		StringBuilder result = new StringBuilder();, +		int endLastMatch = 0;, +		while (found) {, +			String name = matcher.group(1);, +			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name));, +			Assert.notNull(value, "No value for URI variable '" + name + "'");, +			result.append(targetUrl.substring(endLastMatch, matcher.start()));, +			result.append(encodeUriVariable(value.toString()));, +			endLastMatch = matcher.end();, +			found = matcher.find();, +		}, +		result.append(targetUrl.substring(endLastMatch, targetUrl.length()));, +		return result;, +	private String encodeUriVariable(String text) {, +		try {, +			// Strict encoding of all reserved URI characters, +			return UriUtils.encode(text, StandardCharsets.UTF_8.name());, +		catch (UnsupportedEncodingException ex) {, +			// Should never happen..., +			throw new IllegalStateException(ex);, +	 * Append the query of the current request to the target redirect URL., +	protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {, +		String query = request.getURI().getRawQuery();, +		if (!StringUtils.hasText(query)) {, +			return new StringBuilder(targetUrl);, +		}, +, +		int index = targetUrl.indexOf("#");, +		String fragment = (index > -1 ? targetUrl.substring(index) : null);, +, +		StringBuilder result = new StringBuilder();, +		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl);, +		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query);]