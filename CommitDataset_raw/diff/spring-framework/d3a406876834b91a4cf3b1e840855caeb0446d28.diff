[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that a, +	 * bean was discovered specifically via component-scanning as opposed to other means., +		if (metadata instanceof StandardAnnotationMetadata) {, +			setBeanClass(((StandardAnnotationMetadata) metadata).getIntrospectedClass());, +		}, +		else {, +		}, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that a, +	 * bean was discovered specifically via component-scanning as opposed to other means., +		if (metadata instanceof StandardAnnotationMetadata) {, +			setBeanClass(((StandardAnnotationMetadata) metadata).getIntrospectedClass());, +		}, +		else {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * Copyright 2002-2013 the original author or authors., +	 * @param imported whether the given configuration class is being imported, +	 * @param imported whether the given configuration class is being imported, +, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that a, +	 * bean was discovered specifically via component-scanning as opposed to other means., +		if (metadata instanceof StandardAnnotationMetadata) {, +			setBeanClass(((StandardAnnotationMetadata) metadata).getIntrospectedClass());, +		}, +		else {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * Copyright 2002-2013 the original author or authors., +	 * @param imported whether the given configuration class is being imported, +	 * @param imported whether the given configuration class is being imported, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata));, +++ /dev/null, +++ b/build.gradle, +++ b/gradle.properties, +version=4.0.0.BUILD-SNAPSHOT, +++ b/settings.gradle, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that a, +	 * bean was discovered specifically via component-scanning as opposed to other means., +		if (metadata instanceof StandardAnnotationMetadata) {, +			setBeanClass(((StandardAnnotationMetadata) metadata).getIntrospectedClass());, +		}, +		else {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * Copyright 2002-2013 the original author or authors., +	 * @param imported whether the given configuration class is being imported, +	 * @param imported whether the given configuration class is being imported, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +					new InvalidConfigurationImportProblem(metadata.getClassName(), configClass.getResource(), metadata));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.lang.annotation.Annotation;, +import java.util.Collection;, +import org.springframework.core.NestedIOException;, +import org.springframework.util.ObjectUtils;, +		processMemberClasses(metadata);, +		AnnotationAttributes propertySource = attributesFor(metadata, org.springframework.context.annotation.PropertySource.class);, +			processPropertySource(propertySource);, +, +		Set<Object> imports = new LinkedHashSet<Object>();, +		Set<Object> visited = new LinkedHashSet<Object>();, +		collectImports(metadata, imports, visited);, +		if (!imports.isEmpty()) {]