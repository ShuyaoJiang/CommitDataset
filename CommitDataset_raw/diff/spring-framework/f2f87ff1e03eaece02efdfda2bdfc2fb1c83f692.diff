[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +	 * @see #getDefaultExecutor(BeanFactory), +	 * Set the {@link BeanFactory} to be used when looking up executors by qualifier, +	 * or when relying on the default executor lookup algorithm., +	 * @see #findQualifiedExecutor(BeanFactory, String), +	 * @see #getDefaultExecutor(BeanFactory), +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +	 * @see #getDefaultExecutor(BeanFactory), +	 * Set the {@link BeanFactory} to be used when looking up executors by qualifier, +	 * or when relying on the default executor lookup algorithm., +	 * @see #findQualifiedExecutor(BeanFactory, String), +	 * @see #getDefaultExecutor(BeanFactory), +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AbstractAsyncExecutionAspect.aj, + * <p>This aspect needs to be injected with an implementation of a task-oriented, + * {@link java.util.concurrent.Executor} to activate it for a specific thread pool,, + * or with a {@link org.springframework.beans.factory.BeanFactory} for default, + * executor lookup. Otherwise it will simply delegate all calls synchronously., + * @see #setExecutor, + * @see #setBeanFactory, + * @see #getDefaultExecutor, +	 * Create an {@code AnnotationAsyncExecutionAspect} with a {@code null}, +	 * default executor, which should instead be set via {@code #aspectOf} and, +	 * {@link #setExecutor}. The same applies for {@link #setExceptionHandler}., +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +	 * @see #getDefaultExecutor(BeanFactory), +	 * Set the {@link BeanFactory} to be used when looking up executors by qualifier, +	 * or when relying on the default executor lookup algorithm., +	 * @see #findQualifiedExecutor(BeanFactory, String), +	 * @see #getDefaultExecutor(BeanFactory), +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AbstractAsyncExecutionAspect.aj, + * <p>This aspect needs to be injected with an implementation of a task-oriented, + * {@link java.util.concurrent.Executor} to activate it for a specific thread pool,, + * or with a {@link org.springframework.beans.factory.BeanFactory} for default, + * executor lookup. Otherwise it will simply delegate all calls synchronously., + * @see #setExecutor, + * @see #setBeanFactory, + * @see #getDefaultExecutor, +	 * Create an {@code AnnotationAsyncExecutionAspect} with a {@code null}, +	 * default executor, which should instead be set via {@code #aspectOf} and, +	 * {@link #setExecutor}. The same applies for {@link #setExceptionHandler}., +, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, + * Copyright 2002-2016 the original author or authors., + * <p>This aspect needs to be injected with an implementation of a task-oriented, + * {@link java.util.concurrent.Executor} to activate it for a specific thread pool,, + * or with a {@link org.springframework.beans.factory.BeanFactory} for default, + * executor lookup. Otherwise it will simply delegate all calls synchronously., + *, + * @see #setExecutor, + * @see #setBeanFactory, + * @see #getDefaultExecutor, +		"Methods in a class marked with @Async that do not return void or Future will be routed synchronously";]