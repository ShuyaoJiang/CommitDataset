[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import java.util.Optional;, +import org.springframework.core.ReactiveAdapter;, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(rawClass, optional);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import java.util.Optional;, +import org.springframework.core.ReactiveAdapter;, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(rawClass, optional);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(returnType, optional);, +			if (adapter != null &&, +					!adapter.getDescriptor().isMultiValue() &&, +					!adapter.getDescriptor().isNoValue()) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import java.util.Optional;, +import org.springframework.core.ReactiveAdapter;, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(rawClass, optional);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(returnType, optional);, +			if (adapter != null &&, +					!adapter.getDescriptor().isMultiValue() &&, +					!adapter.getDescriptor().isNoValue()) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		Optional<Object> optional = result.getReturnValue();, +		ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(clazz, optional);, +		if (adapter != null) {, +			if (adapter.getDescriptor().isNoValue()) {, +			else {, +		}, +		else if (isSupportedType(clazz)) {, +			return true;, +		}, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) : returnType.getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import java.util.Optional;, +import org.springframework.core.ReactiveAdapter;, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(rawClass, optional);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			Optional<Object> optional = result.getReturnValue();, +			ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(returnType, optional);, +			if (adapter != null &&, +					!adapter.getDescriptor().isMultiValue() &&, +					!adapter.getDescriptor().isNoValue()) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		Optional<Object> optional = result.getReturnValue();, +		ReactiveAdapter adapter = getReactiveAdapterRegistry().getAdapterFrom(clazz, optional);, +		if (adapter != null) {, +			if (adapter.getDescriptor().isNoValue()) {, +			else {, +		}, +		else if (isSupportedType(clazz)) {, +			return true;, +		}, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) : returnType.getGeneric(0);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/MessageWriterResultHandlerTests.java, +import rx.Completable;, +		testVoidReturnType(Completable.complete(), ResolvableType.forClass(Completable.class));, +		Completable completable() { return null; }, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			elementType = adapter.getDescriptor().isNoValue() ?, +					ResolvableType.forClass(Void.class) :, +					ResolvableType.forMethodParameter(bodyType).getGeneric(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import java.util.Optional;]