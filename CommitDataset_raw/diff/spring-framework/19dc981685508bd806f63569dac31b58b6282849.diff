[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, + * Copyright 2002-2018 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.web.method.HandlerTypePredicate;, +	@Nullable, +	private Map<String, HandlerTypePredicate> pathPrefixes;, +, +	/**, +	 * Configure a path prefix to apply to matching controller methods., +	 * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}, +	 * method whose controller type is matched by the corresponding, +	 * {@link HandlerTypePredicate}. The prefix for the first matching predicate, +	 * is used., +	 * @param prefix the path prefix to apply, +	 * @param predicate a predicate for matching controller types, +	 * @since 5.1, +	 */, +	public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {, +		this.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;, +		this.pathPrefixes.put(prefix, predicate);, +		return this;, +	}, +, +	@Nullable, +	protected Map<String, HandlerTypePredicate> getPathPrefixes() {, +		return this.pathPrefixes;, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, + * Copyright 2002-2018 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.web.method.HandlerTypePredicate;, +	@Nullable, +	private Map<String, HandlerTypePredicate> pathPrefixes;, +, +	/**, +	 * Configure a path prefix to apply to matching controller methods., +	 * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}, +	 * method whose controller type is matched by the corresponding, +	 * {@link HandlerTypePredicate}. The prefix for the first matching predicate, +	 * is used., +	 * @param prefix the path prefix to apply, +	 * @param predicate a predicate for matching controller types, +	 * @since 5.1, +	 */, +	public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {, +		this.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;, +		this.pathPrefixes.put(prefix, predicate);, +		return this;, +	}, +, +	@Nullable, +	protected Map<String, HandlerTypePredicate> getPathPrefixes() {, +		return this.pathPrefixes;, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.method.HandlerTypePredicate;, +, +, +		Boolean useCaseSensitiveMatch = configurer.isUseCaseSensitiveMatch();, +, +		Map<String, HandlerTypePredicate> pathPrefixes = configurer.getPathPrefixes();, +		if (pathPrefixes != null) {, +			mapping.setPathPrefixes(pathPrefixes);, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, + * Copyright 2002-2018 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.web.method.HandlerTypePredicate;, +	@Nullable, +	private Map<String, HandlerTypePredicate> pathPrefixes;, +, +	/**, +	 * Configure a path prefix to apply to matching controller methods., +	 * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}, +	 * method whose controller type is matched by the corresponding, +	 * {@link HandlerTypePredicate}. The prefix for the first matching predicate, +	 * is used., +	 * @param prefix the path prefix to apply, +	 * @param predicate a predicate for matching controller types, +	 * @since 5.1, +	 */, +	public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {, +		this.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;, +		this.pathPrefixes.put(prefix, predicate);, +		return this;, +	}, +, +	@Nullable, +	protected Map<String, HandlerTypePredicate> getPathPrefixes() {, +		return this.pathPrefixes;, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +import org.springframework.web.method.HandlerTypePredicate;]