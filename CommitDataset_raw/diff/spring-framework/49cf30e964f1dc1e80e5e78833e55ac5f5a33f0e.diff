[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +		if (registry.getViewResolvers().isEmpty()) {, +			Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +					this.applicationContext, ViewResolver.class, true, false);, +			if (map.isEmpty()) {, +				registry.getViewResolvers().add(new InternalResourceViewResolver());, +			}, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +		if (registry.getViewResolvers().isEmpty()) {, +			Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +					this.applicationContext, ViewResolver.class, true, false);, +			if (map.isEmpty()) {, +				registry.getViewResolvers().add(new InternalResourceViewResolver());, +			}, +		}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java, +import java.util.Map;, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.context.ApplicationContext;, +import org.springframework.web.servlet.view.BeanNameViewResolver;, +import org.springframework.web.servlet.view.InternalResourceViewResolver;, +import static org.junit.Assert.assertEquals;, +		ApplicationContext context = initContext(WebConfig.class, ScopedController.class, ScopedProxyController.class);, +		RequestMappingHandlerMapping handlerMapping = context.getBean(RequestMappingHandlerMapping.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		String name = "viewControllerHandlerMapping";, +		AbstractHandlerMapping handlerMapping = context.getBean(name, AbstractHandlerMapping.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		BeanNameUrlHandlerMapping handlerMapping = context.getBean(BeanNameUrlHandlerMapping.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		AbstractHandlerMapping handlerMapping = context.getBean("resourceHandlerMapping", AbstractHandlerMapping.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		String name = "defaultServletHandlerMapping";, +		AbstractHandlerMapping handlerMapping = context.getBean(name, AbstractHandlerMapping.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		RequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class);, +		ApplicationContext context = initContext(WebConfig.class);, +		CompositeUriComponentsContributor uriComponentsContributor = context.getBean(, +		ApplicationContext context = initContext(WebConfig.class);, +			context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class);, +	public void mvcViewResolver() {, +		ApplicationContext context = initContext(WebConfig.class);, +		ViewResolverComposite resolver = context.getBean("mvcViewResolver", ViewResolverComposite.class);, +, +		Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				context, ViewResolver.class, true, false);, +, +		assertNotNull(resolver);, +		assertEquals(1, resolver.getViewResolvers().size());, +		assertEquals(InternalResourceViewResolver.class, resolver.getViewResolvers().get(0).getClass());, +		assertEquals(Ordered.LOWEST_PRECEDENCE, resolver.getOrder());, +	}, +, +	@Test, +	public void mvcViewResolverWithExistingResolver() throws Exception {, +		ApplicationContext context = initContext(WebConfig.class, ViewResolverConfig.class);, +		ViewResolverComposite resolver = context.getBean("mvcViewResolver", ViewResolverComposite.class);, +, +		assertNotNull(resolver);, +		assertEquals(0, resolver.getViewResolvers().size());, +		assertEquals(Ordered.LOWEST_PRECEDENCE, resolver.getOrder());, +		assertNull(resolver.resolveViewName("anyViewName", Locale.ENGLISH));, +		ApplicationContext context = initContext(WebConfig.class);, +		UrlPathHelper urlPathHelper = context.getBean(UrlPathHelper.class);, +		PathMatcher pathMatcher = context.getBean(PathMatcher.class);, +	private ApplicationContext initContext(Class... configClasses) {, +		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +		context.setServletContext(new MockServletContext());, +		context.register(configClasses);, +		context.refresh();, +		return context;, +	}, +, +, +	public static class WebConfig {, +	@Configuration, +	public static class ViewResolverConfig {, +, +		@Bean, +		public ViewResolver beanNameViewResolver() {, +			return new BeanNameViewResolver();, +		}, +	}, +]