[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +						args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +							args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					// Choose this factory method if it represents the closest match., +, +		public int getAssignabilityWeight(Class[] paramTypes) {, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.arguments[i])) {, +					return Integer.MAX_VALUE;, +				}, +			}, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.rawArguments[i])) {, +					return Integer.MAX_VALUE - 512;, +				}, +			}, +			return Integer.MAX_VALUE - 1024;, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +						args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +							args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					// Choose this factory method if it represents the closest match., +, +		public int getAssignabilityWeight(Class[] paramTypes) {, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.arguments[i])) {, +					return Integer.MAX_VALUE;, +				}, +			}, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.rawArguments[i])) {, +					return Integer.MAX_VALUE - 512;, +				}, +			}, +			return Integer.MAX_VALUE - 1024;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="lenientDependencyTestBean" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$LenientDependencyTestBean" scope="prototype">, +		<constructor-arg>, +			<bean class="org.springframework.beans.DerivedTestBean"/>, +		</constructor-arg>, +	</bean>, +, +	<bean id="lenientDependencyTestBeanFactoryMethod" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$LenientDependencyTestBean" scope="prototype" factory-method="create">, +		<constructor-arg>, +			<bean class="org.springframework.beans.DerivedTestBean"/>, +		</constructor-arg>, +	</bean>, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +						args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?, +							args.getTypeDifferenceWeight(paramTypes) : args.getAssignabilityWeight(paramTypes));, +					// Choose this factory method if it represents the closest match., +, +		public int getAssignabilityWeight(Class[] paramTypes) {, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.arguments[i])) {, +					return Integer.MAX_VALUE;, +				}, +			}, +			for (int i = 0; i < paramTypes.length; i++) {, +				if (!ClassUtils.isAssignableValue(paramTypes[i], this.rawArguments[i])) {, +					return Integer.MAX_VALUE - 512;, +				}, +			}, +			return Integer.MAX_VALUE - 1024;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="lenientDependencyTestBean" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$LenientDependencyTestBean" scope="prototype">, +		<constructor-arg>, +			<bean class="org.springframework.beans.DerivedTestBean"/>, +		</constructor-arg>, +	</bean>, +, +	<bean id="lenientDependencyTestBeanFactoryMethod" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$LenientDependencyTestBean" scope="prototype" factory-method="create">, +		<constructor-arg>, +			<bean class="org.springframework.beans.DerivedTestBean"/>, +		</constructor-arg>, +	</bean>, +, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	public @Test void testLenientDependencyMatching() {, +		XmlBeanFactory xbf = new XmlBeanFactory(CONSTRUCTOR_ARG_CONTEXT);, +		LenientDependencyTestBean bean = (LenientDependencyTestBean) xbf.getBean("lenientDependencyTestBean");, +		assertTrue(bean.tb instanceof DerivedTestBean);, +	}, +, +	public @Test void testLenientDependencyMatchingFactoryMethod() {, +		XmlBeanFactory xbf = new XmlBeanFactory(CONSTRUCTOR_ARG_CONTEXT);, +		LenientDependencyTestBean bean = (LenientDependencyTestBean) xbf.getBean("lenientDependencyTestBeanFactoryMethod");, +		assertTrue(bean.tb instanceof DerivedTestBean);, +	}, +, +	public @Test void testNonLenientDependencyMatching() {]