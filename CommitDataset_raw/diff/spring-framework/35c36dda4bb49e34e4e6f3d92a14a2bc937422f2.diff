[+++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, + * @author Juergen Hoeller, +	/** Prefix for internal array class names: "[" */, +	private static final String INTERNAL_ARRAY_PREFIX = "[";, +, +	/** Prefix for internal non-primitive array class names: "[L" */, +	private static final String NON_PRIMITIVE_ARRAY_PREFIX = "[L";, +	/**, +	 * Map with common "java.lang" class name as key and corresponding Class as value., +	 * Primarily for efficient deserialization of remote invocations., +	 */, +	private static final Map<String, Class> commonClassCache = new HashMap<String, Class>(32);, +, +			registerCommonClasses(entry.getKey());, +, +		registerCommonClasses(Boolean[].class, Byte[].class, Character[].class, Double[].class,, +				Float[].class, Integer[].class, Long[].class, Short[].class);, +		registerCommonClasses(Number.class, Number[].class, String.class, String[].class,, +				Object.class, Object[].class, Class.class, Class[].class);, +		registerCommonClasses(Throwable.class, Exception.class, RuntimeException.class,, +				Error.class, StackTraceElement.class, StackTraceElement[].class);, +	 * Register the given common classes with the ClassUtils cache., +	 */, +	private static void registerCommonClasses(Class... commonClasses) {, +		for (Class clazz : commonClasses) {, +			commonClassCache.put(clazz.getName(), clazz);, +		}, +	}, +, +	/**, +		if (clazz == null) {, +			clazz = commonClassCache.get(name);, +		}, +		if (name.startsWith(NON_PRIMITIVE_ARRAY_PREFIX) && name.endsWith(";")) {, +			String elementName = name.substring(NON_PRIMITIVE_ARRAY_PREFIX.length(), name.length() - 1);, +			Class elementClass = forName(elementName, classLoader);, +			return Array.newInstance(elementClass, 0).getClass();, +, +		// "[[I" or "[[Ljava.lang.String;" style arrays, +		if (name.startsWith(INTERNAL_ARRAY_PREFIX)) {, +			String elementName = name.substring(INTERNAL_ARRAY_PREFIX.length());, +			Class elementClass = forName(elementName, classLoader);, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, + * @author Juergen Hoeller, +	/** Prefix for internal array class names: "[" */, +	private static final String INTERNAL_ARRAY_PREFIX = "[";, +, +	/** Prefix for internal non-primitive array class names: "[L" */, +	private static final String NON_PRIMITIVE_ARRAY_PREFIX = "[L";, +	/**, +	 * Map with common "java.lang" class name as key and corresponding Class as value., +	 * Primarily for efficient deserialization of remote invocations., +	 */, +	private static final Map<String, Class> commonClassCache = new HashMap<String, Class>(32);, +, +			registerCommonClasses(entry.getKey());, +, +		registerCommonClasses(Boolean[].class, Byte[].class, Character[].class, Double[].class,, +				Float[].class, Integer[].class, Long[].class, Short[].class);, +		registerCommonClasses(Number.class, Number[].class, String.class, String[].class,, +				Object.class, Object[].class, Class.class, Class[].class);, +		registerCommonClasses(Throwable.class, Exception.class, RuntimeException.class,, +				Error.class, StackTraceElement.class, StackTraceElement[].class);, +	 * Register the given common classes with the ClassUtils cache., +	 */, +	private static void registerCommonClasses(Class... commonClasses) {, +		for (Class clazz : commonClasses) {, +			commonClassCache.put(clazz.getName(), clazz);, +		}, +	}, +, +	/**, +		if (clazz == null) {, +			clazz = commonClassCache.get(name);, +		}, +		if (name.startsWith(NON_PRIMITIVE_ARRAY_PREFIX) && name.endsWith(";")) {, +			String elementName = name.substring(NON_PRIMITIVE_ARRAY_PREFIX.length(), name.length() - 1);, +			Class elementClass = forName(elementName, classLoader);, +			return Array.newInstance(elementClass, 0).getClass();, +, +		// "[[I" or "[[Ljava.lang.String;" style arrays, +		if (name.startsWith(INTERNAL_ARRAY_PREFIX)) {, +			String elementName = name.substring(INTERNAL_ARRAY_PREFIX.length());, +			Class elementClass = forName(elementName, classLoader);, +++ b/org.springframework.web/src/test/java/org/springframework/beans/ITestBean.java, + * Copyright 2002-2009 the original author or authors., +	Integer[][] getNestedIntegerArray();, +, +	Integer[] getSomeIntegerArray();, +, +	void setSomeIntegerArray(Integer[] someIntegerArray);, +, +	void setNestedIntegerArray(Integer[][] nestedIntegerArray);, +, +	int[] getSomeIntArray();, +, +	void setSomeIntArray(int[] someIntArray);, +, +	int[][] getNestedIntArray();, +]