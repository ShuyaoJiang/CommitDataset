[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +import org.springframework.format.FormatterRegistry;, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	}, +	@Override, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	, +	protected void addFormatters(FormatterRegistry registry) {, +		configurers.addFormatters(registry);, +	protected Validator getValidator() {, +		return configurers.getValidator();, +	@Override, +	protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		configurers.configureHandlerExceptionResolvers(exceptionResolvers);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +import org.springframework.format.FormatterRegistry;, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	}, +	@Override, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	, +	protected void addFormatters(FormatterRegistry registry) {, +		configurers.addFormatters(registry);, +	protected Validator getValidator() {, +		return configurers.getValidator();, +	@Override, +	protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		configurers.configureHandlerExceptionResolvers(exceptionResolvers);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.format.Formatter;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandler;, + * to your subclass and @{@link Bean} to any superclass @{@link Bean} methods you choose to override. A few example , + * reasons for extending this class include providing a custom {@link MessageCodesResolver}, changing the order of , +	 * Override this method to configure the Spring MVC interceptors to use. Interceptors allow requests to , +	 * be pre- and post-processed before and after controller invocation. They can be registered to apply , +	 * to all requests or be limited to a set of path patterns., +	 * Override this method to configure a handler for serving static resources such as images, js, and, css files , +	 * through Spring MVC including setting cache headers optimized for efficient loading in a web browser. , +	 * Resources can be served out of locations under web application root, from the classpath, and others., +	 * Override this method to configure a handler for delegating unhandled requests by forwarding to the , +	 * Servlet container's default servlet. This is commonly used when the {@link DispatcherServlet} is , +	 * mapped to "/", which results in cleaner URLs (without a servlet prefix) but may need to still allow , +	 * some requests (e.g. static resources) to be handled by the Servlet container's default servlet., +	 * Also see the following other methods as an alternative to overriding this method:, +	 * <ul>, +	 * 	<li>{@link #initWebBindingInitializer()} for configuring data binding globally., +	 *  <li>{@link #addArgumentResolvers(List)} for adding custom argument resolvers., +	 * 	<li>{@link #addReturnValueHandlers(List)} for adding custom return value handlers., +	 * 	<li>{@link #configureMessageConverters(List)} for adding custom message converters., +	 * </ul>, +		List<HandlerMethodArgumentResolver> argumentResolvers = new ArrayList<HandlerMethodArgumentResolver>();, +		addArgumentResolvers(argumentResolvers);, +, +		List<HandlerMethodReturnValueHandler> returnValueHandlers = new ArrayList<HandlerMethodReturnValueHandler>();, +		addReturnValueHandlers(returnValueHandlers);, +		, +		adapter.setCustomArgumentResolvers(argumentResolvers);, +		adapter.setCustomReturnValueHandlers(returnValueHandlers);, +	 * Override this method to add custom argument resolvers to use in addition to the ones registered by default, +	 * internally by the {@link RequestMappingHandlerAdapter}., +	 * <p>Generally custom argument resolvers are invoked first. However this excludes default argument resolvers that, +	 * rely on the presence of annotations (e.g. {@code @RequestParameter}, {@code @PathVariable}, etc.). Those , +	 * argument resolvers are not customizable without configuring RequestMappingHandlerAdapter directly. , +	 */, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	}, +, +	/**, +	 * Override this method to add custom return value handlers to use in addition to the ones registered by default, +	 * internally by the {@link RequestMappingHandlerAdapter}., +	 * <p>Generally custom return value handlers are invoked first. However this excludes default return value handlers , +	 * that rely on the presence of annotations (e.g. {@code @ResponseBody}, {@code @ModelAttribute}, etc.). Those , +	 * handlers are not customizable without configuring RequestMappingHandlerAdapter directly., +	 */, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	}, +, +	/**, +	 * For the list of message converters added by default see {@link #addDefaultHttpMessageConverters(List)}., +	 * If any converters are added through this method, default converters are added automatically., +	 * {@code spring:eval} JSP tag. Also see {@link #addFormatters(FormatterRegistry)} as an alternative, +	 * to overriding this method., +		FormattingConversionService conversionService = new DefaultFormattingConversionService();, +		addFormatters(conversionService);, +		return conversionService;, +	}, +, +	/**, +	 * Override this method to add custom {@link Converter}s and {@link Formatter}s., +	 */, +	protected void addFormatters(FormatterRegistry registry) {, +	 * annotated controller methods. This method is closed for extension. Use {@link #getValidator()} to , +	 * provide a custom validator., +	Validator mvcValidator() {, +		Validator validator = getValidator();, +		if (validator != null) {, +			return validator;]