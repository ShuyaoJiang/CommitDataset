[+++ b/spring-core/src/main/java/org/springframework/core/convert/ClassDescriptor.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.GenericCollectionTypeResolver;, +, + * @author Phillip Webb, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getCollectionType((Class) getType());, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getMapKeyType((Class) getType());, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getMapValueType((Class) getType());, +++ b/spring-core/src/main/java/org/springframework/core/convert/ClassDescriptor.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.GenericCollectionTypeResolver;, +, + * @author Phillip Webb, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getCollectionType((Class) getType());, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getMapKeyType((Class) getType());, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		return GenericCollectionTypeResolver.getMapValueType((Class) getType());, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +import java.util.HashSet;, +	@Test, +	public void elementTypeForCollectionSubclass() throws Exception {, +		@SuppressWarnings("serial"), +		class CustomSet extends HashSet<String> {, +		}, +, +		assertEquals(TypeDescriptor.valueOf(CustomSet.class).getElementTypeDescriptor(), TypeDescriptor.valueOf(String.class));, +		assertEquals(TypeDescriptor.forObject(new CustomSet()).getElementTypeDescriptor(), TypeDescriptor.valueOf(String.class));, +	}, +, +	@Test, +	public void elementTypeForMapSubclass() throws Exception {, +		@SuppressWarnings("serial"), +		class CustomMap extends HashMap<String, Integer> {, +		}, +, +		assertEquals(TypeDescriptor.valueOf(CustomMap.class).getMapKeyTypeDescriptor(), TypeDescriptor.valueOf(String.class));, +		assertEquals(TypeDescriptor.valueOf(CustomMap.class).getMapValueTypeDescriptor(), TypeDescriptor.valueOf(Integer.class));, +		assertEquals(TypeDescriptor.forObject(new CustomMap()).getMapKeyTypeDescriptor(), TypeDescriptor.valueOf(String.class));, +		assertEquals(TypeDescriptor.forObject(new CustomMap()).getMapValueTypeDescriptor(), TypeDescriptor.valueOf(Integer.class));, +	}, +]