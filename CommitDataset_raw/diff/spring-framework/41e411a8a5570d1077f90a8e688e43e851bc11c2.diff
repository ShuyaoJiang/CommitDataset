[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +, +		Message<byte[]> decodedMessage;, +, +, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,, +		}, +		else {, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(HEARTBEAT_PAYLOAD,, +					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +, +		Message<byte[]> decodedMessage;, +, +, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,, +		}, +		else {, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(HEARTBEAT_PAYLOAD,, +					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +		return headers.getMessageType() == SimpMessageType.HEARTBEAT;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +, +		Message<byte[]> decodedMessage;, +, +, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,, +		}, +		else {, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(HEARTBEAT_PAYLOAD,, +					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +		return headers.getMessageType() == SimpMessageType.HEARTBEAT;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +import org.springframework.messaging.simp.SimpMessageType;, +			if (StompHeaderAccessor.wrap(message).getMessageType() != SimpMessageType.HEARTBEAT) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +, +		Message<byte[]> decodedMessage;, +, +, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,, +		}, +		else {, +			decodedMessage = MessageBuilder.withPayloadAndHeaders(HEARTBEAT_PAYLOAD,, +					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import org.springframework.messaging.simp.SimpMessageType;, +		return headers.getMessageType() == SimpMessageType.HEARTBEAT;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +import org.springframework.messaging.simp.SimpMessageType;, +			if (StompHeaderAccessor.wrap(message).getMessageType() != SimpMessageType.HEARTBEAT) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompCodecTests.java, +import org.springframework.messaging.simp.SimpMessageType;, + * Test fixture for {@link StompCodec}., + * @author Andy Wilkinson, +	public void decodeHeartbeat() {, +		String frame = "\n";, +, +		Buffer buffer = Buffer.wrap(frame);, +, +		final List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>();, +		new StompCodec().decoder(new Consumer<Message<byte[]>>() {, +			@Override, +			public void accept(Message<byte[]> message) {, +				messages.add(message);, +			}, +		}).apply(buffer);, +, +		assertEquals(1, messages.size());, +		assertEquals(SimpMessageType.HEARTBEAT, StompHeaderAccessor.wrap(messages.get(0)).getMessageType());, +	}, +, +	@Test]