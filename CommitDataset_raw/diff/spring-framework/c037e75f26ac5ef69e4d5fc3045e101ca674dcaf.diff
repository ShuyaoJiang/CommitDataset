[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating CGLIB proxy: " + this.advised.getTargetSource());, +				logger.trace("Found finalize() method - using NO_OVERRIDE");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Method is declared on Advised interface: " + method);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'equals' method: " + method);, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'hashCode' method: " + method);, +				}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Must expose proxy on advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method has advice and optimizations are enabled: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Unable to apply any optimizations to advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type is assignable from target type and " +, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type ensures 'this' cannot be returned - " +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating CGLIB proxy: " + this.advised.getTargetSource());, +				logger.trace("Found finalize() method - using NO_OVERRIDE");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Method is declared on Advised interface: " + method);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'equals' method: " + method);, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'hashCode' method: " + method);, +				}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Must expose proxy on advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method has advice and optimizations are enabled: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Unable to apply any optimizations to advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type is assignable from target type and " +, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type ensures 'this' cannot be returned - " +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating JDK dynamic proxy: " + this.advised.getTargetSource());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating CGLIB proxy: " + this.advised.getTargetSource());, +				logger.trace("Found finalize() method - using NO_OVERRIDE");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Method is declared on Advised interface: " + method);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'equals' method: " + method);, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'hashCode' method: " + method);, +				}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Must expose proxy on advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method has advice and optimizations are enabled: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Unable to apply any optimizations to advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type is assignable from target type and " +, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type ensures 'this' cannot be returned - " +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating JDK dynamic proxy: " + this.advised.getTargetSource());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, +		if (handler != null && logger.isTraceEnabled()) {, +			logger.trace("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating CGLIB proxy: " + this.advised.getTargetSource());, +				logger.trace("Found finalize() method - using NO_OVERRIDE");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Method is declared on Advised interface: " + method);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'equals' method: " + method);, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Found 'hashCode' method: " + method);, +				}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Must expose proxy on advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method has advice and optimizations are enabled: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Unable to apply any optimizations to advised method: " + method);, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type is assignable from target type and " +, +					if (logger.isTraceEnabled()) {, +						logger.trace("Method return type ensures 'this' cannot be returned - " +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating JDK dynamic proxy: " + this.advised.getTargetSource());]