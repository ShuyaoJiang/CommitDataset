[+++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationTests.java, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;, +import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;, +		proxyFactory.addAdvisor(new AsyncAnnotationAdvisor());, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("beforeExistingAdvisors", false);, +		ac.registerSingleton("aapp", AsyncAnnotationBeanPostProcessor.class, pvs);, +, +		proxy.myValidAsyncMethod("value", 5);, +		try {, +			proxy.myValidAsyncMethod("value", 15);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +		try {, +			proxy.myValidAsyncMethod(null, 5);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +, +		@Override, +		public void myValidAsyncMethod(String arg1, int arg2) {, +		}, +, +		@Async void myValidAsyncMethod(@NotNull(groups = MyGroup.class) String arg1, @Max(10) int arg2);, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationTests.java, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;, +import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;, +		proxyFactory.addAdvisor(new AsyncAnnotationAdvisor());, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("beforeExistingAdvisors", false);, +		ac.registerSingleton("aapp", AsyncAnnotationBeanPostProcessor.class, pvs);, +, +		proxy.myValidAsyncMethod("value", 5);, +		try {, +			proxy.myValidAsyncMethod("value", 15);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +		try {, +			proxy.myValidAsyncMethod(null, 5);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +, +		@Override, +		public void myValidAsyncMethod(String arg1, int arg2) {, +		}, +, +		@Async void myValidAsyncMethod(@NotNull(groups = MyGroup.class) String arg1, @Max(10) int arg2);, +++ b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/MethodValidationTests.java, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.AsyncAnnotationAdvisor;, +import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;, +		proxyFactory.addAdvisor(new AsyncAnnotationAdvisor());, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("beforeExistingAdvisors", false);, +		ac.registerSingleton("aapp", AsyncAnnotationBeanPostProcessor.class, pvs);, +, +		proxy.myValidAsyncMethod("value", 5);, +		try {, +			proxy.myValidAsyncMethod("value", 15);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +		try {, +			proxy.myValidAsyncMethod(null, 5);, +			fail("Should have thrown MethodConstraintViolationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +, +		@Override, +		public void myValidAsyncMethod(String arg1, int arg2) {, +		}, +, +		@Async void myValidAsyncMethod(@NotNull(groups = MyGroup.class) String arg1, @Max(10) int arg2);]