[+++ b/spring-web/src/test/java/org/springframework/http/codec/support/CodecConfigurerTests.java, +	public void protobufDecoderOverride() {, +		ProtobufDecoder decoder = new ProtobufDecoder(ExtensionRegistry.newInstance());, +		this.configurer.defaultCodecs().protobufDecoder(decoder);, +, +		assertSame(decoder, this.configurer.getReaders().stream(), +				.filter(writer -> writer instanceof DecoderHttpMessageReader), +				.map(writer -> ((DecoderHttpMessageReader<?>) writer).getDecoder()), +				.filter(e -> ProtobufDecoder.class.equals(e.getClass())), +				.findFirst(), +				.filter(e -> e == decoder).orElse(null));, +	}, +, +	@Test, +	public void protobufEncoderOverride() {, +++ b/spring-web/src/test/java/org/springframework/http/codec/support/CodecConfigurerTests.java, +	public void protobufDecoderOverride() {, +		ProtobufDecoder decoder = new ProtobufDecoder(ExtensionRegistry.newInstance());, +		this.configurer.defaultCodecs().protobufDecoder(decoder);, +, +		assertSame(decoder, this.configurer.getReaders().stream(), +				.filter(writer -> writer instanceof DecoderHttpMessageReader), +				.map(writer -> ((DecoderHttpMessageReader<?>) writer).getDecoder()), +				.filter(e -> ProtobufDecoder.class.equals(e.getClass())), +				.findFirst(), +				.filter(e -> e == decoder).orElse(null));, +	}, +, +	@Test, +	public void protobufEncoderOverride() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	/**, +	 * Return a {@link FormattingConversionService} for use with annotated controllers., +	 * <p>See {@link #addFormatters} as an alternative to overriding this method., +	 */, +	 * Override this method to add custom {@link Converter} and/or {@link Formatter}, +	 * delegates to the common {@link FormattingConversionService}., +	 * @see #webFluxConversionService(), +++ b/spring-web/src/test/java/org/springframework/http/codec/support/CodecConfigurerTests.java, +	public void protobufDecoderOverride() {, +		ProtobufDecoder decoder = new ProtobufDecoder(ExtensionRegistry.newInstance());, +		this.configurer.defaultCodecs().protobufDecoder(decoder);, +, +		assertSame(decoder, this.configurer.getReaders().stream(), +				.filter(writer -> writer instanceof DecoderHttpMessageReader), +				.map(writer -> ((DecoderHttpMessageReader<?>) writer).getDecoder()), +				.filter(e -> ProtobufDecoder.class.equals(e.getClass())), +				.findFirst(), +				.filter(e -> e == decoder).orElse(null));, +	}, +, +	@Test, +	public void protobufEncoderOverride() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	/**, +	 * Return a {@link FormattingConversionService} for use with annotated controllers., +	 * <p>See {@link #addFormatters} as an alternative to overriding this method., +	 */, +	 * Override this method to add custom {@link Converter} and/or {@link Formatter}, +	 * delegates to the common {@link FormattingConversionService}., +	 * @see #webFluxConversionService(), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	 * {@link HandlerMapping} instances with., +	 * <p>This method cannot be overridden; use {@link #addInterceptors} instead., +	 * Return a {@link FormattingConversionService} for use with annotated controllers., +	 * <p>See {@link #addFormatters} as an alternative to overriding this method., +	 * Override this method to add custom {@link Converter} and/or {@link Formatter}, +	 * delegates to the common {@link FormattingConversionService}., +	 * @see #mvcConversionService(), +	 * {@link RequestMappingHandlerAdapter} and the {@link ExceptionHandlerExceptionResolver}., +	 * <p>This method cannot be overridden; use {@link #addArgumentResolvers} instead., +	 * Add custom {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}, +	 * to use in addition to the ones registered by default., +	 * <p>Custom argument resolvers are invoked before built-in resolvers except for, +	 * those that rely on the presence of annotations (e.g. {@code @RequestParameter},, +	 * {@code @PathVariable}, etc). The latter can be customized by configuring the, +	 * @param argumentResolvers the list of custom converters (initially an empty list), +	 * {@link RequestMappingHandlerAdapter} and the {@link ExceptionHandlerExceptionResolver}., +	 * <p>This method cannot be overridden; use {@link #addReturnValueHandlers} instead., +	 * Add custom {@link HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers}, +	 * in addition to the ones registered by default., +	 * <p>Custom return value handlers are invoked before built-in ones except for, +	 * those that rely on the presence of annotations (e.g. {@code @ResponseBody},, +	 * {@code @ModelAttribute}, etc). The latter can be customized by configuring the, +	 * @param returnValueHandlers the list of custom handlers (initially an empty list), +	 * Provides access to the shared {@link HttpMessageConverter HttpMessageConverters}, +	 * used by the {@link RequestMappingHandlerAdapter} and the, +	 * <p>This method cannot be overridden; use {@link #configureMessageConverters} instead., +	 * Also see {@link #addDefaultHttpMessageConverters} for adding default message converters., +	 * Override this method to add custom {@link HttpMessageConverter HttpMessageConverters}, +	 * to use with the {@link RequestMappingHandlerAdapter} and the, +	 * {@link ExceptionHandlerExceptionResolver}., +	 * <p>Adding converters to the list turns off the default converters that would, +	 * otherwise be registered by default. Also see {@link #addDefaultHttpMessageConverters}, +	 * for adding default message converters., +	 * @param converters a list to add message converters to (initially an empty list), +	 * Override this method to extend or modify the list of converters after it has, +	 * been configured. This may be useful for example to allow default converters, +	 * to be registered and then insert a custom converter through this method., +	 * @param converters the list of configured converters to extend]