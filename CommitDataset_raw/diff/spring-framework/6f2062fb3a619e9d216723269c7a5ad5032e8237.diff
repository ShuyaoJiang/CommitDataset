[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * Copyright 2002-2010 the original author or authors., +	private boolean disableCaching = true;, +, +	/**, +	 * Disables caching of the generated JSON., +	 *, +	 * <p>Default is {@code true}, which will prevent the client from caching the generated JSON., +	 */, +	public void setDisableCaching(boolean disableCaching) {, +		this.disableCaching = disableCaching;, +	}, +, +		if (disableCaching) {, +			response.addHeader("Pragma", "no-cache");, +			response.addHeader("Cache-Control", "no-cache, no-store, max-age=0");, +			response.addDateHeader("Expires", 1L);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * Copyright 2002-2010 the original author or authors., +	private boolean disableCaching = true;, +, +	/**, +	 * Disables caching of the generated JSON., +	 *, +	 * <p>Default is {@code true}, which will prevent the client from caching the generated JSON., +	 */, +	public void setDisableCaching(boolean disableCaching) {, +		this.disableCaching = disableCaching;, +	}, +, +		if (disableCaching) {, +			response.addHeader("Pragma", "no-cache");, +			response.addHeader("Cache-Control", "no-cache, no-store, max-age=0");, +			response.addDateHeader("Expires", 1L);, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/json/MappingJacksonJsonViewTest.java, + * Copyright 2002-2010 the original author or authors., +import org.codehaus.jackson.map.annotate.JsonSerialize;, +		assertEquals("no-cache", response.getHeader("Pragma"));, +		assertEquals("no-cache, no-store, max-age=0", response.getHeader("Cache-Control"));, +		assertNotNull(response.getHeader("Expires"));, +, +	public void renderCaching() throws Exception {, +		view.setDisableCaching(false);, +, +		Map<String, Object> model = new HashMap<String, Object>();, +		model.put("bindingResult", createMock("binding_result", BindingResult.class));, +		model.put("foo", "bar");, +, +		view.render(model, request, response);, +, +		assertNull(response.getHeader("Pragma"));, +		assertNull(response.getHeader("Cache-Control"));, +		assertNull(response.getHeader("Expires"));, +	}, +, +	@Test, +, +	@JsonSerialize(using=TestBeanSimpleSerializer.class)]