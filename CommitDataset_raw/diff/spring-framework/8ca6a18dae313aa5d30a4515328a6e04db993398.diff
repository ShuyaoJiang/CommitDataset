[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +	private static final boolean javaxValidationPresent =, +			ClassUtils.isPresent("javax.validation.Validator", MessageBrokerBeanDefinitionParser.class.getClassLoader());, +, +		RuntimeBeanReference validatorRef = getValidator(messageBrokerElement, source, context);, +		if (validatorRef != null) {, +			beanDef.getPropertyValues().add("validator", validatorRef);, +		}, +, +	private RuntimeBeanReference getValidator(Element messageBrokerElement, Object source, ParserContext parserContext) {, +		if (messageBrokerElement.hasAttribute("validator")) {, +			return new RuntimeBeanReference(messageBrokerElement.getAttribute("validator"));, +		}, +		else if (javaxValidationPresent) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(, +					"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean");, +			validatorDef.setSource(source);, +			validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));, +			return new RuntimeBeanReference(validatorName);, +		}, +		else {, +			return null;, +		}, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +	private static final boolean javaxValidationPresent =, +			ClassUtils.isPresent("javax.validation.Validator", MessageBrokerBeanDefinitionParser.class.getClassLoader());, +, +		RuntimeBeanReference validatorRef = getValidator(messageBrokerElement, source, context);, +		if (validatorRef != null) {, +			beanDef.getPropertyValues().add("validator", validatorRef);, +		}, +, +	private RuntimeBeanReference getValidator(Element messageBrokerElement, Object source, ParserContext parserContext) {, +		if (messageBrokerElement.hasAttribute("validator")) {, +			return new RuntimeBeanReference(messageBrokerElement.getAttribute("validator"));, +		}, +		else if (javaxValidationPresent) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(, +					"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean");, +			validatorDef.setSource(source);, +			validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));, +			return new RuntimeBeanReference(validatorName);, +		}, +		else {, +			return null;, +		}, +	}, +, +++ b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket-4.3.xsd, +	Exact path mapping URIs (such as "/myPath") are supported as well as Ant-type path patterns (such as /myPath/**)., +			<xsd:attribute name="validator" type="xsd:string">, +			<xsd:annotation>, +				<xsd:documentation><![CDATA[, +	The bean name of the Validator instance used for validating @Payload arguments., +				]]></xsd:documentation>, +			</xsd:annotation>, +		</xsd:attribute>, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		assertSame(manager, this.appContext.getBean("mvcContentNegotiationManager"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +	private static final boolean javaxValidationPresent =, +			ClassUtils.isPresent("javax.validation.Validator", MessageBrokerBeanDefinitionParser.class.getClassLoader());, +, +		RuntimeBeanReference validatorRef = getValidator(messageBrokerElement, source, context);, +		if (validatorRef != null) {, +			beanDef.getPropertyValues().add("validator", validatorRef);, +		}, +, +	private RuntimeBeanReference getValidator(Element messageBrokerElement, Object source, ParserContext parserContext) {, +		if (messageBrokerElement.hasAttribute("validator")) {, +			return new RuntimeBeanReference(messageBrokerElement.getAttribute("validator"));, +		}, +		else if (javaxValidationPresent) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(, +					"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean");, +			validatorDef.setSource(source);, +			validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));, +			return new RuntimeBeanReference(validatorName);, +		}, +		else {, +			return null;, +		}, +	}]