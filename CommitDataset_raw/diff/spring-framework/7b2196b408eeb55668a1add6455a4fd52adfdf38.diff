[+++ /dev/null, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, +	/**, +	 * Returns the given Netty {@link DataBuffer} as a {@link ByteBuf}. Returns the, +	 * {@linkplain NettyDataBuffer#getNativeBuffer() native buffer} if {@code buffer} is, +	 * a {@link NettyDataBuffer}; returns {@link Unpooled#wrappedBuffer(ByteBuffer)}, +	 * otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for., +	 * @return the netty {@code ByteBuf}, +	 */, +	public static ByteBuf toByteBuf(DataBuffer buffer) {, +		if (buffer instanceof NettyDataBuffer) {, +			return ((NettyDataBuffer) buffer).getNativeBuffer();, +		}, +		else {, +			return Unpooled.wrappedBuffer(buffer.asByteBuffer());, +		}, +	}, +, +, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, +	/**, +	 * Returns the given Netty {@link DataBuffer} as a {@link ByteBuf}. Returns the, +	 * {@linkplain NettyDataBuffer#getNativeBuffer() native buffer} if {@code buffer} is, +	 * a {@link NettyDataBuffer}; returns {@link Unpooled#wrappedBuffer(ByteBuffer)}, +	 * otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for., +	 * @return the netty {@code ByteBuf}, +	 */, +	public static ByteBuf toByteBuf(DataBuffer buffer) {, +		if (buffer instanceof NettyDataBuffer) {, +			return ((NettyDataBuffer) buffer).getNativeBuffer();, +		}, +		else {, +			return Unpooled.wrappedBuffer(buffer.asByteBuffer());, +		}, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.converter.reactive.SseEventHttpMessageWriter;, +		writers.add(new SseEventHttpMessageWriter(sseDataEncoders));, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, +	/**, +	 * Returns the given Netty {@link DataBuffer} as a {@link ByteBuf}. Returns the, +	 * {@linkplain NettyDataBuffer#getNativeBuffer() native buffer} if {@code buffer} is, +	 * a {@link NettyDataBuffer}; returns {@link Unpooled#wrappedBuffer(ByteBuffer)}, +	 * otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for., +	 * @return the netty {@code ByteBuf}, +	 */, +	public static ByteBuf toByteBuf(DataBuffer buffer) {, +		if (buffer instanceof NettyDataBuffer) {, +			return ((NettyDataBuffer) buffer).getNativeBuffer();, +		}, +		else {, +			return Unpooled.wrappedBuffer(buffer.asByteBuffer());, +		}, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.converter.reactive.SseEventHttpMessageWriter;, +		writers.add(new SseEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, +	/**, +	 * Returns the given Netty {@link DataBuffer} as a {@link ByteBuf}. Returns the, +	 * {@linkplain NettyDataBuffer#getNativeBuffer() native buffer} if {@code buffer} is, +	 * a {@link NettyDataBuffer}; returns {@link Unpooled#wrappedBuffer(ByteBuffer)}, +	 * otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for., +	 * @return the netty {@code ByteBuf}, +	 */, +	public static ByteBuf toByteBuf(DataBuffer buffer) {, +		if (buffer instanceof NettyDataBuffer) {, +			return ((NettyDataBuffer) buffer).getNativeBuffer();, +		}, +		else {, +			return Unpooled.wrappedBuffer(buffer.asByteBuffer());, +		}, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.converter.reactive.SseEventHttpMessageWriter;, +		writers.add(new SseEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * HTTP layer., +	 * Use the given {@link Publisher} of {@code Publishers} to write the body of the, +	 * message to the underlying HTTP layer, flushing after each, +	 * {@code Publisher<DataBuffer>}., +	 *, +	 * @param body the body content publisher, +	 * @return a publisher that indicates completion or error.]