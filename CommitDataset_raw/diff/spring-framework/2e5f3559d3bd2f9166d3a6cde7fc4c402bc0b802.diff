[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/LoadTimeWeavingConfiguration.java, +				if (this.beanClassLoader.getResource(ASPECTJ_AOP_XML_RESOURCE) == null) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/LoadTimeWeavingConfiguration.java, +				if (this.beanClassLoader.getResource(ASPECTJ_AOP_XML_RESOURCE) == null) {, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/EnableLoadTimeWeavingTests.java, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +, +import java.lang.instrument.ClassFileTransformer;, +, +import org.springframework.context.annotation.EnableLoadTimeWeaving.AspectJWeaving;, +	public void enableLTW_withAjWeavingDisabled() {, +		ctx.register(EnableLTWConfig_withAjWeavingDisabled.class);, +		ctx.refresh();, +		ctx.getBean("loadTimeWeaver");, +	}, +, +	@Test, +	public void enableLTW_withAjWeavingAutodetect() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(EnableLTWConfig_withAjWeavingAutodetect.class);, +		ctx.refresh();, +		ctx.getBean("loadTimeWeaver");, +	}, +, +	@Test, +	public void enableLTW_withAjWeavingEnabled() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(EnableLTWConfig_withAjWeavingEnabled.class);, +	@EnableLoadTimeWeaving(aspectjWeaving=AspectJWeaving.DISABLED), +	static class EnableLTWConfig_withAjWeavingDisabled implements LoadTimeWeavingConfigurer {, +			LoadTimeWeaver mockLTW = createMock(LoadTimeWeaver.class);, +			// no expectations -> a class file transformer should NOT be added, +			replay(mockLTW);, +			return mockLTW;, +		}, +	}, +, +	@Configuration, +	@EnableLoadTimeWeaving(aspectjWeaving=AspectJWeaving.AUTODETECT), +	static class EnableLTWConfig_withAjWeavingAutodetect implements LoadTimeWeavingConfigurer {, +		public LoadTimeWeaver getLoadTimeWeaver() {, +			LoadTimeWeaver mockLTW = createMock(LoadTimeWeaver.class);, +			// no expectations -> a class file transformer should NOT be added, +			// because no META-INF/aop.xml is present on the classpath, +			replay(mockLTW);, +			return mockLTW;, +		}, +	}, +, +	@Configuration, +	@EnableLoadTimeWeaving(aspectjWeaving=AspectJWeaving.ENABLED), +	static class EnableLTWConfig_withAjWeavingEnabled implements LoadTimeWeavingConfigurer {, +		public LoadTimeWeaver getLoadTimeWeaver() {, +			LoadTimeWeaver mockLTW = createMock(LoadTimeWeaver.class);, +			mockLTW.addTransformer(isA(ClassFileTransformer.class));, +			expectLastCall();, +			replay(mockLTW);, +			return mockLTW;]