[+++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.util.Collections;, +	private int maxSessions = 10000;, +, +	private final Map<String, InMemoryWebSession> sessions = new ConcurrentHashMap<>();, +	 * Set the maximum number of sessions that can be stored. Once the limit is, +	 * reached, any attempt to store an additional session will result in an, +	 * {@link IllegalStateException}., +	 * <p>By default set to 10000., +	 * @param maxSessions the maximum number of sessions, +	 * @since 5.1, +	 */, +	public void setMaxSessions(int maxSessions) {, +		this.maxSessions = maxSessions;, +	}, +, +	/**, +	 * Return the maximum number of sessions that can be stored., +	 * @since 5.1, +	 */, +	public int getMaxSessions() {, +		return this.maxSessions;, +	}, +, +	/**, +		removeExpiredSessions();, +	/**, +	 * Return the map of sessions with an {@link Collections#unmodifiableMap, +	 * unmodifiable} wrapper. This could be used for management purposes, to, +	 * list active sessions, invalidate expired ones, etc., +	 * @since 5.1, +	 */, +	public Map<String, InMemoryWebSession> getSessions() {, +		return Collections.unmodifiableMap(this.sessions);, +	}, +, +	public Mono<WebSession> updateLastAccessTime(WebSession session) {, +			Assert.isInstanceOf(InMemoryWebSession.class, session);, +			((InMemoryWebSession) session).updateLastAccessTime(this.clock.instant());, +	/**, +	 * Check for expired sessions and remove them. Typically such checks are, +	 * kicked off lazily during calls to {@link #createWebSession() create} or, +	 * {@link #retrieveSession retrieve}, no less than 60 seconds apart., +	 * This method can be called to force a check at a specific time., +	 * @since 5.1, +	 */, +	public void removeExpiredSessions() {, +		this.expiredSessionChecker.removeExpiredSessions(this.clock.instant());, +	}, +, +			if (sessions.size() >= maxSessions) {, +				expiredSessionChecker.removeExpiredSessions(clock.instant());, +				if (sessions.size() >= maxSessions) {, +					return Mono.error(new IllegalStateException("Max sessions limit reached: " + sessions.size()));, +				}, +			}, +			return isExpired(clock.instant());, +		private boolean isExpired(Instant now) {, +			if (checkExpired(now)) {, +		/** Max time between expiration checks. */, +		private static final int CHECK_PERIOD = 60 * 1000;, +		private Instant checkTime = clock.instant().plus(CHECK_PERIOD, ChronoUnit.MILLIS);, +			if (this.checkTime.isBefore(now)) {, +				removeExpiredSessions(now);, +					this.checkTime = now.plus(CHECK_PERIOD, ChronoUnit.MILLIS);, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.util.Collections;, +	private int maxSessions = 10000;, +, +	private final Map<String, InMemoryWebSession> sessions = new ConcurrentHashMap<>();, +	 * Set the maximum number of sessions that can be stored. Once the limit is, +	 * reached, any attempt to store an additional session will result in an, +	 * {@link IllegalStateException}., +	 * <p>By default set to 10000., +	 * @param maxSessions the maximum number of sessions, +	 * @since 5.1, +	 */, +	public void setMaxSessions(int maxSessions) {, +		this.maxSessions = maxSessions;, +	}, +, +	/**, +	 * Return the maximum number of sessions that can be stored., +	 * @since 5.1, +	 */, +	public int getMaxSessions() {, +		return this.maxSessions;, +	}, +, +	/**, +		removeExpiredSessions();, +	/**, +	 * Return the map of sessions with an {@link Collections#unmodifiableMap, +	 * unmodifiable} wrapper. This could be used for management purposes, to, +	 * list active sessions, invalidate expired ones, etc., +	 * @since 5.1, +	 */, +	public Map<String, InMemoryWebSession> getSessions() {, +		return Collections.unmodifiableMap(this.sessions);, +	}]