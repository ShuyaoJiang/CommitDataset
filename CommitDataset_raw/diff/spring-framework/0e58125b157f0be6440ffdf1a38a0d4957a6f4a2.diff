[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +import org.springframework.beans.factory.BeanInitializationException;, +				try {, +					requestHandler.afterPropertiesSet();, +				}, +				catch (Exception e) {, +					throw new BeanInitializationException("Failed to init ResourceHttpRequestHandler", e);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +import org.springframework.beans.factory.BeanInitializationException;, +				try {, +					requestHandler.afterPropertiesSet();, +				}, +				catch (Exception e) {, +					throw new BeanInitializationException("Failed to init ResourceHttpRequestHandler", e);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * @since 4.0, +, +	public final Resource resolve(HttpServletRequest request, String requestPath,, +		Resource resource = chain.next(this).resolve(request, requestPath, locations, chain);, +		return resolveInternal(request, requestPath, locations, chain, resource);, +	public String resolveUrl(String resourcePath, List<Resource> locations, ResourceResolverChain chain) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +import org.springframework.beans.factory.BeanInitializationException;, +				try {, +					requestHandler.afterPropertiesSet();, +				}, +				catch (Exception e) {, +					throw new BeanInitializationException("Failed to init ResourceHttpRequestHandler", e);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * @since 4.0, +, +	public final Resource resolve(HttpServletRequest request, String requestPath,, +		Resource resource = chain.next(this).resolve(request, requestPath, locations, chain);, +		return resolveInternal(request, requestPath, locations, chain, resource);, +	public String resolveUrl(String resourcePath, List<Resource> locations, ResourceResolverChain chain) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + *, + * @author Rossen Stoyanchev, + * @since 4.0, +class DefaultResourceResolverChain implements ResourceResolverChain {, +, +		this.resolvers = (resolvers != null) ? resolvers : new ArrayList<ResourceResolver>();, +		this.transformers = (transformers != null) ? transformers : new ArrayList<ResourceTransformer>();, +, +	public Resource resolveAndTransform(HttpServletRequest request, String path, List<Resource> locations), +			throws IOException {, +, +		Resource resource = this.resolvers.get(0).resolve(request, path, locations, this);, +		return resource != null ? applyTransformers(request, resource) : resource;, +	private Resource applyTransformers(HttpServletRequest request, Resource resource) throws IOException {, +		for (ResourceTransformer transformer : this.transformers) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +import org.springframework.beans.factory.BeanInitializationException;, +				try {, +					requestHandler.afterPropertiesSet();, +				}, +				catch (Exception e) {, +					throw new BeanInitializationException("Failed to init ResourceHttpRequestHandler", e);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * @since 4.0, +, +	public final Resource resolve(HttpServletRequest request, String requestPath,, +		Resource resource = chain.next(this).resolve(request, requestPath, locations, chain);, +		return resolveInternal(request, requestPath, locations, chain, resource);, +	public String resolveUrl(String resourcePath, List<Resource> locations, ResourceResolverChain chain) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + *, + * @author Rossen Stoyanchev, + * @since 4.0, +class DefaultResourceResolverChain implements ResourceResolverChain {, +, +		this.resolvers = (resolvers != null) ? resolvers : new ArrayList<ResourceResolver>();, +		this.transformers = (transformers != null) ? transformers : new ArrayList<ResourceTransformer>();, +, +	public Resource resolveAndTransform(HttpServletRequest request, String path, List<Resource> locations), +			throws IOException {, +, +		Resource resource = this.resolvers.get(0).resolve(request, path, locations, this);, +		return resource != null ? applyTransformers(request, resource) : resource;, +	private Resource applyTransformers(HttpServletRequest request, Resource resource) throws IOException {, +		for (ResourceTransformer transformer : this.transformers) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/EncodedResource.java, + * @since 4.0, +	public String getContentEncoding();, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +import org.springframework.beans.factory.BeanInitializationException;, +				try {, +					requestHandler.afterPropertiesSet();, +				}, +				catch (Exception e) {, +					throw new BeanInitializationException("Failed to init ResourceHttpRequestHandler", e);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * @since 4.0, +]