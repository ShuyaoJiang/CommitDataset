[+++ b/org.springframework.context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolTaskSchedulerTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.concurrent;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +import java.util.Date;, +import java.util.concurrent.Callable;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.scheduling.Trigger;, +import org.springframework.scheduling.TriggerContext;, +import org.springframework.scheduling.support.ErrorHandler;, +, +/**, + * @author Mark Fisher, + * @since 3.0, + */, +public class ThreadPoolTaskSchedulerTests {, +, +	private static final String THREAD_NAME_PREFIX = "test-";, +, +, +	private final ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();, +, +, +	@Before, +	public void initScheduler() {, +		scheduler.setThreadNamePrefix(THREAD_NAME_PREFIX);, +		scheduler.afterPropertiesSet();, +	}, +, +, +	// test methods, +, +	@Test, +	public void executeRunnable() {, +		TestTask task = new TestTask(1);, +		scheduler.execute(task);, +		await(task);, +		assertThreadNamePrefix(task);, +	}, +, +	@Test, +	public void executeFailingRunnableWithoutErrorHandler() {, +		TestTask task = new TestTask(0);, +		scheduler.execute(task);, +		// nothing to assert, +	}, +, +	@Test, +	public void executeFailingRunnnableWithErrorHandler() {, +		TestTask task = new TestTask(0);, +		TestErrorHandler errorHandler = new TestErrorHandler(1);, +		scheduler.setErrorHandler(errorHandler);, +		scheduler.execute(task);, +		await(errorHandler);, +		assertNotNull(errorHandler.lastError);, +	}, +, +	@Test, +	public void submitRunnable() throws Exception {, +		TestTask task = new TestTask(1);, +		Future<?> future = scheduler.submit(task);, +		Object result = future.get(1000, TimeUnit.MILLISECONDS);, +		assertNull(result);, +		assertThreadNamePrefix(task);, +	}, +, +	@Test(expected = ExecutionException.class), +	public void submitFailingRunnableWithoutErrorHandler() throws Exception {, +		TestTask task = new TestTask(0);, +		Future<?> future = scheduler.submit(task);, +		try {, +			future.get(1000, TimeUnit.MILLISECONDS);]