[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2017 the original author or authors., +	 * Clear the internal {@code ResolvableType}/{@code SerializableTypeWrapper} cache., +		SerializableTypeWrapper.cache.clear();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2017 the original author or authors., +	 * Clear the internal {@code ResolvableType}/{@code SerializableTypeWrapper} cache., +		SerializableTypeWrapper.cache.clear();, +++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, +	static final ConcurrentReferenceHashMap<Type, Type> cache = new ConcurrentReferenceHashMap<>(256);, +		return forTypeProvider(type::getGenericSuperclass);, +			result[i] = forTypeProvider(() -> type.getGenericInterfaces()[index]);, +			result[i] = forTypeProvider(() -> type.getTypeParameters()[index]);, +	@SuppressWarnings("serial"), +		 * Return the source of the type, or {@code null} if not known., +		 * <p>The default implementations returns {@code null}., +		default Object getSource() {]