[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +			messageConverters.add(createConverterDefinition(ResourceRegionHttpMessageConverter.class, source));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +			messageConverters.add(createConverterDefinition(ResourceRegionHttpMessageConverter.class, source));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +		messageConverters.add(new ResourceRegionHttpMessageConverter());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +			messageConverters.add(createConverterDefinition(ResourceRegionHttpMessageConverter.class, source));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +		messageConverters.add(new ResourceRegionHttpMessageConverter());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourceRegion;, +import org.springframework.http.HttpRange;, +import org.springframework.http.HttpStatus;, +	private static final Type RESOURCE_REGION_LIST_TYPE =, +			new ParameterizedTypeReference<List<ResourceRegion>>() { }.getType();, +, +		if (isResourceType(value, returnType)) {, +			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes");, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {, +				Resource resource = (Resource) value;, +				try {, +					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange();, +					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());, +					outputValue = HttpRange.toResourceRegions(httpRanges, resource);, +					valueType = outputValue.getClass();, +					declaredType = RESOURCE_REGION_LIST_TYPE;, +				}, +				catch (IllegalArgumentException ex) {, +					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength());, +					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());, +				}, +			}, +		}, +, +	 * Return whether the returned value or the declared return type extend {@link Resource}, +	 */, +	protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {, +		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +			messageConverters.add(createConverterDefinition(ResourceRegionHttpMessageConverter.class, source));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +		messageConverters.add(new ResourceRegionHttpMessageConverter());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourceRegion;, +import org.springframework.http.HttpRange;, +import org.springframework.http.HttpStatus;, +	private static final Type RESOURCE_REGION_LIST_TYPE =, +			new ParameterizedTypeReference<List<ResourceRegion>>() { }.getType();, +, +		if (isResourceType(value, returnType)) {, +			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes");, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {, +				Resource resource = (Resource) value;, +				try {, +					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange();, +					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());, +					outputValue = HttpRange.toResourceRegions(httpRanges, resource);, +					valueType = outputValue.getClass();, +					declaredType = RESOURCE_REGION_LIST_TYPE;, +				}, +				catch (IllegalArgumentException ex) {, +					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength());, +					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());, +				}, +			}, +		}, +, +	 * Return whether the returned value or the declared return type extend {@link Resource}, +	 */, +	protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {, +		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +			messageConverters.add(createConverterDefinition(ResourceRegionHttpMessageConverter.class, source));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.http.converter.ResourceRegionHttpMessageConverter;, +		messageConverters.add(new ResourceRegionHttpMessageConverter());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourceRegion;]