[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Schedules.class, Scheduled.class)) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Schedules.class, Scheduled.class)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * The terms <em>directly present</em>, <em>indirectly present</em>, and, + * <em>present</em> have the same meanings as defined in the class-level, + * Javadoc for {@link AnnotatedElement} (in Java 8)., +	 * Delegates to {@link #getRepeatableAnnotations}., +	 * @deprecated As of Spring Framework 4.2, use {@link #getRepeatableAnnotations}, +	 * or {@link #getDeclaredRepeatableAnnotations} instead., +	@Deprecated, +		return getRepeatableAnnotations(method, containerAnnotationType, annotationType);, +	 * Delegates to {@link #getRepeatableAnnotations}., +	 * @since 4.0, +	 * @deprecated As of Spring Framework 4.2, use {@link #getRepeatableAnnotations}, +	 * or {@link #getDeclaredRepeatableAnnotations} instead., +	 */, +	@Deprecated, +	public static <A extends Annotation> Set<A> getRepeatableAnnotation(AnnotatedElement annotatedElement,, +			Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +		return getRepeatableAnnotations(annotatedElement, containerAnnotationType, annotationType);, +	}, +, +	/**, +	 * Get the <em>repeatable</em> {@linkplain Annotation annotations} of, +	 * {@code annotationType} from the supplied {@link AnnotatedElement}, where, +	 * such annotations are either <em>present</em> or <em>meta-present</em>, +	 * on the element., +	 * <p>This method mimics the functionality of Java 8's, +	 * {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)}, +	 * with additional support for meta-annotations., +	 * <em>container annotation</em>., +	 * <p>Correctly handles <em>bridge methods</em> generated by the, +	 * compiler if the supplied element is a {@link Method}., +	 * @param containerAnnotationType the type of the container that holds, +	 * the annotations; may be {@code null} if a container is not supported, +	 * @param annotationType the annotation type to look for; never {@code null}, +	 * @since 4.2, +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod, +	 * @see java.lang.reflect.AnnotatedElement#getAnnotationsByType, +	public static <A extends Annotation> Set<A> getRepeatableAnnotations(AnnotatedElement annotatedElement,, +		Set<A> annotations = getDeclaredRepeatableAnnotations(annotatedElement, containerAnnotationType, annotationType);, +		if (!annotations.isEmpty()) {, +			return annotations;, +, +		return getRepeatableAnnotations(annotatedElement, containerAnnotationType, annotationType, false);, +	}, +, +	/**, +	 * Get the declared <em>repeatable</em> {@linkplain Annotation annotations}, +	 * of {@code annotationType} from the supplied {@link AnnotatedElement},, +	 * where such annotations are either <em>directly present</em>,, +	 * <em>indirectly present</em>, or <em>meta-present</em> on the element., +	 * <p>This method mimics the functionality of Java 8's, +	 * {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)}, +	 * with additional support for meta-annotations., +	 * <p>Handles both single annotations and annotations nested within a, +	 * <em>container annotation</em>., +	 * <p>Correctly handles <em>bridge methods</em> generated by the, +	 * compiler if the supplied element is a {@link Method}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>present</em> on the supplied element., +	 * @param annotatedElement the element to look for annotations on; never {@code null}, +	 * @param containerAnnotationType the type of the container that holds, +	 * the annotations; may be {@code null} if a container is not supported, +	 * @param annotationType the annotation type to look for; never {@code null}, +	 * @return the annotations found or an empty set; never {@code null}, +	 * @since 4.2, +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod, +	 * @see java.lang.annotation.Repeatable, +	 * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType, +	 */, +	public static <A extends Annotation> Set<A> getDeclaredRepeatableAnnotations(AnnotatedElement annotatedElement,, +			Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +		return getRepeatableAnnotations(annotatedElement, containerAnnotationType, annotationType, true);, +	}, +, +	/**, +	 * Perform the actual work for {@link #getRepeatableAnnotations(AnnotatedElement, Class, Class)}, +	 * and {@link #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)}., +	 * <p>Correctly handles <em>bridge methods</em> generated by the, +	 * compiler if the supplied element is a {@link Method}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>present</em> on the supplied element., +	 *, +	 * @param annotatedElement the element to look for annotations on; never {@code null}, +	 * @param containerAnnotationType the type of the container that holds, +	 * the annotations; may be {@code null} if a container is not supported, +	 * @param annotationType the annotation type to look for; never {@code null}, +	 * @param declaredMode {@code true} if only declared annotations (i.e.,, +	 * directly or indirectly present) should be considered., +	 * @return the annotations found or an empty set; never {@code null}, +	 * @since 4.2, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod, +	 * @see java.lang.annotation.Repeatable, +	 */, +	private static <A extends Annotation> Set<A> getRepeatableAnnotations(AnnotatedElement annotatedElement,]