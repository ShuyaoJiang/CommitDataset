[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/MissingSourceValuesException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/MissingSourceValuesException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/NoSuchBindingException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/MissingSourceValuesException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/NoSuchBindingException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider a general add(Formatter) method for simplicity, +	 * Adds a Formatter that will format the values of properties of the provided type., +	 * @param propertyType the type, +	 * @param formatter the formatter, +	 */, +	void add(GenericCollectionPropertyType propertyType, Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/MissingSourceValuesException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/NoSuchBindingException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider a general add(Formatter) method for simplicity, +	 * Adds a Formatter that will format the values of properties of the provided type., +	 * @param propertyType the type, +	 * @param formatter the formatter, +	 */, +	void add(GenericCollectionPropertyType propertyType, Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +	 * Register a Formatter to format the model properties of a specific property type., +	 * Convenience method that calls {@link FormatterRegistry#add(GenericCollectionPropertyType, Formatter)} internally., +	 * @param propertyType the model property type, +	 * @param formatter the formatter, +	 */, +	public void registerFormatter(GenericCollectionPropertyType propertyType, Formatter<?> formatter) {, +		formatterRegistry.add(propertyType, formatter);, +	}, +, +, +	/**, +			// TODO if collection we want to format as a single string, need collection formatter, +				// if binding to a collection we may want collection formatter to convert String to Collection, +				// alternatively, we could map value to a single element e.g. String -> Address via AddressFormatter, which would bind to addresses[0], +				// probably want to give preference to collection formatter if one is registered, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingFactory.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/MissingSourceValuesException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/NoSuchBindingException.java, + * @since 3.0, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider a general add(Formatter) method for simplicity, +	 * Adds a Formatter that will format the values of properties of the provided type., +	 * @param propertyType the type, +	 * @param formatter the formatter, +	 */, +	void add(GenericCollectionPropertyType propertyType, Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +	 * Register a Formatter to format the model properties of a specific property type., +	 * Convenience method that calls {@link FormatterRegistry#add(GenericCollectionPropertyType, Formatter)} internally., +	 * @param propertyType the model property type, +	 * @param formatter the formatter, +	 */, +	public void registerFormatter(GenericCollectionPropertyType propertyType, Formatter<?> formatter) {, +		formatterRegistry.add(propertyType, formatter);, +	}, +, +, +	/**, +			// TODO if collection we want to format as a single string, need collection formatter, +				// if binding to a collection we may want collection formatter to convert String to Collection, +				// alternatively, we could map value to a single element e.g. String -> Address via AddressFormatter, which would bind to addresses[0], +				// probably want to give preference to collection formatter if one is registered, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericCollectionPropertyType.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]