[+++ b/org.springframework.context/src/main/java/org/springframework/cache/support/CompositeCacheManager.java, +import org.springframework.beans.factory.InitializingBean;, + * Allows {@link NoOpCacheManager} to be automatically added to the list for handling, + * the cache declarations without a backing store., + * , +public class CompositeCacheManager implements InitializingBean, CacheManager {, +	private List<CacheManager> cacheManagers;, +	private boolean noOpManager = false;, +, +	public void afterPropertiesSet() {, +		if (noOpManager) {, +			cacheManagers.add(new NoOpCacheManager());, +		}, +	}, +	public void setCacheManagers(Collection<CacheManager> cacheManagers) {, +		this.cacheManagers = new ArrayList<CacheManager>();, +		this.cacheManagers.addAll(cacheManagers);, +	}, +, +	/**, +	 * Indicates whether a {@link NoOpCacheManager} will be added at the end of the manager lists., +	 * Any cache requests not handled by the configured cache managers will be automatically handled, +	 * by the {@link NoOpCacheManager}., +	 * , +	 * @param add whether a {@link NoOpCacheManager} instance will be added or not, +	 */, +	public void setAddNoOpCache(boolean add) {, +		this.noOpManager = add;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/support/CompositeCacheManager.java, +import org.springframework.beans.factory.InitializingBean;, + * Allows {@link NoOpCacheManager} to be automatically added to the list for handling, + * the cache declarations without a backing store., + * , +public class CompositeCacheManager implements InitializingBean, CacheManager {, +	private List<CacheManager> cacheManagers;, +	private boolean noOpManager = false;, +, +	public void afterPropertiesSet() {, +		if (noOpManager) {, +			cacheManagers.add(new NoOpCacheManager());, +		}, +	}, +	public void setCacheManagers(Collection<CacheManager> cacheManagers) {, +		this.cacheManagers = new ArrayList<CacheManager>();, +		this.cacheManagers.addAll(cacheManagers);, +	}, +, +	/**, +	 * Indicates whether a {@link NoOpCacheManager} will be added at the end of the manager lists., +	 * Any cache requests not handled by the configured cache managers will be automatically handled, +	 * by the {@link NoOpCacheManager}., +	 * , +	 * @param add whether a {@link NoOpCacheManager} instance will be added or not, +	 */, +	public void setAddNoOpCache(boolean add) {, +		this.noOpManager = add;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.support;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +, +/**, + * A basic, no operation {@link CacheManager} implementation suitable for disabling caching, , + * typically used for backing cache declarations without an actual backing store., + * , + * Will simply accept any items into the cache not actually storing them., + * , + * @see CompositeCacheManager, + * @author Costin Leau, + */, +public class NoOpCacheManager implements CacheManager {, +, +	private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<String, Cache>();, +	private Set<String> names = new LinkedHashSet<String>();, +, +	private static class NoOpCache implements Cache {]