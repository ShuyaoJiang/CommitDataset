[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +			logger.debug("Searching methods to handle " +, +					headerAccessor.getShortLogMessage(message.getPayload()) +, +					", lookupDestination='" + lookupDestination + "'");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +			logger.debug("Searching methods to handle " +, +					headerAccessor.getShortLogMessage(message.getPayload()) +, +					", lookupDestination='" + lookupDestination + "'");, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		TestChannel channel = context.getBean("clientInboundChannel", TestChannel.class);, +		assertTrue(handlers.contains(context.getBean(SimpAnnotationMethodMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(SimpleBrokerMessageHandler.class)));, +		ApplicationContext context = loadConfig(BrokerRelayConfig.class);, +, +		TestChannel channel = context.getBean("clientInboundChannel", TestChannel.class);, +		assertTrue(handlers.contains(context.getBean(SimpAnnotationMethodMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(StompBrokerRelayMessageHandler.class)));, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +		AbstractSubscribableChannel channel = context.getBean(, +		CustomThreadPoolTaskExecutor taskExecutor = context.getBean(, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		TestChannel channel = context.getBean("clientOutboundChannel", TestChannel.class);, +				context.getBean(SimpAnnotationMethodMessageHandler.class);, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		TestChannel channel = context.getBean("clientOutboundChannel", TestChannel.class);, +		SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class);, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +		AbstractSubscribableChannel channel = context.getBean(, +		ThreadPoolTaskExecutor taskExecutor = context.getBean(, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		TestChannel channel = context.getBean("brokerChannel", TestChannel.class);, +		assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(SimpleBrokerMessageHandler.class)));, +		ApplicationContext context = loadConfig(BrokerRelayConfig.class);, +, +		TestChannel channel = context.getBean("brokerChannel", TestChannel.class);, +		assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(context.getBean(StompBrokerRelayMessageHandler.class)));, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		TestChannel channel = context.getBean("brokerChannel", TestChannel.class);, +				context.getBean(SimpAnnotationMethodMessageHandler.class);, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +		AbstractSubscribableChannel channel = context.getBean(, +		ThreadPoolTaskExecutor taskExecutor = context.getBean(, +		ApplicationContext context = loadConfig(DefaultConfig.class);, +, +		ThreadPoolTaskExecutor executor = context.getBean(name, ThreadPoolTaskExecutor.class);, +		executor = context.getBean(name, ThreadPoolTaskExecutor.class);, +		executor = context.getBean(name, ThreadPoolTaskExecutor.class);, +	public void customArgumentAndReturnValueTypes() {, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +				context.getBean(SimpAnnotationMethodMessageHandler.class);, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +				context.getBean(SimpAnnotationMethodMessageHandler.class);, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +		SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class);, +				context.getBean(SimpAnnotationMethodMessageHandler.class).getPathMatcher();, +		DefaultUserDestinationResolver resolver = context.getBean(DefaultUserDestinationResolver.class);, +		ApplicationContext context = loadConfig(CustomConfig.class);, +, +		SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class);, +	public void userBroadcasts() {, +		ApplicationContext context = loadConfig(BrokerRelayConfig.class);, +, +		SimpUserRegistry userRegistry = context.getBean(SimpUserRegistry.class);, +		UserDestinationMessageHandler handler1 = context.getBean(UserDestinationMessageHandler.class);, +		UserRegistryMessageHandler handler2 = context.getBean(UserRegistryMessageHandler.class);, +		StompBrokerRelayMessageHandler relay = context.getBean(StompBrokerRelayMessageHandler.class);, +	public void userBroadcastsDisabledWithSimpleBroker() {, +		ApplicationContext context = loadConfig(SimpleBrokerConfig.class);, +, +		SimpUserRegistry registry = context.getBean(SimpUserRegistry.class);, +		UserDestinationMessageHandler handler = context.getBean(UserDestinationMessageHandler.class);, +		MessageHandler messageHandler = context.getBean(name, MessageHandler.class);, +	private AnnotationConfigApplicationContext loadConfig(Class<?> configClass) {, +		return new AnnotationConfigApplicationContext(configClass);, +	}, +]