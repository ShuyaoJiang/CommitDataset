[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	 * Return the collection of cache operations for this method,, +	 * or {@code null} if the method contains no <em>cacheable</em> annotations., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	 * Return the collection of cache operations for this method,, +	 * or {@code null} if the method contains no <em>cacheable</em> annotations., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CompositeCacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +		Assert.notEmpty(cacheOperationSources, "CacheOperationSource array must not be empty");, +, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	 * Return the collection of cache operations for this method,, +	 * or {@code null} if the method contains no <em>cacheable</em> annotations., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CompositeCacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +		Assert.notEmpty(cacheOperationSources, "CacheOperationSource array must not be empty");, +, +, +++ b/spring-context/src/main/java/org/springframework/scripting/support/StandardScriptFactory.java, + * Copyright 2002-2019 the original author or authors., + * Supports JavaScript, Groovy, JRuby, and other JSR-223 compliant engines., +					break;, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	 * Return the collection of cache operations for this method,, +	 * or {@code null} if the method contains no <em>cacheable</em> annotations., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CompositeCacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +		Assert.notEmpty(cacheOperationSources, "CacheOperationSource array must not be empty");, +, +, +++ b/spring-context/src/main/java/org/springframework/scripting/support/StandardScriptFactory.java, + * Copyright 2002-2019 the original author or authors., + * Supports JavaScript, Groovy, JRuby, and other JSR-223 compliant engines., +					break;, +++ b/spring-core/src/main/java/org/springframework/lang/NonNull.java, + * Copyright 2002-2019 the original author or authors., + *, + * <p>Leverages JSR-305 meta-annotations to indicate nullability in Java to common, + * tools with JSR-305 support and used by Kotlin to infer nullability of Spring API., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2019 the original author or authors., +	 * @see CacheOperation#getKeyGenerator(), +	 * @see CacheOperation#getCacheManager(), +	 * @see CacheOperation#getCacheResolver(), +	 * the result of the invocation. If an exception occurs it will be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSource.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	 * Return the collection of cache operations for this method,, +	 * or {@code null} if the method contains no <em>cacheable</em> annotations., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CompositeCacheOperationSource.java, + * Copyright 2002-2019 the original author or authors.]