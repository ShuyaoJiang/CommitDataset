[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +, +	private Environment environment;, +, +	public void setEnvironment(Environment environment) {, +		Assert.notNull(environment, "Environment must not be null");, +		this.environment = environment;, +	}, +, +		int registryId = System.identityHashCode(registry);, +		if (this.registriesPostProcessed.contains(registryId)) {, +		if (this.factoriesPostProcessed.contains(registryId)) {, +		this.registriesPostProcessed.add(registryId);, +		int factoryId = System.identityHashCode(beanFactory);, +		if (this.factoriesPostProcessed.contains(factoryId)) {, +		this.factoriesPostProcessed.add((factoryId));, +		if (!this.registriesPostProcessed.contains((factoryId))) {, +						AnnotationMetadata metadata =, +								new SimpleMetadataReaderFactory().getMetadataReader(importingClass).getAnnotationMetadata();, +					}, +					catch (IOException ex) {, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +, +	private Environment environment;, +, +	public void setEnvironment(Environment environment) {, +		Assert.notNull(environment, "Environment must not be null");, +		this.environment = environment;, +	}, +, +		int registryId = System.identityHashCode(registry);, +		if (this.registriesPostProcessed.contains(registryId)) {, +		if (this.factoriesPostProcessed.contains(registryId)) {, +		this.registriesPostProcessed.add(registryId);, +		int factoryId = System.identityHashCode(beanFactory);, +		if (this.factoriesPostProcessed.contains(factoryId)) {, +		this.factoriesPostProcessed.add((factoryId));, +		if (!this.registriesPostProcessed.contains((factoryId))) {, +						AnnotationMetadata metadata =, +								new SimpleMetadataReaderFactory().getMetadataReader(importingClass).getAnnotationMetadata();, +					}, +					catch (IOException ex) {, +, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, + * Copyright 2002-2011 the original author or authors., +, +	 * <p>The default implementation returns <code>null</code>, thus implying use, +	 * <p>Furthermore, support for timeouts has been moved down the execution chain, +		catch (Throwable ex) {, +			return new Fail(ex);, +	 * <p>Supports both Spring's {@link ExpectedException @ExpectedException(...)}, +	 * @return the expected exception, or <code>null</code> if none was specified, +		Class<? extends Throwable> junitExpectedException = (testAnnotation != null &&, +				testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null);, +	 * &#064;Test} annotation on the supplied {@link FrameworkMethod test method}.]