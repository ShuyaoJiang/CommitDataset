[+++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue((byte[]) payload);, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue(payload.toString());, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue((byte[]) payload);, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue(payload.toString());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, + * Copyright 2002-2015 the original author or authors., +import com.thoughtworks.xstream.core.ClassLoaderReference;, + * <p>This marshaller requires XStream 1.4.5 or higher, as of Spring 4.3., +		return new XStream(this.reflectionProvider, getDefaultDriver(), new ClassLoaderReference(this.beanClassLoader),, +				this.mapper, this.converterLookup, this.converterRegistry) {, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue((byte[]) payload);, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue(payload.toString());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, + * Copyright 2002-2015 the original author or authors., +import com.thoughtworks.xstream.core.ClassLoaderReference;, + * <p>This marshaller requires XStream 1.4.5 or higher, as of Spring 4.3., +		return new XStream(this.reflectionProvider, getDefaultDriver(), new ClassLoaderReference(this.beanClassLoader),, +				this.mapper, this.converterLookup, this.converterRegistry) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(deserializationView).forType(javaType)., +			if (type != null && value != null && TypeUtils.isAssignable(type, value.getClass())) {, +				objectWriter = objectWriter.forType(javaType);, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue((byte[]) payload);, +					return this.objectMapper.readerWithView(view).forType(javaType).readValue(payload.toString());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, + * Copyright 2002-2015 the original author or authors., +import com.thoughtworks.xstream.core.ClassLoaderReference;, + * <p>This marshaller requires XStream 1.4.5 or higher, as of Spring 4.3., +		return new XStream(this.reflectionProvider, getDefaultDriver(), new ClassLoaderReference(this.beanClassLoader),, +				this.mapper, this.converterLookup, this.converterRegistry) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +		if (!logger.isWarnEnabled()) {, +		if (!logger.isWarnEnabled()) {, +					return this.objectMapper.readerWithView(deserializationView).forType(javaType)., +			if (type != null && value != null && TypeUtils.isAssignable(type, value.getClass())) {, +				objectWriter = objectWriter.forType(javaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3., +			objectMapper.setFilterProvider(this.filters);, +			objectMapper.addMixIn(target, this.mixIns.get(target));, +				// jackson-datatype-jsr310 not available, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java, + * Copyright 2002-2015 the original author or authors., +		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3.]