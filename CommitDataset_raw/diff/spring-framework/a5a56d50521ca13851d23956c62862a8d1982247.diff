[+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType), +			throws RestClientException {, +, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType), +			throws RestClientException {, +, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType), +			throws RestClientException {, +, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType), +			throws RestClientException {, +, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2014 the original author or authors., +		String expandedScheme = expandUriComponent(getScheme(), uriVariables);, +		String expandedSsp = expandUriComponent(getSchemeSpecificPart(), uriVariables);, +		String expandedFragment = expandUriComponent(getFragment(), uriVariables);, +		return new OpaqueUriComponents(expandedScheme, expandedSsp, expandedFragment);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType), +			throws RestClientException {, +, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType), +			throws RestClientException {, +, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2014 the original author or authors., +		String expandedScheme = expandUriComponent(getScheme(), uriVariables);, +		String expandedSsp = expandUriComponent(getSchemeSpecificPart(), uriVariables);, +		String expandedFragment = expandUriComponent(getFragment(), uriVariables);, +		return new OpaqueUriComponents(expandedScheme, expandedSsp, expandedFragment);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +				throw new IllegalArgumentException("Not enough variable values available to expand '" + name + "'");, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType), +			throws RestClientException {, +, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType), +			throws RestClientException {, +, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2014 the original author or authors., +		String expandedScheme = expandUriComponent(getScheme(), uriVariables);, +		String expandedSsp = expandUriComponent(getSchemeSpecificPart(), uriVariables);, +		String expandedFragment = expandUriComponent(getFragment(), uriVariables);, +		return new OpaqueUriComponents(expandedScheme, expandedSsp, expandedFragment);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +				throw new IllegalArgumentException("Not enough variable values available to expand '" + name + "'");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +		Matcher matcher = URI_PATTERN.matcher(uri);, +		if (matcher.matches()) {, +			String scheme = matcher.group(2);, +			String userInfo = matcher.group(5);, +			String host = matcher.group(6);, +			String port = matcher.group(8);, +			String path = matcher.group(9);, +			String query = matcher.group(11);, +			String fragment = matcher.group(13);, +				String rest = uri.substring(scheme.length());, +				if (!rest.startsWith(":/")) {, +		Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl);, +		if (matcher.matches()) {, +			String scheme = matcher.group(1);, +			builder.scheme(scheme != null ? scheme.toLowerCase() : null);, +			builder.userInfo(matcher.group(4));, +			String host = matcher.group(5);, +			String port = matcher.group(7);, +			builder.path(matcher.group(8));, +			builder.query(matcher.group(10));, +	 * encoded ({@code true}) or not ({@code false}), +			Matcher matcher = QUERY_PARAM_PATTERN.matcher(query);, +			while (matcher.find()) {, +				String name = matcher.group(1);, +				String eq = matcher.group(2);, +				String value = matcher.group(3);, +				queryParam(name, (value != null ? value : (StringUtils.hasLength(eq) ? "" : null)));, +				String valueAsString = (value != null ? value.toString() : null);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType), +			throws RestClientException {, +, +	public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType), +			throws RestClientException {, +, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2014 the original author or authors., +		String expandedScheme = expandUriComponent(getScheme(), uriVariables);, +		String expandedSsp = expandUriComponent(getSchemeSpecificPart(), uriVariables);, +		String expandedFragment = expandUriComponent(getFragment(), uriVariables);, +		return new OpaqueUriComponents(expandedScheme, expandedSsp, expandedFragment);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +				throw new IllegalArgumentException("Not enough variable values available to expand '" + name + "'");]