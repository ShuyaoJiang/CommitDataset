[+++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	/**, +	 * @return the configured value for whether XML external entities are allowed., +	 */, +	public boolean isProcessExternalEntities() {, +		return this.processExternalEntities;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	/**, +	 * @return the configured value for whether XML external entities are allowed., +	 */, +	public boolean isProcessExternalEntities() {, +		return this.processExternalEntities;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2014 the original author or authors., +import javax.xml.transform.OutputKeys;, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +					"Could not transform to [" + ClassUtils.getShortName(result.getClass()) + "]", ex);, +			return transformAndUnmarshal(new DOMSource(node), null);, +		return transformAndUnmarshal(new SAXSource(xmlReader, inputSource), inputSource.getEncoding());, +	private Object transformAndUnmarshal(Source source, String encoding) throws IOException {, +			if (encoding != null) {, +				transformer.setOutputProperty(OutputKeys.ENCODING, encoding);, +			}, +					"Could not transform from [" + ClassUtils.getShortName(source.getClass()) + "]", ex);, +++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	/**, +	 * @return the configured value for whether XML external entities are allowed., +	 */, +	public boolean isProcessExternalEntities() {, +		return this.processExternalEntities;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2014 the original author or authors., +import javax.xml.transform.OutputKeys;, +	@Override, +	protected String getDefaultEncoding() {, +		return this.encoding;, +	}, +, +					"Could not transform to [" + ClassUtils.getShortName(result.getClass()) + "]", ex);, +			return transformAndUnmarshal(new DOMSource(node), null);, +		return transformAndUnmarshal(new SAXSource(xmlReader, inputSource), inputSource.getEncoding());, +	private Object transformAndUnmarshal(Source source, String encoding) throws IOException {, +			if (encoding != null) {, +				transformer.setOutputProperty(OutputKeys.ENCODING, encoding);, +			}, +					"Could not transform from [" + ClassUtils.getShortName(source.getClass()) + "]", ex);, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * Copyright 2002-2014 the original author or authors., +	private boolean processExternalEntities = false;, +, +, +	/**, +	 * Indicates whether external XML entities are processed when unmarshalling., +	 * <p>Default is {@code false}, meaning that external entities are not resolved., +	 * Note that processing of external entities will only be enabled/disabled when the, +	 * {@code Source} passed to {@link #unmarshal(Source)} is a {@link SAXSource} or, +	 * {@link StreamSource}. It has no effect for {@link DOMSource} or {@link StAXSource}, +	 * instances., +	 */, +	public void setProcessExternalEntities(boolean processExternalEntities) {, +		this.processExternalEntities = processExternalEntities;, +	}, +, +	/**, +	 * @return the configured value for whether XML external entities are allowed., +	 */]