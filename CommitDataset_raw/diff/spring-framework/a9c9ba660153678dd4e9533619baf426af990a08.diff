[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import java.lang.reflect.Array;, +				// Single constructor or factory method -> let's return an empty array/collection, +				// for e.g. a vararg or a non-null List/Set/Map parameter., +				if (paramType.isArray()) {, +					return Array.newInstance(paramType.getComponentType(), 0);, +				}, +				else if (CollectionFactory.isApproximableCollectionType(paramType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import java.lang.reflect.Array;, +				// Single constructor or factory method -> let's return an empty array/collection, +				// for e.g. a vararg or a non-null List/Set/Map parameter., +				if (paramType.isArray()) {, +					return Array.newInstance(paramType.getComponentType(), 0);, +				}, +				else if (CollectionFactory.isApproximableCollectionType(paramType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					new MultiElementDescriptor(descriptor, false));, +					new MultiElementDescriptor(descriptor, true));, +					new MultiElementDescriptor(descriptor, true));, +					new MultiElementDescriptor(descriptor, true));, +	private static class MultiElementDescriptor extends DependencyDescriptor {, +		public MultiElementDescriptor(DependencyDescriptor original, boolean nested) {, +			if (nested) {, +				increaseNestingLevel();, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import java.lang.reflect.Array;, +				// Single constructor or factory method -> let's return an empty array/collection, +				// for e.g. a vararg or a non-null List/Set/Map parameter., +				if (paramType.isArray()) {, +					return Array.newInstance(paramType.getComponentType(), 0);, +				}, +				else if (CollectionFactory.isApproximableCollectionType(paramType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					new MultiElementDescriptor(descriptor, false));, +					new MultiElementDescriptor(descriptor, true));, +					new MultiElementDescriptor(descriptor, true));, +					new MultiElementDescriptor(descriptor, true));, +	private static class MultiElementDescriptor extends DependencyDescriptor {, +		public MultiElementDescriptor(DependencyDescriptor original, boolean nested) {, +			if (nested) {, +				increaseNestingLevel();, +			}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import java.util.Arrays;, +import org.junit.After;, +import org.junit.Before;, +	private DefaultListableBeanFactory bf;, +, +	private AutowiredAnnotationBeanPostProcessor bpp;, +, +, +	@Before, +	public void setup() {, +		bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		bpp = new AutowiredAnnotationBeanPostProcessor();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		bf.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);, +	}, +, +	@After, +	public void close() {, +		bf.destroySingletons();, +	}, +, +, +	@Test, +	public void testIncompleteBeanDefinition() {, +	}, +, +	@Test, +	public void testSingleConstructorInjectionWithMultipleCandidatesAsRequiredVararg() {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorVarargBean.class));, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean();, +		bf.registerSingleton("nestedTestBean1", ntb1);, +		FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean();, +		bf.registerSingleton("nestedTestBean2", ntb2);, +, +		SingleConstructorVarargBean bean = (SingleConstructorVarargBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertEquals(2, bean.getNestedTestBeans().size());, +		assertSame(ntb2, bean.getNestedTestBeans().get(0));, +		assertSame(ntb1, bean.getNestedTestBeans().get(1));, +	}, +, +	@Test, +	public void testSingleConstructorInjectionWithEmptyVararg() {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorVarargBean.class));, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +, +		SingleConstructorVarargBean bean = (SingleConstructorVarargBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertNotNull(bean.getNestedTestBeans());, +		assertTrue(bean.getNestedTestBeans().isEmpty());, +	public static class SingleConstructorVarargBean {]