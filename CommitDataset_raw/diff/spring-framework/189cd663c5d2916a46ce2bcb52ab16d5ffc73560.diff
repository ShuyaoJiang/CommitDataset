[+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, + * Copyright 2002-2014 the original author or authors., +	 * @param interceptors the configured interceptor List (never {@code null}), allowing, +	 * to add further interceptors before as well as after the existing interceptors, +	 * Detect beans of type {@link MappedInterceptor} and add them to the list of mapped interceptors., +	 * <p>This is called in addition to any {@link MappedInterceptor}s that may have been provided, +	 * via {@link #setInterceptors}, by default adding all beans of type {@link MappedInterceptor}, +	 * from the current context and its ancestors. Subclasses can override and refine this policy., +	 * @param mappedInterceptors an empty list to add {@link MappedInterceptor} instances to, +	 * Initialize the specified interceptors, checking for {@link MappedInterceptor}s and, +	 * adapting {@link HandlerInterceptor}s and {@link WebRequestInterceptor}s if necessary., +					this.mappedInterceptors.add((MappedInterceptor) interceptor);, +					this.adaptedInterceptors.add(adaptInterceptor(interceptor));, +	 * Adapt the given interceptor object to the {@link HandlerInterceptor} interface., +	 * <p>By default, the supported interceptor types are {@link HandlerInterceptor}, +	 * and {@link WebRequestInterceptor}. Each given {@link WebRequestInterceptor}, +	 * will be wrapped in a {@link WebRequestHandlerInterceptorAdapter}., +	 * Return the adapted interceptors as {@link HandlerInterceptor} array., +	 * @return the array of {@link HandlerInterceptor}s, or {@code null} if none, +		int count = this.adaptedInterceptors.size();, +		return (count > 0 ? this.adaptedInterceptors.toArray(new HandlerInterceptor[count]) : null);, +		int count = this.mappedInterceptors.size();, +		return (count > 0 ? this.mappedInterceptors.toArray(new MappedInterceptor[count]) : null);, +	 * Build a {@link HandlerExecutionChain} for the given handler, including, +	 * applicable interceptors., +	 * <p>The default implementation builds a standard {@link HandlerExecutionChain}, +	 * with the given handler, the handler mapping's common interceptors, and any, +	 * {@link MappedInterceptor}s matching to the current request URL. Subclasses, +	 * may override this in order to extend/rearrange the list of interceptors., +	 * <p><b>NOTE:</b> The passed-in handler object may be a raw handler or a, +	 * pre-built {@link HandlerExecutionChain}. This method should handle those, +	 * two cases explicitly, either building a new {@link HandlerExecutionChain}, +	 * or extending the existing chain., +	 * <p>For simply adding an interceptor in a custom subclass, consider calling, +	 * {@code super.getHandlerExecutionChain(handler, request)} and invoking, +	 * {@link HandlerExecutionChain#addInterceptor} on the returned chain object., +		HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?, +				(HandlerExecutionChain) handler : new HandlerExecutionChain(handler));, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		for (MappedInterceptor mappedInterceptor : this.mappedInterceptors) {, +			if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, + * Copyright 2002-2014 the original author or authors., +	 * @param interceptors the configured interceptor List (never {@code null}), allowing, +	 * to add further interceptors before as well as after the existing interceptors, +	 * Detect beans of type {@link MappedInterceptor} and add them to the list of mapped interceptors., +	 * <p>This is called in addition to any {@link MappedInterceptor}s that may have been provided, +	 * via {@link #setInterceptors}, by default adding all beans of type {@link MappedInterceptor}, +	 * from the current context and its ancestors. Subclasses can override and refine this policy., +	 * @param mappedInterceptors an empty list to add {@link MappedInterceptor} instances to, +	 * Initialize the specified interceptors, checking for {@link MappedInterceptor}s and, +	 * adapting {@link HandlerInterceptor}s and {@link WebRequestInterceptor}s if necessary., +					this.mappedInterceptors.add((MappedInterceptor) interceptor);, +					this.adaptedInterceptors.add(adaptInterceptor(interceptor));, +	 * Adapt the given interceptor object to the {@link HandlerInterceptor} interface., +	 * <p>By default, the supported interceptor types are {@link HandlerInterceptor}, +	 * and {@link WebRequestInterceptor}. Each given {@link WebRequestInterceptor}, +	 * will be wrapped in a {@link WebRequestHandlerInterceptorAdapter}., +	 * Return the adapted interceptors as {@link HandlerInterceptor} array., +	 * @return the array of {@link HandlerInterceptor}s, or {@code null} if none, +		int count = this.adaptedInterceptors.size();, +		return (count > 0 ? this.adaptedInterceptors.toArray(new HandlerInterceptor[count]) : null);, +		int count = this.mappedInterceptors.size();, +		return (count > 0 ? this.mappedInterceptors.toArray(new MappedInterceptor[count]) : null);, +	 * Build a {@link HandlerExecutionChain} for the given handler, including, +	 * applicable interceptors., +	 * <p>The default implementation builds a standard {@link HandlerExecutionChain}, +	 * with the given handler, the handler mapping's common interceptors, and any, +	 * {@link MappedInterceptor}s matching to the current request URL. Subclasses, +	 * may override this in order to extend/rearrange the list of interceptors., +	 * <p><b>NOTE:</b> The passed-in handler object may be a raw handler or a, +	 * pre-built {@link HandlerExecutionChain}. This method should handle those, +	 * two cases explicitly, either building a new {@link HandlerExecutionChain}, +	 * or extending the existing chain., +	 * <p>For simply adding an interceptor in a custom subclass, consider calling, +	 * {@code super.getHandlerExecutionChain(handler, request)} and invoking, +	 * {@link HandlerExecutionChain#addInterceptor} on the returned chain object., +		HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?, +				(HandlerExecutionChain) handler : new HandlerExecutionChain(handler));, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		for (MappedInterceptor mappedInterceptor : this.mappedInterceptors) {, +			if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterTests.java, +, +, +		this.handlerAdapter.afterPropertiesSet();]