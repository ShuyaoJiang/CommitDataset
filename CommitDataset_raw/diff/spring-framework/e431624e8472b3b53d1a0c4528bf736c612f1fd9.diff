[+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +, +		if (result[0] > result[1]) {, +			throw new IllegalArgumentException("Invalid inverted range: '" + field +, +					"' in expression \"" + this.expression + "\"");, +		}, +	 * @since 4.3, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +, +		if (result[0] > result[1]) {, +			throw new IllegalArgumentException("Invalid inverted range: '" + field +, +					"' in expression \"" + this.expression + "\"");, +		}, +	 * @since 4.3, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java, +	@Test(expected = IllegalArgumentException.class), +	public void withInvertedMinuteRange() {, +		new CronSequenceGenerator("* 6-5 * * * *").next(new Date(2012, 6, 1, 9, 0));, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void withInvertedHourRange() {, +		new CronSequenceGenerator("* * 6-5 * * *").next(new Date(2012, 6, 1, 9, 0));, +	}, +, +	@Test, +	public void withSameMinuteRange() {, +		new CronSequenceGenerator("* 6-6 * * * *").next(new Date(2012, 6, 1, 9, 0));, +	}, +, +	@Test, +	public void withSameHourRange() {, +		new CronSequenceGenerator("* * 6-6 * * *").next(new Date(2012, 6, 1, 9, 0));, +	}, +]