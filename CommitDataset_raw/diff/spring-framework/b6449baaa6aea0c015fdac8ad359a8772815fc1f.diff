[+++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +	private final List<String[]> paramConditions;, +		this.paramConditions = Arrays.<String[]>asList(paramConditions);, +		this.actualParams = actualParams;, +	}, +, +	/**, +	 * Create a new UnsatisfiedServletRequestParameterException., +	 * @param paramConditions all sets of parameter conditions that have been violated, +	 * @param actualParams the actual parameter Map associated with the ServletRequest, +	 * @since 4.2, +	 */, +	public UnsatisfiedServletRequestParameterException(List<String[]> paramConditions,, +			Map<String, String[]> actualParams) {, +, +		super("");, +		Assert.isTrue(!CollectionUtils.isEmpty(paramConditions));, +		StringBuilder sb = new StringBuilder("Parameter conditions ");, +		int i = 0;, +		for (String[] conditions : this.paramConditions) {, +			if (i > 0) {, +				sb.append(" OR ");, +			}, +			sb.append("\"");, +			sb.append(StringUtils.arrayToDelimitedString(conditions, ", "));, +			sb.append("\"");, +			i++;, +		}, +		sb.append(" not met for actual request parameters: ");, +		sb.append(requestParameterMapToString(this.actualParams));, +		return sb.toString();, +	 * Return the parameter conditions that have been violated or the first group, +	 * in case of multiple groups., +		return this.paramConditions.get(0);, +	}, +, +	/**, +	 * Return all parameter condition groups that have been violated., +	 * @see org.springframework.web.bind.annotation.RequestMapping#params(), +	 * @since 4.2, +	 */, +	public final List<String[]> getParamConditionGroups() {, +++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +	private final List<String[]> paramConditions;, +		this.paramConditions = Arrays.<String[]>asList(paramConditions);, +		this.actualParams = actualParams;, +	}, +, +	/**, +	 * Create a new UnsatisfiedServletRequestParameterException., +	 * @param paramConditions all sets of parameter conditions that have been violated, +	 * @param actualParams the actual parameter Map associated with the ServletRequest, +	 * @since 4.2, +	 */, +	public UnsatisfiedServletRequestParameterException(List<String[]> paramConditions,, +			Map<String, String[]> actualParams) {, +, +		super("");, +		Assert.isTrue(!CollectionUtils.isEmpty(paramConditions));, +		StringBuilder sb = new StringBuilder("Parameter conditions ");, +		int i = 0;, +		for (String[] conditions : this.paramConditions) {, +			if (i > 0) {, +				sb.append(" OR ");, +			}, +			sb.append("\"");, +			sb.append(StringUtils.arrayToDelimitedString(conditions, ", "));, +			sb.append("\"");, +			i++;, +		}, +		sb.append(" not met for actual request parameters: ");, +		sb.append(requestParameterMapToString(this.actualParams));, +		return sb.toString();, +	 * Return the parameter conditions that have been violated or the first group, +	 * in case of multiple groups., +		return this.paramConditions.get(0);, +	}, +, +	/**, +	 * Return all parameter condition groups that have been violated., +	 * @see org.springframework.web.bind.annotation.RequestMapping#params(), +	 * @since 4.2, +	 */, +	public final List<String[]> getParamConditionGroups() {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., +import java.util.List;, +		List<String[]> paramConditions;, +			throw new UnsatisfiedServletRequestParameterException(paramConditions, request.getParameterMap());, +	private List<String[]> getRequestParams(HttpServletRequest request, Set<RequestMappingInfo> partialMatches) {]