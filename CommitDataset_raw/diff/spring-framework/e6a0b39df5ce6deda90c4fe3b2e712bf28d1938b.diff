[+++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +			// Keep the SSE connection open even for cold stream in order to avoid, +			// unexpected browser reconnection, +					Mono.just(FlushingDataBuffer.INSTANCE),, +					Flux.never(), +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +			// Keep the SSE connection open even for cold stream in order to avoid, +			// unexpected browser reconnection, +					Mono.just(FlushingDataBuffer.INSTANCE),, +					Flux.never(), +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +			// Keep the SSE connection open even for cold stream in order to avoid, +			// unexpected browser reconnection, +					Mono.just(FlushingDataBuffer.INSTANCE),, +					Flux.never(), +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/sse/SseEvent.java, +import org.springframework.http.codec.SseEventEncoder;, + * @see SseEventEncoder, +	 * defined in Server-Sent Events W3C recommendation., +	 * If no {@code mediaType} is defined, default {@link SseEventEncoder} will:, +	 * {@link SseEventEncoder} should be configured with the relevant encoder to be, +	 * SSE comment lines by {@link SseEventEncoder} as defined in Server-Sent Events W3C, +	 * recommendation., +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +			// Keep the SSE connection open even for cold stream in order to avoid, +			// unexpected browser reconnection, +					Mono.just(FlushingDataBuffer.INSTANCE),, +					Flux.never(), +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/sse/SseEvent.java, +import org.springframework.http.codec.SseEventEncoder;, + * @see SseEventEncoder, +	 * defined in Server-Sent Events W3C recommendation., +	 * If no {@code mediaType} is defined, default {@link SseEventEncoder} will:, +	 * {@link SseEventEncoder} should be configured with the relevant encoder to be, +	 * SSE comment lines by {@link SseEventEncoder} as defined in Server-Sent Events W3C, +	 * recommendation., +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +			// Keep the SSE connection open even for cold stream in order to avoid, +			// unexpected browser reconnection, +					Mono.just(FlushingDataBuffer.INSTANCE),, +					Flux.never(), +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/sse/SseEvent.java, +import org.springframework.http.codec.SseEventEncoder;, + * @see SseEventEncoder, +	 * defined in Server-Sent Events W3C recommendation., +	 * If no {@code mediaType} is defined, default {@link SseEventEncoder} will:, +	 * {@link SseEventEncoder} should be configured with the relevant encoder to be, +	 * SSE comment lines by {@link SseEventEncoder} as defined in Server-Sent Events W3C, +	 * recommendation., +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.core.codec.Encoder;, +import org.springframework.http.codec.SseEventEncoder;, +import org.springframework.http.converter.reactive.CodecHttpMessageConverter;, +			Encoder<Object> sseEncoder = new SseEventEncoder(Arrays.asList(new JacksonJsonEncoder()));, +			converters.add(new CodecHttpMessageConverter<>(sseEncoder));]