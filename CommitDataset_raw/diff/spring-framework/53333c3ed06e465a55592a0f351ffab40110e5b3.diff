[+++ b/org.springframework.beans/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.asm" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.asm" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, +		return getIndexedArgumentValue(index, requiredType, null);, +	}, +, +	/**, +	 * Get argument value for the given index in the constructor argument list., +	 * @param index the index in the constructor argument list, +	 * @param requiredType the type to match (can be <code>null</code> to match, +	 * untyped values only), +	 * @param requiredName the type to match (can be <code>null</code> to match, +	 * unnamed values only), +	 * @return the ValueHolder for the argument, or <code>null</code> if none set, +	 */, +	public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName) {, +		if (valueHolder != null &&, +				(valueHolder.getType() == null ||, +						(requiredType != null && requiredType.getName().equals(valueHolder.getType()))) &&, +				(valueHolder.getName() == null ||, +						(requiredName != null && requiredName.equals(valueHolder.getName())))) {, +	 * rather than matched multiple times., +	 * rather than matched multiple times., +	 * rather than matched multiple times., +	 * @param requiredType the type to match, +		return getGenericArgumentValue(requiredType, null, null);, +	}, +, +	/**, +	 * Look for a generic argument value that matches the given type., +	 * @param requiredType the type to match, +	 * @param requiredName the name to match, +	 * @return the ValueHolder for the argument, or <code>null</code> if none set, +	 */, +	public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName) {, +		return getGenericArgumentValue(requiredType, requiredName, null);, +	 * @param requiredName the type to match (can be <code>null</code> to match, +	 * unnamed values only), +	public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {, +					if (valueHolder.getName() != null) {, +						if (valueHolder.getName().equals(requiredName)) {, +							return valueHolder;, +						}, +					}, +					else if (valueHolder.getType() != null) {, +		return getArgumentValue(index, requiredType, null, null);, +	}, +, +	/**, +	 * Look for an argument value that either corresponds to the given index, +	 * in the constructor argument list or generically matches by type., +	 * @param index the index in the constructor argument list, +	 * @param requiredType the type to match, +	 * @param requiredName the name to match, +	 * @return the ValueHolder for the argument, or <code>null</code> if none set, +	 */, +	public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName) {, +		return getArgumentValue(index, requiredType, requiredName, null);, +	public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {, +		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName);, +			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders);, +		private String name;, +, +		 * Create a new ValueHolder for the given value, type and name., +		 * @param value the argument value, +		 * @param type the type of the constructor argument, +		 * @param name the name of the constructor argument, +		 */, +		public ValueHolder(Object value, String type, String name) {, +			this.value = value;, +			this.type = type;, +			this.name = name;, +		}, +, +		/**, +		 * Set the name of the constructor argument., +		 */, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		/**, +		 * Return the name of the constructor argument., +		 */, +		public String getName() {, +			return this.name;, +		}, +, +		/**, +			ValueHolder copy = new ValueHolder(this.value, this.type, this.name);, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.asm" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, +		return getIndexedArgumentValue(index, requiredType, null);, +	}, +, +	/**, +	 * Get argument value for the given index in the constructor argument list.]