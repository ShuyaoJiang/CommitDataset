[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Object customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Object unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Object customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Object unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T customCacheManager(Object arg1);, +, +	T unknownCustomCacheManager(Object arg1);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Object customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Object unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T customCacheManager(Object arg1);, +, +	T unknownCustomCacheManager(Object arg1);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Long customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Long unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Object customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Object unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +	T customCacheManager(Object arg1);, +, +	T unknownCustomCacheManager(Object arg1);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@Cacheable(value = "default", cacheManager = "customCacheManager"), +	public Long customCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +	@Cacheable(value = "default", cacheManager = "unknownBeanName"), +	public Long unknownCustomCacheManager(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +	xsi:schemaLocation=", +		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">, +	<bean id="customCacheManager" class="org.springframework.cache.support.SimpleCacheManager">, +		<property name="caches">, +			<set>, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">]