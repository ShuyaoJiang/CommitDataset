[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/SendTo.java, +* <p>This annotation may be placed class-level in which case it is inherited by, + * methods of the class., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/SendTo.java, +* <p>This annotation may be placed class-level in which case it is inherited by, + * methods of the class., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2018 the original author or authors., + * Indicates the return value of a message-handling method should be sent as a, + * {@link org.springframework.messaging.Message} to the specified destination(s), + * further prepended with <code>"/user/{username}"</code> where the user name, + * <p>Both {@code @SendTo} and {@code @SendToUser} may be used on the same method, + * in which case a message is sent to the destinations of both annotations., + *, + * <p>This annotation may be placed class-level in which case it is inherited, + * by methods of the class. At the same time, method-level {@code @SendTo} or, + * {@code @SendToUser} annotations override any such at the class level., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/SendTo.java, +* <p>This annotation may be placed class-level in which case it is inherited by, + * methods of the class., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2018 the original author or authors., + * Indicates the return value of a message-handling method should be sent as a, + * {@link org.springframework.messaging.Message} to the specified destination(s), + * further prepended with <code>"/user/{username}"</code> where the user name, + * <p>Both {@code @SendTo} and {@code @SendToUser} may be used on the same method, + * in which case a message is sent to the destinations of both annotations., + *, + * <p>This annotation may be placed class-level in which case it is inherited, + * by methods of the class. At the same time, method-level {@code @SendTo} or, + * {@code @SendToUser} annotations override any such at the class level., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +, +, +		SendToMethodReturnValueHandler sendToHandler = new SendToMethodReturnValueHandler(this.brokerTemplate, true);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/SendTo.java, +* <p>This annotation may be placed class-level in which case it is inherited by, + * methods of the class., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2018 the original author or authors., + * Indicates the return value of a message-handling method should be sent as a, + * {@link org.springframework.messaging.Message} to the specified destination(s), + * further prepended with <code>"/user/{username}"</code> where the user name, + * <p>Both {@code @SendTo} and {@code @SendToUser} may be used on the same method, + * in which case a message is sent to the destinations of both annotations., + *, + * <p>This annotation may be placed class-level in which case it is inherited, + * by methods of the class. At the same time, method-level {@code @SendTo} or, + * {@code @SendToUser} annotations override any such at the class level., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +, +, +		SendToMethodReturnValueHandler sendToHandler = new SendToMethodReturnValueHandler(this.brokerTemplate, true);, +, +++ b/src/docs/asciidoc/web/websocket.adoc, +`@MessageMapping` can be used to annotate methods to route messages based on their, +The mapping values are Ant-style path patterns by default, e.g. "/foo*", "/foo/**", +including support for template variables, e.g. "/foo/{id}", that can be referenced via, +`@DestinationVariable` method arguments. Applications can also switch to a dot-separated, +destination convention for mappings, as explained in <<websocket-stomp-destination-separator>>., +*Supported Method Arguments*, +*Return Values*, +By default, the return value from an `@MessageMapping` method is serialized to a payload, +through a matching `MessageConverter`, and sent as a `Message` to the `"brokerChannel"`, +from where it is broadcast to subscribers. The destination of the outbound message is the, +same as that of the inbound message but prefixed with `"/topic"`., +The `@SendTo` and `@SendToUser` annotations can be used to customize the destination of, +the output message. `@SendTo` is used to simply customize target destination, or to, +specify multiple destinations. `@SendToUser` is used to direct the output message only, +to the user associated with the input message, see <<websocket-stomp-user-destination>>., +`@SendTo` and `@SendToUser` may both be used at the same time on the same method, and both, +are supported at the class level in which case they act as a default for methods in the, +class. However keep in mind that _any_ method-level `@SendTo` or `@SendToUser` annotations, +override _any_ such annotations at the class level., +, +Messages may be handled asynchronously and a `@MessageMapping` method may return, +`ListenableFuture`, `CompletableFuture`, or `CompletionStage`., +, +Note that `@SendTo` and `@SendToUser` are merely a convenience that amounts to using the, +`SimpMessagingTemplate` to send messages. If necessary, for more advanced scenarios,, +`@MessageMapping` methods can fall back on using the `SimpMessagingTemplate` directly., +This can be done instead of, or possibly in addition to returning a value., +See <<websocket-stomp-handle-send>>., +`@SubscribeMapping` is used together with `@MessageMapping` to narrow the mapping to, +subscription messages. In this scenario `@MessageMapping` expresses message destination, +mappings for routing purposes, which can be done at the class or at the method level,, +while `@SubscribeMapping` narrows the mapping to subscription messages only., +Methods with `@MessageMapping` and `@SubscribeMapping` support the same, +<<websocket-stomp-message-mapping,method arguments>> as methods annotated only with, +`@MessageMapping` do. However for the return value, in the absence of `@SendTo` and, +`@SendToUser`, a message is sent directly as a reply to the subscription, via the, +"clientOutboundChannel" channel. Effectively the subscription is used as a one-time,, +request-reply message exchange with the subscription never stored. This is useful for, +loading data on startup and for initializing a front-end UI., +If an `@SubscribeMapping` method is annotated with `@SendTo` and `@SendToUser` the return, +value is sent to the `"brokerChannel"` as usual, sending a message subscribers of the, +specified destination(s).]