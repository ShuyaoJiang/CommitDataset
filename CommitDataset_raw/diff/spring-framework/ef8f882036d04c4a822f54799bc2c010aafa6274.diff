[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +	 * , +	 * @throws EvaluationException if there is a problem during evaluation, +	 * Evaluate the expression in the default standard context. If the result of the evaluation does not match (and, +	 * cannot be converted to) the expected result type then an exception will be returned., +	 * @param desiredResultType the class the caller would like the result to be, +	 * @return the evaluation result, +	 * @throws EvaluationException if there is a problem during evaluation, +	public Object getValue(Class<?> desiredResultType) throws EvaluationException;, +	 * , +	 * @param context the context in which to evaluate the expression, +	 * @throws EvaluationException if there is a problem during evaluation, +	 * @param desiredResultType the class the caller would like the result to be, +	 * @return the evaluation result, +	 * @throws EvaluationException if there is a problem during evaluation, +	public Object getValue(EvaluationContext context, Class<?> desiredResultType) throws EvaluationException;, +	 * , +	 * @param context the context in which to set the value of the expression, +	 * @param value the new value, +	 * @throws EvaluationException if there is a problem during evaluation, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method for, +	 * the given context., +	 * , +	 * @param context the context in which to evaluate the expression, +	 * @throws EvaluationException if there is a problem determining the type, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method using, +	 * the default context., +	 * , +	 * @return the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public Class getValueType() throws EvaluationException;, +, +	/**, +	 * , +	/**, +	 * Determine if an expression can be written to, i.e. setValue() can be called., +	 * , +	 * @param context the context in which the expression should be checked, +	 * @return true if the expression is writable, +	 * @throws EvaluationException if there is a problem determining if it is writable, +	 */, +	public boolean isWritable(EvaluationContext context) throws EvaluationException;]