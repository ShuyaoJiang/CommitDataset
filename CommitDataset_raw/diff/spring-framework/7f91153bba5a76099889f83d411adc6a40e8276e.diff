[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			else if (Collection.class.isAssignableFrom(type)) {, +			else if (Map.class.isAssignableFrom(type)) {, +				return CollectionFactory.createMap(type, 16);, +			}, +						growMapIfNecessary(map, convertedMapKey, indexedPropertyName, pd, i + 1);, +	@SuppressWarnings("unchecked"), +	private void growMapIfNecessary(, +			Map map, Object key, String name, PropertyDescriptor pd, int nestingLevel) {, +, +		if (!this.autoGrowNestedPaths) {, +			return;, +		}, +		if (!map.containsKey(key)) {, +			Class valueType = GenericCollectionTypeResolver.getMapValueReturnType(pd.getReadMethod(), nestingLevel);, +			if (valueType != null) {, +				map.put(key, newValue(valueType, name));, +			}, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			else if (Collection.class.isAssignableFrom(type)) {, +			else if (Map.class.isAssignableFrom(type)) {, +				return CollectionFactory.createMap(type, 16);, +			}, +						growMapIfNecessary(map, convertedMapKey, indexedPropertyName, pd, i + 1);, +	@SuppressWarnings("unchecked"), +	private void growMapIfNecessary(, +			Map map, Object key, String name, PropertyDescriptor pd, int nestingLevel) {, +, +		if (!this.autoGrowNestedPaths) {, +			return;, +		}, +		if (!map.containsKey(key)) {, +			Class valueType = GenericCollectionTypeResolver.getMapValueReturnType(pd.getReadMethod(), nestingLevel);, +			if (valueType != null) {, +				map.put(key, newValue(valueType, name));, +			}, +		}, +	}, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import java.util.Map;, +import static org.junit.Assert.*;, +/**, + * @author Keith Donald, + * @author Juergen Hoeller, + */, +	@Test, +	public void getPropertyValueAutoGrowMap() {, +		assertNotNull(wrapper.getPropertyValue("map[A]"));, +		assertEquals(1, bean.getMap().size());, +		assertTrue(bean.getMap().get("A") instanceof Bean);, +	}, +, +	@Test, +	public void setPropertyValueAutoGrowMap() {, +		wrapper.setPropertyValue("map[A].prop", "test");, +		assertEquals("test", bean.getMap().get("A").getProp());, +	}, +, +, +		private Map<String, Bean> map;, +, +		public void setNestedNoConstructor(NestedNoDefaultConstructor nestedNoConstructor) {, +		public Map<String, Bean> getMap() {, +			return map;, +		public void setMap(Map<String, Bean> map) {, +			this.map = map;, +		}, +	}, +, +, +		private NestedNoDefaultConstructor() {, +]