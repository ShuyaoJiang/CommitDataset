[+++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * @since 5.1.1, +		return (values != null ? Collections.unmodifiableList(values) : null);, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * @since 5.1.1, +		return (values != null ? Collections.unmodifiableList(values) : null);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, + * @since 5.1.1, +, +, +		return (this.headers.size() == 0);, +		return (key instanceof String && this.headers.containsKey((String) key));, +		return (value instanceof String &&, +				this.headers.stream().anyMatch(field -> field.contains((String) value)));, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		map.forEach(this::put);, +, +, +			return this.key;, +, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * @since 5.1.1, +		return (values != null ? Collections.unmodifiableList(values) : null);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, + * @since 5.1.1, +, +, +		return (this.headers.size() == 0);, +		return (key instanceof String && this.headers.containsKey((String) key));, +		return (value instanceof String &&, +				this.headers.stream().anyMatch(field -> field.contains((String) value)));, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		map.forEach(this::put);, +, +, +			return this.key;, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, +import org.springframework.util.Assert;, + * @author Brian Clozel, +, +		Assert.notNull(getServletPath(), "Servlet path is not initialized");, +, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * @since 5.1.1, +		return (values != null ? Collections.unmodifiableList(values) : null);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, + * @since 5.1.1, +, +, +		return (this.headers.size() == 0);, +		return (key instanceof String && this.headers.containsKey((String) key));, +		return (value instanceof String &&, +				this.headers.stream().anyMatch(field -> field.contains((String) value)));, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		map.forEach(this::put);, +, +, +			return this.key;, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, +import org.springframework.util.Assert;, + * @author Brian Clozel, +, +		Assert.notNull(getServletPath(), "Servlet path is not initialized");, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java, + * @since 5.1.1, +, +, +		return (key instanceof String && this.headers.contains((String) key));, +		return (value instanceof String &&, +						.anyMatch(entry -> value.equals(entry.getValue())));, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		map.forEach(this.headers::add);, +, +, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * @since 5.1.1, +		return (values != null ? Collections.unmodifiableList(values) : null);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, + * @since 5.1.1, +, +, +		return (this.headers.size() == 0);, +		return (key instanceof String && this.headers.containsKey((String) key));, +		return (value instanceof String &&, +				this.headers.stream().anyMatch(field -> field.contains((String) value)));, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		map.forEach(this::put);, +, +, +			return this.key;, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, +import org.springframework.util.Assert;, + * @author Brian Clozel, +, +		Assert.notNull(getServletPath(), "Servlet path is not initialized");, +]