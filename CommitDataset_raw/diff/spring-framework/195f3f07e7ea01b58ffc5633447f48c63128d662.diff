[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +import org.springframework.http.MediaType;, +	@Test // SPR-17082, +	public void handleResponseEntityWithExistingResponseHeaders() throws Exception {, +		ResponseEntity<Void> value = ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).build();, +		MethodParameter returnType = on(TestController.class).resolveReturnType(entity(Void.class));, +		HandlerResult result = handlerResult(value, returnType);, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/path"));, +		exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_PLAIN);, +		this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5));, +, +		assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode());, +		assertEquals(1, exchange.getResponse().getHeaders().size());, +		assertEquals(MediaType.APPLICATION_JSON, exchange.getResponse().getHeaders().getContentType());, +		assertResponseBodyIsEmpty(exchange);, +	}, +, +]