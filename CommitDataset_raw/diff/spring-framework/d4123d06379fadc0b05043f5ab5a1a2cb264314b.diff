[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +		final Class<?> targetClass = AopUtils.getTargetClass(bean);, +					if (AopUtils.isJdkDynamicProxy(bean)) {, +						try {, +							// found a @Scheduled method on the target class for this JDK proxy -> is it, +							// also present on the proxy itself?, +							method = bean.getClass().getMethod(method.getName(), method.getParameterTypes());, +						} catch (SecurityException ex) {, +							ReflectionUtils.handleReflectionException(ex);, +						} catch (NoSuchMethodException ex) {, +							throw new IllegalStateException(String.format(, +									"@Scheduled method '%s' found on bean target class '%s', " +, +									"but not found in any interface(s) for bean JDK proxy. Either " +, +									"pull the method up to an interface or switch to subclass (CGLIB) " +, +									"proxies by setting proxy-target-class/proxyTargetClass " +, +									"attribute to 'true'", method.getName(), targetClass.getSimpleName()));, +						}, +					}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +		final Class<?> targetClass = AopUtils.getTargetClass(bean);, +					if (AopUtils.isJdkDynamicProxy(bean)) {, +						try {, +							// found a @Scheduled method on the target class for this JDK proxy -> is it, +							// also present on the proxy itself?, +							method = bean.getClass().getMethod(method.getName(), method.getParameterTypes());, +						} catch (SecurityException ex) {, +							ReflectionUtils.handleReflectionException(ex);, +						} catch (NoSuchMethodException ex) {, +							throw new IllegalStateException(String.format(, +									"@Scheduled method '%s' found on bean target class '%s', " +, +									"but not found in any interface(s) for bean JDK proxy. Either " +, +									"pull the method up to an interface or switch to subclass (CGLIB) " +, +									"proxies by setting proxy-target-class/proxyTargetClass " +, +									"attribute to 'true'", method.getName(), targetClass.getSimpleName()));, +						}, +					}, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.annotation;, +, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.replay;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Test;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;, +import org.springframework.dao.support.PersistenceExceptionTranslator;, +import org.springframework.scheduling.annotation.EnableScheduling;, +import org.springframework.stereotype.Repository;, +import org.springframework.transaction.CallCountingTransactionManager;, +import org.springframework.transaction.PlatformTransactionManager;, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.Transactional;, +, +/**, + * Integration tests cornering bug SPR-8651, which revealed that @Scheduled methods may, + * not work well with beans that have already been proxied for other reasons such, + * as @Transactional or @Async processing., + *, + * @author Chris Beams, + * @since 3.1, + */, +public class ScheduledAndTransactionalAnnotationIntegrationTests {, +, +	@Test, +	public void failsWhenJdkProxyAndScheduledMethodNotPresentOnInterface() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigA.class);, +		try {, +			ctx.refresh();, +			fail("expected exception");, +		} catch (BeanCreationException ex) {, +			assertTrue(ex.getRootCause().getMessage().startsWith("@Scheduled method 'scheduled' found"));, +		}]