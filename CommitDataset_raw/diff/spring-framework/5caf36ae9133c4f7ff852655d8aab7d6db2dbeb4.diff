[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			taskSchedulerDef.getPropertyValues().add("poolSize", Runtime.getRuntime().availableProcessors());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			taskSchedulerDef.getPropertyValues().add("poolSize", Runtime.getRuntime().availableProcessors());, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +		ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) defaultSockJsService.getTaskScheduler();, +		assertEquals(Runtime.getRuntime().availableProcessors(), scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			taskSchedulerDef.getPropertyValues().add("poolSize", Runtime.getRuntime().availableProcessors());, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +		ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) defaultSockJsService.getTaskScheduler();, +		assertEquals(Runtime.getRuntime().availableProcessors(), scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupportTests.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +	@Test, +	public void messageBrokerSockJsTaskScheduler() {, +		ThreadPoolTaskScheduler taskScheduler =, +				this.config.getBean("messageBrokerSockJsTaskScheduler", ThreadPoolTaskScheduler.class);, +, +		assertEquals(Runtime.getRuntime().availableProcessors(),, +				taskScheduler.getScheduledThreadPoolExecutor().getCorePoolSize());, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			taskSchedulerDef.getPropertyValues().add("poolSize", Runtime.getRuntime().availableProcessors());, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +		ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) defaultSockJsService.getTaskScheduler();, +		assertEquals(Runtime.getRuntime().availableProcessors(), scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupportTests.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +	@Test, +	public void messageBrokerSockJsTaskScheduler() {, +		ThreadPoolTaskScheduler taskScheduler =, +				this.config.getBean("messageBrokerSockJsTaskScheduler", ThreadPoolTaskScheduler.class);, +, +		assertEquals(Runtime.getRuntime().availableProcessors(),, +				taskScheduler.getScheduledThreadPoolExecutor().getCorePoolSize());, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompWebSocketIntegrationTests.java, +			assertTrue(controller.latch.await(10, TimeUnit.SECONDS));]