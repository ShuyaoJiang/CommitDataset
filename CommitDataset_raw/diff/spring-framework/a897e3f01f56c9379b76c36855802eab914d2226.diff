[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashSet;, +import java.util.Set;, +	private final Log logger = LogFactory.getLog(getClass());, +				if (logger.isDebugEnabled()) {, +					logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]");, +				}, +				if (logger.isDebugEnabled()) {, +					logger.debug("Successfully started bean '" + beanName + "'");, +				}, +	private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final String beanName,, +			final CountDownLatch latch, final Set<String> countDownBeanNames) {, +, +				doStop(lifecycleBeans, dependentBean, latch, countDownBeanNames);, +			try {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop");, +						}, +						countDownBeanNames.add(beanName);, +								countDownBeanNames.remove(beanName);, +								if (logger.isDebugEnabled()) {, +									logger.debug("Bean '" + beanName + "' completed its stop procedure");, +								}, +						if (logger.isDebugEnabled()) {, +							logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]");, +						}, +						if (logger.isDebugEnabled()) {, +							logger.debug("Successfully stopped bean '" + beanName + "'");, +						}, +			}, +			catch (Throwable ex) {, +				if (logger.isWarnEnabled()) {, +					logger.warn("Failed to stop bean '" + beanName + "'", ex);, +				}, +			}, +			if (this.members.isEmpty()) {, +			if (logger.isInfoEnabled()) {, +				logger.info("Starting beans in phase " + this.phase);, +			}, +			Collections.sort(this.members);, +			for (LifecycleGroupMember member : this.members) {, +				if (this.lifecycleBeans.containsKey(member.name)) {, +					doStart(this.lifecycleBeans, member.name);, +			if (this.members.isEmpty()) {, +			if (logger.isInfoEnabled()) {, +				logger.info("Stopping beans in phase " + this.phase);, +			}, +			Collections.sort(this.members, Collections.reverseOrder());, +			CountDownLatch latch = new CountDownLatch(this.smartMemberCount);, +			Set<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<String>());, +			for (LifecycleGroupMember member : this.members) {, +				if (this.lifecycleBeans.containsKey(member.name)) {, +					doStop(this.lifecycleBeans, member.name, latch, countDownBeanNames);, +				if (latch.getCount() > 0 && !countDownBeanNames.isEmpty() && logger.isWarnEnabled()) {, +					logger.warn("Failed to shut down " + countDownBeanNames.size() + " bean" +, +							(countDownBeanNames.size() > 1 ? "s" : "") + " with phase value " +, +							this.phase + " within timeout of " + this.timeout + ": " + countDownBeanNames);, +			catch (InterruptedException ex) {]