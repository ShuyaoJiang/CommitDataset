[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			ReflectionHelper.convertAllArguments(m.getParameterTypes(), m.isVarArgs(), converter, functionArgs);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			ReflectionHelper.convertAllArguments(m.getParameterTypes(), m.isVarArgs(), converter, functionArgs);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +import org.springframework.util.Assert;, +		Assert.isTrue(expectedArgTypes.length==suppliedArgTypes.length, "Expected argument types and supplied argument types should be arrays of same length");, +, +	public static ArgumentsMatchInfo compareArgumentsVarargs(, +		Assert.isTrue(expectedArgTypes!=null && expectedArgTypes.length>0, "Expected arguments must at least include one array (the vargargs parameter)");, +		Assert.isTrue(expectedArgTypes[expectedArgTypes.length-1].isArray(), "Final expected argument should be array type (the varargs parameter)");, +		, +					} else if (typeConverter.canConvert(suppliedArg, varargsParameterType)) {, +	/**, +	 * Takes an input set of argument values and, following the positions specified in the int array, it converts, +	 * them to the types specified as the required parameter types.  The arguments are converted 'in-place' in the, +	 * input array., +	 * @param requiredParameterTypes the types that the caller would like to have, +	 * @param isVarargs whether the requiredParameterTypes is a varargs list, +	 * @param converter the type converter to use for attempting conversions, +	 * @param argumentsRequiringConversion details which of the input arguments need conversion, +	 * @param arguments the actual arguments that need conversion, +	 * @throws EvaluationException if a problem occurs during conversion, +	 */, +	public static void convertArguments(Class[] requiredParameterTypes, boolean isVarargs, TypeConverter converter,, +			int[] argumentsRequiringConversion, Object[] arguments) throws EvaluationException {, +		 , +		Assert.notNull(argumentsRequiringConversion,"should not be called if no conversions required");, +		Assert.notNull(arguments,"should not be called if no conversions required");, +		, +			Assert.isTrue(requiredParameterTypes[requiredParameterTypes.length-1].isArray(),"if varargs then last parameter type must be array");, +			varargsType = requiredParameterTypes[requiredParameterTypes.length - 1].getComponentType();, +		for (Integer argPosition : argumentsRequiringConversion) {, +			if (isVarargs && argPosition >= (requiredParameterTypes.length - 1)) {, +			} else {, +				targetType = requiredParameterTypes[argPosition];, +	/**, +	 * Convert a supplied set of arguments into the requested types.  If the parameterTypes are related to , +	 * a varargs method then the final entry in the parameterTypes array is going to be an array itself whose, +	 * component type should be used as the conversion target for extraneous arguments. (For example, if the, +	 * parameterTypes are {Integer, String[]} and the input arguments are {Integer, boolean, float} then both, +	 * the boolean and float must be converted to strings).  This method does not repackage the arguments, +	 * into a form suitable for the varargs invocation, +	 * @param parameterTypes the types to be converted to, +	 * @param isVarargs whether parameterTypes relates to a varargs method, +	 * @param converter the converter to use for type conversions, +	 * @param arguments the arguments to convert to the requested parameter types, +	 * @throws SpelException if there is a problem with conversion, +	 */, +	public static void convertAllArguments(Class[] parameterTypes, boolean isVarargs, TypeConverter converter,, +			Object[] arguments) throws SpelException {, +, +		Assert.notNull(arguments,"should not be called if nothing to convert");, +			Assert.isTrue(parameterTypes[parameterTypes.length-1].isArray(),"if varargs then last parameter type must be array");, +					if (converter == null) {, +						throw new SpelException(SpelMessages.TYPE_CONVERSION_ERROR, arguments[i].getClass().getName(),targetType);, +					}, +			} catch (EvaluationException ex) {, +					throw (SpelException)ex;, +				} else {, +					throw new SpelException(ex, SpelMessages.TYPE_CONVERSION_ERROR,arguments[i].getClass().getName(),targetType);, +	 * @param requiredParameterTypes the types of the parameters for the invocation, +	public static Object[] setupArgumentsForVarargsInvocation(Class[] requiredParameterTypes, Object... args) {, +		int parameterCount = requiredParameterTypes.length;, +		int argumentCount = args.length;, +		if (parameterCount != args.length || requiredParameterTypes[parameterCount - 1] != (args[argumentCount - 1] == null ? null : args[argumentCount - 1].getClass())) {, +			if (argumentCount >= parameterCount) {, +				arraySize = argumentCount - (parameterCount - 1);, +			Object[] repackagedArguments = (Object[]) Array.newInstance(requiredParameterTypes[parameterCount - 1].getComponentType(),, +				repackagedArguments[i] = args[parameterCount + i - 1];, +			Object[] newArgs = new Object[parameterCount];, +		// An exact match is where the parameter types exactly match what the method/constructor being invoked is expecting, +		EXACT, , +		// A close match is where the parameter types either exactly match or are assignment compatible with the method/constructor being invoked, +		CLOSE, , +		// A conversion match is where the type converter must be used to transform some of the parameter types, +		REQUIRES_CONVERSION, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			ReflectionHelper.convertAllArguments(m.getParameterTypes(), m.isVarArgs(), converter, functionArgs);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +import org.springframework.util.Assert;, +		Assert.isTrue(expectedArgTypes.length==suppliedArgTypes.length, "Expected argument types and supplied argument types should be arrays of same length");, +, +	public static ArgumentsMatchInfo compareArgumentsVarargs(, +		Assert.isTrue(expectedArgTypes!=null && expectedArgTypes.length>0, "Expected arguments must at least include one array (the vargargs parameter)");, +		Assert.isTrue(expectedArgTypes[expectedArgTypes.length-1].isArray(), "Final expected argument should be array type (the varargs parameter)");, +		, +					} else if (typeConverter.canConvert(suppliedArg, varargsParameterType)) {, +	/**, +	 * Takes an input set of argument values and, following the positions specified in the int array, it converts, +	 * them to the types specified as the required parameter types.  The arguments are converted 'in-place' in the, +	 * input array., +	 * @param requiredParameterTypes the types that the caller would like to have, +	 * @param isVarargs whether the requiredParameterTypes is a varargs list, +	 * @param converter the type converter to use for attempting conversions, +	 * @param argumentsRequiringConversion details which of the input arguments need conversion, +	 * @param arguments the actual arguments that need conversion, +	 * @throws EvaluationException if a problem occurs during conversion, +	 */, +	public static void convertArguments(Class[] requiredParameterTypes, boolean isVarargs, TypeConverter converter,]