[+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java, + * Copyright 2002-2011 the original author or authors., +import java.io.UnsupportedEncodingException;, +import java.util.Collections;, + *, + * <p>Used for testing the web framework; only necessary for testing, + * applications when testing custom JSP tags., + *, + * <p>Note: Expects initialization via the constructor rather than via the, + * <code>PageContext.initialize</code> method. Does not support writing to, + * a JspWriter, request dispatching, and <code>handlePageException</code> calls., +	 * @param servletContext the ServletContext that the JSP page runs in, +	 * (only necessary when actually accessing the ServletContext), +	 * @param request the current HttpServletRequest, +	 * (only necessary when actually accessing the request), +	 * @param response the current HttpServletResponse, +	 * (only necessary when actually writing to the response), +	 * @param servletConfig the ServletConfig (hardly ever accessed from within a tag), +	public MockPageContext(ServletContext servletContext, HttpServletRequest request,, +			HttpServletResponse response, ServletConfig servletConfig) {, +, +	public void initialize(, +			Servlet servlet, ServletRequest request, ServletResponse response,, +			String errorPageURL, boolean needsSession, int bufferSize, boolean autoFlush) {, +		return Collections.enumeration(this.attributes.keySet());, +	public void forward(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).forward(this.request, this.response);, +	public void include(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);, +	public void include(String path, boolean flush) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);, +		if (flush) {, +			this.response.flushBuffer();, +		}, +	}, +, +	public byte[] getContentAsByteArray() {, +		Assert.isTrue(this.response instanceof MockHttpServletResponse);, +		return ((MockHttpServletResponse) this.response).getContentAsByteArray();, +	}, +, +	public String getContentAsString() throws UnsupportedEncodingException {, +		Assert.isTrue(this.response instanceof MockHttpServletResponse);, +		return ((MockHttpServletResponse) this.response).getContentAsString();, +		throw new ServletException("Page exception", ex);, +		throw new ServletException("Page exception", ex);, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java, + * Copyright 2002-2011 the original author or authors., +import java.io.UnsupportedEncodingException;, +import java.util.Collections;, + *, + * <p>Used for testing the web framework; only necessary for testing, + * applications when testing custom JSP tags., + *, + * <p>Note: Expects initialization via the constructor rather than via the, + * <code>PageContext.initialize</code> method. Does not support writing to, + * a JspWriter, request dispatching, and <code>handlePageException</code> calls., +	 * @param servletContext the ServletContext that the JSP page runs in, +	 * (only necessary when actually accessing the ServletContext), +	 * @param request the current HttpServletRequest, +	 * (only necessary when actually accessing the request), +	 * @param response the current HttpServletResponse, +	 * (only necessary when actually writing to the response), +	 * @param servletConfig the ServletConfig (hardly ever accessed from within a tag), +	public MockPageContext(ServletContext servletContext, HttpServletRequest request,, +			HttpServletResponse response, ServletConfig servletConfig) {, +, +	public void initialize(, +			Servlet servlet, ServletRequest request, ServletResponse response,, +			String errorPageURL, boolean needsSession, int bufferSize, boolean autoFlush) {, +		return Collections.enumeration(this.attributes.keySet());, +	public void forward(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).forward(this.request, this.response);, +	public void include(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);, +	public void include(String path, boolean flush) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);, +		if (flush) {, +			this.response.flushBuffer();, +		}, +	}, +, +	public byte[] getContentAsByteArray() {, +		Assert.isTrue(this.response instanceof MockHttpServletResponse);, +		return ((MockHttpServletResponse) this.response).getContentAsByteArray();, +	}, +, +	public String getContentAsString() throws UnsupportedEncodingException {, +		Assert.isTrue(this.response instanceof MockHttpServletResponse);, +		return ((MockHttpServletResponse) this.response).getContentAsString();, +		throw new ServletException("Page exception", ex);, +		throw new ServletException("Page exception", ex);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java, +import java.io.UnsupportedEncodingException;, +	public void forward(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).forward(this.request, this.response);, +	public void include(String path) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);, +	public void include(String path, boolean flush) throws ServletException, IOException {, +		this.request.getRequestDispatcher(path).include(this.request, this.response);]