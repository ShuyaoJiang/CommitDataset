[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, +	/**, +	 * Set if this BeanWrapper should attempt to "auto-grow" a nested path that contains a null value., +	 * <p>If true, a null path location will be populated with a default object value and traversed, +	 * instead of resulting in a {@link NullValueInNestedPathException}. Turning this flag on also, +	 * enables auto-growth of collection elements when an index that is out of bounds is accessed., +	 * <p>Default is false., +	 */, +	void setAutoGrowNestedPaths(boolean autoGrowNestedPaths);, +, +	/**, +	 * Return whether "auto-growing" of nested paths has been activated., +	 */, +	boolean isAutoGrowNestedPaths();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, +	/**, +	 * Set if this BeanWrapper should attempt to "auto-grow" a nested path that contains a null value., +	 * <p>If true, a null path location will be populated with a default object value and traversed, +	 * instead of resulting in a {@link NullValueInNestedPathException}. Turning this flag on also, +	 * enables auto-growth of collection elements when an index that is out of bounds is accessed., +	 * <p>Default is false., +	 */, +	void setAutoGrowNestedPaths(boolean autoGrowNestedPaths);, +, +	/**, +	 * Return whether "auto-growing" of nested paths has been activated., +	 */, +	boolean isAutoGrowNestedPaths();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	private boolean autoGrowNestedPaths = false;, +, +	public boolean isAutoGrowNestedPaths() {, +		return this.autoGrowNestedPaths;, +	}, +, +			if (this.autoGrowNestedPaths) {, +			}, +			else {, +				}, +				else {, +			}, +			else {, +				}, +				else {, +		}, +		catch (Exception ex) {, +			throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + name, "Could not instantiate property type [" + type.getName() + "] to auto-grow nested property path: " + ex);, +					if (this.autoGrowNestedPaths) {, +					}, +					else {, +		if (!this.autoGrowNestedPaths) {, +		if (!this.autoGrowNestedPaths) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, +	/**, +	 * Set if this BeanWrapper should attempt to "auto-grow" a nested path that contains a null value., +	 * <p>If true, a null path location will be populated with a default object value and traversed, +	 * instead of resulting in a {@link NullValueInNestedPathException}. Turning this flag on also, +	 * enables auto-growth of collection elements when an index that is out of bounds is accessed., +	 * <p>Default is false., +	 */, +	void setAutoGrowNestedPaths(boolean autoGrowNestedPaths);, +, +	/**, +	 * Return whether "auto-growing" of nested paths has been activated., +	 */, +	boolean isAutoGrowNestedPaths();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	private boolean autoGrowNestedPaths = false;, +, +	public boolean isAutoGrowNestedPaths() {, +		return this.autoGrowNestedPaths;, +	}, +, +			if (this.autoGrowNestedPaths) {, +			}, +			else {, +				}, +				else {, +			}, +			else {, +				}, +				else {, +		}, +		catch (Exception ex) {, +			throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + name, "Could not instantiate property type [" + type.getName() + "] to auto-grow nested property path: " + ex);, +					if (this.autoGrowNestedPaths) {, +					}, +					else {, +		if (!this.autoGrowNestedPaths) {, +		if (!this.autoGrowNestedPaths) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import java.util.Arrays;, +				if (requiredType.isArray()) {, +				if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) {, +					convertedValue = Array.get(convertedValue, 0);, +				}, +				if (String.class.equals(requiredType) && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) {]