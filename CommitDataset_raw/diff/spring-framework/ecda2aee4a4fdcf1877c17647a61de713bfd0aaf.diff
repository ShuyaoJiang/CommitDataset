[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, + * Copyright 2002-2010 the original author or authors., +		private static Map<Class, AspectJAnnotationType> annotationTypes =, +				new HashMap<Class, AspectJAnnotationType>();, +, +		private final AspectJAnnotationType annotationType;, +		private final String pointcutExpression;, +, +		private final String argumentNames;, +, +		public AspectJAnnotation(A annotation) {, +			this.annotation = annotation;, +			this.annotationType = determineAnnotationType(annotation);, +				this.pointcutExpression = resolveExpression(annotation);, +				this.argumentNames = (String) annotation.getClass().getMethod("argNames").invoke(annotation);, +				throw new IllegalArgumentException(annotation + " cannot be an AspectJ annotation", ex);, +		private AspectJAnnotationType determineAnnotationType(A annotation) {, +			for (Class type : annotationTypes.keySet()) {, +				if (type.isInstance(annotation)) {, +					return annotationTypes.get(type);, +				}, +			}, +			throw new IllegalStateException("Unknown annotation type: " + annotation.toString());, +		}, +, +		private String resolveExpression(A annotation) throws Exception {, +					method = annotation.getClass().getDeclaredMethod(methodName);, +					String candidate = (String) method.invoke(annotation);, +			return this.pointcutExpression;, +		public String getArgumentNames() {, +			return this.argumentNames;, +			StringTokenizer strTok = new StringTokenizer(annotation.getArgumentNames(), ",");]