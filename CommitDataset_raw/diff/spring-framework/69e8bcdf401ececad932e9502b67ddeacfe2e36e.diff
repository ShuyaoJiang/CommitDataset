[+++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +  // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility)., +        return encodeUtf8(stringValue, i, 65535);, +  final ByteVector encodeUtf8(final String stringValue, final int offset, final int maxByteLength) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +  // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility)., +        return encodeUtf8(stringValue, i, 65535);, +  final ByteVector encodeUtf8(final String stringValue, final int offset, final int maxByteLength) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +  // DontCheck(MemberName): can't be renamed (for backward binary compatibility)., +            readUtf(currentAttributeOffset, attributeLength, new char[attributeLength]);, +      readModuleAttributes(, +          classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass);, +   * Reads the Module, ModulePackages and ModuleMainClass attributes and visit them., +  private void readModuleAttributes(, +            signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),, +      String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer);, +            int numPairs = readInt(currentOffset + 4);, +            int[] keys = new int[numPairs];, +            Label[] values = new Label[numPairs];, +            for (int i = 0; i < numPairs; ++i) {, +    int numLocal = 0;, +        locals[numLocal++] = Opcodes.UNINITIALIZED_THIS;, +        locals[numLocal++] = readClass(header + 2, context.charBuffer);, +          locals[numLocal++] = Opcodes.INTEGER;, +          locals[numLocal++] = Opcodes.FLOAT;, +          locals[numLocal++] = Opcodes.LONG;, +          locals[numLocal++] = Opcodes.DOUBLE;, +          locals[numLocal++] =, +          locals[numLocal++] =, +          context.currentFrameLocalCount = numLocal;, +  /**, +   * Returns the offset in {@link #b} of the first ClassFile's 'attributes' array field entry., +   *, +   * @return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry., +   */, +  // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility)., +    return readUtf(constantPoolEntryIndex, charBuffer);, +  final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {, +        readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer);, +  private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {, +++ b/spring-core/src/main/java/org/springframework/asm/ByteVector.java, +  // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility)., +        return encodeUtf8(stringValue, i, 65535);, +  final ByteVector encodeUtf8(final String stringValue, final int offset, final int maxByteLength) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +      if (charValue >= 0x0001 && charValue <= 0x007F) {, +      } else if (charValue <= 0x07FF) {, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +  // DontCheck(MemberName): can't be renamed (for backward binary compatibility)., +            readUtf(currentAttributeOffset, attributeLength, new char[attributeLength]);, +      readModuleAttributes(, +          classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass);, +   * Reads the Module, ModulePackages and ModuleMainClass attributes and visit them., +  private void readModuleAttributes(, +            signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),, +      String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer);, +            int numPairs = readInt(currentOffset + 4);, +            int[] keys = new int[numPairs];, +            Label[] values = new Label[numPairs];, +            for (int i = 0; i < numPairs; ++i) {, +    int numLocal = 0;, +        locals[numLocal++] = Opcodes.UNINITIALIZED_THIS;, +        locals[numLocal++] = readClass(header + 2, context.charBuffer);, +          locals[numLocal++] = Opcodes.INTEGER;, +          locals[numLocal++] = Opcodes.FLOAT;, +          locals[numLocal++] = Opcodes.LONG;, +          locals[numLocal++] = Opcodes.DOUBLE;, +          locals[numLocal++] =, +          locals[numLocal++] =, +          context.currentFrameLocalCount = numLocal;, +  /**, +   * Returns the offset in {@link #b} of the first ClassFile's 'attributes' array field entry., +   *, +   * @return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry., +   */, +  // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility)., +    return readUtf(constantPoolEntryIndex, charBuffer);, +  final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {, +        readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer);, +  private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {, +++ b/spring-core/src/main/java/org/springframework/asm/ClassTooLargeException.java, +  /**, +   * Returns the internal name of the class., +   *, +   * @return the internal name of the class., +   */, +  /**, +   * Returns the number of constant pool items of the class., +   *, +   * @return the number of constant pool items of the class.]