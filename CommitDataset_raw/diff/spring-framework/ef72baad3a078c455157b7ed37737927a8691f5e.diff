[+++ b/src/docs/asciidoc/core/core-aop.adoc, +configuration that you might want to change independently). With the XML style, it is, +arguably clearer from your configuration which aspects are present in the system., +knowledge within a system. When using the XML style, the knowledge of how a requirement, +is implemented is split across the declaration of the backing bean class and the XML in, +the configuration file. When you use the @AspectJ style, this information is encapsulated, +in a single module: the aspect. Secondly, the XML style is slightly more limited in what, +it can express than the @AspectJ style: Only the "`singleton`" aspect instantiation model, +is supported, and it is not possible to combine named pointcuts declared in XML., +For example, in the @AspectJ style you can write something like the following:]