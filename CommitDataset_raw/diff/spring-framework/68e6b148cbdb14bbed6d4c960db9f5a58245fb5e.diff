[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.http.HttpStatus;, +	private boolean relativeRedirects;, +	 * Use this property to enable relative redirects as explained in and also, +	 * using the same response wrapper as {@link RelativeRedirectFilter} does., +	 * Or if both filters are used, only one will wrap the response., +	 * <p>By default, if this property is set to false, in which case calls to, +	 * {@link HttpServletResponse#sendRedirect(String)} are overridden in order, +	 * to turn relative into absolute URLs since (which Servlet containers are, +	 * also required to do) also taking forwarded headers into consideration., +	 * @param relativeRedirects whether to use relative redirects, +	 * @since 5.0, +	public void setRelativeRedirects(boolean relativeRedirects) {, +		this.relativeRedirects = relativeRedirects;, +, +			HttpServletResponse theResponse = this.relativeRedirects ?, +					RelativeRedirectResponseWrapper.wrapIfNecessary(response, HttpStatus.SEE_OTHER) :, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.http.HttpStatus;, +	private boolean relativeRedirects;, +	 * Use this property to enable relative redirects as explained in and also, +	 * using the same response wrapper as {@link RelativeRedirectFilter} does., +	 * Or if both filters are used, only one will wrap the response., +	 * <p>By default, if this property is set to false, in which case calls to, +	 * {@link HttpServletResponse#sendRedirect(String)} are overridden in order, +	 * to turn relative into absolute URLs since (which Servlet containers are, +	 * also required to do) also taking forwarded headers into consideration., +	 * @param relativeRedirects whether to use relative redirects, +	 * @since 5.0, +	public void setRelativeRedirects(boolean relativeRedirects) {, +		this.relativeRedirects = relativeRedirects;, +, +			HttpServletResponse theResponse = this.relativeRedirects ?, +					RelativeRedirectResponseWrapper.wrapIfNecessary(response, HttpStatus.SEE_OTHER) :, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, + * Overrides {@link HttpServletResponse#sendRedirect(String)} and handles it by, + * setting the HTTP status and "Location" headers. This keeps the Servlet, + * container from re-writing relative redirect URLs and instead follows the, + * recommendation in <a href="https://tools.ietf.org/html/rfc7231#section-7.1.2">, + * RFC 7231 Section 7.1.2</a>., + *, + * <p><strong>Note:</strong> while relative redirects are more efficient they, + * may not work with reverse proxies under some configurations., + * @author Rossen Stoyanchev, + * @since 5.0, +, +	private HttpStatus redirectStatus = HttpStatus.SEE_OTHER;, +, +	 * Set the default HTTP Status to use for redirects., +	 * <p>By default this is {@link HttpStatus#SEE_OTHER}., +	 * @param status the 3xx redirect status to use, +	public void setRedirectStatus(HttpStatus status) {, +		Assert.notNull(status, "HttpStatus is required");, +		Assert.isTrue(status.is3xxRedirection(), "Not a redirect status: " + status);, +		this.redirectStatus = status;, +, +	/**, +	 * Return the configured redirect status., +	 */, +	public HttpStatus getRedirectStatus() {, +		return this.redirectStatus;, +, +	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,, +			FilterChain filterChain) throws ServletException, IOException {, +, +		response = RelativeRedirectResponseWrapper.wrapIfNecessary(response, this.redirectStatus);, +		filterChain.doFilter(request, response);, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.http.HttpStatus;, +	private boolean relativeRedirects;, +	 * Use this property to enable relative redirects as explained in and also, +	 * using the same response wrapper as {@link RelativeRedirectFilter} does., +	 * Or if both filters are used, only one will wrap the response., +	 * <p>By default, if this property is set to false, in which case calls to, +	 * {@link HttpServletResponse#sendRedirect(String)} are overridden in order, +	 * to turn relative into absolute URLs since (which Servlet containers are, +	 * also required to do) also taking forwarded headers into consideration., +	 * @param relativeRedirects whether to use relative redirects, +	 * @since 5.0, +	public void setRelativeRedirects(boolean relativeRedirects) {, +		this.relativeRedirects = relativeRedirects;, +, +			HttpServletResponse theResponse = this.relativeRedirects ?, +					RelativeRedirectResponseWrapper.wrapIfNecessary(response, HttpStatus.SEE_OTHER) :, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, + * Overrides {@link HttpServletResponse#sendRedirect(String)} and handles it by, + * setting the HTTP status and "Location" headers. This keeps the Servlet, + * container from re-writing relative redirect URLs and instead follows the, + * recommendation in <a href="https://tools.ietf.org/html/rfc7231#section-7.1.2">, + * RFC 7231 Section 7.1.2</a>., + *, + * <p><strong>Note:</strong> while relative redirects are more efficient they, + * may not work with reverse proxies under some configurations., + * @author Rossen Stoyanchev, + * @since 5.0, +, +	private HttpStatus redirectStatus = HttpStatus.SEE_OTHER;, +, +	 * Set the default HTTP Status to use for redirects., +	 * <p>By default this is {@link HttpStatus#SEE_OTHER}.]