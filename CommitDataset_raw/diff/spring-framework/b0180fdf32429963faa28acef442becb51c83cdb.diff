[+++ b/org.springframework.core/src/main/java/org/springframework/util/MediaType.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.nio.charset.Charset;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import org.springframework.core.CollectionFactory;, +, +/**, + * Represents an Internet Media Type, as defined in the HTTP specification., + *, + * <p>Consists of a {@linkplain #getType() type}, + * and a {@linkplain #getSubtype() subtype}. Also has functionality to parse media types from a string using, + * {@link #parseMediaType(String)}, or multiple comma-separated media types using {@link #parseMediaTypes(String)}., + *, + * @author Arjen Poutsma, + * @since 3.0, + * @see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7">HTTP 1.1</a>, + */, +public final class MediaType implements Comparable<MediaType> {, +, +	public static final MediaType ALL = new MediaType();, +, +	private static final String PARAM_QUALITY_FACTORY = "q";, +, +	private static final String PARAM_CHARSET = "charset";, +, +	private static final String WILDCARD_TYPE = "*";, +, +	private final String type;, +, +	private final String subtype;, +, +	private final Map<String, String> parameters;, +, +	/**, +	 * Private constructor that creates a new {@link MediaType} representing <code>&#42;&#47;&#42;</code>., +	 *, +	 * @see #ALL, +	 */, +	private MediaType() {, +		this(WILDCARD_TYPE, WILDCARD_TYPE);, +	}, +, +	/**, +	 * Create a new {@link MediaType} for the given primary type. The {@linkplain #getSubtype() subtype} is set to, +	 * <code>&#42;</code>, parameters empty., +	 *, +	 * @param type the primary type, +	 */, +	public MediaType(String type) {, +		this(type, WILDCARD_TYPE);, +	}, +, +	/**, +	 * Create a new {@link MediaType} for the given primary type and subtype. The parameters are empty., +	 *, +	 * @param type	the primary type, +	 * @param subtype the subtype, +	 */, +	public MediaType(String type, String subtype) {, +		this(type, subtype, Collections.<String, String>emptyMap());, +	}, +, +	/**, +	 * Creates a new {@link MediaType} for the given type, subtype, and character set., +	 *, +	 * @param type	the primary type, +	 * @param subtype the subtype, +	 * @param charSet the character set, +	 */, +	public MediaType(String type, String subtype, Charset charSet) {, +		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.toString()));, +	}, +, +	/**, +	 * Creates a new {@link MediaType} for the given type, subtype, and parameters., +	 *]