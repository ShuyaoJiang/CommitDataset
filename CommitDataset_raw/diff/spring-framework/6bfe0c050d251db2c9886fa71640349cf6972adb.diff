[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.util.ArrayList;, +import java.util.List;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.BDDMockito.any;, +import static org.mockito.BDDMockito.eq;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.BDDMockito.isA;, +import static org.mockito.BDDMockito.mock;, +import static org.mockito.BDDMockito.reset;, +import static org.mockito.BDDMockito.verify;, +import static org.springframework.web.servlet.HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		converters.add(messageConverter);, +		processor = new HttpEntityMethodProcessor(converters);, +		Method handle1 = getClass().getMethod("handle1", HttpEntity.class, ResponseEntity.class,, +				Integer.TYPE, RequestEntity.class);, +, +		ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK);, +		initStringMessageConversion(accepted);, +		ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK);, +		ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK);, +		ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK);, +		ResponseEntity<String> returnValue = new ResponseEntity<>("Body", HttpStatus.ACCEPTED);, +	public void handleReturnValueResponseHeaderNoBody() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>(headers, HttpStatus.ACCEPTED);, +	public void handleReturnValueResponseHeaderAndBody() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.ACCEPTED);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueLastModified() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueEtag() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueETagAndLastModified() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueNotModified() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.NOT_MODIFIED);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueChangedETagAndLastModified() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValuePostRequestWithIfNotModified() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueGetIfNoneMatchWildcard() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueIfNoneMatchIfMatch() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	public void handleReturnValueIfNoneMatchIfUnmodifiedSince() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.OK);, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +	private void initStringMessageConversion(MediaType accepted) {, +		given(messageConverter.canWrite(String.class, null)).willReturn(true);, +		given(messageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		given(messageConverter.canWrite(String.class, accepted)).willReturn(true);, +	}, +, +	private void assertResponseNotModified() {, +		assertTrue(mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.NOT_MODIFIED.value(), servletResponse.getStatus());, +		assertEquals(0, servletResponse.getContentAsByteArray().length);, +	}, +, +		verify(messageConverter).write(eq(body), eq(MediaType.TEXT_PLAIN), outputMessage.capture());]