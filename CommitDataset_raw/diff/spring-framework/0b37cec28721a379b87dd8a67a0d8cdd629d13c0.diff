[+++ b/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java, +	private transient TransactionSynchronizationRegistry transactionSynchronizationRegistry;, +, +	private boolean autodetectTransactionSynchronizationRegistry = true;, +	 * Return the JTA TransactionManager that this transaction manager uses, if any., +	 * Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference., +	 * <p>A TransactionSynchronizationRegistry allows for interposed registration, +	 * of transaction synchronizations, as an alternative to the regular registration, +	 * methods on the JTA TransactionManager API. Also, it is an official part of the, +	 * Java EE 5 platform, in contrast to the JTA TransactionManager itself., +	 * <p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and, +	 * also from the UserTransaction/TransactionManager object if implemented there as well., +	 * @see #setTransactionSynchronizationRegistryName, +	 * @see #setAutodetectTransactionSynchronizationRegistry, +	 */, +	public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {, +		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry;, +	}, +, +	/**, +	 * Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any., +	 */, +	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {, +		return this.transactionSynchronizationRegistry;, +	}, +, +	/**, +	 * Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object, +	 * at its default JDNI location ("java:comp/TransactionSynchronizationRegistry"), +	 * if the UserTransaction has also been obtained from JNDI, and also whether, +	 * to fall back to checking whether the JTA UserTransaction/TransactionManager, +	 * object implements the JTA TransactionSynchronizationRegistry interface too., +	 * <p>Default is "true", autodetecting the TransactionSynchronizationRegistry, +	 * unless it has been specified explicitly. Can be turned off to delegate, +	 * synchronization registration to the regular JTA TransactionManager API., +	 */, +	public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {, +		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry;, +	}, +, +	/**, +			// Fetch JTA UserTransaction from JNDI, if necessary., +				if (this.userTransaction == null && this.autodetectUserTransaction) {, +					// Autodetect UserTransaction at its default JNDI location., +					this.userTransaction = findUserTransaction();, +				}, +			// Fetch JTA TransactionManager from JNDI, if necessary., +					// Autodetect UserTransaction object that implements TransactionManager,, +					// and check fallback JNDI locations otherwise., +			}, +		}, +		if (this.transactionSynchronizationRegistry == null) {, +			// Fetch JTA TransactionSynchronizationRegistry from JNDI, if necessary., +				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {, +					// Autodetect in JNDI if applicable, and check UserTransaction/TransactionManager, +					// object that implements TransactionSynchronizationRegistry otherwise., +		}]