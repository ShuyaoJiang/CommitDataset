[+++ b/spring-context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.beans.SimpleTypeConverter;, +import org.springframework.beans.TypeConverter;, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +public class JndiObjectFactoryBean extends JndiObjectLocator, +		implements FactoryBean<Object>, BeanFactoryAware, BeanClassLoaderAware {, +	private Class<?>[] proxyInterfaces;, +	private ConfigurableBeanFactory beanFactory;, +, +	public void setProxyInterface(Class<?> proxyInterface) {, +		this.proxyInterfaces = new Class<?>[] {proxyInterface};, +	public void setProxyInterfaces(Class<?>... proxyInterfaces) {, +	 * If specified together with {@link #setExpectedType}, the specified value, +	 * needs to be either of that type or convertible to it., +	 * @see ConfigurableBeanFactory#getTypeConverter(), +	 * @see SimpleTypeConverter, +	public void setBeanFactory(BeanFactory beanFactory) {, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			// Just optional - for getting a specifically configured TypeConverter if needed., +			// We'll simply fall back to a SimpleTypeConverter if no specific one available., +			this.beanFactory = (ConfigurableBeanFactory) beanFactory;, +		}, +	}, +, +	@Override, +				TypeConverter converter = (this.beanFactory != null ?, +						this.beanFactory.getTypeConverter() : new SimpleTypeConverter());, +				try {, +					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType());, +				}, +				catch (TypeMismatchException ex) {, +					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +, +							this.defaultObject.getClass().getName() + "] is not of expected type [" +, +							getExpectedType().getName() + "] and cannot be converted either", ex);, +				}, +	protected Class<?> createCompositeInterface(Class<?>[] interfaces) {, +				Class<?> targetClass = targetSource.getTargetClass();, +				Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader);, +				for (Class<?> ifc : ifcs) {, +++ b/spring-context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.beans.SimpleTypeConverter;, +import org.springframework.beans.TypeConverter;, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +public class JndiObjectFactoryBean extends JndiObjectLocator, +		implements FactoryBean<Object>, BeanFactoryAware, BeanClassLoaderAware {, +	private Class<?>[] proxyInterfaces;, +	private ConfigurableBeanFactory beanFactory;, +, +	public void setProxyInterface(Class<?> proxyInterface) {, +		this.proxyInterfaces = new Class<?>[] {proxyInterface};, +	public void setProxyInterfaces(Class<?>... proxyInterfaces) {, +	 * If specified together with {@link #setExpectedType}, the specified value, +	 * needs to be either of that type or convertible to it., +	 * @see ConfigurableBeanFactory#getTypeConverter(), +	 * @see SimpleTypeConverter, +	public void setBeanFactory(BeanFactory beanFactory) {, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			// Just optional - for getting a specifically configured TypeConverter if needed., +			// We'll simply fall back to a SimpleTypeConverter if no specific one available., +			this.beanFactory = (ConfigurableBeanFactory) beanFactory;, +		}, +	}, +, +	@Override, +				TypeConverter converter = (this.beanFactory != null ?, +						this.beanFactory.getTypeConverter() : new SimpleTypeConverter());, +				try {, +					this.defaultObject = converter.convertIfNecessary(this.defaultObject, getExpectedType());, +				}, +				catch (TypeMismatchException ex) {, +					throw new IllegalArgumentException("Default object [" + this.defaultObject + "] of type [" +, +							this.defaultObject.getClass().getName() + "] is not of expected type [" +, +							getExpectedType().getName() + "] and cannot be converted either", ex);, +				}, +	protected Class<?> createCompositeInterface(Class<?>[] interfaces) {, +				Class<?> targetClass = targetSource.getTargetClass();, +				Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader);, +				for (Class<?> ifc : ifcs) {, +++ b/spring-context/src/test/java/org/springframework/jndi/JndiObjectFactoryBeanTests.java, +, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +		jof.setJndiTemplate(new ExpectedLookupTemplate("foo", new Object()));, +			assertTrue(ex.getMessage().contains("java.lang.String"));, +		jof.setJndiTemplate(new ExpectedLookupTemplate("foo", ""));, +		jof.setJndiTemplate(new ExpectedLookupTemplate("foo", ""));, +	public void testLookupWithDefaultObjectAndExpectedTypeConversion() throws Exception {, +		JndiObjectFactoryBean jof = new JndiObjectFactoryBean();, +		jof.setJndiTemplate(new ExpectedLookupTemplate("foo", ""));, +		jof.setJndiName("myFoo");, +		jof.setExpectedType(Integer.class);, +		jof.setDefaultObject("5");, +		jof.afterPropertiesSet();]