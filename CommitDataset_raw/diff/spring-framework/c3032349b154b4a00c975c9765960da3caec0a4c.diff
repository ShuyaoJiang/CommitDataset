[+++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import java.lang.reflect.Constructor;, +import com.thoughtworks.xstream.mapper.MapperWrapper;, +import org.springframework.util.Assert;, +	private Class<?>[] mapperWrappers;, +, +	 * Set one or more custom XStream {@link MapperWrapper} classes., +	 * Each of those classes needs to have a constructor with a single argument, +	 * of type {@link Mapper} or {@link MapperWrapper}., +	 * @since 4.0, +	 */, +	public void setMapperWrappers(Class<?>... mapperWrappers) {, +		this.mapperWrappers = mapperWrappers;, +	}, +, +	/**, +	 * Activate XStream's autodetection mode., +	 * <p><b>Note</b>: Autodetection implies that the XStream instance is being configured while, +				this.beanClassLoader, this.mapper, this.converterLookup, this.converterRegistry) {, +			@Override, +			protected MapperWrapper wrapMapper(MapperWrapper next) {, +				MapperWrapper mapperToWrap = next;, +				if (mapperWrappers != null) {, +					for (Class<?> mapperWrapper : mapperWrappers) {, +						Assert.isAssignable(MapperWrapper.class, mapperWrapper);, +						Constructor<?> ctor;, +						try {, +							ctor = mapperWrapper.getConstructor(Mapper.class);, +						}, +						catch (NoSuchMethodException ex) {, +							try {, +								ctor = mapperWrapper.getConstructor(MapperWrapper.class);, +							}, +							catch (NoSuchMethodException ex2) {, +								throw new IllegalStateException("No appropriate MapperWrapper constructor found: " + mapperWrapper);, +							}, +						}, +						try {, +							mapperToWrap = (MapperWrapper) ctor.newInstance(mapperToWrap);, +						}, +						catch (Exception ex) {, +							throw new IllegalStateException("Failed to construct MapperWrapper: " + mapperWrapper);, +						}, +					}, +				}, +				return mapperToWrap;, +			}, +		};, +						Class<?> clazz = ClassUtils.forName(className, this.beanClassLoader);, +								"'useAttributesFor' takes Map<String, Class> when using a map key of type String");, +						List listValue = (List) entry.getValue();, +						for (Object element : listValue) {, +							if (element instanceof String) {, +								xstream.useAttributeFor(key, (String) element);, +						throw new IllegalArgumentException("'useAttributesFor' property takes either Map<Class, String> " +, +								"or Map<Class, List<String>> when using a map key of type Class");, +					throw new IllegalArgumentException(, +			Class<?> type;, +				type = (Class<?>) value;, +				throw new IllegalArgumentException("Unknown value [" + value + "] - expected String or Class");, +	public boolean supports(Class<?> clazz) {]