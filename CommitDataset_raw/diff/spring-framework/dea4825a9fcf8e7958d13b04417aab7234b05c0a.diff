[+++ b/src/docs/asciidoc/appendix.adoc, +:toc: left, +:toclevels: 2, +<<data-access.adoc#orm,ORM>> chapter., +For the currently recommended usage patterns for Hibernate see, +<<data-access.adoc#orm-hibernate,the Hibernate section>>., +<<integration.adoc#jms-receiving-async-message-listener-adapter,MessageListenerAdapter's>> are used in, +conjunction with Spring's <<integration.adoc#jms-mdp,message listener containers>> to support, +documentation on <<integration.adoc#jms-tx,JMS Transaction Management>> for more information on this, +AOP support described in the <<core.adoc#aop,AOP>> chapter, but when working with existing, +* Specify whether to use CGLIB (see below and also <<core.adoc#aop-pfb-proxy-types,, +JDK- and CGLIB-based proxies>>)., +  will be created (but see also below, +  <<core.adoc#aop-pfb-proxy-types,JDK- and CGLIB-based proxies>>)., +  proxy for the target class will be used (but see also below, +  <<core.adoc#aop-pfb-proxy-types,JDK- and CGLIB-based proxies>>)., +to be applied. An example of using this feature can be found in, +<<core.adoc#aop-global-advisors,Using 'global' advisors>>., +<<core.adoc#beans-child-bean-definitions,previously>>, so that it may not actually ever be, +loaded from the supplied <<core.adoc#resources, `Resource`>> location)., +entitled <<integration.adoc#dynamic-language,Dynamic language support>>., +Please do consult that chapter for full details on this support and the `lang` tags themselves., +<<integration.adoc#jms-mdp,MessageListenerContainers>>. These tags are detailed in the, +section of the <<integration.adoc#jms,JMS chapter>> entitled <<integration.adoc#jms-namespace,, +JMS namespace support>>. Please do consult that chapter for full details on this support, +and the `jms` tags themselves., +for transactions. These tags are covered in the chapter entitled, +<<data-access.adoc#transaction,Transaction Management>>., +These tags are comprehensively covered in the chapter entitled <<core.adoc#aop,, +Aspect Oriented Programming with Spring>>., +specified properties file (as a <<core.adoc#resources,Spring resource location>>). This element is, +a convenience mechanism that sets up a<<core.adoc#beans-factory-placeholderconfigurer,, +classes: Spring's <<core.adoc#beans-required-annotation, `@Required`>> and, +<<core.adoc#beans-annotation-config, `@Autowired`>>, as well as JSR 250's `@PostConstruct`,, +<<data-access.adoc#transaction-declarative-annotations, `@Transactional`>> annotation. Use the, +<<data-access.adoc#tx-decl-explained, `<tx:annotation-driven/>`>> element for that purpose., +This element is detailed in <<core.adoc#beans-annotation-config,, +Annotation-based container configuration>>., +This element is detailed in <<core.adoc#aop-aj-ltw,, +Load-time weaving with AspectJ in the Spring Framework>>., +This element is detailed in <<core.adoc#aop-atconfigurable,, +Using AspectJ to dependency inject domain objects with Spring>>., +This element is detailed in <<integration.adoc#jmx-context-mbeanexport,, +Configuring annotation based MBean export>>., +existing data source. These tags are documented in, +<<data-access.adoc#jdbc-embedded-database-support,Embedded database support>>, +and <<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>> respectively., +<<integration.adoc#cache-annotation-enable,Enable caching annotations>> and, +<<integration.adoc#cache-declarative-xml,Declarative XML-based caching>> for details., +in <<core.adoc#beans-factory-properties-detailed,Dependencies and configuration in detail>>, +(and indeed in that entire <<core.adoc#beans,chapter>>)., +  the<<core.adoc#beans-factory-scopes,out-of-the-box scopes Spring 2.0 supports>>. We'll start by, +++ b/src/docs/asciidoc/appendix.adoc, +:toc: left, +:toclevels: 2, +<<data-access.adoc#orm,ORM>> chapter., +For the currently recommended usage patterns for Hibernate see, +<<data-access.adoc#orm-hibernate,the Hibernate section>>., +<<integration.adoc#jms-receiving-async-message-listener-adapter,MessageListenerAdapter's>> are used in, +conjunction with Spring's <<integration.adoc#jms-mdp,message listener containers>> to support, +documentation on <<integration.adoc#jms-tx,JMS Transaction Management>> for more information on this, +AOP support described in the <<core.adoc#aop,AOP>> chapter, but when working with existing, +* Specify whether to use CGLIB (see below and also <<core.adoc#aop-pfb-proxy-types,, +JDK- and CGLIB-based proxies>>)., +  will be created (but see also below, +  <<core.adoc#aop-pfb-proxy-types,JDK- and CGLIB-based proxies>>)., +  proxy for the target class will be used (but see also below, +  <<core.adoc#aop-pfb-proxy-types,JDK- and CGLIB-based proxies>>)., +to be applied. An example of using this feature can be found in, +<<core.adoc#aop-global-advisors,Using 'global' advisors>>., +<<core.adoc#beans-child-bean-definitions,previously>>, so that it may not actually ever be, +loaded from the supplied <<core.adoc#resources, `Resource`>> location)., +entitled <<integration.adoc#dynamic-language,Dynamic language support>>., +Please do consult that chapter for full details on this support and the `lang` tags themselves., +<<integration.adoc#jms-mdp,MessageListenerContainers>>. These tags are detailed in the, +section of the <<integration.adoc#jms,JMS chapter>> entitled <<integration.adoc#jms-namespace,, +JMS namespace support>>. Please do consult that chapter for full details on this support, +and the `jms` tags themselves., +for transactions. These tags are covered in the chapter entitled, +<<data-access.adoc#transaction,Transaction Management>>., +These tags are comprehensively covered in the chapter entitled <<core.adoc#aop,, +Aspect Oriented Programming with Spring>>., +specified properties file (as a <<core.adoc#resources,Spring resource location>>). This element is, +a convenience mechanism that sets up a<<core.adoc#beans-factory-placeholderconfigurer,, +classes: Spring's <<core.adoc#beans-required-annotation, `@Required`>> and, +<<core.adoc#beans-annotation-config, `@Autowired`>>, as well as JSR 250's `@PostConstruct`,, +<<data-access.adoc#transaction-declarative-annotations, `@Transactional`>> annotation. Use the, +<<data-access.adoc#tx-decl-explained, `<tx:annotation-driven/>`>> element for that purpose., +This element is detailed in <<core.adoc#beans-annotation-config,, +Annotation-based container configuration>>., +This element is detailed in <<core.adoc#aop-aj-ltw,, +Load-time weaving with AspectJ in the Spring Framework>>., +This element is detailed in <<core.adoc#aop-atconfigurable,, +Using AspectJ to dependency inject domain objects with Spring>>., +This element is detailed in <<integration.adoc#jmx-context-mbeanexport,, +Configuring annotation based MBean export>>., +existing data source. These tags are documented in, +<<data-access.adoc#jdbc-embedded-database-support,Embedded database support>>, +and <<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>> respectively., +<<integration.adoc#cache-annotation-enable,Enable caching annotations>> and]