[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2014 the original author or authors., +		if ("Content-Type".equalsIgnoreCase(name)) {, +			List<MediaType> mediaTypes = MediaType.parseMediaTypes(StringUtils.arrayToCommaDelimitedString(values));, +			this.contentType = MediaType.toString(mediaTypes);, +		}, +		MediaType mediaType = httpHeaders.getContentType();, +		if (mediaType != null) {, +			this.contentType = mediaType.toString();, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2014 the original author or authors., +		if ("Content-Type".equalsIgnoreCase(name)) {, +			List<MediaType> mediaTypes = MediaType.parseMediaTypes(StringUtils.arrayToCommaDelimitedString(values));, +			this.contentType = MediaType.toString(mediaTypes);, +		}, +		MediaType mediaType = httpHeaders.getContentType();, +		if (mediaType != null) {, +			this.contentType = mediaType.toString();, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java, + * Copyright 2002-2014 the original author or authors., +import javax.print.attribute.standard.Media;, +	// SPR-11308, +, +	@Test, +	public void contentTypeViaHeader() throws Exception {, +		this.builder.header("Content-Type", MediaType.TEXT_HTML_VALUE);, +		MockHttpServletRequest request = this.builder.buildRequest(this.servletContext);, +		String contentType = request.getContentType();, +, +		assertEquals("text/html", contentType);, +	}, +, +	// SPR-11308, +, +	@Test, +	public void contentTypeViaMultipleHeaderValues() throws Exception {, +		this.builder.header("Content-Type", MediaType.TEXT_HTML_VALUE, MediaType.ALL_VALUE);, +		MockHttpServletRequest request = this.builder.buildRequest(this.servletContext);, +		String contentType = request.getContentType();, +, +		assertEquals("text/html, */*", contentType);, +	}, +]