[+++ b/spring-framework-reference/src/transaction.xml, +      Obviously the use of global transactions would limit any potential reuse, +      of application code, as JTA is normally only available in an application, +      server environment.</para>, +        configuration file, rather than your code, need to change.</para>, +    be similar to the local JDBC example shown previously and thus is not, +    shown in the following example.</para>, +      EE container, then it should be non-transactional because the Spring, +    <para>If you are using Hibernate and Java EE container-managed JTA, +      <para>If you use JTA , then your transaction manager definition will, +      look the same regardless of what data access technology you use, be it, +      JDBC, Hibernate JPA or any other supported technology. This is due to, +      the fact that JTA transactions are global transactions, which can enlist, +      any transactional resource.</para>, +      transaction- aware factory beans or proxies for managing the native, +      resource factories. These transaction-aware solutions internally handle, +      native ORM API or take a <emphasis>template</emphasis> approach for JDBC, +      access by using the <classname>JdbcTemplate</classname>. These solutions, +      are detailed in subsequent chapters of this reference documentation.<!--If this approach is preferred, why not give examples here as you do with less desirable approaches? At least provide--><!--x-refs? Also is it correct to refer to APIs, then give classes as examples? Should this be reworded?, +        Hibernate or JDO by simply adjusting the configuration files.<!--Indicate what kind of config changes? Changes to what  , +TR: OK AS IS. images don't show up in the editor, but they do show up in the generated docs-->, +      Framework's transaction infrastructure code will catch any unhandled, +      stack, and make a determination whether to mark the transaction for, +      rollback.<!--I changed to *can be configured* because next sentence says it does not do this by default in all cases. , +TR: REVISED, PLS REVIEW. I changed it to *in its default configuration*BT: I STILL DON'T GET IT. PRECEDING SENTENCE AND FOLLOWING --><!--SENTENCE SEEM CONTRADICTORY. TR: REVISED AGAIN, PLS REVIEW.--></para>, +      <para>In its default configuration, the Spring Framework's transaction, +      infrastructure code <emphasis>only</emphasis> marks a transaction for, +      rollback in the case of runtime, unchecked exceptions; that is, when the, +      thrown exception is an instance or subclass of, +      method do <emphasis>not</emphasis> result in rollback in the default, +      configuration.<!--I revised preceding because it says ONLY first case is rolled back by default, but then says Errors are also marked by default., +TR: OK AS IS. Errors aren't thrown by application code, only checked or unchecked exceptions are. So the Errors part is just clarifying that , +if the underlying application server infrastructure throws an Error the transaction will be rolled back.--></para>, +      rollback, including checked exceptions. The following XML snippet, +      demonstrates how you configure rollback for a checked,, +      application-specific <exceptionname>Exception</exceptionname>, +      type.</para>, +TR: OK AS IS.it's not defined what this something is. could be code written by the user or could be an , +TR: OK AS IS. "it" refers to <tx:annotation-driven/>-->See <xref, +      transactional settings for a method. <!--Do you need to clarify what *most derived* location means? Lowest level? TR: OK AS IS. following sentence explains it-->In, +        name + "." + <!--Meaning of symbols is unclear. TR: OK AS IS. means concatenation and it would be clear to any programmer reading the docs-->method, +      <!--If you mean this code produces actions above, say that. TR: REVISED, PLS REVIEW.added 'discussed above'-->The, +TR: REVISED, PLS REVIEW. changed to 'desired'; seems clear that the desired order is profiling first followed by transactional aspect-->You, +      based on your choice of transactional technologies and requirements.<!--for *what* requirements? Identify *their* TR: REVISED, PLS REVIEW.Clarified this a bit.-->]