[+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +					.switchIfEmpty(Mono.defer(() -> {, +						headers.setContentLength(0);, +						return message.setComplete().then(Mono.empty());, +					})), +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +					.switchIfEmpty(Mono.defer(() -> {, +						headers.setContentLength(0);, +						return message.setComplete().then(Mono.empty());, +					})), +++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java, +import static java.nio.charset.StandardCharsets.*;, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.core.ResolvableType.*;, +import static org.springframework.http.MediaType.*;, +		StepVerifier.create(this.response.getBody()).expectComplete();, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +					.switchIfEmpty(Mono.defer(() -> {, +						headers.setContentLength(0);, +						return message.setComplete().then(Mono.empty());, +					})), +++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java, +import static java.nio.charset.StandardCharsets.*;, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.core.ResolvableType.*;, +import static org.springframework.http.MediaType.*;, +		StepVerifier.create(this.response.getBody()).expectComplete();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	@Test // SPR-17506, +	public void personResponseBodyWithEmptyMono() throws Exception {, +		ResponseEntity<Person> responseEntity = performGet("/person-response/mono-empty", JSON, Person.class);, +		assertEquals(0, responseEntity.getHeaders().getContentLength());, +		assertNull(responseEntity.getBody());, +, +		// As we're on the same connection, the 2nd request proves server response handling, +		// did complete after the 1st request.., +		responseEntity = performGet("/person-response/mono-empty", JSON, Person.class);, +		assertEquals(0, responseEntity.getHeaders().getContentLength());, +		assertNull(responseEntity.getBody());, +	}, +, +		@GetMapping("/mono-empty"), +		public Mono<Person> getMonoEmpty() {, +			return Mono.empty();, +		}, +]