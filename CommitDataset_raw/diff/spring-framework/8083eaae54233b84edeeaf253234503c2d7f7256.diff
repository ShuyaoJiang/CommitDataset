[+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, + * {@link HttpMessageWriter} for writing a {@code MultiValueMap<String, String>}, + * as HTML form data, i.e. {@code "application/x-www-form-urlencoded"}, to the, + * body of a request., + *, + * <p>Note that unless the media type is explicitly set to, + * {@link MediaType#APPLICATION_FORM_URLENCODED}, the {@link #canWrite} method, + * will need generic type information to confirm the target map has String values., + * This is because a MultiValueMap with non-String values can be used to write, + * multipart requests., + *, + * <p>To support both form data and multipart requests, consider using, + * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter}, + * configured with this writer as the fallback for writing plain form data., + * @see org.springframework.http.codec.multipart.MultipartHttpMessageWriter, +	private static final List<MediaType> MEDIA_TYPES =, +			Collections.singletonList(MediaType.APPLICATION_FORM_URLENCODED);, +, +	public List<MediaType> getWritableMediaTypes() {, +		return MEDIA_TYPES;, +	}, +, +, +	@Override, +		Class<?> rawClass = elementType.getRawClass();, +		if (rawClass == null || !MultiValueMap.class.isAssignableFrom(rawClass)) {, +			return false;, +		}, +		if (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) {, +			// Optimistically, any MultiValueMap with or without generics, +			return true;, +		}, +		if (mediaType == null) {, +			// Only String-based MultiValueMap, +			return MULTIVALUE_TYPE.isAssignableFrom(elementType);, +		}, +		return false;, +		return Mono.from(inputStream).flatMap(form -> {, +					String value = serializeForm(form, charset);, +	private String serializeForm(MultiValueMap<String, String> form, Charset charset) {, +				for (Iterator<?> values = form.get(name).iterator(); values.hasNext();) {, +					Object rawValue = values.next();, +					if (rawValue != null) {, +						Assert.isInstanceOf(String.class, rawValue,, +								"FormHttpMessageWriter supports String values only. " +, +										"Use MultipartHttpMessageWriter for multipart requests.");, +						builder.append(URLEncoder.encode((String) rawValue, charset.name()));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, + * {@link HttpMessageWriter} for writing a {@code MultiValueMap<String, String>}, + * as HTML form data, i.e. {@code "application/x-www-form-urlencoded"}, to the, + * body of a request., + *, + * <p>Note that unless the media type is explicitly set to, + * {@link MediaType#APPLICATION_FORM_URLENCODED}, the {@link #canWrite} method, + * will need generic type information to confirm the target map has String values., + * This is because a MultiValueMap with non-String values can be used to write, + * multipart requests., + *, + * <p>To support both form data and multipart requests, consider using, + * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter}, + * configured with this writer as the fallback for writing plain form data., + * @see org.springframework.http.codec.multipart.MultipartHttpMessageWriter, +	private static final List<MediaType> MEDIA_TYPES =, +			Collections.singletonList(MediaType.APPLICATION_FORM_URLENCODED);, +, +	public List<MediaType> getWritableMediaTypes() {, +		return MEDIA_TYPES;, +	}, +, +, +	@Override, +		Class<?> rawClass = elementType.getRawClass();, +		if (rawClass == null || !MultiValueMap.class.isAssignableFrom(rawClass)) {, +			return false;, +		}, +		if (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) {, +			// Optimistically, any MultiValueMap with or without generics, +			return true;, +		}, +		if (mediaType == null) {, +			// Only String-based MultiValueMap, +			return MULTIVALUE_TYPE.isAssignableFrom(elementType);, +		}, +		return false;, +		return Mono.from(inputStream).flatMap(form -> {, +					String value = serializeForm(form, charset);, +	private String serializeForm(MultiValueMap<String, String> form, Charset charset) {, +				for (Iterator<?> values = form.get(name).iterator(); values.hasNext();) {, +					Object rawValue = values.next();, +					if (rawValue != null) {, +						Assert.isInstanceOf(String.class, rawValue,, +								"FormHttpMessageWriter supports String values only. " +, +										"Use MultipartHttpMessageWriter for multipart requests.");, +						builder.append(URLEncoder.encode((String) rawValue, charset.name()));, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import java.util.ArrayList;, +import org.springframework.http.codec.FormHttpMessageWriter;, + * {@link HttpMessageWriter} for writing a {@code MultiValueMap<String, ?>}, + * as multipart form data, i.e. {@code "multipart/form-data"}, to the body, + * of a request.]