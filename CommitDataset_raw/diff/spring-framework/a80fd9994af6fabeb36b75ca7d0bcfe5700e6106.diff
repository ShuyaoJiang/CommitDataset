[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, +	 * Return the JpaVendorAdapter implementation for this EntityManagerFactory,, +	 * or {@code null} if not known., +	public void afterPropertiesSet() throws PersistenceException {, +		JpaVendorAdapter jpaVendorAdapter = getJpaVendorAdapter();, +		if (jpaVendorAdapter != null) {, +				this.persistenceProvider = jpaVendorAdapter.getPersistenceProvider();, +			PersistenceUnitInfo pui = getPersistenceUnitInfo();, +			Map<String, ?> vendorPropertyMap = (pui != null ? jpaVendorAdapter.getJpaPropertyMap(pui) :, +					jpaVendorAdapter.getJpaPropertyMap());, +			if (!CollectionUtils.isEmpty(vendorPropertyMap)) {, +				this.entityManagerFactoryInterface = jpaVendorAdapter.getEntityManagerFactoryInterface();, +				this.entityManagerInterface = jpaVendorAdapter.getEntityManagerInterface();, +				this.jpaDialect = jpaVendorAdapter.getJpaDialect();, +		AsyncTaskExecutor bootstrapExecutor = getBootstrapExecutor();, +		if (bootstrapExecutor != null) {, +			this.nativeEntityManagerFactoryFuture = bootstrapExecutor.submit(this::buildNativeEntityManagerFactory);, +		JpaVendorAdapter jpaVendorAdapter = getJpaVendorAdapter();, +		if (jpaVendorAdapter != null) {, +			jpaVendorAdapter.postProcessEntityManagerFactory(emf);, +		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface;, +		if (entityManagerFactoryInterface != null) {, +			ifcs.add(entityManagerFactoryInterface);, +			if (entityManagerFactoryInterface != null) {, +				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +, +		JpaDialect jpaDialect = getJpaDialect();, +		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, +	 * Return the JpaVendorAdapter implementation for this EntityManagerFactory,, +	 * or {@code null} if not known., +	public void afterPropertiesSet() throws PersistenceException {, +		JpaVendorAdapter jpaVendorAdapter = getJpaVendorAdapter();, +		if (jpaVendorAdapter != null) {, +				this.persistenceProvider = jpaVendorAdapter.getPersistenceProvider();, +			PersistenceUnitInfo pui = getPersistenceUnitInfo();, +			Map<String, ?> vendorPropertyMap = (pui != null ? jpaVendorAdapter.getJpaPropertyMap(pui) :, +					jpaVendorAdapter.getJpaPropertyMap());, +			if (!CollectionUtils.isEmpty(vendorPropertyMap)) {, +				this.entityManagerFactoryInterface = jpaVendorAdapter.getEntityManagerFactoryInterface();, +				this.entityManagerInterface = jpaVendorAdapter.getEntityManagerInterface();, +				this.jpaDialect = jpaVendorAdapter.getJpaDialect();, +		AsyncTaskExecutor bootstrapExecutor = getBootstrapExecutor();, +		if (bootstrapExecutor != null) {, +			this.nativeEntityManagerFactoryFuture = bootstrapExecutor.submit(this::buildNativeEntityManagerFactory);, +		JpaVendorAdapter jpaVendorAdapter = getJpaVendorAdapter();, +		if (jpaVendorAdapter != null) {, +			jpaVendorAdapter.postProcessEntityManagerFactory(emf);, +		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface;, +		if (entityManagerFactoryInterface != null) {, +			ifcs.add(entityManagerFactoryInterface);, +			if (entityManagerFactoryInterface != null) {, +				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +, +		JpaDialect jpaDialect = getJpaDialect();, +		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaVendorAdapter.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collections;, +import javax.persistence.spi.PersistenceUnitInfo;, +	default String getPersistenceProviderRootPackage() {, +		return null;, +	}, +, +	/**, +	 * Return a Map of vendor-specific JPA properties for the given persistence, +	 * unit, typically based on settings in this JpaVendorAdapter instance., +	 * <p>Note that there might be further JPA properties defined on the, +	 * EntityManagerFactory bean, which might potentially override individual, +	 * JPA property values specified here., +	 * <p>This implementation delegates to {@link #getJpaPropertyMap()} for, +	 * non-unit-dependent properties. Effectively, this PersistenceUnitInfo-based, +	 * variant only needs to be implemented if there is an actual need to react, +	 * to unit-specific characteristics such as the transaction type., +	 * @param pui the PersistenceUnitInfo for the current persistence unit, +	 * @return a Map of JPA properties, as accepted by the standard JPA bootstrap, +	 * facilities, or an empty Map if there are no properties to expose, +	 * @since 4.3.13, +	 * @see PersistenceUnitInfo#getTransactionType(), +	 * @see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(PersistenceUnitInfo, Map), +	 */, +	default Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {, +		return getJpaPropertyMap();, +	}, +	 * <p>Note that there might be further JPA properties defined on the, +	 * EntityManagerFactory bean, which might potentially override individual, +	 * JPA property values specified here., +	 * @return a Map of JPA properties, as accepted by the standard JPA bootstrap, +	 * facilities, or an empty Map if there are no properties to expose, +	 * @see javax.persistence.Persistence#createEntityManagerFactory(String, Map), +	default Map<String, ?> getJpaPropertyMap() {, +		return Collections.emptyMap();, +	}, +	default JpaDialect getJpaDialect() {, +		return null;, +	}, +	default Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {, +		return EntityManagerFactory.class;, +	}, +	default Class<? extends EntityManager> getEntityManagerInterface() {, +		return EntityManager.class;, +	}]