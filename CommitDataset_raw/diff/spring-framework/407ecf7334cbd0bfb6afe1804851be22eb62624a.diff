[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserRegistryMessageHandler.java, +import java.util.concurrent.TimeUnit;, +	private long registryExpirationPeriod = TimeUnit.SECONDS.toMillis(20);, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserRegistryMessageHandler.java, +import java.util.concurrent.TimeUnit;, +	private long registryExpirationPeriod = TimeUnit.SECONDS.toMillis(20);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java, +	private long loggingPeriod = TimeUnit.MINUTES.toMillis(30);, +		this.loggingTask = initLoggingTask(TimeUnit.MINUTES.toMillis(1));, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import java.util.concurrent.TimeUnit;, +						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java, +import java.util.concurrent.TimeUnit;, +			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout);, +					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));, +			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, +import java.util.concurrent.TimeUnit;, +	private long receiptTimeLimit = TimeUnit.SECONDS.toMillis(15);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserRegistryMessageHandler.java, +import java.util.concurrent.TimeUnit;, +	private long registryExpirationPeriod = TimeUnit.SECONDS.toMillis(20);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java, +	private long loggingPeriod = TimeUnit.MINUTES.toMillis(30);, +		this.loggingTask = initLoggingTask(TimeUnit.MINUTES.toMillis(1));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +	private long heartbeatTime = TimeUnit.SECONDS.toMillis(25);, +	private long disconnectDelay = TimeUnit.SECONDS.toMillis(5 );]