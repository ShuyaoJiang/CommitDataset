[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.beans.factory.BeanFactoryAware;, + * @author Juergen Hoeller, +public class WebAsyncTask<V> implements BeanFactoryAware {, +	private Long timeout;, +	private AsyncTaskExecutor executor;, +	private String executorName;, +, +	private BeanFactory beanFactory;, +		Assert.notNull(callable, "Callable must not be null");, +		this.callable = callable;, +	 * @param timeout a timeout value in milliseconds, +		this(callable);, +		this.timeout = timeout;, +	 * @param executorName the name of an executor bean to use, +		this(callable);, +		Assert.notNull(executorName, "Executor name must not be null");, +		this.executorName = executorName;, +		this.timeout = timeout;, +	 * @param executor the executor to use, +		this(callable);, +		this.timeout = timeout;, +	 * Return the {@link Callable} to use for concurrent handling (never {@code null})., +	 * Return the timeout value in milliseconds, or {@code null} if no timeout is set., +	 * A {@link BeanFactory} to use for resolving an executor name., +	 * <p>This factory reference will automatically be set when, +	 * {@code WebAsyncTask} is used within a Spring MVC controller., +	 */, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	/**, +	 * Return the AsyncTaskExecutor to use for concurrent handling,, +	 * or {@code null} if none specified., +			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name");, +	 * Register code to invoke when the async request times out., +	 * <p>This method is called from a container thread when an async request times, +	 * out before the {@code Callable} has completed. The callback is executed in, +	 * the same thread and therefore should return without blocking. It may return, +	 * an alternative value to use, including an {@link Exception} or return, +	 * Register code to invoke when the async request completes., +	 * <p>This method is called from a container thread when an async request, +	 * completed for any reason, including timeout and network error., +				return (timeoutCallback != null ? timeoutCallback.call() : CallableProcessingInterceptor.RESULT_NONE);]