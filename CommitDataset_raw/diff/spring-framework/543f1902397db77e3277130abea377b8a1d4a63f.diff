[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, + * Copyright 2002-2018 the original author or authors., +import org.reactivestreams.Publisher;, + * <p>Use {@link WebSocketSession#receive()} to compose on the stream of, + * inbound messages and {@link WebSocketSession#send(Publisher)} to write the, + * stream of outbound messages., + *, + * <p>You can handle inbound and outbound messages as independent streams, and, + * then join them:, + *, + * <pre class="code">, + * class ExampleHandler implements WebSocketHandler {, +, + * 	&#064;Override, + * 	public Mono&lt;Void&gt; handle(WebSocketSession session) {, + *, + * 		Mono&lt;Void&gt; input = session.receive(), + *			.doOnNext(message -> {, + * 				// ..., + * 			}), + * 			.concatMap(message -> {, + * 				// ..., + * 			}), + * 			.then();, + *, + *		Flux&lt;String&gt; source = ... ;, + * 		Mono&lt;Void&gt; output = session.send(source.map(session::textMessage));, + *, + * 		return Mono.zip(input, output).then();, + * 	}, + * }, + * </pre>, + *, + * <p>You can also create a single flow including inbound and outbound messages:, + * <pre class="code">, + * class ExampleHandler implements WebSocketHandler {, +, + * 	&#064;Override, + * 	public Mono&lt;Void&gt; handle(WebSocketSession session) {, + *, + * 		Flux&lt;WebSocketMessage&gt; input = session.receive(), + *			.doOnNext(message -> {, + * 				// ..., + * 			}), + * 			.concatMap(message -> {, + * 				// ..., + * 			}), + * 			.map(value -> session.textMessage("Echo " + value));, + *, + * 		return session.send(output);, + * 	}, + * }, + * </pre>, + *, + * <p>When the connection is closed, the inbound stream will receive a, + * completion/error signal, while the outbound stream will get a cancellation, + * signal. The above flows are composed in such a way that the, + * {@code Mono<Void>} returned from the {@code WebSocketHandler} won't complete, + * until the connection is closed., + *, +	 *, +	 *, +	 *, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, + * Copyright 2002-2018 the original author or authors., +import org.reactivestreams.Publisher;, + * <p>Use {@link WebSocketSession#receive()} to compose on the stream of, + * inbound messages and {@link WebSocketSession#send(Publisher)} to write the, + * stream of outbound messages., + *, + * <p>You can handle inbound and outbound messages as independent streams, and, + * then join them:, + *, + * <pre class="code">, + * class ExampleHandler implements WebSocketHandler {, +, + * 	&#064;Override, + * 	public Mono&lt;Void&gt; handle(WebSocketSession session) {, + *, + * 		Mono&lt;Void&gt; input = session.receive(), + *			.doOnNext(message -> {, + * 				// ..., + * 			}), + * 			.concatMap(message -> {, + * 				// ..., + * 			}), + * 			.then();, + *, + *		Flux&lt;String&gt; source = ... ;, + * 		Mono&lt;Void&gt; output = session.send(source.map(session::textMessage));, + *, + * 		return Mono.zip(input, output).then();, + * 	}, + * }, + * </pre>, + *, + * <p>You can also create a single flow including inbound and outbound messages:, + * <pre class="code">, + * class ExampleHandler implements WebSocketHandler {, +]