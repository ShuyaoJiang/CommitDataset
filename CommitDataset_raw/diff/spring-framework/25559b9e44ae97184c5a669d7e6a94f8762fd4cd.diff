[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasLength(name)) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasLength(name)) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(10, 20, 30, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) ->, +				template.query(sql, (PreparedStatementSetter) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, ps -> {, +		}, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, (Object[]) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, new Object[] { argument }, rch));, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +		ParameterizedPreparedStatementSetter<Integer> setter = (ps, argument) -> ps.setInt(1, argument.intValue());, +		assertEquals("executed 2 updates", 2, actualRowsAffected[0].length);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +		assertEquals("updated correct # of rows", actualRowsUpdated, expectedRowsUpdated);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +			t.query(sql, rs -> {, +		this.template.query(sql, rs -> {, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			this.template.query("my query", (ResultSetExtractor<Object>) rs -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +			this.template.query(con -> con.prepareStatement("my query"),, +					(ResultSetExtractor<Object>) rs2 -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +		params.add(new SqlReturnResultSet("", (RowCallbackHandler) rs -> {, +			this.template.call(conn -> conn.prepareCall("my query"), params);, +		Map<String, Object> out = this.template.call(conn -> conn.prepareCall("my query"), params);, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasLength(name)) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(10, 20, 30, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) ->, +				template.query(sql, (PreparedStatementSetter) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, ps -> {, +		}, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, (Object[]) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, new Object[] { argument }, rch));, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +		ParameterizedPreparedStatementSetter<Integer> setter = (ps, argument) -> ps.setInt(1, argument.intValue());, +		assertEquals("executed 2 updates", 2, actualRowsAffected[0].length);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +		assertEquals("updated correct # of rows", actualRowsUpdated, expectedRowsUpdated);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +			t.query(sql, rs -> {, +		this.template.query(sql, rs -> {, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			this.template.query("my query", (ResultSetExtractor<Object>) rs -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +			this.template.query(con -> con.prepareStatement("my query"),, +					(ResultSetExtractor<Object>) rs2 -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +		params.add(new SqlReturnResultSet("", (RowCallbackHandler) rs -> {, +			this.template.call(conn -> conn.prepareCall("my query"), params);, +		Map<String, Object> out = this.template.call(conn -> conn.prepareCall("my query"), params);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, +	public void setAcceptVersion(@Nullable String... acceptVersions) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.hasLength(name)) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(10, 20, 30, null, (template, sql, rch) -> template.query(sql, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) ->, +				template.query(sql, (PreparedStatementSetter) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, ps -> {, +		}, rch));, +		doTestStrings(null, null, null, null, (template, sql, rch) -> template.query(sql, (Object[]) null, rch));, +		doTestStrings(null, null, null, argument, (template, sql, rch) -> template.query(sql, new Object[] { argument }, rch));, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +		ParameterizedPreparedStatementSetter<Integer> setter = (ps, argument) -> ps.setInt(1, argument.intValue());, +		assertEquals("executed 2 updates", 2, actualRowsAffected[0].length);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +		assertEquals("updated correct # of rows", actualRowsUpdated, expectedRowsUpdated);, +		PreparedStatementSetter pss = ps -> ps.setString(1, name);, +			t.query(sql, rs -> {, +		this.template.query(sql, rs -> {, +			this.template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			template.query(sql, (RowCallbackHandler) rs -> {, +			this.template.query("my query", (ResultSetExtractor<Object>) rs -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +			this.template.query(con -> con.prepareStatement("my query"),, +					(ResultSetExtractor<Object>) rs2 -> {, +		catch (InvalidDataAccessApiUsageException ex) {, +		params.add(new SqlReturnResultSet("", (RowCallbackHandler) rs -> {, +			this.template.call(conn -> conn.prepareCall("my query"), params);, +		Map<String, Object> out = this.template.call(conn -> conn.prepareCall("my query"), params);]