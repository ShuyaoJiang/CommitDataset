[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2013 the original author or authors., +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +			cachedIntrospectionResults.addTypeDescriptor(pd, td);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2013 the original author or authors., +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +			cachedIntrospectionResults.addTypeDescriptor(pd, td);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.SpringProperties;, +		shouldIntrospectorIgnoreBeaninfoClasses = SpringProperties.getFlag(IGNORE_BEANINFO_PROPERTY_NAME);, +			// Only bother with flushFromCaches if the Introspector actually cached..., +			if (!shouldIntrospectorIgnoreBeaninfoClasses) {, +			}, +			this.typeDescriptorCache = new ConcurrentHashMap<PropertyDescriptor, TypeDescriptor>();, +	void addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {, +		this.typeDescriptorCache.put(pd, td);, +	TypeDescriptor getTypeDescriptor(PropertyDescriptor pd) {, +		return this.typeDescriptorCache.get(pd);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2013 the original author or authors., +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +			cachedIntrospectionResults.addTypeDescriptor(pd, td);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.SpringProperties;, +		shouldIntrospectorIgnoreBeaninfoClasses = SpringProperties.getFlag(IGNORE_BEANINFO_PROPERTY_NAME);, +			// Only bother with flushFromCaches if the Introspector actually cached..., +			if (!shouldIntrospectorIgnoreBeaninfoClasses) {, +			}, +			this.typeDescriptorCache = new ConcurrentHashMap<PropertyDescriptor, TypeDescriptor>();, +	void addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {, +		this.typeDescriptorCache.put(pd, td);, +	TypeDescriptor getTypeDescriptor(PropertyDescriptor pd) {, +		return this.typeDescriptorCache.get(pd);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +import org.springframework.core.SpringProperties;, +			!SpringProperties.getFlag(AbstractEnvironment.IGNORE_GETENV_PROPERTY_NAME);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2013 the original author or authors., +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +			cachedIntrospectionResults.addTypeDescriptor(pd, td);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.SpringProperties;, +		shouldIntrospectorIgnoreBeaninfoClasses = SpringProperties.getFlag(IGNORE_BEANINFO_PROPERTY_NAME);, +			// Only bother with flushFromCaches if the Introspector actually cached..., +			if (!shouldIntrospectorIgnoreBeaninfoClasses) {, +			}, +			this.typeDescriptorCache = new ConcurrentHashMap<PropertyDescriptor, TypeDescriptor>();, +	void addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {, +		this.typeDescriptorCache.put(pd, td);, +	TypeDescriptor getTypeDescriptor(PropertyDescriptor pd) {, +		return this.typeDescriptorCache.get(pd);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +import org.springframework.core.SpringProperties;, +			!SpringProperties.getFlag(AbstractEnvironment.IGNORE_GETENV_PROPERTY_NAME);, +++ b/spring-core/src/main/java/org/springframework/core/SpringProperties.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.URL;, +import java.util.Properties;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +/**, + * Static holder for local Spring properties, i.e. defined at the Spring library level., + *, + * <p>Reads a {@code spring.properties} file from the root of the Spring library classpath,, + * and also allows for programmatically setting properties through {@link #setProperty}., + * When checking a property, local entries are being checked first, then falling back, + * to JVM-level system properties through a {@link System#getProperty} check., + *, + * <p>This is an alternative way to set Spring-related system properties such as, + * "spring.getenv.ignore" and "spring.beaninfo.ignore", in particular for scenarios, + * where JVM system properties are locked on the target platform (e.g. WebSphere).]