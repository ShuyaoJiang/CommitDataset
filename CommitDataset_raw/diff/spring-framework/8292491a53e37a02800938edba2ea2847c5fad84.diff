[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, +public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, +public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java, +public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, +public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java, +public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +public final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {, +	private final boolean useSuffixPatternMatch;, +	 * @param useSuffixPatternMatch whether to enable matching by suffix (".*"), +	public PatternsRequestCondition(String[] patterns, , +									UrlPathHelper urlPathHelper, , +									PathMatcher pathMatcher, , +									boolean useSuffixPatternMatch) {, +		this(asList(patterns), urlPathHelper, pathMatcher, useSuffixPatternMatch);, +	}, +, +	/**, +	 * Creates a new {@link PatternsRequestCondition} with the given URL patterns., +	 * Each pattern that is not empty and does not start with "/" is prepended with "/"., +	 * @param patterns 0 or more URL patterns; if 0 the condition will match to every request. , +	 */, +	public PatternsRequestCondition(String... patterns) {, +		this(patterns, null, null, true);, +	private PatternsRequestCondition(Collection<String> patterns, , +									 UrlPathHelper urlPathHelper, , +									 PathMatcher pathMatcher, , +									 boolean useSuffixPatternMatch) {, +		this.urlPathHelper = urlPathHelper != null ? urlPathHelper : new UrlPathHelper();, +		this.pathMatcher = pathMatcher != null ? pathMatcher : new AntPathMatcher();, +		this.useSuffixPatternMatch = useSuffixPatternMatch;, +		return new PatternsRequestCondition(result, urlPathHelper, pathMatcher, useSuffixPatternMatch);, +		return matches.isEmpty() ? null : , +			new PatternsRequestCondition(matches, urlPathHelper, pathMatcher, useSuffixPatternMatch);, +		if (useSuffixPatternMatch) {, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, +public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java, +public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +public final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {, +	private final boolean useSuffixPatternMatch;, +	 * @param useSuffixPatternMatch whether to enable matching by suffix (".*"), +	public PatternsRequestCondition(String[] patterns, , +									UrlPathHelper urlPathHelper, , +									PathMatcher pathMatcher, , +									boolean useSuffixPatternMatch) {, +		this(asList(patterns), urlPathHelper, pathMatcher, useSuffixPatternMatch);, +	}, +, +	/**, +	 * Creates a new {@link PatternsRequestCondition} with the given URL patterns., +	 * Each pattern that is not empty and does not start with "/" is prepended with "/"., +	 * @param patterns 0 or more URL patterns; if 0 the condition will match to every request. , +	 */, +	public PatternsRequestCondition(String... patterns) {, +		this(patterns, null, null, true);, +	private PatternsRequestCondition(Collection<String> patterns, , +									 UrlPathHelper urlPathHelper, , +									 PathMatcher pathMatcher, , +									 boolean useSuffixPatternMatch) {, +		this.urlPathHelper = urlPathHelper != null ? urlPathHelper : new UrlPathHelper();, +		this.pathMatcher = pathMatcher != null ? pathMatcher : new AntPathMatcher();, +		this.useSuffixPatternMatch = useSuffixPatternMatch;, +		return new PatternsRequestCondition(result, urlPathHelper, pathMatcher, useSuffixPatternMatch);, +		return matches.isEmpty() ? null : , +			new PatternsRequestCondition(matches, urlPathHelper, pathMatcher, useSuffixPatternMatch);, +		if (useSuffixPatternMatch) {, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +public final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, +public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java, +public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +public final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {, +	private final boolean useSuffixPatternMatch;, +	 * @param useSuffixPatternMatch whether to enable matching by suffix (".*"), +	public PatternsRequestCondition(String[] patterns, , +									UrlPathHelper urlPathHelper, , +									PathMatcher pathMatcher, , +									boolean useSuffixPatternMatch) {]