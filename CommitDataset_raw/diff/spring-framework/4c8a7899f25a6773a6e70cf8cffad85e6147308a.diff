[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java, +import java.util.Collections;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +	static final Set<String> driversWithNoSupportForGetParameterType =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(1));, +, +	private static final Map<Class<?>, Integer> javaTypeToSqlTypeMap = new HashMap<Class<?>, Integer>(32);, +			Integer sqlTypeToUse = null;, +			DatabaseMetaData dbmd = null;, +			String jdbcDriverName = null;, +			boolean checkGetParameterType = true;, +			if (!driversWithNoSupportForGetParameterType.isEmpty()) {, +					dbmd = ps.getConnection().getMetaData();, +					jdbcDriverName = dbmd.getDriverName();, +					checkGetParameterType = !driversWithNoSupportForGetParameterType.contains(jdbcDriverName);, +				}, +				catch (Throwable ex) {, +					logger.debug("Could not check connection metadata", ex);, +				}, +			}, +			if (checkGetParameterType) {, +				try {, +					sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);, +				}, +			}, +			if (sqlTypeToUse == null) {, +				sqlTypeToUse = Types.NULL;, +					if (dbmd == null) {, +						dbmd = ps.getConnection().getMetaData();, +					}, +					if (jdbcDriverName == null) {, +						jdbcDriverName = dbmd.getDriverName();, +					}, +					if (checkGetParameterType) {, +						driversWithNoSupportForGetParameterType.add(jdbcDriverName);, +					}, +						sqlTypeToUse = Types.VARCHAR;, +				catch (Throwable ex) {, +					logger.debug("Could not check connection metadata", ex);, +				ps.setNull(paramIndex, sqlTypeToUse);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java, +import java.util.Collections;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +	static final Set<String> driversWithNoSupportForGetParameterType =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(1));, +, +	private static final Map<Class<?>, Integer> javaTypeToSqlTypeMap = new HashMap<Class<?>, Integer>(32);, +			Integer sqlTypeToUse = null;, +			DatabaseMetaData dbmd = null;, +			String jdbcDriverName = null;, +			boolean checkGetParameterType = true;, +			if (!driversWithNoSupportForGetParameterType.isEmpty()) {, +					dbmd = ps.getConnection().getMetaData();, +					jdbcDriverName = dbmd.getDriverName();, +					checkGetParameterType = !driversWithNoSupportForGetParameterType.contains(jdbcDriverName);, +				}, +				catch (Throwable ex) {, +					logger.debug("Could not check connection metadata", ex);, +				}, +			}, +			if (checkGetParameterType) {, +				try {, +					sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);, +				}, +			}, +			if (sqlTypeToUse == null) {, +				sqlTypeToUse = Types.NULL;, +					if (dbmd == null) {, +						dbmd = ps.getConnection().getMetaData();, +					}, +					if (jdbcDriverName == null) {, +						jdbcDriverName = dbmd.getDriverName();, +					}, +					if (checkGetParameterType) {, +						driversWithNoSupportForGetParameterType.add(jdbcDriverName);, +					}, +						sqlTypeToUse = Types.VARCHAR;, +				catch (Throwable ex) {, +					logger.debug("Could not check connection metadata", ex);, +				ps.setNull(paramIndex, sqlTypeToUse);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/StatementCreatorUtilsTests.java, +import java.sql.ParameterMetaData;, +import static org.junit.Assert.*;, +	@Test, +	public void testSetParameterValueWithNullAndType() throws SQLException {, +	@Test, +	public void testSetParameterValueWithNullAndTypeName() throws SQLException {, +	@Test, +	public void testSetParameterValueWithNullAndUnknownType() throws SQLException {, +		StatementCreatorUtils.driversWithNoSupportForGetParameterType.clear();, +		DatabaseMetaData dbmd = mock(DatabaseMetaData.class);, +		given(con.getMetaData()).willReturn(dbmd);, +		given(dbmd.getDatabaseProductName()).willReturn("Informix Dynamic Server");, +		given(dbmd.getDriverName()).willReturn("Informix Driver");, +		verify(dbmd).getDatabaseProductName();, +		verify(dbmd).getDriverName();, +		assertEquals(1, StatementCreatorUtils.driversWithNoSupportForGetParameterType.size());, +	@Test]