[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, +import org.springframework.util.StringUtils;, +		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {, +					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {, +							setFunctionReturnName(parameter.getName());, +		setOutParameterNames(outParameterNames);, +		List<SqlParameter> workParameters = new ArrayList<SqlParameter>();, +		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {, +					parameter = declaredParameters.get(getFunctionReturnName());, +					if (parameter == null && getOutParameterNames().size() > 0) {, +						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase());, +								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"");, +						setFunctionReturnName(parameter.getName());, +						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?, +								parNameToUse : getFunctionReturnName());, +						if (isFunction()) {, +							setFunctionReturnName(returnNameToUse);, +						if (this.limitedInParameterNames.isEmpty() ||, +					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +, +					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +, +					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +, +					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, +import org.springframework.util.StringUtils;, +		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {, +					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {, +							setFunctionReturnName(parameter.getName());, +		setOutParameterNames(outParameterNames);, +		List<SqlParameter> workParameters = new ArrayList<SqlParameter>();, +		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {, +					parameter = declaredParameters.get(getFunctionReturnName());, +					if (parameter == null && getOutParameterNames().size() > 0) {, +						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase());, +								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"");, +						setFunctionReturnName(parameter.getName());, +						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?, +								parNameToUse : getFunctionReturnName());, +						if (isFunction()) {, +							setFunctionReturnName(returnNameToUse);, +						if (this.limitedInParameterNames.isEmpty() ||, +					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +, +					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +, +					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +, +					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProvider.java, + * Copyright 2002-2010 the original author or authors., +	 * The reyurned value will be used for meta data lookups. This could include alterig the case used, +	 * or providing a base catalog if mone provided., +	 * The reyurned value will be used for meta data lookups. This could include alterig the case used, +	 * or providing a base schema if mone provided., +	 * This could include altering the case., +	 * Create a default out parameter based on the provided meta data. This is used when no, +	 * explicit parameter declaration has been made., +	 * Create a default inout parameter based on the provided meta data. This is used when no, +	 * explicit parameter declaration has been made., +	 * Create a default in parameter based on the provided meta data. This is used when no, +	 * explicit parameter declaration has been made.]