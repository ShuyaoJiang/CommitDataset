[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/JsonContentTests.java, +import java.net.URI;, +, +import reactor.core.publisher.Mono;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestBody;, + * Samples of tests with serialized JSON content., +	@Test, +	public void postJsonContent() throws Exception {, +		this.client.post().uri("/persons"), +				.contentType(MediaType.APPLICATION_JSON_UTF8), +				.body("{\"name\":\"John\"}"), +				.exchange(), +				.expectStatus().isCreated(), +				.expectBody().isEmpty();, +	}, +, +, +		@PostMapping, +		ResponseEntity<String> savePerson(@RequestBody Person person) {, +			return ResponseEntity.created(URI.create("/persons/" + person.getName())).build();, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/JsonContentTests.java, +import java.net.URI;, +, +import reactor.core.publisher.Mono;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestBody;, + * Samples of tests with serialized JSON content., +	@Test, +	public void postJsonContent() throws Exception {, +		this.client.post().uri("/persons"), +				.contentType(MediaType.APPLICATION_JSON_UTF8), +				.body("{\"name\":\"John\"}"), +				.exchange(), +				.expectStatus().isCreated(), +				.expectBody().isEmpty();, +	}, +, +, +		@PostMapping, +		ResponseEntity<String> savePerson(@RequestBody Person person) {, +			return ResponseEntity.created(URI.create("/persons/" + person.getName())).build();, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +				.body(new Person("John")), +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/JsonContentTests.java, +import java.net.URI;, +, +import reactor.core.publisher.Mono;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestBody;, + * Samples of tests with serialized JSON content., +	@Test, +	public void postJsonContent() throws Exception {, +		this.client.post().uri("/persons"), +				.contentType(MediaType.APPLICATION_JSON_UTF8), +				.body("{\"name\":\"John\"}"), +				.exchange(), +				.expectStatus().isCreated(), +				.expectBody().isEmpty();, +	}, +, +, +		@PostMapping, +		ResponseEntity<String> savePerson(@RequestBody Person person) {, +			return ResponseEntity.created(URI.create("/persons/" + person.getName())).build();, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +				.body(new Person("John")), +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		// Skip String: CharSequenceDecoder + "*/*" comes after, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/JsonContentTests.java, +import java.net.URI;, +, +import reactor.core.publisher.Mono;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestBody;, + * Samples of tests with serialized JSON content., +	@Test, +	public void postJsonContent() throws Exception {, +		this.client.post().uri("/persons"), +				.contentType(MediaType.APPLICATION_JSON_UTF8), +				.body("{\"name\":\"John\"}"), +				.exchange(), +				.expectStatus().isCreated(), +				.expectBody().isEmpty();, +	}, +, +, +		@PostMapping, +		ResponseEntity<String> savePerson(@RequestBody Person person) {, +			return ResponseEntity.created(URI.create("/persons/" + person.getName())).build();, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +				.body(new Person("John"))]