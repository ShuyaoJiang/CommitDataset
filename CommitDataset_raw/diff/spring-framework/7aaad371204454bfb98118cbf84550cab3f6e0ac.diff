[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		ManagedList<?> argumentResolvers = getArgumentResolvers(element, source, parserContext);, +		if (argumentResolvers != null) {, +			annAdapterDef.getPropertyValues().add("customArgumentResolvers", argumentResolvers);, +		}, +	private ManagedList<?> getArgumentResolvers(Element element, Object source, ParserContext parserContext) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "argument-resolvers");, +		if (resolversElement != null) {, +			ManagedList<BeanDefinitionHolder> argumentResolvers = new ManagedList<BeanDefinitionHolder>();, +			argumentResolvers.setSource(source);, +			for (Element resolver : DomUtils.getChildElementsByTagName(resolversElement, "bean")) {, +				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(resolver);, +				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(resolver, beanDef);, +				argumentResolvers.add(beanDef);, +			}, +			return argumentResolvers;, +		}, +		return null;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		ManagedList<?> argumentResolvers = getArgumentResolvers(element, source, parserContext);, +		if (argumentResolvers != null) {, +			annAdapterDef.getPropertyValues().add("customArgumentResolvers", argumentResolvers);, +		}, +	private ManagedList<?> getArgumentResolvers(Element element, Object source, ParserContext parserContext) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "argument-resolvers");, +		if (resolversElement != null) {, +			ManagedList<BeanDefinitionHolder> argumentResolvers = new ManagedList<BeanDefinitionHolder>();, +			argumentResolvers.setSource(source);, +			for (Element resolver : DomUtils.getChildElementsByTagName(resolversElement, "bean")) {, +				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(resolver);, +				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(resolver, beanDef);, +				argumentResolvers.add(beanDef);, +			}, +			return argumentResolvers;, +		}, +		return null;, +	}, +, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.1.xsd, +				<xsd:element name="argument-resolvers">, +					<xsd:annotation>, +						<xsd:documentation><![CDATA[, +	Configures one or more WebArgumentResolver types to use for resolving custom arguments to handler methods., +	Typically implemented to detect special parameter types, resolving well-known argument values for them., +	Using this configuration element is optional., +	Using it does not override the built-in support for resolving handler method arguments. , +						]]></xsd:documentation>, +					</xsd:annotation>, +					<xsd:complexType>, +						<xsd:sequence>, +							<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">, +								<xsd:annotation>, +									<xsd:documentation><![CDATA[, +	The HttpMessageConverter bean definition., +									]]></xsd:documentation>, +								</xsd:annotation>, +							</xsd:element>, +						</xsd:sequence>, +					</xsd:complexType>, +				</xsd:element>			, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		ManagedList<?> argumentResolvers = getArgumentResolvers(element, source, parserContext);, +		if (argumentResolvers != null) {, +			annAdapterDef.getPropertyValues().add("customArgumentResolvers", argumentResolvers);, +		}, +	private ManagedList<?> getArgumentResolvers(Element element, Object source, ParserContext parserContext) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "argument-resolvers");, +		if (resolversElement != null) {, +			ManagedList<BeanDefinitionHolder> argumentResolvers = new ManagedList<BeanDefinitionHolder>();, +			argumentResolvers.setSource(source);, +			for (Element resolver : DomUtils.getChildElementsByTagName(resolversElement, "bean")) {, +				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(resolver);, +				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(resolver, beanDef);, +				argumentResolvers.add(beanDef);, +			}, +			return argumentResolvers;, +		}, +		return null;, +	}, +, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.1.xsd, +				<xsd:element name="argument-resolvers">, +					<xsd:annotation>, +						<xsd:documentation><![CDATA[, +	Configures one or more WebArgumentResolver types to use for resolving custom arguments to handler methods., +	Typically implemented to detect special parameter types, resolving well-known argument values for them., +	Using this configuration element is optional., +	Using it does not override the built-in support for resolving handler method arguments. , +						]]></xsd:documentation>, +					</xsd:annotation>, +					<xsd:complexType>, +						<xsd:sequence>, +							<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">, +								<xsd:annotation>, +									<xsd:documentation><![CDATA[, +	The HttpMessageConverter bean definition., +									]]></xsd:documentation>, +								</xsd:annotation>]