[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2019 the original author or authors., + * Also available as an argument for factory methods, reacting to the, + * requesting injection point for building a customized bean instance., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2019 the original author or authors., + * Also available as an argument for factory methods, reacting to the, + * requesting injection point for building a customized bean instance., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * Resolve a bean instance for the given bean name, providing a dependency descriptor, +	 * for exposure to target factory methods., +	 * <p>This is effectively a variant of {@link #getBean(String, Class)} which supports, +	 * factory methods with an {@link org.springframework.beans.factory.InjectionPoint}, +	 * argument., +	 * @param name the name of the bean to look up, +	 * @param descriptor the dependency descriptor for the requesting injection point, +	 * @return the corresponding bean instance, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +	 * @throws BeansException if the bean could not be created, +	 * @since 5.1.5, +	 * @see #getBean(String, Class), +	 */, +	Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException;, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2019 the original author or authors., + * Also available as an argument for factory methods, reacting to the, + * requesting injection point for building a customized bean instance., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * Resolve a bean instance for the given bean name, providing a dependency descriptor, +	 * for exposure to target factory methods., +	 * <p>This is effectively a variant of {@link #getBean(String, Class)} which supports, +	 * factory methods with an {@link org.springframework.beans.factory.InjectionPoint}, +	 * argument., +	 * @param name the name of the bean to look up, +	 * @param descriptor the dependency descriptor for the requesting injection point, +	 * @return the corresponding bean instance, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +	 * @throws BeansException if the bean could not be created, +	 * @since 5.1.5, +	 * @see #getBean(String, Class), +	 */, +	Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException;, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.beans.factory.InjectionPoint;, +	//-------------------------------------------------------------------------, +	// Delegate methods for resolving injection points, +	//-------------------------------------------------------------------------, +, +	@Override, +	public Object resolveBeanByName(String name, DependencyDescriptor descriptor) {, +		InjectionPoint previousInjectionPoint = ConstructorResolver.setCurrentInjectionPoint(descriptor);, +		try {, +			return getBean(name, descriptor.getDependencyType());, +		}, +		finally {, +			ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);, +		}, +	}, +, +	@Override, +	@Nullable, +	public Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException {, +		return resolveDependency(descriptor, requestingBeanName, null, null);, +	}, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no bean with the specified name, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2019 the original author or authors., + * Also available as an argument for factory methods, reacting to the, + * requesting injection point for building a customized bean instance., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * Resolve a bean instance for the given bean name, providing a dependency descriptor, +	 * for exposure to target factory methods., +	 * <p>This is effectively a variant of {@link #getBean(String, Class)} which supports]