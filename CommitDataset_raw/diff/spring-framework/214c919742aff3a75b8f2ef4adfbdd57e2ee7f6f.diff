[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler());, +	private class BeanPointcutDesignatorHandler implements PointcutDesignatorHandler {, +			return new BeanContextMatcher(expression);, +	private class BeanContextMatcher implements ContextBasedMatcher {, +		public BeanContextMatcher(String expression) {, +						matchesBean(isFactory ? BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName : advisedBeanName));, +				return FuzzyBoolean.fromBoolean(matchesBean(advisedBeanName) ||, +						matchesBean(BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName));, +		private boolean matchesBean(String advisedBeanName) {, +			return BeanFactoryAnnotationUtils.isQualifierMatch(this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler());, +	private class BeanPointcutDesignatorHandler implements PointcutDesignatorHandler {, +			return new BeanContextMatcher(expression);, +	private class BeanContextMatcher implements ContextBasedMatcher {, +		public BeanContextMatcher(String expression) {, +						matchesBean(isFactory ? BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName : advisedBeanName));, +				return FuzzyBoolean.fromBoolean(matchesBean(advisedBeanName) ||, +						matchesBean(BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName));, +		private boolean matchesBean(String advisedBeanName) {, +			return BeanFactoryAnnotationUtils.isQualifierMatch(this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +import java.util.function.Predicate;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.util.Assert;, + * @author Chris Beams, +public abstract class BeanFactoryAnnotationUtils {, +	 * @throws NoUniqueBeanDefinitionException if multiple matching beans of type {@code T} found, +	 * @throws BeansException if the bean could not be created, +	 * @see BeanFactory#getBean(Class), +	public static <T> T qualifiedBeanOfType(BeanFactory beanFactory, Class<T> beanType, String qualifier), +			throws BeansException {, +, +		Assert.notNull(beanFactory, "BeanFactory must not be null");, +, +			if (isQualifierMatch(qualifier::equals, beanName, bf)) {, +					throw new NoUniqueBeanDefinitionException(beanType, matchingBean, beanName);, +	 * @param beanFactory the {@code BeanFactory} from which to retrieve the named bean, +	 * @since 5.0, +	public static boolean isQualifierMatch(Predicate<String> qualifier, String beanName, BeanFactory beanFactory) {, +		// Try quick bean name or alias match first..., +		if (qualifier.test(beanName)) {, +			return true;, +		}, +		if (beanFactory != null) {, +			for (String alias : beanFactory.getAliases(beanName)) {, +				if (qualifier.test(alias)) {, +					return true;, +				}, +			}, +				if (beanFactory instanceof ConfigurableBeanFactory) {, +					BeanDefinition bd = ((ConfigurableBeanFactory) beanFactory).getMergedBeanDefinition(beanName);, +						if (candidate != null) {, +							Object value = candidate.getAttribute(AutowireCandidateQualifier.VALUE_KEY);, +							if (value != null && qualifier.test(value.toString())) {, +					}, +								return qualifier.test(targetAnnotation.value());, +							}, +				Class<?> beanType = beanFactory.getType(beanName);, +						return qualifier.test(targetAnnotation.value());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler());, +	private class BeanPointcutDesignatorHandler implements PointcutDesignatorHandler {, +			return new BeanContextMatcher(expression);, +	private class BeanContextMatcher implements ContextBasedMatcher {, +		public BeanContextMatcher(String expression) {, +						matchesBean(isFactory ? BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName : advisedBeanName));, +				return FuzzyBoolean.fromBoolean(matchesBean(advisedBeanName) ||, +						matchesBean(BeanFactory.FACTORY_BEAN_PREFIX + advisedBeanName));, +		private boolean matchesBean(String advisedBeanName) {, +			return BeanFactoryAnnotationUtils.isQualifierMatch(this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +import java.util.function.Predicate;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.util.Assert;, + * @author Chris Beams, +public abstract class BeanFactoryAnnotationUtils {, +	 * @throws NoUniqueBeanDefinitionException if multiple matching beans of type {@code T} found, +	 * @throws BeansException if the bean could not be created, +	 * @see BeanFactory#getBean(Class), +	public static <T> T qualifiedBeanOfType(BeanFactory beanFactory, Class<T> beanType, String qualifier), +			throws BeansException {, +, +		Assert.notNull(beanFactory, "BeanFactory must not be null");, +, +			if (isQualifierMatch(qualifier::equals, beanName, bf)) {, +					throw new NoUniqueBeanDefinitionException(beanType, matchingBean, beanName);, +	 * @param beanFactory the {@code BeanFactory} from which to retrieve the named bean, +	 * @since 5.0, +	public static boolean isQualifierMatch(Predicate<String> qualifier, String beanName, BeanFactory beanFactory) {]