[+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/MergedSqlConfig.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context.jdbc;, +, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.style.ToStringCreator;, +import org.springframework.jdbc.datasource.init.ScriptUtils;, +import org.springframework.test.context.jdbc.SqlConfig.ErrorMode;, +import org.springframework.test.context.jdbc.SqlConfig.TransactionMode;, +import org.springframework.util.Assert;, +, +/**, + * {@code MergedSqlConfig} encapsulates the <em>merged</em> SQL script configuration, + * declared via {@link SqlConfig @SqlConfig} on a test method and its enclosing, + * test class., + * <p>Explicit method-level configuration overrides class-level configuration., + *, + * @author Sam Brannen, + * @since 4.1, + * @see SqlConfig, + */, +class MergedSqlConfig {, +, +	private final String dataSource;, +, +	private final String transactionManager;, +, +	private final TransactionMode transactionMode;, +, +	private final String encoding;, +, +	private final String separator;, +, +	private final String commentPrefix;, +, +	private final String blockCommentStartDelimiter;, +, +	private final String blockCommentEndDelimiter;, +, +	private final ErrorMode errorMode;, +, +, +	private static TransactionMode retrieveTransactionMode(AnnotationAttributes attributes) {, +		TransactionMode transactionMode = attributes.getEnum("transactionMode");, +		if (transactionMode == TransactionMode.DEFAULT) {, +			transactionMode = TransactionMode.INFERRED;, +		}, +		return transactionMode;, +	}, +, +	private static ErrorMode retrieveErrorMode(AnnotationAttributes attributes) {, +		ErrorMode errorMode = attributes.getEnum("errorMode");, +		if (errorMode == ErrorMode.DEFAULT) {, +			errorMode = ErrorMode.FAIL_ON_ERROR;, +		}, +		return errorMode;, +	}, +, +	private static String retrieveSeparator(AnnotationAttributes attributes) {, +		String separator = attributes.getString("separator");, +		if (separator != null && separator.equals("")) {, +			separator = ScriptUtils.DEFAULT_STATEMENT_SEPARATOR;, +		}, +		return separator;, +	}, +, +	private static String retrieveCommentPrefix(AnnotationAttributes attributes) {, +		String commentPrefix = attributes.getString("commentPrefix");, +		if (commentPrefix != null && commentPrefix.equals("")) {, +			commentPrefix = ScriptUtils.DEFAULT_COMMENT_PREFIX;, +		}, +		return commentPrefix;, +	}, +, +	private static String retrieveBlockCommentStartDelimiter(AnnotationAttributes attributes) {, +		String blockCommentStartDelimiter = attributes.getString("blockCommentStartDelimiter");, +		if (blockCommentStartDelimiter != null && blockCommentStartDelimiter.equals("")) {, +			blockCommentStartDelimiter = ScriptUtils.DEFAULT_BLOCK_COMMENT_START_DELIMITER;, +		}, +		return blockCommentStartDelimiter;, +	}, +, +	private static String retrieveBlockCommentEndDelimiter(AnnotationAttributes attributes) {]