[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, + * Copyright 2002-2017 the original author or authors., + * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, + * Copyright 2002-2017 the original author or authors., + * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * Return a composed routing function that routes to the given handler function if this, +	 * route does not match and the given request predicate applies. This method is a convenient, +	 * combination of {@link #and(RouterFunction)} and, +	 * @param predicate the predicate to test if this route does not match, +	 * @param handlerFunction the handler function to route to if this route does not match and, +	 * the predicate applies, +	 * @return a composed function that route to {@code handlerFunction} if this route does not, +	 * match and if {@code predicate} applies, +	 * Return a composed routing function that routes to the given router function if this, +	 * route does not match and the given request predicate applies. This method is a convenient, +	 * combination of {@link #and(RouterFunction)} and, +	 * {@link RouterFunctions#nest(RequestPredicate, RouterFunction)}., +	 * @param predicate the predicate to test if this route does not match, +	 * @param routerFunction the router function to route to if this route does not match and, +	 * the predicate applies, +	 * @return a composed function that route to {@code routerFunction} if this route does not, +	 * match and if {@code predicate} applies, +	 */, +	default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {, +		return and(RouterFunctions.nest(predicate, routerFunction));, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, + * Copyright 2002-2017 the original author or authors., + * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * Return a composed routing function that routes to the given handler function if this, +	 * route does not match and the given request predicate applies. This method is a convenient, +	 * combination of {@link #and(RouterFunction)} and, +	 * @param predicate the predicate to test if this route does not match, +	 * @param handlerFunction the handler function to route to if this route does not match and, +	 * the predicate applies, +	 * @return a composed function that route to {@code handlerFunction} if this route does not, +	 * match and if {@code predicate} applies, +	 * Return a composed routing function that routes to the given router function if this, +	 * route does not match and the given request predicate applies. This method is a convenient, +	 * combination of {@link #and(RouterFunction)} and, +	 * {@link RouterFunctions#nest(RequestPredicate, RouterFunction)}., +	 * @param predicate the predicate to test if this route does not match, +	 * @param routerFunction the router function to route to if this route does not match and, +	 * the predicate applies, +	 * @return a composed function that route to {@code routerFunction} if this route does not, +	 * match and if {@code predicate} applies, +	 */, +	default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {, +		return and(RouterFunctions.nest(predicate, routerFunction));, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, + * Copyright 2002-2017 the original author or authors., + * {@linkplain #nest(RequestPredicate, RouterFunction) subrouting} on an existing routing, +	 * <p>For instance, the following example routes GET requests for "/user" to the, +	 * {@code listUsers} method in {@code userController}:, +	 * <pre class="code">, +	 * RouterFunction&lt;ServerResponse&gt; route =, +	 *   RouterFunctions.route(RequestPredicates.GET("/user"),, +	 *     userController::listUsers);, +	 * </pre>, +	 *, +	 * @param handlerFunction the handler function to route to if the predicate applies, +	 * @param <T> the type of response returned by the handler function, +	 * Route to the given router function if the given request predicate applies. This method can be, +	 * used to create <strong>nested routes</strong>, where a group of routes share a common path, +	 * (prefix), header, or other request predicate., +	 * <p>For instance, the following example first creates a composed route that resolves to, +	 * {@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets, +	 * nested with a "/user" path predicate, so that GET requests for "/user" will list users,, +	 * and POST request for "/user" will create a new user., +	 * <pre class="code">, +	 * RouterFunction&lt;ServerResponse&gt; userRoutes =, +	 *   RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers), +	 *     .andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser);, +	 *, +	 * RouterFunction&lt;ServerResponse&gt; nestedRoute =, +	 *   RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes);, +	 * </pre>, +	 * @param routerFunction the nested router function to delegate to if the predicate applies, +	 * @param <T> the type of response returned by the handler function, +	public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, + * Copyright 2002-2017 the original author or authors., + * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * Return a composed routing function that routes to the given handler function if this, +	 * route does not match and the given request predicate applies. This method is a convenient, +	 * combination of {@link #and(RouterFunction)} and, +	 * @param predicate the predicate to test if this route does not match, +	 * @param handlerFunction the handler function to route to if this route does not match and, +	 * the predicate applies, +	 * @return a composed function that route to {@code handlerFunction} if this route does not, +	 * match and if {@code predicate} applies]