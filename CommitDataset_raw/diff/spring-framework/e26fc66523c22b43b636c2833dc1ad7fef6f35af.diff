[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.Arrays;, +		doNext(calendar, calendar.get(Calendar.YEAR));, +	private void doNext(Calendar calendar, int dot) {, +		} else {, +			doNext(calendar, dot);, +		} else {, +			doNext(calendar, dot);, +		int updateDayOfMonth = findNextDay(calendar, this.daysOfMonth, dayOfMonth, daysOfWeek, dayOfWeek, resets);, +		} else {, +			doNext(calendar, dot);, +			if (calendar.get(Calendar.YEAR) - dot > 4) {, +				throw new IllegalStateException("Invalid cron expression led to runaway search for next trigger");, +			}, +			doNext(calendar, dot);, +			List<Integer> resets) {, +		int max = 366;, +		if (count >= max) {, +			reset(calendar, Arrays.asList(field));, +			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0);, +		setNumberHits(this.seconds, fields[0], 0, 60);, +		setNumberHits(this.minutes, fields[1], 0, 60);, +		setNumberHits(this.hours, fields[2], 0, 24);, +		setDaysOfMonth(this.daysOfMonth, fields[3]);, +		setMonths(this.months, fields[4]);, +	private void setDaysOfMonth(BitSet bits, String field) {, +		int max = 31;, +		setNumberHits(bits, field, 0, max);, +	private void setMonths(BitSet bits, String value) {, +		int max = 12;, +		value = replaceOrdinals(value, "FOO,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC");, +		BitSet months = new BitSet(13);, +		// Months start with 1 in Cron and 0 in Calendar, so push the values first into a longer bit set, +		setNumberHits(months, value, 1, max + 1);, +		// ... and then rotate it to the front of the months, +		for (int i = 1; i <= max; i++) {, +			if (months.get(i)) {, +				bits.set(i - 1);, +			}, +		}, +	}, +, +	private void setNumberHits(BitSet bits, String value, int min, int max) {, +				int[] range = getRange(field, min, max);, +			} else {, +				int[] range = getRange(split[0], min, max);, +	private int[] getRange(String field, int min, int max) {, +			result[0] = min;, +		} else {, +		if (result[0] < min || result[1] < min) {, +			throw new IllegalArgumentException("Range less than minimum (" + min + "): " + field);, +		}, +		return cron.months.equals(this.months) && cron.daysOfMonth.equals(this.daysOfMonth), +				&& cron.daysOfWeek.equals(this.daysOfWeek) && cron.hours.equals(this.hours), +				&& cron.minutes.equals(this.minutes) && cron.seconds.equals(this.seconds);, +		return 37 + 17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() + 37 * this.daysOfWeek.hashCode(), +				+ 41 * this.hours.hashCode() + 53 * this.minutes.hashCode() + 61 * this.seconds.hashCode();, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.Arrays;, +		doNext(calendar, calendar.get(Calendar.YEAR));, +	private void doNext(Calendar calendar, int dot) {, +		} else {, +			doNext(calendar, dot);, +		} else {, +			doNext(calendar, dot);, +		int updateDayOfMonth = findNextDay(calendar, this.daysOfMonth, dayOfMonth, daysOfWeek, dayOfWeek, resets);, +		} else {, +			doNext(calendar, dot);, +			if (calendar.get(Calendar.YEAR) - dot > 4) {, +				throw new IllegalStateException("Invalid cron expression led to runaway search for next trigger");, +			}, +			doNext(calendar, dot);, +			List<Integer> resets) {, +		int max = 366;, +		if (count >= max) {, +			reset(calendar, Arrays.asList(field));, +			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0);, +		setNumberHits(this.seconds, fields[0], 0, 60);, +		setNumberHits(this.minutes, fields[1], 0, 60);, +		setNumberHits(this.hours, fields[2], 0, 24);, +		setDaysOfMonth(this.daysOfMonth, fields[3]);, +		setMonths(this.months, fields[4]);, +	private void setDaysOfMonth(BitSet bits, String field) {, +		int max = 31;, +		setNumberHits(bits, field, 0, max);, +	private void setMonths(BitSet bits, String value) {, +		int max = 12;, +		value = replaceOrdinals(value, "FOO,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC");, +		BitSet months = new BitSet(13);, +		// Months start with 1 in Cron and 0 in Calendar, so push the values first into a longer bit set, +		setNumberHits(months, value, 1, max + 1);, +		// ... and then rotate it to the front of the months, +		for (int i = 1; i <= max; i++) {, +			if (months.get(i)) {, +				bits.set(i - 1);, +			}, +		}, +	}, +, +	private void setNumberHits(BitSet bits, String value, int min, int max) {]