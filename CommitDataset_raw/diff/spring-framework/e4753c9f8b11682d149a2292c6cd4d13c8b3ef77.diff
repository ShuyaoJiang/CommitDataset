[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.java, + * <p>By default, this class acquires an early EclipseLink transaction with an early, + * JDBC Connection for non-read-only transactions. This allows for mixing JDBC and, + * JPA/EclipseLink operations in the same transaction, with cross visibility of, + * their impact. If this is not needed, set the "lazyDatabaseTransaction" flag to, + * {@code true} or consistently declare all affected transactions as read-only., + * As of Spring 4.1.2, this will reliably avoid early JDBC Connection retrieval, + * and therefore keep EclipseLink in shared cache mode., +			// (since Spring 4.1.2), +		// As of Spring 4.1.2, we're using a custom ConnectionHandle for lazy retrieval, +		// of the underlying Connection (allowing for deferred internal transaction begin, +		// within the EclipseLink EntityManager), +		return new EclipseLinkConnectionHandle(entityManager);, +	}, +, +, +	/**, +	 * {@link ConnectionHandle} implementation that lazily fetches an, +	 * EclipseLink-provided Connection on the first {@code getConnection} call -, +	 * which may never come if no application code requests a JDBC Connection., +	 * This is useful to defer the early transaction begin that obtaining a, +	 * JDBC Connection implies within an EclipseLink EntityManager., +	 */, +	private static class EclipseLinkConnectionHandle implements ConnectionHandle {, +, +		private final EntityManager entityManager;, +, +		private Connection connection;, +, +		public EclipseLinkConnectionHandle(EntityManager entityManager) {, +			this.entityManager = entityManager;, +		}, +, +		@Override, +		public Connection getConnection() {, +			if (this.connection == null) {, +				this.connection = this.entityManager.unwrap(Connection.class);, +			}, +			return this.connection;, +		}, +, +		@Override, +		public void releaseConnection(Connection con) {, +		}]