[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import java.io.IOException;, +import java.io.ObjectInputStream;, +import java.io.Serializable;, +import java.lang.reflect.Type;, +public class DependencyDescriptor implements Serializable {, +	private transient MethodParameter methodParameter;, +	private transient Field field;, +, +	private Class declaringClass;, +, +	private String methodName;, +, +	private Class[] parameterTypes;, +, +	private int parameterIndex;, +, +	private String fieldName;, +	private transient Annotation[] fieldAnnotations;, +		this.declaringClass = methodParameter.getDeclaringClass();, +		if (this.methodParameter.getMethod() != null) {, +			this.methodName = methodParameter.getMethod().getName();, +			this.parameterTypes = methodParameter.getMethod().getParameterTypes();, +		}, +		else {, +			this.parameterTypes = methodParameter.getConstructor().getParameterTypes();, +		}, +		this.parameterIndex = methodParameter.getParameterIndex();, +		this.declaringClass = field.getDeclaringClass();, +		this.fieldName = field.getName();, +	 * Determine the generic type of the wrapped parameter/field., +	 * @return the generic type (never <code>null</code>), +	 */, +	public Type getGenericDependencyType() {, +		return (this.field != null ? this.field.getGenericType() : this.methodParameter.getGenericParameterType());, +	}, +, +	/**, +, +	//---------------------------------------------------------------------, +	// Serialization support, +	//---------------------------------------------------------------------, +, +	private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {, +		// Rely on default serialization; just initialize state after deserialization., +		ois.defaultReadObject();, +, +		// Restore reflective handles (which are unfortunately not serializable), +		try {, +			if (this.fieldName != null) {, +				this.field = this.declaringClass.getDeclaredField(this.fieldName);, +			}, +			else if (this.methodName != null) {, +				this.methodParameter = new MethodParameter(, +						this.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);, +			}, +			else {, +				this.methodParameter = new MethodParameter(, +						this.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);, +			}, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not find original class structure", ex);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +import java.io.IOException;, +import java.io.ObjectInputStream;, +import java.io.Serializable;, +import java.lang.reflect.Type;, +public class DependencyDescriptor implements Serializable {, +	private transient MethodParameter methodParameter;, +	private transient Field field;, +, +	private Class declaringClass;, +, +	private String methodName;, +, +	private Class[] parameterTypes;, +, +	private int parameterIndex;, +, +	private String fieldName;, +	private transient Annotation[] fieldAnnotations;, +		this.declaringClass = methodParameter.getDeclaringClass();, +		if (this.methodParameter.getMethod() != null) {, +			this.methodName = methodParameter.getMethod().getName();, +			this.parameterTypes = methodParameter.getMethod().getParameterTypes();, +		}, +		else {, +			this.parameterTypes = methodParameter.getConstructor().getParameterTypes();, +		}, +		this.parameterIndex = methodParameter.getParameterIndex();, +		this.declaringClass = field.getDeclaringClass();, +		this.fieldName = field.getName();, +	 * Determine the generic type of the wrapped parameter/field., +	 * @return the generic type (never <code>null</code>), +	 */, +	public Type getGenericDependencyType() {]