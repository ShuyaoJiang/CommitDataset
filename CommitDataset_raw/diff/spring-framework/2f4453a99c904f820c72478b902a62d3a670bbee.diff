[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +	public static final String IMPLICIT_MODEL_SESSION_ATTRIBUTE =, +			AnnotationMethodHandlerAdapter.class.getName() + ".IMPLICIT_MODEL";, +, +	public static final String IMPLICIT_MODEL_RENDER_PARAMETER = "implicitModel";, +			if (response instanceof RenderResponse) {, +					if (request.getParameter(IMPLICIT_MODEL_RENDER_PARAMETER) != null) {, +						implicitModel = (ExtendedModelMap) session.getAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +					}, +					else {, +						session.removeAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +					}, +				actionResponse.setRenderParameter(IMPLICIT_MODEL_RENDER_PARAMETER, Boolean.TRUE.toString());, +				request.getPortletSession().setAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE, implicitModel);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +	public static final String IMPLICIT_MODEL_SESSION_ATTRIBUTE =, +			AnnotationMethodHandlerAdapter.class.getName() + ".IMPLICIT_MODEL";, +, +	public static final String IMPLICIT_MODEL_RENDER_PARAMETER = "implicitModel";, +			if (response instanceof RenderResponse) {, +					if (request.getParameter(IMPLICIT_MODEL_RENDER_PARAMETER) != null) {, +						implicitModel = (ExtendedModelMap) session.getAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +					}, +					else {, +						session.removeAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +					}, +				actionResponse.setRenderParameter(IMPLICIT_MODEL_RENDER_PARAMETER, Boolean.TRUE.toString());, +				request.getPortletSession().setAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE, implicitModel);, +++ b/org.springframework.web.portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, +import org.springframework.web.bind.annotation.ExceptionHandler;, +import org.springframework.web.bind.annotation.SessionAttributes;, +import org.springframework.web.bind.support.SessionStatus;, +import org.springframework.web.portlet.bind.MissingPortletRequestParameterException;, +	@Test, +	public void adaptedHandleMethods4() throws Exception {, +		doTestAdaptedHandleMethods(MyAdaptedController4.class);, +	}, +, +		MockRenderRequest request = new MockRenderRequest(PortletMode.VIEW);, +		request.setSession(actionRequest.getPortletSession());, +		request.setParameters(actionResponse.getRenderParameterMap());, +		request.addParameter("name", "name1");, +		request.addParameter("age", "value2");, +		MockRenderResponse response = new MockRenderResponse();, +		portlet.render(request, response);, +		assertEquals("test-name1-typeMismatch", response.getContentAsString());, +		assertNull(request.getPortletSession().getAttribute("testBean"));, +, +		request = new MockRenderRequest(PortletMode.EDIT);, +		response = new MockRenderResponse();, +		request.setSession(actionRequest.getPortletSession());, +		request.setSession(actionRequest.getPortletSession());, +	@SessionAttributes("testBean"), +	private static class MyAdaptedController4 {, +, +		@RequestMapping("VIEW"), +		@ActionMapping, +		public void myHandle(Model model, ActionResponse response, SessionStatus status) {, +			TestBean tb = new TestBean();, +			tb.setJedi(true);, +			model.addAttribute("testBean", tb);, +			status.setComplete();, +			response.setRenderParameter("test", "value");, +		}, +, +		@RequestMapping("EDIT"), +		@RenderMapping, +		public void myHandle(@RequestParam("param1") String p1, int param2, RenderResponse response,, +				@RequestHeader("header1") String h1, @CookieValue("cookie1") String c1) throws IOException {, +			response.getWriter().write("test-" + p1 + "-" + param2 + "-" + h1 + "-" + c1);, +		}, +, +		@RequestMapping("HELP"), +		@RenderMapping, +		public void myHandle(@ModelAttribute("tb") TestBean tb, RenderResponse response) throws IOException {, +			response.getWriter().write("test-" + tb.getName() + "-" + tb.getAge());, +		}, +, +		@RequestMapping("VIEW"), +		@RenderMapping, +		public void myHandle(@ModelAttribute("testBean") TestBean tb, Errors errors, RenderResponse response, PortletSession session) throws IOException {, +			assertTrue(tb.isJedi());, +			assertNull(session.getAttribute("testBean"));, +			response.getWriter().write("test-" + tb.getName() + "-" + errors.getFieldError("age").getCode());, +		}, +	}, +, +, +	@Controller, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +	public static final String IMPLICIT_MODEL_SESSION_ATTRIBUTE =, +			AnnotationMethodHandlerAdapter.class.getName() + ".IMPLICIT_MODEL";, +, +	public static final String IMPLICIT_MODEL_RENDER_PARAMETER = "implicitModel";, +			if (response instanceof RenderResponse) {, +					if (request.getParameter(IMPLICIT_MODEL_RENDER_PARAMETER) != null) {, +						implicitModel = (ExtendedModelMap) session.getAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +					}, +					else {, +						session.removeAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);]