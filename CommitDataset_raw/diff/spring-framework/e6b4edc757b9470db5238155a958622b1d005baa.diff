[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Converts this {@code ClientResponse} into a {@code ResponseEntity}., +	 * @param responseClass the type of response contained in the {@code ResponseEntity}, +	 * @param <T> the response type, +	 * @return a mono containing the response entity, +	 */, +	<T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Converts this {@code ClientResponse} into a {@code ResponseEntity}., +	 * @param responseClass the type of response contained in the {@code ResponseEntity}, +	 * @param <T> the response type, +	 * @return a mono containing the response entity, +	 */, +	<T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.http.ResponseEntity;, +	@Override, +	public <T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass) {, +		return bodyToMono(responseClass), +				.map(t -> new ResponseEntity<>(t, headers().asHttpHeaders(), statusCode()));, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Converts this {@code ClientResponse} into a {@code ResponseEntity}., +	 * @param responseClass the type of response contained in the {@code ResponseEntity}, +	 * @param <T> the response type, +	 * @return a mono containing the response entity, +	 */, +	<T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.http.ResponseEntity;, +	@Override, +	public <T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass) {, +		return bodyToMono(responseClass), +				.map(t -> new ResponseEntity<>(t, headers().asHttpHeaders(), statusCode()));, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import reactor.core.publisher.Flux;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +, +		@Override, +		public <T> Mono<T> retrieve(BodyExtractor<T, ? super ClientHttpResponse> extractor) {, +			return exchange().map(clientResponse -> clientResponse.body(extractor));, +		}, +, +		@Override, +		public <T> Mono<T> retrieveMono(Class<T> responseType) {, +			return exchange().then(clientResponse -> clientResponse.bodyToMono(responseType));, +		}, +, +		@Override, +		public <T> Flux<T> retrieveFlux(Class<T> responseType) {, +			return exchange().flatMap(clientResponse -> clientResponse.bodyToFlux(responseType));, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Converts this {@code ClientResponse} into a {@code ResponseEntity}., +	 * @param responseClass the type of response contained in the {@code ResponseEntity}, +	 * @param <T> the response type, +	 * @return a mono containing the response entity, +	 */, +	<T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.http.ResponseEntity;, +	@Override, +	public <T> Mono<ResponseEntity<T>> toResponseEntity(Class<T> responseClass) {, +		return bodyToMono(responseClass), +				.map(t -> new ResponseEntity<>(t, headers().asHttpHeaders(), statusCode()));, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import reactor.core.publisher.Flux;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +, +		@Override, +		public <T> Mono<T> retrieve(BodyExtractor<T, ? super ClientHttpResponse> extractor) {, +			return exchange().map(clientResponse -> clientResponse.body(extractor));, +		}, +, +		@Override, +		public <T> Mono<T> retrieveMono(Class<T> responseType) {, +			return exchange().then(clientResponse -> clientResponse.bodyToMono(responseType));, +		}, +, +		@Override, +		public <T> Flux<T> retrieveFlux(Class<T> responseType) {, +			return exchange().flatMap(clientResponse -> clientResponse.bodyToFlux(responseType));, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java]