[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * does not have a default value. Nested maps and nested arrays of maps, +	 * will be recursively synthesized into nested annotations or nested, +	 * arrays of annotations, respectively., +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation), +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean), +	 * <em>Synthesize</em> an array of annotations from the supplied array, +	 * of {@code annotations} by creating a new array of the same size and, +	 * type and populating it with {@linkplain #synthesizeAnnotation(Annotation), +	 * synthesized} versions of the annotations from the input array., +	 * <em>Synthesize</em> an array of annotations from the supplied array, +	 * of {@code maps} of annotation attributes by creating a new array of, +	 * {@code annotationType} with the same size and populating it with, +	 * {@linkplain #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * synthesized} versions of the maps from the input array., +	 * @param maps the array of maps of annotation attributes to synthesize, +	 * @param annotationType the type of annotations to synthesize; never, +	 * {@code null}, +	 * @return a new array of synthesized annotations, or {@code null} if, +	 * the supplied array is {@code null}, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @since 4.2.1, +	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * @see #synthesizeAnnotationArray(Annotation[], AnnotatedElement), +	 */, +	@SuppressWarnings("unchecked"), +	static <A extends Annotation> A[] synthesizeAnnotationArray(Map<String, Object>[] maps, Class<A> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +, +		if (maps == null) {, +			return null;, +		}, +, +		A[] synthesized = (A[]) Array.newInstance(annotationType, maps.length);, +		for (int i = 0; i < maps.length; i++) {, +			synthesized[i] = synthesizeAnnotation(maps[i], annotationType, null);, +		}, +		return synthesized;, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * does not have a default value. Nested maps and nested arrays of maps, +	 * will be recursively synthesized into nested annotations or nested, +	 * arrays of annotations, respectively., +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation), +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean), +	 * <em>Synthesize</em> an array of annotations from the supplied array, +	 * of {@code annotations} by creating a new array of the same size and, +	 * type and populating it with {@linkplain #synthesizeAnnotation(Annotation), +	 * synthesized} versions of the annotations from the input array., +	 * <em>Synthesize</em> an array of annotations from the supplied array, +	 * of {@code maps} of annotation attributes by creating a new array of, +	 * {@code annotationType} with the same size and populating it with, +	 * {@linkplain #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * synthesized} versions of the maps from the input array., +	 * @param maps the array of maps of annotation attributes to synthesize, +	 * @param annotationType the type of annotations to synthesize; never, +	 * {@code null}, +	 * @return a new array of synthesized annotations, or {@code null} if, +	 * the supplied array is {@code null}, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @since 4.2.1, +	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * @see #synthesizeAnnotationArray(Annotation[], AnnotatedElement), +	 */, +	@SuppressWarnings("unchecked"), +	static <A extends Annotation> A[] synthesizeAnnotationArray(Map<String, Object>[] maps, Class<A> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +, +		if (maps == null) {, +			return null;, +		}, +, +		A[] synthesized = (A[]) Array.newInstance(annotationType, maps.length);, +		for (int i = 0; i < maps.length; i++) {, +			synthesized[i] = synthesizeAnnotation(maps[i], annotationType, null);, +		}, +		return synthesized;, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +	 * Enrich and validate the supplied <em>attributes</em> map by ensuring, +	 * <p>If an entry is a map (presumably of annotation attributes), an, +	 * attempt will be made to synthesize an annotation from it. Similarly,, +	 * if an entry is an array of maps, an attempt will be made to synthesize, +	 * an array of annotations from those maps., +	 * either to the value of its alias (if an alias exists) or to the, +	@SuppressWarnings("unchecked"), +			Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) {, +		Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes);, +			// finally, ensure correct type, +			Class<?> requiredReturnType = attributeMethod.getReturnType();, +			Class<? extends Object> actualReturnType = attributeValue.getClass();, +			if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) {, +				boolean converted = false;, +]