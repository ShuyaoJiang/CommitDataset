[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +		String qualifier = txAttr.getQualifier();, +			return determineQualifiedTransactionManager(qualifier);, +		else if (StringUtils.hasText(this.transactionManagerBeanName)) {, +			return determineQualifiedTransactionManager(this.transactionManagerBeanName);, +	private PlatformTransactionManager determineQualifiedTransactionManager(String qualifier) {, +		PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +		if (txManager == null) {, +			txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +					this.beanFactory, PlatformTransactionManager.class, qualifier);, +			this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +		}, +		return txManager;, +	}, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +		String qualifier = txAttr.getQualifier();, +			return determineQualifiedTransactionManager(qualifier);, +		else if (StringUtils.hasText(this.transactionManagerBeanName)) {, +			return determineQualifiedTransactionManager(this.transactionManagerBeanName);, +	private PlatformTransactionManager determineQualifiedTransactionManager(String qualifier) {, +		PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +		if (txManager == null) {, +			txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +					this.beanFactory, PlatformTransactionManager.class, qualifier);, +			this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +		}, +		return txManager;, +	}, +, +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/TransactionInterceptorTests.java, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, null);, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, null);, +		TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory);, +		TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory);, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, beanFactory);, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName(, +				"defaultTransactionManager", beanFactory);, +	public void determineTransactionManagerWithEmptyQualifierAndDefaultName() {, +		BeanFactory beanFactory = mock(BeanFactory.class);, +		PlatformTransactionManager defaultTransactionManager, +				= associateTransactionManager(beanFactory, "defaultTransactionManager");, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName(, +				"defaultTransactionManager", beanFactory);, +, +		DefaultTransactionAttribute attribute = new DefaultTransactionAttribute();, +		attribute.setQualifier("");, +, +		assertSame(defaultTransactionManager, ti.determineTransactionManager(attribute));, +	}, +, +	@Test, +		TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory);, +		TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName(, +				"fooTransactionManager", beanFactory);, +		TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory);, +	private TransactionInterceptor createTransactionInterceptor(BeanFactory beanFactory,, +			String transactionManagerName, PlatformTransactionManager transactionManager) {, +		if (transactionManagerName != null) {, +			ti.setTransactionManagerBeanName(transactionManagerName);, +, +		}, +	private TransactionInterceptor transactionInterceptorWithTransactionManager(, +			PlatformTransactionManager transactionManager, BeanFactory beanFactory) {, +, +		return createTransactionInterceptor(beanFactory, null, transactionManager);, +	}, +, +	private TransactionInterceptor transactionInterceptorWithTransactionManagerName(, +			String transactionManagerName, BeanFactory beanFactory) {, +, +		return createTransactionInterceptor(beanFactory, transactionManagerName, null);, +	}, +, +	private TransactionInterceptor simpleTransactionInterceptor(BeanFactory beanFactory) {, +		return createTransactionInterceptor(beanFactory, null, null);]