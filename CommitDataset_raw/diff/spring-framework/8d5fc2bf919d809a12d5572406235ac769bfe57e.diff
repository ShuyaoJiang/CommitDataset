[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else {, +				Collections.sort(acceptedMediaTypes);, +			}, +							messageConverter.write(returnValue, acceptedMediaType, outputMessage);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else {, +				Collections.sort(acceptedMediaTypes);, +			}, +							messageConverter.write(returnValue, acceptedMediaType, outputMessage);, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +		return supports(clazz) && canRead(mediaType);, +	}, +, +	/**, +	 * Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported media types} include the given media, +	 * type., +	 *, +	 * @param mediaType the media type, +	 * @return true if the supported media types include the media type, or if the media type is {@code null}, +	 */, +	protected boolean canRead(MediaType mediaType) {, +		if (mediaType == null) {, +			return true;, +		}, +		for (MediaType supportedMediaType : getSupportedMediaTypes()) {, +			if (supportedMediaType.includes(mediaType)) {, +				return true;, +			}, +		}, +		return false;, +		return supports(clazz) && canWrite(mediaType);, +	 * Returns true if the given media type includes any of the, +	 * {@linkplain #setSupportedMediaTypes(List) supported media types}., +	protected boolean canWrite(MediaType mediaType) {, +			if (mediaType.includes(supportedMediaType)) {, +		if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else {, +				Collections.sort(acceptedMediaTypes);, +			}, +							messageConverter.write(returnValue, acceptedMediaType, outputMessage);, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +		return supports(clazz) && canRead(mediaType);, +	}, +, +	/**, +	 * Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported media types} include the given media, +	 * type., +	 *, +	 * @param mediaType the media type, +	 * @return true if the supported media types include the media type, or if the media type is {@code null}, +	 */, +	protected boolean canRead(MediaType mediaType) {, +		if (mediaType == null) {, +			return true;, +		}, +		for (MediaType supportedMediaType : getSupportedMediaTypes()) {, +			if (supportedMediaType.includes(mediaType)) {, +				return true;, +			}, +		}, +		return false;, +		return supports(clazz) && canWrite(mediaType);, +	 * Returns true if the given media type includes any of the, +	 * {@linkplain #setSupportedMediaTypes(List) supported media types}., +	protected boolean canWrite(MediaType mediaType) {, +			if (mediaType.includes(supportedMediaType)) {, +		if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +		return objectMapper.canDeserialize(javaType) && canRead(mediaType);, +		return objectMapper.canSerialize(clazz) && canWrite(mediaType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else {, +				Collections.sort(acceptedMediaTypes);, +			}, +							messageConverter.write(returnValue, acceptedMediaType, outputMessage);, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +		return supports(clazz) && canRead(mediaType);, +	}, +, +	/**, +	 * Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported media types} include the given media, +	 * type., +	 *, +	 * @param mediaType the media type, +	 * @return true if the supported media types include the media type, or if the media type is {@code null}, +	 */, +	protected boolean canRead(MediaType mediaType) {, +		if (mediaType == null) {, +			return true;, +		}, +		for (MediaType supportedMediaType : getSupportedMediaTypes()) {, +			if (supportedMediaType.includes(mediaType)) {, +				return true;, +			}, +		}, +		return false;, +		return supports(clazz) && canWrite(mediaType);, +	 * Returns true if the given media type includes any of the]