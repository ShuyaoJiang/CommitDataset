[+++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	boolean canRead(Type type, Class<?> contextClass, MediaType mediaType);, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	boolean canRead(Type type, Class<?> contextClass, MediaType mediaType);, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +		return canRead((Type) clazz, null, mediaType);, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		JavaType javaType = getJavaType(type, contextClass);, +		JavaType javaType = getJavaType(clazz, null);, +	public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +		JavaType javaType = getJavaType(type, contextClass);, +	 * Return the Jackson {@link JavaType} for the specified type and context class., +	 * <p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}, +	 * or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	 * signature, can be {@code null}, +	protected JavaType getJavaType(Type type, Class<?> contextClass) {, +		return (contextClass != null) ?, +			this.objectMapper.getTypeFactory().constructType(type, contextClass) :, +			this.objectMapper.constructType(type);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	boolean canRead(Type type, Class<?> contextClass, MediaType mediaType);, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +		return canRead((Type) clazz, null, mediaType);, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		JavaType javaType = getJavaType(type, contextClass);, +		JavaType javaType = getJavaType(clazz, null);, +	public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +		JavaType javaType = getJavaType(type, contextClass);, +	 * Return the Jackson {@link JavaType} for the specified type and context class., +	 * <p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}, +	 * or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	 * signature, can be {@code null}, +	protected JavaType getJavaType(Type type, Class<?> contextClass) {, +		return (contextClass != null) ?, +			this.objectMapper.getTypeFactory().constructType(type, contextClass) :, +			this.objectMapper.constructType(type);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +		return canRead((Type) clazz, null, mediaType);, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		JavaType javaType = getJavaType(type, contextClass);, +		JavaType javaType = getJavaType(clazz, null);, +	public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +		JavaType javaType = getJavaType(type, contextClass);, +	 * Return the Jackson {@link JavaType} for the specified type and context class., +	 * <p>The default implementation returns {@link TypeFactory#type(java.lang.reflect.Type)}, +	 * or {@code TypeFactory.type(type, TypeFactory.type(contextClass))},, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	protected JavaType getJavaType(Type type, Class<?> contextClass) {, +		return (contextClass != null) ?, +			TypeFactory.type(type, TypeFactory.type(contextClass)) :, +			TypeFactory.type(type);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	boolean canRead(Type type, Class<?> contextClass, MediaType mediaType);, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +		return canRead((Type) clazz, null, mediaType);, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		JavaType javaType = getJavaType(type, contextClass);, +		JavaType javaType = getJavaType(clazz, null);, +	public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage), +		JavaType javaType = getJavaType(type, contextClass);, +	 * Return the Jackson {@link JavaType} for the specified type and context class., +	 * <p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}, +	 * or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},, +	 * @param contextClass a context class for the target type, for example a class, +	 * in which the target type appears in a method signature, can be {@code null}, +	 * signature, can be {@code null}, +	protected JavaType getJavaType(Type type, Class<?> contextClass) {, +		return (contextClass != null) ?, +			this.objectMapper.getTypeFactory().constructType(type, contextClass) :, +			this.objectMapper.constructType(type);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java]