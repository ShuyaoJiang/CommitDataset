[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/MessageConverterResultHandlerTests.java, +import java.io.Serializable;, +import java.util.Collections;, +import com.fasterxml.jackson.annotation.JsonTypeInfo;, +import com.fasterxml.jackson.annotation.JsonTypeName;, +import static org.springframework.http.MediaType.APPLICATION_JSON;, +import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8;, +import static org.springframework.web.reactive.HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +	@Test // SPR-13631, +	public void useDefaultCharset() throws Exception {, +		this.exchange.getAttributes().put(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE,, +				Collections.singleton(APPLICATION_JSON));, +, +		String body = "foo";, +		ResolvableType bodyType = ResolvableType.forType(String.class);, +		this.resultHandler.writeBody(this.exchange, body, bodyType).block(Duration.ofSeconds(5));, +, +		assertEquals(APPLICATION_JSON_UTF8, this.response.getHeaders().getContentType());, +	}, +, +	@Test // SPR-12811, +	@Ignore, +	public void jacksonTypeOfListElement() throws Exception {, +		List<ParentClass> body = Arrays.asList(new Foo("foo"), new Bar("bar"));, +		ResolvableType bodyType = ResolvableType.forClassWithGenerics(List.class, ParentClass.class);, +		this.resultHandler.writeBody(this.exchange, body, bodyType).block(Duration.ofSeconds(5));, +, +		assertEquals(APPLICATION_JSON_UTF8, this.response.getHeaders().getContentType());, +		assertResponseBody("[{\"type\":\"foo\",\"parentProperty\":\"foo\"}," +, +				"{\"type\":\"bar\",\"parentProperty\":\"bar\"}]");, +	}, +, +	@Test // SPR-13318, +	@Ignore, +	public void jacksonTypeWithSubType() throws Exception {, +		SimpleBean body = new SimpleBean(123L, "foo");, +		ResolvableType bodyType = ResolvableType.forClass(Identifiable.class);, +		this.resultHandler.writeBody(this.exchange, body, bodyType).block(Duration.ofSeconds(5));, +, +		assertEquals(APPLICATION_JSON_UTF8, this.response.getHeaders().getContentType());, +		assertResponseBody("{\"id\":123,\"name\":\"foo\"}");, +	}, +, +	@Test // SPR-13318, +	@Ignore, +	public void jacksonTypeWithSubTypeOfListElement() throws Exception {, +		List<SimpleBean> body = Arrays.asList(new SimpleBean(123L, "foo"), new SimpleBean(456L, "bar"));, +		ResolvableType bodyType = ResolvableType.forClassWithGenerics(List.class, Identifiable.class);, +		this.resultHandler.writeBody(this.exchange, body, bodyType).block(Duration.ofSeconds(5));, +, +		assertEquals(APPLICATION_JSON_UTF8, this.response.getHeaders().getContentType());, +		assertResponseBody("[{\"id\":123,\"name\":\"foo\"},{\"id\":456,\"name\":\"bar\"}]");, +	}, +, +	private void assertResponseBody(String responseBody) {, +		TestSubscriber.subscribe(this.response.getBody()), +				.assertValuesWith(buf -> assertEquals(responseBody,, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	}, +, +, +	@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type"), +	@SuppressWarnings("unused"), +	private static class ParentClass {, +, +		private String parentProperty;, +, +		public ParentClass() {, +		}, +, +		public ParentClass(String parentProperty) {, +			this.parentProperty = parentProperty;, +		}, +, +		public String getParentProperty() {, +			return parentProperty;, +		}, +, +		public void setParentProperty(String parentProperty) {, +			this.parentProperty = parentProperty;, +		}, +	}, +, +	@JsonTypeName("foo"), +	private static class Foo extends ParentClass {, +, +		public Foo(String parentProperty) {, +			super(parentProperty);, +		}, +	}, +, +	@JsonTypeName("bar"), +	private static class Bar extends ParentClass {, +, +		public Bar(String parentProperty) {, +			super(parentProperty);, +		}, +	}, +, +	private interface Identifiable extends Serializable {]