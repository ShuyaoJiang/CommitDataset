[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> attributes;, +, +		this(uri, headers, principal, protocol, Collections.emptyMap());, +	}, +, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol (may be {@code null}), +	 * @since 5.1, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			@Nullable String protocol, Map<String, Object> attributes) {, +, +		Assert.notNull(principal, "'attributes' is required");, +, +		this.attributes = attributes;, +	/**, +	 * Attributes extracted from the handshake request to be added to the, +	 * WebSocket session., +	 * @since 5.1, +	 */, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> attributes;, +, +		this(uri, headers, principal, protocol, Collections.emptyMap());, +	}, +, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol (may be {@code null}), +	 * @since 5.1, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			@Nullable String protocol, Map<String, Object> attributes) {, +, +		Assert.notNull(principal, "'attributes' is required");, +, +		this.attributes = attributes;, +	/**, +	 * Attributes extracted from the handshake request to be added to the, +	 * WebSocket session., +	 * @since 5.1, +	 */, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractWebSocketSession.java, +	 * Create a new WebSocket session., +		this.attributes.putAll(handshakeInfo.getAttributes());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.Map;, +	private final Map<String, Object> attributes;, +, +		this(uri, headers, principal, protocol, Collections.emptyMap());, +	}, +, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol (may be {@code null}), +	 * @since 5.1, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			@Nullable String protocol, Map<String, Object> attributes) {, +, +		Assert.notNull(principal, "'attributes' is required");, +, +		this.attributes = attributes;, +	/**, +	 * Attributes extracted from the handshake request to be added to the, +	 * WebSocket session., +	 * @since 5.1, +	 */, +	public Map<String, Object> getAttributes() {, +		return this.attributes;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractWebSocketSession.java]