[+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Simple {@link BeanPostProcessor} that checks JSR-303 constraint annotations, + * in Spring-managed beans, throwing an initialization exception in case of, + * constraint violations right before calling the bean's init method (if any)., + *, +	private Validator validator;, +, +	private boolean afterInitialization = false;, +	/**, +	 * Set the JSR-303 Validator to delegate to for validating beans., +	 * <p>Default is the default ValidatorFactory's default Validator., +	 */, +	/**, +	 * Set the JSR-303 ValidatorFactory to delegate to for validating beans,, +	 * using its default Validator., +	 * <p>Default is the default ValidatorFactory's default Validator., +	 * @see javax.validation.ValidatorFactory#getValidator(), +	 */, +	/**, +	 * Choose whether to perform validation after bean initialization, +	 * (i.e. after init methods) instead of before (which is the default)., +	 * <p>Default is "false" (before initialization). Switch this to "true", +	 * (after initialization) if you would like to give init methods a chance, +	 * to populate constrained fields before they get validated., +	 */, +	public void setAfterInitialization(boolean afterInitialization) {, +		this.afterInitialization = afterInitialization;, +	}, +, +			this.validator = Validation.buildDefaultValidatorFactory().getValidator();, +, +		if (!this.afterInitialization) {, +			doValidate(bean);, +		}, +		if (this.afterInitialization) {, +			doValidate(bean);, +		}, +		return bean;, +	}, +, +, +	/**, +	 * Perform validation of the given bean., +	 * @param bean the bean instance to validate, +	 * @see javax.validation.Validator#validate, +	 */, +	protected void doValidate(Object bean) {, +++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessor.java, + * Simple {@link BeanPostProcessor} that checks JSR-303 constraint annotations, + * in Spring-managed beans, throwing an initialization exception in case of, + * constraint violations right before calling the bean's init method (if any)., + *, +	private Validator validator;, +, +	private boolean afterInitialization = false;, +	/**, +	 * Set the JSR-303 Validator to delegate to for validating beans., +	 * <p>Default is the default ValidatorFactory's default Validator., +	 */, +	/**, +	 * Set the JSR-303 ValidatorFactory to delegate to for validating beans,, +	 * using its default Validator., +	 * <p>Default is the default ValidatorFactory's default Validator., +	 * @see javax.validation.ValidatorFactory#getValidator(), +	 */, +	/**, +	 * Choose whether to perform validation after bean initialization, +	 * (i.e. after init methods) instead of before (which is the default)., +	 * <p>Default is "false" (before initialization). Switch this to "true", +	 * (after initialization) if you would like to give init methods a chance, +	 * to populate constrained fields before they get validated., +	 */, +	public void setAfterInitialization(boolean afterInitialization) {, +		this.afterInitialization = afterInitialization;, +	}, +, +			this.validator = Validation.buildDefaultValidatorFactory().getValidator();, +, +		if (!this.afterInitialization) {, +			doValidate(bean);, +		}, +		if (this.afterInitialization) {, +			doValidate(bean);, +		}, +		return bean;, +	}, +, +, +	/**, +	 * Perform validation of the given bean., +	 * @param bean the bean instance to validate, +	 * @see javax.validation.Validator#validate, +	 */, +	protected void doValidate(Object bean) {, +++ b/org.springframework.context/src/test/java/org/springframework/validation/beanvalidation/BeanValidationPostProcessorTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]