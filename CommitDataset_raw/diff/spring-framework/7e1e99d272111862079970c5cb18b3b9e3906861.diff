[+++ b/src/asciidoc/appendix.adoc, +[[spring-appendices]], += Appendices, +, +, +, +, +, +[[classic-spring]], +== Classic Spring Usage, +This appendix discusses some classic Spring usage patterns as a reference for developers, +maintaining legacy Spring applications. These usage patterns no longer reflect the, +recommended way of using these features and the current recommended usage is covered in, +the respective sections of the reference manual., +, +, +, +, +[[classic-spring-orm]], +=== Classic ORM usage, +This section documents the classic usage patterns that you might encounter in a legacy, +Spring application. For the currently recommended usage patterns, please refer to the, +<<orm>> chapter., +, +, +, +[[classic-spring-hibernate]], +==== Hibernate, +For the currently recommended usage patterns for Hibernate see <<orm-hibernate>>, +, +, +[[orm-hibernate-template]], +===== the HibernateTemplate, +, +The basic programming model for templating looks as follows, for methods that can be, +part of any custom data access object or business service. There are no restrictions on, +the implementation of the surrounding object at all, it just needs to provide a, +Hibernate `SessionFactory`. It can get the latter from anywhere, but preferably as bean, +reference from a Spring IoC container - via a simple `setSessionFactory(..)` bean, +property setter. The following snippets show a DAO definition in a Spring container,, +referencing the above defined `SessionFactory`, and an example for a DAO method, +implementation., +, +[source,xml], +[subs="verbatim,quotes"], +----, +<beans>, +, +  <bean id="myProductDao" class="product.ProductDaoImpl">, +    <property name="sessionFactory" ref="mySessionFactory"/>, +  </bean>, +, +</beans>, +----, +, +[source,java], +[subs="verbatim,quotes"], +----, +public class ProductDaoImpl implements ProductDao {, +, +    private HibernateTemplate hibernateTemplate;, +, +    public void setSessionFactory(SessionFactory sessionFactory) {, +        this.hibernateTemplate = new HibernateTemplate(sessionFactory);, +    }, +, +    public Collection loadProductsByCategory(String category) throws DataAccessException {, +        return this.hibernateTemplate.find("from test.Product product where product.category=?", category);, +    }, +}, +----, +, +The `HibernateTemplate` class provides many methods that mirror the methods exposed on, +the Hibernate `Session` interface, in addition to a number of convenience methods such, +as the one shown above. If you need access to the `Session` to invoke methods that are, +not exposed on the `HibernateTemplate`, you can always drop down to a callback-based, +approach like so., +, +[source,java], +[subs="verbatim,quotes"], +----, +public class ProductDaoImpl implements ProductDao {, +, +    private HibernateTemplate hibernateTemplate;, +, +    public void setSessionFactory(SessionFactory sessionFactory) {, +        this.hibernateTemplate = new HibernateTemplate(sessionFactory);, +    }, +, +    public Collection loadProductsByCategory(final String category) throws DataAccessException {, +        return this.hibernateTemplate.execute(new HibernateCallback() {, +, +            public Object doInHibernate(Session session) {, +                Criteria criteria = session.createCriteria(Product.class);, +                criteria.add(Expression.eq("category", category));, +                criteria.setMaxResults(6);, +                return criteria.list();, +            }, +        };, +    }]