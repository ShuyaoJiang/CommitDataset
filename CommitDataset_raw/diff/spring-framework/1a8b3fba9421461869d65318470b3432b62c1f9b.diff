[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * Copyright 2002-2019 the original author or authors., + * the {@link Lazy @Lazy} annotation to indicate that all {@code @Bean} methods declared, + * within the class are by default lazily initialized. Note that {@code @Lazy} may be used, + * on individual {@code @Bean} methods as well., + * <li>Configuration classes must be non-final (allowing for subclasses at runtime),, + * unless the {@link #proxyBeanMethods() proxyBeanMethods} flag is set to {@code false}, + * in which case no runtime-generated subclass is necessary., + * @author Juergen Hoeller, +	/**, +	 * Specify whether {@code @Bean} methods should get proxied in order to enforce, +	 * bean lifecycle behavior, e.g. to return shared singleton bean instances even, +	 * in case of direct {@code @Bean} method calls in user code. This feature, +	 * requires method interception, implemented through a runtime-generated CGLIB, +	 * subclass which comes with limitations such as the configuration class and, +	 * its methods not being allowed to declare {@code final}., +	 * <p>The default is {@code true}, allowing for 'inter-bean references' within, +	 * the configuration class as well as for external calls to this configuration's, +	 * {@code @Bean} methods, e.g. from another configuration class. If this is not, +	 * needed since each of this particular configuration's {@code @Bean} methods, +	 * is self-contained and designed as a plain factory method for container use,, +	 * switch this flag to {@code false} in order to avoid CGLIB subclass processing., +	 * <p>Turning off bean method interception effectively processes {@code @Bean}, +	 * methods individually like when declared on non-{@code @Configuration} classes,, +	 * a.k.a. "@Bean Lite Mode" (see {@link Bean @Bean's javadoc}). It is therefore, +	 * behaviorally equivalent to removing the {@code @Configuration} stereotype., +	 * @since 5.2, +	 */, +	boolean proxyBeanMethods() default true;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * Copyright 2002-2019 the original author or authors., + * the {@link Lazy @Lazy} annotation to indicate that all {@code @Bean} methods declared, + * within the class are by default lazily initialized. Note that {@code @Lazy} may be used, + * on individual {@code @Bean} methods as well., + * <li>Configuration classes must be non-final (allowing for subclasses at runtime),, + * unless the {@link #proxyBeanMethods() proxyBeanMethods} flag is set to {@code false}, + * in which case no runtime-generated subclass is necessary., + * @author Juergen Hoeller, +	/**, +	 * Specify whether {@code @Bean} methods should get proxied in order to enforce, +	 * bean lifecycle behavior, e.g. to return shared singleton bean instances even, +	 * in case of direct {@code @Bean} method calls in user code. This feature, +	 * requires method interception, implemented through a runtime-generated CGLIB, +	 * subclass which comes with limitations such as the configuration class and, +	 * its methods not being allowed to declare {@code final}., +	 * <p>The default is {@code true}, allowing for 'inter-bean references' within, +	 * the configuration class as well as for external calls to this configuration's, +	 * {@code @Bean} methods, e.g. from another configuration class. If this is not, +	 * needed since each of this particular configuration's {@code @Bean} methods, +	 * is self-contained and designed as a plain factory method for container use,, +	 * switch this flag to {@code false} in order to avoid CGLIB subclass processing., +	 * <p>Turning off bean method interception effectively processes {@code @Bean}, +	 * methods individually like when declared on non-{@code @Configuration} classes,, +	 * a.k.a. "@Bean Lite Mode" (see {@link Bean @Bean's javadoc}). It is therefore, +	 * behaviorally equivalent to removing the {@code @Configuration} stereotype., +	 * @since 5.2, +	 */, +	boolean proxyBeanMethods() default true;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2019 the original author or authors., +		Map<String, Object> config = metadata.getAnnotationAttributes(Configuration.class.getName());, +		if (config != null && !Boolean.FALSE.equals(config.get("proxyBeanMethods"))) {, +		else if (config != null || isConfigurationCandidate(metadata)) {, +	 * @return {@code true} if the given class is to be registered for, +	 * configuration class processing; {@code false} otherwise, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * Copyright 2002-2019 the original author or authors., + * the {@link Lazy @Lazy} annotation to indicate that all {@code @Bean} methods declared, + * within the class are by default lazily initialized. Note that {@code @Lazy} may be used, + * on individual {@code @Bean} methods as well., + * <li>Configuration classes must be non-final (allowing for subclasses at runtime),, + * unless the {@link #proxyBeanMethods() proxyBeanMethods} flag is set to {@code false}, + * in which case no runtime-generated subclass is necessary., + * @author Juergen Hoeller, +	/**, +	 * Specify whether {@code @Bean} methods should get proxied in order to enforce, +	 * bean lifecycle behavior, e.g. to return shared singleton bean instances even, +	 * in case of direct {@code @Bean} method calls in user code. This feature, +	 * requires method interception, implemented through a runtime-generated CGLIB, +	 * subclass which comes with limitations such as the configuration class and, +	 * its methods not being allowed to declare {@code final}., +	 * <p>The default is {@code true}, allowing for 'inter-bean references' within, +	 * the configuration class as well as for external calls to this configuration's, +	 * {@code @Bean} methods, e.g. from another configuration class. If this is not, +	 * needed since each of this particular configuration's {@code @Bean} methods, +	 * is self-contained and designed as a plain factory method for container use,, +	 * switch this flag to {@code false} in order to avoid CGLIB subclass processing., +	 * <p>Turning off bean method interception effectively processes {@code @Bean}, +	 * methods individually like when declared on non-{@code @Configuration} classes,, +	 * a.k.a. "@Bean Lite Mode" (see {@link Bean @Bean's javadoc}). It is therefore, +	 * behaviorally equivalent to removing the {@code @Configuration} stereotype., +	 * @since 5.2, +	 */, +	boolean proxyBeanMethods() default true;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2019 the original author or authors., +		Map<String, Object> config = metadata.getAnnotationAttributes(Configuration.class.getName());]