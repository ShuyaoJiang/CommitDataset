[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, + * Central dispatcher for HTTP request handlers/controllers, e.g. for web UI controllers or HTTP-based remote service, + * exporters. Dispatches to registered handlers for processing a web request, providing convenient mapping and exception, + * handling facilities., + * <p>This servlet is very flexible: It can be used with just about any workflow, with the installation of the, + * appropriate adapter classes. It offers the following functionality that distinguishes it from other request-driven, + * <ul> <li>It is based around a JavaBeans configuration mechanism., + * <li>It can use any {@link HandlerMapping} implementation - pre-built or provided as part of an application - to, + * control the routing of requests to handler objects. Default is {@link org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping}, + * and {@link org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping}. HandlerMapping objects, + * can be defined as beans in the servlet's application context, implementing the HandlerMapping interface, overriding, + * the default HandlerMapping if present. HandlerMappings can be given any bean name (they are tested by type)., + * <li>It can use any {@link HandlerAdapter}; this allows for using any handler interface. Default adapters are {@link, + * org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter}, {@link org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter},, + * for Spring's {@link org.springframework.web.HttpRequestHandler} and {@link org.springframework.web.servlet.mvc.Controller}, + * interfaces, respectively. A default {@link org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter}, + * will be registered as well. HandlerAdapter objects can be added as beans in the application context, overriding the, + * default HandlerAdapters. Like HandlerMappings, HandlerAdapters can be given any bean name (they are tested by type)., + * <li>The dispatcher's exception resolution strategy can be specified via a {@link HandlerExceptionResolver}, for, + * example mapping certain exceptions to error pages. Default is none. Additional HandlerExceptionResolvers can be added, + * through the application context. HandlerExceptionResolver can be given any bean name (they are tested by type)., + * <li>Its view resolution strategy can be specified via a {@link ViewResolver} implementation, resolving symbolic view, + * names into View objects. Default is {@link org.springframework.web.servlet.view.InternalResourceViewResolver}., + * ViewResolver objects can be added as beans in the application context, overriding the default ViewResolver., + * ViewResolvers can be given any bean name (they are tested by type)., + * <li>If a {@link View} or view name is not supplied by the user, then the configured {@link, + * RequestToViewNameTranslator} will translate the current request into a view name. The corresponding bean name is, + * "viewNameTranslator"; the default is {@link org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator}., + * <li>The dispatcher's strategy for resolving multipart requests is determined by a {@link, + * org.springframework.web.multipart.MultipartResolver} implementation. Implementations for Jakarta Commons FileUpload, + * and Jason Hunter's COS are included; the typical choise is {@link org.springframework.web.multipart.commons.CommonsMultipartResolver}., + * <li>Its locale resolution strategy is determined by a {@link LocaleResolver}. Out-of-the-box implementations work via, + * HTTP accept header, cookie, or session. The LocaleResolver bean name is "localeResolver"; default is {@link, + * org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver}., + * <li>Its theme resolution strategy is determined by a {@link ThemeResolver}. Implementations for a fixed theme and for, + * cookie and session storage are included. The ThemeResolver bean name is "themeResolver"; default is {@link, + * org.springframework.web.servlet.theme.FixedThemeResolver}. </ul>, + * <p><b>NOTE: The <code>@RequestMapping</code> annotation will only be processed if a corresponding, + * <code>HandlerMapping</code> (for type level annotations) and/or <code>HandlerAdapter</code> (for method level, + * annotations) is present in the dispatcher.</b> This is the case by default. However, if you are defining custom, + * <code>HandlerMappings</code> or <code>HandlerAdapters</code>, then you need to make sure that a corresponding custom, + * <code>DefaultAnnotationHandlerMapping</code> and/or <code>AnnotationMethodHandlerAdapter</code> is defined as well -, + * provided that you intend to use <code>@RequestMapping</code>., + * <p><b>A web application can define any number of DispatcherServlets.</b> Each servlet will operate in its own, + * namespace, loading its own application context with mappings, handlers, etc. Only the root application context as, + * loaded by {@link org.springframework.web.context.ContextLoaderListener}, if any, will be shared., +	/** Well-known name for the MultipartResolver object in the bean factory for this namespace. */, +	/** Well-known name for the LocaleResolver object in the bean factory for this namespace. */, +	/** Well-known name for the ThemeResolver object in the bean factory for this namespace. */, +	 * Well-known name for the HandlerMapping object in the bean factory for this namespace. Only used when, +	 * "detectAllHandlerMappings" is turned off., +	 *, +	 * Well-known name for the HandlerAdapter object in the bean factory for this namespace. Only used when, +	 * "detectAllHandlerAdapters" is turned off., +	 *, +	 * Well-known name for the HandlerExceptionResolver object in the bean factory for this namespace. Only used when, +	 * "detectAllHandlerExceptionResolvers" is turned off., +	 *, +	/** Well-known name for the RequestToViewNameTranslator object in the bean factory for this namespace. */, +	 * Well-known name for the ViewResolver object in the bean factory for this namespace. Only used when, +	 * "detectAllViewResolvers" is turned off., +	 *, +	/** Request attribute to hold the currently chosen HandlerExecutionChain. Only used for internal optimizations. */, +	 * Request attribute to hold the current web application context. Otherwise only the global web app context is, +	 * obtainable by tags etc., +	 *, +	 *, +	 *, +	 *, +	/** Log category to use when no mapped handler is found for a request. */, +	 * Name of the class path resource (relative to the DispatcherServlet class) that defines DispatcherServlet's default, +	 * strategy names., +	/** Additional logger to use when no mapped handler is found for a request. */, +	 * Set whether to detect all HandlerMapping beans in this servlet's context. Else, just a single bean with name, +	 * "handlerMapping" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single, +	 * HandlerMapping, despite multiple HandlerMapping beans being defined in the context., +	 * Set whether to detect all HandlerAdapter beans in this servlet's context. Else, just a single bean with name, +	 * "handlerAdapter" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single, +	 * HandlerAdapter, despite multiple HandlerAdapter beans being defined in the context., +	 * Set whether to detect all HandlerExceptionResolver beans in this servlet's context. Else, just a single bean with, +	 * name "handlerExceptionResolver" will be expected. <p>Default is "true". Turn this off if you want this servlet to, +	 * use a single HandlerExceptionResolver, despite multiple HandlerExceptionResolver beans being defined in the, +	 * context., +	 * Set whether to detect all ViewResolver beans in this servlet's context. Else, just a single bean with name, +	 * "viewResolver" will be expected. <p>Default is "true". Turn this off if you want this servlet to use a single, +	 * ViewResolver, despite multiple ViewResolver beans being defined in the context., +	 * Set whether to perform cleanup of request attributes after an include request, that is, whether to reset the, +	 * original state of all request attributes after the DispatcherServlet has processed within an include request. Else,, +	 * just the DispatcherServlet's own request attributes will be reset, but not model attributes for JSPs or special, +	 * attributes set by views (for example, JSTL's). <p>Default is "true", which is strongly recommended. Views should not, +	 * rely on request attributes having been set by (dynamic) includes. This allows JSP views rendered by an included, +	 * controller to use any model attributes, even with the same names as in the main JSP, without causing side effects., +	 * Only turn this off for special needs, for example to deliberately allow main JSPs to access attributes from JSP, +	 * views rendered by an included controller., +	/** This implementation calls {@link #initStrategies}. */, +	 * Initialize the strategy objects that this servlet uses. <p>May be overridden in subclasses in order to initialize, +	 * Initialize the MultipartResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory, +	 * Initialize the LocaleResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory, +	 * Initialize the ThemeResolver used by this class. <p>If no bean is defined with the given name in the BeanFactory for, +	 * this namespace, we default to a FixedThemeResolver.]