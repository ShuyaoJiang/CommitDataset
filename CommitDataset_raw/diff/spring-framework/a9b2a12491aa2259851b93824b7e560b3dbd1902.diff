[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	protected ResponseBodyAdviceChain getAdviceChain() {, +		return this.adviceChain;, +	}, +, +		Class<?> returnValueClass = getReturnValueType(returnValue, returnType);, +					if (returnValue != null) {, +					}, +	 * Return the type of the value to be written to the response. Typically this, +	 * is a simple check via getClass on the returnValue but if the returnValue is, +	 * null, then the returnType needs to be examined possibly including generic, +	 * type determination (e.g. {@code ResponseEntity<T>})., +	 */, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	protected ResponseBodyAdviceChain getAdviceChain() {, +		return this.adviceChain;, +	}, +, +		Class<?> returnValueClass = getReturnValueType(returnValue, returnType);, +					if (returnValue != null) {, +					}, +	 * Return the type of the value to be written to the response. Typically this, +	 * is a simple check via getClass on the returnValue but if the returnValue is, +	 * null, then the returnType needs to be examined possibly including generic, +	 * type determination (e.g. {@code ResponseEntity<T>})., +	 */, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +import org.springframework.core.ResolvableType;, +		if (body != null || getAdviceChain().hasAdvice()) {, +		// Ensure headers are flushed even if no body was written, +	@Override, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		if (returnValue != null) {, +			return returnValue.getClass();, +		}, +		else {, +			Type type = getHttpEntityType(returnType);, +			return ResolvableType.forMethodParameter(returnType, type).resolve(Object.class);, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	protected ResponseBodyAdviceChain getAdviceChain() {, +		return this.adviceChain;, +	}, +, +		Class<?> returnValueClass = getReturnValueType(returnValue, returnType);, +					if (returnValue != null) {, +					}, +	 * Return the type of the value to be written to the response. Typically this, +	 * is a simple check via getClass on the returnValue but if the returnValue is, +	 * null, then the returnType needs to be examined possibly including generic, +	 * type determination (e.g. {@code ResponseEntity<T>})., +	 */, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +import org.springframework.core.ResolvableType;, +		if (body != null || getAdviceChain().hasAdvice()) {, +		// Ensure headers are flushed even if no body was written, +	@Override, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		if (returnValue != null) {, +			return returnValue.getClass();, +		}, +		else {, +			Type type = getHttpEntityType(returnType);, +			return ResolvableType.forMethodParameter(returnType, type).resolve(Object.class);, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, +		if (returnValue != null || getAdviceChain().hasAdvice()) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	protected ResponseBodyAdviceChain getAdviceChain() {, +		return this.adviceChain;, +	}, +, +		Class<?> returnValueClass = getReturnValueType(returnValue, returnType);, +					if (returnValue != null) {, +					}, +	 * Return the type of the value to be written to the response. Typically this, +	 * is a simple check via getClass on the returnValue but if the returnValue is, +	 * null, then the returnType needs to be examined possibly including generic, +	 * type determination (e.g. {@code ResponseEntity<T>})., +	 */, +	protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {, +		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType());, +	}]