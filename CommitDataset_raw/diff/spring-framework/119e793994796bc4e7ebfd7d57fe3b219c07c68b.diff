[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, +import org.apache.commons.logging.Log;, +import org.springframework.util.Assert;, +	private final List<Runnable> dispatchHandlers = new ArrayList<Runnable>();, +, +	public void addDispatchHandler(Runnable handler) {, +		Assert.notNull(handler);, +		this.dispatchHandlers.add(handler);, +	}, +, +		for (Runnable r : this.dispatchHandlers) {, +			r.run();, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, +import org.apache.commons.logging.Log;, +import org.springframework.util.Assert;, +	private final List<Runnable> dispatchHandlers = new ArrayList<Runnable>();, +, +	public void addDispatchHandler(Runnable handler) {, +		Assert.notNull(handler);, +		this.dispatchHandlers.add(handler);, +	}, +, +		for (Runnable r : this.dispatchHandlers) {, +			r.run();, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.mock.web.MockAsyncContext;, +import org.springframework.web.context.request.async.*;, +, +, +		registerAsyncResultInterceptors(request);, +, +		if (request.isAsyncStarted()) {, +			addAsyncResultLatch(request);, +		}, +	private void registerAsyncResultInterceptors(final HttpServletRequest request) {, +		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);, +			public <T> void postProcess(NativeWebRequest r, Callable<T> task, Object value) throws Exception {, +				getMvcResult(request).setAsyncResult(value);, +			public <T> void postProcess(NativeWebRequest r, DeferredResult<T> result, Object value) throws Exception {, +				getMvcResult(request).setAsyncResult(value);, +	}, +	private void addAsyncResultLatch(HttpServletRequest request) {, +		final CountDownLatch latch = new CountDownLatch(1);, +		((MockAsyncContext) request.getAsyncContext()).addDispatchHandler(new Runnable() {, +			@Override, +			public void run() {, +				latch.countDown();, +			}, +		});, +		getMvcResult(request).setAsyncResultLatch(latch);]