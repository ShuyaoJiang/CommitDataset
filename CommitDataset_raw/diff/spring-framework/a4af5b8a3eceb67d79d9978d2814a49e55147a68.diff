[+++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +	public void convertObjectToStringWithValueOfMethodPresentUsingToString() {, +		ISBN.reset();, +		assertEquals("123456789", conversionService.convert(new ISBN("123456789"), String.class));, +, +		assertEquals("constructor invocations", 1, ISBN.constructorCount);, +		assertEquals("valueOf() invocations", 0, ISBN.valueOfCount);, +		assertEquals("toString() invocations", 1, ISBN.toStringCount);, +	public void convertObjectToObjectUsingValueOfMethod() {, +		ISBN.reset();, +		assertEquals(new ISBN("123456789"), conversionService.convert("123456789", ISBN.class));, +, +		assertEquals("valueOf() invocations", 1, ISBN.valueOfCount);, +		// valueOf() invokes the constructor, +		assertEquals("constructor invocations", 2, ISBN.constructorCount);, +		assertEquals("toString() invocations", 0, ISBN.toStringCount);, +	}, +, +	@Test, +	public void convertObjectToStringUsingToString() {, +		SSN.reset();, +, +		// TODO What if the target type has a static factory method that takes precedence, +		// over the source type's toString() method?, +, +		assertEquals("constructor invocations", 1, SSN.constructorCount);, +		assertEquals("toString() invocations", 1, SSN.toStringCount);, +	}, +, +	@Test, +	public void convertObjectToObjectUsingObjectConstructor() {, +		SSN.reset();, +		assertEquals(new SSN("123456789"), conversionService.convert("123456789", SSN.class));, +, +		assertEquals("constructor invocations", 2, SSN.constructorCount);, +		assertEquals("toString() invocations", 0, SSN.toStringCount);, +		static int constructorCount = 0;, +		static int toStringCount = 0;, +, +, +		static void reset() {, +			constructorCount = 0;, +			toStringCount = 0;, +		}, +, +		private final String value;, +			constructorCount++;, +			toStringCount++;, +		static int constructorCount = 0;, +		static int toStringCount = 0;, +, +		static int valueOfCount = 0;, +, +		static void reset() {, +			constructorCount = 0;, +			toStringCount = 0;, +			valueOfCount = 0;, +		}, +, +		private final String value;, +			constructorCount++;, +			toStringCount++;, +		@SuppressWarnings("unused"), +			valueOfCount++;]