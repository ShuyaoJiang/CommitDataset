[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java, + * Copyright 2002-2015 the original author or authors., +, +			@SuppressWarnings("rawtypes"), +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java, + * Copyright 2002-2015 the original author or authors., +, +			@SuppressWarnings("rawtypes"), +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerViewTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import freemarker.ext.servlet.AllHttpScopesHashModel;, +import freemarker.template.Configuration;, +import freemarker.template.Template;, +import freemarker.template.TemplateException;, +, +import static org.hamcrest.CoreMatchers.*;, + * @author Sam Brannen, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	public void noFreeMarkerConfig() throws Exception {, +, +		exception.expect(ApplicationContextException.class);, +		exception.expectMessage(containsString("FreeMarkerConfig"));, +	public void noTemplateName() throws Exception {, +, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage(containsString("url"));, +	public void validTemplateName() throws Exception {, +	public void keepExistingContentType() throws Exception {, +	public void freeMarkerViewResolver() throws Exception {, +		TestConfiguration() {, +			super(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);, +		}, +]