[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, +import javax.servlet.AsyncContext;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletResponse;, +import javax.servlet.http.HttpServletResponseWrapper;, +, +		AsyncContext asyncContext = request.getAsyncContext();, +		MockHttpServletResponse mockResponse;, +		HttpServletResponse servletResponse;, +		if (asyncContext != null) {, +			servletResponse = (HttpServletResponse) asyncContext.getResponse();, +			mockResponse = unwrapResponseIfNecessary(servletResponse);, +		}, +		else {, +			mockResponse = new MockHttpServletResponse();, +			servletResponse = mockResponse;, +		}, +		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse);, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse));, +		filterChain.doFilter(request, servletResponse);, +				asyncContext != null & !request.isAsyncStarted()) {, +			asyncContext.complete();, +	private MockHttpServletResponse unwrapResponseIfNecessary(ServletResponse servletResponse) {, +		while (servletResponse instanceof HttpServletResponseWrapper) {, +			servletResponse = ((HttpServletResponseWrapper) servletResponse).getResponse();, +		}, +		Assert.isInstanceOf(MockHttpServletResponse.class, servletResponse);, +		return (MockHttpServletResponse) servletResponse;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, +import javax.servlet.AsyncContext;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletResponse;, +import javax.servlet.http.HttpServletResponseWrapper;, +, +		AsyncContext asyncContext = request.getAsyncContext();, +		MockHttpServletResponse mockResponse;, +		HttpServletResponse servletResponse;, +		if (asyncContext != null) {, +			servletResponse = (HttpServletResponse) asyncContext.getResponse();, +			mockResponse = unwrapResponseIfNecessary(servletResponse);, +		}, +		else {, +			mockResponse = new MockHttpServletResponse();, +			servletResponse = mockResponse;, +		}, +		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse);, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse));, +		filterChain.doFilter(request, servletResponse);, +				asyncContext != null & !request.isAsyncStarted()) {, +			asyncContext.complete();, +	private MockHttpServletResponse unwrapResponseIfNecessary(ServletResponse servletResponse) {, +		while (servletResponse instanceof HttpServletResponseWrapper) {, +			servletResponse = ((HttpServletResponseWrapper) servletResponse).getResponse();, +		}, +		Assert.isInstanceOf(MockHttpServletResponse.class, servletResponse);, +		return (MockHttpServletResponse) servletResponse;, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/FilterTests.java, +import java.util.concurrent.CompletableFuture;, +import org.springframework.http.MediaType;, +import org.springframework.test.web.servlet.MockMvc;, +import org.springframework.test.web.servlet.MvcResult;, +import org.springframework.web.bind.annotation.GetMapping;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.ResponseBody;, +import org.springframework.web.filter.ShallowEtagHeaderFilter;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.flash;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;, +	@Test // SPR-16067, +	public void filterWrapsRequestResponseWithAsyncDispatch() throws Exception {, +		MockMvc mockMvc = standaloneSetup(new PersonController()), +				.addFilters(new ShallowEtagHeaderFilter()), +				.build();, +, +		MvcResult mvcResult = mockMvc.perform(get("/persons/1").accept(MediaType.APPLICATION_JSON)), +				.andExpect(request().asyncStarted()), +				.andExpect(request().asyncResult(new Person("Lukas"))), +				.andReturn();, +, +		mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(header().longValue("Content-Length", 53)), +				.andExpect(header().string("ETag", "\"0e37becb4f0c90709cb2e1efcc61eaa00\"")), +				.andExpect(content().string("{\"name\":\"Lukas\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +, +		@PostMapping(path="/persons")]