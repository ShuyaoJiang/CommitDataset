[+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, +		if (jaxb2Present && !jackson2Present) {, +, +		if (jackson2XmlPresent) {, +			addPartConverter(new MappingJackson2XmlHttpMessageConverter());, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, +		if (jaxb2Present && !jackson2Present) {, +, +		if (jackson2XmlPresent) {, +			addPartConverter(new MappingJackson2XmlHttpMessageConverter());, +		}, +++ b/spring-web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java, +import javax.xml.bind.annotation.XmlElement;, +import javax.xml.bind.annotation.XmlRootElement;, +	// SPR-13309, +, +	@Test, +	public void writeMultipartOrder() throws Exception {, +		MyBean myBean = new MyBean();, +		myBean.setString("foo");, +, +		MultiValueMap<String, Object> parts = new LinkedMultiValueMap<String, Object>();, +		parts.add("part1", myBean);, +, +		HttpHeaders entityHeaders = new HttpHeaders();, +		entityHeaders.setContentType(MediaType.TEXT_XML);, +		HttpEntity<MyBean> entity = new HttpEntity<MyBean>(myBean, entityHeaders);, +		parts.add("part2", entity);, +, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		this.converter.setMultipartCharset(UTF_8);, +		this.converter.write(parts, new MediaType("multipart", "form-data", UTF_8), outputMessage);, +, +		final MediaType contentType = outputMessage.getHeaders().getContentType();, +		assertNotNull("No boundary found", contentType.getParameter("boundary"));, +, +		// see if Commons FileUpload can read what we wrote, +		FileItemFactory fileItemFactory = new DiskFileItemFactory();, +		FileUpload fileUpload = new FileUpload(fileItemFactory);, +		RequestContext requestContext = new MockHttpOutputMessageRequestContext(outputMessage);, +		List<FileItem> items = fileUpload.parseRequest(requestContext);, +		assertEquals(2, items.size());, +, +		FileItem item = items.get(0);, +		assertTrue(item.isFormField());, +		assertEquals("part1", item.getFieldName());, +		assertEquals("{\"string\":\"foo\"}", item.getString());, +, +		item = items.get(1);, +		assertTrue(item.isFormField());, +		assertEquals("part2", item.getFieldName());, +		assertEquals("<MyBean><string>foo</string></MyBean>", item.getString());, +	}, +, +, +	public static class MyBean {, +, +		private String string;, +, +		public String getString() {, +			return this.string;, +		}, +, +		public void setString(String string) {, +			this.string = string;, +		}, +	}, +]