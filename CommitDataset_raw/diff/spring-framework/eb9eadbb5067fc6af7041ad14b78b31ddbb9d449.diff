[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MarshallingMessageConverter.java, +	 * Default construct allowing for {@link #setMarshaller(Marshaller)} and/or, +	 * {@link #setUnmarshaller(Unmarshaller)} to be invoked separately., +	 * Constructor with a given list of MIME types to support., +	 * @param supportedMimeTypes the MIME types, +	 */, +	public MarshallingMessageConverter(MimeType... supportedMimeTypes) {, +		super(Arrays.asList(supportedMimeTypes));, +	}, +, +	/**, +	 * Constructor with {@link Marshaller}. If the given {@link Marshaller} also, +	 * implements {@link Unmarshaller}, it is also used for unmarshalling., +	 * <p>Note that all {@code Marshaller} implementations in Spring also implement, +	 * {@code Unmarshaller} so that you can safely use this constructor., +	 * Return the configured Marshaller., +	 */, +	public Marshaller getMarshaller() {, +		return this.marshaller;, +	}, +, +	/**, +	/**, +	 * Return the configured unmarshaller., +	 */, +	public Unmarshaller getUnmarshaller() {, +		return this.unmarshaller;, +	}, +, +, +		return (supportsMimeType(message.getHeaders()) && this.unmarshaller != null &&, +				this.unmarshaller.supports(targetClass));, +		return (supportsMimeType(headers) && this.marshaller != null &&, +				this.marshaller.supports(payload.getClass()));, +			throw new MessageConversionException(message, "Could not unmarshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException(message, "Could not unmarshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException("Could not marshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException("Could not marshal XML: " + ex.getMessage(), ex);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MarshallingMessageConverter.java, +	 * Default construct allowing for {@link #setMarshaller(Marshaller)} and/or, +	 * {@link #setUnmarshaller(Unmarshaller)} to be invoked separately., +	 * Constructor with a given list of MIME types to support., +	 * @param supportedMimeTypes the MIME types, +	 */, +	public MarshallingMessageConverter(MimeType... supportedMimeTypes) {, +		super(Arrays.asList(supportedMimeTypes));, +	}, +, +	/**, +	 * Constructor with {@link Marshaller}. If the given {@link Marshaller} also, +	 * implements {@link Unmarshaller}, it is also used for unmarshalling., +	 * <p>Note that all {@code Marshaller} implementations in Spring also implement, +	 * {@code Unmarshaller} so that you can safely use this constructor., +	 * Return the configured Marshaller., +	 */, +	public Marshaller getMarshaller() {, +		return this.marshaller;, +	}, +, +	/**, +	/**, +	 * Return the configured unmarshaller., +	 */, +	public Unmarshaller getUnmarshaller() {, +		return this.unmarshaller;, +	}, +, +, +		return (supportsMimeType(message.getHeaders()) && this.unmarshaller != null &&, +				this.unmarshaller.supports(targetClass));, +		return (supportsMimeType(headers) && this.marshaller != null &&, +				this.marshaller.supports(payload.getClass()));, +			throw new MessageConversionException(message, "Could not unmarshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException(message, "Could not unmarshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException("Could not marshal XML: " + ex.getMessage(), ex);, +			throw new MessageConversionException("Could not marshal XML: " + ex.getMessage(), ex);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/MarshallingMessageConverterTests.java, +import static org.junit.Assert.*;, +		this.converter = new MarshallingMessageConverter(marshaller);, +, +		MyBean actual = (MyBean) this.converter.fromMessage(message, MyBean.class);, +		assertNotNull(actual);, +		this.converter.fromMessage(message, MyBean.class);, +		this.converter.fromMessage(message, MyBean.class);, +		Message<?> message = this.converter.toMessage(payload, null);, +		assertNotNull(message);]