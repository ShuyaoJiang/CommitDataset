[+++ b/build.gradle, +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/build.gradle, +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +	 * Specify one or more modules by class to be registered with, +	 * the {@link ObjectMapper}., +	 * <p>Modules specified here will be registered after, +	 * finding of modules (see {@link #findModulesViaServiceLoader}),, +	 * allowing to eventually override their configuration., +		if (this.modules != null) {, +			// Complete list of modules given, +			for (Module module : this.modules) {, +				// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules, +				objectMapper.registerModule(module);, +			}, +		}, +		else {, +			// Combination of modules by class presence in the classpath and class names specified, +			if (this.findModulesViaServiceLoader) {, +				// Jackson 2.2+, +				objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));, +			}, +			else {, +				registerWellKnownModulesIfAvailable(objectMapper);, +			}, +			if (this.modulesToInstall != null) {, +				for (Class<? extends Module> module : this.modulesToInstall) {, +					objectMapper.registerModule(BeanUtils.instantiate(module));, +				}, +			}, +		}, +, +++ b/build.gradle, +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +	 * Specify one or more modules by class to be registered with, +	 * the {@link ObjectMapper}., +	 * <p>Modules specified here will be registered after, +	 * finding of modules (see {@link #findModulesViaServiceLoader}),, +	 * allowing to eventually override their configuration., +		if (this.modules != null) {, +			// Complete list of modules given, +			for (Module module : this.modules) {, +				// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules, +				objectMapper.registerModule(module);, +			}, +		}, +		else {, +			// Combination of modules by class presence in the classpath and class names specified, +			if (this.findModulesViaServiceLoader) {, +				// Jackson 2.2+, +				objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));, +			}, +			else {, +				registerWellKnownModulesIfAvailable(objectMapper);, +			}, +			if (this.modulesToInstall != null) {, +				for (Class<? extends Module> module : this.modulesToInstall) {, +					objectMapper.registerModule(BeanUtils.instantiate(module));, +				}, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +	 * Specify one or more modules by class (or class name in XML), +	 * <p>Modules specified here will be registered after, +	 * finding of modules (see {@link #setFindModulesViaServiceLoader}),, +	 * allowing to eventually override their configuration., +++ b/build.gradle, +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +	 * Specify one or more modules by class to be registered with, +	 * the {@link ObjectMapper}., +	 * <p>Modules specified here will be registered after, +	 * finding of modules (see {@link #findModulesViaServiceLoader}),, +	 * allowing to eventually override their configuration., +		if (this.modules != null) {, +			// Complete list of modules given, +			for (Module module : this.modules) {, +				// Using Jackson 2.0+ registerModule method, not Jackson 2.2+ registerModules, +				objectMapper.registerModule(module);, +			}, +		}, +		else {, +			// Combination of modules by class presence in the classpath and class names specified, +			if (this.findModulesViaServiceLoader) {, +				// Jackson 2.2+, +				objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));, +			}, +			else {, +				registerWellKnownModulesIfAvailable(objectMapper);, +			}, +			if (this.modulesToInstall != null) {, +				for (Class<? extends Module> module : this.modulesToInstall) {, +					objectMapper.registerModule(BeanUtils.instantiate(module));, +				}, +			}, +		}, +]