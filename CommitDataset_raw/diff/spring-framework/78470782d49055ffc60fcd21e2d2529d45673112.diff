[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +	private List<? extends HandlerMethodArgumentResolver> customArgumentResolvers;, +	private List<? extends HandlerMethodReturnValueHandler> customReturnValueHandlers;, +	public void setCustomArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setInitBinderArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setCustomReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +	public void setReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +		if (argumentResolvers != null) {, +			return;, +		argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		if (initBinderArgumentResolvers != null) {, +			return;, +		initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		initBinderArgumentResolvers.addResolvers(customArgumentResolvers);, +		if (returnValueHandlers != null) {, +			return;, +		returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +	private List<? extends HandlerMethodArgumentResolver> customArgumentResolvers;, +	private List<? extends HandlerMethodReturnValueHandler> customReturnValueHandlers;, +	public void setCustomArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setInitBinderArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setCustomReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +	public void setReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +		if (argumentResolvers != null) {, +			return;, +		argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		if (initBinderArgumentResolvers != null) {, +			return;, +		initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		initBinderArgumentResolvers.addResolvers(customArgumentResolvers);, +		if (returnValueHandlers != null) {, +			return;, +		returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annot, , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +	private List<? extends HandlerMethodArgumentResolver> customArgumentResolvers;, +	private List<? extends HandlerMethodReturnValueHandler> customReturnValueHandlers;, +	public void setCustomArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setInitBinderArgumentResolvers(List<? extends HandlerMethodArgumentResolver> argumentResolvers) {, +	public void setCustomReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +	public void setReturnValueHandlers(List<? extends HandlerMethodReturnValueHandler> returnValueHandlers) {, +		if (argumentResolvers != null) {, +			return;, +		argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		if (initBinderArgumentResolvers != null) {, +			return;, +		initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +		initBinderArgumentResolvers.addResolvers(customArgumentResolvers);, +		if (returnValueHandlers != null) {, +			return;, +		returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annot, , +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterTests.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.core.MethodParameter;, +import org.springframework.web.bind.support.WebDataBinderFactory;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.method.annotation.support.ModelMethodProcessor;, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.method.support.HandlerMethodArgumentResolverComposite;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandler;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite;, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletRequestMethodArgumentResolver;, + * <li>{@link HandlerMethodAnnotationDetectionTests}, +		handlerAdapter.afterPropertiesSet();, +		handlerAdapter.afterPropertiesSet();, +	@Test, +	@SuppressWarnings("unchecked"), +	public void setArgumentResolvers() {, +		List<HandlerMethodArgumentResolver> expected  = new ArrayList<HandlerMethodArgumentResolver>();, +		expected.add(new ServletRequestMethodArgumentResolver());, +		handlerAdapter.setArgumentResolvers(expected);, +		handlerAdapter.afterPropertiesSet();, +		, +		HandlerMethodArgumentResolverComposite composite = (HandlerMethodArgumentResolverComposite) , +			new DirectFieldAccessor(handlerAdapter).getPropertyValue("argumentResolvers");, +, +		List<HandlerMethodArgumentResolver> actual = (List<HandlerMethodArgumentResolver>), +			new DirectFieldAccessor(composite).getPropertyValue("argumentResolvers");, +		, +		assertEquals(expected, actual);]