[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.cache.concurrent.ConcurrentMapCache;, +import org.springframework.web.servlet.resource.CachingResourceResolver;, +import org.springframework.web.servlet.resource.CachingResourceTransformer;, +import org.springframework.web.servlet.resource.ContentVersionStrategy;, +import org.springframework.web.servlet.resource.CssLinkResourceTransformer;, +import org.springframework.web.servlet.resource.FixedVersionStrategy;, +import org.springframework.web.servlet.resource.PathResourceResolver;, +import org.springframework.web.servlet.resource.ResourceResolver;, +import org.springframework.web.servlet.resource.ResourceTransformer;, +import org.springframework.web.servlet.resource.VersionResourceResolver;, + * {@code resources} element to register a {@link ResourceHttpRequestHandler} and, + * register a {@link SimpleUrlHandlerMapping} for mapping resource requests,, + * Will also create a resource handling chain with {@link ResourceResolver}s and {@link ResourceTransformer}s., + * @author Brian Clozel, +	private static final String RESOURCE_CHAIN_CACHE = "spring-resource-chain-cache";, +	private static final String VERSION_RESOLVER_ELEMENT = "version-resolver";, +	private static final String VERSION_STRATEGY_ELEMENT = "version-strategy";, +	private static final String FIXED_VERSION_STRATEGY_ELEMENT = "fixed-version-strategy";, +	private static final String CONTENT_VERSION_STRATEGY_ELEMENT = "content-version-strategy";, +, +		Element resourceChainElement = DomUtils.getChildElementByTagName(element, "resource-chain");, +		if(resourceChainElement != null) {, +			parseResourceChain(resourceHandlerDef, parserContext, resourceChainElement, source);, +, +	private void parseResourceChain(RootBeanDefinition resourceHandlerDef, ParserContext parserContext,, +			Element element, Object source) {, +, +		String autoRegistration = element.getAttribute("auto-registration");, +		boolean isAutoRegistration = !(StringUtils.hasText(autoRegistration) && "false".equals(autoRegistration));, +, +		ManagedList<? super Object> resourceTransformers = new ManagedList<Object>();, +		resourceTransformers.setSource(source);, +, +		parseResourceCache(resourceResolvers, resourceTransformers, element, source);, +		parseResourceResolversTransformers(isAutoRegistration, resourceResolvers, +				, resourceTransformers, parserContext, element, source);, +, +		if (!resourceResolvers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceResolvers", resourceResolvers);, +		}, +		if (!resourceTransformers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceTransformers", resourceTransformers);, +		}, +	}, +, +	private void parseResourceCache(ManagedList<? super Object> resourceResolvers,, +			ManagedList<? super Object> resourceTransformers,, +			Element element, Object source) {, +, +		Element resourceCacheElement = DomUtils.getChildElementByTagName(element, "resource-cache");, +		if(resourceCacheElement != null) {, +			ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +, +			RootBeanDefinition cachingResolverDef = new RootBeanDefinition(CachingResourceResolver.class);, +			cachingResolverDef.setSource(source);, +			cachingResolverDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			cachingResolverDef.setConstructorArgumentValues(cavs);, +, +			RootBeanDefinition cachingTransformerDef = new RootBeanDefinition(CachingResourceTransformer.class);, +			cachingTransformerDef.setSource(source);, +			cachingTransformerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			cachingTransformerDef.setConstructorArgumentValues(cavs);, +, +			String cacheBeanName = resourceCacheElement.getAttribute("cache");, +			if (StringUtils.hasText(cacheBeanName)) {, +				RuntimeBeanReference cacheRef = new RuntimeBeanReference(cacheBeanName);, +				cavs.addIndexedArgumentValue(0, cacheRef);, +			}, +			else {, +				ConstructorArgumentValues cacheCavs = new ConstructorArgumentValues();, +				cacheCavs.addIndexedArgumentValue(0, RESOURCE_CHAIN_CACHE);, +, +				RootBeanDefinition cacheDef = new RootBeanDefinition(ConcurrentMapCache.class);, +				cacheDef.setSource(source);, +				cacheDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +				cacheDef.setConstructorArgumentValues(cacheCavs);, +				cavs.addIndexedArgumentValue(0, cacheDef);, +			}, +			resourceResolvers.add(cachingResolverDef);, +			resourceTransformers.add(cachingTransformerDef);, +		}, +	}, +, +, +	private void parseResourceResolversTransformers(boolean isAutoRegistration,, +			ManagedList<? super Object> resourceResolvers, ManagedList<? super Object> resourceTransformers,, +			ParserContext parserContext, Element element, Object source) {, +, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "resolvers");, +		if (resolversElement != null) {, +			for (Element beanElement : DomUtils.getChildElements(resolversElement)) {, +				if(VERSION_RESOLVER_ELEMENT.equals(beanElement.getLocalName())) {, +					RootBeanDefinition versionResolverDef = parseVersionResolver(parserContext, beanElement, source);, +					versionResolverDef.setSource(source);, +					resourceResolvers.add(versionResolverDef);, +, +					if(isAutoRegistration) {, +						RootBeanDefinition cssLinkTransformerDef = new RootBeanDefinition(CssLinkResourceTransformer.class);]