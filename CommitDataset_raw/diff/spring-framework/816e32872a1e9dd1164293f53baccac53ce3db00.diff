[+++ b/spring-context/src/main/java/org/springframework/validation/support/BindingAwareConcurrentModel.java, +			String resultKey = BindingResult.MODEL_KEY_PREFIX + key;, +			BindingResult result = (BindingResult) get(resultKey);, +			if (result != null && result.getTarget() != value) {, +				remove(resultKey);, +++ b/spring-context/src/main/java/org/springframework/validation/support/BindingAwareConcurrentModel.java, +			String resultKey = BindingResult.MODEL_KEY_PREFIX + key;, +			BindingResult result = (BindingResult) get(resultKey);, +			if (result != null && result.getTarget() != value) {, +				remove(resultKey);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.web.bind.WebExchangeBindException;, +			throw new WebExchangeBindException(param, binder.getBindingResult());, +++ b/spring-context/src/main/java/org/springframework/validation/support/BindingAwareConcurrentModel.java, +			String resultKey = BindingResult.MODEL_KEY_PREFIX + key;, +			BindingResult result = (BindingResult) get(resultKey);, +			if (result != null && result.getTarget() != value) {, +				remove(resultKey);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.web.bind.WebExchangeBindException;, +			throw new WebExchangeBindException(param, binder.getBindingResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import reactor.core.publisher.Mono;, +import reactor.core.publisher.MonoProcessor;, +, +import org.springframework.beans.BeanUtils;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapter.Descriptor;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.validation.BindingResult;, +import org.springframework.validation.Errors;, +import org.springframework.validation.annotation.Validated;, +import org.springframework.web.bind.WebExchangeBindException;, +import org.springframework.web.bind.WebExchangeDataBinder;, +import org.springframework.web.bind.annotation.ModelAttribute;, +import org.springframework.web.reactive.result.method.BindingContext;, +import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Resolve {@code @ModelAttribute} annotated method arguments., + *, + * <p>Model attributes are sourced from the model, or created using a default, + * constructor and then added to the model. Once created the attribute is, + * populated via data binding to the request (form data, query params)., + * Validation also may be applied if the argument is annotated with, + * {@code @javax.validation.Valid} or Spring's own, + * {@code @org.springframework.validation.annotation.Validated}., + *, + * <p>When this handler is created with {@code useDefaultResolution=true}, + * any non-simple type argument and return value is regarded as a model, + * attribute with or without the presence of an {@code @ModelAttribute}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +public class ModelAttributeMethodArgumentResolver implements HandlerMethodArgumentResolver {, +, +	private final boolean useDefaultResolution;, +, +	private final ReactiveAdapterRegistry adapterRegistry;, +, +, +	/**, +	 * Class constructor., +	 * @param useDefaultResolution if "true", non-simple method arguments and, +	 * return values are considered model attributes with or without a, +	 * {@code @ModelAttribute} annotation present., +	 * @param registry for adapting to other reactive types from and to Mono, +	 */, +	public ModelAttributeMethodArgumentResolver(boolean useDefaultResolution,, +			ReactiveAdapterRegistry registry) {, +, +		Assert.notNull(registry, "'ReactiveAdapterRegistry' is required.");]