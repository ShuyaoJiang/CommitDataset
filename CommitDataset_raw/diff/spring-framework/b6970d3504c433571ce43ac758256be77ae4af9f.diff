[+++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., + * JBoss AS 6 and 7 (as of Spring 4.0)., +			// JBoss AS 6, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., + * JBoss AS 6 and 7 (as of Spring 4.0)., +			// JBoss AS 6, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossMCAdapter.java, + * Copyright 2002-2013 the original author or authors., +, + * Reflective wrapper around a JBoss 6 class loader methods, + * (discovered and called through reflection) for load-time weaving., + * @author Juergen Hoeller, +	private static final String TRANSLATOR_NAME = "org.jboss.util.loading.Translator";, +, +, +	private final Object target;, +, +, +	public JBossMCAdapter(ClassLoader classLoader) {, +			// Resolve BaseClassLoader.class, +			Class<?> clazzLoaderType = classLoader.loadClass(LOADER_NAME);, +			// Walk the hierarchy to detect the instrumentation aware ClassLoader, +				throw new IllegalArgumentException(classLoader + " and its parents are not suitable ClassLoaders: " +, +						"A [" + LOADER_NAME + "] implementation is required.");, +			// Use the ClassLoader that loaded the ClassLoader to load the types for reflection purposes, +			Method method = clazzLoaderType.getDeclaredMethod("getPolicy");, +			this.target = method.invoke(this.classLoader);, +			// Check existence of BaseClassLoaderPolicy#addTranslator(Translator), +			this.addTranslator = this.target.getClass().getMethod("addTranslator", this.translatorClass);, +		catch (Exception ex) {, +					"Could not initialize JBoss LoadTimeWeaver because the JBoss 6 API classes are not available", ex);, +			this.addTranslator.invoke(this.target, adapterInstance);, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException("Could not add transformer on JBoss 6 ClassLoader " + this.classLoader, ex);, +		return this.classLoader;, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., + * JBoss AS 6 and 7 (as of Spring 4.0)., +			// JBoss AS 6, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossMCAdapter.java, + * Copyright 2002-2013 the original author or authors., +, + * Reflective wrapper around a JBoss 6 class loader methods, + * (discovered and called through reflection) for load-time weaving., + * @author Juergen Hoeller, +	private static final String TRANSLATOR_NAME = "org.jboss.util.loading.Translator";, +, +, +	private final Object target;, +, +, +	public JBossMCAdapter(ClassLoader classLoader) {, +			// Resolve BaseClassLoader.class, +			Class<?> clazzLoaderType = classLoader.loadClass(LOADER_NAME);, +			// Walk the hierarchy to detect the instrumentation aware ClassLoader, +				throw new IllegalArgumentException(classLoader + " and its parents are not suitable ClassLoaders: " +, +						"A [" + LOADER_NAME + "] implementation is required.");, +			// Use the ClassLoader that loaded the ClassLoader to load the types for reflection purposes, +			Method method = clazzLoaderType.getDeclaredMethod("getPolicy");, +			this.target = method.invoke(this.classLoader);, +			// Check existence of BaseClassLoaderPolicy#addTranslator(Translator), +			this.addTranslator = this.target.getClass().getMethod("addTranslator", this.translatorClass);, +		catch (Exception ex) {, +					"Could not initialize JBoss LoadTimeWeaver because the JBoss 6 API classes are not available", ex);, +			this.addTranslator.invoke(this.target, adapterInstance);, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException("Could not add transformer on JBoss 6 ClassLoader " + this.classLoader, ex);, +		return this.classLoader;, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossMCTranslatorAdapter.java, + * Copyright 2002-2013 the original author or authors., +, +, +, +			return proxy == args[0];, +		}, +		else if ("hashCode".equals(name)) {, +		}, +		else if ("toString".equals(name)) {, +		}, +		else if ("transform".equals(name)) {, +			return transform((ClassLoader) args[0], (String) args[1], (Class<?>) args[2],, +					(ProtectionDomain) args[3], (byte[]) args[4]);, +		}, +		else if ("unregisterClassLoader".equals(name)) {, +		}, +		else {, +, +		return this.transformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);, +, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., + * JBoss AS 6 and 7 (as of Spring 4.0)., +			// JBoss AS 6]