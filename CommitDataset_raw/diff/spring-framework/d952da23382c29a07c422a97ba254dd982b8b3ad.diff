[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			Assert.state(!asyncManager.isConcurrentHandlingStarted(),, +					"Deferred close mode is not supported on async dispatches");, +					if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			Assert.state(!asyncManager.isConcurrentHandlingStarted(),, +					"Deferred close mode is not supported on async dispatches");, +					if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			Assert.state(!asyncManager.isConcurrentHandlingStarted(),, +					"Deferred close mode is not supported on async dispatches");, +					if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			Assert.state(!asyncManager.isConcurrentHandlingStarted(),, +					"Deferred close mode is not supported on async dispatches");, +					if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, +import org.springframework.web.context.request.async.WebAsyncManager;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +	 * The default value is "false" so that the filter may log a "before" message, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			Assert.state(!asyncManager.isConcurrentHandlingStarted(),, +					"Deferred close mode is not supported on async dispatches");, +					if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewFilter.java, +	 * The default value is "false" so that the filter may re-bind the opened, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +				if (!asyncManager.isConcurrentHandlingStarted()) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, +import org.springframework.web.context.request.async.WebAsyncManager;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +	 * The default value is "false" so that the filter may log a "before" message, +	protected boolean shouldNotFilterAsyncDispatch() {, +		return false;, +		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);, +		boolean isFirstRequest = !asyncManager.hasConcurrentResult();, +			if (!asyncManager.isConcurrentHandlingStarted()) {]