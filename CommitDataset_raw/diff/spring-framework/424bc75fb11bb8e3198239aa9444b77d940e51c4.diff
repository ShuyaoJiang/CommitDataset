[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return ClientRequest.method(this.httpMethod, this.uri), +					.headers(headers -> headers.addAll(initHeaders())), +					.cookies(cookies -> cookies.addAll(initCookies()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return ClientRequest.method(this.httpMethod, this.uri), +					.headers(headers -> headers.addAll(initHeaders())), +					.cookies(cookies -> cookies.addAll(initCookies()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +import java.util.function.Consumer;, +	public ServerResponse.BodyBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +		Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +		headersConsumer.accept(this.headers);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return ClientRequest.method(this.httpMethod, this.uri), +					.headers(headers -> headers.addAll(initHeaders())), +					.cookies(cookies -> cookies.addAll(initCookies()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +import java.util.function.Consumer;, +	public ServerResponse.BodyBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +		Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +		headersConsumer.accept(this.headers);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerResponse.java, +import java.util.function.Consumer;, +		return builder.headers(headers -> headers.addAll(other.headers()));, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		B headers(Consumer<HttpHeaders> headersConsumer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +				.headers(headers -> headers.addAll(other.headers())), +				.cookies(cookies -> cookies.addAll(other.cookies())), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return ClientRequest.method(this.httpMethod, this.uri), +					.headers(headers -> headers.addAll(initHeaders())), +					.cookies(cookies -> cookies.addAll(initCookies()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +import java.util.function.Consumer;, +	public ServerResponse.BodyBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +		Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +		headersConsumer.accept(this.headers);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerResponse.java, +import java.util.function.Consumer;, +		return builder.headers(headers -> headers.addAll(other.headers()));, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		B headers(Consumer<HttpHeaders> headersConsumer);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilderTests.java, +		HttpHeaders newHeaders = new HttpHeaders();, +		newHeaders.set("foo", "bar");, +		Mono<ServerResponse> result =, +				ServerResponse.ok().headers(headers -> headers.addAll(newHeaders)).build();, +				.expectNextMatches(response -> newHeaders.equals(response.headers()))]