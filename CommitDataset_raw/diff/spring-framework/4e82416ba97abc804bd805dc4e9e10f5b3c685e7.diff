[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +import java.util.*;, +import org.springframework.web.socket.support.SubProtocolCapable;, +public class SubProtocolWebSocketHandler implements SubProtocolCapable, WebSocketHandler, MessageHandler {, +	public List<String> getSubProtocols() {, +		return new ArrayList<String>(this.protocolHandlers.keySet());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +import java.util.*;, +import org.springframework.web.socket.support.SubProtocolCapable;, +public class SubProtocolWebSocketHandler implements SubProtocolCapable, WebSocketHandler, MessageHandler {, +	public List<String> getSubProtocols() {, +		return new ArrayList<String>(this.protocolHandlers.keySet());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/WebMvcStompEndpointRegistry.java, +				paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +import java.util.*;, +import org.springframework.web.socket.support.SubProtocolCapable;, +public class SubProtocolWebSocketHandler implements SubProtocolCapable, WebSocketHandler, MessageHandler {, +	public List<String> getSubProtocols() {, +		return new ArrayList<String>(this.protocolHandlers.keySet());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/WebMvcStompEndpointRegistry.java, +				paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/WebMvcStompWebSocketEndpointRegistration.java, +			TaskScheduler sockJsTaskScheduler) {, +		if (this.handshakeHandler != null) {, +		}, +				WebSocketHttpRequestHandler handler = (this.handshakeHandler != null) ?, +						new WebSocketHttpRequestHandler(this.webSocketHandler, this.handshakeHandler) :, +						new WebSocketHttpRequestHandler(this.webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +import java.util.*;, +import org.springframework.web.socket.support.SubProtocolCapable;, +public class SubProtocolWebSocketHandler implements SubProtocolCapable, WebSocketHandler, MessageHandler {, +	public List<String> getSubProtocols() {, +		return new ArrayList<String>(this.protocolHandlers.keySet());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/WebMvcStompEndpointRegistry.java, +				paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/WebMvcStompWebSocketEndpointRegistration.java, +			TaskScheduler sockJsTaskScheduler) {, +		if (this.handshakeHandler != null) {, +		}, +				WebSocketHttpRequestHandler handler = (this.handshakeHandler != null) ?, +						new WebSocketHttpRequestHandler(this.webSocketHandler, this.handshakeHandler) :, +						new WebSocketHttpRequestHandler(this.webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +import org.springframework.web.socket.support.SubProtocolCapable;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	 * Use this property to configure the list of supported sub-protocols., +	 * The first configured sub-protocol that matches a client-requested sub-protocol, +	 * is accepted. If there are no matches the response will not contain a, +	 * {@literal Sec-WebSocket-Protocol} header., +	 * <p>, +	 * Note that if the WebSocketHandler passed in at runtime is an instance of, +	 * {@link SubProtocolCapable} then there is not need to explicitly configure, +	 * this property. That is certainly the case with the built-in STOMP over, +	 * WebSocket support. Therefore this property should be configured explicitly, +	 * only if the WebSocketHandler does not implement {@code SubProtocolCapable}., +		String subProtocol = selectProtocol(headers.getSecWebSocketProtocol(), wsHandler);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Selected sub-protocol: '" + subProtocol + "'");, +		}, +	/**, +	 * Perform the sub-protocol negotiation based on requested and supported sub-protocols., +	 * For the list of supported sub-protocols, this method first checks if the target, +	 * WebSocketHandler is a {@link SubProtocolCapable} and then also checks if any, +	 * sub-protocols have been explicitly configured with, +	 * {@link #setSupportedProtocols(String...)}., +	 *, +	 * @param requestedProtocols the requested sub-protocols, +	 * @param webSocketHandler the WebSocketHandler that will be used, +	 * @return the selected protocols or {@code null}, +	 *, +	 * @see #determineHandlerSupportedProtocols(org.springframework.web.socket.WebSocketHandler), +	 */, +	protected String selectProtocol(List<String> requestedProtocols, WebSocketHandler webSocketHandler) {, +			List<String> handlerProtocols = determineHandlerSupportedProtocols(webSocketHandler);, +				logger.debug("Requested sub-protocol(s): " + requestedProtocols +, +						", WebSocketHandler supported sub-protocol(s): " + handlerProtocols +, +						", configured sub-protocol(s): " + this.supportedProtocols);, +				if (handlerProtocols.contains(protocol.toLowerCase())) {, +					return protocol;, +				if (this.supportedProtocols.contains(protocol.toLowerCase())) {, +	 * Determine the sub-protocols supported by the given WebSocketHandler by checking, +	 * whether it is an instance of {@link SubProtocolCapable}., +	 *, +	 * @param handler the handler to check, +	 * @return a list of supported protocols or an empty list, +	 */, +	protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) {, +		List<String> subProtocols = null;, +		if (handler instanceof SubProtocolCapable) {, +			subProtocols = ((SubProtocolCapable) handler).getSubProtocols();, +		}, +		else if (handler instanceof WebSocketHandlerDecorator) {, +			WebSocketHandler lastHandler = ((WebSocketHandlerDecorator) handler).getLastHandler();, +			if (lastHandler instanceof SubProtocolCapable) {, +				subProtocols = ((SubProtocolCapable) lastHandler).getSubProtocols();;, +			}, +		}, +		return (subProtocols != null) ? subProtocols : Collections.<String>emptyList();]