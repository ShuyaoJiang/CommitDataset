[+++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, +import java.lang.reflect.AnnotatedElement;, +import org.springframework.util.ConcurrentReferenceHashMap;, +import org.springframework.util.ObjectUtils;, +	private static Map<Property, Annotation[]> annotationCache =, +			new ConcurrentReferenceHashMap<Property, Annotation[]>();, +, +		if(this.annotations == null) {, +			this.annotations = resolveAnnotations();, +		}, +		Annotation[] annotations = annotationCache.get(this);, +		if(annotations == null) {, +			Map<Class<? extends Annotation>, Annotation> annotationMap = new LinkedHashMap<Class<? extends Annotation>, Annotation>();, +			addAnnotationsToMap(annotationMap, getReadMethod());, +			addAnnotationsToMap(annotationMap, getWriteMethod());, +			addAnnotationsToMap(annotationMap, getField());, +			annotations = annotationMap.values().toArray(new Annotation[annotationMap.size()]);, +			annotationCache.put(this, annotations);, +		}, +		return annotations;, +	}, +, +	private void addAnnotationsToMap(, +		Map<Class<? extends Annotation>, Annotation> annotationMap,, +		AnnotatedElement object) {, +		if (object != null) {, +			for (Annotation annotation : object.getAnnotations()) {, +				annotationMap.put(annotation.annotationType(), annotation);, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int hashCode = 1;, +		hashCode = prime * hashCode + ObjectUtils.nullSafeHashCode(objectType);, +		hashCode = prime * hashCode + ObjectUtils.nullSafeHashCode(readMethod);, +		hashCode = prime * hashCode + ObjectUtils.nullSafeHashCode(writeMethod);, +		hashCode = prime * hashCode + ObjectUtils.nullSafeHashCode(name);, +		return hashCode;, +	}, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) {, +			return true;, +		}, +		if (obj == null) {, +			return false;, +		}, +		if (getClass() != obj.getClass()) {, +			return false;, +		}, +		Property other = (Property) obj;, +		boolean equals = true;, +		equals &= ObjectUtils.nullSafeEquals(objectType, other.objectType);, +		equals &= ObjectUtils.nullSafeEquals(readMethod, other.readMethod);, +		equals &= ObjectUtils.nullSafeEquals(writeMethod, other.writeMethod);, +		equals &= ObjectUtils.nullSafeEquals(name, other.name);, +		return equals;, +	}]