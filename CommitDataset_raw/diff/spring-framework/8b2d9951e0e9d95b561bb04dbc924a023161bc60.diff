[+++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, + * Copyright 2002-2015 the original author or authors., + * Aspect to route methods based on Spring's {@link Async} annotation., + * <p>This aspect routes methods marked with the {@link Async} annotation as well as methods, + * in classes marked with the same. Any method expected to be routed asynchronously must, + * return either {@code void}, {@link Future}, or a subtype of {@link Future} (in particular,, + * Spring's {@link org.springframework.util.concurrent.ListenableFuture}). This aspect,, + * therefore, will produce a compile-time error for methods that violate this constraint, + * on the return type. If, however, a class marked with {@code @Async} contains a method, + * that violates this constraint, it produces only a warning., +	private pointcut asyncMarkedMethod() : execution(@Async (void || Future+) *(..));, +	private pointcut asyncTypeMarkedMethod() : execution((void || Future+) (@Async *).*(..));, +, +	 * This implementation inspects the given method and its declaring class for the, +	 * {@code @Async} annotation, returning the qualifier value expressed by {@link Async#value()}., +	 * If {@code @Async} is specified at both the method and class level, the method's, +	 * {@code #value} takes precedence (even if empty string, indicating that the default, +	 * executor should be used preferentially)., +	 * {@linkplain #setExecutor default executor} should be used, +		// Maintainer's note: changes made here should also be made in, +		return (async != null ? async.value() : null);, +, +		execution(@Async !(void || Future+) *(..)):, +		execution(!(void || Future+) (@Async *).*(..)):, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, + * Copyright 2002-2015 the original author or authors., + * Aspect to route methods based on Spring's {@link Async} annotation., + * <p>This aspect routes methods marked with the {@link Async} annotation as well as methods, + * in classes marked with the same. Any method expected to be routed asynchronously must, + * return either {@code void}, {@link Future}, or a subtype of {@link Future} (in particular,, + * Spring's {@link org.springframework.util.concurrent.ListenableFuture}). This aspect,, + * therefore, will produce a compile-time error for methods that violate this constraint, + * on the return type. If, however, a class marked with {@code @Async} contains a method, + * that violates this constraint, it produces only a warning., +	private pointcut asyncMarkedMethod() : execution(@Async (void || Future+) *(..));, +	private pointcut asyncTypeMarkedMethod() : execution((void || Future+) (@Async *).*(..));, +, +	 * This implementation inspects the given method and its declaring class for the, +	 * {@code @Async} annotation, returning the qualifier value expressed by {@link Async#value()}., +	 * If {@code @Async} is specified at both the method and class level, the method's, +	 * {@code #value} takes precedence (even if empty string, indicating that the default, +	 * executor should be used preferentially)., +	 * {@linkplain #setExecutor default executor} should be used, +		// Maintainer's note: changes made here should also be made in, +		return (async != null ? async.value() : null);, +, +		execution(@Async !(void || Future+) *(..)):, +		execution(!(void || Future+) (@Async *).*(..)):, +++ b/spring-aspects/src/test/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspectTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.concurrent.ListenableFuture;, +	private final AsyncUncaughtExceptionHandler defaultExceptionHandler = new SimpleAsyncUncaughtExceptionHandler();, +, +, +, +, +, +, +, +		public ListenableFuture<Thread> e1Work() {, +, +]