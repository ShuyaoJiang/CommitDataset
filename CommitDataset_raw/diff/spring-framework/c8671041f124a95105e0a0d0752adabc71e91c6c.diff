[+++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import java.util.ArrayList;, +	/**, +	 * Default list of media types that signify a "streaming" scenario such that, +	 * there may be a time lag between items written and hence requires flushing., +	 */, +	public static final List<MediaType> DEFAULT_STREAMING_MEDIA_TYPES =, +			Collections.singletonList(MediaType.APPLICATION_STREAM_JSON);, +, +, +	private final List<MediaType> streamingMediaTypes = new ArrayList<>(1);, +, +		this.streamingMediaTypes.addAll(DEFAULT_STREAMING_MEDIA_TYPES);, +	/**, +	 * Configure "streaming" media types for which flushing should be performed, +	 * automatically vs at the end of the input stream., +	 * <p>By default this is set to {@link #DEFAULT_STREAMING_MEDIA_TYPES}., +	 * @param mediaTypes one or more media types to add to the list, +	 */, +	public void setStreamingMediaTypes(List<MediaType> mediaTypes) {, +		this.streamingMediaTypes.addAll(mediaTypes);, +	}, +, +	/**, +	 * Return the configured list of "streaming" media types., +	 */, +	public List<MediaType> getStreamingMediaTypes() {, +		return Collections.unmodifiableList(this.streamingMediaTypes);, +	}, +, +		return isStreamingMediaType(headers.getContentType()) ?, +				outputMessage.writeAndFlushWith(body.map(Flux::just)) :, +				outputMessage.writeWith(body);, +	private boolean isStreamingMediaType(MediaType contentType) {, +		return this.streamingMediaTypes.stream().anyMatch(contentType::isCompatibleWith);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import java.util.ArrayList;, +	/**, +	 * Default list of media types that signify a "streaming" scenario such that, +	 * there may be a time lag between items written and hence requires flushing., +	 */, +	public static final List<MediaType> DEFAULT_STREAMING_MEDIA_TYPES =, +			Collections.singletonList(MediaType.APPLICATION_STREAM_JSON);, +, +, +	private final List<MediaType> streamingMediaTypes = new ArrayList<>(1);, +, +		this.streamingMediaTypes.addAll(DEFAULT_STREAMING_MEDIA_TYPES);, +	/**, +	 * Configure "streaming" media types for which flushing should be performed, +	 * automatically vs at the end of the input stream., +	 * <p>By default this is set to {@link #DEFAULT_STREAMING_MEDIA_TYPES}., +	 * @param mediaTypes one or more media types to add to the list, +	 */, +	public void setStreamingMediaTypes(List<MediaType> mediaTypes) {, +		this.streamingMediaTypes.addAll(mediaTypes);, +	}, +, +	/**, +	 * Return the configured list of "streaming" media types., +	 */, +	public List<MediaType> getStreamingMediaTypes() {, +		return Collections.unmodifiableList(this.streamingMediaTypes);, +	}, +, +		return isStreamingMediaType(headers.getContentType()) ?, +				outputMessage.writeAndFlushWith(body.map(Flux::just)) :, +				outputMessage.writeWith(body);, +	private boolean isStreamingMediaType(MediaType contentType) {, +		return this.streamingMediaTypes.stream().anyMatch(contentType::isCompatibleWith);, +	}, +, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import java.util.ArrayList;, +	/**, +	 * Default list of media types that signify a "streaming" scenario such that, +	 * there may be a time lag between items written and hence requires flushing., +	 */, +	public static final List<MediaType> DEFAULT_STREAMING_MEDIA_TYPES =, +			Collections.singletonList(MediaType.APPLICATION_STREAM_JSON);, +, +, +	private final List<MediaType> streamingMediaTypes = new ArrayList<>(1);, +, +		this.streamingMediaTypes.addAll(DEFAULT_STREAMING_MEDIA_TYPES);, +	/**, +	 * Configure "streaming" media types for which flushing should be performed, +	 * automatically vs at the end of the input stream., +	 * <p>By default this is set to {@link #DEFAULT_STREAMING_MEDIA_TYPES}., +	 * @param mediaTypes one or more media types to add to the list, +	 */, +	public void setStreamingMediaTypes(List<MediaType> mediaTypes) {, +		this.streamingMediaTypes.addAll(mediaTypes);]