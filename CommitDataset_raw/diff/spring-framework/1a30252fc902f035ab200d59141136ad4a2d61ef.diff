[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		// In the form X is assignable to <? extends Number>, +	 * For example: {@code ResolvableType.forRawClass(List.class)}., +			@Override, +			public boolean isAssignableFrom(ResolvableType other) {, +				Class<?> otherClass = other.getRawClass();, +				return (otherClass != null && ClassUtils.isAssignable(getRawClass(), otherClass));, +			}, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		// In the form X is assignable to <? extends Number>, +	 * For example: {@code ResolvableType.forRawClass(List.class)}., +			@Override, +			public boolean isAssignableFrom(ResolvableType other) {, +				Class<?> otherClass = other.getRawClass();, +				return (otherClass != null && ClassUtils.isAssignable(getRawClass(), otherClass));, +			}, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +import java.util.Set;, +	@Test, +	public void testSpr14648() throws Exception {, +		ResolvableType collectionClass = ResolvableType.forRawClass(Collection.class);, +		ResolvableType setClass = ResolvableType.forRawClass(Set.class);, +		ResolvableType fromReturnType = ResolvableType.forMethodReturnType(Methods.class.getMethod("wildcardSet"));, +		assertTrue(collectionClass.isAssignableFrom(fromReturnType));, +		assertTrue(setClass.isAssignableFrom(fromReturnType));, +	}, +, +	interface Methods<T> {, +, +		Set<?> wildcardSet();, +	interface TypedMethods extends Methods<String> {, +	interface Wildcard<T extends Number> extends List<T> {, +	interface RawExtendsWildcard extends Wildcard {, +	interface VariableNameSwitch<V, K> extends MultiValueMap<K, V> {, +	interface ListOfGenericArray extends List<List<String>[]> {]