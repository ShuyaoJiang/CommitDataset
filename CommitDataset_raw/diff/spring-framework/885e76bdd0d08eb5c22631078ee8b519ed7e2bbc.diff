[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java, +, +	private static final ThreadLocal<JettyWebSocketHandlerAdapter> adapterHolder =, +	private boolean running = false;, +, +	private final Object lifecycleMonitor = new Object();, +		synchronized (this.lifecycleMonitor) {, +					this.factory.setCreator((request, response) -> adapterHolder.get());, +					throw new IllegalStateException("Unable to start WebSocketServerFactory", ex);, +				}, +		synchronized (this.lifecycleMonitor) {, +					throw new IllegalStateException("Failed to stop WebSocketServerFactory", ex);, +				}, +				finally {, +					this.running = false;, +				}, +		synchronized (this.lifecycleMonitor) {, +	}, +		startLazily(servletRequest);, +, +		boolean isUpgrade = this.factory.isUpgradeRequest(servletRequest, servletResponse);, +		Assert.isTrue(isUpgrade, "Not a WebSocket handshake");, +			adapterHolder.set(adapter);, +			adapterHolder.remove();, +	private void startLazily(HttpServletRequest request) {, +		if (this.servletContext != null) {, +			return;, +		}, +		synchronized (this.lifecycleMonitor) {, +			if (this.servletContext == null) {, +				this.servletContext = request.getServletContext();, +				this.servletContext.setAttribute(DecoratedObjectFactory.ATTR,  new DecoratedObjectFactory());, +				start();, +			}, +		}, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java, +, +	private static final ThreadLocal<JettyWebSocketHandlerAdapter> adapterHolder =, +	private boolean running = false;, +, +	private final Object lifecycleMonitor = new Object();, +		synchronized (this.lifecycleMonitor) {, +					this.factory.setCreator((request, response) -> adapterHolder.get());, +					throw new IllegalStateException("Unable to start WebSocketServerFactory", ex);, +				}, +		synchronized (this.lifecycleMonitor) {, +					throw new IllegalStateException("Failed to stop WebSocketServerFactory", ex);, +				}, +				finally {, +					this.running = false;, +				}, +		synchronized (this.lifecycleMonitor) {, +	}, +		startLazily(servletRequest);, +, +		boolean isUpgrade = this.factory.isUpgradeRequest(servletRequest, servletResponse);, +		Assert.isTrue(isUpgrade, "Not a WebSocket handshake");, +			adapterHolder.set(adapter);, +			adapterHolder.remove();, +	private void startLazily(HttpServletRequest request) {, +		if (this.servletContext != null) {, +			return;, +		}, +		synchronized (this.lifecycleMonitor) {, +			if (this.servletContext == null) {, +				this.servletContext = request.getServletContext();, +				this.servletContext.setAttribute(DecoratedObjectFactory.ATTR,  new DecoratedObjectFactory());, +				start();, +			}, +		}, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/AbstractWebSocketHandlerIntegrationTests.java, +	@Parameters(name = "server [{0}]"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java, +, +	private static final ThreadLocal<JettyWebSocketHandlerAdapter> adapterHolder =, +	private boolean running = false;, +, +	private final Object lifecycleMonitor = new Object();, +		synchronized (this.lifecycleMonitor) {, +					this.factory.setCreator((request, response) -> adapterHolder.get());, +					throw new IllegalStateException("Unable to start WebSocketServerFactory", ex);, +				}, +		synchronized (this.lifecycleMonitor) {, +					throw new IllegalStateException("Failed to stop WebSocketServerFactory", ex);, +				}, +				finally {, +					this.running = false;, +				}, +		synchronized (this.lifecycleMonitor) {, +	}, +		startLazily(servletRequest);, +, +		boolean isUpgrade = this.factory.isUpgradeRequest(servletRequest, servletResponse);, +		Assert.isTrue(isUpgrade, "Not a WebSocket handshake");, +			adapterHolder.set(adapter);, +			adapterHolder.remove();]