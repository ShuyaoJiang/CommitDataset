[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	/**, +	 * The concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	String concurrency() default "";, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	/**, +	 * The concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	String concurrency() default "";, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +		if (StringUtils.hasText(jmsListener.concurrency())) {, +			endpoint.setConcurrency(jmsListener.concurrency());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	/**, +	 * The concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	String concurrency() default "";, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +		if (StringUtils.hasText(jmsListener.concurrency())) {, +			endpoint.setConcurrency(jmsListener.concurrency());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, +	private String concurrency;, +, +	/**, +	 * Set a concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	public void setConcurrency(String concurrency) {, +		this.concurrency = concurrency;, +	}, +, +	/**, +	 * Return the concurrency for the listener, if any., +	 */, +	public String getConcurrency() {, +		return concurrency;, +	}, +		if (getConcurrency() != null) {, +			container.setConcurrency(getConcurrency());, +		}, +		if (getConcurrency() != null) {, +			activationSpecConfig.setConcurrency(getConcurrency());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, +	/**, +	 * The concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	String concurrency() default "";, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +		if (StringUtils.hasText(jmsListener.concurrency())) {, +			endpoint.setConcurrency(jmsListener.concurrency());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, +	private String concurrency;, +, +	/**, +	 * Set a concurrency for the listener, if any., +	 * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>The underlying container may or may not support all features. For instance, it, +	 * may not be able to scale: in that case only the upper value is used., +	 */, +	public void setConcurrency(String concurrency) {, +		this.concurrency = concurrency;, +	}, +, +	/**, +	 * Return the concurrency for the listener, if any., +	 */, +	public String getConcurrency() {, +		return concurrency;, +	}, +		if (getConcurrency() != null) {, +			container.setConcurrency(getConcurrency());]