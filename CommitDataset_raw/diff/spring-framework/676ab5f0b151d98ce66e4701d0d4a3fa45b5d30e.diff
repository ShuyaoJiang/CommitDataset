[+++ b/org.springframework.orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java, + * Copyright 2002-2011 the original author or authors., +import java.io.IOException;, +import javax.persistence.EntityManager;, +import javax.persistence.EntityManagerFactory;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +, +import junit.framework.TestCase;, +import org.easymock.MockControl;, +, +import org.springframework.mock.web.MockFilterConfig;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.mock.web.PassThroughFilterChain;, +import org.springframework.orm.jpa.JpaTemplate;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.context.support.StaticWebApplicationContext;, +public class OpenEntityManagerInViewTests extends TestCase {, +	private MockControl factoryControl, managerControl;, +, +	private EntityManager manager;, +, +	private EntityManagerFactory factory;, +, +	private JpaTemplate template;, +, +, +	@Override, +	protected void setUp() throws Exception {, +		factoryControl = MockControl.createControl(EntityManagerFactory.class);, +		factory = (EntityManagerFactory) factoryControl.getMock();, +		managerControl = MockControl.createControl(EntityManager.class);, +		manager = (EntityManager) managerControl.getMock();, +, +		template = new JpaTemplate(factory);, +		template.afterPropertiesSet();, +, +		factoryControl.expectAndReturn(factory.createEntityManager(), manager);, +	}, +, +	@Override, +	protected void tearDown() throws Exception {, +		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty());, +		assertFalse(TransactionSynchronizationManager.isSynchronizationActive());, +		assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());, +		assertFalse(TransactionSynchronizationManager.isActualTransactionActive());, +	}, +, +	public void testOpenEntityManagerInViewInterceptor() throws Exception {, +		OpenEntityManagerInViewInterceptor interceptor = new OpenEntityManagerInViewInterceptor();, +		interceptor.setEntityManagerFactory(factory);, +, +		MockServletContext sc = new MockServletContext();, +		MockHttpServletRequest request = new MockHttpServletRequest(sc);, +, +		managerControl.replay();, +		factoryControl.replay();, +, +		interceptor.preHandle(new ServletWebRequest(request));, +		assertTrue(TransactionSynchronizationManager.hasResource(factory));, +, +		// check that further invocations simply participate, +		interceptor.preHandle(new ServletWebRequest(request));, +, +		interceptor.preHandle(new ServletWebRequest(request));, +		interceptor.postHandle(new ServletWebRequest(request), null);, +		interceptor.afterCompletion(new ServletWebRequest(request), null);, +, +		interceptor.postHandle(new ServletWebRequest(request), null);, +		interceptor.afterCompletion(new ServletWebRequest(request), null);, +, +		interceptor.preHandle(new ServletWebRequest(request));, +		interceptor.postHandle(new ServletWebRequest(request), null);, +		interceptor.afterCompletion(new ServletWebRequest(request), null);, +, +		factoryControl.verify();, +		managerControl.verify();, +, +		managerControl.reset();, +		factoryControl.reset();, +		managerControl.replay();, +		factoryControl.replay();, +, +		interceptor.postHandle(new ServletWebRequest(request), null);, +		assertTrue(TransactionSynchronizationManager.hasResource(factory));, +, +		factoryControl.verify();, +		managerControl.verify();, +, +		managerControl.reset();, +		factoryControl.reset();, +, +		managerControl.expectAndReturn(manager.isOpen(), true);, +		manager.close();]