[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +, +		super("Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [" +, +				targetType.getName() + "]; reason = '" + cause.getMessage() + "'", cause);, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +, +		super("Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [" +, +				targetType.getName() + "]; reason = '" + cause.getMessage() + "'", cause);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.ObjectUtils;, +, +, +, +		}, +		else if (this.field != null) {, +		}, +		else if (this.methodParameter != null) {, +		}, +		else {, +		return (type != null ? ClassUtils.resolvePrimitiveIfNecessary(type) : type);, +		return ObjectUtils.nullSafeEquals(getType(), type);, +		}, +		else {, +		if (this.elementType != null) {, +			return this.elementType;, +		}, +		else {, +			}, +			else if (isCollection()) {, +			}, +			else {, +		}, +		else if (this.methodParameter != null) {, +		}, +		else {, +		}, +		else if (this.methodParameter != null) {, +		}, +		else {, +		}, +		else if (this.methodParameter != null) {, +		}, +		else {, +	private Class<?> getArrayComponentType() {, +		return getType().getComponentType();, +	}, +, +	@SuppressWarnings("unchecked"), +	private Class<?> getCollectionElementType() {, +		if (this.type != null) {, +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) this.type);, +		}, +		else if (this.field != null) {, +			return GenericCollectionTypeResolver.getCollectionFieldType(this.field);, +		}, +		else {, +			return GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter);, +		}, +	}, +, +	private boolean isTypeAssignableTo(Class<?> clazz) {, +		Class<?> type = getType();, +		return (type != null && ClassUtils.isAssignable(clazz, type));, +	}, +, +		}, +		else {, +	public String toString() {, +		if (this == TypeDescriptor.NULL) {, +			return "[TypeDescriptor.NULL]";, +		else {, +			StringBuilder builder = new StringBuilder();, +			builder.append("[TypeDescriptor ");, +			Annotation[] anns = getAnnotations();, +			for (Annotation ann : anns) {, +				builder.append("@").append(ann.annotationType().getName()).append(' ');, +			}, +			builder.append(getType().getName());, +			builder.append("]");, +			return builder.toString();, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +, +		super("Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [" +, +				targetType.getName() + "]; reason = '" + cause.getMessage() + "'", cause);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.ObjectUtils;, +, +]