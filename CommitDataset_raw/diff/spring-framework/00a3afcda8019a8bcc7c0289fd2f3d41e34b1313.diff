[+++ b/src/docs/asciidoc/web-reactive.adoc, +This part of the documentation covers support for reactive-stack web applications built on a, +servers, such as Netty, Undertow, and Servlet 3.1+ containers. Individual chapters cover, +the reactive <<webflux-client,`WebClient`>>, support for <<webflux-test, testing>>,, +and <<webflux-reactive-libraries, reactive libraries>>. For Servlet-stack web applications, see, +See <<testing.adoc#mock-objects-web-reactive,Spring Web Reactive>> for a discussion of mock objects., +<<testing.adoc#webtestclient,`WebTestClient`>> builds on these mock request and, +response objects to provide support for testing WebFlux applications without an HTTP, +server. You can use the `WebTestClient` for end-to-end integration tests, too., +//[[webflux-threading-model]], +//=== Threading model, +// TODO Once we have content for this heading, we should un-comment the heading and, +// anchor. Until then, we should leave it commented., +logic and to provide Reactive Streams support. Generally, WebFlux APIs return `Flux` or, +`Mono` (since those are used internally) and leniently accept any Reactive Streams, +`Publisher` implementation as input. The use of `Flux` versus `Mono` is important, because it, +helps to express cardinality -- for example, whether a single or multiple asynchronous values are, +expected, and that can be essential for making decisions (for example, when encoding or, +decoding HTTP messages)., +{api-spring-framework}/core/ReactiveAdapterRegistry.html[`ReactiveAdapterRegistry`], which, +has built-in support for RxJava and `CompletableFuture`, but you can register others, too., +For functional APIs (such as <<webflux-fn>>, the `WebClient`, and others), the general rules, +for WebFlux APIs apply -- `Flux` and `Mono` as return values and a Reactive Streams, +is provided, it can be treated only as a stream with unknown semantics (0..N). If, however,, +expects multiple values. If the media type implies an infinite stream (for example,, +`application/json+stream`), values are written and flushed individually. Otherwise,, +++ b/src/docs/asciidoc/web-reactive.adoc, +This part of the documentation covers support for reactive-stack web applications built on a, +servers, such as Netty, Undertow, and Servlet 3.1+ containers. Individual chapters cover, +the reactive <<webflux-client,`WebClient`>>, support for <<webflux-test, testing>>,, +and <<webflux-reactive-libraries, reactive libraries>>. For Servlet-stack web applications, see, +See <<testing.adoc#mock-objects-web-reactive,Spring Web Reactive>> for a discussion of mock objects., +<<testing.adoc#webtestclient,`WebTestClient`>> builds on these mock request and, +response objects to provide support for testing WebFlux applications without an HTTP, +server. You can use the `WebTestClient` for end-to-end integration tests, too., +//[[webflux-threading-model]], +//=== Threading model, +// TODO Once we have content for this heading, we should un-comment the heading and, +// anchor. Until then, we should leave it commented., +logic and to provide Reactive Streams support. Generally, WebFlux APIs return `Flux` or, +`Mono` (since those are used internally) and leniently accept any Reactive Streams, +`Publisher` implementation as input. The use of `Flux` versus `Mono` is important, because it, +helps to express cardinality -- for example, whether a single or multiple asynchronous values are, +expected, and that can be essential for making decisions (for example, when encoding or, +decoding HTTP messages)., +{api-spring-framework}/core/ReactiveAdapterRegistry.html[`ReactiveAdapterRegistry`], which, +has built-in support for RxJava and `CompletableFuture`, but you can register others, too., +For functional APIs (such as <<webflux-fn>>, the `WebClient`, and others), the general rules, +for WebFlux APIs apply -- `Flux` and `Mono` as return values and a Reactive Streams, +is provided, it can be treated only as a stream with unknown semantics (0..N). If, however,, +expects multiple values. If the media type implies an infinite stream (for example,, +`application/json+stream`), values are written and flushed individually. Otherwise,, +++ b/src/docs/asciidoc/web.adoc, +This part of the documentation covers support for Servlet-stack web applications built on the, +For reactive-stack web applications, see <<web-reactive.adoc#spring-web-reactive,Web on Reactive Stack>>., +++ b/src/docs/asciidoc/web-reactive.adoc, +This part of the documentation covers support for reactive-stack web applications built on a, +servers, such as Netty, Undertow, and Servlet 3.1+ containers. Individual chapters cover, +the reactive <<webflux-client,`WebClient`>>, support for <<webflux-test, testing>>,, +and <<webflux-reactive-libraries, reactive libraries>>. For Servlet-stack web applications, see, +See <<testing.adoc#mock-objects-web-reactive,Spring Web Reactive>> for a discussion of mock objects., +<<testing.adoc#webtestclient,`WebTestClient`>> builds on these mock request and, +response objects to provide support for testing WebFlux applications without an HTTP, +server. You can use the `WebTestClient` for end-to-end integration tests, too., +//[[webflux-threading-model]], +//=== Threading model, +// TODO Once we have content for this heading, we should un-comment the heading and, +// anchor. Until then, we should leave it commented., +logic and to provide Reactive Streams support. Generally, WebFlux APIs return `Flux` or, +`Mono` (since those are used internally) and leniently accept any Reactive Streams, +`Publisher` implementation as input. The use of `Flux` versus `Mono` is important, because it, +helps to express cardinality -- for example, whether a single or multiple asynchronous values are, +expected, and that can be essential for making decisions (for example, when encoding or, +decoding HTTP messages)., +{api-spring-framework}/core/ReactiveAdapterRegistry.html[`ReactiveAdapterRegistry`], which, +has built-in support for RxJava and `CompletableFuture`, but you can register others, too., +For functional APIs (such as <<webflux-fn>>, the `WebClient`, and others), the general rules, +for WebFlux APIs apply -- `Flux` and `Mono` as return values and a Reactive Streams, +is provided, it can be treated only as a stream with unknown semantics (0..N). If, however,, +expects multiple values. If the media type implies an infinite stream (for example,, +`application/json+stream`), values are written and flushed individually. Otherwise,, +++ b/src/docs/asciidoc/web.adoc, +This part of the documentation covers support for Servlet-stack web applications built on the, +For reactive-stack web applications, see <<web-reactive.adoc#spring-web-reactive,Web on Reactive Stack>>., +++ b/src/docs/asciidoc/web/integration.adoc, +_choice_. In a general sense, Spring does not force you to use or buy into any, +(<<mvc,Spring MVC>>) while, at the same time, providing integration with a number of, +== Common Configuration, +first take a look at the Spring configuration that is not specific to any one web, +One of the concepts (for want of a better word) espoused by Spring's lightweight, +application model is that of a layered architecture. Remember that in a "`classic`", +layered architecture, the web layer is but one of many layers. It serves as one of the, +entry points into a server-side application, and it delegates to service objects, +(facades) that are defined in a service layer to satisfy business-specific (and, +business-specific objects, data-access objects, and others exist in a distinct "`business, +context`", which contains no web or presentation layer objects (presentation objects, +,such as Spring MVC controllers, are typically configured in a distinct "`presentation, +context`"). This section details how you can configure a Spring container (a, +`WebApplicationContext`) that contains all of the 'business beans' in your application., +Moving on to specifics, all you one need to do is declare a]