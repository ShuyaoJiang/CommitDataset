[+++ b/src/docs/asciidoc/core/core-aop.adoc, +====, +[source,java,indent=0], +====, +	@Pointcut("execution(* get*())"), +	@Pointcut("execution(org.xyz.Account+ *(..))"), +	@Pointcut("propertyAccess() && operationReturningAnAccount()"), +In the XML style you can declare the first two pointcuts:, +(`com.xyz.myapp.domain.Account`). Since the default name for a bean is the, +++ b/src/docs/asciidoc/core/core-aop.adoc, +====, +[source,java,indent=0], +====, +	@Pointcut("execution(* get*())"), +	@Pointcut("execution(org.xyz.Account+ *(..))"), +	@Pointcut("propertyAccess() && operationReturningAnAccount()"), +In the XML style you can declare the first two pointcuts:, +(`com.xyz.myapp.domain.Account`). Since the default name for a bean is the, +++ b/src/docs/asciidoc/data-access.adoc, +You can configure additional aspects in similar fashion., +transaction semantics given by the class annotation (if present). You can annotate any method,, +Spring provides a convenient translation from technology-specific exceptions, such as, +injected by using one of the `@Autowired`, `@Inject`, `@Resource` or `@PersistenceContext`, +example uses only one configuration method (we show examples of multiple methods later):, +The `execute` method used here takes a plain `java.util.Map` as its only parameter. The, +process) -- for example, integration tests against embedded databases whose, +You can annotate the service layer with `@Transactional` annotations and instruct the, +NOTE: We strongly encourage you to read <<transaction-declarative>>, if you have not already done]