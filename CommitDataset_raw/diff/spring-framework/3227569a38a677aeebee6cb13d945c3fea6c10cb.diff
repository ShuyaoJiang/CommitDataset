[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, +import org.springframework.core.type.filter.TypeFilter;, +	private TypeFilter[] entityTypeFilters;, +, +	 * @since 4.0, +	 * @since 4.0, +	 * @since 4.0, +	 * Specify custom type filters for Spring-based scanning for entity classes., +	 * <p>Default is to search all specified packages for classes annotated with, +	 * {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}, +	 * or {@code @javax.persistence.MappedSuperclass}., +	 * @since 4.1, +	 * @see #setPackagesToScan, +	 */, +	public void setEntityTypeFilters(TypeFilter... entityTypeFilters) {, +		this.entityTypeFilters = entityTypeFilters;, +	}, +, +	/**, +		if (this.entityTypeFilters != null) {, +			sfb.setEntityTypeFilters(this.entityTypeFilters);, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, +import org.springframework.core.type.filter.TypeFilter;, +	private TypeFilter[] entityTypeFilters;, +, +	 * @since 4.0, +	 * @since 4.0, +	 * @since 4.0, +	 * Specify custom type filters for Spring-based scanning for entity classes., +	 * <p>Default is to search all specified packages for classes annotated with, +	 * {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}, +	 * or {@code @javax.persistence.MappedSuperclass}., +	 * @since 4.1, +	 * @see #setPackagesToScan, +	 */, +	public void setEntityTypeFilters(TypeFilter... entityTypeFilters) {, +		this.entityTypeFilters = entityTypeFilters;, +	}, +, +	/**, +		if (this.entityTypeFilters != null) {, +			sfb.setEntityTypeFilters(this.entityTypeFilters);, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java, +	private static final Set<TypeFilter> defaultTypeFilters;, +		defaultTypeFilters = new LinkedHashSet<TypeFilter>(4);, +		defaultTypeFilters.add(new AnnotationTypeFilter(Entity.class, false));, +		defaultTypeFilters.add(new AnnotationTypeFilter(Embeddable.class, false));, +		defaultTypeFilters.add(new AnnotationTypeFilter(MappedSuperclass.class, false));, +			defaultTypeFilters.add(new AnnotationTypeFilter(converterAnnotation, false));, +	private TypeFilter[] entityTypeFilters = defaultTypeFilters.toArray(new TypeFilter[defaultTypeFilters.size()]);, +, +	 * @since 4.0, +	 * @since 4.0, +	 * @since 4.0, +	 * Specify custom type filters for Spring-based scanning for entity classes., +	 * <p>Default is to search all specified packages for classes annotated with, +	 * {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}, +	 * or {@code @javax.persistence.MappedSuperclass}., +	 * @since 4.1, +	 * @see #scanPackages, +	 */, +	public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {, +		this.entityTypeFilters = entityTypeFilters;, +		return this;, +	}, +, +	/**, +		if (this.entityTypeFilters != null) {, +			for (TypeFilter filter : this.entityTypeFilters) {, +		}]