[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +	private final HttpHeaders defaultHeaders;, +	private final MultiValueMap<String, String> defaultCookies;, +, +, +	DefaultWebClient(ExchangeFunction exchangeFunction, UriBuilderFactory factory,, +			HttpHeaders defaultHeaders, MultiValueMap<String, String> defaultCookies) {, +, +, +		this.defaultHeaders = defaultHeaders != null ?, +				HttpHeaders.readOnlyHttpHeaders(defaultHeaders) : null;, +, +		this.defaultCookies = defaultCookies != null ?, +				CollectionUtils.unmodifiableMultiValueMap(defaultCookies) : null;, +		return new DefaultWebClient(filteredExchangeFunction,, +				this.uriBuilderFactory, this.defaultHeaders, this.defaultCookies);, +, +		@Override, +		public HeaderSpec uri(URI uri) {, +			return new DefaultHeaderSpec(this.httpMethod, uri);, +		}, +		private final HttpMethod httpMethod;, +		private final URI uri;, +, +		private HttpHeaders headers;, +, +		private MultiValueMap<String, String> cookies;, +		DefaultHeaderSpec(HttpMethod httpMethod, URI uri) {, +			this.httpMethod = httpMethod;, +			this.uri = uri;, +		private HttpHeaders getHeaders() {, +			if (this.headers == null) {, +				this.headers = new HttpHeaders();, +			}, +			return this.headers;, +		}, +, +		private MultiValueMap<String, String> getCookies() {, +			if (this.cookies == null) {, +				this.cookies = new LinkedMultiValueMap<>(4);, +			}, +			return this.cookies;, +		}, +, +				getHeaders().add(headerName, headerValue);, +				getHeaders().putAll(headers);, +			getHeaders().setAccept(Arrays.asList(acceptableMediaTypes));, +			getHeaders().setAcceptCharset(Arrays.asList(acceptableCharsets));, +			getHeaders().setContentType(contentType);, +			getHeaders().setContentLength(contentLength);, +			getCookies().add(name, value);, +			if (cookies != null) {, +				getCookies().putAll(cookies);, +			}, +			getHeaders().set(HttpHeaders.IF_MODIFIED_SINCE, headerValue);, +			getHeaders().setIfNoneMatch(Arrays.asList(ifNoneMatches));, +			ClientRequest<Void> request = initRequestBuilder().build();, +			ClientRequest<T> request = initRequestBuilder().body(inserter);, +			ClientRequest<S> request = initRequestBuilder().headers(this.headers).body(publisher, elementClass);, +, +		private ClientRequest.Builder initRequestBuilder() {, +			return ClientRequest.method(this.httpMethod, this.uri).headers(initHeaders()).cookies(initCookies());, +		}, +, +		private HttpHeaders initHeaders() {, +			if (CollectionUtils.isEmpty(defaultHeaders) && CollectionUtils.isEmpty(this.headers)) {, +				return null;, +			}, +			else if (CollectionUtils.isEmpty(defaultHeaders)) {, +				return this.headers;, +			}, +			else if (CollectionUtils.isEmpty(this.headers)) {, +				return defaultHeaders;, +			}, +			else {, +				HttpHeaders result = new HttpHeaders();, +				result.putAll(this.headers);, +				defaultHeaders.forEach((name, values) -> {, +					if (!this.headers.containsKey(name)) {, +						values.forEach(value -> result.add(name, value));, +					}, +				});, +				return result;, +			}, +		}, +, +		private MultiValueMap<String, String> initCookies() {, +			if (CollectionUtils.isEmpty(defaultCookies) && CollectionUtils.isEmpty(this.cookies)) {, +				return null;, +			}, +			else if (CollectionUtils.isEmpty(defaultCookies)) {, +				return this.cookies;, +			}, +			else if (CollectionUtils.isEmpty(this.cookies)) {, +				return defaultCookies;, +			}, +			else {, +				MultiValueMap<String, String> result = new LinkedMultiValueMap<>();]