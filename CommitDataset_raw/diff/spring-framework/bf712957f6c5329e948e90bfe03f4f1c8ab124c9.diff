[+++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +		Assert.notNull(id, "'id' is required");, +		setSessionCookie(exchange, id, getCookieMaxAge());, +	}, +, +	@Override, +	public void expireSession(ServerWebExchange exchange) {, +		setSessionCookie(exchange, "", Duration.ofSeconds(0));, +	}, +, +	private void setSessionCookie(ServerWebExchange exchange, String id, Duration maxAge) {, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +		Assert.notNull(id, "'id' is required");, +		setSessionCookie(exchange, id, getCookieMaxAge());, +	}, +, +	@Override, +	public void expireSession(ServerWebExchange exchange) {, +		setSessionCookie(exchange, "", Duration.ofSeconds(0));, +	}, +, +	private void setSessionCookie(ServerWebExchange exchange, String id, Duration maxAge) {, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, + * Default implementation of {@link WebSessionManager} delegating to a, + * {@link WebSessionIdResolver} for session id resolution and to a, + * {@link WebSessionStore}, +	 * Configure the id resolution strategy., +	 * <p>By default an instance of {@link CookieWebSessionIdResolver}., +	 * @param sessionIdResolver the resolver to use, +		Assert.notNull(sessionIdResolver, "WebSessionIdResolver is required.");, +	 * Configure the persistence strategy., +	 * <p>By default an instance of {@link InMemoryWebSessionStore}., +	 * @param sessionStore the persistence strategy to use, +		Assert.notNull(sessionStore, "WebSessionStore is required.");, +	 * Configure the {@link Clock} to use to set lastAccessTime on every created, +	 * session and to calculate if it is expired., +	 * <p>This may be useful to align to different timezone or to set the clock, +	 * back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}, +	 * in order to simulate session expiration., +	 * <p>By default this is {@code Clock.system(ZoneId.of("GMT"))}., +	 * Return the configured clock for session lastAccessTime calculations., +				retrieveSession(exchange), +						.flatMap(session -> removeSessionIfExpired(exchange, session)), +						.switchIfEmpty(createSession()), +						.doOnNext(session -> {, +								ConfigurableWebSession configurable = (ConfigurableWebSession) session;, +								configurable.setSaveOperation(() -> saveSession(exchange, session));, +								configurable.setLastAccessTime(Instant.now(getClock()));, +						}));, +	private Mono<WebSession> retrieveSession(ServerWebExchange exchange) {, +		return Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)), +				.concatMap(this.sessionStore::retrieveSession), +				.next();, +	}, +	private Mono<WebSession> removeSessionIfExpired(ServerWebExchange exchange, WebSession session) {, +		if (session.isExpired()) {, +			this.sessionIdResolver.setSessionId(exchange, "");, +			return this.sessionStore.removeSession(session.getId()).then(Mono.empty());, +		}, +		return Mono.just(session);, +	}, +, +	private Mono<DefaultWebSession> createSession() {, +		return Mono.fromSupplier(() ->, +				new DefaultWebSession(UUID.randomUUID().toString(), getClock()));, +	}, +, +	private Mono<Void> saveSession(ServerWebExchange exchange, WebSession session) {, +					"lastAccessTime updated when first accessed during request processing. " +, +					"before the call to session.save()."));, +		if (hasNewSessionId(exchange, session)) {, +, +	private boolean hasNewSessionId(ServerWebExchange exchange, WebSession session) {, +		List<String> ids = getSessionIdResolver().resolveSessionIds(exchange);, +		return ids.isEmpty() || !session.getId().equals(ids.get(0));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +		Assert.notNull(id, "'id' is required");, +		setSessionCookie(exchange, id, getCookieMaxAge());, +	}, +, +	@Override, +	public void expireSession(ServerWebExchange exchange) {, +		setSessionCookie(exchange, "", Duration.ofSeconds(0));, +	}, +, +	private void setSessionCookie(ServerWebExchange exchange, String id, Duration maxAge) {, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, + * Default implementation of {@link WebSessionManager} delegating to a, + * {@link WebSessionIdResolver} for session id resolution and to a, + * {@link WebSessionStore}, +	 * Configure the id resolution strategy., +	 * <p>By default an instance of {@link CookieWebSessionIdResolver}., +	 * @param sessionIdResolver the resolver to use, +		Assert.notNull(sessionIdResolver, "WebSessionIdResolver is required.");, +	 * Configure the persistence strategy., +	 * <p>By default an instance of {@link InMemoryWebSessionStore}., +	 * @param sessionStore the persistence strategy to use, +		Assert.notNull(sessionStore, "WebSessionStore is required.");]