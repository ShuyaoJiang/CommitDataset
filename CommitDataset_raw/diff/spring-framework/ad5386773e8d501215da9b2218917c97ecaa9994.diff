[+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * Set the maximum length of the payload body to be included in the log message., +			requestToUse = new ContentCachingRequestWrapper(request, getMaxPayloadLength());, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * Set the maximum length of the payload body to be included in the log message., +			requestToUse = new ContentCachingRequestWrapper(request, getMaxPayloadLength());, +++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java, + * Copyright 2002-2017 the original author or authors., +	private final Integer contentCacheLimit;, +, +		this.contentCacheLimit = null;, +	}, +, +	/**, +	 * Create a new ContentCachingRequestWrapper for the given servlet request., +	 * @param request the original servlet request, +	 * @param contentCacheLimit the maximum number of bytes to cache per request, +	 * @since 4.3.6, +	 * @see #handleContentOverflow(int), +	 */, +	public ContentCachingRequestWrapper(HttpServletRequest request, int contentCacheLimit) {, +		super(request);, +		this.cachedContent = new ByteArrayOutputStream(contentCacheLimit);, +		this.contentCacheLimit = contentCacheLimit;, +	 * <p>The returned array will never be larger than the content cache limit., +	 * @see #ContentCachingRequestWrapper(HttpServletRequest, int), +	/**, +	 * Template method for handling a content overflow: specifically, a request, +	 * body being read that exceeds the specified content cache limit., +	 * <p>The default implementation is empty. Subclasses may override this to, +	 * throw a payload-too-large exception or the like., +	 * @param contentCacheLimit the maximum number of bytes to cache per request, +	 * which has just been exceeded, +	 * @since 4.3.6, +	 * @see #ContentCachingRequestWrapper(HttpServletRequest, int), +	 */, +	protected void handleContentOverflow(int contentCacheLimit) {, +	}, +, +		private boolean overflow = false;, +, +			if (ch != -1 && !this.overflow) {, +				if (contentCacheLimit != null && cachedContent.size() == contentCacheLimit) {, +					this.overflow = true;, +					handleContentOverflow(contentCacheLimit);, +				}, +				else {, +			}, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * Set the maximum length of the payload body to be included in the log message., +			requestToUse = new ContentCachingRequestWrapper(request, getMaxPayloadLength());, +++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java, + * Copyright 2002-2017 the original author or authors., +	private final Integer contentCacheLimit;, +, +		this.contentCacheLimit = null;, +	}, +, +	/**, +	 * Create a new ContentCachingRequestWrapper for the given servlet request., +	 * @param request the original servlet request, +	 * @param contentCacheLimit the maximum number of bytes to cache per request, +	 * @since 4.3.6, +	 * @see #handleContentOverflow(int), +	 */, +	public ContentCachingRequestWrapper(HttpServletRequest request, int contentCacheLimit) {, +		super(request);, +		this.cachedContent = new ByteArrayOutputStream(contentCacheLimit);, +		this.contentCacheLimit = contentCacheLimit;, +	 * <p>The returned array will never be larger than the content cache limit., +	 * @see #ContentCachingRequestWrapper(HttpServletRequest, int), +	/**, +	 * Template method for handling a content overflow: specifically, a request, +	 * body being read that exceeds the specified content cache limit., +	 * <p>The default implementation is empty. Subclasses may override this to, +	 * throw a payload-too-large exception or the like., +	 * @param contentCacheLimit the maximum number of bytes to cache per request, +	 * which has just been exceeded, +	 * @since 4.3.6, +	 * @see #ContentCachingRequestWrapper(HttpServletRequest, int), +	 */, +	protected void handleContentOverflow(int contentCacheLimit) {, +	}, +, +		private boolean overflow = false;, +, +			if (ch != -1 && !this.overflow) {, +				if (contentCacheLimit != null && cachedContent.size() == contentCacheLimit) {, +					this.overflow = true;, +					handleContentOverflow(contentCacheLimit);, +				}, +				else {, +			}, +++ b/spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.util.ContentCachingRequestWrapper;, +import org.springframework.web.util.WebUtils;]