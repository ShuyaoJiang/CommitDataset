[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, +		catch (Exception ex) {, +		public int getLoginTimeout() throws SQLException {, +			return this.dataSource.getLoginTimeout();, +		}, +, +		public void setLoginTimeout(int seconds) throws SQLException {, +			this.dataSource.setLoginTimeout(seconds);, +		public boolean isWrapperFor(Class<?> iface) throws SQLException {, +			return this.dataSource.isWrapperFor(iface);, +		}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, +		catch (Exception ex) {, +		public int getLoginTimeout() throws SQLException {, +			return this.dataSource.getLoginTimeout();, +		}, +, +		public void setLoginTimeout(int seconds) throws SQLException {, +			this.dataSource.setLoginTimeout(seconds);, +		public boolean isWrapperFor(Class<?> iface) throws SQLException {, +			return this.dataSource.isWrapperFor(iface);, +		}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +			catch (Exception ex) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, +		catch (Exception ex) {, +		public int getLoginTimeout() throws SQLException {, +			return this.dataSource.getLoginTimeout();, +		}, +, +		public void setLoginTimeout(int seconds) throws SQLException {, +			this.dataSource.setLoginTimeout(seconds);, +		public boolean isWrapperFor(Class<?> iface) throws SQLException {, +			return this.dataSource.isWrapperFor(iface);, +		}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +			catch (Exception ex) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * <p>Call {@link #addScript(Resource)} to add a SQL script location., + * Call {@link #setSqlScriptEncoding(String)} to set the encoding for all added scripts., +	 * Execute the given SQL script., +	 * <p>The script will normally be loaded by classpath. There should be one statement per line., +	 * Any semicolons will be removed., +	 * <p><b>Do not use this method to execute DDL if you expect rollback.</b>, +	 * @param resource the resource (potentially associated with a specific encoding) to load the SQL script from, +	 * @param continueOnError whether or not to continue without throwing an exception in the event of an error, +	 * @param ignoreFailedDrops whether of not to continue in the event of specifically an error on a <code>DROP</code>, +	private void executeSqlScript(Connection connection, EncodedResource resource,, +			boolean continueOnError, boolean ignoreFailedDrops) throws SQLException {, +					boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop");, +							logger.debug("Failed to execute SQL script statement at line " + lineNumber +, +									" of resource " + resource + ": " + statement, ex);, +						throw new ScriptStatementFailedException(statement, lineNumber, resource, ex);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, +		catch (Exception ex) {, +		public int getLoginTimeout() throws SQLException {, +			return this.dataSource.getLoginTimeout();, +		}, +, +		public void setLoginTimeout(int seconds) throws SQLException {, +			this.dataSource.setLoginTimeout(seconds);, +		public boolean isWrapperFor(Class<?> iface) throws SQLException {, +			return this.dataSource.isWrapperFor(iface);, +		}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/DataSourceInitializer.java, +			catch (Exception ex) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * <p>Call {@link #addScript(Resource)} to add a SQL script location., + * Call {@link #setSqlScriptEncoding(String)} to set the encoding for all added scripts., +	 * Execute the given SQL script., +	 * <p>The script will normally be loaded by classpath. There should be one statement per line., +	 * Any semicolons will be removed., +	 * <p><b>Do not use this method to execute DDL if you expect rollback.</b>, +	 * @param resource the resource (potentially associated with a specific encoding) to load the SQL script from, +	 * @param continueOnError whether or not to continue without throwing an exception in the event of an error, +	 * @param ignoreFailedDrops whether of not to continue in the event of specifically an error on a <code>DROP</code>, +	private void executeSqlScript(Connection connection, EncodedResource resource,, +			boolean continueOnError, boolean ignoreFailedDrops) throws SQLException {, +					boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop");, +							logger.debug("Failed to execute SQL script statement at line " + lineNumber +, +									" of resource " + resource + ": " + statement, ex);, +						throw new ScriptStatementFailedException(statement, lineNumber, resource, ex);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]