[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		Set<String> patterns = getMappingPathPatterns(mapping);, +		for (String pattern : patterns) {, +			if (!getPathMatcher().isPattern(pattern)) {, +				urlMap.add(pattern, mapping);, +			}, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		Set<String> patterns = getMappingPathPatterns(mapping);, +		for (String pattern : patterns) {, +			if (!getPathMatcher().isPattern(pattern)) {, +				urlMap.add(pattern, mapping);, +			}, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, +public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> implements RequestCondition<T> {, +	 * Returns the discrete items a request condition is composed of such as URL patterns, , +	 * The notation to use when printing discrete items of content in the toString() method., +	 * For example URL patterns use " || " while parameter expressions use " && "., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		Set<String> patterns = getMappingPathPatterns(mapping);, +		for (String pattern : patterns) {, +			if (!getPathMatcher().isPattern(pattern)) {, +				urlMap.add(pattern, mapping);, +			}, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, +public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> implements RequestCondition<T> {, +	 * Returns the discrete items a request condition is composed of such as URL patterns, , +	 * The notation to use when printing discrete items of content in the toString() method., +	 * For example URL patterns use " || " while parameter expressions use " && "., +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		Set<String> patterns = getMappingPathPatterns(mapping);, +		for (String pattern : patterns) {, +			if (!getPathMatcher().isPattern(pattern)) {, +				urlMap.add(pattern, mapping);, +			}, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, +public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> implements RequestCondition<T> {, +	 * Returns the discrete items a request condition is composed of such as URL patterns, , +	 * The notation to use when printing discrete items of content in the toString() method., +	 * For example URL patterns use " || " while parameter expressions use " && "., +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/CustomRequestCondition.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.method;, +, +import java.util.Collection;, +import java.util.Collections;, +, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.web.servlet.mvc.condition.AbstractRequestCondition;, +import org.springframework.web.servlet.mvc.condition.RequestCondition;, +, +/**, + * Wraps and delegates operations to a {@link RequestCondition} whose type is not known ahead of time. The main goal , + * is to provide type-safe and null-safe way of comparing and combining optional custom {@link RequestCondition}s., + * , + * @author Rossen Stoyanchev, + * @since 3.1, + */, +final class CustomRequestCondition extends AbstractRequestCondition<CustomRequestCondition> {, +, +	@SuppressWarnings("rawtypes"), +	private final RequestCondition customCondition;, +	, +	/**, +	 * Creates an instance that wraps the given custom request condition. , +	 * @param requestCondition the custom request condition, +	 */, +	CustomRequestCondition(RequestCondition<?> requestCondition) {, +		this.customCondition = requestCondition;, +	}, +, +	/**, +	 * Creates an instance that does not wrap any custom request condition., +	 */, +	CustomRequestCondition() {, +		this(null);, +	}, +, +	public RequestCondition<?> getCondition() {]