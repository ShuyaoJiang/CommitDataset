[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request, response);, +			this.flashMapManager.requestCompleted(request, response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request, response);, +			this.flashMapManager.requestCompleted(request, response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +	 * @param createdBy identifies the FlashMapManager instance that created, +	 * 	and will manage this FlashMap instance (e.g. via a hashCode)  , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request, response);, +			this.flashMapManager.requestCompleted(request, response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +	 * @param createdBy identifies the FlashMapManager instance that created, +	 * 	and will manage this FlashMap instance (e.g. via a hashCode)  , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, +import javax.servlet.http.HttpServletResponse;, +	 * @param response the current response, +	void requestStarted(HttpServletRequest request, HttpServletResponse response);, +	 * @param response the current response, +	void requestCompleted(HttpServletRequest request, HttpServletResponse response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request, response);, +			this.flashMapManager.requestCompleted(request, response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +	 * @param createdBy identifies the FlashMapManager instance that created, +	 * 	and will manage this FlashMap instance (e.g. via a hashCode)  , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, +import javax.servlet.http.HttpServletResponse;, +	 * @param response the current response, +	void requestStarted(HttpServletRequest request, HttpServletResponse response);, +	 * @param response the current response, +	void requestCompleted(HttpServletRequest request, HttpServletResponse response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/DefaultFlashMapManager.java, +import javax.servlet.http.HttpServletResponse;, +	public final void requestStarted(HttpServletRequest request, HttpServletResponse response) {, +	 * Check and remove expired FlashMaps instances., +	protected void removeExpiredFlashMaps(HttpServletRequest request) {, +	public void requestCompleted(HttpServletRequest request, HttpServletResponse response) {, +			onSaveFlashMap(flashMap, request, response);, +			saveFlashMap(flashMap, request, response);, +	 * Update a FlashMap before it is stored in the underlying storage., +	 * @param response the current response, +	protected void onSaveFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response) {, +	/**, +	 * Save the FlashMap in the underlying storage., +	 * @param flashMap the FlashMap to save, +	 * @param request the current request, +	 * @param response the current response, +	 */, +	protected void saveFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response) {, +		retrieveFlashMaps(request, true).add(flashMap);, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.flashMapManager.requestStarted(request, response);, +			this.flashMapManager.requestCompleted(request, response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +	 * @param createdBy identifies the FlashMapManager instance that created, +	 * 	and will manage this FlashMap instance (e.g. via a hashCode)  , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, +import javax.servlet.http.HttpServletResponse;, +	 * @param response the current response, +	void requestStarted(HttpServletRequest request, HttpServletResponse response);, +	 * @param response the current response, +	void requestCompleted(HttpServletRequest request, HttpServletResponse response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/DefaultFlashMapManager.java, +import javax.servlet.http.HttpServletResponse;, +	public final void requestStarted(HttpServletRequest request, HttpServletResponse response) {, +	 * Check and remove expired FlashMaps instances., +	protected void removeExpiredFlashMaps(HttpServletRequest request) {, +	public void requestCompleted(HttpServletRequest request, HttpServletResponse response) {, +			onSaveFlashMap(flashMap, request, response);, +			saveFlashMap(flashMap, request, response);, +	 * Update a FlashMap before it is stored in the underlying storage., +	 * @param response the current response, +	protected void onSaveFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response) {, +	/**, +	 * Save the FlashMap in the underlying storage., +	 * @param flashMap the FlashMap to save, +	 * @param request the current request, +	 * @param response the current response, +	 */, +	protected void saveFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response) {, +		retrieveFlashMaps(request, true).add(flashMap);, +	}, +	, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/DefaultFlashMapManagerTests.java, +import org.springframework.mock.web.MockHttpServletResponse;, +	private MockHttpServletResponse response;, +	, +		this.response = new MockHttpServletResponse();, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);, +		this.flashMapManager.requestStarted(this.request, this.response);]