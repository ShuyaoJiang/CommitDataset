[+++ b/spring-web/src/test/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriterTests.java, +import org.springframework.http.client.MultipartBodyBuilder;, +import org.springframework.http.codec.ClientCodecConfigurer;, + * @author Rossen Stoyanchev, +	private final MultipartHttpMessageWriter writer =, +			new MultipartHttpMessageWriter(ClientCodecConfigurer.create().getWriters());, +				// SPR-12108, +		MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder();, +		bodyBuilder.part("name 1", "value 1");, +		bodyBuilder.part("name 2", "value 2+1");, +		bodyBuilder.part("name 2", "value 2+2");, +		bodyBuilder.part("logo", logo);, +		bodyBuilder.part("utf8", utf8);, +		bodyBuilder.part("json", new Foo("bar"), MediaType.APPLICATION_JSON_UTF8);, +		Mono<MultiValueMap<String, HttpEntity<?>>> publisher = Mono.just(bodyBuilder.build());, +		this.writer.write(publisher, null, MediaType.MULTIPART_FORM_DATA, response, hints).block(Duration.ofSeconds(5));, +		MultiValueMap<String, Part> requestParts = parse(response, hints);, +	private MultiValueMap<String, Part> parse(MockServerHttpResponse response, Map<String, Object> hints) {, +		MediaType contentType = response.getHeaders().getContentType();, +		assertNotNull("No boundary found", contentType.getParameter("boundary"));, +, +		// see if Synchronoss NIO Multipart can read what we wrote, +		SynchronossPartHttpMessageReader synchronossReader = new SynchronossPartHttpMessageReader();, +		MultipartHttpMessageReader reader = new MultipartHttpMessageReader(synchronossReader);, +, +		MockServerHttpRequest request = MockServerHttpRequest.post("/"), +				.contentType(MediaType.parseMediaType(contentType.toString())), +				.body(response.getBody());, +, +		ResolvableType elementType = ResolvableType.forClassWithGenerics(, +				MultiValueMap.class, String.class, Part.class);, +, +		MultiValueMap<String, Part> result = reader.readMono(elementType, request, hints), +				.block(Duration.ofSeconds(5));, +, +		assertNotNull(result);, +		return result;, +	}, +]