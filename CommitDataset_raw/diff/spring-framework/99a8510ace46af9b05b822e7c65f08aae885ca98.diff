[+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http;, +, +import java.io.ByteArrayOutputStream;, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * Represent the content disposition type and parameters as defined in RFC 2183., + *, + * @author Sebastien Deleuze, + * @since 5.0, + * @see <a href="https://tools.ietf.org/html/rfc2183">RFC 2183</a>, + */, +public class ContentDisposition {, +, +	private final String type;, +, +	private final String name;, +, +	private final String filename;, +, +	private final Charset charset;, +, +	private final Long size;, +, +	/**, +	 * Create a {@code ContentDisposition} instance with the specified disposition type, +	 * and {@litteral name}, {@litteral filename} (encoded with the specified {@link Charset}, +	 * if any) and {@litteral size} parameter values., +	 */, +	private ContentDisposition(String type, String name, String filename, Charset charset, Long size) {, +		this.type = type;, +		this.name = name;, +		this.filename = filename;, +		this.charset = charset;, +		this.size = size;, +	}, +, +	/**, +	 * Return a builder for a {@code ContentDisposition}., +	 * @param type the disposition type like for example {@literal inline}, {@literal attachment},, +	 * or {@literal form-data}, +	 * @return a content disposition builder, +	 */, +	public static Builder builder(String type) {, +		return new BuilderImpl(type);, +	}, +, +	/**, +	 * @return an empty content disposition, +	 */, +	public static ContentDisposition empty() {, +		return new ContentDisposition(null, null, null, null, null);, +	}, +, +	/**, +	 * Return the disposition type, like for example {@literal inline}, {@literal attachment},, +	 * {@literal form-data}, or {@code null} if not defined., +	 */, +	public String getType() {, +		return this.type;, +	}, +, +	/**, +	 * Return the value of the {@literal name} parameter, or {@code null} if not defined., +	 */, +	public String getName() {, +		return this.name;, +	}, +, +	/**, +	 * Return the value of the {@literal filename} parameter (or the value of the, +	 * {@literal filename*} one decoded as defined in the RFC 5987), or {@code null} if not defined., +	 */, +	public String getFilename() {, +		return this.filename;, +	}, +, +	/**, +	 * Return the charset defined in {@literal filename*} parameter, or {@code null} if not defined.]