[+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import org.springframework.lang.Nullable;, + * @author Ruslan Sibgatullin, +	@Nullable, +	private CronSequenceGenerator(String expression, String[] fields) {, +		this.expression = expression;, +		this.timeZone = null;, +		doParse(fields);, +	}, +, +			reset(calendar, Collections.singletonList(field));, +		doParse(fields);, +	}, +, +	private void doParse(String[] fields) {, +, +	public static boolean isValidExpression(@Nullable String expression) {, +		if (expression == null) {, +			return false;, +		}, +		if (!areValidCronFields(fields)) {, +			return false;, +		}, +		try {, +			new CronSequenceGenerator(expression, fields);, +			return true;, +		}, +		catch (IllegalArgumentException ex) {, +			return false;, +		}, +	private static boolean areValidCronFields(@Nullable String[] fields) {, +		return (fields != null && fields.length == 6);, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import org.springframework.lang.Nullable;, + * @author Ruslan Sibgatullin, +	@Nullable, +	private CronSequenceGenerator(String expression, String[] fields) {, +		this.expression = expression;, +		this.timeZone = null;, +		doParse(fields);, +	}, +, +			reset(calendar, Collections.singletonList(field));, +		doParse(fields);, +	}, +, +	private void doParse(String[] fields) {, +, +	public static boolean isValidExpression(@Nullable String expression) {, +		if (expression == null) {, +			return false;, +		}, +		if (!areValidCronFields(fields)) {, +			return false;, +		}, +		try {, +			new CronSequenceGenerator(expression, fields);, +			return true;, +		}, +		catch (IllegalArgumentException ex) {, +			return false;, +		}, +	private static boolean areValidCronFields(@Nullable String[] fields) {, +		return (fields != null && fields.length == 6);, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java, + * Copyright 2002-2017 the original author or authors., + * @author Ruslan Sibgatullin, +	public void invalidExpressionWithLength() {, +	public void invalidExpressionWithSeconds() {, +		assertFalse(CronSequenceGenerator.isValidExpression("100 */2 1-4 * * *"));, +	}, +, +	@Test, +	public void invalidExpressionWithMonths() {, +		assertFalse(CronSequenceGenerator.isValidExpression("0 */2 1-4 * INVALID *"));, +	}, +, +	@Test]