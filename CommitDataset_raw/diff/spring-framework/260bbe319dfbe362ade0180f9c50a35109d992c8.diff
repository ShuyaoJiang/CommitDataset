[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +	private Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<MethodParameter, NamedValueInfo>(256);, +, +, +	public AbstractNamedValueMethodArgumentResolver() {, +		this.configurableBeanFactory = null;, +		this.expressionContext = null;, +	}, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, new RequestScope()) : null);, +, +	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,, +			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {, +		public NamedValueInfo(String name, boolean required, String defaultValue) {, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +	private Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<MethodParameter, NamedValueInfo>(256);, +, +, +	public AbstractNamedValueMethodArgumentResolver() {, +		this.configurableBeanFactory = null;, +		this.expressionContext = null;, +	}, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, new RequestScope()) : null);, +, +	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,, +			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {, +		public NamedValueInfo(String name, boolean required, String defaultValue) {, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +, +	/**, +	 * @param useDefaultResolution in default resolution mode a method argument, +	 * that is a simple type, as defined in {@link BeanUtils#isSimpleProperty},, +	 * is treated as a request parameter even if it it isn't annotated, the, +	 * request parameter name is derived from the method parameter name., +	 */, +	public RequestParamMethodArgumentResolver(boolean useDefaultResolution) {, +		this.useDefaultResolution = useDefaultResolution;, +	}, +, +	 * is treated as a request parameter even if it it isn't annotated, the, +	public RequestParamMethodArgumentResolver(ConfigurableBeanFactory beanFactory, boolean useDefaultResolution) {, +, +			for (Object element : (Collection<?>) value) {, +				element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element);, +				builder.queryParam(name, element);, +		return (cs != null ? (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR) : null);, +	private static class RequestParamNamedValueInfo extends NamedValueInfo {, +		public RequestParamNamedValueInfo() {, +		public RequestParamNamedValueInfo(RequestParam annotation) {, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +	private Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<MethodParameter, NamedValueInfo>(256);, +, +, +	public AbstractNamedValueMethodArgumentResolver() {, +		this.configurableBeanFactory = null;, +		this.expressionContext = null;, +	}, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, new RequestScope()) : null);, +, +	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,, +			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {, +		public NamedValueInfo(String name, boolean required, String defaultValue) {, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +, +	/**, +	 * @param useDefaultResolution in default resolution mode a method argument, +	 * that is a simple type, as defined in {@link BeanUtils#isSimpleProperty},, +	 * is treated as a request parameter even if it it isn't annotated, the, +	 * request parameter name is derived from the method parameter name., +	 */, +	public RequestParamMethodArgumentResolver(boolean useDefaultResolution) {, +		this.useDefaultResolution = useDefaultResolution;, +	}, +, +	 * is treated as a request parameter even if it it isn't annotated, the, +	public RequestParamMethodArgumentResolver(ConfigurableBeanFactory beanFactory, boolean useDefaultResolution) {, +, +			for (Object element : (Collection<?>) value) {, +				element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element);, +				builder.queryParam(name, element);, +		return (cs != null ? (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR) : null);, +	private static class RequestParamNamedValueInfo extends NamedValueInfo {, +		public RequestParamNamedValueInfo() {, +		public RequestParamNamedValueInfo(RequestParam annotation) {, +++ b/spring-web/src/main/java/org/springframework/web/method/support/CompositeUriComponentsContributor.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +, +	private final List<UriComponentsContributor> contributors = new LinkedList<UriComponentsContributor>();, +	 * {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}, +	 * and provide that to this constructor., +	 * @param contributors a collection of {@link UriComponentsContributor}, +	 * or {@link HandlerMethodArgumentResolver}s., +	 */, +	public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {, +		Collections.addAll(this.contributors, contributors);, +		this.conversionService = new DefaultFormattingConversionService();, +	}]