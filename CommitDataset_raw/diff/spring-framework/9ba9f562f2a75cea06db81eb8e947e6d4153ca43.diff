[+++ b/src/asciidoc/index.adoc, +To autodetect these classes and register the corresponding beans, you need to add, +`@ComponentScan` to your `@Configuration` class, where the `basePackages` attribute, +is a common parent package for the two classes. (Alternatively, you can specify a, +comma-separated list that includes the parent package of each class.), +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@ComponentScan(basePackages = "org.example"), +	public class AppConfig  {, +    	..., +	}, +----, +, +[NOTE], +====, +for concision, the above may have used the `value` attribute of the, +annotation, i.e. `ComponentScan("org.example")`, +====, +, +The following is an alternative using XML, +simply by applying custom filters. Add them as __includeFilters__ or __excludeFilters__, +parameters of the `@ComponentScan` annotation (or as __include-filter__ or __exclude-filter__, +sub-elements of the `component-scan` element). Each filter element requires the `type`, +| annotation (default), +The following example shows the configuration ignoring all `@Repository` annotations, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +    @ComponentScan(basePackages = "org.example",, +    		includeFilters = @Filter(type = FilterType.REGEX, pattern = ".*Stub.*Repository"),, +    		excludeFilters = @Filter(Repository.class)), +    public class AppConfig {, +    	..., +    }, +----, +, +and the equivalent using XML, +, +You can also disable the default filters by setting `useDefaultFilters=false` on the annotation or, +providing `use-default-filters="false"` as an attribute of the <component-scan/> element. This, +will in effect disable automatic detection of classes annotated with `@Component`, `@Repository`,, +`@Service`, or `@Controller`., +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +    @ComponentScan(basePackages = "org.example", nameGenerator = MyNameGenerator.class), +    public class AppConfig {, +    	..., +    }, +----, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@ComponentScan(basePackages = "org.example", scopeResolver = MyScopeResolver.class), +	public class AppConfig {, +    	..., +    }, +----, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@ComponentScan(basePackages = "org.example", scopedProxy = ScopedProxyMode.INTERFACES), +	public class AppConfig {, +    	..., +    }, +----, +, +[source,java,indent=0], +	@Configuration, +	@ComponentScan(basePackages = "org.example"), +	public class AppConfig  {, +    	..., +	}, +To enable component scanning, just annotate your `@Configuration` class as follows:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@ComponentScan(basePackages = "com.acme"), +	public class AppConfig  {, +    	..., +	}, +----, +, +[TIP], +====, +, +Experienced Spring users will be familiar with the XML declaration equivalent from, +Spring's `context:` namespace]