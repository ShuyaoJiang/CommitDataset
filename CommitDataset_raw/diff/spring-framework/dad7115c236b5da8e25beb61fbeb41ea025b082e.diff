[+++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.codehaus.jackson:jackson-mapper-asl:1.9.12"), +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.codehaus.jackson:jackson-mapper-asl:1.9.12"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, + * An abstract base class for {@link SockJsService} implementations that provides SockJS, + * path resolution and handling of static SockJS requests (e.g. "/info", "/iframe.html",, + * etc). Transport-specific requests are left as abstract methods., + * <p>, + * This service can be integrated into any HTTP request handling mechanism (e.g. plain, + * Servlet, Spring MVC, or other). It is expected that it will be mapped correctly to a, + * prefix (e.g. "/echo") and will also handle all sub-URLs (i.e. "/echo/**")., + * <p>, + * The service itself is unaware of the underlying mapping mechanism but nevertheless must, + * be able to extract the SockJS path, i.e. the portion of the request path following the, + * prefix. In most cases, this class can auto-detect the SockJS path but it is also, + * possible to configure explicitly the prefixes via, + * {@link #setValidSockJsPrefixes(String...)}., +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.codehaus.jackson:jackson-mapper-asl:1.9.12"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, + * An abstract base class for {@link SockJsService} implementations that provides SockJS, + * path resolution and handling of static SockJS requests (e.g. "/info", "/iframe.html",, + * etc). Transport-specific requests are left as abstract methods., + * <p>, + * This service can be integrated into any HTTP request handling mechanism (e.g. plain, + * Servlet, Spring MVC, or other). It is expected that it will be mapped correctly to a, + * prefix (e.g. "/echo") and will also handle all sub-URLs (i.e. "/echo/**")., + * <p>, + * The service itself is unaware of the underlying mapping mechanism but nevertheless must, + * be able to extract the SockJS path, i.e. the portion of the request path following the, + * prefix. In most cases, this class can auto-detect the SockJS path but it is also, + * possible to configure explicitly the prefixes via, + * {@link #setValidSockJsPrefixes(String...)}., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler webSocketHandler) {, +		Assert.notNull(sessionId, "sessionId is required");, +		Assert.notNull(config, "sockJsConfig is required");, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = webSocketHandler;, +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.codehaus.jackson:jackson-mapper-asl:1.9.12"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, + * An abstract base class for {@link SockJsService} implementations that provides SockJS, + * path resolution and handling of static SockJS requests (e.g. "/info", "/iframe.html",, + * etc). Transport-specific requests are left as abstract methods., + * <p>, + * This service can be integrated into any HTTP request handling mechanism (e.g. plain, + * Servlet, Spring MVC, or other). It is expected that it will be mapped correctly to a, + * prefix (e.g. "/echo") and will also handle all sub-URLs (i.e. "/echo/**")., + * <p>, + * The service itself is unaware of the underlying mapping mechanism but nevertheless must, + * be able to extract the SockJS path, i.e. the portion of the request path following the, + * prefix. In most cases, this class can auto-detect the SockJS path but it is also, + * possible to configure explicitly the prefixes via, + * {@link #setValidSockJsPrefixes(String...)}., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler webSocketHandler) {, +		Assert.notNull(sessionId, "sessionId is required");, +		Assert.notNull(config, "sockJsConfig is required");, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = webSocketHandler;, +++ /dev/null, +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.codehaus.jackson:jackson-mapper-asl:1.9.12"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, + * An abstract base class for {@link SockJsService} implementations that provides SockJS, + * path resolution and handling of static SockJS requests (e.g. "/info", "/iframe.html",, + * etc). Transport-specific requests are left as abstract methods., + * <p>, + * This service can be integrated into any HTTP request handling mechanism (e.g. plain, + * Servlet, Spring MVC, or other). It is expected that it will be mapped correctly to a, + * prefix (e.g. "/echo") and will also handle all sub-URLs (i.e. "/echo/**")., + * <p>, + * The service itself is unaware of the underlying mapping mechanism but nevertheless must, + * be able to extract the SockJS path, i.e. the portion of the request path following the, + * prefix. In most cases, this class can auto-detect the SockJS path but it is also, + * possible to configure explicitly the prefixes via, + * {@link #setValidSockJsPrefixes(String...)}., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler webSocketHandler) {, +		Assert.notNull(sessionId, "sessionId is required");, +		Assert.notNull(config, "sockJsConfig is required");, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = webSocketHandler;, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsConfiguration.java, +	int getStreamBytesLimit();, +	long getHeartbeatTime();, +	TaskScheduler getTaskScheduler();, +, +	/**, +	 * The codec to use for encoding and decoding SockJS messages., +	 * @exception IllegalStateException if no {@link SockJsMessageCodec} is available, +	 */]