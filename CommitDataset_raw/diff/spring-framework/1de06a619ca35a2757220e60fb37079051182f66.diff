[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java, +/*, + * Copyright 2002-2006 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.aspectj;, +, +import static org.junit.Assert.*;, +, +import java.lang.reflect.Method;, +import java.util.Arrays;, +, +import org.aspectj.lang.JoinPoint;, +import org.aspectj.lang.JoinPoint.StaticPart;, +import org.aspectj.lang.ProceedingJoinPoint;, +import org.aspectj.lang.reflect.MethodSignature;, +import org.aspectj.lang.reflect.SourceLocation;, +import org.junit.Test;, +, +import org.springframework.aop.MethodBeforeAdvice;, +import org.springframework.aop.framework.AopContext;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.interceptor.ExposeInvocationInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +, +/**, + * @author Rod Johnson, + * @author Chris Beams, + * @since 2.0, + */, +public class MethodInvocationProceedingJoinPointTests {, +	, +    @Test, +	public void testingBindingWithJoinPoint() {, +		try {, +			AbstractAspectJAdvice.currentJoinPoint();, +			fail("Needs to be bound by interceptor action");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +	}, +	, +    @Test, +	public void testingBindingWithProceedingJoinPoint() {, +		try {, +			AbstractAspectJAdvice.currentJoinPoint();, +			fail("Needs to be bound by interceptor action");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +	}, +	, +    @Test, +	public void testCanGetMethodSignatureFromJoinPoint() {, +		final Object raw = new TestBean();, +		// Will be set by advice during a method call, +		final int newAge = 23;, +		, +		ProxyFactory pf = new ProxyFactory(raw);, +		pf.setExposeProxy(true);, +		pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);, +		pf.addAdvice(new MethodBeforeAdvice() {, +			private int depth;, +			, +			public void before(Method method, Object[] args, Object target) throws Throwable {, +				JoinPoint jp = AbstractAspectJAdvice.currentJoinPoint();, +				assertTrue("Method named in toString", jp.toString().indexOf(method.getName()) != -1);, +				// Ensure that these don't cause problems, +				jp.toShortString();, +				jp.toLongString();, +				, +				assertSame(target, AbstractAspectJAdvice.currentJoinPoint().getTarget());, +				assertFalse(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getTarget()));, +				, +				ITestBean thisProxy = (ITestBean) AbstractAspectJAdvice.currentJoinPoint().getThis();, +				assertTrue(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getThis()));, +				, +				assertNotSame(target, thisProxy);, +				, +				// Check getting again doesn't cause a problem, +				assertSame(thisProxy, AbstractAspectJAdvice.currentJoinPoint().getThis());, +				, +				// Try reentrant call--will go through this advice., +				// Be sure to increment depth to avoid infinite recursion]