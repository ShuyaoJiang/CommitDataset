[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (parameter != nestedParameter || !ClassUtils.isAssignableValue(parameter.getParameterType(), arg)) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (parameter != nestedParameter || !ClassUtils.isAssignableValue(parameter.getParameterType(), arg)) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolverTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Optional;, + * @author Juergen Hoeller, +	private MethodParameter paramOptional;, +		this.paramOptional = new SynthesizingMethodParameter(method, 5);, +		this.paramNativeHeader = new SynthesizingMethodParameter(method, 6);, +	@Test, +	public void resolveOptionalHeaderWithValue() throws Exception {, +		GenericApplicationContext cxt = new GenericApplicationContext();, +		cxt.refresh();, +, +		HeaderMethodArgumentResolver resolver =, +				new HeaderMethodArgumentResolver(new DefaultConversionService(), cxt.getBeanFactory());, +, +		Message<String> message = MessageBuilder.withPayload("foo").setHeader("foo", "bar").build();, +		Object result = resolver.resolveArgument(paramOptional, message);, +		assertEquals(Optional.of("bar"), result);, +	}, +, +	@Test, +	public void resolveOptionalHeaderAsEmpty() throws Exception {, +		GenericApplicationContext cxt = new GenericApplicationContext();, +		cxt.refresh();, +, +		HeaderMethodArgumentResolver resolver =, +				new HeaderMethodArgumentResolver(new DefaultConversionService(), cxt.getBeanFactory());, +, +		Message<String> message = MessageBuilder.withPayload("foo").build();, +		Object result = resolver.resolveArgument(paramOptional, message);, +		assertEquals(Optional.empty(), result);, +	}, +, +			@Header("foo") Optional<String> param6,]