[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a thread-safe type conversion using, +	public Object convert(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a thread-safe type conversion using, +	public Object convert(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public Object convert(Object source, TypeDescriptor targetType) {, +				return parent.convert(source, targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a thread-safe type conversion using, +	public Object convert(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public Object convert(Object source, TypeDescriptor targetType) {, +				return parent.convert(source, targetType);, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java, +		assertEquals(new Integer(3), service.convert("3", type(Integer.class)));, +		assertEquals(null, service.convert(null, type(Integer.class)));, +		assertEquals(false, service.convert(false, type(boolean.class)));, +			service.convert("3", type(Integer.class));, +			service.convert("3", type(Integer.class));, +		service.convert(foo, new TypeDescriptor(getClass().getField("genericMap")));, +		assertEquals(FooEnum.BAR, service.convert("BAR", type(FooEnum.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a thread-safe type conversion using, +	public Object convert(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public Object convert(Object source, TypeDescriptor targetType) {, +				return parent.convert(source, targetType);, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java, +		assertEquals(new Integer(3), service.convert("3", type(Integer.class)));, +		assertEquals(null, service.convert(null, type(Integer.class)));, +		assertEquals(false, service.convert(false, type(boolean.class)));, +			service.convert("3", type(Integer.class));, +			service.convert("3", type(Integer.class));, +		service.convert(foo, new TypeDescriptor(getClass().getField("genericMap")));, +		assertEquals(FooEnum.BAR, service.convert("BAR", type(FooEnum.class)));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java, +			return conversionService.convert(value, typeDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, TypeDescriptor)} to perform a thread-safe type conversion using, +	public Object convert(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public Object convert(Object source, TypeDescriptor targetType) {, +				return parent.convert(source, targetType);, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java, +		assertEquals(new Integer(3), service.convert("3", type(Integer.class)));, +		assertEquals(null, service.convert(null, type(Integer.class)));, +		assertEquals(false, service.convert(false, type(boolean.class)));, +			service.convert("3", type(Integer.class));, +			service.convert("3", type(Integer.class));, +		service.convert(foo, new TypeDescriptor(getClass().getField("genericMap")));, +		assertEquals(FooEnum.BAR, service.convert("BAR", type(FooEnum.class)));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java, +			return conversionService.convert(value, typeDescriptor);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestsUsingCoreConversionService.java, +		List l = (List) tcs.convert(listOfInteger, typeDescriptorForListOfString);, +		l = (List) tcs.convert(listOfString, typeDescriptorForListOfString);, +			return (T)super.convert(value,TypeDescriptor.valueOf(targetType));, +			return super.convert(value, typeDescriptor);]