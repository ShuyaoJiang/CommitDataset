[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, + * @see ScheduledAnnotationBeanPostProcessor, +	/**, +	 * The default name of the {@link TaskExecutor} bean to pick up: "taskExecutor"., +	 * <p>Note that the initial lookup happens by type; this is just the fallback, +	 * in case of multiple executor beans found in the context., +	 */, +	public static final String DEFAULT_TASK_EXECUTOR_BEAN_NAME = "taskExecutor";, +, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +, +		Executor executorToUse = this.executor;, +		if (executorToUse == null) {, +			try {, +				// Search for TaskExecutor bean... not plain Executor since that would, +				// match with ScheduledExecutorService as well, which is unusable for, +				// our purposes here. TaskExecutor is more clearly designed for it., +				executorToUse = beanFactory.getBean(TaskExecutor.class);, +			}, +			catch (NoUniqueBeanDefinitionException ex) {, +				try {, +					executorToUse = beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, TaskExecutor.class);, +				}, +				catch (NoSuchBeanDefinitionException ex2) {, +					throw new IllegalStateException("More than one TaskExecutor bean exists within the context, " +, +							"and none is named 'taskExecutor'. Mark one of them as primary or name it " +, +							"'taskExecutor' (possibly as an alias); or specify the AsyncConfigurer interface " +, +							"and implement getAsyncExecutor() accordingly.", ex);, +				}, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				logger.debug("Could not find default TaskExecutor bean", ex);, +				// Giving up -> falling back to default executor within the advisor..., +			}, +		}, +, +		AsyncAnnotationAdvisor advisor =  new AsyncAnnotationAdvisor(executorToUse, this.exceptionHandler);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, + * @see ScheduledAnnotationBeanPostProcessor, +	/**, +	 * The default name of the {@link TaskExecutor} bean to pick up: "taskExecutor"., +	 * <p>Note that the initial lookup happens by type; this is just the fallback, +	 * in case of multiple executor beans found in the context., +	 */, +	public static final String DEFAULT_TASK_EXECUTOR_BEAN_NAME = "taskExecutor";, +, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +, +		Executor executorToUse = this.executor;, +		if (executorToUse == null) {, +			try {, +				// Search for TaskExecutor bean... not plain Executor since that would, +				// match with ScheduledExecutorService as well, which is unusable for, +				// our purposes here. TaskExecutor is more clearly designed for it., +				executorToUse = beanFactory.getBean(TaskExecutor.class);, +			}, +			catch (NoUniqueBeanDefinitionException ex) {, +				try {, +					executorToUse = beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, TaskExecutor.class);, +				}, +				catch (NoSuchBeanDefinitionException ex2) {, +					throw new IllegalStateException("More than one TaskExecutor bean exists within the context, " +, +							"and none is named 'taskExecutor'. Mark one of them as primary or name it " +, +							"'taskExecutor' (possibly as an alias); or specify the AsyncConfigurer interface " +, +							"and implement getAsyncExecutor() accordingly.", ex);, +				}, +			}, +			catch (NoSuchBeanDefinitionException ex) {, +				logger.debug("Could not find default TaskExecutor bean", ex);, +				// Giving up -> falling back to default executor within the advisor..., +			}, +		}, +, +		AsyncAnnotationAdvisor advisor =  new AsyncAnnotationAdvisor(executorToUse, this.exceptionHandler);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * @see AsyncAnnotationBeanPostProcessor, +	 * The default name of the {@link TaskScheduler} bean to pick up: "taskScheduler"., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;]