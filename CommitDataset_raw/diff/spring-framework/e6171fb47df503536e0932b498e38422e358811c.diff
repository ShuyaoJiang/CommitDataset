[+++ b/spring-webmvc/src/main/kotlin/org/springframework/web/servlet/function/RouterFunctionDsl.kt, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.function, +, +import org.springframework.core.io.Resource, +import org.springframework.http.HttpMethod, +import org.springframework.http.HttpStatus, +import org.springframework.http.MediaType, +import java.net.URI, +import java.util.*, +import java.util.function.Supplier, +, +/**, + * Allow to create easily a WebMvc.fn `RouterFunction<ServerResponse>` from a Kotlin router, + * DSL leveraging WebMvc.fn the Java API ([RouterFunction], [RequestPredicate],, + * [HandlerFunction])., + *, + * Example:, + *, + * ```, + * @Configuration, + * class ApplicationRoutes(val userHandler: UserHandler) {, + *, + * 	@Bean, + * 	fun mainRouter() = router {, + * 		accept(TEXT_HTML).nest {, + * 			(GET("/user/") or GET("/users/")).invoke(userHandler::findAllView), + * 			GET("/users/{login}", userHandler::findViewById), + * 		}, + * 		accept(APPLICATION_JSON).nest {, + * 			(GET("/api/user/") or GET("/api/users/")).invoke(userHandler::findAll), + * 			POST("/api/users/", userHandler::create), + * 		}, + * 	}, + *, + * }, + * ```, + * @author Sebastien Deleuze, + * @see RouterFunctionDsl, + * @see RouterFunctions.Builder, + * @since 5.2, + */, +fun router(routes: (RouterFunctionDsl.() -> Unit)) = RouterFunctionDsl(routes).build(), +, +/**, + * Provide a WebMvc.fn [RouterFunction] Kotlin DSL in order to be able to write idiomatic Kotlin code., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +class RouterFunctionDsl(private val init: (RouterFunctionDsl.() -> Unit)) {, +, +	private val builder = RouterFunctions.route(), +, +	/**, +	 * Return a composed request predicate that tests against both this predicate AND, +	 * the [other] predicate (String processed as a path predicate). When evaluating the, +	 * composed predicate, if this predicate is `false`, then the [other] predicate is not, +	 * evaluated., +	 * @see RequestPredicate.and, +	 * @see RequestPredicates.path, +	 */, +	infix fun RequestPredicate.and(other: String): RequestPredicate = this.and(path(other)), +, +	/**, +	 * Return a composed request predicate that tests against both this predicate OR, +	 * the [other] predicate (String processed as a path predicate). When evaluating the, +	 * composed predicate, if this predicate is `true`, then the [other] predicate is not, +	 * evaluated., +	 * @see RequestPredicate.or, +	 * @see RequestPredicates.path, +	 */, +	infix fun RequestPredicate.or(other: String): RequestPredicate = this.or(path(other)), +, +	/**, +	 * Return a composed request predicate that tests against both this predicate (String, +	 * processed as a path predicate) AND the [other] predicate. When evaluating the, +	 * composed predicate, if this predicate is `false`, then the [other] predicate is not, +	 * evaluated., +	 * @see RequestPredicate.and, +	 * @see RequestPredicates.path, +	 */, +	infix fun String.and(other: RequestPredicate): RequestPredicate = path(this).and(other), +, +	/**]