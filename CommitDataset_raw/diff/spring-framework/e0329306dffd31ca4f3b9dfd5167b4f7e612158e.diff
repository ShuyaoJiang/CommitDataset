[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +	 * Create a new {@code BeanPropertyRowMapper} for bean-style configuration., +	 * Create a new {@code BeanPropertyRowMapper}, accepting unpopulated, +	 * properties in the target bean., +	 * Create a new {@code BeanPropertyRowMapper}., +	 * Static factory method to create a new {@code BeanPropertyRowMapper}, +		return new BeanPropertyRowMapper<T>(mappedClass);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +	 * Create a new {@code BeanPropertyRowMapper} for bean-style configuration., +	 * Create a new {@code BeanPropertyRowMapper}, accepting unpopulated, +	 * properties in the target bean., +	 * Create a new {@code BeanPropertyRowMapper}., +	 * Static factory method to create a new {@code BeanPropertyRowMapper}, +		return new BeanPropertyRowMapper<T>(mappedClass);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +	private Class<?> requiredType;, +	 * Create a new {@code SingleColumnRowMapper} for bean-style configuration., +	 * Create a new {@code SingleColumnRowMapper}., +	 * <p>Consider using the {@link #newInstance} factory method instead,, +	 * which allows for specifying the required type once only., +		setRequiredType(requiredType);, +, +		this.requiredType = ClassUtils.resolvePrimitiveIfNecessary(requiredType);, +	 * Static factory method to create a new {@code SingleColumnRowMapper}, +		return new SingleColumnRowMapper<T>(requiredType);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +	 * Create a new {@code BeanPropertyRowMapper} for bean-style configuration., +	 * Create a new {@code BeanPropertyRowMapper}, accepting unpopulated, +	 * properties in the target bean., +	 * Create a new {@code BeanPropertyRowMapper}., +	 * Static factory method to create a new {@code BeanPropertyRowMapper}, +		return new BeanPropertyRowMapper<T>(mappedClass);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +	private Class<?> requiredType;, +	 * Create a new {@code SingleColumnRowMapper} for bean-style configuration., +	 * Create a new {@code SingleColumnRowMapper}., +	 * <p>Consider using the {@link #newInstance} factory method instead,, +	 * which allows for specifying the required type once only., +		setRequiredType(requiredType);, +, +		this.requiredType = ClassUtils.resolvePrimitiveIfNecessary(requiredType);, +	 * Static factory method to create a new {@code SingleColumnRowMapper}, +		return new SingleColumnRowMapper<T>(requiredType);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Rob Winch, +, +, +, +, +, +, +, +, +	public void testQueryForIntPrimitive() throws Exception {, +		String sql = "SELECT AGE FROM CUSTMR WHERE ID = 3";, +		given(this.resultSet.next()).willReturn(true, false);, +		given(this.resultSet.getInt(1)).willReturn(22);, +		int i = this.template.queryForObject(sql, int.class);, +		assertEquals("Return of an int", 22, i);, +		verify(this.resultSet).close();, +		verify(this.statement).close();, +	}, +, +	@Test, +	public void testQueryForLongPrimitive() throws Exception {, +		String sql = "SELECT AGE FROM CUSTMR WHERE ID = 3";, +		given(this.resultSet.next()).willReturn(true, false);, +		given(this.resultSet.getLong(1)).willReturn(87L);, +		long l = this.template.queryForObject(sql, long.class);, +		assertEquals("Return of a long", 87, l);, +		verify(this.resultSet).close();, +		verify(this.statement).close();, +	}, +, +	@Test]