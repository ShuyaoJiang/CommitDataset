[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java, +	public boolean sendInternal(Message<?> message, long timeout) {, +		for (MessageHandler handler : getSubscribers()) {, +			SendTask sendTask = new SendTask(message, handler);, +	 * Invoke a MessageHandler with ExecutorChannelInterceptor's., +	private class SendTask implements Runnable {, +, +		private final Message<?> inputMessage;, +, +		private final MessageHandler handler;, +, +		public SendTask(Message<?> message, MessageHandler handler) {, +			this.inputMessage = message;, +			this.handler = handler;, +		}, +, +		@Override, +		public void run() {, +			Message<?> message = this.inputMessage;, +			try {, +				message = applyBeforeHandle(message);, +				if (message == null) {, +					return;, +				}, +				this.handler.handleMessage(message);, +				triggerAfterMessageHandled(message, null);, +			}, +			catch (Exception ex) {, +				triggerAfterMessageHandled(message, ex);, +				if (ex instanceof MessagingException) {, +					throw (MessagingException) ex;, +				}, +				String description = "Failed to handle " + message + " to " + this + " in " + this.handler;, +				throw new MessageDeliveryException(message, description, ex);, +			}, +			catch (Error ex) {, +				String description = "Failed to handle " + message + " to " + this + " in " + this.handler;, +				triggerAfterMessageHandled(message, new MessageDeliveryException(message, description, ex));, +				throw ex;, +			}, +		}, +, +		private Message<?> applyBeforeHandle(Message<?> message) {, +				message = interceptor.beforeHandle(message, ExecutorSubscribableChannel.this, this.handler);, +					triggerAfterMessageHandled(message, null);, +		private void triggerAfterMessageHandled(Message<?> message, Exception ex) {, +					interceptor.afterMessageHandled(message, ExecutorSubscribableChannel.this, this.handler, ex);]