[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * A header for internal use with "user" destinations where we need to, +	 * restore the destination prior to sending messages to clients., +	/**, +	 * A header that indicates to the broker that the sender will ignore errors., +	 * The header is simply checked for presence or absence., +	 */, +	public static final String IGNORE_ERROR = "simpIgnoreError";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * A header for internal use with "user" destinations where we need to, +	 * restore the destination prior to sending messages to clients., +	/**, +	 * A header that indicates to the broker that the sender will ignore errors., +	 * The header is simply checked for presence or absence., +	 */, +	public static final String IGNORE_ERROR = "simpIgnoreError";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler;, +		StompBrokerRelayMessageHandler handler = getBrokerRegistry().getStompBrokerRelay(brokerChannel());, +		if (handler == null) {, +			return new NoOpBrokerMessageHandler();, +		}, +		String destination = getBrokerRegistry().getUserDestinationBroadcast();, +		if (destination != null) {, +			Map<String, MessageHandler> map = new HashMap<String, MessageHandler>(1);, +			map.put(destination, userDestinationMessageHandler());, +			handler.setSystemSubscriptions(map);, +		}, +		return handler;, +		UserDestinationMessageHandler handler = new UserDestinationMessageHandler(clientInboundChannel(),, +				brokerChannel(), userDestinationResolver());, +		String destination = getBrokerRegistry().getUserDestinationBroadcast();, +		handler.setUserDestinationBroadcast(destination);, +		return handler;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * A header for internal use with "user" destinations where we need to, +	 * restore the destination prior to sending messages to clients., +	/**, +	 * A header that indicates to the broker that the sender will ignore errors., +	 * The header is simply checked for presence or absence., +	 */, +	public static final String IGNORE_ERROR = "simpIgnoreError";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler;, +		StompBrokerRelayMessageHandler handler = getBrokerRegistry().getStompBrokerRelay(brokerChannel());, +		if (handler == null) {, +			return new NoOpBrokerMessageHandler();, +		}, +		String destination = getBrokerRegistry().getUserDestinationBroadcast();, +		if (destination != null) {, +			Map<String, MessageHandler> map = new HashMap<String, MessageHandler>(1);, +			map.put(destination, userDestinationMessageHandler());, +			handler.setSystemSubscriptions(map);, +		}, +		return handler;, +		UserDestinationMessageHandler handler = new UserDestinationMessageHandler(clientInboundChannel(),, +				brokerChannel(), userDestinationResolver());, +		String destination = getBrokerRegistry().getUserDestinationBroadcast();, +		handler.setUserDestinationBroadcast(destination);, +		return handler;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +	private String userDestinationBroadcast;, +, +	 * Set a destination to broadcast messages to that remain unresolved because, +	 * the user is not connected. In a multi-application server scenario this, +	 * gives other application servers a chance to try., +	 * <p><strong>Note:</strong> this option applies only when the, +	 * {@link #enableStompBrokerRelay "broker relay"} is enabled., +	 * <p>By default this is not set., +	 * @param destination the destination to forward unresolved, +	 * messages to, e.g. "/topic/unresolved-user-destination"., +	 */, +	public void setUserDestinationBroadcast(String destination) {, +		this.userDestinationBroadcast = destination;, +	}, +, +	protected String getUserDestinationBroadcast() {, +		return this.userDestinationBroadcast;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * A header for internal use with "user" destinations where we need to, +	 * restore the destination prior to sending messages to clients., +	/**]