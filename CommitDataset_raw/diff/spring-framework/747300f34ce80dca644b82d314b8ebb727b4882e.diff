[+++ b/org.springframework.context.support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +import java.util.Set;, +import net.sf.ehcache.bootstrap.BootstrapCacheLoader;, +import net.sf.ehcache.event.CacheEventListener;, + * <p>Note: As of Spring 3.0, Spring's EHCache support requires EHCache 1.3 or higher., +, +	private int diskSpoolBufferSize = 0;, +, +	private boolean clearOnFlush = true;, +, +	private BootstrapCacheLoader bootstrapCacheLoader;, +, +	private Set<CacheEventListener> cacheEventListeners;, +, +	 * <p>Supported values are "LRU", "LFU" and "FIFO", according to the, +	 * <p>This is only used if the element is not eternal. Default is 120 seconds., +	 * <p>This is only used if the element is not eternal. Default is 120 seconds., +	 * Default is "false"., +	 * Default is 120 seconds., +	 * Set the amount of memory to allocate the write buffer for puts to the disk store., +	 * Default is 0., +	 */, +	public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {, +		this.diskSpoolBufferSize = diskSpoolBufferSize;, +	}, +, +	/**, +	 * Set whether the memory store should be cleared when flush is called on the cache., +	 * Default is "true"., +	 */, +	public void setClearOnFlush(boolean clearOnFlush) {, +		this.clearOnFlush = clearOnFlush;, +	}, +, +	/**, +	/**, +	 * Set an EHCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}, +	 * for this cache, if any., +	 */, +	public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {, +		this.bootstrapCacheLoader = bootstrapCacheLoader;, +	}, +, +	/**, +	 * Specify EHCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}, +	 * to registered with this cache., +	 */, +	public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {, +		this.cacheEventListeners = cacheEventListeners;, +	}, +, +		Ehcache rawCache;, +	protected Cache createCache() {, +		// Only call EHCache 1.6 constructor if actually necessary (for compatibility with EHCache 1.3+), +		Cache cache = (!this.clearOnFlush) ?, +				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,, +						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,, +						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize,, +						this.clearOnFlush) :, +				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,, +						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,, +						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,, +						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize);, +, +		if (this.cacheEventListeners != null) {, +			for (CacheEventListener listener : this.cacheEventListeners) {, +				cache.getCacheEventNotificationService().registerListener(listener);, +			}, +		}, +, +		return cache;, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +import java.util.Set;, +import net.sf.ehcache.bootstrap.BootstrapCacheLoader;, +import net.sf.ehcache.event.CacheEventListener;, + * <p>Note: As of Spring 3.0, Spring's EHCache support requires EHCache 1.3 or higher., +, +	private int diskSpoolBufferSize = 0;, +, +	private boolean clearOnFlush = true;, +, +	private BootstrapCacheLoader bootstrapCacheLoader;, +, +	private Set<CacheEventListener> cacheEventListeners;, +, +	 * <p>Supported values are "LRU", "LFU" and "FIFO", according to the, +	 * <p>This is only used if the element is not eternal. Default is 120 seconds., +	 * <p>This is only used if the element is not eternal. Default is 120 seconds., +	 * Default is "false"., +	 * Default is 120 seconds., +	 * Set the amount of memory to allocate the write buffer for puts to the disk store., +	 * Default is 0., +	 */, +	public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {, +		this.diskSpoolBufferSize = diskSpoolBufferSize;, +	}, +, +	/**, +	 * Set whether the memory store should be cleared when flush is called on the cache., +	 * Default is "true".]