[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		mapping.setMessageReaders(serverCodecConfigurer().getReaders());, +		adapter.setMessageReaders(serverCodecConfigurer().getReaders());, +		handler.setMessageWriters(serverCodecConfigurer().getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		mapping.setMessageReaders(serverCodecConfigurer().getReaders());, +		adapter.setMessageReaders(serverCodecConfigurer().getReaders());, +		handler.setMessageWriters(serverCodecConfigurer().getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.http.codec.HttpMessageReader;, +	private List<HttpMessageReader<?>> messageReaders = Collections.emptyList();, +	 * <p>By default this is set to the {@link ServerCodecConfigurer}'s defaults., +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +		this.messageReaders = messageReaders;, +		if (CollectionUtils.isEmpty(this.messageReaders)) {, +			ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();, +			this.messageReaders = codecConfigurer.getReaders();, +, +			ServerRequest request = ServerRequest.create(exchange, this.messageReaders);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		mapping.setMessageReaders(serverCodecConfigurer().getReaders());, +		adapter.setMessageReaders(serverCodecConfigurer().getReaders());, +		handler.setMessageWriters(serverCodecConfigurer().getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.http.codec.HttpMessageReader;, +	private List<HttpMessageReader<?>> messageReaders = Collections.emptyList();, +	 * <p>By default this is set to the {@link ServerCodecConfigurer}'s defaults., +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +		this.messageReaders = messageReaders;, +		if (CollectionUtils.isEmpty(this.messageReaders)) {, +			ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();, +			this.messageReaders = codecConfigurer.getReaders();, +, +			ServerRequest request = ServerRequest.create(exchange, this.messageReaders);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java, +import org.springframework.util.CollectionUtils;, +	private List<HttpMessageWriter<?>> messageWriters = Collections.emptyList();, +	 * Configure HTTP message writers to serialize the request body with., +	 * <p>By default this is set to {@link ServerCodecConfigurer}'s default writers., +	public void setMessageWriters(List<HttpMessageWriter<?>> configurer) {, +		Assert.notNull(messageWriters, "'messageWriters' must not be null");, +		this.messageWriters = configurer;, +		if (CollectionUtils.isEmpty(this.messageWriters)) {, +			throw new IllegalArgumentException("Property 'messageWriters' is required");, +				return messageWriters;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		mapping.setMessageReaders(serverCodecConfigurer().getReaders());, +		adapter.setMessageReaders(serverCodecConfigurer().getReaders());, +		handler.setMessageWriters(serverCodecConfigurer().getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.http.codec.HttpMessageReader;, +	private List<HttpMessageReader<?>> messageReaders = Collections.emptyList();, +	 * <p>By default this is set to the {@link ServerCodecConfigurer}'s defaults., +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +		this.messageReaders = messageReaders;, +		if (CollectionUtils.isEmpty(this.messageReaders)) {, +			ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();, +			this.messageReaders = codecConfigurer.getReaders();, +, +			ServerRequest request = ServerRequest.create(exchange, this.messageReaders);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java, +import org.springframework.util.CollectionUtils;, +	private List<HttpMessageWriter<?>> messageWriters = Collections.emptyList();, +	 * Configure HTTP message writers to serialize the request body with., +	 * <p>By default this is set to {@link ServerCodecConfigurer}'s default writers., +	public void setMessageWriters(List<HttpMessageWriter<?>> configurer) {, +		Assert.notNull(messageWriters, "'messageWriters' must not be null");, +		this.messageWriters = configurer;, +		if (CollectionUtils.isEmpty(this.messageWriters)) {, +			throw new IllegalArgumentException("Property 'messageWriters' is required");, +				return messageWriters;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import java.util.Collections;, +import org.springframework.util.CollectionUtils;, +import static org.springframework.core.MethodIntrospector.selectMethods;, +			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry reactiveRegistry,, +		Assert.notNull(messageReaders, "'messageReaders' is required");, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).fullSupport(messageReaders);, +				List<HttpMessageReader<?>> messageReaders, boolean modelAttribute) {, +			this.messageReaders = messageReaders;, +			if (!CollectionUtils.isEmpty(this.messageReaders)) {, +			public ArgumentResolverRegistrar fullSupport(List<HttpMessageReader<?>> httpMessageReaders) {, +				return new ArgumentResolverRegistrar(this.resolvers, httpMessageReaders, true);, +				return new ArgumentResolverRegistrar(this.resolvers, Collections.emptyList(), true);, +				return new ArgumentResolverRegistrar(this.resolvers, Collections.emptyList(), false);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		mapping.setMessageReaders(serverCodecConfigurer().getReaders());, +		adapter.setMessageReaders(serverCodecConfigurer().getReaders());, +		handler.setMessageWriters(serverCodecConfigurer().getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.http.codec.HttpMessageReader;, +	private List<HttpMessageReader<?>> messageReaders = Collections.emptyList();, +	 * <p>By default this is set to the {@link ServerCodecConfigurer}'s defaults., +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +		this.messageReaders = messageReaders;, +		if (CollectionUtils.isEmpty(this.messageReaders)) {]