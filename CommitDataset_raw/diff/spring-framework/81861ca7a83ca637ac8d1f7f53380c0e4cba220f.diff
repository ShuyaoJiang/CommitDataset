[+++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return getFile().length();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return getFile().length();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.FileCopyUtils;, +	 * This implementation reads the entire InputStream to calculate the, +	 * content length. Subclasses will almost always be able to provide, +	 * a more optimal version of this, e.g. checking a File length., +	 * @see #getInputStream(), +		return FileCopyUtils.copyToByteArray(getInputStream()).length;, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return getFile().length();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.FileCopyUtils;, +	 * This implementation reads the entire InputStream to calculate the, +	 * content length. Subclasses will almost always be able to provide, +	 * a more optimal version of this, e.g. checking a File length., +	 * @see #getInputStream(), +		return FileCopyUtils.copyToByteArray(getInputStream()).length;, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2012 the original author or authors., +	 * This implementation returns the underlying File's length., +	 */, +	@Override, +	public long contentLength() throws IOException {, +		return this.file.length();, +	}, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return getFile().length();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.FileCopyUtils;, +	 * This implementation reads the entire InputStream to calculate the, +	 * content length. Subclasses will almost always be able to provide, +	 * a more optimal version of this, e.g. checking a File length., +	 * @see #getInputStream(), +		return FileCopyUtils.copyToByteArray(getInputStream()).length;, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2012 the original author or authors., +	 * This implementation returns the underlying File's length., +	 */, +	@Override, +	public long contentLength() throws IOException {, +		return this.file.length();, +	}, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsResource.java, +	public long contentLength() throws IOException {, +		return VfsUtils.getSize(this.resource);, +	}, +, +	@Override, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return getFile().length();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.FileCopyUtils;, +	 * This implementation reads the entire InputStream to calculate the, +	 * content length. Subclasses will almost always be able to provide, +	 * a more optimal version of this, e.g. checking a File length., +	 * @see #getInputStream(), +		return FileCopyUtils.copyToByteArray(getInputStream()).length;, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2012 the original author or authors., +	 * This implementation returns the underlying File's length., +	 */, +	@Override, +	public long contentLength() throws IOException {, +		return this.file.length();, +	}, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsResource.java, +	public long contentLength() throws IOException {, +		return VfsUtils.getSize(this.resource);, +	}, +, +	@Override, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsUtils.java, + * Copyright 2002-2012 the original author or authors., +, +	private static Method VIRTUAL_FILE_METHOD_GET_INPUT_STREAM;, +	private static Method VIRTUAL_FILE_METHOD_GET_CHILD;, +, +			}, +			catch (ClassNotFoundException ex2) {, +				throw new IllegalStateException("Cannot detect JBoss VFS packages", ex2);, +			VIRTUAL_FILE_METHOD_GET_SIZE = ReflectionUtils.findMethod(virtualFile, "getSize");, +	static long getSize(Object vfsResource) throws IOException {, +		return (Long) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_SIZE, vfsResource);, +	}, +]