[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * @author Sam Brannen, +	private void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,, +			boolean ignoreFailedDrops) throws SQLException {, +		splitSqlScript(script, delimiter, this.commentPrefix, statements);, +							logger.debug("Failed to execute SQL script statement at line " + lineNumber, +									+ " of resource " + resource + ": " + statement, ex);, +		}, +		finally {, +		// separator ends in whitespace, so we might want to see if the script is trying, +		// to end the same way, +			if (!inLiteral && script.startsWith(delim, i)) {, +	 * Split an SQL script into separate statements delimited by the provided delimiter, +	 * string. Each individual statement will be added to the provided {@code List}., +	 * <p>Within a statement, the provided {@code commentPrefix} will be honored;, +	 * any text beginning with the comment prefix and extending to the end of the, +	 * line will be omitted from the statement. In addition, multiple adjacent, +	 * whitespace characters will be collapsed into a single space., +	 * @param commentPrefix the prefix that identifies line comments in the SQL script &mdash; typically "--", +	private void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {, +				if (script.startsWith(delim, i)) {, +					// we've reached the end of the current statement, +				else if (script.startsWith(commentPrefix, i)) {, +					// skip over any content from the start of the comment to the EOL, +					int indexOfNextNewline = script.indexOf("\n", i);, +					if (indexOfNextNewline > i) {, +						i = indexOfNextNewline;, +						continue;, +					}, +					else {, +						// if there's no newline after the comment, we must be at the end, +						// of the script, so stop here., +						break;, +					}, +				}, +				else if (c == ' ' || c == '\n' || c == '\t') {, +					// avoid multiple adjacent whitespace characters, +					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {, +					else {, +						continue;, +					}, +				}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * @author Sam Brannen, +	private void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,, +			boolean ignoreFailedDrops) throws SQLException {, +		splitSqlScript(script, delimiter, this.commentPrefix, statements);, +							logger.debug("Failed to execute SQL script statement at line " + lineNumber, +									+ " of resource " + resource + ": " + statement, ex);, +		}, +		finally {, +		// separator ends in whitespace, so we might want to see if the script is trying, +		// to end the same way, +			if (!inLiteral && script.startsWith(delim, i)) {, +	 * Split an SQL script into separate statements delimited by the provided delimiter, +	 * string. Each individual statement will be added to the provided {@code List}., +	 * <p>Within a statement, the provided {@code commentPrefix} will be honored;, +	 * any text beginning with the comment prefix and extending to the end of the, +	 * line will be omitted from the statement. In addition, multiple adjacent, +	 * whitespace characters will be collapsed into a single space., +	 * @param commentPrefix the prefix that identifies line comments in the SQL script &mdash; typically "--", +	private void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {, +				if (script.startsWith(delim, i)) {, +					// we've reached the end of the current statement, +				else if (script.startsWith(commentPrefix, i)) {, +					// skip over any content from the start of the comment to the EOL, +					int indexOfNextNewline = script.indexOf("\n", i);, +					if (indexOfNextNewline > i) {, +						i = indexOfNextNewline;, +						continue;, +					}, +					else {, +						// if there's no newline after the comment, we must be at the end, +						// of the script, so stop here., +						break;, +					}, +				}, +				else if (c == ' ' || c == '\n' || c == '\t') {, +					// avoid multiple adjacent whitespace characters, +					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {, +					else {, +						continue;, +					}, +				}, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +	private void assertUsersDatabaseCreated(String... lastNames) {, +		for (String lastName : lastNames) {, +			assertEquals("Did not find user with last name [" + lastName + "].", 1,, +				jdbcTemplate.queryForInt("select count(0) from users where last_name = ?", lastName));, +		}, +		assertUsersDatabaseCreated("Brannen");, +	}, +, +	@Test, +	public void scriptWithCommentsWithinStatements() throws Exception {, +		databasePopulator.addScript(resourceLoader.getResource("users-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("users-data-with-comments.sql"));, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);]