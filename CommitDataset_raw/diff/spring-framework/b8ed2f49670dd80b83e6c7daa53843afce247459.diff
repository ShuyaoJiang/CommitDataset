[+++ b/build.gradle, +		include(["**/*Tests.*", "**/*Test.*"]), +		exclude "**/Abstract*.*", +project("spring-beans-groovy") {, +	description "Groovy Bean Definitions", +				srcDir "src/main/java", +		include(["**/testng/**/*Tests.*", "**/testng/**/*Test.*"]), +		exclude(["**/Abstract*.*", "**/*TestCase.class", "**/FailingBeforeAndAfterMethodsTests.class"]), +		include(["**/*Tests.*", "**/*Test.*"]), +		// In general, we exclude all classes under the 'testng' package., +		// "TestSuite" classes only exist as a convenience to the develper; they, +		// should not be run by the build., +		exclude(["**/testng/**/*.*", "**/Abstract*.*", "**/*TestCase.class", "**/*TestSuite.class"]), +		// FailingBeforeAndAfterMethodsTests is actually a JUnit-based test which, +		// itself runs TestNG manually in order to test our TestNG support., +		include "**/testng/FailingBeforeAndAfterMethodsTests", +++ b/build.gradle, +		include(["**/*Tests.*", "**/*Test.*"]), +		exclude "**/Abstract*.*", +project("spring-beans-groovy") {, +	description "Groovy Bean Definitions", +				srcDir "src/main/java", +		include(["**/testng/**/*Tests.*", "**/testng/**/*Test.*"]), +		exclude(["**/Abstract*.*", "**/*TestCase.class", "**/FailingBeforeAndAfterMethodsTests.class"]), +		include(["**/*Tests.*", "**/*Test.*"]), +		// In general, we exclude all classes under the 'testng' package., +		// "TestSuite" classes only exist as a convenience to the develper; they, +		// should not be run by the build., +		exclude(["**/testng/**/*.*", "**/Abstract*.*", "**/*TestCase.class", "**/*TestSuite.class"]), +		// FailingBeforeAndAfterMethodsTests is actually a JUnit-based test which, +		// itself runs TestNG manually in order to test our TestNG support., +		include "**/testng/FailingBeforeAndAfterMethodsTests", +++ /dev/null, +++ b/build.gradle, +		include(["**/*Tests.*", "**/*Test.*"]), +		exclude "**/Abstract*.*", +project("spring-beans-groovy") {, +	description "Groovy Bean Definitions", +				srcDir "src/main/java", +		include(["**/testng/**/*Tests.*", "**/testng/**/*Test.*"]), +		exclude(["**/Abstract*.*", "**/*TestCase.class", "**/FailingBeforeAndAfterMethodsTests.class"]), +		include(["**/*Tests.*", "**/*Test.*"]), +		// In general, we exclude all classes under the 'testng' package., +		// "TestSuite" classes only exist as a convenience to the develper; they, +		// should not be run by the build., +		exclude(["**/testng/**/*.*", "**/Abstract*.*", "**/*TestCase.class", "**/*TestSuite.class"]), +		// FailingBeforeAndAfterMethodsTests is actually a JUnit-based test which, +		// itself runs TestNG manually in order to test our TestNG support., +		include "**/testng/FailingBeforeAndAfterMethodsTests", +++ /dev/null, +++ b/spring-aspects/src/test/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControlTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.mock.staticmock;, +, +import javax.persistence.PersistenceException;, +, +import org.junit.Ignore;, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +import static org.springframework.mock.staticmock.AnnotationDrivenStaticEntityMockingControl.*;, +, +/**, + * Tests for static entity mocking framework., + * , + * @author Rod Johnson, + * @author Ramnivas Laddad, + * @author Sam Brannen, + */, +@MockStaticEntityMethods, +public class AnnotationDrivenStaticEntityMockingControlTests {, +, +	// TODO Fix failing test, +	@Ignore, +	@Test, +	public void noArgIntReturn() {, +		int expectedCount = 13;, +		Person.countPeople();, +		expectReturn(expectedCount);, +		playback();, +		assertEquals(expectedCount, Person.countPeople());, +	}, +, +	// TODO Fix failing test, +	@Ignore]