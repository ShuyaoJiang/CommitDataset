[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java, + * @author Juergen Hoeller, +			super(annotation.name(), annotation.required(), ValueConstants.DEFAULT_NONE);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java, + * @author Juergen Hoeller, +			super(annotation.name(), annotation.required(), ValueConstants.DEFAULT_NONE);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolverTests.java, +import java.util.Optional;, +import org.springframework.core.annotation.SynthesizingMethodParameter;, +import org.springframework.util.ReflectionUtils;, +import static org.junit.Assert.*;, + * @author Juergen Hoeller, +, +	private MethodParameter paramNotRequired;, +, +	private MethodParameter paramOptional;, +, +		Method method = ReflectionUtils.findMethod(getClass(), "handle", (Class<?>[]) null);, +		paramNamedString = new SynthesizingMethodParameter(method, 0);, +		paramString = new SynthesizingMethodParameter(method, 1);, +		paramNotRequired = new SynthesizingMethodParameter(method, 2);, +		paramOptional = new SynthesizingMethodParameter(method, 3);, +	public void resolveArgumentNotRequired() throws Exception {, +		Map<String, String> uriTemplateVars = new HashMap<>();, +		uriTemplateVars.put("name", "value");, +		this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars);, +, +		Mono<Object> mono = this.resolver.resolveArgument(this.paramNotRequired, new ModelMap(), this.exchange);, +		Object result = mono.block();, +		assertEquals("value", result);, +	}, +, +	@Test, +	public void resolveArgumentWrappedAsOptional() throws Exception {, +		Map<String, String> uriTemplateVars = new HashMap<>();, +		uriTemplateVars.put("name", "value");, +		this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars);, +, +		Mono<Object> mono = this.resolver.resolveArgument(this.paramOptional, new ModelMap(), this.exchange);, +		Object result = mono.block();, +		assertEquals(Optional.of("value"), result);, +	}, +, +	@Test, +	@Test, +	public void nullIfNotRequired() throws Exception {, +		Mono<Object> mono = this.resolver.resolveArgument(this.paramNotRequired, new ModelMap(), this.exchange);, +		TestSubscriber, +				.subscribe(mono), +				.assertComplete(), +				.assertNoValues();, +	}, +, +	@Test, +	public void wrapEmptyWithOptional() throws Exception {, +		Mono<Object> mono = this.resolver.resolveArgument(this.paramOptional, new ModelMap(), this.exchange);, +		Object result = mono.block();, +		TestSubscriber, +				.subscribe(mono), +				.assertValues(Optional.empty());, +	}, +, +, +	public void handle(@PathVariable(value = "name") String param1, String param2,, +			@PathVariable(name="name", required = false) String param3,, +			@PathVariable("name") Optional<String> param4) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java, + * @author Juergen Hoeller, +			super(annotation.name(), annotation.required(), ValueConstants.DEFAULT_NONE);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolverTests.java, +import java.util.Optional;, +import org.springframework.core.annotation.SynthesizingMethodParameter;, +import org.springframework.util.ReflectionUtils;, +import static org.junit.Assert.*;, + * @author Juergen Hoeller, +, +	private MethodParameter paramNotRequired;, +, +	private MethodParameter paramOptional;, +, +		Method method = ReflectionUtils.findMethod(getClass(), "handle", (Class<?>[]) null);, +		paramNamedString = new SynthesizingMethodParameter(method, 0);, +		paramString = new SynthesizingMethodParameter(method, 1);, +		paramNotRequired = new SynthesizingMethodParameter(method, 2);, +		paramOptional = new SynthesizingMethodParameter(method, 3);, +	public void resolveArgumentNotRequired() throws Exception {, +		Map<String, String> uriTemplateVars = new HashMap<>();, +		uriTemplateVars.put("name", "value");, +		this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars);, +, +		Mono<Object> mono = this.resolver.resolveArgument(this.paramNotRequired, new ModelMap(), this.exchange);, +		Object result = mono.block();, +		assertEquals("value", result);, +	}, +, +	@Test, +	public void resolveArgumentWrappedAsOptional() throws Exception {, +		Map<String, String> uriTemplateVars = new HashMap<>();, +		uriTemplateVars.put("name", "value");, +		this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars);]