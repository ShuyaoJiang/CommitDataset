[+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, + * <li>{@link #prepareTestInstance test instance preparation}:, + * immediately following instantiation of the test class</li>, + * <li>{@link #beforeTestMethod before test setup}:, + * <li>{@link #beforeTestExecution before test execution}:, + * immediately before execution of the {@linkplain java.lang.reflect.Method, + * test method} but after test setup</li>, + * <li>{@link #afterTestExecution after test execution}:, + * immediately after execution of the {@linkplain java.lang.reflect.Method, + * test method} but before test tear down</li>, + * <li>{@link #afterTestMethod(Object, Method, Throwable) after test tear down}:, + * after any <em>after method callbacks</em> of a particular testing, + * <em>after class callbacks</em> of a particular testing framework (e.g., JUnit 4's, + * {@link org.junit.AfterClass @AfterClass})</li>, + * {@linkplain org.springframework.context.ApplicationContext application contexts},, + * {@linkplain org.springframework.transaction.annotation.Transactional transactional}, +	 * <em>before class methods</em> (e.g., methods annotated with JUnit 4's, +	 * @since 3.0, +				logException(ex, "beforeTestClass", testExecutionListener, testClass);, +	 * Hook for pre-processing a test <em>before</em> execution of <em>before</em>, +	 * lifecycle callbacks of the underlying test framework &mdash; for example,, +	 * setting up test fixtures, starting a transaction, etc., +	 * <p>This method <strong>must</strong> be called immediately prior to, +	 * framework-specific <em>before</em> lifecycle callbacks (e.g., methods, +	 * annotated with JUnit 4's {@link org.junit.Before @Before}). For historical, +	 * reasons, this method is named {@code beforeTestMethod}. Since the, +	 * introduction of {@link #beforeTestExecution}, a more suitable name for, +	 * this method might be something like {@code beforeTestSetUp} or, +	 * {@code beforeEach}; however, it is unfortunately impossible to rename, +	 * this method due to backward compatibility concerns., +	 * {@link TestExecutionListener} a chance to perform its pre-processing., +	 * If a listener throws an exception, however, the remaining registered, +	 * listeners will <strong>not</strong> be called., +	 * @see #afterTestMethod, +	 * @see #beforeTestExecution, +	 * @see #afterTestExecution, +		String callbackName = "beforeTestMethod";, +		prepareForBeforeCallback(callbackName, testInstance, testMethod);, +				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod);, +	 * Hook for pre-processing a test <em>immediately before</em> execution of, +	 * the {@linkplain java.lang.reflect.Method test method} in the supplied, +	 * {@linkplain TestContext test context} &mdash; for example, for timing, +	 * or logging purposes., +	 * <p>This method <strong>must</strong> be called after framework-specific, +	 * <em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's, +	 * {@link org.junit.Before @Before})., +	 * <p>The managed {@link TestContext} will be updated with the supplied, +	 * {@code testInstance} and {@code testMethod}., +	 * <p>An attempt will be made to give each registered, +	 * {@link TestExecutionListener} a chance to perform its pre-processing., +	 * If a listener throws an exception, however, the remaining registered, +	 * listeners will <strong>not</strong> be called., +	 * @param testInstance the current test instance (never {@code null}), +	 * @param testMethod the test method which is about to be executed on the, +	 * test instance, +	 * @throws Exception if a registered TestExecutionListener throws an exception, +	 * @since 5.0, +	 * @see #beforeTestMethod, +	 * @see #afterTestMethod, +	 * @see #beforeTestExecution, +	 * @see #afterTestExecution, +	 * @see #getTestExecutionListeners(), +	 */, +	public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {, +		String callbackName = "beforeTestExecution";, +		prepareForBeforeCallback(callbackName, testInstance, testMethod);, +, +		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {, +			try {, +				testExecutionListener.beforeTestExecution(getTestContext());, +			}, +			catch (Throwable ex) {, +				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod);, +			}, +		}, +	}, +, +	/**, +	 * Hook for post-processing a test <em>immediately after</em> execution of, +	 * the {@linkplain java.lang.reflect.Method test method} in the supplied, +	 * {@linkplain TestContext test context} &mdash; for example, for timing, +	 * or logging purposes., +	 * <p>This method <strong>must</strong> be called before framework-specific, +	 * <em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's, +	 * {@code testInstance}, {@code testMethod}, and {@code exception}., +	 * <p>Each registered {@link TestExecutionListener} will be given a chance, +	 * to perform its post-processing. If a listener throws an exception, the, +	 * remaining registered listeners will still be called, but the first, +	 * exception thrown will be tracked and rethrown after all listeners have, +	 * executed. Note that registered listeners will be executed in the opposite, +	 * order in which they were registered., +	 * @since 5.0, +	 * @see #beforeTestMethod, +	 * @see #afterTestMethod, +	 * @see #beforeTestExecution, +	 * @see #getTestExecutionListeners(), +	 */, +	public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception {, +		String callbackName = "afterTestExecution";, +		prepareForAfterCallback(callbackName, testInstance, testMethod, exception);]