[+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.BitSet;, +	private static final String PARAM_QUALITY_FACTOR = "q";, +		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)));, +				checkParameters(attribute, value);, +	private void checkParameters(String attribute, String value) {, +		Assert.hasLength(attribute, "parameter attribute must not be empty");, +		Assert.hasLength(value, "parameter value must not be empty");, +		checkToken(attribute);, +		if (PARAM_QUALITY_FACTOR.equals(attribute)) {, +			double d = Double.parseDouble(value);, +			Assert.isTrue(d >= 0D && d <= 1D, "Invalid quality value \"" + value + "\": should be between 0.0 and 1.0");, +		else if (PARAM_CHARSET.equals(attribute)) {, +			Charset.forName(value);, +		}, +		else if (!isQuotedString(value)) {, +			checkToken(value);, +		}, +	}, +, +	private boolean isQuotedString(String s) {, +		return s.length() > 1 && s.startsWith("\"") && s.endsWith("\"") ;, +		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR);, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.BitSet;, +	private static final String PARAM_QUALITY_FACTOR = "q";, +		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)));, +				checkParameters(attribute, value);, +	private void checkParameters(String attribute, String value) {, +		Assert.hasLength(attribute, "parameter attribute must not be empty");, +		Assert.hasLength(value, "parameter value must not be empty");, +		checkToken(attribute);, +		if (PARAM_QUALITY_FACTOR.equals(attribute)) {, +			double d = Double.parseDouble(value);, +			Assert.isTrue(d >= 0D && d <= 1D, "Invalid quality value \"" + value + "\": should be between 0.0 and 1.0");, +		else if (PARAM_CHARSET.equals(attribute)) {, +			Charset.forName(value);, +		}, +		else if (!isQuotedString(value)) {, +			checkToken(value);, +		}, +	}, +, +	private boolean isQuotedString(String s) {, +		return s.length() > 1 && s.startsWith("\"") && s.endsWith("\"") ;, +		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR);, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +	@Test(expected = IllegalArgumentException.class), +	public void parseMediaTypeIllegalQualityFactor() {, +		MediaType.parseMediaType("audio/basic;q=1.1");, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void parseMediaTypeIllegalCharset() {, +		MediaType.parseMediaType("text/html; charset=foo-bar");, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void parseMediaTypeIllegalQuotedParameterValue() {, +		MediaType.parseMediaType("audio/*;attr=\"");, +	}, +]