[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/EchoHandlerIntegrationTests.java, + * Copyright 2002-2016 the original author or authors., +import reactor.core.publisher.Mono;, +	public void echo() throws Exception {, +	/**, +	 * @author Arjen Poutsma, +	 */, +	public static class EchoHandler implements HttpHandler {, +, +		@Override, +		public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {, +			return response.setBody(request.getBody());, +		}, +	}, +++ /dev/null, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/EchoHandlerIntegrationTests.java, + * Copyright 2002-2016 the original author or authors., +import reactor.core.publisher.Mono;, +	public void echo() throws Exception {, +	/**, +	 * @author Arjen Poutsma, +	 */, +	public static class EchoHandler implements HttpHandler {, +, +		@Override, +		public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {, +			return response.setBody(request.getBody());, +		}, +	}, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/EchoHandlerIntegrationTests.java, + * Copyright 2002-2016 the original author or authors., +import reactor.core.publisher.Mono;, +	public void echo() throws Exception {, +	/**, +	 * @author Arjen Poutsma, +	 */, +	public static class EchoHandler implements HttpHandler {, +, +		@Override, +		public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {, +			return response.setBody(request.getBody());, +		}, +	}, +++ /dev/null, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/RandomHandlerIntegrationTests.java, + * Copyright 2002-2016 the original author or authors., +import org.reactivestreams.Publisher;, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferAllocator;, +import org.springframework.core.io.buffer.DefaultDataBufferAllocator;, +import org.springframework.http.server.reactive.boot.ReactorHttpServer;, +import static org.junit.Assume.assumeFalse;, +	public static final int RESPONSE_SIZE = 1024 * 4;, +, +	private final Random rnd = new Random();, +, +	private final RandomHandler handler = new RandomHandler();, +, +	private final DataBufferAllocator allocator = new DefaultDataBufferAllocator();, +		return handler;, +	public void random() throws Throwable {, +		// TODO: fix Reactor support, +		assumeFalse(server instanceof ReactorHttpServer);, +, +		assertEquals(RESPONSE_SIZE,, +		assertEquals(RESPONSE_SIZE, response.getBody().length);, +, +		while (!handler.requestComplete) {, +			Thread.sleep(100);, +		}, +		if (handler.requestError != null) {, +			throw handler.requestError;, +		}, +		assertEquals(REQUEST_SIZE, handler.requestSize);, +	private class RandomHandler implements HttpHandler {, +, +		public static final int CHUNKS = 16;, +, +		private volatile boolean requestComplete;, +, +		private int requestSize;, +, +		private Throwable requestError;, +, +		@Override, +		public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {, +			requestError = null;, +, +			request.getBody().subscribe(new Subscriber<DataBuffer>() {, +, +				@Override, +				public void onSubscribe(Subscription s) {]