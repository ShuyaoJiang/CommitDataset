[+++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +import org.springframework.http.HttpRequest;, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +	public void fromHttpRequestWithForwardedHost() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(-1);, +		request.setRequestURI("/mvc-showcase");, +		request.addHeader("X-Forwarded-Host", "anotherHost");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("http://anotherHost/mvc-showcase", result.toString());, +	}, +, +	// SPR-10701, +, +	@Test, +	public void fromHttpRequestWithForwardedHostIncludingPort() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(-1);, +		request.setRequestURI("/mvc-showcase");, +		request.addHeader("X-Forwarded-Host", "webtest.foo.bar.com:443");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("webtest.foo.bar.com", result.getHost());, +		assertEquals(443, result.getPort());, +	}, +, +	// SPR-11140, +, +	@Test, +	public void fromHttpRequestWithForwardedHostMultiValuedHeader() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(-1);, +		request.addHeader("X-Forwarded-Host", "a.example.org, b.example.org, c.example.org");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("a.example.org", result.getHost());, +		assertEquals(-1, result.getPort());, +	}, +, +	// SPR-11855, +, +	@Test, +	public void fromHttpRequestWithForwardedHostAndPort() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(8080);, +		request.addHeader("X-Forwarded-Host", "foobarhost");, +		request.addHeader("X-Forwarded-Port", "9090");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("foobarhost", result.getHost());, +		assertEquals(9090, result.getPort());, +	}, +, +	// SPR-11872, +, +	@Test, +	public void fromHttpRequestWithForwardedHostWithDefaultPort() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(10080);, +		request.addHeader("X-Forwarded-Host", "example.org");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("example.org", result.getHost());, +		assertEquals(-1, result.getPort());, +	}, +, +, +	@Test, +	public void fromHttpRequestWithForwardedHostWithForwardedScheme() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setScheme("http");, +		request.setServerName("localhost");, +		request.setServerPort(10080);, +		request.addHeader("X-Forwarded-Host", "example.org");, +		request.addHeader("X-Forwarded-Proto", "https");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);]