[+++ b/org.springframework.context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.remoting.rmi;, +, +import java.lang.reflect.AccessibleObject;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.rmi.ConnectException;, +import java.rmi.ConnectIOException;, +import java.rmi.MarshalException;, +import java.rmi.NoSuchObjectException;, +import java.rmi.Remote;, +import java.rmi.RemoteException;, +import java.rmi.StubNotFoundException;, +import java.rmi.UnknownHostException;, +import java.rmi.UnmarshalException;, +, +import junit.framework.TestCase;, +import org.aopalliance.intercept.MethodInvocation;, +, +import org.springframework.remoting.RemoteAccessException;, +import org.springframework.remoting.RemoteConnectFailureException;, +import org.springframework.remoting.RemoteProxyFailureException;, +import org.springframework.remoting.support.RemoteInvocation;, +, +/**, + * @author Juergen Hoeller, + * @since 16.05.2003, + */, +public class RmiSupportTests extends TestCase {, +, +	public void testRmiProxyFactoryBean() throws Exception {, +		CountingRmiProxyFactoryBean factory = new CountingRmiProxyFactoryBean();, +		factory.setServiceInterface(IRemoteBean.class);, +		factory.setServiceUrl("rmi://localhost:1090/test");, +		factory.afterPropertiesSet();, +		assertTrue("Correct singleton value", factory.isSingleton());, +		assertTrue(factory.getObject() instanceof IRemoteBean);, +		IRemoteBean proxy = (IRemoteBean) factory.getObject();, +		proxy.setName("myName");, +		assertEquals(RemoteBean.name, "myName");, +		assertEquals(1, factory.counter);, +	}, +, +	public void testRmiProxyFactoryBeanWithRemoteException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(RemoteException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithConnectException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(ConnectException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithConnectIOException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(ConnectIOException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithUnknownHostException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(UnknownHostException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithNoSuchObjectException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(NoSuchObjectException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithStubNotFoundException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(StubNotFoundException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithMarshalException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(MarshalException.class);, +	}, +, +	public void testRmiProxyFactoryBeanWithUnmarshalException() throws Exception {, +		doTestRmiProxyFactoryBeanWithException(UnmarshalException.class);, +	}, +, +	private void doTestRmiProxyFactoryBeanWithException(Class exceptionClass) throws Exception {, +		CountingRmiProxyFactoryBean factory = new CountingRmiProxyFactoryBean();, +		factory.setServiceInterface(IRemoteBean.class);, +		factory.setServiceUrl("rmi://localhost:1090/test");, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject() instanceof IRemoteBean);, +		IRemoteBean proxy = (IRemoteBean) factory.getObject();, +		try {, +			proxy.setName(exceptionClass.getName());]