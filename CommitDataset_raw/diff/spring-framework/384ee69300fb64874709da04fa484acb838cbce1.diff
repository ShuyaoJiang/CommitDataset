[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +		return getRequiredAttribute(attributeName, String.class);, +		return getRequiredAttribute(attributeName, String[].class);, +		return getRequiredArrayWithAttributeAlias(attributeName, annotationType, annotationSource, String[].class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * boolean., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	public boolean getBoolean(String attributeName) {, +		return getRequiredAttribute(attributeName, Boolean.class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * number., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	@SuppressWarnings("unchecked"), +	public <N extends Number> N getNumber(String attributeName) {, +		return (N) getRequiredAttribute(attributeName, Number.class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * enum., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	@SuppressWarnings("unchecked"), +	public <E extends Enum<?>> E getEnum(String attributeName) {, +		return (E) getRequiredAttribute(attributeName, Enum.class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * class., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	@SuppressWarnings("unchecked"), +	public <T> Class<? extends T> getClass(String attributeName) {, +		return getRequiredAttribute(attributeName, Class.class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * array of classes., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * a class, it will be wrapped in a single-element array before, +	 * returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	public Class<?>[] getClassArray(String attributeName) {, +		return getRequiredAttribute(attributeName, Class[].class);, +	}, +, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * array of classes, taking into account alias semantics defined via, +	 * {@link AliasFor @AliasFor}., +	 * <p>If there is no value stored under the specified {@code attributeName}, +	 * but the attribute has an alias declared via {@code @AliasFor}, the, +	 * value of the alias will be returned., +	 *, +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the type of annotation represented by this, +	 * {@code AnnotationAttributes} instance; never {@code null}, +	 * @param annotationSource the source of the annotation represented by, +	 * this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement});, +	 * or {@code null} if unknown, +	 * @return the array of classes, +	 * @throws IllegalArgumentException if the attribute and its alias do, +	 * not exist or are not of type {@code Class[]}, +	 * @throws AnnotationConfigurationException if the attribute and its, +	 * alias are both present with different non-empty values, +	 * @since 4.2, +	 */, +	public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,]