[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	// Modifiable attributes, +	 * Return the name of the parent definition of this bean definition, if any., +	String getParentName();, +	 * Specify the bean class name of this bean definition., +	 * @see #setParentName, +	 * @see #setFactoryBeanName, +	 * @see #setFactoryMethodName, +	 * Return the current bean class name of this bean definition., +	 * <p>Note that this does not have to be the actual class name used at runtime, in, +	 * case of a child definition overriding/inheriting the class name from its parent., +	 * Also, this may just be the class that a factory method is called on, or it may, +	 * even be empty in case of a factory bean reference that a method is called on., +	 * Hence, do <i>not</i> consider this to be the definitive bean type at runtime but, +	 * rather only use it for parsing purposes at the individual bean definition level., +	 * @see #getParentName(), +	 * @see #getFactoryBeanName(), +	 * @see #getFactoryMethodName(), +	String getBeanClassName();, +	 * Return the name of the current target scope for this bean,, +	 * or {@code null} if not known yet., +	String getScope();, +	 * Return whether this bean should be lazily initialized, i.e. not, +	 * eagerly instantiated on startup. Only applicable to a singleton bean., +	boolean isLazyInit();, +	 * Return the bean names that this bean depends on., +	 */, +	String[] getDependsOn();, +, +	/**, +	 * Set whether this bean is a candidate for getting autowired into some other bean., +	 * <p>Note that this flag is designed to only affect type-based autowiring., +	 * It does not affect explicit references by name, which will get resolved even, +	 * if the specified bean is not marked as an autowire candidate. As a consequence,, +	 * autowiring by name will nevertheless inject a bean if the name matches., +	 */, +	void setAutowireCandidate(boolean autowireCandidate);, +, +	/**, +	 * <p>If this value is {@code true} for exactly one bean among multiple, +	/**, +	 * Return whether this bean is a primary autowire candidate., +	 */, +	boolean isPrimary();, +, +	/**, +	 * Specify the factory bean to use, if any., +	 * This the name of the bean to call the specified factory method on., +	 * @see #setFactoryMethodName, +	 */, +	void setFactoryBeanName(String factoryBeanName);, +, +	/**, +	 * Return the factory bean name, if any., +	 */, +	String getFactoryBeanName();, +, +	/**, +	 * Specify a factory method, if any. This method will be invoked with, +	 * constructor arguments, or with no arguments if none are specified., +	 * The method will be invoked on the specified factory bean, if any,, +	 * or otherwise as a static method on the local bean class., +	 * @see #setFactoryBeanName, +	 * @see #setBeanClassName, +	 */, +	void setFactoryMethodName(String factoryMethodName);, +, +	/**, +	 * Return a factory method, if any., +	 */, +	String getFactoryMethodName();, +	// Read-only attributes, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	// Modifiable attributes, +	 * Return the name of the parent definition of this bean definition, if any., +	String getParentName();, +	 * Specify the bean class name of this bean definition., +	 * @see #setParentName, +	 * @see #setFactoryBeanName, +	 * @see #setFactoryMethodName, +	 * Return the current bean class name of this bean definition., +	 * <p>Note that this does not have to be the actual class name used at runtime, in, +	 * case of a child definition overriding/inheriting the class name from its parent., +	 * Also, this may just be the class that a factory method is called on, or it may, +	 * even be empty in case of a factory bean reference that a method is called on., +	 * Hence, do <i>not</i> consider this to be the definitive bean type at runtime but, +	 * rather only use it for parsing purposes at the individual bean definition level., +	 * @see #getParentName(), +	 * @see #getFactoryBeanName(), +	 * @see #getFactoryMethodName(), +	String getBeanClassName();, +	 * Return the name of the current target scope for this bean,, +	 * or {@code null} if not known yet., +	String getScope();, +	 * Return whether this bean should be lazily initialized, i.e. not, +	 * eagerly instantiated on startup. Only applicable to a singleton bean., +	boolean isLazyInit();, +	 * Return the bean names that this bean depends on., +	 */]