[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * Copyright 2002-2017 the original author or authors., + * <p>{@code DataBuffer}s has a separate {@linkplain #readPosition() read} and, + * {@linkplain #writePosition() write} position, as opposed to {@code ByteBuffer}'s single, + * {@linkplain ByteBuffer#position() position}. As such, the {@code DataBuffer} does not require, + * a {@linkplain ByteBuffer#flip() flip} to read after writing. In general, the following invariant, + * holds for the read and write positions, and the capacity:, + *, + * <blockquote>, + *     <tt>0</tt> <tt>&lt;=</tt>, + *     <i>readPosition</i> <tt>&lt;=</tt>, + *     <i>writePosition</i> <tt>&lt;=</tt>, + *     <i>capacity</i>, + * </blockquote>, + *, + * <p>The {@linkplain #capacity() capacity} of a {@code DataBuffer} is expanded on demand,, + * similar to {@code StringBuilder}., + *, + * <p>The main purpose of the {@code DataBuffer} abstraction is provide a convenient wrapper around, + * {@link ByteBuffer}, similar to Netty's {@link io.netty.buffer.ByteBuf}, that can also be used on, + * non-Netty platforms (i.e. Servlet)., + *, + * @see DataBufferFactory, +	 * Return the number of bytes that can be written to this data buffer., +	 * @return the writable byte count, +	 * @since 5.0.1, +	 */, +	int writableByteCount();, +, +	/**, +	 * Return the number of bytes that this buffer can contain., +	 * @return the capacity, +	 * @since 5.0.1, +	 */, +	int capacity();, +, +	/**, +	 * Sets the number of bytes that this buffer can contain. If the new capacity is lower than, +	 * the current capacity, the contents of this buffer will be truncated. If the new capacity, +	 * is higher than the current capacity, it will be expanded., +	 * @param capacity the new capacity, +	 * @return this buffer, +	 */, +	DataBuffer capacity(int capacity);, +, +	/**, +	 * Return the position from which this buffer will read., +	 * @return the read position, +	 * @since 5.0.1, +	 */, +	int readPosition();, +, +	/**, +	 * Set the position from which this buffer will read., +	 * @param readPosition the new read position, +	 * @return this buffer, +	 * @throws IndexOutOfBoundsException if {@code readPosition} is smaller than 0 or greater than, +	 * {@link #writePosition()}, +	 * @since 5.0.1, +	 */, +	DataBuffer readPosition(int readPosition);, +, +	/**, +	 * Return the position to which this buffer will write., +	 * @return the write position, +	 * @since 5.0.1, +	 */, +	int writePosition();, +, +	/**, +	 * Set the position to which this buffer will write., +	 * @param writePosition the new write position, +	 * @return this buffer, +	 * @throws IndexOutOfBoundsException if {@code writePosition} is smaller than, +	 * {@link #readPosition()} or greater than {@link #capacity()}, +	 * @since 5.0.1, +	 */, +	DataBuffer writePosition(int writePosition);, +, +	/**, +	 * Expose a subsequence of this buffer's bytes as a {@link ByteBuffer}. Data between this, +	 * {@code DataBuffer} and the returned {@code ByteBuffer} is shared; though, +	 * changes in the returned buffer's {@linkplain ByteBuffer#position() position}, +	 * will not be reflected in the reading nor writing position of this data buffer., +	 * @param index the index at which to start the byte buffer, +	 * @param length the length of the returned byte buffer, +	 * @return this data buffer as a byte buffer, +	 * @since 5.0.1, +	 */, +	ByteBuffer asByteBuffer(int index, int length);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * Copyright 2002-2017 the original author or authors., + * <p>{@code DataBuffer}s has a separate {@linkplain #readPosition() read} and, + * {@linkplain #writePosition() write} position, as opposed to {@code ByteBuffer}'s single, + * {@linkplain ByteBuffer#position() position}. As such, the {@code DataBuffer} does not require, + * a {@linkplain ByteBuffer#flip() flip} to read after writing. In general, the following invariant, + * holds for the read and write positions, and the capacity:, + *]