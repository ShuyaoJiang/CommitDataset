[+++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.ParameterizedTypeReference, +import org.springframework.core.ResolvableType, +, +, +/**, + * Extension for [BeanFactory.getBeanProvider] providing a `getBeanProvider<Foo>()` variant., + * This extension is not subject to type erasure and retains actual generic type arguments., + *, + * @see BeanFactory.getBeanProvider(ResolvableType), + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T : Any> BeanFactory.getBeanProvider(): ObjectProvider<T> =, +		getBeanProvider(ResolvableType.forType((object : ParameterizedTypeReference<T>() {}).type)), +, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.ParameterizedTypeReference, +import org.springframework.core.ResolvableType, +, +, +/**, + * Extension for [BeanFactory.getBeanProvider] providing a `getBeanProvider<Foo>()` variant., + * This extension is not subject to type erasure and retains actual generic type arguments., + *, + * @see BeanFactory.getBeanProvider(ResolvableType), + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T : Any> BeanFactory.getBeanProvider(): ObjectProvider<T> =, +		getBeanProvider(ResolvableType.forType((object : ParameterizedTypeReference<T>() {}).type)), +, +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Copyright 2002-2018 the original author or authors., +import org.mockito.ArgumentMatchers, +import org.springframework.core.ResolvableType, +	@Test, +	fun `getBeanProvider with reified type parameters`() {, +		bf.getBeanProvider<Foo>(), +		verify(bf, times(1)).getBeanProvider<ObjectProvider<Foo>>(ArgumentMatchers.any<ResolvableType>()), +	}, +]