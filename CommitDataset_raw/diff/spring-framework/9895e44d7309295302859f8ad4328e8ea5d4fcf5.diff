[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * Copyright 2002-2019 the original author or authors., +	public static final Comparator<MimeType> SPECIFICITY_COMPARATOR = new MimeType.SpecificityComparator<>();, +, +, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * Copyright 2002-2019 the original author or authors., +	public static final Comparator<MimeType> SPECIFICITY_COMPARATOR = new MimeType.SpecificityComparator<>();, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineMap.java, + * Copyright 2002-2019 the original author or authors., +	 * If all the components of the map are constants, or lists/maps that themselves, +				else if (!(c % 2 == 0 && child instanceof PropertyOrFieldReference)) {, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * Copyright 2002-2019 the original author or authors., +	public static final Comparator<MimeType> SPECIFICITY_COMPARATOR = new MimeType.SpecificityComparator<>();, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/InlineMap.java, + * Copyright 2002-2019 the original author or authors., +	 * If all the components of the map are constants, or lists/maps that themselves, +				else if (!(c % 2 == 0 && child instanceof PropertyOrFieldReference)) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java, + * Copyright 2002-2019 the original author or authors., + * incorrect duplication of operand evaluation. For example in 'list[index++]++' without, + * a value reference for 'list[index++]' it would be necessary to evaluate list[index++], +			throw new SpelEvaluationException(, +					this.node.getStartPosition(), SpelMessage.NOT_ASSIGNABLE, this.node.toStringAST());]