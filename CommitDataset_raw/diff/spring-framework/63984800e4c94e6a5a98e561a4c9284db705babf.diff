[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * Copyright 2002-2019 the original author or authors., +		private final StringBuilder currentVariable = new StringBuilder();, +, +			// Only URI variable (nothing to encode).., +			// Only literal (encode full source).., +			// Mixed literal parts and URI variables, maybe (encode literal parts only).., +			clear(this.currentVariable);, +				if (c == '}' && level > 0) {, +					this.currentVariable.append('}');, +					if (level == 0) {, +						this.output.append(this.currentVariable);, +						clear(this.currentVariable);, +				}, +				else if (level > 0) {, +					this.currentVariable.append(c);, +			if (level > 0) {, +				this.currentLiteral.append(this.currentVariable);, +			}, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * Copyright 2002-2019 the original author or authors., +		private final StringBuilder currentVariable = new StringBuilder();, +, +			// Only URI variable (nothing to encode).., +			// Only literal (encode full source).., +			// Mixed literal parts and URI variables, maybe (encode literal parts only).., +			clear(this.currentVariable);, +				if (c == '}' && level > 0) {, +					this.currentVariable.append('}');, +					if (level == 0) {, +						this.output.append(this.currentVariable);, +						clear(this.currentVariable);, +				}, +				else if (level > 0) {, +					this.currentVariable.append(c);, +			if (level > 0) {, +				this.currentLiteral.append(this.currentVariable);, +			}, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2019 the original author or authors., +		return buildInternal(encoded ?, +				EncodingHint.FULLY_ENCODED :, +				this.encodeTemplate ? EncodingHint.ENCODE_TEMPLATE : EncodingHint.NONE);, +	}, +, +	private UriComponents buildInternal(EncodingHint hint) {, +					this.userInfo, this.host, this.port, this.pathBuilder.build(), this.queryParams,, +					hint == EncodingHint.FULLY_ENCODED);, +			result = hint == EncodingHint.ENCODE_TEMPLATE ? uric.encodeTemplate(this.charset) : uric;, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).expand(uriVariables).toUri();, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).expand(uriVariables).toUri();, +	 * Build a URI String. This is a shortcut for:, +	 * <pre>, +	 * String uri = builder.encode().build().toUriString(), +	 * </pre>, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).toUriString();, +, +	private enum EncodingHint { ENCODE_TEMPLATE, FULLY_ENCODED, NONE }, +, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * Copyright 2002-2019 the original author or authors., +		private final StringBuilder currentVariable = new StringBuilder();, +, +			// Only URI variable (nothing to encode).., +			// Only literal (encode full source).., +			// Mixed literal parts and URI variables, maybe (encode literal parts only).., +			clear(this.currentVariable);, +				if (c == '}' && level > 0) {, +					this.currentVariable.append('}');, +					if (level == 0) {, +						this.output.append(this.currentVariable);, +						clear(this.currentVariable);, +				}, +				else if (level > 0) {, +					this.currentVariable.append(c);, +			if (level > 0) {, +				this.currentLiteral.append(this.currentVariable);, +			}, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2019 the original author or authors., +		return buildInternal(encoded ?, +				EncodingHint.FULLY_ENCODED :, +				this.encodeTemplate ? EncodingHint.ENCODE_TEMPLATE : EncodingHint.NONE);, +	}, +, +	private UriComponents buildInternal(EncodingHint hint) {, +					this.userInfo, this.host, this.port, this.pathBuilder.build(), this.queryParams,, +					hint == EncodingHint.FULLY_ENCODED);, +			result = hint == EncodingHint.ENCODE_TEMPLATE ? uric.encodeTemplate(this.charset) : uric;, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).expand(uriVariables).toUri();, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).expand(uriVariables).toUri();, +	 * Build a URI String. This is a shortcut for:, +	 * <pre>, +	 * String uri = builder.encode().build().toUriString(), +	 * </pre>, +		return buildInternal(EncodingHint.ENCODE_TEMPLATE).toUriString();, +, +	private enum EncodingHint { ENCODE_TEMPLATE, FULLY_ENCODED, NONE }, +, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java]