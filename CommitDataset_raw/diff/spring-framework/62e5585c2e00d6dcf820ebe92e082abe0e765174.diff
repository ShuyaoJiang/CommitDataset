[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/ParameterResolutionDelegate.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.annotation;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AnnotatedElement;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Executable;, +import java.lang.reflect.Parameter;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +import org.springframework.beans.factory.config.DependencyDescriptor;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.SynthesizingMethodParameter;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Public delegate for resolving autowirable parameters on externally managed, + * constructors and methods., + *, + * @author Sam Brannen, + * @author Juergen Hoeller, + * @since 5.2, + * @see #isAutowirable, + * @see #resolveDependency, + */, +public final class ParameterResolutionDelegate {, +, +	private static final AnnotatedElement EMPTY_ANNOTATED_ELEMENT = new AnnotatedElement() {, +		@Override, +		@Nullable, +		public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {, +			return null;, +		}, +		@Override, +		public Annotation[] getAnnotations() {, +			return new Annotation[0];, +		}, +		@Override, +		public Annotation[] getDeclaredAnnotations() {, +			return new Annotation[0];, +		}, +	};, +, +, +	private ParameterResolutionDelegate() {, +	}, +, +, +	/**, +	 * Determine if the supplied {@link Parameter} can <em>potentially</em> be, +	 * autowired from an {@link AutowireCapableBeanFactory}., +	 * <p>Returns {@code true} if the supplied parameter is annotated or, +	 * meta-annotated with {@link Autowired @Autowired},, +	 * {@link Qualifier @Qualifier}, or {@link Value @Value}., +	 * <p>Note that {@link #resolveDependency} may still be able to resolve the, +	 * dependency for the supplied parameter even if this method returns {@code false}., +	 * @param parameter the parameter whose dependency should be autowired, +	 * (must not be {@code null}), +	 * @param parameterIndex the index of the parameter in the constructor or method, +	 * that declares the parameter, +	 * @see #resolveDependency, +	 */, +	public static boolean isAutowirable(Parameter parameter, int parameterIndex) {, +		Assert.notNull(parameter, "Parameter must not be null");, +		AnnotatedElement annotatedParameter = getEffectiveAnnotatedParameter(parameter, parameterIndex);, +		return (AnnotatedElementUtils.hasAnnotation(annotatedParameter, Autowired.class) ||, +				AnnotatedElementUtils.hasAnnotation(annotatedParameter, Qualifier.class) ||, +				AnnotatedElementUtils.hasAnnotation(annotatedParameter, Value.class));, +	}, +, +	/**, +	 * Resolve the dependency for the supplied {@link Parameter} from the, +	 * supplied {@link AutowireCapableBeanFactory}., +	 * <p>Provides comprehensive autowiring support for individual method parameters, +	 * on par with Spring's dependency injection facilities for autowired fields and, +	 * methods, including support for {@link Autowired @Autowired},, +	 * {@link Qualifier @Qualifier}, and {@link Value @Value} with support for property, +	 * placeholders and SpEL expressions in {@code @Value} declarations., +	 * <p>The dependency is required unless the parameter is annotated or meta-annotated, +	 * with {@link Autowired @Autowired} with the {@link Autowired#required required}]