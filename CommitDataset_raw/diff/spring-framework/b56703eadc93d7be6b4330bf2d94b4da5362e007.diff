[+++ b/build.gradle, +		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1"), +	ext.protobufVersion      = "2.5.0", +	// Re-generate Protobuf classes from *.proto files and move them in test sources, +	if (project.hasProperty('genProtobuf')) {, +		apply plugin: 'protobuf', +, +		task updateGenProtobuf(type:Copy, dependsOn: ":spring-web:generateTestProto") {, +			from "${project.buildDir}/generated-sources/test/", +			into "${projectDir}/src/test/java", +			doLast {, +				project.delete "${project.buildDir}/generated-sources/test", +			}, +		}, +, +		tasks.getByPath("compileTestJava").dependsOn "updateGenProtobuf", +	}, +, +        optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.2"), +        optional("com.google.protobuf:protobuf-java:${protobufVersion}"), +++ b/build.gradle, +		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1"), +	ext.protobufVersion      = "2.5.0", +	// Re-generate Protobuf classes from *.proto files and move them in test sources, +	if (project.hasProperty('genProtobuf')) {, +		apply plugin: 'protobuf', +, +		task updateGenProtobuf(type:Copy, dependsOn: ":spring-web:generateTestProto") {, +			from "${project.buildDir}/generated-sources/test/", +			into "${projectDir}/src/test/java", +			doLast {, +				project.delete "${project.buildDir}/generated-sources/test", +			}, +		}, +, +		tasks.getByPath("compileTestJava").dependsOn "updateGenProtobuf", +	}, +, +        optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.2"), +        optional("com.google.protobuf:protobuf-java:${protobufVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *  http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.converter.protobuf;, +, +import com.google.protobuf.ExtensionRegistry;, +, +/**, + * Google Protocol Messages can contain message extensions that can be parsed if, + * the appropriate configuration has been registered in the {@code ExtensionRegistry}., + *, + * This interface provides a facility to populate the {@code ExtensionRegistry}., + *, + * @author Alex Antonov, + * @since 4.1, + * @see <a href="https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/ExtensionRegistry">, + *     com.google.protobuf.ExtensionRegistry</a>, + */, +public interface ExtensionRegistryInitializer {, +, +	/**, +	 * Initializes the {@code ExtensionRegistry} with Protocol Message extensions, +	 * @param registry the registry to populate, +	 */, +    void initializeExtensionRegistry(ExtensionRegistry registry);, +, +}, +++ b/build.gradle, +		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1"), +	ext.protobufVersion      = "2.5.0", +	// Re-generate Protobuf classes from *.proto files and move them in test sources, +	if (project.hasProperty('genProtobuf')) {, +		apply plugin: 'protobuf', +, +		task updateGenProtobuf(type:Copy, dependsOn: ":spring-web:generateTestProto") {, +			from "${project.buildDir}/generated-sources/test/", +			into "${projectDir}/src/test/java", +			doLast {, +				project.delete "${project.buildDir}/generated-sources/test", +			}, +		}, +, +		tasks.getByPath("compileTestJava").dependsOn "updateGenProtobuf", +	}, +, +        optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.2")]