[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);, +	 * @see #resourceLookupFunction(String, Resource), +		return resources(resourceLookupFunction(pattern, location));, +	}, +, +	/**, +	 * Returns the resource lookup function used by {@link #resources(String, Resource)}., +	 * The returned function can be {@linkplain Function#andThen(Function) composed} on, for, +	 * instance to return a default resource when the lookup function does not match:, +	 * <pre class="code">, +	 * Mono&lt;Resource&gt; defaultResource = Mono.just(new ClassPathResource("index.html"));, +	 * Function&lt;ServerRequest, Mono&lt;Resource&gt;&gt; lookupFunction =, +	 *   RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/")), +	 *     .andThen(resourceMono -&gt; resourceMono.switchIfEmpty(defaultResource));, +	 *, +	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources(lookupFunction);, +     * </pre>, +	 * @param pattern the pattern to match, +	 * @param location the location directory relative to which resources should be resolved, +	 * @return the default resource lookup function for the given parameters., +	 */, +	public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {, +		return new PathResourceLookupFunction(pattern, location);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);, +	 * @see #resourceLookupFunction(String, Resource), +		return resources(resourceLookupFunction(pattern, location));, +	}, +, +	/**, +	 * Returns the resource lookup function used by {@link #resources(String, Resource)}., +	 * The returned function can be {@linkplain Function#andThen(Function) composed} on, for, +	 * instance to return a default resource when the lookup function does not match:, +	 * <pre class="code">, +	 * Mono&lt;Resource&gt; defaultResource = Mono.just(new ClassPathResource("index.html"));, +	 * Function&lt;ServerRequest, Mono&lt;Resource&gt;&gt; lookupFunction =, +	 *   RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/")), +	 *     .andThen(resourceMono -&gt; resourceMono.switchIfEmpty(defaultResource));, +	 *, +	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources(lookupFunction);, +     * </pre>, +	 * @param pattern the pattern to match, +	 * @param location the location directory relative to which resources should be resolved, +	 * @return the default resource lookup function for the given parameters., +	 */, +	public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {, +		return new PathResourceLookupFunction(pattern, location);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/PathResourceLookupFunctionTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Function;, +	@Test, +	public void composeResourceLookupFunction() throws Exception {, +, +		Function<ServerRequest, Mono<Resource>> lookupFunction =, +				new PathResourceLookupFunction("/resources/**",, +						new ClassPathResource("org/springframework/web/reactive/function/server/"));, +, +		ClassPathResource defaultResource = new ClassPathResource("response.txt", getClass());, +, +		Function<ServerRequest, Mono<Resource>> customLookupFunction =, +				lookupFunction.andThen(resourceMono -> resourceMono, +								.switchIfEmpty(Mono.just(defaultResource)));, +, +		MockServerRequest request = MockServerRequest.builder(), +				.uri(new URI("http://localhost/resources/foo")), +				.build();, +, +		Mono<Resource> result = customLookupFunction.apply(request);, +		StepVerifier.create(result), +				.expectNextMatches(resource -> {, +					try {, +						return defaultResource.getFile().equals(resource.getFile());, +					}, +					catch (IOException ex) {, +						return false;, +					}, +				}), +				.expectComplete(), +				.verify();, +, +	}, +, +]