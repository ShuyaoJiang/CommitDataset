[+++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side asynchronous HTTP request. Created via an, + * implementation of the {@link AsyncClientHttpRequestFactory}., + *, + * <p>A {@code AsyncHttpRequest} can be {@linkplain #executeAsync() executed},, + * getting a future {@link ClientHttpResponse} which can be read from., + * @see AsyncClientHttpRequestFactory#createAsyncRequest, +	 * Execute this request asynchronously, resulting in a Future handle., +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side asynchronous HTTP request. Created via an, + * implementation of the {@link AsyncClientHttpRequestFactory}., + *, + * <p>A {@code AsyncHttpRequest} can be {@linkplain #executeAsync() executed},, + * getting a future {@link ClientHttpResponse} which can be read from., + * @see AsyncClientHttpRequestFactory#createAsyncRequest, +	 * Execute this request asynchronously, resulting in a Future handle., +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., + * Factory for {@link AsyncClientHttpRequest} objects., + * Requests are created by the {@link #createAsyncRequest(URI, HttpMethod)} method., +	 * Create a new asynchronous {@link AsyncClientHttpRequest} for the specified URI, +	 * and HTTP method., +	AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side asynchronous HTTP request. Created via an, + * implementation of the {@link AsyncClientHttpRequestFactory}., + *, + * <p>A {@code AsyncHttpRequest} can be {@linkplain #executeAsync() executed},, + * getting a future {@link ClientHttpResponse} which can be read from., + * @see AsyncClientHttpRequestFactory#createAsyncRequest, +	 * Execute this request asynchronously, resulting in a Future handle., +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., + * Factory for {@link AsyncClientHttpRequest} objects., + * Requests are created by the {@link #createAsyncRequest(URI, HttpMethod)} method., +	 * Create a new asynchronous {@link AsyncClientHttpRequest} for the specified URI, +	 * and HTTP method., +	AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * @since 4.0, + * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory#createRequest, +, +	HttpComponentsAsyncClientHttpRequest(HttpAsyncClient httpClient, HttpUriRequest httpRequest, HttpContext httpContext) {, +, +	protected ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers, byte[] bufferedOutput), +			throws IOException {, +, +			HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) this.httpRequest;, +, +		public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {, +			this.callbacks.addCallback(callback);, +			this.callbacks.success(new HttpComponentsAsyncClientHttpResponse(result));, +			this.callbacks.failure(ex);, +		public ClientHttpResponseFuture(Future<HttpResponse> futureResponse, HttpResponseFutureCallback callback) {, +		public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side asynchronous HTTP request. Created via an, + * implementation of the {@link AsyncClientHttpRequestFactory}., + *, + * <p>A {@code AsyncHttpRequest} can be {@linkplain #executeAsync() executed},, + * getting a future {@link ClientHttpResponse} which can be read from., + * @see AsyncClientHttpRequestFactory#createAsyncRequest, +	 * Execute this request asynchronously, resulting in a Future handle., +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., + * Factory for {@link AsyncClientHttpRequest} objects., + * Requests are created by the {@link #createAsyncRequest(URI, HttpMethod)} method., +	 * Create a new asynchronous {@link AsyncClientHttpRequest} for the specified URI, +	 * and HTTP method., +	AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * @since 4.0, + * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory#createRequest, +, +	HttpComponentsAsyncClientHttpRequest(HttpAsyncClient httpClient, HttpUriRequest httpRequest, HttpContext httpContext) {, +, +	protected ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers, byte[] bufferedOutput), +			throws IOException {, +, +			HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) this.httpRequest;, +, +		public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {, +			this.callbacks.addCallback(callback);, +			this.callbacks.success(new HttpComponentsAsyncClientHttpResponse(result));, +			this.callbacks.failure(ex);, +		public ClientHttpResponseFuture(Future<HttpResponse> futureResponse, HttpResponseFutureCallback callback) {, +		public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., +	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {, +++ b/spring-web/src/main/java/org/springframework/http/client/AsyncClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Represents a client-side asynchronous HTTP request. Created via an, + * implementation of the {@link AsyncClientHttpRequestFactory}.]