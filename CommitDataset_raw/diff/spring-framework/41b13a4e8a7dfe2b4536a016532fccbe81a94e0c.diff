[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +			if (!publisher.changeState(this, COMPLETED)) {, +				publisher.state.get().cancel(publisher);, +			}, +			else {, +				publisher.state.get().onAllDataRead(publisher);, +			}, +			else {, +				publisher.state.get().onError(publisher, t);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +			if (!publisher.changeState(this, COMPLETED)) {, +				publisher.state.get().cancel(publisher);, +			}, +			else {, +				publisher.state.get().onAllDataRead(publisher);, +			}, +			else {, +				publisher.state.get().onError(publisher, t);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +				else {, +					processor.state.get().onComplete(processor);, +				}, +					else {, +						processor.state.get().onComplete(processor);, +					}, +				else {, +					processor.state.get().onComplete(processor);, +				}, +			else {, +				processor.state.get().onError(processor, ex);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +			if (!publisher.changeState(this, COMPLETED)) {, +				publisher.state.get().cancel(publisher);, +			}, +			else {, +				publisher.state.get().onAllDataRead(publisher);, +			}, +			else {, +				publisher.state.get().onError(publisher, t);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +				else {, +					processor.state.get().onComplete(processor);, +				}, +					else {, +						processor.state.get().onComplete(processor);, +					}, +				else {, +					processor.state.get().onComplete(processor);, +				}, +			else {, +				processor.state.get().onError(processor, ex);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +				else {, +					processor.state.get().onComplete(processor);, +				}, +								if (processor.changeState(WRITING, REQUESTED)) {, +									if (processor.subscriberCompleted) {, +										if (processor.changeState(REQUESTED, COMPLETED)) {, +											processor.writingComplete();, +											processor.resultPublisher.publishComplete();, +										} else {, +											processor.state.get().onComplete(processor);, +										}, +									}, +									else {, +								}, +							}, +								if (processor.changeState(WRITING, COMPLETED)) {, +								} else {, +									processor.state.get().onComplete(processor);, +								}, +			else {, +				processor.state.get().onError(processor, ex);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +			if (!publisher.changeState(this, COMPLETED)) {, +				publisher.state.get().cancel(publisher);, +			}, +			else {, +				publisher.state.get().onAllDataRead(publisher);, +			}, +			else {, +				publisher.state.get().onError(publisher, t);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +				else {, +					processor.state.get().onComplete(processor);, +				}, +					else {, +						processor.state.get().onComplete(processor);, +					}, +				else {, +					processor.state.get().onComplete(processor);, +				}, +			else {]