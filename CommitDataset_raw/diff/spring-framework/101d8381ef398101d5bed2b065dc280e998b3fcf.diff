[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, +		if (value.getValue()!=null && !((value.getValue() instanceof String) && ((String)value.getValue()).length()==0)) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, +		if (value.getValue()!=null && !((value.getValue() instanceof String) && ((String)value.getValue()).length()==0)) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +				if (expr==null) {, +				expr = new NullLiteral(toPos(t.startpos-1,t.endpos-1));, +			}, +				if (expr==null) {, +					expr = new NullLiteral(toPos(t.startpos-1,t.endpos-2));, +				}, +				if (valueIfNull==null) {, +					valueIfNull = new NullLiteral(toPos(t.startpos+1,t.endpos+1));, +				}, +				if (expr==null) {, +					expr = new NullLiteral(toPos(t.startpos-1,t.endpos-1));, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, +		if (value.getValue()!=null && !((value.getValue() instanceof String) && ((String)value.getValue()).length()==0)) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +				if (expr==null) {, +				expr = new NullLiteral(toPos(t.startpos-1,t.endpos-1));, +			}, +				if (expr==null) {, +					expr = new NullLiteral(toPos(t.startpos-1,t.endpos-2));, +				}, +				if (valueIfNull==null) {, +					valueIfNull = new NullLiteral(toPos(t.startpos+1,t.endpos+1));, +				}, +				if (expr==null) {, +					expr = new NullLiteral(toPos(t.startpos-1,t.endpos-1));, +				}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SpringEL300Tests.java, +	@Test, +	public void elvis_SPR7209_1() {, +		StandardEvaluationContext eContext = new StandardEvaluationContext(new XX());, +		Expression expr = null;, +		, +		// Different parts of elvis expression are null, +		expr = new SpelExpressionParser().parseRaw("(?:'default')");, +		Assert.assertEquals("default", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("?:'default'");, +		Assert.assertEquals("default", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("?:");, +		Assert.assertEquals(null, expr.getValue());, +, +		// Different parts of ternary expression are null, +		try {, +			expr = new SpelExpressionParser().parseRaw("(?'abc':'default')");, +			expr.getValue(eContext);, +			Assert.fail();, +		} catch (SpelEvaluationException see ) {, +			Assert.assertEquals(SpelMessage.TYPE_CONVERSION_ERROR,see.getMessageCode());, +		}, +		expr = new SpelExpressionParser().parseRaw("(false?'abc':null)");, +		Assert.assertEquals(null, expr.getValue());, +, +		// Assignment, +		try {, +			expr = new SpelExpressionParser().parseRaw("(='default')");, +			expr.getValue(eContext);, +			Assert.fail();, +		} catch (SpelEvaluationException see ) {, +			Assert.assertEquals(SpelMessage.SETVALUE_NOT_SUPPORTED,see.getMessageCode());, +		}, +	}, +, +	@Test, +	public void elvis_SPR7209_2() {, +		Expression expr = null;, +		// Have empty string treated as null for elvis, +		expr = new SpelExpressionParser().parseRaw("?:'default'");, +		Assert.assertEquals("default", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("\"\"?:'default'");, +		Assert.assertEquals("default", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("''?:'default'");, +		Assert.assertEquals("default", expr.getValue());, +	}, +	]