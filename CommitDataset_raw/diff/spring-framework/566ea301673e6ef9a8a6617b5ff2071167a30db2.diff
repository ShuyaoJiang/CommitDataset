[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * type, or {@link #NONE} if not resolvable as that type, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * type, or {@link #NONE} if not resolvable as that type, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param superType the super type to cast to (can be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * type, or {@link #NONE} if not resolvable as that type, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param superType the super type to cast to (can be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, + * Copyright 2002-2015 the original author or authors., + * A {@link Serializer} implementation that writes an object to an output stream, + * using Java serialization., +	 * Writes the source object to an output stream using Java serialization., +	 * @see ObjectOutputStream#writeObject(Object), +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * type, or {@link #NONE} if not resolvable as that type, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param superType the super type to cast to (can be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, + * Copyright 2002-2015 the original author or authors., + * A {@link Serializer} implementation that writes an object to an output stream, + * using Java serialization., +	 * Writes the source object to an output stream using Java serialization., +	 * @see ObjectOutputStream#writeObject(Object), +++ b/spring-core/src/main/java/org/springframework/core/serializer/support/SerializingConverter.java, + * Copyright 2002-2015 the original author or authors., + * A {@link Converter} that delegates to a, + * {@link org.springframework.core.serializer.Serializer}, +	 * Create a default {@code SerializingConverter} that uses standard Java serialization., +	 * Create a {@code SerializingConverter} that delegates to the provided {@link Serializer}., +		ByteArrayOutputStream byteStream = new ByteArrayOutputStream(1024);]