[+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			if (this.servletRequest.getCookies() != null) {, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			if (this.servletRequest.getCookies() != null) {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	private final SockJsHandler sockJsHandler;, +	 * @param sockJsHandler the recipient of SockJS messages, +	public SockJsSessionSupport(String sessionId, SockJsHandler sockJsHandler) {, +		Assert.notNull(sockJsHandler, "SockJsHandler is required");, +		this.sockJsHandler = sockJsHandler;, +		return this.sockJsHandler;, +		this.sockJsHandler.newSession(this);, +			this.sockJsHandler.handleMessage(this, message);, +	public void delegateException(Throwable ex) {, +		this.sockJsHandler.handleException(this, ex);, +	}, +, +		this.sockJsHandler.sessionClosed(this);, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			if (this.servletRequest.getCookies() != null) {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	private final SockJsHandler sockJsHandler;, +	 * @param sockJsHandler the recipient of SockJS messages, +	public SockJsSessionSupport(String sessionId, SockJsHandler sockJsHandler) {, +		Assert.notNull(sockJsHandler, "SockJsHandler is required");, +		this.sockJsHandler = sockJsHandler;, +		return this.sockJsHandler;, +		this.sockJsHandler.newSession(this);, +			this.sockJsHandler.handleMessage(this, message);, +	public void delegateException(Throwable ex) {, +		this.sockJsHandler.handleException(this, ex);, +	}, +, +		this.sockJsHandler.sessionClosed(this);, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			if (this.servletRequest.getCookies() != null) {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	private final SockJsHandler sockJsHandler;, +	 * @param sockJsHandler the recipient of SockJS messages, +	public SockJsSessionSupport(String sessionId, SockJsHandler sockJsHandler) {, +		Assert.notNull(sockJsHandler, "SockJsHandler is required");, +		this.sockJsHandler = sockJsHandler;, +		return this.sockJsHandler;, +		this.sockJsHandler.newSession(this);, +			this.sockJsHandler.handleMessage(this, message);, +	public void delegateException(Throwable ex) {, +		this.sockJsHandler.handleException(this, ex);, +	}, +, +		this.sockJsHandler.sessionClosed(this);, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +	public AbstractServerSession(String sessionId, SockJsConfiguration sockJsConfig) {, +		super(sessionId, getSockJsHandler(sockJsConfig));, +	private static SockJsHandler getSockJsHandler(SockJsConfiguration sockJsConfig) {, +		Assert.notNull(sockJsConfig, "sockJsConfig is required");, +		return sockJsConfig.getSockJsHandler();, +	}, +, +	protected SockJsConfiguration getSockJsConfig() {, +			super.close();, +, +			logger.warn("Client went away. Terminating connection abruptly");, +			logger.warn("Failed to send message. Terminating connection abruptly: " + t.getMessage());, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			if (this.servletRequest.getCookies() != null) {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	private final SockJsHandler sockJsHandler;, +	 * @param sockJsHandler the recipient of SockJS messages, +	public SockJsSessionSupport(String sessionId, SockJsHandler sockJsHandler) {, +		Assert.notNull(sockJsHandler, "SockJsHandler is required");, +		this.sockJsHandler = sockJsHandler;, +		return this.sockJsHandler;, +		this.sockJsHandler.newSession(this);, +			this.sockJsHandler.handleMessage(this, message);, +	public void delegateException(Throwable ex) {, +		this.sockJsHandler.handleException(this, ex);, +	}, +, +		this.sockJsHandler.sessionClosed(this);, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +	public AbstractServerSession(String sessionId, SockJsConfiguration sockJsConfig) {, +		super(sessionId, getSockJsHandler(sockJsConfig));, +	private static SockJsHandler getSockJsHandler(SockJsConfiguration sockJsConfig) {, +		Assert.notNull(sockJsConfig, "sockJsConfig is required");, +		return sockJsConfig.getSockJsHandler();, +	}, +, +	protected SockJsConfiguration getSockJsConfig() {, +			super.close();, +, +			logger.warn("Client went away. Terminating connection abruptly");, +			logger.warn("Failed to send message. Terminating connection abruptly: " + t.getMessage());]