[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.properties, +org.springframework.web.portlet.HandlerExceptionResolver=org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.properties, +org.springframework.web.portlet.HandlerExceptionResolver=org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.portlet.handler;, +, +import java.util.Set;, +import javax.portlet.PortletRequest;, +import javax.portlet.WindowState;, +import javax.portlet.RenderRequest;, +import javax.portlet.RenderResponse;, +import javax.portlet.ResourceRequest;, +import javax.portlet.ResourceResponse;, +import javax.portlet.MimeResponse;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.web.portlet.HandlerExceptionResolver;, +import org.springframework.web.portlet.ModelAndView;, +import org.springframework.core.Ordered;, +, +/**, + * Abstract base class for {@link HandlerExceptionResolver} implementations. <p>Provides a set of mapped handlers that, + * the resolver should map to, and the {@link Ordered} implementation., + *, + * @author Arjen Poutsma, + * @since 3.0, + */, +public abstract class AbstractHandlerExceptionResolver implements HandlerExceptionResolver, Ordered {, +, +	/** Logger available to subclasses */, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	private Set mappedHandlers;, +, +	private Class[] mappedHandlerClasses;, +, +	private Log warnLogger;, +, +	private boolean renderWhenMinimized = false;, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	public int getOrder() {, +		return this.order;, +	}, +, +	/**, +	 * Specify the set of handlers that this exception resolver should map., +	 * The exception mappings and the default error view will only apply, +	 * to the specified handlers., +	 * <p>If no handlers set, both the exception mappings and the default error, +	 * view will apply to all handlers. This means that a specified default, +	 * error view will be used as fallback for all exceptions; any further, +	 * HandlerExceptionResolvers in the chain will be ignored in this case., +	 */, +	public void setMappedHandlers(Set mappedHandlers) {, +		this.mappedHandlers = mappedHandlers;, +	}, +, +	/**, +	 * Specify the set of classes that this exception resolver should apply to., +	 * The exception mappings and the default error view will only apply, +	 * to handlers of the specified type; the specified types may be interfaces, +	 * and superclasses of handlers as well., +	 * <p>If no handlers and handler classes are set, the exception mappings, +	 * and the default error view will apply to all handlers. This means that, +	 * a specified default error view will be used as fallback for all exceptions;, +	 * any further HandlerExceptionResolvers in the chain will be ignored in, +	 * this case., +	 */, +	public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {, +		this.mappedHandlerClasses = mappedHandlerClasses;, +	}, +, +	/**]