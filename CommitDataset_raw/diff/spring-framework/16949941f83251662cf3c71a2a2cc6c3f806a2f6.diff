[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping {, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern);, +		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);, +		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +			request.setAttribute(INTROSPECT_TYPE_LEVEL_MAPPING, supportsTypeLevelMappings());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping {, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern);, +		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);, +		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +			request.setAttribute(INTROSPECT_TYPE_LEVEL_MAPPING, supportsTypeLevelMappings());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.handler;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.Properties;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletRequestWrapper;, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PropertiesLoaderUtils;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.cors.CorsConfigurationSource;, +import org.springframework.web.servlet.DispatcherServlet;, +import org.springframework.web.servlet.HandlerExecutionChain;, +import org.springframework.web.servlet.HandlerInterceptor;, +import org.springframework.web.servlet.HandlerMapping;, +, +/**, + * Helper class to get information from the {@code HandlerMapping} that would, + * serve a specific request., + *, + * <p>Provides the following methods:, + * <ul>, + * <li>{@link #getMatchableHandlerMapping} &mdash; obtain a {@code HandlerMapping}, + * to check request-matching criteria against., + * <li>{@link #getCorsConfiguration} &mdash; obtain the CORS configuration for the, + * request., + * </ul>, + *, + * @author Rossen Stoyanchev, + * @since 4.3.1, + */, +public class HandlerMappingIntrospector implements CorsConfigurationSource {, +, +	private final List<HandlerMapping> handlerMappings;, +, +, +	/**, +	 * Constructor that detects the configured {@code HandlerMapping}s in the, +	 * given {@code ApplicationContext} or falls back on, +	 * "DispatcherServlet.properties" like the {@code DispatcherServlet}., +	 */, +	public HandlerMappingIntrospector(ApplicationContext context) {, +		this.handlerMappings = initHandlerMappings(context);, +	}, +, +, +	private static List<HandlerMapping> initHandlerMappings(ApplicationContext context) {, +		Map<String, HandlerMapping> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				context, HandlerMapping.class, true, false);, +		if (!beans.isEmpty()) {, +			List<HandlerMapping> mappings = new ArrayList<HandlerMapping>(beans.values());, +			AnnotationAwareOrderComparator.sort(mappings);, +			return mappings;, +		}, +		return initDefaultHandlerMappings(context);, +	}, +, +	private static List<HandlerMapping> initDefaultHandlerMappings(ApplicationContext context) {, +		Properties props;, +		String path = "DispatcherServlet.properties";]