[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.util.ObjectUtils;, +					return (!ObjectUtils.isEmpty(beanMethodArgs) ?, +							beanFactory.getBean(beanName, beanMethodArgs) : beanFactory.getBean(beanName));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.util.ObjectUtils;, +					return (!ObjectUtils.isEmpty(beanMethodArgs) ?, +							beanFactory.getBean(beanName, beanMethodArgs) : beanFactory.getBean(beanName));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test, +	public void testPrototypeArgumentsThroughBeanMethodCall() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfig.class);, +		ctx.getBean(FooFactory.class).createFoo(new BarArgument());, +	}, +, +	@Configuration, +	static class BeanArgumentConfig {, +, +		@Bean, +		@Scope("prototype"), +		public DependingFoo foo(final BarArgument bar) {, +			return new DependingFoo(bar);, +		}, +, +		@Bean, +		public FooFactory fooFactory() {, +			return new FooFactory() {, +				@Override, +				public DependingFoo createFoo(final BarArgument bar) {, +					return foo(bar);, +				}, +			};, +		}, +	}, +, +	static class BarArgument {, +	}, +, +	static class DependingFoo {, +, +		DependingFoo(BarArgument bar) {, +		}, +	}, +, +	static abstract class FooFactory {, +, +		abstract DependingFoo createFoo(BarArgument bar);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.util.ObjectUtils;, +					return (!ObjectUtils.isEmpty(beanMethodArgs) ?, +							beanFactory.getBean(beanName, beanMethodArgs) : beanFactory.getBean(beanName));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test, +	public void testPrototypeArgumentsThroughBeanMethodCall() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfig.class);, +		ctx.getBean(FooFactory.class).createFoo(new BarArgument());, +	}, +, +	@Configuration, +	static class BeanArgumentConfig {, +, +		@Bean, +		@Scope("prototype"), +		public DependingFoo foo(final BarArgument bar) {, +			return new DependingFoo(bar);, +		}, +, +		@Bean, +		public FooFactory fooFactory() {, +			return new FooFactory() {, +				@Override, +				public DependingFoo createFoo(final BarArgument bar) {, +					return foo(bar);, +				}, +			};, +		}, +	}, +, +	static class BarArgument {, +	}, +, +	static class DependingFoo {, +, +		DependingFoo(BarArgument bar) {, +		}, +	}, +, +	static abstract class FooFactory {, +, +		abstract DependingFoo createFoo(BarArgument bar);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationWithFactoryBeanAndParametersTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +	static class Config {, +]