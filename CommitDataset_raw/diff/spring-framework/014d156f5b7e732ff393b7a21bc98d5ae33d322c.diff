[+++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the same, +	 * result as {@link #toDetailedString()}., +	 * @see java.lang.Throwable#getMessage(), +	 */, +	@Override, +	public String getMessage() {, +		return toDetailedString();, +	}, +, +	/**, +	 * Return the exception simple message without including the expression that caused, +	 * the failure., +	 */, +	public String getSimpleMessage() {, +		return super.getMessage();, +	}, +, +		output.append(getSimpleMessage());, +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the same, +	 * result as {@link #toDetailedString()}., +	 * @see java.lang.Throwable#getMessage(), +	 */, +	@Override, +	public String getMessage() {, +		return toDetailedString();, +	}, +, +	/**, +	 * Return the exception simple message without including the expression that caused, +	 * the failure., +	 */, +	public String getSimpleMessage() {, +		return super.getMessage();, +	}, +, +		output.append(getSimpleMessage());, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import org.springframework.expression.ExpressionException;, +	private void checkTemplateParsingError(String expression, String expectedMessage), +			throws Exception {, +	private void checkTemplateParsingError(String expression, ParserContext context,, +			String expectedMessage) throws Exception {, +		} catch (Exception ex) {, +			String message = ex.getMessage();, +			if (ex instanceof ExpressionException) {, +				message = ((ExpressionException) ex).getSimpleMessage();, +			if (!message.equals(expectedMessage)) {, +				ex.printStackTrace();, +			}, +			assertThat(expectedMessage, equalTo(message));, +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the same, +	 * result as {@link #toDetailedString()}., +	 * @see java.lang.Throwable#getMessage(), +	 */, +	@Override, +	public String getMessage() {, +		return toDetailedString();, +	}, +, +	/**, +	 * Return the exception simple message without including the expression that caused, +	 * the failure., +	 */, +	public String getSimpleMessage() {, +		return super.getMessage();, +	}, +, +		output.append(getSimpleMessage());, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import org.springframework.expression.ExpressionException;, +	private void checkTemplateParsingError(String expression, String expectedMessage), +			throws Exception {, +	private void checkTemplateParsingError(String expression, ParserContext context,, +			String expectedMessage) throws Exception {, +		} catch (Exception ex) {, +			String message = ex.getMessage();, +			if (ex instanceof ExpressionException) {, +				message = ((ExpressionException) ex).getSimpleMessage();, +			if (!message.equals(expectedMessage)) {, +				ex.printStackTrace();, +			}, +			assertThat(expectedMessage, equalTo(message));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/TemplateExpressionParsingTests.java, + * Copyright 2002-2013 the original author or authors., +			assertEquals("No ending suffix '}' for expression starting at character 41: ${listOfNumbersUpToTen.$[#this>5] world", pe.getSimpleMessage());, +			assertEquals("Found closing '}' at position 74 but most recent opening is '[' at position 30", pe.getSimpleMessage());, +			assertEquals("No ending suffix '}' for expression starting at character 6: ${'world'", pe.getSimpleMessage());, +			assertEquals("No ending suffix '}' for expression starting at character 6: ${'wibble'${'world'}", pe.getSimpleMessage());, +			assertEquals("No expression defined within delimiter '${}' at character 6", pe.getSimpleMessage());, +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the same, +	 * result as {@link #toDetailedString()}., +	 * @see java.lang.Throwable#getMessage()]