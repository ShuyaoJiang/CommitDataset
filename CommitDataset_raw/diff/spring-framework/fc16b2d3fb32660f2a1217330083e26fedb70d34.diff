[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +	// Retrieval of bean names, +, +	 * @see #beanNamesIncludingAncestors, +	 * @see ListableBeanFactory#getBeanNamesForType(ResolvableType), +	 * @see ListableBeanFactory#getBeanNamesForType(Class), +	 * @see ListableBeanFactory#getBeanNamesForType(Class, boolean, boolean), +	 * Get all bean names whose {@code Class} has the supplied {@link Annotation}, +	 * type, including those defined in ancestor factories, without creating any bean, +	 * instances yet. Will return unique names in case of overridden bean definitions., +	 * @param lbf the bean factory, +	 * @param annotationType the type of annotation to look for, +	 * @return the array of matching bean names, or an empty array if none, +	 * @since 5.0, +	 * @see ListableBeanFactory#getBeanNamesForAnnotation(Class), +	 */, +	public static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				result = mergeNamesWithParent(result, parentResult, hbf);, +			}, +		}, +		return result;, +	}, +, +, +	// Retrieval of bean instances, +, +	/**, +	 * @see ListableBeanFactory#getBeansOfType(Class), +	 * @see ListableBeanFactory#getBeansOfType(Class, boolean, boolean), +	 * @see #beansOfTypeIncludingAncestors(ListableBeanFactory, Class), +	 * @see #beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean), +	 * @see ListableBeanFactory#getBeansOfType(Class), +	 * @see ListableBeanFactory#getBeansOfType(Class, boolean, boolean), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +	// Retrieval of bean names, +, +	 * @see #beanNamesIncludingAncestors, +	 * @see ListableBeanFactory#getBeanNamesForType(ResolvableType), +	 * @see ListableBeanFactory#getBeanNamesForType(Class), +	 * @see ListableBeanFactory#getBeanNamesForType(Class, boolean, boolean), +	 * Get all bean names whose {@code Class} has the supplied {@link Annotation}, +	 * type, including those defined in ancestor factories, without creating any bean, +	 * instances yet. Will return unique names in case of overridden bean definitions., +	 * @param lbf the bean factory, +	 * @param annotationType the type of annotation to look for, +	 * @return the array of matching bean names, or an empty array if none, +	 * @since 5.0, +	 * @see ListableBeanFactory#getBeanNamesForAnnotation(Class), +	 */, +	public static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				result = mergeNamesWithParent(result, parentResult, hbf);, +			}, +		}, +		return result;, +	}, +, +, +	// Retrieval of bean instances, +, +	/**, +	 * @see ListableBeanFactory#getBeansOfType(Class), +	 * @see ListableBeanFactory#getBeansOfType(Class, boolean, boolean), +	 * @see #beansOfTypeIncludingAncestors(ListableBeanFactory, Class), +	 * @see #beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean), +	 * @see ListableBeanFactory#getBeansOfType(Class), +	 * @see ListableBeanFactory#getBeansOfType(Class, boolean, boolean), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	 * @see #getCandidateBeanNames(), +			logger.trace("Unregister mapping \"" + mapping + "\"");, +	 * @see #initHandlerMethods, +	 * @see #getCandidateBeanNames(), +	 * @see #processCandidateBean, +	 * @see #handlerMethodsInitialized, +		for (String beanName : getCandidateBeanNames()) {, +			if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {, +				processCandidateBean(beanName);, +			}, +		}, +		handlerMethodsInitialized(getHandlerMethods());, +	}, +	/**, +	 * Determine the names of candidate beans in the application context.]