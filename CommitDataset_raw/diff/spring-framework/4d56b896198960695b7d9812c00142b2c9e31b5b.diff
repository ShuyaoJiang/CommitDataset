[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass));, +	}, +, +	/**, +	 * Convenience method to return a String representation of this Method, +	 * for use in logging. Can be overridden in subclasses to provide a, +	 * different identifier for the given method., +	 * @param method the method we're interested in, +	 * @param targetClass class the method is on, +	 * @return log message identifying this method, +	 * @see org.springframework.util.ClassUtils#getQualifiedMethodName, +	 */, +	protected String methodIdentification(Method method, Class targetClass) {, +		String simpleMethodId = methodIdentification(method);, +		if (simpleMethodId != null) {, +			return simpleMethodId;, +		}, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);, +		return ClassUtils.getQualifiedMethodName(specificMethod);, +	 * @deprecated in favor of {@link #methodIdentification(Method, Class)}, +	@Deprecated, +		return null;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass));, +	}, +, +	/**, +	 * Convenience method to return a String representation of this Method, +	 * for use in logging. Can be overridden in subclasses to provide a, +	 * different identifier for the given method., +	 * @param method the method we're interested in, +	 * @param targetClass class the method is on, +	 * @return log message identifying this method, +	 * @see org.springframework.util.ClassUtils#getQualifiedMethodName, +	 */, +	protected String methodIdentification(Method method, Class targetClass) {, +		String simpleMethodId = methodIdentification(method);, +		if (simpleMethodId != null) {, +			return simpleMethodId;, +		}, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);, +		return ClassUtils.getQualifiedMethodName(specificMethod);, +	 * @deprecated in favor of {@link #methodIdentification(Method, Class)}, +	@Deprecated, +		return null;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java, +		final String joinpointIdentification = methodIdentification(invocation.getMethod(), targetClass);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass));, +	}, +, +	/**, +	 * Convenience method to return a String representation of this Method, +	 * for use in logging. Can be overridden in subclasses to provide a, +	 * different identifier for the given method., +	 * @param method the method we're interested in, +	 * @param targetClass class the method is on, +	 * @return log message identifying this method, +	 * @see org.springframework.util.ClassUtils#getQualifiedMethodName, +	 */, +	protected String methodIdentification(Method method, Class targetClass) {, +		String simpleMethodId = methodIdentification(method);, +		if (simpleMethodId != null) {, +			return simpleMethodId;, +		}, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);, +		return ClassUtils.getQualifiedMethodName(specificMethod);, +	 * @deprecated in favor of {@link #methodIdentification(Method, Class)}, +	@Deprecated, +		return null;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionInterceptor.java, +		final String joinpointIdentification = methodIdentification(invocation.getMethod(), targetClass);, +++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/interceptor/BeanFactoryTransactionTests.java, + * Copyright 2002-2010 the original author or authors., +		doTestGetsAreNotTransactional(testBean);, +		doTestGetsAreNotTransactional(testBean);, +		doTestGetsAreNotTransactional(testBean);, +		doTestGetsAreNotTransactional(testBean);, +	private void doTestGetsAreNotTransactional(final ITestBean testBean) {, +				System.out.println(definition.getName());, +				if (!((definition.getName().indexOf(TestBean.class.getName()) != -1) &&]