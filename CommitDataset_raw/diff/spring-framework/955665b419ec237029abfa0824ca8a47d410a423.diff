[+++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindException.java, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindException.java, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindingResult.java, +	default void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindException.java, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindingResult.java, +	default void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		Object target = getTarget();, +		Assert.state(target != null, "No target to validate");, +		BindingResult bindingResult = getBindingResult();, +		// Call each validator with the same binding result, +			validator.validate(target, bindingResult);, +	 * @since 3.1, +		Object target = getTarget();, +		Assert.state(target != null, "No target to validate");, +		BindingResult bindingResult = getBindingResult();, +		// Call each validator with the same binding result, +				((SmartValidator) validator).validate(target, bindingResult, validationHints);, +				validator.validate(target, bindingResult);, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindException.java, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindingResult.java, +	default void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		Object target = getTarget();, +		Assert.state(target != null, "No target to validate");, +		BindingResult bindingResult = getBindingResult();, +		// Call each validator with the same binding result, +			validator.validate(target, bindingResult);, +	 * @since 3.1, +		Object target = getTarget();, +		Assert.state(target != null, "No target to validate");, +		BindingResult bindingResult = getBindingResult();, +		// Call each validator with the same binding result, +				((SmartValidator) validator).validate(target, bindingResult, validationHints);, +				validator.validate(target, bindingResult);, +++ b/spring-context/src/main/java/org/springframework/validation/SmartValidator.java, + * Copyright 2002-2018 the original author or authors., +	 * @param target the object that is to be validated, +	 * @param errors contextual state about the validation process, +	 * @see javax.validation.Validator#validate(Object, Class[]), +	void validate(Object target, Errors errors, Object... validationHints);, +, +	/**, +	 * Validate the supplied value for the specified field on the target type,, +	 * reporting the same validation errors as if the value would be bound to, +	 * the field on an instance of the target class., +	 * @param targetType the target type, +	 * @param fieldName the name of the field, +	 * @param value the candidate value, +	 * @param errors contextual state about the validation process, +	 * @param validationHints one or more hint objects to be passed to the validation engine, +	 * @since 5.1, +	 * @see javax.validation.Validator#validateValue(Class, String, Object, Class[]), +	 */, +	default void validateValue(, +			Class<?> targetType, String fieldName, @Nullable Object value, Errors errors, Object... validationHints) {, +, +		throw new IllegalArgumentException("Cannot validate individual value for " + targetType);, +	}, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractBindingResult.java, +			return (fieldError.isBindingFailure() || getTarget() == null ? value : formatFieldValue(field, value));, +				errorCode, getObjectName(), fixedField(field), getFieldType(field));, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindException.java, +	public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/BindingResult.java, +	default void recordFieldValue(String field, Class<?> type, @Nullable Object value) {, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		Object target = getTarget();, +		Assert.state(target != null, "No target to validate");, +		BindingResult bindingResult = getBindingResult();, +		// Call each validator with the same binding result, +			validator.validate(target, bindingResult);, +	 * @since 3.1, +		Object target = getTarget();]