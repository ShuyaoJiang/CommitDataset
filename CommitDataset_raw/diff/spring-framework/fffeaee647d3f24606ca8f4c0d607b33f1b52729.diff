[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2013 the original author or authors., +	private static final CallbackFilter CALLBACK_FILTER = new ConfigurationClassCallbackFilter();, +	private static final Class<?>[] CALLBACK_TYPES =, +			{BeanMethodInterceptor.class, DisposableBeanMethodInterceptor.class, NoOp.class};, +, +, +	/**, +	 * Marker interface to be implemented by all @Configuration CGLIB subclasses., +	 * Facilitates idempotent behavior for {@link ConfigurationClassEnhancer#enhance(Class)}, +	 * through checking to see if candidate classes are already assignable to it, e.g., +	 * have already been enhanced., +	 * <p>Also extends {@link DisposableBean}, as all enhanced, +	 * {@code @Configuration} classes must de-register static CGLIB callbacks on, +	 * destruction, which is handled by the (private) {@code DisposableBeanMethodInterceptor}., +	 * <p>Note that this interface is intended for framework-internal use only, however, +	 * must remain public in order to allow access to subclasses generated from other, +	 * packages (i.e. user code)., +	 */, +	public interface EnhancedConfiguration extends DisposableBean {, +	}, +, +, +	/**, +	 * CGLIB CallbackFilter implementation that points to BeanMethodInterceptor and, +	 * DisposableBeanMethodInterceptor., +	 */, +	private static class ConfigurationClassCallbackFilter implements CallbackFilter {, +, +		public int accept(Method candidateMethod) {, +			// Set up the callback filter to return the index of the BeanMethodInterceptor when, +			// handling a @Bean-annotated method; otherwise, return index of the NoOp callback., +			if (BeanAnnotationHelper.isBeanAnnotated(candidateMethod)) {, +				return 0;, +			}, +			if (DisposableBeanMethodInterceptor.isDestroyMethod(candidateMethod)) {, +				return 1;, +			}, +			return 2;, +		}, +	}, +, +, +	 * garbage collection issues. See SPR-7901.]