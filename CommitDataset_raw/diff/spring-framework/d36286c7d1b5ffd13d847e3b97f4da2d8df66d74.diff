[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractSingleValueEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +						return encode(t, dataBufferFactory, type, mimeType);, +	 * @param dataBufferFactory a buffer factory used to create the output, +	protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractSingleValueEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +						return encode(t, dataBufferFactory, type, mimeType);, +	 * @param dataBufferFactory a buffer factory used to create the output, +	protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/ByteBufferEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +		return Flux.from(inputStream).map(dataBufferFactory::wrap);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractSingleValueEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +						return encode(t, dataBufferFactory, type, mimeType);, +	 * @param dataBufferFactory a buffer factory used to create the output, +	protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/ByteBufferEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +		return Flux.from(inputStream).map(dataBufferFactory::wrap);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JacksonJsonEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +			return Flux.from(inputStream), +					.map(value -> serialize(value, dataBufferFactory));, +			Mono<DataBuffer> startArray =, +					Mono.just(dataBufferFactory.wrap(START_ARRAY_BUFFER));, +			Flux<DataBuffer> arraySeparators =, +					Mono.just(dataBufferFactory.wrap(SEPARATOR_BUFFER)).repeat();, +			Mono<DataBuffer> endArray =, +					Mono.just(dataBufferFactory.wrap(END_ARRAY_BUFFER));, +			Flux<DataBuffer> serializedObjects = Flux.from(inputStream), +					.map(value -> serialize(value, dataBufferFactory));, +	private DataBuffer serialize(Object value, DataBufferFactory dataBufferFactory) {, +		DataBuffer buffer = dataBufferFactory.allocateBuffer();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractSingleValueEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +						return encode(t, dataBufferFactory, type, mimeType);, +	 * @param dataBufferFactory a buffer factory used to create the output, +	protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/ByteBufferEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +		return Flux.from(inputStream).map(dataBufferFactory::wrap);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JacksonJsonEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +			return Flux.from(inputStream), +					.map(value -> serialize(value, dataBufferFactory));, +			Mono<DataBuffer> startArray =, +					Mono.just(dataBufferFactory.wrap(START_ARRAY_BUFFER));, +			Flux<DataBuffer> arraySeparators =, +					Mono.just(dataBufferFactory.wrap(SEPARATOR_BUFFER)).repeat();, +			Mono<DataBuffer> endArray =, +					Mono.just(dataBufferFactory.wrap(END_ARRAY_BUFFER));, +			Flux<DataBuffer> serializedObjects = Flux.from(inputStream), +					.map(value -> serialize(value, dataBufferFactory));, +	private DataBuffer serialize(Object value, DataBufferFactory dataBufferFactory) {, +		DataBuffer buffer = dataBufferFactory.allocateBuffer();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/Jaxb2Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	protected Flux<DataBuffer> encode(Object value, DataBufferFactory dataBufferFactory,, +			DataBuffer buffer = dataBufferFactory.allocateBuffer(1024);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Encoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	 * @param dataBufferFactory a buffer factory used to create the output, +			DataBufferFactory dataBufferFactory, ResolvableType type,, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/AbstractSingleValueEncoder.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +			DataBufferFactory dataBufferFactory, ResolvableType type, MimeType mimeType,, +						return encode(t, dataBufferFactory, type, mimeType);, +	 * @param dataBufferFactory a buffer factory used to create the output, +	protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,]