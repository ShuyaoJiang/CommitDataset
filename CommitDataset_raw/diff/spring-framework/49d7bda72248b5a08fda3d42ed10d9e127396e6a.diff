[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2014 the original author or authors., +		if ((result.size() == 1) && (get(ACCEPT).size() > 1)) {, +			value = StringUtils.collectionToCommaDelimitedString(get(ACCEPT));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2014 the original author or authors., +		if ((result.size() == 1) && (get(ACCEPT).size() > 1)) {, +			value = StringUtils.collectionToCommaDelimitedString(get(ACCEPT));, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, +import java.util.ArrayList;, +import java.util.Collection;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.CollectionUtils;, + * @author Rossen Stoyanchev, +	private static final boolean servlet3Present =, +			ClassUtils.isPresent("javax.servlet.AsyncContext", ServletServerHttpResponse.class.getClassLoader());, +, +, +	private final HttpHeaders headers;, +		this.headers = (servlet3Present ? new ServletResponseHttpHeaders() : new HttpHeaders());, +, +	/**, +	 * Extends HttpHeaders with the ability to look up headers already present in, +	 * the underlying HttpServletResponse., +	 *, +	 * The intent is merely to expose what is available through the HttpServletResponse, +	 * i.e. the ability to look up specific header values by name. All other, +	 * map-related operations (e.g. iteration, removal, etc) apply only to values, +	 * added directly through HttpHeaders methods., +	 *, +	 * @since 4.0.3, +	 */, +	private class ServletResponseHttpHeaders extends HttpHeaders {, +, +		private static final long serialVersionUID = 3410708522401046302L;, +, +		@Override, +		public String getFirst(String headerName) {, +			String value = servletResponse.getHeader(headerName);, +			if (value != null) {, +				return value;, +			}, +			else {, +				return super.getFirst(headerName);, +			}, +		}, +, +		@Override, +		public List<String> get(Object key) {, +, +			Assert.isInstanceOf(String.class, key, "key must be a String-based header name");, +			Collection<String> values1 = servletResponse.getHeaders((String) key);, +			boolean isEmpty1 = CollectionUtils.isEmpty(values1);, +, +			List<String> values2 = super.get(key);, +			boolean isEmpty2 = CollectionUtils.isEmpty(values2);, +, +			if (isEmpty1 && isEmpty2) {, +				return null;, +			}, +, +			List<String> values = new ArrayList<String>();, +			if (!isEmpty1) {, +				values.addAll(values1);, +			}, +			if (!isEmpty2) {, +				values.addAll(values2);, +			}, +			return values;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2014 the original author or authors., +		if ((result.size() == 1) && (get(ACCEPT).size() > 1)) {, +			value = StringUtils.collectionToCommaDelimitedString(get(ACCEPT));, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, +import java.util.ArrayList;, +import java.util.Collection;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.CollectionUtils;, + * @author Rossen Stoyanchev, +	private static final boolean servlet3Present =, +			ClassUtils.isPresent("javax.servlet.AsyncContext", ServletServerHttpResponse.class.getClassLoader());, +, +, +	private final HttpHeaders headers;, +		this.headers = (servlet3Present ? new ServletResponseHttpHeaders() : new HttpHeaders());, +, +	/**, +	 * Extends HttpHeaders with the ability to look up headers already present in, +	 * the underlying HttpServletResponse., +	 *, +	 * The intent is merely to expose what is available through the HttpServletResponse, +	 * i.e. the ability to look up specific header values by name. All other, +	 * map-related operations (e.g. iteration, removal, etc) apply only to values, +	 * added directly through HttpHeaders methods., +	 *, +	 * @since 4.0.3, +	 */]