[+++ b/src/docs/asciidoc/web/webflux.adoc, +JSON and binary JSON (https://github.com/FasterXML/smile-format-specification[Smile]) data, +formats are both supported., +The `Jackson2Decoder` uses Jackson's asynchronous, non-blocking parser to create a stream, +of ``TokenBuffer``'s and then each `TokenBuffer` is passed to Jackson's `ObjectMapper` to, +create a higher level object. When decoding to a multi-value publisher (e.g. `Flux`), the, +input stream can be a JSON array, or, +https://en.wikipedia.org/wiki/JSON_streaming[line-delimited JSON] if the content-type is, +"application/stream+json"., +The `Jackson2Encoder` works as follows:, +* For a single value publisher (e.g. `Mono`), simply serialize it., +* For a multi-value publisher with "application/json", collect the values with, +`Flux#collectToList()` and then serialize the resulting collection., +* For a multi-value publisher with a streaming media type such as, +`application/stream+json` or `application/stream+x-jackson-smile`, encode, write, and, +flush each value individually using a, +https://en.wikipedia.org/wiki/JSON_streaming[line-delimited JSON] format., +* For Server Sent Events, the `Jackson2Encoder` is invoked individually for each event, +by the `ServerSentEventHttpMessageWriter` the resulting output flushed., +By default `Jackson2Encoder` and `Jackson2Decoder` do not support serialization for, +elements of type `java.util.String`. Instead the default assumption is that a string, +or a sequence of strings represent serialized JSON content, to be rendered by the, +`CharSequenceEncoder`. If what you want is to render a JSON array from `Flux<String>`,, +use `Flux#collectToList()` and provide a `Mono<List<String>>` to be serialized., +==== Streaming, +When streaming to the HTTP response (for example, `text/event-stream`,, +`application/stream+json`), it is important to send data periodically, in order to, +reliably detect a disconnected client sooner rather than later. Such a send could be an, +comment-only, empty SSE event or any other "no-op" data that would effectively serve as, +a heartbeat.]