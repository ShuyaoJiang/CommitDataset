[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				(DisposableBeanAdapter.hasDestroyMethod(bean, mbd) || hasDestructionAwareBeanPostProcessors()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				(DisposableBeanAdapter.hasDestroyMethod(bean, mbd) || hasDestructionAwareBeanPostProcessors()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2012 the original author or authors., +import java.io.Closeable;, +import org.springframework.util.ClassUtils;, +	private static final String CLOSE_METHOD_NAME = "close";, +, +	private static Class closeableInterface;, +, +	static {, +		try {, +			closeableInterface = DisposableBeanAdapter.class.getClassLoader().loadClass("java.lang.AutoCloseable");, +		}, +		catch (ClassNotFoundException ex) {, +			closeableInterface = Closeable.class;, +		}, +	}, +, +, +		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition);, +	 * If the current value of the given beanDefinition's "destroyMethodName" property is, +	 * {@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method., +	 * Candidate methods are currently limited to public, no-arg methods named "close", +	 * (whether declared locally or inherited). The given BeanDefinition's, +	 * "destroyMethodName" is updated to be null if no such method is found, otherwise set, +	 * to the name of the inferred method. This constant serves as the default for the, +	 * {@code @Bean#destroyMethod} attribute and the value of the constant may also be, +	 * used in XML within the {@code <bean destroy-method="">} or {@code, +	 * <beans default-destroy-method="">} attributes., +	 * <p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}, +	 * interfaces, reflectively calling the "close" method on implementing beans as well., +	 */, +	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {, +		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||, +				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {, +			// Only perform destroy method inference or Closeable detection, +			// in case of the bean not explicitly implementing DisposableBean, +			if (!(bean instanceof DisposableBean)) {, +				try {, +					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName();, +				}, +				catch (NoSuchMethodException ex) {, +					// no candidate destroy method found, +				}, +			}, +			return null;, +		}, +		return beanDefinition.getDestroyMethodName();, +	}, +, +	/**, +, +	/**, +	 * Check whether the given bean has any kind of destroy method to call., +	 * @param bean the bean instance, +	 * @param beanDefinition the corresponding bean definition, +	 */, +	public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {, +		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {, +			return true;, +		}, +		String destroyMethodName = beanDefinition.getDestroyMethodName();, +		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {, +			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME);, +		}, +		return (destroyMethodName != null);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				(DisposableBeanAdapter.hasDestroyMethod(bean, mbd) || hasDestructionAwareBeanPostProcessors()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2012 the original author or authors., +import java.io.Closeable;, +import org.springframework.util.ClassUtils;, +	private static final String CLOSE_METHOD_NAME = "close";, +, +	private static Class closeableInterface;, +, +	static {, +		try {, +			closeableInterface = DisposableBeanAdapter.class.getClassLoader().loadClass("java.lang.AutoCloseable");, +		}, +		catch (ClassNotFoundException ex) {, +			closeableInterface = Closeable.class;, +		}, +	}, +, +, +		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition);, +	 * If the current value of the given beanDefinition's "destroyMethodName" property is, +	 * {@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method., +	 * Candidate methods are currently limited to public, no-arg methods named "close", +	 * (whether declared locally or inherited). The given BeanDefinition's, +	 * "destroyMethodName" is updated to be null if no such method is found, otherwise set, +	 * to the name of the inferred method. This constant serves as the default for the, +	 * {@code @Bean#destroyMethod} attribute and the value of the constant may also be, +	 * used in XML within the {@code <bean destroy-method="">} or {@code]