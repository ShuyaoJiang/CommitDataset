[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +		Class<?> returnValueClass = returnValue.getClass();, +, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass);, +				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {, +	 * 	<li>Media types of configured converters that can write the specific return value, or, +	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {, +			List<MediaType> result = new ArrayList<MediaType>();, +            for (HttpMessageConverter<?> converter : messageConverters) {, +                if (converter.canWrite(returnValueClass, null)) {, +                	result.addAll(converter.getSupportedMediaTypes());, +                }, +            }			, +			return result;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +		Class<?> returnValueClass = returnValue.getClass();, +, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass);, +				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {, +	 * 	<li>Media types of configured converters that can write the specific return value, or, +	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {, +			List<MediaType> result = new ArrayList<MediaType>();, +            for (HttpMessageConverter<?> converter : messageConverters) {, +                if (converter.canWrite(returnValueClass, null)) {, +                	result.addAll(converter.getSupportedMediaTypes());, +                }, +            }			, +			return result;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/HttpEntityMethodProcessorTests.java, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.eq;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.reset;, +import static org.easymock.EasyMock.verify;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +		Class<?> returnValueClass = returnValue.getClass();, +, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass);, +				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {, +	 * 	<li>Media types of configured converters that can write the specific return value, or, +	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {, +			List<MediaType> result = new ArrayList<MediaType>();, +            for (HttpMessageConverter<?> converter : messageConverters) {, +                if (converter.canWrite(returnValueClass, null)) {, +                	result.addAll(converter.getSupportedMediaTypes());, +                }, +            }			, +			return result;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/HttpEntityMethodProcessorTests.java, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.eq;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.reset;, +import static org.easymock.EasyMock.verify;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestResponseBodyMethodProcessorTests.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		expect(messageConverter.canWrite(String.class, null)).andReturn(true);, +		expect(messageConverter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +	@Test, +	public void handleStringReturnValue() throws Exception {, +		List<HttpMessageConverter<?>>converters = new ArrayList<HttpMessageConverter<?>>();, +		converters.add(new ByteArrayHttpMessageConverter());, +		converters.add(new StringHttpMessageConverter());, +		, +		processor = new RequestResponseBodyMethodProcessor(converters);, +		processor.handleReturnValue("Foo", returnTypeString, mavContainer, webRequest);, +		, +		assertEquals("text/plain;charset=ISO-8859-1", servletResponse.getHeader("Content-Type"));, +		assertEquals("Foo", servletResponse.getContentAsString());]