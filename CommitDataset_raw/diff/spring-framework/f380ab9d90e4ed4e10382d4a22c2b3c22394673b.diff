[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, + * ```kotlin, + * import org.springframework.web.reactive.function.server.RequestPredicates.*, + * ..., + *, + * @Controller, + * class FooController : RouterFunction<ServerResponse> {, + *, + * 		override fun route(req: ServerRequest) = route(req) {, + * 			html().apply {, + * 				GET("/user/{login}", this@FooController::findViewById), + * 			json().apply {, + * 				POST("/api/user/", this@FooController::create), + *, + * 		fun findAllView() = ..., + * 		fun findViewById(req: ServerRequest) = ..., + * 		fun findAll() = ..., + * 		fun create(req: ServerRequest) =, + * 	}, + * @see <a href="https://youtrack.jetbrains.com/issue/KT-15667">Kotlin issue about supporting ::foo for member functions</a>, +	fun pathExtension(extension: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction { f(it) }), +	}, +, +	fun pathExtension(predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction { f(it) }), +	}, +, +	fun queryParam(name: String, predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction { f(it) }), +	}, +, +	fun json(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.json(), HandlerFunction { f(it) }), +	}, +, +	fun html(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.html(), HandlerFunction { f(it) }), +	}, +, +	fun xml(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.xml(), HandlerFunction { f(it) }), +	}, +, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, + * ```kotlin, + * import org.springframework.web.reactive.function.server.RequestPredicates.*, + * ..., + *, + * @Controller, + * class FooController : RouterFunction<ServerResponse> {, + *, + * 		override fun route(req: ServerRequest) = route(req) {, + * 			html().apply {, + * 				GET("/user/{login}", this@FooController::findViewById), + * 			json().apply {, + * 				POST("/api/user/", this@FooController::create), + *, + * 		fun findAllView() = ..., + * 		fun findViewById(req: ServerRequest) = ..., + * 		fun findAll() = ..., + * 		fun create(req: ServerRequest) =, + * 	}, + * @see <a href="https://youtrack.jetbrains.com/issue/KT-15667">Kotlin issue about supporting ::foo for member functions</a>, +	fun pathExtension(extension: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction { f(it) }), +	}, +, +	fun pathExtension(predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction { f(it) }), +	}, +, +	fun queryParam(name: String, predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction { f(it) }), +	}, +, +	fun json(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.json(), HandlerFunction { f(it) }), +	}, +, +	fun html(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.html(), HandlerFunction { f(it) }), +	}, +, +	fun xml(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.xml(), HandlerFunction { f(it) }), +	}, +, +++ b/spring-webflux/src/test/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensionsTests.kt, +				POST("/api/foo/", this@FooController::handleFromClass), +				PUT("/api/foo/") { handleFromClass(req) }, +			html().apply {, +				GET("/page", this@FooController::handleFromClass), +			}, +, +		fun handleFromClass(req: ServerRequest) = ok().build(), +fun handle(req: ServerRequest) = ok().build()]