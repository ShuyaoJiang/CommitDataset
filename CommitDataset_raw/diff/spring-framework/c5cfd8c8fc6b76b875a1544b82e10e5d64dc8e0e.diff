[+++ b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtension.kt, +			vararg customizers: BeanDefinitionCustomizer, crossinline function: (GenericApplicationContext) -> T) {, +					registerBean(T::class.java, Supplier { function.invoke(this) }, *customizers), +			vararg customizers: BeanDefinitionCustomizer, crossinline function: (GenericApplicationContext) -> T) {, +					registerBean(name, T::class.java, Supplier { function.invoke(this) }, *customizers), +++ b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtension.kt, +			vararg customizers: BeanDefinitionCustomizer, crossinline function: (GenericApplicationContext) -> T) {, +					registerBean(T::class.java, Supplier { function.invoke(this) }, *customizers), +			vararg customizers: BeanDefinitionCustomizer, crossinline function: (GenericApplicationContext) -> T) {, +					registerBean(name, T::class.java, Supplier { function.invoke(this) }, *customizers), +++ b/spring-context/src/test/kotlin/org/springframework/context/support/GenericApplicationContextExtensionTests.kt, +		context.registerBean { BeanA() }, +		context.registerBean("a") { BeanA() }, +	@Test, +	fun registerBeanWithFunction() {, +		val context = GenericApplicationContext(), +		context.registerBean(BeanA::class), +		context.registerBean { BeanB(it.getBean(BeanA::class)) }, +		context.refresh(), +		assertNotNull(context.getBean(BeanA::class)), +		assertNotNull(context.getBean(BeanB::class)), +	}, +, +	@Test, +	fun registerBeanWithNameAndFunction() {, +		val context = GenericApplicationContext(), +		context.registerBean("a", BeanA::class), +		context.registerBean("b") { BeanB(it.getBean(BeanA::class)) }, +		context.refresh(), +		assertNotNull(context.getBean("a")), +		assertNotNull(context.getBean("b")), +	}, +, +	internal class BeanB(val a: BeanA), +]