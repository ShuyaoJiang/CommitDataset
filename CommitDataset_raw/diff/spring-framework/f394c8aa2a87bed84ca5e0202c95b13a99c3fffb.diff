[+++ b/spring-web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Abstract base for {@link ClientHttpRequest} that makes sure that headers, + * and body are not written multiple times., +	 * Assert that this request has not been {@linkplain #execute() executed} yet., +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Abstract base for {@link ClientHttpRequest} that makes sure that headers, + * and body are not written multiple times., +	 * Assert that this request has not been {@linkplain #execute() executed} yet., +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., + * {@link ClientHttpRequestFactory} implementation that uses standard JDK facilities., +public class SimpleClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {, +	 * Set if the underlying URLConnection can be set to 'output streaming' mode., +	 * Default is {@code true}., +	 * <p>When output streaming is enabled, authentication and redirection cannot be handled automatically., +	 * If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and, +	 * {@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never, +	 * be called., +	 * Set the task executor for this request factory. Setting this property is required, +	 * for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}., +, +	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an AsyncTaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., + * Abstract base for {@link ClientHttpRequest} that makes sure that headers, + * and body are not written multiple times., +	 * Assert that this request has not been {@linkplain #execute() executed} yet., +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2014 the original author or authors., + * {@link ClientHttpRequestFactory} implementation that uses standard JDK facilities., +public class SimpleClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {, +	 * Set if the underlying URLConnection can be set to 'output streaming' mode., +	 * Default is {@code true}., +	 * <p>When output streaming is enabled, authentication and redirection cannot be handled automatically., +	 * If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and, +	 * {@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never, +	 * be called., +	 * Set the task executor for this request factory. Setting this property is required, +	 * for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}., +, +	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an AsyncTaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java, + * Copyright 2002-2014 the original author or authors., + * {@link ClientHttpResponse} implementation that uses standard JDK facilities.]