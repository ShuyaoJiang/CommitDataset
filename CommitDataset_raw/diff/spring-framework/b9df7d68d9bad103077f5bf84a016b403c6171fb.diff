[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<Object, Boolean> advisedBeans = new ConcurrentHashMap<Object, Boolean>(64);, +	// using a ConcurrentHashMap as a Set, +	private final Map<String, Boolean> targetSourcedBeans = new ConcurrentHashMap<String, Boolean>(16);, +	// using a ConcurrentHashMap as a Set, +	private final Map<Object, Boolean> earlyProxyReferences = new ConcurrentHashMap<Object, Boolean>(16);, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>(16);, +		this.earlyProxyReferences.put(cacheKey, Boolean.TRUE);, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +			if (this.advisedBeans.containsKey(cacheKey)) {, +				this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.targetSourcedBeans.put(beanName, Boolean.TRUE);, +			if (!this.earlyProxyReferences.containsKey(cacheKey)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {, +			this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.advisedBeans.put(cacheKey, Boolean.TRUE);, +		this.advisedBeans.put(cacheKey, Boolean.FALSE);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<Object, Boolean> advisedBeans = new ConcurrentHashMap<Object, Boolean>(64);, +	// using a ConcurrentHashMap as a Set, +	private final Map<String, Boolean> targetSourcedBeans = new ConcurrentHashMap<String, Boolean>(16);, +	// using a ConcurrentHashMap as a Set, +	private final Map<Object, Boolean> earlyProxyReferences = new ConcurrentHashMap<Object, Boolean>(16);, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>(16);, +		this.earlyProxyReferences.put(cacheKey, Boolean.TRUE);, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +			if (this.advisedBeans.containsKey(cacheKey)) {, +				this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.targetSourcedBeans.put(beanName, Boolean.TRUE);, +			if (!this.earlyProxyReferences.containsKey(cacheKey)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {, +			this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.advisedBeans.put(cacheKey, Boolean.TRUE);, +		this.advisedBeans.put(cacheKey, Boolean.FALSE);, +++ b/spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java, + * Copyright 2002-2012 the original author or authors., +	private final Set<Object> targetSet = new HashSet<Object>();, +			synchronized (this.targetSet) {, +		}, +		synchronized (this.targetSet) {, +	}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<Object, Boolean> advisedBeans = new ConcurrentHashMap<Object, Boolean>(64);, +	// using a ConcurrentHashMap as a Set, +	private final Map<String, Boolean> targetSourcedBeans = new ConcurrentHashMap<String, Boolean>(16);, +	// using a ConcurrentHashMap as a Set, +	private final Map<Object, Boolean> earlyProxyReferences = new ConcurrentHashMap<Object, Boolean>(16);, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>(16);, +		this.earlyProxyReferences.put(cacheKey, Boolean.TRUE);, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +			if (this.advisedBeans.containsKey(cacheKey)) {, +				this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.targetSourcedBeans.put(beanName, Boolean.TRUE);, +			if (!this.earlyProxyReferences.containsKey(cacheKey)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {, +			this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.advisedBeans.put(cacheKey, Boolean.TRUE);, +		this.advisedBeans.put(cacheKey, Boolean.FALSE);, +++ b/spring-aop/src/main/java/org/springframework/aop/target/ThreadLocalTargetSource.java, + * Copyright 2002-2012 the original author or authors., +	private final Set<Object> targetSet = new HashSet<Object>();, +			synchronized (this.targetSet) {, +		}, +		synchronized (this.targetSet) {, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2012 the original author or authors., +	// using WeakHashMap as a Set, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<Object, Boolean> advisedBeans = new ConcurrentHashMap<Object, Boolean>(64);, +	// using a ConcurrentHashMap as a Set, +	private final Map<String, Boolean> targetSourcedBeans = new ConcurrentHashMap<String, Boolean>(16);, +	// using a ConcurrentHashMap as a Set, +	private final Map<Object, Boolean> earlyProxyReferences = new ConcurrentHashMap<Object, Boolean>(16);, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>(16);, +		this.earlyProxyReferences.put(cacheKey, Boolean.TRUE);, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +			if (this.advisedBeans.containsKey(cacheKey)) {, +				this.advisedBeans.put(cacheKey, Boolean.FALSE);, +			this.targetSourcedBeans.put(beanName, Boolean.TRUE);, +			if (!this.earlyProxyReferences.containsKey(cacheKey)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {]