[+++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +import org.w3c.dom.Document;, +	/** Logger available to subclasses */, +	private boolean processExternalEntities = false;, +, +	 * Returns the configured value for whether XML external entities are allowed., +	 * @see #createXmlReader(), +	/**, +	 * Build a new {@link Document} from this marshaller's {@link DocumentBuilderFactory}., +	 * @see #createDocumentBuilderFactory(), +	 * @see #createDocumentBuilder(DocumentBuilderFactory), +	 */, +	protected Document buildDocument() {, +		try {, +			synchronized (this.documentBuilderFactoryMonitor) {, +				if (this.documentBuilderFactory == null) {, +					this.documentBuilderFactory = createDocumentBuilderFactory();, +				}, +			}, +			DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);, +			return documentBuilder.newDocument();, +		}, +		catch (ParserConfigurationException ex) {, +			throw new UnmarshallingFailureException(, +					"Could not create document placeholder for DOMSource: " + ex.getMessage(), ex);, +		}, +	}, +, +	/**, +	 * Create a {@code DocumentBuilder} that this marshaller will use for creating, +	 * DOM documents when passed an empty {@code DOMSource}., +	 * <p>The resulting {@code DocumentBuilderFactory} is cached, so this method, +	 * will only be called once., +	 * @return the DocumentBuilderFactory, +	 * @throws ParserConfigurationException if thrown by JAXP methods, +	 */, +	protected DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {, +		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();, +		factory.setValidating(false);, +		factory.setNamespaceAware(true);, +		return factory;, +	}, +, +	/**, +	 * Create a {@code DocumentBuilder} that this marshaller will use for creating, +	 * DOM documents when passed an empty {@code DOMSource}., +	 * <p>Can be overridden in subclasses, adding further initialization of the builder., +	 * @param factory the {@code DocumentBuilderFactory} that the DocumentBuilder should be created with, +	 * @return the {@code DocumentBuilder}, +	 * @throws ParserConfigurationException if thrown by JAXP methods, +	 */, +	protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory), +			throws ParserConfigurationException {, +, +		return factory.newDocumentBuilder();, +	}, +, +	/**, +	 * Create an {@code XMLReader} that this marshaller will when passed an empty {@code SAXSource}., +	 * @return the XMLReader, +	 * @throws SAXException if thrown by JAXP methods, +	 */, +	protected XMLReader createXmlReader() throws SAXException {, +		XMLReader xmlReader = XMLReaderFactory.createXMLReader();, +		xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", isProcessExternalEntities());, +		return xmlReader;, +	}, +, +	/**, +	 * Determine the default encoding to use for marshalling or unmarshalling from, +	 * a byte stream, or {@code null} if none., +	 */, +	protected String getDefaultEncoding() {, +		return null;, +	}, +, +, +	// Marshalling, +			domResult.setNode(buildDocument());, +	 * Unmarshals the given provided {@code javax.xml.transform.Source} into an object graph., +	 * <p>This implementation inspects the given result, and calls {@code unmarshalDomSource},, +	 * {@code unmarshalSaxSource}, or {@code unmarshalStreamSource}., +	 * @param source the source to marshal from, +	 * @return the object graph, +	 * @throws IOException if an I/O Exception occurs, +	 * @throws XmlMappingException if the given source cannot be mapped to an object, +	 * @throws IllegalArgumentException if {@code source} is neither a {@code DOMSource},, +	 * a {@code SAXSource}, nor a {@code StreamSource}, +	 * @see #unmarshalDomSource(javax.xml.transform.dom.DOMSource), +	 * @see #unmarshalSaxSource(javax.xml.transform.sax.SAXSource), +	 * @see #unmarshalStreamSource(javax.xml.transform.stream.StreamSource), +	 */, +	@Override, +	public final Object unmarshal(Source source) throws IOException, XmlMappingException {, +		if (source instanceof DOMSource) {, +			return unmarshalDomSource((DOMSource) source);, +		}, +		else if (StaxUtils.isStaxSource(source)) {, +			return unmarshalStaxSource(source);, +		}]