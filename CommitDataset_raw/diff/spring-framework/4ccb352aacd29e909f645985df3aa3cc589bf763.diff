[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>XML properties files are also supported: .g. "WEB-INF/messages" will find, +	 * and load "WEB-INF/messages.xml", "WEB-INF/messages_en.xml", etc as well., +	 * <p>XML properties files are also supported: .g. "WEB-INF/messages" will find, +	 * and load "WEB-INF/messages.xml", "WEB-INF/messages_en.xml", etc as well., +	 * <p>The associated resource bundles will be checked sequentially when resolving, +	 * a message code. Note that message definitions in a <i>previous</i> resource, +	 * bundle will override ones in a later bundle, due to the sequential lookup., +	 * <p>Follows the rules defined by {@link java.util.Locale#toString()}., +		temp.append('_');, +			temp.append(language);, +		temp.append('_');, +			temp.append(country);, +		if (variant.length() > 0 && (language.length() > 0 || country.length() > 0)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>XML properties files are also supported: .g. "WEB-INF/messages" will find, +	 * and load "WEB-INF/messages.xml", "WEB-INF/messages_en.xml", etc as well., +	 * <p>XML properties files are also supported: .g. "WEB-INF/messages" will find, +	 * and load "WEB-INF/messages.xml", "WEB-INF/messages_en.xml", etc as well., +	 * <p>The associated resource bundles will be checked sequentially when resolving, +	 * a message code. Note that message definitions in a <i>previous</i> resource, +	 * bundle will override ones in a later bundle, due to the sequential lookup., +	 * <p>Follows the rules defined by {@link java.util.Locale#toString()}., +		temp.append('_');, +			temp.append(language);, +		temp.append('_');, +			temp.append(country);, +		if (variant.length() > 0 && (language.length() > 0 || country.length() > 0)) {, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ResourceBundleMessageSourceTests.java, + * Copyright 2002-2009 the original author or authors., +import java.util.List;, +	public void testReloadableResourceBundleMessageSourceFileNameCalculation() {, +		ReloadableResourceBundleMessageSource ms = new ReloadableResourceBundleMessageSource();, +, +		List<String> filenames = ms.calculateFilenamesForLocale("messages", Locale.ENGLISH);, +		assertEquals(1, filenames.size());, +		assertEquals("messages_en", filenames.get(0));, +, +		filenames = ms.calculateFilenamesForLocale("messages", Locale.UK);, +		assertEquals(2, filenames.size());, +		assertEquals("messages_en", filenames.get(1));, +		assertEquals("messages_en_GB", filenames.get(0));, +, +		filenames = ms.calculateFilenamesForLocale("messages", new Locale("en", "GB", "POSIX"));, +		assertEquals(3, filenames.size());, +		assertEquals("messages_en", filenames.get(2));, +		assertEquals("messages_en_GB", filenames.get(1));, +		assertEquals("messages_en_GB_POSIX", filenames.get(0));, +, +		filenames = ms.calculateFilenamesForLocale("messages", new Locale("en", "", "POSIX"));, +		assertEquals(2, filenames.size());, +		assertEquals("messages_en", filenames.get(1));, +		assertEquals("messages_en__POSIX", filenames.get(0));, +, +		filenames = ms.calculateFilenamesForLocale("messages", new Locale("", "UK", "POSIX"));, +		assertEquals(2, filenames.size());, +		assertEquals("messages__UK", filenames.get(1));, +		assertEquals("messages__UK_POSIX", filenames.get(0));, +, +		filenames = ms.calculateFilenamesForLocale("messages", new Locale("", "", "POSIX"));, +		assertEquals(0, filenames.size());, +	}, +]