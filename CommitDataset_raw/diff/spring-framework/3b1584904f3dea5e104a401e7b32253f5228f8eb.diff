[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, +import org.springframework.lang.UsesJava7;, + * The default implementation of Spring's {@link SqlRowSet} interface, wrapping a, + * {@link java.sql.ResultSet}, catching any {@link SQLException}s and translating, + * them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>The passed-in ResultSet should already be disconnected if the SqlRowSet is supposed, +	@UsesJava7, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, +import org.springframework.lang.UsesJava7;, + * The default implementation of Spring's {@link SqlRowSet} interface, wrapping a, + * {@link java.sql.ResultSet}, catching any {@link SQLException}s and translating, + * them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>The passed-in ResultSet should already be disconnected if the SqlRowSet is supposed, +	@UsesJava7, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.java, + * Copyright 2002-2014 the original author or authors., + * The default implementation of Spring's {@link SqlRowSetMetaData} interface, wrapping, + * a {@link java.sql.ResultSetMetaData} instance, catching any {@link SQLException}s, + * and translating them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>Used by {@link ResultSetWrappingSqlRowSet}., + * @see ResultSetWrappingSqlRowSet#getMetaData(), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, +import org.springframework.lang.UsesJava7;, + * The default implementation of Spring's {@link SqlRowSet} interface, wrapping a, + * {@link java.sql.ResultSet}, catching any {@link SQLException}s and translating, + * them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>The passed-in ResultSet should already be disconnected if the SqlRowSet is supposed, +	@UsesJava7, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.java, + * Copyright 2002-2014 the original author or authors., + * The default implementation of Spring's {@link SqlRowSetMetaData} interface, wrapping, + * a {@link java.sql.ResultSetMetaData} instance, catching any {@link SQLException}s, + * and translating them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>Used by {@link ResultSetWrappingSqlRowSet}., + * @see ResultSetWrappingSqlRowSet#getMetaData(), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/SqlRowSet.java, + * <p>The main difference to the standard JDBC RowSet is that a, + * {@link java.sql.SQLException} is never thrown here. This allows a, + * SqlRowSet to be used without having to deal with checked exceptions., + * A SqlRowSet will throw Spring's {@link InvalidResultSetAccessException}, + * <p>Note: This interface extends the {@code java.io.Serializable} marker, + * interface. Implementations, which typically hold disconnected data,, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, +import org.springframework.lang.UsesJava7;, + * The default implementation of Spring's {@link SqlRowSet} interface, wrapping a, + * {@link java.sql.ResultSet}, catching any {@link SQLException}s and translating, + * them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>The passed-in ResultSet should already be disconnected if the SqlRowSet is supposed, +	@UsesJava7, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.java, + * Copyright 2002-2014 the original author or authors., + * The default implementation of Spring's {@link SqlRowSetMetaData} interface, wrapping, + * a {@link java.sql.ResultSetMetaData} instance, catching any {@link SQLException}s, + * and translating them to a corresponding Spring {@link InvalidResultSetAccessException}., + * <p>Used by {@link ResultSetWrappingSqlRowSet}., + * @see ResultSetWrappingSqlRowSet#getMetaData(), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/SqlRowSet.java, + * <p>The main difference to the standard JDBC RowSet is that a, + * {@link java.sql.SQLException} is never thrown here. This allows a, + * SqlRowSet to be used without having to deal with checked exceptions., + * A SqlRowSet will throw Spring's {@link InvalidResultSetAccessException}, + * <p>Note: This interface extends the {@code java.io.Serializable} marker, + * interface. Implementations, which typically hold disconnected data,, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/SqlRowSetMetaData.java, + * Copyright 2002-2014 the original author or authors., + * Metadata interface for Spring's {@link SqlRowSet}, analogous to JDBC's, + * {@link java.sql.ResultSetMetaData}., + * <p>The main difference to the standard JDBC ResultSetMetaData is that a, + * {@link java.sql.SQLException} is never thrown here. This allows, + * SqlRowSetMetaData to be used without having to deal with checked exceptions., + * SqlRowSetMetaData will throw Spring's {@link InvalidResultSetAccessException}, + * @author Juergen Hoeller, + * @see SqlRowSet#getMetaData(), +	 * Retrieve the catalog name of the table that served as the source for the, +	 * specified column., +	 * Retrieve the fully qualified class that the specified column will be mapped to., +	 * Retrieve the number of columns in the RowSet., +	 * Retrieve the maximum width of the designated column., +	 * Retrieve the DBMS-specific type name for the indicated column., +	 * Retrieve the precision for the indicated column., +	 * Retrieve the scale of the indicated column., +	 * Retrieve the schema name of the table that served as the source for the, +	 * specified column., +	 * Retrieve the name of the table that served as the source for the, +	 * specified column., +	 * Indicate whether the case of the designated column is significant., +	 * Indicate whether the designated column contains a currency value., +	 * Indicate whether the designated column contains a signed number.]