[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/DefaultMockMvcBuilderTests.java, +, +import static org.junit.Assert.*;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/DefaultMockMvcBuilderTests.java, +, +import static org.junit.Assert.*;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java, +import java.io.IOException;, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.web.filter.OncePerRequestFilter;, + * Tests for {@link StandaloneMockMvcBuilder}, + *, + * @author Rossen, + * @author Rob Winch, + * @author Sebastien Deleuze, +	@Test // SPR-10825, +	@Test(expected = IllegalArgumentException.class), +	public void addFiltersFiltersNull() {, +		StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController());, +		builder.addFilters((Filter[]) null);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void addFiltersFiltersContainsNull() {, +		StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController());, +		builder.addFilters(new ContinueFilter(), (Filter) null);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void addFilterPatternsNull() {, +		StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController());, +		builder.addFilter(new ContinueFilter(), (String[]) null);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void addFilterPatternContainsNull() {, +		StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController());, +		builder.addFilter(new ContinueFilter(), (String) null);, +	}, +, +, +	@Controller, +	private static class PersonController {, +		@RequestMapping(value="/forward"), +		public String forward() {, +			return "forward:/persons";, +		}, +	}, +, +	private class ContinueFilter extends OncePerRequestFilter {, +		@Override, +		protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,, +				FilterChain filterChain) throws ServletException, IOException {, +			filterChain.doFilter(request, response);, +		}, +	}, +]