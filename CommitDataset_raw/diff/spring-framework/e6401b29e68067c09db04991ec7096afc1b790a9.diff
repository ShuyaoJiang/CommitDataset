[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final WiretapConnector wiretapConnector;, +		this.wiretapConnector = new WiretapConnector(connector);, +		this.webClient = webClientBuilder.clientConnector(this.wiretapConnector).build();, +		this.wiretapConnector = webTestClient.wiretapConnector;, +			this.headerSpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);, +			ClientResponse clientResponse = mono.block(getTimeout());, +			ExchangeResult exchangeResult = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(exchangeResult, clientResponse);, +		public UndecodedExchangeResult(ExchangeResult result, ClientResponse response) {, +			super(result);, +			return new FluxExchangeResult<>(this, body);, +		public DefaultResponseSpec(ExchangeResult result, ClientResponse response) {, +			this.result = new UndecodedExchangeResult(result, response);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final WiretapConnector wiretapConnector;, +		this.wiretapConnector = new WiretapConnector(connector);, +		this.webClient = webClientBuilder.clientConnector(this.wiretapConnector).build();, +		this.wiretapConnector = webTestClient.wiretapConnector;, +			this.headerSpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);, +			ClientResponse clientResponse = mono.block(getTimeout());, +			ExchangeResult exchangeResult = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(exchangeResult, clientResponse);, +		public UndecodedExchangeResult(ExchangeResult result, ClientResponse response) {, +			super(result);, +			return new FluxExchangeResult<>(this, body);, +		public DefaultResponseSpec(ExchangeResult result, ClientResponse response) {, +			this.result = new UndecodedExchangeResult(result, response);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/EntityExchangeResult.java, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	private final WiretapConnector wiretapConnector;, +		this.wiretapConnector = new WiretapConnector(connector);, +		this.webClient = webClientBuilder.clientConnector(this.wiretapConnector).build();, +		this.wiretapConnector = webTestClient.wiretapConnector;, +			this.headerSpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);, +			ClientResponse clientResponse = mono.block(getTimeout());, +			ExchangeResult exchangeResult = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(exchangeResult, clientResponse);, +		public UndecodedExchangeResult(ExchangeResult result, ClientResponse response) {, +			super(result);, +			return new FluxExchangeResult<>(this, body);, +		public DefaultResponseSpec(ExchangeResult result, ClientResponse response) {, +			this.result = new UndecodedExchangeResult(result, response);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/EntityExchangeResult.java, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.util.Arrays;, +import java.util.List;, +import reactor.core.publisher.MonoProcessor;, +, +import org.springframework.http.MediaType;, + * <p>When an {@code ExchangeResult} is first created it has only the status and, + * headers of the response available. When the response body is extracted, the, + * {@code ExchangeResult} is re-created as either {@link EntityExchangeResult}, + * or {@link FluxExchangeResult} that further expose extracted entities., + * <p>Raw request and response content may also be accessed once complete via, + * {@link #getRequestContent()} or {@link #getResponseContent()}., + *, +	private static final List<MediaType> PRINTABLE_MEDIA_TYPES = Arrays.asList(, +			MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.parseMediaType("text/*"),, +			MediaType.APPLICATION_FORM_URLENCODED);, +	private final WiretapClientHttpRequest request;, +	private final WiretapClientHttpResponse response;, +	 * Constructor used when the {@code ClientHttpResponse} becomes available., +	protected ExchangeResult(WiretapClientHttpRequest request, WiretapClientHttpResponse response) {, +		this.request = request;, +		this.response = response;, +		this.request = other.request;, +		this.response = other.response;, +		return this.request.getMethod();, +		return this.request.getURI();, +		return this.request.getHeaders();, +	}, +, +	/**, +	 * Return a "promise" for the raw request body content once completed., +	 */, +	public MonoProcessor<byte[]> getRequestContent() {, +		return this.request.getBodyContent();, +		return this.response.getStatusCode();, +		return this.response.getHeaders();, +		return this.getResponseCookies();, +	}, +, +	/**, +	 * Return a "promise" for the raw response body content once completed., +	 */, +	public MonoProcessor<byte[]> getResponseContent() {, +		return this.response.getBodyContent();, +		return "\n" +, +				"> " + getMethod() + " " + getUrl() + "\n" +, +				"> " + formatHeaders(getRequestHeaders()) + "\n" +, +				formatContent(getRequestHeaders().getContentType(), getRequestContent()) + "\n" +, +				"\n" +, +				"> " + getStatus() + " " + getStatusReason() + "\n" +, +				"> " + formatHeaders(getResponseHeaders()) + "\n" +, +				"\n" +, +				formatContent(getResponseHeaders().getContentType(), getResponseContent()) + "\n\n";, +		if (getStatus() != null && getStatus().getReasonPhrase() != null) {]