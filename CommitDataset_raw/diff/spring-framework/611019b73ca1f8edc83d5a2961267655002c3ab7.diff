[+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +, +, +		boolean release = true;, +, +		try {, +			release = false;, +			return Flux.error(new EncodingException(, +					"Could not marshal " + value.getClass() + " to XML", ex));, +		finally {, +			if (release) {, +				DataBufferUtils.release(buffer);, +			}, +		}, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +, +, +		boolean release = true;, +, +		try {, +			release = false;, +			return Flux.error(new EncodingException(, +					"Could not marshal " + value.getClass() + " to XML", ex));, +		finally {, +			if (release) {, +				DataBufferUtils.release(buffer);, +			}, +		}, +++ b/spring-web/src/test/java/org/springframework/http/codec/xml/Jaxb2XmlEncoderTests.java, +import javax.xml.bind.annotation.XmlElement;, +import javax.xml.bind.annotation.XmlElements;, +import javax.xml.bind.annotation.XmlRootElement;, +import static org.junit.Assert.*;, +	public void encodeError() {, +		Flux<Pojo> source = Flux.error(RuntimeException::new);, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory,, +				ResolvableType.forClass(Pojo.class),, +				MediaType.APPLICATION_XML, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.expectError(RuntimeException.class), +				.verify();, +	}, +, +	@Test]