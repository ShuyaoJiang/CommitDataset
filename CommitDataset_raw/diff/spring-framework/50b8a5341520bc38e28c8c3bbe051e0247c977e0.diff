[+++ b/src/asciidoc/index.adoc, +The Spring Framework was first released in 2004; since then there have been significant, +major revisions: Spring 2.0 provided XML namespaces and AspectJ support; Spring 2.5, +embraced annotation-driven configuration; Spring 3.0 introduced a strong Java 5+ foundation, +across the framework codebase, and features such as the Java-based `@Configuration` model., +opportunity of a major release to remove many deprecated classes and methods., +, +All deprecated packages, and many deprecated classes and methods have been removed with, +version 4.0. If you are upgrading from a previous release of Spring, you should ensure, +that you have fixed any deprecated calls that you were making to outdated APIs., +Note that optional third-party dependencies have been raised to a 2010/2011 minimum, +(i.e. Spring 4 generally only supports versions released in late 2010 or later now):, +notably, Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-Time 2.0+., +As an exception to the rule, Spring 4 requires the recent Hibernate Validator 4.3+,, +and support for Jackson has been focused on 2.0+ now (with Jackson 1.8/1.9 support, +retained for the time being where Spring 3.2 had it; now just in deprecated form)., +, +=== Java 8 (as well as 6 and 7), +Spring remains compatible with older versions of Java and the JDK: Concretely, Java SE 6, +(specifically, a minimum level equivalent to JDK 6 update 10, as released in late 2008), +and above are still fully supported. However, for newly started development projects, +based on Spring 4, we recommend the use of Java 7 or 8., +, +Note that the Java 8 bytecode level (-target 1.8, as required by -source 1.8) is only, +fully supported as of Spring Framework 4.0. In particular, Spring 3.2 based applications, +need to be compiled with a maximum of Java 7 as the target, even if they happen to be, +deployed onto a Java 8 runtime. Please upgrade to Spring 4 for Java 8 based applications., +=== Java EE 6 and 7, +Java EE version 6 or above is now considered the baseline for Spring Framework 4, with, +remain compatible with Google App Engine and older application servers, it is possible, +to deploy a Spring application into a Servlet 2.5 environment; however, Servlet 3.0+, +is recommended when at all possible., +Note: If you are a WebSphere 7 user, be sure install the JPA 2.0 feature pack. On, +WebLogic 10.3.4 or higher, install the JPA 2.0 patch that comes with it. This turns, +both of those server generations into Spring 4 compatible deployment environments., +, +On a more forward-looking note, Spring Framework 4.0 supports the Java EE 7 level of, +applicable specifications now: in particular, JMS 2.0, JTA 1.2, JPA 2.1, Bean Validation, +1.1, and JSR-236 Concurrency Utilities. As usual, this support focuses on individual, +use of those specifications, e.g. on Tomcat or in standalone environments. However,, +it works equally well when a Spring application is being deployed to a Java EE 7 server., +, +Note that Hibernate 4.3 is a JPA 2.1 provider and therefore only supported as of, +Spring Framework 4.0. The same applies to Hibernate Validator 5.0 as a Bean Validation, +1.1 provider. Neither of the two are officially supported with Spring Framework 3.2., +=== Groovy Bean Definition DSL, +a more concise syntax. Using Groovy also allows you to easily embed bean definitions, +directly in your bootstrap code. For example:, +, +, +=== Core Container Improvements, +There have been several general improvements to the core container:, +, +* Spring now treats <<beans-generics-as-qualifiers,__generic types__ as a form of, +  __qualifier__>> when injecting Beans. For example, if you are using a Spring Data, +  `Repository` you can now easily inject a specific implementation:, +  `@Autowired Repository<Customer> customerRepository`., +* If you use Spring's meta-annotation support, you can now develop custom annotations that, +  <<beans-meta-annotations,expose specific attributes from the source annotation>>., +* Beans can now be `Ordered` when they are <<beans-autowired-annotation,autowired into, +  lists and arrays>>. Both the `@Ordered` annotation and `Ordered` interface are, +  supported., +* The `@Lazy` annotation can now be used on injection points, as well as `@Bean`, +  definitions., +* The <<beans-java-bean-description,`@Description` annotation has been added>> for, +  developers using Java-based configuration., +* A generalized model for <<beans-java-conditional,conditionally filtering beans>> has, +  been added via the `@Conditional` annotation. This is similar to `@Profile` but allows, +  for user-defined strategies to be developed., +* <<aop-pfb-proxy-types,CGLIB-based proxy classes>> no longer require a default, +  constructor. Support is provided via the http://code.google.com/p/objenesis/[objenesis], +  library which is repackaged __inline__ and distributed as part of the Spring Framework., +  With this strategy, no constructor at all is being invoked for proxy instances anymore., +* There is managed time zone support across the framework now, e.g. on `LocaleContext`., +, +, +, +, +=== General Web Improvements, +Deployment to Servlet 2.5 servers remains an option, but Spring Framework 4.0 is now, +focused primarily on Servlet 3.0+ environments. If you are using the, +<<spring-mvc-test-framework,Spring MVC Test Framework>> you, +will need to ensure that a Servlet 3.0 compatible JAR is in your __test classpath__., +, +In addition to the WebSocket support mentioned earlier, the following general improvements, +have been made to Spring's Web modules:, +, +* You can use <<mvc-ann-restcontroller,the new `@RestController` annotation>> with Spring, +  MVC applications, removing the need to add `@ResponseBody` to each of your, +  `@RequestMapping` methods., +* The `AsyncRestTemplate` class has been added, <<rest-async-resttemplate,allowing, +  non-blocking asynchronous support>> when developing REST clients., +* Spring now offers <<mvc-timezone,comprehensive timezone support>> when developing, +  Spring MVC applications., +, +, +, +, +=== WebSocket, SockJS, and STOMP Messaging, +A new `spring-websocket` module provides comprehensive support for WebSocket-based,]