[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +	private BeanFactory beanFactory;, +		this.beanFactory = beanFactory;, +		if (this.beanFactory instanceof ListableBeanFactory) {, +			Map<String, SchedulingConfigurer> configurers =, +					((ListableBeanFactory) this.beanFactory).getBeansOfType(SchedulingConfigurer.class);, +			try {, +				// Search for TaskScheduler bean..., +				this.registrar.setScheduler(this.beanFactory.getBean(TaskScheduler.class));, +			catch (NoUniqueBeanDefinitionException ex) {, +				throw new IllegalStateException("More than one TaskScheduler exists within the context. " +, +						"Remove all but one of the beans; or implement the SchedulingConfigurer interface and call " +, +						"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback.", ex);, +			catch (NoSuchBeanDefinitionException ex) {, +				logger.debug("Could not find default TaskScheduler bean", ex);, +				// Search for ScheduledExecutorService bean next..., +				try {, +					this.registrar.setScheduler(this.beanFactory.getBean(ScheduledExecutorService.class));, +				}, +				catch (NoUniqueBeanDefinitionException ex2) {, +					throw new IllegalStateException("More than one ScheduledExecutorService exists within the context. " +, +							"Remove all but one of the beans; or implement the SchedulingConfigurer interface and call " +, +							"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback.", ex);, +				}, +				catch (NoSuchBeanDefinitionException ex2) {, +					logger.debug("Could not find default ScheduledExecutorService bean", ex);, +					// Giving up -> falling back to default scheduler within the registrar..., +				}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +	private BeanFactory beanFactory;, +		this.beanFactory = beanFactory;, +		if (this.beanFactory instanceof ListableBeanFactory) {, +			Map<String, SchedulingConfigurer> configurers =, +					((ListableBeanFactory) this.beanFactory).getBeansOfType(SchedulingConfigurer.class);, +			try {, +				// Search for TaskScheduler bean..., +				this.registrar.setScheduler(this.beanFactory.getBean(TaskScheduler.class));, +			catch (NoUniqueBeanDefinitionException ex) {, +				throw new IllegalStateException("More than one TaskScheduler exists within the context. " +, +						"Remove all but one of the beans; or implement the SchedulingConfigurer interface and call " +, +						"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback.", ex);, +			catch (NoSuchBeanDefinitionException ex) {, +				logger.debug("Could not find default TaskScheduler bean", ex);, +				// Search for ScheduledExecutorService bean next..., +				try {, +					this.registrar.setScheduler(this.beanFactory.getBean(ScheduledExecutorService.class));, +				}, +				catch (NoUniqueBeanDefinitionException ex2) {, +					throw new IllegalStateException("More than one ScheduledExecutorService exists within the context. " +, +							"Remove all but one of the beans; or implement the SchedulingConfigurer interface and call " +, +							"ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback.", ex);, +				}, +				catch (NoSuchBeanDefinitionException ex2) {, +					logger.debug("Could not find default ScheduledExecutorService bean", ex);, +					// Giving up -> falling back to default scheduler within the registrar..., +				}, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ContextLifecycleScheduledTaskRegistrar.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.beans.factory.SmartInitializingSingleton;, + * {@link ScheduledTaskRegistrar} subclass which redirects the actual scheduling, + * of tasks to the {@link #afterSingletonsInstantiated()} callback (as of 4.1.2)., +public class ContextLifecycleScheduledTaskRegistrar extends ScheduledTaskRegistrar implements SmartInitializingSingleton {, +		// no-op, +	public void afterSingletonsInstantiated() {]