[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * @return the status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the (potentially non-standard) status code of this response., +	 * @return the status as an integer, +	 * @since 5.1, +	 * @see #statusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int rawStatusCode();, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * @return the status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the (potentially non-standard) status code of this response., +	 * @return the status as an integer, +	 * @since 5.1, +	 * @see #statusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int rawStatusCode();, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +	public int rawStatusCode() {, +		return this.response.getRawStatusCode();, +	}, +, +	@Override, +		int status = rawStatusCode();, +				.map(body -> createEntity(body, headers, status)), +						() -> Mono.just(createEntity(headers, status))));, +		int status = rawStatusCode();, +				.map(body -> createEntity(body, headers, status));, +	}, +, +	private <T> ResponseEntity<T> createEntity(HttpHeaders headers, int status) {, +		HttpStatus resolvedStatus = HttpStatus.resolve(status);, +		return resolvedStatus != null, +				? new ResponseEntity<>(headers, resolvedStatus), +				: ResponseEntity.status(status).headers(headers).build();, +	}, +, +	private <T> ResponseEntity<T> createEntity(T body, HttpHeaders headers, int status) {, +		HttpStatus resolvedStatus = HttpStatus.resolve(status);, +		return resolvedStatus != null, +				? new ResponseEntity<>(body, headers, resolvedStatus), +				: ResponseEntity.status(status).headers(headers).body(body);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * @return the status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the (potentially non-standard) status code of this response., +	 * @return the status as an integer, +	 * @since 5.1, +	 * @see #statusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int rawStatusCode();, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +	public int rawStatusCode() {, +		return this.response.getRawStatusCode();, +	}, +, +	@Override, +		int status = rawStatusCode();, +				.map(body -> createEntity(body, headers, status)), +						() -> Mono.just(createEntity(headers, status))));, +		int status = rawStatusCode();, +				.map(body -> createEntity(body, headers, status));, +	}, +, +	private <T> ResponseEntity<T> createEntity(HttpHeaders headers, int status) {, +		HttpStatus resolvedStatus = HttpStatus.resolve(status);, +		return resolvedStatus != null, +				? new ResponseEntity<>(headers, resolvedStatus), +				: ResponseEntity.status(status).headers(headers).build();, +	}, +, +	private <T> ResponseEntity<T> createEntity(T body, HttpHeaders headers, int status) {, +		HttpStatus resolvedStatus = HttpStatus.resolve(status);, +		return resolvedStatus != null, +				? new ResponseEntity<>(body, headers, resolvedStatus), +				: ResponseEntity.status(status).headers(headers).body(body);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, + * @author Brian Clozel, +		private final List<StatusHandler> statusHandlers = new ArrayList<>(1);, +			if (HttpStatus.resolve(response.rawStatusCode()) != null) {, +			else {, +				return errorFunction.apply(createResponseException(response));, +			}, +		}, +						if (HttpStatus.resolve(response.rawStatusCode()) != null) {, +							String msg = String.format("ClientResponse has erroneous status code: %d %s",, +									response.statusCode().value(), response.statusCode().getReasonPhrase());]