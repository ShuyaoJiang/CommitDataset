[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestBody.java, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Whether body content is required., +	 * <p>Default is <code>true</code>, leading to an exception thrown in case, +	 * there is no body content. Switch this to <code>false</code> if you prefer, +	 * <code>null</value> to be passed when the body content is <code>null</code>., +	 */, +	boolean required() default true;, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestBody.java, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Whether body content is required., +	 * <p>Default is <code>true</code>, leading to an exception thrown in case, +	 * there is no body content. Switch this to <code>false</code> if you prefer, +	 * <code>null</value> to be passed when the body content is <code>null</code>., +	 */, +	boolean required() default true;, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.web.HttpMediaTypeNotSupportedException;, +	/**, +	 * {@inheritDoc}, +	 * @throws MethodArgumentNotValidException if validation fails, +	 * @throws HttpMessageNotReadableException if {@link RequestBody#required()}, +	 * 	is {@code true} and there is no body content or if there is no suitable, +	 * 	converter to read the content with., +	 */, +		validate(parameter, webRequest, binderFactory, arg);, +		return arg;, +	}, +, +	private void validate(MethodParameter parameter, NativeWebRequest webRequest,, +			WebDataBinderFactory binderFactory, Object arg) throws Exception, MethodArgumentNotValidException {, +, +		if (arg == null) {, +			return;, +		}, +			if (!annot.annotationType().getSimpleName().startsWith("Valid")) {, +				continue;, +			}, +, +	@Override, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Class<T> paramType) throws IOException, HttpMediaTypeNotSupportedException {, +, +		if (inputMessage.getBody() != null) {, +			return super.readWithMessageConverters(inputMessage, methodParam, paramType);, +		}, +, +		RequestBody annot = methodParam.getParameterAnnotation(RequestBody.class);, +		if (!annot.required()) {, +			return null;, +		}, +		throw new HttpMessageNotReadableException("Required request body content is missing: " + methodParam.toString());, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestBody.java, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Whether body content is required., +	 * <p>Default is <code>true</code>, leading to an exception thrown in case, +	 * there is no body content. Switch this to <code>false</code> if you prefer, +	 * <code>null</value> to be passed when the body content is <code>null</code>., +	 */, +	boolean required() default true;, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.web.HttpMediaTypeNotSupportedException;, +	/**, +	 * {@inheritDoc}, +	 * @throws MethodArgumentNotValidException if validation fails, +	 * @throws HttpMessageNotReadableException if {@link RequestBody#required()}, +	 * 	is {@code true} and there is no body content or if there is no suitable, +	 * 	converter to read the content with., +	 */, +		validate(parameter, webRequest, binderFactory, arg);, +		return arg;, +	}, +, +	private void validate(MethodParameter parameter, NativeWebRequest webRequest,, +			WebDataBinderFactory binderFactory, Object arg) throws Exception, MethodArgumentNotValidException {, +, +		if (arg == null) {, +			return;, +		}, +			if (!annot.annotationType().getSimpleName().startsWith("Valid")) {, +				continue;, +			}, +, +	@Override, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Class<T> paramType) throws IOException, HttpMediaTypeNotSupportedException {, +, +		if (inputMessage.getBody() != null) {]