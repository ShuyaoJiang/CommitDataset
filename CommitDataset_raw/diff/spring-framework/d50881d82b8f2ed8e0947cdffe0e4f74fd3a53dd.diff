[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, elementType);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, elementType);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/beans/GenericBean.java, + * Copyright 2002-2010 the original author or authors., +	private Set<ITestBean> testBeanSet;, +, +	public Set<ITestBean> getTestBeanSet() {, +		return testBeanSet;, +	}, +, +	public void setTestBeanSet(Set<ITestBean> testBeanSet) {, +		this.testBeanSet = testBeanSet;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, elementType);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/beans/GenericBean.java, + * Copyright 2002-2010 the original author or authors., +	private Set<ITestBean> testBeanSet;, +, +	public Set<ITestBean> getTestBeanSet() {, +		return testBeanSet;, +	}, +, +	public void setTestBeanSet(Set<ITestBean> testBeanSet) {, +		this.testBeanSet = testBeanSet;, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.beans.GenericBean;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.format.support.FormattingConversionServiceFactoryBean;, +import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;, +	public void typeNestedSetBinding() throws Exception {, +		servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(NestedSetController.class));, +				RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);, +				csDef.getPropertyValues().add("converters", new TestBeanConverter());, +				RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);, +				wbiDef.getPropertyValues().add("conversionService", csDef);, +				RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef);, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do");, +		request.addParameter("testBeanSet", new String[] {"1", "2"});, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("[1, 2]-org.springframework.beans.TestBean", response.getContentAsString());, +	}, +, +	@Test, +, +	public static class NestedSetController {, +, +		@RequestMapping("/myPath.do"), +		public void myHandle(GenericBean gb, HttpServletResponse response) throws Exception {, +			response.getWriter().write(gb.getTestBeanSet().toString() + "-" +, +					gb.getTestBeanSet().iterator().next().getClass().getName());, +		}, +	}, +, +	public static class TestBeanConverter implements Converter<String, ITestBean> {, +, +		public ITestBean convert(String source) {, +			return new TestBean(source);, +		}, +	}, +, +	@Controller]