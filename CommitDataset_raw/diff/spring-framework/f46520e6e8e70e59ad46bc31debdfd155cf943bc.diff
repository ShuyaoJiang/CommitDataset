[+++ b/build.gradle, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), +++ b/build.gradle, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +import org.springframework.http.codec.json.Jackson2SmileDecoder;, +import org.springframework.http.codec.json.Jackson2SmileEncoder;, +	private static final boolean jackson2SmilePresent =, +			ClassUtils.isPresent("com.fasterxml.jackson.dataformat.smile.SmileFactory",, +					AbstractCodecConfigurer.class.getClassLoader());, +, +		private Jackson2JsonDecoder jackson2JsonDecoder;, +		private Jackson2JsonEncoder jackson2JsonEncoder;, +		public void jackson2JsonDecoder(Jackson2JsonDecoder decoder) {, +			this.jackson2JsonDecoder = decoder;, +		protected Jackson2JsonDecoder jackson2JsonDecoder() {, +			return (this.jackson2JsonDecoder != null ? this.jackson2JsonDecoder : new Jackson2JsonDecoder());, +		public void jackson2JsonEncoder(Jackson2JsonEncoder encoder) {, +			this.jackson2JsonEncoder = encoder;, +		protected Jackson2JsonEncoder jackson2JsonEncoder() {, +			return (this.jackson2JsonEncoder != null ? this.jackson2JsonEncoder : new Jackson2JsonEncoder());, +				result.add(new DecoderHttpMessageReader<>(jackson2JsonDecoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new DecoderHttpMessageReader<>(new Jackson2SmileDecoder()));, +				result.add(new EncoderHttpMessageWriter<>(jackson2JsonEncoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new EncoderHttpMessageWriter<>(new Jackson2SmileEncoder()));, +++ b/build.gradle, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +import org.springframework.http.codec.json.Jackson2SmileDecoder;, +import org.springframework.http.codec.json.Jackson2SmileEncoder;, +	private static final boolean jackson2SmilePresent =, +			ClassUtils.isPresent("com.fasterxml.jackson.dataformat.smile.SmileFactory",, +					AbstractCodecConfigurer.class.getClassLoader());, +, +		private Jackson2JsonDecoder jackson2JsonDecoder;, +		private Jackson2JsonEncoder jackson2JsonEncoder;, +		public void jackson2JsonDecoder(Jackson2JsonDecoder decoder) {, +			this.jackson2JsonDecoder = decoder;, +		protected Jackson2JsonDecoder jackson2JsonDecoder() {, +			return (this.jackson2JsonDecoder != null ? this.jackson2JsonDecoder : new Jackson2JsonDecoder());, +		public void jackson2JsonEncoder(Jackson2JsonEncoder encoder) {, +			this.jackson2JsonEncoder = encoder;, +		protected Jackson2JsonEncoder jackson2JsonEncoder() {, +			return (this.jackson2JsonEncoder != null ? this.jackson2JsonEncoder : new Jackson2JsonEncoder());, +				result.add(new DecoderHttpMessageReader<>(jackson2JsonDecoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new DecoderHttpMessageReader<>(new Jackson2SmileDecoder()));, +				result.add(new EncoderHttpMessageWriter<>(jackson2JsonEncoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new EncoderHttpMessageWriter<>(new Jackson2SmileEncoder()));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +		 * {@link #jackson2JsonDecoder} override is used instead. Use this property, +++ b/build.gradle, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +import org.springframework.http.codec.json.Jackson2SmileDecoder;, +import org.springframework.http.codec.json.Jackson2SmileEncoder;, +	private static final boolean jackson2SmilePresent =, +			ClassUtils.isPresent("com.fasterxml.jackson.dataformat.smile.SmileFactory",, +					AbstractCodecConfigurer.class.getClassLoader());, +, +		private Jackson2JsonDecoder jackson2JsonDecoder;, +		private Jackson2JsonEncoder jackson2JsonEncoder;, +		public void jackson2JsonDecoder(Jackson2JsonDecoder decoder) {, +			this.jackson2JsonDecoder = decoder;, +		protected Jackson2JsonDecoder jackson2JsonDecoder() {, +			return (this.jackson2JsonDecoder != null ? this.jackson2JsonDecoder : new Jackson2JsonDecoder());, +		public void jackson2JsonEncoder(Jackson2JsonEncoder encoder) {, +			this.jackson2JsonEncoder = encoder;, +		protected Jackson2JsonEncoder jackson2JsonEncoder() {, +			return (this.jackson2JsonEncoder != null ? this.jackson2JsonEncoder : new Jackson2JsonEncoder());, +				result.add(new DecoderHttpMessageReader<>(jackson2JsonDecoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new DecoderHttpMessageReader<>(new Jackson2SmileDecoder()));, +				result.add(new EncoderHttpMessageWriter<>(jackson2JsonEncoder()));, +			}, +			if (jackson2SmilePresent) {, +				result.add(new EncoderHttpMessageWriter<>(new Jackson2SmileEncoder()));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +		 * {@link #jackson2JsonDecoder} override is used instead. Use this property, +++ b/spring-web/src/main/java/org/springframework/http/codec/CodecConfigurer.java, +		void jackson2JsonDecoder(Jackson2JsonDecoder decoder);, +		void jackson2JsonEncoder(Jackson2JsonEncoder encoder);, +++ b/build.gradle, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +import org.springframework.http.codec.json.Jackson2SmileDecoder;, +import org.springframework.http.codec.json.Jackson2SmileEncoder;, +	private static final boolean jackson2SmilePresent =, +			ClassUtils.isPresent("com.fasterxml.jackson.dataformat.smile.SmileFactory",, +					AbstractCodecConfigurer.class.getClassLoader());, +, +		private Jackson2JsonDecoder jackson2JsonDecoder;]