[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * <p>Note that this method supports only a single level of meta-annotations., +	 * For support for arbitrary levels of meta-annotations, use one of the, +	 * {@code find*()} methods instead., +	 * {@link AnnotatedElement}, where the {@code AnnotatedElement} is either, +	 * directly annotated or meta-annotated with the {@code annotationType}., +	 * <p>Note that this method supports only a single level of meta-annotations., +	 * For support for arbitrary levels of meta-annotations, use, +	 * {@link #findAnnotation(AnnotatedElement, Class)} instead., +	 * Get a single {@link Annotation} of {@code annotationType} from the, +	 * supplied {@link Method}, where the method is either directly annotated, +	 * or meta-annotated with the {@code annotationType}., +	 * <p>Note that this method supports only a single level of meta-annotations., +	 * For support for arbitrary levels of meta-annotations, use, +	 * {@link #findAnnotation(Method, Class)} instead., +	 * Find a single {@link Annotation} of {@code annotationType} on the, +	 * supplied {@link AnnotatedElement}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the supplied element., +	 * <p><strong>Warning</strong>: this method operates generically on, +	 * annotated elements. In other words, this method does not execute, +	 * specialized search algorithms for classes or methods. If you require, +	 * the more specific semantics of {@link #findAnnotation(Class, Class)}, +	 * or {@link #findAnnotation(Method, Class)}, invoke one of those methods, +	 * instead., +	 * @param annotatedElement the {@code AnnotatedElement} on which to find the annotation, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if not found, +	 * @since 4.2, +	 */, +	public static <A extends Annotation> A findAnnotation(AnnotatedElement annotatedElement, Class<A> annotationType) {, +		// Do NOT store result in the findAnnotationCache since doing so could break, +		// findAnnotation(Class, Class) and findAnnotation(Method, Class)., +		return findAnnotation(annotatedElement, annotationType, new HashSet<Annotation>());, +	}, +, +	/**, +	 * Perform the search algorithm for {@link #findAnnotation(AnnotatedElement, Class)}, +	 * avoiding endless recursion by tracking which annotations have already, +	 * been <em>visited</em>., +	 * @param annotatedElement the {@code AnnotatedElement} on which to find the annotation, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @param visited the set of annotations that have already been visited, +	 * @return the matching annotation, or {@code null} if not found, +	 * @since 4.2, +	 */, +	@SuppressWarnings("unchecked"), +	private static <T extends Annotation> T findAnnotation(AnnotatedElement annotatedElement, Class<T> annotationType, Set<Annotation> visited) {, +		Assert.notNull(annotatedElement, "AnnotatedElement must not be null");, +		try {, +			Annotation[] anns = annotatedElement.getDeclaredAnnotations();, +			for (Annotation ann : anns) {, +				if (ann.annotationType().equals(annotationType)) {, +					return (T) ann;, +				}, +			}, +			for (Annotation ann : anns) {, +				if (!isInJavaLangAnnotationPackage(ann) && visited.add(ann)) {, +					T annotation = findAnnotation((AnnotatedElement) ann.annotationType(), annotationType, visited);, +					if (annotation != null) {, +						return annotation;, +					}, +				}, +			}, +		}, +		catch (Exception ex) {, +			// Assuming nested Class values not resolvable within annotation attributes..., +			logIntrospectionFailure(annotatedElement, ex);, +		}, +		return null;, +	}, +, +	/**, +	 * Find a single {@link Annotation} of {@code annotationType} on the supplied, +	 * <p>Correctly handles bridge {@link Method Methods} generated by the compiler., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the method., +	 * @see #getAnnotation(Method, Class), +, +			Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);, +			result = findAnnotation((AnnotatedElement) resolvedMethod, annotationType);, +, +				result = searchOnInterfaces(method, annotationType, method.getDeclaringClass().getInterfaces());, +, +			Class<?> clazz = method.getDeclaringClass();, +					Method resolvedEquivalentMethod = BridgeMethodResolver.findBridgedMethod(equivalentMethod);, +					result = findAnnotation((AnnotatedElement) resolvedEquivalentMethod, annotationType);, +		}, +, +	 * Retrieve the <em>value</em> of the {@code value} attribute of a, +	 * Retrieve the <em>default value</em> of the {@code value} attribute, +	 * Retrieve the <em>default value</em> of the {@code value} attribute, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * <p>Note that this method supports only a single level of meta-annotations., +	 * For support for arbitrary levels of meta-annotations, use one of the, +	 * {@code find*()} methods instead., +	 * {@link AnnotatedElement}, where the {@code AnnotatedElement} is either, +	 * directly annotated or meta-annotated with the {@code annotationType}., +	 * <p>Note that this method supports only a single level of meta-annotations., +	 * For support for arbitrary levels of meta-annotations, use]