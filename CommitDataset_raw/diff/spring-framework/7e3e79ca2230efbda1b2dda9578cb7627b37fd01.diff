[+++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * @since 3.0, +	 * Template method for preparing the given {@link HttpURLConnection}. <p>The default implementation prepares the, +	 * connection for input and output, and sets the HTTP method., +	 *, +		if ("GET".equals(httpMethod)) {, +			connection.setInstanceFollowRedirects(true);, +		}, +		else {, +			connection.setInstanceFollowRedirects(false);, +		}, +		}, +		else {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * @since 3.0, +	 * Template method for preparing the given {@link HttpURLConnection}. <p>The default implementation prepares the, +	 * connection for input and output, and sets the HTTP method., +	 *, +		if ("GET".equals(httpMethod)) {, +			connection.setInstanceFollowRedirects(true);, +		}, +		else {, +			connection.setInstanceFollowRedirects(false);, +		}, +		}, +		else {, +++ b/org.springframework.web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +	private static final String BASE_URL = "http://localhost:8889";, +, +		jettyContext.addServlet(new ServletHolder(new StatusServlet(200)), "/status/ok");, +		jettyContext.addServlet(new ServletHolder(new StatusServlet(404)), "/status/notfound");, +		jettyContext.addServlet(new ServletHolder(new RedirectServlet("/status/ok")), "/redirect");, +				factory.createRequest(new URI(BASE_URL + "/status/notfound"), HttpMethod.GET);, +		ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/echo"), HttpMethod.PUT);, +		ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/echo"), HttpMethod.POST);, +		ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/echo"), HttpMethod.POST);, +			ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/methods/" + path), method);, +	@Test, +	public void redirect() throws Exception {, +		ClientHttpResponse response = null;, +		try {, +			ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/redirect"), HttpMethod.PUT);, +			response = request.execute();, +			assertEquals("Invalid Location value", new URI(BASE_URL + "/status/ok"), response.getHeaders().getLocation());, +, +		} finally {, +			if (response != null) {, +				response.close();, +				response = null;, +			}, +		}, +		try {, +			ClientHttpRequest request = factory.createRequest(new URI(BASE_URL + "/redirect"), HttpMethod.GET);, +			response = request.execute();, +			assertNull("Invalid Location value", response.getHeaders().getLocation());, +, +		} finally {, +			if (response != null) {, +				response.close();, +			}, +		}, +	}, +	, +	/** Servlet that sets a given status code. */, +	private static class StatusServlet extends GenericServlet {, +		private StatusServlet(int sc) {, +			((HttpServletResponse) response).setStatus(sc);, +	private static class RedirectServlet extends GenericServlet {, +, +		private final String location;, +, +		private RedirectServlet(String location) {, +			this.location = location;, +		}, +, +		@Override, +		public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {, +			HttpServletRequest request = (HttpServletRequest) req;, +			HttpServletResponse response = (HttpServletResponse) res;, +			response.setStatus(HttpServletResponse.SC_SEE_OTHER);, +			StringBuilder builder = new StringBuilder();, +			builder.append(request.getScheme()).append("://");, +			builder.append(request.getServerName()).append(':').append(request.getServerPort());, +			builder.append(location);, +			response.addHeader("Location", builder.toString());, +		}, +	}, +]