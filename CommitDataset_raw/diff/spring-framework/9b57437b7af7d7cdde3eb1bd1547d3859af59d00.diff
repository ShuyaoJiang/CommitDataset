[+++ b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., +	 * Abstract template method that writes the given headers and content to the HTTP request., +	protected abstract ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers), +			throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., +	 * Abstract template method that writes the given headers and content to the HTTP request., +	protected abstract ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers), +			throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +	public ClientHttpResponse execute() throws IOException {, +		try {, +			return executeAsync().get();, +		}, +		catch (InterruptedException ex) {, +			throw new IOException(ex.getMessage(), ex);, +		}, +		catch (ExecutionException ex) {, +			if (ex.getCause() instanceof IOException) {, +				throw (IOException) ex.getCause();, +			}, +			else {, +				throw new IOException(ex.getMessage(), ex.getCause());, +			}, +		}, +	}, +, +	@Override, +	private FullHttpRequest createFullHttpRequest(HttpHeaders headers) {, +		io.netty.handler.codec.http.HttpMethod nettyMethod =, +				io.netty.handler.codec.http.HttpMethod.valueOf(this.method.name());, +, +		FullHttpRequest nettyRequest = new DefaultFullHttpRequest(, +				HttpVersion.HTTP_1_1, nettyMethod, this.uri.toString(), this.body.buffer());, +, +		nettyRequest.headers().set(HttpHeaders.HOST, this.uri.getHost());, +		nettyRequest.headers().set(HttpHeaders.CONNECTION, "close");, +, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			nettyRequest.headers().add(entry.getKey(), entry.getValue());, +, +		return nettyRequest;, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors., +	 * Abstract template method that writes the given headers and content to the HTTP request., +	protected abstract ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers), +			throws IOException;, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +	public ClientHttpResponse execute() throws IOException {, +		try {, +			return executeAsync().get();, +		}, +		catch (InterruptedException ex) {, +			throw new IOException(ex.getMessage(), ex);, +		}, +		catch (ExecutionException ex) {, +			if (ex.getCause() instanceof IOException) {, +				throw (IOException) ex.getCause();, +			}, +			else {, +				throw new IOException(ex.getMessage(), ex.getCause());, +			}, +		}, +	}, +, +	@Override, +	private FullHttpRequest createFullHttpRequest(HttpHeaders headers) {, +		io.netty.handler.codec.http.HttpMethod nettyMethod =, +				io.netty.handler.codec.http.HttpMethod.valueOf(this.method.name());, +, +		FullHttpRequest nettyRequest = new DefaultFullHttpRequest(, +				HttpVersion.HTTP_1_1, nettyMethod, this.uri.toString(), this.body.buffer());, +, +		nettyRequest.headers().set(HttpHeaders.HOST, this.uri.getHost());, +		nettyRequest.headers().set(HttpHeaders.CONNECTION, "close");, +, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			nettyRequest.headers().add(entry.getKey(), entry.getValue());, +, +		return nettyRequest;, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, + * Copyright 2002-2016 the original author or authors., +	 * Construct a new instance of {@code HttpClientErrorException} based on, +	 * an {@link HttpStatus}., +	 * Construct a new instance of {@code HttpClientErrorException} based on, +	 * an {@link HttpStatus} and status text., +	 * Construct a new instance of {@code HttpClientErrorException} based on, +	 * an {@link HttpStatus}, status text, and response body content., +	 * @param responseBody the response body content (may be {@code null}), +	 * @param responseCharset the response body charset (may be {@code null}), +, +	 * Construct a new instance of {@code HttpClientErrorException} based on, +	 * an {@link HttpStatus}, status text, and response body content., +	 * @param responseHeaders the response headers (may be {@code null}), +	 * @param responseBody the response body content (may be {@code null}), +	 * @param responseCharset the response body charset (may be {@code null}), +, +++ b/spring-web/src/main/java/org/springframework/http/client/AbstractAsyncClientHttpRequest.java, + * Copyright 2002-2016 the original author or authors.]