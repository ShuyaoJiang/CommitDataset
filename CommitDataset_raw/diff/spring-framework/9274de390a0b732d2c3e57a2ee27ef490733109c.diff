[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/AppCacheManifestTransformerTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +	private static final Duration TIMEOUT = Duration.ofSeconds(5);, +, +	, +		List<ResourceResolver> resolvers = new ArrayList<>();, +		resolvers.add(versionResolver);, +		resolvers.add(new PathResourceResolver());, +		this.chain = new DefaultResourceTransformerChain(resolverChain, Collections.emptyList());, +		this.transformer.setResourceUrlProvider(createUrlProvider(resolvers));, +	}, +	private ResourceUrlProvider createUrlProvider(List<ResourceResolver> resolvers) {, +		ResourceWebHandler handler = new ResourceWebHandler();, +		handler.setLocations(Collections.singletonList(new ClassPathResource("test/", getClass())));, +		handler.setResourceResolvers(resolvers);, +, +		ResourceUrlProvider urlProvider = new ResourceUrlProvider();, +		urlProvider.registerHandlers(Collections.singletonMap("/static/**", handler));, +		return urlProvider;, +	public void noTransformIfExtensionDoesNotMatch() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/foo.css"));, +		Resource expected = getResource("foo.css");, +		Resource actual = this.transformer.transform(exchange, expected, this.chain).block(TIMEOUT);, +		assertSame(expected, actual);, +	public void syntaxErrorInManifest() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/error.appcache"));, +		Resource expected = getResource("error.appcache");, +		Resource actual = this.transformer.transform(exchange, expected, this.chain).block(TIMEOUT);, +		assertEquals(expected, actual);, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/test.appcache"));, +		Resource resource = getResource("test.appcache");, +		Resource actual = this.transformer.transform(exchange, resource, this.chain).block(TIMEOUT);, +		assertNotNull(actual);, +		byte[] bytes = FileCopyUtils.copyToByteArray(actual.getInputStream());, +				containsString("/static/foo-e36d2e05253c6c7085a91522ce43a0b4.css"));, +				containsString("/static/bar-11e16cf79faee7ac698c805cf28248d2.css"));, +				containsString("/static/js/bar-bd508c62235b832d960298ca6c0b7645.js"));, +		assertThat("should not rewrite external resources", content, containsString("//example.org/style.css"));, +		assertThat("should not rewrite external resources", content, containsString("http://example.org/image.png"));, +, +		// Not the same hash as Spring MVC, +		// Hash is computed from links, and not from the linked content, +				containsString("# Hash: 8eefc904df3bd46537fa7bdbbc5ab9fb"));, +	}, +, +	private Resource getResource(String filePath) {, +		return new ClassPathResource("test/" + filePath, getClass());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/AppCacheManifestTransformerTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +	private static final Duration TIMEOUT = Duration.ofSeconds(5);, +, +	, +		List<ResourceResolver> resolvers = new ArrayList<>();, +		resolvers.add(versionResolver);, +		resolvers.add(new PathResourceResolver());, +		this.chain = new DefaultResourceTransformerChain(resolverChain, Collections.emptyList());, +		this.transformer.setResourceUrlProvider(createUrlProvider(resolvers));, +	}, +	private ResourceUrlProvider createUrlProvider(List<ResourceResolver> resolvers) {, +		ResourceWebHandler handler = new ResourceWebHandler();, +		handler.setLocations(Collections.singletonList(new ClassPathResource("test/", getClass())));, +		handler.setResourceResolvers(resolvers);, +, +		ResourceUrlProvider urlProvider = new ResourceUrlProvider();, +		urlProvider.registerHandlers(Collections.singletonMap("/static/**", handler));, +		return urlProvider;, +	public void noTransformIfExtensionDoesNotMatch() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/foo.css"));, +		Resource expected = getResource("foo.css");, +		Resource actual = this.transformer.transform(exchange, expected, this.chain).block(TIMEOUT);, +		assertSame(expected, actual);, +	public void syntaxErrorInManifest() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/error.appcache"));, +		Resource expected = getResource("error.appcache");, +		Resource actual = this.transformer.transform(exchange, expected, this.chain).block(TIMEOUT);, +		assertEquals(expected, actual);, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/static/test.appcache"));, +		Resource resource = getResource("test.appcache");, +		Resource actual = this.transformer.transform(exchange, resource, this.chain).block(TIMEOUT);, +		assertNotNull(actual);, +		byte[] bytes = FileCopyUtils.copyToByteArray(actual.getInputStream());, +				containsString("/static/foo-e36d2e05253c6c7085a91522ce43a0b4.css"));, +				containsString("/static/bar-11e16cf79faee7ac698c805cf28248d2.css"));, +				containsString("/static/js/bar-bd508c62235b832d960298ca6c0b7645.js"));, +		assertThat("should not rewrite external resources", content, containsString("//example.org/style.css"));, +		assertThat("should not rewrite external resources", content, containsString("http://example.org/image.png"));, +, +		// Not the same hash as Spring MVC, +		// Hash is computed from links, and not from the linked content, +				containsString("# Hash: 8eefc904df3bd46537fa7bdbbc5ab9fb"));, +	}, +, +	private Resource getResource(String filePath) {, +		return new ClassPathResource("test/" + filePath, getClass());]