[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, +		if (value != null) {, +			// Modify header if necessary, +		}, +			// Remove header if available, +			if (this.headers.containsKey(name)) {, +				this.modified = true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, +		if (value != null) {, +			// Modify header if necessary, +		}, +			// Remove header if available, +			if (this.headers.containsKey(name)) {, +				this.modified = true;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/support/MessageHeaderAccessorTests.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Collections;, + * @author Juergen Hoeller, +	public void testRemoveHeader() {, +		Message<?> message = new GenericMessage<>("payload", Collections.singletonMap("foo", "bar"));, +		MessageHeaderAccessor accessor = new MessageHeaderAccessor(message);, +		accessor.removeHeader("foo");, +		Map<String, Object> headers = accessor.toMap();, +		assertFalse(headers.containsKey("foo"));, +	}, +, +	@Test, +	public void testRemoveHeaderEvenIfNull() {, +		Message<?> message = new GenericMessage<>("payload", Collections.singletonMap("foo", null));, +		MessageHeaderAccessor accessor = new MessageHeaderAccessor(message);, +		accessor.removeHeader("foo");, +		Map<String, Object> headers = accessor.toMap();, +		assertFalse(headers.containsKey("foo"));, +	}, +, +	@Test]