[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);, +		if (pattern != null && pattern.endsWith("." + extension)) {, +		if (extension.equals("html")) {, +			String name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);, +		if (pattern != null && pattern.endsWith("." + extension)) {, +		if (extension.equals("html")) {, +			String name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +	@Test, +	public void responseBodyAsTextWithCssExtension() throws Exception {, +		initServlet(new ApplicationContextInitializer<GenericWebApplicationContext>() {, +			@Override, +			public void initialize(GenericWebApplicationContext wac) {, +				ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean();, +				factoryBean.afterPropertiesSet();, +				RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject());, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +			}, +		}, TextRestController.class);, +, +		byte[] content = "body".getBytes(Charset.forName("ISO-8859-1"));, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a4.css");, +		request.setContent(content);, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		getServlet().service(request, response);, +, +		assertEquals(200, response.getStatus());, +		assertEquals("text/css", response.getContentType());, +		assertNull(response.getHeader("Content-Disposition"));, +		assertArrayEquals(content, response.getContentAsByteArray());, +	}, +, +, +		@RequestMapping(path = "/a4.css", method = RequestMethod.GET), +		public String a4(@RequestBody String body) {, +			return body;, +		}]