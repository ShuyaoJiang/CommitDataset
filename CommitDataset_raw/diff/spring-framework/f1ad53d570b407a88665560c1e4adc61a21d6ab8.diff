[+++ b/build-spring-framework/resources/changelog.txt, +* added support for @Valid with @RequestBody arguments, +++ b/build-spring-framework/resources/changelog.txt, +* added support for @Valid with @RequestBody arguments, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @author Rossen Stoyanchev, +	 * implementation sends an HTTP 400 error along with a message containing the errors., +++ b/build-spring-framework/resources/changelog.txt, +* added support for @Valid with @RequestBody arguments, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @author Rossen Stoyanchev, +	 * implementation sends an HTTP 400 error along with a message containing the errors., +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +import org.springframework.beans.TestBean;, +import org.springframework.validation.BeanPropertyBindingResult;, +import org.springframework.web.servlet.mvc.method.annotation.support.RequestBodyNotValidException;, +	@Test, +	public void handleRequestBodyNotValid() {, +		BeanPropertyBindingResult errors = new BeanPropertyBindingResult(new TestBean(), "testBean");, +		errors.rejectValue("name", "invalid");, +		RequestBodyNotValidException ex = new RequestBodyNotValidException(errors);, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 400, response.getStatus());, +		assertTrue(response.getErrorMessage().startsWith("Request body content validation failed"));, +		assertTrue(response.getErrorMessage().contains("Field error in object 'testBean' on field 'name'"));, +	}, +++ b/build-spring-framework/resources/changelog.txt, +* added support for @Valid with @RequestBody arguments, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * @author Rossen Stoyanchev, +	 * implementation sends an HTTP 400 error along with a message containing the errors., +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +import org.springframework.beans.TestBean;, +import org.springframework.validation.BeanPropertyBindingResult;, +import org.springframework.web.servlet.mvc.method.annotation.support.RequestBodyNotValidException;, +	@Test, +	public void handleRequestBodyNotValid() {, +		BeanPropertyBindingResult errors = new BeanPropertyBindingResult(new TestBean(), "testBean");, +		errors.rejectValue("name", "invalid");, +		RequestBodyNotValidException ex = new RequestBodyNotValidException(errors);, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 400, response.getStatus());, +		assertTrue(response.getErrorMessage().startsWith("Request body content validation failed"));, +		assertTrue(response.getErrorMessage().contains("Field error in object 'testBean' on field 'name'"));, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * converters}. Such parameters may optionally be annotated with {@code @Valid}.]