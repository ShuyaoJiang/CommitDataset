[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +				return new URI(getScheme(), getUserInfo(), getHost(), getPort(), path, getQuery(), getFragment());, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +				return new URI(getScheme(), getUserInfo(), getHost(), getPort(), path, getQuery(), getFragment());, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +	 * A variant of {@link #encode(Charset)} that uses "UTF-8" as the charset., +	 * @return a new {@code UriComponents} instance with encoded values, +	 * Encode each URI component by percent encoding illegal characters, which, +	 * includes non-US-ASCII characters, and also characters that are otherwise, +	 * illegal within a given URI component type, as defined in RFC 3986. The, +	 * effect of this method, with regards to encoding, is comparable to using, +	 * the multi-argument constructor of {@link URI}., +	 * @return a new {@code UriComponents} instance with encoded values, +	 * Normalize the path removing sequences like "path/..". Note that, +	 * normalization is applied to the full path, and not to individual path, +	 * segments., +	 * Concatenate all URI components to return the fully formed URI String., +	 * <p>This method does nothing more than a simple concatenation based on, +	 * current values. That means it could produce different results if invoked, +	 * before vs after methods that can change individual values such as, +	 * {@code encode}, {@code expand}, or {@code normalize}., +	 * Create a {@link URI} from this instance as follows:, +	 * <p>If the current instance is {@link #encode() encoded}, form the full, +	 * URI String via {@link #toUriString()}, and then pass it to the single, +	 * argument {@link URI} constructor which preserves percent encoding., +	 * <p>If not yet encoded, pass individual URI component values to the, +	 * multi-argument {@link URI} constructor which quotes illegal characters, +	 * that cannot appear in their respective URI component., +	/**, +	 * A simple pass-through to {@link #toUriString()}., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +				return new URI(getScheme(), getUserInfo(), getHost(), getPort(), path, getQuery(), getFragment());, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +	 * A variant of {@link #encode(Charset)} that uses "UTF-8" as the charset., +	 * @return a new {@code UriComponents} instance with encoded values, +	 * Encode each URI component by percent encoding illegal characters, which, +	 * includes non-US-ASCII characters, and also characters that are otherwise, +	 * illegal within a given URI component type, as defined in RFC 3986. The, +	 * effect of this method, with regards to encoding, is comparable to using, +	 * the multi-argument constructor of {@link URI}., +	 * @return a new {@code UriComponents} instance with encoded values, +	 * Normalize the path removing sequences like "path/..". Note that, +	 * normalization is applied to the full path, and not to individual path, +	 * segments., +	 * Concatenate all URI components to return the fully formed URI String., +	 * <p>This method does nothing more than a simple concatenation based on, +	 * current values. That means it could produce different results if invoked, +	 * before vs after methods that can change individual values such as, +	 * {@code encode}, {@code expand}, or {@code normalize}., +	 * Create a {@link URI} from this instance as follows:, +	 * <p>If the current instance is {@link #encode() encoded}, form the full, +	 * URI String via {@link #toUriString()}, and then pass it to the single, +	 * argument {@link URI} constructor which preserves percent encoding., +	 * <p>If not yet encoded, pass individual URI component values to the, +	 * multi-argument {@link URI} constructor which quotes illegal characters, +	 * that cannot appear in their respective URI component., +	/**, +	 * A simple pass-through to {@link #toUriString()}., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.net.URI;, + * Utility methods for URI encoding and decoding based on RFC 3986., + * <p>There are two types of encode methods:, + * <li>{@code "encodeXyz"} -- these encode a specific URI component (e.g. path,, + * query) by percent encoding illegal characters, which includes non-US-ASCII, + * characters, and also characters that are otherwise illegal within the given, + * URI component type, as defined in RFC 3986. The effect of this method, with, + * regards to encoding, is comparable to using the multi-argument constructor, + * of {@link URI}., + * <li>{@code "encode"} and {@code "encodeUriVariables"} -- these can be used, + * to encode URI variable values by percent encoding all characters that are, + * either illegal, or have any reserved meaning, anywhere within a URI., + * @author Rossen Stoyanchev, +	public static String encodeScheme(String scheme, String encoding) {, +		return encode(scheme, encoding, HierarchicalUriComponents.Type.SCHEME);, +		return encode(scheme, charset, HierarchicalUriComponents.Type.SCHEME);, +	public static String encodeAuthority(String authority, String encoding) {, +		return encode(authority, encoding, HierarchicalUriComponents.Type.AUTHORITY);, +		return encode(authority, charset, HierarchicalUriComponents.Type.AUTHORITY);, +	public static String encodeUserInfo(String userInfo, String encoding) {, +		return encode(userInfo, encoding, HierarchicalUriComponents.Type.USER_INFO);, +		return encode(userInfo, charset, HierarchicalUriComponents.Type.USER_INFO);, +	public static String encodeHost(String host, String encoding) {, +		return encode(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +		return encode(host, charset, HierarchicalUriComponents.Type.HOST_IPV4);, +	public static String encodePort(String port, String encoding) {, +		return encode(port, encoding, HierarchicalUriComponents.Type.PORT);, +		return encode(port, charset, HierarchicalUriComponents.Type.PORT);, +	public static String encodePath(String path, String encoding) {, +		return encode(path, encoding, HierarchicalUriComponents.Type.PATH);, +		return encode(path, charset, HierarchicalUriComponents.Type.PATH);, +	public static String encodePathSegment(String segment, String encoding) {, +		return encode(segment, encoding, HierarchicalUriComponents.Type.PATH_SEGMENT);, +		return encode(segment, charset, HierarchicalUriComponents.Type.PATH_SEGMENT);, +	public static String encodeQuery(String query, String encoding) {, +		return encode(query, encoding, HierarchicalUriComponents.Type.QUERY);, +		return encode(query, charset, HierarchicalUriComponents.Type.QUERY);, +	public static String encodeQueryParam(String queryParam, String encoding) {]