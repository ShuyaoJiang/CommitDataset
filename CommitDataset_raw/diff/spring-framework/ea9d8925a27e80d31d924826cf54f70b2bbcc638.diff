[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +			if (bd.getResolvedFactoryMethod() != null) {, +				targetAnnotation = bd.getResolvedFactoryMethod().getAnnotation(type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +			if (bd.getResolvedFactoryMethod() != null) {, +				targetAnnotation = bd.getResolvedFactoryMethod().getAnnotation(type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					if (bd instanceof RootBeanDefinition) {, +						mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +			if (bd.getResolvedFactoryMethod() != null) {, +				targetAnnotation = bd.getResolvedFactoryMethod().getAnnotation(type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					if (bd instanceof RootBeanDefinition) {, +						mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import java.util.Arrays;, +import org.springframework.util.ClassUtils;, +	 * Resolve the factory method in the specified bean definition, if possible., +	 * {@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result., +	 * @param mbd the bean definition to check, +	 */, +	public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {, +		Class factoryClass;, +		if (mbd.getFactoryBeanName() != null) {, +			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName());, +		}, +		else {, +			factoryClass = mbd.getBeanClass();, +		}, +		factoryClass = ClassUtils.getUserClass(factoryClass);, +		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass);, +		Method uniqueCandidate = null;, +		for (Method candidate : candidates) {, +			if (mbd.isFactoryMethod(candidate)) {, +				if (uniqueCandidate == null) {, +					uniqueCandidate = candidate;, +				}, +				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {, +					uniqueCandidate = null;, +					break;, +				}, +			}, +		}, +		mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate;, +	}, +, +	/**, +				if (argsToUse == null && mbd.preparedConstructorArguments != null) {, +		if (factoryMethodToUse == null || argsToUse == null) {, +						candidate.getName().equals(mbd.getFactoryMethodName()) &&, +						mbd.isFactoryMethod(candidate)) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +			if (bd.getResolvedFactoryMethod() != null) {, +				targetAnnotation = bd.getResolvedFactoryMethod().getAnnotation(type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					if (bd instanceof RootBeanDefinition) {, +						mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import java.util.Arrays;, +import org.springframework.util.ClassUtils;, +	 * Resolve the factory method in the specified bean definition, if possible., +	 * {@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result., +	 * @param mbd the bean definition to check, +	 */, +	public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {, +		Class factoryClass;, +		if (mbd.getFactoryBeanName() != null) {, +			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName());, +		}, +		else {, +			factoryClass = mbd.getBeanClass();, +		}, +		factoryClass = ClassUtils.getUserClass(factoryClass);, +		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass);, +		Method uniqueCandidate = null;, +		for (Method candidate : candidates) {, +			if (mbd.isFactoryMethod(candidate)) {, +				if (uniqueCandidate == null) {, +					uniqueCandidate = candidate;, +				}, +				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {, +					uniqueCandidate = null;, +					break;, +				}, +			}, +		}, +		mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate;, +	}, +, +	/**]