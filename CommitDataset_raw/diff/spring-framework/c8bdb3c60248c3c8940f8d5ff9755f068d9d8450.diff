[+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	private final ConcurrentMap<String, Map<Locale, List<String>>> cachedFilenames = new ConcurrentHashMap<>();, +	private final ConcurrentMap<String, PropertiesHolder> cachedProperties = new ConcurrentHashMap<>();, +	private final ConcurrentMap<Locale, PropertiesHolder> cachedMergedProperties = new ConcurrentHashMap<>();, +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	private final ConcurrentMap<String, Map<Locale, List<String>>> cachedFilenames = new ConcurrentHashMap<>();, +	private final ConcurrentMap<String, PropertiesHolder> cachedProperties = new ConcurrentHashMap<>();, +	private final ConcurrentMap<Locale, PropertiesHolder> cachedMergedProperties = new ConcurrentHashMap<>();, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +		public boolean needsReload(, +				String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) {, +, +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	private final ConcurrentMap<String, Map<Locale, List<String>>> cachedFilenames = new ConcurrentHashMap<>();, +	private final ConcurrentMap<String, PropertiesHolder> cachedProperties = new ConcurrentHashMap<>();, +	private final ConcurrentMap<Locale, PropertiesHolder> cachedMergedProperties = new ConcurrentHashMap<>();, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +		public boolean needsReload(, +				String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) {, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2018 the original author or authors., +	/** Name of procedure to call **/, +	/** Name of catalog for call **/, +	/** Name of schema for call **/, +				throw new InvalidDataAccessApiUsageException(, +						"Return of a ResultSet from a stored procedure is not supported.");, +						matchedParameters.put(parameterName,, +								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName));, +							matchedParameters.put(parameterName,, +									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName));, +								matchedParameters.put(parameterName,, +										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName));, +									matchedParameters.put(parameterName,, +											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName));, +										matchedParameters.put(parameterName,, +												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName));, +										logger.warn("Unable to locate the corresponding parameter value for '" +, +												parameterName + "' within the parameter values provided: " +, +												caseInsensitiveParameterNames.values());, +						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +, +								parameterName + "\" in the parameters used: " + callParameterNames.keySet());, +		return (isNamedBinding() ? parameter.getName() + " => ?" : "?");, +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	private final ConcurrentMap<String, Map<Locale, List<String>>> cachedFilenames = new ConcurrentHashMap<>();, +	private final ConcurrentMap<String, PropertiesHolder> cachedProperties = new ConcurrentHashMap<>();, +	private final ConcurrentMap<Locale, PropertiesHolder> cachedMergedProperties = new ConcurrentHashMap<>();, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2018 the original author or authors., +		public boolean needsReload(, +				String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) {, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2018 the original author or authors., +	/** Name of procedure to call **/, +	/** Name of catalog for call **/, +	/** Name of schema for call **/, +				throw new InvalidDataAccessApiUsageException(, +						"Return of a ResultSet from a stored procedure is not supported.");, +						matchedParameters.put(parameterName,, +								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName));, +							matchedParameters.put(parameterName,, +									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName));, +								matchedParameters.put(parameterName,, +										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName));, +									matchedParameters.put(parameterName,, +											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName));, +										matchedParameters.put(parameterName,, +												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName));, +										logger.warn("Unable to locate the corresponding parameter value for '" +, +												parameterName + "' within the parameter values provided: " +, +												caseInsensitiveParameterNames.values());, +						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +, +								parameterName + "\" in the parameters used: " + callParameterNames.keySet());, +		return (isNamedBinding() ? parameter.getName() + " => ?" : "?");, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, + * Copyright 2002-2018 the original author or authors., +		// For parameter source lookups we need to provide case-insensitive lookup support since the, +		// database metadata is not necessarily providing case-sensitive column names, +							values.add(SqlParameterSourceUtils.getTypedValue(, +									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)));]