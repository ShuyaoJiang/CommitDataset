[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +		return "local=[" + this.localRegistry +	"], remote=" + this.remoteRegistries;, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +		return "local=[" + this.localRegistry +	"], remote=" + this.remoteRegistries;, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java, +		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +				testContext.getTestMethod(), Sql.class, SqlGroup.class);, +			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +					testContext.getTestClass(), Sql.class, SqlGroup.class);, +	 * @param classLevel {@code true} if {@link Sql @Sql} was declared at the class level, +, +			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",, +					mergedSqlConfig, executionPhase, testContext));, +		for (String stmt : sql.statements()) {, +			if (StringUtils.hasText(stmt)) {, +				stmt = stmt.trim();, +				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt));, +		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName);, +		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED);, +		if (txMgr == null) {, +			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr);, +						dsName, txMgr.getClass().getName(), tmName));, +				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +, +						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",, +						testContext, txMgr.getClass().getName(), tmName));, +			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(, +			new TransactionTemplate(txMgr, txAttr).execute(status -> {, +				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",, +						prefixedResourcePath, elementType, elementName));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +		return "local=[" + this.localRegistry +	"], remote=" + this.remoteRegistries;, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java, +		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +				testContext.getTestMethod(), Sql.class, SqlGroup.class);, +			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +					testContext.getTestClass(), Sql.class, SqlGroup.class);, +	 * @param classLevel {@code true} if {@link Sql @Sql} was declared at the class level, +, +			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",, +					mergedSqlConfig, executionPhase, testContext));, +		for (String stmt : sql.statements()) {, +			if (StringUtils.hasText(stmt)) {, +				stmt = stmt.trim();, +				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt));, +		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName);, +		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED);, +		if (txMgr == null) {, +			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr);, +						dsName, txMgr.getClass().getName(), tmName));, +				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +, +						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",, +						testContext, txMgr.getClass().getName(), tmName));, +			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(, +			new TransactionTemplate(txMgr, txAttr).execute(status -> {, +				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",, +						prefixedResourcePath, elementType, elementName));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/ActiveProfilesUtils.java, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s]",, +						"for test class [%s]", resolverClass.getName(), rootDeclaringClass.getName());, +						"ActiveProfilesResolver [%s] returned a null array of bean definition profiles",, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +		return "local=[" + this.localRegistry +	"], remote=" + this.remoteRegistries;, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java, +		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +				testContext.getTestMethod(), Sql.class, SqlGroup.class);, +			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(, +					testContext.getTestClass(), Sql.class, SqlGroup.class);, +	 * @param classLevel {@code true} if {@link Sql @Sql} was declared at the class level, +, +			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",, +					mergedSqlConfig, executionPhase, testContext));, +		for (String stmt : sql.statements()) {, +			if (StringUtils.hasText(stmt)) {, +				stmt = stmt.trim();, +				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt));, +		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName);, +		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED);, +		if (txMgr == null) {, +			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr);, +						dsName, txMgr.getClass().getName(), tmName));, +				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +, +						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",, +						testContext, txMgr.getClass().getName(), tmName));, +			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(, +			new TransactionTemplate(txMgr, txAttr).execute(status -> {, +				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",, +						prefixedResourcePath, elementType, elementName));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/ActiveProfilesUtils.java, +				logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s]",, +						"for test class [%s]", resolverClass.getName(), rootDeclaringClass.getName());, +						"ActiveProfilesResolver [%s] returned a null array of bean definition profiles",, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java]