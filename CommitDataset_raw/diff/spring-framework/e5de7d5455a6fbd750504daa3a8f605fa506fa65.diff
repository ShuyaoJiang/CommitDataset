[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +, +	 * Find a {@link Method} to handle the given exception., +	 * Use {@link ExceptionDepthComparator} if more than one match is found., +	 * @return a Method to handle the exception, or {@code null} if none found, +		Method method = resolveMethodByExceptionType(exception.getClass());, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +		}, +		return method;, +	}, +, +	/**, +	 * Find a {@link Method} to handle the given exception type. This can be, +	 * useful if an {@link Exception} instance is not available (e.g. for tools)., +	 * @param exceptionType the exception type, +	 * @return a Method to handle the exception, or {@code null} if none found, +	 * @since 4.3.1, +	 */, +	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {, +	 * Return the {@link Method} mapped to the given exception type, or {@code null} if none., +	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +, +	 * Find a {@link Method} to handle the given exception., +	 * Use {@link ExceptionDepthComparator} if more than one match is found., +	 * @return a Method to handle the exception, or {@code null} if none found, +		Method method = resolveMethodByExceptionType(exception.getClass());, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +		}, +		return method;, +	}, +, +	/**, +	 * Find a {@link Method} to handle the given exception type. This can be, +	 * useful if an {@link Exception} instance is not available (e.g. for tools)., +	 * @param exceptionType the exception type, +	 * @return a Method to handle the exception, or {@code null} if none found, +	 * @since 4.3.1, +	 */, +	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {, +	 * Return the {@link Method} mapped to the given exception type, or {@code null} if none., +	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +	public void resolveMethodFromArgumentWithErrorType() {, +		AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(ExceptionController.class);, +		AssertionError exception = new AssertionError();, +		assertEquals("handleAssertionError", resolver.resolveMethod(new IllegalStateException(exception)).getName());, +	}, +, +	@Test, +, +, +		@MessageExceptionHandler, +		public void handleAssertionError(AssertionError exception) {, +	}, +, +, +]