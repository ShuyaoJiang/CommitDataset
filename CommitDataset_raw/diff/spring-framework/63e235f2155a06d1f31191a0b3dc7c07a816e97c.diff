[+++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.charset) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +				this.charset = true;, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.charset) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +				this.charset = true;, +			updateContentTypeHeader();, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.orm/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.charset) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +				this.charset = true;, +			updateContentTypeHeader();, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.characterEncoding != null) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);, +			doAddHeaderValue(CONTENT_TYPE_HEADER, sb.toString(), true);, +		}, +			updateContentTypeHeader();, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +		updateContentTypeHeader();, +	private void updateContentTypeHeader() {, +		if (this.contentType != null) {, +			StringBuilder sb = new StringBuilder(this.contentType);, +			if (this.contentType.toLowerCase().indexOf(CHARSET_PREFIX) == -1 && this.charset) {, +				sb.append(";").append(CHARSET_PREFIX).append(this.characterEncoding);]