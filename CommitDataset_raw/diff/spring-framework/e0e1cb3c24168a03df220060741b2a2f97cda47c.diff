[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/ModelAndView.java, + * Copyright 2002-2010 the original author or authors., +	/** Indicates whether or not this instance has been cleared with a call to {@link #clear()} */, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/ModelAndView.java, + * Copyright 2002-2010 the original author or authors., +	/** Indicates whether or not this instance has been cleared with a call to {@link #clear()} */, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					ModelAndView mav = mavResolver.resolveModelAndView(, +							handlerMethod, handlerType, returnValue, implicitModel, webRequest);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/ModelAndView.java, + * Copyright 2002-2010 the original author or authors., +	/** Indicates whether or not this instance has been cleared with a call to {@link #clear()} */, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					ModelAndView mav = mavResolver.resolveModelAndView(, +							handlerMethod, handlerType, returnValue, implicitModel, webRequest);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + *, +	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Exception ex) {, +, +	 * @param handler the executed handler, or <code>null</code> if none chosen at the time of the exception, +	 * (for example, if multipart resolution failed), +	protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,, +			HttpServletResponse response, Object handler, Exception ex) throws Exception {, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/ModelAndView.java, + * Copyright 2002-2010 the original author or authors., +	/** Indicates whether or not this instance has been cleared with a call to {@link #clear()} */, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					ModelAndView mav = mavResolver.resolveModelAndView(, +							handlerMethod, handlerType, returnValue, implicitModel, webRequest);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + *, +	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Exception ex) {, +, +	 * @param handler the executed handler, or <code>null</code> if none chosen at the time of the exception, +	 * (for example, if multipart resolution failed), +	protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,, +			HttpServletResponse response, Object handler, Exception ex) throws Exception {, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, + * HandlerExceptionResolver} interface that resolves standard Spring exceptions and translates, + * them to corresponding HTTP status codes., + *, + * <p>This exception resolver is enabled by default in the {@link org.springframework.web.servlet.DispatcherServlet}., + * @since 3.0, +, +	/**, +	 * Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}., +	 */, +, +	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Exception ex) {, +, +	 * Handle the case where no request handler method was found., +	 * <p>The default implementation logs a warning, sends an HTTP 404 error, and returns, +	 * an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,, +	 * or the NoSuchRequestHandlingMethodException could be rethrown as-is., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +	 * Handle the case where no request handler method was found for the particular HTTP request method., +	 * <p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,, +	 * and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,, +	 * or the HttpRequestMethodNotSupportedException could be rethrown as-is., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +	 * were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,, +	 * sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback, +	 * view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +	 * <p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}., +	 * Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException, +	 * could be rethrown as-is., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +	 * Handle the case when a required parameter is missing., +	 * <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}., +	 * Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException, +	 * could be rethrown as-is., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +	 * Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur., +	 * <p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}.]