[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2018 the original author or authors., +				long receiveTimeout = getReceiveTimeout();, +				long waitStartTime = System.currentTimeMillis();, +				int waitCount = 0;, +					if (waitCount > 0 && !isAcceptMessagesWhileStopping() &&, +							System.currentTimeMillis() - waitStartTime >= receiveTimeout) {, +						// Unexpectedly some invokers are still active after the receive timeout period, +						// -> interrupt remaining receive attempts since we'd reject the messages anyway, +						for (AsyncMessageListenerInvoker scheduledInvoker : this.scheduledInvokers) {, +							scheduledInvoker.interruptIfNecessary();, +						}, +					}, +								" message listener invokers (iteration " + waitCount + ")");, +					// Wait for AsyncMessageListenerInvokers to deactivate themselves..., +					if (receiveTimeout > 0) {, +						this.lifecycleMonitor.wait(receiveTimeout);, +					waitCount++;, +				// Clear remaining scheduled invokers, possibly left over as paused tasks, +		@Nullable, +		private volatile Thread currentReceiveThread;, +, +			this.currentReceiveThread = Thread.currentThread();, +			try {, +			finally {, +				this.currentReceiveThread = null;, +			}, +		}, +		private void interruptIfNecessary() {, +			Thread currentReceiveThread = this.currentReceiveThread;, +			if (currentReceiveThread != null && !currentReceiveThread.isInterrupted()) {, +				currentReceiveThread.interrupt();, +			}, +		}, +]