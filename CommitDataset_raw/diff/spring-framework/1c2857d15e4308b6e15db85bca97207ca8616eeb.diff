[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, + * {@link AbstractJackson2HttpMessageConverter}'s concrete subclasses., + * @author Sebastien Deleuze, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, + * {@link AbstractJackson2HttpMessageConverter}'s concrete subclasses., + * @author Sebastien Deleuze, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;, + * @author Sebastien Deleuze, +	public void jacksonJsonViewWithResponseBodyAndJsonMessageConverter() throws Exception {, +	public void jacksonJsonViewWithResponseEntityAndJsonMessageConverter() throws Exception {, +	// SPR-12149, +, +	@Test, +	public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception {, +		Method method = JacksonViewController.class.getMethod("handleResponseBody");, +		HandlerMethod handlerMethod = new HandlerMethod(new JacksonViewController(), method);, +		MethodParameter methodReturnType = handlerMethod.getReturnType();, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();, +		converters.add(new MappingJackson2XmlHttpMessageConverter());, +, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(, +				converters, null, Arrays.asList(new JsonViewResponseBodyAdvice()));, +, +		Object returnValue = new JacksonViewController().handleResponseBody();, +		processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest);, +, +		String content = this.servletResponse.getContentAsString();, +		assertFalse(content.contains("<withView1>with</withView1>"));, +		assertTrue(content.contains("<withView2>with</withView2>"));, +		assertTrue(content.contains("<withoutView>without</withoutView>"));, +	}, +, +	// SPR-12149, +, +	@Test, +	public void jacksonJsonViewWithResponseEntityAndXmlMessageConverter() throws Exception {, +		Method method = JacksonViewController.class.getMethod("handleResponseEntity");, +		HandlerMethod handlerMethod = new HandlerMethod(new JacksonViewController(), method);, +		MethodParameter methodReturnType = handlerMethod.getReturnType();, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();, +		converters.add(new MappingJackson2XmlHttpMessageConverter());, +, +		HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(, +				converters, null, Arrays.asList(new JsonViewResponseBodyAdvice()));, +, +		Object returnValue = new JacksonViewController().handleResponseEntity();, +		processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest);, +, +		String content = this.servletResponse.getContentAsString();, +		assertFalse(content.contains("<withView1>with</withView1>"));, +		assertTrue(content.contains("<withView2>with</withView2>"));, +		assertTrue(content.contains("<withoutView>without</withoutView>"));, +	}, +]