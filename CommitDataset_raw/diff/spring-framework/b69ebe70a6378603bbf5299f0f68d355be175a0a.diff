[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Adapter that takes a {@code java.util.concurrent.Executor} and exposes, + * a Spring {@link org.springframework.core.task.TaskExecutor} for it., + * <p>Note that there is a pre-built {@link ThreadPoolTaskExecutor} that allows, + * for defining a {@link java.util.concurrent.ThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskExecutor, using a single thread executor as default., +	 * Create a new ConcurrentTaskExecutor, using the given {@link java.util.concurrent.Executor}., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * Specify the {@link java.util.concurrent.Executor} to delegate to., +	 * Return the {@link java.util.concurrent.Executor} that this adapter delegates to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Adapter that takes a {@code java.util.concurrent.Executor} and exposes, + * a Spring {@link org.springframework.core.task.TaskExecutor} for it., + * <p>Note that there is a pre-built {@link ThreadPoolTaskExecutor} that allows, + * for defining a {@link java.util.concurrent.ThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskExecutor, using a single thread executor as default., +	 * Create a new ConcurrentTaskExecutor, using the given {@link java.util.concurrent.Executor}., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * Specify the {@link java.util.concurrent.Executor} to delegate to., +	 * Return the {@link java.util.concurrent.Executor} that this adapter delegates to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, + * Adapter that takes a {@code java.util.concurrent.ScheduledExecutorService} and, + * exposes a Spring {@link org.springframework.scheduling.TaskScheduler} for it., + * defining a {@link java.util.concurrent.ScheduledThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskScheduler, using the given, +	 * {@link java.util.concurrent.ScheduledExecutorService} as shared delegate., +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link org.springframework.scheduling.SchedulingTaskExecutor}, +	 * as well as {@link TaskScheduler} invocations, +	 * Create a new ConcurrentTaskScheduler, using the given {@link java.util.concurrent.Executor}, +	 * and {@link java.util.concurrent.ScheduledExecutorService} as delegates., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link TaskScheduler} invocations, +	 * Specify the {@link java.util.concurrent.ScheduledExecutorService} to delegate to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Adapter that takes a {@code java.util.concurrent.Executor} and exposes, + * a Spring {@link org.springframework.core.task.TaskExecutor} for it., + * <p>Note that there is a pre-built {@link ThreadPoolTaskExecutor} that allows, + * for defining a {@link java.util.concurrent.ThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskExecutor, using a single thread executor as default., +	 * Create a new ConcurrentTaskExecutor, using the given {@link java.util.concurrent.Executor}., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * Specify the {@link java.util.concurrent.Executor} to delegate to., +	 * Return the {@link java.util.concurrent.Executor} that this adapter delegates to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, + * Adapter that takes a {@code java.util.concurrent.ScheduledExecutorService} and, + * exposes a Spring {@link org.springframework.scheduling.TaskScheduler} for it., + * defining a {@link java.util.concurrent.ScheduledThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskScheduler, using the given, +	 * {@link java.util.concurrent.ScheduledExecutorService} as shared delegate., +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link org.springframework.scheduling.SchedulingTaskExecutor}, +	 * as well as {@link TaskScheduler} invocations, +	 * Create a new ConcurrentTaskScheduler, using the given {@link java.util.concurrent.Executor}, +	 * and {@link java.util.concurrent.ScheduledExecutorService} as delegates., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link TaskScheduler} invocations, +	 * Specify the {@link java.util.concurrent.ScheduledExecutorService} to delegate to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/CustomizableThreadFactory.java, + * Copyright 2002-2013 the original author or authors., + * Implementation of the {@link java.util.concurrent.ThreadFactory} interface,, + * allowing for customizing the created threads (name, priority, etc)., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Adapter that takes a {@code java.util.concurrent.Executor} and exposes, + * a Spring {@link org.springframework.core.task.TaskExecutor} for it., + * <p>Note that there is a pre-built {@link ThreadPoolTaskExecutor} that allows, + * for defining a {@link java.util.concurrent.ThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskExecutor, using a single thread executor as default., +	 * Create a new ConcurrentTaskExecutor, using the given {@link java.util.concurrent.Executor}., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * Specify the {@link java.util.concurrent.Executor} to delegate to., +	 * Return the {@link java.util.concurrent.Executor} that this adapter delegates to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, + * Adapter that takes a {@code java.util.concurrent.ScheduledExecutorService} and, + * exposes a Spring {@link org.springframework.scheduling.TaskScheduler} for it., + * defining a {@link java.util.concurrent.ScheduledThreadPoolExecutor} in bean style,, +	 * Create a new ConcurrentTaskScheduler, using the given, +	 * {@link java.util.concurrent.ScheduledExecutorService} as shared delegate., +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link org.springframework.scheduling.SchedulingTaskExecutor}, +	 * as well as {@link TaskScheduler} invocations, +	 * Create a new ConcurrentTaskScheduler, using the given {@link java.util.concurrent.Executor}, +	 * and {@link java.util.concurrent.ScheduledExecutorService} as delegates., +	 * @param concurrentExecutor the {@link java.util.concurrent.Executor} to delegate to, +	 * @param scheduledExecutor the {@link java.util.concurrent.ScheduledExecutorService}, +	 * to delegate to for {@link TaskScheduler} invocations, +	 * Specify the {@link java.util.concurrent.ScheduledExecutorService} to delegate to., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/CustomizableThreadFactory.java, + * Copyright 2002-2013 the original author or authors., + * Implementation of the {@link java.util.concurrent.ThreadFactory} interface,, + * allowing for customizing the created threads (name, priority, etc)., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * a {@link java.util.concurrent.ScheduledExecutorService}, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Adapter that takes a {@code java.util.concurrent.Executor} and exposes, + * a Spring {@link org.springframework.core.task.TaskExecutor} for it., + * <p>Note that there is a pre-built {@link ThreadPoolTaskExecutor} that allows, + * for defining a {@link java.util.concurrent.ThreadPoolExecutor} in bean style,]