[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java, + * @author Rossen Stoyanchev, +		BeanDefinition handlerMapping = registerHandlerMapping(parserContext, source);, +		RootBeanDefinition controller = new RootBeanDefinition(ParameterizableViewController.class);, +		controller.setSource(source);, +			controller.getPropertyValues().add("viewName", element.getAttribute("view-name"));, +		if (handlerMapping.getPropertyValues().contains("urlMap")) {, +			urlMap = (Map<String, BeanDefinition>) handlerMapping.getPropertyValues().getPropertyValue("urlMap").getValue();, +			handlerMapping.getPropertyValues().add("urlMap", urlMap);, +		urlMap.put(element.getAttribute("path"), controller);, +	private BeanDefinition registerHandlerMapping(ParserContext context, Object source) {, +		if (context.getRegistry().containsBeanDefinition(HANDLER_MAPPING_BEAN_NAME)) {, +			return context.getRegistry().getBeanDefinition(HANDLER_MAPPING_BEAN_NAME);, +		RootBeanDefinition beanDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);, +		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		context.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, beanDef);, +		context.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_BEAN_NAME));, +		beanDef.setSource(source);, +		beanDef.getPropertyValues().add("order", "1");, +		beanDef.getPropertyValues().add("pathMatcher", MvcNamespaceUtils.registerPathMatcher(null, context, source));, +		beanDef.getPropertyValues().add("urlPathHelper", MvcNamespaceUtils.registerUrlPathHelper(null, context, source));, +, +		return beanDef;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java, + * @author Rossen Stoyanchev, +		BeanDefinition handlerMapping = registerHandlerMapping(parserContext, source);, +		RootBeanDefinition controller = new RootBeanDefinition(ParameterizableViewController.class);, +		controller.setSource(source);, +			controller.getPropertyValues().add("viewName", element.getAttribute("view-name"));, +		if (handlerMapping.getPropertyValues().contains("urlMap")) {, +			urlMap = (Map<String, BeanDefinition>) handlerMapping.getPropertyValues().getPropertyValue("urlMap").getValue();, +			handlerMapping.getPropertyValues().add("urlMap", urlMap);, +		urlMap.put(element.getAttribute("path"), controller);, +	private BeanDefinition registerHandlerMapping(ParserContext context, Object source) {, +		if (context.getRegistry().containsBeanDefinition(HANDLER_MAPPING_BEAN_NAME)) {, +			return context.getRegistry().getBeanDefinition(HANDLER_MAPPING_BEAN_NAME);, +		RootBeanDefinition beanDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);, +		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		context.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, beanDef);, +		context.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_BEAN_NAME));, +		beanDef.setSource(source);, +		beanDef.getPropertyValues().add("order", "1");, +		beanDef.getPropertyValues().add("pathMatcher", MvcNamespaceUtils.registerPathMatcher(null, context, source));, +		beanDef.getPropertyValues().add("urlPathHelper", MvcNamespaceUtils.registerUrlPathHelper(null, context, source));, +, +		return beanDef;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java, + * Copyright 2002-2014 the original author or authors., + * Assist with the registration of a single view controller., +, +	 * Creates a registration for the given URL path (or path pattern)., +		Assert.notNull(urlPath, "'urlPath' is required.");, +, +	 * Set the view name to return., +	 *, +	 * <p>If not specified, the view controller returns {@code null} as the view, +	 * name in which case the configured {@link RequestToViewNameTranslator}, +	 * selects the view. In effect {@code DefaultRequestToViewNameTranslator}, +	 * translates "/foo/bar" to "foo/bar"., +	 *, +	 * @see org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator, +, +		return this.urlPath;, +		controller.setViewName(this.viewName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java, + * @author Rossen Stoyanchev, +		BeanDefinition handlerMapping = registerHandlerMapping(parserContext, source);, +		RootBeanDefinition controller = new RootBeanDefinition(ParameterizableViewController.class);, +		controller.setSource(source);, +			controller.getPropertyValues().add("viewName", element.getAttribute("view-name"));, +		if (handlerMapping.getPropertyValues().contains("urlMap")) {, +			urlMap = (Map<String, BeanDefinition>) handlerMapping.getPropertyValues().getPropertyValue("urlMap").getValue();, +			handlerMapping.getPropertyValues().add("urlMap", urlMap);, +		urlMap.put(element.getAttribute("path"), controller);, +	private BeanDefinition registerHandlerMapping(ParserContext context, Object source) {, +		if (context.getRegistry().containsBeanDefinition(HANDLER_MAPPING_BEAN_NAME)) {, +			return context.getRegistry().getBeanDefinition(HANDLER_MAPPING_BEAN_NAME);, +		RootBeanDefinition beanDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);, +		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		context.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, beanDef);, +		context.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_BEAN_NAME));, +		beanDef.setSource(source);, +		beanDef.getPropertyValues().add("order", "1");, +		beanDef.getPropertyValues().add("pathMatcher", MvcNamespaceUtils.registerPathMatcher(null, context, source));, +		beanDef.getPropertyValues().add("urlPathHelper", MvcNamespaceUtils.registerUrlPathHelper(null, context, source));, +, +		return beanDef;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java, + * Copyright 2002-2014 the original author or authors., + * Assist with the registration of a single view controller., +, +	 * Creates a registration for the given URL path (or path pattern)., +		Assert.notNull(urlPath, "'urlPath' is required.");, +, +	 * Set the view name to return., +	 *, +	 * <p>If not specified, the view controller returns {@code null} as the view, +	 * name in which case the configured {@link RequestToViewNameTranslator}, +	 * selects the view. In effect {@code DefaultRequestToViewNameTranslator}, +	 * translates "/foo/bar" to "foo/bar".]