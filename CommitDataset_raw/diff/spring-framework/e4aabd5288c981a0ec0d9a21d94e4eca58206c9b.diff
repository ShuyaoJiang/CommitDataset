[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, +import javax.xml.bind.JAXBElement;, +	 * Construct a new {@code MarshallingView} with no {@link Marshaller} set., +	 * Set the {@link Marshaller} to be used by this view., +			Object value = model.get(this.modelKey);, +			if (value == null) {, +			if (!isEligibleForMarshalling(this.modelKey, value)) {, +				throw new IllegalStateException("Model object [" + value + "] retrieved via key [" +, +			return value;, +		for (Map.Entry<String, Object> entry : model.entrySet()) {, +			Object value = entry.getValue();, +			if (value != null && (model.size() == 1 || !(value instanceof BindingResult)) &&, +					isEligibleForMarshalling(entry.getKey(), value)) {, +				return value;, +	/**, +	 * Check whether the given value from the current view's model is eligible, +	 * for marshalling through the configured {@link Marshaller}., +	 * <p>The default implementation calls {@link Marshaller#supports(Class)},, +	 * unwrapping a given {@link JAXBElement} first if applicable., +	 * @param modelKey the value's key in the model (never {@code null}), +	 * @param value the value to check (never {@code null}), +	 * @return whether the given value is to be considered as eligible, +	 * @see Marshaller#supports(Class), +	 */, +	protected boolean isEligibleForMarshalling(String modelKey, Object value) {, +		Class<?> classToCheck = value.getClass();, +		if (value instanceof JAXBElement) {, +			classToCheck = ((JAXBElement) value).getDeclaredType();, +		}, +		return this.marshaller.supports(classToCheck);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, +import javax.xml.bind.JAXBElement;, +	 * Construct a new {@code MarshallingView} with no {@link Marshaller} set., +	 * Set the {@link Marshaller} to be used by this view., +			Object value = model.get(this.modelKey);, +			if (value == null) {, +			if (!isEligibleForMarshalling(this.modelKey, value)) {, +				throw new IllegalStateException("Model object [" + value + "] retrieved via key [" +, +			return value;, +		for (Map.Entry<String, Object> entry : model.entrySet()) {, +			Object value = entry.getValue();, +			if (value != null && (model.size() == 1 || !(value instanceof BindingResult)) &&, +					isEligibleForMarshalling(entry.getKey(), value)) {, +				return value;, +	/**, +	 * Check whether the given value from the current view's model is eligible, +	 * for marshalling through the configured {@link Marshaller}., +	 * <p>The default implementation calls {@link Marshaller#supports(Class)},, +	 * unwrapping a given {@link JAXBElement} first if applicable., +	 * @param modelKey the value's key in the model (never {@code null}), +	 * @param value the value to check (never {@code null}), +	 * @return whether the given value is to be considered as eligible, +	 * @see Marshaller#supports(Class), +	 */, +	protected boolean isEligibleForMarshalling(String modelKey, Object value) {, +		Class<?> classToCheck = value.getClass();, +		if (value instanceof JAXBElement) {, +			classToCheck = ((JAXBElement) value).getDeclaredType();, +		}, +		return this.marshaller.supports(classToCheck);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/xml/MarshallingViewTests.java, +import javax.xml.bind.JAXBElement;, +import javax.xml.namespace.QName;, + * @author Juergen Hoeller, +	public void renderModelKeyWithJaxbElement() throws Exception {, +		String toBeMarshalled = "value";, +		String modelKey = "key";, +		view.setModelKey(modelKey);, +		Map<String, Object> model = new HashMap<String, Object>();, +		model.put(modelKey, new JAXBElement<String>(new QName("model"), String.class, toBeMarshalled));, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		given(marshallerMock.supports(String.class)).willReturn(true);, +		marshallerMock.marshal(eq(toBeMarshalled), isA(StreamResult.class));, +, +		view.render(model, request, response);, +		assertEquals("Invalid content type", "application/xml", response.getContentType());, +		assertEquals("Invalid content length", 0, response.getContentLength());, +	}, +, +	@Test]