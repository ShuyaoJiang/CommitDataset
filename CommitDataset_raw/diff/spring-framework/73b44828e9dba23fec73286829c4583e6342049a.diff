[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import java.util.*;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import reactor.core.publisher.Flux;, +	private static final Object NO_VALUE = new Object();, +, +	private final ReactiveAdapterRegistry adapterRegistry;, +, +		this(new ReactiveAdapterRegistry());, +	}, +, +	public AbstractView(ReactiveAdapterRegistry registry) {, +		this.adapterRegistry = registry;, +		return getModelAttributes(model, exchange).then(mergedModel -> {, +		});, +	protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +		return resolveAsyncAttributes(attributes).then(Mono.just(attributes));, +	}, +, +	/**, +	 * By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts., +	 * <p>View implementations capable of taking advantage of reactive types can override this method if needed., +	 * @return {@code Mono} to represent when the async attributes have been resolved, +	 */, +	protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {, +, +		List<String> names = new ArrayList<>();, +		List<Mono<?>> valueMonos = new ArrayList<>();, +, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +			Object value =  entry.getValue();, +			if (value == null) {, +				continue;, +			}, +			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value);, +			if (adapter != null) {, +				names.add(entry.getKey());, +				if (adapter.isMultiValue()) {, +					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value));, +					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()));, +				}, +				else {, +					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value));, +					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE));, +				}, +			}, +		}, +, +		if (names.isEmpty()) {, +			return Mono.empty();, +		}, +, +		return Mono.when(valueMonos,, +				values -> {, +					for (int i=0; i < values.length; i++) {, +						if (values[i] != NO_VALUE) {, +							model.put(names.get(i), values[i]);, +						}, +						else {, +							model.remove(names.get(i));, +						}, +					}, +					return NO_VALUE;, +				}), +				.then();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import java.util.*;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import reactor.core.publisher.Flux;, +	private static final Object NO_VALUE = new Object();, +, +	private final ReactiveAdapterRegistry adapterRegistry;, +, +		this(new ReactiveAdapterRegistry());, +	}, +, +	public AbstractView(ReactiveAdapterRegistry registry) {, +		this.adapterRegistry = registry;, +		return getModelAttributes(model, exchange).then(mergedModel -> {, +		});, +	protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +		return resolveAsyncAttributes(attributes).then(Mono.just(attributes));, +	}, +, +	/**, +	 * By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts., +	 * <p>View implementations capable of taking advantage of reactive types can override this method if needed., +	 * @return {@code Mono} to represent when the async attributes have been resolved, +	 */, +	protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {, +, +		List<String> names = new ArrayList<>();, +		List<Mono<?>> valueMonos = new ArrayList<>();, +, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +			Object value =  entry.getValue();, +			if (value == null) {, +				continue;]