[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +import java.util.Optional;, +import java.util.function.Function;, +, +, +import org.springframework.util.Assert;, + * Adapt a Reactive Streams {@link Publisher} to and from an async/reactive type, + * such as {@code CompletableFuture}, an RxJava {@code Observable}, etc., + * <p>Use the {@link ReactiveAdapterRegistry} to register reactive types and, + * obtain adapters from., +public class ReactiveAdapter {, +, +	private final ReactiveTypeDescriptor descriptor;, +, +	private final Function<Object, Publisher<?>> toPublisherFunction;, +, +	private final Function<Publisher<?>, Object> fromPublisherFunction;, +, +	 * Constructor for an adapter with functions to convert the target reactive, +	 * or async type to and from a Reactive Streams Publisher., +	 * @param descriptor the reactive type descriptor, +	 * @param toPublisherFunction adapter to a Publisher, +	 * @param fromPublisherFunction adapter from a Publisher, +	public ReactiveAdapter(ReactiveTypeDescriptor descriptor,, +			Function<Object, Publisher<?>> toPublisherFunction,, +			Function<Publisher<?>, Object> fromPublisherFunction) {, +, +		Assert.notNull(descriptor, "'descriptor' is required");, +		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required");, +		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required");, +, +		this.descriptor = descriptor;, +		this.toPublisherFunction = toPublisherFunction;, +		this.fromPublisherFunction = fromPublisherFunction;, +	}, +, +	 * Return the descriptor of the reactive type for the adapter., +	public ReactiveTypeDescriptor getDescriptor() {, +		return this.descriptor;, +	}, +	 * Adapt the given instance to a Reactive Streams Publisher., +	 * @param source the source object to adapt from, +	 * @return the Publisher repesenting the adaptation, +	@SuppressWarnings("unchecked"), +	public <T> Publisher<T> toPublisher(Object source) {, +		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);, +		if (source == null) {, +			source = getDescriptor().getEmptyValue();, +		}, +		return (Publisher<T>) this.toPublisherFunction.apply(source);, +	}, +	 * Adapt from the given Reactive Streams Publisher., +	 * @param publisher the publisher to adapt from, +	 * @return the reactive type instance representing the adapted publisher, +	public Object fromPublisher(Publisher<?> publisher) {, +		return (publisher != null ? this.fromPublisherFunction.apply(publisher) : null);, +	}, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +import java.util.Optional;, +import java.util.function.Function;, +, +, +import org.springframework.util.Assert;, + * Adapt a Reactive Streams {@link Publisher} to and from an async/reactive type, + * such as {@code CompletableFuture}, an RxJava {@code Observable}, etc., + * <p>Use the {@link ReactiveAdapterRegistry} to register reactive types and, + * obtain adapters from., +public class ReactiveAdapter {, +, +	private final ReactiveTypeDescriptor descriptor;, +, +	private final Function<Object, Publisher<?>> toPublisherFunction;, +, +	private final Function<Publisher<?>, Object> fromPublisherFunction;, +, +	 * Constructor for an adapter with functions to convert the target reactive, +	 * or async type to and from a Reactive Streams Publisher., +	 * @param descriptor the reactive type descriptor, +	 * @param toPublisherFunction adapter to a Publisher, +	 * @param fromPublisherFunction adapter from a Publisher, +	public ReactiveAdapter(ReactiveTypeDescriptor descriptor,, +			Function<Object, Publisher<?>> toPublisherFunction,, +			Function<Publisher<?>, Object> fromPublisherFunction) {, +, +		Assert.notNull(descriptor, "'descriptor' is required");, +		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required");, +		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required");, +, +		this.descriptor = descriptor;, +		this.toPublisherFunction = toPublisherFunction;, +		this.fromPublisherFunction = fromPublisherFunction;, +	}, +, +	 * Return the descriptor of the reactive type for the adapter., +	public ReactiveTypeDescriptor getDescriptor() {, +		return this.descriptor;, +	}, +	 * Adapt the given instance to a Reactive Streams Publisher., +	 * @param source the source object to adapt from, +	 * @return the Publisher repesenting the adaptation]