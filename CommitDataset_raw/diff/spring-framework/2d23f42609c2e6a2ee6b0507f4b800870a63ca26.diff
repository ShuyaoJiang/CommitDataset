[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2015 the original author or authors., + * the presence of Spring's {@link Scope @Scope} annotation on the bean class., + * <p>The exact type of annotation that is checked for is configurable via, + * {@link #setScopeAnnotationType(Class)}., + * @author Sam Brannen, +	 * Construct a new {@code AnnotationScopeMetadataResolver}., +		this(ScopedProxyMode.NO);, +	 * Construct a new {@code AnnotationScopeMetadataResolver} using the, +	 * supplied default {@link ScopedProxyMode}., +	 * @param defaultProxyMode the default scoped-proxy mode, +	 * {@code AnnotationScopeMetadataResolver}., +				metadata.setScopeName(attributes.getAliasedString("value", this.scopeAnnotationType, definition.getSource()));, +				if ((proxyMode == null) || (proxyMode == ScopedProxyMode.DEFAULT)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2015 the original author or authors., + * the presence of Spring's {@link Scope @Scope} annotation on the bean class., + * <p>The exact type of annotation that is checked for is configurable via, + * {@link #setScopeAnnotationType(Class)}., + * @author Sam Brannen, +	 * Construct a new {@code AnnotationScopeMetadataResolver}., +		this(ScopedProxyMode.NO);, +	 * Construct a new {@code AnnotationScopeMetadataResolver} using the, +	 * supplied default {@link ScopedProxyMode}., +	 * @param defaultProxyMode the default scoped-proxy mode, +	 * {@code AnnotationScopeMetadataResolver}., +				metadata.setScopeName(attributes.getAliasedString("value", this.scopeAnnotationType, definition.getSource()));, +				if ((proxyMode == null) || (proxyMode == ScopedProxyMode.DEFAULT)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @author Sam Brannen, +		// TODO Determine why type is hard coded to org.springframework.context.annotation.Scope,, +		// since AnnotationScopeMetadataResolver supports a custom scope annotation type., +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);, +		if (attributes != null) {, +			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()));, +			proxyMode = attributes.getEnum("proxyMode");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2015 the original author or authors., + * the presence of Spring's {@link Scope @Scope} annotation on the bean class., + * <p>The exact type of annotation that is checked for is configurable via, + * {@link #setScopeAnnotationType(Class)}., + * @author Sam Brannen, +	 * Construct a new {@code AnnotationScopeMetadataResolver}., +		this(ScopedProxyMode.NO);, +	 * Construct a new {@code AnnotationScopeMetadataResolver} using the, +	 * supplied default {@link ScopedProxyMode}., +	 * @param defaultProxyMode the default scoped-proxy mode, +	 * {@code AnnotationScopeMetadataResolver}., +				metadata.setScopeName(attributes.getAliasedString("value", this.scopeAnnotationType, definition.getSource()));, +				if ((proxyMode == null) || (proxyMode == ScopedProxyMode.DEFAULT)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @author Sam Brannen, +		// TODO Determine why type is hard coded to org.springframework.context.annotation.Scope,, +		// since AnnotationScopeMetadataResolver supports a custom scope annotation type., +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);, +		if (attributes != null) {, +			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()));, +			proxyMode = attributes.getEnum("proxyMode");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Scope.java, +import org.springframework.core.annotation.AliasFor;, +	 * Alias for {@link #name}., +	 * @see #name, +	 */, +	@AliasFor(attribute = "name"), +	String value() default "";, +, +	/**, +	 * Specifies the name of the scope to use for the annotated component/bean., +	 * <p>Defaults to an empty string ({@code ""}) which implies, +	 * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}., +	 * @since 4.2, +	 * @see ConfigurableBeanFactory#SCOPE_SINGLETON, +	 * @see #value, +	@AliasFor(attribute = "value"), +	String name() default "";, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2015 the original author or authors., + * the presence of Spring's {@link Scope @Scope} annotation on the bean class., + * <p>The exact type of annotation that is checked for is configurable via, + * {@link #setScopeAnnotationType(Class)}., + * @author Sam Brannen, +	 * Construct a new {@code AnnotationScopeMetadataResolver}., +		this(ScopedProxyMode.NO);, +	 * Construct a new {@code AnnotationScopeMetadataResolver} using the, +	 * supplied default {@link ScopedProxyMode}., +	 * @param defaultProxyMode the default scoped-proxy mode, +	 * {@code AnnotationScopeMetadataResolver}., +				metadata.setScopeName(attributes.getAliasedString("value", this.scopeAnnotationType, definition.getSource()));, +				if ((proxyMode == null) || (proxyMode == ScopedProxyMode.DEFAULT)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @author Sam Brannen, +		// TODO Determine why type is hard coded to org.springframework.context.annotation.Scope,, +		// since AnnotationScopeMetadataResolver supports a custom scope annotation type., +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);, +		if (attributes != null) {, +			beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()));, +			proxyMode = attributes.getEnum("proxyMode");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Scope.java, +import org.springframework.core.annotation.AliasFor;, +	 * Alias for {@link #name}.]