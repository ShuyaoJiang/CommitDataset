[+++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +import org.springframework.core.ResolvableType;, +import org.springframework.core.ResolvableTypeProvider;, +public class PayloadApplicationEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {, +	@Override, +	public ResolvableType getResolvableType() {, +		return ResolvableType.forClassWithGenerics(getClass(),, +				ResolvableType.forInstance(getPayload()));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +import org.springframework.core.ResolvableType;, +import org.springframework.core.ResolvableTypeProvider;, +public class PayloadApplicationEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {, +	@Override, +	public ResolvableType getResolvableType() {, +		return ResolvableType.forClassWithGenerics(getClass(),, +				ResolvableType.forInstance(getPayload()));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			PayloadApplicationEvent<?> payloadEvent = (PayloadApplicationEvent<?>) event;, +			ResolvableType payloadType =  payloadEvent.getResolvableType(), +					.as(PayloadApplicationEvent.class).getGeneric(0);, +			if (this.declaredEventType.isAssignableFrom(payloadType)) {, +				return new Object[] {payloadEvent.getPayload()};, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +import org.springframework.core.ResolvableType;, +import org.springframework.core.ResolvableTypeProvider;, +public class PayloadApplicationEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {, +	@Override, +	public ResolvableType getResolvableType() {, +		return ResolvableType.forClassWithGenerics(getClass(),, +				ResolvableType.forInstance(getPayload()));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			PayloadApplicationEvent<?> payloadEvent = (PayloadApplicationEvent<?>) event;, +			ResolvableType payloadType =  payloadEvent.getResolvableType(), +					.as(PayloadApplicationEvent.class).getGeneric(0);, +			if (this.declaredEventType.isAssignableFrom(payloadType)) {, +				return new Object[] {payloadEvent.getPayload()};, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, +		return ResolvableType.forInstance(event);, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +import org.springframework.core.ResolvableType;, +import org.springframework.core.ResolvableTypeProvider;, +public class PayloadApplicationEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {, +	@Override, +	public ResolvableType getResolvableType() {, +		return ResolvableType.forClassWithGenerics(getClass(),, +				ResolvableType.forInstance(getPayload()));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			PayloadApplicationEvent<?> payloadEvent = (PayloadApplicationEvent<?>) event;, +			ResolvableType payloadType =  payloadEvent.getResolvableType(), +					.as(PayloadApplicationEvent.class).getGeneric(0);, +			if (this.declaredEventType.isAssignableFrom(payloadType)) {, +				return new Object[] {payloadEvent.getPayload()};, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, +		return ResolvableType.forInstance(event);, +++ b/spring-context/src/test/java/org/springframework/context/event/AbstractApplicationEventListenerTests.java, +import org.springframework.core.ResolvableTypeProvider;, +	protected static class SmartGenericTestEvent<T>, +			extends GenericTestEvent<T> implements ResolvableTypeProvider {, +, +		private final ResolvableType resolvableType;, +, +		public SmartGenericTestEvent(Object source, T payload) {, +			super(source, payload);, +			this.resolvableType = ResolvableType.forClassWithGenerics(, +					getClass(), payload.getClass());, +		}, +, +		@Override, +		public ResolvableType getResolvableType() {, +			return this.resolvableType;, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +import org.springframework.core.ResolvableType;, +import org.springframework.core.ResolvableTypeProvider;, +public class PayloadApplicationEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {, +	@Override, +	public ResolvableType getResolvableType() {, +		return ResolvableType.forClassWithGenerics(getClass(),, +				ResolvableType.forInstance(getPayload()));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			PayloadApplicationEvent<?> payloadEvent = (PayloadApplicationEvent<?>) event;, +			ResolvableType payloadType =  payloadEvent.getResolvableType(), +					.as(PayloadApplicationEvent.class).getGeneric(0);, +			if (this.declaredEventType.isAssignableFrom(payloadType)) {, +				return new Object[] {payloadEvent.getPayload()};, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, +		return ResolvableType.forInstance(event);, +++ b/spring-context/src/test/java/org/springframework/context/event/AbstractApplicationEventListenerTests.java, +import org.springframework.core.ResolvableTypeProvider;, +	protected static class SmartGenericTestEvent<T>, +			extends GenericTestEvent<T> implements ResolvableTypeProvider {, +, +		private final ResolvableType resolvableType;]