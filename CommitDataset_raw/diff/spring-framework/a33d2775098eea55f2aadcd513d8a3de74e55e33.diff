[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import java.util.Arrays;, +import org.junit.BeforeClass;, +import org.springframework.web.method.annotation.support.ModelMethodProcessor;, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandler;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletRequestMethodArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ViewNameMethodReturnValueHandler;, +	private static int RESOLVER_COUNT;, +	, +	private static int HANDLER_COUNT;, +, +	@BeforeClass, +	public static void setupOnce() {, +		ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver();, +		resolver.afterPropertiesSet();, +		RESOLVER_COUNT = resolver.getArgumentResolvers().getResolvers().size();, +		HANDLER_COUNT = resolver.getReturnValueHandlers().getHandlers().size();, +	}, +	, +	public void nullHandler() {, +		Object handler = null;, +		this.resolver.afterPropertiesSet();, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, handler, null);, +		assertNull("Exception can be resolved only if there is a HandlerMethod", mav);, +	public void setCustomArgumentResolvers() throws Exception {, +		HandlerMethodArgumentResolver resolver = new ServletRequestMethodArgumentResolver();, +		this.resolver.setCustomArgumentResolvers(Arrays.asList(resolver));, +		this.resolver.afterPropertiesSet();, +		, +		assertTrue(this.resolver.getArgumentResolvers().getResolvers().contains(resolver));, +		assertMethodProcessorCount(RESOLVER_COUNT + 1, HANDLER_COUNT);, +	}, +, +	@Test, +	public void setArgumentResolvers() throws Exception {, +		HandlerMethodArgumentResolver resolver = new ServletRequestMethodArgumentResolver();, +		this.resolver.setArgumentResolvers(Arrays.asList(resolver));, +		this.resolver.afterPropertiesSet();, +, +		assertMethodProcessorCount(1, HANDLER_COUNT);, +	}, +, +	@Test, +	public void setCustomReturnValueHandlers() {, +		HandlerMethodReturnValueHandler handler = new ViewNameMethodReturnValueHandler();, +		this.resolver.setCustomReturnValueHandlers(Arrays.asList(handler));, +		this.resolver.afterPropertiesSet();, +, +		assertTrue(this.resolver.getReturnValueHandlers().getHandlers().contains(handler));, +		assertMethodProcessorCount(RESOLVER_COUNT, HANDLER_COUNT + 1);, +	}, +	, +	@Test, +	public void setReturnValueHandlers() {, +		HandlerMethodReturnValueHandler handler = new ModelMethodProcessor();, +		this.resolver.setReturnValueHandlers(Arrays.asList(handler));, +		this.resolver.afterPropertiesSet();, +, +		assertMethodProcessorCount(RESOLVER_COUNT, 1);, +	}, +, +	@Test, +	public void resolveNoExceptionHandlerForException() throws NoSuchMethodException {, +		Exception npe = new NullPointerException();, +		this.resolver.afterPropertiesSet();, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, npe);, +		assertNull("NPE should not have been handled", mav);, +	public void resolveExceptionModelAndView() throws NoSuchMethodException {, +		this.resolver.afterPropertiesSet();, +	public void resolveExceptionResponseBody() throws UnsupportedEncodingException, NoSuchMethodException {, +		HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle");, +		this.resolver.afterPropertiesSet();, +	public void resolveExceptionResponseWriter() throws UnsupportedEncodingException, NoSuchMethodException {, +		HandlerMethod handlerMethod = new HandlerMethod(new ResponseWriterController(), "handle");, +		this.resolver.afterPropertiesSet();, +	, +	private void assertMethodProcessorCount(int resolverCount, int handlerCount) {, +		assertEquals(resolverCount, this.resolver.getArgumentResolvers().getResolvers().size());, +		assertEquals(handlerCount, this.resolver.getReturnValueHandlers().getHandlers().size());, +	}, +, +	static class ResponseWriterController {, +		public void handleException(Exception ex, Writer writer) throws IOException {, +		public String handleException(Exception ex) {, +		public void handle() {}, +, +		public void handleException() {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import java.util.Arrays;, +import org.junit.BeforeClass;, +import org.springframework.web.method.annotation.support.ModelMethodProcessor;, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandler;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletRequestMethodArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ViewNameMethodReturnValueHandler;, +	private static int RESOLVER_COUNT;, +	, +	private static int HANDLER_COUNT;, +]