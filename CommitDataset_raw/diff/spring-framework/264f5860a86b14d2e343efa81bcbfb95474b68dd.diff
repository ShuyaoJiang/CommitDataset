[+++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(attributeValue, () -> String.format("Attribute '%s' not found in attributes for annotation [%s]",, +				attributeName, this.displayName));, +		Assert.notNull(attributeValue, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(attributeValue, () -> String.format("Attribute '%s' not found in attributes for annotation [%s]",, +				attributeName, this.displayName));, +		Assert.notNull(attributeValue, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +import org.springframework.util.Assert;, +			Assert.notNull(attributeValue, () -> String.format(, +				Assert.isTrue(converted, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(attributeValue, () -> String.format("Attribute '%s' not found in attributes for annotation [%s]",, +				attributeName, this.displayName));, +		Assert.notNull(attributeValue, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +import org.springframework.util.Assert;, +			Assert.notNull(attributeValue, () -> String.format(, +				Assert.isTrue(converted, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +import org.springframework.util.Assert;, +		Assert.notNull(enumType, () -> "The target type " + targetType.getName() + " does not refer to an enum");, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(attributeValue, () -> String.format("Attribute '%s' not found in attributes for annotation [%s]",, +				attributeName, this.displayName));, +		Assert.notNull(attributeValue, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +import org.springframework.util.Assert;, +			Assert.notNull(attributeValue, () -> String.format(, +				Assert.isTrue(converted, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +import org.springframework.util.Assert;, +		Assert.notNull(enumType, () -> "The target type " + targetType.getName() + " does not refer to an enum");, +++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +, +		Assert.notNull(inputStream, "InputStream must not be null");, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Assert.isTrue(resolvableType.getGenerics().length == 1,, +				() -> "Expected 1 type argument on generic interface [" + resolvableType +, +				"] but found " + resolvableType.getGenerics().length);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		Assert.isTrue(parameterIndex < count, () -> "Parameter index needs to be between 0 and " + (count - 1));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(attributeValue, () -> String.format("Attribute '%s' not found in attributes for annotation [%s]",, +				attributeName, this.displayName));, +		Assert.notNull(attributeValue, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +import org.springframework.util.Assert;, +			Assert.notNull(attributeValue, () -> String.format(, +				Assert.isTrue(converted, () -> String.format(, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +import org.springframework.util.Assert;, +		Assert.notNull(enumType, () -> "The target type " + targetType.getName() + " does not refer to an enum");, +++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +, +		Assert.notNull(inputStream, "InputStream must not be null");]