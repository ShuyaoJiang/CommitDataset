[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2010 the original author or authors., +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2010 the original author or authors., +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +@SuppressWarnings({"unchecked", "unused"}), +		Map<Runnable, String> cronTasks = (Map<Runnable, String>), +	@Test, +	public void metaAnnotationWithFixedRate() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.MetaAnnotationFixedRateTestBean.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		Map<Runnable, Long> fixedRateTasks = (Map<Runnable, Long>), +				new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks");, +		assertEquals(1, fixedRateTasks.size());, +		MethodInvokingRunnable runnable = (MethodInvokingRunnable) fixedRateTasks.keySet().iterator().next();, +		Object targetObject = runnable.getTargetObject();, +		String targetMethod = runnable.getTargetMethod();, +		assertEquals(target, targetObject);, +		assertEquals("checkForUpdates", targetMethod);, +		assertEquals(new Long(5000), fixedRateTasks.values().iterator().next());, +	}, +, +	@Test, +	public void metaAnnotationWithCronExpression() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.MetaAnnotationCronTestBean.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		Map<Runnable, String> cronTasks = (Map<Runnable, String>), +				new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");, +		assertEquals(1, cronTasks.size());, +		MethodInvokingRunnable runnable = (MethodInvokingRunnable) cronTasks.keySet().iterator().next();, +		Object targetObject = runnable.getTargetObject();, +		String targetMethod = runnable.getTargetMethod();, +		assertEquals(target, targetObject);, +		assertEquals("generateReport", targetMethod);, +		assertEquals("0 0 * * * ?", cronTasks.values().iterator().next());, +	}, +, +, +	@Scheduled(fixedRate = 5000), +	@Target(ElementType.METHOD), +	@Retention(RetentionPolicy.RUNTIME), +	private static @interface EveryFiveSeconds {}, +, +, +	@Scheduled(cron = "0 0 * * * ?"), +	@Target(ElementType.METHOD), +	@Retention(RetentionPolicy.RUNTIME), +	private static @interface Hourly {}, +, +, +	private static class MetaAnnotationFixedRateTestBean {, +, +		@EveryFiveSeconds, +		public void checkForUpdates() {, +		}, +	}, +, +, +	private static class MetaAnnotationCronTestBean {, +, +		@Hourly, +		public void generateReport() {, +		}, +	}, +]