[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +import org.springframework.beans.BeanInstantiationException;, +import org.springframework.beans.BeanUtils;, +import org.springframework.cglib.proxy.Factory;, + *, + * <p>Uses CGLIB to generate subclasses dynamically if methods need to be, + * overridden by the container to implement <em>Method Injection</em>., + * @author Sam Brannen, +	 * be overridden to provide <em>method lookup</em>., +	protected Object instantiateWithMethodInjection(RootBeanDefinition beanDefinition, String beanName,, +			BeanFactory owner) {, +		return instantiateWithMethodInjection(beanDefinition, beanName, owner, null, null);, +	protected Object instantiateWithMethodInjection(RootBeanDefinition beanDefinition, String beanName,, +			BeanFactory owner, Constructor<?> ctor, Object[] args) {, +		// Must generate CGLIB subclass., +		private static final Class<?>[] CALLBACK_TYPES = new Class<?>[] { NoOp.class,, +			LookupOverrideMethodInterceptor.class, ReplaceOverrideMethodInterceptor.class };, +, +		CglibSubclassCreator(RootBeanDefinition beanDefinition, BeanFactory owner) {, +		 * Ignored if the {@code ctor} parameter is {@code null}., +		Object instantiate(Constructor<?> ctor, Object[] args) {, +			Class<?> subclass = createEnhancedSubclass(this.beanDefinition);, +			Object instance;, +			if (ctor == null) {, +				instance = BeanUtils.instantiate(subclass);, +			}, +			else {, +				try {, +					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());, +					instance = enhancedSubclassConstructor.newInstance(args);, +				}, +				catch (Exception e) {, +					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(), String.format(, +						"Failed to invoke construcor for CGLIB enhanced subclass [%s]", subclass.getName()), e);, +				}, +			// SPR-10785: set callbacks directly on the instance instead of in the, +			// enhanced class (via the Enhancer) in order to avoid memory leaks., +			Factory factory = (Factory) instance;, +			factory.setCallbacks(new Callback[] { NoOp.INSTANCE,//, +				new LookupOverrideMethodInterceptor(beanDefinition, owner),//, +				new ReplaceOverrideMethodInterceptor(beanDefinition, owner) });, +, +			return instance;, +		}, +, +		/**, +		 * Create an enhanced subclass of the bean class for the provided bean, +		 * definition, using CGLIB., +		 */, +		private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {, +			Enhancer enhancer = new Enhancer();, +			enhancer.setSuperclass(beanDefinition.getBeanClass());, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			enhancer.setCallbackFilter(new CallbackFilterImpl(beanDefinition));, +			enhancer.setCallbackTypes(CALLBACK_TYPES);, +			return enhancer.createClass();, +		}, +	}, +	private static class CglibIdentitySupport {, +, +		private final RootBeanDefinition beanDefinition;, +, +, +		CglibIdentitySupport(RootBeanDefinition beanDefinition) {, +			this.beanDefinition = beanDefinition;, +		}, +			return (other.getClass().equals(getClass()) && ((CglibIdentitySupport) other).getBeanDefinition().equals(, +				beanDefinition));, +	private static class CallbackFilterImpl extends CglibIdentitySupport implements CallbackFilter {, +, +		private static final Log logger = LogFactory.getLog(CallbackFilterImpl.class);, +, +, +		CallbackFilterImpl(RootBeanDefinition beanDefinition) {, +			super(beanDefinition);, +		}, +			MethodOverride methodOverride = getBeanDefinition().getMethodOverrides().getOverride(method);, +			throw new UnsupportedOperationException("Unexpected MethodOverride subclass: ", +					+ methodOverride.getClass().getName());, +, +	/**, +	 * CGLIB MethodInterceptor to override methods, replacing them with an, +	 * implementation that returns a bean looked up in the container., +	 */, +	private static class LookupOverrideMethodInterceptor extends CglibIdentitySupport implements MethodInterceptor {, +, +		private final BeanFactory owner;, +, +, +		LookupOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +			super(beanDefinition);, +			this.owner = owner;, +		}, +, +		@Override, +		public Object intercept(Object obj, Method method, Object[] args, MethodProxy mp) throws Throwable {, +			// Cast is safe, as CallbackFilter filters are used selectively., +			LookupOverride lo = (LookupOverride) getBeanDefinition().getMethodOverrides().getOverride(method);, +			return this.owner.getBean(lo.getBeanName());, +		}]