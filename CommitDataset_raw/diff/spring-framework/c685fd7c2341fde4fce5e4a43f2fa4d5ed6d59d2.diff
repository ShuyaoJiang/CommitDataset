[+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	 * Create the {@link AbstractPropertyBindingResult} instance using standard, +	 * JavaBean property access., +	 * @since 4.2.1, +	 * Create the {@link AbstractPropertyBindingResult} instance using direct, +	 * field access., +	 * @since 4.2.1, +	 * as an AbstractPropertyBindingResult., +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	 * Create the {@link AbstractPropertyBindingResult} instance using standard, +	 * JavaBean property access., +	 * @since 4.2.1, +	 * Create the {@link AbstractPropertyBindingResult} instance using direct, +	 * field access., +	 * @since 4.2.1, +	 * as an AbstractPropertyBindingResult., +++ b/spring-web/src/main/java/org/springframework/web/bind/support/DefaultDataBinderFactory.java, + * Copyright 2002-2015 the original author or authors., +, +	 * Create a new {@code DefaultDataBinderFactory} instance., +	 * @param initializer for global data binder initialization, +	 * (or {@code null} if none), +, +, +, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	 * Create the {@link AbstractPropertyBindingResult} instance using standard, +	 * JavaBean property access., +	 * @since 4.2.1, +	 * Create the {@link AbstractPropertyBindingResult} instance using direct, +	 * field access., +	 * @since 4.2.1, +	 * as an AbstractPropertyBindingResult., +++ b/spring-web/src/main/java/org/springframework/web/bind/support/DefaultDataBinderFactory.java, + * Copyright 2002-2015 the original author or authors., +, +	 * Create a new {@code DefaultDataBinderFactory} instance., +	 * @param initializer for global data binder initialization, +	 * (or {@code null} if none), +, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, + * Copyright 2002-2015 the original author or authors., +	 * <p>The default implementation creates a standard RequestContext instance for the, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	 * Create the {@link AbstractPropertyBindingResult} instance using standard, +	 * JavaBean property access., +	 * @since 4.2.1, +	 * Create the {@link AbstractPropertyBindingResult} instance using direct, +	 * field access., +	 * @since 4.2.1, +	 * as an AbstractPropertyBindingResult., +++ b/spring-web/src/main/java/org/springframework/web/bind/support/DefaultDataBinderFactory.java, + * Copyright 2002-2015 the original author or authors., +, +	 * Create a new {@code DefaultDataBinderFactory} instance., +	 * @param initializer for global data binder initialization, +	 * (or {@code null} if none), +, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, + * Copyright 2002-2015 the original author or authors., +	 * <p>The default implementation creates a standard RequestContext instance for the, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, +		Assert.notNull(optionMap, "OptionMap is required");, +			logger.trace("Starting XHR receive request for " + url);]