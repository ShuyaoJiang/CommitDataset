[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, pattern);, +		, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, pattern);, +		, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMappingTests.java, +import org.springframework.web.context.support.StaticWebApplicationContext;, +		this.handler = new Handler();, +		this.fooMethod = new HandlerMethod(handler, "foo");, +		this.fooParamMethod = new HandlerMethod(handler, "fooParam");, +		this.barMethod = new HandlerMethod(handler, "bar");, +		this.emptyMethod = new HandlerMethod(handler, "empty");, +		this.mapping = new TestRequestMappingInfoHandlerMapping();, +		this.mapping.registerHandler(this.handler);, +		Set<String> paths = this.mapping.getMappingPathPatterns(info);, +		HandlerMethod hm = (HandlerMethod) this.mapping.getHandler(request).getHandler();, +		assertEquals(this.fooMethod.getMethod(), hm.getMethod());, +		HandlerMethod hm = (HandlerMethod) this.mapping.getHandler(request).getHandler();, +		assertEquals(this.barMethod.getMethod(), hm.getMethod());, +		HandlerMethod hm = (HandlerMethod) this.mapping.getHandler(request).getHandler();, +		assertEquals(this.emptyMethod.getMethod(), hm.getMethod());, +		hm = (HandlerMethod) this.mapping.getHandler(request).getHandler();, +		assertEquals(this.emptyMethod.getMethod(), hm.getMethod());, +		HandlerMethod hm = (HandlerMethod) this.mapping.getHandler(request).getHandler();, +		assertEquals(this.fooParamMethod.getMethod(), hm.getMethod());, +			this.mapping.getHandler(request);, +			this.mapping.getHandler(request);, +			this.mapping.getHandler(request);, +		this.mapping.handleMatch(key, lookupPath, request);, +		Map<String, String> uriVariables = , +			(Map<String, String>) request.getAttribute(, +		assertNotNull(uriVariables);, +		assertEquals("1", uriVariables.get("path1"));, +		assertEquals("2", uriVariables.get("path2"));, +	}, +, +	@Test, +	public void bestMatchingPatternAttribute() {, +		PatternsRequestCondition patterns = new PatternsRequestCondition("/1/2", "/{path1}/2");, +		RequestMappingInfo key = new RequestMappingInfo(patterns, null, null, null, null, null, null);, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/1/2");, +		String lookupPath = new UrlPathHelper().getLookupPathForRequest(request);, +, +		this.mapping.handleMatch(key, lookupPath, request);, +		, +		assertEquals("/1/2", request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE));, +		TestRequestMappingInfoHandlerMapping hm = new TestRequestMappingInfoHandlerMapping();, +		hm.registerHandler(this.handler);, +		hm.setInterceptors(new Object[] { mappedInterceptor });, +		hm.setApplicationContext(new StaticWebApplicationContext());, +		HandlerExecutionChain chain = hm.getHandler(new MockHttpServletRequest("GET", path));, +		chain = hm.getHandler(new MockHttpServletRequest("GET", "/invalid"));, +		public void registerHandler(Object handler) {, +			super.detectHandlerMethods(handler);, +		}, +		, +			return AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null;, +			if (annotation != null) {, +			else {, +				return null;, +			}, +		}]