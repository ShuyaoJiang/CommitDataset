[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.util.ArrayList;, +import reactor.io.net.http.model.Cookie;, +		for (String name : this.channel.cookies().keySet()) {, +			List<HttpCookie> list = cookies.get(name);, +			if (list == null) {, +				list = new ArrayList<>();, +				cookies.put(name, list);, +			}, +			for (Cookie cookie : this.channel.cookies().get(name)) {, +				list.add(HttpCookie.clientCookie(name, cookie.value()));, +			}, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.util.ArrayList;, +import reactor.io.net.http.model.Cookie;, +		for (String name : this.channel.cookies().keySet()) {, +			List<HttpCookie> list = cookies.get(name);, +			if (list == null) {, +				list = new ArrayList<>();, +				cookies.put(name, list);, +			}, +			for (Cookie cookie : this.channel.cookies().get(name)) {, +				list.add(HttpCookie.clientCookie(name, cookie.value()));, +			}, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import reactor.io.net.http.model.Cookie;, +import org.springframework.http.HttpCookie;, +		for (String name : getHeaders().getCookies().keySet()) {, +			for (HttpCookie httpCookie : getHeaders().getCookies().get(name)) {, +				Cookie cookie = new ReactorCookie(name, httpCookie);, +				this.channel.addResponseCookie(name, cookie);, +			}, +		}, +	private final static class ReactorCookie extends Cookie {, +, +		final HttpCookie httpCookie;, +		final String name;, +, +		public ReactorCookie(String name, HttpCookie httpCookie) {, +			this.name = name;, +			this.httpCookie = httpCookie;, +		}, +, +		@Override, +		public String name() {, +			return name;, +		}, +, +		@Override, +		public String value() {, +			return httpCookie.getValue();, +		}, +, +		@Override, +		public boolean httpOnly() {, +			return httpCookie.isHttpOnly();, +		}, +, +		@Override, +		public long maxAge() {, +			return httpCookie.getMaxAge() > -1 ? httpCookie.getMaxAge() : -1;, +		}, +, +		@Override, +		public String domain() {, +			return httpCookie.getDomain();, +		}, +, +		@Override, +		public String path() {, +			return httpCookie.getPath();, +		}, +, +		@Override, +		public boolean secure() {, +			return httpCookie.isSecure();, +		}, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import java.util.ArrayList;, +import reactor.io.net.http.model.Cookie;, +		for (String name : this.channel.cookies().keySet()) {, +			List<HttpCookie> list = cookies.get(name);, +			if (list == null) {, +				list = new ArrayList<>();, +				cookies.put(name, list);, +			}, +			for (Cookie cookie : this.channel.cookies().get(name)) {, +				list.add(HttpCookie.clientCookie(name, cookie.value()));, +			}, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import reactor.io.net.http.model.Cookie;, +import org.springframework.http.HttpCookie;, +		for (String name : getHeaders().getCookies().keySet()) {, +			for (HttpCookie httpCookie : getHeaders().getCookies().get(name)) {, +				Cookie cookie = new ReactorCookie(name, httpCookie);, +				this.channel.addResponseCookie(name, cookie);]