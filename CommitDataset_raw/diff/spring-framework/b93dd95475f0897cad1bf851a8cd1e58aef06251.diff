[+++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +	/**, +	 * Return message headers for the message (never {@code null} but may be empty)., +	 */, +	MessageHeaders getHeaders();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +	/**, +	 * Return message headers for the message (never {@code null} but may be empty)., +	 */, +	MessageHeaders getHeaders();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * or one of its subclasses to create specific categories of headers., +, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	public void putAll(Map<? extends String, ? extends Object> map) {, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +	/**, +	 * Return message headers for the message (never {@code null} but may be empty)., +	 */, +	MessageHeaders getHeaders();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * or one of its subclasses to create specific categories of headers., +, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	public void putAll(Map<? extends String, ? extends Object> map) {, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ErrorMessage.java, +import org.springframework.messaging.MessageHeaders;, +, +	 * @param payload the message payload (never {@code null}), +	 * @param payload the message payload (never {@code null}), +	 * <p><strong>Note:</strong> the given {@code MessageHeaders} instance, +	 * is used directly in the new message, i.e. it is not copied., +	 * @param payload the message payload (never {@code null}), +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +	/**, +	 * Return message headers for the message (never {@code null} but may be empty)., +	 */, +	MessageHeaders getHeaders();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * or one of its subclasses to create specific categories of headers., +, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	public void putAll(Map<? extends String, ? extends Object> map) {, +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +	 * Since MessageHeaders are immutable, the call to this method, +	 * will result in {@link UnsupportedOperationException}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ErrorMessage.java, +import org.springframework.messaging.MessageHeaders;, +, +	 * @param payload the message payload (never {@code null}), +	 * @param payload the message payload (never {@code null}), +	 * <p><strong>Note:</strong> the given {@code MessageHeaders} instance, +	 * is used directly in the new message, i.e. it is not copied., +	 * @param payload the message payload (never {@code null}), +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java, +	 * Create a new {@link ExecutorSubscribableChannel} instance, +	 * where messages will be sent in the callers thread., +	 * Create a new {@link ExecutorSubscribableChannel} instance, +	 * where messages will be sent via the specified executor., +	 * @param executor the executor used to send the message,, +	 * or {@code null} to execute in the callers thread., +	 * Helps with the invocation of configured executor channel interceptors., +	 */, +	private class ExecutorChannelInterceptorChain {, +, +		private int interceptorIndex = -1;, +, +		public Message<?> applyBeforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {, +			for (ExecutorChannelInterceptor interceptor : executorInterceptors) {, +				message = interceptor.beforeHandle(message, channel, handler);, +				if (message == null) {, +					String name = interceptor.getClass().getSimpleName();, +					if (logger.isDebugEnabled()) {, +						logger.debug(name + " returned null from beforeHandle, i.e. precluding the send.");, +					}, +					triggerAfterMessageHandled(message, channel, handler, null);, +					return null;, +				}]