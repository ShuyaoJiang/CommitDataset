[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			ManagedList<Object> resolvers = extractBeanSubElements(resolversElement, parserContext);, +			return wrapLegacyResolvers(resolvers, parserContext);, +	private ManagedList<Object> wrapLegacyResolvers(List<Object> list, ParserContext context) {, +		ManagedList<Object> result = new ManagedList<Object>();, +		for (Object object : list) {, +			if (object instanceof BeanDefinitionHolder) {, +				BeanDefinitionHolder beanDef = (BeanDefinitionHolder) object;, +				String className = beanDef.getBeanDefinition().getBeanClassName();, +				Class<?> clazz = ClassUtils.resolveClassName(className, context.getReaderContext().getBeanClassLoader());, +				if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +					RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +					adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +					result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +					continue;, +			}, +			result.add(object);, +		}, +		return result;, +	}, +, +	private ManagedList<?> getReturnValueHandlers(Element element, ParserContext parserContext) {, +		Element handlers = DomUtils.getChildElementByTagName(element, "return-value-handlers");, +		return (handlers != null ? extractBeanSubElements(handlers, parserContext) : null);, +	private ManagedList<Object> extractBeanSubElements(Element parentElement, ParserContext parserContext) {, +		ManagedList<Object> list = new ManagedList<Object>();, +		for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, "bean", "ref")) {, +			Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +			list.add(object);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			ManagedList<Object> resolvers = extractBeanSubElements(resolversElement, parserContext);, +			return wrapLegacyResolvers(resolvers, parserContext);, +	private ManagedList<Object> wrapLegacyResolvers(List<Object> list, ParserContext context) {, +		ManagedList<Object> result = new ManagedList<Object>();, +		for (Object object : list) {, +			if (object instanceof BeanDefinitionHolder) {, +				BeanDefinitionHolder beanDef = (BeanDefinitionHolder) object;, +				String className = beanDef.getBeanDefinition().getBeanClassName();, +				Class<?> clazz = ClassUtils.resolveClassName(className, context.getReaderContext().getBeanClassLoader());, +				if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +					RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +					adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +					result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +					continue;, +			}, +			result.add(object);, +		}, +		return result;, +	}, +, +	private ManagedList<?> getReturnValueHandlers(Element element, ParserContext parserContext) {, +		Element handlers = DomUtils.getChildElementByTagName(element, "return-value-handlers");, +		return (handlers != null ? extractBeanSubElements(handlers, parserContext) : null);, +	private ManagedList<Object> extractBeanSubElements(Element parentElement, ParserContext parserContext) {, +		ManagedList<Object> list = new ManagedList<Object>();, +		for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, "bean", "ref")) {, +			Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +			list.add(object);, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +	A reference to a HandlerMethodArgumentResolver bean definition., +						<xsd:choice minOccurs="1" maxOccurs="unbounded">, +							<xsd:element ref="beans:bean" minOccurs="0" maxOccurs="unbounded">, +							<xsd:element ref="beans:ref" minOccurs="0" maxOccurs="unbounded">, +								<xsd:annotation>, +									<xsd:documentation><![CDATA[, +	A reference to a HandlerMethodReturnValueHandler bean definition., +									]]></xsd:documentation>, +									<xsd:appinfo>, +										<tool:annotation kind="ref">, +											<tool:expected-type type="java:org.springframework.web.method.support.HandlerMethodReturnValueHandler" />, +										</tool:annotation>, +									</xsd:appinfo>, +								</xsd:annotation>, +							</xsd:element>, +						</xsd:choice>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			ManagedList<Object> resolvers = extractBeanSubElements(resolversElement, parserContext);, +			return wrapLegacyResolvers(resolvers, parserContext);, +	private ManagedList<Object> wrapLegacyResolvers(List<Object> list, ParserContext context) {, +		ManagedList<Object> result = new ManagedList<Object>();, +		for (Object object : list) {, +			if (object instanceof BeanDefinitionHolder) {, +				BeanDefinitionHolder beanDef = (BeanDefinitionHolder) object;, +				String className = beanDef.getBeanDefinition().getBeanClassName();, +				Class<?> clazz = ClassUtils.resolveClassName(className, context.getReaderContext().getBeanClassLoader());, +				if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +					RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +					adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +					result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +					continue;, +			}, +			result.add(object);, +		}, +		return result;, +	}, +, +	private ManagedList<?> getReturnValueHandlers(Element element, ParserContext parserContext) {, +		Element handlers = DomUtils.getChildElementByTagName(element, "return-value-handlers");, +		return (handlers != null ? extractBeanSubElements(handlers, parserContext) : null);, +	private ManagedList<Object> extractBeanSubElements(Element parentElement, ParserContext parserContext) {]