[+++ b/build.gradle, +	ext.niomultipartVersion    = "1.1.0", +++ b/build.gradle, +	ext.niomultipartVersion    = "1.1.0", +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +			NioMultipartParserListener listener = new FluxSinkAdapterListener(emitter, this.bufferFactory, context);, +		private final MultipartContext context;, +, +		FluxSinkAdapterListener(FluxSink<Part> sink, DataBufferFactory bufferFactory, MultipartContext context) {, +			this.context = context;, +			this.sink.next(createPart(storage, httpHeaders));, +		}, +, +		private Part createPart(StreamStorage storage, HttpHeaders httpHeaders) {, +			String fileName = MultipartUtils.getFileName(httpHeaders);, +			if (fileName != null) {, +				return new SynchronossFilePart(httpHeaders, storage, fileName, this.bufferFactory);, +			}, +			else if (MultipartUtils.isFormField(httpHeaders, this.context)) {, +				String value = MultipartUtils.readFormParameterValue(storage, httpHeaders);, +				return new SynchronossFormFieldPart(httpHeaders, this.bufferFactory, value);, +			}, +			else {, +				return new DefaultSynchronossPart(httpHeaders, storage, this.bufferFactory);, +			}, +++ b/build.gradle, +	ext.niomultipartVersion    = "1.1.0", +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +			NioMultipartParserListener listener = new FluxSinkAdapterListener(emitter, this.bufferFactory, context);, +		private final MultipartContext context;, +, +		FluxSinkAdapterListener(FluxSink<Part> sink, DataBufferFactory bufferFactory, MultipartContext context) {, +			this.context = context;, +			this.sink.next(createPart(storage, httpHeaders));, +		}, +, +		private Part createPart(StreamStorage storage, HttpHeaders httpHeaders) {, +			String fileName = MultipartUtils.getFileName(httpHeaders);, +			if (fileName != null) {, +				return new SynchronossFilePart(httpHeaders, storage, fileName, this.bufferFactory);, +			}, +			else if (MultipartUtils.isFormField(httpHeaders, this.context)) {, +				String value = MultipartUtils.readFormParameterValue(storage, httpHeaders);, +				return new SynchronossFormFieldPart(httpHeaders, this.bufferFactory, value);, +			}, +			else {, +				return new DefaultSynchronossPart(httpHeaders, storage, this.bufferFactory);, +			}, +++ b/spring-web/src/test/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriterTests.java, +import java.time.Duration;, +import org.springframework.core.codec.StringDecoder;, +, +		String value = StringDecoder.textPlainOnly(false).decodeToMono(part.content(),, +				ResolvableType.forClass(String.class), MediaType.TEXT_PLAIN,, +				Collections.emptyMap()).block(Duration.ZERO);, +, +		assertEquals("{\"bar\":\"bar\"}", value);, +]