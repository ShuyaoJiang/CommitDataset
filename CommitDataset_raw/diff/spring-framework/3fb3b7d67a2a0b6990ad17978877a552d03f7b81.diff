[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Copyright 2002-2012 the original author or authors., + * @author Oliver Gierke, +			if (!inLiteral && startsWithDelimiter(script, i, delim)) {, +	 * Return whether the substring of a given source {@link String} starting at the, +	 * given index starts with the given delimiter., +	 *, +	 * @param source the source {@link String} to inspect, +	 * @param startIndex the index to look for the delimiter, +	 * @param delim the delimiter to look for, +	 */, +	private boolean startsWithDelimiter(String source, int startIndex, String delim) {, +, +		int endIndex = startIndex + delim.length();, +, +		if (source.length() < endIndex) {, +			// String is too short to contain the delimiter, +			return false;, +		}, +, +		return source.substring(startIndex, endIndex).equals(delim);, +	}, +, +	/**, +	 * Split an SQL script into separate statements delimited with the provided delimiter, +	 * character. Each individual statement will be added to the provided {@code List}., +	 *, +				if (startsWithDelimiter(script, i, delim)) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Copyright 2002-2012 the original author or authors., + * @author Oliver Gierke, +			if (!inLiteral && startsWithDelimiter(script, i, delim)) {, +	 * Return whether the substring of a given source {@link String} starting at the, +	 * given index starts with the given delimiter., +	 *, +	 * @param source the source {@link String} to inspect, +	 * @param startIndex the index to look for the delimiter, +	 * @param delim the delimiter to look for, +	 */, +	private boolean startsWithDelimiter(String source, int startIndex, String delim) {, +, +		int endIndex = startIndex + delim.length();, +, +		if (source.length() < endIndex) {, +			// String is too short to contain the delimiter, +			return false;, +		}, +, +		return source.substring(startIndex, endIndex).equals(delim);, +	}, +, +	/**, +	 * Split an SQL script into separate statements delimited with the provided delimiter, +	 * character. Each individual statement will be added to the provided {@code List}., +	 *, +				if (startsWithDelimiter(script, i, delim)) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +, +	/**, +	 * @see SPR-9781, +	 */, +	@Test(timeout = 1000), +	public void executesHugeScriptInReasonableTime() throws SQLException {, +, +		databasePopulator.addScript(resourceLoader.getResource("db-schema.sql"));, +		databasePopulator.addScript(resourceLoader.getResource("db-test-data-huge.sql"));, +, +		Connection connection = db.getConnection();, +		try {, +			databasePopulator.populate(connection);, +		} finally {, +			connection.close();, +		}, +	}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Copyright 2002-2012 the original author or authors., + * @author Oliver Gierke, +			if (!inLiteral && startsWithDelimiter(script, i, delim)) {, +	 * Return whether the substring of a given source {@link String} starting at the, +	 * given index starts with the given delimiter., +	 *, +	 * @param source the source {@link String} to inspect, +	 * @param startIndex the index to look for the delimiter, +	 * @param delim the delimiter to look for, +	 */, +	private boolean startsWithDelimiter(String source, int startIndex, String delim) {, +, +		int endIndex = startIndex + delim.length();, +, +		if (source.length() < endIndex) {, +			// String is too short to contain the delimiter, +			return false;, +		}, +, +		return source.substring(startIndex, endIndex).equals(delim);, +	}, +, +	/**, +	 * Split an SQL script into separate statements delimited with the provided delimiter, +	 * character. Each individual statement will be added to the provided {@code List}.]