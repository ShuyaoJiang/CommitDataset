[+++ b/spring-core/src/test/java/org/springframework/tests/Assume.java, + * Copyright 2002-2014 the original author or authors., +, +			Class<?> parserClass = ClassUtils.forName(, +					"net.sf.jasperreports.engine.util.JRStyledTextParser", Assume.class.getClassLoader());, +		}, +		catch (Throwable ex) {, +			throw new AssumptionViolatedException("Requires GraphicsEnvironment that can load fonts", ex);, +, +++ b/spring-core/src/test/java/org/springframework/tests/Assume.java, + * Copyright 2002-2014 the original author or authors., +, +			Class<?> parserClass = ClassUtils.forName(, +					"net.sf.jasperreports.engine.util.JRStyledTextParser", Assume.class.getClassLoader());, +		}, +		catch (Throwable ex) {, +			throw new AssumptionViolatedException("Requires GraphicsEnvironment that can load fonts", ex);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/JasperReportsMultiFormatView.java, + * Copyright 2002-2014 the original author or authors., + * Jasper Reports view class that allows for the actual rendering format, + * to be specified at runtime using a parameter contained in the model., + * The format key is used to pass the mapping key from your {@code Controller}, + * to Spring through as part of the model and the mapping key is used to map, + * a logical format to an actual JasperReports view class., + *, + * <p>For example, you might add the following code to your {@code Controller}:, + * Here {@code format} is the format key and {@code pdf} is the mapping key., + * When rendering a report, this class looks for a model parameter under the, + * format key, which by default is {@code format}. It then uses the value of, + * this parameter to lookup the actual {@code View} class to use., + *, + * <p>The default mappings for the format lookup are:, + * <p>The format key can be changed using the {@code formatKey} property., + * The applicable key-to-view-class mappings can be configured using the, +]