[+++ b/build.gradle, +		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }  // javax.cache, +		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0"), +		optional("javax.transaction:javax.transaction-api:1.2"), +		optional("javax.cache:cache-api:0.11-SNAPSHOT"), +++ b/build.gradle, +		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }  // javax.cache, +		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0"), +		optional("javax.transaction:javax.transaction-api:1.2"), +		optional("javax.cache:cache-api:0.11-SNAPSHOT"), +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2013 the original author or authors., + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, +++ b/build.gradle, +		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }  // javax.cache, +		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0"), +		optional("javax.transaction:javax.transaction-api:1.2"), +		optional("javax.cache:cache-api:0.11-SNAPSHOT"), +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2013 the original author or authors., + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +import javax.cache.Caching;, + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, +	@Override, +	public void afterPropertiesSet() {, +		if (this.cacheManager == null) {, +			this.cacheManager = Caching.getCachingProvider().getCacheManager();, +		}, +		super.afterPropertiesSet();, +	}, +, +		for (String cacheName : this.cacheManager.getCacheNames()) {, +			javax.cache.Cache jcache = this.cacheManager.getCache(cacheName);, +++ b/build.gradle, +		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }  // javax.cache, +		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0"), +		optional("javax.transaction:javax.transaction-api:1.2"), +		optional("javax.cache:cache-api:0.11-SNAPSHOT"), +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2013 the original author or authors., + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +import javax.cache.Caching;, + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, +	@Override, +	public void afterPropertiesSet() {, +		if (this.cacheManager == null) {, +			this.cacheManager = Caching.getCachingProvider().getCacheManager();, +		}, +		super.afterPropertiesSet();, +	}, +, +		for (String cacheName : this.cacheManager.getCacheNames()) {, +			javax.cache.Cache jcache = this.cacheManager.getCache(cacheName);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheManagerFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import java.net.URI;, +import java.util.Properties;, +import javax.cache.spi.CachingProvider;, + * <p>Note: This class has been updated for JCache 0.11, as of Spring 4.0., + *, + * @see javax.cache.Caching#getCachingProvider(), + * @see javax.cache.spi.CachingProvider#getCacheManager(), +	private URI cacheManagerUri;, +, +	private Properties cacheManagerProperties;, +	 * Specify the URI for the desired CacheManager., +	 * Default is {@code null} (i.e. JCache's default)., +	public void setCacheManagerUri(URI cacheManagerUri) {, +		this.cacheManagerUri = cacheManagerUri;, +	}, +, +	/**, +	 * Specify properties for the to-be-created CacheManager., +	 * Default is {@code null} (i.e. no special properties to apply)., +	 * @see javax.cache.spi.CachingProvider#getCacheManager(URI, ClassLoader, Properties), +	 */, +	public void setCacheManagerProperties(Properties cacheManagerProperties) {, +		this.cacheManagerProperties = cacheManagerProperties;, +		CachingProvider provider = Caching.getCachingProvider();, +		this.cacheManager = provider.getCacheManager(, +				this.cacheManagerUri, this.beanClassLoader, this.cacheManagerProperties);, +		this.cacheManager.close();]