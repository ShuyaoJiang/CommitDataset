[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * @param request the request to route, +	 * and then invokes the {@code other} function (of the same response type {@code T}), +	 * @see #andOther(RouterFunction), +	default RouterFunction<T> and(RouterFunction<T> other) {, +	 * and then invokes the {@code other} function (of a different response type) if this route had, +	 * {@linkplain Mono#empty() no result}., +	 * @see #and(RouterFunction), +	default RouterFunction<?> andOther(RouterFunction<?> other) {, +	default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * @param request the request to route, +	 * and then invokes the {@code other} function (of the same response type {@code T}), +	 * @see #andOther(RouterFunction), +	default RouterFunction<T> and(RouterFunction<T> other) {, +	 * and then invokes the {@code other} function (of a different response type) if this route had, +	 * {@linkplain Mono#empty() no result}., +	 * @see #and(RouterFunction), +	default RouterFunction<?> andOther(RouterFunction<?> other) {, +	default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +		return routes().reduce(RouterFunction<ServerResponse>::and), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +	 * @param request the request to route, +	 * and then invokes the {@code other} function (of the same response type {@code T}), +	 * @see #andOther(RouterFunction), +	default RouterFunction<T> and(RouterFunction<T> other) {, +	 * and then invokes the {@code other} function (of a different response type) if this route had, +	 * {@linkplain Mono#empty() no result}., +	 * @see #and(RouterFunction), +	default RouterFunction<?> andOther(RouterFunction<?> other) {, +	default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +		return routes().reduce(RouterFunction<ServerResponse>::and), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RouterFunctionTests.java, + * Copyright 2002-2017 the original author or authors., +	public void and() throws Exception {, +		RouterFunction<ServerResponse> result = routerFunction1.and(routerFunction2);, +	public void andOther() throws Exception {, +		RouterFunction<?> result = routerFunction1.andOther(routerFunction2);, +		RouterFunction<ServerResponse> routerFunction1 = request -> Mono.empty();, +		RouterFunction<ServerResponse> result = routerFunction1.andRoute(requestPredicate, this::handlerMethod);, +		Mono<String> stringMono = Mono.just("42");, +		HandlerFunction<EntityResponse<Mono<String>>> handlerFunction = request -> EntityResponse.fromPublisher(stringMono, String.class).build();, +		RouterFunction<EntityResponse<Mono<String>>> routerFunction = request -> Mono.just(handlerFunction);, +		HandlerFilterFunction<EntityResponse<Mono<String>>, EntityResponse<Mono<Integer>>> filterFunction =, +							Mono<Integer> intMono = response.entity(), +							return EntityResponse.fromPublisher(intMono, Integer.class).build();, +		RouterFunction<EntityResponse<Mono<Integer>>> result = routerFunction.filter(filterFunction);, +		Mono<EntityResponse<Mono<Integer>>> responseMono =, +							StepVerifier.create(serverResponse.entity())]