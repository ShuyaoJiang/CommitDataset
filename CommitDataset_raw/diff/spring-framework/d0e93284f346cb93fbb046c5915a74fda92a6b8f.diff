[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, + * Copyright 2002-2017 the original author or authors., +				(!field.contains("[]") && (field.contains("[") || field.contains("."))))) {, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, + * Copyright 2002-2017 the original author or authors., +				(!field.contains("[]") && (field.contains("[") || field.contains("."))))) {, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/ValidatorFactoryTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.convert.support.DefaultConversionService;, +	@Test, +	public void testListValidation() throws Exception {, +		LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();, +		validator.afterPropertiesSet();, +, +		ListContainer listContainer = new ListContainer();, +		listContainer.addString("A");, +		listContainer.addString("X");, +, +		BeanPropertyBindingResult errors = new BeanPropertyBindingResult(listContainer, "listContainer");, +		errors.initConversion(new DefaultConversionService());, +		validator.validate(listContainer, errors);, +, +		FieldError fieldError = errors.getFieldError("list[1]");, +		assertEquals("X", errors.getFieldValue("list[1]"));, +	}, +, +, +	public static class ListContainer {, +, +		@NotXList, +		private List<String> list = new LinkedList<>();, +, +		public void addString(String value) {, +			list.add(value);, +		}, +, +		public List<String> getList() {, +			return list;, +		}, +	}, +, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.FIELD), +	@Constraint(validatedBy = NotXListValidator.class), +	public @interface NotXList {, +, +		String message() default "Should not be X";, +, +		Class<?>[] groups() default { };, +, +		Class<? extends Payload>[] payload() default {};, +	}, +, +, +	public static class NotXListValidator implements ConstraintValidator<NotXList, List<String>> {, +, +		@Override, +		public void initialize(NotXList constraintAnnotation) {, +		}, +, +		@Override, +		public boolean isValid(List<String> list, ConstraintValidatorContext context) {, +			context.disableDefaultConstraintViolation();, +			boolean valid = true;, +			for (int i = 0; i < list.size(); i++) {, +				if ("X".equals(list.get(i))) {, +					context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addBeanNode().inIterable().atIndex(i).addConstraintViolation();, +					valid = false;, +				}, +			}, +			return valid;, +		}, +	}, +]