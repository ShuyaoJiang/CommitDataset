[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +import java.net.URI;, +import java.util.Optional;, +			return new SubPathRequestWrapper(request, subPath);, +, +	private static class SubPathRequestWrapper implements Request {, +, +		private final Request request;, +, +		private final String subPath;, +, +		public SubPathRequestWrapper(Request request, String subPath) {, +			this.request = request;, +			this.subPath = subPath;, +		}, +, +		@Override, +		public HttpMethod method() {, +			return this.request.method();, +		}, +, +		@Override, +		public URI uri() {, +			return this.request.uri();, +		}, +, +		@Override, +		public String path() {, +			return this.subPath;, +		}, +, +		@Override, +		public Headers headers() {, +			return this.request.headers();, +		}, +, +		@Override, +		public <T> T body(BodyExtractor<T> extractor) {, +			return this.request.body(extractor);, +		}, +, +		@Override, +		public <T> Optional<T> attribute(String name) {, +			return this.request.attribute(name);, +		}, +, +		@Override, +		public Optional<String> queryParam(String name) {, +			return this.request.queryParam(name);, +		}, +, +		@Override, +		public List<String> queryParams(String name) {, +			return this.request.queryParams(name);, +		}, +, +		@Override, +		public Optional<String> pathVariable(String name) {, +			return this.request.pathVariable(name);, +		}, +, +		@Override, +		public Map<String, String> pathVariables() {, +			return this.request.pathVariables();, +		}, +	}]