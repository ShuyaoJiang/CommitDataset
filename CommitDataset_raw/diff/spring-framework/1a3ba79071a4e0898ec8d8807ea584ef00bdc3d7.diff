[+++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return type.resolveGenerics(Object.class);, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return type.resolveGenerics(Object.class);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return resolveGenerics(null);, +	}, +, +	/**, +	 * Convenience method that will {@link #getGenerics() get} and {@link #resolve(), +	 * resolve} generic parameters, using the specified {@code fallback} if any type, +	 * cannot be resolved., +	 * @param fallback the fallback class to use if resolution fails (may be {@code null}), +	 * @return an array of resolved generic parameters (the resulting array will never be, +	 * {@code null}, but it may contain {@code null} elements}), +	 * @see #getGenerics(), +	 * @see #resolve(), +	 */, +	public Class<?>[] resolveGenerics(Class<?> fallback) {, +			resolvedGenerics[i] = generics[i].resolve(fallback);, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return type.resolveGenerics(Object.class);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return resolveGenerics(null);, +	}, +, +	/**, +	 * Convenience method that will {@link #getGenerics() get} and {@link #resolve(), +	 * resolve} generic parameters, using the specified {@code fallback} if any type, +	 * cannot be resolved., +	 * @param fallback the fallback class to use if resolution fails (may be {@code null}), +	 * @return an array of resolved generic parameters (the resulting array will never be, +	 * {@code null}, but it may contain {@code null} elements}), +	 * @see #getGenerics(), +	 * @see #resolve(), +	 */, +	public Class<?>[] resolveGenerics(Class<?> fallback) {, +			resolvedGenerics[i] = generics[i].resolve(fallback);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.ResolvableType;, +		ResolvableType resolvableType = ResolvableType.forClass(converter.getClass()).as(genericIfc);, +		if(resolvableType.hasUnresolvableGenerics()) {, +			return null;, +		}, +		return new GenericConverter.ConvertiblePair(resolvableType.resolveGeneric(0), resolvableType.resolveGeneric(1));, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return type.resolveGenerics(Object.class);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return resolveGenerics(null);, +	}, +, +	/**, +	 * Convenience method that will {@link #getGenerics() get} and {@link #resolve(), +	 * resolve} generic parameters, using the specified {@code fallback} if any type, +	 * cannot be resolved., +	 * @param fallback the fallback class to use if resolution fails (may be {@code null}), +	 * @return an array of resolved generic parameters (the resulting array will never be, +	 * {@code null}, but it may contain {@code null} elements}), +	 * @see #getGenerics(), +	 * @see #resolve(), +	 */, +	public Class<?>[] resolveGenerics(Class<?> fallback) {, +			resolvedGenerics[i] = generics[i].resolve(fallback);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.ResolvableType;, +		ResolvableType resolvableType = ResolvableType.forClass(converter.getClass()).as(genericIfc);, +		if(resolvableType.hasUnresolvableGenerics()) {, +			return null;, +		}, +		return new GenericConverter.ConvertiblePair(resolvableType.resolveGeneric(0), resolvableType.resolveGeneric(1));, +++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +import java.util.List;, +	@Test, +	public void getGenericsCannotBeResovled() throws Exception {, +		// SPR-11030, +		Class[] resolved = GenericTypeResolver.resolveTypeArguments(List.class, Iterable.class);, +		assertThat(resolved, equalTo(new Class[] { Object.class }));, +	}]