[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.Method;, +import net.sf.ehcache.config.Configuration;, +import net.sf.ehcache.config.ConfigurationFactory;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +	// Check whether EHCache 2.1+ CacheManager.create(Configuration) method is available..., +	private static final Method createWithConfiguration =, +			ClassUtils.getMethodIfAvailable(CacheManager.class, "create", Configuration.class);, +, +		InputStream is = (this.configLocation != null ? this.configLocation.getInputStream() : null);, +			// A bit convoluted for EHCache 1.x/2.0 compatibility., +			// To be much simpler once we require EHCache 2.1+, +			if (this.cacheManagerName != null) {, +				if (this.shared && createWithConfiguration == null) {, +					// No CacheManager.create(Configuration) method available before EHCache 2.1;, +					// can only set CacheManager name after creation., +					this.cacheManager = (is != null ? CacheManager.create(is) : CacheManager.create());, +					this.cacheManager.setName(this.cacheManagerName);, +					Configuration configuration = (is != null ? ConfigurationFactory.parseConfiguration(is) :, +							ConfigurationFactory.parseConfiguration());, +					configuration.setName(this.cacheManagerName);, +					if (this.shared) {, +						this.cacheManager = (CacheManager) ReflectionUtils.invokeMethod(createWithConfiguration, null, configuration);, +					else {, +						this.cacheManager = new CacheManager(configuration);, +					}, +				}, +			}, +			// For strict backwards compatibility: use simplest possible constructors..., +			else if (this.shared) {, +				this.cacheManager = (is != null ? CacheManager.create(is) : CacheManager.create());, +			}, +			else {, +				this.cacheManager = (is != null ? new CacheManager(is) : new CacheManager());, +			}, +		}, +		finally {, +			if (is != null) {, +				is.close();, +			}, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.Method;, +import net.sf.ehcache.config.Configuration;, +import net.sf.ehcache.config.ConfigurationFactory;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +	// Check whether EHCache 2.1+ CacheManager.create(Configuration) method is available..., +	private static final Method createWithConfiguration =, +			ClassUtils.getMethodIfAvailable(CacheManager.class, "create", Configuration.class);, +, +		InputStream is = (this.configLocation != null ? this.configLocation.getInputStream() : null);, +			// A bit convoluted for EHCache 1.x/2.0 compatibility., +			// To be much simpler once we require EHCache 2.1+, +			if (this.cacheManagerName != null) {, +				if (this.shared && createWithConfiguration == null) {, +					// No CacheManager.create(Configuration) method available before EHCache 2.1;, +					// can only set CacheManager name after creation., +					this.cacheManager = (is != null ? CacheManager.create(is) : CacheManager.create());, +					this.cacheManager.setName(this.cacheManagerName);, +					Configuration configuration = (is != null ? ConfigurationFactory.parseConfiguration(is) :, +							ConfigurationFactory.parseConfiguration());, +					configuration.setName(this.cacheManagerName);, +					if (this.shared) {, +						this.cacheManager = (CacheManager) ReflectionUtils.invokeMethod(createWithConfiguration, null, configuration);, +					else {, +						this.cacheManager = new CacheManager(configuration);, +					}, +				}, +			}, +			// For strict backwards compatibility: use simplest possible constructors..., +			else if (this.shared) {, +				this.cacheManager = (is != null ? CacheManager.create(is) : CacheManager.create());, +			}, +			else {, +				this.cacheManager = (is != null ? new CacheManager(is) : new CacheManager());, +			}, +		}, +		finally {, +			if (is != null) {, +				is.close();, +			}, +++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java, + * Copyright 2002-2013 the original author or authors., +		cacheManagerFb.setCacheManagerName("myCacheManager");]