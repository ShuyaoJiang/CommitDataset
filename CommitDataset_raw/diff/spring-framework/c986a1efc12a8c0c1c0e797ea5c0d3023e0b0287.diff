[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class<?> predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +		Class<?> targetType = mbd.getTargetType();, +		if (targetType == null) {, +			targetType = (mbd.getFactoryMethodName() != null ? getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +			if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) {, +				mbd.setTargetType(targetType);, +			}, +		}, +		if (targetType != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {, +					Class predicted = ibp.predictBeanType(targetType, beanName);, +		return targetType;, +	protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class[] typesToMatch) {, +		Class<?> factoryClass;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class<?> predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +		Class<?> targetType = mbd.getTargetType();, +		if (targetType == null) {, +			targetType = (mbd.getFactoryMethodName() != null ? getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +			if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) {, +				mbd.setTargetType(targetType);, +			}, +		}, +		if (targetType != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {, +					Class predicted = ibp.predictBeanType(targetType, beanName);, +		return targetType;, +	protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class[] typesToMatch) {, +		Class<?> factoryClass;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	private volatile Class<?> targetType;, +, +	final Object constructorArgumentLock = new Object();, +, +	final Object postProcessingLock = new Object();, +	/** Package-visible field that indicates a before-instantiation post-processor having kicked in */, +	volatile Boolean beforeInstantiationResolved;, +			this.allowCaching = originalRbd.allowCaching;, +			this.targetType = originalRbd.targetType;, +	 * Specify the target type of this bean definition, if known in advance., +	 */, +	public void setTargetType(Class<?> targetType) {, +		this.targetType = targetType;, +	}, +, +	/**, +	 * Return the target type of this bean definition, if known, +	 * (either specified in advance or resolved on first instantiation)., +	 */, +	public Class<?> getTargetType() {, +		return this.targetType;, +	}, +, +	/**]