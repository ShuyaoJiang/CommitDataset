[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.core.env.EnvironmentCapable;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.Assert;, + * @author Sam Brannen, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +, +		// Inherit Environment if possible, +		if (this.registry instanceof EnvironmentCapable) {, +			this.environment = ((EnvironmentCapable) this.registry).getEnvironment();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);, +	}, +		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator());, +		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver, +				: new AnnotationScopeMetadataResolver());, +				} else if (Lazy.class.equals(qualifier)) {, +				} else {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import org.springframework.core.env.EnvironmentCapable;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.Assert;, + * @author Sam Brannen, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +, +		// Inherit Environment if possible, +		if (this.registry instanceof EnvironmentCapable) {, +			this.environment = ((EnvironmentCapable) this.registry).getEnvironment();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);, +	}, +		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator());, +		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver, +				: new AnnotationScopeMetadataResolver());, +				} else if (Lazy.class.equals(qualifier)) {, +				} else {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Profile.java, +	 * The set of profiles for which this component should be registered.]