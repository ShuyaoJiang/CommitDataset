[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * shared between the returned stream and this data buffer. The underlying buffer will, +	 * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released} when the, +	 * input stream is {@linkplain InputStream#close() closed}., +	 * @see #asInputStream(boolean), +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * shared between the returned stream and this data buffer., +	 * @param releaseOnClose whether the underlying buffer will be, +	 * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is, +	 * {@linkplain InputStream#close() closed}., +	 * @return this data buffer as an input stream, +	 * @since 5.0.4, +	 */, +	InputStream asInputStream(boolean releaseOnClose);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * shared between the returned stream and this data buffer. The underlying buffer will, +	 * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released} when the, +	 * input stream is {@linkplain InputStream#close() closed}., +	 * @see #asInputStream(boolean), +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * shared between the returned stream and this data buffer., +	 * @param releaseOnClose whether the underlying buffer will be, +	 * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is, +	 * {@linkplain InputStream#close() closed}., +	 * @return this data buffer as an input stream, +	 * @since 5.0.4, +	 */, +	InputStream asInputStream(boolean releaseOnClose);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	public InputStream asInputStream(boolean releaseOnClose) {, +		return new DefaultDataBufferInputStream();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * shared between the returned stream and this data buffer. The underlying buffer will, +	 * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released} when the, +	 * input stream is {@linkplain InputStream#close() closed}., +	 * @see #asInputStream(boolean), +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * shared between the returned stream and this data buffer., +	 * @param releaseOnClose whether the underlying buffer will be, +	 * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is, +	 * {@linkplain InputStream#close() closed}., +	 * @return this data buffer as an input stream, +	 * @since 5.0.4, +	 */, +	InputStream asInputStream(boolean releaseOnClose);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	public InputStream asInputStream(boolean releaseOnClose) {, +		return new DefaultDataBufferInputStream();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	public InputStream asInputStream(boolean releaseOnClose) {, +		return new ByteBufInputStream(this.byteBuf, releaseOnClose);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * shared between the returned stream and this data buffer. The underlying buffer will, +	 * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released} when the, +	 * input stream is {@linkplain InputStream#close() closed}., +	 * @see #asInputStream(boolean), +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * shared between the returned stream and this data buffer., +	 * @param releaseOnClose whether the underlying buffer will be, +	 * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is, +	 * {@linkplain InputStream#close() closed}., +	 * @return this data buffer as an input stream, +	 * @since 5.0.4, +	 */, +	InputStream asInputStream(boolean releaseOnClose);, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	public InputStream asInputStream(boolean releaseOnClose) {, +		return new DefaultDataBufferInputStream();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	public InputStream asInputStream(boolean releaseOnClose) {, +		return new ByteBufInputStream(this.byteBuf, releaseOnClose);, +	}, +, +	@Override, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferTests.java, +	public void inputStreamReleaseOnClose() throws IOException {, +		DataBuffer buffer = createDataBuffer(3);, +		byte[] bytes = {'a', 'b', 'c'};, +		buffer.write(bytes);, +]