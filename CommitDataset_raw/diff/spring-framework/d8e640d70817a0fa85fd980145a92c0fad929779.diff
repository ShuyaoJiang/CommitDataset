[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/MarshallingMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +, +	 * Construct a new <code>MarshallingMessageConverter</code> with no {@link Marshaller}, +	 * or {@link Unmarshaller} set. The marshaller must be set after construction by invoking, +	 * {@link #setMarshaller(Marshaller)} and {@link #setUnmarshaller(Unmarshaller)} ., +					"interface. Please set an Unmarshaller explicitly by using the " +, +		Assert.notNull(targetType, "MessageType must not be null");, +		throw new IllegalArgumentException("Unsupported message type [" + targetType +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/MarshallingMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +, +	 * Construct a new <code>MarshallingMessageConverter</code> with no {@link Marshaller}, +	 * or {@link Unmarshaller} set. The marshaller must be set after construction by invoking, +	 * {@link #setMarshaller(Marshaller)} and {@link #setUnmarshaller(Unmarshaller)} ., +					"interface. Please set an Unmarshaller explicitly by using the " +, +		Assert.notNull(targetType, "MessageType must not be null");, +		throw new IllegalArgumentException("Unsupported message type [" + targetType +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, + * Copyright 2002-2011 the original author or authors., +, +		return this.xstream;, +	 * Set the autodetection mode of XStream., +	 * <p><strong>Note</strong> that auto-detection implies that the XStream is configured while, +	 * it is processing the XML streams, and thus introduces a potential concurrency problem., +, +	public final void afterPropertiesSet() throws Exception {, +		customizeXStream(getXStream());, +	}, +, +	 * <p>The default implementation is empty., +, +		if (this.streamDriver != null) {, +			marshal(graph, this.streamDriver.createWriter(writer));, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/MarshallingMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +, +	 * Construct a new <code>MarshallingMessageConverter</code> with no {@link Marshaller}, +	 * or {@link Unmarshaller} set. The marshaller must be set after construction by invoking, +	 * {@link #setMarshaller(Marshaller)} and {@link #setUnmarshaller(Unmarshaller)} ., +					"interface. Please set an Unmarshaller explicitly by using the " +, +		Assert.notNull(targetType, "MessageType must not be null");, +		throw new IllegalArgumentException("Unsupported message type [" + targetType +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +, +				"]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages.");, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, + * Copyright 2002-2011 the original author or authors., +, +		return this.xstream;, +	 * Set the autodetection mode of XStream., +	 * <p><strong>Note</strong> that auto-detection implies that the XStream is configured while, +	 * it is processing the XML streams, and thus introduces a potential concurrency problem., +, +	public final void afterPropertiesSet() throws Exception {, +		customizeXStream(getXStream());, +	}, +, +	 * <p>The default implementation is empty., +, +		if (this.streamDriver != null) {, +			marshal(graph, this.streamDriver.createWriter(writer));, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * Copyright 2002-2011 the original author or authors., +, + * Spring MVC {@link View} that renders JSON content by serializing the model for the current request, + * using <a href="http://jackson.codehaus.org/">Jackson's</a> {@link ObjectMapper}., + * <p>By default, the entire contents of the model map (with the exception of framework-specific classes), + * will be encoded as JSON. If the model contains only one key, you can have it extracted encoded as JSON, + * alone via  {@link #setExtractValueFromSingleKeyModel}., + * @see org.springframework.http.converter.json.MappingJacksonHttpMessageConverter, +, +, +, +	 * Sets the {@code ObjectMapper} for this view., +	 * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used., +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control, +	 * of the JSON serialization process. For example, an extended {@link SerializerFactory}, +	 * can be configured that provides custom serializers for specific types. The other option, +	 * for refining the serialization process is to use Jackson's provided annotations on the, +	 * types to be serialized, in which case a custom-configured ObjectMapper is unnecessary., +	 * Set the {@code JsonEncoding} for this converter., +	 * By default, {@linkplain JsonEncoding#UTF8 UTF-8} is used., +	 * Indicates whether the JSON output by this view should be prefixed with <tt>"{} && "</tt>., +	 * Default is false., +	 * <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking., +	 * The prefix renders the string syntactically invalid as a script so that it cannot be hijacked., +	 * This prefix does not affect the evaluation of JSON, but if JSON validation is performed, +	 * on the string, the prefix would need to be ignored., +	 * Set the attribute in the model that should be rendered by this view., +	 * Set the attributes in the model that should be rendered by this view., +	 * Return the attributes in the model that should be rendered by this view.]