[+++ b/spring-framework-reference/src/expressions.xml, +      linkend="expressions-ref-functions">Functions</link>. The, +      <classname>StandardEvaluationContext</classname> is also where you can, +      register custom <classname>ConstructorResolver</classname>s,, +      <classname>MethodResolver</classname>s, and, +      <classname>PropertyAccessor</classname>s to extend how SpEL evaluates, +      expressions. Please refer to the JavaDoc of these classes for more, +      details.</para>, +        <para>TODO</para>, +      in your expressions as shown below. Note that you do not have to prefix, +      the predefined variable with the '#' symbol in this context.</para>, +                            @Value("#{ systemProperties['user.country'] } String defaultLocale) {, +      <para>Case insensitivity is allowed for the first letter of property, +      This would typically be done within a call to, +      <literal>SetValue</literal> but can also be done inside a call to, +      <literal>GetValue</literal> </para>, +      <para>The special 'T' operator can be used to specify an instance of, +, +, +        <title>The #this variables</title>, +        <para>The variable #this is always defined and refers to the root, +        object that is currently being evaluated. </para>, +, +        <programlisting language="java">// create an array of integers, +List&lt;Integer&gt; primes = new ArrayList&lt;Integer&gt;();, +primes.addAll(Arrays.asList(2,3,5,7,11,13,17));, +, +// create parser and set variable 'primes' as the array of integers, +ExpressionParser parser = new SpelAntlrExpressionParser();, +StandardEvaluationContext context = new StandardEvaluationContext();, +context.setVariable("primes",primes);, +, +// all prime numbers &gt; 10 from the list (using selection ?{...}), +List&lt;Integer&gt; primesGreaterThanTen = (List&lt;Integer&gt;) parser.parseExpression("#primes.?{#this&gt;10}").getValue(context);, +, +//evaluates to [11, 13, 17]</programlisting>, +      <para>You can extend SpEL by registering user defined functions that can, +      be called within the expression string. The function is registered with, +      the <classname>StandardEvaluationContext</classname> using the, +      method</para>, +, +      <programlisting language="java">public void registerFunction(String name, Method m)</programlisting>, +, +      <para>A reference to a Java Method provides the implementation of the, +      function. For example, a utility method to reverse a string is shown, +      below.</para>, +, +      <programlisting>public abstract class StringUtils {, +, +  public static String reverseString(String input) {, +    StringBuilder backwards = new StringBuilder();, +    for (int i = 0; i &lt; input.length(); i++) {, +      backwards.append(input.charAt(input.length() - 1 - i));, +    }, +    return backwards.toString();, +  }, +}</programlisting>, +, +      <para>This method is then registered with the evaluation context and can, +      be used within an expression string</para>, +, +      <para>used in To register this method with the evaluation context and, +      used in an expression string</para>, +, +      <programlisting language="java">ExpressionParser parser = new SpelAntlrExpressionParser();, +StandardEvaluationContext context = new StandardEvaluationContext();, +, +context.registerFunction("reverseString", , +                         StringUtils.class.getDeclaredMethod("reverseString", new Class[] { String.class }));, +, +String helloWorldReversed = parser.parseExpression("#reverseString('hello')").getValue(context, String.class);</programlisting>, +      <para>Expression templates allow a mixing of literal text with one or, +      more evaluation blocks. Each evaluation block is delimited with a prefix, +      and suffix characters that you can define, a common choice is to use, +      <literal>${} </literal>as the delimiters. For example,</para>, +, +      <programlisting language="java">String randomPhrase = , +   parser.parseExpression("random number is ${T(java.lang.Math).random()}", new TemplatedParserContext()).getValue(String.class);, +, +// evaluates to "random number is 0.7038186818312008"</programlisting>, +, +      <para>The string is evaluated by concatenating the literal text 'random, +      number is' with the result of evaluating the expression inside the ${}, +      delimiter, in this case the result of calling that random() method. The, +      second argument to the method <literal>parseExpression()</literal> of, +      the type <interfacename>ParserContext</interfacename>. The, +      <interfacename>ParserContext</interfacename> interface is used to, +      influence how the expression is parsed in order to support the, +      expression templating functionality. The definition of, +      <classname>TemplatedParserContext</classname> is shown below</para>, +, +      <programlisting language="java">public class TemplatedParserContext implements ParserContext {, +, +  public String getExpressionPrefix() {, +    return "${";, +  }, +, +  public String getExpressionSuffix() {, +    return "}";, +  }]