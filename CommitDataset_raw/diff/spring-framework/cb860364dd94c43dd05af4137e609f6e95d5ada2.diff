[+++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/SpringWildcardServletTilesApplicationContext.java, +import java.util.LinkedHashSet;, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(resources)) {, +			urlSet = new LinkedHashSet<URL>(resources.length);, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/SpringWildcardServletTilesApplicationContext.java, +import java.util.LinkedHashSet;, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(resources)) {, +			urlSet = new LinkedHashSet<URL>(resources.length);, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, +import java.util.Set;, +						Set<URL> resources = applicationContext.getResources(definition);, +						if (resources != null) {, +							result.addAll(resources);, +						}, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/SpringWildcardServletTilesApplicationContext.java, +import java.util.LinkedHashSet;, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(resources)) {, +			urlSet = new LinkedHashSet<URL>(resources.length);, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, +import java.util.Set;, +						Set<URL> resources = applicationContext.getResources(definition);, +						if (resources != null) {, +							result.addAll(resources);, +						}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/SpringWildcardServletTilesApplicationContext.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +			((ServletContext) getContext()).log("Resource retrieval failed for path: " + path, ex);, +			return Collections.emptyList();, +		if (ObjectUtils.isEmpty(resources)) {, +			((ServletContext) getContext()).log("No resources found for path pattern: " + path);, +			return Collections.emptyList();, +		}, +, +		Collection<ApplicationResource> resourceList = new ArrayList<ApplicationResource>(resources.length);, +				URL url = resource.getURL();, +				// Shouldn't happen with the kind of resources we're using, +				throw new IllegalArgumentException("No URL for " + resource, ex);, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/SpringWildcardServletTilesApplicationContext.java, +import java.util.LinkedHashSet;, +import org.springframework.util.ObjectUtils;, +		if (!ObjectUtils.isEmpty(resources)) {, +			urlSet = new LinkedHashSet<URL>(resources.length);, +++ b/spring-webmvc-tiles2/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, +import java.util.Set;, +						Set<URL> resources = applicationContext.getResources(definition);, +						if (resources != null) {, +							result.addAll(resources);, +						}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/SpringWildcardServletTilesApplicationContext.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +			((ServletContext) getContext()).log("Resource retrieval failed for path: " + path, ex);, +			return Collections.emptyList();, +		if (ObjectUtils.isEmpty(resources)) {, +			((ServletContext) getContext()).log("No resources found for path pattern: " + path);, +			return Collections.emptyList();, +		}, +, +		Collection<ApplicationResource> resourceList = new ArrayList<ApplicationResource>(resources.length);, +				URL url = resource.getURL();, +				// Shouldn't happen with the kind of resources we're using, +				throw new IllegalArgumentException("No URL for " + resource, ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java, +import java.util.Collection;, +					Collection<ApplicationResource> resources = applicationContext.getResources(definition);, +					if (resources != null) {, +						result.addAll(resources);, +					}]