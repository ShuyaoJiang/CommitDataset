[+++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +import java.time.Duration;, +	@Nullable, +	private Duration maxAge = null;, +	@Nullable, +	private Duration staleWhileRevalidate = null;, +	@Nullable, +	private Duration staleIfError = null;, +	@Nullable, +	private Duration sMaxAge = null;, +		return maxAge(Duration.ofSeconds(unit.toSeconds(maxAge)));, +	}, +, +	/**, +	 * Add a "max-age=" directive., +	 * <p>This directive is well suited for publicly caching resources, knowing that, +	 * they won't change within the configured amount of time. Additional directives, +	 * can be also used, in case resources shouldn't be cached ({@link #cachePrivate()}), +	 * or transformed ({@link #noTransform()}) by shared caches., +	 * <p>In order to prevent caches to reuse the cached response even when it has, +	 * become stale (i.e. the "max-age" delay is passed), the "must-revalidate", +	 * directive should be set ({@link #mustRevalidate()}, +	 * @param maxAge the maximum time the response should be cached, +	 * @return {@code this}, to facilitate method chaining, +	 * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2.2.8">rfc7234 section 5.2.2.8</a>, +	 */, +	public static CacheControl maxAge(Duration maxAge) {, +		cc.maxAge = maxAge;, +		return sMaxAge(Duration.ofSeconds(unit.toSeconds(sMaxAge)));, +	}, +, +	/**, +	 * Add an "s-maxage" directive., +	 * <p>This directive indicates that, in shared caches, the maximum age specified, +	 * by this directive overrides the maximum age specified by other directives., +	 * @param sMaxAge the maximum time the response should be cached, +	 * @return {@code this}, to facilitate method chaining, +	 * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2.2.9">rfc7234 section 5.2.2.9</a>, +	 */, +	public CacheControl sMaxAge(Duration sMaxAge) {, +		this.sMaxAge = sMaxAge;, +		return staleWhileRevalidate(Duration.ofSeconds(unit.toSeconds(staleWhileRevalidate)));, +	}, +, +	/**, +	 * Add a "stale-while-revalidate" directive., +	 * <p>This directive indicates that caches MAY serve the response in which it, +	 * appears after it becomes stale, up to the indicated number of seconds., +	 * If a cached response is served stale due to the presence of this extension,, +	 * the cache SHOULD attempt to revalidate it while still serving stale responses, +	 * (i.e. without blocking)., +	 * @param staleWhileRevalidate the maximum time the response should be used while being revalidated, +	 * @return {@code this}, to facilitate method chaining, +	 * @see <a href="https://tools.ietf.org/html/rfc5861#section-3">rfc5861 section 3</a>, +	 */, +	public CacheControl staleWhileRevalidate(Duration staleWhileRevalidate) {, +		this.staleWhileRevalidate = staleWhileRevalidate;, +		return staleIfError(Duration.ofSeconds(unit.toSeconds(staleIfError)));, +	/**, +	 * Add a "stale-if-error" directive., +	 * <p>This directive indicates that when an error is encountered, a cached stale response, +	 * MAY be used to satisfy the request, regardless of other freshness information., +	 * @param staleIfError the maximum time the response should be used when errors are encountered, +	 * @return {@code this}, to facilitate method chaining, +	 * @see <a href="https://tools.ietf.org/html/rfc5861#section-4">rfc5861 section 4</a>, +	 */, +	public CacheControl staleIfError(Duration staleIfError) {, +		this.staleIfError = staleIfError;, +		return this;, +	}, +		if (this.maxAge != null) {, +			appendDirective(headerValue, "max-age=" + this.maxAge.getSeconds());, +		if (this.sMaxAge != null) {, +			appendDirective(headerValue, "s-maxage=" + this.sMaxAge.getSeconds());, +		if (this.staleIfError != null) {, +			appendDirective(headerValue, "stale-if-error=" + this.staleIfError.getSeconds());, +		if (this.staleWhileRevalidate != null) {, +			appendDirective(headerValue, "stale-while-revalidate=" + this.staleWhileRevalidate.getSeconds());, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +import java.time.Duration;, +	@Nullable, +	private Duration maxAge = null;, +	@Nullable, +	private Duration staleWhileRevalidate = null;, +	@Nullable, +	private Duration staleIfError = null;, +	@Nullable, +	private Duration sMaxAge = null;, +		return maxAge(Duration.ofSeconds(unit.toSeconds(maxAge)));, +	}, +, +	/**, +	 * Add a "max-age=" directive., +	 * <p>This directive is well suited for publicly caching resources, knowing that, +	 * they won't change within the configured amount of time. Additional directives, +	 * can be also used, in case resources shouldn't be cached ({@link #cachePrivate()}), +	 * or transformed ({@link #noTransform()}) by shared caches., +	 * <p>In order to prevent caches to reuse the cached response even when it has, +	 * become stale (i.e. the "max-age" delay is passed), the "must-revalidate", +	 * directive should be set ({@link #mustRevalidate()}]