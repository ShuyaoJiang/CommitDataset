[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.remoting.httpinvoker;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.zip.GZIPInputStream;, +, +import org.apache.http.Header;, +import org.apache.http.HttpResponse;, +import org.apache.http.NoHttpResponseException;, +import org.apache.http.StatusLine;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.conn.scheme.PlainSocketFactory;, +import org.apache.http.conn.scheme.Scheme;, +import org.apache.http.conn.scheme.SchemeRegistry;, +import org.apache.http.conn.ssl.SSLSocketFactory;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.impl.client.DefaultHttpClient;, +import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;, +import org.apache.http.params.CoreConnectionPNames;, +, +import org.springframework.context.i18n.LocaleContext;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.remoting.support.RemoteInvocationResult;, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor} implementation that uses, + * <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/">Apache HttpComponents HttpClient</a>, + * to execute POST requests., + *, + * <p>Allows to use a pre-configured {@link org.apache.http.client.HttpClient}, + * instance, potentially with authentication, HTTP connection pooling, etc., + * Also designed for easy subclassing, providing specific template methods., + *, + * @author Juergen Hoeller, + * @since 3.1, + * @see org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor, + */, +public class HttpComponentsHttpInvokerRequestExecutor extends AbstractHttpInvokerRequestExecutor {, +, +	private static final int DEFAULT_MAX_TOTAL_CONNECTIONS = 100;, +, +	private static final int DEFAULT_MAX_CONNECTIONS_PER_ROUTE = 5;, +, +	private static final int DEFAULT_READ_TIMEOUT_MILLISECONDS = (60 * 1000);, +, +	private HttpClient httpClient;, +, +, +	/**, +	 * Create a new instance of the HttpComponentsHttpInvokerRequestExecutor with a default, +	 * {@link HttpClient} that uses a default {@link org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager}., +	 */, +	public HttpComponentsHttpInvokerRequestExecutor() {, +		SchemeRegistry schemeRegistry = new SchemeRegistry();, +		schemeRegistry.register(new Scheme("http", 80, PlainSocketFactory.getSocketFactory()));, +		schemeRegistry.register(new Scheme("https", 443, SSLSocketFactory.getSocketFactory()));, +, +		ThreadSafeClientConnManager connectionManager = new ThreadSafeClientConnManager(schemeRegistry);, +		connectionManager.setMaxTotal(DEFAULT_MAX_TOTAL_CONNECTIONS);, +		connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_CONNECTIONS_PER_ROUTE);, +, +		this.httpClient = new DefaultHttpClient(connectionManager);, +		setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +	}, +, +	/**, +	 * Create a new instance of the HttpComponentsClientHttpRequestFactory, +	 * with the given {@link HttpClient} instance., +	 * @param httpClient the HttpClient instance to use for this request executor, +	 */, +	public HttpComponentsHttpInvokerRequestExecutor(HttpClient httpClient) {, +		this.httpClient = httpClient;, +	}, +, +, +	/**, +	 * Set the {@link HttpClient} instance to use for this request executor., +	 */, +	public void setHttpClient(HttpClient httpClient) {]