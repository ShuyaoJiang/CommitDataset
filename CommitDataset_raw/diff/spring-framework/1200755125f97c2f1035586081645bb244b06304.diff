[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			initHeaders(headerAccessor);, +			headerAccessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +	private void initHeaders(SimpMessageHeaderAccessor headerAccessor) {, +		if (getHeaderInitializer() != null) {, +			getHeaderInitializer().initHeaders(headerAccessor);, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			initHeaders(headerAccessor);, +			headerAccessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +	private void initHeaders(SimpMessageHeaderAccessor headerAccessor) {, +		if (getHeaderInitializer() != null) {, +			getHeaderInitializer().initHeaders(headerAccessor);, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +		SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.wrap(captor.getValue());, +		assertEquals("/queue/foo-user123", accessor.getDestination());, +		assertEquals("/user/queue/foo", accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			initHeaders(headerAccessor);, +			headerAccessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +	private void initHeaders(SimpMessageHeaderAccessor headerAccessor) {, +		if (getHeaderInitializer() != null) {, +			getHeaderInitializer().initHeaders(headerAccessor);, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +		SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.wrap(captor.getValue());, +		assertEquals("/queue/foo-user123", accessor.getDestination());, +		assertEquals("/user/queue/foo", accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			String origDestination = stompAccessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION);, +			if (origDestination != null) {, +				stompAccessor.setDestination(origDestination);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			initHeaders(headerAccessor);, +			headerAccessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +	private void initHeaders(SimpMessageHeaderAccessor headerAccessor) {, +		if (getHeaderInitializer() != null) {, +			getHeaderInitializer().initHeaders(headerAccessor);, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +		SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.wrap(captor.getValue());, +		assertEquals("/queue/foo-user123", accessor.getDestination());, +		assertEquals("/user/queue/foo", accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			String origDestination = stompAccessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION);, +			if (origDestination != null) {, +				stompAccessor.setDestination(origDestination);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompSubProtocolHandlerTests.java, +		headers.setNativeHeader(StompHeaderAccessor.ORIGINAL_DESTINATION, "/user/queue/foo");]