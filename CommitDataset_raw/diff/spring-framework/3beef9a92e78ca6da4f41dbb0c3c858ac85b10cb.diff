[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +import java.io.InputStream;, +            InputStream responseBody = response.getBody();, +            if (responseBody != null) {, +                return FileCopyUtils.copyToByteArray(responseBody);, +            }, +            // ignore, +        return new byte[0];, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +import java.io.InputStream;, +            InputStream responseBody = response.getBody();, +            if (responseBody != null) {, +                return FileCopyUtils.copyToByteArray(responseBody);, +            }, +            // ignore, +        return new byte[0];, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/DefaultResponseErrorHandlerTests.java, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +	@Test(expected = HttpClientErrorException.class), +	public void handleErrorNullResponse() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setContentType(MediaType.TEXT_PLAIN);, +, +		expect(response.getStatusCode()).andReturn(HttpStatus.NOT_FOUND);, +		expect(response.getStatusText()).andReturn("Not Found");, +		expect(response.getHeaders()).andReturn(headers);, +		expect(response.getBody()).andReturn(null);, +, +		replay(response);, +, +		handler.handleError(response);, +, +		verify(response);, +	}]