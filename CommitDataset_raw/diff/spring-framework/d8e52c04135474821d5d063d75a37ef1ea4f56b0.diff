[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Return the primary constructor of the provided class. For Java classes, it returns, +	 * the single or the default constructor if any. For Kotlin classes, it returns the Java, +	 * constructor corresponding to the Kotlin primary constructor (as defined in, +	 * Kotlin specification), the single or the default constructor if any., +	 *, +	 * @param clazz the class to check, +			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);, +			if (kotlinPrimaryConstructor != null) {, +				return kotlinPrimaryConstructor;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Return the primary constructor of the provided class. For Java classes, it returns, +	 * the single or the default constructor if any. For Kotlin classes, it returns the Java, +	 * constructor corresponding to the Kotlin primary constructor (as defined in, +	 * Kotlin specification), the single or the default constructor if any., +	 *, +	 * @param clazz the class to check, +			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);, +			if (kotlinPrimaryConstructor != null) {, +				return kotlinPrimaryConstructor;, +		}, +++ b/spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt, +@Suppress("unused", "UNUSED_PARAMETER"), +	@Test, +	fun `2 constructors with default one`() {, +		assertEquals(TwoConstructorsWithDefaultOne::class.java.getDeclaredConstructor(), BeanUtils.findPrimaryConstructor(TwoConstructorsWithDefaultOne::class.java)), +	}, +, +	@Test, +	fun `2 constructors without default one`() {, +		assertNull(BeanUtils.findPrimaryConstructor(TwoConstructorsWithoutDefaultOne::class.java)), +	}, +, +	@Test, +	fun `1 constructor with default one`() {, +		assertEquals(OneConstructorWithDefaultOne::class.java.getDeclaredConstructor(), BeanUtils.findPrimaryConstructor(OneConstructorWithDefaultOne::class.java)), +	}, +, +	@Test, +	fun `1 constructor without default one`() {, +		assertEquals(OneConstructorWithoutDefaultOne::class.java.getDeclaredConstructor(String::class.java), BeanUtils.findPrimaryConstructor(OneConstructorWithoutDefaultOne::class.java)), +	}, +, +	class TwoConstructorsWithDefaultOne {, +, +		constructor(), +, +		constructor(param1: String), +	}, +, +	class TwoConstructorsWithoutDefaultOne {, +, +		constructor(param1: String), +, +		constructor(param1: String, param2: String), +	}, +, +	class OneConstructorWithDefaultOne {, +, +		constructor(), +	}, +, +	class OneConstructorWithoutDefaultOne {, +, +		constructor(param1: String), +	}, +]