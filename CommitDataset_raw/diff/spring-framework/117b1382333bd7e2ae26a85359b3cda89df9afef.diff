[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType a type descriptor that describes the source type, +	 * @param targetType a type descriptor that describes the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +	 * @param sourceType a type descriptor that supplies extra information about the source object, +	 * @param targetType a type descriptor that supplies extra information about the requested result type, +	Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType a type descriptor that describes the source type, +	 * @param targetType a type descriptor that describes the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +	 * @param sourceType a type descriptor that supplies extra information about the source object, +	 * @param targetType a type descriptor that supplies extra information about the requested result type, +	Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.expression.TypedValue;, +		// TODO remove this function over time and use the one it delegates to, +		return convertTypedValue(context,new TypedValue(value,TypeDescriptor.forObject(value)),targetType);, +	}, +, +	/**, +	 * Determines if there is a type converter available in the specified context and attempts to use it to convert the, +	 * supplied value to the specified type. Throws an exception if conversion is not possible., +	 * @param context the evaluation context that may define a type converter, +	 * @param typedValue the value to convert and a type descriptor describing it, +	 * @param targetType the type to attempt conversion to, +	 * @return the converted value, +	 * @throws EvaluationException if there is a problem during conversion or conversion of the value to the specified, +	 * type is not supported, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T convertTypedValue(EvaluationContext context, TypedValue typedValue, Class<T> targetType) {, +		Object value = typedValue.getValue();, +			return (T) context.getTypeConverter().convertValue(value, typedValue.getTypeDescriptor(), TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType a type descriptor that describes the source type, +	 * @param targetType a type descriptor that describes the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +	 * @param sourceType a type descriptor that supplies extra information about the source object, +	 * @param targetType a type descriptor that supplies extra information about the requested result type, +	Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.expression.TypedValue;, +		// TODO remove this function over time and use the one it delegates to, +		return convertTypedValue(context,new TypedValue(value,TypeDescriptor.forObject(value)),targetType);, +	}, +, +	/**, +	 * Determines if there is a type converter available in the specified context and attempts to use it to convert the, +	 * supplied value to the specified type. Throws an exception if conversion is not possible., +	 * @param context the evaluation context that may define a type converter, +	 * @param typedValue the value to convert and a type descriptor describing it, +	 * @param targetType the type to attempt conversion to, +	 * @return the converted value, +	 * @throws EvaluationException if there is a problem during conversion or conversion of the value to the specified, +	 * type is not supported, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T convertTypedValue(EvaluationContext context, TypedValue typedValue, Class<T> targetType) {, +		Object value = typedValue.getValue();, +			return (T) context.getTypeConverter().convertValue(value, typedValue.getTypeDescriptor(), TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value, TypeDescriptor.forObject(value), targetTypeDescriptor);, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), TypeDescriptor.forObject(value.getValue()), targetTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType a type descriptor that describes the source type, +	 * @param targetType a type descriptor that describes the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +, +	/**, +	 * @param sourceType a type descriptor that supplies extra information about the source object, +	 * @param targetType a type descriptor that supplies extra information about the requested result type, +	Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.expression.TypedValue;, +		// TODO remove this function over time and use the one it delegates to, +		return convertTypedValue(context,new TypedValue(value,TypeDescriptor.forObject(value)),targetType);, +	}, +, +	/**, +	 * Determines if there is a type converter available in the specified context and attempts to use it to convert the, +	 * supplied value to the specified type. Throws an exception if conversion is not possible.]