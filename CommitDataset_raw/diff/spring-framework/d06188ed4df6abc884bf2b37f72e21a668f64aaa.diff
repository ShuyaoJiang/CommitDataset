[+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, + * Copyright 2002-2016 the original author or authors., +	HttpStatus(int value, String reasonPhrase) {, +, +		return this.reasonPhrase;, +		return Series.INFORMATIONAL.equals(series());, +		return Series.SUCCESSFUL.equals(series());, +		return Series.REDIRECTION.equals(series());, +		return Series.CLIENT_ERROR.equals(series());, +		return Series.SERVER_ERROR.equals(series());, +		return Integer.toString(this.value);, +	 * Enumeration of HTTP status series., +	public enum Series {, +		Series(int value) {, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, + * Copyright 2002-2016 the original author or authors., +	HttpStatus(int value, String reasonPhrase) {, +, +		return this.reasonPhrase;, +		return Series.INFORMATIONAL.equals(series());, +		return Series.SUCCESSFUL.equals(series());, +		return Series.REDIRECTION.equals(series());, +		return Series.CLIENT_ERROR.equals(series());, +		return Series.SERVER_ERROR.equals(series());, +		return Integer.toString(this.value);, +	 * Enumeration of HTTP status series., +	public enum Series {, +		Series(int value) {, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +	private final Object statusCode;, +	 * @param status the status code, +	public ResponseEntity(HttpStatus status) {, +		this(null, null, status);, +	 * @param status the status code, +	public ResponseEntity(T body, HttpStatus status) {, +		this(body, null, status);, +	 * @param status the status code, +	public ResponseEntity(MultiValueMap<String, String> headers, HttpStatus status) {, +		this(null, headers, status);, +	 * @param status the status code, +	public ResponseEntity(T body, MultiValueMap<String, String> headers, HttpStatus status) {, +		super(body, headers);, +		Assert.notNull(status, "HttpStatus must not be null");, +		this.statusCode = status;, +	}, +, +	/**, +	 * Create a new {@code HttpEntity} with the given body, headers, and status code., +	 * Just used behind the nested builder API., +	 * @param body the entity body, +	 * @param headers the entity headers, +	 * @param statusCode the status code (as {@code HttpStatus} or as {@code Integer} value), +	 */, +	private ResponseEntity(T body, MultiValueMap<String, String> headers, Object statusCode) {, +	 * @return the HTTP status as an HttpStatus enum entry, +		if (this.statusCode instanceof HttpStatus) {, +			return (HttpStatus) this.statusCode;, +		}, +		else {, +			return HttpStatus.valueOf((Integer) this.statusCode);, +		}, +	}, +, +	/**, +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an int value, +	 * @since 4.3, +	 */, +	public int getStatusCodeValue() {, +		if (this.statusCode instanceof HttpStatus) {, +			return ((HttpStatus) this.statusCode).value();, +		}, +		else {, +			return (Integer) this.statusCode;, +		}, +		if (this.statusCode instanceof HttpStatus) {, +			builder.append(((HttpStatus) this.statusCode).getReasonPhrase());, +		}, +		Assert.notNull(status, "HttpStatus must not be null");, +		return new DefaultBuilder(status);, +		private final Object statusCode;, +		public DefaultBuilder(Object statusCode) {, +			this.statusCode = statusCode;, +			return body(null);, +			return new ResponseEntity<T>(body, this.headers, this.statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, + * Copyright 2002-2016 the original author or authors., +	HttpStatus(int value, String reasonPhrase) {, +, +		return this.reasonPhrase;, +		return Series.INFORMATIONAL.equals(series());, +		return Series.SUCCESSFUL.equals(series());, +		return Series.REDIRECTION.equals(series());, +		return Series.CLIENT_ERROR.equals(series());, +		return Series.SERVER_ERROR.equals(series());, +		return Integer.toString(this.value);, +	 * Enumeration of HTTP status series., +	public enum Series {]