[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +, + * @author Sam Brannen, +		assertEquals("", o);, +		assertEquals("", o);, +		assertEquals(4, testClass.list.size());, +			fail();, +		assertEquals("", o);, +		assertEquals(4, testClass.getFoo().size());, +	@Test(expected = SpelEvaluationException.class), +	public void testCreateMapsOnAttemptToIndexNull01() throws Exception {, +		assertNull(o);, +		assertNotNull(o);, +		// map2 should be null, there is no setter, +	// wibble2 should be null (cannot be initialized dynamically), there is no setter, +	@Test(expected = SpelEvaluationException.class), +	public void testCreateObjectsOnAttemptToReferenceNull() throws Exception {, +		assertEquals("hello", o);, +		assertNotNull(o);, +, +		private List<String> foo;, +, +			fail("Should have failed to parse");, +			assertTrue(e instanceof SpelParseException);, +			assertEquals(SpelMessage.OOD, spe.getMessageCode());, +			assertEquals(16, spe.getPosition());, +			fail();, +			assertEquals(spe.getMessageCode(), SpelMessage.UNEXPECTED_DATA_AFTER_DOT);, +			assertEquals("23", spe.getInserts()[0]);, +		assertEquals("wibble", newString);, +		assertEquals("wibble", newString);, +		assertFalse(expr.isWritable(new StandardEvaluationContext()));, +		assertEquals("new String('wibble')", expr.toStringAST());, +		// cannot convert String to boolean, +		evaluateAndCheckError("'hello'?1:2", SpelMessage.TYPE_CONVERSION_ERROR);, +		assertFalse(expr.isWritable(eContext));, +		evaluate("new org.springframework.expression.spel.testresources.PlaceOfBirth(inventions[0].toString()).city",, +			"Telephone repeater", String.class);, +		evaluateAndCheckError("new org.springframework.expression.spel.testresources.Inventor().inventions[1]",, +			SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);, +		assertFalse(expr.isWritable(new StandardEvaluationContext()));, +		assertEquals("T(java.lang.String)", expr.toStringAST());, +		assertEquals(String.class, expr.getValue(Class.class));, +		assertEquals("T(java.lang.String)", expr.toStringAST());, +		assertEquals(String.class, expr.getValue(Class.class));, +		assertEquals(24, twentyFour);, +		assertEquals(1.6d, one, 0);, +		assertEquals(1, o);, +		assertEquals(16, sixteen);, +		assertEquals(-45, minusFortyFive);, +		boolean trueValue = parser.parseExpression("T(java.util.Date) == Birthdate.Class").getValue(context,, +			Boolean.class);, +		assertTrue(trueValue);, +			assertFalse(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +			fail("should have failed to find List");, +		assertTrue(parser.parseExpression("T(List)!=null").getValue(context, Boolean.class));, +		Class<?> stringClass = parser.parseExpression("T(String)").getValue(Class.class);, +		assertEquals(String.class, stringClass);, +	 * SPR-6984: attempting to index a collection on write using an index that, +	 * doesn't currently exist in the collection (address.crossStreets[0] below), +		assertEquals("Oleg", person.getName());, +		assertEquals("123 High St", person.getAddress().getStreet());, +		assertEquals("Blah", person.getAddress().getCrossStreets().get(0));, +		assertEquals("Blah", person.getAddress().getCrossStreets().get(0));, +		assertEquals("Wibble", person.getAddress().getCrossStreets().get(3));, +	}, +, +	/**, +	 * Verifies behavior requested in SPR-9613., +	 */, +	@Test, +	public void caseInsensitiveNullLiterals() {, +		ExpressionParser parser = new SpelExpressionParser();, +		Expression exp;, +, +		exp = parser.parseExpression("null");, +		assertNull(exp.getValue());, +, +		exp = parser.parseExpression("NULL");, +		assertNull(exp.getValue());, +, +		exp = parser.parseExpression("NuLl");, +		assertNull(exp.getValue());, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +, + * @author Sam Brannen, +		assertEquals("", o);, +		assertEquals("", o);]