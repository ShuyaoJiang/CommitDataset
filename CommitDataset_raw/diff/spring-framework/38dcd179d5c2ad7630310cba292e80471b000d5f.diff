[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, + * of essential SpEL features and customization options, targeting simple, + * condition evaluation and in particular data binding scenarios., + * <p>When creating a {@code SimpleEvaluationContext} you need to choose the, + * level of support that you need for property access in SpEL expressions:, + * <li>A custom {@code PropertyAccessor} (typically not reflection-based),, + * potentially combined with a {@link DataBindingPropertyAccessor}</li>, + * <p>For more flexibility, in particular for internal configuration, + * scenarios, consider using {@link StandardEvaluationContext} instead., + * @see #forPropertyAccessors, +	 * Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}, +	 * delegates: typically a custom {@code PropertyAccessor} specific to a use case, +	 * (e.g. attribute resolution in a custom data structure), potentially combined with, +	 * a {@link DataBindingPropertyAccessor} if property dereferences are needed as well., +	 * @see DataBindingPropertyAccessor#forReadOnlyAccess(), +	 * @see DataBindingPropertyAccessor#forReadWriteAccess(), +		for (PropertyAccessor accessor : accessors) {, +			if (accessor.getClass() == ReflectivePropertyAccessor.class) {, +				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +, +						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.");, +			}, +		}, +	 * @see #forPropertyAccessors, +	 * @see DataBindingPropertyAccessor#forReadWriteAccess(), +	 * @see #forPropertyAccessors, +		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used., +		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used.]