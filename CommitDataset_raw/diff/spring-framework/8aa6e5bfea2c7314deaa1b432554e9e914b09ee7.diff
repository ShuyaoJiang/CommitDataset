[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/UndertowWebSocketClient.java, + * Copyright 2002-2018 the original author or authors., +import io.undertow.connector.ByteBufferPool;, +	private ByteBufferPool byteBufferPool;, +	private final Consumer<ConnectionBuilder> builderConsumer;, +		this(worker, new DefaultByteBufferPool(false, DEFAULT_POOL_BUFFER_SIZE), builderConsumer);, +	}, +, +	/**, +	 * Alternate constructor providing additional control over the, +	 * {@link ConnectionBuilder} for each WebSocket connection., +	 * @param worker the Xnio worker to use to create {@code ConnectionBuilder}'s, +	 * @param byteBufferPool the ByteBufferPool to use to create {@code ConnectionBuilder}'s, +	 * @param builderConsumer a consumer to configure {@code ConnectionBuilder}'s, +	 * @since 5.0.8, +	 */, +	public UndertowWebSocketClient(XnioWorker worker, ByteBufferPool byteBufferPool,, +								   Consumer<ConnectionBuilder> builderConsumer) {, +, +		Assert.notNull(worker, "XnioWorker must not be null");, +		Assert.notNull(byteBufferPool, "ByteBufferPool must not be null");, +		this.byteBufferPool = byteBufferPool;, +	 * Set the {@link io.undertow.connector.ByteBufferPool ByteBufferPool} to pass to, +	 * {@link io.undertow.websockets.client.WebSocketClient#connectionBuilder}., +	 * <p>By default an indirect {@link io.undertow.server.DefaultByteBufferPool} with a buffer size, +	 * of {@value #DEFAULT_POOL_BUFFER_SIZE} is used., +	 * @since 5.0.8, +	 */, +	public void setByteBufferPool(ByteBufferPool byteBufferPool) {, +		Assert.notNull(byteBufferPool, "ByteBufferPool must not be null");, +		this.byteBufferPool = byteBufferPool;, +	}, +, +	/**, +	 * @return the {@link io.undertow.connector.ByteBufferPool} currently used, +	 * for newly created WebSocket sessions by this client, +	 * @since 5.0.8, +	 */, +	public ByteBufferPool getByteBufferPool() {, +		return this.byteBufferPool;, +	}, +, +	/**, +	 * {@link #getXnioWorker() XnioWorker} and {@link #getByteBufferPool() ByteBufferPool} and, +				.connectionBuilder(getXnioWorker(), getByteBufferPool(), url);]