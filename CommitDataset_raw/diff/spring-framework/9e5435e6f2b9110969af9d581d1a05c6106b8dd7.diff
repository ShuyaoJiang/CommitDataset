[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java, +import java.io.FileNotFoundException;, +import java.util.Locale;, +	@Override, +	public boolean checkResource(Locale locale) throws Exception {, +		try {, +			getTemplate(getUrl());, +			return true;, +		}, +		catch (IllegalStateException exc) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("No ScriptTemplate view found for URL: " + getUrl());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java, +import java.io.FileNotFoundException;, +import java.util.Locale;, +	@Override, +	public boolean checkResource(Locale locale) throws Exception {, +		try {, +			getTemplate(getUrl());, +			return true;, +		}, +		catch (IllegalStateException exc) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("No ScriptTemplate view found for URL: " + getUrl());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/ScriptTemplateViewTests.java, +import java.util.Locale;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public ExpectedException expectedException = ExpectedException.none();, +	public void missingTemplate() throws Exception {, +		MockServletContext servletContext = new MockServletContext();, +		this.wac.setServletContext(servletContext);, +		this.wac.refresh();, +		this.view.setResourceLoaderPath("classpath:org/springframework/web/servlet/view/script/");, +		this.view.setUrl("missing.txt");, +		this.view.setEngine(mock(InvocableScriptEngine.class));, +		this.configurer.setRenderFunction("render");, +		this.view.setApplicationContext(this.wac);, +		assertFalse(this.view.checkResource(Locale.ENGLISH));, +	}, +, +	@Test, +		this.expectedException.expect(ApplicationContextException.class);, +		this.expectedException.expectMessage(contains("ScriptTemplateConfig"));, +		this.expectedException.expect(IllegalArgumentException.class);, +		this.expectedException.expectMessage(contains("instance"));, +		this.expectedException.expect(IllegalArgumentException.class);, +		this.expectedException.expectMessage(contains("renderFunction"));, +		this.expectedException.expect(IllegalArgumentException.class);, +		this.expectedException.expectMessage(contains("'engine' or 'engineName'"));, +		this.expectedException.expect(IllegalArgumentException.class);, +		this.expectedException.expectMessage(contains("sharedEngine"));]