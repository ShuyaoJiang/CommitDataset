[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		DestinationHelper destinationHelper = getDestinationHelper(headers, returnType);, +		SendToUser sendToUser = destinationHelper.getSendToUser();, +		if (sendToUser != null) {, +				destination = destinationHelper.expandTemplateVars(destination);, +, +		SendTo sendTo = destinationHelper.getSendTo();, +		if (sendTo != null || sendToUser == null) {, +				destination = destinationHelper.expandTemplateVars(destination);, +	private DestinationHelper getDestinationHelper(MessageHeaders headers, MethodParameter returnType) {, +		SendToUser m1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendToUser.class);, +		SendTo m2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendTo.class);, +		if ((m1 != null && !ObjectUtils.isEmpty(m1.value())) || (m2 != null && !ObjectUtils.isEmpty(m2.value()))) {, +			return new DestinationHelper(headers, m1, m2);, +		SendToUser c1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendToUser.class);, +		SendTo c2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendTo.class);, +		if ((c1 != null && !ObjectUtils.isEmpty(c1.value())) || (c2 != null && !ObjectUtils.isEmpty(c2.value()))) {, +			return new DestinationHelper(headers, c1, c2);, +		return m1 != null || m2 != null ?, +			new DestinationHelper(headers, m1, m2) : new DestinationHelper(headers, c1, c2);, +	private class DestinationHelper {, +, +		private final PlaceholderResolver placeholderResolver;, +		private final SendTo sendTo;, +		private final SendToUser sendToUser;, +, +, +		public DestinationHelper(MessageHeaders headers, @Nullable SendToUser sendToUser, @Nullable SendTo sendTo) {, +			Map<String, String> variables = getTemplateVariables(headers);, +			this.placeholderResolver = variables::get;, +			this.sendTo = sendTo;, +			this.sendToUser = sendToUser;, +		@SuppressWarnings("unchecked"), +		private Map<String, String> getTemplateVariables(MessageHeaders headers) {, +			String name = DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER;, +			return (Map<String, String>) headers.getOrDefault(name, Collections.emptyMap());, +		}, +, +		@Nullable, +		public SendTo getSendTo() {, +			return this.sendTo;, +		}, +, +		@Nullable, +		public SendToUser getSendToUser() {, +			return this.sendToUser;, +		}, +, +, +		public String expandTemplateVars(String destination) {, +			return placeholderHelper.replacePlaceholders(destination, this.placeholderResolver);, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		DestinationHelper destinationHelper = getDestinationHelper(headers, returnType);, +		SendToUser sendToUser = destinationHelper.getSendToUser();, +		if (sendToUser != null) {, +				destination = destinationHelper.expandTemplateVars(destination);, +, +		SendTo sendTo = destinationHelper.getSendTo();, +		if (sendTo != null || sendToUser == null) {, +				destination = destinationHelper.expandTemplateVars(destination);, +	private DestinationHelper getDestinationHelper(MessageHeaders headers, MethodParameter returnType) {, +		SendToUser m1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendToUser.class);, +		SendTo m2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendTo.class);, +		if ((m1 != null && !ObjectUtils.isEmpty(m1.value())) || (m2 != null && !ObjectUtils.isEmpty(m2.value()))) {, +			return new DestinationHelper(headers, m1, m2);, +		SendToUser c1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendToUser.class);, +		SendTo c2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendTo.class);, +		if ((c1 != null && !ObjectUtils.isEmpty(c1.value())) || (c2 != null && !ObjectUtils.isEmpty(c2.value()))) {, +			return new DestinationHelper(headers, c1, c2);, +		return m1 != null || m2 != null ?, +			new DestinationHelper(headers, m1, m2) : new DestinationHelper(headers, c1, c2);, +	private class DestinationHelper {, +, +		private final PlaceholderResolver placeholderResolver;, +		private final SendTo sendTo;, +		private final SendToUser sendToUser;, +, +, +		public DestinationHelper(MessageHeaders headers, @Nullable SendToUser sendToUser, @Nullable SendTo sendTo) {, +			Map<String, String> variables = getTemplateVariables(headers);, +			this.placeholderResolver = variables::get;, +			this.sendTo = sendTo;, +			this.sendToUser = sendToUser;, +		@SuppressWarnings("unchecked"), +		private Map<String, String> getTemplateVariables(MessageHeaders headers) {, +			String name = DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER;, +			return (Map<String, String>) headers.getOrDefault(name, Collections.emptyMap());, +		}, +, +		@Nullable, +		public SendTo getSendTo() {, +			return this.sendTo;, +		}, +]