[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +		public static TemplateInfo parse(String uriTemplate) {, +										"No custom regular expression specified after ':' in \"" + variable + "\"");, +			return (builder.length() > 0 ? Pattern.quote(builder.toString()) : "");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +		public static TemplateInfo parse(String uriTemplate) {, +										"No custom regular expression specified after ':' in \"" + variable + "\"");, +			return (builder.length() > 0 ? Pattern.quote(builder.toString()) : "");, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +import java.nio.charset.StandardCharsets;, +		byte[] bytes = helloWorld.getBytes(StandardCharsets.UTF_8);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +		public static TemplateInfo parse(String uriTemplate) {, +										"No custom regular expression specified after ':' in \"" + variable + "\"");, +			return (builder.length() > 0 ? Pattern.quote(builder.toString()) : "");, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +import java.nio.charset.StandardCharsets;, +		byte[] bytes = helloWorld.getBytes(StandardCharsets.UTF_8);, +++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +		public static TemplateInfo parse(String uriTemplate) {, +										"No custom regular expression specified after ':' in \"" + variable + "\"");, +			return (builder.length() > 0 ? Pattern.quote(builder.toString()) : "");, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +import java.nio.charset.StandardCharsets;, +		byte[] bytes = helloWorld.getBytes(StandardCharsets.UTF_8);, +++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java, + * Copyright 2002-2016 the original author or authors., +	 * Return a {@link PathMatcher} to use for matching the "allowedResources" URL pattern., +	 * <p>The default is {@link AntPathMatcher}., +		// Determine URL of resource to include..., +		// No resource URL specified -> try to include default URL., +, +		String[] resourceUrls = StringUtils.tokenizeToStringArray(resourceUrl, RESOURCE_URL_DELIMITERS);, +		for (String url : resourceUrls) {, +			if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, url)) {, +				throw new ServletException("Resource [" + url +, +				logger.debug("Including resource [" + url + "]");, +			RequestDispatcher rd = request.getRequestDispatcher(url);, +				for (String url : resourceUrls) {, +					long timestamp = getFileTimestamp(url);, +			if (logger.isWarnEnabled()) {, +				logger.warn("Couldn't retrieve last-modified timestamp of " + resource +, +						" - using ResourceServlet startup time");, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with " +, +					"non-ConfigurableBeanFactory: " + beanFactory.getClass());, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., +		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set");, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +		public static TemplateInfo parse(String uriTemplate) {, +										"No custom regular expression specified after ':' in \"" + variable + "\"");, +			return (builder.length() > 0 ? Pattern.quote(builder.toString()) : "");, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, +import java.nio.charset.StandardCharsets;, +		byte[] bytes = helloWorld.getBytes(StandardCharsets.UTF_8);]