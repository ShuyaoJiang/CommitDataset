[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			if (em instanceof EntityManagerProxy && beanFactory != null &&, +					beanFactory.containsBean(requestingBeanName) && !beanFactory.isPrototype(requestingBeanName)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			if (em instanceof EntityManagerProxy && beanFactory != null &&, +					beanFactory.containsBean(requestingBeanName) && !beanFactory.isPrototype(requestingBeanName)) {, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/support/PersistenceInjectionTests.java, + * Copyright 2002-2014 the original author or authors., +	public void testInjectionIntoExistingObjects() {, +		EntityManager mockEm = mock(EntityManager.class);, +		given(mockEmf.createEntityManager()).willReturn(mockEm);, +, +		GenericApplicationContext gac = new GenericApplicationContext();, +		gac.getDefaultListableBeanFactory().registerSingleton("entityManagerFactory", mockEmf);, +		gac.registerBeanDefinition("annotationProcessor",, +				new RootBeanDefinition(PersistenceAnnotationBeanPostProcessor.class));, +		gac.refresh();, +, +		DefaultPrivatePersistenceContextField existingBean1 = new DefaultPrivatePersistenceContextField();, +		gac.getAutowireCapableBeanFactory().autowireBean(existingBean1);, +		assertNotNull(existingBean1.em);, +, +		DefaultPublicPersistenceContextSetter existingBean2 = new DefaultPublicPersistenceContextSetter();, +		gac.getAutowireCapableBeanFactory().autowireBean(existingBean2);, +		assertNotNull(existingBean2.em);, +	}, +, +	@Test]