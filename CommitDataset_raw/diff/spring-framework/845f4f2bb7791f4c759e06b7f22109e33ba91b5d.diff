[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, +import org.springframework.core.annotation.AliasFor;, + * @author Sam Brannen, +	@AliasFor(attribute = "basePackages"), +	@AliasFor(attribute = "value"), +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, +import org.springframework.core.annotation.AliasFor;, + * @author Sam Brannen, +	@AliasFor(attribute = "basePackages"), +	@AliasFor(attribute = "value"), +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +import org.springframework.core.annotation.AnnotationConfigurationException;, +import org.springframework.util.ObjectUtils;, +		for (String pkg : getBasePackages(componentScan, declaringClass)) {, +	private String[] getBasePackages(AnnotationAttributes componentScan, String declaringClass) {, +		String[] value = componentScan.getStringArray("value");, +		String[] basePackages = componentScan.getStringArray("basePackages");, +		boolean valueDeclared = !ObjectUtils.isEmpty(value);, +		boolean basePackagesDeclared = !ObjectUtils.isEmpty(basePackages);, +, +		if (valueDeclared && basePackagesDeclared && !ObjectUtils.nullSafeEquals(value, basePackages)) {, +			String msg = String.format("In @ComponentScan declared on [%s], attribute [value] ", +					+ "and its alias [basePackages] are present with values of [%s] and [%s], ", +					+ "but only one is permitted.", declaringClass, ObjectUtils.nullSafeToString(value),, +				ObjectUtils.nullSafeToString(basePackages));, +			throw new AnnotationConfigurationException(msg);, +		}, +		if (!basePackagesDeclared) {, +			basePackages = value;, +		}, +		return basePackages;, +	}, +]