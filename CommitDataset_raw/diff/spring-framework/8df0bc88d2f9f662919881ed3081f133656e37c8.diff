[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.exchangeResult = wiretapInfo.createExchangeResult(timeout, uriTemplate);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.exchangeResult = wiretapInfo.createExchangeResult(timeout, uriTemplate);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import reactor.core.publisher.Mono;, +	private final Mono<byte[]> requestBody;, +	private final Mono<byte[]> responseBody;, +, +	private final Duration timeout;, +	 * @param timeout how long to wait for content to materialize, +			Mono<byte[]> requestBody, Mono<byte[]> responseBody, Duration timeout, @Nullable String uriTemplate) {, +		this.timeout = timeout;, +		this.timeout = other.timeout;, +	 * Return the raw request body content written through the request., +	 * <p><strong>Note:</strong> If the request content has not been consumed, +	 * for any reason yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the request body is not been fully written., +		return this.requestBody.block(this.timeout);, +	 * Return the raw request body content written to the response., +	 * <p><strong>Note:</strong> If the response content has not been consumed, +	 * yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the response is not been fully read., +		return this.responseBody.block(this.timeout);, +	@Nullable, +	private String formatBody(@Nullable MediaType contentType, Mono<byte[]> body) {, +		return body, +				.map(bytes -> {, +				}), +				.defaultIfEmpty("No content"), +				.onErrorResume(ex -> Mono.just("Failed to obtain content: " + ex.getMessage())), +				.block(this.timeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.exchangeResult = wiretapInfo.createExchangeResult(timeout, uriTemplate);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import reactor.core.publisher.Mono;, +	private final Mono<byte[]> requestBody;, +	private final Mono<byte[]> responseBody;, +, +	private final Duration timeout;, +	 * @param timeout how long to wait for content to materialize, +			Mono<byte[]> requestBody, Mono<byte[]> responseBody, Duration timeout, @Nullable String uriTemplate) {, +		this.timeout = timeout;, +		this.timeout = other.timeout;, +	 * Return the raw request body content written through the request., +	 * <p><strong>Note:</strong> If the request content has not been consumed, +	 * for any reason yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the request body is not been fully written., +		return this.requestBody.block(this.timeout);, +	 * Return the raw request body content written to the response., +	 * <p><strong>Note:</strong> If the response content has not been consumed, +	 * yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the response is not been fully read., +		return this.responseBody.block(this.timeout);, +	@Nullable, +	private String formatBody(@Nullable MediaType contentType, Mono<byte[]> body) {, +		return body, +				.map(bytes -> {, +				}), +				.defaultIfEmpty("No content"), +				.onErrorResume(ex -> Mono.just("Failed to obtain content: " + ex.getMessage())), +				.block(this.timeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/FluxExchangeResult.java, +	FluxExchangeResult(ExchangeResult result, Flux<T> body) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.exchangeResult = wiretapInfo.createExchangeResult(timeout, uriTemplate);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import reactor.core.publisher.Mono;, +	private final Mono<byte[]> requestBody;, +	private final Mono<byte[]> responseBody;, +, +	private final Duration timeout;, +	 * @param timeout how long to wait for content to materialize, +			Mono<byte[]> requestBody, Mono<byte[]> responseBody, Duration timeout, @Nullable String uriTemplate) {, +		this.timeout = timeout;, +		this.timeout = other.timeout;, +	 * Return the raw request body content written through the request., +	 * <p><strong>Note:</strong> If the request content has not been consumed, +	 * for any reason yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the request body is not been fully written., +		return this.requestBody.block(this.timeout);, +	 * Return the raw request body content written to the response., +	 * <p><strong>Note:</strong> If the response content has not been consumed, +	 * yet, use of this method will trigger consumption., +	 * @throws IllegalStateException if the response is not been fully read., +		return this.responseBody.block(this.timeout);, +	@Nullable, +	private String formatBody(@Nullable MediaType contentType, Mono<byte[]> body) {, +		return body, +				.map(bytes -> {, +				}), +				.defaultIfEmpty("No content")]