[+++ b/spring-websocket/src/main/java/org/springframework/websocket/client/AbstractEndpointConnectionManager.java, +	 * Set whether to auto-connect to the remote endpoint after this connection manager, +	 * has been initialized and the Spring context has been refreshed., +	 * connection manager will connect to the remote endpoint upon a, +	 * ContextRefreshedEvent., +	 * Specify the phase in which a connection should be established to the remote, +	 * endpoint and subsequently closed. The startup order proceeds from lowest to, +	 * highest, and the shutdown order is the reverse of that. By default this value is, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/AbstractEndpointConnectionManager.java, +	 * Set whether to auto-connect to the remote endpoint after this connection manager, +	 * has been initialized and the Spring context has been refreshed., +	 * connection manager will connect to the remote endpoint upon a, +	 * ContextRefreshedEvent., +	 * Specify the phase in which a connection should be established to the remote, +	 * endpoint and subsequently closed. The startup order proceeds from lowest to, +	 * highest, and the shutdown order is the reverse of that. By default this value is, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/endpoint/EndpointRegistration.java, +import org.springframework.websocket.endpoint.StandardWebSocketHandlerAdapter;, +    private List<Class<? extends Encoder>> encoders;, +, +    private List<Class<? extends Decoder>> decoders;, +, +	private final Map<String, Object> userProperties = new HashMap<String, Object>();, +, +	private Configurator configurator = new Configurator() {};, +	public List<String> getSubprotocols() {, +		return this.subprotocols;, +	public List<Extension> getExtensions() {, +		return this.extensions;, +	}, +, +	public void setUserProperties(Map<String, Object> userProperties) {, +		this.userProperties.clear();, +		this.userProperties.putAll(userProperties);, +	}, +, +	@Override, +	public void setEncoders(List<Class<? extends Encoder>> encoders) {, +		this.encoders = encoders;, +		return this.encoders;, +	}, +, +	public void setDecoders(List<Class<? extends Decoder>> decoders) {, +		this.decoders = decoders;, +		return this.decoders;, +	/**, +	 * The {@link Configurator#getEndpointInstance(Class)} method is always ignored., +	 */, +	public void setConfigurator(Configurator configurator) {, +		this.configurator = configurator;, +	}, +, +				EndpointRegistration.this.configurator.modifyHandshake(sec, request, response);, +				return EndpointRegistration.this.configurator.checkOrigin(originHeaderValue);, +				return EndpointRegistration.this.configurator.getNegotiatedSubprotocol(supported, requested);, +				return EndpointRegistration.this.configurator.getNegotiatedExtensions(installed, requested);]