[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			PropertyTokenHolder tokens = getPropertyNameTokens(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(tokens.actualName);, +				if (tokens.keys != null) {, +					if (pd.getReadMethod() != null) {, +						return PropertyTypeDescriptor.forNestedType(new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd);, +					}, +					else if (pd.getWriteMethod() != null) {, +						MethodParameter methodParameter = new MethodParameter(BeanUtils.getWriteMethodParameter(pd));, +						for (int i = 0; i < tokens.keys.length; i++) {, +							methodParameter.increaseNestingLevel();, +						}, +						return PropertyTypeDescriptor.forNestedType(methodParameter, pd);						, +					}				, +				} else {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			PropertyTokenHolder tokens = getPropertyNameTokens(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(tokens.actualName);, +				if (tokens.keys != null) {, +					if (pd.getReadMethod() != null) {, +						return PropertyTypeDescriptor.forNestedType(new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd);, +					}, +					else if (pd.getWriteMethod() != null) {, +						MethodParameter methodParameter = new MethodParameter(BeanUtils.getWriteMethodParameter(pd));, +						for (int i = 0; i < tokens.keys.length; i++) {, +							methodParameter.increaseNestingLevel();, +						}, +						return PropertyTypeDescriptor.forNestedType(methodParameter, pd);						, +					}				, +				} else {, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	public void testPatternList2FormattingListElement() {, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList2[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList2[1]"));, +	}, +, +	@Test, +	public void testPatternList2FormattingList() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList2[0]", "1,25.00");, +		propertyValues.add("patternList2[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00,2,35.00", binder.getBindingResult().getFieldValue("patternList2"));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			PropertyTokenHolder tokens = getPropertyNameTokens(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(tokens.actualName);, +				if (tokens.keys != null) {, +					if (pd.getReadMethod() != null) {, +						return PropertyTypeDescriptor.forNestedType(new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd);, +					}, +					else if (pd.getWriteMethod() != null) {, +						MethodParameter methodParameter = new MethodParameter(BeanUtils.getWriteMethodParameter(pd));, +						for (int i = 0; i < tokens.keys.length; i++) {, +							methodParameter.increaseNestingLevel();, +						}, +						return PropertyTypeDescriptor.forNestedType(methodParameter, pd);						, +					}				, +				} else {, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	public void testPatternList2FormattingListElement() {, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList2[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList2[1]"));, +	}, +, +	@Test, +	public void testPatternList2FormattingList() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList2[0]", "1,25.00");, +		propertyValues.add("patternList2[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00,2,35.00", binder.getBindingResult().getFieldValue("patternList2"));, +++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java, +			assertEquals("1", binder.getBindingResult().getFieldValue("integerList[0]"));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			PropertyTokenHolder tokens = getPropertyNameTokens(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(tokens.actualName);, +				if (tokens.keys != null) {, +					if (pd.getReadMethod() != null) {, +						return PropertyTypeDescriptor.forNestedType(new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd);, +					}, +					else if (pd.getWriteMethod() != null) {, +						MethodParameter methodParameter = new MethodParameter(BeanUtils.getWriteMethodParameter(pd));, +						for (int i = 0; i < tokens.keys.length; i++) {, +							methodParameter.increaseNestingLevel();, +						}, +						return PropertyTypeDescriptor.forNestedType(methodParameter, pd);						, +					}				, +				} else {, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	public void testPatternList2FormattingListElement() {, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList2[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList2[1]"));, +	}, +]