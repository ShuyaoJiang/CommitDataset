[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +, +		ResolvableType superType = contextType.getSuperType();, +		if (superType != ResolvableType.NONE) {, +			resolvedType = resolveVariable(typeVariable, superType);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +, +		ResolvableType superType = contextType.getSuperType();, +		if (superType != ResolvableType.NONE) {, +			resolvedType = resolveVariable(typeVariable, superType);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +	@Test  // SPR-14520, +	public void resolveArgumentTypeVariableWithGenericInterface() throws Exception {, +		this.servletRequest.setContent("\"foo\"".getBytes("UTF-8"));, +		this.servletRequest.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);, +, +		Method method = MyControllerImplementingInterface.class.getMethod("handle", Object.class);, +		HandlerMethod handlerMethod = new HandlerMethod(new MyControllerImplementingInterface(), method);, +		MethodParameter methodParameter = handlerMethod.getMethodParameters()[0];, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		converters.add(new MappingJackson2HttpMessageConverter());, +, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters);, +, +		String value = (String)processor.readWithMessageConverters(this.request, methodParameter,, +				methodParameter.getGenericParameterType());, +		assertEquals("foo", value);, +	}, +, +	interface MappingInterface<A> {, +		default A handle(@RequestBody A arg) {, +			return arg;, +		}, +	}, +, +	static class MyControllerImplementingInterface implements MappingInterface<String> {, +	}, +]