[+++ b/spring-web/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.junit.MockitoJUnitRunner;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.ArgumentMatchers.eq;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, + * @author Rob Winch, +@RunWith(MockitoJUnitRunner.class), +	@Mock, +	private WebSessionIdResolver idResolver;, +, +	@Mock, +	private WebSessionStore store;, +		this.manager.setSessionStore(this.store);, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList());, +		session.save().block();, +		verify(this.store, never()).storeSession(any());, +		verify(this.idResolver, never()).setSessionId(any(), any());, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList());, +		when(this.store.storeSession(any())).thenReturn(Mono.empty());, +		session.save().block();, +		verify(this.store).storeSession(any());, +		verify(this.idResolver).setSessionId(any(), eq(id));, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList());, +		when(this.store.storeSession(any())).thenReturn(Mono.empty());, +		session.save().block();, +		verify(this.idResolver).setSessionId(any(), any());, +		verify(this.store).storeSession(any());, +	}, +, +	@Test, +	public void exchangeWhenResponseSetCompleteThenSavesAndSetsId() throws Exception {, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList());, +		when(this.store.storeSession(any())).thenReturn(Mono.empty());, +		WebSession session = this.manager.getSession(this.exchange).block();, +		String id = session.getId();, +		session.getAttributes().put("foo", "bar");, +		this.exchange.getResponse().setComplete().block();, +, +		verify(this.idResolver).setSessionId(any(), eq(id));, +		verify(this.store).storeSession(any());, +		when(this.store.retrieveSession(id)).thenReturn(Mono.just(existing));, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.singletonList(id));, +		when(this.store.retrieveSession(existing.getId())).thenReturn(Mono.just(existing));, +		when(this.store.removeSession(existing.getId())).thenReturn(Mono.empty());, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.singletonList(existing.getId()));, +		verify(this.store).removeSession(existing.getId());, +		verify(this.idResolver).expireSession(any());, +		when(this.store.retrieveSession(any())).thenReturn(Mono.empty());, +		when(this.store.retrieveSession(id)).thenReturn(Mono.just(existing));, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Arrays.asList("neither-this", "nor-that", id));]