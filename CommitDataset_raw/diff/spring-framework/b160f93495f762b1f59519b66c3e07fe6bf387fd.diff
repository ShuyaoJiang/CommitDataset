[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2018 the original author or authors., + * Base class for caching aspects, such as the {@link CacheInterceptor} or an, + * AspectJ aspect., + * <p>This enables the underlying Spring caching infrastructure to be used easily, + * to implement an aspect for any aspect system., + * <p>Subclasses are responsible for calling relevant methods in the correct order., + * <p>Uses the <b>Strategy</b> design pattern. A {@link CacheOperationSource} is, + * used for determining caching operations, a {@link KeyGenerator} will build the, + * cache keys, and a {@link CacheResolver} will resolve the actual cache(s) to use., + * <p>Note: A cache aspect is serializable but does not perform any actual caching, + * after deserialization., +	 * <p>The default is a {@link SimpleKeyGenerator}., +	 * @see #setCacheManager, +	 * Set the {@link CacheManager} to use to create a default {@link CacheResolver}., +	 * Replace the current {@link CacheResolver}, if any., +	 * @see #setCacheResolver, +	 * @see SimpleCacheResolver, +	 */, +	public void setCacheManager(CacheManager cacheManager) {, +		this.cacheResolver = new SimpleCacheResolver(cacheManager);, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2018 the original author or authors., + * Base class for caching aspects, such as the {@link CacheInterceptor} or an, + * AspectJ aspect., + * <p>This enables the underlying Spring caching infrastructure to be used easily, + * to implement an aspect for any aspect system., + * <p>Subclasses are responsible for calling relevant methods in the correct order., + * <p>Uses the <b>Strategy</b> design pattern. A {@link CacheOperationSource} is, + * used for determining caching operations, a {@link KeyGenerator} will build the, + * cache keys, and a {@link CacheResolver} will resolve the actual cache(s) to use., + * <p>Note: A cache aspect is serializable but does not perform any actual caching, + * after deserialization., +	 * <p>The default is a {@link SimpleKeyGenerator}., +	 * @see #setCacheManager, +	 * Set the {@link CacheManager} to use to create a default {@link CacheResolver}., +	 * Replace the current {@link CacheResolver}, if any., +	 * @see #setCacheResolver, +	 * @see SimpleCacheResolver, +	 */, +	public void setCacheManager(CacheManager cacheManager) {, +		this.cacheResolver = new SimpleCacheResolver(cacheManager);, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.SmartInitializingSingleton;, +import org.springframework.cache.CacheManager;, +public class CacheProxyFactoryBean extends AbstractSingletonProxyFactoryBean, +		implements BeanFactoryAware, SmartInitializingSingleton {, +	private final CacheInterceptor cacheInterceptor = new CacheInterceptor();, +	 * @see CacheInterceptor#setCacheOperationSources, +		this.cacheInterceptor.setCacheOperationSources(cacheOperationSources);, +	}, +, +	/**, +	 * Set the default {@link KeyGenerator} that this cache aspect should delegate to, +	 * if no specific key generator has been set for the operation., +	 * <p>The default is a {@link SimpleKeyGenerator}., +	 * @since 5.0.3, +	 * @see CacheInterceptor#setKeyGenerator, +	 */, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		this.cacheInterceptor.setKeyGenerator(keyGenerator);, +	}, +, +	/**, +	 * Set the default {@link CacheResolver} that this cache aspect should delegate, +	 * to if no specific cache resolver has been set for the operation., +	 * <p>The default resolver resolves the caches against their names and the, +	 * default cache manager., +	 * @since 5.0.3, +	 * @see CacheInterceptor#setCacheResolver, +	 */, +	public void setCacheResolver(CacheResolver cacheResolver) {, +		this.cacheInterceptor.setCacheResolver(cacheResolver);, +	}, +, +	/**, +	 * Set the {@link CacheManager} to use to create a default {@link CacheResolver}., +	 * Replace the current {@link CacheResolver}, if any., +	 * @since 5.0.3, +	 * @see CacheInterceptor#setCacheManager, +	 */, +	public void setCacheManager(CacheManager cacheManager) {, +		this.cacheInterceptor.setCacheManager(cacheManager);, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.cacheInterceptor.setBeanFactory(beanFactory);, +	}, +, +	@Override, +	public void afterSingletonsInstantiated() {, +		this.cacheInterceptor.afterSingletonsInstantiated();]