[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.core.IsInstanceOf.instanceOf;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, +	 * An overloaded variant of {@link #assertValue(String, Matcher)} that also, +	 * accepts a target type for the resulting value. This can be useful for, +	 * matching numbers reliably for example coercing an integer into a double., +	 * @param content the JSON content, +	 * @param matcher the matcher with which to assert the result, +	 * @param targetType a the expected type of the resulting value, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked"), +	public <T> void assertValue(String content, Matcher<T> matcher, Class<T> targetType) throws ParseException {, +		T value = (T) evaluateJsonPath(content, targetType);, +		assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +	}, +, +	/**, +			if (!actualValue.getClass().equals(expectedValue.getClass())) {, +				actualValue = evaluateJsonPath(content, expectedValue.getClass());, +			}, +	private Object evaluateJsonPath(String content, Class<?> targetType) throws ParseException {, +		String message = "No value at JSON path \"" + this.expression + "\", exception: ";, +		try {, +			return JsonPath.parse(content).read(this.expression, targetType);, +		}, +		catch (InvalidPathException | IndexOutOfBoundsException ex) {, +			throw new AssertionError(message + ex.getMessage());, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.core.IsInstanceOf.instanceOf;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, +	 * An overloaded variant of {@link #assertValue(String, Matcher)} that also, +	 * accepts a target type for the resulting value. This can be useful for, +	 * matching numbers reliably for example coercing an integer into a double., +	 * @param content the JSON content, +	 * @param matcher the matcher with which to assert the result, +	 * @param targetType a the expected type of the resulting value, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked"), +	public <T> void assertValue(String content, Matcher<T> matcher, Class<T> targetType) throws ParseException {, +		T value = (T) evaluateJsonPath(content, targetType);, +		assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +	}, +, +	/**, +			if (!actualValue.getClass().equals(expectedValue.getClass())) {, +				actualValue = evaluateJsonPath(content, expectedValue.getClass());, +			}, +	private Object evaluateJsonPath(String content, Class<?> targetType) throws ParseException {, +		String message = "No value at JSON path \"" + this.expression + "\", exception: ";, +		try {, +			return JsonPath.parse(content).read(this.expression, targetType);, +		}, +		catch (InvalidPathException | IndexOutOfBoundsException ex) {, +			throw new AssertionError(message + ex.getMessage());, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java, +	 * An overloaded variant of (@link {@link #value(Matcher)} that also, +	 * accepts a target type for the resulting value that the matcher can work, +	 * reliably against. This can be useful for matching numbers reliably for, +	 * example coercing an integer into a double., +	 */, +	public <T> RequestMatcher value(final Matcher<T> matcher, final Class<T> targetType) {, +		return new AbstractJsonPathRequestMatcher() {, +			@Override, +			protected void matchInternal(MockClientHttpRequest request) throws IOException, ParseException {, +				String body = request.getBodyAsString();, +				JsonPathRequestMatchers.this.jsonPathHelper.assertValue(body, matcher, targetType);, +			}, +		};, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.core.IsInstanceOf.instanceOf;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, +	 * An overloaded variant of {@link #assertValue(String, Matcher)} that also, +	 * accepts a target type for the resulting value. This can be useful for, +	 * matching numbers reliably for example coercing an integer into a double., +	 * @param content the JSON content, +	 * @param matcher the matcher with which to assert the result, +	 * @param targetType a the expected type of the resulting value, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked")]