[+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2016 the original author or authors., +		String method = request.getMethod();, +		if (responseStatusCode >= 200 && responseStatusCode < 300 &&, +				(HttpMethod.GET.matches(method) || HttpMethod.HEAD.matches(method))) {, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2016 the original author or authors., +		String method = request.getMethod();, +		if (responseStatusCode >= 200 && responseStatusCode < 300 &&, +				(HttpMethod.GET.matches(method) || HttpMethod.HEAD.matches(method))) {, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/CorsConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Arrays.asList(HttpMethod.GET, HttpMethod.HEAD), config.checkHttpMethod(HttpMethod.GET));, +		assertNull(config.checkHttpMethod(HttpMethod.POST));, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2016 the original author or authors., +		String method = request.getMethod();, +		if (responseStatusCode >= 200 && responseStatusCode < 300 &&, +				(HttpMethod.GET.matches(method) || HttpMethod.HEAD.matches(method))) {, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/CorsConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Arrays.asList(HttpMethod.GET, HttpMethod.HEAD), config.checkHttpMethod(HttpMethod.GET));, +		assertNull(config.checkHttpMethod(HttpMethod.POST));, +++ b/spring-web/src/test/java/org/springframework/web/cors/DefaultCorsProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +		assertEquals("GET,HEAD", response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS));, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2016 the original author or authors., +		String method = request.getMethod();, +		if (responseStatusCode >= 200 && responseStatusCode < 300 &&, +				(HttpMethod.GET.matches(method) || HttpMethod.HEAD.matches(method))) {, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/CorsConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Arrays.asList(HttpMethod.GET, HttpMethod.HEAD), config.checkHttpMethod(HttpMethod.GET));, +		assertNull(config.checkHttpMethod(HttpMethod.POST));, +++ b/spring-web/src/test/java/org/springframework/web/cors/DefaultCorsProcessorTests.java, + * Copyright 2002-2016 the original author or authors., +		assertEquals("GET,HEAD", response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +	private static final RequestMethodsRequestCondition HEAD_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.HEAD);, +, +, +		RequestMethod requestMethod = getRequestMethod(request);, +		if (requestMethod != null) {, +				if (method.equals(requestMethod)) {, +			if (isHeadRequest(requestMethod) && getMethods().contains(RequestMethod.GET)) {, +				return HEAD_CONDITION;, +			}, +	private boolean isHeadRequest(RequestMethod requestMethod) {, +		return (requestMethod != null && RequestMethod.HEAD.equals(requestMethod));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2016 the original author or authors., +			allowedMethods.add(HttpMethod.HEAD.name());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2016 the original author or authors., +		String method = request.getMethod();, +		if (responseStatusCode >= 200 && responseStatusCode < 300 &&, +				(HttpMethod.GET.matches(method) || HttpMethod.HEAD.matches(method))) {, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/CorsConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;]