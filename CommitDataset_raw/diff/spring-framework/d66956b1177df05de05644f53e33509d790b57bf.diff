[+++ b/org.springframework.testsuite/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterUtilsTests.java, +import static org.junit.Assert.*;, +import org.junit.Test;, +public class NamedParameterUtilsTests {, +	@Test, +	public void parseSql() {, +	@Test, +	public void substituteNamedParameters() {, +		assertEquals("xxx ? ? ? xx ? ?",, +				NamedParameterUtils.substituteNamedParameters("xxx :a :b :c xx :a :a", namedParams));, +	@Test, +	public void convertParamMapToArray() {, +		Map<String, String> paramMap = new HashMap<String, String>();, +		assertSame(3, NamedParameterUtils.buildValueArray("xxx :a :b :c", paramMap).length);, +		assertSame(5, NamedParameterUtils.buildValueArray("xxx :a :b :c xx :a :b", paramMap).length);, +		assertSame(5, NamedParameterUtils.buildValueArray("xxx :a :a :a xx :a :a", paramMap).length);, +	@Test, +	public void convertTypeMapToArray() {, +		assertSame(3, NamedParameterUtils, +				.buildSqlTypeArray(NamedParameterUtils.parseSqlStatement("xxx :a :b :c"), namedParams).length);, +		assertSame(5, NamedParameterUtils, +				.buildSqlTypeArray(NamedParameterUtils.parseSqlStatement("xxx :a :b :c xx :a :b"), namedParams).length);, +		assertSame(5, NamedParameterUtils, +				.buildSqlTypeArray(NamedParameterUtils.parseSqlStatement("xxx :a :a :a xx :a :a"), namedParams).length);, +		assertEquals(2, NamedParameterUtils, +				.buildSqlTypeArray(NamedParameterUtils.parseSqlStatement("xxx :a :b :c xx :a :b"), namedParams)[4]);, +	@Test(expected = InvalidDataAccessApiUsageException.class), +	public void buildValueArrayWithMissingParameterValue() throws Exception {, +	@Test, +	public void substituteNamedParametersWithStringContainingQuotes() throws Exception {, +	@Test, +	@Test, +	public void parseSqlContainingComments() {, +	@Test, +	public void parseSqlStatementWithPostgresCasting() throws Exception {, +	@Test, +	public void parseSqlStatementWithLogicalAnd() {, +	@Test, +	public void substituteNamedParametersWithLogicalAnd() throws Exception {, +	@Test, +	public void variableAssignmentOperator() throws Exception {]