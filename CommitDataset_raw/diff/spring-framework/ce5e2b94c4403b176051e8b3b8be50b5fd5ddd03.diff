[+++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +import java.util.Arrays;, +import com.google.protobuf.util.JsonFormat;, +import static org.springframework.http.MediaType.*;, +, + * <p>This converter supports by default {@code "application/x-protobuf"} and {@code "text/plain"}, + * with the official {@code "com.google.protobuf:protobuf-java"} library. Other formats can be, + * supported with one of the following additional libraries on the classpath:, + * <ul>, + * <li>{@code "application/json"}, {@code "application/xml"}, and {@code "text/html"} (write-only), + * with the {@code "com.googlecode.protobuf-java-format:protobuf-java-format"} third-party library, + * <li>{@code "application/json"} with the official {@code "com.google.protobuf:protobuf-java-util"}, + * for Protobuf 3 (see {@link ProtobufJsonFormatHttpMessageConverter} for a configurable variant), + * </ul>, + *, + * <p>Requires Protobuf 2.6 or higher (and Protobuf Java Format 1.4 or higher for formatting)., + * This converter will auto-adapt to Protobuf 3 and its default {@code protobuf-java-util} JSON, + * format if the Protobuf 2 based {@code protobuf-java-format} isn't present; however, for more, + * explicit JSON setup on Protobuf 3, consider {@link ProtobufJsonFormatHttpMessageConverter}., + * @see FormatFactory, + * @see JsonFormat, + * @see ProtobufJsonFormatHttpMessageConverter, +	private final ProtobufFormatSupport protobufFormatSupport;, +	 * @param registryInitializer an initializer for message extensions, +		this(null, registryInitializer);, +	}, +, +	ProtobufHttpMessageConverter(ProtobufFormatSupport formatSupport, ExtensionRegistryInitializer registryInitializer) {, +		if (formatSupport != null) {, +			this.protobufFormatSupport = formatSupport;, +		}, +		else if (ClassUtils.isPresent("com.googlecode.protobuf.format.FormatFactory", getClass().getClassLoader())) {, +		else if (ClassUtils.isPresent("com.google.protobuf.util.JsonFormat", getClass().getClassLoader())) {, +			this.protobufFormatSupport = new ProtobufJavaUtilSupport(null, null);, +, +		setSupportedMediaTypes(Arrays.asList((this.protobufFormatSupport != null ?, +				this.protobufFormatSupport.supportedMediaTypes() : new MediaType[] {PROTOBUF, TEXT_PLAIN})));, +, +			else if (TEXT_PLAIN.isCompatibleWith(contentType)) {, +			else if (this.protobufFormatSupport != null) {, +				(this.protobufFormatSupport != null && this.protobufFormatSupport.supportsWriteOnly(mediaType)));, +		else if (TEXT_PLAIN.isCompatibleWith(contentType)) {, +			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +		else if (this.protobufFormatSupport != null) {, +	interface ProtobufFormatSupport {, +, +		MediaType[] supportedMediaTypes();, +, +		boolean supportsWriteOnly(MediaType mediaType);, +		void print(Message message, OutputStream output, MediaType contentType, Charset charset) throws IOException;, +	static class ProtobufJavaFormatSupport implements ProtobufFormatSupport {, +		private final ProtobufFormatter jsonFormatter;, +		private final ProtobufFormatter xmlFormatter;, +		private final ProtobufFormatter htmlFormatter;, +, +		public ProtobufJavaFormatSupport() {, +			FormatFactory formatFactory = new FormatFactory();, +			this.jsonFormatter = formatFactory.createFormatter(FormatFactory.Formatter.JSON);, +			this.xmlFormatter = formatFactory.createFormatter(FormatFactory.Formatter.XML);, +			this.htmlFormatter = formatFactory.createFormatter(FormatFactory.Formatter.HTML);, +		}, +, +		@Override, +		public MediaType[] supportedMediaTypes() {, +			return new MediaType[] {PROTOBUF, TEXT_PLAIN, APPLICATION_XML, APPLICATION_JSON};, +		}, +, +		@Override, +		public boolean supportsWriteOnly(MediaType mediaType) {, +			return TEXT_HTML.isCompatibleWith(mediaType);, +			if (contentType.isCompatibleWith(APPLICATION_JSON)) {, +				this.jsonFormatter.merge(input, charset, extensionRegistry, builder);, +			}, +			else if (contentType.isCompatibleWith(APPLICATION_XML)) {, +				this.xmlFormatter.merge(input, charset, extensionRegistry, builder);, +			}, +			else {, +				throw new IOException("com.google.protobuf.util does not support " + contentType + " format");, +			}, +		}, +, +		@Override, +		public void print(Message message, OutputStream output, MediaType contentType, Charset charset), +				throws IOException {, +, +			if (contentType.isCompatibleWith(APPLICATION_JSON)) {, +				this.jsonFormatter.print(message, output, charset);, +			}, +			else if (contentType.isCompatibleWith(APPLICATION_XML)) {, +				this.xmlFormatter.print(message, output, charset);, +			}, +			else if (contentType.isCompatibleWith(TEXT_HTML)) {, +				this.htmlFormatter.print(message, output, charset);, +			}, +			else {, +				throw new IOException("protobuf-java-format does not support " + contentType + " format");, +			}, +		}, +	}, +]