[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, +		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation);, +	}, +, +	/**, +	 * Set whether to use Spring-based scanning for entity classes in the classpath, +	 * instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>, +	 * markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>, +	 * is necessary; all you need to do is to specify base packages to search here., +	 * <p>Default is none. Specify packages to search for autodetection of your entity, +	 * classes in the classpath. This is analogous to Spring's component-scan feature, +	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 * @param packagesToScan one or more base packages to search, analogous to, +	 * Spring's component-scan configuration for regular Spring components, +	 * @see #setPersistenceUnitManager, +	 */, +	public void setPackagesToScan(String[] packagesToScan) {, +		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, +		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation);, +	}, +, +	/**, +	 * Set whether to use Spring-based scanning for entity classes in the classpath, +	 * instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>, +	 * markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>, +	 * is necessary; all you need to do is to specify base packages to search here., +	 * <p>Default is none. Specify packages to search for autodetection of your entity, +	 * classes in the classpath. This is analogous to Spring's component-scan feature, +	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 * @param packagesToScan one or more base packages to search, analogous to, +	 * Spring's component-scan configuration for regular Spring components, +	 * @see #setPersistenceUnitManager, +	 */, +	public void setPackagesToScan(String[] packagesToScan) {, +		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2011 the original author or authors., +import java.util.Arrays;, +import java.util.LinkedList;, +import java.util.List;, +import javax.persistence.Embeddable;, +import javax.persistence.Entity;, +import javax.persistence.MappedSuperclass;, +import org.springframework.core.type.classreading.CachingMetadataReaderFactory;, +import org.springframework.core.type.classreading.MetadataReader;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +import org.springframework.core.type.filter.AnnotationTypeFilter;, +import org.springframework.core.type.filter.TypeFilter;, +	public final static String ORIGINAL_DEFAULT_PERSISTENCE_UNIT_NAME = "default";, +, +	private static final String RESOURCE_PATTERN = "/**/*.class";, +, +	private static final TypeFilter[] entityTypeFilters = new TypeFilter[] {, +			new AnnotationTypeFilter(Entity.class, false),, +			new AnnotationTypeFilter(Embeddable.class, false),, +			new AnnotationTypeFilter(MappedSuperclass.class, false)};, +, +	private String defaultPersistenceUnitName = ORIGINAL_DEFAULT_PERSISTENCE_UNIT_NAME;, +, +	private String[] packagesToScan;, +, +	 * Specify the name of the default persistence unit, if any. Default is "default"., +	 * <p>Primarily applied to a scanned persistence unit without <code>persistence.xml</code>., +	 * Also applicable to selecting a default unit from several persistence units available., +	 * @see #setPackagesToScan, +	 * @see #obtainDefaultPersistenceUnitInfo, +	 */, +	public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {, +		this.defaultPersistenceUnitName = defaultPersistenceUnitName;, +	}, +, +	/**, +	 * Set whether to use Spring-based scanning for entity classes in the classpath, +	 * instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>, +	 * markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>, +	 * is necessary; all you need to do is to specify base packages to search here., +	 * <p>Default is none. Specify packages to search for autodetection of your entity, +	 * classes in the classpath. This is analogous to Spring's component-scan feature, +	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})., +	 */, +	public void setPackagesToScan(String[] packagesToScan) {, +		this.packagesToScan = packagesToScan;, +	}, +, +	/**, +		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos();, +			if (!this.persistenceUnitInfoNames.add(name)) {, +				StringBuilder msg = new StringBuilder();, +				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ");, +				msg.append(pui.getPersistenceUnitRootUrl()).append(", ");, +				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl());, +				throw new IllegalStateException(msg.toString());, +			}, +	private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {, +		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>();, +		infos.addAll(Arrays.asList(reader.readPersistenceUnitInfos(this.persistenceXmlLocations)));, +		if (this.packagesToScan != null) {]