[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.TypeConverter;, +import org.springframework.util.Assert;, + * @author Ivo Smid, +		Assert.notEmpty(operands);, +				if (operandOne instanceof Double || operandOne instanceof Long) {, +					return new TypedValue(operandOne);, +					return new TypedValue(((Number) operandOne).intValue());, +			final TypedValue operandOneValue = leftOp.getValueInternal(state);, +			final Object operandOne = operandOneValue.getValue();, +, +			final TypedValue operandTwoValue = rightOp.getValueInternal(state);, +			final Object operandTwo = operandTwoValue.getValue();, +, +				result.append((operandTwo == null ? "null" : convertTypedValueToString(operandTwoValue, state)));, +				StringBuilder result = new StringBuilder((operandOne == null ? "null" : convertTypedValueToString(, +						operandOneValue, state)));, +	@Override, +		if (children.length < 2) {, +			return null;, +		}, +	/**, +	 * Convert operand value to string using registered converter or using, +	 * {@code toString} method., +	 *, +	 * @param value typed value to be converted, +	 * @param state expression state, +	 * @return {@code TypedValue} instance converted to {@code String}, +	 */, +	private static String convertTypedValueToString(TypedValue value, ExpressionState state) {, +		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter();, +		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class);, +, +		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {, +			final Object obj = typeConverter.convertValue(value.getValue(), value.getTypeDescriptor(), typeDescriptor);, +			return String.valueOf(obj);, +		} else {, +			return String.valueOf(value.getValue());, +		}, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.TypeConverter;, +import org.springframework.util.Assert;, + * @author Ivo Smid, +		Assert.notEmpty(operands);, +				if (operandOne instanceof Double || operandOne instanceof Long) {, +					return new TypedValue(operandOne);, +					return new TypedValue(((Number) operandOne).intValue());, +			final TypedValue operandOneValue = leftOp.getValueInternal(state);, +			final Object operandOne = operandOneValue.getValue();, +, +			final TypedValue operandTwoValue = rightOp.getValueInternal(state);, +			final Object operandTwo = operandTwoValue.getValue();, +, +				result.append((operandTwo == null ? "null" : convertTypedValueToString(operandTwoValue, state)));, +				StringBuilder result = new StringBuilder((operandOne == null ? "null" : convertTypedValueToString(, +						operandOneValue, state)));, +	@Override, +		if (children.length < 2) {, +			return null;, +		}, +	/**, +	 * Convert operand value to string using registered converter or using, +	 * {@code toString} method., +	 *, +	 * @param value typed value to be converted, +	 * @param state expression state, +	 * @return {@code TypedValue} instance converted to {@code String}, +	 */, +	private static String convertTypedValueToString(TypedValue value, ExpressionState state) {, +		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter();, +		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class);, +, +		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {, +			final Object obj = typeConverter.convertValue(value.getValue(), value.getTypeDescriptor(), typeDescriptor);, +			return String.valueOf(obj);, +		} else {, +			return String.valueOf(value.getValue());, +		}, +	}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/ast/OpPlusTests.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]