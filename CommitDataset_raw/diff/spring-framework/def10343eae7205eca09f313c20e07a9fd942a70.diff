[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java, + * Copyright 2002-2015 the original author or authors., +import java.io.IOException;, +import org.springframework.core.io.Resource;, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +		assertThat(context.getBean("colour", Colour.class), equalTo(Colour.RED));, +		assertThat(context.getBean("testBean", TestBean.class).getName(), equalTo(Colour.RED.toString()));, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +		assertThat(context.getBean(Colour.class), equalTo(Colour.RED));, +		assertThat(context.getBean(TestBean.class).getName(), equalTo("RED-RED"));, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +		assertThat(context.getBean(Colour.class), equalTo(Colour.RED));, +		assertThat(context.getBean(TestBean.class).getName(), equalTo("RED-RED"));, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +		assertTrue(context.getBeansOfType(Colour.class).isEmpty());, +		assertThat(context.getBean(TestBean.class).getName(), equalTo(""));, +		DefaultListableBeanFactory context = new DefaultListableBeanFactory();, +		new XmlBeanDefinitionReader(context).loadBeanDefinitions(, +		GenericApplicationContext ctx = new GenericApplicationContext(context);, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +		doTestValueInjection(context);, +		AnnotationConfigApplicationContext context =, +		doTestValueInjection(context);, +		AnnotationConfigApplicationContext context =, +		doTestValueInjection(context);, +		AnnotationConfigApplicationContext context =, +		doTestValueInjection(context);, +	private void doTestValueInjection(BeanFactory context) {, +		TestBean testBean = context.getBean("testBean", TestBean.class);, +		testBean = context.getBean("testBean2", TestBean.class);, +		testBean = context.getBean("testBean", TestBean.class);, +		testBean = context.getBean("testBean2", TestBean.class);, +		testBean = context.getBean("testBean", TestBean.class);, +		testBean = context.getBean("testBean2", TestBean.class);, +	public void testCustomPropertiesWithClassPathContext() throws IOException {, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +		TestBean testBean = context.getBean("testBean", TestBean.class);, +		assertThat(testBean.getAge(), equalTo((int) new ClassPathResource("log4j.properties").contentLength()));, +	}, +, +	@Test, +	public void testCustomPropertiesWithGenericContext() throws IOException {, +		GenericApplicationContext context = new GenericApplicationContext();, +		// context.setResourceLoader(new FileSystemResourceLoader());, +		new XmlBeanDefinitionReader(context).loadBeanDefinitions(, +				new ClassPathResource("AutowiredConfigurationTests-custom.xml", AutowiredConfigurationTests.class));, +		context.refresh();, +, +		TestBean testBean = context.getBean("testBean", TestBean.class);, +		assertThat(testBean.getName(), equalTo("localhost"));, +		assertThat(testBean.getAge(), equalTo((int) new ClassPathResource("log4j.properties").contentLength()));, +		private Resource resource;, +, +		@Value("log4j.properties"), +		public void setResource(Resource resource) {, +			this.resource = resource;, +		}, +, +		public TestBean testBean() throws IOException {, +			return new TestBean(hostname, (int) resource.contentLength());]