[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			RuntimeBeanReference handshakeHandler =, +					WebSocketNamespaceUtils.registerHandshakeHandler(stompEndpointElement, parserCxt, source);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			RuntimeBeanReference handshakeHandler =, +					WebSocketNamespaceUtils.registerHandshakeHandler(stompEndpointElement, parserCxt, source);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler;, +			Element handshakeHandlerElement = DomUtils.getChildElementByTagName(element, "handshake-handler");, +, +			} else if(handshakeHandlerElement != null){, +				RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandlerElement.getAttribute("ref"));, +, +				RootBeanDefinition wsTransportHandler = new RootBeanDefinition(WebSocketTransportHandler.class);, +				wsTransportHandler.setSource(source);, +				wsTransportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, wsTransportHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			RuntimeBeanReference handshakeHandler =, +					WebSocketNamespaceUtils.registerHandshakeHandler(stompEndpointElement, parserCxt, source);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler;, +			Element handshakeHandlerElement = DomUtils.getChildElementByTagName(element, "handshake-handler");, +, +			} else if(handshakeHandlerElement != null){, +				RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandlerElement.getAttribute("ref"));, +, +				RootBeanDefinition wsTransportHandler = new RootBeanDefinition(WebSocketTransportHandler.class);, +				wsTransportHandler.setSource(source);, +				wsTransportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, wsTransportHandler);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.web.socket.server.HandshakeHandler;, +import org.springframework.web.socket.sockjs.transport.TransportType;, +import org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;, +import org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler;, +, +		HandshakeHandler handshakeHandler = (HandshakeHandler), +				new DirectFieldAccessor(wsHttpRequestHandler).getPropertyValue("handshakeHandler");, +		assertNotNull(handshakeHandler);, +		assertTrue(handshakeHandler instanceof TestHandshakeHandler);, +, +		assertThat(sockJsHttpRequestHandler.getSockJsService(), Matchers.instanceOf(DefaultSockJsService.class));, +, +		DefaultSockJsService defaultSockJsService = (DefaultSockJsService) sockJsHttpRequestHandler.getSockJsService();, +		WebSocketTransportHandler wsTransportHandler = (WebSocketTransportHandler) defaultSockJsService, +				.getTransportHandlers().get(TransportType.WEBSOCKET);, +		assertNotNull(wsTransportHandler.getHandshakeHandler());, +		assertThat(wsTransportHandler.getHandshakeHandler(), Matchers.instanceOf(TestHandshakeHandler.class));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			RuntimeBeanReference handshakeHandler =, +					WebSocketNamespaceUtils.registerHandshakeHandler(stompEndpointElement, parserCxt, source);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler;, +			Element handshakeHandlerElement = DomUtils.getChildElementByTagName(element, "handshake-handler");, +, +			} else if(handshakeHandlerElement != null){, +				RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandlerElement.getAttribute("ref"));, +, +				RootBeanDefinition wsTransportHandler = new RootBeanDefinition(WebSocketTransportHandler.class);, +				wsTransportHandler.setSource(source);, +				wsTransportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, wsTransportHandler);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.web.socket.server.HandshakeHandler;, +import org.springframework.web.socket.sockjs.transport.TransportType;, +import org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService;, +import org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler;, +, +		HandshakeHandler handshakeHandler = (HandshakeHandler), +				new DirectFieldAccessor(wsHttpRequestHandler).getPropertyValue("handshakeHandler");, +		assertNotNull(handshakeHandler);, +		assertTrue(handshakeHandler instanceof TestHandshakeHandler);, +, +		assertThat(sockJsHttpRequestHandler.getSockJsService(), Matchers.instanceOf(DefaultSockJsService.class));, +, +		DefaultSockJsService defaultSockJsService = (DefaultSockJsService) sockJsHttpRequestHandler.getSockJsService();, +		WebSocketTransportHandler wsTransportHandler = (WebSocketTransportHandler) defaultSockJsService, +				.getTransportHandlers().get(TransportType.WEBSOCKET);, +		assertNotNull(wsTransportHandler.getHandshakeHandler());, +		assertThat(wsTransportHandler.getHandshakeHandler(), Matchers.instanceOf(TestHandshakeHandler.class));, +++ b/spring-websocket/src/test/resources/org/springframework/web/socket/config/websocket-config-broker-relay.xml]