[+++ b/spring-framework-reference/src/mvc.xml, +    will need to have a file called <literal>/WEB-INF/</literal><emphasis, +    role="bold">golfing</emphasis><literal>-servlet.xml</literal> in your application;, +      resides in the <literal>org.springframework.samples.petclinic</literal> module.</para>, +        ModelAndView mav = new ModelAndView();, +      still reference Servlet-specific features if you need to.</para>, +      an entire class or a particular handler method. Typically the class-level annotation, +      <para>The following example shows a controller in a JSF application, +      that uses this annotation:</para>, +    private final AppointmentBook appointmentBook;, +        <para>Use the <interfacename>@PathVariable</interfacename> method, +        <para>The following code snippet shows the usage of a single, +        in order to bind the resolved value of the variable name to a , +}</programlisting>, +        You can also use a controller method with the following, +        <para>The following code snippet shows the usage of path variables on a, +          Date, etc. Spring automatically converts to the appropriate type and, +        conditions:</para>, +        , +        <programlisting language="java">@Controller, +}</programlisting>, +, +        <para>In the above example, the <methodname>addPet()</methodname> method is, +        only invoked when the <literal>content-type</literal> matches the <literal>text/*</literal>, +        pattern, for example, <literal>text/xml</literal>.</para>, +        arbitrary order (except for validation results, which need to follow, +        right after the corresponding command object, if desired):, +        <!--Reword preceding sentence to clarify, make it a complete sentence and no parentheses: first it says validation results *must*--><!--immediately follow command object, but then it says *if desired*. Clarify what must happen if what is desired. And are validation --><!-- results a type of argument? Relate to the sentence that precedes it.-->, +              <para>Request or response objects (Servlet API). Choose any, +              specific request or response type, for example, +              <interfacename>ServletRequest</interfacename> or, +                a Servlet environment. Consider setting the, +              for access to the HTTP request body. Parameter values are, +              exposed as model attributes by default, using the non-qualified, +              immediately preceding method argument).</para>, +              as the logical view name, with the model implicitly determined through, +              <para>Any other return type is considered to be a single model, +        required=false)</literal>).</para>, +        <para>You convert the request body to the method argument by using an, +        <para>The above example will result in the text <literal>Hello, +        the returned object to a response body by using an, +        <para>You can also use <classname>@ModelAttribute</classname> at, +        the model (see the <literal>populatePetTypes()</literal> method in, +        the following example). For this usage the method signature can contain, +            <emphasis role="bold">@ModelAttribute("pet") Pet pet</emphasis>,, +            BindingResult result, SessionStatus status) {, +        This will typically list the names of model attributes or types of, +        model attributes which should be, +        annotation, specifying the model attribute name:</para>, +}</programlisting>, +          <literal>/admin</literal><emphasis role="bold">/*</emphasis> request, +          <literal>/catalog</literal><emphasis role="bold">/*</emphasis>, +      <literal>xxx</literal><emphasis role="bold">Controller</emphasis>, the]