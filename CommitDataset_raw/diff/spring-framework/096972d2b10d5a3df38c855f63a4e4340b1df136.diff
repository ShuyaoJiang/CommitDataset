[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +import org.hibernate.Interceptor;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +		implements ResourceTransactionManager, BeanFactoryAware, InitializingBean {, +	private Object entityInterceptor;, +, +	/**, +	 * Just needed for entityInterceptorBeanName., +	 * @see #setEntityInterceptorBeanName, +	 */, +	private BeanFactory beanFactory;, +, +	 * {@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores, +	/**, +	 * Set the bean name of a Hibernate entity interceptor that allows to inspect, +	 * and change property values before writing to and reading from the database., +	 * Will get applied to any new Session created by this transaction manager., +	 * <p>Requires the bean factory to be known, to be able to resolve the bean, +	 * name to an interceptor instance on session creation. Typically used for, +	 * prototype interceptors, i.e. a new interceptor instance per session., +	 * <p>Can also be used for shared interceptor instances, but it is recommended, +	 * to set the interceptor reference directly in such a scenario., +	 * @param entityInterceptorBeanName the name of the entity interceptor in, +	 * the bean factory, +	 * @see #setBeanFactory, +	 * @see #setEntityInterceptor, +	 */, +	public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {, +		this.entityInterceptor = entityInterceptorBeanName;, +	}, +, +	/**, +	 * Set a Hibernate entity interceptor that allows to inspect and change, +	 * property values before writing to and reading from the database., +	 * Will get applied to any new Session created by this transaction manager., +	 * <p>Such an interceptor can either be set at the SessionFactory level,, +	 * i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on, +	 * HibernateTemplate, HibernateInterceptor, and HibernateTransactionManager., +	 * It's preferable to set it on LocalSessionFactoryBean or HibernateTransactionManager, +	 * to avoid repeated configuration and guarantee consistent behavior in transactions., +	 * @see LocalSessionFactoryBean#setEntityInterceptor, +	 */, +	public void setEntityInterceptor(Interceptor entityInterceptor) {, +		this.entityInterceptor = entityInterceptor;, +	}, +, +	/**, +	 * Return the current Hibernate entity interceptor, or {@code null} if none., +	 * Resolves an entity interceptor bean name via the bean factory,, +	 * if necessary., +	 * @throws IllegalStateException if bean name specified but no bean factory set, +	 * @throws BeansException if bean name resolution via the bean factory failed, +	 * @see #setEntityInterceptor, +	 * @see #setEntityInterceptorBeanName, +	 * @see #setBeanFactory, +	 */, +	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {, +		if (this.entityInterceptor instanceof Interceptor) {, +			return (Interceptor) entityInterceptor;, +		}, +		else if (this.entityInterceptor instanceof String) {, +			if (this.beanFactory == null) {, +				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set");, +			}, +			String beanName = (String) this.entityInterceptor;, +			return this.beanFactory.getBean(beanName, Interceptor.class);, +		}, +		else {, +			return null;, +		}, +	}, +, +	/**, +	 * The bean factory just needs to be known for resolving entity interceptor, +	 * bean names. It does not need to be set for any other mode of operation., +	 * @see #setEntityInterceptorBeanName, +	 */, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +		if (this.entityInterceptor instanceof String && this.beanFactory == null) {, +			throw new IllegalArgumentException("Property 'beanFactory' is required for 'entityInterceptorBeanName'");, +		}, +				Interceptor entityInterceptor = getEntityInterceptor();, +				Session newSession = (entityInterceptor != null ?, +						getSessionFactory().withOptions().interceptor(entityInterceptor).openSession() :, +						getSessionFactory().openSession());, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +import org.hibernate.Interceptor;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +		implements ResourceTransactionManager, BeanFactoryAware, InitializingBean {, +	private Object entityInterceptor;, +, +	/**, +	 * Just needed for entityInterceptorBeanName.]