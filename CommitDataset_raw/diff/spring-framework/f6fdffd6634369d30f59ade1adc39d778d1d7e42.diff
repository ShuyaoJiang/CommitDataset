[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Supplier;, +import org.springframework.util.function.SingletonSupplier;, +	private SingletonSupplier<Executor> defaultExecutor;, +	private SingletonSupplier<AsyncUncaughtExceptionHandler> exceptionHandler;, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(SimpleAsyncUncaughtExceptionHandler::new);, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +	 * Configure this aspect with the given executor and exception handler suppliers,, +	 * applying the corresponding default if a supplier is not resolvable., +	 * @since 5.1, +	 */, +	public void configure(@Nullable Supplier<Executor> defaultExecutor,, +			@Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {, +, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = new SingletonSupplier<>(exceptionHandler, SimpleAsyncUncaughtExceptionHandler::new);, +	}, +, +	/**, +		this.defaultExecutor = SingletonSupplier.of(defaultExecutor);, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +				targetExecutor = this.defaultExecutor.get();, +				this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Supplier;, +import org.springframework.util.function.SingletonSupplier;, +	private SingletonSupplier<Executor> defaultExecutor;, +	private SingletonSupplier<AsyncUncaughtExceptionHandler> exceptionHandler;, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(SimpleAsyncUncaughtExceptionHandler::new);, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +	 * Configure this aspect with the given executor and exception handler suppliers,, +	 * applying the corresponding default if a supplier is not resolvable., +	 * @since 5.1, +	 */, +	public void configure(@Nullable Supplier<Executor> defaultExecutor,, +			@Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {, +, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = new SingletonSupplier<>(exceptionHandler, SimpleAsyncUncaughtExceptionHandler::new);, +	}, +, +	/**, +		this.defaultExecutor = SingletonSupplier.of(defaultExecutor);, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +				targetExecutor = this.defaultExecutor.get();, +				this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Supplier;, +import org.springframework.util.function.SingletonSupplier;, +	private SingletonSupplier<Executor> defaultExecutor;, +	private SingletonSupplier<AsyncUncaughtExceptionHandler> exceptionHandler;, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(SimpleAsyncUncaughtExceptionHandler::new);, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +	 * Configure this aspect with the given executor and exception handler suppliers,, +	 * applying the corresponding default if a supplier is not resolvable., +	 * @since 5.1, +	 */, +	public void configure(@Nullable Supplier<Executor> defaultExecutor,, +			@Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {, +, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = new SingletonSupplier<>(exceptionHandler, SimpleAsyncUncaughtExceptionHandler::new);, +	}, +, +	/**, +		this.defaultExecutor = SingletonSupplier.of(defaultExecutor);, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +				targetExecutor = this.defaultExecutor.get();, +				this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/SimpleAsyncUncaughtExceptionHandler.java, + * Copyright 2002-2018 the original author or authors., +	private static final Log logger = LogFactory.getLog(SimpleAsyncUncaughtExceptionHandler.class);, +, +			logger.error("Unexpected error occurred invoking async method: " + method, ex);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Supplier;, +import org.springframework.util.function.SingletonSupplier;, +	private SingletonSupplier<Executor> defaultExecutor;, +	private SingletonSupplier<AsyncUncaughtExceptionHandler> exceptionHandler;, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(SimpleAsyncUncaughtExceptionHandler::new);, +		this.defaultExecutor = new SingletonSupplier<>(defaultExecutor, () -> getDefaultExecutor(this.beanFactory));, +		this.exceptionHandler = SingletonSupplier.of(exceptionHandler);, +	 * Configure this aspect with the given executor and exception handler suppliers,, +	 * applying the corresponding default if a supplier is not resolvable., +	 * @since 5.1]