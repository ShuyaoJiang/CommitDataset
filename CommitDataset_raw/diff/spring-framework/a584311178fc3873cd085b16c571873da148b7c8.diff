[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +		return inputFlux.map(buffer ->  decodeDataBuffer(buffer, mimeType));, +		return Flux.from(inputStream), +				.reduce(DataBuffer::write), +				.map(buffer -> decodeDataBuffer(buffer, mimeType));, +	private String decodeDataBuffer(DataBuffer dataBuffer, MimeType mimeType) {, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +		return inputFlux.map(buffer ->  decodeDataBuffer(buffer, mimeType));, +		return Flux.from(inputStream), +				.reduce(DataBuffer::write), +				.map(buffer -> decodeDataBuffer(buffer, mimeType));, +	private String decodeDataBuffer(DataBuffer dataBuffer, MimeType mimeType) {, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +	public void decodeEmptyFlux() throws InterruptedException {, +		Flux<DataBuffer> source = Flux.empty();, +		Flux<String> output = this.decoder.decode(source, ResolvableType.forClass(String.class), null);, +, +		TestSubscriber.subscribe(output), +				.assertNoError(), +				.assertComplete(), +				.assertNoValues();, +	}, +, +	@Test, +	public void decodeEmptyString() throws InterruptedException {, +	@Test, +	public void decodeToMonoWithEmptyFlux() throws InterruptedException {, +		Flux<DataBuffer> source = Flux.empty();, +		Mono<String> output = this.decoder.decodeToMono(source, ResolvableType.forClass(String.class), null);, +, +		TestSubscriber.subscribe(output), +				.assertNoError(), +				.assertComplete(), +				.assertNoValues();, +	}, +]