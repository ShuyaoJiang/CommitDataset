[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +				if (writeMethod != null, +						&& !(existingPD instanceof IndexedPropertyDescriptor &&, +								!writeMethod.getParameterTypes()[0].isArray())) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +				if (writeMethod != null, +						&& !(existingPD instanceof IndexedPropertyDescriptor &&, +								!writeMethod.getParameterTypes()[0].isArray())) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, +	@Test, +	public void cornerSpr8937() throws IntrospectionException {, +		@SuppressWarnings("unused") class A {, +			public void setAddress(String addr){ }, +			public void setAddress(int index, String addr) { }, +			public String getAddress(int index){ return null; }, +		}, +, +		{ // baseline. ExtendedBeanInfo needs to behave exactly like the following, +			BeanInfo bi = Introspector.getBeanInfo(A.class);, +			assertThat(hasReadMethodForProperty(bi, "address"), is(false));, +			assertThat(hasWriteMethodForProperty(bi, "address"), is(false));, +			assertThat(hasIndexedReadMethodForProperty(bi, "address"), is(true));, +			assertThat(hasIndexedWriteMethodForProperty(bi, "address"), is(true));, +		}, +		{, +			ExtendedBeanInfo bi = new ExtendedBeanInfo(Introspector.getBeanInfo(A.class));, +			assertThat(hasReadMethodForProperty(bi, "address"), is(false));, +			assertThat(hasWriteMethodForProperty(bi, "address"), is(false));, +			assertThat(hasIndexedReadMethodForProperty(bi, "address"), is(true));, +			assertThat(hasIndexedWriteMethodForProperty(bi, "address"), is(true));]