[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +		// A bean definition resulting from a component scan can be silently overridden, +		// by an @Bean method, as of 4.2..., +		if (existingBeanDef instanceof ScannedGenericBeanDefinition) {, +			return false;, +		}, +, +		if (this.registry instanceof DefaultListableBeanFactory &&, +				!((DefaultListableBeanFactory) this.registry).isAllowBeanDefinitionOverriding()) {, +			throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +					beanName, "@Bean definition illegally overridden by existing bean definition: " + existingBeanDef);, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +		// A bean definition resulting from a component scan can be silently overridden, +		// by an @Bean method, as of 4.2..., +		if (existingBeanDef instanceof ScannedGenericBeanDefinition) {, +			return false;, +		}, +, +		if (this.registry instanceof DefaultListableBeanFactory &&, +				!((DefaultListableBeanFactory) this.registry).isAllowBeanDefinitionOverriding()) {, +			throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +					beanName, "@Bean definition illegally overridden by existing bean definition: " + existingBeanDef);, +		}, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ComponentScanAnnotatedConfigWithImplicitBasePackage.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.context.annotation.Bean;, +, +	@Bean  // override of scanned class, +	public ConfigurableComponent configurableComponent() {, +		return new ConfigurableComponent(true);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +		// A bean definition resulting from a component scan can be silently overridden, +		// by an @Bean method, as of 4.2..., +		if (existingBeanDef instanceof ScannedGenericBeanDefinition) {, +			return false;, +		}, +, +		if (this.registry instanceof DefaultListableBeanFactory &&, +				!((DefaultListableBeanFactory) this.registry).isAllowBeanDefinitionOverriding()) {, +			throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +					beanName, "@Bean definition illegally overridden by existing bean definition: " + existingBeanDef);, +		}, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ComponentScanAnnotatedConfigWithImplicitBasePackage.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.context.annotation.Bean;, +, +	@Bean  // override of scanned class, +	public ConfigurableComponent configurableComponent() {, +		return new ConfigurableComponent(true);, +	}, +, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ConfigurableComponent.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package example.scannable_implicitbasepackage;, +, +import org.springframework.stereotype.Component;, +, +/**, + * @author Juergen Hoeller, + */, +@Component, +public class ConfigurableComponent {, +, +	private final boolean flag;, +, +	public ConfigurableComponent() {, +		this(false);, +	}, +, +	public ConfigurableComponent(boolean flag) {, +		this.flag = flag;, +	}, +, +	public boolean isFlag() {]