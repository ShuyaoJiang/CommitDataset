[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.function.Supplier;, +				Mono::error,, +				Mono::empty);, +				Flux::error,, +				Flux::empty);, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError,, +			Supplier<S> empty) {, +		if (elementType.equals(ResolvableType.forClass(Void.class))) {, +			return empty.get();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.function.Supplier;, +				Mono::error,, +				Mono::empty);, +				Flux::error,, +				Flux::empty);, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError,, +			Supplier<S> empty) {, +		if (elementType.equals(ResolvableType.forClass(Void.class))) {, +			return empty.get();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return this.responseMono.flatMap(response -> {, +						HttpStatus statusCode = response.statusCode();, +						return response.bodyToMono(bodyType), +								.map(body -> new ResponseEntity<>(body, headers, statusCode)), +								.switchIfEmpty(Mono.defer(, +										() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +					}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.function.Supplier;, +				Mono::error,, +				Mono::empty);, +				Flux::error,, +				Flux::empty);, +			Function<HttpMessageReader<T>, S> readerFunction, Function<Throwable, S> unsupportedError,, +			Supplier<S> empty) {, +		if (elementType.equals(ResolvableType.forClass(Void.class))) {, +			return empty.get();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return this.responseMono.flatMap(response -> {, +						HttpStatus statusCode = response.statusCode();, +						return response.bodyToMono(bodyType), +								.map(body -> new ResponseEntity<>(body, headers, statusCode)), +								.switchIfEmpty(Mono.defer(, +										() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +					}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +		String baseUrl = this.server.url("/").toString();, +	@Test, +	public void exchangeNoContent() throws Exception  {, +		this.server.enqueue(new MockResponse().setHeader("Content-Length", "0"));, +, +		Mono<ClientResponse> result = this.webClient.get(), +				.uri("/noContent"), +				.exchange();, +, +		StepVerifier.create(result).assertNext(r -> {, +			assertTrue(r.statusCode().is2xxSuccessful());, +			StepVerifier.create(r.bodyToMono(Void.class)).verifyComplete();, +		}).verifyComplete();, +	}, +, +	@Test, +	public void retrieveNoContent() throws Exception  {, +		this.server.enqueue(new MockResponse().setHeader("Content-Length", "0"));, +, +		Mono<ResponseEntity<Void>> result = this.webClient.get(), +				.uri("/noContent"), +				.retrieve(), +				.toEntity(Void.class);, +, +		StepVerifier.create(result).assertNext(r -> {, +			assertFalse(r.hasBody());, +			assertTrue(r.getStatusCode().is2xxSuccessful());, +		}).verifyComplete();, +	}, +]