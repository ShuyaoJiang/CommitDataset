[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +			HandlerProvider<WebSocketHandler<?>> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +			HandlerProvider<WebSocketHandler<?>> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, HandlerProvider<WebSocketHandler<?>> handler), +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException;, +			String sessionId, TransportType transportType, HandlerProvider<WebSocketHandler<?>> handler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +			HandlerProvider<WebSocketHandler<?>> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, HandlerProvider<WebSocketHandler<?>> handler), +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException;, +			String sessionId, TransportType transportType, HandlerProvider<WebSocketHandler<?>> handler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException, TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +			HandlerProvider<WebSocketHandler<?>> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, HandlerProvider<WebSocketHandler<?>> handler), +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException;, +			String sessionId, TransportType transportType, HandlerProvider<WebSocketHandler<?>> handler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException, TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/TransportHandler.java, +			HandlerProvider<WebSocketHandler<?>> handler, AbstractSockJsSession session) throws TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +			HandlerProvider<WebSocketHandler<?>> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, HandlerProvider<WebSocketHandler<?>> handler), +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException;, +			String sessionId, TransportType transportType, HandlerProvider<WebSocketHandler<?>> handler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException, TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/TransportHandler.java, +			HandlerProvider<WebSocketHandler<?>> handler, AbstractSockJsSession session) throws TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/support/DefaultSockJsService.java, +			HandlerProvider<WebSocketHandler<?>> handler) throws IOException {, +			String sessionId, TransportType transportType, HandlerProvider<WebSocketHandler<?>> handler), +	public AbstractSockJsSession getSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handler,, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	public AbstractSockJsSession(String sessionId, HandlerProvider<WebSocketHandler<?>> handlerProvider) {, +			this.handler.handleMessage(this, new TextMessage(message));, +		this.handler.handleTransportError(this, ex);, +				this.handler.afterConnectionClosed(this, status);, +				this.handler.afterConnectionClosed(this, status);]