[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	/**, +	 * The headers of the mapped request, narrowing the primary mapping., +	 * <p>Same format for any environment: a sequence of "My-Header=myValue" style, +	 * expressions, with a request only mapped if each such header is found, +	 * to have the given value. "My-Header" style expressions are also supported,, +	 * with such headers having to be present in the request (allowed to have, +	 * any value). Finally, "!My-Header" style expressions indicate that the, +	 * specified header is <i>not</i> supposed to be present in the request., +	 * <p>Also supports media type wildcards (*), for headers such as Accept, +	 * and Content-Type. For instance,, +	 * <pre>, +	 * &#064;RequestMapping(value = "/something", headers = "content-type=text/*"), +	 * </pre>, +	 * will match requests with a Content-Type of "text/html", "text/plain", etc., +	 * <p><b>Supported at the type level as well as at the method level!</b>, +	 * When used at the type level, all method-level mappings inherit, +	 * this header restriction (i.e. the type-level restriction, +	 * gets checked before the handler method is even resolved)., +	 * @see org.springframework.http.MediaType, +	 */, +	String[] headers() default {}; , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	/**, +	 * The headers of the mapped request, narrowing the primary mapping., +	 * <p>Same format for any environment: a sequence of "My-Header=myValue" style, +	 * expressions, with a request only mapped if each such header is found, +	 * to have the given value. "My-Header" style expressions are also supported,, +	 * with such headers having to be present in the request (allowed to have, +	 * any value). Finally, "!My-Header" style expressions indicate that the, +	 * specified header is <i>not</i> supposed to be present in the request., +	 * <p>Also supports media type wildcards (*), for headers such as Accept, +	 * and Content-Type. For instance,, +	 * <pre>, +	 * &#064;RequestMapping(value = "/something", headers = "content-type=text/*"), +	 * </pre>, +	 * will match requests with a Content-Type of "text/html", "text/plain", etc., +	 * <p><b>Supported at the type level as well as at the method level!</b>, +	 * When used at the type level, all method-level mappings inherit, +	 * this header restriction (i.e. the type-level restriction, +	 * gets checked before the handler method is even resolved)., +	 * @see org.springframework.http.MediaType, +	 */, +	String[] headers() default {}; , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				if (!hasTypeLevelMapping() || !Arrays.equals(mapping.headers(), getTypeLevelMapping().headers())) {, +					mappingInfo.headers = mapping.headers();, +				}, +							if (mappingInfo.matches(request)) {, +					match = mappingInfo.matches(request);, +		String[] headers = new String[0];, +, +		public boolean matches(HttpServletRequest request) {, +			return ServletAnnotationMappingUtils.checkRequestMethod(this.methods, request) &&, +					ServletAnnotationMappingUtils.checkParameters(this.params, request) &&, +					ServletAnnotationMappingUtils.checkHeaders(this.headers, request);, +		}, +, +					Arrays.equals(this.params, other.params) && Arrays.equals(this.headers, other.headers));, +			return (Arrays.hashCode(this.paths) * 23 + Arrays.hashCode(this.methods) * 29 +, +					Arrays.hashCode(this.params) * 31 + Arrays.hashCode(this.headers));, +			if (info1ParamCount != info2ParamCount) {, +				return info2ParamCount - info1ParamCount;, +			}, +			int info1HeaderCount = info1.headers.length;, +			int info2HeaderCount = info2.headers.length;, +			if (info1HeaderCount != info2HeaderCount) {, +				return info2HeaderCount - info1HeaderCount;, +			}, +			return 0;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	/**, +	 * The headers of the mapped request, narrowing the primary mapping., +	 * <p>Same format for any environment: a sequence of "My-Header=myValue" style, +	 * expressions, with a request only mapped if each such header is found, +	 * to have the given value. "My-Header" style expressions are also supported,, +	 * with such headers having to be present in the request (allowed to have, +	 * any value). Finally, "!My-Header" style expressions indicate that the, +	 * specified header is <i>not</i> supposed to be present in the request., +	 * <p>Also supports media type wildcards (*), for headers such as Accept, +	 * and Content-Type. For instance,, +	 * <pre>, +	 * &#064;RequestMapping(value = "/something", headers = "content-type=text/*"), +	 * </pre>, +	 * will match requests with a Content-Type of "text/html", "text/plain", etc., +	 * <p><b>Supported at the type level as well as at the method level!</b>, +	 * When used at the type level, all method-level mappings inherit, +	 * this header restriction (i.e. the type-level restriction, +	 * gets checked before the handler method is even resolved)., +	 * @see org.springframework.http.MediaType, +	 */, +	String[] headers() default {}; , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				if (!hasTypeLevelMapping() || !Arrays.equals(mapping.headers(), getTypeLevelMapping().headers())) {, +					mappingInfo.headers = mapping.headers();, +				}, +							if (mappingInfo.matches(request)) {, +					match = mappingInfo.matches(request);, +		String[] headers = new String[0];, +]