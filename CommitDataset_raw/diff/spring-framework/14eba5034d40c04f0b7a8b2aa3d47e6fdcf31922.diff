[+++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationException.java, + * Copyright 2002-2016 the original author or authors., +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 */, +	public EvaluationException(String message) {, +		super(message);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 * @param cause the underlying cause of this exception, +	 */, +	public EvaluationException(String message, Throwable cause) {, +		super(message,cause);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationException.java, + * Copyright 2002-2016 the original author or authors., +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 */, +	public EvaluationException(String message) {, +		super(message);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 * @param cause the underlying cause of this exception, +	 */, +	public EvaluationException(String message, Throwable cause) {, +		super(message,cause);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, + * Copyright 2002-2016 the original author or authors., + * @author Phil Webb, +	protected int position;  // -1 if not known; should be known in all reasonable cases, +	 * @param message a descriptive message, +	 */, +	public ExpressionException(String message) {, +		super(message);, +	}, +, +	/**, +	 * Construct a new expression exception., +	 * @param message a descriptive message, +	 * @param cause the underlying cause of this exception, +	 */, +	public ExpressionException(String message, Throwable cause) {, +		super(message, cause);, +	}, +, +	/**, +	 * Construct a new expression exception., +		this.position = -1;, +		this.position = position;, +	 * Return the exception message., +	 * As of Spring 4.0, this method returns the same result as {@link #toDetailedString()}., +	 * @see #getSimpleMessage(), +			output.append("Expression [");, +			output.append("]");, +			if (this.position >= 0) {, +	 * @since 4.0, +++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationException.java, + * Copyright 2002-2016 the original author or authors., +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 */, +	public EvaluationException(String message) {, +		super(message);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	 * @param cause the underlying cause of this exception, +	 */, +	public EvaluationException(String message, Throwable cause) {, +		super(message,cause);, +	}, +, +	/**, +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +	 * Create a new expression evaluation exception., +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, + * Copyright 2002-2016 the original author or authors., + * @author Phil Webb, +	protected int position;  // -1 if not known; should be known in all reasonable cases]