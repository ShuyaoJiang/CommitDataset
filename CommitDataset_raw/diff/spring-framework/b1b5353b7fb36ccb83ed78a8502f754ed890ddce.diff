[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		values.add("locationValues", StringUtils.commaDelimitedListToStringArray(locationAttr));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		values.add("locationValues", StringUtils.commaDelimitedListToStringArray(locationAttr));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +import java.util.Arrays;, +	private final List<String> locationValues = new ArrayList<>();, +	public ResourceHandlerRegistration(String... pathPatterns) {, +		this.locationValues.addAll(Arrays.asList(resourceLocations));, +		handler.setLocationValues(this.locationValues);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		values.add("locationValues", StringUtils.commaDelimitedListToStringArray(locationAttr));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +import java.util.Arrays;, +	private final List<String> locationValues = new ArrayList<>();, +	public ResourceHandlerRegistration(String... pathPatterns) {, +		this.locationValues.addAll(Arrays.asList(resourceLocations));, +		handler.setLocationValues(this.locationValues);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +		ResourceHandlerRegistration registration = new ResourceHandlerRegistration(pathPatterns);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		values.add("locationValues", StringUtils.commaDelimitedListToStringArray(locationAttr));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +import java.util.Arrays;, +	private final List<String> locationValues = new ArrayList<>();, +	public ResourceHandlerRegistration(String... pathPatterns) {, +		this.locationValues.addAll(Arrays.asList(resourceLocations));, +		handler.setLocationValues(this.locationValues);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, +		ResourceHandlerRegistration registration = new ResourceHandlerRegistration(pathPatterns);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.io.UrlResource;, +	private static final String URL_RESOURCE_CHARSET_PREFIX = "[charset=";, +, +	private final List<String> locationValues = new ArrayList<>(4);, +, +	 * Set the {@code List} of {@code Resource} locations to use as sources, +	 * @see #setLocationValues(List), +	 * Return the configured {@code List} of {@code Resource} locations., +	 * Note that if {@link #setLocationValues(List) locationValues} are provided,, +	 * instead of loaded Resource-based locations, this method will return, +	 * empty until after initialization via {@link #afterPropertiesSet()}., +	 * An alternative to {@link #setLocations(List)} that accepts a list of, +	 * String-based location values, with support for {@link UrlResource}'s, +	 * (e.g. files or HTTP URLs) with a special prefix to indicate the charset, +	 * to use when appending relative paths. For example, +	 * {@code "[charset=Windows-31J]http://example.org/path"}., +	public void setLocationValues(List<String> locationValues) {, +		Assert.notNull(locationValues, "Location values list must not be null");, +		this.locationValues.clear();, +		this.locationValues.addAll(locationValues);, +, +		loadResourceLocations();, +, +, +	private void loadResourceLocations() {, +		if (!CollectionUtils.isEmpty(this.locations) && !CollectionUtils.isEmpty(this.locationValues)) {, +			throw new IllegalArgumentException("Please set either Resource-based \"locations\" or " +, +					"String-based \"locationValues\", but not both.");, +		}, +		if (CollectionUtils.isEmpty(this.locationValues)) {, +			return;, +		}, +		ApplicationContext appContext = obtainApplicationContext();, +		ConfigurableBeanFactory beanFactory = null;, +		if (appContext.getAutowireCapableBeanFactory() instanceof ConfigurableBeanFactory) {, +			beanFactory = ((ConfigurableBeanFactory) appContext.getAutowireCapableBeanFactory());, +		}, +		for (String location : this.locationValues) {, +			if (beanFactory != null) {, +				location = beanFactory.resolveEmbeddedValue(location);, +				Assert.notNull(location, "Null location");, +			}, +			Charset charset = null;, +			location = location.trim();, +			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {, +				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length());, +				if (endIndex == -1) {, +					throw new IllegalArgumentException("Invalid charset syntax in location: " + location);, +				}, +				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex);, +				charset = Charset.forName(value);, +				location = location.substring(endIndex + 1);, +			}, +			Resource resource = appContext.getResource(location);, +			this.locations.add(resource);, +			if (charset != null) {, +				if (!(resource instanceof UrlResource)) {, +					throw new IllegalArgumentException("Unexpected charset for non-UrlResource: " + resource);, +				}, +				this.locationCharsets.put(resource, charset);, +			}, +		}]