[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +, +		/*, +		The plan:, +, +		1 Round up to the next whole second, +, +		2 If seconds match move on, otherwise find the next match:, +		2.1 If next match is in the next minute then roll forwards, +, +		3 If minute matches move on, otherwise find the next match, +		3.1 If next match is in the next hour then roll forwards, +		3.2 Reset the seconds and go to 2, +, +		4 If hour matches move on, otherwise find the next match, +		4.1 If next match is in the next day then roll forwards,, +		4.2 Reset the minutes and seconds and go to 2, +		, +		..., +, +		 */, +, +		doNext(calendar);, +, +		return calendar.getTime();, +	}, +, +	private void doNext(Calendar calendar) {, +		List<Integer> emptyList = Collections.<Integer> emptyList();, +		int updateSecond = findNext(this.seconds, second, 60, calendar, Calendar.SECOND, emptyList);, +		} else {, +			doNext(calendar);, +		} else {, +			doNext(calendar);, +		} else {, +			doNext(calendar);			, +		int updateMonth = findNext(this.months, month, 12, calendar, Calendar.MONTH, resets);, +		if (month != updateMonth) {, +			doNext(calendar);			, +	}, +, +	private int findNextDay(Calendar calendar, BitSet daysOfMonth, int dayOfMonth, BitSet daysOfWeek, int dayOfWeek,, +			int max, List<Integer> resets) {, +			} else {, +		} else {, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +, +		/*, +		The plan:, +, +		1 Round up to the next whole second, +, +		2 If seconds match move on, otherwise find the next match:, +		2.1 If next match is in the next minute then roll forwards, +, +		3 If minute matches move on, otherwise find the next match, +		3.1 If next match is in the next hour then roll forwards, +		3.2 Reset the seconds and go to 2, +, +		4 If hour matches move on, otherwise find the next match, +		4.1 If next match is in the next day then roll forwards,, +		4.2 Reset the minutes and seconds and go to 2, +		, +		..., +, +		 */, +, +		doNext(calendar);, +, +		return calendar.getTime();, +	}, +, +	private void doNext(Calendar calendar) {, +		List<Integer> emptyList = Collections.<Integer> emptyList();, +		int updateSecond = findNext(this.seconds, second, 60, calendar, Calendar.SECOND, emptyList);, +		} else {, +			doNext(calendar);, +		} else {, +			doNext(calendar);, +		} else {, +			doNext(calendar);			, +		int updateMonth = findNext(this.months, month, 12, calendar, Calendar.MONTH, resets);, +		if (month != updateMonth) {, +			doNext(calendar);			, +	}, +, +	private int findNextDay(Calendar calendar, BitSet daysOfMonth, int dayOfMonth, BitSet daysOfWeek, int dayOfWeek,, +			int max, List<Integer> resets) {, +			} else {, +		} else {, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, +		CronTrigger trigger = new CronTrigger("55 5 * * * *");, +		calendar.set(Calendar.SECOND, 54);, +		calendar.add(Calendar.MINUTE, 1);, +		calendar.set(Calendar.SECOND, 55);, +	public void testSpecificHourSecond() throws Exception {, +		CronTrigger trigger = new CronTrigger("55 * 2 * * *");, +		calendar.set(Calendar.HOUR_OF_DAY, 1);, +		calendar.set(Calendar.SECOND, 54);, +		Date date = calendar.getTime();]