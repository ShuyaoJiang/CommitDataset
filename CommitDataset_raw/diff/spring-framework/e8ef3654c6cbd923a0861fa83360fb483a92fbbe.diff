[+++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpResponse.java, + * {@link ClientHttpResponse} implementation based on OkHttp., +			// ignore, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpResponse.java, + * {@link ClientHttpResponse} implementation based on OkHttp., +			// ignore, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +, +			StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage;, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpResponse.java, + * {@link ClientHttpResponse} implementation based on OkHttp., +			// ignore, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +, +			StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage;, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	protected void addDefaultHeaders(HttpHeaders headers, T t, MediaType contentType) throws IOException{, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpResponse.java, + * {@link ClientHttpResponse} implementation based on OkHttp., +			// ignore, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +, +			StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage;, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	protected void addDefaultHeaders(HttpHeaders headers, T t, MediaType contentType) throws IOException{, +++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java, +, +	private static String requestParameterMapToString(Map<String, String[]> actualParams) {, +		StringBuilder result = new StringBuilder();, +		for (Iterator<Map.Entry<String, String[]>> it = actualParams.entrySet().iterator(); it.hasNext();) {, +			Map.Entry<String, String[]> entry = it.next();, +			result.append(entry.getKey()).append('=').append(ObjectUtils.nullSafeToString(entry.getValue()));, +			if (it.hasNext()) {, +				result.append(", ");, +			}, +		}, +		return result.toString();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpResponse.java, + * {@link ClientHttpResponse} implementation based on OkHttp., +			// ignore, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +, +			StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage;, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	protected void addDefaultHeaders(HttpHeaders headers, T t, MediaType contentType) throws IOException{, +++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java, +, +	private static String requestParameterMapToString(Map<String, String[]> actualParams) {, +		StringBuilder result = new StringBuilder();, +		for (Iterator<Map.Entry<String, String[]>> it = actualParams.entrySet().iterator(); it.hasNext();) {, +			Map.Entry<String, String[]> entry = it.next();, +			result.append(entry.getKey()).append('=').append(ObjectUtils.nullSafeToString(entry.getValue()));, +			if (it.hasNext()) {, +				result.append(", ");, +			}]