[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				for (int i = locations.length - 1; i >= 0; i--) {, +					ps.addPropertySource(new ResourcePropertySource(locations[i], classLoader));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				for (int i = locations.length - 1; i >= 0; i--) {, +					ps.addPropertySource(new ResourcePropertySource(locations[i], classLoader));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	/**, +	 * SPR-10820, +	 */, +	@Test, +	public void orderingWithAndWithoutNameAndMultipleResourceLocations() {, +		// p2 should 'win' as it was registered last, +		AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class);, +		AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class);, +		assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +		assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +	}, +, +	@Configuration, +	@PropertySource(, +			value = {, +					"classpath:org/springframework/context/annotation/p1.properties",, +					"classpath:org/springframework/context/annotation/p2.properties", +			}), +	static class ConfigWithMultipleResourceLocations {, +	}, +]