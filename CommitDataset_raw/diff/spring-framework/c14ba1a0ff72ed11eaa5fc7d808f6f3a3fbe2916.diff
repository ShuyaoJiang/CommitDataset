[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/DefaultSockJsFrameFormat.java, + * A default implementation of, + * {@link org.springframework.web.socket.sockjs.frame.SockJsFrameFormat} that relies, + * on {@link java.lang.String#format(String, Object...)}.., + *, +	public String format(SockJsFrame frame) {, +		return String.format(this.format, preProcessContent(frame.getContent()));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/DefaultSockJsFrameFormat.java, + * A default implementation of, + * {@link org.springframework.web.socket.sockjs.frame.SockJsFrameFormat} that relies, + * on {@link java.lang.String#format(String, Object...)}.., + *, +	public String format(SockJsFrame frame) {, +		return String.format(this.format, preProcessContent(frame.getContent()));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java, +import org.springframework.util.StringUtils;, + * Represents a SockJS frame. Provides factory methods to create SockJS frames., +	public static final Charset CHARSET = Charset.forName("UTF-8");, +	private final SockJsFrameType type;, +, +	/**, +	 * Create a new instance frame with the given frame content., +	 * @param content the content, must be a non-empty and represent a valid SockJS frame, +	 */, +		StringUtils.hasText(content);, +		if ("o".equals(content)) {, +			this.type = SockJsFrameType.OPEN;, +		else if ("h".equals(content)) {, +			this.type = SockJsFrameType.HEARTBEAT;, +			this.content = content;, +		}, +		else if (content.charAt(0) == 'a') {, +			this.type = SockJsFrameType.MESSAGE;, +			this.content = (content.length() > 1 ? content : "a[]");, +		}, +		else if (content.charAt(0) == 'm') {, +			this.type = SockJsFrameType.MESSAGE;, +			this.content = (content.length() > 1 ? content : "null");, +		}, +		else if (content.charAt(0) == 'c') {, +			this.type = SockJsFrameType.CLOSE;, +			this.content = (content.length() > 1 ? content : "c[]");, +		}, +		else {, +			throw new IllegalArgumentException("Unexpected SockJS frame type in content=\"" + content + "\"");, +		}, +	}, +	/**, +	 * Return the SockJS frame type., +	 */, +	public SockJsFrameType getType() {, +		return this.type;, +	}, +, +	/**, +	 * Return the SockJS frame content, never {@code null}., +	 */, +	/**, +	 * Return the SockJS frame content as a byte array., +	 */, +		return this.content.getBytes(CHARSET);, +	}, +, +	/**, +	 * Return data contained in a SockJS "message" and "close" frames. Otherwise, +	 * for SockJS "open" and "close" frames, which do not contain data, return, +	 * {@code null}., +	 */, +	public String getFrameData() {, +		if (SockJsFrameType.OPEN == getType() || SockJsFrameType.HEARTBEAT == getType()) {, +			return null;, +		}, +		else {, +			return getContent().substring(1);, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/DefaultSockJsFrameFormat.java, + * A default implementation of, + * {@link org.springframework.web.socket.sockjs.frame.SockJsFrameFormat} that relies, + * on {@link java.lang.String#format(String, Object...)}.., + *, +	public String format(SockJsFrame frame) {, +		return String.format(this.format, preProcessContent(frame.getContent()));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java, +import org.springframework.util.StringUtils;, + * Represents a SockJS frame. Provides factory methods to create SockJS frames., +	public static final Charset CHARSET = Charset.forName("UTF-8");, +	private final SockJsFrameType type;, +, +	/**, +	 * Create a new instance frame with the given frame content., +	 * @param content the content, must be a non-empty and represent a valid SockJS frame, +	 */, +		StringUtils.hasText(content);, +		if ("o".equals(content)) {, +			this.type = SockJsFrameType.OPEN;, +		else if ("h".equals(content)) {, +			this.type = SockJsFrameType.HEARTBEAT;, +			this.content = content;, +		}, +		else if (content.charAt(0) == 'a') {]