[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * @author Brian Clozel, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null, +					&& outputMessage.getServletResponse().getStatus() == 200) {, +	 * Return whether the returned value or the declared return type extends {@link Resource}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * @author Brian Clozel, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null, +					&& outputMessage.getServletResponse().getStatus() == 200) {, +	 * Return whether the returned value or the declared return type extends {@link Resource}., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +	@Test //SPR-16921, +	public void disableRangeSupportIfContentRangePresent() throws Exception {, +		ResponseEntity<Resource> returnValue = ResponseEntity, +				.status(HttpStatus.PARTIAL_CONTENT), +				.header(HttpHeaders.RANGE, "bytes=0-5"), +				.body(new ByteArrayResource("Content".getBytes(StandardCharsets.UTF_8)));, +, +		given(resourceRegionMessageConverter.canWrite(any(), eq(null))).willReturn(true);, +		given(resourceRegionMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true);, +, +		processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest);, +, +		then(resourceRegionMessageConverter).should(never()).write(anyCollection(), any(), any());, +		assertEquals(206, servletResponse.getStatus());, +	}, +, +	public void shouldHandleValidatorHeadersInputResponses() throws Exception {]