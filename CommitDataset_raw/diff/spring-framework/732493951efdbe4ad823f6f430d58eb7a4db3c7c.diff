[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java, + * Copyright 2002-2011 the original author or authors., +	 * <li>Delegates to {@link #createGenericApplicationContext()} to, +	 * create a {@link GenericApplicationContext} instance.</li>, +	 * <li>Calls {@link #prepareContext(GenericApplicationContext)} to, +	 * prepare the context.</li>, +	 * allow for customizing the context's <code>DefaultListableBeanFactory</code>.</li>, +	 * <li>Delegates to {@link #loadBeanDefinitions(GenericApplicationContext, String...)}, +	 * to populate the context from the specified config locations.</li>, +	 * {@link AnnotationConfigUtils#registerAnnotationConfigProcessors registering}, +			logger.debug(String.format("Loading ApplicationContext for locations [%s].",, +				StringUtils.arrayToCommaDelimitedString(locations)));, +		GenericApplicationContext context = createGenericApplicationContext();, +		loadBeanDefinitions(context, locations);, +	 * Factory method for creating a new {@link GenericApplicationContext} , +	 * to be used by this <code>ContextLoader</code>., +	 * <p>The default implementation returns an instance of, +	 * {@link GenericApplicationContext}. Can be overridden in subclasses, +	 * to return a specific subclass of <code>GenericApplicationContext</code>., +	 * @return a new <code>GenericApplicationContext</code>, +	 * @since 3.1, +	 * @see #loadContext, +	 */, +	protected GenericApplicationContext createGenericApplicationContext() {, +		return new GenericApplicationContext();, +	}, +, +	/**, +	 * Prepare the {@link GenericApplicationContext} created by this <code>ContextLoader</code>., +	 * Customize the internal bean factory of the ApplicationContext created by this <code>ContextLoader</code>., +	 * @param beanFactory the bean factory created by this <code>ContextLoader</code>, +	 * Load bean definitions into the supplied {@link GenericApplicationContext context}, +	 * from the specified resource locations., +	 * <p>The default implementation delegates to the {@link BeanDefinitionReader}, +	 * returned by {@link #createBeanDefinitionReader} to , +	 * {@link BeanDefinitionReader#loadBeanDefinitions(String) load} the, +	 * bean definitions., +	 * <p>Subclasses must provide an appropriate implementation of, +	 * {@link #createBeanDefinitionReader}., +	 * Alternatively subclasses may provide a <em>no-op</em> implementation, +	 * of {@link #createBeanDefinitionReader} and override this method to, +	 * provide a custom strategy for loading or registering bean definitions., +	 * @param context the context into which the bean definitions should be loaded, +	 * @param locations the resource locations from which to load the bean definitions, +	 * @since 3.1, +	 * @see #loadContext, +	 */, +	protected void loadBeanDefinitions(GenericApplicationContext context, String... locations) {, +		createBeanDefinitionReader(context).loadBeanDefinitions(locations);, +	}, +, +	/**, +	 * Factory method for creating a new {@link BeanDefinitionReader} for, +	 * @see #loadBeanDefinitions, +	 * Customize the {@link GenericApplicationContext} created by this, +	 * <code>ContextLoader</code> <i>after</i> bean definitions have been, +	 * loaded into the context but before the context is refreshed., +	 * @see #loadContext, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java, + * Copyright 2002-2011 the original author or authors., +	 * <li>Delegates to {@link #createGenericApplicationContext()} to, +	 * create a {@link GenericApplicationContext} instance.</li>, +	 * <li>Calls {@link #prepareContext(GenericApplicationContext)} to, +	 * prepare the context.</li>, +	 * allow for customizing the context's <code>DefaultListableBeanFactory</code>.</li>, +	 * <li>Delegates to {@link #loadBeanDefinitions(GenericApplicationContext, String...)}, +	 * to populate the context from the specified config locations.</li>, +	 * {@link AnnotationConfigUtils#registerAnnotationConfigProcessors registering}, +			logger.debug(String.format("Loading ApplicationContext for locations [%s].",, +				StringUtils.arrayToCommaDelimitedString(locations)));, +		GenericApplicationContext context = createGenericApplicationContext();, +		loadBeanDefinitions(context, locations);, +	 * Factory method for creating a new {@link GenericApplicationContext} , +	 * to be used by this <code>ContextLoader</code>., +	 * <p>The default implementation returns an instance of, +	 * {@link GenericApplicationContext}. Can be overridden in subclasses, +	 * to return a specific subclass of <code>GenericApplicationContext</code>., +	 * @return a new <code>GenericApplicationContext</code>, +	 * @since 3.1, +	 * @see #loadContext, +	 */, +	protected GenericApplicationContext createGenericApplicationContext() {, +		return new GenericApplicationContext();, +	}, +, +	/**, +	 * Prepare the {@link GenericApplicationContext} created by this <code>ContextLoader</code>., +	 * Customize the internal bean factory of the ApplicationContext created by this <code>ContextLoader</code>., +	 * @param beanFactory the bean factory created by this <code>ContextLoader</code>, +	 * Load bean definitions into the supplied {@link GenericApplicationContext context}, +	 * from the specified resource locations., +	 * <p>The default implementation delegates to the {@link BeanDefinitionReader}, +	 * returned by {@link #createBeanDefinitionReader} to , +	 * {@link BeanDefinitionReader#loadBeanDefinitions(String) load} the, +	 * bean definitions., +	 * <p>Subclasses must provide an appropriate implementation of, +	 * {@link #createBeanDefinitionReader}., +	 * Alternatively subclasses may provide a <em>no-op</em> implementation, +	 * of {@link #createBeanDefinitionReader} and override this method to, +	 * provide a custom strategy for loading or registering bean definitions.]