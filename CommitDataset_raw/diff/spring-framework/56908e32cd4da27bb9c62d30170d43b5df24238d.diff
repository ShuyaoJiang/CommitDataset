[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +	boolean implementsInterface(Class<?> intf);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +	boolean implementsInterface(Class<?> intf);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/MethodMatcher.java, +	boolean matches(Method method, Class<?> targetClass);, +	boolean matches(Method method, Class<?> targetClass, Object[] args);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +	boolean implementsInterface(Class<?> intf);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/MethodMatcher.java, +	boolean matches(Method method, Class<?> targetClass);, +	boolean matches(Method method, Class<?> targetClass, Object[] args);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcher.java, +	public boolean matches(Method method, Class<?> targetClass) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/DynamicIntroductionAdvice.java, +	boolean implementsInterface(Class<?> intf);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/MethodMatcher.java, +	boolean matches(Method method, Class<?> targetClass);, +	boolean matches(Method method, Class<?> targetClass, Object[] args);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcher.java, +	public boolean matches(Method method, Class<?> targetClass) {, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		HashMap<ITestBean, Object> h = new HashMap<ITestBean, Object>();, +		it.getAge();, +		it.getAge();, +		it.getAge();, +		@SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +			private List<Object> names = new LinkedList<Object>();, +	@SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +			public boolean matches(Method m, Class<?> targetClass) {, +			public Class<?> getTargetClass() {, +		@SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +			private final Map<String, String> expectedValues;, +			private final Map<String, String> valuesToAdd;, +			public MapAwareMethodInterceptor(Map<String, String> expectedValues, Map<String, String> valuesToAdd) {, +				for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ){, +		MapAwareMethodInterceptor mami1 = new MapAwareMethodInterceptor(new HashMap<String, String>(), new HashMap<String, String>());, +		Map<String, String> firstValuesToAdd = new HashMap<String, String>();, +		MapAwareMethodInterceptor mami2 = new MapAwareMethodInterceptor(new HashMap<String, String>(), firstValuesToAdd);, +		MapAwareMethodInterceptor mami3 = new MapAwareMethodInterceptor(firstValuesToAdd, new HashMap<String, String>());, +		MapAwareMethodInterceptor mami4 = new MapAwareMethodInterceptor(firstValuesToAdd, new HashMap<String, String>());, +		Map<String, String> secondValuesToAdd = new HashMap<String, String>();, +		Map<String, String> finalExpected = new HashMap<String, String>(firstValuesToAdd);, +		@SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +		@SuppressWarnings("serial"), +	    @SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +		@SuppressWarnings("serial"), +			public boolean matches(Method m, Class<?> targetClass) {, +	@SuppressWarnings("serial"), +				public boolean matches(Method m, Class<?> targetClass, Object[] args) {, +				public boolean matches(Method m, Class<?> targetClass) {, +	@SuppressWarnings("serial"), +				public boolean matches(Method m, Class<?> targetClass, Object[] args) {, +	@SuppressWarnings("serial"), +				public boolean matches(Method m, Class<?> targetClass, Object[] args) {, +				public boolean matches(Method m, Class<?> clazz) {, +	@SuppressWarnings("serial"), +		public boolean matches(Method m, Class<?> targetClass) {, +		public boolean implementsInterface(Class<?> intf) {]