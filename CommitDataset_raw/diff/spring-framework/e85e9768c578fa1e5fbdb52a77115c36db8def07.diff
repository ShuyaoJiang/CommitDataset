[+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +import java.util.List;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.MultiValueMap;, +, +			MultiValueMap<String, Object> attributesMultiMap = AnnotatedElementUtils.getAllAnnotationAttributes(, +				testClass, BootstrapWith.class.getName());, +			List<Object> values = (attributesMultiMap == null ? null : attributesMultiMap.get(AnnotationUtils.VALUE));, +, +			if (values != null) {, +				if (values.size() != 1) {, +					String msg = String.format(, +						"Configuration error: found multiple declarations of @BootstrapWith on test class [%s] with values %s",, +						testClass.getName(), values);, +					throw new IllegalStateException(msg);, +				}, +				clazz = (Class<? extends TestContextBootstrapper>) values.get(0);, +				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",, +					testClass.getName(), clazz.getName()));, +			if (t instanceof IllegalStateException) {, +				throw (IllegalStateException) t;, +			}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +import java.util.List;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.MultiValueMap;, +, +			MultiValueMap<String, Object> attributesMultiMap = AnnotatedElementUtils.getAllAnnotationAttributes(, +				testClass, BootstrapWith.class.getName());, +			List<Object> values = (attributesMultiMap == null ? null : attributesMultiMap.get(AnnotationUtils.VALUE));, +, +			if (values != null) {, +				if (values.size() != 1) {, +					String msg = String.format(, +						"Configuration error: found multiple declarations of @BootstrapWith on test class [%s] with values %s",, +						testClass.getName(), values);, +					throw new IllegalStateException(msg);, +				}, +				clazz = (Class<? extends TestContextBootstrapper>) values.get(0);, +				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",, +					testClass.getName(), clazz.getName()));, +			if (t instanceof IllegalStateException) {, +				throw (IllegalStateException) t;, +			}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/BootstrapUtilsTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.test.context.support.DefaultTestContextBootstrapper;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.test.context.BootstrapUtils.*;, +, +/**, + * Unit tests for {@link BootstrapUtils}., + *, + * @author Sam Brannen, + * @since 4.2, + */, +public class BootstrapUtilsTests {, +, +	private final CacheAwareContextLoaderDelegate delegate = mock(CacheAwareContextLoaderDelegate.class);, +, +	@Rule, +	public ExpectedException exception = ExpectedException.none();, +, +	@Test, +	public void resolveTestContextBootstrapperForNonAnnotatedClass() {, +		assertBootstrapper(NonAnnotatedClass.class, DefaultTestContextBootstrapper.class);, +	}, +, +	@Test]