[+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/codec/encoder/JsonObjectEncoder.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +, +import reactor.core.support.BackpressureUtils;, +		return lift(messageStream, bbs -> new JsonEncoderBarrier(bbs));, +		private volatile long requested;, +		@SuppressWarnings("rawtypes"), +		static final AtomicLongFieldUpdater<JsonEncoderBarrier> REQUESTED =, +				AtomicLongFieldUpdater.newUpdater(JsonEncoderBarrier.class, "requested");, +, +		private volatile int terminated;, +		static final AtomicIntegerFieldUpdater<JsonEncoderBarrier> TERMINATED =, +				AtomicIntegerFieldUpdater.newUpdater(JsonEncoderBarrier.class, "terminated");, +, +		ByteBuffer prev = null;, +		long count = 0;, +, +		@Override, +		protected void doRequest(long n) {, +			BackpressureUtils.getAndAdd(REQUESTED, this, n);, +			if(TERMINATED.compareAndSet(this, 1, 2)){, +				drainLast();, +			}, +			else {, +				super.doRequest(n);, +			}, +		}, +				super.doRequest(1);, +, +			BackpressureUtils.getAndSub(REQUESTED, this, 1L);, +		protected void drainLast(){, +			if(BackpressureUtils.getAndSub(REQUESTED, this, 1L) > 0) {, +				super.doComplete();, +			}, +		}, +, +		@Override, +		protected void doComplete() {, +			if(TERMINATED.compareAndSet(this, 0, 1)){, +				drainLast();, +			}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/codec/encoder/JsonObjectEncoder.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +, +import reactor.core.support.BackpressureUtils;, +		return lift(messageStream, bbs -> new JsonEncoderBarrier(bbs));, +		private volatile long requested;, +		@SuppressWarnings("rawtypes"), +		static final AtomicLongFieldUpdater<JsonEncoderBarrier> REQUESTED =, +				AtomicLongFieldUpdater.newUpdater(JsonEncoderBarrier.class, "requested");, +, +		private volatile int terminated;, +		static final AtomicIntegerFieldUpdater<JsonEncoderBarrier> TERMINATED =, +				AtomicIntegerFieldUpdater.newUpdater(JsonEncoderBarrier.class, "terminated");, +, +		ByteBuffer prev = null;, +		long count = 0;, +, +		@Override, +		protected void doRequest(long n) {, +			BackpressureUtils.getAndAdd(REQUESTED, this, n);, +			if(TERMINATED.compareAndSet(this, 1, 2)){, +				drainLast();, +			}, +			else {, +				super.doRequest(n);, +			}, +		}, +				super.doRequest(1);, +, +			BackpressureUtils.getAndSub(REQUESTED, this, 1L);, +		protected void drainLast(){, +			if(BackpressureUtils.getAndSub(REQUESTED, this, 1L) > 0) {, +				super.doComplete();, +			}, +		}, +, +		@Override, +		protected void doComplete() {, +			if(TERMINATED.compareAndSet(this, 0, 1)){, +				drainLast();, +			}, +++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java, +				{new JettyHttpServer()},, +				{new ReactorHttpServer()},]