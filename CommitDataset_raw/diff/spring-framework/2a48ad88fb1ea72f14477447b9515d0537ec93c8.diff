[+++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AbstractSubscriptionRegistry.java, +	public final void registerSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Subscribe request: " + message);, +		}, +	public final void unregisterSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Unubscribe request: " + message);, +		}, +	public abstract void unregisterAllSubscriptions(String sessionId);, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Find subscriptions, destination=" + headers.getDestination());, +		}, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AbstractSubscriptionRegistry.java, +	public final void registerSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Subscribe request: " + message);, +		}, +	public final void unregisterSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Unubscribe request: " + message);, +		}, +	public abstract void unregisterAllSubscriptions(String sessionId);, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Find subscriptions, destination=" + headers.getDestination());, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationSimpMessageHandler.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.MessagingException;, +public class AnnotationSimpMessageHandler implements MessageHandler, ApplicationContextAware, InitializingBean {, +, +	private static final Log logger = LogFactory.getLog(AnnotationSimpMessageHandler.class);, +	public void handleMessage(Message<?> message) throws MessagingException {, +, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(message);, +		SimpMessageType messageType = headers.getMessageType();, +, +		if (SimpMessageType.MESSAGE.equals(messageType)) {, +		else if (SimpMessageType.SUBSCRIBE.equals(messageType)) {, +		else if (SimpMessageType.UNSUBSCRIBE.equals(messageType)) {, +	}, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AbstractSubscriptionRegistry.java, +	public final void registerSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Subscribe request: " + message);, +		}, +	public final void unregisterSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Unubscribe request: " + message);, +		}, +	public abstract void unregisterAllSubscriptions(String sessionId);, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Find subscriptions, destination=" + headers.getDestination());, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationSimpMessageHandler.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.MessagingException;, +public class AnnotationSimpMessageHandler implements MessageHandler, ApplicationContextAware, InitializingBean {, +, +	private static final Log logger = LogFactory.getLog(AnnotationSimpMessageHandler.class);, +	public void handleMessage(Message<?> message) throws MessagingException {, +, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(message);, +		SimpMessageType messageType = headers.getMessageType();, +, +		if (SimpMessageType.MESSAGE.equals(messageType)) {, +		else if (SimpMessageType.SUBSCRIBE.equals(messageType)) {, +		else if (SimpMessageType.UNSUBSCRIBE.equals(messageType)) {, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultSubscriptionRegistry.java, +	public void unregisterAllSubscriptions(String sessionId) {, +		if (info != null) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unregistering subscriptions for sessionId=" + sessionId);, +			}, +	}, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AbstractSubscriptionRegistry.java, +	public final void registerSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Subscribe request: " + message);, +		}, +	public final void unregisterSubscription(Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Unubscribe request: " + message);, +		}, +	public abstract void unregisterAllSubscriptions(String sessionId);, +	public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {, +		if (logger.isTraceEnabled()) {]