[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, +	private final RequestExpectationManager expectationManager;, +	 * See static builder methods and {@code createServer} shortcut methods., +		this.expectationManager = new SimpleRequestExpectationManager();, +	 * Private constructor with {@code RequestExpectationManager}., +	 * See static builder methods and {@code createServer} shortcut methods., +	private MockRestServiceServer(RequestExpectationManager expectationManager) {, +		this.expectationManager = expectationManager;, +	 * Build a {@code MockRestServiceServer} with a {@code RestTemplate}., +	 * @since 4.3, +	 */, +	public static MockRestServiceServerBuilder restTemplate(RestTemplate restTemplate) {, +		return new DefaultBuilder(restTemplate);, +	}, +, +	/**, +	 * Build a {@code MockRestServiceServer} with an {@code AsyncRestTemplate}., +	 * @since 4.3, +	 */, +	public static MockRestServiceServerBuilder asyncRestTemplate(AsyncRestTemplate asyncRestTemplate) {, +		return new DefaultBuilder(asyncRestTemplate);, +	}, +, +	/**, +	 * Build a {@code MockRestServiceServer} with a {@code RestGateway}., +	 * @since 4.3, +	 */, +	public static MockRestServiceServerBuilder restGateway(RestGatewaySupport restGateway) {, +		Assert.notNull(restGateway, "'gatewaySupport' must not be null");, +		return new DefaultBuilder(restGateway.getRestTemplate());, +	}, +, +, +	/**, +	 * A shortcut for {@code restTemplate(restTemplate).build()}., +	 * @param restTemplate the RestTemplate to set up for mock testing, +	 * @return the mock server, +	 */, +	public static MockRestServiceServer createServer(RestTemplate restTemplate) {, +		return restTemplate(restTemplate).build();, +	}, +, +	/**, +	 * A shortcut for {@code asyncRestTemplate(asyncRestTemplate).build()}., +	 * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing, +	 * @return the created mock server, +	 */, +	public static MockRestServiceServer createServer(AsyncRestTemplate asyncRestTemplate) {, +		return asyncRestTemplate(asyncRestTemplate).build();, +	}, +, +	/**, +	 * A shortcut for {@code restGateway(restGateway).build()}., +	 * @param restGateway the REST gateway to set up for mock testing, +	 * @return the created mock server, +	 */, +	public static MockRestServiceServer createServer(RestGatewaySupport restGateway) {, +		return restGateway(restGateway).build();, +	}, +, +, +, +	/**, +	 * Builder to create a {@code MockRestServiceServer}., +, +	 */, +	public interface MockRestServiceServerBuilder {, +, +		/**, +		 * When this option is set, requests can be executed in any order, i.e., +		 * not matching the order in which expected requests are declared., +		 */, +		MockRestServiceServerBuilder ignoreExpectOrder();, +, +		/**, +		 * Build the {@code MockRestServiceServer} and setting up the underlying, +		 * {@code RestTemplate} or {@code AsyncRestTemplate} with a, +		 * {@link ClientHttpRequestFactory} that creates mock requests., +		 */, +		MockRestServiceServer build();, +, +	}, +, +	private static class DefaultBuilder implements MockRestServiceServerBuilder {, +, +		private final RestTemplate restTemplate;, +, +		private final AsyncRestTemplate asyncRestTemplate;, +, +		private boolean ignoreExpectOrder;, +, +, +		public DefaultBuilder(RestTemplate restTemplate) {, +			Assert.notNull(restTemplate, "'restTemplate' must not be null");, +			this.restTemplate = restTemplate;, +			this.asyncRestTemplate = null;, +		}, +]