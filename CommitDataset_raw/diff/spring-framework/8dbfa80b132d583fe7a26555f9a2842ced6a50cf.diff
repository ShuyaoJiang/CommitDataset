[+++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2014 the original author or authors., +		return (this.ignoreUnresolvableNestedPlaceholders ?, +				resolvePlaceholders(value) : resolveRequiredPlaceholders(value));, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2014 the original author or authors., +		return (this.ignoreUnresolvableNestedPlaceholders ?, +				resolvePlaceholders(value) : resolveRequiredPlaceholders(value));, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2014 the original author or authors., +	 * @param placeholderPrefix the prefix that denotes the start of a placeholder, +	 * @param placeholderSuffix the suffix that denotes the end of a placeholder, +	 * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should, +	 * be ignored ({@code true}) or cause an exception ({@code false}), +		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null");, +		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null");, +	 * @param value the value containing the placeholders to be replaced, +	 * @param properties the {@code Properties} to use for replacement, +	 * @return the supplied value with placeholders replaced inline, +		Assert.notNull(properties, "'properties' must not be null");, +	 * @param value the value containing the placeholders to be replaced, +	 * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement, +	 * @return the supplied value with placeholders replaced inline, +		Assert.notNull(value, "'value' must not be null");, +		StringBuilder result = new StringBuilder(strVal);, +			int endIndex = findPlaceholderEndIndex(result, startIndex);, +				String placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);, +					result.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);, +					startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());, +					startIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());, +		return result.toString();, +		 * Resolve the supplied placeholder name to the replacement value., +		 * @return the replacement value, or {@code null} if no replacement is to be made, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2014 the original author or authors., +		return (this.ignoreUnresolvableNestedPlaceholders ?, +				resolvePlaceholders(value) : resolveRequiredPlaceholders(value));, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2014 the original author or authors., +	 * @param placeholderPrefix the prefix that denotes the start of a placeholder, +	 * @param placeholderSuffix the suffix that denotes the end of a placeholder, +	 * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should, +	 * be ignored ({@code true}) or cause an exception ({@code false}), +		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null");, +		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null");, +	 * @param value the value containing the placeholders to be replaced, +	 * @param properties the {@code Properties} to use for replacement, +	 * @return the supplied value with placeholders replaced inline, +		Assert.notNull(properties, "'properties' must not be null");, +	 * @param value the value containing the placeholders to be replaced, +	 * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement, +	 * @return the supplied value with placeholders replaced inline, +		Assert.notNull(value, "'value' must not be null");, +		StringBuilder result = new StringBuilder(strVal);, +			int endIndex = findPlaceholderEndIndex(result, startIndex);, +				String placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);, +					result.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);, +					startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());, +					startIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());, +		return result.toString();, +		 * Resolve the supplied placeholder name to the replacement value., +		 * @return the replacement value, or {@code null} if no replacement is to be made, +++ b/spring-core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java, +	@Test(expected=IllegalArgumentException.class), +	public void defaultProfileWithCircularPlaceholder() {, +		System.setProperty(DEFAULT_PROFILES_PROPERTY_NAME, "${spring.profiles.default}");, +		try {, +			environment.getDefaultProfiles();, +		}, +		finally {, +			System.getProperties().remove(DEFAULT_PROFILES_PROPERTY_NAME);, +		}, +	}, +]