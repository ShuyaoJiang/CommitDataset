[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			attrValue = sockJsElement.getAttribute("client-library-url");, +			if (!attrValue.isEmpty()) {, +				sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue);, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			attrValue = sockJsElement.getAttribute("client-library-url");, +			if (!attrValue.isEmpty()) {, +				sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue);, +			}, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/HandlersBeanDefinitionParserTests.java, +		assertEquals("/js/sockjs.min.js", transportService.getSockJsClientLibraryUrl());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			attrValue = sockJsElement.getAttribute("client-library-url");, +			if (!attrValue.isEmpty()) {, +				sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue);, +			}, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/HandlersBeanDefinitionParserTests.java, +		assertEquals("/js/sockjs.min.js", transportService.getSockJsClientLibraryUrl());, +++ b/spring-websocket/src/test/resources/org/springframework/web/socket/config/websocket-config-handlers-sockjs-attributes.xml, +						  message-cache-size="1024" heartbeat-time="20" message-codec="messageCodec", +						  client-library-url="/js/sockjs.min.js" suppress-cors="true">]