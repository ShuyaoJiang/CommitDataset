[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.core.annotation.AnnotationUtils;, +			if (isConfigurationClassBeanDefinition(beanDef, beanFactory.getBeanClassLoader())), +	private static boolean isConfigurationClassBeanDefinition(BeanDefinition beanDef, ClassLoader classLoader) {, +, +		// accommodating SPR-5655, +		Assert.isInstanceOf(AbstractBeanDefinition.class, beanDef);, +		if(((AbstractBeanDefinition) beanDef).hasBeanClass()), +			return AnnotationUtils.findAnnotation(, +					((AbstractBeanDefinition)beanDef).getBeanClass(), Configuration.class) != null;, +					new SimpleMetadataReaderFactory(classLoader).getMetadataReader(className);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.core.annotation.AnnotationUtils;, +			if (isConfigurationClassBeanDefinition(beanDef, beanFactory.getBeanClassLoader())), +	private static boolean isConfigurationClassBeanDefinition(BeanDefinition beanDef, ClassLoader classLoader) {, +, +		// accommodating SPR-5655, +		Assert.isInstanceOf(AbstractBeanDefinition.class, beanDef);, +		if(((AbstractBeanDefinition) beanDef).hasBeanClass()), +			return AnnotationUtils.findAnnotation(, +					((AbstractBeanDefinition)beanDef).getBeanClass(), Configuration.class) != null;, +					new SimpleMetadataReaderFactory(classLoader).getMetadataReader(className);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationPostProcessorTests.java, +	/**, +	 * Tests the fix for SPR-5655, a special workaround that prefers reflection, +	 * over ASM if a bean class is already loaded., +	 */, +	@Test, +	public void testAlreadyLoadedConfigurationClasses() {, +		DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +		beanFactory.registerBeanDefinition("unloadedConfig",, +				rootBeanDefinition(UnloadedConfig.class.getName()).getBeanDefinition());, +		beanFactory.registerBeanDefinition("loadedConfig",, +				rootBeanDefinition(LoadedConfig.class).getBeanDefinition());, +		new ConfigurationClassPostProcessor() .postProcessBeanFactory(beanFactory);, +		beanFactory.getBean("foo");, +		beanFactory.getBean("bar");, +	}, +, +	@Configuration, +	static class UnloadedConfig {, +		public @Bean Foo foo() {, +			return new Foo();, +		}, +	}, +, +	@Configuration, +	static class LoadedConfig {, +		public @Bean Bar bar() {, +			return new Bar(new Foo());, +		}, +	}]