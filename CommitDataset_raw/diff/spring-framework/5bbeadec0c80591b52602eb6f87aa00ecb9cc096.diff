[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +	public static boolean checkConfigurationClassCandidate(, +			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, +, +					logger.debug("Could not find class file for introspecting configuration annotations: " +, +							className, ex);, +			return hasNestedConfigurationClass(metadata, metadataReaderFactory);, +	 * Check whether the specified class declares a nested configuration class., +	 */, +	private static boolean hasNestedConfigurationClass(, +			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory) {, +, +		// Potentially nested configuration classes..., +		if (metadata instanceof StandardAnnotationMetadata) {, +			Class<?> beanClass = ((StandardAnnotationMetadata) metadata).getIntrospectedClass();, +			for (Class<?> memberClass : beanClass.getDeclaredClasses()) {, +				if (isConfigurationCandidate(new StandardAnnotationMetadata(memberClass))) {, +					return true;, +				}, +			}, +		}, +		else {, +			for (String memberName : metadata.getMemberClassNames()) {, +				try {, +					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(memberName);, +					if (isConfigurationCandidate(metadataReader.getAnnotationMetadata())) {, +						return true;, +					}, +				}, +				catch (IOException ex) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Could not find class file for introspecting configuration annotations: " +, +								memberName, ex);, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +	public static boolean checkConfigurationClassCandidate(, +			BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, +, +					logger.debug("Could not find class file for introspecting configuration annotations: " +, +							className, ex);, +			return hasNestedConfigurationClass(metadata, metadataReaderFactory);, +	 * Check whether the specified class declares a nested configuration class., +	 */, +	private static boolean hasNestedConfigurationClass(, +			AnnotationMetadata metadata, MetadataReaderFactory metadataReaderFactory) {, +, +		// Potentially nested configuration classes..., +		if (metadata instanceof StandardAnnotationMetadata) {, +			Class<?> beanClass = ((StandardAnnotationMetadata) metadata).getIntrospectedClass();, +			for (Class<?> memberClass : beanClass.getDeclaredClasses()) {, +				if (isConfigurationCandidate(new StandardAnnotationMetadata(memberClass))) {, +					return true;, +				}, +			}, +		}, +		else {, +			for (String memberName : metadata.getMemberClassNames()) {, +				try {, +					MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(memberName);, +					if (isConfigurationCandidate(metadataReader.getAnnotationMetadata())) {, +						return true;, +					}, +				}, +				catch (IOException ex) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Could not find class file for introspecting configuration annotations: " +, +								memberName, ex);, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportVersusDirectRegistrationTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;]