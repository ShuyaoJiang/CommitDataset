[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToArray.java, +			Array.set(array, i, elementConverter.execute(it.next()));, +	private ConversionExecutor getElementConverter(Collection<?> source) {, +		if (elementConverter == NoOpConversionExecutor.INSTANCE && !source.isEmpty()) {, +			Iterator<?> it = source.iterator();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToArray.java, +			Array.set(array, i, elementConverter.execute(it.next()));, +	private ConversionExecutor getElementConverter(Collection<?> source) {, +		if (elementConverter == NoOpConversionExecutor.INSTANCE && !source.isEmpty()) {, +			Iterator<?> it = source.iterator();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java, +		Class implClass = CollectionConversionUtils.getImpl(getTargetCollectionType());, +		ConversionExecutor elementConverter = getElementConverter(sourceCollection);, +			targetCollection.add(elementConverter.execute(it.next()));, +	private ConversionExecutor getElementConverter(Collection<?> source) {, +		ConversionExecutor elementConverter = getElementConverter();, +		if (elementConverter == NoOpConversionExecutor.INSTANCE && !source.isEmpty() && getTargetElementType() != null) {, +			Iterator<?> it = source.iterator();, +			while (it.hasNext()) {, +				Object value = it.next();, +				if (value != null) {, +					elementConverter = getConversionService().getConversionExecutor(value.getClass(), TypeDescriptor.valueOf(getTargetElementType()));, +					break;, +				}, +			}, +		}, +		return elementConverter;, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToArray.java, +			Array.set(array, i, elementConverter.execute(it.next()));, +	private ConversionExecutor getElementConverter(Collection<?> source) {, +		if (elementConverter == NoOpConversionExecutor.INSTANCE && !source.isEmpty()) {, +			Iterator<?> it = source.iterator();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java, +		Class implClass = CollectionConversionUtils.getImpl(getTargetCollectionType());, +		ConversionExecutor elementConverter = getElementConverter(sourceCollection);, +			targetCollection.add(elementConverter.execute(it.next()));, +	private ConversionExecutor getElementConverter(Collection<?> source) {, +		ConversionExecutor elementConverter = getElementConverter();, +		if (elementConverter == NoOpConversionExecutor.INSTANCE && !source.isEmpty() && getTargetElementType() != null) {, +			Iterator<?> it = source.iterator();, +			while (it.hasNext()) {, +				Object value = it.next();, +				if (value != null) {, +					elementConverter = getConversionService().getConversionExecutor(value.getClass(), TypeDescriptor.valueOf(getTargetElementType()));, +					break;, +				}, +			}, +		}, +		return elementConverter;, +	}, +	, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/CollectionToCollectionTests.java, +package org.springframework.core.convert.service;, +, +import static org.junit.Assert.assertEquals;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +, +import org.junit.Test;, +import org.springframework.core.convert.TypeDescriptor;, +, +public class CollectionToCollectionTests {, +, +	@Test, +	public void testCollectionToCollectionConversion() throws Exception {, +		DefaultConversionService service = new DefaultConversionService();, +		CollectionToCollection c = new CollectionToCollection(new TypeDescriptor(getClass().getField("bindTarget")),, +				new TypeDescriptor(getClass().getField("integerTarget")), service);, +		bindTarget.add("1");, +		bindTarget.add("2");, +		bindTarget.add("3");, +		List result = (List) c.execute(bindTarget);, +		assertEquals(new Integer(1), result.get(0));, +		assertEquals(new Integer(2), result.get(1));, +		assertEquals(new Integer(3), result.get(2));, +	}, +, +	@Test, +	public void testCollectionToCollectionConversionNoGenericInfo() throws Exception {, +		DefaultConversionService service = new DefaultConversionService();, +		CollectionToCollection c = new CollectionToCollection(TypeDescriptor.valueOf(Collection.class),, +				TypeDescriptor.valueOf(List.class), service);, +		bindTarget.add("1");, +		bindTarget.add("2");, +		bindTarget.add("3");, +		List result = (List) c.execute(bindTarget);, +		assertEquals("1", result.get(0));, +		assertEquals("2", result.get(1));, +		assertEquals("3", result.get(2));, +	}, +	, +	@Test, +	public void testCollectionToCollectionConversionNoGenericInfoSource() throws Exception {, +		DefaultConversionService service = new DefaultConversionService();, +		CollectionToCollection c = new CollectionToCollection(TypeDescriptor.valueOf(Collection.class),, +				new TypeDescriptor(getClass().getField("integerTarget")), service);]