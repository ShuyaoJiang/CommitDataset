[+++ b/src/asciidoc/appendix.adoc, +Note that such code will usually pass `false` as the value of the `getSession(..)`, +methods `allowCreate` argument, to enforce running within a transaction (which avoids, +`FieldRetrievingFactoryBean`, to set the value of the `isolation` property on a bean, +to the value of the `java.sql.Connection.TRANSACTION_SERIALIZABLE` constant. This is, +`PropertyPathFactoryBean`, to create a bean (of type `int`) called `testBean.age` that, +has a value equal to the `age` property of the `testBean` bean., +The value of the `path` attribute of the `<property-path/>` tag follows the form, +`beanName.beanProperty`., +from the supplied `sourceList`., +populated via the use of the `list-class` attribute on the `<util:list/>` element. For, +If no `list-class` attribute is supplied, a `List` implementation will be chosen by, +++ b/src/asciidoc/appendix.adoc, +Note that such code will usually pass `false` as the value of the `getSession(..)`, +methods `allowCreate` argument, to enforce running within a transaction (which avoids, +`FieldRetrievingFactoryBean`, to set the value of the `isolation` property on a bean, +to the value of the `java.sql.Connection.TRANSACTION_SERIALIZABLE` constant. This is, +`PropertyPathFactoryBean`, to create a bean (of type `int`) called `testBean.age` that, +has a value equal to the `age` property of the `testBean` bean., +The value of the `path` attribute of the `<property-path/>` tag follows the form, +`beanName.beanProperty`., +from the supplied `sourceList`., +populated via the use of the `list-class` attribute on the `<util:list/>` element. For, +If no `list-class` attribute is supplied, a `List` implementation will be chosen by, +++ b/src/asciidoc/index.adoc, +			System.out.println("Bean ''" + beanName + "'' created : " + bean.toString());, +System.out.println("Does my environment contain the ''foo'' property? " + containsFoo);, +	Expression exp = parser.parseExpression("**''Hello World''**");, +	Expression exp = parser.parseExpression("**''Hello World''.concat(''!'')**");, +	Expression exp = parser.parseExpression("**''Hello World''.bytes**");, +	Expression exp = parser.parseExpression("**''Hello World''.bytes.length**");, +	Expression exp = parser.parseExpression("**new String(''hello world'').toUpperCase()**");, +	Expression exp = parser.parseExpression("name == ''Nikola Tesla''");, +		<property name="defaultLocale" value="#{ systemProperties[''user.region''] }"/>, +		@Value("#{ systemProperties[''user.region''] }"), +		@Value("#{ systemProperties[''user.region''] }"), +				@Value("#{ systemProperties[''user.region''] }") String defaultLocale) {, +				@Value("#{systemProperties[''user.country'']}") String defaultLocale) {, +	String helloWorld = (String) parser.parseExpression("''Hello World''").getValue();, +	Inventor pupin = parser.parseExpression("Officers[''president'']").getValue(, +	String city = parser.parseExpression("Officers[''president''].PlaceOfBirth.City").getValue(, +	parser.parseExpression("Officers[''advisors''][0].PlaceOfBirth.Country").setValue(, +	List listOfLists = (List) parser.parseExpression("{{''a'',''b''},{''x'',''y''}}").getValue(context);, +	Map inventorInfo = (Map) parser.parseExpression("{name:''Nikola'',dob:''10-July-1856''}").getValue(context);, +	Map mapOfMaps = (Map) parser.parseExpression("{name:{first:''Nikola'',last:''Tesla''},dob:{day:10,month:''July'',year:1856}}").getValue(context);, +	String c = parser.parseExpression("''abc''.substring(2, 3)").getValue(String.class);, +	boolean isMember = parser.parseExpression("isMember(''Mihajlo Pupin'')").getValue(, +	boolean trueValue = parser.parseExpression("''black'' < ''block''").getValue(Boolean.class);, +[subs="verbatim,quotes"], +			"''xyz'' instanceof T(int)").getValue(Boolean.class);, +			"''5.00'' matches ''\^-?\\d+(\\.\\d{2})?$''").getValue(Boolean.class);, +			"''5.0067'' matches ''\^-?\\d+(\\.\\d{2})?$''").getValue(Boolean.class);, +	String expression = "isMember(''Nikola Tesla'') and isMember(''Mihajlo Pupin'')";, +	String expression = "isMember(''Nikola Tesla'') or isMember(''Albert Einstein'')";, +	String expression = "isMember(''Nikola Tesla'') and !isMember(''Mihajlo Pupin'')";, +			"''test'' + '' '' + ''string''").getValue(String.class); // 'test string', +			"Name = ''Alexandar Seovic''").getValue(inventorContext, String.class);, +			"new org.spring.samples.spel.inventor.Inventor(''Albert Einstein'', ''German'')"), +				''Albert Einstein'', ''German''))").getValue(societyContext);, +		"#reverseString(''hello'')").getValue(context, String.class);, +			"false ? ''trueExp'' : ''falseExp''").getValue(String.class);, +	expression = "isMember(#queryName)? #queryName + '' is a member of the '' " +, +			"+ Name + '' Society'' : #queryName + '' is not a member of the '' + Name + '' Society''";, +	String name = parser.parseExpression("null?:''Unknown''").getValue(String.class);, +	String name = parser.parseExpression("Name?:''Elvis Presley''").getValue(context, String.class);, +	name = parser.parseExpression("Name?:''Elvis Presley''").getValue(context, String.class);, +	@Value("#{systemProperties[''pop3.port''] ?: 25}"), +			"Members.?[Nationality == ''Serbian'']").getValue(societyContext);, +			StopWatch clock = new StopWatch("Profiling for ''" + name + "'' and ''" + age + "''");, +				c:username="#{request.getParameter(''user'')}", +				c:password="#{request.getParameter(''pswd'')}", +				c:theme="#{session.getAttribute(''theme'')}", +			assertEquals("Number of rows in the ''user'' table.", expected, countRowsInTable("user"));, +			assertEquals("Number of rows in the ''user'' table.", expected, countRowsInTable("user"));, +			assertEquals("Number of rows in the ''user'' table.", expected, countRowsInTable("user"));, +		.andExpect(jsonPath("$.links[?(@.rel == ''self'')].href").value("http://localhost:8080/people"));, +		.andExpect(xpath("/person/ns:link[@rel=''self'']/@href", ns).string("http://localhost:8080/people"));, +			Assert.notNull(transactionManager, "The ''transactionManager'' argument must not be null.");, +			Assert.notNull(transactionManager, "The ''transactionManager'' argument must not be null.");, +			<link rel="stylesheet" href="<spring:theme code=''styleSheet''/>" type="text/css"/>, +		<body style="background=<spring:theme code=''background''/>">, +If you prefer XML based configuration the `'context:mbean-export'` element serves the, +	helper.setText("<html><body><img src=''cid:identifier1234''></body></html>", true);, +			return "''" + this.message + "''", +					System.out.println("Invoking ''" + methodName + "''.");, +| The result of the method call (the value to be cached). Only available in `unless`, +  expressions, `cache put` expressions (to compute the `key`), or `cache evict`, +  expressions (when `beforeInvocation` is `false`).]