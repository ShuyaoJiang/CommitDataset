[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class, typeToMatch);, +			Class beanClass = predictBeanType(beanName, mbd);, +	protected Class resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class... typesToMatch), +	private Class doResolveBeanClass(RootBeanDefinition mbd, Class... typesToMatch) throws ClassNotFoundException {, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +		Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class, typeToMatch);, +			Class beanClass = predictBeanType(beanName, mbd);, +	protected Class resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class... typesToMatch), +	private Class doResolveBeanClass(RootBeanDefinition mbd, Class... typesToMatch) throws ClassNotFoundException {, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +		Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishClassLoaderAdapter.java, + * Copyright 2002-2009 the original author or authors., +, + * <p>Supports GlassFish V1, V2 and V3 (currently in beta)., + * @since 3.0, +, +, +, +, +, +, +, +		Class<?> instrumentableLoaderClass;, +		}, +		catch (ClassNotFoundException ex) {, +			}, +			catch (ClassNotFoundException cnfe) {, +				throw new IllegalStateException("Could not initialize GlassFish LoadTimeWeaver because " +, +						"GlassFish (V1, V2 or V3) API classes are not available", ex);, +			Class<?> classTransformerClass =, +					(glassV3 ? ClassFileTransformer.class : classLoader.loadClass(CLASS_TRANSFORMER));, +			this.addTransformer = instrumentableLoaderClass.getMethod("addTransformer", classTransformerClass);, +			this.copy = instrumentableLoaderClass.getMethod("copy");, +		}, +		catch (Exception ex) {, +			throw new IllegalArgumentException(classLoader + " and its parents are not suitable ClassLoaders: A [" +, +					instrumentableLoaderClass.getName() + "] implementation is required.");, +			this.addTransformer.invoke(this.classLoader,, +					(this.glassFishV3 ? transformer : new ClassTransformerAdapter(transformer)));, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +			return (ClassLoader) this.copy.invoke(this.classLoader);, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class, typeToMatch);, +			Class beanClass = predictBeanType(beanName, mbd);, +	protected Class resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class... typesToMatch), +	private Class doResolveBeanClass(RootBeanDefinition mbd, Class... typesToMatch) throws ClassNotFoundException {, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +		Class beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishClassLoaderAdapter.java, + * Copyright 2002-2009 the original author or authors., +, + * <p>Supports GlassFish V1, V2 and V3 (currently in beta)., + * @since 3.0, +, +, +, +, +, +, +, +		Class<?> instrumentableLoaderClass;, +		}, +		catch (ClassNotFoundException ex) {, +			}, +			catch (ClassNotFoundException cnfe) {, +				throw new IllegalStateException("Could not initialize GlassFish LoadTimeWeaver because " +, +						"GlassFish (V1, V2 or V3) API classes are not available", ex);, +			Class<?> classTransformerClass =, +					(glassV3 ? ClassFileTransformer.class : classLoader.loadClass(CLASS_TRANSFORMER));, +			this.addTransformer = instrumentableLoaderClass.getMethod("addTransformer", classTransformerClass);, +			this.copy = instrumentableLoaderClass.getMethod("copy");, +		}, +		catch (Exception ex) {, +			throw new IllegalArgumentException(classLoader + " and its parents are not suitable ClassLoaders: A [" +, +					instrumentableLoaderClass.getName() + "] implementation is required.");, +			this.addTransformer.invoke(this.classLoader,, +					(this.glassFishV3 ? transformer : new ClassTransformerAdapter(transformer)));, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +			return (ClassLoader) this.copy.invoke(this.classLoader);, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java]