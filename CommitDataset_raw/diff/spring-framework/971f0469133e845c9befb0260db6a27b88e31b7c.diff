[+++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +import java.util.ArrayList;, + * @author Rossen Stoyanchev, +		Assert.hasText(uriTemplate, "'uriTemplate' must not be null");, +, +		TemplateInfo info = TemplateInfo.parse(uriTemplate);, +		this.variableNames = Collections.unmodifiableList(info.getVariableNames());, +		this.matchPattern = info.getMatchPattern();, +	 * Helper to extract variable names and regex for matching to actual URLs., +	private static class TemplateInfo {, +		private final List<String> variableNames;, +		private final Pattern pattern;, +, +		private TemplateInfo(List<String> vars, Pattern pattern) {, +			this.variableNames = vars;, +			this.pattern = pattern;, +		}, +, +		public List<String> getVariableNames() {, +			return this.variableNames;, +		}, +, +		public Pattern getMatchPattern() {, +			return this.pattern;, +		}, +, +		private static TemplateInfo parse(String uriTemplate) {, +			int level = 0;, +			List<String> variableNames = new ArrayList<String>();, +			StringBuilder pattern = new StringBuilder();, +			StringBuilder builder = new StringBuilder();, +			for (int i = 0 ; i < uriTemplate.length(); i++) {, +				char c = uriTemplate.charAt(i);, +				if (c == '{') {, +					level++;, +					if (level == 1) {, +						pattern.append(quote(builder));, +						builder = new StringBuilder();, +						continue;, +					}, +				}, +				else if (c == '}') {, +					level--;, +					if (level == 0) {, +						String variable = builder.toString();, +						int idx = variable.indexOf(':');, +						if (idx == -1) {, +							pattern.append("(.*)");, +							variableNames.add(variable);, +							if (idx + 1 == variable.length()) {, +										"No custom regular expression specified after ':' " +, +												"in \"" + variable + "\"");, +							String regex = variable.substring(idx + 1, variable.length());, +							pattern.append('(');, +							pattern.append(regex);, +							pattern.append(')');, +							variableNames.add(variable.substring(0, idx));, +						builder = new StringBuilder();, +						continue;, +				if (i + 1 == uriTemplate.length()) {, +					if (c != '/') {, +						builder.append(c);, +					}, +					pattern.append(quote(builder));, +				}, +				builder.append(c);, +			}, +			return new TemplateInfo(variableNames, Pattern.compile(pattern.toString()));, +		private static String quote(StringBuilder builder) {, +			return builder.length() != 0 ? Pattern.quote(builder.toString()) : "";, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +import java.util.ArrayList;, + * @author Rossen Stoyanchev, +		Assert.hasText(uriTemplate, "'uriTemplate' must not be null");, +, +		TemplateInfo info = TemplateInfo.parse(uriTemplate);, +		this.variableNames = Collections.unmodifiableList(info.getVariableNames());, +		this.matchPattern = info.getMatchPattern();, +	 * Helper to extract variable names and regex for matching to actual URLs., +	private static class TemplateInfo {, +		private final List<String> variableNames;, +		private final Pattern pattern;, +, +		private TemplateInfo(List<String> vars, Pattern pattern) {, +			this.variableNames = vars;, +			this.pattern = pattern;, +		}, +, +		public List<String> getVariableNames() {, +			return this.variableNames;, +		}, +, +		public Pattern getMatchPattern() {, +			return this.pattern;, +		}, +, +		private static TemplateInfo parse(String uriTemplate) {, +			int level = 0;, +			List<String> variableNames = new ArrayList<String>();, +			StringBuilder pattern = new StringBuilder();]