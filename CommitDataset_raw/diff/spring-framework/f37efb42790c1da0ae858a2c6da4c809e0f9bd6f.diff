[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +	private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, +			this.callable.call();, +			logger.debug("Completing async request processing");, +			this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +	private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, +			this.callable.call();, +			logger.debug("Completing async request processing");, +			this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, + * Extend {@link NativeWebRequest} with methods for async request processing., +	 * Set the timeout for asynchronous request processing in milliseconds., +	 * In Servlet 3 async request processing, the timeout begins when the, +	 * main processing thread has exited., +	 * Mark the start of async request processing for example ensuring the, +	 * request remains open in order to be completed in a separate thread., +	 * @throws IllegalStateException if async processing has started, if it is, +	 * 	not supported, or if it has completed., +	 * Whether async processing is in progress and has not yet completed., +	 * Complete async request processing making a best effort but without any, +	 * effect if async request processing has already completed for any reason, +	 * including a timeout., +	 * Whether async processing has completed either normally via calls to, +	 * {@link #complete()} or for other reasons such as a timeout likely, +	 * detected in a separate thread during async request processing., +	/**, +	 * Send an error to the client making a best effort to do so but without any, +	 * effect if async request processing has already completed, for example due, +	 * to a timeout., +	 */, +	void sendError(HttpStatus status, String message);, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +	private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, +			this.callable.call();, +			logger.debug("Completing async request processing");, +			this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, + * Extend {@link NativeWebRequest} with methods for async request processing., +	 * Set the timeout for asynchronous request processing in milliseconds., +	 * In Servlet 3 async request processing, the timeout begins when the, +	 * main processing thread has exited., +	 * Mark the start of async request processing for example ensuring the, +	 * request remains open in order to be completed in a separate thread., +	 * @throws IllegalStateException if async processing has started, if it is, +	 * 	not supported, or if it has completed., +	 * Whether async processing is in progress and has not yet completed., +	 * Complete async request processing making a best effort but without any, +	 * effect if async request processing has already completed for any reason, +	 * including a timeout., +	 * Whether async processing has completed either normally via calls to, +	 * {@link #complete()} or for other reasons such as a timeout likely, +	 * detected in a separate thread during async request processing., +	/**, +	 * Send an error to the client making a best effort to do so but without any, +	 * effect if async request processing has already completed, for example due, +	 * to a timeout., +	 */, +	void sendError(HttpStatus status, String message);, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/StaleAsyncRequestCheckingCallable.java, +					"Async request no longer available due to a timeout or a (client) error");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +	private static final Log logger = LogFactory.getLog(AsyncExecutionChainRunnable.class);, +			this.callable.call();, +			logger.debug("Completing async request processing");, +			this.asyncWebRequest.complete();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, + * Extend {@link NativeWebRequest} with methods for async request processing., +	 * Set the timeout for asynchronous request processing in milliseconds., +	 * In Servlet 3 async request processing, the timeout begins when the, +	 * main processing thread has exited., +	 * Mark the start of async request processing for example ensuring the, +	 * request remains open in order to be completed in a separate thread., +	 * @throws IllegalStateException if async processing has started, if it is, +	 * 	not supported, or if it has completed., +	 * Whether async processing is in progress and has not yet completed., +	 * Complete async request processing making a best effort but without any, +	 * effect if async request processing has already completed for any reason, +	 * including a timeout., +	 * Whether async processing has completed either normally via calls to, +	 * {@link #complete()} or for other reasons such as a timeout likely, +	 * detected in a separate thread during async request processing., +	/**, +	 * Send an error to the client making a best effort to do so but without any, +	 * effect if async request processing has already completed, for example due, +	 * to a timeout., +	 */, +	void sendError(HttpStatus status, String message);, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/StaleAsyncRequestCheckingCallable.java, +					"Async request no longer available due to a timeout or a (client) error");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.java, + * <p>The servlet and all filters involved in an async request must have async, + * support enabled using the Servlet API or by adding an, + * {@code <async-support>true</async-support>} element to servlet and filter, + * declarations in web.xml, +			completeInternal();, +	private void completeInternal() {]