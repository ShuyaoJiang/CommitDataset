[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +					Class predictedType = ibp.predictBeanType(beanClass, beanName);, +					if (predictedType != null && (typesToMatch.length > 1 ||, +							!FactoryBean.class.equals(typesToMatch[0]) || FactoryBean.class.isAssignableFrom(predictedType))) {, +						return predictedType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +					Class predictedType = ibp.predictBeanType(beanClass, beanName);, +					if (predictedType != null && (typesToMatch.length > 1 ||, +							!FactoryBean.class.equals(typesToMatch[0]) || FactoryBean.class.isAssignableFrom(predictedType))) {, +						return predictedType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +			Class[] typesToMatch = (FactoryBean.class.equals(typeToMatch) ?, +					new Class[] {typeToMatch} : new Class[] {FactoryBean.class, typeToMatch});, +, +				Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd, typesToMatch);, +			Class<?> beanClass = predictBeanType(beanName, mbd, typesToMatch);, +		Class<?> beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +		return (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +					Class predictedType = ibp.predictBeanType(beanClass, beanName);, +					if (predictedType != null && (typesToMatch.length > 1 ||, +							!FactoryBean.class.equals(typesToMatch[0]) || FactoryBean.class.isAssignableFrom(predictedType))) {, +						return predictedType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +			Class[] typesToMatch = (FactoryBean.class.equals(typeToMatch) ?, +					new Class[] {typeToMatch} : new Class[] {FactoryBean.class, typeToMatch});, +, +				Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd, typesToMatch);, +			Class<?> beanClass = predictBeanType(beanName, mbd, typesToMatch);, +		Class<?> beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +		return (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/Spr8954Tests.java, + * Copyright 2002-2013 the original author or authors., +, +import org.springframework.beans.BeansException;, +		assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true));, +, +	@Test, +	public void findsBeansByTypeIfNotInstantiated() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("foo", new RootBeanDefinition(FooFactoryBean.class));, +		bf.addBeanPostProcessor(new PredictingBPP());, +, +		assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true));, +, +		@SuppressWarnings("rawtypes"), +		Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class);, +		assertThat(1, equalTo(fbBeans.size()));, +		assertThat("&foo", equalTo(fbBeans.keySet().iterator().next()));, +, +		Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class);, +		assertThat(1, equalTo(aiBeans.size()));, +		assertThat("&foo", equalTo(aiBeans.keySet().iterator().next()));, +	}, +, +, +	}, +	static class PredictedTypeImpl implements PredictedType {, +					PredictedType.class : null;, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +					Class predictedType = ibp.predictBeanType(beanClass, beanName);, +					if (predictedType != null && (typesToMatch.length > 1 ||, +							!FactoryBean.class.equals(typesToMatch[0]) || FactoryBean.class.isAssignableFrom(predictedType))) {, +						return predictedType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +			Class[] typesToMatch = (FactoryBean.class.equals(typeToMatch) ?, +					new Class[] {typeToMatch} : new Class[] {FactoryBean.class, typeToMatch});, +, +				Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd, typesToMatch);, +			Class<?> beanClass = predictBeanType(beanName, mbd, typesToMatch);, +		Class<?> beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +		return (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/Spr8954Tests.java, + * Copyright 2002-2013 the original author or authors., +, +import org.springframework.beans.BeansException;, +		assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true));, +, +	@Test, +	public void findsBeansByTypeIfNotInstantiated() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("foo", new RootBeanDefinition(FooFactoryBean.class));, +		bf.addBeanPostProcessor(new PredictingBPP());, +, +		assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true));, +, +		@SuppressWarnings("rawtypes"), +		Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class);, +		assertThat(1, equalTo(fbBeans.size()));, +		assertThat("&foo", equalTo(fbBeans.keySet().iterator().next()));, +, +		Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class);]