[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +	private Runnable timeoutHandler;, +, +	 * Set the handler to use when concurrent handling times out. If not set, by, +	 * default a timeout is handled by returning SERVICE_UNAVAILABLE (503)., +	 * @param timeoutHandler the handler, +	 */, +	public void setTimeoutHandler(Runnable timeoutHandler) {, +		this.timeoutHandler = timeoutHandler;, +	}, +, +	/**, +		if (this.timeoutHandler != null) {, +			this.asyncWebRequest.setTimeoutHandler(this.timeoutHandler);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +	private Runnable timeoutHandler;, +, +	 * Set the handler to use when concurrent handling times out. If not set, by, +	 * default a timeout is handled by returning SERVICE_UNAVAILABLE (503)., +	 * @param timeoutHandler the handler, +	 */, +	public void setTimeoutHandler(Runnable timeoutHandler) {, +		this.timeoutHandler = timeoutHandler;, +	}, +, +	/**, +		if (this.timeoutHandler != null) {, +			this.asyncWebRequest.setTimeoutHandler(this.timeoutHandler);, +		}, +, +++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java, +		Callable<Object> task = new StubCallable();, +			manager.startCallableProcessing(new StubCallable());, +	@Test, +	public void setTimeoutHandler() throws Exception {, +, +		Runnable timeoutHandler = new Runnable() { public void run() {} };, +		this.asyncManager.setTimeoutHandler(timeoutHandler);, +, +		this.asyncWebRequest.startAsync();, +		this.asyncWebRequest.setTimeoutHandler(timeoutHandler);, +		expect(this.asyncWebRequest.isAsyncComplete()).andReturn(false);, +		this.asyncWebRequest.dispatch();, +		replay(this.asyncWebRequest);, +, +		this.asyncManager.startCallableProcessing(new StubCallable());, +, +		verify(this.asyncWebRequest);, +	}, +, +, +	private final class StubCallable implements Callable<Object> {, +		public Object call() throws Exception {, +			return 1;, +		}, +	}]