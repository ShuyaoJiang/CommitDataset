[+++ b/build.gradle, +	ext.rxjavaAdapterVersion   = '1.2.0', +		optional "io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}", +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/build.gradle, +	ext.rxjavaAdapterVersion   = '1.2.0', +		optional "io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}", +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import rx.RxReactiveStreams;, +	private static final boolean rxJava1Adapter =, +			ClassUtils.isPresent("rx.RxReactiveStreams", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (rxJava1Present && rxJava1Adapter) {, +					source -> Flux.from(RxReactiveStreams.toPublisher((Observable<?>) source)),, +					RxReactiveStreams::toObservable, +					source -> Mono.from(RxReactiveStreams.toPublisher((Single<?>) source)),, +					RxReactiveStreams::toSingle,, +					source -> Mono.from(RxReactiveStreams.toPublisher((Completable) source)),, +					RxReactiveStreams::toCompletable,, +					source -> Flux.from((Flowable<?>) source),, +					source-> Flowable.fromPublisher(source), +					source -> Flux.from(((io.reactivex.Observable<?>) source).toFlowable(BackpressureStrategy.BUFFER)),, +					source -> Flowable.fromPublisher(source).toObservable(), +					source -> Mono.from(((io.reactivex.Single<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement().toSingle(),, +					source -> Mono.from(((io.reactivex.Completable) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().ignoreElements(),, +++ b/build.gradle, +	ext.rxjavaAdapterVersion   = '1.2.0', +		optional "io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}", +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import rx.RxReactiveStreams;, +	private static final boolean rxJava1Adapter =, +			ClassUtils.isPresent("rx.RxReactiveStreams", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (rxJava1Present && rxJava1Adapter) {, +					source -> Flux.from(RxReactiveStreams.toPublisher((Observable<?>) source)),, +					RxReactiveStreams::toObservable, +					source -> Mono.from(RxReactiveStreams.toPublisher((Single<?>) source)),, +					RxReactiveStreams::toSingle,, +					source -> Mono.from(RxReactiveStreams.toPublisher((Completable) source)),, +					RxReactiveStreams::toCompletable,, +					source -> Flux.from((Flowable<?>) source),, +					source-> Flowable.fromPublisher(source), +					source -> Flux.from(((io.reactivex.Observable<?>) source).toFlowable(BackpressureStrategy.BUFFER)),, +					source -> Flowable.fromPublisher(source).toObservable(), +					source -> Mono.from(((io.reactivex.Single<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement().toSingle(),, +					source -> Mono.from(((io.reactivex.Completable) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().ignoreElements(),, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolverTests.java, +import rx.RxReactiveStreams;, +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(entity.getBody())), +		TestSubscriber.subscribe(entity.getBody().toFlowable()), +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(entity.getBody())), +		TestSubscriber.subscribe(entity.getBody().toFlowable(BackpressureStrategy.BUFFER)), +		TestSubscriber.subscribe(entity.getBody()), +++ b/build.gradle, +	ext.rxjavaAdapterVersion   = '1.2.0', +		optional "io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}", +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import rx.RxReactiveStreams;, +	private static final boolean rxJava1Adapter =, +			ClassUtils.isPresent("rx.RxReactiveStreams", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (rxJava1Present && rxJava1Adapter) {, +					source -> Flux.from(RxReactiveStreams.toPublisher((Observable<?>) source)),, +					RxReactiveStreams::toObservable, +					source -> Mono.from(RxReactiveStreams.toPublisher((Single<?>) source)),, +					RxReactiveStreams::toSingle,, +					source -> Mono.from(RxReactiveStreams.toPublisher((Completable) source)),, +					RxReactiveStreams::toCompletable,, +					source -> Flux.from((Flowable<?>) source),, +					source-> Flowable.fromPublisher(source), +					source -> Flux.from(((io.reactivex.Observable<?>) source).toFlowable(BackpressureStrategy.BUFFER)),, +					source -> Flowable.fromPublisher(source).toObservable(), +					source -> Mono.from(((io.reactivex.Single<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement().toSingle(),, +					source -> Mono.from(((io.reactivex.Completable) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().ignoreElements(),, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolverTests.java, +import rx.RxReactiveStreams;, +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(entity.getBody())), +		TestSubscriber.subscribe(entity.getBody().toFlowable()), +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(entity.getBody())), +		TestSubscriber.subscribe(entity.getBody().toFlowable(BackpressureStrategy.BUFFER)), +		TestSubscriber.subscribe(entity.getBody()), +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java, +import rx.RxReactiveStreams;, +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(single)), +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(single)), +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(observable)), +		TestSubscriber.subscribe(RxReactiveStreams.toPublisher(observable))]