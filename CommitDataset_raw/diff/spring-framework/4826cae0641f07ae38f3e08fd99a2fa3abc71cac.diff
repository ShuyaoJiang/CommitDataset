[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +			T match = getMatchingMapping(mapping, request);, +			Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));, +	protected abstract T getMatchingMapping(T mapping, HttpServletRequest request);, +	protected abstract Comparator<T> getMappingComparator(HttpServletRequest request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +			T match = getMatchingMapping(mapping, request);, +			Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));, +	protected abstract T getMatchingMapping(T mapping, HttpServletRequest request);, +	protected abstract Comparator<T> getMappingComparator(HttpServletRequest request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.CustomRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.RequestCondition;, + * A RequestMapingInfo encapsulates and operates on the following request mapping conditions:, + * <ul>, + * 	<li>{@link PatternsRequestCondition}</li>, + * 	<li>{@link RequestMethodsRequestCondition}</li>, + * 	<li>{@link ParamsRequestCondition}</li>, + * 	<li>{@link HeadersRequestCondition}</li>, + * 	<li>{@link ConsumesRequestCondition}</li>, + * 	<li>{@link ProducesRequestCondition}</li>, + * </ul>, + * , + * Optionally a custom request condition may also be provided by wrapping it in an instance , + * of {@link CustomRequestCondition}. , +	private CustomRequestCondition customCondition = new CustomRequestCondition();, +, +	public RequestMappingInfo(PatternsRequestCondition patterns, , +							  RequestMethodsRequestCondition methods, , +							  ParamsRequestCondition params, , +							  HeadersRequestCondition headers, , +							  ConsumesRequestCondition consumes, , +							  ProducesRequestCondition produces) {, +		this(patterns, methods, params, headers, consumes, produces, null);, +	 * Creates a new {@code RequestMappingInfo} instance also providing a custom {@link RequestCondition}., +	 */, +	public RequestMappingInfo(PatternsRequestCondition patterns,, +							  RequestMethodsRequestCondition methods, , +							  ParamsRequestCondition params,, +							  HeadersRequestCondition headers, , +							  ConsumesRequestCondition consumes,, +							  ProducesRequestCondition produces,, +							  CustomRequestCondition custom) {, +		this.patternsCondition = patterns != null ? patterns : new PatternsRequestCondition();, +		this.methodsCondition = methods != null ? methods : new RequestMethodsRequestCondition();, +		this.paramsCondition = params != null ? params : new ParamsRequestCondition();, +		this.headersCondition = headers != null ? headers : new HeadersRequestCondition();, +		this.consumesCondition = consumes != null ? consumes : new ConsumesRequestCondition();, +		this.producesCondition = produces != null ? produces : new ProducesRequestCondition();, +		this.customCondition = custom != null ? custom : new CustomRequestCondition();, +	}, +, +	/**, +	 * Package protected constructor for tests., +	 * Returns the URL patterns of this request mapping info., +	 * Returns the HTTP request methods of this {@link RequestMappingInfo}., +	 * Returns the "parameters" condition of this {@link RequestMappingInfo}., +	 * Returns the "headers" condition of this {@link RequestMappingInfo}., +	 * Returns the "consumes" condition of this {@link RequestMappingInfo}., +	 * Returns the "produces" condition of this {@link RequestMappingInfo}., +	 * Sets a custom request condition., +	public void setCustomCondition(CustomRequestCondition customCondition) {, +		this.customCondition = customCondition;, +	 * Combines "this" request mapping info (i.e. the current instance) with another request mapping info instance., +	 * <p>Example: combine type- and method-level request mappings., +	 * @return a new request mapping info instance; never {@code null}, +	public RequestMappingInfo combine(RequestMappingInfo other) {, +		PatternsRequestCondition patterns = this.patternsCondition.combine(other.patternsCondition);, +		RequestMethodsRequestCondition methods = this.methodsCondition.combine(other.methodsCondition);, +		ParamsRequestCondition params = this.paramsCondition.combine(other.paramsCondition);, +		HeadersRequestCondition headers = this.headersCondition.combine(other.headersCondition);, +		ConsumesRequestCondition consumes = this.consumesCondition.combine(other.consumesCondition);, +		ProducesRequestCondition produces = this.producesCondition.combine(other.producesCondition);, +		CustomRequestCondition custom = this.customCondition.combine(other.customCondition);, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes, produces, custom);, +	}, +, +	/**, +	 * Checks if all conditions in this request mapping info match the provided request and returns , +	 * a potentially new request mapping info with conditions tailored to the current request. , +	 * <p>For example the returned instance may contain the subset of URL patterns that match to , +	 * the current request, sorted with best matching patterns on top., +	 * @return a new instance in case all conditions match; or {@code null} otherwise, +	 */, +	public RequestMappingInfo getMatchingRequestMappingInfo(HttpServletRequest request) {, +		RequestMethodsRequestCondition methods = methodsCondition.getMatchingCondition(request);, +		ParamsRequestCondition params = paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition headers = headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition consumes = consumesCondition.getMatchingCondition(request);, +		ProducesRequestCondition produces = producesCondition.getMatchingCondition(request);, +		, +		if (methods == null || params == null || headers == null || consumes == null || produces == null) {, +		PatternsRequestCondition patterns = patternsCondition.getMatchingCondition(request);, +		if (patterns == null) {, +			return null;, +		CustomRequestCondition custom = customCondition.getMatchingCondition(request);, +		if (custom == null) {, +		return new RequestMappingInfo(patterns, methods, params, headers, consumes, produces, custom);, +	}, +	]