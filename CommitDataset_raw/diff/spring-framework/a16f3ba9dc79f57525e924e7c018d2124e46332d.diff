[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +import org.springframework.test.context.ContextLoader;, + * Concrete implementation of {@link AbstractGenericContextLoader} which, + * creates an {@link AnnotationConfigApplicationContext} and registers, + * bean definitions from, + * {@link org.springframework.context.annotation.Configuration configuration classes}., + * , + * <p>This <code>ContextLoader</code> supports class-based context configuration, + * {@link #getResourceType() resources} as opposed to string-based resources., + * Consequently, <em>locations</em> (as discussed in the {@link ContextLoader}, + * API and superclasses) are interpreted as fully qualified class names, + * in the context of this class. The documentation and method parameters, + * reflect this., +	 * class names., +	 * <p>Each class name must be the <em>fully qualified class name</em> of an, +	 * annotated configuration class, component, or feature specification. The, +	 * <code>AnnotationConfigApplicationContext</code> assumes the responsibility, +	 * of loading the appropriate bean definitions., +	 * @see #createGenericApplicationContext(), +	 * Returns the supplied class names unmodified., +	protected String[] modifyLocations(Class<?> clazz, String... classNames) {, +		return classNames;, +	 * to append to the name of the test class when generating default, +	 * configuration class names., +	 * @see #generateDefaultLocations(Class), +	public final ResourceType getResourceType() {, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +import org.springframework.test.context.ContextLoader;, + * Concrete implementation of {@link AbstractGenericContextLoader} which, + * creates an {@link AnnotationConfigApplicationContext} and registers, + * bean definitions from, + * {@link org.springframework.context.annotation.Configuration configuration classes}., + * , + * <p>This <code>ContextLoader</code> supports class-based context configuration, + * {@link #getResourceType() resources} as opposed to string-based resources., + * Consequently, <em>locations</em> (as discussed in the {@link ContextLoader}, + * API and superclasses) are interpreted as fully qualified class names, + * in the context of this class. The documentation and method parameters, + * reflect this., +	 * class names., +	 * <p>Each class name must be the <em>fully qualified class name</em> of an, +	 * annotated configuration class, component, or feature specification. The, +	 * <code>AnnotationConfigApplicationContext</code> assumes the responsibility, +	 * of loading the appropriate bean definitions., +	 * @see #createGenericApplicationContext(), +	 * Returns the supplied class names unmodified., +	protected String[] modifyLocations(Class<?> clazz, String... classNames) {, +		return classNames;, +	 * to append to the name of the test class when generating default, +	 * configuration class names., +	 * @see #generateDefaultLocations(Class), +	public final ResourceType getResourceType() {, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/GenericPropertiesContextLoader.java, +	 * @return a new PropertiesBeanDefinitionReader, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +import org.springframework.test.context.ContextLoader;, + * Concrete implementation of {@link AbstractGenericContextLoader} which, + * creates an {@link AnnotationConfigApplicationContext} and registers, + * bean definitions from, + * {@link org.springframework.context.annotation.Configuration configuration classes}., + * , + * <p>This <code>ContextLoader</code> supports class-based context configuration, + * {@link #getResourceType() resources} as opposed to string-based resources., + * Consequently, <em>locations</em> (as discussed in the {@link ContextLoader}, + * API and superclasses) are interpreted as fully qualified class names, + * in the context of this class. The documentation and method parameters, + * reflect this., +	 * class names., +	 * <p>Each class name must be the <em>fully qualified class name</em> of an, +	 * annotated configuration class, component, or feature specification. The, +	 * <code>AnnotationConfigApplicationContext</code> assumes the responsibility, +	 * of loading the appropriate bean definitions., +	 * @see #createGenericApplicationContext(), +	 * Returns the supplied class names unmodified., +	protected String[] modifyLocations(Class<?> clazz, String... classNames) {, +		return classNames;, +	 * to append to the name of the test class when generating default, +	 * configuration class names., +	 * @see #generateDefaultLocations(Class), +	public final ResourceType getResourceType() {, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/GenericPropertiesContextLoader.java, +	 * @return a new PropertiesBeanDefinitionReader, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/GenericXmlContextLoader.java, +	 * @return a new XmlBeanDefinitionReader]