[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +import org.springframework.web.servlet.handler.HandlerMappingIntrospector;, +	private static final String HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME = "mvcHandlerMappingIntrospector";, +, +		registerHandlerMappingIntrospector(parserContext, source);, +	 * Registers  an {@link HandlerMappingIntrospector} under a well-known name, +	 * unless already registered., +	 */, +	private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){, +			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class);, +			beanDef.setSource(source);, +			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			beanDef.setLazyInit(true);, +			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME));, +		}, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +import org.springframework.web.servlet.handler.HandlerMappingIntrospector;, +	private static final String HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME = "mvcHandlerMappingIntrospector";, +, +		registerHandlerMappingIntrospector(parserContext, source);, +	 * Registers  an {@link HandlerMappingIntrospector} under a well-known name, +	 * unless already registered., +	 */, +	private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){, +			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class);, +			beanDef.setSource(source);, +			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			beanDef.setLazyInit(true);, +			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME));, +		}, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.context.annotation.Lazy;, +import org.springframework.web.servlet.handler.HandlerMappingIntrospector;, +	@Bean @Lazy, +	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() {, +		return new HandlerMappingIntrospector();, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +import org.springframework.web.servlet.handler.HandlerMappingIntrospector;, +	private static final String HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME = "mvcHandlerMappingIntrospector";, +, +		registerHandlerMappingIntrospector(parserContext, source);, +	 * Registers  an {@link HandlerMappingIntrospector} under a well-known name, +	 * unless already registered., +	 */, +	private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){, +			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class);, +			beanDef.setSource(source);, +			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			beanDef.setLazyInit(true);, +			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME));, +		}, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.context.annotation.Lazy;, +import org.springframework.web.servlet.handler.HandlerMappingIntrospector;, +	@Bean @Lazy, +	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() {, +		return new HandlerMappingIntrospector();, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java, +import java.util.Collections;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.util.Assert;, +public class HandlerMappingIntrospector, +		implements CorsConfigurationSource, ApplicationContextAware, InitializingBean {, +	@Nullable, +	private ApplicationContext applicationContext;, +	@Nullable, +	private List<HandlerMapping> handlerMappings;, +, +, +	/**, +	 * Constructor for use with {@link ApplicationContextAware}., +	 */, +	public HandlerMappingIntrospector() {, +	}, +	@Deprecated, +	/**, +	 * Return the configured HandlerMapping's., +	 */]