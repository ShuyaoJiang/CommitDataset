[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/RequestMethodsRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/RequestMethodsRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/RequestMethodsRequestConditionTests.java, + * Copyright 2002-2019 the original author or authors., +		testMatch(new RequestMethodsRequestCondition(GET), GET);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/RequestMethodsRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/RequestMethodsRequestConditionTests.java, + * Copyright 2002-2019 the original author or authors., +		testMatch(new RequestMethodsRequestCondition(GET), GET);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +		public String textGet() {, +		// SPR-17593: explicit HEAD should not clash with implicit mapping via GET, +		@RequestMapping(path = "/text", method = RequestMethod.HEAD), +		public String textHead() {, +			return textGet();, +		}, +]