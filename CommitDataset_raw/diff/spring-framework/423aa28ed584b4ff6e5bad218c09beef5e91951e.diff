[+++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * Copyright 2002-2018 the original author or authors., +	/** Maximum ranges per request. */, +	private static final int MAX_RANGES = 100;, +, +		long contentLength = getLengthFor(resource);, +, +	private static long getLengthFor(Resource resource) {, +		long contentLength;, +		try {, +			contentLength = resource.contentLength();, +			Assert.isTrue(contentLength > 0, "Resource content length should be > 0");, +		catch (IOException ex) {, +			throw new IllegalArgumentException("Failed to obtain Resource content length", ex);, +		}, +		return contentLength;, +	 * @throws IllegalArgumentException if the string cannot be parsed, or if, +	 * the number of ranges is greater than 100., +		Assert.isTrue(tokens.length <= MAX_RANGES, () -> "Too many ranges " + tokens.length);, +	 * @throws IllegalArgumentException if the sum of all ranges exceeds the, +	 * resource length., +		if (ranges.size() > 1) {, +			long length = getLengthFor(resource);, +			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);, +			Assert.isTrue(total < length,, +					() -> "The sum of all ranges (" + total + ") " +, +							"should be less than the resource length (" + length + ")");, +		}, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * Copyright 2002-2018 the original author or authors., +	/** Maximum ranges per request. */, +	private static final int MAX_RANGES = 100;, +, +		long contentLength = getLengthFor(resource);, +, +	private static long getLengthFor(Resource resource) {, +		long contentLength;, +		try {, +			contentLength = resource.contentLength();, +			Assert.isTrue(contentLength > 0, "Resource content length should be > 0");, +		catch (IOException ex) {, +			throw new IllegalArgumentException("Failed to obtain Resource content length", ex);, +		}, +		return contentLength;, +	 * @throws IllegalArgumentException if the string cannot be parsed, or if, +	 * the number of ranges is greater than 100., +		Assert.isTrue(tokens.length <= MAX_RANGES, () -> "Too many ranges " + tokens.length);, +	 * @throws IllegalArgumentException if the sum of all ranges exceeds the, +	 * resource length., +		if (ranges.size() > 1) {, +			long length = getLengthFor(resource);, +			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);, +			Assert.isTrue(total < length,, +					() -> "The sum of all ranges (" + total + ") " +, +							"should be less than the resource length (" + length + ")");, +		}, +++ b/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.stream.Stream;, +	public void parseRangesValidations() {, +, +		// 1. At limit.., +		StringBuilder sb = new StringBuilder("bytes=0-0");, +		for (int i=0; i < 99; i++) {, +			sb.append(",").append(i).append("-").append(i + 1);, +		}, +		List<HttpRange> ranges = HttpRange.parseRanges(sb.toString());, +		assertEquals(100, ranges.size());, +, +		// 2. Above limit.., +		sb = new StringBuilder("bytes=0-0");, +		for (int i=0; i < 100; i++) {, +			sb.append(",").append(i).append("-").append(i + 1);, +		}, +		try {, +			HttpRange.parseRanges(sb.toString());, +			fail();, +		}, +		catch (IllegalArgumentException ex) {, +			// Expected, +		}, +	}, +, +	@Test, +	@Test, +	public void toResourceRegionsValidations() {, +		byte[] bytes = "12345".getBytes(StandardCharsets.UTF_8);, +		ByteArrayResource resource = new ByteArrayResource(bytes);, +, +		// 1. Below length, +		List<HttpRange> ranges = HttpRange.parseRanges("bytes=0-1,2-3");, +		List<ResourceRegion> regions = HttpRange.toResourceRegions(ranges, resource);, +		assertEquals(2, regions.size());, +, +		// 2. At length, +		ranges = HttpRange.parseRanges("bytes=0-1,2-4");, +		try {, +			HttpRange.toResourceRegions(ranges, resource);, +			fail();]