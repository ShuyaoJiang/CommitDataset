[+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, + * Copyright 2002-2019 the original author or authors., +	 * @param factoryType the interface or abstract class representing the factory, +	public static <T> List<T> loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader) {, +		Assert.notNull(factoryType, "'factoryType' must not be null");, +		List<String> factoryImplementationNames = loadFactoryNames(factoryType, classLoaderToUse);, +			logger.trace("Loaded [" + factoryType.getName() + "] names: " + factoryImplementationNames);, +		List<T> result = new ArrayList<>(factoryImplementationNames.size());, +		for (String factoryImplementationName : factoryImplementationNames) {, +			result.add(instantiateFactory(factoryImplementationName, factoryType, classLoaderToUse));, +	 * @param factoryType the interface or abstract class representing the factory, +	public static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {, +		String factoryTypeName = factoryType.getName();, +		return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());, +					String factoryTypeName = ((String) entry.getKey()).trim();, +					for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {, +						result.add(factoryTypeName, factoryImplementationName.trim());, +	private static <T> T instantiateFactory(String factoryImplementationName, Class<T> factoryType, ClassLoader classLoader) {, +			Class<?> factoryImplementationClass = ClassUtils.forName(factoryImplementationName, classLoader);, +			if (!factoryType.isAssignableFrom(factoryImplementationClass)) {, +						"Class [" + factoryImplementationName + "] is not assignable to factory type [" + factoryType.getName() + "]");, +			return (T) ReflectionUtils.accessibleConstructor(factoryImplementationClass).newInstance();, +			throw new IllegalArgumentException(, +				"Unable to instantiate factory class [" + factoryImplementationName + "] for factory type [" + factoryType.getName() + "]",, +				ex);, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, + * Copyright 2002-2019 the original author or authors., +	 * @param factoryType the interface or abstract class representing the factory, +	public static <T> List<T> loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader) {, +		Assert.notNull(factoryType, "'factoryType' must not be null");, +		List<String> factoryImplementationNames = loadFactoryNames(factoryType, classLoaderToUse);, +			logger.trace("Loaded [" + factoryType.getName() + "] names: " + factoryImplementationNames);, +		List<T> result = new ArrayList<>(factoryImplementationNames.size());, +		for (String factoryImplementationName : factoryImplementationNames) {, +			result.add(instantiateFactory(factoryImplementationName, factoryType, classLoaderToUse));, +	 * @param factoryType the interface or abstract class representing the factory, +	public static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {, +		String factoryTypeName = factoryType.getName();, +		return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());, +					String factoryTypeName = ((String) entry.getKey()).trim();, +					for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {, +						result.add(factoryTypeName, factoryImplementationName.trim());, +	private static <T> T instantiateFactory(String factoryImplementationName, Class<T> factoryType, ClassLoader classLoader) {, +			Class<?> factoryImplementationClass = ClassUtils.forName(factoryImplementationName, classLoader);, +			if (!factoryType.isAssignableFrom(factoryImplementationClass)) {, +						"Class [" + factoryImplementationName + "] is not assignable to factory type [" + factoryType.getName() + "]");, +			return (T) ReflectionUtils.accessibleConstructor(factoryImplementationClass).newInstance();, +			throw new IllegalArgumentException(, +				"Unable to instantiate factory class [" + factoryImplementationName + "] for factory type [" + factoryType.getName() + "]",, +				ex);, +++ b/spring-core/src/test/java/org/springframework/core/io/support/SpringFactoriesLoaderTests.java, + * Copyright 2002-2019 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Sam Brannen, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +		assertFalse(Modifier.isPublic(factories.get(0).getClass().getModifiers()));, +	}, +, +	@Test, +	public void attemptToLoadFactoryOfIncompatibleType() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("Unable to instantiate factory class [org.springframework.core.io.support.MyDummyFactory1] for factory type [java.lang.String]");, +, +		SpringFactoriesLoader.loadFactories(String.class, null);]