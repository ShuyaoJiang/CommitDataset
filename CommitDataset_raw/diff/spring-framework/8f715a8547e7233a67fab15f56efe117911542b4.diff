[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.PatternMatchUtils;, +	private String[] redirectPatterns;, +, +, +	/**, +	 * Configure one more simple patterns (as described in, +	 * {@link org.springframework.util.PatternMatchUtils#simpleMatch}) to use in order to recognize, +	 * custom redirect prefixes in addition to "redirect:"., +	 *, +	 * <p>Note that simply configuring this property will not make a custom, +	 * redirect prefix work. There must be a custom View that recognizes the, +	 * prefix as well., +	 *, +	 * @since 4.1, +	 */, +	public void setRedirectPatterns(String... redirectPatterns) {, +		this.redirectPatterns = redirectPatterns;, +	}, +, +	/**, +	 * The configured redirect patterns, if any., +	 */, +	public String[] getRedirectPatterns() {, +		return this.redirectPatterns;, +	}, +, +, +			if (viewName != null && isRedirectViewName(viewName)) {, +	/**, +	 * Whether the given view name is a redirect view reference., +	 * The default implementation checks the configured redirect patterns and, +	 * also if the view name starts with the "redirect:" prefix., +	 * @param viewName the view name to check, never {@code null}, +	 * @return "true" if the given view name is recognized as a redirect view, +	 * reference; "false" otherwise., +	 */, +	protected boolean isRedirectViewName(String viewName) {, +		if (PatternMatchUtils.simpleMatch(this.redirectPatterns, viewName)) {, +			return true;, +		}, +		return viewName.startsWith("redirect:");, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.PatternMatchUtils;, +	private String[] redirectPatterns;, +, +, +	/**, +	 * Configure one more simple patterns (as described in, +	 * {@link org.springframework.util.PatternMatchUtils#simpleMatch}) to use in order to recognize, +	 * custom redirect prefixes in addition to "redirect:"., +	 *, +	 * <p>Note that simply configuring this property will not make a custom, +	 * redirect prefix work. There must be a custom View that recognizes the, +	 * prefix as well., +	 *, +	 * @since 4.1, +	 */, +	public void setRedirectPatterns(String... redirectPatterns) {, +		this.redirectPatterns = redirectPatterns;, +	}, +, +	/**, +	 * The configured redirect patterns, if any., +	 */, +	public String[] getRedirectPatterns() {, +		return this.redirectPatterns;, +	}, +, +, +			if (viewName != null && isRedirectViewName(viewName)) {, +	/**, +	 * Whether the given view name is a redirect view reference., +	 * The default implementation checks the configured redirect patterns and, +	 * also if the view name starts with the "redirect:" prefix., +	 * @param viewName the view name to check, never {@code null}, +	 * @return "true" if the given view name is recognized as a redirect view, +	 * reference; "false" otherwise., +	 */, +	protected boolean isRedirectViewName(String viewName) {, +		if (PatternMatchUtils.simpleMatch(this.redirectPatterns, viewName)) {, +			return true;, +		}, +		return viewName.startsWith("redirect:");, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ViewNameMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.PatternMatchUtils;, +	private String[] redirectPatterns;, +, +, +	/**, +	 * Configure one more simple patterns (as described in, +	 * {@link PatternMatchUtils#simpleMatch}) to use in order to recognize, +	 * custom redirect prefixes in addition to "redirect:".]