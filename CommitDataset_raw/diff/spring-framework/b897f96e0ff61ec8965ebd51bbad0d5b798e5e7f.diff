[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +				mergeTemplateVariables(request, this.pattern.matchAndExtract(request.path()));, +			return Optional.ofNullable(this.pattern.getPathRemaining(request.path())), +					.map(info -> {, +						mergeTemplateVariables(request, info.getMatchingVariables());, +						String path = info.getPathRemaining();, +						if (!path.startsWith("/")) {, +							path = "/" + path;, +						}, +		private void mergeTemplateVariables(ServerRequest request, Map<String, String> variables) {, +			if (!variables.isEmpty()) {, +				Map<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);, +				mergedVariables.putAll(variables);, +						Collections.unmodifiableMap(mergedVariables));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +				mergeTemplateVariables(request, this.pattern.matchAndExtract(request.path()));, +			return Optional.ofNullable(this.pattern.getPathRemaining(request.path())), +					.map(info -> {, +						mergeTemplateVariables(request, info.getMatchingVariables());, +						String path = info.getPathRemaining();, +						if (!path.startsWith("/")) {, +							path = "/" + path;, +						}, +		private void mergeTemplateVariables(ServerRequest request, Map<String, String> variables) {, +			if (!variables.isEmpty()) {, +				Map<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);, +				mergedVariables.putAll(variables);, +						Collections.unmodifiableMap(mergedVariables));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/NestedRouteIntegrationTests.java]