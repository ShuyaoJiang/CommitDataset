[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/MockServerSpecTests.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.core.StringContains.*;, +, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:A:B")));, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:Fwk-A:Fwk-B:App-A:App-B")));, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/MockServerSpecTests.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.core.StringContains.*;, +, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:A:B")));, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:Fwk-A:Fwk-B:App-A:App-B")));, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * Name of {@link #getAttributes() attribute} whose value correlates log, +	 * messages for the exchange. Use {@link #getLogPrefix()} to obtain a, +	 * consistently formatted prefix based on this attribute., +	 * @since 5.1, +	 * @see #getLogPrefix(), +	 */, +	String LOG_ID_ATTRIBUTE = ServerWebExchange.class.getName() + ".LOG_ID";, +, +, +	/**, +	 * Return a common prefix to use for log messages related to the exchange., +	 * The prefix is based on the value of the {@link #LOG_ID_ATTRIBUTE}, +	 * attribute along with some extra formatting., +	 * @return the log message prefix or an empty String if the, +	 * {@link #LOG_ID_ATTRIBUTE} is not set., +	 * @since 5.1, +	 */, +	String getLogPrefix();, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/MockServerSpecTests.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.core.StringContains.*;, +, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:A:B")));, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:Fwk-A:Fwk-B:App-A:App-B")));, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * Name of {@link #getAttributes() attribute} whose value correlates log, +	 * messages for the exchange. Use {@link #getLogPrefix()} to obtain a, +	 * consistently formatted prefix based on this attribute., +	 * @since 5.1, +	 * @see #getLogPrefix(), +	 */, +	String LOG_ID_ATTRIBUTE = ServerWebExchange.class.getName() + ".LOG_ID";, +, +, +	/**, +	 * Return a common prefix to use for log messages related to the exchange., +	 * The prefix is based on the value of the {@link #LOG_ID_ATTRIBUTE}, +	 * attribute along with some extra formatting., +	 * @return the log message prefix or an empty String if the, +	 * {@link #LOG_ID_ATTRIBUTE} is not set., +	 * @since 5.1, +	 */, +	String getLogPrefix();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchangeDecorator.java, +	public String getLogPrefix() {, +		return getDelegate().getLogPrefix();, +	}, +, +	@Override, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/MockServerSpecTests.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.core.StringContains.*;, +, +		this.serverSpec.build().get().uri("/"), +				.exchange(), +				.expectBody(String.class), +				.consumeWith(result -> assertThat(, +						result.getResponseBody(), containsString("test-attribute=:A:B")));, +		this.serverSpec.build().get().uri("/")]