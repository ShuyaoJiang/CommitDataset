[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java, + * Copyright 2002-2014 the original author or authors., +					boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +	 * Assert a field error code for a model attribute using exact String match., +	 * @since 4.1, +	 */, +	public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {, +		return new ResultMatcher() {, +			public void match(MvcResult mvcResult) throws Exception {, +				ModelAndView mav = getModelAndView(mvcResult);, +				BindingResult result = getBindingResult(mav, name);, +				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors());, +, +				boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +, +				String code = result.getFieldError(fieldName).getCode();, +				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error));, +			}, +		};, +	}, +, +	/**, +	 * Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}., +	 * @since 4.1, +	 */, +	public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,, +			final Matcher<? super String> matcher) {, +, +		return new ResultMatcher() {, +			@Override, +			@SuppressWarnings("unchecked"), +			public void match(MvcResult mvcResult) throws Exception {, +				ModelAndView mav = getModelAndView(mvcResult);, +				BindingResult result = getBindingResult(mav, name);, +				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors());, +, +				boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +, +				String code = result.getFieldError(fieldName).getCode();, +				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher);, +			}, +		};, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java, + * Copyright 2002-2014 the original author or authors., +					boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +	 * Assert a field error code for a model attribute using exact String match., +	 * @since 4.1, +	 */, +	public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {, +		return new ResultMatcher() {, +			public void match(MvcResult mvcResult) throws Exception {, +				ModelAndView mav = getModelAndView(mvcResult);, +				BindingResult result = getBindingResult(mav, name);, +				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors());, +, +				boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +, +				String code = result.getFieldError(fieldName).getCode();, +				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error));, +			}, +		};, +	}, +, +	/**, +	 * Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}., +	 * @since 4.1, +	 */, +	public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,, +			final Matcher<? super String> matcher) {, +, +		return new ResultMatcher() {, +			@Override, +			@SuppressWarnings("unchecked"), +			public void match(MvcResult mvcResult) throws Exception {, +				ModelAndView mav = getModelAndView(mvcResult);, +				BindingResult result = getBindingResult(mav, name);, +				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors());, +, +				boolean hasFieldErrors = result.hasFieldErrors(fieldName);, +				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors);, +, +				String code = result.getFieldError(fieldName).getCode();, +				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher);, +			}, +		};, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/result/ModelResultMatchersTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.hamcrest.Matchers.startsWith;, + * Unit tests for]