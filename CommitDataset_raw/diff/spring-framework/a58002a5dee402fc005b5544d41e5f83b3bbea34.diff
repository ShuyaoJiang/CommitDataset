[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +import org.springframework.lang.Nullable;, +import org.springframework.util.LinkedMultiValueMap;, +	 * Return a {@link FormInserter} that writes the given {@code MultiValueMap} as URL-encoded, +     * form data. Note that the returned inserter allows for additional entries to be added via, +     * {@link FormInserter#with(String, Object)}., +	 * @return a {@code FormInserter} that writes form data, +	// Note that the returned FormInserter is parameterized to ClientHttpRequest, not, +	public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {, +, +		return DefaultFormInserter.forFormData().with(formData);, +	 * Return a {@link FormInserter} that writes the given key-value pair as URL-encoded, +	 * form data. Note that the returned inserter allows for additional entries to be added via, +	 * {@link FormInserter#with(String, Object)}., +	 * @param key the key to add to the form, +	 * @param value the value to add to the form, +	 * @return a {@code FormInserter} that writes form data, +	 */, +	// Note that the returned FormInserter is parameterized to ClientHttpRequest, not, +	// ReactiveHttpOutputMessage like other methods, since sending form data only typically happens, +	// on the client-side, +	public static FormInserter<String> fromFormData(String key, String value) {, +		Assert.notNull(key, "'key' must not be null");, +		Assert.notNull(value, "'value' must not be null");, +, +		return DefaultFormInserter.forFormData().with(key, value);, +	}, +, +	/**, +	 * Return a {@code FormInserter} that writes the given {@code MultiValueMap}, +	 * as multipart data. Note that the returned inserter allows for additional entries to be added, +	 * via {@link FormInserter#with(String, Object)}., +	 * @return a {@code BodyInserter} that writes multipart data, +	public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData) {, +, +		return DefaultFormInserter.<T>forMultipartData().with(multipartData);, +	}, +, +	/**, +	 * Return a {@code FormInserter} that writes the key-value pair  as multipart data. Note that, +	 * the returned inserter allows for additional entries to be added via, +	 * {@link FormInserter#with(String, Object)}., +	 * @param key the key to add to the form, +	 * @param value the value to add to the form, +	 * @return a {@code FormInserter} that writes multipart data, +	 */, +	// Note that the returned BodyInserter is parameterized to ClientHttpRequest, not, +	// ReactiveHttpOutputMessage like other methods, since sending form data only typically happens, +	// on the client-side, +	public static <T> FormInserter<T> fromMultipartData(String key, T value) {, +		Assert.notNull(key, "'key' must not be null");, +		Assert.notNull(value, "'value' must not be null");, +, +		return DefaultFormInserter.<T>forMultipartData().with(key, value);, +, +	/**, +	 * Sub-interface of {@link BodyInserter} that allows for additional (multipart) form data to be, +	 * added., +	 */, +	public interface FormInserter<T> extends, +			BodyInserter<MultiValueMap<String, T>, ClientHttpRequest> {, +, +		/**, +		 * Adds the specified key-value pair to the form., +		 * @param key the key to be added, +		 * @param value the value to be added, +		 * @return this inserter, +		 */, +		FormInserter<T> with(String key, @Nullable T value);, +, +		/**, +		 * Adds the specified values to the form., +		 * @param values the values to be added, +		 * @return this inserter, +		 */, +		FormInserter<T> with(MultiValueMap<String, T> values);, +, +	}, +, +	private static class DefaultFormInserter<T> implements FormInserter<T> {, +, +		private final MultiValueMap<String, T> data = new LinkedMultiValueMap<>();, +, +		private final ResolvableType type;, +, +		private final MediaType mediaType;, +, +, +		private DefaultFormInserter(ResolvableType type, MediaType mediaType) {, +			this.type = type;, +			this.mediaType = mediaType;, +		}, +, +		public static FormInserter<String> forFormData() {, +			return new DefaultFormInserter<>(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED);, +		}, +, +		public static <T> FormInserter<T> forMultipartData() {, +			return new DefaultFormInserter<>(MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA);, +		}]