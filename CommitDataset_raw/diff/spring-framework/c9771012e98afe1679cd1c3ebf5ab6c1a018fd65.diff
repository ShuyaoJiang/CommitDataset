[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2013 the original author or authors., + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode attribute}, +, +	 * This implementation resolves the type of annotation from generic metadata and, +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2013 the original author or authors., + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode attribute}, +, +	 * This implementation resolves the type of annotation from generic metadata and, +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2013 the original author or authors., + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode attribute}, +, +	 * This implementation resolves the type of annotation from generic metadata and, +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +		processCommonDefinitionAnnotations(abd, abd.getMetadata());, +, +	static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {, +		else if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +			abd.setLazyInit(attributesFor(abd.getMetadata(), Lazy.class).getBoolean("value"));, +		}, +, +		if (metadata.isAnnotated(Primary.class.getName())) {, +			abd.setPrimary(true);, +		}, +, +			AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;, +				absBd.setRole(attributesFor(metadata, Role.class).getNumber("value").intValue());, +			}, +			if (metadata.isAnnotated(Description.class.getName())) {, +				absBd.setDescription(attributesFor(metadata, Description.class).getString("value"));, +	static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, Class<?> annoClass) {, +		return attributesFor(metadata, annoClass.getName());, +	}, +, +	static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, String annoClassName) {, +		return AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(annoClassName, false));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2013 the original author or authors., + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode attribute}, +, +	 * This implementation resolves the type of annotation from generic metadata and, +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +		processCommonDefinitionAnnotations(abd, abd.getMetadata());, +, +	static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {, +		else if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +			abd.setLazyInit(attributesFor(abd.getMetadata(), Lazy.class).getBoolean("value"));, +		}, +, +		if (metadata.isAnnotated(Primary.class.getName())) {, +			abd.setPrimary(true);, +		}, +, +			AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;, +				absBd.setRole(attributesFor(metadata, Role.class).getNumber("value").intValue());, +			}, +			if (metadata.isAnnotated(Description.class.getName())) {, +				absBd.setDescription(attributesFor(metadata, Description.class).getString("value"));, +	static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, Class<?> annoClass) {, +		return attributesFor(metadata, annoClass.getName());, +	}, +, +	static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, String annoClassName) {, +		return AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(annoClassName, false));, +	}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(annDef.getMetadata(), this.scopeAnnotationType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2013 the original author or authors., + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode attribute}, +, +	 * This implementation resolves the type of annotation from generic metadata and, +		AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +		processCommonDefinitionAnnotations(abd, abd.getMetadata());, +]