[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingStatus.java, + * FieldModel binding states., + * @see FieldModel#getBindingStatus(), +	 * An invalid submitted value is applied., +	INVALID_SUBMITTED_VALUE,, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingStatus.java, + * FieldModel binding states., + * @see FieldModel#getBindingStatus(), +	 * An invalid submitted value is applied., +	INVALID_SUBMITTED_VALUE,, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/FieldModel.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.ui.binding;, +, +import org.springframework.ui.alert.Alert;, +import org.springframework.ui.alert.Severity;, +, +/**, + * A model for a single data field containing dynamic information to display in the view., + * @author Keith Donald, + * @since 3.0, + */, +public interface FieldModel {, +, +	/**, +	 * The model value formatted for display in a single field in the UI., +	 * Is the formatted model value if {@link BindingStatus#CLEAN} or {@link BindingStatus#COMMITTED}., +	 * Is the formatted buffered value if {@link BindingStatus#DIRTY} or {@link BindingStatus#COMMIT_FAILURE}., +	 */, +	String getRenderValue();, +, +	/**, +	 * The field model value., +	 */, +	Object getValue();, +	, +	/**, +	 * The field model value type., +	 */, +	Class<?> getValueType();	, +	, +	/**, +	 * If editable., +	 * Used to determine if the user can edit the field value., +	 * A Binding that is not editable cannot have submitted values applied and cannot be committed., +	 */, +	boolean isEditable();, +	, +	/**, +	 * If enabled., +	 * Used to determine if the user can interact with the field at all., +	 * A Binding that is not enabled cannot have submitted values applied and cannot be committed., +	 */, +	boolean isEnabled();, +	, +	/**, +	 * If visible., +	 * Used to determine if the user can see the field., +	 */, +	boolean isVisible();, +, +	/**, +	 * The current field binding status., +	 * Initially {@link BindingStatus#CLEAN clean}., +	 * Is {@link BindingStatus#DIRTY} after applying a submitted value to the value buffer., +	 * Is {@link BindingStatus#COMMITTED} after successfully committing the buffered value., +	 * Is {@link BindingStatus#INVALID_SUBMITTED_VALUE} if a submitted value could not be applied., +	 * Is {@link BindingStatus#COMMIT_FAILURE} if a buffered value could not be committed., +	 */, +	BindingStatus getBindingStatus();, +, +	/**, +	 * The current field validation status., +	 * Initially {@link ValidationStatus#NOT_VALIDATED}.]