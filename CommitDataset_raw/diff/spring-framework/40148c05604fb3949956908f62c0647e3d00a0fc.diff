[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, +		return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, +		return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +		return (ByteBuffer.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, +		return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +		return (ByteBuffer.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferDecoder.java, +		return (DataBuffer.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, +		return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +		return (ByteBuffer.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferDecoder.java, +		return (DataBuffer.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, +		return (Resource.class.isAssignableFrom(elementType.toClass()) &&, +				super.canDecode(elementType, mimeType));, +		Class<?> clazz = elementType.toClass();, +		if (clazz == InputStreamResource.class) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			return new NamedBeanHolder<>(beanName, (T) getBean(beanName, requiredType.toClass(), args));, +			String candidateName = determinePrimaryCandidate(candidates, requiredType.toClass());, +				candidateName = determineHighestPriorityCandidate(candidates, requiredType.toClass());, +					beanInstance = getBean(candidateName, requiredType.toClass(), args);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (PayloadApplicationEvent.class.isAssignableFrom(eventType.toClass())) {, +		if (!ApplicationEvent.class.isAssignableFrom(declaredEventType.toClass()) &&, +			Class<?> eventClass = declaredEventType.toClass();, +			if (!ApplicationEvent.class.isAssignableFrom(eventClass) &&, +			if (eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java]