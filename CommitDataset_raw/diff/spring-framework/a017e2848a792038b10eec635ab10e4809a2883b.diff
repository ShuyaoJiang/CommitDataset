[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that resolves to a fixed list of media types., +public class FixedContentTypeResolver implements RequestedContentTypeResolver {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that resolves to a fixed list of media types., +public class FixedContentTypeResolver implements RequestedContentTypeResolver {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that checks the 'Accept' request header., +public class HeaderContentTypeResolver implements RequestedContentTypeResolver {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	// RequestedContentTypeResolver implementation, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that contains and delegates to a list of other, +	private final List<RequestedContentTypeResolver> resolvers = new ArrayList<>();, +	public CompositeContentTypeResolver(List<RequestedContentTypeResolver> resolvers) {, +	public List<RequestedContentTypeResolver> getResolvers() {, +	 * Return the first {@link RequestedContentTypeResolver} of the given type., +	public <T extends RequestedContentTypeResolver> T findResolver(Class<T> resolverType) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +		for (RequestedContentTypeResolver resolver : this.resolvers) {, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * A {@link RequestedContentTypeResolver} that resolves to a fixed list of media types.]