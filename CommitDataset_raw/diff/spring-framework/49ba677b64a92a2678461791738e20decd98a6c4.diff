[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import javax.servlet.http.Cookie;, +		protected Object resolveCookieValue(String cookieName, Class paramType, NativeWebRequest webRequest), +				throws Exception {, +, +			PortletRequest portletRequest = (PortletRequest) webRequest.getNativeRequest();, +			Cookie cookieValue = PortletUtils.getCookie(portletRequest, cookieName);, +			if (Cookie.class.isAssignableFrom(paramType)) {, +				return cookieValue;, +			}, +			else {, +				return cookieValue.getValue();, +			}, +		}, +, +		@Override, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import javax.servlet.http.Cookie;, +		protected Object resolveCookieValue(String cookieName, Class paramType, NativeWebRequest webRequest), +				throws Exception {, +, +			PortletRequest portletRequest = (PortletRequest) webRequest.getNativeRequest();, +			Cookie cookieValue = PortletUtils.getCookie(portletRequest, cookieName);, +			if (Cookie.class.isAssignableFrom(paramType)) {, +				return cookieValue;, +			}, +			else {, +				return cookieValue.getValue();, +			}, +		}, +, +		@Override, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.http.Cookie;, +, +	/**, +	 * Retrieve the first cookie with the given name. Note that multiple, +	 * cookies can have the same name but different paths or domains., +	 * @param request current servlet request, +	 * @param name cookie name, +	 * @return the first cookie with the given name, or <code>null</code> if none is found, +	 */, +	public static Cookie getCookie(PortletRequest request, String name) {, +		Assert.notNull(request, "Request must not be null");, +		Cookie cookies[] = request.getCookies();, +		if (cookies != null) {, +			for (Cookie cookie : cookies) {, +				if (name.equals(cookie.getName())) {, +					return cookie;, +				}, +			}, +		}, +		return null;, +	}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import javax.servlet.http.Cookie;, +		protected Object resolveCookieValue(String cookieName, Class paramType, NativeWebRequest webRequest), +				throws Exception {, +, +			PortletRequest portletRequest = (PortletRequest) webRequest.getNativeRequest();, +			Cookie cookieValue = PortletUtils.getCookie(portletRequest, cookieName);, +			if (Cookie.class.isAssignableFrom(paramType)) {, +				return cookieValue;, +			}, +			else {, +				return cookieValue.getValue();, +			}, +		}, +, +		@Override, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.http.Cookie;, +, +	/**, +	 * Retrieve the first cookie with the given name. Note that multiple, +	 * cookies can have the same name but different paths or domains., +	 * @param request current servlet request, +	 * @param name cookie name, +	 * @return the first cookie with the given name, or <code>null</code> if none is found, +	 */, +	public static Cookie getCookie(PortletRequest request, String name) {, +		Assert.notNull(request, "Request must not be null");, +		Cookie cookies[] = request.getCookies();, +		if (cookies != null) {, +			for (Cookie cookie : cookies) {, +				if (name.equals(cookie.getName())) {, +					return cookie;, +				}, +			}, +		}, +		return null;, +	}, +++ b/org.springframework.web.portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, +import javax.servlet.http.Cookie;, +import static org.junit.Assert.*;, +import org.junit.Test;, +import org.springframework.web.bind.annotation.CookieValue;, +import org.springframework.web.bind.annotation.RequestHeader;]