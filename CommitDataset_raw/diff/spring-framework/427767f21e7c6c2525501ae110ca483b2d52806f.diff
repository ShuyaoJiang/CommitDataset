[+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +	final Map<ListenerCacheKey, ListenerRetriever> retrieverCache =, +			return (ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType) &&, +					ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType));, +			return (ObjectUtils.nullSafeHashCode(this.eventType) * 29 + ObjectUtils.nullSafeHashCode(this.sourceType));, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +	final Map<ListenerCacheKey, ListenerRetriever> retrieverCache =, +			return (ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType) &&, +					ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType));, +			return (ObjectUtils.nullSafeHashCode(this.eventType) * 29 + ObjectUtils.nullSafeHashCode(this.sourceType));, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.springframework.context.PayloadApplicationEvent;, +	private void multicastEvent(boolean match, Class<?> listenerType, ApplicationEvent event, ResolvableType eventType) {, +		}, +		else {, +		AbstractApplicationEventMulticaster multicaster = context.getBean(AbstractApplicationEventMulticaster.class);, +		assertEquals(2, multicaster.retrieverCache.size());, +, +		context.close();, +	}, +, +	@Test, +	public void listenersInApplicationContextWithPayloadEvents() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		context.registerBeanDefinition("listener", new RootBeanDefinition(MyPayloadListener.class));, +		context.refresh();, +, +		MyPayloadListener listener = context.getBean("listener", MyPayloadListener.class);, +		context.publishEvent("event1");, +		context.publishEvent("event2");, +		context.publishEvent("event3");, +		context.publishEvent("event4");, +		assertTrue(listener.seenPayloads.contains("event1"));, +		assertTrue(listener.seenPayloads.contains("event2"));, +		assertTrue(listener.seenPayloads.contains("event3"));, +		assertTrue(listener.seenPayloads.contains("event4"));, +, +		AbstractApplicationEventMulticaster multicaster = context.getBean(AbstractApplicationEventMulticaster.class);, +		assertEquals(2, multicaster.retrieverCache.size());, +, +		listener1Def.setDependsOn("nestedChild");, +	public static class MyPayloadListener implements ApplicationListener<PayloadApplicationEvent> {, +, +		public final Set<Object> seenPayloads = new HashSet<Object>();, +, +		@Override, +		public void onApplicationEvent(PayloadApplicationEvent event) {, +			this.seenPayloads.add(event.getPayload());, +		}, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +	final Map<ListenerCacheKey, ListenerRetriever> retrieverCache =, +			return (ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType) &&, +					ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType));, +			return (ObjectUtils.nullSafeHashCode(this.eventType) * 29 + ObjectUtils.nullSafeHashCode(this.sourceType));, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.springframework.context.PayloadApplicationEvent;, +	private void multicastEvent(boolean match, Class<?> listenerType, ApplicationEvent event, ResolvableType eventType) {, +		}, +		else {, +		AbstractApplicationEventMulticaster multicaster = context.getBean(AbstractApplicationEventMulticaster.class);, +		assertEquals(2, multicaster.retrieverCache.size());, +, +		context.close();, +	}, +, +	@Test, +	public void listenersInApplicationContextWithPayloadEvents() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		context.registerBeanDefinition("listener", new RootBeanDefinition(MyPayloadListener.class));, +		context.refresh();, +, +		MyPayloadListener listener = context.getBean("listener", MyPayloadListener.class);, +		context.publishEvent("event1");, +		context.publishEvent("event2");, +		context.publishEvent("event3");, +		context.publishEvent("event4");, +		assertTrue(listener.seenPayloads.contains("event1"));, +		assertTrue(listener.seenPayloads.contains("event2"));, +		assertTrue(listener.seenPayloads.contains("event3"));, +		assertTrue(listener.seenPayloads.contains("event4"));, +, +		AbstractApplicationEventMulticaster multicaster = context.getBean(AbstractApplicationEventMulticaster.class);, +		assertEquals(2, multicaster.retrieverCache.size());, +, +		listener1Def.setDependsOn("nestedChild");, +	public static class MyPayloadListener implements ApplicationListener<PayloadApplicationEvent> {, +, +		public final Set<Object> seenPayloads = new HashSet<Object>();, +, +		@Override, +		public void onApplicationEvent(PayloadApplicationEvent event) {, +			this.seenPayloads.add(event.getPayload());, +		}, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java]