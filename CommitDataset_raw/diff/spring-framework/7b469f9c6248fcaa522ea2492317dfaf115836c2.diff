[+++ b/spring-web/src/main/java/org/springframework/web/client/reactive/DefaultWebClientBuilder.java, +import reactor.core.publisher.Flux;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.http.codec.BodyExtractor;, +import org.springframework.http.codec.BodyExtractors;, +		public <T> Mono<T> retrieveMono(ClientRequest<?> request, Class<? extends T> elementClass) {, +			Assert.notNull(request, "'request' must not be null");, +			Assert.notNull(elementClass, "'elementClass' must not be null");, +, +			return retrieve(request, BodyExtractors.toMono(elementClass)), +					.then(m -> m);, +		}, +, +		@Override, +		public <T> Flux<T> retrieveFlux(ClientRequest<?> request, Class<? extends T> elementClass) {, +			Assert.notNull(request, "'request' must not be null");, +			Assert.notNull(elementClass, "'elementClass' must not be null");, +, +			return retrieve(request, BodyExtractors.toFlux(elementClass)), +					.flatMap(flux -> flux);, +		}, +, +		private <T> Mono<T> retrieve(ClientRequest<?> request,, +				BodyExtractor<T, ? super ClientHttpResponse> extractor) {, +, +			ExchangeFilterFunction errorFilter = ExchangeFilterFunctions.clientOrServerError();, +, +			return errorFilter.filter(request, this::exchange), +					.map(clientResponse -> clientResponse.body(extractor));, +		}, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/DefaultWebClientBuilder.java, +import reactor.core.publisher.Flux;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.http.codec.BodyExtractor;, +import org.springframework.http.codec.BodyExtractors;, +		public <T> Mono<T> retrieveMono(ClientRequest<?> request, Class<? extends T> elementClass) {, +			Assert.notNull(request, "'request' must not be null");, +			Assert.notNull(elementClass, "'elementClass' must not be null");, +, +			return retrieve(request, BodyExtractors.toMono(elementClass)), +					.then(m -> m);, +		}, +, +		@Override, +		public <T> Flux<T> retrieveFlux(ClientRequest<?> request, Class<? extends T> elementClass) {, +			Assert.notNull(request, "'request' must not be null");, +			Assert.notNull(elementClass, "'elementClass' must not be null");, +, +			return retrieve(request, BodyExtractors.toFlux(elementClass)), +					.flatMap(flux -> flux);, +		}, +, +		private <T> Mono<T> retrieve(ClientRequest<?> request,, +				BodyExtractor<T, ? super ClientHttpResponse> extractor) {, +, +			ExchangeFilterFunction errorFilter = ExchangeFilterFunctions.clientOrServerError();, +, +			return errorFilter.filter(request, this::exchange), +					.map(clientResponse -> clientResponse.body(extractor));, +		}, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/ExchangeFilterFunctions.java, +import java.util.Optional;, +import java.util.function.Function;, +import java.util.function.Predicate;, +import org.springframework.http.HttpStatus;, + * operations, such as basic authentication, error handling, etc., +	/**, +	 * Return a filter that will publish a {@link WebClientException} when the, +	 * {@code ClientResponse} has a 4xx status code., +	 * @return the {@code ExchangeFilterFunction} that publishes a {@code WebClientException} when, +	 * the response has a client error, +	 */, +	public static ExchangeFilterFunction clientError() {, +		return statusError(HttpStatus::is4xxClientError);, +	}, +	 * Return a filter that will publish a {@link WebClientException} if the, +	 * {@code ClientResponse} has a 5xx status code., +	 * @return the {@code ExchangeFilterFunction} that publishes a {@code WebClientException} when, +	 * the response has a server error, +	 */, +	public static ExchangeFilterFunction serverError() {, +		return statusError(HttpStatus::is5xxServerError);, +	}, +, +	/**, +	 * Return a filter that will publish a {@link WebClientException} if the, +	 * {@code ClientResponse} has a 4xx or 5xx status code., +	 * @return the {@code ExchangeFilterFunction} that publishes a {@code WebClientException} when, +	 * the response has a client or server error, +	 */, +	public static ExchangeFilterFunction clientOrServerError() {, +		return clientError().andThen(serverError());, +	}, +, +	private static ExchangeFilterFunction statusError(Predicate<HttpStatus> predicate) {, +		Function<ClientResponse, Optional<? extends Throwable>> mapper =]