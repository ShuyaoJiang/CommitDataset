[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.List;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.TypeDescriptor;, +, +, +			Arrays.sort(ctors, new Comparator<Constructor>() {, +				public int compare(Constructor c1, Constructor c2) {, +					int c1pl = c1.getParameterTypes().length;, +					int c2pl = c2.getParameterTypes().length;, +					return (new Integer(c1pl)).compareTo(c2pl);, +				}, +			});, +, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.List;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.TypeDescriptor;, +, +, +			Arrays.sort(ctors, new Comparator<Constructor>() {, +				public int compare(Constructor c1, Constructor c2) {, +					int c1pl = c1.getParameterTypes().length;, +					int c2pl = c2.getParameterTypes().length;, +					return (new Integer(c1pl)).compareTo(c2pl);, +				}, +			});, +, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +import java.util.Arrays;, +import java.util.Comparator;, +import org.springframework.util.CollectionUtils;, + * @author Juergen Hoeller, +, +			MethodFilter filter = (this.filters != null ? this.filters.get(type) : null);, +			if (filter != null) {, +				List<Method> methodsFiltered = filter.filter(methodsForFiltering);, +				if (CollectionUtils.isEmpty(methodsFiltered)) {, +			Arrays.sort(methods, new Comparator<Method>() {, +				public int compare(Method m1, Method m2) {, +					int m1pl = m1.getParameterTypes().length;, +					int m2pl = m2.getParameterTypes().length;, +					return (new Integer(m1pl)).compareTo(m2pl);, +				}, +			});, +, +			boolean multipleOptions = false;, +]