[+++ b/src/asciidoc/data-access.adoc, +You can store images, other binary data, and large chunks of text in the database. These, +large objects are called BLOBs (Binary Large OBject) for binary data and CLOBs (Character, +Large OBject) for character data. In Spring you can handle these large objects by using, +the `JdbcTemplate` directly and also when using the higher abstractions provided by RDBMS, +Objects and the `SimpleJdbc` classes. All of these approaches use an implementation of, +the `LobHandler` interface for the actual management of the LOB (Large OBject) data. The, +`LobHandler` provides access to a `LobCreator` class, through the `getLobCreator` method,, +used for creating new LOB objects to be inserted., +** `byte[]` -- `getBlobAsBytes` and `setBlobAsBytes`, +** `InputStream` -- `getBlobAsBinaryStream` and `setBlobAsBinaryStream`, +** `String` -- `getClobAsString` and `setClobAsString`, +** `InputStream` -- `getClobAsAsciiStream` and `setClobAsAsciiStream`, +** `Reader` -- `getClobAsCharacterStream` and `setClobAsCharacterStream`, +<1> Pass in the `lobHandler` that in this example is a plain `DefaultLobHandler`., +, +[NOTE], +====, +If you invoke the `setBlobAsBinaryStream`, `setClobAsAsciiStream`, or, +`setClobAsCharacterStream` method on the `LobCreator` returned from, +`DefaultLobHandler.getLobCreator()`, you can optionally specify a negative value for the, +`contentLength` argument. If the specified content length is negative, the, +`DefaultLobHandler` will use the JDBC 4.0 variants of the set-stream methods without a, +length parameter; otherwise, it will pass the specified length on to the driver., +, +Consult the documentation for the JDBC driver in use to verify support for streaming a, +LOB without providing the content length., +====, +, +]