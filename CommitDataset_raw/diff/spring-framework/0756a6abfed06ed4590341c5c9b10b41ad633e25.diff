[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * {@code @Configuration} class using the {@code @Autowired} or the {@code @Inject}, + * annotation:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * {@code @Configuration} class using the {@code @Autowired} or the {@code @Inject}, + * annotation:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Notice that the {@code Environment} object is @{@link, + * org.springframework.beans.factory.annotation.Autowired Autowired} into the, + * configuration class and then used when populating the {@code TestBean} object. Given, + * the configuration above, a call to {@code testBean.getName()} will return "myTestBean"., + * See {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}, + * and * {@link org.springframework.core.env.MutablePropertySources MutablePropertySources}, + * Javadoc for details., + * @see Configuration, + * @see org.springframework.core.env.PropertySource, + * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources(), + * @see org.springframework.core.env.MutablePropertySources, +	 * Indicate the name of this property source. If omitted, a name, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * {@code @Configuration} class using the {@code @Autowired} or the {@code @Inject}, + * annotation:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Notice that the {@code Environment} object is @{@link, + * org.springframework.beans.factory.annotation.Autowired Autowired} into the, + * configuration class and then used when populating the {@code TestBean} object. Given, + * the configuration above, a call to {@code testBean.getName()} will return "myTestBean"., + * See {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}, + * and * {@link org.springframework.core.env.MutablePropertySources MutablePropertySources}, + * Javadoc for details., + * @see Configuration, + * @see org.springframework.core.env.PropertySource, + * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources(), + * @see org.springframework.core.env.MutablePropertySources, +	 * Indicate the name of this property source. If omitted, a name, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, + * objects, {@code ServletContext} and {@code ServletConfig} objects (for access to init, + * parameters). Explore the {@code PropertySource} type hierarchy to see provided, + * implementations., + * <p>{@code PropertySource} objects are not typically used in isolation, but rather, + * through a {@link PropertySources} object, which aggregates property sources and in, + * conjunction with a {@link PropertyResolver} implementation that can perform, + * precedence-based searches across the set of {@code PropertySources}., + * <p>{@code PropertySource} identity is determined not based on the content of, + * encapsulated properties, but rather based on the {@link #getName() name} of the, + * {@code PropertySource} alone. This is useful for manipulating {@code PropertySource}, + * objects when in collection contexts. See operations in {@link MutablePropertySources}, + * as well as the {@link #named(String)} and {@link #toString()} methods for details., + *, + * <p>Note that when working with @{@link, + * org.springframework.context.annotation.Configuration Configuration} classes that, + * the @{@link org.springframework.context.annotation.PropertySource PropertySource}, + * annotation provides a convenient and declarative way of adding property sources to the, + * enclosing {@code Environment}., + * @see org.springframework.context.annotation.PropertySource, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * {@code @Configuration} class using the {@code @Autowired} or the {@code @Inject}, + * annotation:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Notice that the {@code Environment} object is @{@link, + * org.springframework.beans.factory.annotation.Autowired Autowired} into the, + * configuration class and then used when populating the {@code TestBean} object. Given, + * the configuration above, a call to {@code testBean.getName()} will return "myTestBean"., + * See {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}, + * and * {@link org.springframework.core.env.MutablePropertySources MutablePropertySources}, + * Javadoc for details., + * @see Configuration, + * @see org.springframework.core.env.PropertySource, + * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources(), + * @see org.springframework.core.env.MutablePropertySources, +	 * Indicate the name of this property source. If omitted, a name, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, + * objects, {@code ServletContext} and {@code ServletConfig} objects (for access to init, + * parameters). Explore the {@code PropertySource} type hierarchy to see provided, + * implementations., + * <p>{@code PropertySource} objects are not typically used in isolation, but rather, + * through a {@link PropertySources} object, which aggregates property sources and in, + * conjunction with a {@link PropertyResolver} implementation that can perform, + * precedence-based searches across the set of {@code PropertySources}., + * <p>{@code PropertySource} identity is determined not based on the content of, + * encapsulated properties, but rather based on the {@link #getName() name} of the, + * {@code PropertySource} alone. This is useful for manipulating {@code PropertySource}, + * objects when in collection contexts. See operations in {@link MutablePropertySources}, + * as well as the {@link #named(String)} and {@link #toString()} methods for details., + *, + * <p>Note that when working with @{@link, + * org.springframework.context.annotation.Configuration Configuration} classes that, + * the @{@link org.springframework.context.annotation.PropertySource PropertySource}, + * annotation provides a convenient and declarative way of adding property sources to the, + * enclosing {@code Environment}., + * @see org.springframework.context.annotation.PropertySource, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * {@linkplain org.springframework.context.support.PropertySourcesPlaceholderConfigurer, +	 * @see AbstractEnvironment#customizePropertySources(MutablePropertySources), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * {@code @Configuration} class using the {@code @Autowired} or the {@code @Inject}, + * annotation:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * Notice that the {@code Environment} object is @{@link, + * org.springframework.beans.factory.annotation.Autowired Autowired} into the]