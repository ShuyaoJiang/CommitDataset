[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverResultHandler.java, +import org.springframework.core.ResolvableType;, +		Mono<Object> mono;, +		ResolvableType elementType;, +		ResolvableType returnType = result.getReturnValueType();, +, +		if (this.conversionService.canConvert(returnType.getRawClass(), Mono.class)) {, +			Optional<Object> optionalValue = result.getReturnValue();, +			if (optionalValue.isPresent()) {, +				Mono<?> convertedMono = this.conversionService.convert(optionalValue.get(), Mono.class);, +				mono = convertedMono.map(o -> o);, +				mono = Mono.empty();, +			}, +			elementType = returnType.getGeneric(0);, +			mono = Mono.justOrEmpty(result.getReturnValue());, +			elementType = returnType;, +		mono = mono.otherwiseIfEmpty(handleMissingReturnValue(exchange, result, elementType));, +, +		return mono.then(returnValue -> {, +				// Eventually for model-related return values (should not happen now), +				return Mono.error(new IllegalStateException("Unexpected return value"));, +	private Mono<Object> handleMissingReturnValue(ServerWebExchange exchange, HandlerResult result,, +			ResolvableType elementType) {, +, +		if (isStringOrViewReference(elementType.getRawClass())) {, +			String defaultViewName = getDefaultViewName(exchange, result);, +			if (defaultViewName != null) {, +				return Mono.just(defaultViewName);, +			}, +			else {, +				return Mono.error(new IllegalStateException("Handler [" + result.getHandler() + "] " +, +						"neither returned a view name nor a View object"));, +			}, +		}, +		else {, +			// Eventually for model-related return values (should not happen now), +			return Mono.error(new IllegalStateException("Unexpected return value type"));, +		}, +	}, +, +	protected String getDefaultViewName(ServerWebExchange exchange, HandlerResult result) {, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverResultHandler.java, +import org.springframework.core.ResolvableType;, +		Mono<Object> mono;, +		ResolvableType elementType;, +		ResolvableType returnType = result.getReturnValueType();, +, +		if (this.conversionService.canConvert(returnType.getRawClass(), Mono.class)) {, +			Optional<Object> optionalValue = result.getReturnValue();, +			if (optionalValue.isPresent()) {, +				Mono<?> convertedMono = this.conversionService.convert(optionalValue.get(), Mono.class);, +				mono = convertedMono.map(o -> o);, +				mono = Mono.empty();, +			}, +			elementType = returnType.getGeneric(0);, +			mono = Mono.justOrEmpty(result.getReturnValue());, +			elementType = returnType;, +		mono = mono.otherwiseIfEmpty(handleMissingReturnValue(exchange, result, elementType));, +, +		return mono.then(returnValue -> {, +				// Eventually for model-related return values (should not happen now), +				return Mono.error(new IllegalStateException("Unexpected return value"));, +	private Mono<Object> handleMissingReturnValue(ServerWebExchange exchange, HandlerResult result,, +			ResolvableType elementType) {, +, +		if (isStringOrViewReference(elementType.getRawClass())) {, +			String defaultViewName = getDefaultViewName(exchange, result);, +			if (defaultViewName != null) {, +				return Mono.just(defaultViewName);, +			}, +			else {, +				return Mono.error(new IllegalStateException("Handler [" + result.getHandler() + "] " +, +						"neither returned a view name nor a View object"));, +			}, +		}, +		else {, +			// Eventually for model-related return values (should not happen now), +			return Mono.error(new IllegalStateException("Unexpected return value type"));, +		}, +	}, +, +	protected String getDefaultViewName(ServerWebExchange exchange, HandlerResult result) {, +		return null;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolverResultHandlerTests.java, +		handle(handler, Mono.just(view), methodReturnType("handleMonoView"));, +		handle(handler, Mono.just("account"), methodReturnType("handleMonoString"));, +	public void viewNameMonoEmpty() throws Exception {, +		TestView view = new TestView("account");, +		TestViewResolver resolver = new TestViewResolver().addView(view);, +		List<ViewResolver> resolvers = Collections.singletonList(resolver);, +		HandlerResultHandler handler = new ViewResolverResultHandler(resolvers, this.conversionService) {, +			@Override, +			protected String getDefaultViewName(ServerWebExchange exchange, HandlerResult result) {, +				return "account";, +			}, +		};, +		handle(handler, Mono.empty(), methodReturnType("handleMonoString"));, +, +		new TestSubscriber<DataBuffer>().bindTo(this.response.getBody())]