[+++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, +	public void commitOnAnnotatedProtectedMethod() throws Throwable {, +	public void commitOnAnnotatedPrivateMethod() throws Throwable {, +	public void commitOnNonAnnotatedNonPublicMethodInTransactionalType() throws Throwable {, +	public void commitOnAnnotatedMethod() throws Throwable {, +	public void notTransactional() throws Throwable {, +	public void defaultCommitOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), false);, +	public void defaultRollbackOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), true);, +	public void defaultCommitOnSubclassOfAnnotatedClass() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalAnnotation().echo(ex), false);, +	public void defaultCommitOnSubclassOfClassWithTransactionalMethodAnnotated() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalMethodAnnotation().echo(ex), false);, +	public void noCommitOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(ex), ex);, +	public void noRollbackOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(rollbackProvokingException),, +				rollbackProvokingException);, +, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, +	public void commitOnAnnotatedProtectedMethod() throws Throwable {, +	public void commitOnAnnotatedPrivateMethod() throws Throwable {, +	public void commitOnNonAnnotatedNonPublicMethodInTransactionalType() throws Throwable {, +	public void commitOnAnnotatedMethod() throws Throwable {, +	public void notTransactional() throws Throwable {, +	public void defaultCommitOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), false);, +	public void defaultRollbackOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), true);, +	public void defaultCommitOnSubclassOfAnnotatedClass() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalAnnotation().echo(ex), false);, +	public void defaultCommitOnSubclassOfClassWithTransactionalMethodAnnotated() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalMethodAnnotation().echo(ex), false);, +	public void noCommitOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(ex), ex);, +	public void noRollbackOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(rollbackProvokingException),, +				rollbackProvokingException);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, +	public void commitOnAnnotatedProtectedMethod() throws Throwable {, +	public void commitOnAnnotatedPrivateMethod() throws Throwable {, +	public void commitOnNonAnnotatedNonPublicMethodInTransactionalType() throws Throwable {, +	public void commitOnAnnotatedMethod() throws Throwable {, +	public void notTransactional() throws Throwable {, +	public void defaultCommitOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), false);, +	public void defaultRollbackOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), true);, +	public void defaultCommitOnSubclassOfAnnotatedClass() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalAnnotation().echo(ex), false);, +	public void defaultCommitOnSubclassOfClassWithTransactionalMethodAnnotated() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalMethodAnnotation().echo(ex), false);, +	public void noCommitOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(ex), ex);, +	public void noRollbackOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(rollbackProvokingException),, +				rollbackProvokingException);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, + * Copyright 2002-2017 the original author or authors., +		AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(, +				ae, Transactional.class, false, false);, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, +	public void commitOnAnnotatedProtectedMethod() throws Throwable {, +	public void commitOnAnnotatedPrivateMethod() throws Throwable {, +	public void commitOnNonAnnotatedNonPublicMethodInTransactionalType() throws Throwable {, +	public void commitOnAnnotatedMethod() throws Throwable {, +	public void notTransactional() throws Throwable {, +	public void defaultCommitOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), false);, +	public void defaultRollbackOnAnnotatedClass() throws Throwable {, +			testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), true);, +	public void defaultCommitOnSubclassOfAnnotatedClass() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalAnnotation().echo(ex), false);, +	public void defaultCommitOnSubclassOfClassWithTransactionalMethodAnnotated() throws Throwable {, +			testRollback(() -> new SubclassOfClassWithTransactionalMethodAnnotation().echo(ex), false);, +	public void noCommitOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(ex), ex);, +	public void noRollbackOnImplementationOfAnnotatedInterface() throws Throwable {, +		testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(rollbackProvokingException),, +				rollbackProvokingException);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, + * Copyright 2002-2017 the original author or authors., +		AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(, +				ae, Transactional.class, false, false);, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementTests.java, +	@Test]