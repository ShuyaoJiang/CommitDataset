[+++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, + * Abstract superaspect for AspectJ cache aspects. Concrete subaspects will implement the, + * {@link #cacheMethodExecution} pointcut using a strategy such as Java 5 annotations., + * <p>Suitable for use inside or outside the Spring IoC container. Set the, + * {@link #setCacheManager cacheManager} property appropriately, allowing use of any cache, + * implementation supported by Spring., + * <p><b>NB:</b> If a method implements an interface that is itself cache annotated, the, + * relevant Spring cache definition will <i>not</i> be resolved., +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring cache, +	 * metadata for each joinpoint., +	 * Concrete subaspects must implement this pointcut, to identify cached methods., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, + * Abstract superaspect for AspectJ cache aspects. Concrete subaspects will implement the, + * {@link #cacheMethodExecution} pointcut using a strategy such as Java 5 annotations., + * <p>Suitable for use inside or outside the Spring IoC container. Set the, + * {@link #setCacheManager cacheManager} property appropriately, allowing use of any cache, + * implementation supported by Spring., + * <p><b>NB:</b> If a method implements an interface that is itself cache annotated, the, + * relevant Spring cache definition will <i>not</i> be resolved., +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring cache, +	 * metadata for each joinpoint., +	 * Concrete subaspects must implement this pointcut, to identify cached methods., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, + * Concrete AspectJ cache aspect using Spring's @{@link Cacheable} annotation., + * <p>When using this aspect, you <i>must</i> annotate the implementation class (and/or, + * methods within that class), <i>not</i> the interface (if any) that the class, + * implements. AspectJ follows Java's rule that annotations on interfaces are <i>not</i>, + * inherited., + * <p>A {@code @Cacheable} annotation on a class specifies the default caching semantics, + * for the execution of any <b>public</b> operation in the class., + * <p>A {@code @Cacheable} annotation on a method within the class overrides the default, + * caching semantics given by the class annotation (if present). Any method may be, + * annotated (regardless of visibility). Annotating non-public methods directly is the, + * only way to get caching demarcation for the execution of such operations., +	 * Matches the execution of any public method in a type with the @{@link Cacheable}, +	 * annotation, or any subtype of a type with the {@code @Cacheable} annotation., +	 * Matches the execution of any public method in a type with the @{@link CacheEvict}, +	 * annotation, or any subtype of a type with the {@code CacheEvict} annotation., +	 * Matches the execution of any method with the @{@link Cacheable} annotation., +	 * Matches the execution of any method with the @{@link CacheEvict} annotation., +	 * Definition of pointcut from super aspect - matched join points will have Spring, +	 * cache management applied., +		(executionOfAnyPublicMethodInAtCacheableType(), +				|| executionOfAnyPublicMethodInAtCacheEvictType(), +				|| executionOfCacheableMethod(), +				|| executionOfCacheEvictMethod())]