[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?, +	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it, +	 * prefers submitted tasks to perform as little work as they can within a single, +	 * task execution. For example, submitted tasks might break a repeated loop into, +	 * individual subtasks which submit a follow-up task afterwards (if feasible)., +	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients, +	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}, +	 * interface overall. However, thread pools will usually indicated a preference, +	 * for short-lived tasks, allowing for more fine-grained scheduling., +	 * @return {@code true} if this executor prefers short-lived tasks (the default),, +	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor}), +	default boolean prefersShortLivedTasks() {, +		return true;, +	}, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?, +	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it, +	 * prefers submitted tasks to perform as little work as they can within a single, +	 * task execution. For example, submitted tasks might break a repeated loop into, +	 * individual subtasks which submit a follow-up task afterwards (if feasible)., +	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients, +	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}, +	 * interface overall. However, thread pools will usually indicated a preference, +	 * for short-lived tasks, allowing for more fine-grained scheduling., +	 * @return {@code true} if this executor prefers short-lived tasks (the default),, +	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor}), +	default boolean prefersShortLivedTasks() {, +		return true;, +	}, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?, +	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it, +	 * prefers submitted tasks to perform as little work as they can within a single, +	 * task execution. For example, submitted tasks might break a repeated loop into, +	 * individual subtasks which submit a follow-up task afterwards (if feasible)., +	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients, +	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}, +	 * interface overall. However, thread pools will usually indicated a preference, +	 * for short-lived tasks, allowing for more fine-grained scheduling., +	 * @return {@code true} if this executor prefers short-lived tasks (the default),, +	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor}), +	default boolean prefersShortLivedTasks() {, +		return true;, +	}, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?, +	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it, +	 * prefers submitted tasks to perform as little work as they can within a single, +	 * task execution. For example, submitted tasks might break a repeated loop into, +	 * individual subtasks which submit a follow-up task afterwards (if feasible)., +	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients, +	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}, +	 * interface overall. However, thread pools will usually indicated a preference, +	 * for short-lived tasks, allowing for more fine-grained scheduling., +	 * @return {@code true} if this executor prefers short-lived tasks (the default),, +	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor}), +	default boolean prefersShortLivedTasks() {, +		return true;, +	}, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2018 the original author or authors., +	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?, +	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it, +	 * prefers submitted tasks to perform as little work as they can within a single, +	 * task execution. For example, submitted tasks might break a repeated loop into, +	 * individual subtasks which submit a follow-up task afterwards (if feasible)., +	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients, +	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}, +	 * interface overall. However, thread pools will usually indicated a preference, +	 * for short-lived tasks, allowing for more fine-grained scheduling., +	 * @return {@code true} if this executor prefers short-lived tasks (the default),, +	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor}), +	default boolean prefersShortLivedTasks() {, +		return true;, +	}, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java]