[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			String attrValue = brokerRelayElem.getAttribute("login");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemLogin",attrValue);, +			attrValue = brokerRelayElem.getAttribute("passcode");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemPasscode", attrValue);, +			attrValue = brokerRelayElem.getAttribute("heartbeat-send-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatSendInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("heartbeat-receive-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatReceiveInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("virtual-host");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("virtualHost", attrValue);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			String attrValue = brokerRelayElem.getAttribute("login");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemLogin",attrValue);, +			attrValue = brokerRelayElem.getAttribute("passcode");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemPasscode", attrValue);, +			attrValue = brokerRelayElem.getAttribute("heartbeat-send-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatSendInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("heartbeat-receive-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatReceiveInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("virtual-host");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("virtualHost", attrValue);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			String customTaskSchedulerName = sockJsElement.getAttribute("scheduler");, +			attrValue = sockJsElement.getAttribute("message-cache-size");, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			String attrValue = brokerRelayElem.getAttribute("login");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemLogin",attrValue);, +			attrValue = brokerRelayElem.getAttribute("passcode");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemPasscode", attrValue);, +			attrValue = brokerRelayElem.getAttribute("heartbeat-send-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatSendInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("heartbeat-receive-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatReceiveInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("virtual-host");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("virtualHost", attrValue);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			String customTaskSchedulerName = sockJsElement.getAttribute("scheduler");, +			attrValue = sockJsElement.getAttribute("message-cache-size");, +++ b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket-4.0.xsd, +        <xsd:attribute name="message-cache-size" type="xsd:long">, +        <xsd:attribute name="scheduler" type="xsd:string">, +        <xsd:attribute name="login" type="xsd:string"></xsd:attribute>, +        <xsd:attribute name="passcode" type="xsd:string"></xsd:attribute>, +        <xsd:attribute name="heartbeat-send-interval" type="xsd:long"></xsd:attribute>, +        <xsd:attribute name="heartbeat-receive-interval" type="xsd:long"></xsd:attribute>, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			String attrValue = brokerRelayElem.getAttribute("login");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemLogin",attrValue);, +			attrValue = brokerRelayElem.getAttribute("passcode");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemPasscode", attrValue);, +			attrValue = brokerRelayElem.getAttribute("heartbeat-send-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatSendInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("heartbeat-receive-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatReceiveInterval", Long.parseLong(attrValue));, +			attrValue = brokerRelayElem.getAttribute("virtual-host");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("virtualHost", attrValue);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +			String customTaskSchedulerName = sockJsElement.getAttribute("scheduler");, +			attrValue = sockJsElement.getAttribute("message-cache-size");, +++ b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket-4.0.xsd, +        <xsd:attribute name="message-cache-size" type="xsd:long">, +        <xsd:attribute name="scheduler" type="xsd:string">, +        <xsd:attribute name="login" type="xsd:string"></xsd:attribute>, +        <xsd:attribute name="passcode" type="xsd:string"></xsd:attribute>, +        <xsd:attribute name="heartbeat-send-interval" type="xsd:long"></xsd:attribute>, +        <xsd:attribute name="heartbeat-receive-interval" type="xsd:long"></xsd:attribute>, +++ b/spring-websocket/src/test/resources/org/springframework/web/socket/config/websocket-config-broker-relay.xml, +        <websocket:stomp-broker-relay prefix="/topic,/queue" relay-host="relayhost" relay-port="1234", +                login="login" passcode="pass" heartbeat-send-interval="5000" heartbeat-receive-interval="5000", +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			String attrValue = brokerRelayElem.getAttribute("login");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemLogin",attrValue);, +			attrValue = brokerRelayElem.getAttribute("passcode");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemPasscode", attrValue);, +			attrValue = brokerRelayElem.getAttribute("heartbeat-send-interval");, +			if(!attrValue.isEmpty()) {, +				mpvs.add("systemHeartbeatSendInterval", Long.parseLong(attrValue));]