[+++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2012 the original author or authors., + * @author Juergen Hoeller, +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2012 the original author or authors., + * @author Juergen Hoeller, +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +	public void testFormatFieldForValueInjectionUsingMetaAnnotations() {, +		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext();, +		ac.registerBeanDefinition("valueBean", new RootBeanDefinition(MetaValueBean.class, false));, +		ac.registerBeanDefinition("conversionService", new RootBeanDefinition(FormattingConversionServiceFactoryBean.class));, +		ac.registerBeanDefinition("ppc", new RootBeanDefinition(PropertyPlaceholderConfigurer.class));, +		ac.refresh();, +		System.setProperty("myDate", "10-31-09");, +		try {, +			MetaValueBean valueBean = ac.getBean(MetaValueBean.class);, +			assertEquals(new LocalDate(2009, 10, 31), new LocalDate(valueBean.date));, +		}, +		finally {, +			System.clearProperty("myDate");, +		}, +	}, +, +	@Test, +	public static class MetaValueBean {, +, +		@MyDateAnn, +		public Date date;, +	}, +, +, +	@Value("${myDate}"), +	@org.springframework.format.annotation.DateTimeFormat(pattern="MM-d-yy"), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyDateAnn {, +	}, +, +, +		@MyDatePattern, +, +	@org.springframework.format.annotation.DateTimeFormat(pattern="${datePattern}"), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyDatePattern {, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2012 the original author or authors., + * @author Juergen Hoeller, +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +	public void testFormatFieldForValueInjectionUsingMetaAnnotations() {, +		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext();, +		ac.registerBeanDefinition("valueBean", new RootBeanDefinition(MetaValueBean.class, false));, +		ac.registerBeanDefinition("conversionService", new RootBeanDefinition(FormattingConversionServiceFactoryBean.class));, +		ac.registerBeanDefinition("ppc", new RootBeanDefinition(PropertyPlaceholderConfigurer.class));, +		ac.refresh();, +		System.setProperty("myDate", "10-31-09");, +		try {, +			MetaValueBean valueBean = ac.getBean(MetaValueBean.class);, +			assertEquals(new LocalDate(2009, 10, 31), new LocalDate(valueBean.date));, +		}, +		finally {, +			System.clearProperty("myDate");, +		}, +	}, +, +	@Test, +	public static class MetaValueBean {, +, +		@MyDateAnn, +		public Date date;, +	}, +, +, +	@Value("${myDate}"), +	@org.springframework.format.annotation.DateTimeFormat(pattern="MM-d-yy"), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyDateAnn {, +	}, +, +, +		@MyDatePattern, +, +	@org.springframework.format.annotation.DateTimeFormat(pattern="${datePattern}"), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyDatePattern {, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * <p>See {@link #getObjectType()} for a variation of this operation that resolves primitive types, +	 * to their corresponding Object types if necessary., +	 * @return the type, or <code>null</code>]