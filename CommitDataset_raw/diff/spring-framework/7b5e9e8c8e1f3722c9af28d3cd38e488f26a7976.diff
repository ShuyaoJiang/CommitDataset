[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/model/BaseCacheOperation.java, +		for (int i = 0; i < method.getParameterTypes().length; i++) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/model/BaseCacheOperation.java, +		for (int i = 0; i < method.getParameterTypes().length; i++) {, +++ b/spring-context/src/test/java/org/springframework/cache/CacheTestUtils.java, +import static org.junit.Assert.*;, +, +, +	/**, +	 * Assert the following key is not held within the specified cache(s)., +	 */, +	public static void assertCacheMiss(Object key, Cache... caches) {, +		for (Cache cache : caches) {, +			assertNull("No entry in " + cache + " should have been found with key " + key, cache.get(key));, +		}, +	}, +, +	/**, +	 * Assert the following key has a matching value within the specified cache(s)., +	 */, +	public static void assertCacheHit(Object key, Object value, Cache... caches) {, +		for (Cache cache : caches) {, +			Cache.ValueWrapper wrapper = cache.get(key);, +			assertNotNull("An entry in " + cache + " should have been found with key " + key, wrapper);, +			assertEquals("Wrong value in " + cache + " for entry with key " + key, value, wrapper.get());, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/model/BaseCacheOperation.java, +		for (int i = 0; i < method.getParameterTypes().length; i++) {, +++ b/spring-context/src/test/java/org/springframework/cache/CacheTestUtils.java, +import static org.junit.Assert.*;, +, +, +	/**, +	 * Assert the following key is not held within the specified cache(s)., +	 */, +	public static void assertCacheMiss(Object key, Cache... caches) {, +		for (Cache cache : caches) {, +			assertNull("No entry in " + cache + " should have been found with key " + key, cache.get(key));, +		}, +	}, +, +	/**, +	 * Assert the following key has a matching value within the specified cache(s)., +	 */, +	public static void assertCacheHit(Object key, Object value, Cache... caches) {, +		for (Cache cache : caches) {, +			Cache.ValueWrapper wrapper = cache.get(key);, +			assertNotNull("An entry in " + cache + " should have been found with key " + key, wrapper);, +			assertEquals("Wrong value in " + cache + " for entry with key " + key, value, wrapper.get());, +		}, +	}, +, +++ b/spring-context/src/test/java/org/springframework/cache/config/EnableCachingIntegrationTests.java, +package org.springframework.cache.config;, +, +import static org.springframework.cache.CacheTestUtils.*;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +import org.junit.Test;, +, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.CacheTestUtils;, +import org.springframework.cache.annotation.CacheConfig;, +import org.springframework.cache.annotation.Cacheable;, +import org.springframework.cache.annotation.CachingConfigurerSupport;, +import org.springframework.cache.annotation.EnableCaching;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +, +/**, + * Tests that represent real use cases with advanced configuration, + * @author Stephane Nicoll, + */, +public class EnableCachingIntegrationTests {, +, +	@Test, +	public void fooServiceWithInterface() {, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(FooConfig.class);, +		FooService service = context.getBean(FooService.class);, +		fooGetSimple(context, service);, +	}, +, +	@Test, +	public void fooServiceWithInterfaceCglib() {, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(FooConfigCglib.class);, +		FooService service = context.getBean(FooService.class);, +		fooGetSimple(context, service);, +	}, +, +	private void fooGetSimple(ApplicationContext context, FooService service) {, +		CacheManager cacheManager = context.getBean(CacheManager.class);, +]