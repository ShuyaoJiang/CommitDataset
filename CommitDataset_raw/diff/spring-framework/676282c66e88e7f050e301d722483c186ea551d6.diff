[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +	@Test, +	public void testListenableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("listenableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +		private Collection<DeferredResult<Person>> deferredResults =, +				new CopyOnWriteArrayList<DeferredResult<Person>>();, +, +		private Collection<ListenableFutureTask<Person>> futureTasks =, +				new CopyOnWriteArrayList<ListenableFutureTask<Person>>();, +		@RequestMapping(value="/{id}", params="listenableFuture", produces="application/json"), +		@ResponseBody, +		public ListenableFuture<Person> getListenableFuture() {, +			ListenableFutureTask<Person> futureTask = new ListenableFutureTask<Person>(new Callable<Person>() {, +				@Override, +				public Person call() throws Exception {, +					return new Person("Joe");, +				}, +			});, +			this.futureTasks.add(futureTask);, +			return futureTask;, +		}, +, +			for (ListenableFutureTask<Person> futureTask : this.futureTasks) {, +				futureTask.run();, +				this.futureTasks.remove(futureTask);, +			}, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +	@Test, +	public void testListenableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("listenableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +		private Collection<DeferredResult<Person>> deferredResults =, +				new CopyOnWriteArrayList<DeferredResult<Person>>();, +, +		private Collection<ListenableFutureTask<Person>> futureTasks =, +				new CopyOnWriteArrayList<ListenableFutureTask<Person>>();, +		@RequestMapping(value="/{id}", params="listenableFuture", produces="application/json"), +		@ResponseBody, +		public ListenableFuture<Person> getListenableFuture() {, +			ListenableFutureTask<Person> futureTask = new ListenableFutureTask<Person>(new Callable<Person>() {, +				@Override, +				public Person call() throws Exception {, +					return new Person("Joe");, +				}, +			});, +			this.futureTasks.add(futureTask);, +			return futureTask;, +		}, +, +			for (ListenableFutureTask<Person> futureTask : this.futureTasks) {, +				futureTask.run();, +				this.futureTasks.remove(futureTask);, +			}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>A {@link org.springframework.util.concurrent.ListenableFuture}, + * which the application uses to produce a return value in a separate, + * thread of its own choosing, as an alternative to returning a Callable., +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +	@Test, +	public void testListenableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("listenableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +		private Collection<DeferredResult<Person>> deferredResults =]