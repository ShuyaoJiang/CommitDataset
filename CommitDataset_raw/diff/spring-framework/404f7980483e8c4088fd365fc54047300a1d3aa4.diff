[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +, +		// Validate that all properties marked as required are resolvable, +		// see ConfigurablePropertyResolver#setRequiredProperties, +		this.environment.validateRequiredProperties();, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +, +		// Validate that all properties marked as required are resolvable, +		// see ConfigurablePropertyResolver#setRequiredProperties, +		this.environment.validateRequiredProperties();, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void setRequiredProperties(String... requiredProperties) {, +		this.propertyResolver.setRequiredProperties(requiredProperties);, +	}, +, +	public void validateRequiredProperties() throws MissingRequiredPropertiesException {, +		this.propertyResolver.validateRequiredProperties();, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +, +		// Validate that all properties marked as required are resolvable, +		// see ConfigurablePropertyResolver#setRequiredProperties, +		this.environment.validateRequiredProperties();, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void setRequiredProperties(String... requiredProperties) {, +		this.propertyResolver.setRequiredProperties(requiredProperties);, +	}, +, +	public void validateRequiredProperties() throws MissingRequiredPropertiesException {, +		this.propertyResolver.validateRequiredProperties();, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<String> requiredProperties = new LinkedHashSet<String>();, +, +	public void setRequiredProperties(String... requiredProperties) {, +		for (String key : requiredProperties) {, +			this.requiredProperties.add(key);, +		}, +	}, +, +	public void validateRequiredProperties() {, +		MissingRequiredPropertiesException ex = new MissingRequiredPropertiesException();, +		for (String key : this.requiredProperties) {, +			if (this.getProperty(key) == null) {, +				ex.addMissingRequiredProperty(key);, +			}, +		}, +		if (!ex.getMissingRequiredProperties().isEmpty()) {, +			throw ex;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +, +		// Validate that all properties marked as required are resolvable, +		// see ConfigurablePropertyResolver#setRequiredProperties, +		this.environment.validateRequiredProperties();, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void setRequiredProperties(String... requiredProperties) {, +		this.propertyResolver.setRequiredProperties(requiredProperties);, +	}, +, +	public void validateRequiredProperties() throws MissingRequiredPropertiesException {, +		this.propertyResolver.validateRequiredProperties();, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<String> requiredProperties = new LinkedHashSet<String>();, +, +	public void setRequiredProperties(String... requiredProperties) {, +		for (String key : requiredProperties) {, +			this.requiredProperties.add(key);, +		}, +	}, +, +	public void validateRequiredProperties() {, +		MissingRequiredPropertiesException ex = new MissingRequiredPropertiesException();, +		for (String key : this.requiredProperties) {, +			if (this.getProperty(key) == null) {, +				ex.addMissingRequiredProperty(key);, +			}, +		}, +		if (!ex.getMissingRequiredProperties().isEmpty()) {, +			throw ex;, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurablePropertyResolver.java, +, +, +, +	/**]