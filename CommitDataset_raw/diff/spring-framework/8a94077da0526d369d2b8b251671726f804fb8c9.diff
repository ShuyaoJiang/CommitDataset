[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java, +						(target instanceof Collection && ((Collection<?>) target).isEmpty())) {, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java, +						(target instanceof Collection && ((Collection<?>) target).isEmpty())) {, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java, +						(target instanceof Collection && ((Collection<?>) target).isEmpty())) {, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, + * Copyright 2002-2017 the original author or authors., +, +	private final ReactiveAdapterRegistry registry = new ReactiveAdapterRegistry();, +		assertEquals(sequence, ((rx.Observable<?>) target).toList().toBlocking().first());, +		assertEquals(sequence, ((io.reactivex.Flowable<?>) target).toList().blockingGet());, +		assertEquals(sequence, ((io.reactivex.Observable<?>) target).toList().blockingGet());, +		CompletableFuture<Integer> future = new CompletableFuture<>();, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);, +				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java, +						(target instanceof Collection && ((Collection<?>) target).isEmpty())) {, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, + * Copyright 2002-2017 the original author or authors., +, +	private final ReactiveAdapterRegistry registry = new ReactiveAdapterRegistry();, +		assertEquals(sequence, ((rx.Observable<?>) target).toList().toBlocking().first());, +		assertEquals(sequence, ((io.reactivex.Flowable<?>) target).toList().blockingGet());, +		assertEquals(sequence, ((io.reactivex.Observable<?>) target).toList().blockingGet());, +		CompletableFuture<Integer> future = new CompletableFuture<>();, +++ b/spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java]