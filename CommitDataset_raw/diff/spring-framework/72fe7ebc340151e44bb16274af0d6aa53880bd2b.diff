[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2014 the original author or authors., +			return (this.parameterIndex == other.parameterIndex && getMember().equals(other.getMember()));, +		return (getMember().hashCode() * 31 + this.parameterIndex);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2014 the original author or authors., +			return (this.parameterIndex == other.parameterIndex && getMember().equals(other.getMember()));, +		return (getMember().hashCode() * 31 + this.parameterIndex);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageMappingInfo.java, + * Copyright 2002-2014 the original author or authors., +			return (this.destinationConditions.equals(other.destinationConditions) &&, +					this.messageTypeMessageCondition.equals(other.messageTypeMessageCondition));, +		return (this.destinationConditions.hashCode() * 31 + this.messageTypeMessageCondition.hashCode());, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2014 the original author or authors., +			return (this.parameterIndex == other.parameterIndex && getMember().equals(other.getMember()));, +		return (getMember().hashCode() * 31 + this.parameterIndex);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageMappingInfo.java, + * Copyright 2002-2014 the original author or authors., +			return (this.destinationConditions.equals(other.destinationConditions) &&, +					this.messageTypeMessageCondition.equals(other.messageTypeMessageCondition));, +		return (this.destinationConditions.hashCode() * 31 + this.messageTypeMessageCondition.hashCode());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, + * Copyright 2002-2014 the original author or authors., + * 	<li>{@code RequestCondition} (optional, custom request condition), +	public RequestMappingInfo(PatternsRequestCondition patterns, RequestMethodsRequestCondition methods,, +			ParamsRequestCondition params, HeadersRequestCondition headers, ConsumesRequestCondition consumes,, +			ProducesRequestCondition produces, RequestCondition<?> custom) {, +, +		this.patternsCondition = (patterns != null ? patterns : new PatternsRequestCondition());, +		this.methodsCondition = (methods != null ? methods : new RequestMethodsRequestCondition());, +		this.paramsCondition = (params != null ? params : new ParamsRequestCondition());, +		this.headersCondition = (headers != null ? headers : new HeadersRequestCondition());, +		this.consumesCondition = (consumes != null ? consumes : new ConsumesRequestCondition());, +		this.producesCondition = (produces != null ? produces : new ProducesRequestCondition());, +, +	 * or instance with 0 patterns, never {@code null}., +		return this.patternsCondition;, +	 * or instance with 0 request methods, never {@code null}., +		return this.methodsCondition;, +	 * or instance with 0 parameter expressions, never {@code null}., +		return this.paramsCondition;, +	 * or instance with 0 header expressions, never {@code null}., +		return this.headersCondition;, +	 * or instance with 0 consumes expressions, never {@code null}., +		return this.consumesCondition;, +	 * or instance with 0 produces expressions, never {@code null}., +		return this.producesCondition;, +	 * Returns the "custom" condition of this {@link RequestMappingInfo}; or {@code null}., +		return this.customConditionHolder.getCondition();, +, +		RequestMethodsRequestCondition methods = this.methodsCondition.getMatchingCondition(request);, +		ParamsRequestCondition params = this.paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition headers = this.headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition consumes = this.consumesCondition.getMatchingCondition(request);, +		ProducesRequestCondition produces = this.producesCondition.getMatchingCondition(request);, +		PatternsRequestCondition patterns = this.patternsCondition.getMatchingCondition(request);, +		RequestConditionHolder custom = this.customConditionHolder.getMatchingCondition(request);, +, +	 * <p>Note: It is assumed both instances have been obtained via, +		int result = this.patternsCondition.compareTo(other.getPatternsCondition(), request);, +		result = this.paramsCondition.compareTo(other.getParamsCondition(), request);, +		result = this.headersCondition.compareTo(other.getHeadersCondition(), request);, +		result = this.consumesCondition.compareTo(other.getConsumesCondition(), request);, +		result = this.producesCondition.compareTo(other.getProducesCondition(), request);, +		result = this.methodsCondition.compareTo(other.getMethodsCondition(), request);, +		result = this.customConditionHolder.compareTo(other.customConditionHolder, request);, +		return (this.patternsCondition.hashCode() * 31 +  // primary differentiation, +				this.methodsCondition.hashCode() + this.paramsCondition.hashCode() +, +				this.headersCondition.hashCode() + this.consumesCondition.hashCode() +, +				this.producesCondition.hashCode() + this.customConditionHolder.hashCode());, +		builder.append(this.patternsCondition);, +		builder.append(",methods=").append(this.methodsCondition);, +		builder.append(",params=").append(this.paramsCondition);, +		builder.append(",headers=").append(this.headersCondition);, +		builder.append(",consumes=").append(this.consumesCondition);, +		builder.append(",produces=").append(this.producesCondition);, +		builder.append(",custom=").append(this.customConditionHolder);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2014 the original author or authors., +			return (this.parameterIndex == other.parameterIndex && getMember().equals(other.getMember()));, +		return (getMember().hashCode() * 31 + this.parameterIndex);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageMappingInfo.java, + * Copyright 2002-2014 the original author or authors., +			return (this.destinationConditions.equals(other.destinationConditions) &&, +					this.messageTypeMessageCondition.equals(other.messageTypeMessageCondition));, +		return (this.destinationConditions.hashCode() * 31 + this.messageTypeMessageCondition.hashCode());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, + * Copyright 2002-2014 the original author or authors., + * 	<li>{@code RequestCondition} (optional, custom request condition), +	public RequestMappingInfo(PatternsRequestCondition patterns, RequestMethodsRequestCondition methods,, +			ParamsRequestCondition params, HeadersRequestCondition headers, ConsumesRequestCondition consumes,, +			ProducesRequestCondition produces, RequestCondition<?> custom) {, +, +		this.patternsCondition = (patterns != null ? patterns : new PatternsRequestCondition());, +		this.methodsCondition = (methods != null ? methods : new RequestMethodsRequestCondition());, +		this.paramsCondition = (params != null ? params : new ParamsRequestCondition());, +		this.headersCondition = (headers != null ? headers : new HeadersRequestCondition());, +		this.consumesCondition = (consumes != null ? consumes : new ConsumesRequestCondition());, +		this.producesCondition = (produces != null ? produces : new ProducesRequestCondition());]