[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * <em>find</em> or <em>get</em> semantics. Consult the javadocs for each, +	 * Get the fully qualified class names of all meta-annotation types, +	 * <em>present</em> on the annotation (of the specified {@code annotationType}), +	 * on the supplied {@link AnnotatedElement}., +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * @param annotationType the annotation type on which to find meta-annotations, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		final Set<String> types = new LinkedHashSet<String>();, +, +		try {, +			Annotation annotation = element.getAnnotation(annotationType);, +			if (annotation != null) {, +				searchWithGetSemantics(annotation.annotationType(), annotationType, null, new SimpleAnnotationProcessor<Object>() {, +					@Override, +					public Object process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {, +						types.add(annotation.annotationType().getName());, +						return CONTINUE;, +					}, +				}, new HashSet<AnnotatedElement>(), 1);, +			}, +		}, +		catch (Throwable ex) {, +			AnnotationUtils.rethrowAnnotationConfigurationException(ex);, +			throw new IllegalStateException("Failed to introspect annotations on " + element, ex);, +		}, +, +		return (!types.isEmpty() ? types : null);, +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * type on which to find meta-annotations, +				searchWithGetSemantics(annotation.annotationType(), null, annotationName, new SimpleAnnotationProcessor<Object>() {, +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * @param annotationType the annotation type on which to find meta-annotations, +	 * @return {@code true} if a matching meta-annotation is present, +	 * @since 4.2.3, +	 * @see #getMetaAnnotationTypes, +	 */, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, final Class<? extends Annotation> annotationType) {, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.notNull(annotationType, "annotationType must not be null");, +, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationType, null, new SimpleAnnotationProcessor<Boolean>() {, +			@Override, +			public Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {, +				boolean found = (annotation.annotationType() == annotationType);, +				return (found && metaDepth > 0 ? Boolean.TRUE : CONTINUE);, +			}, +		}));, +	}, +, +	/**, +	 * Determine if the supplied {@link AnnotatedElement} is annotated with a, +	 * <em>composed annotation</em> that is meta-annotated with an annotation, +	 * of the specified {@code annotationName}., +	 * <p>This method follows <em>get semantics</em> as described in the, +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * @param annotationName the fully qualified class name of the, +	 * meta-annotation type to find, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, null, annotationName, new SimpleAnnotationProcessor<Boolean>() {, +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * @param annotationType the annotation type on which to find meta-annotations, +	 * @return {@code true} if a matching annotation is present, +	 * @since 4.2.3, +	 */, +	public static boolean isAnnotated(AnnotatedElement element, final Class<? extends Annotation> annotationType) {, +		Assert.notNull(element, "AnnotatedElement must not be null");, +		Assert.notNull(annotationType, "annotationType must not be null");, +, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationType, null, new SimpleAnnotationProcessor<Boolean>() {, +			@Override, +			public Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {, +				boolean found = annotation.annotationType() == annotationType;, +				return (found ? Boolean.TRUE : CONTINUE);, +			}, +		}));, +	}, +, +	/**, +	 * Determine if an annotation of the specified {@code annotationName} is, +	 * <em>present</em> on the supplied {@link AnnotatedElement} or within the, +	 * annotation hierarchy <em>above</em> the specified element., +	 * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}, +	 * will return a non-null value., +	 * <p>This method follows <em>get semantics</em> as described in the, +	 * {@linkplain AnnotatedElementUtils class-level javadoc}., +	 * @param element the annotated element, +	 * @param annotationName the fully qualified class name of the annotation type to find, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, null, annotationName, new SimpleAnnotationProcessor<Boolean>() {, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +		return (attributes != null ? AnnotationUtils.synthesizeAnnotation(attributes, annotationType, element) : null);, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	public static AnnotationAttributes getMergedAnnotationAttributes(, +			AnnotatedElement element, Class<? extends Annotation> annotationType) {]