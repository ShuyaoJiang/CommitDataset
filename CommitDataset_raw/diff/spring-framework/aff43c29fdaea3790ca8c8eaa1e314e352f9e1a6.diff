[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/BindingContext.java, +import java.lang.reflect.Field;, +, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.core.MethodParameter;, +public class BindingContext implements TypeConverter {, +	private final WebDataBinder simpleValueDataBinder;, +		this.simpleValueDataBinder = new WebExchangeDataBinder(null);, +		if (initializer != null) {, +			initializer.initBinder(this.simpleValueDataBinder);, +	protected Mono<WebExchangeDataBinder> initBinder(WebExchangeDataBinder binder, ServerWebExchange exchange) {, +		return Mono.just(binder);, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType);, +	}, +, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam), +			throws TypeMismatchException {, +, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType, methodParam);, +	}, +, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType, Field field), +			throws TypeMismatchException {, +, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType, field);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/BindingContext.java, +import java.lang.reflect.Field;, +, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.core.MethodParameter;, +public class BindingContext implements TypeConverter {, +	private final WebDataBinder simpleValueDataBinder;, +		this.simpleValueDataBinder = new WebExchangeDataBinder(null);, +		if (initializer != null) {, +			initializer.initBinder(this.simpleValueDataBinder);, +	protected Mono<WebExchangeDataBinder> initBinder(WebExchangeDataBinder binder, ServerWebExchange exchange) {, +		return Mono.just(binder);, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType);, +	}, +, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam), +			throws TypeMismatchException {, +, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType, methodParam);, +	}, +, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType, Field field), +			throws TypeMismatchException {, +, +		return this.simpleValueDataBinder.convertIfNecessary(value, requiredType, field);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +			value = bindingContext.convertIfNecessary(value, parameter.getParameterType(), parameter);]