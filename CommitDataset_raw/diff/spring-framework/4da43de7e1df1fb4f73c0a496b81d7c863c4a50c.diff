[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +		return UriComponentsBuilder.fromUri(this.uri);, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +		return UriComponentsBuilder.fromUri(this.uri);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +import java.net.URI;, +, +	 * Check if the request is a same-origin one, based on {@code Origin}, and, +	 * {@code Host} headers., +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +	 *, +		URI uri = request.getURI();, +		String actualHost = uri.getHost();, +		int actualPort = getPort(uri.getScheme(), uri.getPort());, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +		return UriComponentsBuilder.fromUri(this.uri);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +import java.net.URI;, +, +	 * Check if the request is a same-origin one, based on {@code Origin}, and, +	 * {@code Host} headers., +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +	 *, +		URI uri = request.getURI();, +		String actualHost = uri.getHost();, +		int actualPort = getPort(uri.getScheme(), uri.getPort());, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +import java.net.URI;, +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +	 *, +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +, +			URI uri = request.getURI();, +			scheme = uri.getScheme();, +			host = uri.getHost();, +			port = uri.getPort();, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +		return UriComponentsBuilder.fromUri(this.uri);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +import java.net.URI;, +, +	 * Check if the request is a same-origin one, based on {@code Origin}, and, +	 * {@code Host} headers., +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +	 *, +		URI uri = request.getURI();, +		String actualHost = uri.getHost();, +		int actualPort = getPort(uri.getScheme(), uri.getPort());, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +import java.net.URI;, +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +	 *, +	 *, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores, +	 * {@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the, +	 * client-originated address. Consider using the {@code ForwardedHeaderFilter}, +	 * to extract and use, or to discard such headers., +, +			URI uri = request.getURI();, +			scheme = uri.getScheme();, +			host = uri.getHost();, +			port = uri.getPort();, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.concurrent.atomic.AtomicReference;, +, +import reactor.core.publisher.Mono;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.mock.web.test.server.MockServerWebExchange;, +import org.springframework.web.filter.reactive.ForwardedHeaderFilter;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +		ServerHttpRequest request = get("/").header(HttpHeaders.ORIGIN, "http://domain.com").build();, +		ServerHttpRequest request = get("/").build();, +		ServerHttpRequest request = options("/"), +		ServerHttpRequest request = get("/").build();]