[+++ b/org.springframework.aop/src/test/java/example/aspects/PerTargetAspect.java, +/**, + * , + */, +package example.aspects;, +, +import org.aspectj.lang.annotation.Around;, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.annotation.Before;, +import org.springframework.core.Ordered;, +, +@Aspect("pertarget(execution(* *.getSpouse()))"), +public class PerTargetAspect implements Ordered {, +, +	public int count;, +, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	@Around("execution(int *.getAge())"), +	public int returnCountAsAge() {, +		return count++;, +	}, +, +	@Before("execution(void *.set*(int))"), +	public void countSetter() {, +		++count;, +	}, +, +	public int getOrder() {, +		return this.order;, +	}, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +}, +++ b/org.springframework.aop/src/test/java/example/aspects/PerTargetAspect.java, +/**, + * , + */, +package example.aspects;, +, +import org.aspectj.lang.annotation.Around;, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.annotation.Before;, +import org.springframework.core.Ordered;, +, +@Aspect("pertarget(execution(* *.getSpouse()))"), +public class PerTargetAspect implements Ordered {, +, +	public int count;, +, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	@Around("execution(int *.getAge())"), +	public int returnCountAsAge() {, +		return count++;, +	}, +, +	@Before("execution(void *.set*(int))"), +	public void countSetter() {, +		++count;, +	}, +, +	public int getOrder() {, +		return this.order;, +	}, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +}, +++ b/org.springframework.aop/src/test/java/example/aspects/PerThisAspect.java, +/*, + * Copyright 2002-2005 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package example.aspects;, +, +import org.aspectj.lang.ProceedingJoinPoint;, +import org.aspectj.lang.annotation.Around;, +import org.aspectj.lang.annotation.Aspect;, +, +@Aspect("perthis(execution(* getAge()))"), +public class PerThisAspect {, +, +	private int invocations = 0;, +]