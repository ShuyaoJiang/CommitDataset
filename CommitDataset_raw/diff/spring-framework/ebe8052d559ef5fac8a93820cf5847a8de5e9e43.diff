[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private int fieldNestingLevel = 1;, +, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 * @param type the specific type to expose (may be an array/collection element), +	 */, +	private TypeDescriptor(Field field, int nestingLevel, Class<?> type) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +		this.fieldNestingLevel = nestingLevel;, +		this.type = type;, +	}, +, +	/**, +			MethodParameter nested = new MethodParameter(this.methodParameter);, +			nested.increaseNestingLevel();, +			return new TypeDescriptor(nested, elementType);, +			return new TypeDescriptor(this.field, this.fieldNestingLevel + 1, elementType);, +	 * A textual representation of the type descriptor (eg. Map<String,Foo>) for use in messages., +			return "null";, +				builder.append("<").append(getMapKeyTypeDescriptor());, +				builder.append(", ").append(getMapValueTypeDescriptor()).append(">");, +				builder.append("<").append(getElementTypeDescriptor()).append(">");, +			return GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.fieldNestingLevel);, +        else if (this.type != null) {, +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) this.type);, +		}, +		return null;, +		else if (this.type != null && isMap()) {, +			return GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map>) this.type);, +		}, +		return null;, +		else if (this.type != null && isMap()) {, +			return GenericCollectionTypeResolver.getMapValueType((Class<? extends Map>) this.type);, +		}, +		return null;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private int fieldNestingLevel = 1;, +, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 * @param type the specific type to expose (may be an array/collection element), +	 */, +	private TypeDescriptor(Field field, int nestingLevel, Class<?> type) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +		this.fieldNestingLevel = nestingLevel;, +		this.type = type;, +	}, +, +	/**, +			MethodParameter nested = new MethodParameter(this.methodParameter);, +			nested.increaseNestingLevel();, +			return new TypeDescriptor(nested, elementType);, +			return new TypeDescriptor(this.field, this.fieldNestingLevel + 1, elementType);, +	 * A textual representation of the type descriptor (eg. Map<String,Foo>) for use in messages., +			return "null";, +				builder.append("<").append(getMapKeyTypeDescriptor());, +				builder.append(", ").append(getMapValueTypeDescriptor()).append(">");, +				builder.append("<").append(getElementTypeDescriptor()).append(">");, +			return GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.fieldNestingLevel);, +        else if (this.type != null) {, +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) this.type);, +		}, +		return null;, +		else if (this.type != null && isMap()) {, +			return GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map>) this.type);, +		}, +		return null;, +		else if (this.type != null && isMap()) {, +			return GenericCollectionTypeResolver.getMapValueType((Class<? extends Map>) this.type);, +		}, +		return null;, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +import java.util.Collections;, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.assertTrue;, +import static org.junit.Assert.assertFalse;, +	public List<String> listOfString;, +, +	public List<List<String>> listOfListOfString = new ArrayList<List<String>>();, +, +	public List<List> listOfListOfUnknown = new ArrayList<List>();, +, +	public int[] intArray;, +, +	public List<String>[] arrayOfListOfString;, +, +	public List<Integer> listField = new ArrayList<Integer>();, +, +	public Map<String, Integer> mapField = new HashMap<String, Integer>();, +, +	public void listDescriptor() throws Exception {, +		assertEquals("java.util.List<java.lang.String>", typeDescriptor.asString());, +	public void listOfListOfStringDescriptor() throws Exception {, +		TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("listOfListOfString"));, +		assertFalse(typeDescriptor.isArray());]