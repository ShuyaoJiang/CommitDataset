[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import java.util.Arrays;, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not access current invocation - matching with limited context: " + ex);, +			}, +		try {, +, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Failed to evaluate join point for arguments " + Arrays.asList(args) +, +						" - falling back to non-match", ex);, +			}, +			return false;, +		}, +	}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import java.util.Arrays;, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not access current invocation - matching with limited context: " + ex);, +			}, +		try {, +, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Failed to evaluate join point for arguments " + Arrays.asList(args) +, +						" - falling back to non-match", ex);, +			}, +			return false;, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/aop/aspectj/BeanNamePointcutAtAspectTests.java, + * Copyright 2002-2015 the original author or authors., +public class BeanNamePointcutAtAspectTests {, +, +, +, +, +		assertEquals(2, counterAspect.count);, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import java.util.Arrays;, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not access current invocation - matching with limited context: " + ex);, +			}, +		try {, +, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Failed to evaluate join point for arguments " + Arrays.asList(args) +, +						" - falling back to non-match", ex);, +			}, +			return false;, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/aop/aspectj/BeanNamePointcutAtAspectTests.java, + * Copyright 2002-2015 the original author or authors., +public class BeanNamePointcutAtAspectTests {, +, +, +, +, +		assertEquals(2, counterAspect.count);, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/EnableAspectJAutoProxyTests.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.annotation.Before;, +import org.springframework.context.ConfigurableApplicationContext;, +	public void withJdkProxy() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithJdkProxy.class);, +	public void withCglibProxy() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithCglibProxy.class);, +	private void aspectIsApplied(ApplicationContext ctx) {, +, +	@Test, +	public void withAnnotationOnArgumentAndJdkProxy() {, +		ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(, +				ConfigWithJdkProxy.class, SampleService.class, LoggingAspect.class);, +, +		SampleService sampleService = ctx.getBean(SampleService.class);, +		sampleService.execute(new SampleDto());, +		sampleService.execute(new SampleInputBean());, +		sampleService.execute((SampleDto) null);, +		sampleService.execute((SampleInputBean) null);, +	}, +, +	@Test, +	public void withAnnotationOnArgumentAndCglibProxy() {, +		ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(, +				ConfigWithCglibProxy.class, SampleService.class, LoggingAspect.class);, +, +		SampleService sampleService = ctx.getBean(SampleService.class);, +		sampleService.execute(new SampleDto());, +		sampleService.execute(new SampleInputBean());, +		sampleService.execute((SampleDto) null);, +		sampleService.execute((SampleInputBean) null);, +	}]