[+++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +	dependencies {, +		testCompile(project(":spring-build-junit")), +	}, +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +	test.systemProperties.put("testGroups", properties.get("testGroups")), +}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +, +	dependencies {, +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	}, +, +	// Don't actually generate any artifacts, +	configurations.archives.artifacts.clear(), +}, +, +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +	dependencies {, +		testCompile(project(":spring-build-junit")), +	}, +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +	test.systemProperties.put("testGroups", properties.get("testGroups")), +}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +, +	dependencies {, +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	}, +, +	// Don't actually generate any artifacts, +	configurations.archives.artifacts.clear(), +}, +, +++ b/settings.gradle, +include "spring-build-junit", +++ b/build.gradle, +configure(subprojects - project(":spring-build-junit")) { subproject ->, +configure(allprojects - project(":spring-build-junit")) {, +	dependencies {, +		testCompile(project(":spring-build-junit")), +	}, +, +	eclipse.classpath.file.whenMerged { classpath ->, +		classpath.entries.find{it.path == "/spring-build-junit"}.exported = false, +	}, +, +	test.systemProperties.put("testGroups", properties.get("testGroups")), +}, +, +project("spring-build-junit") {, +	description = "Build-time JUnit dependencies and utilities", +, +	// NOTE: This is an internal project and is not published., +, +	dependencies {, +		compile("commons-logging:commons-logging:1.1.1"), +		compile("junit:junit:${junitVersion}"), +		compile("org.hamcrest:hamcrest-all:1.3"), +		compile("org.easymock:easymock:${easymockVersion}"), +	}, +, +	// Don't actually generate any artifacts, +	configurations.archives.artifacts.clear(), +}, +, +++ b/settings.gradle, +include "spring-build-junit", +++ b/spring-build-junit/src/main/java/org/springframework/build/junit/Assume.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]