[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java, + * Copyright 2002-2019 the original author or authors., + * It is therefore typically preferable to use a request-bound scope implementation such, + * as {@code org.springframework.web.context.request.RequestScope} in web environments,, + * implementing the full lifecycle for scoped attributes (including reliable destruction)., + * <p>For an implementation of a thread-based {@code Scope} with support for destruction, + * callbacks, refer to, + * <a href="http://www.springbyexample.org/examples/custom-thread-scope-module.html">Spring by Example</a>., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {, +		public Set<SourceClass> getAnnotations() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java, + * Copyright 2002-2019 the original author or authors., + * It is therefore typically preferable to use a request-bound scope implementation such, + * as {@code org.springframework.web.context.request.RequestScope} in web environments,, + * implementing the full lifecycle for scoped attributes (including reliable destruction)., + * <p>For an implementation of a thread-based {@code Scope} with support for destruction, + * callbacks, refer to, + * <a href="http://www.springbyexample.org/examples/custom-thread-scope-module.html">Spring by Example</a>., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2019 the original author or authors., + * Miscellaneous {@code java.lang.Class} utility methods., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2019 the original author or authors., +		public ConfigurationClass asConfigClass(ConfigurationClass importedBy) {]