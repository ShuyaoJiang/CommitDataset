[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.env.AbstractEnvironment;, +	private boolean searchSystemEnvironment =, +			!"true".equalsIgnoreCase(System.getProperty(AbstractEnvironment.IGNORE_GETENV_PROPERTY_NAME));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.env.AbstractEnvironment;, +	private boolean searchSystemEnvironment =, +			!"true".equalsIgnoreCase(System.getProperty(AbstractEnvironment.IGNORE_GETENV_PROPERTY_NAME));, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	 * System property that instructs Spring to ignore system environment variables,, +	 * i.e. to never attempt to retrieve such a variable via {@link System#getenv()}., +	 * <p>The default is "false", falling back to system environment variable checks if a, +	 * Spring environment property (e.g. a placeholder in a configuration String) isn't, +	 * resolvable otherwise. Consider switching this flag to "true" if you experience, +	 * log warnings from {@code getenv} calls coming from Spring, e.g. on WebSphere, +	 * with strict SecurityManager settings and AccessControlExceptions warnings., +	 */, +	public static final String IGNORE_GETENV_PROPERTY_NAME = "spring.getenv.ignore";, +, +, +	/**, +	 * <p>The base implementation registers no property sources., +			String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);, +			String profiles = getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if ("true".equalsIgnoreCase(System.getProperty(IGNORE_GETENV_PROPERTY_NAME))) {, +				return Collections.emptyMap();, +			}, +		}, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not obtain system property '" + IGNORE_GETENV_PROPERTY_NAME + "': " + ex);, +			}, +		}, +, +		try {, +			return (Map) System.getenv();, +			return (Map) new ReadOnlySystemAttributesMap() {, +							logger.info(format("Caught AccessControlException when accessing system " +, +									"environment variable [%s]; its value will be returned [null]. Reason: %s",, +	@SuppressWarnings("unchecked"), +			return (Map) System.getProperties();, +			return (Map) new ReadOnlySystemAttributesMap() {, +							logger.info(format("Caught AccessControlException when accessing system " +, +									"property [%s]; its value will be returned [null]. Reason: %s",]