[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +		String path = resolveUrlPath(toAbsolutePath(info.getLine(), request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +		String path = resolveUrlPath(toAbsolutePath(info.getLine(), request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +				newLink = resolveUrlPath(toAbsolutePath(link, request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +		String path = resolveUrlPath(toAbsolutePath(info.getLine(), request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +				newLink = resolveUrlPath(toAbsolutePath(link, request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +import org.springframework.util.StringUtils;, +	/**, +	 * Transform the given relative request path to an absolute path,, +	 * taking the path of the given request as a point of reference., +	 * The resulting path is also cleaned from sequences like "path/.."., +	 * @param path the relative path to transform, +	 * @param request the referer request, +	 * @return the absolute request path for the given resource path, +	 */, +	protected String toAbsolutePath(String path, HttpServletRequest request) {, +		String requestPath = this.getResourceUrlProvider().getUrlPathHelper().getRequestUri(request);, +		String absolutePath = StringUtils.applyRelativePath(requestPath, path);, +		return StringUtils.cleanPath(absolutePath);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +		String path = resolveUrlPath(toAbsolutePath(info.getLine(), request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +				newLink = resolveUrlPath(toAbsolutePath(link, request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +import org.springframework.util.StringUtils;, +	/**, +	 * Transform the given relative request path to an absolute path,, +	 * taking the path of the given request as a point of reference., +	 * The resulting path is also cleaned from sequences like "path/.."., +	 * @param path the relative path to transform, +	 * @param request the referer request, +	 * @return the absolute request path for the given resource path, +	 */, +	protected String toAbsolutePath(String path, HttpServletRequest request) {, +		String requestPath = this.getResourceUrlProvider().getUrlPathHelper().getRequestUri(request);, +		String absolutePath = StringUtils.applyRelativePath(requestPath, path);, +		return StringUtils.cleanPath(absolutePath);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheManifestTransformerTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.mock.web.test.MockHttpServletRequest;, + * Unit tests for {@link AppCacheManifestTransformer}., +		ClassPathResource allowedLocation = new ClassPathResource("test/", getClass());, +		ResourceHttpRequestHandler resourceHandler = new ResourceHttpRequestHandler();, +		ResourceUrlProvider resourceUrlProvider = new ResourceUrlProvider();, +		resourceUrlProvider.setHandlerMap(Collections.singletonMap("/static/**", resourceHandler));, +, +		VersionResourceResolver versionResolver = new VersionResourceResolver();, +		versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));, +		PathResourceResolver pathResolver = new PathResourceResolver();, +		pathResolver.setAllowedLocations(allowedLocation);, +		List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver);, +		ResourceResolverChain resolverChain = new DefaultResourceResolverChain(resolvers);, +, +		CssLinkResourceTransformer cssLinkResourceTransformer = new CssLinkResourceTransformer();, +		cssLinkResourceTransformer.setResourceUrlProvider(resourceUrlProvider);, +		List<ResourceTransformer> transformers = Arrays.asList(cssLinkResourceTransformer);, +		this.chain = new DefaultResourceTransformerChain(resolverChain, transformers);, +		this.transformer.setResourceUrlProvider(resourceUrlProvider);, +, +		resourceHandler.setResourceResolvers(resolvers);, +		resourceHandler.setResourceTransformers(transformers);, +		resourceHandler.setLocations(Collections.singletonList(allowedLocation));, +		this.chain = mock(ResourceTransformerChain.class);, +		this.request = mock(HttpServletRequest.class);, +		this.chain = mock(ResourceTransformerChain.class);, +		this.request = mock(HttpServletRequest.class);, +		this.request = new MockHttpServletRequest("GET", "/static/test.appcache");, +				Matchers.containsString("/static/foo-e36d2e05253c6c7085a91522ce43a0b4.css"));, +				Matchers.containsString("/static/bar-11e16cf79faee7ac698c805cf28248d2.css"));, +				Matchers.containsString("/static/js/bar-bd508c62235b832d960298ca6c0b7645.js"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +		String path = resolveUrlPath(toAbsolutePath(info.getLine(), request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +				newLink = resolveUrlPath(toAbsolutePath(link, request), request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +import org.springframework.util.StringUtils;, +	/**, +	 * Transform the given relative request path to an absolute path,, +	 * taking the path of the given request as a point of reference., +	 * The resulting path is also cleaned from sequences like "path/.."., +	 * @param path the relative path to transform, +	 * @param request the referer request, +	 * @return the absolute request path for the given resource path, +	 */, +	protected String toAbsolutePath(String path, HttpServletRequest request) {, +		String requestPath = this.getResourceUrlProvider().getUrlPathHelper().getRequestUri(request);, +		String absolutePath = StringUtils.applyRelativePath(requestPath, path);, +		return StringUtils.cleanPath(absolutePath);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheManifestTransformerTests.java]