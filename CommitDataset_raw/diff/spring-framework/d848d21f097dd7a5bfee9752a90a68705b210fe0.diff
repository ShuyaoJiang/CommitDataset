[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java, +		if (source.equals("")) {, +			return null;, +		} else if (source.equals("true")) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected \"\", 'true', or 'false'");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java, +		if (source.equals("")) {, +			return null;, +		} else if (source.equals("true")) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected \"\", 'true', or 'false'");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToNumberConverterFactory.java, +			if ("".equals(source)) {, +				return null;, +			}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java, +		if (source.equals("")) {, +			return null;, +		} else if (source.equals("true")) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected \"\", 'true', or 'false'");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToNumberConverterFactory.java, +			if ("".equals(source)) {, +				return null;, +			}, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +	public void testStringToCharacterEmptyString() {, +		StringToCharacterConverter c = new StringToCharacterConverter();, +		assertEquals(null, c.convert(""));, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void testStringToCharacterInvalidString() {, +		new StringToCharacterConverter().convert("invalid");, +	}, +, +	@Test, +	public void testStringToBooleanTrue() {, +	}, +, +	@Test, +	public void testStringToBooleanFalse() {, +		StringToBooleanConverter c = new StringToBooleanConverter();, +	public void testStringToBooleanEmptyString() {, +		StringToBooleanConverter c = new StringToBooleanConverter();, +		assertEquals(null, c.convert(""));, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void testStringToBooleanInvalidString() {, +		new StringToBooleanConverter().convert("invalid");, +	}, +, +	@Test, +	public void testStringToNumber() {, +		assertEquals(new BigDecimal("1.0"), c.getConverter(Number.class).convert("1.0"));, +	}, +, +	@Test, +	public void testStringToNumberEmptyString() {, +		assertEquals(null, c.getConverter(Number.class).convert(""));, +	}, +, +	@Test, +	@Test, +	public void testStringToEnumEmptyString() throws Exception {, +		Converter<String, Foo> c = new StringToEnumConverterFactory().getConverter(Foo.class);, +		assertEquals(null, c.convert(""));, +	}, +	]