[+++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.*;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +			return ZonedDateTime.parse(getHeader(name), RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		catch (DateTimeParseException ex) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, GMT);, +		return RFC_1123_DATE_TIME.format(zonedDateTime);, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.*;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +			return ZonedDateTime.parse(getHeader(name), RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		catch (DateTimeParseException ex) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, GMT);, +		return RFC_1123_DATE_TIME.format(zonedDateTime);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import static java.time.format.DateTimeFormatter.*;, +	private static final ZoneId GMT = ZoneId.of("GMT");, +	private static final String CURRENT_TIME = "Wed, 9 Apr 2014 09:57:42 GMT";, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(currentEpoch).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		long epochTime = ZonedDateTime.parse(CURRENT_TIME, RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		long epochTime = ZonedDateTime.parse(CURRENT_TIME, RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.*;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +			return ZonedDateTime.parse(getHeader(name), RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		catch (DateTimeParseException ex) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, GMT);, +		return RFC_1123_DATE_TIME.format(zonedDateTime);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import static java.time.format.DateTimeFormatter.*;, +	private static final ZoneId GMT = ZoneId.of("GMT");, +	private static final String CURRENT_TIME = "Wed, 9 Apr 2014 09:57:42 GMT";, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(currentEpoch).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		long epochTime = ZonedDateTime.parse(CURRENT_TIME, RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		long epochTime = ZonedDateTime.parse(CURRENT_TIME, RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 1 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 1 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.*;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +			return ZonedDateTime.parse(getHeader(name), RFC_1123_DATE_TIME).toInstant().toEpochMilli();, +		catch (DateTimeParseException ex) {, +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, GMT);, +		return RFC_1123_DATE_TIME.format(zonedDateTime);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import static java.time.format.DateTimeFormatter.*;, +	private static final ZoneId GMT = ZoneId.of("GMT");, +	private static final String CURRENT_TIME = "Wed, 9 Apr 2014 09:57:42 GMT";, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(currentDate.toInstant().atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(currentEpoch).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		assertEquals(RFC_1123_DATE_TIME.format(Instant.ofEpochMilli(epochTime).atZone(GMT)), servletResponse.getHeader("Last-Modified"));, +		long epochTime = ZonedDateTime.parse(CURRENT_TIME, RFC_1123_DATE_TIME).toInstant().toEpochMilli();]