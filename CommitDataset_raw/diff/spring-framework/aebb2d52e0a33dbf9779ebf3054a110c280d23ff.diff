[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("Skipping currently created advisor '" + name + "'");, +								if (logger.isTraceEnabled()) {, +									logger.trace("Skipping advisor '" + name +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("Skipping currently created advisor '" + name + "'");, +								if (logger.isTraceEnabled()) {, +									logger.trace("Skipping advisor '" + name +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Registered injected element on class [" + this.targetClass.getName() + "]: " + element);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Processing injected element of bean '" + beanName + "': " + element);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("Skipping currently created advisor '" + name + "'");, +								if (logger.isTraceEnabled()) {, +									logger.trace("Skipping advisor '" + name +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Registered injected element on class [" + this.targetClass.getName() + "]: " + element);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Processing injected element of bean '" + beanName + "': " + element);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("Skipping currently created advisor '" + name + "'");, +								if (logger.isTraceEnabled()) {, +									logger.trace("Skipping advisor '" + name +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Registered injected element on class [" + this.targetClass.getName() + "]: " + element);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Processing injected element of bean '" + beanName + "': " + element);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Registered bean definition for imported class '" + configBeanName + "'");, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +, +								"] found custom TargetSource for bean with name '" + beanName + "'");, +		if (logger.isTraceEnabled()) {, +			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("Skipping currently created advisor '" + name + "'");, +								if (logger.isTraceEnabled()) {, +									logger.trace("Skipping advisor '" + name +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Registered injected element on class [" + this.targetClass.getName() + "]: " + element);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Processing injected element of bean '" + beanName + "': " + element);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java, +				if (logger.isTraceEnabled()) {, +					logger.trace("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (logger.isTraceEnabled()) {, +			logger.trace("Registered bean definition for imported class '" + configBeanName + "'");, +++ b/spring-core/src/test/resources/log4j2-test.xml, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +					if (logger.isTraceEnabled()) {, +						logger.trace("TargetSourceCreator [" + tsc +]