[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						if (ann == null) {, +							Class<?> userClass = ClassUtils.getUserClass(beanClass);, +							if (userClass != beanClass) {, +								try {, +									Constructor<?> superCtor =, +											userClass.getDeclaredConstructor(candidate.getParameterTypes());, +									ann = findAutowiredAnnotation(superCtor);, +								}, +								catch (NoSuchMethodException ex) {, +									// Simply proceed, no equivalent superclass constructor found..., +								}, +							}, +						}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						if (ann == null) {, +							Class<?> userClass = ClassUtils.getUserClass(beanClass);, +							if (userClass != beanClass) {, +								try {, +									Constructor<?> superCtor =, +											userClass.getDeclaredConstructor(candidate.getParameterTypes());, +									ann = findAutowiredAnnotation(superCtor);, +								}, +								catch (NoSuchMethodException ex) {, +									// Simply proceed, no equivalent superclass constructor found..., +								}, +							}, +						}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java, +	public void testAutowiredSingleConstructorSupported() {, +		assertSame(ctx.getBean(AutowiredConstructorConfig.class).colour, ctx.getBean(Colour.class));, +	}, +, +	@Test, +	public void testAutowiredAnnotatedConstructorSupported() {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(, +				new ClassPathResource("annotation-config.xml", MultipleConstructorConfig.class));, +		GenericApplicationContext ctx = new GenericApplicationContext(factory);, +		ctx.registerBeanDefinition("config1", new RootBeanDefinition(MultipleConstructorConfig.class));, +		ctx.registerBeanDefinition("config2", new RootBeanDefinition(ColorConfig.class));, +		ctx.refresh();, +		assertSame(ctx.getBean(MultipleConstructorConfig.class).colour, ctx.getBean(Colour.class));, +		// @Autowired, +	static class MultipleConstructorConfig {, +, +		Colour colour;, +, +		@Autowired, +		MultipleConstructorConfig(Colour colour) {, +			this.colour = colour;, +		}, +, +		MultipleConstructorConfig(String test) {, +			this.colour = new Colour(test);, +		}, +	}, +, +, +	@Configuration]