[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +		TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementTypeDescriptor());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyTypeDescriptor();, +		TypeDescriptor valueType = typeDescriptor.getMapValueTypeDescriptor();, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +		TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementTypeDescriptor());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyTypeDescriptor();, +		TypeDescriptor valueType = typeDescriptor.getMapValueTypeDescriptor();, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	public TypeDescriptor getElementTypeDescriptor() {, +	public TypeDescriptor getMapKeyTypeDescriptor() {, +	public TypeDescriptor getMapValueTypeDescriptor() {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +		TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementTypeDescriptor());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyTypeDescriptor();, +		TypeDescriptor valueType = typeDescriptor.getMapValueTypeDescriptor();, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	public TypeDescriptor getElementTypeDescriptor() {, +	public TypeDescriptor getMapKeyTypeDescriptor() {, +	public TypeDescriptor getMapValueTypeDescriptor() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/FieldDescriptor.java, +		// TODO typeIndex is not preserved at current nestingLevel is not preserved: see SPR-8394, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +		TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor();, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementTypeDescriptor());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyTypeDescriptor();, +		TypeDescriptor valueType = typeDescriptor.getMapValueTypeDescriptor();, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +	public TypeDescriptor getElementTypeDescriptor() {, +	public TypeDescriptor getMapKeyTypeDescriptor() {, +	public TypeDescriptor getMapValueTypeDescriptor() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/FieldDescriptor.java, +		// TODO typeIndex is not preserved at current nestingLevel is not preserved: see SPR-8394, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private final TypeDescriptor elementTypeDescriptor;, +	private final TypeDescriptor mapKeyTypeDescriptor;, +	private final TypeDescriptor mapValueTypeDescriptor;, +	 * @param elementTypeDescriptor a descriptor for the collection's element type, used to convert collection elements, +	public static TypeDescriptor collection(Class<?> collectionType, TypeDescriptor elementTypeDescriptor) {, +		return new TypeDescriptor(collectionType, elementTypeDescriptor);, +	 * @param keyTypeDescriptor a descriptor for the map's key type, used to convert map keys, +	 * @param valueTypeDescriptor the map's value type, used to convert map values, +	public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) {, +		return new TypeDescriptor(mapType, keyTypeDescriptor, valueTypeDescriptor);, +	 * @throws IllegalArgumentException if the nesting level of the input {@link MethodParameter} argument is not 1., +		if (methodParameter.getNestingLevel() != 1) {, +			throw new IllegalArgumentException("methodParameter nesting level must be 1: use the nestingLevel parameter to specify the desired nestingLevel for nested type traversal");, +		}, +		return new TypeDescriptor(value.getClass(), elementTypeDescriptor, mapKeyTypeDescriptor, mapValueTypeDescriptor, annotations);, +	 * Returns true if an object of this type can be assigned to a reference of the given type., +	 * @param typeDescriptor the descriptor for the target type, +	 * @return true if this type is assignable to the type represented by the provided type descriptor., +	 * @see #getObjectType(), +	public boolean isAssignableTo(TypeDescriptor typeDescriptor) {, +		return typeDescriptor.getObjectType().isAssignableFrom(getObjectType());, +	public TypeDescriptor getElementTypeDescriptor() {, +		return this.elementTypeDescriptor;, +	 * If this type is a {@link Collection} or an Array, creates a element TypeDescriptor from the provided collection or array element., +	 * Narrows the {@link #getElementTypeDescriptor() elementType} property to the class of the provided collection or array element., +	public TypeDescriptor elementTypeDescriptor(Object element) {, +		return narrow(element, getElementTypeDescriptor());, +	public TypeDescriptor getMapKeyTypeDescriptor() {, +		return this.mapKeyTypeDescriptor;, +	 * If this type is a {@link Map}, creates a mapKey {@link TypeDescriptor} from the provided map key., +	 * Narrows the {@link #getMapKeyTypeDescriptor() mapKeyType} property to the class of the provided map key., +	public TypeDescriptor mapKeyTypeDescriptor(Object mapKey) {, +		return narrow(mapKey, getMapKeyTypeDescriptor());, +	public TypeDescriptor getMapValueTypeDescriptor() {, +		return this.mapValueTypeDescriptor;, +	 * If this type is a {@link Map}, creates a mapValue {@link TypeDescriptor} from the provided map value., +	 * Narrows the {@link #getMapValueTypeDescriptor() mapValueType} property to the class of the provided map value., +	public TypeDescriptor mapValueTypeDescriptor(Object mapValue) {, +		return narrow(mapValue, getMapValueTypeDescriptor());		, +		boolean annotatedTypeEquals = ObjectUtils.nullSafeEquals(getType(), other.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());, +			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), other.getElementTypeDescriptor());, +			return ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) && ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());, +			builder.append("<").append(wildcard(getMapKeyTypeDescriptor()));, +			builder.append(", ").append(wildcard(getMapValueTypeDescriptor())).append(">");, +			builder.append("<").append(wildcard(getElementTypeDescriptor())).append(">");, +	// deprecations in Spring 3.1, +	, +	/**, +	 * Returns the value of {@link TypeDescriptor#getType() getType()} for the {@link #getElementTypeDescriptor() elementTypeDescriptor}., +	 * @deprecated in Spring 3.1 in favor of {@link #getElementTypeDescriptor()}., +	 * @throws IllegalStateException if this type is not a java.util.Collection or Array type]