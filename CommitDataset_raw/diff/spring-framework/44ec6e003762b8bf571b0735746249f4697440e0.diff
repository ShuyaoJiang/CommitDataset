[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	/**, +	 * Validate each {@link ConfigurationClass} object., +	 * @see ConfigurationClass#validate, +	 */, +	public void validate() {, +		for (ConfigurationClass configClass : this.configurationClasses.keySet()) {, +			configClass.validate(this.problemReporter);, +		}, +	}, +, +	public Set<ConfigurationClass> getConfigurationClasses() {, +		return this.configurationClasses.keySet();, +	}, +, +, +, +, +	private SourceClass asSourceClass(ConfigurationClass configurationClass) throws IOException {, +	SourceClass asSourceClass(Class<?> classType) throws IOException {, +	private Collection<SourceClass> asSourceClasses(String[] classNames) throws IOException {, +		List<SourceClass> annotatedClasses = new ArrayList<>(classNames.length);, +	SourceClass asSourceClass(String className) throws IOException {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	/**, +	 * Validate each {@link ConfigurationClass} object., +	 * @see ConfigurationClass#validate, +	 */, +	public void validate() {, +		for (ConfigurationClass configClass : this.configurationClasses.keySet()) {, +			configClass.validate(this.problemReporter);, +		}, +	}, +, +	public Set<ConfigurationClass> getConfigurationClasses() {, +		return this.configurationClasses.keySet();, +	}, +, +, +, +, +	private SourceClass asSourceClass(ConfigurationClass configurationClass) throws IOException {, +	SourceClass asSourceClass(Class<?> classType) throws IOException {, +	private Collection<SourceClass> asSourceClasses(String[] classNames) throws IOException {, +		List<SourceClass> annotatedClasses = new ArrayList<>(classNames.length);, +	SourceClass asSourceClass(String className) throws IOException {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2017 the original author or authors., +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	/**, +	 * Validate each {@link ConfigurationClass} object., +	 * @see ConfigurationClass#validate, +	 */, +	public void validate() {, +		for (ConfigurationClass configClass : this.configurationClasses.keySet()) {, +			configClass.validate(this.problemReporter);, +		}, +	}, +, +	public Set<ConfigurationClass> getConfigurationClasses() {, +		return this.configurationClasses.keySet();, +	}, +, +, +, +, +	private SourceClass asSourceClass(ConfigurationClass configurationClass) throws IOException {, +	SourceClass asSourceClass(Class<?> classType) throws IOException {, +	private Collection<SourceClass> asSourceClasses(String[] classNames) throws IOException {, +		List<SourceClass> annotatedClasses = new ArrayList<>(classNames.length);, +	SourceClass asSourceClass(String className) throws IOException {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2017 the original author or authors., +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +		Assert.hasLength(annotationName, "'annotationName' must not be null or empty");, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2017 the original author or authors., + * @since 3.0]