[+++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +import org.springframework.web.bind.annotation.SessionAttributes;, + * Contains methods for creating and updating a model. A {@link ModelFactory} is associated with a specific controller, + * through knowledge of its @{@link ModelAttribute} methods and @{@link SessionAttributes}. , + * with handler session attributes and by invoking model attribute methods., +		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>();, +	 * <li>Retrieve "known" (i.e. have been in the model in prior requests) handler session attributes from the session , +	 * <li>Create attributes by invoking model attribute methods, +	 * <li>Check for not yet known handler session attributes in the session  , +	 * <p>As a general rule model attributes are added only once following the above order., +		checkMissingSessionAttributes(request, mavContainer, requestMethod);, +	 * Checks if any {@link ModelAttribute}-annotated handler method arguments are eligible as handler session , +	 * attributes, as defined by @{@link SessionAttributes}, and are not yet present in the model. , +	 * If so, attempts to retrieve them from the session and add them to the model., +	 * , +	 * @throws HttpSessionRequiredException raised if a handler session attribute could is missing , +	private void checkMissingSessionAttributes(NativeWebRequest request, , +											   ModelAndViewContainer mavContainer, , +											   HandlerMethod requestMethod) throws HttpSessionRequiredException {, +				String name = getNameForParameter(parameter);, +				if (!mavContainer.containsAttribute(name)) {, +					if (sessionHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {, +						Object attrValue = sessionHandler.retrieveAttribute(request, name);, +							throw new HttpSessionRequiredException("Session attribute '" + name + "' not found in session");, +						mavContainer.addAttribute(name, attrValue);, +					}, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +import org.springframework.web.bind.annotation.SessionAttributes;, + * Contains methods for creating and updating a model. A {@link ModelFactory} is associated with a specific controller, + * through knowledge of its @{@link ModelAttribute} methods and @{@link SessionAttributes}. , + * with handler session attributes and by invoking model attribute methods., +		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>();, +	 * <li>Retrieve "known" (i.e. have been in the model in prior requests) handler session attributes from the session , +	 * <li>Create attributes by invoking model attribute methods, +	 * <li>Check for not yet known handler session attributes in the session  , +	 * <p>As a general rule model attributes are added only once following the above order., +		checkMissingSessionAttributes(request, mavContainer, requestMethod);, +	 * Checks if any {@link ModelAttribute}-annotated handler method arguments are eligible as handler session , +	 * attributes, as defined by @{@link SessionAttributes}, and are not yet present in the model. , +	 * If so, attempts to retrieve them from the session and add them to the model., +	 * , +	 * @throws HttpSessionRequiredException raised if a handler session attribute could is missing , +	private void checkMissingSessionAttributes(NativeWebRequest request, , +											   ModelAndViewContainer mavContainer, , +											   HandlerMethod requestMethod) throws HttpSessionRequiredException {, +				String name = getNameForParameter(parameter);, +				if (!mavContainer.containsAttribute(name)) {, +					if (sessionHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {, +						Object attrValue = sessionHandler.retrieveAttribute(request, name);, +							throw new HttpSessionRequiredException("Session attribute '" + name + "' not found in session");, +						mavContainer.addAttribute(name, attrValue);, +					}, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ModelAttributeMethodProcessor.java, + * <p>A model attribute argument is obtained from the model or otherwise is created with a default constructor., + * Data binding and validation are applied through a {@link WebDataBinder} instance. Validation is applied , + * only when the argument is also annotated with {@code @Valid}., +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +import org.springframework.web.bind.annotation.SessionAttributes;, + * Contains methods for creating and updating a model. A {@link ModelFactory} is associated with a specific controller, + * through knowledge of its @{@link ModelAttribute} methods and @{@link SessionAttributes}. , + * with handler session attributes and by invoking model attribute methods., +		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>();, +	 * <li>Retrieve "known" (i.e. have been in the model in prior requests) handler session attributes from the session , +	 * <li>Create attributes by invoking model attribute methods, +	 * <li>Check for not yet known handler session attributes in the session  , +	 * <p>As a general rule model attributes are added only once following the above order., +		checkMissingSessionAttributes(request, mavContainer, requestMethod);, +	 * Checks if any {@link ModelAttribute}-annotated handler method arguments are eligible as handler session , +	 * attributes, as defined by @{@link SessionAttributes}, and are not yet present in the model. , +	 * If so, attempts to retrieve them from the session and add them to the model., +	 * , +	 * @throws HttpSessionRequiredException raised if a handler session attribute could is missing , +	private void checkMissingSessionAttributes(NativeWebRequest request, , +											   ModelAndViewContainer mavContainer, , +											   HandlerMethod requestMethod) throws HttpSessionRequiredException {, +				String name = getNameForParameter(parameter);, +				if (!mavContainer.containsAttribute(name)) {, +					if (sessionHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {, +						Object attrValue = sessionHandler.retrieveAttribute(request, name);, +							throw new HttpSessionRequiredException("Session attribute '" + name + "' not found in session");, +						mavContainer.addAttribute(name, attrValue);, +					}, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ModelAttributeMethodProcessor.java, + * <p>A model attribute argument is obtained from the model or otherwise is created with a default constructor., + * Data binding and validation are applied through a {@link WebDataBinder} instance. Validation is applied , + * only when the argument is also annotated with {@code @Valid}., +++ b/org.springframework.web/src/test/java/org/springframework/web/method/annotation/ModelFactoryTests.java, +import static org.junit.Assert.fail;, +import org.springframework.web.HttpSessionRequiredException;, +	private InvocableHandlerMethod handleSessionAttrMethod;, +, +		Class<?> handlerType = handler.getClass();, +		handleMethod = new InvocableHandlerMethod(handler, handlerType.getDeclaredMethod("handle"));, +		Method method = handlerType.getDeclaredMethod("handleSessionAttr", String.class);, +		handleSessionAttrMethod = new InvocableHandlerMethod(handler, method);, +		handlerSessionAttributeStore = new SessionAttributesHandler(handlerType, sessionAttributeStore);, +	public void addAttributeToModel() throws Exception {, +		ModelFactory modelFactory = createModelFactory("modelAttr", Model.class);, +		assertEquals(Boolean.TRUE, mavContainer.getAttribute("modelAttr"));, +	public void returnAttributeWithName() throws Exception {]