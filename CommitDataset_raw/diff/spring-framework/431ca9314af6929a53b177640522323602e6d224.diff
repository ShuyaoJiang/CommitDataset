[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, + * Copyright 2002-2016 the original author or authors., +	 * unnamed values only, or empty String to match any name), +				(valueHolder.getName() == null || "".equals(requiredName) ||, +	 * match argument values by name, or empty String to match any name), +			if (valueHolder.getName() != null && !"".equals(requiredName) &&, +	 * to find an unnamed argument value, or empty String to match any name), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, + * Copyright 2002-2016 the original author or authors., +	 * unnamed values only, or empty String to match any name), +				(valueHolder.getName() == null || "".equals(requiredName) ||, +	 * match argument values by name, or empty String to match any name), +			if (valueHolder.getName() != null && !"".equals(requiredName) &&, +	 * to find an unnamed argument value, or empty String to match any name), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String paramName = (paramNames != null ? paramNames[paramIndex] : "");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, + * Copyright 2002-2016 the original author or authors., +	 * unnamed values only, or empty String to match any name), +				(valueHolder.getName() == null || "".equals(requiredName) ||, +	 * match argument values by name, or empty String to match any name), +			if (valueHolder.getName() != null && !"".equals(requiredName) &&, +	 * to find an unnamed argument value, or empty String to match any name), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String paramName = (paramNames != null ? paramNames[paramIndex] : "");, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	@Test, +		bean = (AtomicInteger) xbf.getBean("constructorUnresolvableNameWithIndex");, +		assertEquals(1, bean.get());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java, + * Copyright 2002-2016 the original author or authors., +	 * unnamed values only, or empty String to match any name), +				(valueHolder.getName() == null || "".equals(requiredName) ||, +	 * match argument values by name, or empty String to match any name), +			if (valueHolder.getName() != null && !"".equals(requiredName) &&, +	 * to find an unnamed argument value, or empty String to match any name), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String paramName = (paramNames != null ? paramNames[paramIndex] : "");, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	@Test, +		bean = (AtomicInteger) xbf.getBean("constructorUnresolvableNameWithIndex");, +		assertEquals(1, bean.get());, +++ b/spring-context/src/test/resources/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="constructorUnresolvableNameWithIndex" class="java.util.concurrent.atomic.AtomicInteger" scope="prototype">, +		<constructor-arg index="0" name="initialValue" value="1"/>, +	</bean>, +]