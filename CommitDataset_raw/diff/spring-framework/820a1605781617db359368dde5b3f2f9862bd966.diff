[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConversionException.java, +	public MessageConversionException(Message<?> failedMessage, String description) {, +		super(failedMessage, description);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConversionException.java, +	public MessageConversionException(Message<?> failedMessage, String description) {, +		super(failedMessage, description);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageReceivingTemplate.java, +		return doReceive(getRequiredDefaultDestination());, +	/**, +	 * Actually receive a message from the given destination., +	 * @param destination the target destination, +	 * @return the received message, possibly {@code null} if the message could not, +	 * be received, for example due to a timeout, +	 */, +	/**, +	 * Convert from the given message to the given target class., +	 * @param message the message to convert, +	 * @param targetClass the target class to convert the payload to, +	 * @return the converted payload of the reply message (never {@code null}), +	 */, +			throw new MessageConversionException(message, "Unable to convert payload [" + message.getPayload() +, +					"] to type [" + targetClass + "] using converter [" + messageConverter + "]");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConversionException.java, +	public MessageConversionException(Message<?> failedMessage, String description) {, +		super(failedMessage, description);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageReceivingTemplate.java, +		return doReceive(getRequiredDefaultDestination());, +	/**, +	 * Actually receive a message from the given destination., +	 * @param destination the target destination, +	 * @return the received message, possibly {@code null} if the message could not, +	 * be received, for example due to a timeout, +	 */, +	/**, +	 * Convert from the given message to the given target class., +	 * @param message the message to convert, +	 * @param targetClass the target class to convert the payload to, +	 * @return the converted payload of the reply message (never {@code null}), +	 */, +			throw new MessageConversionException(message, "Unable to convert payload [" + message.getPayload() +, +					"] to type [" + targetClass + "] using converter [" + messageConverter + "]");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +	private final ChannelRegistration brokerChannelRegistration = new ChannelRegistration();, +, +, +	 * Customize the channel used to send messages from the application to the message, +	 * broker. By default, messages from the application to the message broker are sent, +	 * synchronously, which means application code sending a message will find out, +	 * if the message cannot be sent through an exception. However, this can be changed, +	 * if the broker channel is configured here with task executor properties., +	 */, +	public ChannelRegistration configureBrokerChannel() {, +		return this.brokerChannelRegistration;, +	}, +, +	protected ChannelRegistration getBrokerChannelRegistration() {, +		return this.brokerChannelRegistration;, +	}, +, +	/**, +	protected Collection<String> getApplicationDestinationPrefixes() {, +		return (this.applicationDestinationPrefixes != null ?, +				Arrays.asList(this.applicationDestinationPrefixes) : null);, +	}, +, +	protected String getUserDestinationPrefix() {, +		return this.userDestinationPrefix;, +	}, +, +	protected PathMatcher getPathMatcher() {, +		return this.pathMatcher;, +, +		if (this.simpleBrokerRegistration == null && this.brokerRelayRegistration == null) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConversionException.java, +	public MessageConversionException(Message<?> failedMessage, String description) {, +		super(failedMessage, description);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageReceivingTemplate.java, +		return doReceive(getRequiredDefaultDestination());, +	/**, +	 * Actually receive a message from the given destination., +	 * @param destination the target destination, +	 * @return the received message, possibly {@code null} if the message could not, +	 * be received, for example due to a timeout, +	 */, +	/**, +	 * Convert from the given message to the given target class., +	 * @param message the message to convert, +	 * @param targetClass the target class to convert the payload to, +	 * @return the converted payload of the reply message (never {@code null}), +	 */, +			throw new MessageConversionException(message, "Unable to convert payload [" + message.getPayload() +, +					"] to type [" + targetClass + "] using converter [" + messageConverter + "]");]