[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (!StringUtils.hasText(poolSize)) {, +			int separatorIndex = poolSize.indexOf('-');, +				range[0] = Integer.valueOf(poolSize.substring(0, separatorIndex));, +				range[1] = Integer.valueOf(poolSize.substring(separatorIndex + 1, poolSize.length()));, +							"Lower bound of pool-size range must not exceed the upper bound.", element);, +				Integer value = Integer.valueOf(poolSize);, +			parserContext.getReaderContext().error("Invalid pool-size value [" + poolSize + "]: only single " +, +					"maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported.",, +		String poolSize = element.getAttribute("pool-size");, +		return StringUtils.hasText(poolSize) && poolSize.startsWith("0"), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (!StringUtils.hasText(poolSize)) {, +			int separatorIndex = poolSize.indexOf('-');, +				range[0] = Integer.valueOf(poolSize.substring(0, separatorIndex));, +				range[1] = Integer.valueOf(poolSize.substring(separatorIndex + 1, poolSize.length()));, +							"Lower bound of pool-size range must not exceed the upper bound.", element);, +				Integer value = Integer.valueOf(poolSize);, +			parserContext.getReaderContext().error("Invalid pool-size value [" + poolSize + "]: only single " +, +					"maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported.",, +		String poolSize = element.getAttribute("pool-size");, +		return StringUtils.hasText(poolSize) && poolSize.startsWith("0"), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/SchedulerBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (!StringUtils.hasText(poolSize)) {, +			int separatorIndex = poolSize.indexOf('-');, +				range[0] = Integer.valueOf(poolSize.substring(0, separatorIndex));, +				range[1] = Integer.valueOf(poolSize.substring(separatorIndex + 1, poolSize.length()));, +							"Lower bound of pool-size range must not exceed the upper bound.", element);, +				Integer value = Integer.valueOf(poolSize);, +			parserContext.getReaderContext().error("Invalid pool-size value [" + poolSize + "]: only single " +, +					"maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported.",, +		String poolSize = element.getAttribute("pool-size");, +		return StringUtils.hasText(poolSize) && poolSize.startsWith("0"), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/SchedulerBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/resources/org/springframework/scheduling/config/spring-task-3.0.xsd, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (!StringUtils.hasText(poolSize)) {, +			int separatorIndex = poolSize.indexOf('-');, +				range[0] = Integer.valueOf(poolSize.substring(0, separatorIndex));, +				range[1] = Integer.valueOf(poolSize.substring(separatorIndex + 1, poolSize.length()));, +							"Lower bound of pool-size range must not exceed the upper bound.", element);, +				Integer value = Integer.valueOf(poolSize);, +			parserContext.getReaderContext().error("Invalid pool-size value [" + poolSize + "]: only single " +, +					"maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported.",, +		String poolSize = element.getAttribute("pool-size");, +		return StringUtils.hasText(poolSize) && poolSize.startsWith("0"), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/SchedulerBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/resources/org/springframework/scheduling/config/spring-task-3.0.xsd, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +++ b/org.springframework.context/src/test/resources/org/springframework/scheduling/config/executorContext.xml, +	<task:executor id="singleSize" pool-size="42"/>, +	<task:executor id="rangeWithBoundedQueue" pool-size="7-42" queue-capacity="11"/>, +	<task:executor id="rangeWithUnboundedQueue" pool-size="0-9" keep-alive="37"/>, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (!StringUtils.hasText(poolSize)) {, +			int separatorIndex = poolSize.indexOf('-');, +				range[0] = Integer.valueOf(poolSize.substring(0, separatorIndex));, +				range[1] = Integer.valueOf(poolSize.substring(separatorIndex + 1, poolSize.length()));, +							"Lower bound of pool-size range must not exceed the upper bound.", element);, +				Integer value = Integer.valueOf(poolSize);, +			parserContext.getReaderContext().error("Invalid pool-size value [" + poolSize + "]: only single " +, +					"maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported.",, +		String poolSize = element.getAttribute("pool-size");, +		return StringUtils.hasText(poolSize) && poolSize.startsWith("0"), +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/SchedulerBeanDefinitionParser.java, +		String poolSize = element.getAttribute("pool-size");, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/resources/org/springframework/scheduling/config/spring-task-3.0.xsd, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +			<xsd:attribute name="pool-size" type="xsd:string" use="optional">, +++ b/org.springframework.context/src/test/resources/org/springframework/scheduling/config/executorContext.xml, +	<task:executor id="singleSize" pool-size="42"/>, +	<task:executor id="rangeWithBoundedQueue" pool-size="7-42" queue-capacity="11"/>, +	<task:executor id="rangeWithUnboundedQueue" pool-size="0-9" keep-alive="37"/>, +++ b/org.springframework.context/src/test/resources/org/springframework/scheduling/config/schedulerContext.xml, +	<task:scheduler id="customScheduler" pool-size="42"/>]