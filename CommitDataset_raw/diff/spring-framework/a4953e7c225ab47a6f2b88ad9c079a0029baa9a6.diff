[+++ b/spring-framework-reference/src/testing.xml, +                <classname>GenericXmlContextLoader</classname> depending, +                either on the configuration declared for the test class or on, +                the presence of default locations or configuration, +                classes.</para>, +        application context resource <literal>locations</literal> or, +        configuration <varname>classes</varname>, the configured, +        <interfacename>ContextLoader</interfacename> determines how to load a, +        context from a default location or default configuration, +        classes.</para>, +, +        <section id="testcontext-ctx-management-xml">, +          <title>XML-based configuration</title>, +, +          <para>For example, <classname>GenericXmlContextLoader</classname>, +          generates a default location based on the name of the test class. If, +          your class is named <literal>com.example.MyTest</literal>,, +          <classname>GenericXmlContextLoader</classname> loads your, +          application context from, +          (assuming an XML-capable, +          <interfacename>ContextLoader</interfacename> has been configured,, +          which is the default). A plain path, for example, +          location, for example <literal>"/org/example/config.xml"</literal>., +          A path which represents a URL (i.e., a path prefixed with, +          is</emphasis>. Alternatively, you can implement and configure your, +          own custom <interfacename>ContextLoader</interfacename>.</para>, +<lineannotation>// ApplicationContext will be loaded from "/applicationContext.xml" and, +// "/applicationContext-test.xml" in the root of the classpath</lineannotation>, +<emphasis role="bold">@ContextConfiguration(locations={"/applicationContext.xml", "/applicationContext-test.xml"})</emphasis>, +          <para><interfacename>@ContextConfiguration</interfacename> supports, +          an alias for the <literal>locations</literal> attribute through the, +          standard <literal>value</literal> attribute. Thus, if you do not, +          need to configure a custom, +          <interfacename>ContextLoader</interfacename>, you can omit the, +          declaration of the <literal>locations</literal> attribute name and, +          declare the resource locations by using the shorthand format, +          demonstrated in the following example.</para>, +, +          <programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class), +<emphasis role="bold">@ContextConfiguration({"/applicationContext.xml", "/applicationContext-test.xml"})</emphasis>, +public class MyTest {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +        </section>, +, +        <section id="testcontext-ctx-management-inheritance">, +          <title>Configuration inheritance</title>, +          supports a boolean <literal>inheritLocations</literal> attribute, +          that denotes whether resource locations from superclasses should be, +          <literal>true</literal>, which means that an annotated class, +          inherits the resource locations defined by an annotated superclass., +          <emphasis>extending</emphasis> the list of resource locations. In, +          the following example, the, +          <classname>ExtendedTest</classname> is loaded from, +          "/base-context.xml" <emphasis role="bold">and</emphasis>, +          "/extended-context.xml", in that order. Beans defined in, +          "/extended-context.xml" may therefore override those defined in, +          "/base-context.xml".</para>, +          class shadow and effectively replace any resource locations defined, +          by a superclass.</para>, +        </section>, +, +        <section id="testcontext-ctx-management-caching">, +          <title>Context caching</title>, +          test. Thus the setup cost is incurred only once (per test suite),, +          and subsequent test execution is much faster. In the unlikely case, +          that a test corrupts the application context and requires reloading, +          — for example, by modifying a bean definition or the state of an, +          application object — you can annotate your test class or test method, +          with <interfacename>@DirtiesContext</interfacename> (assuming, +          configured, which is the default). This instructs Spring to reload, +          the configuration and rebuild the application context before, +          executing the next test.</para>, +        </section>]