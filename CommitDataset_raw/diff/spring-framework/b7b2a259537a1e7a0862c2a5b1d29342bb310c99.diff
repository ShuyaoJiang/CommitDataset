[+++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +					if (this.preFiltered || !allListeners.contains(listener)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +					if (this.preFiltered || !allListeners.contains(listener)) {, +++ b/org.springframework.context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, + * Copyright 2002-2010 the original author or authors., +, +		listener1.seenEvents.clear();, +		context.publishEvent(event1);, +		context.publishEvent(event2);, +		context.publishEvent(event3);, +		context.publishEvent(event4);, +		assertTrue(listener1.seenEvents.contains(event1));, +		assertTrue(listener1.seenEvents.contains(event2));, +		assertTrue(listener1.seenEvents.contains(event3));, +		assertTrue(listener1.seenEvents.contains(event4));, +	}, +, +	@Test, +	public void nonSingletonListenerInApplicationContext() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		RootBeanDefinition listener = new RootBeanDefinition(MyNonSingletonListener.class);, +		listener.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		context.registerBeanDefinition("listener", listener);, +		context.refresh();, +, +		MyEvent event1 = new MyEvent(context);, +		context.publishEvent(event1);, +		MyOtherEvent event2 = new MyOtherEvent(context);, +		context.publishEvent(event2);, +		MyEvent event3 = new MyEvent(context);, +		context.publishEvent(event3);, +		MyOtherEvent event4 = new MyOtherEvent(context);, +		context.publishEvent(event4);, +		assertTrue(MyNonSingletonListener.seenEvents.contains(event1));, +		assertTrue(MyNonSingletonListener.seenEvents.contains(event2));, +		assertTrue(MyNonSingletonListener.seenEvents.contains(event3));, +		assertTrue(MyNonSingletonListener.seenEvents.contains(event4));, +		MyNonSingletonListener.seenEvents.clear();, +, +	public static class MyNonSingletonListener implements ApplicationListener {, +, +		public static final Set<ApplicationEvent> seenEvents = new HashSet<ApplicationEvent>();, +, +		public void onApplicationEvent(ApplicationEvent event) {, +			seenEvents.add(event);, +		}, +	}, +]