[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +, +, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +, +, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +	private void initLookupPath(ServerWebExchange exchange) {, +				new HttpRequestPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +, +, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +	private void initLookupPath(ServerWebExchange exchange) {, +				new HttpRequestPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseGet(() -> {, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +, +, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +	private void initLookupPath(ServerWebExchange exchange) {, +				new HttpRequestPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseGet(() -> {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		LookupPath lookupPath = exchange, +				.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseGet(() -> getPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +, +, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +		initLookupPath(exchange);, +	private void initLookupPath(ServerWebExchange exchange) {, +				new HttpRequestPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseGet(() -> {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		LookupPath lookupPath = exchange, +				.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseGet(() -> getPathHelper().getLookupPathForRequest(exchange));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/PatternsRequestCondition.java, +import org.springframework.web.server.support.LookupPath;, +		LookupPath lookupPath = getLookupPath(exchange);, +	private LookupPath getLookupPath(ServerWebExchange exchange) {, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +	}, +, +		LookupPath lookupPath = getLookupPath(exchange);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE), +				.map(LookupPath::getPath), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +]