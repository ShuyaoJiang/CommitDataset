[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +import org.joda.time.LocalDate;, +import org.joda.time.LocalDateTime;, +import org.joda.time.LocalTime;, +		} else if (ReadablePartial.class.isAssignableFrom(propertyType)) {, +		propertyTypes.add(LocalDate.class);, +		propertyTypes.add(LocalTime.class);, +		propertyTypes.add(LocalDateTime.class);, +		propertyTypes.add(DateTime.class);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +import org.joda.time.LocalDate;, +import org.joda.time.LocalDateTime;, +import org.joda.time.LocalTime;, +		} else if (ReadablePartial.class.isAssignableFrom(propertyType)) {, +		propertyTypes.add(LocalDate.class);, +		propertyTypes.add(LocalTime.class);, +		propertyTypes.add(LocalDateTime.class);, +		propertyTypes.add(DateTime.class);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionService.java, +					Printer<?> printer = annotationFormatterFactory.getPrinter(sourceType.getAnnotation(annotationType), sourceType.getType());, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +import org.joda.time.LocalDate;, +import org.joda.time.LocalDateTime;, +import org.joda.time.LocalTime;, +		} else if (ReadablePartial.class.isAssignableFrom(propertyType)) {, +		propertyTypes.add(LocalDate.class);, +		propertyTypes.add(LocalTime.class);, +		propertyTypes.add(LocalDateTime.class);, +		propertyTypes.add(DateTime.class);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionService.java, +					Printer<?> printer = annotationFormatterFactory.getPrinter(sourceType.getAnnotation(annotationType), sourceType.getType());, +++ b/org.springframework.context/src/test/java/org/springframework/ui/format/jodatime/JodaTimeFormattingTests.java]