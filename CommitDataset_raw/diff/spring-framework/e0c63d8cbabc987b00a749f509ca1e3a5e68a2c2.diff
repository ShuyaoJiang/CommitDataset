[+++ b/spring-framework-reference/src/expressions.xml, +    said, SpEL is based on a technology agnostic API allowing other, +    chapter use SpEL as if it were an independent expression language. This, +    Reference</link>.</para>, +    string expression 'Hello World'.</para>, +    and its sub packages and <package>spel.support</package>.</para>, +    '<literal>exp.getValue</literal>' respectively.</para>, +    accessing properties, and calling constructors.</para>, +    the string literal.</para>, +    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +    'Bytes' can be called as shown below.</para>, +    <para>Public fields may also be accessed.</para>, +    literal.</para>, +    value cannot be cast to the type <literal>T</literal> or converted using, +    <para>The more common usage of SpEL is to provide an expression string that, +    we retrieve the <literal>name</literal> property from an instance of the, +//  The constructor arguments are name, birthday, and nationality., +    object the "name" property will be evaluated against. You can reuse the, +    <para>, +	<note>, +    </note>, +	As a final introductory example, the use of a boolean operator is, +    shown using the Inventor object in the previous example.</para>, +      <package>java.lang.reflect</package>'s <classname>Method</classname>,, +      the constructor. You can also specify variables and functions that, +        <programlisting language="java">class Simple {, +      example.</para>, +      variable.</para>, +      below.</para>, +      numeric values (int, real, and hex), boolean and null. Strings are, +      Pupin's city of birth the following expressions are used.</para>, +      map are strings, we can specify string literals.</para>, +      <programlisting language="java">// Officer's Dictionary, +boolean trueValue = parser.parseExpression("'black' &lt; 'block'").getValue(Boolean.class);</programlisting>, +        In addition to standard relational operators SpEL supports the, +        Their use is demonstrated below.</para>, +        precedence is enforced. These operators are demonstrated below.</para>, +      <literal>getValue</literal>.</para>, +      method.</para>, +      be used within an expression string.</para>, +      conditional logic inside the expression. A minimal example is:</para>, +      value 'falseExp'. A more realistic example is shown below.</para>, +      shorter syntax for the ternary operator.</para>, +      language. With the ternary operator syntax you usually have to repeat a, +      variable twice, for example:</para>, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +      <para>Here is a more complex example.</para>, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();, +      <para>Selection is a powerful expression language feature that allows you, +      more evaluation blocks. Each evaluation block is delimited with prefix, +      second argument to the method <literal>parseExpression()</literal> is of, +      <classname>TemplatedParserContext</classname> is shown below.</para>, +    <programlisting language="java">package org.spring.samples.spel.inventor;]