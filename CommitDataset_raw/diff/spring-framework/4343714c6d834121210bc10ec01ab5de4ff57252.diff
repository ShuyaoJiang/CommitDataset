[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +			MediaType.sortBySpecificity(acceptedMediaTypes);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +			MediaType.sortBySpecificity(acceptedMediaTypes);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Copyright 2002-2010 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	private static final Log logger = LogFactory.getLog(ContentNegotiatingViewResolver.class);, +, +				return Collections.singletonList(mediaType);, +					return Collections.singletonList(mediaType);, +				MediaType.sortBySpecificity(mediaTypes);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Requested media types is " + defaultContentType + " (based on defaultContentType property)");, +			}, +		MediaType bestRequestedMediaType = null;, +		View bestView = null;, +			for (View candidateView : candidateViews) {, +				if (StringUtils.hasText(candidateView.getContentType())) {, +					MediaType candidateContentType = MediaType.parseMediaType(candidateView.getContentType());, +					if (requestedMediaType.includes(candidateContentType)) {, +						bestRequestedMediaType = requestedMediaType;, +						bestView = candidateView;, +			if (bestView != null) {, +				break;, +		if (bestView != null) {, +				logger.debug("Returning [" + bestView + "] based on requested media type '" +, +						bestRequestedMediaType + "'");, +			return bestView;, +			if (useNotAcceptableStatusCode) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("No acceptable view found; returning 406 (Not Acceptable) status code");, +				}, +				return NOT_ACCEPTABLE_VIEW;, +			}, +			else {, +				if (logger.isDebugEnabled()) {, +					logger.debug("No acceptable view found; returning null");, +				}, +				return null;, +			}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Loading Java Activation Framework FileTypeMap from " + mappingLocation);, +				}, +			if (logger.isTraceEnabled()) {, +				logger.trace("Loading default Java Activation Framework FileTypeMap");, +			}, +	private static final View NOT_ACCEPTABLE_VIEW = new View() {, +	};, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +			MediaType.sortBySpecificity(acceptedMediaTypes);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Copyright 2002-2010 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	private static final Log logger = LogFactory.getLog(ContentNegotiatingViewResolver.class);, +, +				return Collections.singletonList(mediaType);, +					return Collections.singletonList(mediaType);, +				MediaType.sortBySpecificity(mediaTypes);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Requested media types is " + defaultContentType + " (based on defaultContentType property)");, +			}, +		MediaType bestRequestedMediaType = null;, +		View bestView = null;, +			for (View candidateView : candidateViews) {, +				if (StringUtils.hasText(candidateView.getContentType())) {, +					MediaType candidateContentType = MediaType.parseMediaType(candidateView.getContentType());, +					if (requestedMediaType.includes(candidateContentType)) {, +						bestRequestedMediaType = requestedMediaType;, +						bestView = candidateView;, +			if (bestView != null) {, +				break;, +		if (bestView != null) {, +				logger.debug("Returning [" + bestView + "] based on requested media type '" +, +						bestRequestedMediaType + "'");, +			return bestView;, +			if (useNotAcceptableStatusCode) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("No acceptable view found; returning 406 (Not Acceptable) status code");, +				}, +				return NOT_ACCEPTABLE_VIEW;, +			}, +			else {, +				if (logger.isDebugEnabled()) {, +					logger.debug("No acceptable view found; returning null");, +				}, +				return null;, +			}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Loading Java Activation Framework FileTypeMap from " + mappingLocation);, +				}, +			if (logger.isTraceEnabled()) {, +				logger.trace("Loading default Java Activation Framework FileTypeMap");]