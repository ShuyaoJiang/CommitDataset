[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +	 * @return the value object (possibly not of the specified required type,, +	 * with further conversion steps necessary), +	 * @see #getResultSetValue(ResultSet, int), +, +, +			// Corresponding SQL types for JSR-310 / Joda-Time types, left up, +			// to the caller to convert them (e.g. through a ConversionService)., +			String typeName = requiredType.getSimpleName();, +			if ("LocalDate".equals(typeName)) {, +				return rs.getDate(index);, +			}, +			else if ("LocalTime".equals(typeName)) {, +				return rs.getTime(index);, +			}, +			else if ("LocalDateTime".equals(typeName)) {, +				return rs.getTimestamp(index);, +			}, +, +			// Fall back to getObject without type specification, again, +			// left up to the caller to convert the value if necessary., +		else if (obj instanceof java.sql.Date) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +	 * @return the value object (possibly not of the specified required type,, +	 * with further conversion steps necessary), +	 * @see #getResultSetValue(ResultSet, int), +, +, +			// Corresponding SQL types for JSR-310 / Joda-Time types, left up, +			// to the caller to convert them (e.g. through a ConversionService)., +			String typeName = requiredType.getSimpleName();, +			if ("LocalDate".equals(typeName)) {, +				return rs.getDate(index);, +			}, +			else if ("LocalTime".equals(typeName)) {, +				return rs.getTime(index);, +			}, +			else if ("LocalDateTime".equals(typeName)) {, +				return rs.getTimestamp(index);, +			}, +, +			// Fall back to getObject without type specification, again, +			// left up to the caller to convert the value if necessary., +		else if (obj instanceof java.sql.Date) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/AbstractRowMapperTests.java, + * Copyright 2002-2016 the original author or authors., +import java.sql.SQLFeatureNotSupportedException;, +import org.springframework.jdbc.core.test.DatePerson;, +	protected void verifyPerson(ConcretePerson bean) throws Exception {, +	protected void verifyPerson(SpacePerson bean) {, +		assertEquals(new java.sql.Timestamp(1221222L).toLocalDateTime(), bean.getBirthDate());, +	protected void verifyPerson(DatePerson bean) {, +		assertEquals("Bubba", bean.getLastName());, +		assertEquals(22L, bean.getAge());, +		assertEquals(new java.sql.Date(1221222L).toLocalDate(), bean.getBirthDate());, +		assertEquals(new BigDecimal("1234.56"), bean.getBalance());, +	}, +, +, +	protected enum MockType {ONE, TWO, THREE};, +, +		public Mock(MockType type) throws Exception {, +			given(resultSet.getObject(anyInt(), any(Class.class))).willThrow(new SQLFeatureNotSupportedException());, +			given(resultSet.getDate(3)).willReturn(new java.sql.Date(1221222L));, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +	 * @return the value object (possibly not of the specified required type,, +	 * with further conversion steps necessary), +	 * @see #getResultSetValue(ResultSet, int), +, +, +			// Corresponding SQL types for JSR-310 / Joda-Time types, left up, +			// to the caller to convert them (e.g. through a ConversionService)., +			String typeName = requiredType.getSimpleName();, +			if ("LocalDate".equals(typeName)) {, +				return rs.getDate(index);, +			}, +			else if ("LocalTime".equals(typeName)) {, +				return rs.getTime(index);, +			}, +			else if ("LocalDateTime".equals(typeName)) {, +				return rs.getTimestamp(index);, +			}, +, +			// Fall back to getObject without type specification, again, +			// left up to the caller to convert the value if necessary., +		else if (obj instanceof java.sql.Date) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/AbstractRowMapperTests.java, + * Copyright 2002-2016 the original author or authors., +import java.sql.SQLFeatureNotSupportedException;, +import org.springframework.jdbc.core.test.DatePerson;, +	protected void verifyPerson(ConcretePerson bean) throws Exception {, +	protected void verifyPerson(SpacePerson bean) {, +		assertEquals(new java.sql.Timestamp(1221222L).toLocalDateTime(), bean.getBirthDate());, +	protected void verifyPerson(DatePerson bean) {, +		assertEquals("Bubba", bean.getLastName());, +		assertEquals(22L, bean.getAge());, +		assertEquals(new java.sql.Date(1221222L).toLocalDate(), bean.getBirthDate());, +		assertEquals(new BigDecimal("1234.56"), bean.getBalance());, +	}]