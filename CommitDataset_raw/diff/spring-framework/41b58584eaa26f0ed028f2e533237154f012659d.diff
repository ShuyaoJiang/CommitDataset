[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Locale;, +	 * Set whether we're strictly validating that all bean properties have been mapped, +	 * from corresponding database fields., +	 * <p>Default is {@code false}, accepting unpopulated properties in the target bean., +		return this.primitivesDefaultedForNullValue;, +	}, +, +, +	/**, +	 * Initialize the mapping metadata for the given class., +	 * @param mappedClass the mapped class, +	 */, +	protected void initialize(Class<T> mappedClass) {, +		this.mappedClass = mappedClass;, +		this.mappedFields = new HashMap<String, PropertyDescriptor>();, +		this.mappedProperties = new HashSet<String>();, +		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass);, +		for (PropertyDescriptor pd : pds) {, +			if (pd.getWriteMethod() != null) {, +				this.mappedFields.put(lowerCaseName(pd.getName()), pd);, +				String underscoredName = underscoreName(pd.getName());, +				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {, +					this.mappedFields.put(underscoredName, pd);, +				}, +				this.mappedProperties.add(pd.getName());, +			}, +		}, +	}, +, +	/**, +	 * Convert a name in camelCase to an underscored name in lower case., +	 * Any upper case letters are converted to lower case with a preceding underscore., +	 * @param name the original name, +	 * @return the converted name, +	 * @since 4.2, +	 * @see #lowerCaseName, +	 */, +	protected String underscoreName(String name) {, +		if (!StringUtils.hasLength(name)) {, +			return "";, +		}, +		StringBuilder result = new StringBuilder();, +		result.append(lowerCaseName(name.substring(0, 1)));, +		for (int i = 1; i < name.length(); i++) {, +			String s = name.substring(i, i + 1);, +			String slc = lowerCaseName(s);, +			if (!s.equals(slc)) {, +				result.append("_").append(slc);, +			}, +			else {, +				result.append(s);, +			}, +		}, +		return result.toString();, +	}, +, +	/**, +	 * Convert the given name to lower case., +	 * By default, conversions will happen within the US locale., +	 * @param name the original name, +	 * @return the converted name, +	 * @since 4.2, +	 */, +	protected String lowerCaseName(String name) {, +		return name.toLowerCase(Locale.US);, +			PropertyDescriptor pd = this.mappedFields.get(lowerCaseName(column.replaceAll(" ", "")));, +					catch (TypeMismatchException ex) {, +						if (value == null && this.primitivesDefaultedForNullValue) {, +							logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" +, +									column + "' with null value when setting property '" + pd.getName() +, +									"' of type " + pd.getPropertyType() + " on object: " + mappedObject);, +							throw ex;]