[+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2014 the original author or authors., +						Class<?> listenerType = beanFactory.getType(listenerBeanName);, +						if (listenerType == null || supportsEvent(listenerType, event)) {, +							ApplicationListener<?> listener =, +									beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +					}, +	 * Filter a listener early through checking its generically declared event, +	 * type before trying to instantiate it., +	 * <p>If this method returns {@code true} for a given listener as a first pass,, +	 * the listener instance will get retrieved and fully evaluated through a, +	 * {@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards., +	 * @param listenerType the listener's type as determined by the BeanFactory, +	 * @param event the event to check, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +	 */, +	protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {, +		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +			return true;, +		}, +		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType);, +		return (declaredEventType == null || declaredEventType.isInstance(event));, +	}, +, +	/**, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2014 the original author or authors., +						Class<?> listenerType = beanFactory.getType(listenerBeanName);, +						if (listenerType == null || supportsEvent(listenerType, event)) {, +							ApplicationListener<?> listener =, +									beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +					}, +	 * Filter a listener early through checking its generically declared event, +	 * type before trying to instantiate it., +	 * <p>If this method returns {@code true} for a given listener as a first pass,, +	 * the listener instance will get retrieved and fully evaluated through a, +	 * {@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards., +	 * @param listenerType the listener's type as determined by the BeanFactory, +	 * @param event the event to check, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +	 */, +	protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {, +		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +			return true;, +		}, +		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType);, +		return (declaredEventType == null || declaredEventType.isInstance(event));, +	}, +, +	/**, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2014 the original author or authors., +		Class<?> declaredEventType = resolveDeclaredEventType(this.delegate.getClass());, +		if (declaredEventType == null || declaredEventType.equals(ApplicationEvent.class)) {, +				declaredEventType = resolveDeclaredEventType(targetClass);, +		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType));, +, +	static Class<?> resolveDeclaredEventType(Class<?> listenerType) {, +		return GenericTypeResolver.resolveTypeArgument(listenerType, ApplicationListener.class);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2014 the original author or authors., +						Class<?> listenerType = beanFactory.getType(listenerBeanName);, +						if (listenerType == null || supportsEvent(listenerType, event)) {, +							ApplicationListener<?> listener =, +									beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +					}, +	 * Filter a listener early through checking its generically declared event, +	 * type before trying to instantiate it., +	 * <p>If this method returns {@code true} for a given listener as a first pass,, +	 * the listener instance will get retrieved and fully evaluated through a, +	 * {@link #supportsEvent(ApplicationListener, Class, Class)} call afterwards., +	 * @param listenerType the listener's type as determined by the BeanFactory, +	 * @param event the event to check, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +	 */, +	protected boolean supportsEvent(Class<?> listenerType, ApplicationEvent event) {, +		if (SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +			return true;, +		}, +		Class<?> declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType);, +		return (declaredEventType == null || declaredEventType.isInstance(event));, +	}, +, +	/**, +	 * @return whether the given listener should be included in the candidates, +	 * for the given event type, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2014 the original author or authors., +		Class<?> declaredEventType = resolveDeclaredEventType(this.delegate.getClass());, +		if (declaredEventType == null || declaredEventType.equals(ApplicationEvent.class)) {, +				declaredEventType = resolveDeclaredEventType(targetClass);]