[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #mode} attribute controls how advice is applied: If the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying. Please note that proxy mode allows for interception of calls through, + * the proxy only; local calls within the same class cannot get intercepted that way., + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in, + * this case the {@code spring-aspects} module JAR must be present on the classpath, with, + * compile-time weaving or load-time weaving applying the aspect to the affected classes., + * There is no proxy involved in such a scenario; local calls will be intercepted as well., + * @author Juergen Hoeller, +	 * Indicate how caching advice should be applied., +	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>, +	 * Please note that proxy mode allows for interception of calls through the proxy, +	 * only. Local calls within the same class cannot get intercepted that way;, +	 * a caching annotation on such a method within a local call will be ignored, +	 * since Spring's interceptor does not even kick in for such a runtime scenario., +	 * For a more advanced mode of interception, consider switching this to, +	 * {@link AdviceMode#ASPECTJ}., +	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE}., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #mode} attribute controls how advice is applied: If the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying. Please note that proxy mode allows for interception of calls through, + * the proxy only; local calls within the same class cannot get intercepted that way., + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in, + * this case the {@code spring-aspects} module JAR must be present on the classpath, with, + * compile-time weaving or load-time weaving applying the aspect to the affected classes., + * There is no proxy involved in such a scenario; local calls will be intercepted as well., + * @author Juergen Hoeller, +	 * Indicate how caching advice should be applied., +	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>, +	 * Please note that proxy mode allows for interception of calls through the proxy, +	 * only. Local calls within the same class cannot get intercepted that way;, +	 * a caching annotation on such a method within a local call will be ignored, +	 * since Spring's interceptor does not even kick in for such a runtime scenario., +	 * For a more advanced mode of interception, consider switching this to, +	 * {@link AdviceMode#ASPECTJ}., +	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE}., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #mode} attribute controls how advice is applied: If the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying. Please note that proxy mode allows for interception of calls through, + * the proxy only; local calls within the same class cannot get intercepted that way., + *, + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in, + * this case the {@code spring-aspects} module JAR must be present on the classpath, with, + * compile-time weaving or load-time weaving applying the aspect to the affected classes., + * There is no proxy involved in such a scenario; local calls will be intercepted as well., + *, +	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>, +	 * Please note that proxy mode allows for interception of calls through the proxy, +	 * only. Local calls within the same class cannot get intercepted that way; an, +	 * {@link Async} annotation on such a method within a local call will be ignored, +	 * since Spring's interceptor does not even kick in for such a runtime scenario., +	 * For a more advanced mode of interception, consider switching this to, +	 * {@link AdviceMode#ASPECTJ}., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #mode} attribute controls how advice is applied: If the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying. Please note that proxy mode allows for interception of calls through, + * the proxy only; local calls within the same class cannot get intercepted that way., + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in, + * this case the {@code spring-aspects} module JAR must be present on the classpath, with, + * compile-time weaving or load-time weaving applying the aspect to the affected classes., + * There is no proxy involved in such a scenario; local calls will be intercepted as well., + * @author Juergen Hoeller, +	 * Indicate how caching advice should be applied., +	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>, +	 * Please note that proxy mode allows for interception of calls through the proxy, +	 * only. Local calls within the same class cannot get intercepted that way;, +	 * a caching annotation on such a method within a local call will be ignored, +	 * since Spring's interceptor does not even kick in for such a runtime scenario., +	 * For a more advanced mode of interception, consider switching this to, +	 * {@link AdviceMode#ASPECTJ}., +	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE}., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, + * Copyright 2002-2017 the original author or authors., + * <p>The {@link #mode} attribute controls how advice is applied: If the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying. Please note that proxy mode allows for interception of calls through, + * the proxy only; local calls within the same class cannot get intercepted that way., + *, + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in, + * this case the {@code spring-aspects} module JAR must be present on the classpath, with, + * compile-time weaving or load-time weaving applying the aspect to the affected classes., + * There is no proxy involved in such a scenario; local calls will be intercepted as well., + *, +	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>, +	 * Please note that proxy mode allows for interception of calls through the proxy, +	 * only. Local calls within the same class cannot get intercepted that way; an, +	 * {@link Async} annotation on such a method within a local call will be ignored]