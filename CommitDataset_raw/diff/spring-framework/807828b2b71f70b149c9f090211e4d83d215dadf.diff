[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@code java.*} and {@code javax.*} namespaces., +	 * @param typeName the fully qualified class name of the annotation type to test, +	 * Create a new {@link AnnotationFilter} that matches annotations in the, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@code java.*} and {@code javax.*} namespaces., +	 * @param typeName the fully qualified class name of the annotation type to test, +	 * Create a new {@link AnnotationFilter} that matches annotations in the, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java, + * @author Sam Brannen, +	 * Get the root mapping., +	 * Get the parent mapping or {@code null}., +	 * Get the depth of this mapping., +	 * Get the type of the mapped annotation., +	 * Get the source annotation for this mapping. This will be the, +	 * Get the annotation attributes for the mapping annotation type., +	 * Get the related index of an alias mapped attribute, or {@code -1} if, +	 * Get the related index of a convention mapped attribute, or {@code -1}, +	 * Get a mapped attribute value from the most suitable, +	 * Determine if the specified value is equivalent to the default value of the, +	 * Get the mirror sets for this type mapping., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@code java.*} and {@code javax.*} namespaces., +	 * @param typeName the fully qualified class name of the annotation type to test, +	 * Create a new {@link AnnotationFilter} that matches annotations in the, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java, + * @author Sam Brannen, +	 * Get the root mapping., +	 * Get the parent mapping or {@code null}., +	 * Get the depth of this mapping., +	 * Get the type of the mapped annotation., +	 * Get the source annotation for this mapping. This will be the, +	 * Get the annotation attributes for the mapping annotation type., +	 * Get the related index of an alias mapped attribute, or {@code -1} if, +	 * Get the related index of a convention mapped attribute, or {@code -1}, +	 * Get a mapped attribute value from the most suitable, +	 * Determine if the specified value is equivalent to the default value of the, +	 * Get the mirror sets for this type mapping., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, + * and explicit {@link AliasFor @AliasFor} aliases. Also provides information, +	 * Get the total number of contained mappings., +	 * Get an individual mapping from this instance., +	 * <p>Index {@code 0} will always return the root mapping; higher indexes, +	 * will return meta-annotation mappings., +	 * Create {@link AnnotationTypeMappings} for the specified annotation type., +	 * Create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@code java.*} and {@code javax.*} namespaces., +	 * @param typeName the fully qualified class name of the annotation type to test, +	 * Create a new {@link AnnotationFilter} that matches annotations in the, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java, + * @author Sam Brannen, +	 * Get the root mapping., +	 * Get the parent mapping or {@code null}., +	 * Get the depth of this mapping., +	 * Get the type of the mapped annotation., +	 * Get the source annotation for this mapping. This will be the, +	 * Get the annotation attributes for the mapping annotation type., +	 * Get the related index of an alias mapped attribute, or {@code -1} if, +	 * Get the related index of a convention mapped attribute, or {@code -1}, +	 * Get a mapped attribute value from the most suitable, +	 * Determine if the specified value is equivalent to the default value of the, +	 * Get the mirror sets for this type mapping., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, + * and explicit {@link AliasFor @AliasFor} aliases. Also provides information, +	 * Get the total number of contained mappings., +	 * Get an individual mapping from this instance., +	 * <p>Index {@code 0} will always return the root mapping; higher indexes, +	 * will return meta-annotation mappings., +	 * Create {@link AnnotationTypeMappings} for the specified annotation type., +	 * Create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsProcessor.java, +	 * Get the final result to be returned. By default this method returns, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	 * documentation for details), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@code java.*} and {@code javax.*} namespaces., +	 * @param typeName the fully qualified class name of the annotation type to test, +	 * Create a new {@link AnnotationFilter} that matches annotations in the, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java, + * @author Sam Brannen, +	 * Get the root mapping., +	 * Get the parent mapping or {@code null}., +	 * Get the depth of this mapping., +	 * Get the type of the mapped annotation., +	 * Get the source annotation for this mapping. This will be the, +	 * Get the annotation attributes for the mapping annotation type., +	 * Get the related index of an alias mapped attribute, or {@code -1} if, +	 * Get the related index of a convention mapped attribute, or {@code -1}, +	 * Get a mapped attribute value from the most suitable]