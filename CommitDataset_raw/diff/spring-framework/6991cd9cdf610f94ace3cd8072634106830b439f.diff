[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  // explicitly registered overriding bean, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  // explicitly registered overriding bean, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  // explicitly registered overriding bean, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationRecursionTests.java, + * Tests ensuring that configuration classes marked with @ComponentScan, +	public void evenCircularScansAreSupported() {, +		ctx.register(LeftConfig.class); // left scans right, and right scans left, +		ctx.getBean("leftConfig");      // but this is handled gracefully, +		ctx.getBean("rightConfig");     // and beans from both packages are available, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +		return (!(existingDefinition instanceof ScannedGenericBeanDefinition) ||  // explicitly registered overriding bean, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationRecursionTests.java, + * Tests ensuring that configuration classes marked with @ComponentScan, +	public void evenCircularScansAreSupported() {, +		ctx.register(LeftConfig.class); // left scans right, and right scans left, +		ctx.getBean("leftConfig");      // but this is handled gracefully, +		ctx.getBean("rightConfig");     // and beans from both packages are available, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/spr8808/Spr8808Tests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation.spr8808;, +, +import org.junit.Test;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.context.annotation.Configuration;, +, +/**, + * Tests cornering the bug in which @Configuration classes that @ComponentScan themselves, + * would result in a ConflictingBeanDefinitionException., + *, + * @author Chris Beams, + * @since 3.1, + */, +public class Spr8808Tests {, +, +	/**, +	 * This test failed with ConflictingBeanDefinitionException prior to fixes for, +	 * SPR-8808., +	 */, +	@Test, +	public void repro() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(Config.class);, +		ctx.refresh();, +	}, +, +}, +, +@Configuration, +@ComponentScan(basePackageClasses=Spr8808Tests.class) // scan *this* package, +class Config {, +}]