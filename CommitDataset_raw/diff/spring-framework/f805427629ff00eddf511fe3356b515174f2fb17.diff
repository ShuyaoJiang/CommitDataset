[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		mbd.resolvedTargetType = beanType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		mbd.resolvedTargetType = beanType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +, +			else if (!BeanFactoryUtils.isFactoryDereference(name)) {, +				if (typeToMatch.isInstance(beanInstance)) {, +					// Direct match for exposed instance?, +					return true;, +				else if (typeToMatch.hasGenerics() && containsBeanDefinition(beanName)) {, +					// Generics potentially only match on the target class, not on the proxy..., +					RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);, +					Class<?> targetType = mbd.getTargetType();, +					if (targetType != null && targetType != ClassUtils.getUserClass(beanInstance) &&, +							typeToMatch.isAssignableFrom(targetType)) {, +						// Check raw class match as well, making sure it's exposed on the proxy., +						Class<?> classToMatch = typeToMatch.resolve();, +						return (classToMatch == null || classToMatch.isInstance(beanInstance));, +					}, +				}, +			}, +			return false;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		mbd.resolvedTargetType = beanType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +, +			else if (!BeanFactoryUtils.isFactoryDereference(name)) {, +				if (typeToMatch.isInstance(beanInstance)) {, +					// Direct match for exposed instance?, +					return true;, +				else if (typeToMatch.hasGenerics() && containsBeanDefinition(beanName)) {, +					// Generics potentially only match on the target class, not on the proxy..., +					RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);, +					Class<?> targetType = mbd.getTargetType();, +					if (targetType != null && targetType != ClassUtils.getUserClass(beanInstance) &&, +							typeToMatch.isAssignableFrom(targetType)) {, +						// Check raw class match as well, making sure it's exposed on the proxy., +						Class<?> classToMatch = typeToMatch.resolve();, +						return (classToMatch == null || classToMatch.isInstance(beanInstance));, +					}, +				}, +			}, +			return false;, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;, +import org.springframework.aop.interceptor.SimpleTraceInterceptor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +	public void genericsBasedInjectionWithEarlyGenericsMatching() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +	}, +, +	@Test, +	public void genericsBasedInjectionWithEarlyGenericsMatchingOnCglibProxy() {, +		DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();, +		autoProxyCreator.setProxyTargetClass(true);, +		autoProxyCreator.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(autoProxyCreator);, +		beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor()));, +, +		assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo")));, +	}, +, +	@Test, +	public void genericsBasedInjectionWithLateGenericsMatchingOnCglibProxy() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +		DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();, +		autoProxyCreator.setProxyTargetClass(true);, +		autoProxyCreator.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(autoProxyCreator);, +		beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor()));, +		beanFactory.preInstantiateSingletons();, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +, +		assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo")));, +	}, +, +	@Test, +	public void genericsBasedInjectionWithLateGenericsMatchingOnCglibProxyAndRawFactoryMethod() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawRepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +		DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();, +		autoProxyCreator.setProxyTargetClass(true);, +		autoProxyCreator.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(autoProxyCreator);]