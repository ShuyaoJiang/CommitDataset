[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Configures component scanning directives for use with @{@link Configuration} classes., + * Provides support parallel with Spring XML's {@code <context:component-scan>} element., + * <p>One of {@link #basePackageClasses()}, {@link #basePackages()} or its alias, + * {@link #value()} must be specified., + * <p>Note that the {@code <context:component-scan>} element has an, + * {@code annotation-config} attribute, however this annotation does not. This is because, + * in almost all cases when using {@code @ComponentScan}, default annotation config, + * processing (e.g. processing {@code @Autowired} and friends) is assumed. Furthermore,, + * when using {@link AnnotationConfigApplicationContext}, annotation config processors are, + * always registered, meaning that any attempt to disable them at the, + * {@code @ComponentScan} level would be ignored., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., + * @see Configuration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Configures component scanning directives for use with @{@link Configuration} classes., + * Provides support parallel with Spring XML's {@code <context:component-scan>} element., + * <p>One of {@link #basePackageClasses()}, {@link #basePackages()} or its alias, + * {@link #value()} must be specified., + * <p>Note that the {@code <context:component-scan>} element has an, + * {@code annotation-config} attribute, however this annotation does not. This is because, + * in almost all cases when using {@code @ComponentScan}, default annotation config, + * processing (e.g. processing {@code @Autowired} and friends) is assumed. Furthermore,, + * when using {@link AnnotationConfigApplicationContext}, annotation config processors are, + * always registered, meaning that any attempt to disable them at the, + * {@code @ComponentScan} level would be ignored., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., + * @see Configuration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * See @{@link Profile} and {@link org.springframework.core.env.Environment Environment}, + * Javadoc for further details., + * provides the {@code @ContextConfiguration} annotation, which as of Spring 3.1 can, + * accept an array of {@code @Configuration} {@code Class} objects:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Configures component scanning directives for use with @{@link Configuration} classes., + * Provides support parallel with Spring XML's {@code <context:component-scan>} element., + * <p>One of {@link #basePackageClasses()}, {@link #basePackages()} or its alias, + * {@link #value()} must be specified., + * <p>Note that the {@code <context:component-scan>} element has an, + * {@code annotation-config} attribute, however this annotation does not. This is because, + * in almost all cases when using {@code @ComponentScan}, default annotation config, + * processing (e.g. processing {@code @Autowired} and friends) is assumed. Furthermore,, + * when using {@link AnnotationConfigApplicationContext}, annotation config processors are, + * always registered, meaning that any attempt to disable them at the, + * {@code @ComponentScan} level would be ignored., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., + * @see Configuration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * See @{@link Profile} and {@link org.springframework.core.env.Environment Environment}, + * Javadoc for further details., + * provides the {@code @ContextConfiguration} annotation, which as of Spring 3.1 can, + * accept an array of {@code @Configuration} {@code Class} objects:, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Lazy.java, + * <p>May be used on any class directly or indirectly annotated with {@link, + * org.springframework.stereotype.Component @Component} or on methods annotated with, + * {@link Bean @Bean}., + * <p>If this annotation is not present on a {@code @Component} or {@code @Bean} definition,, + * eager initialization will occur. If present and set to {@code true}, the {@code @Bean} or, + * {@code @Component} will not be initialized until referenced by another bean or explicitly, + * retrieved from the enclosing {@link org.springframework.beans.factory.BeanFactory, + * BeanFactory}. If present and set to {@code false}, the bean will be instantiated on, + * startup by bean factories that perform eager initialization of singletons., + * indicates that all {@code @Bean} methods within that {@code @Configuration}, + * should be lazily initialized. If {@code @Lazy} is present and false on a {@code @Bean}, + * method within a {@code @Lazy}-annotated {@code @Configuration} class, this indicates, + * overriding the 'default lazy' behavior and that the bean should be eagerly initialized.]