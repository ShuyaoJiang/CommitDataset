[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +		public RequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {, +			this.bodySpec.headers(headersConsumer);, +		public RequestBodySpec cookies(, +				Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +			this.bodySpec.cookies(cookiesConsumer);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +		public RequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {, +			this.bodySpec.headers(headersConsumer);, +		public RequestBodySpec cookies(, +				Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +			this.bodySpec.cookies(cookiesConsumer);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +import java.util.List;, +import java.util.function.Consumer;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.reactive.function.client.ExchangeFilterFunction;, +	public WebTestClient.Builder defaultHeaders(Consumer<HttpHeaders> headersConsumer) {, +		this.webClientBuilder.defaultHeaders(headersConsumer);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder defaultCookies(, +			Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +		this.webClientBuilder.defaultCookies(cookiesConsumer);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder filter(ExchangeFilterFunction filter) {, +		this.webClientBuilder.filter(filter);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder filters(Consumer<List<ExchangeFilterFunction>> filtersConsumer) {, +		this.webClientBuilder.filters(filtersConsumer);, +		return this;, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +		public RequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {, +			this.bodySpec.headers(headersConsumer);, +		public RequestBodySpec cookies(, +				Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +			this.bodySpec.cookies(cookiesConsumer);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +import java.util.List;, +import java.util.function.Consumer;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.reactive.function.client.ExchangeFilterFunction;, +	public WebTestClient.Builder defaultHeaders(Consumer<HttpHeaders> headersConsumer) {, +		this.webClientBuilder.defaultHeaders(headersConsumer);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder defaultCookies(, +			Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +		this.webClientBuilder.defaultCookies(cookiesConsumer);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder filter(ExchangeFilterFunction filter) {, +		this.webClientBuilder.filter(filter);, +		return this;, +	}, +, +	@Override, +	public WebTestClient.Builder filters(Consumer<List<ExchangeFilterFunction>> filtersConsumer) {, +		this.webClientBuilder.filters(filtersConsumer);, +		return this;, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +		 * Manipulate the default headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other]