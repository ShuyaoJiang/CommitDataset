[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import java.util.function.Supplier;, +		Supplier<?> instanceSupplier = mbd.getInstanceSupplier();, +		if (instanceSupplier != null) {, +			BeanWrapper bw = new BeanWrapperImpl(instanceSupplier.get());, +			initBeanWrapper(bw);, +			return bw;, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import java.util.function.Supplier;, +		Supplier<?> instanceSupplier = mbd.getInstanceSupplier();, +		if (instanceSupplier != null) {, +			BeanWrapper bw = new BeanWrapperImpl(instanceSupplier.get());, +			initBeanWrapper(bw);, +			return bw;, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +import java.util.function.Supplier;, +	private Supplier<?> instanceSupplier;, +, +			setInstanceSupplier(originalAbd.getInstanceSupplier());, +			setInstanceSupplier(otherAbd.getInstanceSupplier());, +	/**, +	 * Specify a callback for creating an instance of the bean,, +	 * as an alternative to a declaratively specified factory method., +	 * <p>If such a callback is set, it will override any other constructor, +	 * or factory method metadata. However, bean property population and, +	 * potential annotation-driven injection will still apply as usual., +	 * @since 5.0, +	 * @see #setConstructorArgumentValues(ConstructorArgumentValues), +	 * @see #setPropertyValues(MutablePropertyValues), +	 */, +	public void setInstanceSupplier(Supplier<?> instanceSupplier) {, +		this.instanceSupplier = instanceSupplier;, +	}, +, +	/**, +	 * Return a callback for creating an instance of the bean, if any., +	 * @since 5.0, +	 */, +	public Supplier<?> getInstanceSupplier() {, +		return this.instanceSupplier;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import java.util.function.Supplier;, +		Supplier<?> instanceSupplier = mbd.getInstanceSupplier();, +		if (instanceSupplier != null) {, +			BeanWrapper bw = new BeanWrapperImpl(instanceSupplier.get());, +			initBeanWrapper(bw);, +			return bw;, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +import java.util.function.Supplier;, +	private Supplier<?> instanceSupplier;, +, +			setInstanceSupplier(originalAbd.getInstanceSupplier());, +			setInstanceSupplier(otherAbd.getInstanceSupplier());, +	/**, +	 * Specify a callback for creating an instance of the bean,, +	 * as an alternative to a declaratively specified factory method., +	 * <p>If such a callback is set, it will override any other constructor, +	 * or factory method metadata. However, bean property population and, +	 * potential annotation-driven injection will still apply as usual., +	 * @since 5.0, +	 * @see #setConstructorArgumentValues(ConstructorArgumentValues), +	 * @see #setPropertyValues(MutablePropertyValues), +	 */, +	public void setInstanceSupplier(Supplier<?> instanceSupplier) {, +		this.instanceSupplier = instanceSupplier;, +	}, +, +	/**, +	 * Return a callback for creating an instance of the bean, if any., +	 * @since 5.0, +	 */, +	public Supplier<?> getInstanceSupplier() {, +		return this.instanceSupplier;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import java.util.function.Supplier;, +	 * @see #setBeanClass, +	 * Create a new RootBeanDefinition for a singleton bean, constructing each instance, +	 * through calling the given supplier (possibly a lambda or method reference)., +	 * @param beanClass the class of the bean to instantiate, +	 * @param instanceSupplier the supplier to construct a bean instance,, +	 * as an alternative to a declaratively specified factory method, +	 * @since 5.0, +	 * @see #setInstanceSupplier(Supplier), +	 */, +	public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {, +		super();, +		setBeanClass(beanClass);, +		setInstanceSupplier(instanceSupplier);, +	}, +]