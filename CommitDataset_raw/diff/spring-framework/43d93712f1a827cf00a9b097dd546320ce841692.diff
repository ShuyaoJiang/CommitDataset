[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	 * @deprecated as of 4.2 this method is no longer used for anything, +	@Deprecated, +				handleRequestInternal(request, response, true);, +, +				// Request might have been reset (e.g. polling sessions do after writing), +				this.readyToSend = isActive();, +				handleRequestInternal(request, response, false);, +				this.readyToSend = isActive();, +	/**, +	 * Invoked when a SockJS transport request is received., +	 * @param request the current request, +	 * @param response the current response, +	 * @param initialRequest whether it is the first request for the session, +	 */, +	protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,, +			boolean initialRequest) throws IOException;, +	 * Subclasses should only call this method from a method where the, +	 * "responseLock" is acquired., +, +	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	 * @deprecated as of 4.2 this method is no longer used for anything, +	@Deprecated, +				handleRequestInternal(request, response, true);, +, +				// Request might have been reset (e.g. polling sessions do after writing), +				this.readyToSend = isActive();, +				handleRequestInternal(request, response, false);, +				this.readyToSend = isActive();, +	/**, +	 * Invoked when a SockJS transport request is received., +	 * @param request the current request, +	 * @param response the current response, +	 * @param initialRequest whether it is the first request for the session, +	 */, +	protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,, +			boolean initialRequest) throws IOException;, +	 * Subclasses should only call this method from a method where the, +	 * "responseLock" is acquired., +, +	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.java, +import java.io.IOException;, +import org.springframework.http.server.ServerHttpRequest;, +import org.springframework.http.server.ServerHttpResponse;, +	/**, +	 * @deprecated as of 4.2 this method is no longer used for anything, +	 */, +	@Deprecated, +	protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,, +			boolean initialRequest) throws IOException {, +, +		if (initialRequest) {, +			writeFrame(SockJsFrame.openFrame());, +			resetRequest();, +		}, +		else if (!getMessageCache().isEmpty()) {, +			flushCache();, +		}, +		else {, +			scheduleHeartbeat();, +		}, +	}, +, +	@Override, +		resetRequest();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	 * @deprecated as of 4.2 this method is no longer used for anything, +	@Deprecated, +				handleRequestInternal(request, response, true);, +, +				// Request might have been reset (e.g. polling sessions do after writing), +				this.readyToSend = isActive();, +				handleRequestInternal(request, response, false);, +				this.readyToSend = isActive();, +	/**, +	 * Invoked when a SockJS transport request is received., +	 * @param request the current request, +	 * @param response the current response, +	 * @param initialRequest whether it is the first request for the session, +	 */, +	protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,, +			boolean initialRequest) throws IOException;]