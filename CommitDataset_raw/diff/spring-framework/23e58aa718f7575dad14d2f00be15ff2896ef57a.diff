[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, + * @see org.springframework.web.context.support.Spr8510Tests, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, + * @see org.springframework.web.context.support.Spr8510Tests, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, +		String initParameter = sc.getInitParameter(CONFIG_LOCATION_PARAM);, +		if (initParameter != null) {, +			wac.setConfigLocation(initParameter);, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, + * @see org.springframework.web.context.support.Spr8510Tests, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, +		String initParameter = sc.getInitParameter(CONFIG_LOCATION_PARAM);, +		if (initParameter != null) {, +			wac.setConfigLocation(initParameter);, +		}, +++ b/org.springframework.web/src/test/java/org/springframework/web/context/support/Spr8510Tests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.context.support;, +, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +import javax.servlet.ServletContextEvent;, +, +import org.junit.Test;, +import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.web.context.ContextLoader;, +import org.springframework.web.context.ContextLoaderListener;, +, +/**, + * Tests the interaction between a WebApplicationContext and ContextLoaderListener with, + * regard to config location precedence, overriding and defaulting in programmatic, + * configuration use cases, e.g. with Spring 3.1's WebApplicationInitializer., + *, + * @author Chris Beams, + * @since 3.1, + * @see org.springframework.web.context.ContextLoaderTests, + */, +public class Spr8510Tests {, +, +	@Test, +	public void abstractRefreshableWAC_respectsProgrammaticConfigLocations() {, +		XmlWebApplicationContext ctx = new XmlWebApplicationContext();, +		ctx.setConfigLocation("programmatic.xml");, +		ContextLoaderListener cll = new ContextLoaderListener(ctx);, +, +		MockServletContext sc = new MockServletContext();, +, +		try {, +			cll.contextInitialized(new ServletContextEvent(sc));, +			fail("expected exception");, +		} catch (Throwable t) {, +			// assert that an attempt was made to load the correct XML, +			assertTrue(t.getMessage(), t.getMessage().endsWith(, +					"Could not open ServletContext resource [/programmatic.xml]"));, +		}, +	}, +, +	/**, +	 * If a contextConfigLocation init-param has been specified for the ContextLoaderListener,, +	 * then it should take precedence. This is generally not a recommended practice, but, +	 * when it does happen, the init-param should be considered more specific than the, +	 * programmatic configuration, given that it still quite possibly externalized in, +	 * hybrid web.xml + WebApplicationInitializer cases., +	 */, +	@Test, +	public void abstractRefreshableWAC_respectsInitParam_overProgrammaticConfigLocations() {, +		XmlWebApplicationContext ctx = new XmlWebApplicationContext();, +		ctx.setConfigLocation("programmatic.xml");, +		ContextLoaderListener cll = new ContextLoaderListener(ctx);, +, +		MockServletContext sc = new MockServletContext();, +		sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "from-init-param.xml");, +, +		try {, +			cll.contextInitialized(new ServletContextEvent(sc));, +			fail("expected exception");, +		} catch (Throwable t) {, +			// assert that an attempt was made to load the correct XML, +			assertTrue(t.getMessage(), t.getMessage().endsWith(, +					"Could not open ServletContext resource [/from-init-param.xml]"));, +		}, +	}]