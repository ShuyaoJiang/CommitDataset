[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +	 * @param configurer the {@code MockMvcConfigurer} to apply; never {@code null}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +	 * @param configurer the {@code MockMvcConfigurer} to apply; never {@code null}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilder.java, +import org.springframework.test.web.servlet.htmlunit.WebRequestMatcher;, +import org.springframework.util.Assert;, + * {@code MockMvcHtmlUnitDriverBuilder} simplifies the building of an, + * {@link HtmlUnitDriver} that delegates to {@link MockMvc} and optionally, + * delegates to an actual connection for specific requests., + * @see #mockMvcSetup(MockMvc), + * @see #webAppContextSetup(WebApplicationContext), + * @see #webAppContextSetup(WebApplicationContext, MockMvcConfigurer), + * @see #javascriptEnabled(boolean), + * @see #withDelegate(WebConnectionHtmlUnitDriver), + * @see #build(), +	private HtmlUnitDriver driver;, +, +	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied, +	 * {@link MockMvc} instance., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @return the MockMvcHtmlUnitDriverBuilder to customize, +	 */, +	public static MockMvcHtmlUnitDriverBuilder mockMvcSetup(MockMvc mockMvc) {, +		Assert.notNull(mockMvc, "MockMvc must not be null");, +		return new MockMvcHtmlUnitDriverBuilder(mockMvc);, +	}, +, +	/**, +	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied, +	 * {@link WebApplicationContext}., +	 * @param context the {@code WebApplicationContext} to create a {@link MockMvc}, +	 * instance from; never {@code null}, +		Assert.notNull(context, "WebApplicationContext must not be null");, +	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied, +	 * {@link WebApplicationContext} and {@link MockMvcConfigurer}., +	 * @param context the {@code WebApplicationContext} to create a {@link MockMvc}, +	 * instance from; never {@code null}, +	 * @param configurer the {@code MockMvcConfigurer} to apply; never {@code null}, +		Assert.notNull(context, "WebApplicationContext must not be null");, +		Assert.notNull(configurer, "MockMvcConfigurer must not be null");, +	 * @param javascriptEnabled {@code true} if JavaScript should be enabled, +	 * @return this builder for further customizations, +	 * @see #build(), +	 * Supply the {@code WebConnectionHtmlUnitDriver} that the driver, +	 * {@linkplain #build built} by this builder should delegate to when, +	 * processing non-{@linkplain WebRequestMatcher matching} requests., +	 * @param driver the {@code WebConnectionHtmlUnitDriver} to delegate to, +	 * for requests that do not match; never {@code null}, +	 * @return this builder for further customizations, +	 * @see #build(), +	public MockMvcHtmlUnitDriverBuilder withDelegate(WebConnectionHtmlUnitDriver driver) {, +		Assert.notNull(driver, "driver must not be null");, +		driver.setJavascriptEnabled(this.javascriptEnabled);, +		driver.setWebConnection(createConnection(driver.getWebConnection()));, +		this.driver = driver;, +		return this;, +	 * Build the {@link HtmlUnitDriver} configured via this builder., +	 * <p>The returned driver will use the configured {@link MockMvc} instance, +	 * for processing any {@linkplain WebRequestMatcher matching} requests, +	 * and a delegate {@code HtmlUnitDriver} for all other requests., +	 * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,, +	 * it will be used; otherwise, a default {@code WebConnectionHtmlUnitDriver}, +	 * with the {@link BrowserVersion} set to {@link BrowserVersion#CHROME CHROME}, +	 * will be configured as the delegate., +	 * @see #withDelegate(WebConnectionHtmlUnitDriver), +	public HtmlUnitDriver build() {, +		return (this.driver != null ? this.driver, +				: withDelegate(new WebConnectionHtmlUnitDriver(BrowserVersion.CHROME)).build());, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +	 * @param configurer the {@code MockMvcConfigurer} to apply; never {@code null}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilder.java, +import org.springframework.test.web.servlet.htmlunit.WebRequestMatcher;, +import org.springframework.util.Assert;, + * {@code MockMvcHtmlUnitDriverBuilder} simplifies the building of an, + * {@link HtmlUnitDriver} that delegates to {@link MockMvc} and optionally, + * delegates to an actual connection for specific requests., + * @see #mockMvcSetup(MockMvc), + * @see #webAppContextSetup(WebApplicationContext), + * @see #webAppContextSetup(WebApplicationContext, MockMvcConfigurer), + * @see #javascriptEnabled(boolean), + * @see #withDelegate(WebConnectionHtmlUnitDriver), + * @see #build(), +	private HtmlUnitDriver driver;, +, +	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied, +	 * {@link MockMvc} instance., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @return the MockMvcHtmlUnitDriverBuilder to customize, +	 */, +	public static MockMvcHtmlUnitDriverBuilder mockMvcSetup(MockMvc mockMvc) {, +		Assert.notNull(mockMvc, "MockMvc must not be null");, +		return new MockMvcHtmlUnitDriverBuilder(mockMvc);, +	}, +, +	/**, +	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied, +	 * {@link WebApplicationContext}., +	 * @param context the {@code WebApplicationContext} to create a {@link MockMvc}, +	 * instance from; never {@code null}]