[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +					try {, +					catch (Throwable ex) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Failed to resolve generic return type for factory method: " + ex);, +						}, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +					try {, +					catch (Throwable ex) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Failed to resolve generic return type for factory method: " + ex);, +						}, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +							throw new IllegalStateException("Failed to resolve value type [" +, +									typedValue.getTargetTypeName() + "] for factory method argument", ex);, +										return ClassUtils.forName(className, classLoader);, +										throw new IllegalStateException("Could not resolve class name [" + arg +, +												"] for factory method argument", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +					try {, +					catch (Throwable ex) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Failed to resolve generic return type for factory method: " + ex);, +						}, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +							throw new IllegalStateException("Failed to resolve value type [" +, +									typedValue.getTargetTypeName() + "] for factory method argument", ex);, +										return ClassUtils.forName(className, classLoader);, +										throw new IllegalStateException("Could not resolve class name [" + arg +, +												"] for factory method argument", ex);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, +	public void parameterizedInstanceFactoryMethodWithInvalidClassName() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +, +		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class);, +		bf.registerBeanDefinition("mocksControl", rbd);, +, +		rbd = new RootBeanDefinition();, +		rbd.setFactoryBeanName("mocksControl");, +		rbd.setFactoryMethodName("createMock");, +		rbd.getConstructorArgumentValues().addGenericArgumentValue("x");, +		bf.registerBeanDefinition("mock", rbd);, +, +		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class);, +		assertEquals(0, beans.size());, +	}, +, +	@Test]