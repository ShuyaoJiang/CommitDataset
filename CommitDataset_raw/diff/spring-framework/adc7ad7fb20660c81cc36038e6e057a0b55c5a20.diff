[+++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.aop.framework.AopProxyUtils;, +import org.springframework.aop.support.AopUtils;, +		Method specificMethod = getMostSpecificMethod();, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +						+ specificMethod + "' one destination must be set (got " + Arrays.toString(destinations) + ")");, +	private Method getMostSpecificMethod() {, +		if (AopUtils.isAopProxy(this.bean)) {, +			Class<?> target = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(getMethod(), target);, +		}, +		else {, +			return getMethod();, +		}, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.aop.framework.AopProxyUtils;, +import org.springframework.aop.support.AopUtils;, +		Method specificMethod = getMostSpecificMethod();, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +						+ specificMethod + "' one destination must be set (got " + Arrays.toString(destinations) + ")");, +	private Method getMostSpecificMethod() {, +		if (AopUtils.isAopProxy(this.bean)) {, +			Class<?> target = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(getMethod(), target);, +		}, +		else {, +			return getMethod();, +		}, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java, +import java.lang.reflect.Method;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.messaging.handler.annotation.SendTo;, +import org.springframework.transaction.PlatformTransactionManager;, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.Transactional;, +import org.springframework.util.ReflectionUtils;, +import static org.hamcrest.CoreMatchers.*;, +import static org.mockito.Mockito.*;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +		try {, +		finally {, +			context.close();, +		}, +	}, +, +	@Test, +	public void sendToAnnotationFoundOnProxy() {, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(, +				Config.class, ProxyConfig.class, ProxyTestBean.class);, +		try {, +			JmsListenerContainerTestFactory factory = context.getBean(JmsListenerContainerTestFactory.class);, +			assertEquals("one container should have been registered", 1, factory.getListenerContainers().size());, +			JmsListenerEndpoint endpoint = factory.getListenerContainers().get(0).getEndpoint();, +			Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination");, +			ReflectionUtils.makeAccessible(m);, +			Object destination = ReflectionUtils.invokeMethod(m, endpoint);, +			assertEquals("SendTo annotation not found on proxy", "foobar", destination);, +		}, +		finally {, +			context.close();, +		}, +	}, +, +	@Test, +	public void invalidProxy() {, +		thrown.expect(BeanCreationException.class);, +		thrown.expectCause(is(instanceOf(IllegalStateException.class)));, +		thrown.expectMessage("handleIt2");, +		new AnnotationConfigApplicationContext(, +				Config.class, ProxyConfig.class, InvalidProxyTestBean.class);, +	}, +	@interface FooListener {, +	@Configuration, +	@EnableTransactionManagement, +	static class ProxyConfig {, +, +		@Bean, +		public PlatformTransactionManager transactionManager() {, +			return mock(PlatformTransactionManager.class);, +		}, +, +	}, +, +	interface SimpleService {, +, +		void handleIt(String body);, +, +	}, +, +	@Component, +	static class ProxyTestBean implements SimpleService {, +]