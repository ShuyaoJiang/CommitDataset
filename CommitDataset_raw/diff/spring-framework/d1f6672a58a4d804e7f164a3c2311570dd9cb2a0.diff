[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, +import org.springframework.context.annotation.AdviceModeImportSelector;, +import org.springframework.context.annotation.AnnotationConfigUtils;, +import org.springframework.context.annotation.AutoProxyRegistrar;, + * based on the value of {@link EnableCaching#mode} on the importing {@code @Configuration}, + * @see AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME, +public class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching> {, +	 * @return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for, +	 * {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively, +	public String[] selectImports(AdviceMode adviceMode) {, +		switch (adviceMode) {, +				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() };, +				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME };, +				return null;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, +import org.springframework.context.annotation.AdviceModeImportSelector;, +import org.springframework.context.annotation.AnnotationConfigUtils;, +import org.springframework.context.annotation.AutoProxyRegistrar;, + * based on the value of {@link EnableCaching#mode} on the importing {@code @Configuration}, + * @see AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME, +public class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching> {, +	 * @return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for, +	 * {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively, +	public String[] selectImports(AdviceMode adviceMode) {, +		switch (adviceMode) {, +				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() };, +				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME };, +				return null;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +import org.springframework.context.annotation.AutoProxyRegistrar;, +import org.springframework.context.annotation.Import;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, +import org.springframework.context.annotation.AdviceModeImportSelector;, +import org.springframework.context.annotation.AnnotationConfigUtils;, +import org.springframework.context.annotation.AutoProxyRegistrar;, + * based on the value of {@link EnableCaching#mode} on the importing {@code @Configuration}, + * @see AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME, +public class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching> {, +	 * @return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for, +	 * {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively, +	public String[] selectImports(AdviceMode adviceMode) {, +		switch (adviceMode) {, +				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() };, +				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME };, +				return null;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +import org.springframework.context.annotation.AutoProxyRegistrar;, +import org.springframework.context.annotation.Import;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + /*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import java.lang.annotation.Annotation;, +import java.util.Map;, +, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.util.Assert;, +, +/**, + * Convenient base class for {@link ImportSelector} implementations that select imports, + * based on an {@link AdviceMode} value from an annotation (such as the {@code @Enable*}, + * annotations)., + *, + * @param <A> Annotation containing {@linkplain #getAdviceModeAttributeName() AdviceMode, + * attribute}, + *, + * @author Chris Beams, + * @since 3.1, + */, +public abstract class AdviceModeImportSelector<A extends Annotation> implements ImportSelector {, +, +	public static final String DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME = "mode";, +, +	/**, +	 * The name of the {@link AdviceMode} attribute for the annotation specified by the, +	 * generic type {@code A}. The default is {@value #DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME},, +	 * but subclasses may override in order to customize., +	 */, +	protected String getAdviceModeAttributeName() {, +		return DEFAULT_ADVICE_MODE_ATTRIBUTE_NAME;, +	}, +, +	/**, +	 * {@inheritDoc}]