[+++ b/spring-context/src/main/java/org/springframework/messaging/Message.java, + * @see org.springframework.messaging.support.MessageBuilder, +	/**, +	 * Returns message headers for the message (never {@code null})., +	 */, +	/**, +	 * Returns the message payload., +	 */, +++ b/spring-context/src/main/java/org/springframework/messaging/Message.java, + * @see org.springframework.messaging.support.MessageBuilder, +	/**, +	 * Returns message headers for the message (never {@code null})., +	 */, +	/**, +	 * Returns the message payload., +	 */, +++ b/spring-context/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * Constant for sending a message without a prescribed timeout., +	 */, +	public static final long INDEFINITE_TIMEOUT = -1;, +, +, +	/**, +	 * non-recoverable errors. Otherwise, if the Message cannot be sent for a non-fatal, +	 * reason this method will return 'false', and if the Message is sent successfully, it, +	 * will return 'true'., +	 * <p>Depending on the implementation, this method may block indefinitely. To provide a, +	 * maximum wait time, use {@link #send(Message, long)}., +	 * Send a message, blocking until either the message is accepted or the specified, +	 * timeout period elapses., +	 * @param timeout the timeout in milliseconds or #INDEFINITE_TIMEOUT, +	 * @return {@code true} if the message is sent successfully, {@code false} if the, +	 *         specified timeout period elapses or the send is interrupted, +++ b/spring-context/src/main/java/org/springframework/messaging/Message.java, + * @see org.springframework.messaging.support.MessageBuilder, +	/**, +	 * Returns message headers for the message (never {@code null})., +	 */, +	/**, +	 * Returns the message payload., +	 */, +++ b/spring-context/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * Constant for sending a message without a prescribed timeout., +	 */, +	public static final long INDEFINITE_TIMEOUT = -1;, +, +, +	/**, +	 * non-recoverable errors. Otherwise, if the Message cannot be sent for a non-fatal, +	 * reason this method will return 'false', and if the Message is sent successfully, it, +	 * will return 'true'., +	 * <p>Depending on the implementation, this method may block indefinitely. To provide a, +	 * maximum wait time, use {@link #send(Message, long)}., +	 * Send a message, blocking until either the message is accepted or the specified, +	 * timeout period elapses., +	 * @param timeout the timeout in milliseconds or #INDEFINITE_TIMEOUT, +	 * @return {@code true} if the message is sent successfully, {@code false} if the, +	 *         specified timeout period elapses or the send is interrupted, +++ b/spring-context/src/main/java/org/springframework/messaging/MessageHandler.java, +	 * message this will result in a {@code MessageRejectedException} e.g., +	 * message, but fails to do so, a {@code MessageHandlingException} is, +	 * {@code MessageDeliveryException}., +	/*, +	 * TODO: exceptions, +	 * @throws org.springframework.integration.MessageRejectedException if the handler doesn't accept the message, +	 * @throws org.springframework.integration.MessageHandlingException when something fails during the handling, +	 * @throws org.springframework.integration.MessageDeliveryException when this handler failed to deliver the, +	 */, +, +++ b/spring-context/src/main/java/org/springframework/messaging/Message.java, + * @see org.springframework.messaging.support.MessageBuilder, +	/**, +	 * Returns message headers for the message (never {@code null})., +	 */, +	/**, +	 * Returns the message payload., +	 */, +++ b/spring-context/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * Constant for sending a message without a prescribed timeout., +	 */, +	public static final long INDEFINITE_TIMEOUT = -1;, +, +, +	/**, +	 * non-recoverable errors. Otherwise, if the Message cannot be sent for a non-fatal, +	 * reason this method will return 'false', and if the Message is sent successfully, it, +	 * will return 'true'., +	 * <p>Depending on the implementation, this method may block indefinitely. To provide a, +	 * maximum wait time, use {@link #send(Message, long)}., +	 * Send a message, blocking until either the message is accepted or the specified, +	 * timeout period elapses., +	 * @param timeout the timeout in milliseconds or #INDEFINITE_TIMEOUT, +	 * @return {@code true} if the message is sent successfully, {@code false} if the, +	 *         specified timeout period elapses or the send is interrupted, +++ b/spring-context/src/main/java/org/springframework/messaging/MessageHandler.java, +	 * message this will result in a {@code MessageRejectedException} e.g., +	 * message, but fails to do so, a {@code MessageHandlingException} is, +	 * {@code MessageDeliveryException}., +	/*, +	 * TODO: exceptions]