[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, +import org.springframework.util.Assert;, + * Extension of {@code Cookie} with extra directives, as defined in, +, +, +	 * Constructor with the cookie name and value., +	 * @param name  the name, +	 * @param value the value, +, +	 * Add the "SameSite" attribute to the cookie., +	 * <p>This limits the scope of the cookie such that it will only be attached, +	 * to same site requests if {@code "Strict"} or cross-site requests if, +	 * {@code "Lax"}., +	 * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>, +	public void setSameSite(@Nullable String sameSite) {, +		this.sameSite = sameSite;, +	 * Return the "SameSite" attribute, or {@code null} if not set., +, +	 * Factory method that parses the value of a "Set-Cookie" header., +	 * @param setCookieHeader the "Set-Cookie" value, +	 * @return the created cookie, +	public static MockCookie parse(String setCookieHeader) {, +		String[] cookieParts = setCookieHeader.split("\\s*=\\s*", 2);, +		Assert.isTrue(cookieParts.length == 2, "Invalid Set-Cookie header value");, +, +		String name = cookieParts[0];, +		String[] valueAndDirectives = cookieParts[1].split("\\s*;\\s*", 2);, +		String value = valueAndDirectives[0];, +		String[] directives = valueAndDirectives[1].split("\\s*;\\s*");, +, +		MockCookie cookie = new MockCookie(name, value);, +		for (String directive : directives) {, +			if (directive.startsWith("Domain")) {, +				cookie.setDomain(extractDirectiveValue(directive));, +			}, +			else if (directive.startsWith("Max-Age")) {, +				cookie.setMaxAge(Integer.parseInt(extractDirectiveValue(directive)));, +			}, +			else if (directive.startsWith("Path")) {, +				cookie.setPath(extractDirectiveValue(directive));, +			}, +			else if (directive.startsWith("Secure")) {, +				cookie.setSecure(true);, +			}, +			else if (directive.startsWith("HttpOnly")) {, +				cookie.setHttpOnly(true);, +			}, +			else if (directive.startsWith("SameSite")) {, +				cookie.setSameSite(extractDirectiveValue(directive));, +			}, +		}, +		return cookie;, +	}, +, +	private static String extractDirectiveValue(String directive) {, +		String[] nameAndValue = directive.split("=");, +		Assert.isTrue(nameAndValue.length == 2, () -> "No value in directive: '" + directive + "'");, +		return nameAndValue[1];, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, +import org.springframework.util.Assert;, + * Extension of {@code Cookie} with extra directives, as defined in, +, +, +	 * Constructor with the cookie name and value., +	 * @param name  the name, +	 * @param value the value, +, +	 * Add the "SameSite" attribute to the cookie., +	 * <p>This limits the scope of the cookie such that it will only be attached, +	 * to same site requests if {@code "Strict"} or cross-site requests if, +	 * {@code "Lax"}., +	 * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>, +	public void setSameSite(@Nullable String sameSite) {, +		this.sameSite = sameSite;, +	 * Return the "SameSite" attribute, or {@code null} if not set., +, +	 * Factory method that parses the value of a "Set-Cookie" header., +	 * @param setCookieHeader the "Set-Cookie" value, +	 * @return the created cookie, +	public static MockCookie parse(String setCookieHeader) {, +		String[] cookieParts = setCookieHeader.split("\\s*=\\s*", 2);, +		Assert.isTrue(cookieParts.length == 2, "Invalid Set-Cookie header value");, +, +		String name = cookieParts[0];, +		String[] valueAndDirectives = cookieParts[1].split("\\s*;\\s*", 2);, +		String value = valueAndDirectives[0];, +		String[] directives = valueAndDirectives[1].split("\\s*;\\s*");, +, +		MockCookie cookie = new MockCookie(name, value);, +		for (String directive : directives) {, +			if (directive.startsWith("Domain")) {, +				cookie.setDomain(extractDirectiveValue(directive));, +			}, +			else if (directive.startsWith("Max-Age")) {, +				cookie.setMaxAge(Integer.parseInt(extractDirectiveValue(directive)));, +			}, +			else if (directive.startsWith("Path")) {, +				cookie.setPath(extractDirectiveValue(directive));, +			}, +			else if (directive.startsWith("Secure")) {]