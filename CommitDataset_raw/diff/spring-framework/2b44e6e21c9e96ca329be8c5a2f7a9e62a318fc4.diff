[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +		return !this.mappedMethods.isEmpty();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +		return !this.mappedMethods.isEmpty();, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test(expected = IllegalStateException.class), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +		return !this.mappedMethods.isEmpty();, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test(expected = IllegalStateException.class), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +		return !this.mappedMethods.isEmpty();, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test(expected = IllegalStateException.class), +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +import java.util.HashMap;, +	private final Map<Class<? extends Throwable>, Method> mappedMethods = new HashMap<>(16);, +		if (result.isEmpty()) {, +			throw new IllegalStateException("No exception types mapped to " + method);, +		}, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test(expected = IllegalStateException.class), +, +, +, +]