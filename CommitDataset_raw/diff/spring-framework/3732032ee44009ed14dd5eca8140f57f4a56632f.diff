[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param callString the SQL call string, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param callString the SQL call string, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param sql the SQL statement to execute, +	 * @param sql the SQL statement to execute, +	 * @param sql the SQL statement to execute, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param callString the SQL call string, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param sql the SQL statement to execute, +	 * @param sql the SQL statement to execute, +	 * @param sql the SQL statement to execute, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Consumer;, +		PreparedStatementCreator psc = getPreparedStatementCreator(sql, paramSource, pscf -> {, +		});, +		return getJdbcOperations().update(psc, generatedKeyHolder);, +, +	 * Build a {@link PreparedStatementCreator} based on the given SQL and named parameters., +	 * <p>Note: Directly called from all {@code query} variants. Delegates to the common, +	 * {@link #getPreparedStatementCreator(String, SqlParameterSource, Consumer)} method., +	 * @param sql the SQL statement to execute, +	 * @return the corresponding {@link PreparedStatementCreator}, +	 * @see #getPreparedStatementCreator(String, SqlParameterSource, Consumer), +		return getPreparedStatementCreator(sql, paramSource, null);, +	}, +, +	/**, +	 * Build a {@link PreparedStatementCreator} based on the given SQL and named parameters., +	 * <p>Note: Used for the {@code update} variant with generated key handling, and also, +	 * delegated from {@link #getPreparedStatementCreator(String, SqlParameterSource)}., +	 * @param sql the SQL statement to execute, +	 * @param paramSource container of arguments to bind, +	 * @param customizer callback for setting further properties on the, +	 * {@link PreparedStatementCreatorFactory} in use), applied before the, +	 * actual {@code newPreparedStatementCreator} call, +	 * @return the corresponding {@link PreparedStatementCreator}, +	 * @since 5.0.5, +	 * @see #getParsedSql(String), +	 * @see PreparedStatementCreatorFactory#PreparedStatementCreatorFactory(String, List), +	 * @see PreparedStatementCreatorFactory#newPreparedStatementCreator(Object[]), +	 */, +	protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource,, +			@Nullable Consumer<PreparedStatementCreatorFactory> customizer) {, +, +		if (customizer != null) {, +			customizer.accept(pscf);, +		}, +		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null);, +	 * <p>The default implementation uses an LRU cache with an upper limit of 256 entries., +	 * @param sql the original SQL statement]