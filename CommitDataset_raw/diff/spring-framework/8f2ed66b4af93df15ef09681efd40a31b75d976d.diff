[+++ b/spring-core/src/main/java/org/springframework/util/NumberUtils.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +	/**, +	 * Standard number types (all immutable):, +	 * Byte, Short, Integer, Long, BigInteger, Float, Double, BigDecimal., +	 */, +	public static final Set<Class<?>> STANDARD_NUMBER_TYPES;, +, +	static {, +		Set<Class<?>> numberTypes = new HashSet<Class<?>>(8);, +		numberTypes.add(Byte.class);, +		numberTypes.add(Short.class);, +		numberTypes.add(Integer.class);, +		numberTypes.add(Long.class);, +		numberTypes.add(BigInteger.class);, +		numberTypes.add(Float.class);, +		numberTypes.add(Double.class);, +		numberTypes.add(BigDecimal.class);, +		STANDARD_NUMBER_TYPES = Collections.unmodifiableSet(numberTypes);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/NumberUtils.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +	/**, +	 * Standard number types (all immutable):, +	 * Byte, Short, Integer, Long, BigInteger, Float, Double, BigDecimal., +	 */, +	public static final Set<Class<?>> STANDARD_NUMBER_TYPES;, +, +	static {, +		Set<Class<?>> numberTypes = new HashSet<Class<?>>(8);, +		numberTypes.add(Byte.class);, +		numberTypes.add(Short.class);, +		numberTypes.add(Integer.class);, +		numberTypes.add(Long.class);, +		numberTypes.add(BigInteger.class);, +		numberTypes.add(Float.class);, +		numberTypes.add(Double.class);, +		numberTypes.add(BigDecimal.class);, +		STANDARD_NUMBER_TYPES = Collections.unmodifiableSet(numberTypes);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.util.NumberUtils;, +	protected static final Set<Class<?>> immutableValueTypes = new HashSet<Class<?>>(16);, +, +	static {, +		immutableValueTypes.addAll(NumberUtils.STANDARD_NUMBER_TYPES);, +		immutableValueTypes.add(Boolean.class);, +		immutableValueTypes.add(Character.class);, +		immutableValueTypes.add(String.class);, +	}, +, +	 * {@code Character}, {@code Boolean} and standard {@code Number} values., +		return (value == null || immutableValueTypes.contains(value.getClass()));]