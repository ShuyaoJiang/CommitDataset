[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import java.util.concurrent.Future;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.ReflectionUtils;, + * {@code org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor}, + * @author Stephane Nicoll, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private AsyncUncaughtExceptionHandler exceptionHandler;, +, +	 * @param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use, +	 */, +	public AsyncExecutionAspectSupport(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {, +		this.defaultExecutor = defaultExecutor;, +		this.exceptionHandler = exceptionHandler;, +	}, +, +	/**, +	 * Create a new instance with a default {@link AsyncUncaughtExceptionHandler}., +		this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler());, +	 * Supply the {@link AsyncUncaughtExceptionHandler} to use to handle exceptions, +	 * thrown by invoking asynchronous methods with a {@code void} return type., +	 */, +	public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {, +		this.exceptionHandler = exceptionHandler;, +	}, +, +	/**, +	/**, +	 * Handles a fatal error thrown while asynchronously invoking the specified, +	 * {@link Method}., +	 * <p>If the return type of the method is a {@link java.util.concurrent.Future} object, the original, +	 * exception can be propagated by just throwing it at the higher level. However,, +	 * for all other cases, the exception will not be transmitted back to the client., +	 * In that later case, the current {@link AsyncUncaughtExceptionHandler} will be, +	 * used to manage such exception., +	 * @param ex the exception to handle, +	 * @param method the method that was invoked, +	 * @param params the parameters used to invoke the method, +	 */, +	protected void handleError(Throwable ex, Method method, Object... params) throws Exception {, +		if (method.getReturnType().isAssignableFrom(Future.class)) {, +			ReflectionUtils.rethrowException(ex);, +		}, +		else {, +			// Could not transmit the exception to the caller with default executor, +			try {, +				this.exceptionHandler.handleUncaughtException(ex, method, params);, +			}, +			catch (Throwable ex2) {, +				logger.error("Exception handler for async method '" + method.toGenericString() +, +						"' threw unexpected exception itself", ex2);, +			}, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import java.util.concurrent.Future;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.ReflectionUtils;, + * {@code org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor}, + * @author Stephane Nicoll, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private AsyncUncaughtExceptionHandler exceptionHandler;, +, +	 * @param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use, +	 */, +	public AsyncExecutionAspectSupport(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {, +		this.defaultExecutor = defaultExecutor;, +		this.exceptionHandler = exceptionHandler;, +	}, +, +	/**, +	 * Create a new instance with a default {@link AsyncUncaughtExceptionHandler}., +		this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler());, +	 * Supply the {@link AsyncUncaughtExceptionHandler} to use to handle exceptions, +	 * thrown by invoking asynchronous methods with a {@code void} return type., +	 */, +	public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler) {, +		this.exceptionHandler = exceptionHandler;, +	}, +, +	/**, +	/**, +	 * Handles a fatal error thrown while asynchronously invoking the specified, +	 * {@link Method}., +	 * <p>If the return type of the method is a {@link java.util.concurrent.Future} object, the original, +	 * exception can be propagated by just throwing it at the higher level. However,, +	 * for all other cases, the exception will not be transmitted back to the client., +	 * In that later case, the current {@link AsyncUncaughtExceptionHandler} will be, +	 * used to manage such exception., +	 * @param ex the exception to handle, +	 * @param method the method that was invoked, +	 * @param params the parameters used to invoke the method, +	 */]