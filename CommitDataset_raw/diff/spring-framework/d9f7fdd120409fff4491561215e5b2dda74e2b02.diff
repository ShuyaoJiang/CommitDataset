[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, +		this.annotationMetadata = new StandardAnnotationMetadata(beanClass, true);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, +		this.annotationMetadata = new StandardAnnotationMetadata(beanClass, true);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ClassUtils;, +, +, +, +	public ComponentScanAnnotationParser(, +			ResourceLoader resourceLoader, Environment environment, BeanDefinitionRegistry registry) {, +, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan) {, +			new ClassPathBeanDefinitionScanner(registry, componentScan.getBoolean("useDefaultFilters"));, +				componentScan.getClass("nameGenerator", BeanNameGenerator.class)));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy", ScopedProxyMode.class);, +					componentScan.getClass("scopeResolver", ScopeMetadataResolver.class)));, +		scanner.setResourcePattern(componentScan.getString("resourcePattern"));, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("includeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("excludeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (String pkg : componentScan.getStringArray("value")) {, +		for (String pkg : componentScan.getStringArray("basePackages")) {, +		for (Class<?> clazz : componentScan.getClassArray("basePackageClasses")) {, +			basePackages.add(ClassUtils.getPackageName(clazz));, +	private List<TypeFilter> typeFiltersFor(AnnotationAttributes filterAttributes) {, +		FilterType filterType = filterAttributes.getEnum("type", FilterType.class);, +, +		for (Class<?> filterClass : filterAttributes.getClassArray("value")) {, +			switch (filterType) {, +					throw new IllegalArgumentException("unknown filter type " + filterType);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, +		this.annotationMetadata = new StandardAnnotationMetadata(beanClass, true);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ClassUtils;, +, +, +, +	public ComponentScanAnnotationParser(, +			ResourceLoader resourceLoader, Environment environment, BeanDefinitionRegistry registry) {, +, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan) {, +			new ClassPathBeanDefinitionScanner(registry, componentScan.getBoolean("useDefaultFilters"));, +				componentScan.getClass("nameGenerator", BeanNameGenerator.class)));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy", ScopedProxyMode.class);, +					componentScan.getClass("scopeResolver", ScopeMetadataResolver.class)));, +		scanner.setResourcePattern(componentScan.getString("resourcePattern"));, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("includeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("excludeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (String pkg : componentScan.getStringArray("value")) {, +		for (String pkg : componentScan.getStringArray("basePackages")) {, +		for (Class<?> clazz : componentScan.getClassArray("basePackageClasses")) {, +			basePackages.add(ClassUtils.getPackageName(clazz));, +	private List<TypeFilter> typeFiltersFor(AnnotationAttributes filterAttributes) {, +		FilterType filterType = filterAttributes.getEnum("type", FilterType.class);, +, +		for (Class<?> filterClass : filterAttributes.getClassArray("value")) {, +			switch (filterType) {, +					throw new IllegalArgumentException("unknown filter type " + filterType);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * Copyright 2002-2012 the original author or authors., +		this.metadata = new StandardAnnotationMetadata(clazz, true);, +		this.metadata = new StandardAnnotationMetadata(clazz, true);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, +		this.annotationMetadata = new StandardAnnotationMetadata(beanClass, true);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ClassUtils;, +, +, +, +	public ComponentScanAnnotationParser(, +			ResourceLoader resourceLoader, Environment environment, BeanDefinitionRegistry registry) {, +, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan) {, +			new ClassPathBeanDefinitionScanner(registry, componentScan.getBoolean("useDefaultFilters"));, +				componentScan.getClass("nameGenerator", BeanNameGenerator.class)));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy", ScopedProxyMode.class);, +					componentScan.getClass("scopeResolver", ScopeMetadataResolver.class)));, +		scanner.setResourcePattern(componentScan.getString("resourcePattern"));, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("includeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (AnnotationAttributes filter : componentScan.getAnnotationArray("excludeFilters")) {, +			for (TypeFilter typeFilter : typeFiltersFor(filter)) {, +		for (String pkg : componentScan.getStringArray("value")) {, +		for (String pkg : componentScan.getStringArray("basePackages")) {, +		for (Class<?> clazz : componentScan.getClassArray("basePackageClasses")) {, +			basePackages.add(ClassUtils.getPackageName(clazz));, +	private List<TypeFilter> typeFiltersFor(AnnotationAttributes filterAttributes) {, +		FilterType filterType = filterAttributes.getEnum("type", FilterType.class);, +, +		for (Class<?> filterClass : filterAttributes.getClassArray("value")) {]