[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.util.HashSet;, +	private final Set<Integer> registriesPostProcessed = new HashSet<Integer>();, +	private final Set<Integer> factoriesPostProcessed = new HashSet<Integer>();, +		int registryID = System.identityHashCode(registry);, +		if (this.registriesPostProcessed.contains(registryID)) {, +					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry);, +		if (this.factoriesPostProcessed.contains(registryID)) {, +					"postProcessBeanFactory already called for this post-processor against " + registry);, +		this.registriesPostProcessed.add(registryID);, +		int factoryID = System.identityHashCode(beanFactory);, +		if (this.factoriesPostProcessed.contains(factoryID)) {, +					"postProcessBeanFactory already called for this post-processor against " + beanFactory);, +		this.factoriesPostProcessed.add(factoryID);, +		if (!this.registriesPostProcessed.contains(factoryID)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.util.HashSet;, +	private final Set<Integer> registriesPostProcessed = new HashSet<Integer>();, +	private final Set<Integer> factoriesPostProcessed = new HashSet<Integer>();, +		int registryID = System.identityHashCode(registry);, +		if (this.registriesPostProcessed.contains(registryID)) {, +					"postProcessBeanDefinitionRegistry already called for this post-processor against " + registry);, +		if (this.factoriesPostProcessed.contains(registryID)) {, +					"postProcessBeanFactory already called for this post-processor against " + registry);, +		this.registriesPostProcessed.add(registryID);, +		int factoryID = System.identityHashCode(beanFactory);, +		if (this.factoriesPostProcessed.contains(factoryID)) {, +					"postProcessBeanFactory already called for this post-processor against " + beanFactory);, +		this.factoriesPostProcessed.add(factoryID);, +		if (!this.registriesPostProcessed.contains(factoryID)) {, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test, +	public void testProcessingAllowedOnlyOncePerProcessorRegistryPair() {, +		DefaultListableBeanFactory bf1 = new DefaultListableBeanFactory();, +		DefaultListableBeanFactory bf2 = new DefaultListableBeanFactory();, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(bf1); // first invocation -- should succeed, +		try {, +			pp.postProcessBeanFactory(bf1); // second invocation for bf1 -- should throw, +			fail("expected exception");, +		} catch (IllegalStateException ex) {, +		}, +		pp.postProcessBeanFactory(bf2); // first invocation for bf2 -- should succeed, +		try {, +			pp.postProcessBeanFactory(bf2); // second invocation for bf2 -- should throw, +			fail("expected exception");, +		} catch (IllegalStateException ex) {, +		}, +	}, +]