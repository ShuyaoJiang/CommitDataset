[+++ b/spring-core/src/main/java/org/springframework/core/type/AnnotatedTypeMetadata.java, +	 * Determine whether the underlying element has an annotation or meta-annotation, +	 * of the given type defined., +	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if, +	 * defined on the underlying element, as direct annotation or meta-annotation),, +	 * also taking attribute overrides on composed annotations into account., +	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if, +	 * defined on the underlying element, as direct annotation or meta-annotation),, +	 * also taking attribute overrides on composed annotations into account., +	 * defined on the underlying element, as direct annotation or meta-annotation)., +	 * Note that this variant does <i>not</i> take attribute overrides into account., +	 * defined on the underlying element, as direct annotation or meta-annotation)., +	 * Note that this variant does <i>not</i> take attribute overrides into account., +++ b/spring-core/src/main/java/org/springframework/core/type/AnnotatedTypeMetadata.java, +	 * Determine whether the underlying element has an annotation or meta-annotation, +	 * of the given type defined., +	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if, +	 * defined on the underlying element, as direct annotation or meta-annotation),, +	 * also taking attribute overrides on composed annotations into account., +	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if, +	 * defined on the underlying element, as direct annotation or meta-annotation),, +	 * also taking attribute overrides on composed annotations into account., +	 * defined on the underlying element, as direct annotation or meta-annotation)., +	 * Note that this variant does <i>not</i> take attribute overrides into account., +	 * defined on the underlying element, as direct annotation or meta-annotation)., +	 * Note that this variant does <i>not</i> take attribute overrides into account., +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, +, +		allMeta = method.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get("additional");, +		assertThat(new HashSet<Object>(allMeta), is(equalTo(new HashSet<Object>(Arrays.asList("direct")))));, +			allMeta = metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get("additional");, +			assertThat(new HashSet<Object>(allMeta), is(equalTo(new HashSet<Object>(Arrays.asList("direct")))));, +, +		String additional() default "direct";, +	@Target(ElementType.TYPE), +, +		String additional() default "meta";, +		}, +	@SpecialAttr(clazz = String.class, state = Thread.State.NEW,, +			nestedAnno = @NestedAnno(value = "na", anEnum = SomeEnum.LABEL1, classArray = {String.class}),, +			nestedAnnoArray = {@NestedAnno, @NestedAnno(value = "na1", anEnum = SomeEnum.LABEL2, classArray = {Number.class})})]