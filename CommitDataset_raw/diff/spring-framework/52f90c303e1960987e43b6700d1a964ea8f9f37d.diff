[+++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java, +		this.log.fatal(LogMessage.of(messageSupplier));, +		this.log.fatal(LogMessage.of(messageSupplier), cause);, +		this.log.error(LogMessage.of(messageSupplier));, +		this.log.error(LogMessage.of(messageSupplier), cause);, +		this.log.warn(LogMessage.of(messageSupplier));, +		this.log.warn(LogMessage.of(messageSupplier), cause);, +		this.log.info(LogMessage.of(messageSupplier));, +		this.log.info(LogMessage.of(messageSupplier), cause);, +		this.log.debug(LogMessage.of(messageSupplier));, +		this.log.debug(LogMessage.of(messageSupplier), cause);, +		this.log.trace(LogMessage.of(messageSupplier));, +		this.log.trace(LogMessage.of(messageSupplier), cause);, +++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java, +		this.log.fatal(LogMessage.of(messageSupplier));, +		this.log.fatal(LogMessage.of(messageSupplier), cause);, +		this.log.error(LogMessage.of(messageSupplier));, +		this.log.error(LogMessage.of(messageSupplier), cause);, +		this.log.warn(LogMessage.of(messageSupplier));, +		this.log.warn(LogMessage.of(messageSupplier), cause);, +		this.log.info(LogMessage.of(messageSupplier));, +		this.log.info(LogMessage.of(messageSupplier), cause);, +		this.log.debug(LogMessage.of(messageSupplier));, +		this.log.debug(LogMessage.of(messageSupplier), cause);, +		this.log.trace(LogMessage.of(messageSupplier));, +		this.log.trace(LogMessage.of(messageSupplier), cause);, +++ b/spring-core/src/main/java/org/springframework/core/log/LogMessage.java, + * @see #of(Supplier), +	 * Build a lazily resolving message from the given supplier., +	public static LogMessage of(Supplier<? extends CharSequence> supplier) {, +		return new SupplierMessage(supplier);, +	 * Build a lazily formatted message from the given format string and argument., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and varargs., +	private static final class SupplierMessage extends LogMessage {, +		SupplierMessage(Supplier<? extends CharSequence> supplier) {, +++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java, +		this.log.fatal(LogMessage.of(messageSupplier));, +		this.log.fatal(LogMessage.of(messageSupplier), cause);, +		this.log.error(LogMessage.of(messageSupplier));, +		this.log.error(LogMessage.of(messageSupplier), cause);, +		this.log.warn(LogMessage.of(messageSupplier));, +		this.log.warn(LogMessage.of(messageSupplier), cause);, +		this.log.info(LogMessage.of(messageSupplier));, +		this.log.info(LogMessage.of(messageSupplier), cause);, +		this.log.debug(LogMessage.of(messageSupplier));, +		this.log.debug(LogMessage.of(messageSupplier), cause);, +		this.log.trace(LogMessage.of(messageSupplier));, +		this.log.trace(LogMessage.of(messageSupplier), cause);, +++ b/spring-core/src/main/java/org/springframework/core/log/LogMessage.java, + * @see #of(Supplier), +	 * Build a lazily resolving message from the given supplier., +	public static LogMessage of(Supplier<? extends CharSequence> supplier) {, +		return new SupplierMessage(supplier);, +	 * Build a lazily formatted message from the given format string and argument., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and arguments., +	 * Build a lazily formatted message from the given format string and varargs., +	private static final class SupplierMessage extends LogMessage {, +		SupplierMessage(Supplier<? extends CharSequence> supplier) {, +++ b/spring-core/src/test/java/org/springframework/core/log/LogSupportTests.java, +		LogMessage msg = LogMessage.of(() -> new StringBuilder("a").append(" b"));]