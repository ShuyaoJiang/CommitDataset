[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +	private class MethodSignatureImpl implements MethodSignature {, +, +		private volatile String[] parameterNames;, +			if (this.parameterNames == null) {, +				this.parameterNames = (new LocalVariableTableParameterNameDiscoverer()).getParameterNames(getMethod());, +			}, +			return this.parameterNames;, +		private String toString(boolean includeModifier, boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName, boolean useLongTypeName) {, +				appendType(sb, getReturnType(), useLongReturnAndArgumentTypeName);, +			appendTypes(sb, parametersTypes, includeReturnTypeAndArgs, useLongReturnAndArgumentTypeName);, +			}, +			else {, +		private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {, +			else {, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +	private class MethodSignatureImpl implements MethodSignature {, +, +		private volatile String[] parameterNames;, +			if (this.parameterNames == null) {, +				this.parameterNames = (new LocalVariableTableParameterNameDiscoverer()).getParameterNames(getMethod());, +			}, +			return this.parameterNames;, +		private String toString(boolean includeModifier, boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName, boolean useLongTypeName) {, +				appendType(sb, getReturnType(), useLongReturnAndArgumentTypeName);, +			appendTypes(sb, parametersTypes, includeReturnTypeAndArgs, useLongReturnAndArgumentTypeName);, +			}, +			else {, +		private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {, +			else {, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			// May be null. Get as late as possible to minimize the time we "own" the target,, +		// If we get here, otherProxy is the other AopProxy., +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +	private class MethodSignatureImpl implements MethodSignature {, +, +		private volatile String[] parameterNames;, +			if (this.parameterNames == null) {, +				this.parameterNames = (new LocalVariableTableParameterNameDiscoverer()).getParameterNames(getMethod());, +			}, +			return this.parameterNames;, +		private String toString(boolean includeModifier, boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName, boolean useLongTypeName) {, +				appendType(sb, getReturnType(), useLongReturnAndArgumentTypeName);, +			appendTypes(sb, parametersTypes, includeReturnTypeAndArgs, useLongReturnAndArgumentTypeName);, +			}, +			else {, +		private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {, +			else {, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			// May be null. Get as late as possible to minimize the time we "own" the target,, +		// If we get here, otherProxy is the other AopProxy., +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.BridgeMethodResolver;, +		this.method = BridgeMethodResolver.findBridgedMethod(method);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +	private class MethodSignatureImpl implements MethodSignature {, +, +		private volatile String[] parameterNames;, +			if (this.parameterNames == null) {, +				this.parameterNames = (new LocalVariableTableParameterNameDiscoverer()).getParameterNames(getMethod());, +			}, +			return this.parameterNames;, +		private String toString(boolean includeModifier, boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName, boolean useLongTypeName) {, +				appendType(sb, getReturnType(), useLongReturnAndArgumentTypeName);, +			appendTypes(sb, parametersTypes, includeReturnTypeAndArgs, useLongReturnAndArgumentTypeName);, +			}, +			else {, +		private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {, +			else {, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			// May be null. Get as late as possible to minimize the time we "own" the target,, +		// If we get here, otherProxy is the other AopProxy., +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/ReflectiveMethodInvocation.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.BridgeMethodResolver;, +		this.method = BridgeMethodResolver.findBridgedMethod(method);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java, + * Copyright 2002-2009 the original author or authors., +import static org.junit.Assert.*;]