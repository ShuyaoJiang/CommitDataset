[+++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, +	 * @throws IllegalStateException if an error occurs while retrieving or loading, +	 * the application context, +++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, +	 * @throws IllegalStateException if an error occurs while retrieving or loading, +	 * the application context, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, +	private final Map<MergedContextConfiguration, ApplicationContext> contextMap =, +			new ConcurrentHashMap<MergedContextConfiguration, ApplicationContext>(64);, +	private final Map<MergedContextConfiguration, Set<MergedContextConfiguration>> hierarchyMap =, +			new ConcurrentHashMap<MergedContextConfiguration, Set<MergedContextConfiguration>>(64);, +	 * Clear all contexts from the cache and clears context hierarchy information as well., +	public void clear() {, +	 * Clear hit and miss count statistics for the cache (i.e., resets counters to zero)., +	public void clearStatistics() {, +	public boolean contains(MergedContextConfiguration key) {, +	 * <p>The {@link #getHitCount() hit} and {@link #getMissCount() miss} counts will, +	 * be updated accordingly., +	 * @return the corresponding {@code ApplicationContext} instance, or {@code null}, +	 * if not found in the cache, +	public ApplicationContext get(MergedContextConfiguration key) {, +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context, +	 * for a queried key., +	public int getHitCount() {, +	public int getMissCount() {, +	 * Explicitly add an {@code ApplicationContext} instance to the cache under the given key., +	public void put(MergedContextConfiguration key, ApplicationContext context) {, +			Set<MergedContextConfiguration> list = this.hierarchyMap.get(parent);, +				this.hierarchyMap.put(parent, list);, +	public void remove(MergedContextConfiguration key, HierarchyMode hierarchyMode) {, +		List<MergedContextConfiguration> removedContexts = new ArrayList<MergedContextConfiguration>();, +			for (Set<MergedContextConfiguration> children : this.hierarchyMap.values()) {, +		for (MergedContextConfiguration currentKey : this.hierarchyMap.keySet()) {, +			if (this.hierarchyMap.get(currentKey).isEmpty()) {, +				this.hierarchyMap.remove(currentKey);, +		Set<MergedContextConfiguration> children = this.hierarchyMap.get(key);, +			// Remove the set of children for the current context from the hierarchy map., +			this.hierarchyMap.remove(key);, +		ApplicationContext context = this.contextMap.remove(key);, +	public int size() {, +	public int getParentContextCount() {, +	 * as the {@linkplain #getHitCount() hit}, {@linkplain #getMissCount() miss},, +	 * and {@linkplain #getParentContextCount() parent context} counts., +		return new ToStringCreator(this), +				.append("size", size()), +				.append("hitCount", getHitCount()), +				.append("missCount", getMissCount()), +				.append("parentContextCount", getParentContextCount()), +++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, +	 * @throws IllegalStateException if an error occurs while retrieving or loading, +	 * the application context, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, +	private final Map<MergedContextConfiguration, ApplicationContext> contextMap =, +			new ConcurrentHashMap<MergedContextConfiguration, ApplicationContext>(64);, +	private final Map<MergedContextConfiguration, Set<MergedContextConfiguration>> hierarchyMap =, +			new ConcurrentHashMap<MergedContextConfiguration, Set<MergedContextConfiguration>>(64);, +	 * Clear all contexts from the cache and clears context hierarchy information as well., +	public void clear() {, +	 * Clear hit and miss count statistics for the cache (i.e., resets counters to zero)., +	public void clearStatistics() {, +	public boolean contains(MergedContextConfiguration key) {, +	 * <p>The {@link #getHitCount() hit} and {@link #getMissCount() miss} counts will, +	 * be updated accordingly., +	 * @return the corresponding {@code ApplicationContext} instance, or {@code null}, +	 * if not found in the cache, +	public ApplicationContext get(MergedContextConfiguration key) {, +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context, +	 * for a queried key., +	public int getHitCount() {, +	public int getMissCount() {, +	 * Explicitly add an {@code ApplicationContext} instance to the cache under the given key., +	public void put(MergedContextConfiguration key, ApplicationContext context) {, +			Set<MergedContextConfiguration> list = this.hierarchyMap.get(parent);, +				this.hierarchyMap.put(parent, list);, +	public void remove(MergedContextConfiguration key, HierarchyMode hierarchyMode) {, +		List<MergedContextConfiguration> removedContexts = new ArrayList<MergedContextConfiguration>();, +			for (Set<MergedContextConfiguration> children : this.hierarchyMap.values()) {, +		for (MergedContextConfiguration currentKey : this.hierarchyMap.keySet()) {, +			if (this.hierarchyMap.get(currentKey).isEmpty()) {, +				this.hierarchyMap.remove(currentKey);, +		Set<MergedContextConfiguration> children = this.hierarchyMap.get(key);, +			// Remove the set of children for the current context from the hierarchy map., +			this.hierarchyMap.remove(key);, +		ApplicationContext context = this.contextMap.remove(key);, +	public int size() {, +	public int getParentContextCount() {, +	 * as the {@linkplain #getHitCount() hit}, {@linkplain #getMissCount() miss},, +	 * and {@linkplain #getParentContextCount() parent context} counts., +		return new ToStringCreator(this), +				.append("size", size()), +				.append("hitCount", getHitCount()), +				.append("missCount", getMissCount()), +				.append("parentContextCount", getParentContextCount()), +++ b/spring-test/src/main/java/org/springframework/test/context/DefaultCacheAwareContextLoaderDelegate.java, +, +, +		Assert.notNull(contextLoader, "Cannot load an ApplicationContext with a NULL 'contextLoader'. " +, +				"Consider annotating your test class with @ContextConfiguration or @ContextHierarchy.");, +			Assert.notNull(locations, "Cannot load an ApplicationContext with a NULL 'locations' array. " +, +					"Consider annotating your test class with @ContextConfiguration or @ContextHierarchy.");]