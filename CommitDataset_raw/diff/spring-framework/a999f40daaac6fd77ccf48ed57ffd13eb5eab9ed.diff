[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +	private final Decoder<?> decoder;, +	/**, +	 * Constructor with JSON {@code Encoder} for encoding objects., +	 */, +	public ServerSentEventHttpMessageReader(Decoder<?> decoder) {, +		Assert.notNull(decoder, "Decoder must not be null");, +		this.decoder = decoder;, +	@Override, +	public List<MediaType> getReadableMediaTypes() {, +		return Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, +	}, +		boolean shouldWrap = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, +		ResolvableType valueType = shouldWrap ? elementType.getGeneric(0) : elementType;, +					ServerSentEvent<Object> event = buildEvent(lines, valueType, hints);, +					return (shouldWrap ? Mono.just(event) : Mono.justOrEmpty(event.data()));, +	private ServerSentEvent<Object> buildEvent(String[] lines, ResolvableType valueType,, +			Map<String, Object> hints) {, +			sseBuilder.data(decodeData(data, valueType, hints));, +		return this.decoder, +				.decodeToMono(input, dataType, MediaType.TEXT_EVENT_STREAM, hints), +		// For single String give StringDecoder a chance which comes after SSE in the order, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +	private final Decoder<?> decoder;, +	/**, +	 * Constructor with JSON {@code Encoder} for encoding objects., +	 */, +	public ServerSentEventHttpMessageReader(Decoder<?> decoder) {, +		Assert.notNull(decoder, "Decoder must not be null");, +		this.decoder = decoder;, +	@Override, +	public List<MediaType> getReadableMediaTypes() {, +		return Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, +	}, +		boolean shouldWrap = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, +		ResolvableType valueType = shouldWrap ? elementType.getGeneric(0) : elementType;, +					ServerSentEvent<Object> event = buildEvent(lines, valueType, hints);, +					return (shouldWrap ? Mono.just(event) : Mono.justOrEmpty(event.data()));, +	private ServerSentEvent<Object> buildEvent(String[] lines, ResolvableType valueType,, +			Map<String, Object> hints) {, +			sseBuilder.data(decodeData(data, valueType, hints));, +		return this.decoder, +				.decodeToMono(input, dataType, MediaType.TEXT_EVENT_STREAM, hints), +		// For single String give StringDecoder a chance which comes after SSE in the order, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, + * {@code ServerHttpMessageWriter} for {@code "text/event-stream"} responses., + * @author Rossen Stoyanchev, +	private static final List<MediaType> WRITABLE_MEDIA_TYPES =, +			Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, +, +, +	private final Encoder<?> encoder;, +, +, +	 * Constructor with JSON {@code Encoder} for encoding objects. Support for, +	 * {@code String} event data is built-in., +	public ServerSentEventHttpMessageWriter(Encoder<?> encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.encoder = encoder;, +, +	@Override, +	public List<MediaType> getWritableMediaTypes() {, +		return WRITABLE_MEDIA_TYPES;, +	public Mono<Void> write(Publisher<?> input, ResolvableType elementType, MediaType mediaType,, +		return message.writeAndFlushWith(encode(input, message.bufferFactory(), elementType, hints));, +	private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, DataBufferFactory factory,, +			ResolvableType elementType, Map<String, Object> hints) {, +		ResolvableType valueType = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass()) ?, +				elementType.getGeneric(0) : elementType;, +, +		return Flux.from(input).map(element -> {, +, +			ServerSentEvent<?> sse = element instanceof ServerSentEvent ?, +					(ServerSentEvent<?>) element : ServerSentEvent.builder().data(element).build();, +, +			sse.id().ifPresent(v -> writeField("id", v, sb));, +			sse.event().ifPresent(v -> writeField("event", v, sb));, +			sse.retry().ifPresent(v -> writeField("retry", v.toMillis(), sb));, +			sse.comment().ifPresent(v -> sb.append(':').append(v.replaceAll("\\n", "\n:")).append("\n"));, +			sse.data().ifPresent(v -> sb.append("data:"));, +, +			return Flux.concat(encodeText(sb, factory),, +					encodeData(sse, valueType, factory, hints),, +					encodeText("\n", factory));, +	private <T> Flux<DataBuffer> encodeData(ServerSentEvent<?> event, ResolvableType valueType,, +			DataBufferFactory factory, Map<String, Object> hints) {, +, +		Object data = event.data().orElse(null);, +		if (data == null) {, +			return Flux.empty();, +		if (data instanceof String) {, +			String text = (String) data;, +			return Flux.from(encodeText(text.replaceAll("\\n", "\ndata:") + "\n", factory));, +		}, +, +		return ((Encoder<T>) this.encoder), +				.encode(Mono.just((T) data), factory, valueType, MediaType.TEXT_EVENT_STREAM, hints), +				.concatWith(encodeText("\n", factory));, +	}, +]