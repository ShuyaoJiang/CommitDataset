[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassWithConditionTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void metaConditionalWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(ConfigurationWithMetaCondition.class.getName()));, +		ctx.refresh();, +		assertTrue(ctx.containsBean("bean"));, +	}, +, +	@Test, +		assertFalse(ctx.containsBean("bean1"));, +	}, +, +	@Test, +	public void nonConfigurationClassWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(NonConfigurationClass.class.getName()));, +		ctx.refresh();, +		assertFalse(ctx.containsBean("bean1"));, +		assertFalse(ctx.containsBean("bean1"));, +	}, +, +	@Test, +	public void methodConditionalWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(ConditionOnMethodConfiguration.class.getName()));, +		ctx.refresh();, +		assertFalse(ctx.containsBean("bean1"));, +, +, +, +, +	public @interface MetaConditional {, +, +	public @interface Never {, +	}, +, +	@Conditional(AlwaysCondition.class), +	@Never, +	@Retention(RetentionPolicy.RUNTIME), +	@Target({ElementType.TYPE, ElementType.METHOD}), +	public @interface MetaNever {, +	@MetaNever, +, +		@Bean, +		public ExampleBean bean1() {, +			return new ExampleBean();, +		}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassWithConditionTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void metaConditionalWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(ConfigurationWithMetaCondition.class.getName()));, +		ctx.refresh();, +		assertTrue(ctx.containsBean("bean"));, +	}, +, +	@Test, +		assertFalse(ctx.containsBean("bean1"));, +	}, +, +	@Test, +	public void nonConfigurationClassWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(NonConfigurationClass.class.getName()));, +		ctx.refresh();, +		assertFalse(ctx.containsBean("bean1"));, +		assertFalse(ctx.containsBean("bean1"));, +	}, +, +	@Test, +	public void methodConditionalWithAsm() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(ConditionOnMethodConfiguration.class.getName()));, +		ctx.refresh();, +		assertFalse(ctx.containsBean("bean1"));, +, +, +, +, +	public @interface MetaConditional {, +, +	public @interface Never {, +	}, +, +	@Conditional(AlwaysCondition.class), +	@Never, +	@Retention(RetentionPolicy.RUNTIME), +	@Target({ElementType.TYPE, ElementType.METHOD}), +	public @interface MetaNever {, +	@MetaNever, +, +		@Bean, +		public ExampleBean bean1() {, +			return new ExampleBean();, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassWithConditionTests.java]