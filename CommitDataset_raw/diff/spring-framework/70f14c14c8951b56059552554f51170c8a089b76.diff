[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, +	private DataBufferFactory bufferFactory = new DefaultDataBufferFactory(false);, +	public void setDataBufferFactory(DataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "DataBufferFactory must not be null");, +		this.bufferFactory = bufferFactory;, +	}, +, +	public DataBufferFactory getDataBufferFactory() {, +		return this.bufferFactory;, +		ServerHttpRequest request = new UndertowServerHttpRequest(exchange, getDataBufferFactory());, +		ServerHttpResponse response = new UndertowServerHttpResponse(exchange, getDataBufferFactory());, +		HandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(exchange);, +		getHttpHandler().handle(request, response).subscribe(resultSubscriber);, +	}, +, +, +	private class HandlerResultSubscriber implements Subscriber<Void> {, +, +		private final HttpServerExchange exchange;, +, +, +		public HandlerResultSubscriber(HttpServerExchange exchange) {, +			this.exchange = exchange;, +		}, +, +, +, +			if (!this.exchange.isResponseStarted() && this.exchange.getStatusCode() < 500) {, +				this.exchange.setStatusCode(500);, +			this.exchange.endExchange();, +, +			this.exchange.endExchange();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, +	private DataBufferFactory bufferFactory = new DefaultDataBufferFactory(false);, +	public void setDataBufferFactory(DataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "DataBufferFactory must not be null");, +		this.bufferFactory = bufferFactory;, +	}, +, +	public DataBufferFactory getDataBufferFactory() {, +		return this.bufferFactory;, +		ServerHttpRequest request = new UndertowServerHttpRequest(exchange, getDataBufferFactory());, +		ServerHttpResponse response = new UndertowServerHttpResponse(exchange, getDataBufferFactory());, +		HandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(exchange);, +		getHttpHandler().handle(request, response).subscribe(resultSubscriber);, +	}, +, +, +	private class HandlerResultSubscriber implements Subscriber<Void> {, +, +		private final HttpServerExchange exchange;, +, +, +		public HandlerResultSubscriber(HttpServerExchange exchange) {, +			this.exchange = exchange;, +		}, +, +, +, +			if (!this.exchange.isResponseStarted() && this.exchange.getStatusCode() < 500) {, +				this.exchange.setStatusCode(500);, +			this.exchange.endExchange();, +, +			this.exchange.endExchange();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java, +	public UndertowServerHttpRequest(HttpServerExchange exchange, DataBufferFactory bufferFactory) {, +		this.body = new RequestBodyPublisher(exchange, bufferFactory);, +		this.body.registerListeners(exchange);, +		Assert.notNull(exchange, "HttpServerExchange is required.");, +		private final StreamSourceChannel channel;, +		private final DataBufferFactory bufferFactory;, +, +		public RequestBodyPublisher(HttpServerExchange exchange, DataBufferFactory bufferFactory) {, +			this.channel = exchange.getRequestChannel();, +			this.bufferFactory = bufferFactory;, +		private void registerListeners(HttpServerExchange exchange) {, +			this.channel.getReadSetter().set((ChannelListener<StreamSourceChannel>) c -> onDataAvailable());, +			this.channel.getCloseSetter().set((ChannelListener<StreamSourceChannel>) c -> onAllDataRead());, +			this.channel.resumeReads();, +			int read = this.channel.read(byteBuffer);, +				return this.bufferFactory.wrap(byteBuffer);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, +	private DataBufferFactory bufferFactory = new DefaultDataBufferFactory(false);, +	public void setDataBufferFactory(DataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "DataBufferFactory must not be null");, +		this.bufferFactory = bufferFactory;, +	}, +, +	public DataBufferFactory getDataBufferFactory() {, +		return this.bufferFactory;, +		ServerHttpRequest request = new UndertowServerHttpRequest(exchange, getDataBufferFactory());, +		ServerHttpResponse response = new UndertowServerHttpResponse(exchange, getDataBufferFactory());, +		HandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(exchange);, +		getHttpHandler().handle(request, response).subscribe(resultSubscriber);, +	}, +, +, +	private class HandlerResultSubscriber implements Subscriber<Void> {, +, +		private final HttpServerExchange exchange;]