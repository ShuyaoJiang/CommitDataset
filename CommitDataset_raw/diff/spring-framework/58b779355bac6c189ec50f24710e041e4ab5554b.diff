[+++ b/org.springframework.context/src/main/java/org/springframework/conversation/manager/AbstractConversationRepository.java, +		// as recursively removing children will decrease the children list, always pick out, +		// the first child to be removed next, +		while (conversation.getChildren().size() > 0) {, +			removeConversation((MutableConversation)conversation.getChildren().get(0));, +		}, +, +		// remove the conversation from its parent, if any, +		MutableConversation parentConversation = (MutableConversation) conversation.getParent();, +		if (parentConversation != null) {, +			parentConversation.removeChildConversation(conversation);, +++ b/org.springframework.context/src/main/java/org/springframework/conversation/manager/AbstractConversationRepository.java, +		// as recursively removing children will decrease the children list, always pick out, +		// the first child to be removed next, +		while (conversation.getChildren().size() > 0) {, +			removeConversation((MutableConversation)conversation.getChildren().get(0));, +		}, +, +		// remove the conversation from its parent, if any, +		MutableConversation parentConversation = (MutableConversation) conversation.getParent();, +		if (parentConversation != null) {, +			parentConversation.removeChildConversation(conversation);, +++ b/org.springframework.context/src/main/java/org/springframework/conversation/manager/DefaultConversation.java, +, +		// remove the parent conversation from the child relationship, +		((DefaultConversation)conversation).removeParent();, +    protected void removeParent() {, +++ b/org.springframework.context/src/main/java/org/springframework/conversation/manager/AbstractConversationRepository.java, +		// as recursively removing children will decrease the children list, always pick out, +		// the first child to be removed next, +		while (conversation.getChildren().size() > 0) {, +			removeConversation((MutableConversation)conversation.getChildren().get(0));, +		}, +, +		// remove the conversation from its parent, if any, +		MutableConversation parentConversation = (MutableConversation) conversation.getParent();, +		if (parentConversation != null) {, +			parentConversation.removeChildConversation(conversation);, +++ b/org.springframework.context/src/main/java/org/springframework/conversation/manager/DefaultConversation.java, +, +		// remove the parent conversation from the child relationship, +		((DefaultConversation)conversation).removeParent();, +    protected void removeParent() {, +++ b/org.springframework.context/src/test/java/org/springframework/conversation/ConversationRepositoryTest.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.conversation;, +, +import java.util.List;, +, +import org.junit.Test;, +, +import org.springframework.conversation.manager.ConversationRepository;, +import org.springframework.conversation.manager.LocalTransientConversationRepository;, +import org.springframework.conversation.manager.MutableConversation;, +, +import static org.junit.Assert.*;, +, +/**, + * @author Micha Kiener, + */, +public class ConversationRepositoryTest {, +, +	@Test, +	public void testConversationCreation() {, +		ConversationRepository repository = createRepository();, +		assertNotNull("repository must not be null", repository);, +, +		MutableConversation conversation = repository.createNewConversation();, +		assertNotNull("conversation object must not be null", conversation);, +		assertNull("Id must not be set after creation", conversation.getId());, +		assertNotNull("List of children must never be null", conversation.getChildren());, +		assertEquals("Children list must be empty", 0, conversation.getChildren().size());, +	}, +, +	@Test, +	public void testConversationCreationAndStorage() {, +		ConversationRepository repository = createRepository();, +, +		MutableConversation conversation = repository.createNewConversation();, +		repository.storeConversation(conversation);, +		String conversationId = conversation.getId();, +		assertNotNull("ID must not be null after storage of a conversation", conversationId);, +, +		MutableConversation conversationRequested = repository.getConversation(conversationId);, +		assertNotNull("Conversation must be available after storage", conversationRequested);]