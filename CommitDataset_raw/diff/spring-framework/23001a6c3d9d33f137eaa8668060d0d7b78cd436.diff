[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestPartMethodArgumentResolverTests.java, +import reactor.test.StepVerifier;, +import org.springframework.web.server.ServerWebInputException;, +		param = this.testMethod.annot(requestPart()).arg(Person.class);, +		param = this.testMethod.annot(requestPart()).arg(Mono.class, Person.class);, +		param = this.testMethod.annot(requestPart()).arg(Flux.class, Person.class);, +		param = this.testMethod.annot(requestPart()).arg(Part.class);, +		param = this.testMethod.annot(requestPart()).arg(Mono.class, Part.class);, +		param = this.testMethod.annot(requestPart()).arg(Flux.class, Part.class);, +, +		param = this.testMethod.annotNotPresent(RequestPart.class).arg(Person.class);, +		assertFalse(this.resolver.supportsParameter(param));, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Person.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(List.class, Person.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Mono.class, Person.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Flux.class, Person.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Part.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(List.class, Part.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Mono.class, Part.class);, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Flux.class, Part.class);, +	@Test, +	public void personRequired() {, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Person.class);, +		ServerWebExchange exchange = createExchange(new MultipartBodyBuilder());, +		Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange);, +, +		StepVerifier.create(result).expectError(ServerWebInputException.class).verify();, +	}, +, +	@Test, +	public void personNotRequired() {, +		MethodParameter param = this.testMethod.annot(requestPart().notRequired()).arg(Person.class);, +		ServerWebExchange exchange = createExchange(new MultipartBodyBuilder());, +		Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange);, +, +		StepVerifier.create(result).verifyComplete();, +	}, +, +	@Test, +	public void partRequired() {, +		MethodParameter param = this.testMethod.annot(requestPart()).arg(Part.class);, +		ServerWebExchange exchange = createExchange(new MultipartBodyBuilder());, +		Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange);, +, +		StepVerifier.create(result).expectError(ServerWebInputException.class).verify();, +	}, +, +	@Test, +	public void partNotRequired() {, +		MethodParameter param = this.testMethod.annot(requestPart().notRequired()).arg(Part.class);, +		ServerWebExchange exchange = createExchange(new MultipartBodyBuilder());, +		Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange);, +, +		StepVerifier.create(result).verifyComplete();, +	}, +, +, +			@RequestPart(name = "anotherPart", required = false) Person anotherPerson,, +			@RequestPart(name = "anotherPart", required = false) Part anotherPart,, +			Person notAnnotated) {}]