[+++ b/spring-websocket/src/main/java/org/springframework/web/stomp/StompMessage.java, +		return "StompMessage [" + command + ", headers=" + this.headers + ", payload=" + new String(this.payload) + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/StompMessage.java, +		return "StompMessage [" + command + ", headers=" + this.headers + ", payload=" + new String(this.payload) + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/server/ReactorServerStompMessageProcessor.java, +	private Map<String, List<Registration<?>>> registrationsBySession = new ConcurrentHashMap<String, List<Registration<?>>>();, +		if (removeSubscriptions(session)) {, +			// TODO: send error event including exception info, +	protected void connect(final StompSession session, StompMessage stompMessage) throws IOException {, +		String replyToKey = "relay-message" + session.getId();, +, +		Registration<?> registration = this.reactor.on(Fn.$(replyToKey), new Consumer<Event<StompMessage>>() {, +			@Override, +			public void accept(Event<StompMessage> event) {, +				try {, +					StompMessage message = event.getData();, +					if (StompCommand.CONNECTED.equals(message.getCommand())) {, +						// TODO: skip for now (we already sent CONNECTED), +						return;, +					}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Relaying back to client: " + message);, +					}, +					session.sendMessage(message);, +				}, +				catch (Throwable t) {, +					handleError(session, t);, +				}, +			}, +		});, +, +		addRegistration(session.getId(), registration);, +, +		this.reactor.notify(StompCommand.CONNECT, Fn.event(stompMessage, replyToKey));, +		addRegistration(session.getId(), registration);, +	private void addRegistration(String sessionId, Registration<?> registration) {, +		List<Registration<?>> list = this.registrationsBySession.get(sessionId);, +			this.registrationsBySession.put(sessionId, list);, +		removeSubscriptions(session);, +	private boolean removeSubscriptions(StompSession session) {, +		String sessionId = session.getId();, +		List<Registration<?>> registrations = this.registrationsBySession.remove(sessionId);, +		removeSubscriptions(session);, +		this.reactor.notify("CONNECTION_CLOSED", Fn.event(session.getId()));, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/StompMessage.java, +		return "StompMessage [" + command + ", headers=" + this.headers + ", payload=" + new String(this.payload) + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/server/ReactorServerStompMessageProcessor.java, +	private Map<String, List<Registration<?>>> registrationsBySession = new ConcurrentHashMap<String, List<Registration<?>>>();, +		if (removeSubscriptions(session)) {, +			// TODO: send error event including exception info, +	protected void connect(final StompSession session, StompMessage stompMessage) throws IOException {, +		String replyToKey = "relay-message" + session.getId();, +, +		Registration<?> registration = this.reactor.on(Fn.$(replyToKey), new Consumer<Event<StompMessage>>() {, +			@Override, +			public void accept(Event<StompMessage> event) {, +				try {, +					StompMessage message = event.getData();, +					if (StompCommand.CONNECTED.equals(message.getCommand())) {, +						// TODO: skip for now (we already sent CONNECTED), +						return;, +					}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Relaying back to client: " + message);, +					}, +					session.sendMessage(message);, +				}, +				catch (Throwable t) {, +					handleError(session, t);, +				}, +			}, +		});, +, +		addRegistration(session.getId(), registration);, +, +		this.reactor.notify(StompCommand.CONNECT, Fn.event(stompMessage, replyToKey));, +		addRegistration(session.getId(), registration);, +	private void addRegistration(String sessionId, Registration<?> registration) {, +		List<Registration<?>> list = this.registrationsBySession.get(sessionId);, +			this.registrationsBySession.put(sessionId, list);, +		removeSubscriptions(session);, +	private boolean removeSubscriptions(StompSession session) {, +		String sessionId = session.getId();, +		List<Registration<?>> registrations = this.registrationsBySession.remove(sessionId);, +		removeSubscriptions(session);, +		this.reactor.notify("CONNECTION_CLOSED", Fn.event(session.getId()));, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/server/RelayStompReactorService.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]