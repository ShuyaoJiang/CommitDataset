[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +		return writeAndFlushWithInternal(Mono.just(body));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +		return writeAndFlushWithInternal(Mono.just(body));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +import org.reactivestreams.Publisher;, +	private final ResponseBodyWriteListener writeListener = new ResponseBodyWriteListener();, +	private void registerListener() {, +		try {, +			outputStream().setWriteListener(writeListener);, +		}, +		catch (IOException e) {, +			throw new UncheckedIOException(e);, +		ServletOutputStream outputStream = outputStream();, +	private ServletOutputStream outputStream() throws IOException {, +		return this.response.getOutputStream();, +	protected Processor<Publisher<DataBuffer>, Void> createBodyFlushProcessor() {, +		Processor<Publisher<DataBuffer>, Void> processor = new ResponseBodyFlushProcessor();, +		registerListener();, +		return processor;, +			try {, +				bodyProcessor = new ResponseBodyProcessor(outputStream(), bufferSize);, +				return bodyProcessor;, +			}, +			catch (IOException ex) {, +				throw new UncheckedIOException(ex);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +		return writeAndFlushWithInternal(Mono.just(body));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +import org.reactivestreams.Publisher;, +	private final ResponseBodyWriteListener writeListener = new ResponseBodyWriteListener();, +	private void registerListener() {, +		try {, +			outputStream().setWriteListener(writeListener);, +		}, +		catch (IOException e) {, +			throw new UncheckedIOException(e);, +		ServletOutputStream outputStream = outputStream();, +	private ServletOutputStream outputStream() throws IOException {, +		return this.response.getOutputStream();, +	protected Processor<Publisher<DataBuffer>, Void> createBodyFlushProcessor() {, +		Processor<Publisher<DataBuffer>, Void> processor = new ResponseBodyFlushProcessor();, +		registerListener();, +		return processor;, +			try {, +				bodyProcessor = new ResponseBodyProcessor(outputStream(), bufferSize);, +				return bodyProcessor;, +			}, +			catch (IOException ex) {, +				throw new UncheckedIOException(ex);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, +	private ResponseBodyProcessor createBodyProcessor() {]