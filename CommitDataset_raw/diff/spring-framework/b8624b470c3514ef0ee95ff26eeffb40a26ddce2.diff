[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	private static String[] resolveLocations(Class<?> declaringClass, ContextConfiguration contextConfiguration) {, +	 * Determine if this {@code ContextConfigurationAttributes} instance has , +	 * either path-based resource locations or class-based resources., +	 * @return <code>true</code> if neither the {@link #getLocations() locations}, +	 * nor the {@link #getClasses() classes} array is empty, +	 * @see #getLocations(), +	 * @see #getClasses(), +	 */, +	public boolean hasResources() {, +		return !ObjectUtils.isEmpty(getLocations()) && !ObjectUtils.isEmpty(getClasses());, +	}, +, +	/**, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	private static String[] resolveLocations(Class<?> declaringClass, ContextConfiguration contextConfiguration) {, +	 * Determine if this {@code ContextConfigurationAttributes} instance has , +	 * either path-based resource locations or class-based resources., +	 * @return <code>true</code> if neither the {@link #getLocations() locations}, +	 * nor the {@link #getClasses() classes} array is empty, +	 * @see #getLocations(), +	 * @see #getClasses(), +	 */, +	public boolean hasResources() {, +		return !ObjectUtils.isEmpty(getLocations()) && !ObjectUtils.isEmpty(getClasses());, +	}, +, +	/**, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {, +			if (isDefaultConfigurationClassCandidate(candidate)) {, +				configClasses.add(candidate);, +						candidate.getName()));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	private static String[] resolveLocations(Class<?> declaringClass, ContextConfiguration contextConfiguration) {, +	 * Determine if this {@code ContextConfigurationAttributes} instance has , +	 * either path-based resource locations or class-based resources., +	 * @return <code>true</code> if neither the {@link #getLocations() locations}, +	 * nor the {@link #getClasses() classes} array is empty, +	 * @see #getLocations(), +	 * @see #getClasses(), +	 */, +	public boolean hasResources() {, +		return !ObjectUtils.isEmpty(getLocations()) && !ObjectUtils.isEmpty(getClasses());, +	}, +, +	/**, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {, +			if (isDefaultConfigurationClassCandidate(candidate)) {, +				configClasses.add(candidate);, +						candidate.getName()));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +		final boolean hasResources = configAttributes.hasResources();, +				logger.debug(String.format("Potentially delegating to %s to process context configuration [%s].",, +			if (hasResources) {, +				if (configAttributes.hasResources() && logger.isInfoEnabled()) {, +		if (generatesDefaults() && !configAttributes.hasResources()) {, +			// If it can, let it; otherwise, keep iterating.]