[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType);, +	 * Convert the source to targetType., +	public Object executeConversion(Object source, TypeDescriptor targetType) throws ConversionExecutorNotFoundException,, +	 * Convert the source to targetType using a custom converter., +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from sourceType to targetType., +	public ConversionExecutor getConversionExecutor(Class<?> sourceType, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from from sourceType to targetType using a custom converter., +	public ConversionExecutor getConversionExecutor(String converterId, Class<?> sourceType,, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType);, +	 * Convert the source to targetType., +	public Object executeConversion(Object source, TypeDescriptor targetType) throws ConversionExecutorNotFoundException,, +	 * Convert the source to targetType using a custom converter., +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from sourceType to targetType., +	public ConversionExecutor getConversionExecutor(Class<?> sourceType, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from from sourceType to targetType using a custom converter., +	public ConversionExecutor getConversionExecutor(String converterId, Class<?> sourceType,, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType);, +	 * Convert the source to targetType., +	public Object executeConversion(Object source, TypeDescriptor targetType) throws ConversionExecutorNotFoundException,, +	 * Convert the source to targetType using a custom converter., +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from sourceType to targetType., +	public ConversionExecutor getConversionExecutor(Class<?> sourceType, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from from sourceType to targetType using a custom converter., +	public ConversionExecutor getConversionExecutor(String converterId, Class<?> sourceType,, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType) {, +	public Object executeConversion(Object source, TypeDescriptor targetType), +		if (source == null) {, +		return getConversionExecutor(source.getClass(), targetType).execute(source);, +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +		if (source == null) {, +		return getConversionExecutor(converterId, source.getClass(), targetType).execute(source);, +	public ConversionExecutor getConversionExecutor(Class sourceClass, TypeDescriptor targetType), +		Assert.notNull(sourceClass, "The sourceType to convert from is required");, +		TypeDescriptor sourceType = TypeDescriptor.valueOf(sourceClass);, +				return parent.getConversionExecutor(sourceClass, targetType);, +	public ConversionExecutor getConversionExecutor(String converterId, Class sourceType,, +		return getConversionExecutor(sourceElementType, TypeDescriptor, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType);, +	 * Convert the source to targetType., +	public Object executeConversion(Object source, TypeDescriptor targetType) throws ConversionExecutorNotFoundException,, +	 * Convert the source to targetType using a custom converter., +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from sourceType to targetType., +	public ConversionExecutor getConversionExecutor(Class<?> sourceType, TypeDescriptor targetType), +	 * Get a ConversionExecutor that converts objects from from sourceType to targetType using a custom converter., +	public ConversionExecutor getConversionExecutor(String converterId, Class<?> sourceType,, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/GenericConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType) {, +	public Object executeConversion(Object source, TypeDescriptor targetType), +		if (source == null) {, +		return getConversionExecutor(source.getClass(), targetType).execute(source);, +	public Object executeConversion(String converterId, Object source, TypeDescriptor targetType), +		if (source == null) {, +		return getConversionExecutor(converterId, source.getClass(), targetType).execute(source);, +	public ConversionExecutor getConversionExecutor(Class sourceClass, TypeDescriptor targetType), +		Assert.notNull(sourceClass, "The sourceType to convert from is required");, +		TypeDescriptor sourceType = TypeDescriptor.valueOf(sourceClass);, +				return parent.getConversionExecutor(sourceClass, targetType);, +	public ConversionExecutor getConversionExecutor(String converterId, Class sourceType,, +		return getConversionExecutor(sourceElementType, TypeDescriptor, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java, +		assertEquals(new Integer(3), service.executeConversion("3", type(Integer.class)));, +		assertEquals(null, service.executeConversion(null, type(Integer.class)));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(Integer.class));, +		ConversionExecutor executor = service.getConversionExecutor(Integer.class, type(String.class));, +			service.getConversionExecutor(String.class, type(Integer.class));, +		assertSame(source, service.getConversionExecutor(String.class, type(String.class)).execute(source));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(Integer.class));, +		ConversionExecutor executor = service.getConversionExecutor(Integer.class, type(String.class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(Integer.class));, +			ConversionExecutor executor = service.getConversionExecutor(String.class, type(Integer.class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(int.class));, +		ConversionExecutor executor = service.getConversionExecutor(String[].class, type(Integer[].class));, +		ConversionExecutor executor = service.getConversionExecutor(String[].class, type(int[].class));, +		ConversionExecutor executor = service.getConversionExecutor(String[].class, type(List.class));, +		ConversionExecutor executor = service.getConversionExecutor(String[].class, new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		ConversionExecutor executor = service.getConversionExecutor(String[].class, type(LinkedList.class));, +			service.getConversionExecutor(String[].class, type(AbstractList.class));, +		ConversionExecutor executor = service.getConversionExecutor(Collection.class, type(String[].class));, +		ConversionExecutor executor = service.getConversionExecutor(Collection.class, type(Integer[].class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(String[].class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(Integer[].class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(FooEnum.class));, +		ConversionExecutor executor = service.getConversionExecutor(FooEnum.class, type(String.class));, +		ConversionExecutor executor = service.getConversionExecutor(String.class, type(Enum.class));, +		ConversionExecutor executor = service.getConversionExecutor(Integer.class, type(customNumber.getClass()));, +		ConversionExecutor executor = service.getConversionExecutor("princy", String.class, type(Principal.class));, +		ConversionExecutor executor = service.getConversionExecutor("princy", Principal.class, type(String.class));, +		ConversionExecutor executor = service.getConversionExecutor("trimmer", String.class, type(String.class));]