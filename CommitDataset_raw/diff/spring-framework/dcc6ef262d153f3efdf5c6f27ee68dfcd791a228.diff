[+++ b/src/asciidoc/index.adoc, +<bean id="beanOne" class="ExampleBean" depends-on="**manager**"/>, +<bean id="**manager**" class="ManagerBean" />, +<bean id="lazy" class="com.foo.ExpensiveToCreateBean" **lazy-init="true"**/>, +<bean name="not.lazy" class="com.foo.AnotherBean"/>, +      **parent="inheritedTestBean"** init-method="initialize">, +, +  <property name="name" value="override"/>, +  <!-- the age property value of 1 will be inherited from  parent -->, +  **@Qualifier("main")**, +  private MovieCatalog movieCatalog;, +, +  // ..., +  public void prepare(**@Qualifier("main")**MovieCatalog movieCatalog,, +                      CustomerPreferenceDao customerPreferenceDao) {, +      this.movieCatalog = movieCatalog;, +      this.customerPreferenceDao = customerPreferenceDao;, +  }, +, +  // ..., +      **<qualifier value="main"/>**, +, +      <!-- inject any dependencies required by this bean -->, +      **<qualifier value="action"/>**, +, +      <!-- inject any dependencies required by this bean -->, +**@Qualifier**, +public @interface Genre {, +, +    String value();, +  **@Genre("Action")**, +  private MovieCatalog actionCatalog;, +  private MovieCatalog comedyCatalog;, +, +  @Autowired, +  public void setComedyCatalog(**@Genre("Comedy")** MovieCatalog comedyCatalog) {, +    this.comedyCatalog = comedyCatalog;, +  }, +, +  // ..., +      **<qualifier type="Genre" value="Action"/>**, +      <!-- inject any dependencies required by this bean -->, +      **_<qualifier type="example.Genre" value="Comedy"/>**, +      <!-- inject any dependencies required by this bean -->, +  **@Offline**, +  private MovieCatalog offlineCatalog;, +, +  // ..., +  **<qualifier type="Offline"/>**, +  <!-- inject any dependencies required by this bean -->, +  **@Resource(name="myMovieFinder")**, +  public void setMovieFinder(MovieFinder movieFinder) {, +    this.movieFinder = movieFinder;, +  }, +  **@Resource**, +  public void setMovieFinder(MovieFinder movieFinder) {, +    this.movieFinder = movieFinder;, +  }, +**@Qualifier("Action")**, +public class ActionMovieCatalog implements MovieCatalog {, +  // ..., +**@Genre("Action")**, +public class ActionMovieCatalog implements MovieCatalog {, +  // ..., +**@Offline**, +public class CachingMovieCatalog implements MovieCatalog {, +  // ..., +  **@Scope("prototype")**, +  public Encryptor encryptor() {, +    // ..., +  }, +**@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)**, +public UserPreferences userPreferences() {, +  return new UserPreferences();, +}, +, +@Bean, +public Service userService() {, +  UserService service = new SimpleUserService();, +  // a reference to the proxied userPreferences bean, +  service.setUserPreferences(userPreferences());, +  return service;, +        **this.customPropertyEditorRegistrar.registerCustomEditors(binder);**, +    }, +, +    // other methods to do with registering a User, +    public void processFoo(**@Valid** Foo foo) { /* ... */ }, +Expression exp = parser.parseExpression("**\'Hello World'**");, +Expression exp = parser.parseExpression("**\'Hello World'.concat(\'!')**");, +Expression exp = parser.parseExpression("**\'Hello World'.bytes**");, +byte[] bytes = (byte[]) exp.getValue();, +Expression exp = parser.parseExpression("**\'Hello World'.bytes.length**");, +int length = (Integer) exp.getValue();, +Expression exp = parser.parseExpression("**new String(\'hello world').toUpperCase()**");, +Expression exp = parser.parseExpression("**name**");, +, +EvaluationContext context = new StandardEvaluationContext(tesla);, +String name = (String) exp.getValue(context);, +Expression exp = parser.parseExpression("**name**");, +String name = (String) exp.getValue(tesla);]