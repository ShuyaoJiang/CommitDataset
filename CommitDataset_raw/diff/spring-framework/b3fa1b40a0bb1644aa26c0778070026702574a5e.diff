[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import java.util.concurrent.ConcurrentHashMap;, +, +	private final Map<String, byte[]> headerKeyAccessCache =, +			new ConcurrentHashMap<>(HEADER_KEY_CACHE_LIMIT);, +, +	private final Map<String, byte[]> headerKeyUpdateCache =, +					if (size() > HEADER_KEY_CACHE_LIMIT) {, +						headerKeyAccessCache.remove(eldest.getKey());, +						return true;, +					}, +					else {, +						return false;, +					}, +, +		if (this.headerKeyAccessCache.containsKey(inputToUse)) {, +			return this.headerKeyAccessCache.get(inputToUse);, +		synchronized (this.headerKeyUpdateCache) {, +			byte[] bytes = this.headerKeyUpdateCache.get(inputToUse);, +			if (bytes == null) {, +				bytes = inputToUse.getBytes(StandardCharsets.UTF_8);, +				this.headerKeyAccessCache.put(inputToUse, bytes);, +				this.headerKeyUpdateCache.put(inputToUse, bytes);, +			}, +	}, +		return inputToUse.getBytes(StandardCharsets.UTF_8);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import java.util.concurrent.ConcurrentHashMap;, +, +	private final Map<String, byte[]> headerKeyAccessCache =, +			new ConcurrentHashMap<>(HEADER_KEY_CACHE_LIMIT);, +, +	private final Map<String, byte[]> headerKeyUpdateCache =, +					if (size() > HEADER_KEY_CACHE_LIMIT) {, +						headerKeyAccessCache.remove(eldest.getKey());, +						return true;, +					}, +					else {, +						return false;, +					}, +, +		if (this.headerKeyAccessCache.containsKey(inputToUse)) {, +			return this.headerKeyAccessCache.get(inputToUse);, +		synchronized (this.headerKeyUpdateCache) {, +			byte[] bytes = this.headerKeyUpdateCache.get(inputToUse);, +			if (bytes == null) {, +				bytes = inputToUse.getBytes(StandardCharsets.UTF_8);, +				this.headerKeyAccessCache.put(inputToUse, bytes);, +				this.headerKeyUpdateCache.put(inputToUse, bytes);, +			}, +	}, +		return inputToUse.getBytes(StandardCharsets.UTF_8);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +, +	private StompEncoder stompEncoder = new StompEncoder();, +	private StompDecoder stompDecoder = new StompDecoder();, +	 * Configure a {@link StompEncoder} for encoding STOMP frames, +	 * @param encoder the encoder, +	 * @since 4.3.5, +	 */, +	public void setEncoder(StompEncoder encoder) {, +		this.stompEncoder = encoder;, +	}, +, +	/**, +	 * Configure a {@link StompDecoder} for decoding STOMP frames, +	 * @param decoder the decoder, +	 * @since 4.3.5, +	 */, +	public void setDecoder(StompDecoder decoder) {, +		this.stompDecoder = decoder;, +	}, +, +	/**]