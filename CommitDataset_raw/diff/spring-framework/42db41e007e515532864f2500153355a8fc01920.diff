[+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +	 * Load the factory implementations of the given type from the default location,, +	 * using the given class loader., +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +	 * Load the factory implementations of the given type from the default location,, +	 * using the given class loader., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +	private final boolean useDistance;, +, +	private Map<Class<?>, MethodFilter> filters;, +		this.useDistance = false;, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) {, +		if (this.filters == null) {, +			this.filters = new HashMap<Class<?>, MethodFilter>();, +		}, +		if (filter != null) {, +			this.filters.put(type, filter);, +		}, +		else {, +			this.filters.remove(type);, +		}, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +	 * Load the factory implementations of the given type from the default location,, +	 * using the given class loader., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +	private final boolean useDistance;, +, +	private Map<Class<?>, MethodFilter> filters;, +		this.useDistance = false;, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) {, +		if (this.filters == null) {, +			this.filters = new HashMap<Class<?>, MethodFilter>();, +		}, +		if (filter != null) {, +			this.filters.put(type, filter);, +		}, +		else {, +			this.filters.remove(type);, +		}, +	}, +, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java, +	private final PersistenceProvider persistenceProvider;, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +	 * Load the factory implementations of the given type from the default location,, +	 * using the given class loader., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +	private final boolean useDistance;, +, +	private Map<Class<?>, MethodFilter> filters;, +		this.useDistance = false;, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) {, +		if (this.filters == null) {, +			this.filters = new HashMap<Class<?>, MethodFilter>();, +		}, +		if (filter != null) {, +			this.filters.put(type, filter);, +		}, +		else {, +			this.filters.remove(type);, +		}, +	}, +, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java, +	private final PersistenceProvider persistenceProvider;, +, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, + * Convenience methods for retrieving the root {@link WebApplicationContext} for, + * a given {@link ServletContext}. This is useful for programmatically accessing, + * a Spring application context from within custom web views or MVC actions., +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +	 * Load the factory implementations of the given type from the default location,, +	 * using the given class loader., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +	private final boolean useDistance;, +, +	private Map<Class<?>, MethodFilter> filters;, +		this.useDistance = false;, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) {, +		if (this.filters == null) {, +			this.filters = new HashMap<Class<?>, MethodFilter>();, +		}, +		if (filter != null) {, +			this.filters.put(type, filter);, +		}, +		else {, +			this.filters.remove(type);, +		}, +	}, +, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java, +	private final PersistenceProvider persistenceProvider;]