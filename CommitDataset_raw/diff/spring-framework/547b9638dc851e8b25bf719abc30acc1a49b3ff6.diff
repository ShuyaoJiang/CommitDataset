[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					new MultiElementDescriptor(descriptor));, +					new MultiElementDescriptor(descriptor));, +					new MultiElementDescriptor(descriptor));, +		for (String candidate : candidateNames) {, +			if (!isSelfReference(beanName, candidate) && isAutowireCandidate(candidate, descriptor)) {, +				addCandidateEntry(result, candidate, descriptor, requiredType);, +			for (String candidate : candidateNames) {, +				if (!isSelfReference(beanName, candidate) && isAutowireCandidate(candidate, fallbackDescriptor)) {, +					addCandidateEntry(result, candidate, descriptor, requiredType);, +			if (result.isEmpty()) {, +				// but in the case of a dependency collection, not the very same bean itself., +				for (String candidate : candidateNames) {, +					if (isSelfReference(beanName, candidate) &&, +							(!(descriptor instanceof MultiElementDescriptor) || !beanName.equals(candidate)) &&, +							isAutowireCandidate(candidate, fallbackDescriptor)) {, +						addCandidateEntry(result, candidate, descriptor, requiredType);, +		if (descriptor instanceof MultiElementDescriptor || containsSingleton(candidateName)) {, +	private static class MultiElementDescriptor extends NestedDependencyDescriptor {, +		public MultiElementDescriptor(DependencyDescriptor original) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					new MultiElementDescriptor(descriptor));, +					new MultiElementDescriptor(descriptor));, +					new MultiElementDescriptor(descriptor));, +		for (String candidate : candidateNames) {, +			if (!isSelfReference(beanName, candidate) && isAutowireCandidate(candidate, descriptor)) {, +				addCandidateEntry(result, candidate, descriptor, requiredType);, +			for (String candidate : candidateNames) {, +				if (!isSelfReference(beanName, candidate) && isAutowireCandidate(candidate, fallbackDescriptor)) {, +					addCandidateEntry(result, candidate, descriptor, requiredType);, +			if (result.isEmpty()) {, +				// but in the case of a dependency collection, not the very same bean itself., +				for (String candidate : candidateNames) {, +					if (isSelfReference(beanName, candidate) &&, +							(!(descriptor instanceof MultiElementDescriptor) || !beanName.equals(candidate)) &&, +							isAutowireCandidate(candidate, fallbackDescriptor)) {, +						addCandidateEntry(result, candidate, descriptor, requiredType);, +		if (descriptor instanceof MultiElementDescriptor || containsSingleton(candidateName)) {, +	private static class MultiElementDescriptor extends NestedDependencyDescriptor {, +		public MultiElementDescriptor(DependencyDescriptor original) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import java.util.List;, +	@Test, +	public void testCollectionInjectionFromSameConfigurationClass() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(CollectionInjectionConfiguration.class);, +		CollectionInjectionConfiguration bean = ctx.getBean(CollectionInjectionConfiguration.class);, +		assertNotNull(bean.testBeans);, +		assertEquals(1, bean.testBeans.size());, +		assertSame(ctx.getBean(TestBean.class), bean.testBeans.get(0));, +	}, +, +	@Configuration, +	static class CollectionInjectionConfiguration {, +, +		@Autowired(required = false), +		public List<TestBean> testBeans;, +, +		@Bean, +		public TestBean thing() {, +			return new TestBean();, +		}, +	}, +]