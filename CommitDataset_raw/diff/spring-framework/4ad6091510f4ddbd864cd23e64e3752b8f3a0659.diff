[+++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +	private final String prefix;, +	 * @param prefix the path prefix for the SockJS service. All requests with a path, +	 * that begins with the specified prefix will be handled by this service. In a, +	 * Servlet container this is the path within the current servlet mapping., +	public AbstractSockJsService(String prefix) {, +		Assert.hasText(prefix, "prefix is required");, +		this.prefix = prefix;, +		scheduler.afterPropertiesSet();, +	 * The path prefix to which the SockJS service is mapped., +	public String getPrefix() {, +		return this.prefix;, +	public void setDisconnectDelay(long disconnectDelay) {, +	public void setWebSocketsEnabled(boolean webSocketsEnabled) {, +	public void setWebsocketHandler(HandshakeRequestHandler handshakeRequestHandler) {, +++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +	private final String prefix;, +	 * @param prefix the path prefix for the SockJS service. All requests with a path, +	 * that begins with the specified prefix will be handled by this service. In a, +	 * Servlet container this is the path within the current servlet mapping., +	public AbstractSockJsService(String prefix) {, +		Assert.hasText(prefix, "prefix is required");, +		this.prefix = prefix;, +		scheduler.afterPropertiesSet();, +	 * The path prefix to which the SockJS service is mapped., +	public String getPrefix() {, +		return this.prefix;, +	public void setDisconnectDelay(long disconnectDelay) {, +	public void setWebSocketsEnabled(boolean webSocketsEnabled) {, +	public void setWebsocketHandler(HandshakeRequestHandler handshakeRequestHandler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsWebSocketHandler.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.sockjs.server;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.StringUtils;, +import org.springframework.websocket.WebSocketHandler;, +import org.springframework.websocket.WebSocketSession;, +, +import com.fasterxml.jackson.databind.ObjectMapper;, +, +, +/**, + * An implementation of {@link WebSocketHandler} supporting the SockJS protocol., + * Methods merely delegate to a {@link StandardWebSocketServerSession}., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class SockJsWebSocketHandler implements WebSocketHandler {, +, +	private static final Log logger = LogFactory.getLog(SockJsWebSocketHandler.class);, +, +	private final StandardWebSocketServerSession sockJsSession;, +, +	// TODO: the JSON library used must be configurable, +	private final ObjectMapper objectMapper = new ObjectMapper();, +, +, +	public SockJsWebSocketHandler(StandardWebSocketServerSession sockJsSession) {, +		this.sockJsSession = sockJsSession;, +	}, +, +	@Override, +	public void newSession(WebSocketSession webSocketSession) throws Exception {, +		if (logger.isDebugEnabled()) {, +			logger.debug("New session: " + webSocketSession);, +		}, +		this.sockJsSession.setWebSocketSession(webSocketSession);, +	}]