[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +		this.defaultCodecs.addReaderTo(result, FormHttpMessageReader::new);, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +		this.defaultCodecs.addReaderTo(result, FormHttpMessageReader::new);, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java, +		assertEquals(9, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +		assertEquals(13, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +		this.defaultCodecs.addReaderTo(result, FormHttpMessageReader::new);, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java, +		assertEquals(9, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +		assertEquals(13, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, +		assertEquals(9, codecsConfigurer.getValue().getReaders().size());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +		this.defaultCodecs.addReaderTo(result, FormHttpMessageReader::new);, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java, +		assertEquals(9, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +		assertEquals(13, readers.size());, +		assertEquals(FormHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, +		assertEquals(9, codecsConfigurer.getValue().getReaders().size());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java, +import org.springframework.util.MultiValueMap;, +import static org.springframework.core.ResolvableType.*;, +import static org.springframework.http.MediaType.*;, +		assertEquals(9, readers.size());, +		assertHasMessageReader(readers, forClass(byte[].class), APPLICATION_OCTET_STREAM);, +		assertHasMessageReader(readers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM);, +		assertHasMessageReader(readers, forClass(String.class), TEXT_PLAIN);, +		assertHasMessageReader(readers, forClass(Resource.class), IMAGE_PNG);, +		assertHasMessageReader(readers, forClassWithGenerics(MultiValueMap.class, String.class, String.class), APPLICATION_FORM_URLENCODED);, +		assertHasMessageReader(readers, forClass(TestBean.class), APPLICATION_XML);, +		assertHasMessageReader(readers, forClass(TestBean.class), APPLICATION_JSON);, +		assertHasMessageReader(readers, forClass(TestBean.class), null);, +		assertHasMessageReader(messageReaders, forClass(String.class), TEXT_PLAIN);, +		assertHasMessageReader(messageReaders, forClass(TestBean.class), APPLICATION_XML);, +		assertHasMessageWriter(writers, forClass(byte[].class), APPLICATION_OCTET_STREAM);, +		assertHasMessageWriter(writers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM);, +		assertHasMessageWriter(writers, forClass(String.class), TEXT_PLAIN);, +		assertHasMessageWriter(writers, forClass(Resource.class), IMAGE_PNG);, +		assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_XML);, +		assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_JSON);, +		assertHasMessageWriter(writers, forClass(TestBean.class), MediaType.parseMediaType("text/event-stream"));, +		assertHasMessageWriter(writers, forClass(byte[].class), APPLICATION_OCTET_STREAM);, +		assertHasMessageWriter(writers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM);, +		assertHasMessageWriter(writers, forClass(String.class), TEXT_PLAIN);, +		assertHasMessageWriter(writers, forClass(Resource.class), IMAGE_PNG);, +		assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_XML);, +		assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_JSON);, +		assertHasMessageWriter(writers, forClass(TestBean.class), null);, +	private void assertHasMessageReader(List<HttpMessageReader<?>> readers, ResolvableType type, MediaType mediaType) {, +	private void assertHasMessageWriter(List<HttpMessageWriter<?>> writers, ResolvableType type, MediaType mediaType) {]