[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +				return reader.readValue(tokenBuffer.asParser(getObjectMapper()));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +				return reader.readValue(tokenBuffer.asParser(getObjectMapper()));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import java.io.IOException;, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.core.JsonProcessingException;, +import com.fasterxml.jackson.databind.DeserializationContext;, +import com.fasterxml.jackson.databind.JsonNode;, +import com.fasterxml.jackson.databind.annotation.JsonDeserialize;, +import com.fasterxml.jackson.databind.deser.std.StdDeserializer;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +	@Test  // SPR-15975, +	public void  customDeserializer() {, +		DataBuffer buffer = new DefaultDataBufferFactory().wrap("{\"test\": 1}".getBytes());, +, +		Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(new ObjectMapper());, +		Flux<TestObject> decoded = decoder.decode(Mono.just(buffer),, +				ResolvableType.forClass(TestObject.class), null, null).cast(TestObject.class);, +, +		StepVerifier.create(decoded), +				.assertNext(v -> assertEquals(1, v.getTest())), +				.verifyComplete();, +	}, +, +	@JsonDeserialize(using = Deserializer.class), +	public static class TestObject {, +		private int test;, +		public int getTest() {, +			return test;, +		}, +		public void setTest(int test) {, +			this.test = test;, +		}, +	}, +, +	public static class Deserializer extends StdDeserializer<TestObject> {, +, +		private static final long serialVersionUID = 1L;, +, +		protected Deserializer() {, +			super(TestObject.class);, +		}, +, +		@Override, +		public TestObject deserialize(JsonParser p,, +				DeserializationContext ctxt) throws IOException, JsonProcessingException {, +			JsonNode node = p.readValueAsTree();, +			TestObject result = new TestObject();, +			result.setTest(node.get("test").asInt());, +			return result;, +		}, +	}, +]