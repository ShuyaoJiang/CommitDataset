[+++ b/spring-framework-reference/src/expressions.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter id="expressions">, +  <title>Spring Expression Language (SpEL)</title>, +, +  <section id="expressions-intro">, +    <title>Introduction</title>, +, +    <para>The Spring Expression Language (SpEL for short) is a powerful, +    expression language that supports querying and manipulating an object, +    graph at runtime. The language syntax is similar to Unified EL but offers, +    additional features, most notably method invocation and basic string, +    templating functionality. </para>, +, +    <para>While there are several other Java expression languages available,, +    OGNL, MVEL, and JBoss EL, to name a few, the Spring Expression Language, +    was created to provide the Spring community with a single well supported, +    expression language that can used across all the products in the Spring, +    portfolio. Its language features are driven by the requirements of the, +    projects in the Spring portfolio, including tooling requirements for code, +    completion support within the eclipse based SpringSource Tool Suite. That, +    said, SpEL is based on an technology agnostic API allowing other, +    expression language implementations to be integreatd should the need, +    arise.</para>, +, +    <para>While SpEL serves as the foundation for expression evaluation within, +    the Spring portfolio, it is not directly tied to Spring and can be used, +    independently. In order to be self contained many of the examples shown, +    use SpEL as if it was an independent expression language. This requires, +    creating a few boostrapping infrastructure classes such as the parser., +    Most Spring users will not need to deal with this infrastructure and will, +    instead only be authoring expression strings for evaluation. An example of, +    this typical use is the integration of SpEL into the definition of XML or, +    annotated based bean definitions shown in the section <link, +    linkend="expressions-beandef">Expression support for defining bean, +    definitions.</link></para>, +, +    <para>This chapter covers the features of the expression language and its, +    synax. In several places an Inventor and Inventor's Society class are used, +    as the target objects for expression evaluation. These class declarations, +    and the data used to populate them are listed at the end of the chapter., +    </para>, +  </section>, +, +  <section id="expressions-features">, +    <title>Feature Overview</title>, +, +    <para>The expression language support the following functionality</para>, +, +    <itemizedlist>, +      <listitem>, +        <para>Literal expressions</para>, +      </listitem>, +, +      <listitem>, +        <para>Boolean and relational operators</para>, +      </listitem>, +, +      <listitem>, +        <para>Regular expressions</para>, +      </listitem>, +, +      <listitem>, +        <para>Class expressions</para>, +      </listitem>, +, +      <listitem>, +        <para>Accessing properties, arrays, lists, maps</para>, +      </listitem>, +, +      <listitem>, +        <para>Method invocation</para>, +      </listitem>, +, +      <listitem>, +        <para>Operators</para>, +      </listitem>, +, +      <listitem>, +        <para>Assignment</para>, +      </listitem>, +, +      <listitem>, +        <para>Calling constructors</para>, +      </listitem>, +, +      <listitem>, +        <para>Variables</para>, +      </listitem>, +, +      <listitem>, +        <para>User defined functions</para>, +      </listitem>, +, +      <listitem>, +        <para>Templated expressions</para>, +      </listitem>, +    </itemizedlist>, +  </section>, +]