[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.WildcardType;, +import org.springframework.core.GenericTypeResolver;, +	 * This implementation attempts to query the FactoryBean's generic parameter metadata, +	 * if present to determin the object type. If not present, i.e. the FactoryBean is, +	 * declared as a raw type, checks the FactoryBean's <code>getObjectType</code> method, +	protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd) {, +		Class<?> objectType = null;, +		String factoryBeanName = mbd.getFactoryBeanName();, +		String factoryMethodName = mbd.getFactoryMethodName();, +		if (factoryBeanName != null && factoryMethodName != null) {, +			// Try to obtain the FactoryBean's object type without instantiating it at all., +			BeanDefinition fbDef = getBeanDefinition(factoryBeanName);, +			if (fbDef instanceof AbstractBeanDefinition) {, +				Class<?> fbClass = ((AbstractBeanDefinition)fbDef).getBeanClass();, +				if (ClassUtils.isCglibProxyClass(fbClass)) {, +					// CGLIB subclass methods hide generic parameters. look at the superclass., +					fbClass = fbClass.getSuperclass();, +				}, +				Method m = ReflectionUtils.findMethod(fbClass, factoryMethodName);, +				objectType = GenericTypeResolver.resolveReturnTypeArgument(m, FactoryBean.class);, +				if (objectType != null) {, +					return objectType;, +				}, +			}, +		}, +, +		FactoryBean<?> fb = (mbd.isSingleton() ?, +			objectType = getTypeForFactoryBean(fb);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.WildcardType;, +import org.springframework.core.GenericTypeResolver;, +	 * This implementation attempts to query the FactoryBean's generic parameter metadata, +	 * if present to determin the object type. If not present, i.e. the FactoryBean is, +	 * declared as a raw type, checks the FactoryBean's <code>getObjectType</code> method, +	protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd) {, +		Class<?> objectType = null;, +		String factoryBeanName = mbd.getFactoryBeanName();, +		String factoryMethodName = mbd.getFactoryMethodName();, +		if (factoryBeanName != null && factoryMethodName != null) {, +			// Try to obtain the FactoryBean's object type without instantiating it at all., +			BeanDefinition fbDef = getBeanDefinition(factoryBeanName);, +			if (fbDef instanceof AbstractBeanDefinition) {, +				Class<?> fbClass = ((AbstractBeanDefinition)fbDef).getBeanClass();, +				if (ClassUtils.isCglibProxyClass(fbClass)) {, +					// CGLIB subclass methods hide generic parameters. look at the superclass., +					fbClass = fbClass.getSuperclass();, +				}, +				Method m = ReflectionUtils.findMethod(fbClass, factoryMethodName);, +				objectType = GenericTypeResolver.resolveReturnTypeArgument(m, FactoryBean.class);, +				if (objectType != null) {, +					return objectType;, +				}, +			}, +		}, +, +		FactoryBean<?> fb = (mbd.isSingleton() ?, +			objectType = getTypeForFactoryBean(fb);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationWithFactoryBeanAndAutowiringTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import org.junit.Test;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.Assert;, +, +/**, + * Tests cornering bug SPR-8514., + *, + * @author Chris Beams, + * @since 3.1, + */, +public class ConfigurationWithFactoryBeanAndAutowiringTests {, +, +	@Test, +	public void withConcreteFactoryBeanImplementationAsReturnType() {]