[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2018 the original author or authors., +	 * @throws IllegalArgumentException if the value cannot be converted to a language range, +	 * @throws IllegalArgumentException if the value cannot be converted to a locale, +	 * @throws IllegalArgumentException if the value cannot be converted to a date, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2018 the original author or authors., +	 * @throws IllegalArgumentException if the value cannot be converted to a language range, +	 * @throws IllegalArgumentException if the value cannot be converted to a locale, +	 * @throws IllegalArgumentException if the value cannot be converted to a date, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, + * <p>Note: Does not support {@link #setLocaleContext}, since the accept header, + * @author Juergen Hoeller, +	public void setSupportedLocales(List<Locale> locales) {, +, +		List<Locale> requestLocales = null;, +		try {, +			requestLocales = exchange.getRequest().getHeaders().getAcceptLanguageAsLocales();, +		catch (IllegalArgumentException ex) {, +			// Invalid Accept-Language header: treat as empty for matching purposes, +		return new SimpleLocaleContext(resolveSupportedLocale(requestLocales));, +	private Locale resolveSupportedLocale(@Nullable List<Locale> requestLocales) {, +		if (CollectionUtils.isEmpty(requestLocales)) {, +			return this.defaultLocale;  // may be null, +		}, +		List<Locale> supported = getSupportedLocales();, +		if (supported.isEmpty()) {, +			return requestLocales.get(0);  // never null, +		}, +, +		Locale languageMatch = null;, +			if (supported.contains(locale)) {, +				// Full match: typically language + country, +			else if (languageMatch == null) {, +				// Let's try to find a language-only match as a fallback, +				for (Locale candidate : supported) {, +					if (!StringUtils.hasLength(candidate.getCountry()) &&, +							candidate.getLanguage().equals(locale.getLanguage())) {, +						languageMatch = candidate;, +				}, +			}, +		}, +		if (languageMatch != null) {, +			return languageMatch;, +		}, +, +		return (this.defaultLocale != null ? this.defaultLocale : requestLocales.get(0));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2018 the original author or authors., +	 * @throws IllegalArgumentException if the value cannot be converted to a language range, +	 * @throws IllegalArgumentException if the value cannot be converted to a locale, +	 * @throws IllegalArgumentException if the value cannot be converted to a date, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, + * <p>Note: Does not support {@link #setLocaleContext}, since the accept header, + * @author Juergen Hoeller, +	public void setSupportedLocales(List<Locale> locales) {, +, +		List<Locale> requestLocales = null;, +		try {, +			requestLocales = exchange.getRequest().getHeaders().getAcceptLanguageAsLocales();, +		catch (IllegalArgumentException ex) {, +			// Invalid Accept-Language header: treat as empty for matching purposes, +		return new SimpleLocaleContext(resolveSupportedLocale(requestLocales));, +	private Locale resolveSupportedLocale(@Nullable List<Locale> requestLocales) {, +		if (CollectionUtils.isEmpty(requestLocales)) {, +			return this.defaultLocale;  // may be null, +		}, +		List<Locale> supported = getSupportedLocales();, +		if (supported.isEmpty()) {, +			return requestLocales.get(0);  // never null, +		}, +, +		Locale languageMatch = null;, +			if (supported.contains(locale)) {, +				// Full match: typically language + country, +			else if (languageMatch == null) {, +				// Let's try to find a language-only match as a fallback, +				for (Locale candidate : supported) {, +					if (!StringUtils.hasLength(candidate.getCountry()) &&, +							candidate.getLanguage().equals(locale.getLanguage())) {, +						languageMatch = candidate;, +				}, +			}, +		}, +		if (languageMatch != null) {, +			return languageMatch;, +		}, +, +		return (this.defaultLocale != null ? this.defaultLocale : requestLocales.get(0));, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/FixedLocaleContextResolver.java, + * Copyright 2002-2018 the original author or authors., + * {@link LocaleContextResolver} implementation that always returns a fixed locale, + * and optionally time zone. Default is the current JVM's default locale., + * <p>Note: Does not support {@link #setLocaleContext}, as the fixed locale and]