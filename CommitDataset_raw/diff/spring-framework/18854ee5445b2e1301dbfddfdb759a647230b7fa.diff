[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import static org.springframework.core.MethodIntrospector.*;, +	ControllerMethodResolver(ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context, List<HttpMessageReader<?>> readers) {, +		Assert.notNull(customResolvers, "ArgumentResolverConfigurer is required");, +		Assert.notNull(readers, "'messageReaders' is required");, +		this.initBinderResolvers = initBinderResolvers(customResolvers, reactiveRegistry, context);, +		this.modelAttributeResolvers = modelMethodResolvers(customResolvers, reactiveRegistry, context);, +		this.requestMappingResolvers = requestMappingResolvers(customResolvers, reactiveRegistry, context, readers);, +		this.exceptionHandlerResolvers = exceptionHandlerResolvers(customResolvers, reactiveRegistry, context);, +	private List<SyncHandlerMethodArgumentResolver> initBinderResolvers(, +			ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +, +		return initResolvers(customResolvers, reactiveRegistry, context, false, Collections.emptyList()).stream(), +				.filter(resolver -> resolver instanceof SyncHandlerMethodArgumentResolver), +				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver), +				.collect(Collectors.toList());, +	}, +, +	private static List<HandlerMethodArgumentResolver> modelMethodResolvers(, +			ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +, +		return initResolvers(customResolvers, reactiveRegistry, context, true, Collections.emptyList());, +	}, +, +	private static List<HandlerMethodArgumentResolver> requestMappingResolvers(, +			ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context, List<HttpMessageReader<?>> readers) {, +, +		return initResolvers(customResolvers, reactiveRegistry, context, true, readers);, +	}, +, +	private static List<HandlerMethodArgumentResolver> exceptionHandlerResolvers(, +			ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +, +		return initResolvers(customResolvers, reactiveRegistry, context, false, Collections.emptyList());, +	}, +, +	private static List<HandlerMethodArgumentResolver> initResolvers(ArgumentResolverConfigurer customResolvers,, +			ReactiveAdapterRegistry reactiveRegistry, ConfigurableApplicationContext context,, +			boolean supportDataBinding, List<HttpMessageReader<?>> readers) {, +		boolean requestMappingMethod = !readers.isEmpty() && supportDataBinding;, +		List<HandlerMethodArgumentResolver> result = new ArrayList<>();, +		result.add(new RequestParamMethodArgumentResolver(beanFactory, reactiveRegistry, false));, +		result.add(new RequestParamMapMethodArgumentResolver(reactiveRegistry));, +		result.add(new PathVariableMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new PathVariableMapMethodArgumentResolver(reactiveRegistry));, +		result.add(new MatrixVariableMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new MatrixVariableMapMethodArgumentResolver(reactiveRegistry));, +		if (!readers.isEmpty()) {, +			result.add(new RequestBodyArgumentResolver(readers, reactiveRegistry));, +			result.add(new RequestPartMethodArgumentResolver(readers, reactiveRegistry));, +		}, +		if (supportDataBinding) {, +			result.add(new ModelAttributeMethodArgumentResolver(reactiveRegistry, false));, +		}, +		result.add(new RequestHeaderMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new RequestHeaderMapMethodArgumentResolver(reactiveRegistry));, +		result.add(new CookieValueMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new ExpressionValueMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new SessionAttributeMethodArgumentResolver(beanFactory, reactiveRegistry));, +		result.add(new RequestAttributeMethodArgumentResolver(beanFactory, reactiveRegistry));, +		if (!readers.isEmpty()) {, +			result.add(new HttpEntityArgumentResolver(readers, reactiveRegistry));, +		}, +		result.add(new ModelArgumentResolver(reactiveRegistry));, +		if (supportDataBinding) {, +			result.add(new ErrorsMethodArgumentResolver(reactiveRegistry));, +		}, +		result.add(new ServerWebExchangeArgumentResolver(reactiveRegistry));, +		result.add(new PrincipalArgumentResolver(reactiveRegistry));, +		if (requestMappingMethod) {, +			result.add(new SessionStatusMethodArgumentResolver());, +		}, +		result.add(new WebSessionArgumentResolver(reactiveRegistry));, +		result.addAll(customResolvers.getCustomResolvers());, +		result.add(new RequestParamMethodArgumentResolver(beanFactory, reactiveRegistry, true));, +		if (supportDataBinding) {, +			result.add(new ModelAttributeMethodArgumentResolver(reactiveRegistry, true));, +		return result;, +, +	private void initControllerAdviceCaches(ApplicationContext applicationContext) {, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import static org.springframework.core.MethodIntrospector.*;, +	ControllerMethodResolver(ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context, List<HttpMessageReader<?>> readers) {, +		Assert.notNull(customResolvers, "ArgumentResolverConfigurer is required");, +		Assert.notNull(readers, "'messageReaders' is required");, +		this.initBinderResolvers = initBinderResolvers(customResolvers, reactiveRegistry, context);, +		this.modelAttributeResolvers = modelMethodResolvers(customResolvers, reactiveRegistry, context);, +		this.requestMappingResolvers = requestMappingResolvers(customResolvers, reactiveRegistry, context, readers);, +		this.exceptionHandlerResolvers = exceptionHandlerResolvers(customResolvers, reactiveRegistry, context);, +	private List<SyncHandlerMethodArgumentResolver> initBinderResolvers(, +			ArgumentResolverConfigurer customResolvers, ReactiveAdapterRegistry reactiveRegistry,]