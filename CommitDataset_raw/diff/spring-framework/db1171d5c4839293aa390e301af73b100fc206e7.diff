[+++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.springframework.core.task.AsyncTaskExecutor;, +	private AsyncTaskExecutor bootstrapExecutor;, +, +	/**, +	 * Specify an asynchronous executor for background bootstrapping,, +	 * e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}., +	 * <p>{@code SessionFactory} initialization will then switch into background, +	 * bootstrap mode, with a {@code SessionFactory} proxy immediately returned for, +	 * injection purposes instead of waiting for Hibernate's bootstrapping to complete., +	 * However, note that the first actual call to a {@code SessionFactory} method will, +	 * then block until Hibernate's bootstrapping completed, if not ready by then., +	 * For maximum benefit, make sure to avoid early {@code SessionFactory} calls, +	 * in init methods of related beans, even for metadata introspection purposes., +	 * @see LocalSessionFactoryBuilder#buildSessionFactory(AsyncTaskExecutor), +	 * @since 4.3, +	 */, +	public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {, +		this.bootstrapExecutor = bootstrapExecutor;, +	}, +, +		return (this.bootstrapExecutor != null ? sfb.buildSessionFactory(this.bootstrapExecutor) :, +				sfb.buildSessionFactory());, +++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.springframework.core.task.AsyncTaskExecutor;, +	private AsyncTaskExecutor bootstrapExecutor;, +, +	/**, +	 * Specify an asynchronous executor for background bootstrapping,, +	 * e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}., +	 * <p>{@code SessionFactory} initialization will then switch into background, +	 * bootstrap mode, with a {@code SessionFactory} proxy immediately returned for, +	 * injection purposes instead of waiting for Hibernate's bootstrapping to complete., +	 * However, note that the first actual call to a {@code SessionFactory} method will, +	 * then block until Hibernate's bootstrapping completed, if not ready by then., +	 * For maximum benefit, make sure to avoid early {@code SessionFactory} calls, +	 * in init methods of related beans, even for metadata introspection purposes., +	 * @see LocalSessionFactoryBuilder#buildSessionFactory(AsyncTaskExecutor), +	 * @since 4.3, +	 */, +	public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {, +		this.bootstrapExecutor = bootstrapExecutor;, +	}, +, +		return (this.bootstrapExecutor != null ? sfb.buildSessionFactory(this.bootstrapExecutor) :, +				sfb.buildSessionFactory());, +++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import org.hibernate.SessionFactory;, +import org.hibernate.engine.spi.SessionFactoryImplementor;, +import org.springframework.core.task.AsyncTaskExecutor;, +	/**, +	 * Build the Hibernate {@code SessionFactory} through background bootstrapping,, +	 * using the given executor for a parallel initialization phase, +	 * (e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})., +	 * <p>{@code SessionFactory} initialization will then switch into background, +	 * bootstrap mode, with a {@code SessionFactory} proxy immediately returned for, +	 * injection purposes instead of waiting for Hibernate's bootstrapping to complete., +	 * However, note that the first actual call to a {@code SessionFactory} method will, +	 * then block until Hibernate's bootstrapping completed, if not ready by then., +	 * For maximum benefit, make sure to avoid early {@code SessionFactory} calls, +	 * in init methods of related beans, even for metadata introspection purposes., +	 * @since 4.3, +	 * @see #buildSessionFactory(), +	 */, +	public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {, +		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null");, +		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),, +				new Class<?>[] {SessionFactoryImplementor.class},, +				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor));, +	}, +, +, +	/**, +	 * Proxy invocation handler for background bootstrapping, only enforcing, +	 * a fully initialized target {@code SessionFactory} when actually needed., +	 */, +	private class BootstrapSessionFactoryInvocationHandler implements InvocationHandler {, +, +		private final Future<SessionFactory> sessionFactoryFuture;, +, +		public BootstrapSessionFactoryInvocationHandler(AsyncTaskExecutor bootstrapExecutor) {, +			this.sessionFactoryFuture = bootstrapExecutor.submit(new Callable<SessionFactory>() {, +				@Override, +				public SessionFactory call() throws Exception {, +					return buildSessionFactory();, +				}, +			});, +		}, +, +		@Override, +		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +			try {, +				if (method.getName().equals("equals")) {]