[+++ b/src/docs/asciidoc/kotlin.adoc, +For kotlin versions 1.1.50+, the default behavior is the same to `-Xjsr305=warn`., +The `strict` value is required to have Spring Framework API full null-safety taken in account, +but should be considered experimental since Spring API nullability declaration could evolve, +even between minor releases and more checks may be added in the future)., +You can optionally add https://kotlinlang.org/docs/reference/data-classes.html[the `data` keyword], +to make the compiler automatically derives the following members from all properties, +declared in the primary constructor:, +, +* equals()/hashCode() pair, +* toString() of the form "User(name=John, age=42)", +* componentN() functions corresponding to the properties in their order of declaration, +* copy() function, +, +This allows to change easily just one of the properties even if `User` properties are read-only:, +his allows us to write:, +, +, +[source,kotlin], +----, +data class Person(val name: String, val age: Int), +, +val jack = User(name = "Jack", age = 1), +val olderJack = jack.copy(age = 2), +----, +, +==== Per class lifecycle, +, +==== Specification-like tests, +, +It is possible to create specification-like tests with JUnit 5 and Kotlin., +, +[source], +----, +class SpecificationLikeTests {, +, +  @Nested, +  @DisplayName("a calculator"), +  inner class Calculator {, +     val calculator = SampleCalculator(), +, +     @Test, +     fun `should return the result of adding the first number to the second number`() {, +        val sum = calculator.sum(2, 4), +        assertEquals(6, sum), +     }, +, +     @Test, +     fun `should return the result of subtracting the second number from the first number`() {, +        val subtract = calculator.subtract(4, 2), +        assertEquals(2, subtract), +     }, +  }, +}, +----, +, +]