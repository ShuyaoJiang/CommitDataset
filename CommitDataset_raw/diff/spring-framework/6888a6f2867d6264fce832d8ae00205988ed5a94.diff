[+++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + *   <li>Normal object creation via the '<code>new</code>' operator: this is, + *       taken care of by advising <code>initialization()</code> join points.</li>, + *           <code>private</p>. Since aspects cannot introduce a private member, , + *           <code>public</code>. However, this shouldn't be a big burden, since, + *           in any case asking to make that method <code>public</code> should not, + *       implementation of <code>readResolve()</code>, if any, must be , + *       <code>public</code>) can be lifted as well if we were to use an , + *       experimental feature in AspectJ - the <code>hasmethod()</code> PCD.</li>, +	 * A marker interface to which the <code>readResolve()</code> is introduced., +	 * Introduce the <code>readResolve()</code> method so that we can advise its, +	 * <code>Serializable</code> class of ConfigurableObject type,, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + *   <li>Normal object creation via the '<code>new</code>' operator: this is, + *       taken care of by advising <code>initialization()</code> join points.</li>, + *           <code>private</p>. Since aspects cannot introduce a private member, , + *           <code>public</code>. However, this shouldn't be a big burden, since, + *           in any case asking to make that method <code>public</code> should not, + *       implementation of <code>readResolve()</code>, if any, must be , + *       <code>public</code>) can be lifted as well if we were to use an , + *       experimental feature in AspectJ - the <code>hasmethod()</code> PCD.</li>, +	 * A marker interface to which the <code>readResolve()</code> is introduced., +	 * Introduce the <code>readResolve()</code> method so that we can advise its, +	 * <code>Serializable</code> class of ConfigurableObject type,, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>&#64;Configurable</code> annotation if specified, otherwise the, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + *   <li>Normal object creation via the '<code>new</code>' operator: this is, + *       taken care of by advising <code>initialization()</code> join points.</li>, + *           <code>private</p>. Since aspects cannot introduce a private member, , + *           <code>public</code>. However, this shouldn't be a big burden, since, + *           in any case asking to make that method <code>public</code> should not, + *       implementation of <code>readResolve()</code>, if any, must be , + *       <code>public</code>) can be lifted as well if we were to use an , + *       experimental feature in AspectJ - the <code>hasmethod()</code> PCD.</li>, +	 * A marker interface to which the <code>readResolve()</code> is introduced., +	 * Introduce the <code>readResolve()</code> method so that we can advise its, +	 * <code>Serializable</code> class of ConfigurableObject type,, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>&#64;Configurable</code> annotation if specified, otherwise the, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + * For example, here is a subaspect that configures the <code>PricingStrategyClient</code> objects., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + *   <li>Normal object creation via the '<code>new</code>' operator: this is, + *       taken care of by advising <code>initialization()</code> join points.</li>, + *           <code>private</p>. Since aspects cannot introduce a private member, , + *           <code>public</code>. However, this shouldn't be a big burden, since, + *           in any case asking to make that method <code>public</code> should not, + *       implementation of <code>readResolve()</code>, if any, must be , + *       <code>public</code>) can be lifted as well if we were to use an , + *       experimental feature in AspectJ - the <code>hasmethod()</code> PCD.</li>, +	 * A marker interface to which the <code>readResolve()</code> is introduced., +	 * Introduce the <code>readResolve()</code> method so that we can advise its, +	 * <code>Serializable</code> class of ConfigurableObject type,, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>&#64;Configurable</code> annotation if specified, otherwise the, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2013 the original author or authors., + * For example, here is a subaspect that configures the <code>PricingStrategyClient</code> objects., +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj, + * Copyright 2002-2013 the original author or authors., + * <code>BeanWiringInfoResolver</code> interface. The default implementation]