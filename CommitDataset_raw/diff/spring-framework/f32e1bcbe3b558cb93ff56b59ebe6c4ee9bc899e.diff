[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotationBeanWiringInfoResolver.java, + * Copyright 2002-2018 the original author or authors., +	 * Build the {@link BeanWiringInfo} for the given {@link Configurable} annotation., +			// Autowiring by name or by type, +		else if (!"".equals(annotation.value())) {, +			// Explicitly specified bean name for bean definition to take property values from, +			// Default bean name for bean definition to take property values from, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AnnotationBeanWiringInfoResolver.java, + * Copyright 2002-2018 the original author or authors., +	 * Build the {@link BeanWiringInfo} for the given {@link Configurable} annotation., +			// Autowiring by name or by type, +		else if (!"".equals(annotation.value())) {, +			// Explicitly specified bean name for bean definition to take property values from, +			// Default bean name for bean definition to take property values from, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, + * translate internal resource request URLs into public URL paths for external use., +			throws ServletException, IOException {, +, +, +		public void setAttribute(String name, Object value) {, +			super.setAttribute(name, value);, +				if (value instanceof ResourceUrlProvider) {, +					initLookupPath((ResourceUrlProvider) value);, +				logger.trace("ResourceUrlProvider not available via request attribute " +, +						"ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR");, +			if (this.indexLookupPath != null && url.startsWith(this.prefixLookupPath)) {]