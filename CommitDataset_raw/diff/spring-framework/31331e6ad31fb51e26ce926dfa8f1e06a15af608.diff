[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, +		if (sourceType.getType().equals(targetType.getType())) {, +			// no conversion required, +			return false;, +		}, +		return hasValueOfMethodOrConstructor(targetType.getType(), sourceType.getType());, +		if (source == null) {, +			return null;, +		}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, +		if (sourceType.getType().equals(targetType.getType())) {, +			// no conversion required, +			return false;, +		}, +		return hasValueOfMethodOrConstructor(targetType.getType(), sourceType.getType());, +		if (source == null) {, +			return null;, +		}, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +	@Test, +	public void convertNullAnnotatedStringToString() throws Exception {, +		DefaultConversionService.addDefaultConverters(conversionService);, +		String source = null;, +		TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("annotatedString"));, +		TypeDescriptor targetType = TypeDescriptor.valueOf(String.class);, +		conversionService.convert(source, sourceType, targetType);, +	}, +, +	@ExampleAnnotation, +	public String annotatedString;, +, +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface ExampleAnnotation {, +	}, +]