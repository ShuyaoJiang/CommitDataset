[+++ b/spring-framework-reference/src/overview.xml, +            <code>com.springsource</code>. See the <ulink security="", +            url="http://www.springsource.com/repository/app/faq">FAQ</ulink>, +            for more information.</para>, +        logging options).</para>, +, +        <para>Next we outline the basic steps needed to configure an, +        application that depends on Spring, first with Maven and then with, +        Ivy. In all cases, if anything is unclear, refer to the documentation, +        of your dependency management system, or look at some sample code -, +        Spring itself uses Ivy to manage dependencies when it is building, and, +        our samples mostly use Maven.</para>, +      </section>, +, +      <section>, +        <title>Maven Dependency Management</title>, +, +        <para>If you are using Maven for dependency management you don't even, +        need to supply the logging dependency explicitly. For example, to, +        create an application context and use dependency injection to, +        configure an application, your Maven dependencies will look like, +      </section>, +      <section>, +        <title>Ivy Dependency Management</title>, +        <para>If you prefer to use <ulink, +        url="http://ant.apache.org/ivy">Ivy</ulink> to manage dependencies, +        then there are similar names and configuration options. </para>, +, +        <para>To configure Ivy to point to the SpringSource EBR add the, +        following resolvers to your, +        <filename>ivysettings.xml</filename>:</para>, +, +        <programlisting>&lt;resolvers&gt;, +  , +  &lt;url name="com.springsource.repository.bundles.release"&gt;, +, +    &lt;ivy pattern="http://repository.springsource.com/ivy/bundles/release/, +      [organisation]/[module]/[revision]/[artifact]-[revision].[ext]" /&gt;, +    &lt;artifact pattern="http://repository.springsource.com/ivy/bundles/release/, +      [organisation]/[module]/[revision]/[artifact]-[revision].[ext]" /&gt;, +, +  &lt;/url&gt;, +, +  &lt;url name="com.springsource.repository.bundles.external"&gt;, +, +    &lt;ivy pattern="http://repository.springsource.com/ivy/bundles/external/, +       [organisation]/[module]/[revision]/[artifact]-[revision].[ext]" /&gt;, +    &lt;artifact pattern="http://repository.springsource.com/ivy/bundles/external/, +       [organisation]/[module]/[revision]/[artifact]-[revision].[ext]" /&gt; , +, +  &lt;/url&gt;, +, +&lt;/resolvers&gt;</programlisting>, +, +        <para>The XML above is not valid because the lines are too long - if, +        you copy-paste then remove the extra line endings in the middle of the, +        url patterns.</para>, +, +        <para>Once Ivy is configured to look in the EBR adding a dependency is, +        easy. Simply pull up the details page for the bundle in question in, +        the repository browser and you'll find an Ivy snippet ready for you to, +        include in your dependencies section. For example (in, +        <filename>ivy.xml</filename>): </para>, +, +        <programlisting>&lt;dependency org="org.springframework" , +      name="org.springframework.core" rev="3.0.0.RELEASE" conf="compile-&gt;runtime"/&gt;</programlisting>, +      <para>The nice thing about <code>commons-logging</code> is that you, +      don't need anything else to make your application work. It has a runtime, +      discovery algorithm that looks for other logging frameworks in well, +      known places on the classpath and uses one that it thinks is appropriate, +      (or you can tell it which one if you need to). If nothing else is, +      available you get pretty nice looking logs just from the JDK, +      (java.util.logging or JUL for short). You should find that your Spring, +      application works and logs happily to the console out of the box in most, +      situations, and that's important.</para>, +        <para>Unfortunately, the worst thing about, +        <code>commons-logging</code>, and what has made it unpopular with new, +        tools, is also the runtime discovery algorithm. If we could turn back, +        the clock and start Spring now as a new project it would use a, +        different logging dependency. Probably the first choice would be the, +        Simple Logging Framework for Java (<ulink, +        url="http://www.slf4j.org">SLF4J</ulink>), which is also used by a lot, +        of other tools that people use with Spring inside their, +        applications.</para>, +        <para>To switch off <code>commons-logging</code> is easy: just make, +        sure it isn't on the classpath at runtime. In Maven terms you exclude, +        the dependency, and because of the way that the Spring dependencies, +        are declared, you only have to do that once.</para>, +      <code>commons-logging</code> because it uses compile-time bindings, +      instead of runtime discovery of the other logging frameworks it, +      integrates. This also means that you have to be more explicit about what, +      you want to happen at runtime, and declare it or configure it, +      accordingly. SLF4J provides bindings to many common logging frameworks,, +      so you can usually choose one that you already use, and bind to that for, +      configuration and management.</para>, +      replace the <code>commons-logging</code> dependency with the SLF4J-JCL, +      bridge. Once you have done that then logging calls from within Spring, +      will be translated into logging calls to the SLF4J API, so if other, +      libraries in your application use that API, then you have a single place, +      to configure and manage logging.</para>]