[+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntityBuilder.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http;, +, +import java.net.URI;, +import java.util.Set;, +, +/**, + * A builder for {@link ResponseEntity} objects. Enforces common HTTP response practices, + * through a fluent API., + *, + * <p>This class is typically used in @Controller methods through a static import., + * For instance:, + * <pre class="code">, + * import static org.springframework.http.ResponseEntityBuilder.*;, + *, + * &#064;Controller, + * public class MyController {, + *, + *     &#064;RequestMapping(value="/entity", method=RequestMethod.GET), + *     public ResponseEntity&lt;MyEntity&gt; myBean() {, + *         MyEntity entity = ..., + *         long lastModifiedDate = ..., + *         ResponseEntity&lt;MyEntity&gt; responseEntity = status(HttpStatus.OK), + *             .header("Last-Modified", lastModifiedDate).body(entity);, + *         return responseEntity;, + *     }, + * }</pre>, + *, + * Or, using some of the convenience methods:, + *, + * <pre class="code">, + * ok().lastModified(lastModifiedDate).body(entity);, + * </pre>, + *, + * @author Arjen Poutsma, + * @since 4.1, + * @see ResponseEntity, + */, +public class ResponseEntityBuilder {, +, +	private ResponseEntityBuilder() {, +	}, +, +	/**, +	 * Creates a new {@code ResponseEntityBuilder} with the given status., +	 * @param status the response status, +	 * @return the new response entity builder, +	 */, +	public static ResponseBodyBuilder status(HttpStatus status) {, +		return new DefaultResponseBuilder(status);, +	}, +, +	/**, +	 * Creates a new {@code ResponseEntityBuilder} with the given status., +	 * @param status the response status, +	 * @return the new response entity builder, +	 */, +	public static ResponseBodyBuilder status(int status) {, +		return status(HttpStatus.valueOf(status));, +	}, +, +	/**, +	 * Creates a new {@code ResponseEntityBuilder} with the status set to, +	 * {@linkplain HttpStatus#OK OK}., +	 * @return the new response entity builder, +	 */, +	public static ResponseBodyBuilder ok() {, +		return status(HttpStatus.OK);, +	}, +, +	/**, +	 * Creates a new {@code ResponseEntity} with the given body and the status set to, +	 * {@linkplain HttpStatus#OK OK}., +	 * @return the new response entity, +	 */, +	public static ResponseHeadersBuilder ok(Object body) {, +		ResponseBodyBuilder builder = ok();, +		builder.body(body);, +		return builder;, +	}, +, +	/**, +	 * Creates a new {@code ResponseEntityBuilder} with a, +	 * {@linkplain HttpStatus#CREATED CREATED} status and a location header set to the]