[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebReactiveConfiguration.class.getClassLoader()) &&, +			ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +					WebReactiveConfiguration.class.getClassLoader());, +			readers.add(new Jackson2ServerHttpMessageReader(, +					new  DecoderHttpMessageReader<>(new Jackson2JsonDecoder())));, +			Jackson2JsonEncoder encoder = new Jackson2JsonEncoder();, +			writers.add(new Jackson2ServerHttpMessageWriter(encoder));, +			sseDataEncoders.add(encoder);, +			HttpMessageWriter<Object> writer = new ServerSentEventHttpMessageWriter(sseDataEncoders);, +			writers.add(new Jackson2ServerHttpMessageWriter(writer));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebReactiveConfiguration.class.getClassLoader()) &&, +			ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +					WebReactiveConfiguration.class.getClassLoader());, +			readers.add(new Jackson2ServerHttpMessageReader(, +					new  DecoderHttpMessageReader<>(new Jackson2JsonDecoder())));, +			Jackson2JsonEncoder encoder = new Jackson2JsonEncoder();, +			writers.add(new Jackson2ServerHttpMessageWriter(encoder));, +			sseDataEncoders.add(encoder);, +			HttpMessageWriter<Object> writer = new ServerSentEventHttpMessageWriter(sseDataEncoders);, +			writers.add(new Jackson2ServerHttpMessageWriter(writer));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +	private WebBindingInitializer webBindingInitializer;, +, +	private List<HandlerMethodArgumentResolver> customArgumentResolvers;, +, +	private List<HandlerMethodArgumentResolver> argumentResolvers;, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache =, +			new ConcurrentHashMap<>(64);, +	 * Configure message readers to de-serialize the request body with., +	 */, +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		this.messageReaders.clear();, +		this.messageReaders.addAll(messageReaders);, +	}, +, +	/**, +	 * Return the configured message readers., +	 */, +	public List<HttpMessageReader<?>> getMessageReaders() {, +		return this.messageReaders;, +	}, +, +	/**, +	 * Provide a WebBindingInitializer with "global" initialization to apply, +	 * to every DataBinder instance., +	 */, +	public void setWebBindingInitializer(WebBindingInitializer webBindingInitializer) {, +		this.webBindingInitializer = webBindingInitializer;, +	}, +, +	/**, +	 * Return the configured WebBindingInitializer, or {@code null} if none., +	 */, +	public WebBindingInitializer getWebBindingInitializer() {, +		return this.webBindingInitializer;, +	}, +, +	public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {, +		this.reactiveAdapters = registry;, +	}, +, +	public ReactiveAdapterRegistry getReactiveAdapterRegistry() {, +		return this.reactiveAdapters;, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebReactiveConfiguration.class.getClassLoader()) &&, +			ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +					WebReactiveConfiguration.class.getClassLoader());, +			readers.add(new Jackson2ServerHttpMessageReader(, +					new  DecoderHttpMessageReader<>(new Jackson2JsonDecoder())));, +			Jackson2JsonEncoder encoder = new Jackson2JsonEncoder();, +			writers.add(new Jackson2ServerHttpMessageWriter(encoder));, +			sseDataEncoders.add(encoder);, +			HttpMessageWriter<Object> writer = new ServerSentEventHttpMessageWriter(sseDataEncoders);, +			writers.add(new Jackson2ServerHttpMessageWriter(writer));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +	private WebBindingInitializer webBindingInitializer;, +, +	private List<HandlerMethodArgumentResolver> customArgumentResolvers;, +, +	private List<HandlerMethodArgumentResolver> argumentResolvers;, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache =, +			new ConcurrentHashMap<>(64);, +	 * Configure message readers to de-serialize the request body with., +	 */, +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		this.messageReaders.clear();, +		this.messageReaders.addAll(messageReaders);, +	}, +, +	/**, +	 * Return the configured message readers., +	 */]