[+++ b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateTransactionManagerTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.orm.hibernate3;, +, +import java.sql.Connection;, +import java.sql.DatabaseMetaData;, +import java.sql.SQLException;, +import java.sql.Savepoint;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Properties;, +, +import javax.sql.DataSource;, +, +import junit.framework.TestCase;, +import org.easymock.MockControl;, +import org.hibernate.FlushMode;, +import org.hibernate.HibernateException;, +import org.hibernate.Interceptor;, +import org.hibernate.Query;, +import org.hibernate.SessionFactory;, +import org.hibernate.Transaction;, +import org.hibernate.cache.NoCacheProvider;, +import org.hibernate.cfg.Configuration;, +import org.hibernate.classic.Session;, +import org.hibernate.dialect.HSQLDialect;, +import org.hibernate.exception.ConstraintViolationException;, +import org.hibernate.exception.GenericJDBCException;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.dao.DataIntegrityViolationException;, +import org.springframework.jdbc.datasource.ConnectionHolder;, +import org.springframework.jdbc.datasource.DriverManagerDataSource;, +import org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy;, +import org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;, +import org.springframework.transaction.CannotCreateTransactionException;, +import org.springframework.transaction.PlatformTransactionManager;, +import org.springframework.transaction.TransactionDefinition;, +import org.springframework.transaction.TransactionStatus;, +import org.springframework.transaction.UnexpectedRollbackException;, +import org.springframework.transaction.support.TransactionCallback;, +import org.springframework.transaction.support.TransactionCallbackWithoutResult;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +import org.springframework.transaction.support.TransactionTemplate;, +, +/**, + * @author Juergen Hoeller, + * @since 05.03.2005, + */, +public class HibernateTransactionManagerTests extends TestCase {, +, +	public void testTransactionCommit() throws Exception {, +		MockControl dsControl = MockControl.createControl(DataSource.class);, +		final DataSource ds = (DataSource) dsControl.getMock();, +		MockControl conControl = MockControl.createControl(Connection.class);, +		Connection con = (Connection) conControl.getMock();, +		MockControl sfControl = MockControl.createControl(SessionFactory.class);, +		final SessionFactory sf = (SessionFactory) sfControl.getMock();, +		MockControl sessionControl = MockControl.createControl(Session.class);, +		final Session session = (Session) sessionControl.getMock();, +		MockControl txControl = MockControl.createControl(Transaction.class);, +		Transaction tx = (Transaction) txControl.getMock();, +		MockControl queryControl = MockControl.createControl(Query.class);, +		Query query = (Query) queryControl.getMock();, +, +		final List list = new ArrayList();, +		list.add("test");, +		con.getTransactionIsolation();, +		conControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED);, +		con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);, +		conControl.setVoidCallable(1);, +		con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);, +		conControl.setVoidCallable(1);, +		con.isReadOnly();, +		conControl.setReturnValue(false, 1);, +		sf.openSession();, +		sfControl.setReturnValue(session, 1);, +		session.getTransaction();, +		sessionControl.setReturnValue(tx, 1);, +		tx.setTimeout(10);, +		txControl.setVoidCallable(1);, +		tx.begin();, +		txControl.setVoidCallable(1);, +		session.connection();, +		sessionControl.setReturnValue(con, 3);]