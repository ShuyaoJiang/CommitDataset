[+++ b/build.gradle, +	ext.rxjava2Version         = '2.0.0-RC1', +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		testCompile "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/build.gradle, +	ext.rxjava2Version         = '2.0.0-RC1', +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		testCompile "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.BackpressureStrategy;, +import io.reactivex.Flowable;, +import reactor.adapter.RxJava2Adapter;, +	private static final boolean rxJava2Present =, +			ClassUtils.isPresent("io.reactivex.Flowable", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (rxJava2Present) {, +			new RxJava2AdapterRegistrar().register(this);, +		}, +	private static class RxJava2AdapterRegistrar {, +, +		public void register(ReactiveAdapterRegistry registry) {, +			registry.registerFluxAdapter(Flowable.class,, +					source -> RxJava2Adapter.flowableToFlux((Flowable<?>) source),, +					RxJava2Adapter::fluxToFlowable, +			);, +			registry.registerFluxAdapter(io.reactivex.Observable.class,, +					source -> RxJava2Adapter.observableToFlux((io.reactivex.Observable<?>) source, BackpressureStrategy.BUFFER),, +					RxJava2Adapter::fluxToObservable, +			);, +			registry.registerMonoAdapter(io.reactivex.Single.class,, +					source -> RxJava2Adapter.singleToMono((io.reactivex.Single<?>) source),, +					RxJava2Adapter::monoToSingle,, +					new ReactiveAdapter.Descriptor(false, false, false), +			);, +			registry.registerMonoAdapter(io.reactivex.Completable.class,, +					source -> RxJava2Adapter.completableToMono((io.reactivex.Completable) source),, +					RxJava2Adapter::monoToCompletable,, +					new ReactiveAdapter.Descriptor(false, true, true), +			);, +		}, +	}, +, +++ b/build.gradle, +	ext.rxjava2Version         = '2.0.0-RC1', +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		testCompile "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.BackpressureStrategy;, +import io.reactivex.Flowable;, +import reactor.adapter.RxJava2Adapter;, +	private static final boolean rxJava2Present =, +			ClassUtils.isPresent("io.reactivex.Flowable", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (rxJava2Present) {, +			new RxJava2AdapterRegistrar().register(this);, +		}, +	private static class RxJava2AdapterRegistrar {, +, +		public void register(ReactiveAdapterRegistry registry) {, +			registry.registerFluxAdapter(Flowable.class,, +					source -> RxJava2Adapter.flowableToFlux((Flowable<?>) source),, +					RxJava2Adapter::fluxToFlowable, +			);, +			registry.registerFluxAdapter(io.reactivex.Observable.class,, +					source -> RxJava2Adapter.observableToFlux((io.reactivex.Observable<?>) source, BackpressureStrategy.BUFFER),, +					RxJava2Adapter::fluxToObservable, +			);, +			registry.registerMonoAdapter(io.reactivex.Single.class,, +					source -> RxJava2Adapter.singleToMono((io.reactivex.Single<?>) source),, +					RxJava2Adapter::monoToSingle,, +					new ReactiveAdapter.Descriptor(false, false, false), +			);, +			registry.registerMonoAdapter(io.reactivex.Completable.class,, +					source -> RxJava2Adapter.completableToMono((io.reactivex.Completable) source),, +					RxJava2Adapter::monoToCompletable,, +					new ReactiveAdapter.Descriptor(false, true, true), +			);, +		}, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import io.reactivex.Flowable;, +		testFluxAdapter(Flowable.class);, +		testFluxAdapter(io.reactivex.Observable.class);, +		testMonoAdapter(io.reactivex.Single.class);, +		testMonoAdapter(io.reactivex.Completable.class);, +++ b/build.gradle, +	ext.rxjava2Version         = '2.0.0-RC1', +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		optional "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		testCompile "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.BackpressureStrategy;, +import io.reactivex.Flowable;, +import reactor.adapter.RxJava2Adapter;, +	private static final boolean rxJava2Present =, +			ClassUtils.isPresent("io.reactivex.Flowable", ReactiveAdapterRegistry.class.getClassLoader());]