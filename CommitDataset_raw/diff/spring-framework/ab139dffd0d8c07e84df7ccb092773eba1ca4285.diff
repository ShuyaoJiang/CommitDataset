[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/TransactionDefinition.java, + * Copyright 2002-2010 the original author or authors., +	 * <p><b>NOTE:</b> Actual creation of a nested transaction will only work on, +	 * specific transaction managers. Out of the box, this only applies to the JDBC, +	 * <p>This level allows a row changed by one transaction to be read by another, +	 * transaction before any changes in that row have been committed (a "dirty read")., +	 * If any of the changes are rolled back, the second transaction will have, +	 * retrieved an invalid row., +	 * <p>This level prohibits a transaction from reading a row with uncommitted changes, +	 * in it, and it also prohibits the situation where one transaction reads a row,, +	 * a second transaction alters the row, and the first transaction re-reads the row,, +	 * getting different values the second time (a "non-repeatable read")., +	 * <p>This level includes the prohibitions in {@link #ISOLATION_REPEATABLE_READ}, +	 * and further prohibits the situation where one transaction reads all rows that, +	 * satisfy a <code>WHERE</code> condition, a second transaction inserts a row, +	 * that satisfies that <code>WHERE</code> condition, and the first transaction, +	 * re-reads for the same condition, retrieving the additional "phantom" row, +	 * in the second read., +	 * <p>Note that a transaction manager that does not support custom isolation levels, +	 * will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}., +	 * <p>Note that a transaction manager that does not support timeouts will throw, +	 * an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}., +<<	 * <p>This just serves as a hint for the actual transaction subsystem;, +	 * A transaction manager which cannot interpret the read-only hint will, +	 * <p>In case of Spring's declarative transactions, the exposed name will be, +	 * the <code>fully-qualified class name + "." + method name</code> (by default)., +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/TransactionDefinition.java, + * Copyright 2002-2010 the original author or authors., +	 * <p><b>NOTE:</b> Actual creation of a nested transaction will only work on, +	 * specific transaction managers. Out of the box, this only applies to the JDBC, +	 * <p>This level allows a row changed by one transaction to be read by another, +	 * transaction before any changes in that row have been committed (a "dirty read")., +	 * If any of the changes are rolled back, the second transaction will have, +	 * retrieved an invalid row., +	 * <p>This level prohibits a transaction from reading a row with uncommitted changes, +	 * in it, and it also prohibits the situation where one transaction reads a row,, +	 * a second transaction alters the row, and the first transaction re-reads the row,, +	 * getting different values the second time (a "non-repeatable read")., +	 * <p>This level includes the prohibitions in {@link #ISOLATION_REPEATABLE_READ}, +	 * and further prohibits the situation where one transaction reads all rows that, +	 * satisfy a <code>WHERE</code> condition, a second transaction inserts a row, +	 * that satisfies that <code>WHERE</code> condition, and the first transaction, +	 * re-reads for the same condition, retrieving the additional "phantom" row, +	 * in the second read., +	 * <p>Note that a transaction manager that does not support custom isolation levels, +	 * will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}., +	 * <p>Note that a transaction manager that does not support timeouts will throw, +	 * an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}., +<<	 * <p>This just serves as a hint for the actual transaction subsystem;, +	 * A transaction manager which cannot interpret the read-only hint will, +	 * <p>In case of Spring's declarative transactions, the exposed name will be, +	 * the <code>fully-qualified class name + "." + method name</code> (by default)., +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2010 the original author or authors., + * <p>For specific information about the semantics of this annotation's attributes,, + * consider the {@link org.springframework.transaction.TransactionDefinition} and, + * {@link org.springframework.transaction.interceptor.TransactionAttribute} javadocs., + *, + * @see org.springframework.transaction.interceptor.TransactionAttribute, +	 * Defaults to {@link Propagation#REQUIRED}., +	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getPropagationBehavior(), +	 * Defaults to {@link Isolation#DEFAULT}., +	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getIsolationLevel(), +	 * Defaults to the default timeout of the underlying transaction system., +	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getTimeout(), +	 * Defaults to <code>false</code>., +	 * <p>This just serves as a hint for the actual transaction subsystem;, +	 * it will <i>not necessarily</i> cause failure of write access attempts., +	 * A transaction manager which cannot interpret the read-only hint will, +	 * <i>not</i> throw an exception when asked for a read-only transaction., +	 * @see org.springframework.transaction.interceptor.TransactionAttribute#isReadOnly()]