[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	private ResolvableType(Class<?> clazz) {, +		this.resolved = (clazz != null ? clazz : Object.class);, +	 * @param type the required type (typically narrowed), +	 * @param clazz the class to introspect ({@code null} is semantically, +	public static ResolvableType forClass(Class<?> clazz) {, +		return new ResolvableType(clazz);, +	 * @param clazz the class to introspect ({@code null} is semantically, +	public static ResolvableType forRawClass(Class<?> clazz) {, +		return new ResolvableType(clazz) {, +	 * Return a {@link ResolvableType} for the specified base type, +	 * (interface or base class) with a given implementation class., +	 * @param baseType the base type (must not be {@code null}), +	 * @return a {@link ResolvableType} for the specified base type backed by the, +	 * given implementation class, +	public static ResolvableType forClass(Class<?> baseType, Class<?> implementationClass) {, +		Assert.notNull(baseType, "Base type must not be null");, +		ResolvableType asType = forType(implementationClass).as(baseType);, +		return (asType == NONE ? forType(baseType) : asType);, +	 * @param clazz the class (or interface) to introspect, +	public static ResolvableType forClassWithGenerics(Class<?> clazz, Class<?>... generics) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(generics, "Generics array must not be null");, +		return forClassWithGenerics(clazz, resolvableGenerics);, +	 * @param clazz the class (or interface) to introspect, +	public static ResolvableType forClassWithGenerics(Class<?> clazz, ResolvableType... generics) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(generics, "Generics array must not be null");, +		TypeVariable<?>[] variables = clazz.getTypeParameters();, +		ParameterizedType syntheticType = new SyntheticParameterizedType(clazz, arguments);, +		ResolvableType owner = (implementationType != null ? implementationType : NONE);, +		owner = owner.as(field.getDeclaringClass());]