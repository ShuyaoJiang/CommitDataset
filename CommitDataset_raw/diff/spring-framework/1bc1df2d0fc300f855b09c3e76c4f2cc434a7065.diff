[+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build();, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestTemplate}., +	public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code AsyncRestTemplate}., +	public static MockRestServiceServerBuilder bindTo(AsyncRestTemplate asyncRestTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestGatewaySupport}., +	public static MockRestServiceServerBuilder bindTo(RestGatewaySupport restGateway) {, +	 * A shortcut for {@code bindTo(restTemplate).build()}., +		return bindTo(restTemplate).build();, +	 * A shortcut for {@code bindTo(asyncRestTemplate).build()}., +		return bindTo(asyncRestTemplate).build();, +	 * A shortcut for {@code bindTo(restGateway).build()}., +		return bindTo(restGateway).build();, +		MockRestServiceServerBuilder ignoreExpectOrder();, +		 * by setting {@link #ignoreExpectOrder()}., +		public MockRestServiceServerBuilder ignoreExpectOrder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build();, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestTemplate}., +	public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code AsyncRestTemplate}., +	public static MockRestServiceServerBuilder bindTo(AsyncRestTemplate asyncRestTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestGatewaySupport}., +	public static MockRestServiceServerBuilder bindTo(RestGatewaySupport restGateway) {, +	 * A shortcut for {@code bindTo(restTemplate).build()}., +		return bindTo(restTemplate).build();, +	 * A shortcut for {@code bindTo(asyncRestTemplate).build()}., +		return bindTo(asyncRestTemplate).build();, +	 * A shortcut for {@code bindTo(restGateway).build()}., +		return bindTo(restGateway).build();, +		MockRestServiceServerBuilder ignoreExpectOrder();, +		 * by setting {@link #ignoreExpectOrder()}., +		public MockRestServiceServerBuilder ignoreExpectOrder() {, +++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleTests.java, +		this.mockServer = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder().build();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build();, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestTemplate}., +	public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code AsyncRestTemplate}., +	public static MockRestServiceServerBuilder bindTo(AsyncRestTemplate asyncRestTemplate) {, +	 * Return a builder for a {@code MockRestServiceServer} that should be used, +	 * to reply to the given {@code RestGatewaySupport}., +	public static MockRestServiceServerBuilder bindTo(RestGatewaySupport restGateway) {, +	 * A shortcut for {@code bindTo(restTemplate).build()}., +		return bindTo(restTemplate).build();, +	 * A shortcut for {@code bindTo(asyncRestTemplate).build()}., +		return bindTo(asyncRestTemplate).build();, +	 * A shortcut for {@code bindTo(restGateway).build()}., +		return bindTo(restGateway).build();, +		MockRestServiceServerBuilder ignoreExpectOrder();, +		 * by setting {@link #ignoreExpectOrder()}., +		public MockRestServiceServerBuilder ignoreExpectOrder() {, +++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleTests.java, +		this.mockServer = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder().build();, +++ b/src/asciidoc/testing.adoc, +	MockRestServiceServer mockServer = MockRestServiceServer.bindTo(restTemplate).build();, +	mockServer.expect(requestTo("/greeting")).andRespond(withSuccess());, +In the above example, `MockRestServiceServer`, the central class for client-side REST, +tests, configures the `RestTemplate` with a custom `ClientHttpRequestFactory` that, +we expect a request to "/greeting" and want to return a 200 response with, +"text/plain" content. We could define as additional expected requests and stub responses as, +needed. When expected requests and stub responses are defined, the `RestTemplate` can be, +used in client-side code as usual. At the end of testing `mockServer.verify()` can be, +used to verify that all expectations have been satisfied., +By default requests are expected in the order in which expectations were declared., +You can set the `ignoreExpectOrder` option when building the server in which case, +all expectations are checked (in order) to find a match for a given request. That, +means requests are allowed to come in any order. Here is an example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	server = MockRestServiceServer.bindTo(restTemplate).ignoreExpectOrder().build();, +----, +, +Even with unordered requests by default each request is allowed to execute once only., +The `expect` method provides an overloaded variant that accepts an `ExpectedCount`, +argument that specifies a count range, e.g. `once`, `manyTimes`, `max`, `min`,, +`between`, and so on. Here is an example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	RestTemplate restTemplate = new RestTemplate();, +, +	MockRestServiceServer mockServer = MockRestServiceServer.bindTo(restTemplate).build();, +	mockServer.expect(times(2), requestTo("/foo")).andRespond(withSuccess());, +	mockServer.expect(times(3), requestTo("/bar")).andRespond(withSuccess());, +, +	// ...]