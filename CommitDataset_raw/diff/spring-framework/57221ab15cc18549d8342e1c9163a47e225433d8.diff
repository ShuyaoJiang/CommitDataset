[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AbstractPrefixVersionStrategy.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AbstractPrefixVersionStrategy.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ContentVersionStrategy.java, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.util.StreamUtils;, +	private static final DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();, +, +	public Mono<String> getResourceVersion(Resource resource) {, +		return DataBufferUtils.read(resource, dataBufferFactory, StreamUtils.BUFFER_SIZE), +				.reduce(DataBuffer::write), +				.map(buffer -> {, +					byte[] result = new byte[buffer.readableByteCount()];, +					buffer.read(result);, +					DataBufferUtils.release(buffer);, +					return DigestUtils.md5DigestAsHex(result);, +				});, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AbstractPrefixVersionStrategy.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ContentVersionStrategy.java, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.util.StreamUtils;, +	private static final DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();, +, +	public Mono<String> getResourceVersion(Resource resource) {, +		return DataBufferUtils.read(resource, dataBufferFactory, StreamUtils.BUFFER_SIZE), +				.reduce(DataBuffer::write), +				.map(buffer -> {, +					byte[] result = new byte[buffer.readableByteCount()];, +					buffer.read(result);, +					DataBufferUtils.release(buffer);, +					return DigestUtils.md5DigestAsHex(result);, +				});, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/FixedVersionStrategy.java, +import reactor.core.publisher.Mono;, +, +	private final Mono<String> versionMono;, +, +		this.versionMono = Mono.just(version);, +	public Mono<String> getResourceVersion(Resource resource) {, +		return this.versionMono;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AbstractPrefixVersionStrategy.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ContentVersionStrategy.java, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.util.StreamUtils;, +	private static final DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();, +, +	public Mono<String> getResourceVersion(Resource resource) {, +		return DataBufferUtils.read(resource, dataBufferFactory, StreamUtils.BUFFER_SIZE), +				.reduce(DataBuffer::write), +				.map(buffer -> {, +					byte[] result = new byte[buffer.readableByteCount()];, +					buffer.read(result);, +					DataBufferUtils.release(buffer);, +					return DigestUtils.md5DigestAsHex(result);, +				});, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/FixedVersionStrategy.java, +import reactor.core.publisher.Mono;, +, +	private final Mono<String> versionMono;, +, +		this.versionMono = Mono.just(version);, +	public Mono<String> getResourceVersion(Resource resource) {, +		return this.versionMono;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, +		String candidate = versionStrategy.extractVersion(requestPath);, +		if (StringUtils.isEmpty(candidate)) {, +		String simplePath = versionStrategy.removeVersion(requestPath, candidate);, +				.filterWhen(resource -> versionStrategy.getResourceVersion(resource), +						.map(actual -> {, +							if (candidate.equals(actual)) {, +									logger.trace("Resource matches extracted version [" + candidate + "]");, +								return true;, +									logger.trace("Potential resource found for \"" + requestPath + "\", " +, +											"but version [" + candidate + "] does not match");, +								return false;, +						})), +				.map(resource -> new FileNameVersionedResource(resource, candidate));, +						VersionStrategy strategy = getStrategyForPath(resourceUrlPath);, +						if (strategy == null) {, +								.flatMap(resource -> strategy.getResourceVersion(resource), +										.map(version -> {, +											return strategy.addVersion(baseUrl, version);, +										}));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/AbstractPrefixVersionStrategy.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ContentVersionStrategy.java, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;]