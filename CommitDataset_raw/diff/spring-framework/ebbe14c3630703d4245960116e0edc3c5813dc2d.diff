[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					if (targetType != null && targetType != ClassUtils.getUserClass(beanInstance)) {, +						if (classToMatch != null && !classToMatch.isInstance(beanInstance)) {, +							return false;, +						if (typeToMatch.isAssignableFrom(targetType)) {, +							return true;, +						}, +					}, +					ResolvableType resolvableType = mbd.targetType;, +					if (resolvableType == null) {, +						resolvableType = mbd.factoryMethodReturnType;, +					}, +					return (resolvableType != null && typeToMatch.isAssignableFrom(resolvableType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					if (targetType != null && targetType != ClassUtils.getUserClass(beanInstance)) {, +						if (classToMatch != null && !classToMatch.isInstance(beanInstance)) {, +							return false;, +						if (typeToMatch.isAssignableFrom(targetType)) {, +							return true;, +						}, +					}, +					ResolvableType resolvableType = mbd.targetType;, +					if (resolvableType == null) {, +						resolvableType = mbd.factoryMethodReturnType;, +					}, +					return (resolvableType != null && typeToMatch.isAssignableFrom(resolvableType));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +	}, +, +	@Test, +	public void genericsBasedInjectionWithEarlyGenericsMatchingAndRawFactoryMethod() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(0, beanNames.length);, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(0, beanNames.length);, +	}, +, +	@Test, +	public void genericsBasedInjectionWithLateGenericsMatchingAndRawFactoryMethod() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +		beanFactory.preInstantiateSingletons();, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +	}, +, +	@Test, +	public void genericsBasedInjectionWithEarlyGenericsMatchingAndRawInstance() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +	}, +, +	@Test, +	public void genericsBasedInjectionWithLateGenericsMatchingAndRawInstance() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class));, +		new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +		beanFactory.preInstantiateSingletons();, +, +		String[] beanNames = beanFactory.getBeanNamesForType(Repository.class);, +		assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo"));, +, +		beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class));, +		assertEquals(1, beanNames.length);, +		assertEquals("stringRepo", beanNames[0]);, +]