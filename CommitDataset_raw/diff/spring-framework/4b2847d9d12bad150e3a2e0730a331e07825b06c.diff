[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, +	/**, +	 * Return all values for the specified native header or {@code null}., +	 */, +	public List<String> getNativeHeader(String headerName) {, +	/**, +	 * Return the first value for the specified native header of {@code null}., +	 */, +	 * Set the specified native header value., +	public void setNativeHeader(String name, String value) {, +			this.nativeHeaders.set(name, value);, +	/**, +	 * Add the specified native header value., +	 */, +	public void addNativeHeader(String name, String value) {, +		this.nativeHeaders.add(name, value);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, +	/**, +	 * Return all values for the specified native header or {@code null}., +	 */, +	public List<String> getNativeHeader(String headerName) {, +	/**, +	 * Return the first value for the specified native header of {@code null}., +	 */, +	 * Set the specified native header value., +	public void setNativeHeader(String name, String value) {, +			this.nativeHeaders.set(name, value);, +	/**, +	 * Add the specified native header value., +	 */, +	public void addNativeHeader(String name, String value) {, +		this.nativeHeaders.add(name, value);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/channel/AbstractMessageChannel.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.support.channel;, +, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanNameAware;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.MessageDeliveryException;, +import org.springframework.messaging.MessagingException;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +, +/**, + * Abstract base class for {@link MessageChannel} implementations., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractMessageChannel implements MessageChannel, BeanNameAware  {, +, +	protected Log logger = LogFactory.getLog(getClass());, +, +	private String beanName;, +, +	private final ChannelInterceptorChain interceptorChain = new ChannelInterceptorChain();, +, +, +	public AbstractMessageChannel() {, +		this.beanName = getClass().getSimpleName() + "@" + ObjectUtils.getIdentityHexString(this);, +	}, +, +	/**, +	 * {@inheritDoc}, +	 * <p>Used primarily for logging purposes., +	 */, +	@Override, +	public void setBeanName(String name) {, +		this.beanName = name;, +	}, +, +	/**, +	 * @return the name for this channel., +	 */, +	public String getBeanName() {, +		return this.beanName;]