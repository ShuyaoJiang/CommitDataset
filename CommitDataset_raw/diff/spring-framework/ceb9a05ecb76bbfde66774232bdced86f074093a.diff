[+++ b/build.gradle, +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:2.4.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.0"), +		optional("org.hibernate:hibernate-core:3.6.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:3.6.9.Final"), +		optional("org.apache.openjpa:openjpa:2.2.1"), +		optional("org.hibernate:hibernate-core:4.1.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.1.9.Final"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:3.6.9.Final"), +		provided("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:4.1.9.Final"), +++ b/build.gradle, +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:2.4.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.0"), +		optional("org.hibernate:hibernate-core:3.6.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:3.6.9.Final"), +		optional("org.apache.openjpa:openjpa:2.2.1"), +		optional("org.hibernate:hibernate-core:4.1.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.1.9.Final"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:3.6.9.Final"), +		provided("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:4.1.9.Final"), +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.type.TypeResolver;, +	private final TypeResolver typeResolver = new TypeResolver();, +				this.parameterTypeMap.put(entry.getKey(), this.typeResolver.heuristicType(entry.getValue()));, +++ b/build.gradle, +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:2.4.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.0"), +		optional("org.hibernate:hibernate-core:3.6.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:3.6.9.Final"), +		optional("org.apache.openjpa:openjpa:2.2.1"), +		optional("org.hibernate:hibernate-core:4.1.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.1.9.Final"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:3.6.9.Final"), +		provided("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:4.1.9.Final"), +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.type.TypeResolver;, +	private final TypeResolver typeResolver = new TypeResolver();, +				this.parameterTypeMap.put(entry.getKey(), this.typeResolver.heuristicType(entry.getValue()));, +++ /dev/null, +++ b/build.gradle, +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:2.4.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.0"), +		optional("org.hibernate:hibernate-core:3.6.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:3.6.9.Final"), +		optional("org.apache.openjpa:openjpa:2.2.1"), +		optional("org.hibernate:hibernate-core:4.1.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.1.9.Final"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:3.6.9.Final"), +		provided("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:4.1.9.Final"), +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.type.TypeResolver;, +	private final TypeResolver typeResolver = new TypeResolver();, +				this.parameterTypeMap.put(entry.getKey(), this.typeResolver.heuristicType(entry.getValue()));, +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, +import org.hibernate.cache.RegionFactory;, +	private RegionFactory cacheRegionFactory;, +	public void setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +++ b/build.gradle, +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:2.4.0"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:2.4.0"), +		optional("org.hibernate:hibernate-core:3.6.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:3.6.9.Final"), +		optional("org.apache.openjpa:openjpa:2.2.1"), +		optional("org.hibernate:hibernate-core:4.1.9.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.1.9.Final"), +		optional("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:3.6.9.Final"), +		provided("org.eclipse.persistence:javax.persistence:2.0.0"), +		testCompile("org.hibernate:hibernate-core:4.1.9.Final"), +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.type.TypeResolver;, +	private final TypeResolver typeResolver = new TypeResolver();]