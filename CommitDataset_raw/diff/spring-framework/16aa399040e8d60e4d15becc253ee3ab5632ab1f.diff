[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringTilesApplicationContextFactory.java, +import java.io.IOException;, +import java.net.URL;, +import java.util.HashSet;, +import java.util.Set;, +import org.apache.tiles.servlet.context.ServletTilesApplicationContext;, +, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourcePatternResolver;, +import org.springframework.web.context.support.ServletContextResourcePatternResolver;, +	private static class SpringWildcardServletTilesApplicationContext extends ServletTilesApplicationContext {, +		private final ResourcePatternResolver resolver;, +, +			this.resolver = new ServletContextResourcePatternResolver(servletContext);, +, +		@Override, +		public URL getResource(String path) throws IOException {, +			URL retValue = null;, +			Set<URL> urlSet = getResources(path);, +			if (urlSet != null && !urlSet.isEmpty()) {, +				retValue = urlSet.iterator().next();, +			}, +			return retValue;, +		}, +, +		@Override, +		public Set<URL> getResources(String path) throws IOException {, +			Set<URL> urlSet = null;, +			Resource[] resources = this.resolver.getResources(path);, +			if (resources != null && resources.length > 0) {, +				urlSet = new HashSet<URL>();, +				for (Resource resource : resources) {, +					urlSet.add(resource.getURL());, +				}, +			}, +			return urlSet;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringTilesApplicationContextFactory.java, +import java.io.IOException;, +import java.net.URL;, +import java.util.HashSet;, +import java.util.Set;, +import org.apache.tiles.servlet.context.ServletTilesApplicationContext;, +, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourcePatternResolver;, +import org.springframework.web.context.support.ServletContextResourcePatternResolver;, +	private static class SpringWildcardServletTilesApplicationContext extends ServletTilesApplicationContext {, +		private final ResourcePatternResolver resolver;, +, +			this.resolver = new ServletContextResourcePatternResolver(servletContext);, +, +		@Override, +		public URL getResource(String path) throws IOException {, +			URL retValue = null;, +			Set<URL> urlSet = getResources(path);, +			if (urlSet != null && !urlSet.isEmpty()) {, +				retValue = urlSet.iterator().next();, +			}, +			return retValue;, +		}, +, +		@Override, +		public Set<URL> getResources(String path) throws IOException {, +			Set<URL> urlSet = null;, +			Resource[] resources = this.resolver.getResources(path);, +			if (resources != null && resources.length > 0) {, +				urlSet = new HashSet<URL>();, +				for (Resource resource : resources) {, +					urlSet.add(resource.getURL());, +				}, +			}, +			return urlSet;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, + * Helper class to configure Tiles 2.x for the Spring Framework. See, + * Tiles 2.1's EL support will be activated by default when running on JSP 2.1 or above, + * and when the Tiles EL module is present in the classpath., +	private static final boolean tilesElPresent =  // requires JSP 2.1 as well as Tiles EL module, +			ClassUtils.isPresent(, +			"javax.servlet.jsp.JspApplicationContext", TilesConfigurer.class.getClassLoader()) &&, +			ClassUtils.isPresent(, +			"org.apache.tiles.evaluator.el.ELAttributeEvaluator", TilesConfigurer.class.getClassLoader());, +		this.tilesPropertyMap.put(TilesContainerFactory.ATTRIBUTE_EVALUATOR_INIT_PARAM, tilesElPresent ?, +				"org.apache.tiles.evaluator.el.ELAttributeEvaluator" : DirectAttributeEvaluator.class.getName());, +		if (tilesElPresent && this.tilesInitializer instanceof SpringTilesInitializer) {, +			TilesElActivator.registerEvaluator(container);, +, +	private static class TilesElActivator {, +, +		public static void registerEvaluator(BasicTilesContainer container) {, +			try {, +				ClassLoader cl = TilesElActivator.class.getClassLoader();, +				Class aef = cl.loadClass("org.apache.tiles.evaluator.AttributeEvaluatorFactory");, +				Class baef = cl.loadClass("org.apache.tiles.evaluator.BasicAttributeEvaluatorFactory");, +				Constructor baefCtor = baef.getConstructor(AttributeEvaluator.class);, +				ELAttributeEvaluator evaluator = new ELAttributeEvaluator();, +				evaluator.setApplicationContext(container.getApplicationContext());, +				evaluator.init(new HashMap<String, String>());, +				Object baefValue = baefCtor.newInstance(evaluator);]