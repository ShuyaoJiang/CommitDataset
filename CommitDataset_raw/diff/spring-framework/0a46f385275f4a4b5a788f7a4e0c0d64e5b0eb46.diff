[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, + * A specialization of {@link MessageSendingOperations} and {@link MessageReceivingOperations}, + * for JMS related operations that allow to specify a destination name rather than the, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, + * A specialization of {@link MessageSendingOperations} and {@link MessageReceivingOperations}, + * for JMS related operations that allow to specify a destination name rather than the, +++ b/spring-jms/src/main/java/org/springframework/jms/core/support/JmsGatewaySupport.java, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, + * A specialization of {@link MessageSendingOperations} and {@link MessageReceivingOperations}, + * for JMS related operations that allow to specify a destination name rather than the, +++ b/spring-jms/src/main/java/org/springframework/jms/core/support/JmsGatewaySupport.java, +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, +	public void resolveCustomHeaderNameAndPayload() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class);, +, +		Session session = mock(Session.class);, +		StubTextMessage message = createSimpleJmsTextMessage("my payload");, +		message.setIntProperty("myCounter", 24);, +		listener.onMessage(message, session);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	@Test, +		public void resolveHeaderAndPayload(@Payload String content, @Header int myCounter) {, +			assertEquals("Wrong @Header resolution", 55, myCounter);, +		}, +, +		public void resolveCustomHeaderNameAndPayload(@Payload String content, @Header("myCounter") int counter) {, +			invocations.put("resolveCustomHeaderNameAndPayload", true);, +			assertEquals("Wrong @Payload resolution", "my payload", content);, +			assertEquals("Wrong @Header resolution", 24, counter);]