[+++ b/build.gradle, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +++ b/build.gradle, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +import java.lang.annotation.Annotation;, +import java.util.HashMap;, +import java.util.Map;, +import kotlin.jvm.JvmClassMappingKt;, +import kotlin.reflect.KFunction;, +import kotlin.reflect.KParameter;, +import kotlin.reflect.full.KClasses;, +import kotlin.reflect.jvm.ReflectJvmMapping;, + * @author Sebastien Deleuze, +	private static final boolean kotlinPresent =, +			ClassUtils.isPresent("kotlin.Unit", BeanUtils.class.getClassLoader());, +	, +			Constructor<T> ctor = (kotlinPresent && isKotlinClass(clazz) ?, +					KotlinDelegate.findPrimaryConstructor(clazz) : clazz.getDeclaredConstructor());, +			if (ctor == null) {, +				throw new BeanInstantiationException(clazz, "No default constructor found");, +			}, +			return instantiateClass(ctor);, +	 * non-accessible (that is, non-public) constructor, and supports Kotlin classes, +	 * with optional parameters and default values., +	 * @param args the constructor arguments to apply (use null for unspecified parameter, +	 * if needed for Kotlin classes with optional parameters and default values), +			return (kotlinPresent && isKotlinClass(ctor.getDeclaringClass()) ? KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));, +	 * Return the primary constructor of the provided class (single or default constructor, +	 * for Java classes and primary constructor for Kotlin classes) if any., +	 * @param clazz the {@link Class} of the Kotlin class, +	 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked"), +	@Nullable, +	public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +		Assert.notNull(clazz, "Class must not be null");, +		Constructor<T> ctor = null;, +		if (kotlinPresent && isKotlinClass(clazz)) {, +			ctor = KotlinDelegate.findPrimaryConstructor(clazz);, +		}, +		else {, +			Constructor<T>[] ctors = (Constructor<T>[])clazz.getConstructors();, +			if (ctors.length == 1) {, +				ctor = ctors[0];, +			}, +			else {, +				try {, +					ctor = clazz.getDeclaredConstructor();, +				}, +				catch (NoSuchMethodException e) {, +				}, +			}, +		}, +		return ctor;, +	}, +, +	/**, +	/**, +	 * Return true if the specified class is a Kotlin one., +	 */, +	private static boolean isKotlinClass(Class<?> clazz) {, +		for (Annotation annotation : clazz.getDeclaredAnnotations()) {, +			if (annotation.annotationType().getName().equals("kotlin.Metadata")) {, +				return true;, +			}, +		}, +		return false;, +	}, +	, +, +	/**, +	 * Inner class to avoid a hard dependency on Kotlin at runtime., +	 */, +	private static class KotlinDelegate {, +, +		/**, +		 * Return the Java constructor corresponding to the Kotlin primary constructor if any., +		 * @param clazz the {@link Class} of the Kotlin class, +		 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +		 */, +		@Nullable, +		public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +			KFunction<T> primaryConstructor = KClasses.getPrimaryConstructor(JvmClassMappingKt.getKotlinClass(clazz));, +			if (primaryConstructor == null) {, +				return null;, +			}, +			Constructor<T> constructor = ReflectJvmMapping.getJavaConstructor(primaryConstructor);, +			Assert.notNull(constructor, "Can't get the Java constructor corresponding to the Kotlin primary constructor of " + clazz.getName());, +			return constructor;, +		}]