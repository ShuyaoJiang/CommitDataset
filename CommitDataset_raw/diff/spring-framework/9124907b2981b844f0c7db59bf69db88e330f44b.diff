[+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +, +import org.junit.Test;, +, +import org.springframework.beans.FatalBeanException;, +, +import com.fasterxml.jackson.annotation.JsonInclude.Include;, + * Test cases for {@link Jackson2ObjectMapperFactoryBean}., + * @author Dmitry Katsubo, + * @author Sam Brannen, +	private final SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);, +	private final Jackson2ObjectMapperFactoryBean factory = new Jackson2ObjectMapperFactoryBean();, +	public void settingNullValuesShouldNotThrowExceptions() {, +		this.factory.setSerializers((JsonSerializer<?>[]) null);, +		this.factory.setSerializersByType(null);, +		this.factory.setDeserializersByType(null);, +		this.factory.setFeaturesToEnable((Object[]) null);, +		this.factory.setFeaturesToDisable((Object[]) null);, +		assertSame(Include.ALWAYS, objectMapper.getSerializationConfig().getSerializationInclusion());, +	public void defaultSerializationInclusion() {, +		this.factory.afterPropertiesSet();, +		assertSame(Include.ALWAYS, this.factory.getObject().getSerializationConfig().getSerializationInclusion());, +	public void nonNullSerializationInclusion() {, +		this.factory.setSerializationInclusion(Include.NON_NULL);, +		this.factory.afterPropertiesSet();, +		assertSame(Include.NON_NULL, this.factory.getObject().getSerializationConfig().getSerializationInclusion());, +	public void nonDefaultSerializationInclusion() {, +		this.factory.setSerializationInclusion(Include.NON_DEFAULT);, +		this.factory.afterPropertiesSet();, +		assertSame(Include.NON_DEFAULT, this.factory.getObject().getSerializationConfig().getSerializationInclusion());, +	public void nonEmptySerializationInclusion() {, +		this.factory.setSerializationInclusion(Include.NON_EMPTY);, +		this.factory.afterPropertiesSet();, +		assertSame(Include.NON_EMPTY, this.factory.getObject().getSerializationConfig().getSerializationInclusion());, +	}, +	@Test, +	public void setDateFormat() {, +		this.factory.setDateFormat(this.dateFormat);, +		assertEquals(this.dateFormat, this.factory.getObject().getSerializationConfig().getDateFormat());, +		assertEquals(this.dateFormat, this.factory.getObject().getDeserializationConfig().getDateFormat());, +	public void setSimpleDateFormat() {, +		assertEquals(this.dateFormat, this.factory.getObject().getSerializationConfig().getDateFormat());, +		assertEquals(this.dateFormat, this.factory.getObject().getDeserializationConfig().getDateFormat());, +	public void setLocale() {, +	public void setTimeZone() {, +	public void setTimeZoneWithInvalidZoneId() {, +		this.factory.setTimeZone(TimeZone.getTimeZone("bogusZoneId"));, +		NumberSerializer serializer = new NumberSerializer(Integer.class);, +		module.addSerializer(Integer.class, serializer);, +		assertSame(serializer, serializers.findSerializer(null, SimpleType.construct(Integer.class), null));, +		assertNull(this.factory.getObjectType());, +	public void setFilters() throws JsonProcessingException {, +		this.factory.setObjectMapper(objectMapper);, +		// Disable well-known modules detection, +		this.factory.setModules(new ArrayList<>());, +		this.factory.setSerializers(serializer1);, +		this.factory.setSerializersByType(Collections.singletonMap(Boolean.class, serializer2));, +		this.factory.setDeserializersByType(deserializers);, +		this.factory.setAnnotationIntrospector(annotationIntrospector);, +		this.factory.setSerializationInclusion(Include.NON_NULL);, +		assertSame(objectMapper, this.factory.getObject());, +		assertSame(serializer1, serializers.findSerializer(null, SimpleType.construct(Class.class), null));, +		assertSame(serializer2, serializers.findSerializer(null, SimpleType.construct(Boolean.class), null));, +		assertSame(annotationIntrospector, objectMapper.getSerializationConfig().getAnnotationIntrospector());, +		assertSame(annotationIntrospector, objectMapper.getDeserializationConfig().getAnnotationIntrospector());, +		assertSame(Include.NON_NULL, objectMapper.getSerializationConfig().getSerializationInclusion());, +	public void setObjectMapper() {, +	public void setCreateXmlMapper() {, +		private String property1;, +		private String property2;, +]