[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +		if (!type.isArray() || Array.getLength(possibleArray) == 0 ||, +				!ClassUtils.isAssignableValue(type.getComponentType(), value)) {, +		Object arrayValue = Array.get(possibleArray, 0);, +		return (type.getComponentType().isPrimitive() ? arrayValue.equals(value) : arrayValue == value);, +	}, +	 * Package up the arguments so that they correctly match what is expected in parameterTypes., +	 * For example, if parameterTypes is (int, String[]) because the second parameter was declared String..., +	 * then if arguments is [1,"a","b"] then it must be repackaged as [1,new String[]{"a","b"}] in order to, +	 * match the expected parameterTypes., +		// Check if repackaging is needed..., +		if (parameterCount != args.length ||, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +		if (!type.isArray() || Array.getLength(possibleArray) == 0 ||, +				!ClassUtils.isAssignableValue(type.getComponentType(), value)) {, +		Object arrayValue = Array.get(possibleArray, 0);, +		return (type.getComponentType().isPrimitive() ? arrayValue.equals(value) : arrayValue == value);, +	}, +	 * Package up the arguments so that they correctly match what is expected in parameterTypes., +	 * For example, if parameterTypes is (int, String[]) because the second parameter was declared String..., +	 * then if arguments is [1,"a","b"] then it must be repackaged as [1,new String[]{"a","b"}] in order to, +	 * match the expected parameterTypes., +		// Check if repackaging is needed..., +		if (parameterCount != args.length ||, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +	public void SPR12502() {, +	@Test, +	public void SPR12522() {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		Expression expression = parser.parseExpression("T(java.util.Arrays).asList('')");, +		Object value = expression.getValue();, +		assertTrue(value instanceof List);, +		assertTrue(((List) value).isEmpty());, +	}, +]