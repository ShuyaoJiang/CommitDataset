[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param methodParameter the target method parameter, +	 * @param type the specific type to expose (may be an array/collection element), +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor, MethodParameter methodParameter, Class type) {, +		super(methodParameter, type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param methodParameter the target method parameter, +	 * @param type the specific type to expose (may be an array/collection element), +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor, MethodParameter methodParameter, Class type) {, +		super(methodParameter, type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			String canonicalName = PropertyAccessorUtils.getPropertyName(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(canonicalName);, +				Class type = getPropertyType(propertyName);, +					return new BeanTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new BeanTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +			throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + name,, +					"Could not instantiate property type [" + type.getName() + "] to auto-grow nested property path: " + ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param methodParameter the target method parameter, +	 * @param type the specific type to expose (may be an array/collection element), +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor, MethodParameter methodParameter, Class type) {, +		super(methodParameter, type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			String canonicalName = PropertyAccessorUtils.getPropertyName(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(canonicalName);, +				Class type = getPropertyType(propertyName);, +					return new BeanTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new BeanTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +			throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + name,, +					"Could not instantiate property type [" + type.getName() + "] to auto-grow nested property path: " + ex);, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			if (td != null) {, +		return value;, +	}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param methodParameter the target method parameter, +	 * @param type the specific type to expose (may be an array/collection element), +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor, MethodParameter methodParameter, Class type) {, +		super(methodParameter, type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			String canonicalName = PropertyAccessorUtils.getPropertyName(propertyName);, +			PropertyDescriptor pd = getPropertyDescriptorInternal(canonicalName);, +				Class type = getPropertyType(propertyName);, +					return new BeanTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new BeanTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +			throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + name,, +					"Could not instantiate property type [" + type.getName() + "] to auto-grow nested property path: " + ex);, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			if (td != null) {, +		return value;, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +import java.util.List;, +	@Test, +	public void testPatternArrayFormatting() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternArray", new String[] {"1,25.00", "2,35.00"});, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternArray[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternArray[1]"));, +, +		propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternArray[0]", "1,25.00");, +		propertyValues.add("patternArray[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternArray[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternArray[1]"));, +	}, +, +	@Test, +	public void testPatternListFormatting() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList", new String[] {"1,25.00", "2,35.00"});, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]"));, +, +		propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList[0]", "1,25.00");, +		propertyValues.add("patternList[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]"));, +	}, +, +, +		@NumberFormat(pattern="#,##.00"), +		private BigDecimal[] patternArray;, +, +		@NumberFormat(pattern="#,##.00"), +		private List[] patternList;, +, +		public BigDecimal[] getPatternArray() {, +			return patternArray;, +]