[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				element, clientInChannel, clientOutChannel, userSessionRegistry, parserCxt, source);, +	private RuntimeBeanReference registerSubProtocolWebSocketHandler(Element element,, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +, +		Element transportElem = DomUtils.getChildElementByTagName(element, "transport");, +		if (transportElem != null) {, +			String messageSize = transportElem.getAttribute("message-size");, +			if (messageSize != null) {, +				stompHandlerDef.getPropertyValues().add("messageSizeLimit", messageSize);, +			}, +			String sendTimeLimit = transportElem.getAttribute("send-timeout");, +			if (sendTimeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendTimeLimit", sendTimeLimit);, +			}, +			String sendBufferSizeLimit = transportElem.getAttribute("send-buffer-size");, +			if (sendBufferSizeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendBufferSizeLimit", sendBufferSizeLimit);, +			}, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				element, clientInChannel, clientOutChannel, userSessionRegistry, parserCxt, source);, +	private RuntimeBeanReference registerSubProtocolWebSocketHandler(Element element,, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +, +		Element transportElem = DomUtils.getChildElementByTagName(element, "transport");, +		if (transportElem != null) {, +			String messageSize = transportElem.getAttribute("message-size");, +			if (messageSize != null) {, +				stompHandlerDef.getPropertyValues().add("messageSizeLimit", messageSize);, +			}, +			String sendTimeLimit = transportElem.getAttribute("send-timeout");, +			if (sendTimeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendTimeLimit", sendTimeLimit);, +			}, +			String sendBufferSizeLimit = transportElem.getAttribute("send-buffer-size");, +			if (sendBufferSizeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendBufferSizeLimit", sendBufferSizeLimit);, +			}, +		}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, +	public void configureWebSocketTransport(WebSocketTransportRegistration registration) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				element, clientInChannel, clientOutChannel, userSessionRegistry, parserCxt, source);, +	private RuntimeBeanReference registerSubProtocolWebSocketHandler(Element element,, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +, +		Element transportElem = DomUtils.getChildElementByTagName(element, "transport");, +		if (transportElem != null) {, +			String messageSize = transportElem.getAttribute("message-size");, +			if (messageSize != null) {, +				stompHandlerDef.getPropertyValues().add("messageSizeLimit", messageSize);, +			}, +			String sendTimeLimit = transportElem.getAttribute("send-timeout");, +			if (sendTimeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendTimeLimit", sendTimeLimit);, +			}, +			String sendBufferSizeLimit = transportElem.getAttribute("send-buffer-size");, +			if (sendBufferSizeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendBufferSizeLimit", sendBufferSizeLimit);, +			}, +		}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java, +	public void configureWebSocketTransport(WebSocketTransportRegistration registration) {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/DelegatingWebSocketMessageBrokerConfiguration.java, +	protected void configureWebSocketTransport(WebSocketTransportRegistration registration) {, +		for (WebSocketMessageBrokerConfigurer c : this.configurers) {, +			c.configureWebSocketTransport(registration);, +		}, +	}, +, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				element, clientInChannel, clientOutChannel, userSessionRegistry, parserCxt, source);, +	private RuntimeBeanReference registerSubProtocolWebSocketHandler(Element element,, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +, +		Element transportElem = DomUtils.getChildElementByTagName(element, "transport");, +		if (transportElem != null) {, +			String messageSize = transportElem.getAttribute("message-size");, +			if (messageSize != null) {, +				stompHandlerDef.getPropertyValues().add("messageSizeLimit", messageSize);, +			}, +			String sendTimeLimit = transportElem.getAttribute("send-timeout");, +			if (sendTimeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendTimeLimit", sendTimeLimit);, +			}, +			String sendBufferSizeLimit = transportElem.getAttribute("send-buffer-size");, +			if (sendBufferSizeLimit != null) {, +				subProtocolWshDef.getPropertyValues().add("sendBufferSizeLimit", sendBufferSizeLimit);, +			}, +		}]