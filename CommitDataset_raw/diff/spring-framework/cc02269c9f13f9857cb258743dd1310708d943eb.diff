[+++ b/spring-context-support/src/main/java/org/springframework/mail/MailSender.java, + * Copyright 2002-2014 the original author or authors., +	 * @throws MailParseException in case of failure when parsing the message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending the message, +	 * @throws MailParseException in case of failure when parsing a message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending a message, +	void send(SimpleMailMessage... simpleMessages) throws MailException;, +++ b/spring-context-support/src/main/java/org/springframework/mail/MailSender.java, + * Copyright 2002-2014 the original author or authors., +	 * @throws MailParseException in case of failure when parsing the message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending the message, +	 * @throws MailParseException in case of failure when parsing a message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending a message, +	void send(SimpleMailMessage... simpleMessages) throws MailException;, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/JavaMailSender.java, + * Copyright 2002-2014 the original author or authors., +	void send(MimeMessage... mimeMessages) throws MailException;, +	void send(MimeMessagePreparator... mimeMessagePreparators) throws MailException;, +++ b/spring-context-support/src/main/java/org/springframework/mail/MailSender.java, + * Copyright 2002-2014 the original author or authors., +	 * @throws MailParseException in case of failure when parsing the message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending the message, +	 * @throws MailParseException in case of failure when parsing a message, +	 * @throws MailAuthenticationException in case of authentication failure, +	 * @throws MailSendException in case of failure when sending a message, +	void send(SimpleMailMessage... simpleMessages) throws MailException;, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/JavaMailSender.java, + * Copyright 2002-2014 the original author or authors., +	void send(MimeMessage... mimeMessages) throws MailException;, +	void send(MimeMessagePreparator... mimeMessagePreparators) throws MailException;, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/JavaMailSenderImpl.java, +	public void send(SimpleMailMessage... simpleMessages) throws MailException {, +	public void send(MimeMessage... mimeMessages) throws MailException {, +	public void send(MimeMessagePreparator... mimeMessagePreparators) throws MailException {, +		String username = getUsername();, +		String password = getPassword();, +		if ("".equals(username)) {  // probably from a placeholder, +			username = null;, +			if ("".equals(password)) {  // in conjunction with "" username, this means no password to use, +				password = null;, +			}, +		}, +		Map<Object, Exception> failedMessages = new LinkedHashMap<Object, Exception>();, +			transport.connect(getHost(), getPort(), username, password);]