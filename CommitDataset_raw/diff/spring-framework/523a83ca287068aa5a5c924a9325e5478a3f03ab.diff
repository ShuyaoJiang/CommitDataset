[+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +		// get the element to force the expiry check (since #isKeyInCache does not considers that), +		Element element = cache.getQuiet(key);, +		return (element != null ? true : false);, +		// force expiry check to guarantee a valid result (otherwise expired elements are considered), +		cache.evictExpiredElements();, +		Object value = (element != null ? element.getObjectValue() : null);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +		// get the element to force the expiry check (since #isKeyInCache does not considers that), +		Element element = cache.getQuiet(key);, +		return (element != null ? true : false);, +		// force expiry check to guarantee a valid result (otherwise expired elements are considered), +		cache.evictExpiredElements();, +		Object value = (element != null ? element.getObjectValue() : null);, +++ b/org.springframework.context/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTest.java, + * Copyright 2010-2011 the original author or authors., +import static org.junit.Assert.*;, +import net.sf.ehcache.Element;, +import org.junit.Test;, +, +	@Test, +	public void testExpiredElements() throws Exception {, +		String key = "brancusi";, +		String value = "constantin";, +		Element brancusi = new Element(key, value);, +		// ttl = 10s, +		brancusi.setTimeToLive(3);, +		nativeCache.put(brancusi);, +, +		assertTrue(cache.containsKey(key));, +		assertEquals(value, cache.get(key));, +		// wait for the entry to expire, +		Thread.sleep(5 * 1000);, +		assertFalse("expired entry returned", cache.containsKey(key));, +		assertNull(cache.get(key));, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +		// get the element to force the expiry check (since #isKeyInCache does not considers that), +		Element element = cache.getQuiet(key);, +		return (element != null ? true : false);, +		// force expiry check to guarantee a valid result (otherwise expired elements are considered), +		cache.evictExpiredElements();, +		Object value = (element != null ? element.getObjectValue() : null);, +++ b/org.springframework.context/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTest.java, + * Copyright 2010-2011 the original author or authors., +import static org.junit.Assert.*;, +import net.sf.ehcache.Element;, +import org.junit.Test;, +, +	@Test, +	public void testExpiredElements() throws Exception {, +		String key = "brancusi";, +		String value = "constantin";, +		Element brancusi = new Element(key, value);, +		// ttl = 10s, +		brancusi.setTimeToLive(3);, +		nativeCache.put(brancusi);, +, +		assertTrue(cache.containsKey(key));, +		assertEquals(value, cache.get(key));, +		// wait for the entry to expire, +		Thread.sleep(5 * 1000);, +		assertFalse("expired entry returned", cache.containsKey(key));, +		assertNull(cache.get(key));, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java, +import static org.junit.Assert.*;, +	protected T nativeCache;, +	protected Cache cache;]