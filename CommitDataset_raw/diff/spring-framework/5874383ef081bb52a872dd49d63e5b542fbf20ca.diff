[+++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain, + * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property, + * placeholder configurers}., +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain, + * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property, + * placeholder configurers}., +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2012 the original author or authors., +					". Object of class [" + (obj != null ? obj.getClass().getName() : "null") +, +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain, + * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property, + * placeholder configurers}., +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2012 the original author or authors., +					". Object of class [" + (obj != null ? obj.getClass().getName() : "null") +, +++ b/spring-core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java, + * Copyright 2002-2012 the original author or authors., +, +import static java.lang.String.*;, +, +import static org.hamcrest.CoreMatchers.*;, +, +import static org.junit.Assert.*;, +import static org.junit.matchers.JUnitMatchers.*;, +, +import static org.springframework.core.env.AbstractEnvironment.*;, +, +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain, + * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property, + * placeholder configurers}., +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2012 the original author or authors., +					". Object of class [" + (obj != null ? obj.getClass().getName() : "null") +, +++ b/spring-core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java, + * Copyright 2002-2012 the original author or authors., +, +import static java.lang.String.*;, +, +import static org.hamcrest.CoreMatchers.*;, +, +import static org.junit.Assert.*;, +import static org.junit.matchers.JUnitMatchers.*;, +, +import static org.springframework.core.env.AbstractEnvironment.*;, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/context/AbstractApplicationContextTests.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +, +	@SuppressWarnings("serial"), +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Copyright 2002-2012 the original author or authors., + * When an {@link Environment} is being used by an {@code ApplicationContext}, it is, + * important that any such {@code PropertySource} manipulations be performed, + * <em>before</em> the context's {@link, + * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}, + * method is called. This ensures that all property sources are available during the, + * container bootstrap process, including use by {@linkplain]