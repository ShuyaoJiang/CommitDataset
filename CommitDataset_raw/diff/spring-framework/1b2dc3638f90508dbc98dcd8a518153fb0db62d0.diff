[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/TypePatternClassFilter.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		Assert.notNull(typePattern, "Type pattern must not be null");, +	/**, +	 * Return the AspectJ type pattern to match., +	 */, +		return this.typePattern;, +, +		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");, +		String result = StringUtils.replace(pcExpr," and "," && ");, +		result = StringUtils.replace(result, " or ", " || ");, +		return StringUtils.replace(result, " not ", " ! ");, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/TypePatternClassFilter.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		Assert.notNull(typePattern, "Type pattern must not be null");, +	/**, +	 * Return the AspectJ type pattern to match., +	 */, +		return this.typePattern;, +, +		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");, +		String result = StringUtils.replace(pcExpr," and "," && ");, +		result = StringUtils.replace(result, " or ", " || ");, +		return StringUtils.replace(result, " not ", " ! ");, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2017 the original author or authors., +			throw new IllegalArgumentException(, +					"AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/TypePatternClassFilter.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		Assert.notNull(typePattern, "Type pattern must not be null");, +	/**, +	 * Return the AspectJ type pattern to match., +	 */, +		return this.typePattern;, +, +		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");, +		String result = StringUtils.replace(pcExpr," and "," && ");, +		result = StringUtils.replace(result, " or ", " || ");, +		return StringUtils.replace(result, " not ", " ! ");, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2017 the original author or authors., +			throw new IllegalArgumentException(, +					"AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2017 the original author or authors., +					"AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/TypePatternClassFilter.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		Assert.notNull(typePattern, "Type pattern must not be null");, +	/**, +	 * Return the AspectJ type pattern to match., +	 */, +		return this.typePattern;, +, +		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");, +		String result = StringUtils.replace(pcExpr," and "," && ");, +		result = StringUtils.replace(result, " or ", " || ");, +		return StringUtils.replace(result, " not ", " ! ");, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2017 the original author or authors., +			throw new IllegalArgumentException(, +					"AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2017 the original author or authors., +					"AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2017 the original author or authors., +					Assert.isAssignable(Scope.class, scopeClass, "Invalid scope class");, +					Assert.isAssignable(Scope.class, scopeClass, "Invalid scope class");, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/TypePatternClassFilter.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		Assert.notNull(typePattern, "Type pattern must not be null");, +	/**, +	 * Return the AspectJ type pattern to match., +	 */, +		return this.typePattern;, +, +		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");, +		String result = StringUtils.replace(pcExpr," and "," && ");, +		result = StringUtils.replace(result, " or ", " || ");, +		return StringUtils.replace(result, " not ", " ! ");, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2017 the original author or authors., +			throw new IllegalArgumentException(, +					"AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2017 the original author or authors., +					"AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: " + beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2017 the original author or authors., +					Assert.isAssignable(Scope.class, scopeClass, "Invalid scope class");, +					Assert.isAssignable(Scope.class, scopeClass, "Invalid scope class");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2017 the original author or authors.]