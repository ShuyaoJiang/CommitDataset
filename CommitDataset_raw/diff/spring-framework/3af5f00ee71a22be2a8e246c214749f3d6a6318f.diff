[+++ b/spring-web/src/main/java/org/springframework/web/server/UnsupportedMediaTypeStatusException.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.ResolvableType;, +	@Nullable, +	private final ResolvableType bodyType;, +, +		this.bodyType = null;, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes) {, +		this(contentType, supportedTypes, null);, +	}, +, +	/**, +	 * Constructor for when trying to encode from or decode to a specific Java type., +	 * @since 5.1, +	 */, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes,, +			@Nullable ResolvableType bodyType) {, +, +		super(HttpStatus.UNSUPPORTED_MEDIA_TYPE, initReason(contentType, bodyType));, +		this.supportedMediaTypes = Collections.unmodifiableList(supportedTypes);, +		this.bodyType = bodyType;, +	}, +, +	private static String initReason(@Nullable MediaType contentType, @Nullable ResolvableType bodyType) {, +		return "Content type '" + (contentType != null ? contentType : "") + "' not supported" +, +				(bodyType != null ? " for bodyType=" + bodyType.toString() : "");, +	/**, +	 * Return the body type in the context of which this exception was generated., +	 * This is applicable when the exception was raised as a result trying to, +	 * encode from or decode to a specific Java type., +	 * @return the body type, or {@code null}, +	 * @since 5.1, +	 */, +	@Nullable, +	public ResolvableType getBodyType() {, +		return this.bodyType;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/UnsupportedMediaTypeStatusException.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.ResolvableType;, +	@Nullable, +	private final ResolvableType bodyType;, +, +		this.bodyType = null;, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes) {, +		this(contentType, supportedTypes, null);, +	}, +, +	/**, +	 * Constructor for when trying to encode from or decode to a specific Java type., +	 * @since 5.1, +	 */, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes,, +			@Nullable ResolvableType bodyType) {, +, +		super(HttpStatus.UNSUPPORTED_MEDIA_TYPE, initReason(contentType, bodyType));, +		this.supportedMediaTypes = Collections.unmodifiableList(supportedTypes);, +		this.bodyType = bodyType;, +	}, +, +	private static String initReason(@Nullable MediaType contentType, @Nullable ResolvableType bodyType) {, +		return "Content type '" + (contentType != null ? contentType : "") + "' not supported" +, +				(bodyType != null ? " for bodyType=" + bodyType.toString() : "");, +	/**, +	 * Return the body type in the context of which this exception was generated., +	 * This is applicable when the exception was raised as a result trying to, +	 * encode from or decode to a specific Java type., +	 * @return the body type, or {@code null}, +	 * @since 5.1, +	 */, +	@Nullable, +	public ResolvableType getBodyType() {, +		return this.bodyType;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +							new UnsupportedMediaTypeException(contentType, supportedMediaTypes, elementType);, +++ b/spring-web/src/main/java/org/springframework/web/server/UnsupportedMediaTypeStatusException.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.ResolvableType;, +	@Nullable, +	private final ResolvableType bodyType;, +, +		this.bodyType = null;, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes) {, +		this(contentType, supportedTypes, null);, +	}, +, +	/**, +	 * Constructor for when trying to encode from or decode to a specific Java type., +	 * @since 5.1, +	 */, +	public UnsupportedMediaTypeStatusException(@Nullable MediaType contentType, List<MediaType> supportedTypes,, +			@Nullable ResolvableType bodyType) {, +, +		super(HttpStatus.UNSUPPORTED_MEDIA_TYPE, initReason(contentType, bodyType));, +		this.supportedMediaTypes = Collections.unmodifiableList(supportedTypes);, +		this.bodyType = bodyType;, +	}]