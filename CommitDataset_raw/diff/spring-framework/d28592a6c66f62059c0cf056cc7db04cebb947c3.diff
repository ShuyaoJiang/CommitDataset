[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2012 the original author or authors., +import java.util.HashSet;, +import java.util.Set;, +			Method[] methods = getMethods(type, targetObject);, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +		if(targetObject instanceof Class) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		}, +		return getMethods(type);, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2012 the original author or authors., +import java.util.HashSet;, +import java.util.Set;, +			Method[] methods = getMethods(type, targetObject);, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +		if(targetObject instanceof Class) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		}, +		return getMethods(type);, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +		Method method = findGetterForProperty(name, type, target);, +			Field field = findField(name, type, target);, +				method = findGetterForProperty(name, type, target);, +				field = findField(name, type, target);, +		Method method = findSetterForProperty(name, type, target);, +			Field field = findField(name, type, target);, +				method = findSetterForProperty(name, type, target);, +				field = findField(name, type, target);, +	private Method findGetterForProperty(String propertyName, Class<?> clazz, Object target) {, +		Method method = findGetterForProperty(propertyName, clazz, target instanceof Class);, +		if(method == null && target instanceof Class) {, +			method = findGetterForProperty(propertyName, target.getClass(), false);, +		}, +		return method;, +	}, +, +	private Method findSetterForProperty(String propertyName, Class<?> clazz, Object target) {, +		Method method = findSetterForProperty(propertyName, clazz, target instanceof Class);, +		if(method == null && target instanceof Class) {, +			method = findSetterForProperty(propertyName, target.getClass(), false);, +		}, +		return method;, +	}, +, +	private Field findField(String name, Class<?> clazz, Object target) {, +		Field field = findField(name, clazz, target instanceof Class);, +		if(field == null && target instanceof Class) {, +			field = findField(name, target.getClass(), false);, +		}, +		return field;, +	}, +, +				method = findGetterForProperty(name, type, target);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2012 the original author or authors., +import java.util.HashSet;, +import java.util.Set;, +			Method[] methods = getMethods(type, targetObject);, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +		if(targetObject instanceof Class) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		}, +		return getMethods(type);, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +		Method method = findGetterForProperty(name, type, target);, +			Field field = findField(name, type, target);, +				method = findGetterForProperty(name, type, target);, +				field = findField(name, type, target);, +		Method method = findSetterForProperty(name, type, target);, +			Field field = findField(name, type, target);, +				method = findSetterForProperty(name, type, target);, +				field = findField(name, type, target);, +	private Method findGetterForProperty(String propertyName, Class<?> clazz, Object target) {, +		Method method = findGetterForProperty(propertyName, clazz, target instanceof Class);, +		if(method == null && target instanceof Class) {, +			method = findGetterForProperty(propertyName, target.getClass(), false);, +		}, +		return method;, +	}, +, +	private Method findSetterForProperty(String propertyName, Class<?> clazz, Object target) {, +		Method method = findSetterForProperty(propertyName, clazz, target instanceof Class);]