[+++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +						listeners.forEach(listener ->, +								processJmsListener(listener, method, bean)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +						listeners.forEach(listener ->, +								processJmsListener(listener, method, bean)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, +		headers.forEach((key, values) ->, +				values.forEach(value -> addNativeHeader(key, value)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +						listeners.forEach(listener ->, +								processJmsListener(listener, method, bean)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, +		headers.forEach((key, values) ->, +				values.forEach(value -> addNativeHeader(key, value)));, +++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Map;, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createCaffeineCache(entry.getKey()));, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +						listeners.forEach(listener ->, +								processJmsListener(listener, method, bean)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, +		headers.forEach((key, values) ->, +				values.forEach(value -> addNativeHeader(key, value)));, +++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/NameMatchTransactionAttributeSource.java, + * Copyright 2002-2017 the original author or authors.]