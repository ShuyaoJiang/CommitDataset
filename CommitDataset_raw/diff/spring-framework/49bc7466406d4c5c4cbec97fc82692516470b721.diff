[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, + * Extension of {@code Cookie} with extra attributes, as defined in, +		Assert.isTrue(cookieParts.length == 2, () -> "Invalid Set-Cookie header value '" + setCookieHeader + "'");, +		String[] valueAndAttributes = cookieParts[1].split("\\s*;\\s*", 2);, +		String value = valueAndAttributes[0];, +		String[] attributes = valueAndAttributes.length > 1 ? valueAndAttributes[1].split("\\s*;\\s*") : new String[0];, +		for (String attribute : attributes) {, +			if (attribute.startsWith("Domain")) {, +				cookie.setDomain(extractAttributeValue(attribute, setCookieHeader));, +			else if (attribute.startsWith("Max-Age")) {, +				cookie.setMaxAge(Integer.parseInt(extractAttributeValue(attribute, setCookieHeader)));, +			else if (attribute.startsWith("Path")) {, +				cookie.setPath(extractAttributeValue(attribute, setCookieHeader));, +			else if (attribute.startsWith("Secure")) {, +			else if (attribute.startsWith("HttpOnly")) {, +			else if (attribute.startsWith("SameSite")) {, +				cookie.setSameSite(extractAttributeValue(attribute, setCookieHeader));, +	private static String extractAttributeValue(String attribute, String header) {, +		String[] nameAndValue = attribute.split("=");, +		Assert.isTrue(nameAndValue.length == 2,, +				() -> "No value in attribute '" + nameAndValue[0] + "' for Set-Cookie header '" + header + "'");, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, + * Extension of {@code Cookie} with extra attributes, as defined in, +		Assert.isTrue(cookieParts.length == 2, () -> "Invalid Set-Cookie header value '" + setCookieHeader + "'");, +		String[] valueAndAttributes = cookieParts[1].split("\\s*;\\s*", 2);, +		String value = valueAndAttributes[0];, +		String[] attributes = valueAndAttributes.length > 1 ? valueAndAttributes[1].split("\\s*;\\s*") : new String[0];, +		for (String attribute : attributes) {, +			if (attribute.startsWith("Domain")) {, +				cookie.setDomain(extractAttributeValue(attribute, setCookieHeader));, +			else if (attribute.startsWith("Max-Age")) {, +				cookie.setMaxAge(Integer.parseInt(extractAttributeValue(attribute, setCookieHeader)));, +			else if (attribute.startsWith("Path")) {, +				cookie.setPath(extractAttributeValue(attribute, setCookieHeader));, +			else if (attribute.startsWith("Secure")) {, +			else if (attribute.startsWith("HttpOnly")) {, +			else if (attribute.startsWith("SameSite")) {, +				cookie.setSameSite(extractAttributeValue(attribute, setCookieHeader));, +	private static String extractAttributeValue(String attribute, String header) {, +		String[] nameAndValue = attribute.split("=");, +		Assert.isTrue(nameAndValue.length == 2,, +				() -> "No value in attribute '" + nameAndValue[0] + "' for Set-Cookie header '" + header + "'");, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockCookieTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Sam Brannen, + * @since 5.1, +	@Rule, +	public ExpectedException exception = ExpectedException.none();, +, +	@Test, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("Invalid Set-Cookie header value 'BOOM'");, +		MockCookie.parse("BOOM");, +	}, +, +	@Test, +	public void parseInvalidAttribute() {, +		String header = "foo=bar; Path=";, +, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("No value in attribute 'Path' for Set-Cookie header '" + header + "'");, +		MockCookie.parse(header);]