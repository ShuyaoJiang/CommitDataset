[+++ b/org.springframework.web.portlet/src/test/java/org/springframework/mock/web/MockHttpSession.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.mock.web;, +, +import java.io.Serializable;, +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import javax.servlet.ServletContext;, +import javax.servlet.http.HttpSession;, +import javax.servlet.http.HttpSessionBindingEvent;, +import javax.servlet.http.HttpSessionBindingListener;, +import javax.servlet.http.HttpSessionContext;, +, +import org.springframework.util.Assert;, +, +/**, + * Mock implementation of the {@link javax.servlet.http.HttpSession} interface., + * Supports the Servlet 2.4 API level., + *, + * <p>Used for testing the web framework; also useful for testing, + * application controllers., + *, + * @author Juergen Hoeller, + * @author Rod Johnson, + * @author Mark Fisher, + * @since 1.0.2, + */, +public class MockHttpSession implements HttpSession {, +, +	public static final String SESSION_COOKIE_NAME = "JSESSION";, +, +	private static int nextId = 1;, +, +, +	private final String id;, +, +	private final long creationTime = System.currentTimeMillis();, +, +	private int maxInactiveInterval;, +, +	private long lastAccessedTime = System.currentTimeMillis();, +, +	private final ServletContext servletContext;, +, +	private final Map<String, Object> attributes = new LinkedHashMap<String, Object>();, +, +	private boolean invalid = false;, +, +	private boolean isNew = true;, +, +, +	/**, +	 * Create a new MockHttpSession with a default {@link org.springframework.mock.web.MockServletContext}., +	 * @see org.springframework.mock.web.MockServletContext, +	 */, +	public MockHttpSession() {, +		this(null);, +	}, +, +	/**, +	 * Create a new MockHttpSession., +	 * @param servletContext the ServletContext that the session runs in, +	 */, +	public MockHttpSession(ServletContext servletContext) {, +		this(servletContext, null);, +	}, +, +	/**, +	 * Create a new MockHttpSession., +	 * @param servletContext the ServletContext that the session runs in, +	 * @param id a unique identifier for this session, +	 */, +	public MockHttpSession(ServletContext servletContext, String id) {, +		this.servletContext = (servletContext != null ? servletContext : new MockServletContext());, +		this.id = (id != null ? id : Integer.toString(nextId++));, +	}, +, +, +	public long getCreationTime() {, +		return this.creationTime;, +	}]