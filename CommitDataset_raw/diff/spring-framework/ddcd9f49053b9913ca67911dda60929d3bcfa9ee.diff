[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Interface specifying a basic set of RESTful operations. Implemented by {@link RestTemplate}. Not often used directly,, + * but a useful option to enhance testability, as it can easily be mocked or stubbed., + * @since 3.0, +	 * Retrieve a representation by doing a GET on the specified URL. The response (if any) is converted and returned., +	 *, +	 * @param url the URL, +	<T> T getForObject(String url, Class<T> responseType, String... uriVariables) throws RestClientException;, +	 * Retrieve a representation by doing a GET on the URI template. The response (if any) is converted and returned., +	 *, +	 * @param url the URL, +	<T> T getForObject(String url, Class<T> responseType, Map<String, String> uriVariables) throws RestClientException;, +	 * Retrieve all headers of the resource specified by the URI template. <p>URI Template variables are expanded using the, +	 * given URI variables, if any., +	 *, +	 * @param url the URL, +	HttpHeaders headForHeaders(String url, String... uriVariables) throws RestClientException;, +	 * Retrieve all headers of the resource specified by the URI template. <p>URI Template variables are expanded using the, +	 * given map., +	 *, +	 * @param url the URL, +	HttpHeaders headForHeaders(String url, Map<String, String> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template, and returns the value of the, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored. <p>URI Template, +	 * variables are expanded using the given URI variables, if any., +	 *, +	 * @param url the URL, +	URI postForLocation(String url, Object request, String... uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template, and returns the value of the, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored. <p>URI Template, +	 * variables are expanded using the given map., +	 *, +	 * @param url the URL, +	URI postForLocation(String url, Object request, Map<String, String> uriVariables) throws RestClientException;, +	/**, +	 * Create a new resource by POSTing the given object to the URI template, and returns the converted representation, +	 * found in the response. <p>URI Template variables are expanded using the given URI variables, if any., +	 *, +	 * @param url the URL, +	 * @param request the Object to be POSTed, may be <code>null</code>, +	 * @return the converted object, +	 */, +	<T> T postForObject(String url, Object request, Class<T> responseType, String... uriVariables), +			throws RestClientException;, +, +	/**, +	 * Create a new resource by POSTing the given object to the URI template, and returns the converted representation, +	 * found in the response. <p>URI Template variables are expanded using the given map., +	 *, +	 * @param url the URL, +	 * @param request the Object to be POSTed, may be <code>null</code>, +	 * @return the converted object, +	 */, +	<T> T postForObject(String url, Object request, Class<T> responseType, Map<String, String> uriVariables), +			throws RestClientException;, +	 * Create or update a resource by PUTting the given object to the URI. <p>URI Template variables are expanded using the, +	 * given URI variables, if any., +	 *, +	 * @param url the URL, +	void put(String url, Object request, String... uriVariables) throws RestClientException;, +	 * Creates a new resource by PUTting the given object to URI template. <p>URI Template variables are expanded using the, +	 * given map., +	 *, +	 * @param url the URL, +	void put(String url, Object request, Map<String, String> uriVariables) throws RestClientException;, +	 * Delete the resources at the specified URI. <p>URI Template variables are expanded using the given URI variables, if, +	 * any., +	 *, +	 * @param url the URL, +	void delete(String url, String... uriVariables) throws RestClientException;, +	 * Delete the resources at the specified URI. <p>URI Template variables are expanded using the given map., +	 *, +	 * @param url the URL, +	void delete(String url, Map<String, String> uriVariables) throws RestClientException;, +	 * Return the value of the Allow header for the given URI. <p>URI Template variables are expanded using the given URI, +	 * variables, if any., +	 *, +	 * @param url the URL, +	Set<HttpMethod> optionsForAllow(String url, String... uriVariables) throws RestClientException;, +	 * Return the value of the Allow header for the given URI. <p>URI Template variables are expanded using the given map., +	 *, +	 * @param url the URL, +	Set<HttpMethod> optionsForAllow(String url, Map<String, String> uriVariables) throws RestClientException;, +	 * Execute the HTTP methods to the given URI, preparing the request with the {@link RequestCallback}, and reading the, +	 * response with a {@link ResponseExtractor}. <p>URI Template variables are expanded using the given URI variables, if, +	 * any., +	 *, +	 * @param url the URL, +	<T> T execute(String url,, +	 * Execute the HTTP methods to the given URI, preparing the request with the {@link RequestCallback}, and reading the, +	 * response with a {@link ResponseExtractor}. <p>URI Template variables are expanded using the given URI variables, +	 * map., +	 *, +	 * @param url the URL, +	<T> T execute(String url,, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Interface specifying a basic set of RESTful operations. Implemented by {@link RestTemplate}. Not often used directly,, + * but a useful option to enhance testability, as it can easily be mocked or stubbed., + * @since 3.0, +	 * Retrieve a representation by doing a GET on the specified URL. The response (if any) is converted and returned.]