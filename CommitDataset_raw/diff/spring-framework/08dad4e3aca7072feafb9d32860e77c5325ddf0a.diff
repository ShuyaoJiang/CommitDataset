[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2018 the original author or authors., +	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];, +	private static final Map<Class<?>, TypeDescriptor> commonTypesCache = new HashMap<>(32);, +			double.class, Double.class, float.class, Float.class, int.class, Integer.class,, +			long.class, Long.class, short.class, Short.class, String.class, Object.class};, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2018 the original author or authors., +	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];, +	private static final Map<Class<?>, TypeDescriptor> commonTypesCache = new HashMap<>(32);, +			double.class, Double.class, float.class, Float.class, int.class, Integer.class,, +			long.class, Long.class, short.class, Short.class, String.class, Object.class};, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +			if (clazz == Boolean.TYPE) {, +			else if (clazz == Byte.TYPE) {, +				sb.append('B');, +			}, +			else if (clazz == Integer.TYPE) {, +				sb.append('I');, +			}, +			else if (clazz == Long.TYPE) {, +				sb.append('J');, +			else if (clazz == Void.TYPE) {, +				sb.append('V');, +			}, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2018 the original author or authors., +	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];, +	private static final Map<Class<?>, TypeDescriptor> commonTypesCache = new HashMap<>(32);, +			double.class, Double.class, float.class, Float.class, int.class, Integer.class,, +			long.class, Long.class, short.class, Short.class, String.class, Object.class};, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +			if (clazz == Boolean.TYPE) {, +			else if (clazz == Byte.TYPE) {, +				sb.append('B');, +			}, +			else if (clazz == Integer.TYPE) {, +				sb.append('I');, +			}, +			else if (clazz == Long.TYPE) {, +				sb.append('J');, +			else if (clazz == Void.TYPE) {, +				sb.append('V');, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			else if (arrayTypeCode == TypeCode.BYTE) {, +				populateByteArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.INT) {, +				populateIntArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.LONG) {, +				populateLongArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.SHORT) {, +				populateShortArray(state, newArray, typeConverter, initializer);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2018 the original author or authors., +	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];, +	private static final Map<Class<?>, TypeDescriptor> commonTypesCache = new HashMap<>(32);, +			double.class, Double.class, float.class, Float.class, int.class, Integer.class,, +			long.class, Long.class, short.class, Short.class, String.class, Object.class};, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +			if (clazz == Boolean.TYPE) {, +			else if (clazz == Byte.TYPE) {, +				sb.append('B');, +			}, +			else if (clazz == Integer.TYPE) {, +				sb.append('I');, +			}, +			else if (clazz == Long.TYPE) {, +				sb.append('J');, +			else if (clazz == Void.TYPE) {, +				sb.append('V');, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			else if (arrayTypeCode == TypeCode.BYTE) {, +				populateByteArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.INT) {, +				populateIntArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.LONG) {, +				populateLongArray(state, newArray, typeConverter, initializer);, +			}, +			else if (arrayTypeCode == TypeCode.SHORT) {, +				populateShortArray(state, newArray, typeConverter, initializer);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		if (arrayComponentType == Boolean.TYPE) {, +			boolean[] array = (boolean[]) ctx;, +			array[idx] = convertValue(converter, newValue, Boolean.class);, +		else if (arrayComponentType == Double.TYPE) {, +			double[] array = (double[]) ctx;, +			array[idx] = convertValue(converter, newValue, Double.class);, +		}, +		else if (arrayComponentType == Float.TYPE) {, +			float[] array = (float[]) ctx;, +			checkAccess(array.length, idx);, +			array[idx] = convertValue(converter, newValue, Float.class);, +		}]