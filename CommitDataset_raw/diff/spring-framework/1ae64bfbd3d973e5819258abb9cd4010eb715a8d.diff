[+++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	private final Map<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +	public Map<String, MediaType> getMediaTypes() {, +		return this.mediaTypeLookup;, +	}, +, +	protected List<MediaType> getAllMediaTypes() {, +++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	private final Map<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +	public Map<String, MediaType> getMediaTypes() {, +		return this.mediaTypeLookup;, +	}, +, +	protected List<MediaType> getAllMediaTypes() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +		throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	private final Map<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +	public Map<String, MediaType> getMediaTypes() {, +		return this.mediaTypeLookup;, +	}, +, +	protected List<MediaType> getAllMediaTypes() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +		throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +			throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	private final Map<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +	public Map<String, MediaType> getMediaTypes() {, +		return this.mediaTypeLookup;, +	}, +, +	protected List<MediaType> getAllMediaTypes() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +		throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +			throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolverBuilder.java, +	public CompositeContentTypeResolver build() {, +++ b/build.gradle, +		optional('org.webjars:webjars-locator:0.32'), +		testRuntime("org.webjars:underscorejs:1.8.3"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +	private final Map<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +	public Map<String, MediaType> getMediaTypes() {, +		return this.mediaTypeLookup;, +	}, +, +	protected List<MediaType> getAllMediaTypes() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +		throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +			throw new NotAcceptableStatusException(getAllMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolverBuilder.java, +	public CompositeContentTypeResolver build() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AbstractResourceResolver.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.resource;, +, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.io.Resource;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Base {@link ResourceResolver} providing consistent logging.]