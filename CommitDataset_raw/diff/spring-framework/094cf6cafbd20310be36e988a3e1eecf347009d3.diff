[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, +		 * <p>Custom {@link TypeFilter TypeFilters} may optionally implement any of the, +		 * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and, +		 * their respective methods will be called prior to {@link TypeFilter#match match}:, +		 * <ul>, +		 * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>, +		 * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}, +		 * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}, +		 * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}, +		 * </ul>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, +		 * <p>Custom {@link TypeFilter TypeFilters} may optionally implement any of the, +		 * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and, +		 * their respective methods will be called prior to {@link TypeFilter#match match}:, +		 * <ul>, +		 * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>, +		 * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}, +		 * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}, +		 * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}, +		 * </ul>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.context.ResourceLoaderAware;, +					TypeFilter filter = BeanUtils.instantiateClass(filterClass, TypeFilter.class);, +					invokeAwareMethods(filter);, +					typeFilters.add(filter);, +	/**, +	 * Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and, +	 * {@link BeanFactoryAware} contracts if implemented by the given {@code filter}., +	 */, +	private void invokeAwareMethods(TypeFilter filter) {, +		if (filter instanceof Aware) {, +			if (filter instanceof EnvironmentAware) {, +				((EnvironmentAware) filter).setEnvironment(this.environment);, +			}, +			if (filter instanceof ResourceLoaderAware) {, +				((ResourceLoaderAware) filter).setResourceLoader(this.resourceLoader);, +			}, +			if (filter instanceof BeanClassLoaderAware) {, +				ClassLoader classLoader = (this.registry instanceof ConfigurableBeanFactory ?, +						((ConfigurableBeanFactory) this.registry).getBeanClassLoader() :, +						this.resourceLoader.getClassLoader());, +				((BeanClassLoaderAware) filter).setBeanClassLoader(classLoader);, +			}, +			if (filter instanceof BeanFactoryAware && this.registry instanceof BeanFactory) {, +				((BeanFactoryAware) filter).setBeanFactory((BeanFactory) this.registry);, +			}, +		}, +	}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, +		 * <p>Custom {@link TypeFilter TypeFilters} may optionally implement any of the, +		 * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and, +		 * their respective methods will be called prior to {@link TypeFilter#match match}:, +		 * <ul>, +		 * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>, +		 * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}, +		 * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}, +		 * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}, +		 * </ul>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.context.ResourceLoaderAware;, +					TypeFilter filter = BeanUtils.instantiateClass(filterClass, TypeFilter.class);, +					invokeAwareMethods(filter);, +					typeFilters.add(filter);, +	/**, +	 * Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and, +	 * {@link BeanFactoryAware} contracts if implemented by the given {@code filter}., +	 */, +	private void invokeAwareMethods(TypeFilter filter) {, +		if (filter instanceof Aware) {, +			if (filter instanceof EnvironmentAware) {, +				((EnvironmentAware) filter).setEnvironment(this.environment);, +			}, +			if (filter instanceof ResourceLoaderAware) {, +				((ResourceLoaderAware) filter).setResourceLoader(this.resourceLoader);, +			}, +			if (filter instanceof BeanClassLoaderAware) {, +				ClassLoader classLoader = (this.registry instanceof ConfigurableBeanFactory ?, +						((ConfigurableBeanFactory) this.registry).getBeanClassLoader() :, +						this.resourceLoader.getClassLoader());, +				((BeanClassLoaderAware) filter).setBeanClassLoader(classLoader);, +			}, +			if (filter instanceof BeanFactoryAware && this.registry instanceof BeanFactory) {, +				((BeanFactoryAware) filter).setBeanFactory((BeanFactory) this.registry);, +			}, +		}, +	}]