[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +				if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +				if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +			if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +				if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +			if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +		WebAsyncManager asyncManager = AsyncWebUtils.getAsyncManager(request);, +	public void afterConcurrentHandlingStarted(WebRequest request) {, +		if (!decrementParticipateCount(request)) {, +			TransactionSynchronizationManager.unbindResource(getSessionFactory());, +		}, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +		boolean isFirstRequest = !isAsyncDispatch(request);, +				if (isFirstRequest || !asyncManager.initializeAsyncThread(key)) {, +	private WebAsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new WebAsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);]