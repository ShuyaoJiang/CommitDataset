[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +		if (isSupportedType(returnType)) {, +			return true;, +		}, +		else if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			ResolvableType genericType = result.getReturnValueType().getGeneric(0);, +			return isSupportedType(genericType);, +, +		}, +		return false;, +	}, +, +	private boolean isSupportedType(ResolvableType returnType) {, +		Class<?> clazz = returnType.getRawClass();, +		return (HttpEntity.class.isAssignableFrom(clazz) && !RequestEntity.class.isAssignableFrom(clazz));, +		ResolvableType returnType = result.getReturnValueType();, +		Mono<?> returnValueMono;, +		ResolvableType bodyType;, +		if (optional.isPresent() && getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			returnValueMono = getConversionService().convert(optional.get(), Mono.class);, +			bodyType = returnType.getGeneric(0).getGeneric(0);, +		}, +		else {, +			returnValueMono = Mono.justOrEmpty(optional);, +			bodyType = returnType.getGeneric(0);, +		}, +, +		return returnValueMono.then(returnValue -> {, +, +			Assert.isInstanceOf(HttpEntity.class, returnValue);, +			HttpEntity<?> httpEntity = (HttpEntity<?>) returnValue;, +			return writeBody(exchange, httpEntity.getBody(), bodyType);, +		});, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +		if (isSupportedType(returnType)) {, +			return true;, +		}, +		else if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			ResolvableType genericType = result.getReturnValueType().getGeneric(0);, +			return isSupportedType(genericType);, +, +		}, +		return false;, +	}, +, +	private boolean isSupportedType(ResolvableType returnType) {, +		Class<?> clazz = returnType.getRawClass();, +		return (HttpEntity.class.isAssignableFrom(clazz) && !RequestEntity.class.isAssignableFrom(clazz));, +		ResolvableType returnType = result.getReturnValueType();, +		Mono<?> returnValueMono;, +		ResolvableType bodyType;, +		if (optional.isPresent() && getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			returnValueMono = getConversionService().convert(optional.get(), Mono.class);, +			bodyType = returnType.getGeneric(0).getGeneric(0);, +		}, +		else {, +			returnValueMono = Mono.justOrEmpty(optional);, +			bodyType = returnType.getGeneric(0);, +		}, +, +		return returnValueMono.then(returnValue -> {, +, +			Assert.isInstanceOf(HttpEntity.class, returnValue);, +			HttpEntity<?> httpEntity = (HttpEntity<?>) returnValue;, +			return writeBody(exchange, httpEntity.getBody(), bodyType);, +		});, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +import java.nio.charset.Charset;, +import java.util.concurrent.CompletableFuture;, +import reactor.core.publisher.Mono;, +import reactor.core.test.TestSubscriber;, +import rx.Single;, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +		return new ResponseEntityResultHandler(converterList, service, resolver);, +	@Test @SuppressWarnings("ConstantConditions"), +		Object value = null;, +		ResolvableType type = responseEntityType(String.class);, +		assertTrue(this.resultHandler.supports(new HandlerResult(HANDLER, value, type, model)));, +		type = forClassWithGenerics(Mono.class, responseEntityType(String.class));, +		assertTrue(this.resultHandler.supports(new HandlerResult(HANDLER, value, type, model)));, +		type = forClassWithGenerics(Single.class, responseEntityType(String.class));, +		assertTrue(this.resultHandler.supports(new HandlerResult(HANDLER, value, type, model)));, +, +		type = forClassWithGenerics(CompletableFuture.class, responseEntityType(String.class));, +		assertTrue(this.resultHandler.supports(new HandlerResult(HANDLER, value, type, model)));, +, +		type = ResolvableType.forClass(String.class);, +		assertFalse(this.resultHandler.supports(new HandlerResult(HANDLER, value, type, model)));, +		ResolvableType type = responseEntityType(Void.class);, +		ResolvableType type = responseEntityType(Void.class);, +		this.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +	@Test, +	public void handleReturnTypes() throws Exception {, +		Object returnValue = ResponseEntity.ok("abc");, +		ResolvableType returnType = responseEntityType(String.class);, +		testHandle(returnValue, returnType);, +, +		returnValue = Mono.just(ResponseEntity.ok("abc"));, +		returnType = forClassWithGenerics(Mono.class, responseEntityType(String.class));]