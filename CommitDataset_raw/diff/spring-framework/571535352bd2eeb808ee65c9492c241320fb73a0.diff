[+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2011 the original author or authors., +import java.util.Enumeration;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +	public String getMultipartContentType(String paramOrFileName) {, +		MultipartFile file = getFile(paramOrFileName);, +		if (file != null) {, +			return file.getContentType();, +		}, +		else {, +			return null;, +		}, +	}, +, +	public HttpMethod getRequestMethod() {, +		return HttpMethod.valueOf(getMethod());, +	}, +, +	public HttpHeaders getRequestHeaders() {, +		HttpHeaders headers = new HttpHeaders();, +		Enumeration<String> headerNames = getHeaderNames();, +		while (headerNames.hasMoreElements()) {, +			String headerName = headerNames.nextElement();, +			headers.put(headerName, Collections.list(getHeaders(headerName)));, +		}, +		return headers;, +	}, +, +	public HttpHeaders getMultipartHeaders(String paramOrFileName) {, +		String contentType = getMultipartContentType(paramOrFileName);, +		if (contentType != null) {, +			HttpHeaders headers = new HttpHeaders();, +			headers.add("Content-Type", contentType);, +			return headers;, +		}, +		else {, +			return null;, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2011 the original author or authors., +import java.util.Enumeration;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +	public String getMultipartContentType(String paramOrFileName) {, +		MultipartFile file = getFile(paramOrFileName);, +		if (file != null) {, +			return file.getContentType();, +		}, +		else {, +			return null;, +		}, +	}, +, +	public HttpMethod getRequestMethod() {, +		return HttpMethod.valueOf(getMethod());, +	}, +, +	public HttpHeaders getRequestHeaders() {, +		HttpHeaders headers = new HttpHeaders();, +		Enumeration<String> headerNames = getHeaderNames();, +		while (headerNames.hasMoreElements()) {, +			String headerName = headerNames.nextElement();, +			headers.put(headerName, Collections.list(getHeaders(headerName)));, +		}, +		return headers;, +	}, +, +	public HttpHeaders getMultipartHeaders(String paramOrFileName) {, +		String contentType = getMultipartContentType(paramOrFileName);, +		if (contentType != null) {, +			HttpHeaders headers = new HttpHeaders();, +			headers.add("Content-Type", contentType);, +			return headers;, +		}, +		else {, +			return null;, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockMultipartActionRequest.java, + * Copyright 2002-2011 the original author or authors., +	public String getMultipartContentType(String paramOrFileName) {, +		MultipartFile file = getFile(paramOrFileName);, +		if (file != null) {, +			return file.getContentType();, +		}, +		else {, +			return null;, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2011 the original author or authors.]