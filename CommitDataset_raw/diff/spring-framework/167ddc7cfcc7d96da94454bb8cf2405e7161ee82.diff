[+++ b/spring-web/src/main/java/org/springframework/web/server/session/HeaderWebSessionIdResolver.java, + * @author Rob Winch, +	/**, +	 * The default header name, +	 */, +	public static final String DEFAULT_HEADER_NAME = "SESSION";, +	private String headerName = DEFAULT_HEADER_NAME;, +	 * <p>By default set to {@code DEFAULT_HEADER_NAME}, +	/**, +	 * Return the configured header name., +	 * @return the configured header name, +	 */, +	private String getHeaderName() {, +		return this.headerName;, +	}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/HeaderWebSessionIdResolver.java, + * @author Rob Winch, +	/**, +	 * The default header name, +	 */, +	public static final String DEFAULT_HEADER_NAME = "SESSION";, +	private String headerName = DEFAULT_HEADER_NAME;, +	 * <p>By default set to {@code DEFAULT_HEADER_NAME}, +	/**, +	 * Return the configured header name., +	 * @return the configured header name, +	 */, +	private String getHeaderName() {, +		return this.headerName;, +	}, +++ b/spring-web/src/test/java/org/springframework/web/server/session/HeaderWebSessionIdResolverTests.java, +import java.util.Arrays;, +import java.util.List;, +, +import static org.junit.Assert.assertTrue;, + * @author Rob Winch, +		this.exchange = MockServerHttpRequest.get("/path").toExchange();, +	public void expireWhenValidThenSetsEmptyHeader() {, +		this.idResolver.expireSession(this.exchange);, +		assertEquals(Arrays.asList(""),, +				this.exchange.getResponse().getHeaders().get(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME));, +	public void expireWhenMultipleInvocationThenSetsSingleEmptyHeader() {, +		this.idResolver.expireSession(this.exchange);, +		this.idResolver.expireSession(this.exchange);, +, +		assertEquals(Arrays.asList(""),, +				this.exchange.getResponse().getHeaders().get(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME));, +	public void expireWhenAfterSetSessionIdThenSetsEmptyHeader() {, +		this.idResolver.setSessionId(this.exchange, "123");, +		this.idResolver.expireSession(this.exchange);, +, +		assertEquals(Arrays.asList(""),, +				this.exchange.getResponse().getHeaders().get(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME));, +	public void setSessionIdWhenValidThenSetsHeader() {, +		String id = "123";, +		this.idResolver.setSessionId(this.exchange, id);, +		assertEquals(Arrays.asList(id),, +				this.exchange.getResponse().getHeaders().get(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME));, +	public void setSessionIdWhenMultipleThenSetsSingleHeader() {, +		String id = "123";, +		this.idResolver.setSessionId(this.exchange, "overriddenByNextInvocation");, +		this.idResolver.setSessionId(this.exchange, id);, +		assertEquals(Arrays.asList(id),, +				this.exchange.getResponse().getHeaders().get(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME));, +	public void setSessionIdWhenCustomHeaderNameThenSetsHeader() {, +		String headerName = "x-auth";, +		String id = "123";, +		this.idResolver.setHeaderName(headerName);, +		this.idResolver.setSessionId(this.exchange, id);, +		assertEquals(Arrays.asList(id),, +				this.exchange.getResponse().getHeaders().get(headerName));, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void setSessionIdWhenNullIdThenIllegalArgumentException() {, +		String id = null;, +, +		this.idResolver.setSessionId(this.exchange, id);, +	public void resolveSessionIdsWhenNoIdsThenEmpty() {, +		List<String> ids = this.idResolver.resolveSessionIds(this.exchange);, +		assertTrue(ids.isEmpty());, +	@Test, +	public void resolveSessionIdsWhenIdThenIdFound() {, +		String id = "123";, +		this.exchange = MockServerHttpRequest.get("/path"), +				.header(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME, id), +				.toExchange();, +, +		List<String> ids = this.idResolver.resolveSessionIds(this.exchange);, +, +		assertEquals(Arrays.asList(id), ids);, +	@Test, +	public void resolveSessionIdsWhenMultipleIdsThenIdsFound() {, +		String id1 = "123";, +		String id2 = "abc";, +		this.exchange = MockServerHttpRequest.get("/path"), +				.header(HeaderWebSessionIdResolver.DEFAULT_HEADER_NAME, id1, id2), +				.toExchange();, +, +		List<String> ids = this.idResolver.resolveSessionIds(this.exchange);]