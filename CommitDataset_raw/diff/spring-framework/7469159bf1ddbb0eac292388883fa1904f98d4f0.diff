[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +import org.springframework.jms.support.converter.MessagingMessageConverter;, +	private MessagingMessageConverterAdapter messagingMessageConverter = new MessagingMessageConverterAdapter();, +	protected MessageConverter getMessagingMessageConverter() {, +		return this.messagingMessageConverter;, +	}, +, +		this.messagingMessageConverter.setHeaderMapper(headerMapper);, +				return messagingMessageConverter.toMessage(result, session);, +	 * Delegates payload extraction to {@link #extractMessage(javax.jms.Message)} to, +	 * enforce backward compatibility., +	 */, +	private class MessagingMessageConverterAdapter extends MessagingMessageConverter {, +, +		@Override, +		protected Object extractPayload(Message message) throws JMSException {, +			return extractMessage(message);, +		}, +	}, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +import org.springframework.jms.support.converter.MessagingMessageConverter;, +	private MessagingMessageConverterAdapter messagingMessageConverter = new MessagingMessageConverterAdapter();, +	protected MessageConverter getMessagingMessageConverter() {, +		return this.messagingMessageConverter;, +	}, +, +		this.messagingMessageConverter.setHeaderMapper(headerMapper);, +				return messagingMessageConverter.toMessage(result, session);, +	 * Delegates payload extraction to {@link #extractMessage(javax.jms.Message)} to, +	 * enforce backward compatibility., +	 */, +	private class MessagingMessageConverterAdapter extends MessagingMessageConverter {, +, +		@Override, +		protected Object extractPayload(Message message) throws JMSException {, +			return extractMessage(message);, +		}, +	}, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, +import org.springframework.jms.support.converter.MessageConversionException;, +		try {, +			return (Message<?>) getMessagingMessageConverter().fromMessage(jmsMessage);, +		}, +		catch (JMSException e) {, +			throw new MessageConversionException("Could not unmarshal message", e);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +import org.springframework.jms.support.converter.MessagingMessageConverter;, +	private MessagingMessageConverterAdapter messagingMessageConverter = new MessagingMessageConverterAdapter();, +	protected MessageConverter getMessagingMessageConverter() {, +		return this.messagingMessageConverter;, +	}, +, +		this.messagingMessageConverter.setHeaderMapper(headerMapper);, +				return messagingMessageConverter.toMessage(result, session);, +	 * Delegates payload extraction to {@link #extractMessage(javax.jms.Message)} to, +	 * enforce backward compatibility., +	 */, +	private class MessagingMessageConverterAdapter extends MessagingMessageConverter {, +, +		@Override, +		protected Object extractPayload(Message message) throws JMSException {, +			return extractMessage(message);, +		}, +	}, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, +import org.springframework.jms.support.converter.MessageConversionException;, +		try {, +			return (Message<?>) getMessagingMessageConverter().fromMessage(jmsMessage);, +		}, +		catch (JMSException e) {, +			throw new MessageConversionException("Could not unmarshal message", e);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/messaging/JmsMessageSendingOperations.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jms.messaging;, +, +import java.util.Map;, +]