[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/tcp/ReactorNettyTcpClient.java, +import org.springframework.util.Assert;, +import reactor.core.composable.Deferred;, +import reactor.core.composable.Stream;, +import reactor.core.composable.spec.Promises;, +import reactor.function.support.SingleUseConsumer;, +	public ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler) {, +, +		Promise<TcpConnection<Message<P>, Message<P>>> promise = this.tcpClient.open();, +		composeConnectionHandling(promise, connectionHandler);, +, +		return new AbstractPromiseToListenableFutureAdapter<TcpConnection<Message<P>, Message<P>>, Void>(promise) {, +			@Override, +			protected Void adapt(TcpConnection<Message<P>, Message<P>> result) {, +				return null;, +			}, +		};, +	public ListenableFuture<Void> connect(final TcpConnectionHandler<P> connectionHandler,, +		Assert.notNull(reconnectStrategy, "'reconnectStrategy' is required");, +		Stream<TcpConnection<Message<P>, Message<P>>> stream =, +				this.tcpClient.open(new Reconnect() {, +		composeConnectionHandling(stream, connectionHandler);, +, +		return new PassThroughPromiseToListenableFutureAdapter<Void>(toPromise(stream));, +, +	private void composeConnectionHandling(Composable<TcpConnection<Message<P>, Message<P>>> composable,, +			final TcpConnectionHandler<P> connectionHandler) {, +	private Promise<Void> toPromise(Stream<TcpConnection<Message<P>, Message<P>>> stream) {, +, +		final Deferred<Void,Promise<Void>> deferred = Promises.<Void>defer().get();, +, +		stream.consume(SingleUseConsumer.once(new Consumer<TcpConnection<Message<P>, Message<P>>>() {, +			@Override, +			public void accept(TcpConnection<Message<P>, Message<P>> conn) {, +				deferred.accept((Void) null);, +			}, +		}));, +, +		stream.when(Throwable.class, SingleUseConsumer.once(new Consumer<Throwable>() {, +			@Override, +			public void accept(Throwable throwable) {, +				deferred.accept(throwable);, +			}, +		}));, +, +		return deferred.compose();, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/tcp/ReactorNettyTcpClient.java, +import org.springframework.util.Assert;, +import reactor.core.composable.Deferred;, +import reactor.core.composable.Stream;, +import reactor.core.composable.spec.Promises;, +import reactor.function.support.SingleUseConsumer;, +	public ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler) {, +, +		Promise<TcpConnection<Message<P>, Message<P>>> promise = this.tcpClient.open();, +		composeConnectionHandling(promise, connectionHandler);, +, +		return new AbstractPromiseToListenableFutureAdapter<TcpConnection<Message<P>, Message<P>>, Void>(promise) {, +			@Override, +			protected Void adapt(TcpConnection<Message<P>, Message<P>> result) {, +				return null;, +			}, +		};, +	public ListenableFuture<Void> connect(final TcpConnectionHandler<P> connectionHandler,, +		Assert.notNull(reconnectStrategy, "'reconnectStrategy' is required");, +		Stream<TcpConnection<Message<P>, Message<P>>> stream =, +				this.tcpClient.open(new Reconnect() {, +		composeConnectionHandling(stream, connectionHandler);, +, +		return new PassThroughPromiseToListenableFutureAdapter<Void>(toPromise(stream));, +, +	private void composeConnectionHandling(Composable<TcpConnection<Message<P>, Message<P>>> composable,, +			final TcpConnectionHandler<P> connectionHandler) {, +	private Promise<Void> toPromise(Stream<TcpConnection<Message<P>, Message<P>>> stream) {, +, +		final Deferred<Void,Promise<Void>> deferred = Promises.<Void>defer().get();, +, +		stream.consume(SingleUseConsumer.once(new Consumer<TcpConnection<Message<P>, Message<P>>>() {, +			@Override, +			public void accept(TcpConnection<Message<P>, Message<P>> conn) {, +				deferred.accept((Void) null);, +			}, +		}));, +, +		stream.when(Throwable.class, SingleUseConsumer.once(new Consumer<Throwable>() {, +			@Override, +			public void accept(Throwable throwable) {, +				deferred.accept(throwable);, +			}, +		}));, +, +		return deferred.compose();, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/tcp/TcpConnection.java, +	 *, +	 * @return a ListenableFuture that can be used to determine when and if the, +	 * 		message was successfully sent]