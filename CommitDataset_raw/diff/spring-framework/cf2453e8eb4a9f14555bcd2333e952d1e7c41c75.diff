[+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.BindingPoint;, +	Object convertValue(Object value, BindingPoint typeDescriptor) throws EvaluationException;, +	boolean canConvert(Class<?> sourceType, BindingPoint typeDescriptor);, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.BindingPoint;, +	Object convertValue(Object value, BindingPoint typeDescriptor) throws EvaluationException;, +	boolean canConvert(Class<?> sourceType, BindingPoint typeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java, +import org.springframework.core.convert.BindingPoint;, +	private BindingPoint typeDescriptor;, +	public static final TypedValue NULL_TYPED_VALUE = new TypedValue(null, BindingPoint.NULL_TYPE_DESCRIPTOR);, +		this.typeDescriptor = BindingPoint.forObject(value);, +	public TypedValue(Object value, BindingPoint typeDescriptor) {, +	public BindingPoint getTypeDescriptor() {, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.BindingPoint;, +	Object convertValue(Object value, BindingPoint typeDescriptor) throws EvaluationException;, +	boolean canConvert(Class<?> sourceType, BindingPoint typeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java, +import org.springframework.core.convert.BindingPoint;, +	private BindingPoint typeDescriptor;, +	public static final TypedValue NULL_TYPED_VALUE = new TypedValue(null, BindingPoint.NULL_TYPE_DESCRIPTOR);, +		this.typeDescriptor = BindingPoint.forObject(value);, +	public TypedValue(Object value, BindingPoint typeDescriptor) {, +	public BindingPoint getTypeDescriptor() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.core.convert.BindingPoint;, +			return new TypedValue(value,BindingPoint.forObject(value));, +	public Object convertValue(Object value, BindingPoint targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, BindingPoint targetTypeDescriptor) throws EvaluationException {, +			return new TypedValue(returnValue,BindingPoint.forObject(returnValue));, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.BindingPoint;, +	Object convertValue(Object value, BindingPoint typeDescriptor) throws EvaluationException;, +	boolean canConvert(Class<?> sourceType, BindingPoint typeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java, +import org.springframework.core.convert.BindingPoint;, +	private BindingPoint typeDescriptor;, +	public static final TypedValue NULL_TYPED_VALUE = new TypedValue(null, BindingPoint.NULL_TYPE_DESCRIPTOR);, +		this.typeDescriptor = BindingPoint.forObject(value);, +	public TypedValue(Object value, BindingPoint typeDescriptor) {, +	public BindingPoint getTypeDescriptor() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.core.convert.BindingPoint;, +			return new TypedValue(value,BindingPoint.forObject(value));, +	public Object convertValue(Object value, BindingPoint targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, BindingPoint targetTypeDescriptor) throws EvaluationException {, +			return new TypedValue(returnValue,BindingPoint.forObject(returnValue));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/CommonTypeDescriptors.java, +import org.springframework.core.convert.BindingPoint;, +	static BindingPoint BOOLEAN_TYPE_DESCRIPTOR = BindingPoint.valueOf(Boolean.class);, +	static BindingPoint INTEGER_TYPE_DESCRIPTOR = BindingPoint.valueOf(Integer.class);, +	static BindingPoint CHARACTER_TYPE_DESCRIPTOR = BindingPoint.valueOf(Character.class);, +	static BindingPoint LONG_TYPE_DESCRIPTOR = BindingPoint.valueOf(Long.class);, +	static BindingPoint SHORT_TYPE_DESCRIPTOR = BindingPoint.valueOf(Short.class);, +	static BindingPoint BYTE_TYPE_DESCRIPTOR = BindingPoint.valueOf(Byte.class);, +	static BindingPoint FLOAT_TYPE_DESCRIPTOR = BindingPoint.valueOf(Float.class);, +	static BindingPoint DOUBLE_TYPE_DESCRIPTOR = BindingPoint.valueOf(Double.class);, +	static BindingPoint STRING_TYPE_DESCRIPTOR = BindingPoint.valueOf(String.class);, +	static BindingPoint CLASS_TYPE_DESCRIPTOR = BindingPoint.valueOf(Class.class);, +	static BindingPoint OBJECT_TYPE_DESCRIPTOR = BindingPoint.valueOf(Object.class);, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +import org.springframework.core.convert.BindingPoint;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.BindingPoint;, +	Object convertValue(Object value, BindingPoint typeDescriptor) throws EvaluationException;, +	boolean canConvert(Class<?> sourceType, BindingPoint typeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java, +import org.springframework.core.convert.BindingPoint;, +	private BindingPoint typeDescriptor;, +	public static final TypedValue NULL_TYPED_VALUE = new TypedValue(null, BindingPoint.NULL_TYPE_DESCRIPTOR);, +		this.typeDescriptor = BindingPoint.forObject(value);, +	public TypedValue(Object value, BindingPoint typeDescriptor) {, +	public BindingPoint getTypeDescriptor() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java]