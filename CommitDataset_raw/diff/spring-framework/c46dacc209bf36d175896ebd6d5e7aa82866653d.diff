[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java, +import java.util.LinkedHashMap;, +import javax.persistence.ParameterMode;, +import javax.persistence.StoredProcedureQuery;, +	 * <p>Includes deferred output parameter access for JPA 2.1 StoredProcedureQuery,, +	 * retrieving the corresponding values for all registered parameters on query, +	 * termination and returning the locally cached values for subsequent access., +		private EntityManager entityManager;, +		@Nullable, +		private Map<Object, Object> outputParameters;, +, +		public DeferredQueryInvocationHandler(Query target, EntityManager entityManager) {, +			this.entityManager = entityManager;, +			else if (method.getName().equals("getOutputParameterValue")) {, +				if (this.entityManager == null) {, +					Object key = args[0];, +					if (this.outputParameters == null || !this.outputParameters.containsKey(key)) {, +						throw new IllegalArgumentException("OUT/INOUT parameter not available: " + key);, +					}, +					Object value = this.outputParameters.get(key);, +					if (value instanceof IllegalArgumentException) {, +						throw (IllegalArgumentException) value;, +					}, +					return value;, +				}, +			}, +				if (method.getName().equals("registerStoredProcedureParameter") && args.length == 3 &&, +						(args[2] == ParameterMode.OUT || args[2] == ParameterMode.INOUT)) {, +					if (this.outputParameters == null) {, +						this.outputParameters = new LinkedHashMap<>();, +					}, +					this.outputParameters.put(args[0], null);, +				}, +					if (this.outputParameters != null && this.target instanceof StoredProcedureQuery) {, +						StoredProcedureQuery storedProc = (StoredProcedureQuery) this.target;, +						for (Map.Entry<Object, Object> entry : this.outputParameters.entrySet()) {, +							try {, +								Object key = entry.getKey();, +								if (key instanceof Integer) {, +									entry.setValue(storedProc.getOutputParameterValue((Integer) key));, +								}, +								else {, +									entry.setValue(storedProc.getOutputParameterValue(key.toString()));, +								}, +							}, +							catch (IllegalArgumentException ex) {, +								entry.setValue(ex);, +							}, +						}, +					}, +					EntityManagerFactoryUtils.closeEntityManager(this.entityManager);, +					this.entityManager = null;, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java, +import java.util.LinkedHashMap;, +import javax.persistence.ParameterMode;, +import javax.persistence.StoredProcedureQuery;, +	 * <p>Includes deferred output parameter access for JPA 2.1 StoredProcedureQuery,, +	 * retrieving the corresponding values for all registered parameters on query, +	 * termination and returning the locally cached values for subsequent access., +		private EntityManager entityManager;, +		@Nullable, +		private Map<Object, Object> outputParameters;, +, +		public DeferredQueryInvocationHandler(Query target, EntityManager entityManager) {, +			this.entityManager = entityManager;, +			else if (method.getName().equals("getOutputParameterValue")) {, +				if (this.entityManager == null) {, +					Object key = args[0];, +					if (this.outputParameters == null || !this.outputParameters.containsKey(key)) {, +						throw new IllegalArgumentException("OUT/INOUT parameter not available: " + key);, +					}, +					Object value = this.outputParameters.get(key);, +					if (value instanceof IllegalArgumentException) {, +						throw (IllegalArgumentException) value;, +					}, +					return value;, +				}, +			}, +				if (method.getName().equals("registerStoredProcedureParameter") && args.length == 3 &&, +						(args[2] == ParameterMode.OUT || args[2] == ParameterMode.INOUT)) {, +					if (this.outputParameters == null) {, +						this.outputParameters = new LinkedHashMap<>();, +					}, +					this.outputParameters.put(args[0], null);, +				}, +					if (this.outputParameters != null && this.target instanceof StoredProcedureQuery) {, +						StoredProcedureQuery storedProc = (StoredProcedureQuery) this.target;, +						for (Map.Entry<Object, Object> entry : this.outputParameters.entrySet()) {, +							try {, +								Object key = entry.getKey();, +								if (key instanceof Integer) {, +									entry.setValue(storedProc.getOutputParameterValue((Integer) key));, +								}, +								else {, +									entry.setValue(storedProc.getOutputParameterValue(key.toString()));, +								}, +							}, +							catch (IllegalArgumentException ex) {, +								entry.setValue(ex);, +							}]