[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/AbstractJaxWsServiceExporter.java, +import javax.xml.ws.WebServiceProvider;, +			WebService wsAnnotation = type.getAnnotation(WebService.class);, +			WebServiceProvider wsProviderAnnotation = type.getAnnotation(WebServiceProvider.class);, +			if (wsAnnotation != null || wsProviderAnnotation != null) {, +				if (wsAnnotation != null) {, +					publishEndpoint(endpoint, wsAnnotation);, +				}, +				else {, +					publishEndpoint(endpoint, wsProviderAnnotation);, +				}, +	/**, +	 * Actually publish the given provider endpoint. To be implemented by subclasses., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param annotation the service bean's WebServiceProvider annotation, +	 */, +	protected abstract void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation);, +, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/AbstractJaxWsServiceExporter.java, +import javax.xml.ws.WebServiceProvider;, +			WebService wsAnnotation = type.getAnnotation(WebService.class);, +			WebServiceProvider wsProviderAnnotation = type.getAnnotation(WebServiceProvider.class);, +			if (wsAnnotation != null || wsProviderAnnotation != null) {, +				if (wsAnnotation != null) {, +					publishEndpoint(endpoint, wsAnnotation);, +				}, +				else {, +					publishEndpoint(endpoint, wsProviderAnnotation);, +				}, +	/**, +	 * Actually publish the given provider endpoint. To be implemented by subclasses., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param annotation the service bean's WebServiceProvider annotation, +	 */, +	protected abstract void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation);, +, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleHttpServerJaxWsServiceExporter.java, + * Copyright 2002-2009 the original author or authors., +import javax.xml.ws.WebServiceProvider;, +		endpoint.publish(buildHttpContext(endpoint, annotation.serviceName()));, +	}, +, +	@Override, +	protected void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation) {, +		endpoint.publish(buildHttpContext(endpoint, annotation.serviceName()));, +	}, +, +	/**, +	 * Build the HttpContext for the given endpoint., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param serviceName the given service name, +	 * @return the fully populated HttpContext, +	 */, +	protected HttpContext buildHttpContext(Endpoint endpoint, String serviceName) {, +		String fullPath = calculateEndpointPath(endpoint, serviceName);, +		return httpContext;, +	/**, +	 * Calculate the full endpoint path for the given endpoint., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param serviceName the given service name, +	 * @return the full endpoint path, +	 */, +	protected String calculateEndpointPath(Endpoint endpoint, String serviceName) {, +		return this.basePath + serviceName;, +	}, +, +, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/AbstractJaxWsServiceExporter.java, +import javax.xml.ws.WebServiceProvider;, +			WebService wsAnnotation = type.getAnnotation(WebService.class);, +			WebServiceProvider wsProviderAnnotation = type.getAnnotation(WebServiceProvider.class);, +			if (wsAnnotation != null || wsProviderAnnotation != null) {, +				if (wsAnnotation != null) {, +					publishEndpoint(endpoint, wsAnnotation);, +				}, +				else {, +					publishEndpoint(endpoint, wsProviderAnnotation);, +				}, +	/**, +	 * Actually publish the given provider endpoint. To be implemented by subclasses., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param annotation the service bean's WebServiceProvider annotation, +	 */, +	protected abstract void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation);, +, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleHttpServerJaxWsServiceExporter.java, + * Copyright 2002-2009 the original author or authors., +import javax.xml.ws.WebServiceProvider;, +		endpoint.publish(buildHttpContext(endpoint, annotation.serviceName()));, +	}, +, +	@Override, +	protected void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation) {, +		endpoint.publish(buildHttpContext(endpoint, annotation.serviceName()));, +	}, +, +	/**, +	 * Build the HttpContext for the given endpoint., +	 * @param endpoint the JAX-WS Provider Endpoint object, +	 * @param serviceName the given service name]