[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2016 the original author or authors., +		// If this check is changed, the generateCode method will need changing too, +		CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor().charAt(0));, +		// Also check if empty string, as per the code in the interpreted version, +		mv.visitInsn(DUP);, +		mv.visitLdcInsn("");, +		mv.visitInsn(SWAP);, +		mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z",false);, +		mv.visitJumpInsn(IFEQ, endOfIf); // If not empty, drop through to elseTarget, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2016 the original author or authors., +		// If this check is changed, the generateCode method will need changing too, +		CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor().charAt(0));, +		// Also check if empty string, as per the code in the interpreted version, +		mv.visitInsn(DUP);, +		mv.visitLdcInsn("");, +		mv.visitInsn(SWAP);, +		mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z",false);, +		mv.visitJumpInsn(IFEQ, endOfIf); // If not empty, drop through to elseTarget, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2016 the original author or authors., +		// If this check is changed, the generateCode method will need changing too, +		CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor().charAt(0));, +		// Also check if empty string, as per the code in the interpreted version, +		mv.visitInsn(DUP);, +		mv.visitLdcInsn("");, +		mv.visitInsn(SWAP);, +		mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z",false);, +		mv.visitJumpInsn(IFEQ, endOfIf); // If not empty, drop through to elseTarget, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +import java.lang.reflect.Field;, +import java.util.Collections;, +	@Test, +	public void elvisOperator_SPR15192() {, +		SpelParserConfiguration configuration = new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, null);, +		Expression exp;, +		, +		exp = new SpelExpressionParser(configuration).parseExpression("bar()");, +		assertEquals("BAR", exp.getValue(new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("BAR", exp.getValue(new Foo(), String.class));, +		assertIsCompiled(exp);, + , +		exp = new SpelExpressionParser(configuration).parseExpression("bar('baz')");, +		assertEquals("BAZ", exp.getValue(new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("BAZ", exp.getValue(new Foo(), String.class));, +		assertIsCompiled(exp);, + , +		StandardEvaluationContext context = new StandardEvaluationContext();, +		context.setVariable("map", Collections.singletonMap("foo", "qux"));, + , +		exp = new SpelExpressionParser(configuration).parseExpression("bar(#map['foo'])");, +		assertEquals("QUX", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("QUX", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, + , +		exp = new SpelExpressionParser(configuration).parseExpression("bar(#map['foo'] ?: 'qux')");, +		assertEquals("QUX", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("QUX", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, +		, +		// When the condition is a primitive, +		exp = new SpelExpressionParser(configuration).parseExpression("3?:'foo'");, +		assertEquals("3", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("3", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, +		, +		// When the condition is a double slot primitive, +		exp = new SpelExpressionParser(configuration).parseExpression("3L?:'foo'");, +		assertEquals("3", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("3", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, +, +		// When the condition is an empty string, +		exp = new SpelExpressionParser(configuration).parseExpression("''?:4L");, +		assertEquals("4", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("4", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, +		, +		// null condition, +		exp = new SpelExpressionParser(configuration).parseExpression("null?:4L");, +		assertEquals("4", exp.getValue(context, new Foo(), String.class));, +		assertCanCompile(exp);, +		assertEquals("4", exp.getValue(context, new Foo(), String.class));, +		assertIsCompiled(exp);, +, +		// variable access returning primitive, +		exp = new SpelExpressionParser(configuration).parseExpression("#x?:'foo'");, +		context.setVariable("x",50);]