[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +	public AspectJProxyFactory(Class<?>... interfaces) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +	public AspectJProxyFactory(Class<?>... interfaces) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Arrays;, +, +import org.apache.commons.logging.LogFactory;, +public class AspectProxyFactoryTests {, +	@Test  // SPR-13328, +	public void testVarargsWithEnumArray() throws Exception {, +		AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean());, +		proxyFactory.addAspect(LoggingAspect.class);, +		proxyFactory.setProxyTargetClass(true);, +		TestBean proxy = proxyFactory.getProxy();, +		assertTrue(proxy.doWithVarargs(MyEnum.A, MyEnum.B));, +	}, +, +	public interface ITestBean {, +, +		public <V extends MyInterface> boolean doWithVarargs(V... args) {, +			return true;, +		}, +, +	public interface MyInterface {, +	}, +, +, +	public enum MyEnum implements MyInterface {, +, +		A, B;, +	}, +, +, +	@Aspect, +	public static class LoggingAspect {, +, +		@Around("execution(* doWithVarargs(*))"), +		public Object doLog(ProceedingJoinPoint pjp) throws Throwable {, +			LogFactory.getLog(LoggingAspect.class).debug(Arrays.asList(pjp.getArgs()));, +			return pjp.proceed();, +		}, +	}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +	public AspectJProxyFactory(Class<?>... interfaces) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Arrays;, +, +import org.apache.commons.logging.LogFactory;, +public class AspectProxyFactoryTests {, +	@Test  // SPR-13328, +	public void testVarargsWithEnumArray() throws Exception {, +		AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean());, +		proxyFactory.addAspect(LoggingAspect.class);, +		proxyFactory.setProxyTargetClass(true);, +		TestBean proxy = proxyFactory.getProxy();, +		assertTrue(proxy.doWithVarargs(MyEnum.A, MyEnum.B));, +	}, +, +	public interface ITestBean {, +, +		public <V extends MyInterface> boolean doWithVarargs(V... args) {, +			return true;, +		}, +, +	public interface MyInterface {, +	}, +, +, +	public enum MyEnum implements MyInterface {, +, +		A, B;, +	}, +, +, +	@Aspect, +	public static class LoggingAspect {, +, +		@Around("execution(* doWithVarargs(*))"), +		public Object doLog(ProceedingJoinPoint pjp) throws Throwable {, +			LogFactory.getLog(LoggingAspect.class).debug(Arrays.asList(pjp.getArgs()));, +			return pjp.proceed();, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, + * Copyright 2002-2015 the original author or authors., +public class CglibProxyTests extends AbstractAopProxyTests implements Serializable {, +, +	@Test  // SPR-13328, +	public void testVarargsWithEnumArray() throws Exception {, +		ProxyFactory proxyFactory = new ProxyFactory(new MyBean());, +		MyBean proxy = (MyBean) proxyFactory.getProxy();, +		assertTrue(proxy.doWithVarargs(MyEnum.A, MyEnum.B));, +	}, +, +, +		public <V extends MyInterface> boolean doWithVarargs(V... args) {, +			return true;]