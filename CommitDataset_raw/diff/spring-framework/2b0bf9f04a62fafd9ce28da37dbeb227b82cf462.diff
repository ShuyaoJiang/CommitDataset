[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.AnnotatedElement;, + * @author Stephane Nicoll, +			// First, check annotation on qualified element, if any, +			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type);, +			// Then, check annotation on factory method, if applicable, +			if (targetAnnotation == null) {, +				targetAnnotation = getFactoryMethodAnnotation(bd, type);, +			}, +	protected Annotation getQualifiedElementAnnotation(RootBeanDefinition bd, Class<? extends Annotation> type) {, +		AnnotatedElement qualifiedElement = bd.getQualifiedElement();, +		return (qualifiedElement != null ? AnnotationUtils.getAnnotation(qualifiedElement, type) : null);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.AnnotatedElement;, + * @author Stephane Nicoll, +			// First, check annotation on qualified element, if any, +			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type);, +			// Then, check annotation on factory method, if applicable, +			if (targetAnnotation == null) {, +				targetAnnotation = getFactoryMethodAnnotation(bd, type);, +			}, +	protected Annotation getQualifiedElementAnnotation(RootBeanDefinition bd, Class<? extends Annotation> type) {, +		AnnotatedElement qualifiedElement = bd.getQualifiedElement();, +		return (qualifiedElement != null ? AnnotationUtils.getAnnotation(qualifiedElement, type) : null);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import java.lang.reflect.AnnotatedElement;, +	volatile AnnotatedElement qualifiedElement;, +, +		this.qualifiedElement = original.qualifiedElement;, +	 * Specify the {@link AnnotatedElement} defining qualifiers., +	 * @since 4.3.3, +	 */, +	public void setQualifiedElement(AnnotatedElement qualifiedElement) {, +		this.qualifiedElement = qualifiedElement;, +	}, +, +	/**, +	 * Return the {@link AnnotatedElement} defining qualifiers, if any., +	 * @since 4.3.3, +	 */, +	public AnnotatedElement getQualifiedElement() {, +		return this.qualifiedElement;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.AnnotatedElement;, + * @author Stephane Nicoll, +			// First, check annotation on qualified element, if any, +			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type);, +			// Then, check annotation on factory method, if applicable, +			if (targetAnnotation == null) {, +				targetAnnotation = getFactoryMethodAnnotation(bd, type);, +			}, +	protected Annotation getQualifiedElementAnnotation(RootBeanDefinition bd, Class<? extends Annotation> type) {, +		AnnotatedElement qualifiedElement = bd.getQualifiedElement();, +		return (qualifiedElement != null ? AnnotationUtils.getAnnotation(qualifiedElement, type) : null);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import java.lang.reflect.AnnotatedElement;, +	volatile AnnotatedElement qualifiedElement;, +, +		this.qualifiedElement = original.qualifiedElement;, +	 * Specify the {@link AnnotatedElement} defining qualifiers., +	 * @since 4.3.3, +	 */, +	public void setQualifiedElement(AnnotatedElement qualifiedElement) {, +		this.qualifiedElement = qualifiedElement;, +	}, +, +	/**, +	 * Return the {@link AnnotatedElement} defining qualifiers, if any., +	 * @since 4.3.3, +	 */, +	public AnnotatedElement getQualifiedElement() {, +		return this.qualifiedElement;, +	}, +, +	/**, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import org.springframework.util.ReflectionUtils;, +		bf.registerBeanDefinition("dependencyBean", bd);, +		bf.registerBeanDefinition("dependencyBean2", new RootBeanDefinition(TestBean.class));, +		assertSame(bf.getBean("dependencyBean"), bean.getTestBean());, +	public void testObjectFactoryQualifierProviderInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierInjectionBean.class));, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		bd.setQualifiedElement(ReflectionUtils.findMethod(getClass(), "testBeanQualifierProvider"));, +		bf.registerBeanDefinition("dependencyBean", bd);, +		bf.registerBeanDefinition("dependencyBean2", new RootBeanDefinition(TestBean.class));]