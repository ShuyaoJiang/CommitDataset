[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * Copyright 2002-2018 the original author or authors., + * {@link JobFactory} implementation that supports {@link java.lang.Runnable}, +		catch (Throwable ex) {, +			throw new IllegalArgumentException(, +					"Unable to execute job class [" + jobObject.getClass().getName() +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * Copyright 2002-2018 the original author or authors., + * {@link JobFactory} implementation that supports {@link java.lang.Runnable}, +		catch (Throwable ex) {, +			throw new IllegalArgumentException(, +					"Unable to execute job class [" + jobObject.getClass().getName() +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, + * Copyright 2002-2018 the original author or authors., + * Subclass of Quartz's {@link JobStoreCMT} class that delegates to a Spring-managed, + * {@link DataSource} instead of using a Quartz-managed JDBC connection pool., + * This JobStore will be used if SchedulerFactoryBean's "dataSource" property is set., +	public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException {, +			throw new SchedulerConfigException("No local DataSource found for configuration - " +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * Copyright 2002-2018 the original author or authors., + * {@link JobFactory} implementation that supports {@link java.lang.Runnable}, +		catch (Throwable ex) {, +			throw new IllegalArgumentException(, +					"Unable to execute job class [" + jobObject.getClass().getName() +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, + * Copyright 2002-2018 the original author or authors., + * Subclass of Quartz's {@link JobStoreCMT} class that delegates to a Spring-managed, + * {@link DataSource} instead of using a Quartz-managed JDBC connection pool., + * This JobStore will be used if SchedulerFactoryBean's "dataSource" property is set., +	public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException {, +			throw new SchedulerConfigException("No local DataSource found for configuration - " +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2018 the original author or authors., + * Quartz {@link ThreadPool} adapter that delegates to a Spring-managed, + * {@link Executor} instance, specified on {@link SchedulerFactoryBean}., +		// Absolutely needs thread-bound Executor to initialize., +			throw new SchedulerConfigException("No local Executor found for configuration - " +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * Copyright 2002-2018 the original author or authors., + * {@link JobFactory} implementation that supports {@link java.lang.Runnable}, +		catch (Throwable ex) {, +			throw new IllegalArgumentException(, +					"Unable to execute job class [" + jobObject.getClass().getName() +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, + * Copyright 2002-2018 the original author or authors., + * Subclass of Quartz's {@link JobStoreCMT} class that delegates to a Spring-managed, + * {@link DataSource} instead of using a Quartz-managed JDBC connection pool., + * This JobStore will be used if SchedulerFactoryBean's "dataSource" property is set., +	public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException {, +			throw new SchedulerConfigException("No local DataSource found for configuration - " +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2018 the original author or authors., + * Quartz {@link ThreadPool} adapter that delegates to a Spring-managed, + * {@link Executor} instance, specified on {@link SchedulerFactoryBean}., +		// Absolutely needs thread-bound Executor to initialize., +			throw new SchedulerConfigException("No local Executor found for configuration - " +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	 * Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,, +	 * to be used by {@link ResourceLoaderClassLoadHelper}., +	 * <p>This instance will be set before initialization of the corresponding Scheduler,, +	 * and reset immediately afterwards. It is thus only available during configuration., +	 * Return the {@link Executor} for the currently configured Quartz Scheduler,, +	 * to be used by {@link LocalTaskExecutorThreadPool}., +	 * <p>This instance will be set before initialization of the corresponding Scheduler,, +	 * and reset immediately afterwards. It is thus only available during configuration., +	 * @since 2.0, +	 * Return the {@link DataSource} for the currently configured Quartz Scheduler,, +	 * to be used by {@link LocalDataSourceJobStore}., +	 * <p>This instance will be set before initialization of the corresponding Scheduler,, +	 * and reset immediately afterwards. It is thus only available during configuration., +	 * @since 1.1, +	 * Return the non-transactional {@link DataSource} for the currently configured, +	 * Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}., +	 * <p>This instance will be set before initialization of the corresponding Scheduler,, +	 * and reset immediately afterwards. It is thus only available during configuration., +	 * @since 1.1, +	private Class<? extends SchedulerFactory> schedulerFactoryClass = StdSchedulerFactory.class;, +, +	 * called, it overrides any class specified through {@link #setSchedulerFactoryClass}, +	 * as well as any settings specified through {@link #setConfigLocation},, +	 * {@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}., +	 * <p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,, +	 * local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}, +	 * will be ignored here in {@code SchedulerFactoryBean}, expecting the external, +	 * {@code SchedulerFactory} instance to get initialized on its own., +	 * Set the Quartz {@link SchedulerFactory} implementation to use., +	 * <p>Default is the {@link StdSchedulerFactory} class, reading in the standard, +	 * {@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz, +	 * properties, specify {@link #setConfigLocation "configLocation"} and/or, +	 * {@link #setQuartzProperties "quartzProperties"} etc on this local, +	 * {@code SchedulerFactoryBean} instance., +	 * @see org.quartz.impl.StdSchedulerFactory, +	 * @see #setConfigLocation, +	 * @see #setQuartzProperties, +	 * @see #setTaskExecutor, +	 * @see #setDataSource, +	 */, +	public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {, +		this.schedulerFactoryClass = schedulerFactoryClass;]