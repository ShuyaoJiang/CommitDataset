[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupport.java, +		List<MediaType> mediaTypes = getContentTypeResolver().resolveMediaTypes(exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupport.java, +		List<MediaType> mediaTypes = getContentTypeResolver().resolveMediaTypes(exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java, +import reactor.core.publisher.Flux;, +		if (Void.class.equals(elementType.getRawClass())) {, +			return Mono.from((Publisher<Void>) publisher);, +		}, +, +		if (producibleTypes.isEmpty()) {, +			return Mono.error(new IllegalStateException(, +					"No converter for return value type: " + elementType));, +		}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupport.java, +		List<MediaType> mediaTypes = getContentTypeResolver().resolveMediaTypes(exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java, +import reactor.core.publisher.Flux;, +		if (Void.class.equals(elementType.getRawClass())) {, +			return Mono.from((Publisher<Void>) publisher);, +		}, +, +		if (producibleTypes.isEmpty()) {, +			return Mono.error(new IllegalStateException(, +					"No converter for return value type: " + elementType));, +		}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +						.filter(entry -> !responseHeaders.containsKey(entry.getKey())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupport.java, +		List<MediaType> mediaTypes = getContentTypeResolver().resolveMediaTypes(exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java, +import reactor.core.publisher.Flux;, +		if (Void.class.equals(elementType.getRawClass())) {, +			return Mono.from((Publisher<Void>) publisher);, +		}, +, +		if (producibleTypes.isEmpty()) {, +			return Mono.error(new IllegalStateException(, +					"No converter for return value type: " + elementType));, +		}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +						.filter(entry -> !responseHeaders.containsKey(entry.getKey())), +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupportTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result;, +, +import java.net.URI;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.core.convert.support.GenericConversionService;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.http.server.reactive.MockServerHttpRequest;, +import org.springframework.http.server.reactive.MockServerHttpResponse;, +import org.springframework.web.reactive.accept.FixedContentTypeResolver;, +import org.springframework.web.reactive.accept.HeaderContentTypeResolver;, +import org.springframework.web.reactive.accept.RequestedContentTypeResolver;, +import org.springframework.web.server.ServerWebExchange;, +import org.springframework.web.server.adapter.DefaultServerWebExchange;, +import org.springframework.web.server.session.WebSessionManager;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.springframework.http.MediaType.ALL;, +import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8;, +import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM;, +import static org.springframework.http.MediaType.IMAGE_GIF;, +import static org.springframework.http.MediaType.IMAGE_JPEG;, +import static org.springframework.http.MediaType.IMAGE_PNG;, +import static org.springframework.http.MediaType.TEXT_PLAIN;, +import static org.springframework.web.reactive.HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;, +, +/**, + * Unit tests for {@link ContentNegotiatingResultHandlerSupport}., + * @author Rossen Stoyanchev, + */, +public class ContentNegotiatingResultHandlerSupportTests {]