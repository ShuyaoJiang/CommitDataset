[+++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +  /**, +   * The annotation visitor to which this visitor must delegate method calls. May be {@literal, +   * null}., +   */, +   *     calls. May be {@literal null}., +    if (api != Opcodes.ASM7 && api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4) {, +      throw new IllegalArgumentException("Unsupported api " + api);, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +  /**, +   * The annotation visitor to which this visitor must delegate method calls. May be {@literal, +   * null}., +   */, +   *     calls. May be {@literal null}., +    if (api != Opcodes.ASM7 && api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4) {, +      throw new IllegalArgumentException("Unsupported api " + api);, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +  // Constructors and factories, +   *     Runtime[In]Visible[Type]Annotations attribute to which this annotation belongs, or, +   *     {@literal null} in other cases (e.g. nested or array annotations)., +   * Creates a new {@link AnnotationWriter} using named values., +   * @param descriptor the class descriptor of the annotation class., +   *     Runtime[In]Visible[Type]Annotations attribute to which this annotation belongs, or, +   *     {@literal null} in other cases (e.g. nested or array annotations)., +   * @return a new {@link AnnotationWriter} for the given annotation descriptor., +  static AnnotationWriter create(, +      final String descriptor,, +    // Create a ByteVector to hold an 'annotation' JVMS structure., +    // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.16., +    ByteVector annotation = new ByteVector();, +    // Write type_index and reserve space for num_element_value_pairs., +    annotation.putShort(symbolTable.addConstantUtf8(descriptor)).putShort(0);, +    return new AnnotationWriter(, +        symbolTable, /* useNamedValues = */ true, annotation, previousAnnotation);, +  }, +, +  /**, +   * Creates a new {@link AnnotationWriter} using named values., +   *, +   * @param symbolTable where the constants used in this AnnotationWriter must be stored., +   * @param typeRef a reference to the annotated type. The sort of this type reference must be, +   *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link, +   *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See, +   *     {@link TypeReference}., +   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or, +   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets, +   *     'typeRef' as a whole., +   * @param descriptor the class descriptor of the annotation class., +   * @param previousAnnotation the previously visited annotation of the, +   *     Runtime[In]Visible[Type]Annotations attribute to which this annotation belongs, or, +   *     {@literal null} in other cases (e.g. nested or array annotations)., +   * @return a new {@link AnnotationWriter} for the given type annotation reference and descriptor., +   */, +  static AnnotationWriter create(, +      final SymbolTable symbolTable,, +      final int typeRef,, +      final TypePath typePath,, +      final String descriptor,, +      final AnnotationWriter previousAnnotation) {, +    // Create a ByteVector to hold a 'type_annotation' JVMS structure., +    // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20., +    ByteVector typeAnnotation = new ByteVector();, +    // Write target_type, target_info, and target_path., +    TypeReference.putTarget(typeRef, typeAnnotation);, +    TypePath.put(typePath, typeAnnotation);, +    // Write type_index and reserve space for num_element_value_pairs., +    typeAnnotation.putShort(symbolTable.addConstantUtf8(descriptor)).putShort(0);, +    return new AnnotationWriter(, +        symbolTable, /* useNamedValues = */ true, typeAnnotation, previousAnnotation);, +    return new AnnotationWriter(symbolTable, /* useNamedValues = */ true, annotation, null);, +   * @param attributeName one of "Runtime[In]Visible[Type]Annotations", or {@literal null}., +   * Returns the size of the Runtime[In]Visible[Type]Annotations attributes containing the given, +   * annotations and all their <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the, +   * attribute names to the constant pool of the class (if not null)., +   *, +   * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or, +   *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be, +   *     {@literal null}., +   * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,, +   *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}, +   *     field. May be {@literal null}., +   * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a, +   *     field, method or class. The previous ones can be accessed with the {@link, +   *     #previousAnnotation} field. May be {@literal null}., +   * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a, +   *     field, method or class field. The previous ones can be accessed with the {@link, +   *     #previousAnnotation} field. May be {@literal null}., +   * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing the, +   *     given annotations and all their predecessors. This includes the size of the, +   *     attribute_name_index and attribute_length fields., +   */, +  static int computeAnnotationsSize(, +      final AnnotationWriter lastRuntimeVisibleAnnotation,, +      final AnnotationWriter lastRuntimeInvisibleAnnotation,, +      final AnnotationWriter lastRuntimeVisibleTypeAnnotation,, +      final AnnotationWriter lastRuntimeInvisibleTypeAnnotation) {, +    int size = 0;, +    if (lastRuntimeVisibleAnnotation != null) {, +      size +=, +          lastRuntimeVisibleAnnotation.computeAnnotationsSize(]