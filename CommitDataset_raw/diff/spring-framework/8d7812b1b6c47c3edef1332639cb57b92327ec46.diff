[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.Assert;, +		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),, +				"No converter found for return value of type: " + returnValueClass);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.Assert;, +		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),, +				"No converter found for return value of type: " + returnValueClass);, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +import static org.junit.Assert.*;, +, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.Collections;, +@SuppressWarnings("unused"), +, +		Method method = getClass().getDeclaredMethod("handle", List.class,, +				SimpleBean.class, MultiValueMap.class, String.class);, +		List<HttpMessageConverter<?>> converters = Collections.singletonList(new StringHttpMessageConverter());, +		List<Object> advice = Collections.singletonList(new EmptyRequestBodyAdvice());, +		Method method = getClass().getDeclaredMethod("getImage");, +		List<HttpMessageConverter<?>> converters = Collections.singletonList(new ResourceHttpMessageConverter());, +	// SPR-13135, +, +	@Test(expected = IllegalArgumentException.class), +	public void handleReturnValueWithInvalidReturnType() throws Exception {, +		Method method = getClass().getDeclaredMethod("handleAndReturnOutputStream");, +		MethodParameter returnType = new MethodParameter(method, -1);, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(new ArrayList<>());, +		processor.writeWithMessageConverters(new ByteArrayOutputStream(), returnType, this.webRequest);, +	}, +, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +	String handle(, +	Resource getImage() {, +	@RequestMapping, +	OutputStream handleAndReturnOutputStream() {, +		return null;, +	}, +, +		Long getId();, +		void setId(Long id);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.util.Assert;, +		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),, +				"No converter found for return value of type: " + returnValueClass);, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +import static org.junit.Assert.*;, +, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.Collections;, +@SuppressWarnings("unused"), +, +		Method method = getClass().getDeclaredMethod("handle", List.class,, +				SimpleBean.class, MultiValueMap.class, String.class);, +		List<HttpMessageConverter<?>> converters = Collections.singletonList(new StringHttpMessageConverter());, +		List<Object> advice = Collections.singletonList(new EmptyRequestBodyAdvice());, +		Method method = getClass().getDeclaredMethod("getImage");, +		List<HttpMessageConverter<?>> converters = Collections.singletonList(new ResourceHttpMessageConverter());, +	// SPR-13135, +, +	@Test(expected = IllegalArgumentException.class), +	public void handleReturnValueWithInvalidReturnType() throws Exception {, +		Method method = getClass().getDeclaredMethod("handleAndReturnOutputStream");, +		MethodParameter returnType = new MethodParameter(method, -1);, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(new ArrayList<>());, +		processor.writeWithMessageConverters(new ByteArrayOutputStream(), returnType, this.webRequest);, +	}, +, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +				converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice()));, +	String handle(, +	Resource getImage() {, +	@RequestMapping, +	OutputStream handleAndReturnOutputStream() {, +		return null;, +	}, +, +		Long getId();, +		void setId(Long id);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;]