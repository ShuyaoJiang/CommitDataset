[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +, +			WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler,, +		WebSocketHttpRequestHandler httpHandler =, +				new WebSocketHttpRequestHandler(webSocketHandler, handshakeHandler);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +, +			WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler,, +		WebSocketHttpRequestHandler httpHandler =, +				new WebSocketHttpRequestHandler(webSocketHandler, handshakeHandler);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java, +	private final List<ServletWebSocketHandlerRegistration> registrations = new ArrayList<>(4);, +	public WebSocketHandlerRegistration addHandler(WebSocketHandler handler, String... paths) {, +		registration.addHandler(handler, paths);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +, +			WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler,, +		WebSocketHttpRequestHandler httpHandler =, +				new WebSocketHttpRequestHandler(webSocketHandler, handshakeHandler);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java, +	private final List<ServletWebSocketHandlerRegistration> registrations = new ArrayList<>(4);, +	public WebSocketHandlerRegistration addHandler(WebSocketHandler handler, String... paths) {, +		registration.addHandler(handler, paths);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, + * Copyright 2002-2017 the original author or authors., +, + * A helper class for configuring SockJS fallback options for use with an, + * {@link org.springframework.web.socket.config.annotation.EnableWebSocket} and, + * {@link WebSocketConfigurer} setup., +	private TaskScheduler scheduler;, +		this.scheduler = defaultTaskScheduler;, +		this.scheduler = taskScheduler;, +, +		Assert.state(this.transportHandlers.isEmpty() || this.transportHandlerOverrides.isEmpty(),, +, +		return !this.transportHandlers.isEmpty() ?, +				new TransportHandlingSockJsService(this.scheduler, this.transportHandlers) :, +				new DefaultSockJsService(this.scheduler, this.transportHandlerOverrides);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +, +			WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler,, +		WebSocketHttpRequestHandler httpHandler =, +				new WebSocketHttpRequestHandler(webSocketHandler, handshakeHandler);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java, +	private final List<ServletWebSocketHandlerRegistration> registrations = new ArrayList<>(4);, +	public WebSocketHandlerRegistration addHandler(WebSocketHandler handler, String... paths) {, +		registration.addHandler(handler, paths);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, + * Copyright 2002-2017 the original author or authors., +, + * A helper class for configuring SockJS fallback options for use with an, + * {@link org.springframework.web.socket.config.annotation.EnableWebSocket} and, + * {@link WebSocketConfigurer} setup., +	private TaskScheduler scheduler;, +		this.scheduler = defaultTaskScheduler;, +		this.scheduler = taskScheduler;, +, +		Assert.state(this.transportHandlers.isEmpty() || this.transportHandlerOverrides.isEmpty(),, +, +		return !this.transportHandlers.isEmpty() ?, +				new TransportHandlingSockJsService(this.scheduler, this.transportHandlers) :, +				new DefaultSockJsService(this.scheduler, this.transportHandlerOverrides);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistration.java, + * Copyright 2002-2017 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +, +	private SockJsServiceRegistration registration;, +, +		this.registration = new SockJsServiceRegistration(this.sockJsTaskScheduler);, +			WebSocketTransportHandler handler = new WebSocketTransportHandler(this.handshakeHandler);, +			this.registration.setTransportHandlerOverrides(handler);, +			this.registration.setAllowedOrigins(, +					this.allowedOrigins.toArray(new String[this.allowedOrigins.size()]));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +, +			WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler,, +		WebSocketHttpRequestHandler httpHandler =, +				new WebSocketHttpRequestHandler(webSocketHandler, handshakeHandler);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java, +	private final List<ServletWebSocketHandlerRegistration> registrations = new ArrayList<>(4);, +	public WebSocketHandlerRegistration addHandler(WebSocketHandler handler, String... paths) {, +		registration.addHandler(handler, paths);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, + * Copyright 2002-2017 the original author or authors., +, + * A helper class for configuring SockJS fallback options for use with an, + * {@link org.springframework.web.socket.config.annotation.EnableWebSocket} and, + * {@link WebSocketConfigurer} setup., +	private TaskScheduler scheduler;, +		this.scheduler = defaultTaskScheduler;, +		this.scheduler = taskScheduler;, +, +		Assert.state(this.transportHandlers.isEmpty() || this.transportHandlerOverrides.isEmpty(),, +]