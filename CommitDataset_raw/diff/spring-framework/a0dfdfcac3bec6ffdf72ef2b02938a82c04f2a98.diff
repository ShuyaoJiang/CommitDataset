[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +							return WebClientResponseException.create(, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +							return WebClientResponseException.create(, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java, +	 * Constructor with response data only, and a default message., +	 * @since 5.1, +	 */, +	public WebClientResponseException(int statusCode, String statusText,, +			@Nullable HttpHeaders headers, @Nullable byte[] body, @Nullable Charset charset) {, +, +		this(statusCode + " " + statusText, statusCode, statusText, headers, body, charset);, +	}, +, +	/**, +	 * Constructor with a prepared message., +			@Nullable HttpHeaders headers, @Nullable byte[] responsebody, @Nullable Charset charset) {, +		this.responseBody = (responsebody != null ? responsebody : new byte[0]);, +		this.responseCharset = (charset != null ? charset : StandardCharsets.ISO_8859_1);, +, +	/**, +	 * Create {@code WebClientResponseException} or an HTTP status specific sub-class., +	 * @since 5.1, +	 */, +	public static WebClientResponseException create(, +			int statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +, +		HttpStatus httpStatus = HttpStatus.resolve(statusCode);, +		if (httpStatus != null) {, +			switch (httpStatus) {, +				case BAD_REQUEST:, +					return new WebClientResponseException.BadRequest(statusText, headers, body, charset);, +				case UNAUTHORIZED:, +					return new WebClientResponseException.Unauthorized(statusText, headers, body, charset);, +				case FORBIDDEN:, +					return new WebClientResponseException.Forbidden(statusText, headers, body, charset);, +				case NOT_FOUND:, +					return new WebClientResponseException.NotFound(statusText, headers, body, charset);, +				case METHOD_NOT_ALLOWED:, +					return new WebClientResponseException.MethodNotAllowed(statusText, headers, body, charset);, +				case NOT_ACCEPTABLE:, +					return new WebClientResponseException.NotAcceptable(statusText, headers, body, charset);, +				case CONFLICT:, +					return new WebClientResponseException.Conflict(statusText, headers, body, charset);, +				case GONE:, +					return new WebClientResponseException.Gone(statusText, headers, body, charset);, +				case UNSUPPORTED_MEDIA_TYPE:, +					return new WebClientResponseException.UnsupportedMediaType(statusText, headers, body, charset);, +				case TOO_MANY_REQUESTS:, +					return new WebClientResponseException.TooManyRequests(statusText, headers, body, charset);, +				case UNPROCESSABLE_ENTITY:, +					return new WebClientResponseException.UnprocessableEntity(statusText, headers, body, charset);, +				case INTERNAL_SERVER_ERROR:, +					return new WebClientResponseException.InternalServerError(statusText, headers, body, charset);, +				case NOT_IMPLEMENTED:, +					return new WebClientResponseException.NotImplemented(statusText, headers, body, charset);, +				case BAD_GATEWAY:, +					return new WebClientResponseException.BadGateway(statusText, headers, body, charset);, +				case SERVICE_UNAVAILABLE:, +					return new WebClientResponseException.ServiceUnavailable(statusText, headers, body, charset);, +				case GATEWAY_TIMEOUT:, +					return new WebClientResponseException.GatewayTimeout(statusText, headers, body, charset);, +			}, +		}, +		return new WebClientResponseException(statusCode, statusText, headers, body, charset);, +	}, +, +, +, +	// Sub-classes for specific, client-side, HTTP status codes.., +, +	/**, +	 * {@link WebClientResponseException} for status HTTP 400 Bad Request., +	 * @since 5.1, +	 */, +	@SuppressWarnings("serial"), +	public static class BadRequest extends WebClientResponseException {, +, +		BadRequest(String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +			super(HttpStatus.BAD_REQUEST.value(), statusText, headers, body, charset);, +		}, +	}, +, +	/**, +	 * {@link WebClientResponseException} for status HTTP 401 Unauthorized., +	 * @since 5.1, +	 */, +	@SuppressWarnings("serial"), +	public static class Unauthorized extends WebClientResponseException {, +, +		Unauthorized(String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +			super(HttpStatus.UNAUTHORIZED.value(), statusText, headers, body, charset);, +		}, +	}, +, +	/**, +	 * {@link WebClientResponseException} for status HTTP 403 Forbidden., +	 * @since 5.1, +	 */, +	@SuppressWarnings("serial")]