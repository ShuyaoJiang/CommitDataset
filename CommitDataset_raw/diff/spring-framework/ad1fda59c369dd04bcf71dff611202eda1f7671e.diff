[+++ b/build.gradle, +	group = "org.springframework", +	version = qualifyVersionIfNecessary(version), +, +		compile(project(":spring-web")), +	test {, +		useJUnit(), +		useTestNG(), +	}, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +, +		doFirst {, +		}, +, +/*, + * Support publication of artifacts versioned by topic branch., + * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time., + * If <TOPIC> starts with 'SPR-', change version, + *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT, + *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT, + */, +def qualifyVersionIfNecessary(version) {, +	if (rootProject.hasProperty("BRANCH_NAME")) {, +		def qualifier = rootProject.getProperty("BRANCH_NAME"), +		if (qualifier.startsWith("SPR-")) {, +			return version.replace('BUILD', qualifier), +		}, +	}, +	return version, +}, +++ b/build.gradle, +	group = "org.springframework", +	version = qualifyVersionIfNecessary(version), +, +		compile(project(":spring-web")), +	test {, +		useJUnit(), +		useTestNG(), +	}, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +, +		doFirst {, +		}, +, +/*, + * Support publication of artifacts versioned by topic branch., + * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time., + * If <TOPIC> starts with 'SPR-', change version, + *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT, + *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT, + */, +def qualifyVersionIfNecessary(version) {, +	if (rootProject.hasProperty("BRANCH_NAME")) {, +		def qualifier = rootProject.getProperty("BRANCH_NAME"), +		if (qualifier.startsWith("SPR-")) {, +			return version.replace('BUILD', qualifier), +		}, +	}, +	return version, +}, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided", "testCompile"]) {, +++ b/build.gradle, +	group = "org.springframework", +	version = qualifyVersionIfNecessary(version), +, +		compile(project(":spring-web")), +	test {, +		useJUnit(), +		useTestNG(), +	}, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +, +		doFirst {, +		}, +, +/*, + * Support publication of artifacts versioned by topic branch., + * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time., + * If <TOPIC> starts with 'SPR-', change version, + *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT, + *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT, + */, +def qualifyVersionIfNecessary(version) {, +	if (rootProject.hasProperty("BRANCH_NAME")) {, +		def qualifier = rootProject.getProperty("BRANCH_NAME"), +		if (qualifier.startsWith("SPR-")) {, +			return version.replace('BUILD', qualifier), +		}, +	}, +	return version, +}, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided", "testCompile"]) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.tests.sample.beans.IOther;]