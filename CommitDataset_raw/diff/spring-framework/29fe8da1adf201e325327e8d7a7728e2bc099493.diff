[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorIs.java, +import org.springframework.expression.spel.ExpressionState;, +	/**, +	 * Compare the left operand to see it is an instance of the type specified as the right operand. The right operand, +	 * must be a class., +	 * , +	 * @param state the expression state, +	 * @return true if the left operand is an instanceof of the right operand, otherwise false, +	 * @throws EvaluationException if there is a problem evaluating the expression, +	 */, +	public Boolean getValue(ExpressionState state) throws EvaluationException {, +		if (left == null) {, +			return false; // null is not an instanceof anything, +		if (right == null || !(right instanceof Class<?>)) {, +			throw new SpelException(getRightOperand().getCharPositionInLine(),, +					SpelMessages.IS_OPERATOR_NEEDS_CLASS_OPERAND, (right == null ? "null" : right.getClass().getName()));, +		}, +		Class<?> rightClass = (Class<?>) right;, +		return rightClass.isAssignableFrom(left.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorIs.java, +import org.springframework.expression.spel.ExpressionState;, +	/**, +	 * Compare the left operand to see it is an instance of the type specified as the right operand. The right operand, +	 * must be a class., +	 * , +	 * @param state the expression state, +	 * @return true if the left operand is an instanceof of the right operand, otherwise false, +	 * @throws EvaluationException if there is a problem evaluating the expression, +	 */, +	public Boolean getValue(ExpressionState state) throws EvaluationException {, +		if (left == null) {, +			return false; // null is not an instanceof anything, +		if (right == null || !(right instanceof Class<?>)) {, +			throw new SpelException(getRightOperand().getCharPositionInLine(),, +					SpelMessages.IS_OPERATOR_NEEDS_CLASS_OPERAND, (right == null ? "null" : right.getClass().getName()));, +		}, +		Class<?> rightClass = (Class<?>) right;, +		return rightClass.isAssignableFrom(left.getClass());, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ParserErrorMessagesTests.java, +, +	public void testBrokenExpression07() {, +		// T() can only take an identifier (possibly qualified), not a literal, +		// message ought to say identifier rather than ID, +		parseAndCheckError("null is T('a')", SpelMessages.PARSE_PROBLEM, 10, "mismatched input ''a'' expecting ID"); // POOR, +	}, +]