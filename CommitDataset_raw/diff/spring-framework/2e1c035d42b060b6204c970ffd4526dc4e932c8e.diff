[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		for (Class<?> generic : resolveGenerics()) {, +			if (generic == null) {, +			for (Type genericInterface : resolved.getGenericInterfaces()) {, +				if (genericInterface instanceof Class) {, +					if (forClass((Class<?>) genericInterface).hasGenerics()) {, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		for (Class<?> generic : resolveGenerics()) {, +			if (generic == null) {, +			for (Type genericInterface : resolved.getGenericInterfaces()) {, +				if (genericInterface instanceof Class) {, +					if (forClass((Class<?>) genericInterface).hasGenerics()) {, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, + * Tests for {@link ResolvableType}., + *, +		assertThat(none.hasUnresolvableGenerics(), equalTo(false));, +	@Test, +	public void hasUnresolvableGenerics() throws Exception {, +		ResolvableType type = ResolvableType.forField(Fields.class.getField("stringList"));, +		assertThat(type.hasUnresolvableGenerics(), equalTo(false));, +	}, +, +	@Test, +	public void hasUnresolvableGenericsBasedOnOwnGenerics() throws Exception {, +		ResolvableType type = ResolvableType.forClass(List.class);, +		assertThat(type.hasUnresolvableGenerics(), equalTo(true));, +	}, +, +	@Test, +	public void hasUnresolvableGenericsWhenSelfNotResolvable() throws Exception {, +		ResolvableType type = ResolvableType.forClass(List.class).getGeneric();, +		assertThat(type.hasUnresolvableGenerics(), equalTo(false));, +	}, +, +	@Test, +	public void hasUnresolvableGenericsWhenImplementesRawInterface() throws Exception {, +		ResolvableType type = ResolvableType.forClass(MySimpleInterfaceTypeWithImplementsRaw.class);, +		for (ResolvableType generic : type.getGenerics()) {, +			assertThat(generic.resolve(), not(nullValue()));, +		}, +		assertThat(type.hasUnresolvableGenerics(), equalTo(true));, +	}, +, +	@Test, +	public void hasUnresolvableGenericsWhenExtends() throws Exception {, +		ResolvableType type = ResolvableType.forClass(ExtendsMySimpleInterfaceTypeWithImplementsRaw.class);, +		for (ResolvableType generic : type.getGenerics()) {, +			assertThat(generic.resolve(), not(nullValue()));, +		}, +		assertThat(type.hasUnresolvableGenerics(), equalTo(true));, +	}, +, +	public abstract class MySimpleInterfaceTypeWithImplementsRaw implements MyInterfaceType<String>, List {, +, +	}, +, +	public abstract class ExtendsMySimpleInterfaceTypeWithImplementsRaw extends MySimpleInterfaceTypeWithImplementsRaw {, +, +	}, +]