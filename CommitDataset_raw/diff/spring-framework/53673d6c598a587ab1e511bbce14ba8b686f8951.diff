[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Chris Beams, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds, +	 * @since 3.2, +	 */, +	long initialDelay() default 0;, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Chris Beams, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds, +	 * @since 3.2, +	 */, +	long initialDelay() default 0;, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.CronTask;, +import org.springframework.scheduling.config.IntervalTask;, +	private final ScheduledTaskRegistrar registrar = new ScheduledTaskRegistrar();, +						registrar.addCronTask(new CronTask(runnable, cron));, +					long initialDelay = annotation.initialDelay();, +						registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +						registrar.addFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay));, +		if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Chris Beams, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds, +	 * @since 3.2, +	 */, +	long initialDelay() default 0;, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.CronTask;, +import org.springframework.scheduling.config.IntervalTask;, +	private final ScheduledTaskRegistrar registrar = new ScheduledTaskRegistrar();, +						registrar.addCronTask(new CronTask(runnable, cron));, +					long initialDelay = annotation.initialDelay();, +						registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +						registrar.addFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay));, +		if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfigurer.java, +	/**, +	 * Callback allowing a {@link org.springframework.scheduling.TaskScheduler, +	 * TaskScheduler} and specific {@link org.springframework.scheduling.config.Task Task}, +	 * instances to be registered against the given the {@link ScheduledTaskRegistrar}, +	 * @param taskRegistrar the registrar to be configured., +	 */, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Chris Beams, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds, +	 * @since 3.2, +	 */, +	long initialDelay() default 0;, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.CronTask;, +import org.springframework.scheduling.config.IntervalTask;, +	private final ScheduledTaskRegistrar registrar = new ScheduledTaskRegistrar();, +						registrar.addCronTask(new CronTask(runnable, cron));, +					long initialDelay = annotation.initialDelay();, +						registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +						registrar.addFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay));, +		if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfigurer.java, +	/**, +	 * Callback allowing a {@link org.springframework.scheduling.TaskScheduler, +	 * TaskScheduler} and specific {@link org.springframework.scheduling.config.Task Task}, +	 * instances to be registered against the given the {@link ScheduledTaskRegistrar}, +	 * @param taskRegistrar the registrar to be configured., +	 */, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/CronTask.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.config;, +]