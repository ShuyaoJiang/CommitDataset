[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, +		map.forEach((key, value) -> {, +			List<? extends V> values = Collections.unmodifiableList(value);, +			result.put(key, (List<V>) values);, +			values.forEach(this::set);, +			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, +		map.forEach((key, value) -> {, +			List<? extends V> values = Collections.unmodifiableList(value);, +			result.put(key, (List<V>) values);, +			values.forEach(this::set);, +			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +		map.forEach(this::put);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, +		map.forEach((key, value) -> {, +			List<? extends V> values = Collections.unmodifiableList(value);, +			result.put(key, (List<V>) values);, +			values.forEach(this::set);, +			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +		map.forEach(this::put);, +++ b/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java, +		values.forEach(this::set);, +		this.targetMap.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, +		map.forEach((key, value) -> {, +			List<? extends V> values = Collections.unmodifiableList(value);, +			result.put(key, (List<V>) values);, +			values.forEach(this::set);, +			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +		map.forEach(this::put);, +++ b/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java, +		values.forEach(this::set);, +		this.targetMap.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +		methods.forEach((key, mapping) -> {, +			Method invocableMethod = AopUtils.selectInvocableMethod(key, userType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		primitiveWrapperTypeMap.forEach((key, value) -> {, +			primitiveTypeToWrapperMap.put(value, key);, +			registerCommonClasses(key);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, +		map.forEach((key, value) -> {, +			List<? extends V> values = Collections.unmodifiableList(value);, +			result.put(key, (List<V>) values);, +			values.forEach(this::set);, +			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +		map.forEach(this::put);, +++ b/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java, +		values.forEach(this::set);, +		this.targetMap.forEach((key, value) -> singleValueMap.put(key, value.get(0)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +		methods.forEach((key, mapping) -> {, +			Method invocableMethod = AopUtils.selectInvocableMethod(key, userType);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2017 the original author or authors., +			urlMap.forEach((url, handler) -> {]