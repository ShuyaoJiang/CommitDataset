[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.util.ReflectionUtils;, +			ReflectionUtils.makeAccessible(method);, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.util.ReflectionUtils;, +			ReflectionUtils.makeAccessible(method);, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +import org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass;, +	public void findMethodAnnotationOnLeaf() throws Exception {, +	public void findMethodAnnotationOnRoot() throws Exception {, +	public void findMethodAnnotationOnRootButOverridden() throws Exception {, +	public void findMethodAnnotationNotAnnotated() throws Exception {, +	public void findMethodAnnotationOnBridgeMethod() throws Exception {, +	// public void findMethodAnnotationFromInterfaceImplementedByRoot(), +	public void getValueFromAnnotation() throws Exception {, +	public void getValueFromNonPublicAnnotation() throws Exception {, +		Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();, +		assertEquals(1, declaredAnnotations.length);, +		Annotation annotation = declaredAnnotations[0];, +		assertNotNull(annotation);, +		assertEquals("NonPublicAnnotation", annotation.annotationType().getSimpleName());, +		assertEquals(42, AnnotationUtils.getValue(annotation, AnnotationUtils.VALUE));, +		assertEquals(42, AnnotationUtils.getValue(annotation));, +	}, +, +	@Test, +	public void getDefaultValueFromAnnotation() throws Exception {, +	public void getDefaultValueFromNonPublicAnnotation() throws Exception {, +		Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();, +		assertEquals(1, declaredAnnotations.length);, +		Annotation annotation = declaredAnnotations[0];, +		assertNotNull(annotation);, +		assertEquals("NonPublicAnnotation", annotation.annotationType().getSimpleName());, +		assertEquals(-1, AnnotationUtils.getDefaultValue(annotation, AnnotationUtils.VALUE));, +		assertEquals(-1, AnnotationUtils.getDefaultValue(annotation));, +	}, +, +	@Test, +	public void getDefaultValueFromAnnotationType() throws Exception {, +	public void findAnnotationFromInterface() throws Exception {, +	public void findAnnotationFromInterfaceOnSuper() throws Exception {, +	public void findAnnotationFromInterfaceWhenSuperDoesNotImplementMethod(), +			throws Exception {, +	public void getRepeatableFromMethod() throws Exception {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.util.ReflectionUtils;, +			ReflectionUtils.makeAccessible(method);, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +import org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass;, +	public void findMethodAnnotationOnLeaf() throws Exception {, +	public void findMethodAnnotationOnRoot() throws Exception {, +	public void findMethodAnnotationOnRootButOverridden() throws Exception {, +	public void findMethodAnnotationNotAnnotated() throws Exception {, +	public void findMethodAnnotationOnBridgeMethod() throws Exception {, +	// public void findMethodAnnotationFromInterfaceImplementedByRoot(), +	public void getValueFromAnnotation() throws Exception {, +	public void getValueFromNonPublicAnnotation() throws Exception {, +		Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();, +		assertEquals(1, declaredAnnotations.length);, +		Annotation annotation = declaredAnnotations[0];, +		assertNotNull(annotation);, +		assertEquals("NonPublicAnnotation", annotation.annotationType().getSimpleName());, +		assertEquals(42, AnnotationUtils.getValue(annotation, AnnotationUtils.VALUE));, +		assertEquals(42, AnnotationUtils.getValue(annotation));, +	}, +, +	@Test, +	public void getDefaultValueFromAnnotation() throws Exception {, +	public void getDefaultValueFromNonPublicAnnotation() throws Exception {, +		Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();, +		assertEquals(1, declaredAnnotations.length);, +		Annotation annotation = declaredAnnotations[0];, +		assertNotNull(annotation);, +		assertEquals("NonPublicAnnotation", annotation.annotationType().getSimpleName());, +		assertEquals(-1, AnnotationUtils.getDefaultValue(annotation, AnnotationUtils.VALUE));, +		assertEquals(-1, AnnotationUtils.getDefaultValue(annotation));, +	}, +, +	@Test, +	public void getDefaultValueFromAnnotationType() throws Exception {, +	public void findAnnotationFromInterface() throws Exception {, +	public void findAnnotationFromInterfaceOnSuper() throws Exception {, +	public void findAnnotationFromInterfaceWhenSuperDoesNotImplementMethod(), +			throws Exception {, +	public void getRepeatableFromMethod() throws Exception {, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/subpackage/NonPublicAnnotatedClass.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *]