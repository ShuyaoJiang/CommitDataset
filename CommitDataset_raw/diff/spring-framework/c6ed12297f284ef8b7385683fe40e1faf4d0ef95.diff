[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServerSupport.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.SocketUtils;, +	private String host = "0.0.0.0";, +, +	public void setHost(String host) {, +		this.host = host;, +	}, +, +	public String getHost() {, +		return host;, +	}, +		if(this.port == -1) {, +			this.port = SocketUtils.findAvailableTcpPort(8080);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServerSupport.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.SocketUtils;, +	private String host = "0.0.0.0";, +, +	public void setHost(String host) {, +		this.host = host;, +	}, +, +	public String getHost() {, +		return host;, +	}, +		if(this.port == -1) {, +			this.port = SocketUtils.findAvailableTcpPort(8080);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/JettyHttpServer.java, +		connector.setHost(getHost());, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServerSupport.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.SocketUtils;, +	private String host = "0.0.0.0";, +, +	public void setHost(String host) {, +		this.host = host;, +	}, +, +	public String getHost() {, +		return host;, +	}, +		if(this.port == -1) {, +			this.port = SocketUtils.findAvailableTcpPort(8080);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/JettyHttpServer.java, +		connector.setHost(getHost());, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java, +		this.reactorServer = reactor.io.netty.http.HttpServer.create(getHost(), getPort());, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServerSupport.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.SocketUtils;, +	private String host = "0.0.0.0";, +, +	public void setHost(String host) {, +		this.host = host;, +	}, +, +	public String getHost() {, +		return host;, +	}, +		if(this.port == -1) {, +			this.port = SocketUtils.findAvailableTcpPort(8080);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/JettyHttpServer.java, +		connector.setHost(getHost());, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java, +		this.reactorServer = reactor.io.netty.http.HttpServer.create(getHost(), getPort());, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/RxNettyHttpServer.java, +import java.net.InetSocketAddress;, +, +		this.rxNettyServer = io.reactivex.netty.protocol.http.server.HttpServer, +				.newServer(new InetSocketAddress(getHost(), getPort()));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServer.java, +	void setHost(String host);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/HttpServerSupport.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.SocketUtils;, +	private String host = "0.0.0.0";, +, +	public void setHost(String host) {, +		this.host = host;]