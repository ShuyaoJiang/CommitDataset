[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +import java.util.function.Consumer;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.util.Assert;, +	 * Return the strategies used to convert the body of this response., +	 */, +	ExchangeStrategies strategies();, +, +	/**, +	// Static builder methods, +, +	/**, +	 * Create a builder with the status, headers, and cookies of the given response., +	 * @param other the response to copy the status, headers, and cookies from, +	 * @return the created builder, +	 */, +	static Builder from(ClientResponse other) {, +		Assert.notNull(other, "'other' must not be null");, +		return new DefaultClientResponseBuilder(other);, +	}, +, +	/**, +	 * Create a response builder with the given status code and using default strategies for reading, +	 * the body., +	 * @param statusCode the status code, +	 * @return the created builder, +	 */, +	static Builder create(HttpStatus statusCode) {, +		return create(statusCode, ExchangeStrategies.withDefaults());, +	}, +, +	/**, +	 * Create a response builder with the given status code and strategies for reading the body., +	 * @param statusCode the status code, +	 * @param strategies the strategies, +	 * @return the created builder, +	 */, +	static Builder create(HttpStatus statusCode, ExchangeStrategies strategies) {, +		Assert.notNull(statusCode, "'statusCode' must not be null");, +		Assert.notNull(strategies, "'strategies' must not be null");, +		return new DefaultClientResponseBuilder(strategies), +				.statusCode(statusCode);, +	}, +, +	/**, +	 * Create a response builder with the given status code and message body readers., +	 * @param statusCode the status code, +	 * @param messageReaders the message readers, +	 * @return the created builder, +	 */, +	static Builder create(HttpStatus statusCode, List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(statusCode, "'statusCode' must not be null");, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +, +		return create(statusCode, new ExchangeStrategies() {, +			@Override, +			public List<HttpMessageReader<?>> messageReaders() {, +				return messageReaders;, +			}, +, +			@Override, +			public List<HttpMessageWriter<?>> messageWriters() {, +				// not used in the response, +				return Collections.emptyList();, +			}, +		});, +, +	}, +, +	/**, +	 * Defines a builder for a response., +	 */, +	interface Builder {, +, +		/**, +		 * Set the status code of the response., +		 * @param statusCode the new status code., +		 * @return this builder, +		 */, +		Builder statusCode(HttpStatus statusCode);, +, +		/**, +		 * Add the given header value(s) under the given name., +		 * @param headerName  the header name, +		 * @param headerValues the header value(s), +		 * @return this builder, +		 * @see HttpHeaders#add(String, String), +		 */, +		Builder header(String headerName, String... headerValues);, +, +		/**, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods.]