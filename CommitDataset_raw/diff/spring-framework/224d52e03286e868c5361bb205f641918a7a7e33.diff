[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private final List<MediaType> contentTypes;, +	public FixedContentTypeResolver(List<MediaType> contentTypes) {, +		Assert.notNull(contentTypes, "'contentTypes' must not be null");, +		this.contentTypes = Collections.unmodifiableList(contentTypes);, +		return this.contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		return this.contentTypes;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private final List<MediaType> contentTypes;, +	public FixedContentTypeResolver(List<MediaType> contentTypes) {, +		Assert.notNull(contentTypes, "'contentTypes' must not be null");, +		this.contentTypes = Collections.unmodifiableList(contentTypes);, +		return this.contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		return this.contentTypes;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private final List<MediaType> contentTypes;, +	public FixedContentTypeResolver(List<MediaType> contentTypes) {, +		Assert.notNull(contentTypes, "'contentTypes' must not be null");, +		this.contentTypes = Collections.unmodifiableList(contentTypes);, +		return this.contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		return this.contentTypes;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +			return MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private final List<MediaType> contentTypes;, +	public FixedContentTypeResolver(List<MediaType> contentTypes) {, +		Assert.notNull(contentTypes, "'contentTypes' must not be null");, +		this.contentTypes = Collections.unmodifiableList(contentTypes);, +		return this.contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		return this.contentTypes;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +			return MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**, +	 * @return the requested media types, or {@link #MEDIA_TYPE_ALL_LIST} if none, +	 * were requested., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private final List<MediaType> contentTypes;, +	public FixedContentTypeResolver(List<MediaType> contentTypes) {, +		Assert.notNull(contentTypes, "'contentTypes' must not be null");, +		this.contentTypes = Collections.unmodifiableList(contentTypes);, +		return this.contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		return this.contentTypes;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +			return MEDIA_TYPE_ALL_LIST;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**, +	 * @return the requested media types, or {@link #MEDIA_TYPE_ALL_LIST} if none, +	 * were requested., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolverBuilder.java, +				List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange);]