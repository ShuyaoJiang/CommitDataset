[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java, +import org.springframework.web.reactive.config.EnableWebFlux;, +import org.springframework.web.reactive.config.WebFluxConfigurer;, +	@EnableWebFlux, +	static class WebConfig implements WebFluxConfigurer {, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +	@SuppressWarnings({"unused", "OptionalUsedAsFieldOrParameterType"}), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java, +import org.springframework.web.reactive.config.EnableWebFlux;, +import org.springframework.web.reactive.config.WebFluxConfigurer;, +	@EnableWebFlux, +	static class WebConfig implements WebFluxConfigurer {, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +	@SuppressWarnings({"unused", "OptionalUsedAsFieldOrParameterType"}), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/UrlBasedViewResolverTests.java, +import java.time.Duration;, +, +		this.resolver = new UrlBasedViewResolver();, +		this.resolver.setApplicationContext(context);, +		this.resolver.setViewClass(TestView.class);, +		this.resolver.setViewNames("my*");, +		Mono<View> mono = this.resolver.resolveViewName("my-view", Locale.US);, +		mono = this.resolver.resolveViewName("not-my-view", Locale.US);, +		Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US);, +, +				.expectComplete(), +				.verify(Duration.ZERO);, +		this.resolver.setRedirectViewProvider(url -> new RedirectView(url, HttpStatus.FOUND));, +		Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US);, +, +				.expectComplete(), +				.verify(Duration.ZERO);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java, +import org.springframework.web.reactive.config.EnableWebFlux;, +import org.springframework.web.reactive.config.WebFluxConfigurer;, +	@EnableWebFlux, +	static class WebConfig implements WebFluxConfigurer {, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +	@SuppressWarnings({"unused", "OptionalUsedAsFieldOrParameterType"}), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/UrlBasedViewResolverTests.java, +import java.time.Duration;, +, +		this.resolver = new UrlBasedViewResolver();, +		this.resolver.setApplicationContext(context);, +		this.resolver.setViewClass(TestView.class);, +		this.resolver.setViewNames("my*");, +		Mono<View> mono = this.resolver.resolveViewName("my-view", Locale.US);, +		mono = this.resolver.resolveViewName("not-my-view", Locale.US);, +		Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US);, +, +				.expectComplete(), +				.verify(Duration.ZERO);, +		this.resolver.setRedirectViewProvider(url -> new RedirectView(url, HttpStatus.FOUND));, +		Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US);, +, +				.expectComplete(), +				.verify(Duration.ZERO);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, + * ViewResolutionResultHandler relying on a canned {@link TestViewResolver}, + * or a (Mockito) "mock"., + *]