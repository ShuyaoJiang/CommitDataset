[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		String scheme = getScheme();, +		String server = getServerName();, +		int port = getServerPort();, +		String uri = getRequestURI();, +, +		StringBuffer url = new StringBuffer(scheme).append("://").append(server);, +		if (port > 0 && ((HTTP.equalsIgnoreCase(scheme) && port != 80) ||, +				(HTTPS.equalsIgnoreCase(scheme) && port != 443))) {, +			url.append(':').append(port);, +		if (StringUtils.hasText(uri)) {, +			url.append(uri);, +	public Part getPart(String name) throws IOException, ServletException {, +	public Collection<Part> getParts() throws IOException, ServletException {, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		String scheme = getScheme();, +		String server = getServerName();, +		int port = getServerPort();, +		String uri = getRequestURI();, +, +		StringBuffer url = new StringBuffer(scheme).append("://").append(server);, +		if (port > 0 && ((HTTP.equalsIgnoreCase(scheme) && port != 80) ||, +				(HTTPS.equalsIgnoreCase(scheme) && port != 443))) {, +			url.append(':').append(port);, +		if (StringUtils.hasText(uri)) {, +			url.append(uri);, +	public Part getPart(String name) throws IOException, ServletException {, +	public Collection<Part> getParts() throws IOException, ServletException {, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +	public void setContentAndGetContentAsByteArray() {, +	@Test  // SPR-12677, +	public void httpHeaderNameCasingIsPreserved() {, +	@Test  // SPR-16138, +	public void getRequestURLWithHostHeader() {, +		String testServer = "test.server";, +		request.addHeader(HOST, testServer);, +		StringBuffer requestURL = request.getRequestURL();, +		assertEquals("http://" + testServer, requestURL.toString());, +	}, +, +	@Test  // SPR-16138, +	public void getRequestURLWithHostHeaderAndPort() {, +		String testServer = "test.server:9999";, +		request.addHeader(HOST, testServer);, +		StringBuffer requestURL = request.getRequestURL();, +		assertEquals("http://" + testServer, requestURL.toString());, +	}, +, +	public void httpHeaderDate() {, +	public void httpHeaderTimestamp() {, +	public void httpHeaderRfcFormatedDate() {, +	public void httpHeaderFirstVariantFormatedDate() {, +	public void httpHeaderSecondVariantFormatedDate() {, +	public void httpHeaderFormatedDateError() {, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		String scheme = getScheme();, +		String server = getServerName();, +		int port = getServerPort();, +		String uri = getRequestURI();, +, +		StringBuffer url = new StringBuffer(scheme).append("://").append(server);, +		if (port > 0 && ((HTTP.equalsIgnoreCase(scheme) && port != 80) ||, +				(HTTPS.equalsIgnoreCase(scheme) && port != 443))) {, +			url.append(':').append(port);, +		if (StringUtils.hasText(uri)) {, +			url.append(uri);, +	public Part getPart(String name) throws IOException, ServletException {, +	public Collection<Part> getParts() throws IOException, ServletException {, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +	public void setContentAndGetContentAsByteArray() {, +	@Test  // SPR-12677, +	public void httpHeaderNameCasingIsPreserved() {, +	@Test  // SPR-16138, +	public void getRequestURLWithHostHeader() {, +		String testServer = "test.server";, +		request.addHeader(HOST, testServer);, +		StringBuffer requestURL = request.getRequestURL();, +		assertEquals("http://" + testServer, requestURL.toString());, +	}, +, +	@Test  // SPR-16138, +	public void getRequestURLWithHostHeaderAndPort() {, +		String testServer = "test.server:9999";, +		request.addHeader(HOST, testServer);, +		StringBuffer requestURL = request.getRequestURL();, +		assertEquals("http://" + testServer, requestURL.toString());, +	}, +, +	public void httpHeaderDate() {, +	public void httpHeaderTimestamp() {, +	public void httpHeaderRfcFormatedDate() {, +	public void httpHeaderFirstVariantFormatedDate() {, +	public void httpHeaderSecondVariantFormatedDate() {, +	public void httpHeaderFormatedDateError() {, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletRequest.java, +import org.springframework.util.ObjectUtils;, +	 * @return the content as a byte array (potentially {@code null}), +		Assert.notNull(name, "Parameter name must not be null");, +		String[] arr = this.parameters.get(name);, +		Assert.notNull(name, "Parameter name must not be null");]