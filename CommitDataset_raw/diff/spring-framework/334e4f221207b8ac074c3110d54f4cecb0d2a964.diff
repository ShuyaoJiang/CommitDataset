[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, + * Copyright 2002-2011 the original author or authors., +		// TODO [SPR-6184] Implement recursive search for configuration classes., +		// This needs to integrate seamlessly (i.e., analogous yet mutually, +		// exclusive) with the existing locations search., +		ContextConfiguration cc = declaringClass.getAnnotation(annotationType);, +		if (cc != null) {, +			if (logger.isTraceEnabled()) {, +				logger.trace("Retrieved @ContextConfiguration [" + cc + "] for declaring class [" + declaringClass, +						+ "]");, +			}, +, +			Class<?>[] configClasses = cc.classes();, +, +			if (!ObjectUtils.isEmpty(configClasses)) {, +				for (Class<?> configClass : configClasses) {, +					locationsList.add(configClass.getName());, +				}, +				return locationsList.toArray(new String[locationsList.size()]);, +			}, +		}, +, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, + * Copyright 2002-2011 the original author or authors., +		// TODO [SPR-6184] Implement recursive search for configuration classes., +		// This needs to integrate seamlessly (i.e., analogous yet mutually, +		// exclusive) with the existing locations search., +		ContextConfiguration cc = declaringClass.getAnnotation(annotationType);, +		if (cc != null) {, +			if (logger.isTraceEnabled()) {, +				logger.trace("Retrieved @ContextConfiguration [" + cc + "] for declaring class [" + declaringClass, +						+ "]");, +			}, +, +			Class<?>[] configClasses = cc.classes();, +, +			if (!ObjectUtils.isEmpty(configClasses)) {, +				for (Class<?> configClass : configClasses) {, +					locationsList.add(configClass.getName());, +				}, +				return locationsList.toArray(new String[locationsList.size()]);, +			}, +		}, +, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context.support;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigUtils;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.util.ObjectUtils;, +, +/**, + * TODO Document AnnotationConfigContextLoader., + * , + * @author Sam Brannen, + * @since 3.1, + */, +public class AnnotationConfigContextLoader extends AbstractContextLoader {, +, +	private static final Log logger = LogFactory.getLog(AnnotationConfigContextLoader.class);, +, +, +	/**, +	 * TODO Document loadContext()., +	 * , +	 * @see org.springframework.test.context.ContextLoader#loadContext(java.lang.String[]), +	 */, +	public ApplicationContext loadContext(String... locations) throws Exception {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Creating an AnnotationConfigApplicationContext for ", +					+ ObjectUtils.nullSafeToString(locations));, +		}, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		prepareContext(context);, +		customizeBeanFactory(context.getDefaultListableBeanFactory());]