[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java, + * Copyright 2002-2014 the original author or authors., +	 * Select handler methods for the given handler type., +	 * <p>Callers define handler methods of interest through the {@link MethodFilter} parameter., +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java, + * Copyright 2002-2014 the original author or authors., +	 * Select handler methods for the given handler type., +	 * <p>Callers define handler methods of interest through the {@link MethodFilter} parameter., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2014 the original author or authors., +	/** A filter for selecting annotated exception handling methods. */, +	public final static MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +, +		@Override, +		public boolean matches(Method method) {, +			return (AnnotationUtils.findAnnotation(method, ExceptionHandler.class) != null);, +		}, +	};, +, +, +, +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java, + * Copyright 2002-2014 the original author or authors., +	 * Select handler methods for the given handler type., +	 * <p>Callers define handler methods of interest through the {@link MethodFilter} parameter., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2014 the original author or authors., +	/** A filter for selecting annotated exception handling methods. */, +	public final static MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +, +		@Override, +		public boolean matches(Method method) {, +			return (AnnotationUtils.findAnnotation(method, ExceptionHandler.class) != null);, +		}, +	};, +, +, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * Copyright 2002-2014 the original author or authors., +	public boolean equals(Object obj) {, +		if (this == obj) {, +		if (obj != null && getClass().equals(obj.getClass())) {, +			AbstractRequestCondition<?> other = (AbstractRequestCondition<?>) obj;, +, +	/**, +	 * Return the discrete items a request condition is composed of., +	 * For example URL patterns, HTTP request methods, param expressions, etc., +	 * @return a collection of objects, never {@code null}, +	 */, +	protected abstract Collection<?> getContent();, +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java, + * Copyright 2002-2014 the original author or authors., +	 * Select handler methods for the given handler type., +	 * <p>Callers define handler methods of interest through the {@link MethodFilter} parameter., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2014 the original author or authors., +	/** A filter for selecting annotated exception handling methods. */, +	public final static MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +, +		@Override, +		public boolean matches(Method method) {, +			return (AnnotationUtils.findAnnotation(method, ExceptionHandler.class) != null);, +		}, +	};, +, +, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * Copyright 2002-2014 the original author or authors., +	public boolean equals(Object obj) {, +		if (this == obj) {, +		if (obj != null && getClass().equals(obj.getClass())) {, +			AbstractRequestCondition<?> other = (AbstractRequestCondition<?>) obj;, +, +	/**, +	 * Return the discrete items a request condition is composed of., +	 * For example URL patterns, HTTP request methods, param expressions, etc., +	 * @return a collection of objects, never {@code null}, +	 */, +	protected abstract Collection<?> getContent();, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java, + * Copyright 2002-2014 the original author or authors., +, +	private CompositeRequestCondition(RequestConditionHolder[] requestConditions) {, +		this.requestConditions = requestConditions;, +	}, +, +, +				"Cannot combine CompositeRequestConditions with a different number of conditions. " +, +				ObjectUtils.nullSafeToString(this.requestConditions) + " and  " +, +				ObjectUtils.nullSafeToString(other.requestConditions));, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java, + * Copyright 2002-2014 the original author or authors., +	 * Select handler methods for the given handler type.]