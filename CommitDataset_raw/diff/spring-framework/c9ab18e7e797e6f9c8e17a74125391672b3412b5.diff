[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +	private final ArrayList<Annotation> annotations = new ArrayList<Annotation>();, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +	private final ArrayList<Annotation> annotations = new ArrayList<Annotation>();, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationModel.java, +import java.util.LinkedHashSet;, +@SuppressWarnings("serial"), +final class ConfigurationModel extends LinkedHashSet<ConfigurationClass> {, +	 * Recurses through the model validating each {@link ConfigurationClass}., +	 * @param problemReporter {@link ProblemReporter} against which any validation errors, +	 *        will be registered, +		for (ConfigurationClass configClass : this), +		return format("%s containing @Configuration classes: %s", getClass().getSimpleName(), super.toString());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +	private final ArrayList<Annotation> annotations = new ArrayList<Annotation>();, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationModel.java, +import java.util.LinkedHashSet;, +@SuppressWarnings("serial"), +final class ConfigurationModel extends LinkedHashSet<ConfigurationClass> {, +	 * Recurses through the model validating each {@link ConfigurationClass}., +	 * @param problemReporter {@link ProblemReporter} against which any validation errors, +	 *        will be registered, +		for (ConfigurationClass configClass : this), +		return format("%s containing @Configuration classes: %s", getClass().getSimpleName(), super.toString());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationModelBeanDefinitionReader.java, +	public BeanDefinitionRegistry loadBeanDefinitions(ConfigurationModel configurationModel) {, +		for (ConfigurationClass configClass : configurationModel), +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +	private final ArrayList<Annotation> annotations = new ArrayList<Annotation>();, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationModel.java, +import java.util.LinkedHashSet;, +@SuppressWarnings("serial"), +final class ConfigurationModel extends LinkedHashSet<ConfigurationClass> {, +	 * Recurses through the model validating each {@link ConfigurationClass}., +	 * @param problemReporter {@link ProblemReporter} against which any validation errors, +	 *        will be registered, +		for (ConfigurationClass configClass : this), +		return format("%s containing @Configuration classes: %s", getClass().getSimpleName(), super.toString());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationModelBeanDefinitionReader.java, +	public BeanDefinitionRegistry loadBeanDefinitions(ConfigurationModel configurationModel) {, +		for (ConfigurationClass configClass : configurationModel), +++ b/org.springframework.config.java/src/test/java/org/springframework/config/java/support/ConfigurationModelTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.config.java.support;, +, +import static java.lang.String.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +import org.junit.Test;, +, +, +/**, + * Unit tests for {@link ConfigurationModel}., + * , + * @author Chris Beams, + */, +public class ConfigurationModelTests {, +, +	@Test, +	public void testToString() {, +		ConfigurationModel model = new ConfigurationModel();, +		assertThat(model.toString(), equalTo(, +				"ConfigurationModel containing @Configuration classes: []"));, +, +		ConfigurationClass config1 = new ConfigurationClass();, +		config1.setName("test.Config1");, +		model.add(config1);, +, +		assertThat(model.toString(), equalTo(format(, +				"ConfigurationModel containing @Configuration classes: [%s]", config1)));, +	}, +, +}]