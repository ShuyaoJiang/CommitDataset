[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw SessionFactoryUtils.convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw SessionFactoryUtils.convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +			catch (PersistenceException ex) {, +				if (ex.getCause() instanceof HibernateException) {, +					throw convertHibernateAccessException((HibernateException) ex.getCause());, +				}, +				throw ex;, +			}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw SessionFactoryUtils.convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +			catch (PersistenceException ex) {, +				if (ex.getCause() instanceof HibernateException) {, +					throw convertHibernateAccessException((HibernateException) ex.getCause());, +				}, +				throw ex;, +			}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java, +import javax.persistence.PersistenceException;, +	 * Trigger a flush on the given Hibernate Session, converting regular, +	 * {@link HibernateException} instances as well as Hibernate 5.2's, +	 * {@link PersistenceException} wrappers accordingly., +	 * @param session the Hibernate Session to flush, +	 * @param synch whether this flush is triggered by transaction synchronization, +	 * @throws DataAccessException, +	 * @since 4.3.2, +	 */, +	static void flush(Session session, boolean synch) throws DataAccessException {, +		if (synch) {, +			logger.debug("Flushing Hibernate Session on transaction synchronization");, +		}, +		else {, +			logger.debug("Flushing Hibernate Session on explicit request");, +		}, +		try {, +			session.flush();, +		}, +		catch (HibernateException ex) {, +			throw convertHibernateAccessException(ex);, +		}, +		catch (PersistenceException ex) {, +			if (ex.getCause() instanceof HibernateException) {, +				throw convertHibernateAccessException((HibernateException) ex.getCause());, +			}, +			throw ex;, +		}, +, +	}, +, +	/**, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import javax.persistence.PersistenceException;, +		catch (PersistenceException ex) {]