[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +		// TODO : prepare and store in instance var ?, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +		// TODO : prepare and store in instance var ?, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import java.util.Collection;, +, +, +		Collection<ViewResolver> matchingBeans =, +			BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), ViewResolver.class).values();, +, +			for (ViewResolver viewResolver : matchingBeans) {, +		else {, +			for (int i=0; i < viewResolvers.size(); i++) {, +				if (matchingBeans.contains(viewResolvers.get(i))) {, +					continue;, +				}, +				String name = viewResolvers.get(i).getClass().getName() + i;, +				getApplicationContext().getAutowireCapableBeanFactory().initializeBean(viewResolvers.get(i), name);, +			}, +			, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +		// TODO : prepare and store in instance var ?, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import java.util.Collection;, +, +, +		Collection<ViewResolver> matchingBeans =, +			BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), ViewResolver.class).values();, +, +			for (ViewResolver viewResolver : matchingBeans) {, +		else {, +			for (int i=0; i < viewResolvers.size(); i++) {, +				if (matchingBeans.contains(viewResolvers.get(i))) {, +					continue;, +				}, +				String name = viewResolvers.get(i).getClass().getName() + i;, +				getApplicationContext().getAutowireCapableBeanFactory().initializeBean(viewResolvers.get(i), name);, +			}, +			, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.web.context.support.StaticWebApplicationContext;, +	@Test, +	public void nestedViewResolverIsNotSpringBean() throws Exception {, +		InternalResourceViewResolver nestedResolver = new InternalResourceViewResolver();, +		nestedResolver.setViewClass(InternalResourceView.class);, +		viewResolver.setViewResolvers(new ArrayList<ViewResolver>(Arrays.asList(nestedResolver)));, +		, +		StaticWebApplicationContext appContext = new StaticWebApplicationContext();, +		appContext.setServletContext(new MockServletContext());, +		appContext.refresh();, +		viewResolver.setApplicationContext(appContext);, +, +		viewResolver.setDefaultContentType(MediaType.TEXT_HTML);, +, +		String viewName = "view";, +		Locale locale = Locale.ENGLISH;, +, +		View result = viewResolver.resolveViewName(viewName, locale);, +		assertNotNull("Invalid view", result);, +	}, +]