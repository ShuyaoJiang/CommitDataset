[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.expression.spel.support;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.expression.BeanResolver;, +import org.springframework.expression.ConstructorResolver;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.MethodResolver;, +import org.springframework.expression.OperatorOverloader;, +import org.springframework.expression.PropertyAccessor;, +import org.springframework.expression.TypeComparator;, +import org.springframework.expression.TypeConverter;, +import org.springframework.expression.TypeLocator;, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.SpelEvaluationException;, +import org.springframework.expression.spel.SpelMessage;, +import org.springframework.lang.Nullable;, +, +/**, + * A basic implementation of {@link EvaluationContext} that focuses on a subset, + * of essential SpEL features and configuration options, and relies on default, + * strategies otherwise., + *, + * <p>In many cases, the full extent of the SpEL is not, + * required and should be meaningfully restricted. Examples include but are not, + * limited to data binding expressions, property-based filters, and others. To, + * that effect, {@code SimpleEvaluationContext} supports only a subset of the, + * SpEL language syntax that excludes references to Java types, constructors,, + * and bean references., + *, + * <p>Note that {@code SimpleEvaluationContext} cannot be configured with a, + * default root object. Instead it is meant to be created once and used, + * repeatedly through method variants on, + * {@link org.springframework.expression.Expression Expression} that accept, + * both an {@code EvaluationContext} and a root object., + *, + * @author Rossen Stoyanchev, + * @since 4.3.15, + */, +public class SimpleEvaluationContext implements EvaluationContext {, +, +	private static final TypeLocator typeNotFoundTypeLocator = typeName -> {, +		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);, +	};, +, +, +	private final List<PropertyAccessor> propertyAccessors;, +, +	private final List<ConstructorResolver> constructorResolvers =, +			Collections.singletonList(new ReflectiveConstructorResolver());, +, +	private final List<MethodResolver> methodResolvers =, +			Collections.singletonList(new ReflectiveMethodResolver());, +, +	private final TypeConverter typeConverter;, +, +	private final TypeComparator typeComparator = new StandardTypeComparator();, +, +	private final OperatorOverloader operatorOverloader = new StandardOperatorOverloader();, +, +	private final Map<String, Object> variables = new HashMap<>();, +, +, +	public SimpleEvaluationContext() {, +		this(null, null);, +	}, +, +	public SimpleEvaluationContext(@Nullable List<PropertyAccessor> accessors, @Nullable TypeConverter converter) {, +		this.propertyAccessors = initPropertyAccessors(accessors);, +		this.typeConverter = converter != null ? converter : new StandardTypeConverter();, +	}, +, +, +	private static List<PropertyAccessor> initPropertyAccessors(@Nullable List<PropertyAccessor> accessors) {, +		if (accessors == null) {, +			accessors = new ArrayList<>(5);, +			accessors.add(new ReflectivePropertyAccessor());, +		}, +		return accessors;]