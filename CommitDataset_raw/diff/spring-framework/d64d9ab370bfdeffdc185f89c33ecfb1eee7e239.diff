[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +			this.pointcutClassLoader = determinePointcutClassLoader();, +	 * Determine the ClassLoader to use for pointcut evaluation., +	 */, +	private ClassLoader determinePointcutClassLoader() {, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader();, +		}, +		if (this.pointcutDeclarationScope != null) {, +			return this.pointcutDeclarationScope.getClassLoader();, +		}, +		return ClassUtils.getDefaultClassLoader();, +	}, +, +	/**, +	private PointcutParser initializePointcutParser(ClassLoader classLoader) {, +						SUPPORTED_PRIMITIVES, classLoader);, +			return BeanFactoryAnnotationUtils.isQualifierMatch(, +					this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +			this.pointcutClassLoader = determinePointcutClassLoader();, +	 * Determine the ClassLoader to use for pointcut evaluation., +	 */, +	private ClassLoader determinePointcutClassLoader() {, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader();, +		}, +		if (this.pointcutDeclarationScope != null) {, +			return this.pointcutDeclarationScope.getClassLoader();, +		}, +		return ClassUtils.getDefaultClassLoader();, +	}, +, +	/**, +	private PointcutParser initializePointcutParser(ClassLoader classLoader) {, +						SUPPORTED_PRIMITIVES, classLoader);, +			return BeanFactoryAnnotationUtils.isQualifierMatch(, +					this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcutAdvisor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class AspectJExpressionPointcutAdvisor extends AbstractGenericPointcutAdvisor implements BeanFactoryAware {, +	public void setParameterNames(String... names) {, +		this.pointcut.setParameterNames(names);, +	}, +, +	public void setParameterTypes(Class<?>... types) {, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.pointcut.setBeanFactory(beanFactory);, +	}, +, +	@Override, +	public Pointcut getPointcut() {, +		return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +			this.pointcutClassLoader = determinePointcutClassLoader();, +	 * Determine the ClassLoader to use for pointcut evaluation., +	 */, +	private ClassLoader determinePointcutClassLoader() {, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader();, +		}, +		if (this.pointcutDeclarationScope != null) {, +			return this.pointcutDeclarationScope.getClassLoader();, +		}, +		return ClassUtils.getDefaultClassLoader();, +	}, +, +	/**, +	private PointcutParser initializePointcutParser(ClassLoader classLoader) {, +						SUPPORTED_PRIMITIVES, classLoader);, +			return BeanFactoryAnnotationUtils.isQualifierMatch(, +					this.expressionPattern::matches, advisedBeanName, beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcutAdvisor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class AspectJExpressionPointcutAdvisor extends AbstractGenericPointcutAdvisor implements BeanFactoryAware {, +	public void setParameterNames(String... names) {, +		this.pointcut.setParameterNames(names);, +	}, +, +	public void setParameterTypes(Class<?>... types) {, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.pointcut.setBeanFactory(beanFactory);, +	}, +, +	@Override, +	public Pointcut getPointcut() {, +		return this.pointcut;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +			this.pointcutClassLoader = determinePointcutClassLoader();, +	 * Determine the ClassLoader to use for pointcut evaluation., +	 */, +	private ClassLoader determinePointcutClassLoader() {, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {]