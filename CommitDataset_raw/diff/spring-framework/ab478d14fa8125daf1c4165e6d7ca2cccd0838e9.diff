[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;, +import org.springframework.scheduling.config.ScheduledTask;, +public class ScheduledAnnotationBeanPostProcessor implements DestructionAwareBeanPostProcessor,, +		Ordered, EmbeddedValueResolverAware, BeanFactoryAware, ApplicationContextAware,, +	private final Map<Object, Set<ScheduledTask>> scheduledTasks =, +			new ConcurrentHashMap<Object, Set<ScheduledTask>>(16);, +, +			Set<ScheduledTask> tasks =, +					new LinkedHashSet<ScheduledTask>(4);, +, +				tasks.add(this.registrar.scheduleCronTask(new CronTask(runnable, new CronTrigger(cron, timeZone))));, +				tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay)));, +			this.scheduledTasks.put(bean, tasks);, +	public void postProcessBeforeDestruction(Object bean, String beanName) {, +		Set<ScheduledTask> tasks = this.scheduledTasks.remove(bean);, +		if (tasks != null) {, +			for (ScheduledTask task : tasks) {, +				task.cancel();, +			}, +		}, +	}, +, +	@Override, +	public boolean requiresDestruction(Object bean) {, +		return this.scheduledTasks.containsKey(bean);, +	}, +, +	@Override, +		Collection<Set<ScheduledTask>> allTasks = this.scheduledTasks.values();, +		for (Set<ScheduledTask> tasks : allTasks) {, +			for (ScheduledTask task : tasks) {, +				task.cancel();, +			}, +		}, +		this.scheduledTasks.clear();, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;, +import org.springframework.scheduling.config.ScheduledTask;, +public class ScheduledAnnotationBeanPostProcessor implements DestructionAwareBeanPostProcessor,, +		Ordered, EmbeddedValueResolverAware, BeanFactoryAware, ApplicationContextAware,, +	private final Map<Object, Set<ScheduledTask>> scheduledTasks =, +			new ConcurrentHashMap<Object, Set<ScheduledTask>>(16);, +, +			Set<ScheduledTask> tasks =, +					new LinkedHashSet<ScheduledTask>(4);, +, +				tasks.add(this.registrar.scheduleCronTask(new CronTask(runnable, new CronTrigger(cron, timeZone))));, +				tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay)));, +			this.scheduledTasks.put(bean, tasks);, +	public void postProcessBeforeDestruction(Object bean, String beanName) {, +		Set<ScheduledTask> tasks = this.scheduledTasks.remove(bean);, +		if (tasks != null) {, +			for (ScheduledTask task : tasks) {, +				task.cancel();, +			}, +		}, +	}, +, +	@Override, +	public boolean requiresDestruction(Object bean) {, +		return this.scheduledTasks.containsKey(bean);, +	}, +, +	@Override, +		Collection<Set<ScheduledTask>> allTasks = this.scheduledTasks.values();, +		for (Set<ScheduledTask> tasks : allTasks) {, +			for (ScheduledTask task : tasks) {, +				task.cancel();, +			}, +		}, +		this.scheduledTasks.clear();, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTask.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.config;]