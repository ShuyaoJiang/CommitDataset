[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/PatternsRequestCondition.java, +	private final SortedSet<PathPattern> patterns;, +	public PatternsRequestCondition(PathPattern... patterns) {, +		this(Arrays.asList(patterns));, +	 * Creates a new instance with the given {@code Stream} of URL patterns., +	public PatternsRequestCondition(List<PathPattern> patterns) {, +		this(toSortedSet(patterns));, +	private static SortedSet<PathPattern> toSortedSet(Collection<PathPattern> patterns) {, +		TreeSet<PathPattern> sorted = new TreeSet<>(getPatternComparator());, +		sorted.addAll(patterns);, +		return sorted;, +	private PatternsRequestCondition(SortedSet<PathPattern> patterns) {, +		this.patterns = patterns;, +		return new PatternsRequestCondition(combined);, +				new PatternsRequestCondition(matches);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/PatternsRequestCondition.java, +	private final SortedSet<PathPattern> patterns;, +	public PatternsRequestCondition(PathPattern... patterns) {, +		this(Arrays.asList(patterns));, +	 * Creates a new instance with the given {@code Stream} of URL patterns., +	public PatternsRequestCondition(List<PathPattern> patterns) {, +		this(toSortedSet(patterns));, +	private static SortedSet<PathPattern> toSortedSet(Collection<PathPattern> patterns) {, +		TreeSet<PathPattern> sorted = new TreeSet<>(getPatternComparator());, +		sorted.addAll(patterns);, +		return sorted;, +	private PatternsRequestCondition(SortedSet<PathPattern> patterns) {, +		this.patterns = patterns;, +		return new PatternsRequestCondition(combined);, +				new PatternsRequestCondition(matches);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, +import java.util.Arrays;, +import java.util.List;, +import java.util.stream.Collectors;, +, +import org.springframework.web.util.pattern.PathPattern;, +			PathPatternParser parser = this.options.getPatternParser() != null ?, +					this.options.getPatternParser() : new PathPatternParser();, +			PatternsRequestCondition patternsCondition = new PatternsRequestCondition(parse(this.paths, parser));, +, +		private static List<PathPattern> parse(String[] paths, PathPatternParser parser) {, +			return Arrays, +					.stream(paths), +					.map(path -> {, +						if (StringUtils.hasText(path) && !path.startsWith("/")) {, +							path = "/" + path;, +						}, +						return parser.parse(path);, +					}), +					.collect(Collectors.toList());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/PatternsRequestCondition.java, +	private final SortedSet<PathPattern> patterns;, +	public PatternsRequestCondition(PathPattern... patterns) {, +		this(Arrays.asList(patterns));, +	 * Creates a new instance with the given {@code Stream} of URL patterns., +	public PatternsRequestCondition(List<PathPattern> patterns) {, +		this(toSortedSet(patterns));, +	private static SortedSet<PathPattern> toSortedSet(Collection<PathPattern> patterns) {, +		TreeSet<PathPattern> sorted = new TreeSet<>(getPatternComparator());, +		sorted.addAll(patterns);, +		return sorted;, +	private PatternsRequestCondition(SortedSet<PathPattern> patterns) {, +		this.patterns = patterns;, +		return new PatternsRequestCondition(combined);, +				new PatternsRequestCondition(matches);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, +import java.util.Arrays;, +import java.util.List;, +import java.util.stream.Collectors;, +, +import org.springframework.web.util.pattern.PathPattern;, +			PathPatternParser parser = this.options.getPatternParser() != null ?, +					this.options.getPatternParser() : new PathPatternParser();, +			PatternsRequestCondition patternsCondition = new PatternsRequestCondition(parse(this.paths, parser));, +, +		private static List<PathPattern> parse(String[] paths, PathPatternParser parser) {, +			return Arrays, +					.stream(paths), +					.map(path -> {, +						if (StringUtils.hasText(path) && !path.startsWith("/")) {, +							path = "/" + path;, +						}, +						return parser.parse(path);, +					}), +					.collect(Collectors.toList());, +		}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/PatternsRequestConditionTests.java, +import java.util.stream.Collectors;, +	private final PathPatternParser parser = new PathPatternParser();, +		PatternsRequestCondition c = createPatternsCondition("");, +		assertEquals(createPatternsCondition(), c1.combine(c2));, +		PatternsRequestCondition c1 = createPatternsCondition("/type1", "/type2");, +		assertEquals(createPatternsCondition("/type1", "/type2"), c1.combine(c2));, +		c2 = createPatternsCondition("/method1", "/method2");, +		assertEquals(createPatternsCondition("/method1", "/method2"), c1.combine(c2));, +		PatternsRequestCondition c1 = createPatternsCondition("/t1", "/t2");, +		PatternsRequestCondition c2 = createPatternsCondition("/m1", "/m2");, +		assertEquals(createPatternsCondition("/t1/m1", "/t1/m2", "/t2/m1", "/t2/m2"), c1.combine(c2));, +		PatternsRequestCondition condition = createPatternsCondition("/foo");]