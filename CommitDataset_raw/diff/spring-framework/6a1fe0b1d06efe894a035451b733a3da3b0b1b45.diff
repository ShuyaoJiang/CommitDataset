[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private volatile Method method;, +	 * Execute a function represented as a {@code java.lang.reflect.Method}., +		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method);, +		boolean compilable = false;, +			compilable = !argumentConversionOccurred;, +		finally {, +			if (compilable) {, +				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType());, +				this.method = method;, +			}, +			else {, +				this.exitTypeDescriptor = null;, +				this.method = null;, +			}, +		}, +		Method method = this.method;, +		if (method == null) {, +		int methodModifiers = method.getModifiers();, +				!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {, +		Method method = this.method;, +		Assert.state(method != null, "No method handle");, +		String classDesc = method.getDeclaringClass().getName().replace('.', '/');, +		generateCodeForArguments(mv, cf, method, this.children);, +		mv.visitMethodInsn(INVOKESTATIC, classDesc, method.getName(),, +				CodeFlow.createSignatureDescriptor(method), false);]