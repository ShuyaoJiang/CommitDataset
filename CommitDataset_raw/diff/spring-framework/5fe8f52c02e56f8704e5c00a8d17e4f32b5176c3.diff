[+++ b/build.gradle, +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0.0-RC10"), +++ b/build.gradle, +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:8.0.0-RC10"), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * @author Stephane Nicoll, +			Map<String, Object> candidates = new HashMap<String, Object>();, +				candidates.put(beanName, getBean(beanName, requiredType));, +			String primaryCandidate = determinePrimaryCandidate(candidates, requiredType);, +			if (primaryCandidate != null) {, +				return getBean(primaryCandidate, requiredType);, +			String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType);, +			if (priorityCandidate != null) {, +				return getBean(priorityCandidate, requiredType);, +			throw new NoUniqueBeanDefinitionException(requiredType, candidates.keySet());, +				String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);, +	 * Determine the autowire candidate in the given set of beans., +	 * <p>Looks for {@code @Primary} and {@code @Priority} (in that order)., +	 *, +	 * @return the name of the autowire candidate, or {@code null} if none found, +	protected String determineAutowireCandidate(Map<String, Object> candidateBeans,, +												DependencyDescriptor descriptor) {, +		Class<?> requiredType = descriptor.getDependencyType();, +		String primaryCandidate =, +				determinePrimaryCandidate(candidateBeans, requiredType);, +		if (primaryCandidate != null) {, +			return primaryCandidate;, +		}, +		String priorityCandidate =, +				determineHighestPriorityCandidate(candidateBeans, requiredType);, +		if (priorityCandidate != null) {, +			return priorityCandidate;, +		}, +		// Fallback, +		for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) {, +			String candidateBeanName = entry.getKey();, +			Object beanInstance = entry.getValue();, +			if (this.resolvableDependencies.values().contains(beanInstance) ||, +					matchesBeanName(candidateBeanName, descriptor.getDependencyName())) {, +				return candidateBeanName;, +			}, +		}, +		return null;, +	}, +, +	/**, +	 * Determine the primary candidate in the given set of beans., +	 *, +	 * @param candidateBeans a Map of candidate names and candidate instances, +	 * that match the required type, +	 * @param requiredType the target dependency type to match against, +	 * @return the name of the primary candidate, or {@code null} if none found, +	 * @see #isPrimary(String, Object), +	 */, +	protected String determinePrimaryCandidate(Map<String, Object> candidateBeans, Class<?> requiredType) {, +						throw new NoUniqueBeanDefinitionException(requiredType, candidateBeans.size(),, +		}, +		return primaryBeanName;, +	}, +, +	/**, +	 * Determine the candidate with the highest priority in the given set of beans., +	 *, +	 * @param candidateBeans a Map of candidate names and candidate instances, +	 * that match the required type, +	 * @param requiredType the target dependency type to match against, +	 * @return the name of the candidate with the highest priority, or {@code null} if none found, +	 * @see #getPriority(Object), +	 */, +	protected String determineHighestPriorityCandidate(Map<String, Object> candidateBeans,, +													   Class<?> requiredType) {, +		String highestPriorityBeanName = null;, +		Integer highestPriority = null;, +		for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) {, +			String candidateBeanName = entry.getKey();, +			Object beanInstance = entry.getValue();, +			Integer candidatePriority = getPriority(beanInstance);, +			if (candidatePriority != null) {, +				if (highestPriorityBeanName != null) {, +					if (candidatePriority.equals(highestPriority)) {, +						throw new NoUniqueBeanDefinitionException(requiredType, candidateBeans.size(),, +								"Multiple beans found with the same priority ('" + highestPriority + "') " +, +										"among candidates: " + candidateBeans.keySet());, +					} else if (candidatePriority > highestPriority) {, +						highestPriorityBeanName = candidateBeanName;, +						highestPriority = candidatePriority;, +					}, +				} else {, +					highestPriorityBeanName = candidateBeanName;, +					highestPriority = candidatePriority;, +		}, +		return highestPriorityBeanName;, +	 * Return the priority assigned for the given bean instance by, +	 * the {@code javax.annotation.Priority} annotation., +	 * <p>If the annotation is not present, returns {@code null}., +	 *, +	 * @param beanInstance the bean instance to check, +	 * @return the priority assigned to that bean or {@code null} if none is set, +	 */, +	protected Integer getPriority(Object beanInstance) {]