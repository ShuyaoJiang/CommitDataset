[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * <p>Compatible with Quartz 1.5+ as well as Quartz 2.0/2.1, as of Spring 3.1., +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * <p>Compatible with Quartz 1.5+ as well as Quartz 2.0/2.1, as of Spring 3.1., +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java, + * <p><code>CronTrigger</code> itself is already a JavaBean but lacks sensible defaults., + * Use Quartz 2.0's native <code>JobDetailImpl</code> class or the new Quartz 2.0, + * builder API instead. Alternatively, switch to Spring's {@link CronTriggerFactoryBean}, + * which largely is a drop-in replacement for this class and its properties and, + * consistently works against Quartz 1.x as well as Quartz 2.0/2.1., +, +	public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {, +	 * Set the start delay in milliseconds., +	 * <p>The start delay is added to the current system time (when the bean starts), +	 * to control the {@link #setStartTime start time} of the trigger., +	 * <p>If the start delay is non-zero, it will <strong>always</strong>, +	 * take precedence over start time., +	 * @param startDelay the start delay, in milliseconds, +	 */, +	public void setStartDelay(long startDelay) {, +		Assert.state(startDelay >= 0, "Start delay cannot be negative.");, +		this.startDelay = startDelay;, +	}, +, +	/**, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/AdaptableJobFactory.java, + * <p>Compatible with Quartz 1.5+ as well as Quartz 2.0/2.1, as of Spring 3.1., +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java, + * <p><code>CronTrigger</code> itself is already a JavaBean but lacks sensible defaults., + * Use Quartz 2.0's native <code>JobDetailImpl</code> class or the new Quartz 2.0, + * builder API instead. Alternatively, switch to Spring's {@link CronTriggerFactoryBean}, + * which largely is a drop-in replacement for this class and its properties and, + * consistently works against Quartz 1.x as well as Quartz 2.0/2.1., +, +	public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {, +	 * Set the start delay in milliseconds., +	 * <p>The start delay is added to the current system time (when the bean starts), +	 * to control the {@link #setStartTime start time} of the trigger., +	 * <p>If the start delay is non-zero, it will <strong>always</strong>, +	 * take precedence over start time., +	 * @param startDelay the start delay, in milliseconds, +	 */, +	public void setStartDelay(long startDelay) {, +		Assert.state(startDelay >= 0, "Start delay cannot be negative.");, +		this.startDelay = startDelay;, +	}, +, +	/**, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.quartz;, +, +import java.lang.reflect.Method;, +import java.util.Date;, +import java.util.Map;, +import java.util.TimeZone;, +, +import org.quartz.CronTrigger;, +import org.quartz.JobDataMap;, +import org.quartz.JobDetail;, +import org.quartz.Scheduler;, +, +import org.springframework.beans.BeanWrapper;, +import org.springframework.beans.BeanWrapperImpl;, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.beans.factory.BeanNameAware;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.Constants;, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * A Spring {@link FactoryBean} for creating a Quartz {@link org.quartz.CronTrigger}, + * instance, supporting bean-style usage for trigger configuration., + *, + * <p><code>CronTrigger(Impl)</code> itself is already a JavaBean but lacks sensible defaults., + * This class uses the Spring bean name as job name, the Quartz default group ("DEFAULT"), + * as job group, the current time as start time, and indefinite repetition, if not specified., + *, + * <p>This class will also register the trigger with the job name and group of, + * a given {@link org.quartz.JobDetail}. This allows {@link SchedulerFactoryBean}, + * to automatically register a trigger for the corresponding JobDetail,, + * instead of registering the JobDetail separately., + *]