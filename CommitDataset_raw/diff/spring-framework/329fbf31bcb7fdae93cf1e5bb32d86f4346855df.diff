[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		Assert.notNull(messageChannel, "messageChannel is required");, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		Assert.notNull(messageChannel, "messageChannel is required");, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.core.AbstractMessageSendingTemplate;, +import org.springframework.messaging.simp.SimpMessagingTemplate;, +	private final SimpMessageSendingOperations dispatchMessagingTemplate;, +	private final SimpMessageSendingOperations webSocketSessionMessagingTemplate;, +	 * @param dispatchMessagingTemplate a messaging template to dispatch messages to for, +	 *        further processing, e.g. the use of an {@link ReplyTo} annotation on a, +	 *        message handling method, causes a new (broadcast) message to be sent., +	 * @param webSocketSessionChannel the channel to send messages to WebSocket sessions, +	 *        on this application server. This is used primarily for processing the return, +	 *        values from {@link SubscribeEvent}-annotated methods., +	public AnnotationMethodMessageHandler(SimpMessageSendingOperations dispatchMessagingTemplate,, +			MessageChannel webSocketSessionChannel) {, +		Assert.notNull(dispatchMessagingTemplate, "dispatchMessagingTemplate is required");, +		Assert.notNull(webSocketSessionChannel, "webSocketSessionChannel is required");, +		this.dispatchMessagingTemplate = dispatchMessagingTemplate;, +		this.webSocketSessionMessagingTemplate = new SimpMessagingTemplate(webSocketSessionChannel);, +		if (converter != null) {, +			((AbstractMessageSendingTemplate<?>) this.webSocketSessionMessagingTemplate).setMessageConverter(converter);, +		}, +		this.returnValueHandlers.addHandler(new ReplyToMethodReturnValueHandler(this.dispatchMessagingTemplate));, +		this.returnValueHandlers.addHandler(new SubscriptionMethodReturnValueHandler(this.webSocketSessionMessagingTemplate));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		Assert.notNull(messageChannel, "messageChannel is required");, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.core.AbstractMessageSendingTemplate;, +import org.springframework.messaging.simp.SimpMessagingTemplate;, +	private final SimpMessageSendingOperations dispatchMessagingTemplate;, +	private final SimpMessageSendingOperations webSocketSessionMessagingTemplate;, +	 * @param dispatchMessagingTemplate a messaging template to dispatch messages to for, +	 *        further processing, e.g. the use of an {@link ReplyTo} annotation on a, +	 *        message handling method, causes a new (broadcast) message to be sent., +	 * @param webSocketSessionChannel the channel to send messages to WebSocket sessions, +	 *        on this application server. This is used primarily for processing the return, +	 *        values from {@link SubscribeEvent}-annotated methods., +	public AnnotationMethodMessageHandler(SimpMessageSendingOperations dispatchMessagingTemplate,, +			MessageChannel webSocketSessionChannel) {, +		Assert.notNull(dispatchMessagingTemplate, "dispatchMessagingTemplate is required");, +		Assert.notNull(webSocketSessionChannel, "webSocketSessionChannel is required");, +		this.dispatchMessagingTemplate = dispatchMessagingTemplate;, +		this.webSocketSessionMessagingTemplate = new SimpMessagingTemplate(webSocketSessionChannel);, +		if (converter != null) {, +			((AbstractMessageSendingTemplate<?>) this.webSocketSessionMessagingTemplate).setMessageConverter(converter);, +		}, +		this.returnValueHandlers.addHandler(new ReplyToMethodReturnValueHandler(this.dispatchMessagingTemplate));, +		this.returnValueHandlers.addHandler(new SubscriptionMethodReturnValueHandler(this.webSocketSessionMessagingTemplate));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultSubscriptionRegistry.java, +import reactor.util.Assert;, +, +	@Override, +	public String toString() {, +		return "[destinationCache=" + this.destinationCache + ", subscriptionRegistry=", +				+ this.subscriptionRegistry + "]";, +	}, +, +, +, +			synchronized(this.monitor) {, +			synchronized(this.monitor) {, +, +		@Override, +		public String toString() {, +			return "[subscriptionsByDestination=" + this.subscriptionsByDestination + "]";, +		}, +		private final Object monitor = new Object();, +, +				synchronized(this.monitor) {, +					info = this.sessions.get(sessionId);, +					if (info == null) {, +				}, +			}, +			info.addSubscription(destination, subscriptionId);, +, +		@Override, +		public String toString() {, +			return "[sessions=" + sessions + "]";, +		}, +		private final Map<String, Set<String>> subscriptions = new ConcurrentHashMap<String, Set<String>>(4);, +, +		private final Object monitor = new Object();, +			Assert.notNull(sessionId, "sessionId is required");, +		public void addSubscription(String destination, String subscriptionId) {, +			synchronized(this.monitor) {, +		}, +					synchronized(this.monitor) {, +					}, +, +		@Override]