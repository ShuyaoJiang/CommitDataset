[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +import static org.junit.Assert.*;, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition;, +, +import java.util.List;, +import java.util.Map;, +import java.util.Properties;, +import java.util.Set;, +import java.util.prefs.Preferences;, +, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.beans.IndexedTestBean;, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.BeanInitializationException;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.support.ChildBeanDefinition;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.beans.factory.support.ManagedMap;, +import org.springframework.beans.factory.support.ManagedSet;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +, +/**, + * Unit tests for various {@link PropertyResourceConfigurer} implementations including:, + * {@link PropertyPlaceholderConfigurer}, {@link PropertyOverrideConfigurer} and, + * {@link PreferencesPlaceholderConfigurer}., + * , + * @since 02.10.2003, + * @author Juergen Hoeller, + * @author Chris Beams, + */, +public class PropertyResourceConfigurerTests {, +	, +	private DefaultListableBeanFactory factory;, +	, +	@Before, +	public void setUp() {, +		factory = new DefaultListableBeanFactory();, +	}, +, +	@Test, +	public void testPropertyOverrideConfigurer() {, +		BeanDefinition def1 = BeanDefinitionBuilder, +			.genericBeanDefinition(TestBean.class), +			.getBeanDefinition();, +		factory.registerBeanDefinition("tb1", def1);, +		, +		BeanDefinition def2 = BeanDefinitionBuilder, +			.genericBeanDefinition(TestBean.class), +			.getBeanDefinition();, +		factory.registerBeanDefinition("tb2", def2);, +		, +		PropertyOverrideConfigurer poc1;, +		PropertyOverrideConfigurer poc2;, +		, +		{, +			poc1 = new PropertyOverrideConfigurer();, +			Properties props = new Properties();, +			props.setProperty("tb1.age", "99");, +			props.setProperty("tb2.name", "test");, +			poc1.setProperties(props);, +		}, +		, +		{, +			poc2 = new PropertyOverrideConfigurer();, +			Properties props = new Properties();, +			props.setProperty("tb2.age", "99");, +			props.setProperty("tb2.name", "test2");, +			poc2.setProperties(props);, +		}, +		, +		// emulate what happens when BFPPs are added to an application context: It's LIFO-based, +		poc2.postProcessBeanFactory(factory);, +		poc1.postProcessBeanFactory(factory);, +		, +		TestBean tb1 = (TestBean) factory.getBean("tb1");]