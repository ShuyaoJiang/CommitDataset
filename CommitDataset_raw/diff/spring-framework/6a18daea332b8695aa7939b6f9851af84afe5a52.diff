[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.converter.*;, +import java.util.ArrayList;, +import java.util.List;, +, +	public AbstractSubscribableChannel webSocketRequestChannel() {, +	public AbstractSubscribableChannel webSocketResponseChannel() {, +	public AbstractSubscribableChannel brokerChannel() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.converter.*;, +import java.util.ArrayList;, +import java.util.List;, +, +	public AbstractSubscribableChannel webSocketRequestChannel() {, +	public AbstractSubscribableChannel webSocketResponseChannel() {, +	public AbstractSubscribableChannel brokerChannel() {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupportTests.java, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.channel.ExecutorSubscribableChannel;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +		TestChannel channel = this.cxtSimpleBroker.getBean("webSocketRequestChannel", TestChannel.class);, +		List<MessageHandler> handlers = channel.handlers;, +		assertEquals(3, handlers.size());, +		assertTrue(handlers.contains(cxtSimpleBroker.getBean(SimpAnnotationMethodMessageHandler.class)));, +		assertTrue(handlers.contains(cxtSimpleBroker.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(cxtSimpleBroker.getBean(SimpleBrokerMessageHandler.class)));, +		TestChannel channel = this.cxtStompBroker.getBean("webSocketRequestChannel", TestChannel.class);, +		List<MessageHandler> values = channel.handlers;, +		TestChannel channel = this.cxtSimpleBroker.getBean("webSocketRequestChannel", TestChannel.class);, +		Message<?> message = channel.messages.get(0);, +		TestChannel channel = this.cxtSimpleBroker.getBean("webSocketResponseChannel", TestChannel.class);, +		List<MessageHandler> values = channel.handlers;, +, +		assertEquals(1, values.size());, +		assertTrue(values.get(0) instanceof SubProtocolWebSocketHandler);, +		TestChannel channel = this.cxtSimpleBroker.getBean("webSocketResponseChannel", TestChannel.class);, +		message = channel.messages.get(0);, +		TestChannel channel = this.cxtSimpleBroker.getBean("webSocketResponseChannel", TestChannel.class);, +		message = channel.messages.get(0);, +		TestChannel channel = this.cxtSimpleBroker.getBean("brokerChannel", TestChannel.class);, +		List<MessageHandler> handlers = channel.handlers;, +		assertEquals(2, handlers.size());, +		assertTrue(handlers.contains(cxtSimpleBroker.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(cxtSimpleBroker.getBean(SimpleBrokerMessageHandler.class)));, +		TestChannel channel = this.cxtStompBroker.getBean("brokerChannel", TestChannel.class);, +		List<MessageHandler> handlers = channel.handlers;, +		assertEquals(2, handlers.size());, +		assertTrue(handlers.contains(cxtStompBroker.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(cxtStompBroker.getBean(StompBrokerRelayMessageHandler.class)));, +		TestChannel channel = this.cxtSimpleBroker.getBean("brokerChannel", TestChannel.class);, +		message = channel.messages.get(0);, +		TestChannel channel = this.cxtSimpleBroker.getBean("brokerChannel", TestChannel.class);, +		message = channel.messages.get(0);, +		public AbstractSubscribableChannel webSocketRequestChannel() {, +			return new TestChannel();, +		public AbstractSubscribableChannel webSocketResponseChannel() {, +			return new TestChannel();, +		public AbstractSubscribableChannel brokerChannel() {, +			return new TestChannel();, +		}, +	}, +, +	private static class TestChannel extends ExecutorSubscribableChannel {, +, +		private final List<MessageHandler> handlers = new ArrayList<>();, +, +		private final List<Message<?>> messages = new ArrayList<>();, +, +, +		@Override, +		public boolean subscribeInternal(MessageHandler handler) {, +			this.handlers.add(handler);, +			return super.subscribeInternal(handler);, +		}, +, +		@Override, +		public boolean sendInternal(Message<?> message, long timeout) {, +			this.messages.add(message);, +			return true;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.converter.*;, +import java.util.ArrayList;, +import java.util.List;, +, +	public AbstractSubscribableChannel webSocketRequestChannel() {, +	public AbstractSubscribableChannel webSocketResponseChannel() {, +	public AbstractSubscribableChannel brokerChannel() {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupportTests.java, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.channel.ExecutorSubscribableChannel;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +]