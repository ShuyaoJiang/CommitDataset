[+++ b/spring-test/src/main/java/org/springframework/test/util/AopTestUtils.java, + * Copyright 2002-2016 the original author or authors., + * @see ReflectionTestUtils, +++ b/spring-test/src/main/java/org/springframework/test/util/AopTestUtils.java, + * Copyright 2002-2016 the original author or authors., + * @see ReflectionTestUtils, +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, + * Copyright 2002-2016 the original author or authors., + * @see AopTestUtils, +++ b/spring-test/src/main/java/org/springframework/test/util/AopTestUtils.java, + * Copyright 2002-2016 the original author or authors., + * @see ReflectionTestUtils, +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, + * Copyright 2002-2016 the original author or authors., + * @see AopTestUtils, +++ b/spring-test/src/test/java/org/springframework/test/util/ReflectionTestUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +	public void setFieldAndGetFieldOnCglibProxiedInstance() throws Exception {, +		ProxyFactory pf = new ProxyFactory(this.person);, +		pf.setProxyTargetClass(true);, +		Person proxyPerson = (Person) pf.getProxy();, +, +		// Set reflectively via Proxy, +		setField(proxyPerson, "id", new Long(99), long.class);, +		setField(proxyPerson, "name", "Tom");, +		setField(proxyPerson, "age", new Integer(42));, +		setField(proxyPerson, "eyeColor", "blue", String.class);, +		setField(proxyPerson, "likesPets", Boolean.TRUE);, +		setField(proxyPerson, "favoriteNumber", PI, Number.class);, +, +		// Get directly from Target via getter methods, +		assertEquals("ID (private field in a superclass)", 99, this.person.getId());, +		assertEquals("name (protected field)", "Tom", this.person.getName());, +		assertEquals("age (private field)", 42, this.person.getAge());, +		assertEquals("eye color (package private field)", "blue", this.person.getEyeColor());, +		assertEquals("'likes pets' flag (package private boolean field)", true, this.person.likesPets());, +		assertEquals("'favorite number' (package field)", PI, this.person.getFavoriteNumber());, +, +		// Get reflectively via Proxy, +		assertEquals(new Long(99), getField(proxyPerson, "id"));, +		assertEquals("Tom", getField(proxyPerson, "name"));, +		assertEquals(new Integer(42), getField(proxyPerson, "age"));, +		assertEquals("blue", getField(proxyPerson, "eyeColor"));, +		assertEquals(Boolean.TRUE, getField(proxyPerson, "likesPets"));, +		assertEquals(PI, getField(proxyPerson, "favoriteNumber"));, +	}, +, +	@Test]