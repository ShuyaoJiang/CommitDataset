[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +import java.util.stream.Collectors;, +	 * Parse the comma-separated string into a list of {@code MimeType} objects., +	 * @throws InvalidMimeTypeException if the string cannot be parsed, +		return tokenize(mimeTypes).stream(), +				.map(MimeTypeUtils::parseMimeType).collect(Collectors.toList());, +, +	/**, +	 * Tokenize the given comma-separated string of {@code MimeType} objects, +	 * into a {@code List<String>}. Unlike simple tokenization by ",", this, +	 * method takes into account quoted parameters., +	 * @param mimeTypes the string to tokenize, +	 * @return the list of tokens, +	 * @since 5.1.3, +	 */, +	public static List<String> tokenize(String mimeTypes) {, +		if (!StringUtils.hasLength(mimeTypes)) {, +			return Collections.emptyList();, +		List<String> tokens = new ArrayList<>();, +		boolean inQuotes = false;, +		int startIndex = 0;, +		int i = 0;, +		while (i < mimeTypes.length()) {, +			switch (mimeTypes.charAt(i)) {, +				case '"':, +					inQuotes = !inQuotes;, +					break;, +				case ',':, +					if (!inQuotes) {, +						tokens.add(mimeTypes.substring(startIndex, i));, +						startIndex = i + 1;, +					}, +					break;, +				case '\\':, +					i++;, +					break;, +			}, +			i++;, +		}, +		tokens.add(mimeTypes.substring(startIndex));, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +import java.util.stream.Collectors;, +	 * Parse the comma-separated string into a list of {@code MimeType} objects., +	 * @throws InvalidMimeTypeException if the string cannot be parsed, +		return tokenize(mimeTypes).stream(), +				.map(MimeTypeUtils::parseMimeType).collect(Collectors.toList());, +, +	/**, +	 * Tokenize the given comma-separated string of {@code MimeType} objects, +	 * into a {@code List<String>}. Unlike simple tokenization by ",", this, +	 * method takes into account quoted parameters., +	 * @param mimeTypes the string to tokenize, +	 * @return the list of tokens, +	 * @since 5.1.3, +	 */, +	public static List<String> tokenize(String mimeTypes) {, +		if (!StringUtils.hasLength(mimeTypes)) {, +			return Collections.emptyList();, +		List<String> tokens = new ArrayList<>();, +		boolean inQuotes = false;, +		int startIndex = 0;, +		int i = 0;, +		while (i < mimeTypes.length()) {, +			switch (mimeTypes.charAt(i)) {, +				case '"':, +					inQuotes = !inQuotes;, +					break;, +				case ',':, +					if (!inQuotes) {, +						tokens.add(mimeTypes.substring(startIndex, i));, +						startIndex = i + 1;, +					}, +					break;, +				case '\\':, +					i++;, +					break;, +			}, +			i++;, +		}, +		tokens.add(mimeTypes.substring(startIndex));, +++ b/spring-core/src/test/java/org/springframework/util/MimeTypeTests.java, +	@Test // SPR-17459, +	public void parseMimeTypesWithQuotedParameters() {, +		testWithQuotedParameters("foo/bar;param=\",\"");, +		testWithQuotedParameters("foo/bar;param=\"s,a,\"");, +		testWithQuotedParameters("foo/bar;param=\"s,\"", "text/x-c");, +		testWithQuotedParameters("foo/bar;param=\"a\\\"b,c\"");, +		testWithQuotedParameters("foo/bar;param=\"\\\\\"");, +		testWithQuotedParameters("foo/bar;param=\"\\,\\\"");, +	private void testWithQuotedParameters(String... mimeTypes) {, +		String s = String.join(",", mimeTypes);, +		List<MimeType> actual = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals(mimeTypes.length, actual.size());, +		for (int i=0; i < mimeTypes.length; i++) {, +			assertEquals(mimeTypes[i], actual.get(i).toString());, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +import java.util.stream.Collectors;, +	 * Parse the comma-separated string into a list of {@code MimeType} objects., +	 * @throws InvalidMimeTypeException if the string cannot be parsed, +		return tokenize(mimeTypes).stream()]