[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	 * Set a custom ArgumentResolvers to use for special method parameter types., +	 * <p>Such a custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +	 * Set one or more custom ArgumentResolvers to use for special method parameter types., +	 * <p>Any such custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +			return new ModelAndView();, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	 * Set a custom ArgumentResolvers to use for special method parameter types., +	 * <p>Such a custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +	 * Set one or more custom ArgumentResolvers to use for special method parameter types., +	 * <p>Any such custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +			return new ModelAndView();, +++ b/org.springframework.web.portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, +		actionRequest = new MockActionRequest("error");, +		actionResponse = new MockActionResponse();, +		portlet.processAction(actionRequest, actionResponse);, +, +		request = new MockRenderRequest(PortletMode.VIEW, WindowState.MAXIMIZED);, +		request.setParameters(actionResponse.getRenderParameterMap());, +		request.setSession(actionRequest.getPortletSession());, +		response = new MockRenderResponse();, +		portlet.render(request, response);, +		assertEquals("XXX", response.getContentAsString());, +, +		@ActionMapping("error"), +		public void myError(StateAwareResponse response) {, +			throw new IllegalStateException("XXX");, +		}, +, +		@ExceptionHandler, +		public void handleException(Exception ex, Writer writer) throws IOException {, +			writer.write(ex.getMessage());, +		}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	 * Set a custom ArgumentResolvers to use for special method parameter types., +	 * <p>Such a custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +	 * Set one or more custom ArgumentResolvers to use for special method parameter types., +	 * <p>Any such custom ArgumentResolver will kick in first, having a chance to resolve, +	 * an argument value before the standard argument handling kicks in., +			return new ModelAndView();, +++ b/org.springframework.web.portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, +		actionRequest = new MockActionRequest("error");, +		actionResponse = new MockActionResponse();, +		portlet.processAction(actionRequest, actionResponse);, +, +		request = new MockRenderRequest(PortletMode.VIEW, WindowState.MAXIMIZED);, +		request.setParameters(actionResponse.getRenderParameterMap());, +		request.setSession(actionRequest.getPortletSession());, +		response = new MockRenderResponse();, +		portlet.render(request, response);, +		assertEquals("XXX", response.getContentAsString());, +, +		@ActionMapping("error"), +		public void myError(StateAwareResponse response) {, +			throw new IllegalStateException("XXX");, +		}, +, +		@ExceptionHandler, +		public void handleException(Exception ex, Writer writer) throws IOException {, +			writer.write(ex.getMessage());, +		}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.bind.annotation.ExceptionHandler;, +			throw new IllegalStateException("test");, +, +		@ExceptionHandler, +		public void myPath2(Exception ex, HttpServletResponse response) throws IOException {, +			response.getWriter().write(ex.getMessage());, +		}]