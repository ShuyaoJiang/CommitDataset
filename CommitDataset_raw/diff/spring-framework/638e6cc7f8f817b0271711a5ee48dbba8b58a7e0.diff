[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +import java.time.Instant;, +import java.util.Arrays;, +import org.springframework.http.HttpMethod;, +	private static final List<HttpMethod> SAFE_METHODS = Arrays.asList(HttpMethod.GET, HttpMethod.HEAD);, +, +			String etag = entityHeaders.getETag();, +			Instant lastModified = Instant.ofEpochMilli(entityHeaders.getLastModified());, +			HttpMethod httpMethod = exchange.getRequest().getMethod();, +			if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(etag, lastModified)) {, +				exchange.getResponse().setComplete();, +				return Mono.empty();, +			}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +import java.time.Instant;, +import java.util.Arrays;, +import org.springframework.http.HttpMethod;, +	private static final List<HttpMethod> SAFE_METHODS = Arrays.asList(HttpMethod.GET, HttpMethod.HEAD);, +, +			String etag = entityHeaders.getETag();, +			Instant lastModified = Instant.ofEpochMilli(entityHeaders.getLastModified());, +			HttpMethod httpMethod = exchange.getRequest().getMethod();, +			if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(etag, lastModified)) {, +				exchange.getResponse().setComplete();, +				return Mono.empty();, +			}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +import java.time.Instant;, +import java.time.temporal.ChronoUnit;, +import org.springframework.http.HttpHeaders;, +import org.springframework.web.server.session.WebSessionManager;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +import static org.springframework.http.ResponseEntity.ok;, +	private MockServerHttpRequest request;, +, +		this.request = new MockServerHttpRequest(HttpMethod.GET, new URI("/path"));, +		WebSessionManager manager = new MockWebSessionManager();, +		this.exchange = new DefaultServerWebExchange(this.request, this.response, manager);, +		Object returnValue = ok("abc");, +		returnValue = Mono.just(ok("abc"));, +		returnValue = Mono.just(ok("abc"));, +		returnValue = Mono.just(ok("abc"));, +	@Test, +	public void handleReturnValueLastModified() throws Exception {, +		Instant currentTime = Instant.now().truncatedTo(ChronoUnit.SECONDS);, +		Instant oneMinAgo  = currentTime.minusSeconds(60);, +		this.request.getHeaders().setIfModifiedSince(currentTime.toEpochMilli());, +, +		ResponseEntity<String> entity = ok().lastModified(oneMinAgo.toEpochMilli()).body("body");, +		HandlerResult result = handlerResult(entity, responseEntity(String.class));, +		this.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, null, oneMinAgo);, +	}, +, +	@Test, +	public void handleReturnValueEtag() throws Exception {, +		String etagValue = "\"deadb33f8badf00d\"";, +		this.request.getHeaders().setIfNoneMatch(etagValue);, +, +		ResponseEntity<String> entity = ok().eTag(etagValue).body("body");, +		HandlerResult result = handlerResult(entity, responseEntity(String.class));, +		this.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, Instant.MIN);, +	}, +, +	@Test // SPR-14559, +	public void handleReturnValueEtagInvalidIfNoneMatch() throws Exception {, +		this.request.getHeaders().setIfNoneMatch("unquoted");, +, +		ResponseEntity<String> entity = ok().eTag("\"deadb33f8badf00d\"").body("body");, +		HandlerResult result = handlerResult(entity, responseEntity(String.class));, +		this.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +, +		assertEquals(HttpStatus.OK, this.response.getStatusCode());, +		assertResponseBody("body");, +	}, +, +	@Test, +	public void handleReturnValueETagAndLastModified() throws Exception {, +		String eTag = "\"deadb33f8badf00d\"";, +		this.request.getHeaders().setIfNoneMatch(eTag);, +, +		Instant currentTime = Instant.now().truncatedTo(ChronoUnit.SECONDS);, +		Instant oneMinAgo  = currentTime.minusSeconds(60);, +		this.request.getHeaders().setIfModifiedSince(currentTime.toEpochMilli());, +, +		ResponseEntity<String> entity = ok().eTag(eTag).lastModified(oneMinAgo.toEpochMilli()).body("body");, +		HandlerResult result = handlerResult(entity, responseEntity(String.class));, +		this.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));, +, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, eTag, oneMinAgo);, +	}]