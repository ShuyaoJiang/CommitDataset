[+++ b/spring-web-reactive/build.gradle, +	maven { url 'https://oss.jfrog.org/libs-snapshot' }  // RxNetty 0.5.x snapshots, +	optional "io.reactivex:rxnetty:0.5.0-SNAPSHOT", +	optional "io.reactivex:rxjava-reactive-streams:1.0.1", +, +++ b/spring-web-reactive/build.gradle, +	maven { url 'https://oss.jfrog.org/libs-snapshot' }  // RxNetty 0.5.x snapshots, +	optional "io.reactivex:rxnetty:0.5.0-SNAPSHOT", +	optional "io.reactivex:rxjava-reactive-streams:1.0.1", +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/rxnetty/RequestHandlerAdapter.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.reactive.web.rxnetty;, +, +import io.netty.buffer.ByteBuf;, +import io.reactivex.netty.protocol.http.server.HttpServerRequest;, +import io.reactivex.netty.protocol.http.server.HttpServerResponse;, +import io.reactivex.netty.protocol.http.server.RequestHandler;, +import org.reactivestreams.Publisher;, +import rx.Observable;, +import rx.RxReactiveStreams;, +, +import org.springframework.reactive.web.HttpHandler;, +import org.springframework.util.Assert;, +, +/**, + * @author Rossen Stoyanchev, + */, +public class RequestHandlerAdapter implements RequestHandler<ByteBuf, ByteBuf> {, +, +	private final HttpHandler httpHandler;, +, +, +	public RequestHandlerAdapter(HttpHandler httpHandler) {, +		Assert.notNull(httpHandler, "'httpHandler' is required.");, +		this.httpHandler = httpHandler;, +	}, +, +	@Override, +	public Observable<Void> handle(HttpServerRequest<ByteBuf> request, HttpServerResponse<ByteBuf> response) {, +		RxNettyServerHttpRequest adaptedRequest = new RxNettyServerHttpRequest(request);, +		RxNettyServerHttpResponse adaptedResponse = new RxNettyServerHttpResponse(response);, +		Publisher<Void> result = this.httpHandler.handle(adaptedRequest, adaptedResponse);, +		return RxReactiveStreams.toObservable(result);, +	}, +, +}, +++ b/spring-web-reactive/build.gradle, +	maven { url 'https://oss.jfrog.org/libs-snapshot' }  // RxNetty 0.5.x snapshots, +	optional "io.reactivex:rxnetty:0.5.0-SNAPSHOT", +	optional "io.reactivex:rxjava-reactive-streams:1.0.1", +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/rxnetty/RequestHandlerAdapter.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.reactive.web.rxnetty;, +, +import io.netty.buffer.ByteBuf;, +import io.reactivex.netty.protocol.http.server.HttpServerRequest;, +import io.reactivex.netty.protocol.http.server.HttpServerResponse;, +import io.reactivex.netty.protocol.http.server.RequestHandler;, +import org.reactivestreams.Publisher;, +import rx.Observable;, +import rx.RxReactiveStreams;, +, +import org.springframework.reactive.web.HttpHandler;, +import org.springframework.util.Assert;, +, +/**, + * @author Rossen Stoyanchev, + */, +public class RequestHandlerAdapter implements RequestHandler<ByteBuf, ByteBuf> {, +]