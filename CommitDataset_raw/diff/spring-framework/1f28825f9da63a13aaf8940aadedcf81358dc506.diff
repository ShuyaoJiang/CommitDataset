[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.lang.Nullable;, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.lang.Nullable;, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		public SimplePropertyDescriptor(String propertyName, @Nullable Method readMethod, Method writeMethod) throws IntrospectionException {, +		public SimpleIndexedPropertyDescriptor(String propertyName, @Nullable Method readMethod, @Nullable Method writeMethod,, +				@Nullable Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.lang.Nullable;, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		public SimplePropertyDescriptor(String propertyName, @Nullable Method readMethod, Method writeMethod) throws IntrospectionException {, +		public SimpleIndexedPropertyDescriptor(String propertyName, @Nullable Method readMethod, @Nullable Method writeMethod,, +				@Nullable Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	public <T> T convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue,, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.lang.Nullable;, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		public SimplePropertyDescriptor(String propertyName, @Nullable Method readMethod, Method writeMethod) throws IntrospectionException {, +		public SimpleIndexedPropertyDescriptor(String propertyName, @Nullable Method readMethod, @Nullable Method writeMethod,, +				@Nullable Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	public <T> T convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException;, +			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException;, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.lang.Nullable;, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		public SimplePropertyDescriptor(String propertyName, @Nullable Method readMethod, Method writeMethod) throws IntrospectionException {, +		public SimpleIndexedPropertyDescriptor(String propertyName, @Nullable Method readMethod, @Nullable Method writeMethod,, +				@Nullable Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	public <T> T convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException;, +			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java, +	public BeanExpressionContext(ConfigurableBeanFactory beanFactory, @Nullable Scope scope) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	public void setWrappedInstance(Object object, String nestedPath, @Nullable Object rootObject) {, +	private Object convertIfNecessary(@Nullable String propertyName, @Nullable Object oldValue, Object newValue, Class<?> requiredType,, +	protected Object convertForProperty(String propertyName, @Nullable Object oldValue, Object newValue, TypeDescriptor td), +	private Object newValue(Class<?> type, @Nullable TypeDescriptor desc, String name) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static void copyProperties(Object source, Object target, @Nullable Class<?> editable, String... ignoreProperties), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java]