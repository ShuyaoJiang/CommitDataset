[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, + * Annotation indicating that a method (or all methods on a class) triggers a, + * {@link org.springframework.cache.Cache#evict(Object) cache evict} operation., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key,, +	 * unless a custom {@link #keyGenerator} has been set., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, + * Annotation indicating that a method (or all methods on a class) triggers a, + * {@link org.springframework.cache.Cache#evict(Object) cache evict} operation., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key,, +	 * unless a custom {@link #keyGenerator} has been set., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * Annotation indicating that a method (or all methods on a class) triggers a, + * {@link org.springframework.cache.Cache#put(Object, Object) cache put} operation., + * method to be invoked and its result to be stored in the associated cache., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key,, +	 * unless a custom {@link #keyGenerator} has been set., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, + * Annotation indicating that a method (or all methods on a class) triggers a, + * {@link org.springframework.cache.Cache#evict(Object) cache evict} operation., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key,, +	 * unless a custom {@link #keyGenerator} has been set., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * Annotation indicating that a method (or all methods on a class) triggers a, + * {@link org.springframework.cache.Cache#put(Object, Object) cache put} operation., + * method to be invoked and its result to be stored in the associated cache., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key,, +	 * unless a custom {@link #keyGenerator} has been set., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java, + * checking whether the method has been already invoked for the given arguments., + * A sensible default simply uses the method parameters to compute the key, but, + * a SpEL expression can be provided via the {@link #key} attribute, or a custom, + * {@link org.springframework.cache.interceptor.KeyGenerator} implementation can, + * replace the default one (see {@link #keyGenerator})., + * <p>If no value is found in the cache for the computed key, the target method, + * will be invoked and the returned value stored in the associated cache., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}, +	 * to use., +	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}, +	 * to use.]