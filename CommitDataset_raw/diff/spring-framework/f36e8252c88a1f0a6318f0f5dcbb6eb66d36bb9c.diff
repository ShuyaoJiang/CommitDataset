[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +, +		Map<String, MappedInterceptor> mappedInterceptors = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				getApplicationContext(), MappedInterceptor.class, true, false);, +			this.mappedInterceptors = new MappedInterceptors(mappedInterceptors.values().toArray(, +					new MappedInterceptor[mappedInterceptors.size()]));, +		if (handler != null && this.mappedInterceptors != null) {, +			Set<HandlerInterceptor> mappedInterceptors =, +					this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +, +		Map<String, MappedInterceptor> mappedInterceptors = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				getApplicationContext(), MappedInterceptor.class, true, false);, +			this.mappedInterceptors = new MappedInterceptors(mappedInterceptors.values().toArray(, +					new MappedInterceptor[mappedInterceptors.size()]));, +		if (handler != null && this.mappedInterceptors != null) {, +			Set<HandlerInterceptor> mappedInterceptors =, +					this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +, + *, +, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +, +		return this.pathPatterns;, +		return this.interceptor;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +, +		Map<String, MappedInterceptor> mappedInterceptors = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				getApplicationContext(), MappedInterceptor.class, true, false);, +			this.mappedInterceptors = new MappedInterceptors(mappedInterceptors.values().toArray(, +					new MappedInterceptor[mappedInterceptors.size()]));, +		if (handler != null && this.mappedInterceptors != null) {, +			Set<HandlerInterceptor> mappedInterceptors =, +					this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +, + *, +, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +, +		return this.pathPatterns;, +		return this.interceptor;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractCheckedElementTag.java, + * Copyright 2002-2009 the original author or authors., +		if (boundValue) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +, +		Map<String, MappedInterceptor> mappedInterceptors = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				getApplicationContext(), MappedInterceptor.class, true, false);, +			this.mappedInterceptors = new MappedInterceptors(mappedInterceptors.values().toArray(, +					new MappedInterceptor[mappedInterceptors.size()]));, +		if (handler != null && this.mappedInterceptors != null) {, +			Set<HandlerInterceptor> mappedInterceptors =, +					this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +, + *, +, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +	 * Create a new mapped interceptor., +	 * @param pathPatterns the path patterns, +, +		return this.pathPatterns;, +		return this.interceptor;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractCheckedElementTag.java, + * Copyright 2002-2009 the original author or authors., +		if (boundValue) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractMultiCheckedElementTag.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Get the name of the property mapped to the '<code>value</code>' attribute, +	 * of the '<code>input type="checkbox/radio"</code>' tag., +	 */, +	 * Set the value to be displayed as part of the, +	 * '<code>input type="checkbox/radio"</code>' tag., +	 * Get the value to be displayed as part of the, +	 * '<code>input type="checkbox/radio"</code>' tag., +		Object itemsObject = (items instanceof String ? evaluate("items", items) : items);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +, +		Map<String, MappedInterceptor> mappedInterceptors = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				getApplicationContext(), MappedInterceptor.class, true, false);, +			this.mappedInterceptors = new MappedInterceptors(mappedInterceptors.values().toArray(, +					new MappedInterceptor[mappedInterceptors.size()]));, +		if (handler != null && this.mappedInterceptors != null) {, +			Set<HandlerInterceptor> mappedInterceptors =, +					this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);, +]