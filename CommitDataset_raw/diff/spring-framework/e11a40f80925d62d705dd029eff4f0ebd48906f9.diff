[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomEditorConfigurer.java, + * <p>, + * In case you want to register {@link PropertyEditor} instances, the, + * recommended usage as of Spring 2.0 is to use custom, + * {@link PropertyEditorRegistrar} implementations that in turn register any, + * desired editor instances on a given, + * {@link org.springframework.beans.PropertyEditorRegistry registry}. Each, + * PropertyEditorRegistrar can register any number of custom editors., + * &lt;/bean&gt;, + * </pre>, + * <p>, + * It's perfectly fine to register {@link PropertyEditor} <em>classes</em> via, + * the {@code customEditors} property. Spring will create fresh instances of, + * them for each editing attempt then:, + * &lt;/bean&gt;, + * </pre>, + * <p>, + * Note, that you shouldn't register {@link PropertyEditor} bean instances via, + * the {@code customEditors} property as {@link PropertyEditor}s are stateful, + * and the instances will then have to be synchronized for every editing, + * attempt. In case you need control over the instantiation process of, + * {@link PropertyEditor}s, use a {@link PropertyEditorRegistrar} to register, + * them., + * , + * <p>, + * Also supports "java.lang.String[]"-style array class names and primitive]