[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +							SqlReturnResultSet undeclaredRsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +							SqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +							SqlReturnResultSet undeclaredRsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +							SqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java, +import java.util.Collections;, +import java.util.function.BiFunction;, +	public Mono<ServerResponse> build() {, +		return build((exchange, handlerStrategies) -> exchange.getResponse().setComplete());, +	public Mono<ServerResponse> build(Publisher<Void> voidPublisher) {, +		return build((exchange, handlerStrategies) ->, +				Mono.from(voidPublisher).then(exchange.getResponse().setComplete()));, +	public Mono<ServerResponse> build(, +			BiFunction<ServerWebExchange, HandlerStrategies, Mono<Void>> writeFunction) {, +, +		Assert.notNull(writeFunction, "'writeFunction' must not be null");, +		return Mono.just(new WriterFunctionServerResponse(this.statusCode, this.headers,, +				writeFunction));, +	public <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher,, +			Class<T> elementClass) {, +	public <T> Mono<ServerResponse> body(BodyInserter<T, ? super ServerHttpResponse> inserter) {, +		Assert.notNull(inserter, "'inserter' must not be null");, +		return Mono, +				.just(new BodyInserterServerResponse<T>(this.statusCode, this.headers, inserter));, +	}, +, +	@Override, +	public Mono<ServerResponse> render(String name, Object... modelAttributes) {, +	public Mono<ServerResponse> render(String name, Map<String, ?> model) {, +		return Mono, +				.just(new RenderingServerResponse(this.statusCode, this.headers, name, modelMap));, +	private static abstract class AbstractServerResponse implements ServerResponse {, +			this.headers = readOnlyCopy(headers);, +		}, +, +		private static HttpHeaders readOnlyCopy(HttpHeaders headers) {, +			HttpHeaders copy = new HttpHeaders();, +			copy.putAll(headers);, +			return HttpHeaders.readOnlyHttpHeaders(copy);, +	private static final class WriterFunctionServerResponse extends AbstractServerResponse {, +		private final BiFunction<ServerWebExchange, HandlerStrategies, Mono<Void>> writeFunction;, +, +		public WriterFunctionServerResponse(HttpStatus statusCode,, +				HttpHeaders headers,, +				BiFunction<ServerWebExchange, HandlerStrategies, Mono<Void>> writeFunction) {, +			super(statusCode, headers);, +			this.writeFunction = writeFunction;, +		}, +, +		@Override, +		public Mono<Void> writeTo(ServerWebExchange exchange, HandlerStrategies strategies) {, +			writeStatusAndHeaders(exchange.getResponse());, +			return this.writeFunction.apply(exchange, strategies);, +		}, +	}, +, +, +, +	private static final class BodyInserterServerResponse<T> extends AbstractServerResponse {, +	private static final class RenderingServerResponse extends AbstractServerResponse {, +			this.model = Collections.unmodifiableMap(model);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +							SqlReturnResultSet undeclaredRsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +							SqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java, +import java.util.Collections;, +import java.util.function.BiFunction;, +	public Mono<ServerResponse> build() {, +		return build((exchange, handlerStrategies) -> exchange.getResponse().setComplete());, +	public Mono<ServerResponse> build(Publisher<Void> voidPublisher) {, +		return build((exchange, handlerStrategies) ->, +				Mono.from(voidPublisher).then(exchange.getResponse().setComplete()));, +	public Mono<ServerResponse> build(, +			BiFunction<ServerWebExchange, HandlerStrategies, Mono<Void>> writeFunction) {, +, +		Assert.notNull(writeFunction, "'writeFunction' must not be null");, +		return Mono.just(new WriterFunctionServerResponse(this.statusCode, this.headers,, +				writeFunction));, +	public <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher,, +			Class<T> elementClass) {, +	public <T> Mono<ServerResponse> body(BodyInserter<T, ? super ServerHttpResponse> inserter) {, +		Assert.notNull(inserter, "'inserter' must not be null");, +		return Mono, +				.just(new BodyInserterServerResponse<T>(this.statusCode, this.headers, inserter));, +	}, +, +	@Override, +	public Mono<ServerResponse> render(String name, Object... modelAttributes) {, +	public Mono<ServerResponse> render(String name, Map<String, ?> model) {, +		return Mono, +				.just(new RenderingServerResponse(this.statusCode, this.headers, name, modelMap));, +	private static abstract class AbstractServerResponse implements ServerResponse {, +			this.headers = readOnlyCopy(headers);, +		}, +, +		private static HttpHeaders readOnlyCopy(HttpHeaders headers) {, +			HttpHeaders copy = new HttpHeaders();, +			copy.putAll(headers);]