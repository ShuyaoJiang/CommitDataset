[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	private static final int BUFFER_SIZE = 8192;, +, +	private volatile boolean suspended = false;, +, +		return Flux.from(this.receivePublisher).onBackpressureBuffer(BUFFER_SIZE);, +		this.suspended = false;, +		this.suspended = true;, +	protected boolean isSuspended() {, +		return this.suspended;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	private static final int BUFFER_SIZE = 8192;, +, +	private volatile boolean suspended = false;, +, +		return Flux.from(this.receivePublisher).onBackpressureBuffer(BUFFER_SIZE);, +		this.suspended = false;, +		this.suspended = true;, +	protected boolean isSuspended() {, +		return this.suspended;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	private static final int BUFFER_SIZE = 8192;, +, +	private volatile boolean suspended = false;, +, +		return Flux.from(this.receivePublisher).onBackpressureBuffer(BUFFER_SIZE);, +		this.suspended = false;, +		this.suspended = true;, +	protected boolean isSuspended() {, +		return this.suspended;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketHandlerAdapter.java, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	private static final int BUFFER_SIZE = 8192;, +, +	private volatile boolean suspended = false;, +, +		return Flux.from(this.receivePublisher).onBackpressureBuffer(BUFFER_SIZE);, +		this.suspended = false;, +		this.suspended = true;, +	protected boolean isSuspended() {, +		return this.suspended;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketHandlerAdapter.java, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/UndertowWebSocketSession.java, +		super.resumeReceives();, +		super.suspendReceives();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	private static final int BUFFER_SIZE = 8192;, +, +	private volatile boolean suspended = false;, +, +		return Flux.from(this.receivePublisher).onBackpressureBuffer(BUFFER_SIZE);, +		this.suspended = false;, +		this.suspended = true;, +	protected boolean isSuspended() {, +		return this.suspended;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +		if (this.wsSession != null && !this.wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketHandlerAdapter.java, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +				if (!wsSession.isSuspended()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/UndertowWebSocketSession.java, +		super.resumeReceives();, +		super.suspendReceives();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/BasicWebSocketHandlerIntegrationTests.java, +						.cast(WebSocketFrame.class))]