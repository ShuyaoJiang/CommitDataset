[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import org.springframework.core.OrderComparator;, +		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory);, +		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);, +		Collections.sort(advisors, new OrderComparator());, +		addAdvisors(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import org.springframework.core.OrderComparator;, +		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory);, +		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);, +		Collections.sort(advisors, new OrderComparator());, +		addAdvisors(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2009 the original author or authors., +		extendAdvisors(eligibleAdvisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import org.springframework.core.OrderComparator;, +		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory);, +		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);, +		Collections.sort(advisors, new OrderComparator());, +		addAdvisors(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2009 the original author or authors., +		extendAdvisors(eligibleAdvisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.Ordered;, +public class ExposeInvocationInterceptor implements MethodInterceptor, Ordered, Serializable {, +	private static final ThreadLocal<MethodInvocation> invocation =, +			new NamedThreadLocal<MethodInvocation>("Current AOP method invocation");, +		MethodInvocation mi = invocation.get();, +		MethodInvocation oldInvocation = invocation.get();, +			invocation.set(oldInvocation);, +	public int getOrder() {, +		return Ordered.HIGHEST_PRECEDENCE + 1;, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import org.springframework.core.OrderComparator;, +		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory);, +		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);, +		Collections.sort(advisors, new OrderComparator());, +		addAdvisors(advisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.java, + * Copyright 2002-2009 the original author or authors., +		extendAdvisors(eligibleAdvisors);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.Ordered;, +public class ExposeInvocationInterceptor implements MethodInterceptor, Ordered, Serializable {, +	private static final ThreadLocal<MethodInvocation> invocation =, +			new NamedThreadLocal<MethodInvocation>("Current AOP method invocation");, +		MethodInvocation mi = invocation.get();, +		MethodInvocation oldInvocation = invocation.get();, +			invocation.set(oldInvocation);, +	public int getOrder() {, +		return Ordered.HIGHEST_PRECEDENCE + 1;, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AbstractPointcutAdvisor.java, + * Copyright 2002-2009 the original author or authors., +import org.aopalliance.aop.Advice;, +, +	private Integer order;, +		if (this.order != null) {, +		Advice advice = getAdvice();, +		if (advice instanceof Ordered) {, +			return ((Ordered) advice).getOrder();, +		}, +		return Ordered.LOWEST_PRECEDENCE;, +	}]