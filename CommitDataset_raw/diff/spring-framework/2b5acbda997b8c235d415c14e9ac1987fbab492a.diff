[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/server/RelayStompService.java, +		this.reactor.on(Fn.$(StompCommand.ACK), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.NACK), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.BEGIN), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.COMMIT), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.ABORT), new RelayConsumer());, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/server/RelayStompService.java, +		this.reactor.on(Fn.$(StompCommand.ACK), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.NACK), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.BEGIN), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.COMMIT), new RelayConsumer());, +		this.reactor.on(Fn.$(StompCommand.ABORT), new RelayConsumer());, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/server/ServerStompMessageHandler.java, +				this.reactor.notify(command, Fn.event(message));, +				this.reactor.notify(command, Fn.event(message));, +	protected void subscribe(final StompSession session, StompMessage message) {, +		final String subscriptionId = message.getHeaders().getId();, +		String replyToKey = getSubscriptionReplyKey(session, subscriptionId);, +			logger.trace("Adding subscription, key=" + replyToKey);, +				event.getData().getHeaders().setSubscription(subscriptionId);, +		this.reactor.notify(StompCommand.SUBSCRIBE, Fn.event(message, replyToKey));, +	private String getSubscriptionReplyKey(StompSession session, String subscriptionId) {, +		return StompCommand.SUBSCRIBE + ":" + session.getId() + ":" + subscriptionId;, +	}, +, +	protected void unsubscribe(StompSession session, StompMessage message) {, +		cancelRegistration(session, message.getHeaders().getId());, +		this.reactor.notify(StompCommand.UNSUBSCRIBE, Fn.event(message));, +	}, +, +	private void cancelRegistration(StompSession session, String subscriptionId) {, +		String key = getSubscriptionReplyKey(session, subscriptionId);, +		List<Registration<?>> list = this.registrationsBySession.get(session.getId());, +		for (Registration<?> registration : list) {, +			if (registration.getSelector().matches(key)) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Cancelling subscription, key=" + key);, +				}, +				list.remove(registration);, +				registration.cancel();, +			}, +		}]