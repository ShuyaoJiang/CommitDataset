[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				Destination destination = getResponseDestination(request, response, session, result);, +		Object content = (result instanceof JmsResponse, +				? ((JmsResponse) result).getResponse() : result);, +, +			if (content instanceof org.springframework.messaging.Message) {, +				return this.messagingMessageConverter.toMessage(content, session);, +				return converter.toMessage(content, session);, +			if (!(content instanceof Message)) {, +						"No MessageConverter specified - cannot handle message [" + content + "]");, +			return (Message) content;, +	private Destination getResponseDestination(Message request, Message response, Session session, Object result), +			throws JMSException {, +		if (result instanceof JmsResponse) {, +			JmsResponse jmsResponse = (JmsResponse) result;, +			Destination destination = jmsResponse.resolveDestination(getDestinationResolver(), session);, +			if (destination != null) {, +				return destination;, +			}, +		}, +		return getResponseDestination(request, response, session);, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +				Destination destination = getResponseDestination(request, response, session, result);, +		Object content = (result instanceof JmsResponse, +				? ((JmsResponse) result).getResponse() : result);, +, +			if (content instanceof org.springframework.messaging.Message) {, +				return this.messagingMessageConverter.toMessage(content, session);, +				return converter.toMessage(content, session);, +			if (!(content instanceof Message)) {, +						"No MessageConverter specified - cannot handle message [" + content + "]");, +			return (Message) content;, +	private Destination getResponseDestination(Message request, Message response, Session session, Object result), +			throws JMSException {, +		if (result instanceof JmsResponse) {, +			JmsResponse jmsResponse = (JmsResponse) result;, +			Destination destination = jmsResponse.resolveDestination(getDestinationResolver(), session);, +			if (destination != null) {, +				return destination;, +			}, +		}, +		return getResponseDestination(request, response, session);, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/JmsResponse.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jms.listener.adapter;, +, +import javax.jms.Destination;, +import javax.jms.JMSException;, +import javax.jms.Session;, +, +import org.springframework.jms.support.destination.DestinationResolver;, +import org.springframework.util.Assert;, +, +/**, + * Return type of any JMS listener method used to indicate the actual response destination, + * alongside the response itself. Typically used when said destination needs to be, + * computed at runtime., + * <p>, + * The example below sends a response with the content of the {@code result} argument to, + * the {@code queueOut Queue}:, + *, + * <pre class="code">, + * package com.acme.foo;, + *, + * public class MyService {, + *     &#064;JmsListener, + *     public JmsResponse process(String msg) {, + *         // process incoming message, + *         return JmsResponse.forQueue(result, "queueOut");, + *     }, + * }</pre>, + *, + * If the destination does not need to be computed at runtime,, + * {@link org.springframework.messaging.handler.annotation.SendTo @SendTo} is the, + * recommended declarative approach., + *, + * @author Stephane Nicoll, + * @since 4.2, + * @see org.springframework.jms.annotation.JmsListener, + * @see org.springframework.messaging.handler.annotation.SendTo, + */]