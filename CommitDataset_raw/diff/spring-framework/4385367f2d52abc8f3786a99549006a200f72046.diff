[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache =, +			new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +, +			synchronized (this.methodResolverCache) {, +				resolver = this.methodResolverCache.get(handlerClass);, +				if (resolver == null) {, +			}, +		}, +	protected PortletRequestDataBinder createBinder(PortletRequest request, Object target, String objectName) throws Exception {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, PortletHandlerMethodResolver> methodResolverCache =, +			new ConcurrentHashMap<Class<?>, PortletHandlerMethodResolver>();, +, +			synchronized (this.methodResolverCache) {, +				resolver = this.methodResolverCache.get(handlerClass);, +				if (resolver == null) {, +			}, +		}, +	protected PortletRequestDataBinder createBinder(PortletRequest request, Object target, String objectName) throws Exception {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.HashMap;, +	private final Map<Class<?>, ServletHandlerMethodResolver> methodResolverCache =, +			new ConcurrentHashMap<Class<?>, ServletHandlerMethodResolver>();, +		Boolean annotated = this.sessionAnnotatedClassesCache.get(clazz);, +			annotated = (AnnotationUtils.findAnnotation(handler.getClass(), SessionAttributes.class) != null);, +			this.sessionAnnotatedClassesCache.put(clazz, annotated);, +	 * This method always returns -1 since an annotated controller can have many methods,, +	 * each requiring separate lastModified calculations. Instead, an, +	 * @{@link RequestMapping}-annotated method can calculate the lastModified value, call, +	 * {@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}, +	 * to check it, and return {@code null} if that returns {@code true}., +	 * @see org.springframework.web.context.request.WebRequest#checkNotModified(long), +, +			synchronized (this.methodResolverCache) {, +				resolver = this.methodResolverCache.get(handlerClass);, +				if (resolver == null) {, +		return resolver;, +	}, +	protected ServletRequestDataBinder createBinder(HttpServletRequest request, Object target, String objectName) throws Exception {, +		private final Map<Method, RequestMappingInfo> mappings = new HashMap<Method, RequestMappingInfo>();]