[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String DISCONNECT_MESSAGE_HEADER = "simpDisconnectMessage";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String DISCONNECT_MESSAGE_HEADER = "simpDisconnectMessage";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			handleDisconnect(sessionId, user, message);, +	private void handleDisconnect(String sessionId, Principal user, Message<?> origMessage) {, +		if (origMessage != null) {, +			accessor.setHeader(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER, origMessage);, +		}, +					handleDisconnect(info.getSessiondId(), info.getUser(), null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String DISCONNECT_MESSAGE_HEADER = "simpDisconnectMessage";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			handleDisconnect(sessionId, user, message);, +	private void handleDisconnect(String sessionId, Principal user, Message<?> origMessage) {, +		if (origMessage != null) {, +			accessor.setHeader(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER, origMessage);, +		}, +					handleDisconnect(info.getSessiondId(), info.getUser(), null);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.atLeast;, +import static org.mockito.Mockito.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +, +				this.clientOutboundChannel, this.brokerChannel, Collections.emptyList());, +		assertSame(message, captured.getHeaders().get(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String DISCONNECT_MESSAGE_HEADER = "simpDisconnectMessage";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			handleDisconnect(sessionId, user, message);, +	private void handleDisconnect(String sessionId, Principal user, Message<?> origMessage) {, +		if (origMessage != null) {, +			accessor.setHeader(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER, origMessage);, +		}, +					handleDisconnect(info.getSessiondId(), info.getUser(), null);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, + * Copyright 2002-2016 the original author or authors., +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.atLeast;, +import static org.mockito.Mockito.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +, +				this.clientOutboundChannel, this.brokerChannel, Collections.emptyList());, +		assertSame(message, captured.getHeaders().get(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +import org.springframework.messaging.MessageHeaders;, +				String receipt = getDisconnectReceipt(stompAccessor);, +				if (receipt != null) {, +					stompAccessor = StompHeaderAccessor.create(StompCommand.RECEIPT);, +					stompAccessor.setReceiptId(receipt);, +				}, +				else {, +			}, +	private String getDisconnectReceipt(SimpMessageHeaderAccessor simpHeaders) {, +		String name = StompHeaderAccessor.DISCONNECT_MESSAGE_HEADER;, +		Message<?> message = (Message<?>) simpHeaders.getHeader(name);, +		if (message != null) {, +			StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);, +			return accessor.getReceipt();, +		}, +		return null;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String DISCONNECT_MESSAGE_HEADER = "simpDisconnectMessage";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			handleDisconnect(sessionId, user, message);, +	private void handleDisconnect(String sessionId, Principal user, Message<?> origMessage) {, +		if (origMessage != null) {, +			accessor.setHeader(SimpMessageHeaderAccessor.DISCONNECT_MESSAGE_HEADER, origMessage);, +		}, +					handleDisconnect(info.getSessiondId(), info.getUser(), null);]