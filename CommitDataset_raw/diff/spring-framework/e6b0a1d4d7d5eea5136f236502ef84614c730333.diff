[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Framework (JAF) is both {@linkplain #setUseJaf(boolean) enabled} and present on the class path,, + * {@link FileTypeMap#getContentType(String)} is used instead.</li>, +	private boolean useJaf = true;, +, +	 * Indicates whether to use the Java Activation Framework to map from file extensions to media types., +	 * <p>Default is {@code true}, i.e. the Java Activation Framework is used., +	 */, +	public void setUseJaf(boolean useJaf) {, +		this.useJaf = useJaf;, +	}, +, +	/**, +, +		if (mediaType == null && useJaf && jafPresent) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Framework (JAF) is both {@linkplain #setUseJaf(boolean) enabled} and present on the class path,, + * {@link FileTypeMap#getContentType(String)} is used instead.</li>, +	private boolean useJaf = true;, +, +	 * Indicates whether to use the Java Activation Framework to map from file extensions to media types., +	 * <p>Default is {@code true}, i.e. the Java Activation Framework is used., +	 */, +	public void setUseJaf(boolean useJaf) {, +		this.useJaf = useJaf;, +	}, +, +	/**, +, +		if (mediaType == null && useJaf && jafPresent) {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +	public void getMediaTypeFromFilenameMediaTypes() {, +	public void getMediaTypeFromFilenameJaf() {, +		assertEquals("Invalid content type", new MediaType("text", "html"),, +				viewResolver.getMediaTypeFromFilename("test.html"));, +	}, +, +	@Test, +	public void getMediaTypeFromFilenameNoJaf() {, +		viewResolver.setUseJaf(false);, +		assertNull("Invalid content type", viewResolver.getMediaTypeFromFilename("test.html"));, +	}, +, +	@Test]