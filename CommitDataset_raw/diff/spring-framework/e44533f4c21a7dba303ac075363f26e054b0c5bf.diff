[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java, + * Copyright 2002-2017 the original author or authors., + * <li>{@link InputStream}, + * <li>{@link Reader}, + * <li>{@link HttpMethod} (as of Spring 4.0)</li>, +				HttpMethod.class == paramType ||, +				Locale.class == paramType ||, +				TimeZone.class == paramType ||, +				ZoneId.class == paramType);, +			if (!paramType.isInstance(webRequest)) {, +				throw new IllegalStateException(, +						"Current request is not of type [" + paramType.getName() + "]: " + webRequest);, +			}, +			HttpSession session = request.getSession();, +			if (!paramType.isInstance(session)) {, +				throw new IllegalStateException(, +						"Current session is not of type [" + paramType.getName() + "]: " + session);, +			return session;, +		}, +		else if (InputStream.class.isAssignableFrom(paramType)) {, +			InputStream inputStream = request.getInputStream();, +			if (!paramType.isInstance(inputStream)) {, +				throw new IllegalStateException(, +						"Request input stream is not of type [" + paramType.getName() + "]: " + inputStream);, +			}, +			return inputStream;, +		}, +		else if (Reader.class.isAssignableFrom(paramType)) {, +			Reader reader = request.getReader();, +			if (!paramType.isInstance(reader)) {, +				throw new IllegalStateException(, +						"Request body reader is not of type [" + paramType.getName() + "]: " + reader);, +			}, +			return reader;, +			Principal userPrincipal = request.getUserPrincipal();, +			if (!paramType.isInstance(userPrincipal)) {, +				throw new IllegalStateException(, +						"Current user principal is not of type [" + paramType.getName() + "]: " + userPrincipal);, +			}, +			return userPrincipal;, +		}, +		else if (HttpMethod.class == paramType) {, +			return HttpMethod.resolve(request.getMethod());, +			// Should never happen..., +					"Unknown parameter type [" + paramType.getName() + "] in " + parameter.getMethod());]