[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Random;, +import org.springframework.core.io.Resource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.util.Assert;, + * Implementation of {@link HttpMessageConverter} that can handle form data, including multipart form data, + * (i.e. file uploads)., + * <p>This converter can write the {@code application/x-www-form-urlencoded} and {@code multipart/form-data} media, + * types, and read the {@code application/x-www-form-urlencoded}) media type (but not {@code multipart/form-data})., + *, + * <p>In other words, this converter can read and write 'normal' HTML forms (as, + * {@link MultiValueMap MultiValueMap&lt;String, String&gt;}), and it can write multipart form (as, + * {@link MultiValueMap MultiValueMap&lt;String, Object&gt;}. When writing multipart, this converter uses other, + * {@link HttpMessageConverter HttpMessageConverters} to write the respective MIME parts. By default, basic converters, + * are registered (supporting {@code Strings} and {@code Resources}, for instance); these can be overridden by setting, + * the {@link #setPartConverters(java.util.List) partConverters} property., + *, + * <p>For example, the following snippet shows how to submit an HTML form:, + * <pre class="code">, + * RestTemplate template = new RestTemplate(); // FormHttpMessageConverter is configured by default, + * MultiValueMap&lt;String, String&gt; form = new LinkedMultiValueMap&lt;String, String&gt;();, + * form.add("field 1", "value 1");, + * form.add("field 2", "value 2");, + * form.add("field 2", "value 3");, + * template.postForLocation("http://example.com/myForm", form);, + * </pre>, + * <p>The following snippet shows how to do a file upload:, + * <pre class="code">, + * MultiValueMap&lt;String, Object&gt; parts = new LinkedMultiValueMap&lt;String, Object&gt;();, + * parts.add("field 1", "value 1");, + * parts.add("file", new ClassPathResource("myFile.jpg"));, + * template.postForLocation("http://example.com/myFileUpload", parts);, + * </pre>, + *, + * <p>Some methods in this class were inspired by {@link org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity}., +public class FormHttpMessageConverter implements HttpMessageConverter<MultiValueMap<String, ?>> {, +	private static final byte[] BOUNDARY_CHARS =, +			new byte[]{'-', '_', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'a', 'b', 'c', 'd', 'e', 'f', 'g',, +					'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',, +					'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',, +				 	'V', 'W', 'X', 'Y', 'Z'};, +	private final Random rnd = new Random();, +	private Charset charset = Charset.forName(WebUtils.DEFAULT_CHARACTER_ENCODING);, +, +	private List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();, +, +		this.partConverters.add(new ByteArrayHttpMessageConverter());, +		StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();, +		stringHttpMessageConverter.setWriteAcceptCharset(false);, +		this.partConverters.add(stringHttpMessageConverter);, +		this.partConverters.add(new ResourceHttpMessageConverter());, +		this.partConverters.add(new SourceHttpMessageConverter());, +	/**, +	 * Set the message body converters to use. These converters are used to convert objects to MIME parts., +	 */, +	public void setPartConverters(List<HttpMessageConverter<?>> partConverters) {, +		Assert.notEmpty(partConverters, "'messageConverters' must not be empty");, +		this.partConverters = partConverters;, +	/**, +	 * Sets the character set used for writing form data., +	 */, +	public void setCharset(Charset charset) {, +		this.charset = charset;, +	}, +, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		if (!MultiValueMap.class.isAssignableFrom(clazz)) {, +			return false;, +		}, +		if (mediaType != null) {, +			return MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType);, +		}, +		else {, +			return true;, +		}, +	}, +, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		if (!MultiValueMap.class.isAssignableFrom(clazz)) {, +			return false;, +		}, +		if (mediaType != null) {, +			return mediaType.includes(MediaType.APPLICATION_FORM_URLENCODED) ||, +					mediaType.includes(MediaType.MULTIPART_FORM_DATA);, +		}, +		else {, +			return true;, +		}, +	}, +, +	public List<MediaType> getSupportedMediaTypes() {, +		return Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED, MediaType.MULTIPART_FORM_DATA);, +	}, +]