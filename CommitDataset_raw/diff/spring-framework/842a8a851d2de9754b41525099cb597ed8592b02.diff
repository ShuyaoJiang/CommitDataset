[+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	 * @see AnnotationReadingVisitorUtils#getMergedAnnotationAttributes, +				this.attributesMap, this.metaAnnotationMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	 * @see AnnotationReadingVisitorUtils#getMergedAnnotationAttributes, +				this.attributesMap, this.metaAnnotationMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationReadingVisitorUtils.java, +import org.springframework.util.LinkedMultiValueMap;, +	 * Retrieve the merged attributes of the annotation of the given type,, +	 * if any, from the supplied {@code attributesMap}., +	 * @param attributesMap the map of annotation attribute lists,, +	 * keyed by annotation type name, +	 * @param metaAnnotationMap the map of meta annotation relationships,, +	 * keyed by annotation type name, +	 * @return the merged annotation attributes, or {@code null} if no, +	 * matching annotation is present in the {@code attributesMap}, +			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,, +			Map<String, Set<String>> metaAnnotationMap, String annotationType) {, +				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType);, +				if (metaAnns != null && metaAnns.contains(annotationType)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	 * @see AnnotationReadingVisitorUtils#getMergedAnnotationAttributes, +				this.attributesMap, this.metaAnnotationMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationReadingVisitorUtils.java, +import org.springframework.util.LinkedMultiValueMap;, +	 * Retrieve the merged attributes of the annotation of the given type,, +	 * if any, from the supplied {@code attributesMap}., +	 * @param attributesMap the map of annotation attribute lists,, +	 * keyed by annotation type name, +	 * @param metaAnnotationMap the map of meta annotation relationships,, +	 * keyed by annotation type name, +	 * @return the merged annotation attributes, or {@code null} if no, +	 * matching annotation is present in the {@code attributesMap}, +			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,, +			Map<String, Set<String>> metaAnnotationMap, String annotationType) {, +				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType);, +				if (metaAnns != null && metaAnns.contains(annotationType)) {, +		}, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, +, +	 * https://jira.spring.io/browse/SPR-11649, +	@Test, +	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {, +		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class);, +		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata);, +	}, +	/**, +	 * https://jira.spring.io/browse/SPR-11649, +	 */, +	@Test, +	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {, +		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();, +		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName());, +		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata);, +	}, +	/**, +	 * https://jira.spring.io/browse/SPR-11649, +	 */, +	@Test, +	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {, +		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class);, +		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata);, +	}, +	/**, +	 * https://jira.spring.io/browse/SPR-11649, +	 */, +	@Test, +	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {, +		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();, +		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName());, +		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata);, +	}, +, +	private void assertMultipleAnnotationsWithIdenticalAttributeNames(AnnotationMetadata metadata) {, +		AnnotationAttributes attributes1 = (AnnotationAttributes) metadata.getAnnotationAttributes(, +				NamedAnnotation1.class.getName(), false);, +		String name1 = attributes1.getString("name");, +		assertThat("name of NamedAnnotation1", name1, is("name 1"));, +, +		AnnotationAttributes attributes2 = (AnnotationAttributes) metadata.getAnnotationAttributes(, +				NamedAnnotation2.class.getName(), false);, +		String name2 = attributes2.getString("name");, +		assertThat("name of NamedAnnotation2", name2, is("name 2"));, +, +		AnnotationAttributes attributes3 = (AnnotationAttributes) metadata.getAnnotationAttributes(, +				NamedAnnotation3.class.getName(), false);, +		String name3 = attributes3.getString("name");, +		assertThat("name of NamedAnnotation3", name3, is("name 3"));, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface NamedAnnotation1 {, +		String name() default "";, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface NamedAnnotation2 {]