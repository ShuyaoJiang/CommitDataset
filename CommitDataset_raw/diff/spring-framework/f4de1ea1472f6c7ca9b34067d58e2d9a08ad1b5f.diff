[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2017 the original author or authors., +		catch (CodeGenerationException | IllegalArgumentException ex) {, +		catch (Throwable ex) {, +		if (proxySuperClass != Object.class) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2017 the original author or authors., +		catch (CodeGenerationException | IllegalArgumentException ex) {, +		catch (Throwable ex) {, +		if (proxySuperClass != Object.class) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	private final DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +	public void setup() {, +		acr.setBeanFactory(this.beanFactory);, +		this.beanFactory.setAutowireCandidateResolver(acr);, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2017 the original author or authors., +		catch (CodeGenerationException | IllegalArgumentException ex) {, +		catch (Throwable ex) {, +		if (proxySuperClass != Object.class) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	private final DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +	public void setup() {, +		acr.setBeanFactory(this.beanFactory);, +		this.beanFactory.setAutowireCandidateResolver(acr);, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr11202Tests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.context.ApplicationContext;, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Wrapper.class);, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +, +, +, +	protected @interface Bar {, +, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2017 the original author or authors., +		catch (CodeGenerationException | IllegalArgumentException ex) {, +		catch (Throwable ex) {, +		if (proxySuperClass != Object.class) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	private final DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +	public void setup() {, +		acr.setBeanFactory(this.beanFactory);, +		this.beanFactory.setAutowireCandidateResolver(acr);, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr11202Tests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.context.ApplicationContext;, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Wrapper.class);, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +, +, +, +	protected @interface Bar {, +, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr6602Tests.java, + * Copyright 2002-2017 the original author or authors., +, +, +, +, +, +, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2017 the original author or authors., +		catch (CodeGenerationException | IllegalArgumentException ex) {, +		catch (Throwable ex) {, +		if (proxySuperClass != Object.class) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	private final DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +	public void setup() {, +		acr.setBeanFactory(this.beanFactory);, +		this.beanFactory.setAutowireCandidateResolver(acr);, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr11202Tests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.context.ApplicationContext;, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Wrapper.class);, +	@Test, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +, +, +, +	protected @interface Bar {, +, +]