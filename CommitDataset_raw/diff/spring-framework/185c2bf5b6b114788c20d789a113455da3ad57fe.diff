[+++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +        super(Opcodes.ASM6);, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +     *            of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}., +        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +        super(Opcodes.ASM6);, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +            // case ClassWriter.PACKAGE:, +            // case ClassWriter.MODULE:, +            // case ClassWriter.MTYPE:, +            // case ClassWriter.MODULE:, +            // case ClassWriter.PACKAGE:, +        String moduleMainClass = null;, +        int module = 0;, +        int packages = 0;, +            } else if ("Module".equals(attrName)) {, +                module = u + 8;, +            } else if ("ModuleMainClass".equals(attrName)) {, +                moduleMainClass = readClass(u + 8, c);, +            } else if ("ModulePackages".equals(attrName)) {, +                packages = u + 10;, +        // visits the module info and associated attributes, +        if (module != 0) {, +            readModule(classVisitor, context, module,, +                    moduleMainClass, packages);, +        }, +, +     * Reads the module attribute and visit it., +     *, +     * @param classVisitor, +     *           the current class visitor, +     * @param context, +     *           information about the class being parsed., +     * @param u, +     *           start offset of the module attribute in the class file., +     * @param mainClass, +     *           name of the main class of a module or null., +     * @param packages, +     *           start offset of the concealed package attribute., +     */, +    private void readModule(final ClassVisitor classVisitor,, +            final Context context, int u,, +            final String mainClass, int packages) {, +, +        char[] buffer = context.buffer;, +, +        // reads module name, flags and version, +        String name = readModule(u, buffer);, +        int flags = readUnsignedShort(u + 2);, +        String version = readUTF8(u + 4, buffer);, +        u += 6;, +, +        ModuleVisitor mv = classVisitor.visitModule(name, flags, version);, +        if (mv == null) {, +            return;, +        }, +, +        // module attributes (main class, packages), +        if (mainClass != null) {, +            mv.visitMainClass(mainClass);, +        }, +, +        if (packages != 0) {, +            for (int i = readUnsignedShort(packages - 2); i > 0; --i) {, +                String packaze = readPackage(packages, buffer);, +                mv.visitPackage(packaze);, +                packages += 2;, +            }, +        }, +, +        // reads requires, +        u += 2;, +        for (int i = readUnsignedShort(u - 2); i > 0; --i) {, +            String module = readModule(u, buffer);, +            int access = readUnsignedShort(u + 2);, +            String requireVersion = readUTF8(u + 4, buffer);, +            mv.visitRequire(module, access, requireVersion);, +            u += 6;, +        }, +, +        // reads exports, +        u += 2;, +        for (int i = readUnsignedShort(u - 2); i > 0; --i) {, +            String export = readPackage(u, buffer);, +            int access = readUnsignedShort(u + 2);, +            int exportToCount = readUnsignedShort(u + 4);, +            u += 6;]