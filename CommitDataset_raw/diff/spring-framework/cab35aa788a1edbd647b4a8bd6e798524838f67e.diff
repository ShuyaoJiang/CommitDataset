[+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * <p>For many parsing scenarios, this is an inverse operation of, +	 * {@link Locale#toString Locale's toString}, in a lenient sense., +	 * This method does not aim for strict {@code Locale} design compliance;, +	 * it is rather specifically tailored for typical Spring parsing needs., +	 * <p><b>Note: This delegate does not accept the BCP 47 language tag format., +	 * Please use {@link #parseLocale} for lenient parsing of both formats.</b>, +, +		if ("".equals(variant) && country.startsWith("#")) {, +			variant = country;, +			country = "";, +		}, +, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * <p>For many parsing scenarios, this is an inverse operation of, +	 * {@link Locale#toString Locale's toString}, in a lenient sense., +	 * This method does not aim for strict {@code Locale} design compliance;, +	 * it is rather specifically tailored for typical Spring parsing needs., +	 * <p><b>Note: This delegate does not accept the BCP 47 language tag format., +	 * Please use {@link #parseLocale} for lenient parsing of both formats.</b>, +, +		if ("".equals(variant) && country.startsWith("#")) {, +			variant = country;, +			country = "";, +		}, +, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, +	@Test  // SPR-14718, SPR-7598, +		assertEquals("sr__#LATN", StringUtils.parseLocaleString("sr__#LATN").toString());, +	}, +, +	@Test  // SPR-16651, +	public void testAvailableLocalesWithLocaleString() {, +		for (Locale locale : Locale.getAvailableLocales()) {, +			Locale parsedLocale = StringUtils.parseLocaleString(locale.toString());, +			if (parsedLocale == null) {, +				assertEquals("", locale.getLanguage());, +			}, +			else {, +				assertEquals(parsedLocale.toString(), locale.toString());, +			}, +		}, +	}, +, +	@Test  // SPR-16651, +	public void testAvailableLocalesWithLanguageTag() {, +		for (Locale locale : Locale.getAvailableLocales()) {, +			Locale parsedLocale = StringUtils.parseLocale(locale.toLanguageTag());, +			if (parsedLocale == null) {, +				assertEquals("", locale.getLanguage());, +			}, +			else {, +				assertEquals(parsedLocale.toLanguageTag(), locale.toLanguageTag());, +			}, +		}]