[+++ b/build.gradle, +	if (rootProject.hasProperty("VERSION_QUALIFIER")) {, +		def qualifier = rootProject.getProperty("VERSION_QUALIFIER"), +		if (qualifier.startsWith("SPR-")) { // topic branch, e.g. SPR-1234, +			// replace 3.2.0.BUILD-SNAPSHOT for 3.2.0.SPR-1234-SNAPSHOT, +			version = version.replace('BUILD', qualifier), +		}, +	}, +, +	group = "org.springframework", +, +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ b/build.gradle, +	if (rootProject.hasProperty("VERSION_QUALIFIER")) {, +		def qualifier = rootProject.getProperty("VERSION_QUALIFIER"), +		if (qualifier.startsWith("SPR-")) { // topic branch, e.g. SPR-1234, +			// replace 3.2.0.BUILD-SNAPSHOT for 3.2.0.SPR-1234-SNAPSHOT, +			version = version.replace('BUILD', qualifier), +		}, +	}, +, +	group = "org.springframework", +, +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ b/build.gradle, +	if (rootProject.hasProperty("VERSION_QUALIFIER")) {, +		def qualifier = rootProject.getProperty("VERSION_QUALIFIER"), +		if (qualifier.startsWith("SPR-")) { // topic branch, e.g. SPR-1234, +			// replace 3.2.0.BUILD-SNAPSHOT for 3.2.0.SPR-1234-SNAPSHOT, +			version = version.replace('BUILD', qualifier), +		}, +	}, +, +	group = "org.springframework", +, +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, + * Copyright 2002-2012 the original author or authors., +import test.beans.IOther;, +import test.beans.ITestBean;, +import test.beans.TestBean;, +import test.beans.subpkg.DeepBean;, +		String expression = "execution(int test.beans.TestBean.getAge())";, +		String matchesTestBean = which + "(test.beans.TestBean)";, +		String matchesIOther = which + "(test.beans.IOther)";, +		String withinBeansPackage = "within(test.beans.";, +		String expression = "execution(void test.beans.TestBean.setSomeNumber(Number)) && args(Double)";, +		String expression = "execution(int test.beans.TestBean.getAge())";, +		String expression = "execution(void test.beans.TestBean.setSomeNumber(Number)) && args(Double)";, +		String expression = "execution(void test.beans.TestBean.setSomeNumber(Number) && args(Double)";, +		String expression = "call(int test.beans.TestBean.getAge())";, +++ b/build.gradle, +	if (rootProject.hasProperty("VERSION_QUALIFIER")) {, +		def qualifier = rootProject.getProperty("VERSION_QUALIFIER"), +		if (qualifier.startsWith("SPR-")) { // topic branch, e.g. SPR-1234, +			// replace 3.2.0.BUILD-SNAPSHOT for 3.2.0.SPR-1234-SNAPSHOT, +			version = version.replace('BUILD', qualifier), +		}, +	}, +, +	group = "org.springframework", +, +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, + * Copyright 2002-2012 the original author or authors., +import test.beans.IOther;, +import test.beans.ITestBean;, +import test.beans.TestBean;, +import test.beans.subpkg.DeepBean;, +		String expression = "execution(int test.beans.TestBean.getAge())";, +		String matchesTestBean = which + "(test.beans.TestBean)";, +		String matchesIOther = which + "(test.beans.IOther)";, +		String withinBeansPackage = "within(test.beans.";, +		String expression = "execution(void test.beans.TestBean.setSomeNumber(Number)) && args(Double)";]