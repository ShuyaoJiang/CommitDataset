[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	private final class ConverterAdapter implements ConditionalGenericConverter {, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return (typeInfo.getTargetType().equals(targetType.getObjectType()) &&, +					typeInfo.getSourceType().isAssignableFrom(sourceType.getObjectType()));, +		}, +, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	private final class ConverterAdapter implements ConditionalGenericConverter {, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return (typeInfo.getTargetType().equals(targetType.getObjectType()) &&, +					typeInfo.getSourceType().isAssignableFrom(sourceType.getObjectType()));, +		}, +, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +import static junit.framework.Assert.assertTrue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.fail;, +, +import java.awt.Color;, +import java.awt.SystemColor;, +	// SPR-8718, +	, +	@Test(expected=ConverterNotFoundException.class), +	public void convertSuperTarget() {, +		conversionService.addConverter(new ColorConverter());, +		conversionService.convert("#000000", SystemColor.class);, +	}, +, +	public class ColorConverter implements Converter<String, Color> {, +		public Color convert(String source) { if (!source.startsWith("#")) source = "#" + source; return Color.decode(source); }, +	}, +]