[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.bind.support.WebArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +			ManagedList<BeanDefinitionHolder> beanDefs = extractBeanSubElements(resolversElement, parserContext);, +			spec.argumentResolvers(wrapWebArgumentResolverBeanDefs(beanDefs));, +	private ManagedList<BeanDefinitionHolder> extractBeanSubElements(Element parentElement, ParserContext parserContext) {, +		ManagedList<BeanDefinitionHolder> list = new ManagedList<BeanDefinitionHolder>();, +	private ManagedList<BeanDefinitionHolder> wrapWebArgumentResolverBeanDefs(List<BeanDefinitionHolder> beanDefs) {, +		ManagedList<BeanDefinitionHolder> result = new ManagedList<BeanDefinitionHolder>();, +		, +		for (BeanDefinitionHolder beanDef : beanDefs) {, +			String className = beanDef.getBeanDefinition().getBeanClassName();, +			Class<?> clazz = ClassUtils.resolveClassName(className, ClassUtils.getDefaultClassLoader());, +			, +			if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +				RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +				adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +				result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +			}, +			else {, +				result.add(beanDef);, +			}, +		}, +		, +		return result;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.bind.support.WebArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +			ManagedList<BeanDefinitionHolder> beanDefs = extractBeanSubElements(resolversElement, parserContext);, +			spec.argumentResolvers(wrapWebArgumentResolverBeanDefs(beanDefs));, +	private ManagedList<BeanDefinitionHolder> extractBeanSubElements(Element parentElement, ParserContext parserContext) {, +		ManagedList<BeanDefinitionHolder> list = new ManagedList<BeanDefinitionHolder>();, +	private ManagedList<BeanDefinitionHolder> wrapWebArgumentResolverBeanDefs(List<BeanDefinitionHolder> beanDefs) {, +		ManagedList<BeanDefinitionHolder> result = new ManagedList<BeanDefinitionHolder>();, +		, +		for (BeanDefinitionHolder beanDef : beanDefs) {, +			String className = beanDef.getBeanDefinition().getBeanClassName();, +			Class<?> clazz = ClassUtils.resolveClassName(className, ClassUtils.getDefaultClassLoader());, +			, +			if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +				RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +				adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +				result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +			}, +			else {, +				result.add(beanDef);, +			}, +		}, +		, +		return result;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDriven.java, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +	void messageConverters(ManagedList<BeanDefinitionHolder> converterBeanDefinitions) {, +		this.messageConverters.addAll(converterBeanDefinitions);, +	void argumentResolvers(ManagedList<BeanDefinitionHolder> resolverBeanDefinitions) {, +		this.argumentResolvers.addAll(resolverBeanDefinitions);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.bind.support.WebArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +			ManagedList<BeanDefinitionHolder> beanDefs = extractBeanSubElements(resolversElement, parserContext);, +			spec.argumentResolvers(wrapWebArgumentResolverBeanDefs(beanDefs));, +	private ManagedList<BeanDefinitionHolder> extractBeanSubElements(Element parentElement, ParserContext parserContext) {, +		ManagedList<BeanDefinitionHolder> list = new ManagedList<BeanDefinitionHolder>();, +	private ManagedList<BeanDefinitionHolder> wrapWebArgumentResolverBeanDefs(List<BeanDefinitionHolder> beanDefs) {, +		ManagedList<BeanDefinitionHolder> result = new ManagedList<BeanDefinitionHolder>();, +		, +		for (BeanDefinitionHolder beanDef : beanDefs) {, +			String className = beanDef.getBeanDefinition().getBeanClassName();, +			Class<?> clazz = ClassUtils.resolveClassName(className, ClassUtils.getDefaultClassLoader());, +			, +			if (WebArgumentResolver.class.isAssignableFrom(clazz)) {, +				RootBeanDefinition adapter = new RootBeanDefinition(ServletWebArgumentResolverAdapter.class);, +				adapter.getConstructorArgumentValues().addIndexedArgumentValue(0, beanDef);, +				result.add(new BeanDefinitionHolder(adapter, beanDef.getBeanName() + "Adapter"));, +			}, +			else {, +				result.add(beanDef);, +			}, +		}, +		, +		return result;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDriven.java]