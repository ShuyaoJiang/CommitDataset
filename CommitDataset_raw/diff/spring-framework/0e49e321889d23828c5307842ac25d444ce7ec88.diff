[+++ b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java, +				// Extension receivers of extension methods must be included as they appear as normal method parameters in Java, +				.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()) || KParameter.Kind.EXTENSION_RECEIVER.equals(p.getKind())), +			KParameter parameter = filteredParameters.get(i);, +			// extension receivers are not explicitly named, but require a name for Java interoperability, +			// $receiver is not a valid Kotlin identifier, but valid in Java, so it can be used here, +			String name = KParameter.Kind.EXTENSION_RECEIVER.equals(parameter.getKind())  ? "$receiver" : parameter.getName();, +++ b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java, +				// Extension receivers of extension methods must be included as they appear as normal method parameters in Java, +				.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()) || KParameter.Kind.EXTENSION_RECEIVER.equals(p.getKind())), +			KParameter parameter = filteredParameters.get(i);, +			// extension receivers are not explicitly named, but require a name for Java interoperability, +			// $receiver is not a valid Kotlin identifier, but valid in Java, so it can be used here, +			String name = KParameter.Kind.EXTENSION_RECEIVER.equals(parameter.getKind())  ? "$receiver" : parameter.getName();, +++ b/spring-core/src/test/kotlin/org/springframework/core/KotlinReflectionParameterNameDiscovererTests.kt, +	@Test, +	fun getParameterNamesOnExtensionMethod() {, +		val method = ReflectionUtils.findMethod(UtilityClass::class.java, "identity", String::class.java)!!, +		val actualParams = parameterNameDiscoverer.getParameterNames(method)!!, +		assertThat(actualParams, `is`(arrayOf("\$receiver"))), +	}, +, +, +	class UtilityClass {, +		fun String.identity() = this, +	}]