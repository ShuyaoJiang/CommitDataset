[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, + * Copyright 2002-2014 the original author or authors., +		Object result;, +					strategyType.getName() + "]: a zero-argument constructor is required", ex);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, + * Copyright 2002-2014 the original author or authors., +		Object result;, +					strategyType.getName() + "]: a zero-argument constructor is required", ex);, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2014 the original author or authors., +				logger.debug("Cannot find '.class' file for class [" + clazz +, +						"] - unable to determine constructor/method parameter names");, +						"] - unable to determine constructor/method parameter names", ex);, +						"- unable to determine constructor/method parameter names", ex);, +, +, +, +, +, +		private final String[] parameterNames;, +, +		public LocalVariableTableVisitor(Class<?> clazz, Map<Member, String[]> map, String name, String desc, boolean isStatic) {, +			this.args = Type.getArgumentTypes(desc);, +			this.parameterNames = new String[this.args.length];, +			this.lvtSlotIndex = computeLvtSlotIndices(isStatic, this.args);, +		public void visitLocalVariable(String name, String description, String signature, Label start, Label end, int index) {, +			for (int i = 0; i < this.lvtSlotIndex.length; i++) {, +				if (this.lvtSlotIndex[i] == index) {, +				this.memberMap.put(resolveMember(), this.parameterNames);, +			ClassLoader loader = this.clazz.getClassLoader();, +			Class<?>[] argTypes = new Class<?>[this.args.length];, +			for (int i = 0; i < this.args.length; i++) {, +				argTypes[i] = ClassUtils.resolveClassName(this.args[i].getClassName(), loader);, +				if (CONSTRUCTOR.equals(this.name)) {, +					return this.clazz.getDeclaredConstructor(argTypes);, +				return this.clazz.getDeclaredMethod(this.name, argTypes);, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("Method [" + this.name +, +						"] was discovered in the .class file but cannot be resolved in the class object", ex);, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, + * Copyright 2002-2014 the original author or authors., +		Object result;, +					strategyType.getName() + "]: a zero-argument constructor is required", ex);, +++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2014 the original author or authors., +				logger.debug("Cannot find '.class' file for class [" + clazz +, +						"] - unable to determine constructor/method parameter names");, +						"] - unable to determine constructor/method parameter names", ex);, +						"- unable to determine constructor/method parameter names", ex);, +, +, +, +, +, +		private final String[] parameterNames;, +, +		public LocalVariableTableVisitor(Class<?> clazz, Map<Member, String[]> map, String name, String desc, boolean isStatic) {, +			this.args = Type.getArgumentTypes(desc);, +			this.parameterNames = new String[this.args.length];, +			this.lvtSlotIndex = computeLvtSlotIndices(isStatic, this.args);, +		public void visitLocalVariable(String name, String description, String signature, Label start, Label end, int index) {, +			for (int i = 0; i < this.lvtSlotIndex.length; i++) {, +				if (this.lvtSlotIndex[i] == index) {, +				this.memberMap.put(resolveMember(), this.parameterNames);, +			ClassLoader loader = this.clazz.getClassLoader();, +			Class<?>[] argTypes = new Class<?>[this.args.length];, +			for (int i = 0; i < this.args.length; i++) {, +				argTypes[i] = ClassUtils.resolveClassName(this.args[i].getClassName(), loader);, +				if (CONSTRUCTOR.equals(this.name)) {, +					return this.clazz.getDeclaredConstructor(argTypes);, +				return this.clazz.getDeclaredMethod(this.name, argTypes);, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("Method [" + this.name +, +						"] was discovered in the .class file but cannot be resolved in the class object", ex);, +				}, +				else {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.java, +		Document document = (node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument());, +			XmlOptions validateOptions = getXmlOptions();, +			if (validateOptions == null) {, +				// Create temporary XmlOptions just for validation, +				validateOptions = new XmlOptions();, +			}, +				StringBuilder sb = new StringBuilder("Failed to validate XmlObject: ");, +				boolean first = true;, +						if (!first) {, +							sb.append("; ");, +						}, +						sb.append(error.toString());, +						first = false;, +						new XmlException(sb.toString(), null, errorsList));, +			return new ValidationFailureException("XMLBeans validation exception", ex);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, + * Copyright 2002-2014 the original author or authors., +		Object result;, +					strategyType.getName() + "]: a zero-argument constructor is required", ex);]