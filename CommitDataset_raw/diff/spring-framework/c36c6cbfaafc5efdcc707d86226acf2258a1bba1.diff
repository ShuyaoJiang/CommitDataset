[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +	/**, +	 * Constant for the "database-name" attribute., +	 */, +	static final String DB_NAME_ATTRIBUTE = "database-name";, +, +, +		setDatabaseName(element, builder);, +	private void setDatabaseName(Element element, BeanDefinitionBuilder builder) {, +		// 1) Check for an explicit database name, +		String name = element.getAttribute(DB_NAME_ATTRIBUTE);, +, +		// 2) Fall back to an implicit database name based on the ID, +		if (!StringUtils.hasText(name)) {, +			name = element.getAttribute(ID_ATTRIBUTE);, +, +		if (StringUtils.hasText(name)) {, +			builder.addPropertyValue("databaseName", name);, +		}, +, +		// 3) Let EmbeddedDatabaseFactory set the default "testdb" name, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +	/**, +	 * Constant for the "database-name" attribute., +	 */, +	static final String DB_NAME_ATTRIBUTE = "database-name";, +, +, +		setDatabaseName(element, builder);, +	private void setDatabaseName(Element element, BeanDefinitionBuilder builder) {, +		// 1) Check for an explicit database name, +		String name = element.getAttribute(DB_NAME_ATTRIBUTE);, +, +		// 2) Fall back to an implicit database name based on the ID, +		if (!StringUtils.hasText(name)) {, +			name = element.getAttribute(ID_ATTRIBUTE);, +, +		if (StringUtils.hasText(name)) {, +			builder.addPropertyValue("databaseName", name);, +		}, +, +		// 3) Let EmbeddedDatabaseFactory set the default "testdb" name, +++ b/spring-jdbc/src/main/resources/org/springframework/jdbc/config/spring-jdbc-4.2.xsd, +					<xsd:attribute name="database-name" type="xsd:string" default="">, +						<xsd:annotation>, +							<xsd:documentation><![CDATA[, +			The name to assign to the embedded database. Note that this is not the, +			bean name but rather the name of the embedded database as used in the JDBC, +			connection URL for the database. Defaults to "testdb" if an explicit bean, +			'id' has not been provided., +							]]></xsd:documentation>, +						</xsd:annotation>, +					</xsd:attribute>, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +	/**, +	 * Constant for the "database-name" attribute., +	 */, +	static final String DB_NAME_ATTRIBUTE = "database-name";, +, +, +		setDatabaseName(element, builder);, +	private void setDatabaseName(Element element, BeanDefinitionBuilder builder) {, +		// 1) Check for an explicit database name, +		String name = element.getAttribute(DB_NAME_ATTRIBUTE);, +, +		// 2) Fall back to an implicit database name based on the ID, +		if (!StringUtils.hasText(name)) {, +			name = element.getAttribute(ID_ATTRIBUTE);, +, +		if (StringUtils.hasText(name)) {, +			builder.addPropertyValue("databaseName", name);, +		}, +, +		// 3) Let EmbeddedDatabaseFactory set the default "testdb" name, +++ b/spring-jdbc/src/main/resources/org/springframework/jdbc/config/spring-jdbc-4.2.xsd, +					<xsd:attribute name="database-name" type="xsd:string" default="">, +						<xsd:annotation>, +							<xsd:documentation><![CDATA[, +			The name to assign to the embedded database. Note that this is not the, +			bean name but rather the name of the embedded database as used in the JDBC, +			connection URL for the database. Defaults to "testdb" if an explicit bean, +			'id' has not been provided., +							]]></xsd:documentation>, +						</xsd:annotation>, +					</xsd:attribute>, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java, +import org.springframework.jdbc.datasource.AbstractDriverBasedDataSource;, +import static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.*;, +	public void createWithResourcePattern() throws Exception {, +		assertCorrectSetup("jdbc-config-pattern.xml", "dataSource");, +	public void createWithAnonymousDataSourceAndDefaultDatabaseName() throws Exception {, +		assertCorrectSetupForSingleDataSource("jdbc-config-db-name-default-and-anonymous-datasource.xml",, +			DEFAULT_DATABASE_NAME);, +	}, +, +	@Test, +	public void createWithImplicitDatabaseName() throws Exception {, +		assertCorrectSetupForSingleDataSource("jdbc-config-db-name-implicit.xml", "dataSource");, +	}, +]