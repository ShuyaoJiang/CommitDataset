[+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/DispatcherHandler.java, +		if (handlerAdapter == null) {, +			return Publishers.error(new IllegalStateException("No HandlerAdapter for " + handler));, +		}, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +, +		return Publishers.concatMap(resultPublisher, result -> {, +		});, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/DispatcherHandler.java, +		if (handlerAdapter == null) {, +			return Publishers.error(new IllegalStateException("No HandlerAdapter for " + handler));, +		}, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +, +		return Publishers.concatMap(resultPublisher, result -> {, +		});, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerAdapter.java, +import org.reactivestreams.Publisher;, +, +	Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/DispatcherHandler.java, +		if (handlerAdapter == null) {, +			return Publishers.error(new IllegalStateException("No HandlerAdapter for " + handler));, +		}, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +, +		return Publishers.concatMap(resultPublisher, result -> {, +		});, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerAdapter.java, +import org.reactivestreams.Publisher;, +, +	Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import reactor.Publishers;, +	public Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler) {, +, +		return Publishers.just(new HandlerResult(httpHandler, completion));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/DispatcherHandler.java, +		if (handlerAdapter == null) {, +			return Publishers.error(new IllegalStateException("No HandlerAdapter for " + handler));, +		}, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +, +		return Publishers.concatMap(resultPublisher, result -> {, +		});, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerAdapter.java, +import org.reactivestreams.Publisher;, +, +	Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import reactor.Publishers;, +	public Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler) {, +, +		return Publishers.just(new HandlerResult(httpHandler, completion));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java, +import org.reactivestreams.Publisher;, +import reactor.Publishers;, +, +	public Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler) {, +		InvocableHandlerMethod handlerMethod = new InvocableHandlerMethod((HandlerMethod) handler);, +		handlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		try {, +			Object result = handlerMethod.invokeForRequest(request);, +			return Publishers.just(new HandlerResult(handlerMethod, result));, +		}, +		catch (Exception e) {, +			// TODO: remove throws declaration from InvocableHandlerMethod, +			return Publishers.error(e);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/DispatcherHandler.java, +		if (handlerAdapter == null) {, +			return Publishers.error(new IllegalStateException("No HandlerAdapter for " + handler));, +		}, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +, +		return Publishers.concatMap(resultPublisher, result -> {, +		});, +		return null;, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerAdapter.java, +import org.reactivestreams.Publisher;, +, +	Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import reactor.Publishers;, +	public Publisher<HandlerResult> handle(ReactiveServerHttpRequest request,, +			ReactiveServerHttpResponse response, Object handler) {, +, +		return Publishers.just(new HandlerResult(httpHandler, completion));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java]