[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return isInJavaLangAnnotationPackage(annotation.annotationType().getName());, +	}, +, +	/**, +	 * Determine if the {@link Annotation} with the supplied name is defined, +	 * in the core JDK {@code java.lang.annotation} package., +	 * @param annotationType the name of the annotation type to check (never {@code null} or empty), +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 * @since 4.2, +	 */, +	public static boolean isInJavaLangAnnotationPackage(String annotationType) {, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +		return annotationType.startsWith("java.lang.annotation");, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return isInJavaLangAnnotationPackage(annotation.annotationType().getName());, +	}, +, +	/**, +	 * Determine if the {@link Annotation} with the supplied name is defined, +	 * in the core JDK {@code java.lang.annotation} package., +	 * @param annotationType the name of the annotation type to check (never {@code null} or empty), +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 * @since 4.2, +	 */, +	public static boolean isInJavaLangAnnotationPackage(String annotationType) {, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +		return annotationType.startsWith("java.lang.annotation");, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		return (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationType) && this.attributesMap.containsKey(annotationType));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return isInJavaLangAnnotationPackage(annotation.annotationType().getName());, +	}, +, +	/**, +	 * Determine if the {@link Annotation} with the supplied name is defined, +	 * in the core JDK {@code java.lang.annotation} package., +	 * @param annotationType the name of the annotation type to check (never {@code null} or empty), +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 * @since 4.2, +	 */, +	public static boolean isInJavaLangAnnotationPackage(String annotationType) {, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +		return annotationType.startsWith("java.lang.annotation");, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		return (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationType) && this.attributesMap.containsKey(annotationType));, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +		assertEquals(names(Transactional.class, Component.class), names);, +		assertEquals(names(TransactionalComponent.class, Transactional.class, Component.class), names);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return isInJavaLangAnnotationPackage(annotation.annotationType().getName());, +	}, +, +	/**, +	 * Determine if the {@link Annotation} with the supplied name is defined, +	 * in the core JDK {@code java.lang.annotation} package., +	 * @param annotationType the name of the annotation type to check (never {@code null} or empty), +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 * @since 4.2, +	 */, +	public static boolean isInJavaLangAnnotationPackage(String annotationType) {, +		Assert.hasText(annotationType, "annotationType must not be null or empty");, +		return annotationType.startsWith("java.lang.annotation");, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		return (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationType) && this.attributesMap.containsKey(annotationType));, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +		assertEquals(names(Transactional.class, Component.class), names);, +		assertEquals(names(TransactionalComponent.class, Transactional.class, Component.class), names);, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(metadata.isAnnotated(Documented.class.getName()), is(false));]