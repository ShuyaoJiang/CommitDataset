[+++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import java.text.ParseException;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +		final Map<FieldFormatterKey, GenericConverter> cachedPrinters = new ConcurrentHashMap<FieldFormatterKey, GenericConverter>();, +		final Map<FieldFormatterKey, GenericConverter> cachedParsers = new ConcurrentHashMap<FieldFormatterKey, GenericConverter>();, +		, +					FieldFormatterKey key = new FieldFormatterKey(sourceType.getAnnotation(annotationType), fieldType);, +					GenericConverter converter = cachedPrinters.get(key);, +					if (converter == null) {, +						Printer<?> printer = annotationFormatterFactory.getPrinter(key.getAnnotation(), key.getFieldType());, +						converter = new PrinterConverter(fieldType, printer, FormattingConversionService.this);, +						cachedPrinters.put(key, converter);, +					}, +					return converter.convert(source, sourceType, targetType);, +					FieldFormatterKey key = new FieldFormatterKey(targetType.getAnnotation(annotationType), fieldType);, +					GenericConverter converter = cachedParsers.get(key);, +					if (converter == null) {, +						Parser<?> printer = annotationFormatterFactory.getParser(key.getAnnotation(), key.getFieldType());, +						converter = new ParserConverter(fieldType, printer, FormattingConversionService.this);, +						cachedParsers.put(key, converter);, +					}, +					return converter.convert(source, sourceType, targetType);, +	private static final class FieldFormatterKey {, +		, +		private final Annotation annotation;, +		, +		private final Class<?> fieldType;, +		, +		public FieldFormatterKey(Annotation annotation, Class<?> fieldType) {, +			this.annotation = annotation;, +			this.fieldType = fieldType;, +		}, +		, +		public Annotation getAnnotation() {, +			return annotation;, +		}, +		, +		public Class<?> getFieldType() {, +			return fieldType;, +		}, +		, +		public boolean equals(Object o) {, +			if (!(o instanceof FieldFormatterKey)) {, +				return false;, +			}, +			FieldFormatterKey key = (FieldFormatterKey) o;, +			return this.annotation.equals(key.annotation) && this.fieldType.equals(key.fieldType);, +		}, +		, +		public int hashCode() {, +			return this.annotation.hashCode() + this.fieldType.hashCode();, +		}, +		, +	}, +			Object result;, +				result = this.parser.parse(text, LocaleContextHolder.getLocale());, +			} catch (ParseException e) {, +				throw new IllegalArgumentException("Unable to parse '" + text + "'", e);, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import java.text.ParseException;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +		final Map<FieldFormatterKey, GenericConverter> cachedPrinters = new ConcurrentHashMap<FieldFormatterKey, GenericConverter>();, +		final Map<FieldFormatterKey, GenericConverter> cachedParsers = new ConcurrentHashMap<FieldFormatterKey, GenericConverter>();, +		, +					FieldFormatterKey key = new FieldFormatterKey(sourceType.getAnnotation(annotationType), fieldType);, +					GenericConverter converter = cachedPrinters.get(key);, +					if (converter == null) {, +						Printer<?> printer = annotationFormatterFactory.getPrinter(key.getAnnotation(), key.getFieldType());, +						converter = new PrinterConverter(fieldType, printer, FormattingConversionService.this);, +						cachedPrinters.put(key, converter);, +					}, +					return converter.convert(source, sourceType, targetType);, +					FieldFormatterKey key = new FieldFormatterKey(targetType.getAnnotation(annotationType), fieldType);, +					GenericConverter converter = cachedParsers.get(key);, +					if (converter == null) {, +						Parser<?> printer = annotationFormatterFactory.getParser(key.getAnnotation(), key.getFieldType());, +						converter = new ParserConverter(fieldType, printer, FormattingConversionService.this);, +						cachedParsers.put(key, converter);, +					}, +					return converter.convert(source, sourceType, targetType);, +	private static final class FieldFormatterKey {, +		, +		private final Annotation annotation;, +		, +		private final Class<?> fieldType;, +		, +		public FieldFormatterKey(Annotation annotation, Class<?> fieldType) {, +			this.annotation = annotation;, +			this.fieldType = fieldType;, +		}, +		, +		public Annotation getAnnotation() {, +			return annotation;, +		}, +		, +		public Class<?> getFieldType() {, +			return fieldType;]