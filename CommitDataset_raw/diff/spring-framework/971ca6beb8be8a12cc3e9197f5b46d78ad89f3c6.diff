[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java, +import java.util.Collections;, +import org.springframework.core.codec.Encoder;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.reactive.ViewResolver;, +import org.springframework.web.reactive.view.ViewResolverResultHandler;, +import org.springframework.web.reactive.view.freemarker.FreeMarkerConfigurer;, +import org.springframework.web.reactive.view.freemarker.FreeMarkerViewResolver;, +	@Test, +	public void html() throws Exception {, +, +		RestTemplate restTemplate = new RestTemplate();, +, +		URI url = new URI("http://localhost:" + port + "/html?name=Jason");, +		RequestEntity<Void> request = RequestEntity.get(url).accept(MediaType.TEXT_HTML).build();, +		ResponseEntity<String> response = restTemplate.exchange(request, String.class);, +, +		assertEquals("<html><body>Hello: Jason!</body></html>", response.getBody());, +	}, +, +		assertEquals(2, this.wac.getBean(TestRestController.class).persons.size());, +		private DataBufferAllocator allocator = new DefaultDataBufferAllocator();, +, +, +			List<Encoder<?>> encoders = Arrays.asList(, +					new ByteBufferEncoder(this.allocator), new StringEncoder(this.allocator),, +					new JacksonJsonEncoder(this.allocator, new JsonObjectEncoder(this.allocator)));, +			ResponseBodyResultHandler resultHandler = new ResponseBodyResultHandler(encoders, conversionService());, +			resultHandler.setOrder(1);, +			return resultHandler;, +			SimpleHandlerResultHandler resultHandler = new SimpleHandlerResultHandler(conversionService());, +			resultHandler.setOrder(2);, +			return resultHandler;, +		}, +, +		@Bean, +		public ViewResolverResultHandler viewResolverResultHandler() {, +			List<ViewResolver> resolvers = Collections.singletonList(freeMarkerViewResolver());, +			ViewResolverResultHandler resultHandler = new ViewResolverResultHandler(resolvers, conversionService());, +			resultHandler.setOrder(3);, +			return resultHandler;, +		}, +, +		@Bean, +		public ViewResolver freeMarkerViewResolver() {, +			FreeMarkerViewResolver viewResolver = new FreeMarkerViewResolver("", ".ftl");, +			viewResolver.setBufferAllocator(this.allocator);, +			return viewResolver;, +		}, +, +		@Bean, +		public FreeMarkerConfigurer freeMarkerConfig() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			configurer.setPreferFileSystemAccess(false);, +			configurer.setTemplateLoaderPath("classpath*:org/springframework/web/reactive/view/freemarker/");, +			return configurer;, +		public TestRestController testRestController() {, +			return new TestRestController();, +		}, +, +		@Bean, +	private static class TestRestController {, +	@Controller, +	@SuppressWarnings("unused"), +	private static class TestController {, +, +		@RequestMapping("/html"), +		public String getHtmlPage(@RequestParam String name, Model model) {, +			model.addAttribute("hello", "Hello: " + name + "!");, +			return "test";, +		}, +, +	}, +]