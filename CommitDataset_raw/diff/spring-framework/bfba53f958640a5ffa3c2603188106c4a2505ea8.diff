[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +, +import org.springframework.util.ObjectUtils;, +	 * The default is a {@link SimpleKeyGenerator}., +		if (logger.isTraceEnabled()) {, +			logger.trace("Invalidating " + (key != null ? "cache key [" + key + "]" : "entire cache") +, +		if (!passing && logger.isTraceEnabled()) {, +			logger.trace("Cache condition failed on method " + context.method + " for operation " + context.operation);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Computed cache key " + key + " for operation " + context.operation);, +				this.contexts.add(operation.getClass(), getOperationContext(operation, method, args, target, targetClass));, +			Object[] varArgs = ObjectUtils.toObjectArray(args[args.length - 1]);, +			return evaluator.createEvaluationContext(, +					this.caches, this.method, this.args, this.target, this.targetClass, result);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +, +import org.springframework.util.ObjectUtils;, +	 * The default is a {@link SimpleKeyGenerator}., +		if (logger.isTraceEnabled()) {, +			logger.trace("Invalidating " + (key != null ? "cache key [" + key + "]" : "entire cache") +, +		if (!passing && logger.isTraceEnabled()) {, +			logger.trace("Cache condition failed on method " + context.method + " for operation " + context.operation);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Computed cache key " + key + " for operation " + context.operation);, +				this.contexts.add(operation.getClass(), getOperationContext(operation, method, args, target, targetClass));, +			Object[] varArgs = ObjectUtils.toObjectArray(args[args.length - 1]);, +			return evaluator.createEvaluationContext(, +					this.caches, this.method, this.args, this.target, this.targetClass, result);, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +, + * @author Juergen Hoeller, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr11124Config.class);, +	@Test, +	public void spr11249() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr11249Config.class);, +		Spr11249Service bean = context.getBean(Spr11249Service.class);, +		Object result = bean.doSomething("op", 2, 3);, +		assertSame(result, bean.doSomething("op", 2, 3));, +		context.close();, +	}, +, +, +, +, +		@Cacheable("smallCache"), +	}, +, +	@Configuration, +	@EnableCaching, +	public static class Spr11249Config {, +, +		@Bean, +		public CacheManager cacheManager() {, +			return new ConcurrentMapCacheManager();, +		}, +, +		@Bean, +		public Spr11249Service service() {, +			return new Spr11249Service();, +		}, +	}, +, +, +	public static class Spr11249Service {, +, +		@Cacheable("smallCache"), +		public Object doSomething(String name, int... values) {, +			return new Object();, +		}]