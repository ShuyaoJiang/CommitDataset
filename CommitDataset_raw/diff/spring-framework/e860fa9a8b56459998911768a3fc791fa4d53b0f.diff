[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +		if (romePresent) {, +			this.messageConverters.add(new AtomFeedHttpMessageConverter());, +			this.messageConverters.add(new RssChannelHttpMessageConverter());, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +		if (romePresent) {, +			this.messageConverters.add(new AtomFeedHttpMessageConverter());, +			this.messageConverters.add(new RssChannelHttpMessageConverter());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			RootBeanDefinition stringConverterDef = createConverterBeanDefinition(StringHttpMessageConverter.class, source);, +			if (romePresent) {, +				messageConverters.add(createConverterBeanDefinition(AtomFeedHttpMessageConverter.class, source));, +				messageConverters.add(createConverterBeanDefinition(RssChannelHttpMessageConverter.class, source));, +			}, +	private RootBeanDefinition createConverterBeanDefinition(, +			Class<? extends HttpMessageConverter> converterClass, Object source) {, +, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +		if (romePresent) {, +			this.messageConverters.add(new AtomFeedHttpMessageConverter());, +			this.messageConverters.add(new RssChannelHttpMessageConverter());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			RootBeanDefinition stringConverterDef = createConverterBeanDefinition(StringHttpMessageConverter.class, source);, +			if (romePresent) {, +				messageConverters.add(createConverterBeanDefinition(AtomFeedHttpMessageConverter.class, source));, +				messageConverters.add(createConverterBeanDefinition(RssChannelHttpMessageConverter.class, source));, +			}, +	private RootBeanDefinition createConverterBeanDefinition(, +			Class<? extends HttpMessageConverter> converterClass, Object source) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	private static final boolean jaxb2Present =, +			ClassUtils.isPresent("javax.xml.bind.Binder", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper", WebMvcConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static final boolean jacksonPresent =, +			ClassUtils.isPresent("org.codehaus.jackson.map.ObjectMapper", WebMvcConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("org.codehaus.jackson.JsonGenerator", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", WebMvcConfigurationSupport.class.getClassLoader());, +, +		if (romePresent) {, +		if (jaxb2Present) {, +			messageConverters.add(new Jaxb2RootElementHttpMessageConverter());, +		}, +		if (jackson2Present) {, +			messageConverters.add(new MappingJackson2HttpMessageConverter());, +		}, +		else if (jacksonPresent) {, +			messageConverters.add(new MappingJacksonHttpMessageConverter());, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +		if (romePresent) {, +			this.messageConverters.add(new AtomFeedHttpMessageConverter());, +			this.messageConverters.add(new RssChannelHttpMessageConverter());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			RootBeanDefinition stringConverterDef = createConverterBeanDefinition(StringHttpMessageConverter.class, source);, +			if (romePresent) {, +				messageConverters.add(createConverterBeanDefinition(AtomFeedHttpMessageConverter.class, source));, +				messageConverters.add(createConverterBeanDefinition(RssChannelHttpMessageConverter.class, source));, +			}, +	private RootBeanDefinition createConverterBeanDefinition(, +			Class<? extends HttpMessageConverter> converterClass, Object source) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	private static final boolean jaxb2Present =, +			ClassUtils.isPresent("javax.xml.bind.Binder", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper", WebMvcConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static final boolean jacksonPresent =, +			ClassUtils.isPresent("org.codehaus.jackson.map.ObjectMapper", WebMvcConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("org.codehaus.jackson.JsonGenerator", WebMvcConfigurationSupport.class.getClassLoader());, +, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", WebMvcConfigurationSupport.class.getClassLoader());, +, +		if (romePresent) {, +		if (jaxb2Present) {, +			messageConverters.add(new Jaxb2RootElementHttpMessageConverter());, +		}, +		if (jackson2Present) {, +			messageConverters.add(new MappingJackson2HttpMessageConverter());, +		}, +		else if (jacksonPresent) {, +			messageConverters.add(new MappingJacksonHttpMessageConverter());, +		}, +++ b/src/dist/changelog.txt, +* move RSS/Atom message converter registration ahead of jackson/jaxb2]