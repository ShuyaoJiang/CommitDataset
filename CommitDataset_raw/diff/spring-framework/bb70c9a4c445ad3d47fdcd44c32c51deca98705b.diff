[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Value.java, + * <p>Typically used for expression-driven dependency injection. Also supported, + * for dynamic resolution of handler method parameters, e.g. in Spring MVC., + *, + * <p>A common use case is to assign default field values using, + * "#{systemProperties.myProp}" style expressions., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Value.java, + * <p>Typically used for expression-driven dependency injection. Also supported, + * for dynamic resolution of handler method parameters, e.g. in Spring MVC., + *, + * <p>A common use case is to assign default field values using, + * "#{systemProperties.myProp}" style expressions., +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.web.context.request.RequestScope;, +public class AnnotationMethodHandlerAdapter extends PortletContentGenerator implements HandlerAdapter, BeanFactoryAware {, +	private ConfigurableBeanFactory beanFactory;, +, +	private BeanExpressionContext expressionContext;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			this.beanFactory = (ConfigurableBeanFactory) beanFactory;, +			this.expressionContext = new BeanExpressionContext(this.beanFactory, new RequestScope());, +		}, +	}, +, +					parameterNameDiscoverer, customArgumentResolvers, null);, +		protected Object resolveDefaultValue(String value) {, +			if (beanFactory == null) {, +				return value;, +			}, +			String placeholdersResolved = beanFactory.resolveEmbeddedValue(value);, +			BeanExpressionResolver exprResolver = beanFactory.getBeanExpressionResolver();, +			if (exprResolver == null) {, +				return value;, +			}, +			return exprResolver.evaluate(placeholdersResolved, expressionContext);, +		}, +, +		@Override, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Value.java, + * <p>Typically used for expression-driven dependency injection. Also supported, + * for dynamic resolution of handler method parameters, e.g. in Spring MVC., + *, + * <p>A common use case is to assign default field values using, + * "#{systemProperties.myProp}" style expressions., +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.web.context.request.RequestScope;, +public class AnnotationMethodHandlerAdapter extends PortletContentGenerator implements HandlerAdapter, BeanFactoryAware {, +	private ConfigurableBeanFactory beanFactory;, +, +	private BeanExpressionContext expressionContext;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			this.beanFactory = (ConfigurableBeanFactory) beanFactory;, +			this.expressionContext = new BeanExpressionContext(this.beanFactory, new RequestScope());, +		}, +	}, +, +					parameterNameDiscoverer, customArgumentResolvers, null);, +		protected Object resolveDefaultValue(String value) {, +			if (beanFactory == null) {, +				return value;, +			}, +			String placeholdersResolved = beanFactory.resolveEmbeddedValue(value);, +			BeanExpressionResolver exprResolver = beanFactory.getBeanExpressionResolver();, +			if (exprResolver == null) {, +				return value;, +			}, +			return exprResolver.evaluate(placeholdersResolved, expressionContext);, +		}, +, +		@Override, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.web.context.request.RequestScope;, +public class AnnotationMethodHandlerAdapter extends WebContentGenerator implements HandlerAdapter, BeanFactoryAware {, +	private ConfigurableBeanFactory beanFactory;, +, +	private BeanExpressionContext expressionContext;, +, +	private final Map<Class<?>, ServletHandlerMethodResolver> methodResolverCache =, +			new ConcurrentHashMap<Class<?>, ServletHandlerMethodResolver>();, +, +	public void setBeanFactory(BeanFactory beanFactory) {]