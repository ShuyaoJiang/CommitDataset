[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/AfterReturningAdviceInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * @see MethodBeforeAdviceInterceptor, + * @see ThrowsAdviceInterceptor, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/AfterReturningAdviceInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * @see MethodBeforeAdviceInterceptor, + * @see ThrowsAdviceInterceptor, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/MethodBeforeAdviceInterceptor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.BeforeAdvice;, + * @see AfterReturningAdviceInterceptor, + * @see ThrowsAdviceInterceptor, +public class MethodBeforeAdviceInterceptor implements MethodInterceptor, BeforeAdvice, Serializable {, +	private final MethodBeforeAdvice advice;, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/AfterReturningAdviceInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * @see MethodBeforeAdviceInterceptor, + * @see ThrowsAdviceInterceptor, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/MethodBeforeAdviceInterceptor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.BeforeAdvice;, + * @see AfterReturningAdviceInterceptor, + * @see ThrowsAdviceInterceptor, +public class MethodBeforeAdviceInterceptor implements MethodInterceptor, BeforeAdvice, Serializable {, +	private final MethodBeforeAdvice advice;, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptor.java, + * @see MethodBeforeAdviceInterceptor, + * @see AfterReturningAdviceInterceptor, +	 * @param throwsAdvice the advice object that defines the exception handler methods, +	 * (usually a {@link org.springframework.aop.ThrowsAdvice} implementation), +					(method.getParameterCount() == 1 || method.getParameterCount() == 4)) {, +				Class<?> throwableParam = method.getParameterTypes()[method.getParameterCount() - 1];, +				if (Throwable.class.isAssignableFrom(throwableParam)) {, +					// An exception handler to register..., +					this.exceptionHandlerMap.put(throwableParam, method);, +						logger.debug("Found exception handler method on throws advice: " + method);, +					}, +, +	/**, +	 * Return the number of handler methods in this advice., +	 */, +, +	@Override, +	public Object invoke(MethodInvocation mi) throws Throwable {, +		try {, +			return mi.proceed();, +		}, +		catch (Throwable ex) {, +			Method handlerMethod = getExceptionHandler(ex);, +			if (handlerMethod != null) {, +				invokeHandlerMethod(mi, ex, handlerMethod);, +			}, +			throw ex;, +		}, +	}, +, +	 * Determine the exception handle method for the given exception., +	 * @return a handler for the given exception type, or {@code null} if none found]