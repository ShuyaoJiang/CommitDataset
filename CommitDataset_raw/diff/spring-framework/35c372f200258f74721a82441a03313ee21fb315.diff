[+++ b/build.gradle, +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/build.gradle, +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * {@code @ContextConfiguration} defines class-level metadata that is used to determine, + * how to load and configure an {@link org.springframework.context.ApplicationContext, + * ApplicationContext} for integration tests., + * <p>, + * Prior to Spring 3.1, only path-based resource locations (typically XML configuration, + * files) were supported. As of Spring 3.1, {@linkplain #loader context loaders} may, + * choose to support <em>either</em> path-based <em>or</em> class-based resources. As of, + * Spring 4.0.4, {@linkplain #loader context loaders} may choose to support path-based, + * {@code @ContextConfiguration} can be used to declare either path-based resource, + * locations (via the {@link #locations} or {@link #value} attribute) <em>or</em>, + * annotated classes (via the {@link #classes} attribute). Note, however, that most, + * implementations of {@link SmartContextLoader} only support a single resource type. As, + * of Spring 4.1, path-based resource locations may be either XML configuration files or, + * Groovy scripts (if Groovy is on the classpath). Of course, third-party frameworks may, + * choose to support additional types of path-based resources., + * <p>, + * The term <em>annotated class</em> can refer to any of the following., + * <li>A class annotated with {@link org.springframework.context.annotation.Configuration, + * @Configuration}</li>, + * <li>Any other class that contains {@link org.springframework.context.annotation.Bean, + * @Bean}-methods</li>, + * <p>, + * Consult the Javadoc for {@link org.springframework.context.annotation.Configuration, + * @Configuration} and {@link org.springframework.context.annotation.Bean @Bean} for, + * further information regarding the configuration and semantics of, + * <p>, + * As of Spring Framework 4.0, this annotation may be used as a <em>meta-annotation</em>, + * to create custom <em>composed annotations</em>., +	 * will be interpreted at runtime, in particular in case of a relative, +	 * AbstractContextLoader.generateDefaultLocations()} for details on the, +	 * default locations that are going to be used if none are specified., +	 * <p>Note that the aforementioned default rules only apply for a standard, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader} or, +	 * {@link org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader}, +	 * which are the effective default implementations used at runtime if, +	 * {@code locations} are configured. See the documentation for {@link #loader}, +	 * for further details regarding default loaders., +	 * {@code "base-context.xml"} <strong>and</strong>, +	 * {@code "extended-context.xml"}, in that order. Beans defined in, +	 * {@code "extended-context.xml"} may therefore override those defined, +	 * in {@code "base-context.xml"}., +	 * &#064;ContextConfiguration("base-context.xml"), +	 * &#064;ContextConfiguration("extended-context.xml"), +	 * {@link org.springframework.test.context.support.AbstractContextLoader AbstractContextLoader},, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader},, +	 * {@link org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader},, +	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader},, +	 * {@link org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader},, +	 * {@link org.springframework.test.context.web.GenericGroovyXmlWebContextLoader GenericGroovyXmlWebContextLoader}, and, +	 * {@link org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader}., +++ b/build.gradle, +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * {@code @ContextConfiguration} defines class-level metadata that is used to determine, + * how to load and configure an {@link org.springframework.context.ApplicationContext, + * ApplicationContext} for integration tests., + * <p>, + * Prior to Spring 3.1, only path-based resource locations (typically XML configuration, + * files) were supported. As of Spring 3.1, {@linkplain #loader context loaders} may, + * choose to support <em>either</em> path-based <em>or</em> class-based resources. As of, + * Spring 4.0.4, {@linkplain #loader context loaders} may choose to support path-based, + * {@code @ContextConfiguration} can be used to declare either path-based resource, + * locations (via the {@link #locations} or {@link #value} attribute) <em>or</em>, + * annotated classes (via the {@link #classes} attribute). Note, however, that most, + * implementations of {@link SmartContextLoader} only support a single resource type. As, + * of Spring 4.1, path-based resource locations may be either XML configuration files or, + * Groovy scripts (if Groovy is on the classpath). Of course, third-party frameworks may, + * choose to support additional types of path-based resources., + * <p>, + * The term <em>annotated class</em> can refer to any of the following., + * <li>A class annotated with {@link org.springframework.context.annotation.Configuration, + * @Configuration}</li>, + * <li>Any other class that contains {@link org.springframework.context.annotation.Bean, + * @Bean}-methods</li>, + * <p>, + * Consult the Javadoc for {@link org.springframework.context.annotation.Configuration, + * @Configuration} and {@link org.springframework.context.annotation.Bean @Bean} for, + * further information regarding the configuration and semantics of, + * <p>, + * As of Spring Framework 4.0, this annotation may be used as a <em>meta-annotation</em>, + * to create custom <em>composed annotations</em>., +	 * will be interpreted at runtime, in particular in case of a relative, +	 * AbstractContextLoader.generateDefaultLocations()} for details on the, +	 * default locations that are going to be used if none are specified., +	 * <p>Note that the aforementioned default rules only apply for a standard, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader} or, +	 * {@link org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader}, +	 * which are the effective default implementations used at runtime if, +	 * {@code locations} are configured. See the documentation for {@link #loader}, +	 * for further details regarding default loaders., +	 * {@code "base-context.xml"} <strong>and</strong>, +	 * {@code "extended-context.xml"}, in that order. Beans defined in, +	 * {@code "extended-context.xml"} may therefore override those defined, +	 * in {@code "base-context.xml"}., +	 * &#064;ContextConfiguration("base-context.xml")]