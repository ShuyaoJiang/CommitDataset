[+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, +import static org.junit.Assert.*;, +, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		TestableAsyncUncaughtExceptionHandler exceptionHandler =, +				context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class);, +		catch (InterruptedException ex) {, +			fail("Should not have failed with InterruptedException: " + ex);, +		catch (ExecutionException ex) {, +			assertEquals("Wrong exception cause", UnsupportedOperationException.class, ex.getCause().getClass());, +	private ConfigurableApplicationContext initContext(BeanDefinition asyncAnnotationBeanPostProcessorDefinition) {, +, +, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, +import static org.junit.Assert.*;, +, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		TestableAsyncUncaughtExceptionHandler exceptionHandler =, +				context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class);, +		catch (InterruptedException ex) {, +			fail("Should not have failed with InterruptedException: " + ex);, +		catch (ExecutionException ex) {, +			assertEquals("Wrong exception cause", UnsupportedOperationException.class, ex.getCause().getClass());, +	private ConfigurableApplicationContext initContext(BeanDefinition asyncAnnotationBeanPostProcessorDefinition) {, +, +, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static <A extends Annotation> A findAnnotation(Class<?> clazz, Class<A> annotationType, Set<Annotation> visited) {, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, +import static org.junit.Assert.*;, +, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		ITestBean testBean = context.getBean("target", ITestBean.class);, +		TestableAsyncUncaughtExceptionHandler exceptionHandler =, +				context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class);, +		catch (InterruptedException ex) {, +			fail("Should not have failed with InterruptedException: " + ex);, +		catch (ExecutionException ex) {, +			assertEquals("Wrong exception cause", UnsupportedOperationException.class, ex.getCause().getClass());, +	private ConfigurableApplicationContext initContext(BeanDefinition asyncAnnotationBeanPostProcessorDefinition) {, +, +, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static <A extends Annotation> A findAnnotation(Class<?> clazz, Class<A> annotationType, Set<Annotation> visited) {, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertySource.java, +	 * <p>Often useful in testing scenarios when creating anonymous implementations that, +	 * never query an actual source but rather return hard-coded values., +	 * <p>This implementation simply checks for a {@code null} return value, +	 * from {@link #getProperty(String)}. Subclasses may wish to implement, +	 * a more efficient algorithm if possible., +	 * debug. If debug is enabled, produce verbose output including the hash code of the, +				"ComparisonPropertySource instances are for use with collection comparison only";]