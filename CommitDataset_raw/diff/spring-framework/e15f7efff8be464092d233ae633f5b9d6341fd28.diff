[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(desc, autowiredBeanName);, +											this.cachedMethodArguments[i] =, +													new ShortcutDependencyDescriptor(descriptors[i], autowiredBeanName);, +, +	/**, +	 * DependencyDescriptor variant with a pre-resolved target bean name., +	 */, +	@SuppressWarnings("serial"), +	private static class ShortcutDependencyDescriptor extends DependencyDescriptor {, +, +		private final String shortcutBeanName;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutBeanName) {, +			super(original);, +			this.shortcutBeanName = shortcutBeanName;, +		}, +, +		@Override, +		public Object resolveShortcut(BeanFactory beanFactory) {, +			return resolveCandidate(this.shortcutBeanName, beanFactory);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(desc, autowiredBeanName);, +											this.cachedMethodArguments[i] =, +													new ShortcutDependencyDescriptor(descriptors[i], autowiredBeanName);, +, +	/**, +	 * DependencyDescriptor variant with a pre-resolved target bean name., +	 */, +	@SuppressWarnings("serial"), +	private static class ShortcutDependencyDescriptor extends DependencyDescriptor {, +, +		private final String shortcutBeanName;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutBeanName) {, +			super(original);, +			this.shortcutBeanName = shortcutBeanName;, +		}, +, +		@Override, +		public Object resolveShortcut(BeanFactory beanFactory) {, +			return resolveCandidate(this.shortcutBeanName, beanFactory);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	/**, +	 * Resolve a shortcut for this dependency against the given factory, for example, +	 * taking some pre-resolved information into account., +	 * <p>The resolution algorithm will first attempt to resolve a shortcut through this, +	 * method before going into the regular type matching algorithm across all beans., +	 * Subclasses may override this method to improve resolution performance based on, +	 * pre-cached information while still receiving {@link InjectionPoint} exposure etc., +	 * @param beanFactory the associated factory, +	 * @return the shortcut result if any, or {@code null} if none, +	 * @since 4.3.1, +	 */, +	public Object resolveShortcut(BeanFactory beanFactory) {, +		return null;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(desc, autowiredBeanName);, +											this.cachedMethodArguments[i] =, +													new ShortcutDependencyDescriptor(descriptors[i], autowiredBeanName);, +, +	/**, +	 * DependencyDescriptor variant with a pre-resolved target bean name., +	 */, +	@SuppressWarnings("serial"), +	private static class ShortcutDependencyDescriptor extends DependencyDescriptor {, +, +		private final String shortcutBeanName;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutBeanName) {, +			super(original);, +			this.shortcutBeanName = shortcutBeanName;, +		}, +, +		@Override, +		public Object resolveShortcut(BeanFactory beanFactory) {, +			return resolveCandidate(this.shortcutBeanName, beanFactory);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	/**, +	 * Resolve a shortcut for this dependency against the given factory, for example, +	 * taking some pre-resolved information into account., +	 * <p>The resolution algorithm will first attempt to resolve a shortcut through this, +	 * method before going into the regular type matching algorithm across all beans., +	 * Subclasses may override this method to improve resolution performance based on, +	 * pre-cached information while still receiving {@link InjectionPoint} exposure etc., +	 * @param beanFactory the associated factory, +	 * @return the shortcut result if any, or {@code null} if none, +	 * @since 4.3.1, +	 */]