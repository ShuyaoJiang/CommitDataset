[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, +import org.springframework.validation.BindingResult;, + * @author Juergen Hoeller, +		Assert.notNull(marshaller, "Marshaller must not be null");, +		this.marshaller = marshaller;, +	 * Locate the object to be marshalled., +	 * <p>The default implementation first attempts to look under the configured, +	 * {@linkplain #setModelKey(String) model key}, if any, before attempting to, +	 * locate an object of {@linkplain Marshaller#supports(Class) supported type}., +			if (obj != null && (model.size() == 1 || !(obj instanceof BindingResult)) &&, +					this.marshaller.supports(obj.getClass())) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, +import org.springframework.validation.BindingResult;, + * @author Juergen Hoeller, +		Assert.notNull(marshaller, "Marshaller must not be null");, +		this.marshaller = marshaller;, +	 * Locate the object to be marshalled., +	 * <p>The default implementation first attempts to look under the configured, +	 * {@linkplain #setModelKey(String) model key}, if any, before attempting to, +	 * locate an object of {@linkplain Marshaller#supports(Class) supported type}., +			if (obj != null && (model.size() == 1 || !(obj instanceof BindingResult)) &&, +					this.marshaller.supports(obj.getClass())) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/xml/MarshallingViewTests.java, +import java.util.LinkedHashMap;, +import org.springframework.validation.BeanPropertyBindingResult;, +import org.springframework.validation.BindingResult;, +	private Marshaller marshallerMock;, +, +, +	public void renderNoModelKeyAndBindingResultFirst() throws Exception {, +		Object toBeMarshalled = new Object();, +		String modelKey = "key";, +		Map<String, Object> model = new LinkedHashMap<String, Object>();, +		model.put(BindingResult.MODEL_KEY_PREFIX + modelKey, new BeanPropertyBindingResult(toBeMarshalled, modelKey));, +		model.put(modelKey, toBeMarshalled);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		given(marshallerMock.supports(BeanPropertyBindingResult.class)).willReturn(true);, +		given(marshallerMock.supports(Object.class)).willReturn(true);, +, +		view.render(model, request, response);, +		assertEquals("Invalid content type", "application/xml", response.getContentType());, +		assertEquals("Invalid content length", 0, response.getContentLength());, +		verify(marshallerMock).marshal(eq(toBeMarshalled), isA(StreamResult.class));, +	}, +, +	@Test]