[+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * Copyright 2002-2014 the original author or authors., +		this.bindingResult = new DirectFieldBindingResult(getTarget(), getObjectName(), isAutoGrowNestedPaths());, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * Copyright 2002-2014 the original author or authors., +		this.bindingResult = new DirectFieldBindingResult(getTarget(), getObjectName(), isAutoGrowNestedPaths());, +++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, +	private final boolean autoGrowNestedPaths;, +, +		this(target, objectName, true);, +	}, +, +	/**, +	 * Create a new DirectFieldBindingResult instance., +	 * @param target the target object to bind onto, +	 * @param objectName the name of the target object, +	 * @param autoGrowNestedPaths whether to "auto-grow" a nested path that contains a null value, +	 */, +	public DirectFieldBindingResult(Object target, String objectName, boolean autoGrowNestedPaths) {, +		this.autoGrowNestedPaths = autoGrowNestedPaths;, +			this.directFieldAccessor.setAutoGrowNestedPaths(this.autoGrowNestedPaths);, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * Copyright 2002-2014 the original author or authors., +		this.bindingResult = new DirectFieldBindingResult(getTarget(), getObjectName(), isAutoGrowNestedPaths());, +++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, +	private final boolean autoGrowNestedPaths;, +, +		this(target, objectName, true);, +	}, +, +	/**, +	 * Create a new DirectFieldBindingResult instance., +	 * @param target the target object to bind onto, +	 * @param objectName the name of the target object, +	 * @param autoGrowNestedPaths whether to "auto-grow" a nested path that contains a null value, +	 */, +	public DirectFieldBindingResult(Object target, String objectName, boolean autoGrowNestedPaths) {, +		this.autoGrowNestedPaths = autoGrowNestedPaths;, +			this.directFieldAccessor.setAutoGrowNestedPaths(this.autoGrowNestedPaths);, +++ b/spring-context/src/test/java/org/springframework/tests/sample/beans/FieldAccessBean.java, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * Copyright 2002-2014 the original author or authors., +		this.bindingResult = new DirectFieldBindingResult(getTarget(), getObjectName(), isAutoGrowNestedPaths());, +++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, +	private final boolean autoGrowNestedPaths;, +, +		this(target, objectName, true);, +	}, +, +	/**, +	 * Create a new DirectFieldBindingResult instance., +	 * @param target the target object to bind onto, +	 * @param objectName the name of the target object, +	 * @param autoGrowNestedPaths whether to "auto-grow" a nested path that contains a null value, +	 */, +	public DirectFieldBindingResult(Object target, String objectName, boolean autoGrowNestedPaths) {, +		this.autoGrowNestedPaths = autoGrowNestedPaths;, +			this.directFieldAccessor.setAutoGrowNestedPaths(this.autoGrowNestedPaths);, +++ b/spring-context/src/test/java/org/springframework/tests/sample/beans/FieldAccessBean.java, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderFieldAccessTests.java, +import static org.junit.Assert.*;, +, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +import org.springframework.beans.NullValueInNestedPathException;, +public class DataBinderFieldAccessTests {, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void bindingNoErrors() throws Exception {, +	@Test, +	public void bindingNoErrorsNotIgnoreUnknown() throws Exception {, +	@Test, +	public void bindingWithErrors() throws Exception {, +	@Test, +	public void nestedBindingWithDefaultConversionNoErrors() throws Exception {, +	@Test, +	public void nestedBindingWithDisabledAutoGrow() throws Exception {, +		FieldAccessBean rod = new FieldAccessBean();, +		DataBinder binder = new DataBinder(rod, "person");, +		binder.setAutoGrowNestedPaths(false);, +		binder.initDirectFieldAccess();, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.addPropertyValue(new PropertyValue("spouse.name", "Kerry"));, +, +		thrown.expect(NullValueInNestedPathException.class);, +		binder.bind(pvs);, +	}, +, +	@Test, +	public void bindingWithErrorsAndCustomEditors() throws Exception {]