[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, +import org.springframework.core.annotation.AnnotationUtils;, +				// Explicit qualifier metadata on bean definition? (typically in XML definition), +				// Corresponding qualifier on factory method? (typically in configuration class), +						Qualifier targetAnnotation = AnnotationUtils.getAnnotation(factoryMethod, Qualifier.class);, +						if (targetAnnotation != null) {, +							return qualifier.equals(targetAnnotation.value());, +				// Corresponding qualifier on bean implementation class? (for custom user types), +				Class<?> beanType = bf.getType(beanName);, +				if (beanType != null) {, +					Qualifier targetAnnotation = AnnotationUtils.getAnnotation(beanType, Qualifier.class);, +					if (targetAnnotation != null) {, +						return qualifier.equals(targetAnnotation.value());, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, +import org.springframework.core.annotation.AnnotationUtils;, +				// Explicit qualifier metadata on bean definition? (typically in XML definition), +				// Corresponding qualifier on factory method? (typically in configuration class), +						Qualifier targetAnnotation = AnnotationUtils.getAnnotation(factoryMethod, Qualifier.class);, +						if (targetAnnotation != null) {, +							return qualifier.equals(targetAnnotation.value());, +				// Corresponding qualifier on bean implementation class? (for custom user types), +				Class<?> beanType = bf.getType(beanName);, +				if (beanType != null) {, +					Qualifier targetAnnotation = AnnotationUtils.getAnnotation(beanType, Qualifier.class);, +					if (targetAnnotation != null) {, +						return qualifier.equals(targetAnnotation.value());, +					}, +				}, +++ b/spring-tx/src/test/java/org/springframework/transaction/config/AnnotationDrivenTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		ApplicationContext parent = new AnnotationConfigApplicationContext(TransactionManagerConfiguration.class);, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"annotationDrivenConfigurationClassTests.xml"}, getClass(), parent);, +		doTestWithMultipleTransactionManagers(context);, +	}, +, +	@Test, +	public void withAnnotatedTransactionManagers() throws Exception {, +		parent.registerBeanDefinition("transactionManager1", new RootBeanDefinition(SynchTransactionManager.class));, +		parent.registerBeanDefinition("transactionManager2", new RootBeanDefinition(NoSynchTransactionManager.class));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, +import org.springframework.core.annotation.AnnotationUtils;, +				// Explicit qualifier metadata on bean definition? (typically in XML definition), +				// Corresponding qualifier on factory method? (typically in configuration class), +						Qualifier targetAnnotation = AnnotationUtils.getAnnotation(factoryMethod, Qualifier.class);, +						if (targetAnnotation != null) {, +							return qualifier.equals(targetAnnotation.value());, +				// Corresponding qualifier on bean implementation class? (for custom user types), +				Class<?> beanType = bf.getType(beanName);, +				if (beanType != null) {, +					Qualifier targetAnnotation = AnnotationUtils.getAnnotation(beanType, Qualifier.class);, +					if (targetAnnotation != null) {, +						return qualifier.equals(targetAnnotation.value());, +					}, +				}, +++ b/spring-tx/src/test/java/org/springframework/transaction/config/AnnotationDrivenTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		ApplicationContext parent = new AnnotationConfigApplicationContext(TransactionManagerConfiguration.class);, +		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"annotationDrivenConfigurationClassTests.xml"}, getClass(), parent);, +		doTestWithMultipleTransactionManagers(context);, +	}, +, +	@Test, +	public void withAnnotatedTransactionManagers() throws Exception {, +		parent.registerBeanDefinition("transactionManager1", new RootBeanDefinition(SynchTransactionManager.class));, +		parent.registerBeanDefinition("transactionManager2", new RootBeanDefinition(NoSynchTransactionManager.class));, +++ b/spring-tx/src/test/java/org/springframework/transaction/config/NoSynch.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.transaction.config;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.springframework.beans.factory.annotation.Qualifier;, +, +/**, + * @author Juergen Hoeller, + */, +@Qualifier("noSynch"), +@Retention(RetentionPolicy.RUNTIME), +public @interface NoSynch {, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java]