[+++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, + * Tests for {@link JmsMessagingTemplate}., + * , +		this.messagingTemplate = new JmsMessagingTemplate(this.jmsTemplate);, +		assertSame(this.jmsTemplate, this.messagingTemplate.getJmsTemplate());, +		this.messagingTemplate.send(destination, message);, +		verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.send("myQueue", message);, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.setDefaultDestination(destination);, +		this.messagingTemplate.send(message);, +		verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.setDefaultDestinationName("myQueue");, +		this.messagingTemplate.send(message);, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue());, +		this.thrown.expect(IllegalStateException.class);, +		this.messagingTemplate.send(message);, +		t.setJmsTemplate(this.jmsTemplate);, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.convertAndSend(destination, "my Payload");, +		verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());, +		TextMessage textMessage = createTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.convertAndSend("myQueue", "my Payload");, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		TextMessage textMessage = createTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.setDefaultDestination(destination);, +		this.messagingTemplate.convertAndSend("my Payload");, +		verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());, +		TextMessage textMessage = createTextMessage(this.messageCreator.getValue());, +		this.messagingTemplate.setDefaultDestinationName("myQueue");, +		this.messagingTemplate.convertAndSend("my Payload");, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		TextMessage textMessage = createTextMessage(this.messageCreator.getValue());, +		this.thrown.expect(IllegalStateException.class);, +		this.messagingTemplate.convertAndSend("my Payload");, +		this.messagingTemplate.setJmsMessageConverter(new SimpleMessageConverter() {, +		this.messagingTemplate.convertAndSend("myQueue", "msg to convert");, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);, +		this.thrown.expectMessage(new StringContains("Test exception"));, +		this.messageCreator.getValue().createMessage(mock(Session.class));, +		this.messagingTemplate.convertAndSend(destination, "Hello", headers);, +		verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue()); // see createTextMessage, +		this.messagingTemplate.convertAndSend("myQueue", "Hello", headers);, +		verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture());, +		assertTextMessage(this.messageCreator.getValue()); // see createTextMessage, +		given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);, +		Message<?> message = this.messagingTemplate.receive(destination);, +		verify(this.jmsTemplate).receive(destination);, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		Message<?> message = this.messagingTemplate.receive("myQueue");, +		verify(this.jmsTemplate).receive("myQueue");, +		this.messagingTemplate.setDefaultDestination(destination);, +		given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);, +		Message<?> message = this.messagingTemplate.receive();, +		verify(this.jmsTemplate).receive(destination);, +		this.messagingTemplate.setDefaultDestinationName("myQueue");, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		Message<?> message = this.messagingTemplate.receive();, +		verify(this.jmsTemplate).receive("myQueue");, +		this.thrown.expect(IllegalStateException.class);, +		this.messagingTemplate.receive();, +		given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);, +		String payload = this.messagingTemplate.receiveAndConvert(destination, String.class);, +		verify(this.jmsTemplate).receive(destination);, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		String payload = this.messagingTemplate.receiveAndConvert("myQueue", String.class);, +		verify(this.jmsTemplate).receive("myQueue");, +		this.messagingTemplate.setDefaultDestination(destination);, +		given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);, +		String payload = this.messagingTemplate.receiveAndConvert(String.class);, +		verify(this.jmsTemplate).receive(destination);, +		this.messagingTemplate.setDefaultDestinationName("myQueue");, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		String payload = this.messagingTemplate.receiveAndConvert(String.class);, +		verify(this.jmsTemplate).receive("myQueue");, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		this.messagingTemplate.setMessageConverter(new GenericMessageConverter());, +		Integer payload = this.messagingTemplate.receiveAndConvert("myQueue", Integer.class);, +		verify(this.jmsTemplate).receive("myQueue");, +		given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage);, +		this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);, +		this.messagingTemplate.receiveAndConvert("myQueue", Writer.class);, +		given(this.jmsTemplate.receive("myQueue")).willReturn(null);, +		assertNull(this.messagingTemplate.receiveAndConvert("myQueue", String.class));, +		given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		Message<?> actual = this.messagingTemplate.sendAndReceive(destination, request);, +		verify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(this.jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		Message<?> actual = this.messagingTemplate.sendAndReceive("myQueue", request);, +		verify(this.jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		this.messagingTemplate.setDefaultDestination(destination);, +		given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		Message<?> actual = this.messagingTemplate.sendAndReceive(request);]