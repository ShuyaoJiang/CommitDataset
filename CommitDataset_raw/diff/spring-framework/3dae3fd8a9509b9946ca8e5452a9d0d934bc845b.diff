[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * @author Rossen Stoyanchev, +			if (this.executionException != null) {, +				Throwable cause = this.executionException.getCause();, +				failureCallback.onFailure(cause != null ? cause : this.executionException);, +			}, +			else {, +		}, +			// Ignore, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * @author Rossen Stoyanchev, +			if (this.executionException != null) {, +				Throwable cause = this.executionException.getCause();, +				failureCallback.onFailure(cause != null ? cause : this.executionException);, +			}, +			else {, +		}, +			// Ignore, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FailureCallback.java, + * Copyright 2002-2015 the original author or authors., + * Failure callback for a {@link ListenableFuture}., +	 * Called when the {@link ListenableFuture} completes with failure., +	 * <p>Note that Exceptions raised by this method are ignored., +	 * @param ex the failure, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * @author Rossen Stoyanchev, +			if (this.executionException != null) {, +				Throwable cause = this.executionException.getCause();, +				failureCallback.onFailure(cause != null ? cause : this.executionException);, +			}, +			else {, +		}, +			// Ignore, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FailureCallback.java, + * Copyright 2002-2015 the original author or authors., + * Failure callback for a {@link ListenableFuture}., +	 * Called when the {@link ListenableFuture} completes with failure., +	 * <p>Note that Exceptions raised by this method are ignored., +	 * @param ex the failure, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2015 the original author or authors., + * Extend {@link Future} with the capability to accept completion callbacks., + * If the future has completed when the callback is added, the callback is, + * triggered immediately., + *, +	 * Register the given {@code ListenableFutureCallback}., +	 * Java 8 lambda-friendly alternative with success and failure callbacks., +	 * @param successCallback the success callback, +	 * @param failureCallback the failure callback, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * @author Rossen Stoyanchev, +			if (this.executionException != null) {, +				Throwable cause = this.executionException.getCause();, +				failureCallback.onFailure(cause != null ? cause : this.executionException);, +			}, +			else {, +		}, +			// Ignore, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FailureCallback.java, + * Copyright 2002-2015 the original author or authors., + * Failure callback for a {@link ListenableFuture}., +	 * Called when the {@link ListenableFuture} completes with failure., +	 * <p>Note that Exceptions raised by this method are ignored., +	 * @param ex the failure, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2015 the original author or authors., + * Extend {@link Future} with the capability to accept completion callbacks., + * If the future has completed when the callback is added, the callback is, + * triggered immediately., + *, +	 * Register the given {@code ListenableFutureCallback}., +	 * Java 8 lambda-friendly alternative with success and failure callbacks., +	 * @param successCallback the success callback, +	 * @param failureCallback the failure callback, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureAdapter.java, +				T adapted;, +					adapted = adaptInternal(result);, +					return;, +					return;, +				}, +				try {, +					successCallback.onSuccess(adapted);, +				}, +				catch (Throwable e) {, +					// Ignore, +				try {, +				catch (Throwable t) {, +					// Ignore, +				}, +			}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * @author Rossen Stoyanchev, +			if (this.executionException != null) {, +				Throwable cause = this.executionException.getCause();, +				failureCallback.onFailure(cause != null ? cause : this.executionException);, +			}, +			else {, +		}, +			// Ignore, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FailureCallback.java]