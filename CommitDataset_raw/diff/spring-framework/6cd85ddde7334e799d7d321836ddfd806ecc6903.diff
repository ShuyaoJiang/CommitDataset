[+++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java, + * Copyright 2002-2016 the original author or authors., +		if (this.cacheResolver != null) {, +			cacheAspect.setCacheResolver(this.cacheResolver);, +		}, +		else if (this.cacheManager != null) {, +		if (this.errorHandler != null) {, +			cacheAspect.setErrorHandler(this.errorHandler);, +		}, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java, + * Copyright 2002-2016 the original author or authors., +		if (this.cacheResolver != null) {, +			cacheAspect.setCacheResolver(this.cacheResolver);, +		}, +		else if (this.cacheManager != null) {, +		if (this.errorHandler != null) {, +			cacheAspect.setErrorHandler(this.errorHandler);, +		}, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJEnableCachingIsolatedTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.aspectj;, +, +import org.junit.After;, +import org.junit.Ignore;, +import org.junit.Test;, +, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.CacheTestUtils;, +import org.springframework.cache.annotation.CachingConfigurerSupport;, +import org.springframework.cache.annotation.EnableCaching;, +import org.springframework.cache.config.AnnotatedClassCacheableService;, +import org.springframework.cache.config.CacheableService;, +import org.springframework.cache.config.DefaultCacheableService;, +import org.springframework.cache.config.SomeCustomKeyGenerator;, +import org.springframework.cache.config.SomeKeyGenerator;, +import org.springframework.cache.interceptor.CacheErrorHandler;, +import org.springframework.cache.interceptor.CacheInterceptor;, +import org.springframework.cache.interceptor.CacheResolver;, +import org.springframework.cache.interceptor.KeyGenerator;, +import org.springframework.cache.interceptor.NamedCacheResolver;, +import org.springframework.cache.interceptor.SimpleCacheErrorHandler;, +import org.springframework.cache.interceptor.SimpleCacheResolver;, +import org.springframework.cache.support.NoOpCacheManager;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AdviceMode;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import static org.junit.Assert.*;, +, +/**, + *, + * @author Stephane Nicoll, + */, +public class AspectJEnableCachingIsolatedTests {, +, +	private ConfigurableApplicationContext ctx;, +, +	@After, +	public void closeContext() {, +		if (this.ctx != null) {, +			this.ctx.close();, +		}, +	}, +, +	@Test, +	public void testKeyStrategy() {, +		load(EnableCachingConfig.class);, +		AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class);, +		assertSame(this.ctx.getBean("keyGenerator", KeyGenerator.class), aspect.getKeyGenerator());, +	}, +, +	@Test, +	public void testCacheErrorHandler() {, +		load(EnableCachingConfig.class);, +		AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class);, +		assertSame(this.ctx.getBean("errorHandler", CacheErrorHandler.class), aspect.getErrorHandler());, +	}, +, +	// --- local tests -------, +, +	@Test, +	public void singleCacheManagerBean() throws Throwable {]