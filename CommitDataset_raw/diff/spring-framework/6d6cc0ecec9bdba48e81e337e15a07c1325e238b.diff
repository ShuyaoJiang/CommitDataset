[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.java, +	private final TaskScheduler sockJsTaskScheduler;, +	private MultiValueMap<WebSocketHandler, String> handlerMap = new LinkedMultiValueMap<WebSocketHandler, String>();, +	private HandshakeInterceptor[] interceptors;, +	private SockJsServiceRegistration sockJsServiceRegistration;, +	protected HandshakeHandler getHandshakeHandler() {, +		return this.handshakeHandler;, +		if (this.interceptors != null) {, +		}, +	protected final M getMappings() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.java, +	private final TaskScheduler sockJsTaskScheduler;, +	private MultiValueMap<WebSocketHandler, String> handlerMap = new LinkedMultiValueMap<WebSocketHandler, String>();, +	private HandshakeInterceptor[] interceptors;, +	private SockJsServiceRegistration sockJsServiceRegistration;, +	protected HandshakeHandler getHandshakeHandler() {, +		return this.handshakeHandler;, +		if (this.interceptors != null) {, +		}, +	protected final M getMappings() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration.java, +	 * Configure interceptors for the handshake request., +	 */, +	WebSocketHandlerRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.java, +	private final TaskScheduler sockJsTaskScheduler;, +	private MultiValueMap<WebSocketHandler, String> handlerMap = new LinkedMultiValueMap<WebSocketHandler, String>();, +	private HandshakeInterceptor[] interceptors;, +	private SockJsServiceRegistration sockJsServiceRegistration;, +	protected HandshakeHandler getHandshakeHandler() {, +		return this.handshakeHandler;, +		if (this.interceptors != null) {, +		}, +	protected final M getMappings() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration.java, +	 * Configure interceptors for the handshake request., +	 */, +	WebSocketHandlerRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +	/**, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.java, +	private final TaskScheduler sockJsTaskScheduler;, +	private MultiValueMap<WebSocketHandler, String> handlerMap = new LinkedMultiValueMap<WebSocketHandler, String>();, +	private HandshakeInterceptor[] interceptors;, +	private SockJsServiceRegistration sockJsServiceRegistration;, +	protected HandshakeHandler getHandshakeHandler() {, +		return this.handshakeHandler;, +		if (this.interceptors != null) {, +		}, +	protected final M getMappings() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration.java, +	 * Configure interceptors for the handshake request., +	 */, +	WebSocketHandlerRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +	/**, +++ /dev/null, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistryTests.java, + * Test fixture for, + * {@link org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry}., +	private WebMvcStompEndpointRegistry endpointRegistry;, +		this.endpointRegistry = new WebMvcStompEndpointRegistry(this.webSocketHandler,, +		this.endpointRegistry.addEndpoint("/stomp");, +		SimpleUrlHandlerMapping hm = (SimpleUrlHandlerMapping) this.endpointRegistry.getHandlerMapping();, +		this.endpointRegistry.setUrlPathHelper(pathHelper);, +		this.endpointRegistry.addEndpoint("/stompOverWebSocket");, +		this.endpointRegistry.addEndpoint("/stompOverSockJS").withSockJS();, +		hm = (SimpleUrlHandlerMapping) this.endpointRegistry.getHandlerMapping();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration.java, +	private final TaskScheduler sockJsTaskScheduler;, +	private MultiValueMap<WebSocketHandler, String> handlerMap = new LinkedMultiValueMap<WebSocketHandler, String>();, +	private HandshakeInterceptor[] interceptors;, +	private SockJsServiceRegistration sockJsServiceRegistration;, +	protected HandshakeHandler getHandshakeHandler() {, +		return this.handshakeHandler;, +		if (this.interceptors != null) {, +		}, +	protected final M getMappings() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration.java, +	 * Configure interceptors for the handshake request., +	 */, +	WebSocketHandlerRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +	/**, +++ /dev/null, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistryTests.java, + * Test fixture for, + * {@link org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry}., +	private WebMvcStompEndpointRegistry endpointRegistry;, +		this.endpointRegistry = new WebMvcStompEndpointRegistry(this.webSocketHandler,, +		this.endpointRegistry.addEndpoint("/stomp");, +		SimpleUrlHandlerMapping hm = (SimpleUrlHandlerMapping) this.endpointRegistry.getHandlerMapping();, +		this.endpointRegistry.setUrlPathHelper(pathHelper);, +		this.endpointRegistry.addEndpoint("/stompOverWebSocket");, +		this.endpointRegistry.addEndpoint("/stompOverSockJS").withSockJS();, +		hm = (SimpleUrlHandlerMapping) this.endpointRegistry.getHandlerMapping();, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistrationTests.java]