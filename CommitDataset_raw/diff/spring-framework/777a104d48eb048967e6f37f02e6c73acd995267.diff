[+++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.0.M2 (2009-02-11), +* "systemProperties" bean is not considered a default match for type Properties anymore, +* registered plain singletons will be fully matched according to their qualifiers, +* all "taskExecutor" bean properties now accept any "java.util.concurrent.Executor", +* added "Future submit(Runnable)" and "Future submit(Callable)" to AsyncTaskExecutor, +* SimpleAsyncTaskExecutor supports a custom "java.util.concurrent.ThreadFactory", +* SchedulingTaskExecutor interface extends AsyncTaskExecutor now, +* added ThreadPoolExecutorFactoryBean (exposing the native ExecutorService interface), +* added ExecutorServiceAdapter class as a standard wrapper for a Spring TaskExecutor, +* reduced backport-concurrent support to TaskExecutor adapters, +* added @Async annotation and AsyncAnnotationAdvisor (namespace support coming in M3), +* EJB 3.1's @Asynchronous annotation gets detected and supported by default as well, +* ApplicationListener beans get obtained on demand, supporting non-singletons as well, +* ApplicationListeners will be called in the order according to the Ordered contract, +* generified ApplicationListener interface, narrowing the event type to be received, +* generified Hibernate/Jdo/JpaCallback with generic "doInXxx" return type, +* HibernateOperations uses generic parameter/return types where possible, +* JdoOperations uses generic parameter/return types where possible (following JDO 2.1), +* removed "flush" operation from JdoDialect (fully relying on JDO 2.0+ compliance now), +* added JDO 2.1 compliant StandardPersistenceManagerProxy/SpringPersistenceManagerProxy, +* Spring-created EntityManagers support JPA 2.0 draft API ("unwrap", "getQueryBuilder"), +* Spring initiates JPA 2.0 query timeout with remaining Spring transaction timeout, +* added support for WebSphere's ResourceAdapter-managed messaging transactions, +* refined @PathVariable handling in MVC handler methods, +* updated Spring Portlet MVC infrastructure and mocks for Portlet API 2.0, +* revised TaskExecutor interface to extend "java.util.concurrent.Executor" now, +++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.0.M2 (2009-02-11), +* "systemProperties" bean is not considered a default match for type Properties anymore, +* registered plain singletons will be fully matched according to their qualifiers, +* all "taskExecutor" bean properties now accept any "java.util.concurrent.Executor", +* added "Future submit(Runnable)" and "Future submit(Callable)" to AsyncTaskExecutor, +* SimpleAsyncTaskExecutor supports a custom "java.util.concurrent.ThreadFactory", +* SchedulingTaskExecutor interface extends AsyncTaskExecutor now, +* added ThreadPoolExecutorFactoryBean (exposing the native ExecutorService interface), +* added ExecutorServiceAdapter class as a standard wrapper for a Spring TaskExecutor, +* reduced backport-concurrent support to TaskExecutor adapters, +* added @Async annotation and AsyncAnnotationAdvisor (namespace support coming in M3), +* EJB 3.1's @Asynchronous annotation gets detected and supported by default as well, +* ApplicationListener beans get obtained on demand, supporting non-singletons as well, +* ApplicationListeners will be called in the order according to the Ordered contract, +* generified ApplicationListener interface, narrowing the event type to be received, +* generified Hibernate/Jdo/JpaCallback with generic "doInXxx" return type, +* HibernateOperations uses generic parameter/return types where possible, +* JdoOperations uses generic parameter/return types where possible (following JDO 2.1), +* removed "flush" operation from JdoDialect (fully relying on JDO 2.0+ compliance now), +* added JDO 2.1 compliant StandardPersistenceManagerProxy/SpringPersistenceManagerProxy, +* Spring-created EntityManagers support JPA 2.0 draft API ("unwrap", "getQueryBuilder"), +* Spring initiates JPA 2.0 query timeout with remaining Spring transaction timeout, +* added support for WebSphere's ResourceAdapter-managed messaging transactions, +* refined @PathVariable handling in MVC handler methods, +* updated Spring Portlet MVC infrastructure and mocks for Portlet API 2.0, +* revised TaskExecutor interface to extend "java.util.concurrent.Executor" now, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.interceptor;, +, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Future;, +, +import org.aopalliance.intercept.MethodInterceptor;, +import org.aopalliance.intercept.MethodInvocation;, +, +import org.springframework.core.Ordered;, +import org.springframework.core.task.AsyncTaskExecutor;, +import org.springframework.core.task.support.TaskExecutorAdapter;, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * AOP Alliance <code>MethodInterceptor</code> that processes method invocations, + * asynchronously, using a given {@link org.springframework.core.task.AsyncTaskExecutor}., + * Typically used with the {@link org.springframework.context.task.Async} annotation., + *, + * <p>In terms of target method signatures, any parameter types are supported., + * However, the return type is constrained to either <code>void</code> or, + * <code>java.util.concurrent.Future</code>. In the latter case, the Future handle, + * returned from the proxy will be an actual asynchronous Future that can be used, + * to track the result of the asynchronous method execution. However, since the, + * target method needs to implement the same signature, it will have to return, + * a temporary Future handle that just passes the return value through, + * (like Spring's {@link org.springframework.scheduling.annotation.AsyncResult}, + * or EJB 3.1's <code>javax.ejb.AsyncResult</code>).]