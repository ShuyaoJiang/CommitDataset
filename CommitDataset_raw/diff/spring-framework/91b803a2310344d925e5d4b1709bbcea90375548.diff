[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.io.UnsupportedEncodingException;, +		return (resourcePath.startsWith(locationPath) && !isInvalidEncodedPath(resourcePath));, +		return (location instanceof UrlResource && this.urlPathHelper != null && this.urlPathHelper.isUrlDecode());, +	}, +, +	private boolean isInvalidEncodedPath(String resourcePath) {, +		if (resourcePath.contains("%")) {, +			// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars..., +			try {, +				String decodedPath = URLDecoder.decode(resourcePath, "UTF-8");, +				int separatorIndex = decodedPath.indexOf("..") + 2;, +				if (separatorIndex > 1 && separatorIndex < decodedPath.length()) {, +					char separator = decodedPath.charAt(separatorIndex);, +					if (separator == '/' || separator == '\\') {, +						if (logger.isTraceEnabled()) {, +							logger.trace("Resolved resource path contains \"../\" after decoding: " + resourcePath);, +						}, +					}, +					return true;, +				}, +			}, +			catch (UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +		}, +		return false;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.io.UnsupportedEncodingException;, +		return (resourcePath.startsWith(locationPath) && !isInvalidEncodedPath(resourcePath));, +		return (location instanceof UrlResource && this.urlPathHelper != null && this.urlPathHelper.isUrlDecode());, +	}, +, +	private boolean isInvalidEncodedPath(String resourcePath) {, +		if (resourcePath.contains("%")) {, +			// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars..., +			try {, +				String decodedPath = URLDecoder.decode(resourcePath, "UTF-8");, +				int separatorIndex = decodedPath.indexOf("..") + 2;, +				if (separatorIndex > 1 && separatorIndex < decodedPath.length()) {, +					char separator = decodedPath.charAt(separatorIndex);, +					if (separator == '/' || separator == '\\') {, +						if (logger.isTraceEnabled()) {, +							logger.trace("Resolved resource path contains \"../\" after decoding: " + resourcePath);, +						}, +					}, +					return true;, +				}, +			}, +			catch (UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +		}, +		return false;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import java.io.UnsupportedEncodingException;, + * {@link Resource} locations from which static resources are allowed to be served, + * by this handler. Resources could be served from a classpath location, e.g., + * "classpath:/META-INF/public-web-resources/", allowing convenient packaging, + * arbitrary resolution and transformation of resources being served. By default, + * a {@link PathResourceResolver} simply finds resources based on the configured, + * "locations". An application can configure additional resolvers and transformers, + * such as the {@link VersionResourceResolver} which can resolve and prepare URLs, + * for resources with a version in the URL., + * <p>This handler also properly evaluates the {@code Last-Modified} header, + * (if present) so that a {@code 304} status code will be returned as appropriate,, + * avoiding unnecessary overhead for resources that are already cached by the client., +, +		if (isInvalidEncodedPath(path)) {, +				logger.trace("Ignoring invalid resource path with escape sequences [" + path + "]");, +, +, +				path = (slash ? "/" + path.substring(i) : path.substring(i));, +					logger.trace("Path after trimming leading '/' and control characters: [" + path + "]");, +	 * Check whether the given path contains invalid escape sequences., +	 * @param path the path to validate, +	 * @return {@code true} if the path is invalid, {@code false} otherwise, +	 */, +	private boolean isInvalidEncodedPath(String path) {, +		if (path.contains("%")) {, +			try {, +				// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars, +				String decodedPath = URLDecoder.decode(path, "UTF-8");, +				if (isInvalidPath(decodedPath)) {, +					return true;, +				}, +				decodedPath = processPath(decodedPath);, +				if (isInvalidPath(decodedPath)) {, +					return true;, +				}, +			}, +			catch (IllegalArgumentException | UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +		}, +		return false;, +	}, +]