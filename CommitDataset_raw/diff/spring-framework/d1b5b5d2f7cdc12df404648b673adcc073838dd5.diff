[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * @see org.springframework.beans.factory.InitializingBean, +	 * @see org.springframework.context.ConfigurableApplicationContext#refresh(), +	 * {@link org.springframework.beans.factory.DisposableBean} callback interface will, +	 * nevertheless get detected and the corresponding destroy method invoked: In other, +	 * words, {@code destroyMethod=""} only affects custom close/shutdown methods and, +	 * {@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods., +	 * @see org.springframework.beans.factory.DisposableBean, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * @see org.springframework.beans.factory.InitializingBean, +	 * @see org.springframework.context.ConfigurableApplicationContext#refresh(), +	 * {@link org.springframework.beans.factory.DisposableBean} callback interface will, +	 * nevertheless get detected and the corresponding destroy method invoked: In other, +	 * words, {@code destroyMethod=""} only affects custom close/shutdown methods and, +	 * {@link java.io.Closeable}/{@link java.lang.AutoCloseable} declared close methods., +	 * @see org.springframework.beans.factory.DisposableBean, +++ b/spring-context/src/test/java/org/springframework/context/annotation/DestroyMethodInferenceTests.java, +import org.springframework.beans.factory.DisposableBean;, +		WithDisposableBean c9 = ctx.getBean("c9", WithDisposableBean.class);, +		assertThat(c9.closed, is(false));, +		assertThat("c9", c9.closed, is(true));, +				public void close() {, +, +		@Bean(destroyMethod = ""), +		public WithDisposableBean c9() {, +			return new WithDisposableBean();, +		}, +		public void close() {, +			closed = true;, +		}, +	}, +, +, +	static class WithDisposableBean implements DisposableBean {, +, +		boolean closed = false;, +, +		@Override, +		public void destroy() {]