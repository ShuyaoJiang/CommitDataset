[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +, +/**, + * Enables Spring's scheduled task execution capability., + *, + * @author Chris Beams, + * @since 3.1, + */, +@Target(ElementType.TYPE), +@Retention(RetentionPolicy.RUNTIME), +@Import(SchedulingConfiguration.class), +@Documented, +public @interface EnableScheduling {, +, +}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +, +/**, + * Enables Spring's scheduled task execution capability., + *, + * @author Chris Beams, + * @since 3.1, + */, +@Target(ElementType.TYPE), +@Retention(RetentionPolicy.RUNTIME), +@Import(SchedulingConfiguration.class), +@Documented, +public @interface EnableScheduling {, +, +}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.concurrent.ScheduledExecutorService;, +import org.springframework.scheduling.TaskScheduler;, + * @author Chris Beams, + * @see SchedulingConfigurer, + * @see org.springframework.scheduling.config.ScheduledTaskRegistrar, +	private ScheduledTaskRegistrar registrar;, +		if (event.getApplicationContext() != this.applicationContext) {, +			return;, +, +		Map<String, SchedulingConfigurer> configurers = applicationContext.getBeansOfType(SchedulingConfigurer.class);, +, +		if (this.cronTasks.isEmpty() && this.fixedDelayTasks.isEmpty() &&, +				this.fixedRateTasks.isEmpty() && configurers.isEmpty()) {, +			return;, +		}, +, +		this.registrar = new ScheduledTaskRegistrar();, +, +		if (this.scheduler != null) {]