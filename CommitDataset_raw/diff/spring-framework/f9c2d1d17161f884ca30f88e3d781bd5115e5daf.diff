[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Proxy;, +			if (targetClass != null) {, +				if (targetClass.isInterface()) {, +				else if (Proxy.isProxyClass(targetClass)) {, +					specifiedInterfaces = targetClass.getInterfaces();, +				}, +			}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Proxy;, +			if (targetClass != null) {, +				if (targetClass.isInterface()) {, +				else if (Proxy.isProxyClass(targetClass)) {, +					specifiedInterfaces = targetClass.getInterfaces();, +				}, +			}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Proxy;, +			if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Proxy;, +			if (targetClass != null) {, +				if (targetClass.isInterface()) {, +				else if (Proxy.isProxyClass(targetClass)) {, +					specifiedInterfaces = targetClass.getInterfaces();, +				}, +			}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Proxy;, +			if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {, +, +++ b/spring-context/src/test/java/org/springframework/aop/framework/autoproxy/AutoProxyCreatorTests.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import org.springframework.util.ReflectionUtils;, +	public void testAutoProxyCreatorWithFallbackToDynamicProxy() {, +		StaticApplicationContext sac = new StaticApplicationContext();, +, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("proxyFactoryBean", "false");, +		sac.registerSingleton("testAutoProxyCreator", TestAutoProxyCreator.class, pvs);, +, +		sac.registerSingleton("noInterfaces", NoInterfaces.class);, +		sac.registerSingleton("containerCallbackInterfacesOnly", ContainerCallbackInterfacesOnly.class);, +		sac.registerSingleton("singletonNoInterceptor", CustomProxyFactoryBean.class);, +		sac.registerSingleton("singletonToBeProxied", CustomProxyFactoryBean.class);, +		sac.registerPrototype("prototypeToBeProxied", CustomProxyFactoryBean.class);, +, +		sac.refresh();, +, +		MessageSource messageSource = (MessageSource) sac.getBean("messageSource");, +		NoInterfaces noInterfaces = (NoInterfaces) sac.getBean("noInterfaces");, +		ContainerCallbackInterfacesOnly containerCallbackInterfacesOnly =, +				(ContainerCallbackInterfacesOnly) sac.getBean("containerCallbackInterfacesOnly");, +		ITestBean singletonNoInterceptor = (ITestBean) sac.getBean("singletonNoInterceptor");, +		ITestBean singletonToBeProxied = (ITestBean) sac.getBean("singletonToBeProxied");, +		ITestBean prototypeToBeProxied = (ITestBean) sac.getBean("prototypeToBeProxied");, +		assertFalse(AopUtils.isCglibProxy(messageSource));, +		assertTrue(AopUtils.isCglibProxy(noInterfaces));, +		assertTrue(AopUtils.isCglibProxy(containerCallbackInterfacesOnly));, +		assertFalse(AopUtils.isCglibProxy(singletonNoInterceptor));, +		assertFalse(AopUtils.isCglibProxy(singletonToBeProxied));, +		assertFalse(AopUtils.isCglibProxy(prototypeToBeProxied));, +, +		TestAutoProxyCreator tapc = (TestAutoProxyCreator) sac.getBean("testAutoProxyCreator");, +		assertEquals(0, tapc.testInterceptor.nrOfInvocations);, +		singletonNoInterceptor.getName();, +		assertEquals(0, tapc.testInterceptor.nrOfInvocations);, +		singletonToBeProxied.getAge();, +		assertEquals(1, tapc.testInterceptor.nrOfInvocations);, +		prototypeToBeProxied.getSpouse();, +		assertEquals(2, tapc.testInterceptor.nrOfInvocations);, +	}, +, +	@Test, +, +	public static class CustomProxyFactoryBean implements FactoryBean<ITestBean> {, +, +		private final TestBean tb = new TestBean();, +, +		@Override, +		public ITestBean getObject() {, +			return (ITestBean) Proxy.newProxyInstance(CustomProxyFactoryBean.class.getClassLoader(), new Class<?>[]{ITestBean.class}, new InvocationHandler() {, +				@Override, +				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +					return ReflectionUtils.invokeMethod(method, tb, args);, +				}, +			});, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return ITestBean.class;]