[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.apache.commons.logging.Log;, +, +	/**, +	 * Expose the logger to collaborating delegates., +	 * @since 5.0.7, +	 */, +	Log getLogger() {, +		return logger;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.apache.commons.logging.Log;, +, +	/**, +	 * Expose the logger to collaborating delegates., +	 * @since 5.0.7, +	 */, +	Log getLogger() {, +		return logger;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.apache.commons.logging.Log;, +, +	private final Log logger;, +, +		this.logger = beanFactory.getLogger();, +						if (logger.isTraceEnabled()) {, +							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Autowiring by type from bean name '" + beanName +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.apache.commons.logging.Log;, +, +	/**, +	 * Expose the logger to collaborating delegates., +	 * @since 5.0.7, +	 */, +	Log getLogger() {, +		return logger;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.apache.commons.logging.Log;, +, +	private final Log logger;, +, +		this.logger = beanFactory.getLogger();, +						if (logger.isTraceEnabled()) {, +							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Autowiring by type from bean name '" + beanName +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.apache.commons.logging.Log;, +, +	/**, +	 * Expose the logger to collaborating delegates., +	 * @since 5.0.7, +	 */, +	Log getLogger() {, +		return logger;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.apache.commons.logging.Log;, +, +	private final Log logger;, +, +		this.logger = beanFactory.getLogger();, +						if (logger.isTraceEnabled()) {, +							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Autowiring by type from bean name '" + beanName +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	/** Logger available to subclasses */, +	protected final Log logger = LogFactory.getLog(getClass());, +, +				if (logger.isDebugEnabled()) {, +					logger.debug("Alias definition '" + alias + "' ignored since it points to same name");, +				}, +						throw new IllegalStateException("Cannot define alias '" + alias + "' for name '" +, +					if (this.logger.isInfoEnabled()) {, +						logger.info("Overriding alias '" + alias + "' definition for registered name '" +, +								registeredName + "' with new target name '" + name + "'");, +					}, +				if (logger.isDebugEnabled()) {, +					logger.debug("Alias definition '" + alias + "' registered for name '" + name + "'");, +				}]