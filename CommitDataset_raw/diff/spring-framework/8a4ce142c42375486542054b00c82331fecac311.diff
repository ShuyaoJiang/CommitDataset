[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.dao.DuplicateKeyException;, +			String errorCode;, +				// Try to find SQLException with actual error code, looping through the causes., +				// E.g. applicable to java.sql.DataTruncation as of JDK 1.6., +				SQLException current = sqlEx;, +				while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) {, +					current = (SQLException) current.getCause();, +				}, +				errorCode = Integer.toString(current.getErrorCode());, +					for (CustomSQLErrorCodesTranslation customTranslation : customTranslations) {, +			String codes;, +			for (Constructor constructor : constructors) {, +				Class[] parameterTypes = constructor.getParameterTypes();, +			Constructor exceptionConstructor;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.dao.DuplicateKeyException;, +			String errorCode;, +				// Try to find SQLException with actual error code, looping through the causes., +				// E.g. applicable to java.sql.DataTruncation as of JDK 1.6., +				SQLException current = sqlEx;, +				while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) {, +					current = (SQLException) current.getCause();, +				}, +				errorCode = Integer.toString(current.getErrorCode());, +					for (CustomSQLErrorCodesTranslation customTranslation : customTranslations) {, +			String codes;, +			for (Constructor constructor : constructors) {, +				Class[] parameterTypes = constructor.getParameterTypes();, +			Constructor exceptionConstructor;, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java, + * Copyright 2002-2013 the original author or authors., +import java.sql.DataTruncation;, +import java.sql.SQLException;, + * @author Juergen Hoeller, +		BatchUpdateException batchUpdateEx = new BatchUpdateException();, +		batchUpdateEx.setNextException(badSqlEx);, +		BadSqlGrammarException bsgex = (BadSqlGrammarException) sext.translate("task", "SQL", batchUpdateEx);, +	public void testDataTruncationTranslation() {, +		SQLExceptionTranslator sext = new SQLErrorCodeSQLExceptionTranslator(ERROR_CODES);, +, +		SQLException dataAccessEx = new SQLException("", "", 5);, +		DataTruncation dataTruncation = new DataTruncation(1, true, true, 1, 1, dataAccessEx);, +		DataAccessResourceFailureException daex = (DataAccessResourceFailureException) sext.translate("task", "SQL", dataTruncation);, +		assertEquals(dataTruncation, daex.getCause());, +	}]