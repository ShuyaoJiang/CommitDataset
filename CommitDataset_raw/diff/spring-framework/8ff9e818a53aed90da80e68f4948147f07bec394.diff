[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] points to " +, +						"Attribute '%s' in annotation [%s] is declared as an @AliasFor nonexistent attribute '%s' in annotation [%s].",, +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] declares " +, +						"an alias for attribute '%s' in meta-annotation [%s] which is not meta-present.",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s].",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s], not [%s].",, +			if (returnType != aliasedReturnType &&, +					(!aliasedReturnType.isArray() || returnType != aliasedReturnType.getComponentType())) {, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same return type.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare default values.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same default value.",, +				String msg = String.format("In @AliasFor declared on attribute '%s' in annotation [%s], attribute 'attribute' " +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] points to " +, +						"Attribute '%s' in annotation [%s] is declared as an @AliasFor nonexistent attribute '%s' in annotation [%s].",, +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] declares " +, +						"an alias for attribute '%s' in meta-annotation [%s] which is not meta-present.",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s].",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s], not [%s].",, +			if (returnType != aliasedReturnType &&, +					(!aliasedReturnType.isArray() || returnType != aliasedReturnType.getComponentType())) {, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same return type.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare default values.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same default value.",, +				String msg = String.format("In @AliasFor declared on attribute '%s' in annotation [%s], attribute 'attribute' " +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +		Map<String, Object> attributes = new LinkedHashMap<String, Object>(originalAttributes);, +						"Attributes map %s returned null for required attribute '%s' defined by annotation type [%s].",, +							"Attributes map %s returned a value of type [%s] for attribute '%s', " +, +							"but a value of type [%s] is required as defined by annotation type [%s].",, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] points to " +, +						"Attribute '%s' in annotation [%s] is declared as an @AliasFor nonexistent attribute '%s' in annotation [%s].",, +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] declares " +, +						"an alias for attribute '%s' in meta-annotation [%s] which is not meta-present.",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s].",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s], not [%s].",, +			if (returnType != aliasedReturnType &&, +					(!aliasedReturnType.isArray() || returnType != aliasedReturnType.getComponentType())) {, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same return type.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare default values.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same default value.",, +				String msg = String.format("In @AliasFor declared on attribute '%s' in annotation [%s], attribute 'attribute' " +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +		Map<String, Object> attributes = new LinkedHashMap<String, Object>(originalAttributes);, +						"Attributes map %s returned null for required attribute '%s' defined by annotation type [%s].",, +							"Attributes map %s returned a value of type [%s] for attribute '%s', " +, +							"but a value of type [%s] is required as defined by annotation type [%s].",, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +		String pkg();, +	@TestComponentScan(pkg = "com.example.app.test"), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * Copyright 2002-2016 the original author or authors., +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] points to " +, +						"Attribute '%s' in annotation [%s] is declared as an @AliasFor nonexistent attribute '%s' in annotation [%s].",, +				String msg = String.format("@AliasFor declaration on attribute '%s' in annotation [%s] declares " +, +						"an alias for attribute '%s' in meta-annotation [%s] which is not meta-present.",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s].",, +					String msg = String.format("Attribute '%s' in annotation [%s] must be declared as an @AliasFor [%s], not [%s].",, +			if (returnType != aliasedReturnType &&, +					(!aliasedReturnType.isArray() || returnType != aliasedReturnType.getComponentType())) {, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same return type.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare default values.",, +				String msg = String.format("Misconfigured aliases: attribute '%s' in annotation [%s] " +, +						"and attribute '%s' in annotation [%s] must declare the same default value.",, +				String msg = String.format("In @AliasFor declared on attribute '%s' in annotation [%s], attribute 'attribute' " +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, + * Copyright 2002-2016 the original author or authors., +import java.util.LinkedHashMap;, +		Map<String, Object> attributes = new LinkedHashMap<String, Object>(originalAttributes);, +						"Attributes map %s returned null for required attribute '%s' defined by annotation type [%s].",, +							"Attributes map %s returned a value of type [%s] for attribute '%s', " +, +							"but a value of type [%s] is required as defined by annotation type [%s].",, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +		String pkg();, +	@TestComponentScan(pkg = "com.example.app.test"), +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +		Component component = findAnnotation(ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, Component.class);]