[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java, +	/**, +	 * The bean name of the internally managed scheduled annotation processor., +	 */, +	public static final String SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.scheduling.annotation.internalScheduledAnnotationProcessor";, +, +			registerPostProcessor(parserContext, builder, ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME);, +		}, +		if (registry.containsBeanDefinition(SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			parserContext.getReaderContext().error(, +					"Only one ScheduledAnnotationBeanPostProcessor may exist within the context.", source);, +		}, +		else {, +			BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(, +					"org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor");, +			builder.getRawBeanDefinition().setSource(source);, +			String scheduler = element.getAttribute("scheduler");, +			if (StringUtils.hasText(scheduler)) {, +				builder.addPropertyReference("scheduler", scheduler);, +			}, +			registerPostProcessor(parserContext, builder, SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME);, +	private static void registerPostProcessor(, +			ParserContext parserContext, BeanDefinitionBuilder builder, String beanName) {, +		parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());, +		BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);, +		parserContext.registerComponent(new BeanComponentDefinition(holder));, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java, +	/**, +	 * The bean name of the internally managed scheduled annotation processor., +	 */, +	public static final String SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.scheduling.annotation.internalScheduledAnnotationProcessor";, +, +			registerPostProcessor(parserContext, builder, ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME);, +		}, +		if (registry.containsBeanDefinition(SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			parserContext.getReaderContext().error(, +					"Only one ScheduledAnnotationBeanPostProcessor may exist within the context.", source);, +		}, +		else {, +			BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(, +					"org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor");, +			builder.getRawBeanDefinition().setSource(source);, +			String scheduler = element.getAttribute("scheduler");, +			if (StringUtils.hasText(scheduler)) {, +				builder.addPropertyReference("scheduler", scheduler);, +			}, +			registerPostProcessor(parserContext, builder, SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME);, +	private static void registerPostProcessor(, +			ParserContext parserContext, BeanDefinitionBuilder builder, String beanName) {, +		parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());, +		BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);, +		parserContext.registerComponent(new BeanComponentDefinition(holder));, +++ b/org.springframework.context/src/main/resources/org/springframework/scheduling/config/spring-task-3.0.xsd, +			<xsd:attribute name="scheduler" type="xsd:string" use="optional">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	Specifies the org.springframework.scheduling.TaskScheduler or, +	java.util.ScheduledExecutorService instance to use when invoking scheduled, +	methods. If no reference is provided, a TaskScheduler backed by a single, +	thread scheduled executor will be used., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java, +	/**, +	 * The bean name of the internally managed scheduled annotation processor., +	 */, +	public static final String SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.scheduling.annotation.internalScheduledAnnotationProcessor";, +, +			registerPostProcessor(parserContext, builder, ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME);, +		}, +		if (registry.containsBeanDefinition(SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			parserContext.getReaderContext().error(, +					"Only one ScheduledAnnotationBeanPostProcessor may exist within the context.", source);, +		}, +		else {, +			BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(, +					"org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor");, +			builder.getRawBeanDefinition().setSource(source);, +			String scheduler = element.getAttribute("scheduler");, +			if (StringUtils.hasText(scheduler)) {, +				builder.addPropertyReference("scheduler", scheduler);, +			}, +			registerPostProcessor(parserContext, builder, SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME);, +	private static void registerPostProcessor(, +			ParserContext parserContext, BeanDefinitionBuilder builder, String beanName) {, +		parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());, +		BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);, +		parserContext.registerComponent(new BeanComponentDefinition(holder));, +++ b/org.springframework.context/src/main/resources/org/springframework/scheduling/config/spring-task-3.0.xsd, +			<xsd:attribute name="scheduler" type="xsd:string" use="optional">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	Specifies the org.springframework.scheduling.TaskScheduler or, +	java.util.ScheduledExecutorService instance to use when invoking scheduled, +	methods. If no reference is provided, a TaskScheduler backed by a single, +	thread scheduled executor will be used.]