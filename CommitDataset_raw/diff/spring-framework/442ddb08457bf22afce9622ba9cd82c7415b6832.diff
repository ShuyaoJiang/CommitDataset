[+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + * RestTemplate template = new RestTemplate();, + * // AllEncompassingFormHttpMessageConverter is configured by default, + *, + * MultiValueMap&lt;String, String&gt; form = new LinkedMultiValueMap&lt;&gt;();, + * MultiValueMap&lt;String, Object&gt; parts = new LinkedMultiValueMap&lt;&gt;();, + * @see org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter, + * @see org.springframework.util.MultiValueMap, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + * RestTemplate template = new RestTemplate();, + * // AllEncompassingFormHttpMessageConverter is configured by default, + *, + * MultiValueMap&lt;String, String&gt; form = new LinkedMultiValueMap&lt;&gt;();, + * MultiValueMap&lt;String, Object&gt; parts = new LinkedMultiValueMap&lt;&gt;();, + * @see org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter, + * @see org.springframework.util.MultiValueMap, +++ b/src/docs/asciidoc/integration.adoc, +The `exchange` and `execute` methods are generalized versions of the more specific, +methods listed above them and can support additional combinations and methods,, +e.g. HTTP PATCH. However, note that the underlying HTTP library must also support the, +desired combination. The JDK `HttpURLConnection` does not support the `PATCH` method, +but Apache HttpComponents HttpClient version 4.2 or later does. They also enable, +`RestTemplate` to read an HTTP response to a generic type (e.g. `List<Account>`),, +using a `ParameterizedTypeReference`, a new class that enables capturing and passing, +generic type info., +messages by `HttpMessageConverter` implementations. Converters for the main MIME types, +are registered by default, but you can also override the defaults and register custom, +converters via the `messageConverters()` bean property. The default converters are, +`ByteArrayHttpMessageConverter`, `StringHttpMessageConverter`,, +`ResourceHttpMessageConverter`, `SourceHttpMessageConverter` as well as, +`AllEncompassingFormHttpMessageConverter` and a few provider-specific converters:, +e.g. `MappingJackson2HttpMessageConverter` when Jackson is present on the classpath., +Concrete implementations for the main media (MIME) types are provided in the framework, +which it inherits). `JavaMailSender` also provides a callback interface for preparing, +a 'MimeMessage', called `org.springframework.mail.javamail.MimeMessagePreparator`., +					mimeMessage.setText("Dear " + order.getCustomer().getFirstName() + " " +, +							order.getCustomer().getLastName() + ", thanks for your order. " +, +							"Your order number is " + order.getOrderNumber() + ".");, +Inline resources are added to the `MimeMessage` using the specified `Content-ID`, +(`identifier1234` in the above example). The order in which you are adding the text, +and the resource are __very__ important. Be sure to __first add the text__ and after, +that the resources. If you are doing it the other way around, it won't work!]