[+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Spring-specific {@link org.springframework.context.MessageSource} implementation, + * that accesses resource bundles using specified basenames, participating in the, + * Spring {@link org.springframework.context.ApplicationContext}'s resource loading., + *, + * <p>In contrast to the JDK-based {@link ResourceBundleMessageSource}, this class uses, + * {@link java.util.Properties} instances as its custom data structure for messages,, + * loading them via a {@link org.springframework.util.PropertiesPersister} strategy, + * from Spring {@link Resource} handles. This strategy is not only capable of, + * reloading files based on timestamp changes, but also of loading properties files, + * with a specific character encoding. It will detect XML property files as well., +	 * default encoding: ISO-8859-1., +	 * <code>java.util.ResourceBundle</code>. However, this is often not desirable, +	 * in an application server environment, where the system Locale is not relevant, +	 * to the application at all: Set this flag to "false" in such a scenario., +		long refreshTimestamp = (this.cacheMillis < 0 ? -1 : System.currentTimeMillis());, +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Spring-specific {@link org.springframework.context.MessageSource} implementation, + * that accesses resource bundles using specified basenames, participating in the, + * Spring {@link org.springframework.context.ApplicationContext}'s resource loading., + *, + * <p>In contrast to the JDK-based {@link ResourceBundleMessageSource}, this class uses, + * {@link java.util.Properties} instances as its custom data structure for messages,, + * loading them via a {@link org.springframework.util.PropertiesPersister} strategy, + * from Spring {@link Resource} handles. This strategy is not only capable of, + * reloading files based on timestamp changes, but also of loading properties files, + * with a specific character encoding. It will detect XML property files as well., +	 * default encoding: ISO-8859-1., +	 * <code>java.util.ResourceBundle</code>. However, this is often not desirable, +	 * in an application server environment, where the system Locale is not relevant, +	 * to the application at all: Set this flag to "false" in such a scenario., +		long refreshTimestamp = (this.cacheMillis < 0 ? -1 : System.currentTimeMillis());, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.net.URL;, +import java.net.URLConnection;, +import java.security.AccessController;, +import java.security.PrivilegedActionException;, +import java.security.PrivilegedExceptionAction;, +import java.util.PropertyResourceBundle;, +import org.springframework.core.JdkVersion;, +	private String defaultEncoding;, +, +	private boolean fallbackToSystemLocale = true;, +, +	private long cacheMillis = -1;, +, +	 * Set the default charset to use for parsing resource bundle files., +	 * <p>Default is none, using the <code>java.util.ResourceBundle</code>, +	 * default encoding: ISO-8859-1., +	 * <p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using, +	 * {@link ReloadableResourceBundleMessageSource} for JDK 1.5 support, +	 * and more flexibility in setting of an encoding per file., +	 */, +	public void setDefaultEncoding(String defaultEncoding) {, +		this.defaultEncoding = defaultEncoding;, +	}, +, +	/**, +	 * Set whether to fall back to the system Locale if no files for a specific, +	 * Locale have been found. Default is "true"; if this is turned off, the only, +	 * fallback will be the default file (e.g. "messages.properties" for, +	 * basename "messages")., +	 * <p>Falling back to the system Locale is the default behavior of, +	 * <code>java.util.ResourceBundle</code>. However, this is often not desirable, +	 * in an application server environment, where the system Locale is not relevant, +	 * to the application at all: Set this flag to "false" in such a scenario., +	 * <p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using, +	 * {@link ReloadableResourceBundleMessageSource} for JDK 1.5 support., +	 */, +	public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {, +		this.fallbackToSystemLocale = fallbackToSystemLocale;, +	}, +, +	/**, +	 * Set the number of seconds to cache loaded resource bundle files., +	 * <ul>, +	 * <li>Default is "-1", indicating to cache forever., +	 * <li>A positive number will expire resource bundles after the given, +	 * number of seconds. This is essentially the interval between refresh checks., +	 * Note that a refresh attempt will first check the last-modified timestamp, +	 * of the file before actually reloading it; so if files don't change, this, +	 * interval can be set rather low, as refresh attempts will not actually reload., +	 * <li>A value of "0" will check the last-modified timestamp of the file on, +	 * every message access. <b>Do not use this in a production environment!</b>, +	 * <li><b>Note that depending on your ClassLoader, expiration might not work reliably, +	 * since the ClassLoader may hold on to a cached version of the bundle file.</b>, +	 * Consider {@link ReloadableResourceBundleMessageSource} in combination, +	 * with resource bundle files in a non-classpath location., +	 * </ul>, +	 * <p><b>NOTE: Only works on JDK 1.6 and higher.</b> Consider using, +	 * {@link ReloadableResourceBundleMessageSource} for JDK 1.5 support, +	 * and more flexibility in terms of the kinds of resources to load from, +	 * (in particular from outside of the classpath where expiration works reliably)., +	 */, +	public void setCacheSeconds(int cacheSeconds) {, +		this.cacheMillis = (cacheSeconds * 1000);, +	}]