[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +import javax.inject.Provider;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// expected, +		}, +	}, +, +	@Test  // SPR-11830, +	public void configWithBeanWithProviderImplementation() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);, +		ac.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithBeanWithProviderImplementation.class));, +		ac.refresh();, +		assertSame(ac.getBean("customName"), ConfigWithBeanWithProviderImplementation.testBean);, +	}, +, +	@Test  // SPR-11830, +	public void configWithSetWithProviderImplementation() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);, +		ac.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithSetWithProviderImplementation.class));, +		ac.refresh();, +		assertSame(ac.getBean("customName"), ConfigWithSetWithProviderImplementation.set);, +	public void simplestPossibleConfig() {, +, +, +	static class ConfigWithBeanWithProviderImplementation implements Provider<TestBean> {, +, +		static TestBean testBean = new TestBean();, +, +		@Bean(name="customName"), +		public TestBean get() {, +			return testBean;, +		}, +	}, +, +, +	@Configuration, +	static class ConfigWithSetWithProviderImplementation implements Provider<Set<String>> {, +, +		static Set<String> set = Collections.singleton("value");, +, +		@Bean(name="customName"), +		public Set<String> get() {, +			return set;, +		}, +	}, +, +, +	@Configuration, +	static class ConfigWithFinalBean {, +, +		public final @Bean TestBean testBean() {, +			return new TestBean();, +		}, +	}, +, +, +	@Configuration, +	static class SimplestPossibleConfig {, +, +		public @Bean String stringBean() {, +			return "foo";, +		}, +	}, +, +, +	@Configuration, +	static class ConfigWithNonSpecificReturnTypes {, +, +		public @Bean Object stringBean() {, +			return "foo";, +		}, +, +		public @Bean FactoryBean<?> factoryBean() {, +			ListFactoryBean fb = new ListFactoryBean();, +			fb.setSourceList(Arrays.asList("element1", "element2"));, +			return fb;, +		}, +	}, +, +, +	@Configuration]