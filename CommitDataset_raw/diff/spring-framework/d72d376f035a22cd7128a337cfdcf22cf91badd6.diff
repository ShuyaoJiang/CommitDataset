[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				Callback callback = this.callbacks[i];, +				if (!(callback instanceof ConditionalCallback) || ((ConditionalCallback) callback).isMatch(method)) {, +			return isSetBeanFactory(candidateMethod);, +		}, +, +		public static boolean isSetBeanFactory(Method candidateMethod) {, +					!BeanFactoryAwareMethodInterceptor.isSetBeanFactory(candidateMethod) &&, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				Callback callback = this.callbacks[i];, +				if (!(callback instanceof ConditionalCallback) || ((ConditionalCallback) callback).isMatch(method)) {, +			return isSetBeanFactory(candidateMethod);, +		}, +, +		public static boolean isSetBeanFactory(Method candidateMethod) {, +					!BeanFactoryAwareMethodInterceptor.isSetBeanFactory(candidateMethod) &&, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.stereotype.Component;, +		if (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {, +, +	/**, +	 * Determine whether the given class is an {@code org.springframework}, +	 * bean class that is not annotated as a user or test {@link Component}..., +	 * which indicates that there is no {@link EventListener} to be found there., +	 * @since 5.1, +	 */, +	private static boolean isSpringContainerClass(Class<?> clazz) {, +		return (clazz.getName().startsWith("org.springframework.") &&, +				!AnnotatedElementUtils.isAnnotated(clazz, Component.class));, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				Callback callback = this.callbacks[i];, +				if (!(callback instanceof ConditionalCallback) || ((ConditionalCallback) callback).isMatch(method)) {, +			return isSetBeanFactory(candidateMethod);, +		}, +, +		public static boolean isSetBeanFactory(Method candidateMethod) {, +					!BeanFactoryAwareMethodInterceptor.isSetBeanFactory(candidateMethod) &&, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.stereotype.Component;, +		if (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {, +, +	/**, +	 * Determine whether the given class is an {@code org.springframework}, +	 * bean class that is not annotated as a user or test {@link Component}..., +	 * which indicates that there is no {@link EventListener} to be found there., +	 * @since 5.1, +	 */, +	private static boolean isSpringContainerClass(Class<?> clazz) {, +		return (clazz.getName().startsWith("org.springframework.") &&, +				!AnnotatedElementUtils.isAnnotated(clazz, Component.class));, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	private static boolean hasMetaAnnotationTypes(, +			AnnotatedElement element, @Nullable Class<? extends Annotation> annotationType, @Nullable String annotationName) {, +		// Shortcut: no non-java annotations to be found on plain Java classes and org.springframework.lang types..., +		if (AnnotationUtils.hasPlainJavaAnnotationsOnly(element) && !annotationType.getName().startsWith("java")) {, +			return null;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				Callback callback = this.callbacks[i];, +				if (!(callback instanceof ConditionalCallback) || ((ConditionalCallback) callback).isMatch(method)) {, +			return isSetBeanFactory(candidateMethod);, +		}, +, +		public static boolean isSetBeanFactory(Method candidateMethod) {, +					!BeanFactoryAwareMethodInterceptor.isSetBeanFactory(candidateMethod) &&, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.stereotype.Component;, +		if (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {, +, +	/**, +	 * Determine whether the given class is an {@code org.springframework}, +	 * bean class that is not annotated as a user or test {@link Component}..., +	 * which indicates that there is no {@link EventListener} to be found there., +	 * @since 5.1, +	 */, +	private static boolean isSpringContainerClass(Class<?> clazz) {, +		return (clazz.getName().startsWith("org.springframework.") &&, +				!AnnotatedElementUtils.isAnnotated(clazz, Component.class));, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	private static boolean hasMetaAnnotationTypes(, +			AnnotatedElement element, @Nullable Class<? extends Annotation> annotationType, @Nullable String annotationName) {, +		// Shortcut: no non-java annotations to be found on plain Java classes and org.springframework.lang types..., +		if (AnnotationUtils.hasPlainJavaAnnotationsOnly(element) && !annotationType.getName().startsWith("java")) {, +			return null;, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		for (Annotation ann : anns) {, +			String name = ann.annotationType().getName();, +			if (!name.startsWith("java.lang.") && !name.startsWith("org.springframework.lang.")) {]