[+++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +				String s = logPrefix + "Writing " + formatValue(charSequence, logger.isTraceEnabled());, +				if (logger.isTraceEnabled()) {, +					logger.trace(s);, +				}, +				else {, +					logger.debug(s);, +				}, +	private String formatValue(@Nullable Object value, boolean logFullValue) {, +		if (value == null) {, +			return "";, +		}, +		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, +		return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +				String s = logPrefix + "Writing " + formatValue(charSequence, logger.isTraceEnabled());, +				if (logger.isTraceEnabled()) {, +					logger.trace(s);, +				}, +				else {, +					logger.debug(s);, +				}, +	private String formatValue(@Nullable Object value, boolean logFullValue) {, +		if (value == null) {, +			return "";, +		}, +		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, +		return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			String s = Hints.getLogPrefix(hints) + "Decoded " + formatValue(value, logger.isTraceEnabled());, +			if (logger.isTraceEnabled()) {, +				logger.trace(s);, +			}, +			else {, +				logger.debug(s);, +			}, +	private String formatValue(@Nullable Object value, boolean logFullValue) {, +		if (value == null) {, +			return "";, +		}, +		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, +		return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +				String s = logPrefix + "Writing " + formatValue(charSequence, logger.isTraceEnabled());, +				if (logger.isTraceEnabled()) {, +					logger.trace(s);, +				}, +				else {, +					logger.debug(s);, +				}, +	private String formatValue(@Nullable Object value, boolean logFullValue) {, +		if (value == null) {, +			return "";, +		}, +		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, +		return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			String s = Hints.getLogPrefix(hints) + "Decoded " + formatValue(value, logger.isTraceEnabled());, +			if (logger.isTraceEnabled()) {, +				logger.trace(s);, +			}, +			else {, +				logger.debug(s);, +			}, +	private String formatValue(@Nullable Object value, boolean logFullValue) {, +		if (value == null) {, +			return "";, +		}, +		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString();, +		return logFullValue || s.length() < 100 ? s : s.substring(0, 100) + " (truncated)...";, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +					logFormData(formData, hints);, +	private void logFormData(MultiValueMap<String, String> formData, Map<String, Object> hints) {, +		if (logger.isDebugEnabled()) {, +			String s = Hints.getLogPrefix(hints) + "Read " +, +					(isEnableLoggingRequestDetails() ?, +							formatValue(formData, logger.isTraceEnabled()) :, +							"form fields " + formData.keySet() + " (content masked)");, +			if (logger.isTraceEnabled()) {, +				logger.trace(s);, +			}, +			else {, +				logger.debug(s);, +			}, +		}, +	}, +]