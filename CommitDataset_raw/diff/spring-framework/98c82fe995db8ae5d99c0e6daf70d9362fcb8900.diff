[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, + * , +	private final String expressionString;, +	private final Expression[] expressions;, +			// TODO is stringify ok for the non literal components? or should the converters be used? see another, +			// case below, +	public Class getValueType() throws EvaluationException {, +		return String.class;, +	}, +, +, +	public boolean isWritable(EvaluationContext context) throws EvaluationException {, +		return false;, +	}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, + * , +	private final String expressionString;, +	private final Expression[] expressions;, +			// TODO is stringify ok for the non literal components? or should the converters be used? see another, +			// case below, +	public Class getValueType() throws EvaluationException {, +		return String.class;, +	}, +, +, +	public boolean isWritable(EvaluationContext context) throws EvaluationException {, +		return false;, +	}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +	private final String literalValue;, +		throw new EvaluationException(literalValue, "Cannot call setValue() on a LiteralExpression");, +	public boolean isWritable(EvaluationContext context) throws EvaluationException {, +		return false;, +	}, +, +	public Class getValueType() throws EvaluationException {, +		return String.class;, +	}, +]