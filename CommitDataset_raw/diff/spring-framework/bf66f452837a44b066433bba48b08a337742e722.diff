[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.function.Consumer;, +		 * Add the given header value(s) under the given name., +		 * Add the given headers into this request's headers map., +		 * @param headers the existing HttpHeaders to add from, +		 * Manipulate this request's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		Builder headers(Consumer<HttpHeaders> headersConsumer);, +		 * Add a cookie with the given name and value(s)., +		 * @param name the cookie name, +		 * @param values the cookie value(s), +		 * @return this builder, +		 */, +		Builder cookie(String name, String... values);, +, +		/**, +		 * Add the given cookies into this request's cookies map., +		 * Manipulate this request's cookies with the given consumer. The, +		 * map provided to the consumer is "live", so that the consumer can be used to, +		 * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,, +		 * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other, +		 * {@link MultiValueMap} methods., +		 * @param cookiesConsumer a function that consumes the cookies map, +		 * @return this builder, +		 */, +		Builder cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer);, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.function.Consumer;, +		 * Add the given header value(s) under the given name., +		 * Add the given headers into this request's headers map., +		 * @param headers the existing HttpHeaders to add from, +		 * Manipulate this request's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		Builder headers(Consumer<HttpHeaders> headersConsumer);, +		 * Add a cookie with the given name and value(s)., +		 * @param name the cookie name, +		 * @param values the cookie value(s), +		 * @return this builder, +		 */, +		Builder cookie(String name, String... values);, +, +		/**, +		 * Add the given cookies into this request's cookies map., +		 * Manipulate this request's cookies with the given consumer. The, +		 * map provided to the consumer is "live", so that the consumer can be used to, +		 * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,, +		 * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other, +		 * {@link MultiValueMap} methods., +		 * @param cookiesConsumer a function that consumes the cookies map, +		 * @return this builder, +		 */, +		Builder cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer);, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +import java.util.function.Consumer;, +		Assert.notNull(headers, "'headers' must not be null");, +	public ClientRequest.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +		headersConsumer.accept(this.headers);, +		return this;, +	}, +, +	@Override, +	public ClientRequest.Builder cookie(String name, String... values) {, +		for (String value : values) {, +		}, +		Assert.notNull(cookies, "'cookies' must not be null");, +		for (Map.Entry<String, List<String>> entry : cookies.entrySet()) {, +			String cookieName = entry.getKey();, +			for (String cookieValue : entry.getValue()) {, +				this.cookies.add(cookieName, cookieValue);, +			}, +		}, +		return this;, +	}, +, +	@Override, +	public ClientRequest.Builder cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "'cookiesConsumer' must not be null");, +		cookiesConsumer.accept(this.cookies);, +				this.cookies.forEach((name, values) -> values.forEach(value -> {, +				}));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.function.Consumer;, +		 * Add the given header value(s) under the given name., +		 * Add the given headers into this request's headers map., +		 * @param headers the existing HttpHeaders to add from, +		 * Manipulate this request's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to]