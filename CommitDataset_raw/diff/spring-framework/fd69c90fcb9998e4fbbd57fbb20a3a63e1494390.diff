[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt, + * Copyright 2002-2018 the original author or authors., +, +/**, + * Shortcut for setting [MediaType.APPLICATION_JSON_UTF8] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.json() = contentType(MediaType.APPLICATION_JSON_UTF8), +, +/**, + * Shortcut for setting [MediaType.APPLICATION_XML] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.xml() = contentType(MediaType.APPLICATION_XML), +, +/**, + * Shortcut for setting [MediaType.TEXT_HTML] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.html() = contentType(MediaType.TEXT_HTML), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensions.kt, + * Copyright 2002-2018 the original author or authors., +, +/**, + * Shortcut for setting [MediaType.APPLICATION_JSON_UTF8] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.json() = contentType(MediaType.APPLICATION_JSON_UTF8), +, +/**, + * Shortcut for setting [MediaType.APPLICATION_XML] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.xml() = contentType(MediaType.APPLICATION_XML), +, +/**, + * Shortcut for setting [MediaType.TEXT_HTML] `Content-Type` header., + * @author Sebastien Deleuze, + * @since 5.1, + */, +fun ServerResponse.BodyBuilder.html() = contentType(MediaType.TEXT_HTML), +++ b/spring-webflux/src/test/kotlin/org/springframework/web/reactive/function/server/ServerResponseExtensionsTests.kt, + * Copyright 2002-2018 the original author or authors., +	@Test, +	fun `BodyBuilder#json`() {, +		bodyBuilder.json(), +		verify(bodyBuilder, times(1)).contentType(APPLICATION_JSON_UTF8), +	}, +, +	@Test, +	fun `BodyBuilder#xml`() {, +		bodyBuilder.xml(), +		verify(bodyBuilder, times(1)).contentType(APPLICATION_XML), +	}, +, +	@Test, +	fun `BodyBuilder#html`() {, +		bodyBuilder.html(), +		verify(bodyBuilder, times(1)).contentType(TEXT_HTML), +	}, +]