[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	private volatile Class<?> containingClass;, +, +	private volatile Class<?> parameterType;, +, +	private volatile Type genericParameterType;, +, +	private volatile Annotation[] parameterAnnotations;, +, +	private volatile ParameterNameDiscoverer parameterNameDiscoverer;, +, +	private volatile String parameterName;, +, +	 * Increase this parameter's nesting level., +	 * @see #getNestingLevel(), +	 */, +	public void increaseNestingLevel() {, +		this.nestingLevel++;, +	}, +, +	/**, +	 * Decrease this parameter's nesting level., +	 * @see #getNestingLevel(), +	 */, +	public void decreaseNestingLevel() {, +		getTypeIndexesPerLevel().remove(this.nestingLevel);, +		this.nestingLevel--;, +	}, +, +	/**, +	 * Return the nesting level of the target type, +	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the, +	 * nested List, whereas 2 would indicate the element of the nested List)., +	 */, +	public int getNestingLevel() {, +		return this.nestingLevel;, +	}, +, +	/**, +	 * Set the type index for the current nesting level., +	 * @param typeIndex the corresponding type index, +	 * (or {@code null} for the default type index), +	 * @see #getNestingLevel(), +	 */, +	public void setTypeIndexForCurrentLevel(int typeIndex) {, +		getTypeIndexesPerLevel().put(this.nestingLevel, typeIndex);, +	}, +, +	/**, +	 * Return the type index for the current nesting level., +	 * @return the corresponding type index, or {@code null}, +	 * if none specified (indicating the default type index), +	 * @see #getNestingLevel(), +	 */, +	public Integer getTypeIndexForCurrentLevel() {, +		return getTypeIndexForLevel(this.nestingLevel);, +	}, +, +	/**, +	 * Return the type index for the specified nesting level., +	 * @param nestingLevel the nesting level to check, +	 * @return the corresponding type index, or {@code null}, +	 * if none specified (indicating the default type index), +	 */, +	public Integer getTypeIndexForLevel(int nestingLevel) {, +		return getTypeIndexesPerLevel().get(nestingLevel);, +	}, +, +	/**, +	 * Obtain the (lazily constructed) type-indexes-per-level Map., +	 */, +	private Map<Integer, Integer> getTypeIndexesPerLevel() {, +		if (this.typeIndexesPerLevel == null) {, +			this.typeIndexesPerLevel = new HashMap<Integer, Integer>(4);, +		}, +		return this.typeIndexesPerLevel;, +	}, +, +, +	/**, +		ParameterNameDiscoverer discoverer = this.parameterNameDiscoverer;, +		if (discoverer != null) {, +					discoverer.getParameterNames(this.method) : discoverer.getParameterNames(this.constructor));, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof MethodParameter)) {, +		MethodParameter otherParam = (MethodParameter) other;, +		return (this.parameterIndex == otherParam.parameterIndex && getMember().equals(otherParam.getMember()));, +	}]