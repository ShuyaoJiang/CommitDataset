[+++ b/spring-framework-reference/src/transaction.xml, +    reasons to use the Spring Framework. The Spring Framework provides a, +    consistent abstraction for transaction management that delivers the, +    following benefits:</para>, +    <para>The following sections describe the Spring Framework's transaction, +        <para><link linkend="transaction-motivation">Advantages of the Spring, +        <emphasis>why</emphasis> you would use the Spring Framework's, +        transaction abstraction instead of EJB Container-Managed Transactions, +        (CMT) or choosing to drive transactions through a proprietary API such, +        as Hibernate.</para>, +    <title>Advantages of the Spring Framework's transaction support model<!--Renamed section to make it more to the point.--></title>, +    next two sections, followed by a discussion of how the Spring Framework's, +      environments. The Spring Framework provides both declarative and, +        <para>The Spring Framework's transaction management support changes, +        <para>The Spring Framework <emphasis>gives you the choice of when to, +        scale your application to a fully loaded application, +        server</emphasis>. Gone are the days when the only alternative to, +        using EJB CMT or JTA was to write code with local transactions such as, +        those on JDBC connections, and face a hefty rework if you need that, +        code to run within global, container-managed transactions. With the, +        Spring Framework, only some of the bean definitions in your, +        configuration file, rather than your code, needs to change.</para>, +    <para>The Spring Framework's declarative transaction management is made, +    <para>The Spring Framework's declarative transaction management is similar, +    to EJB CMT in that you can specify transaction behavior (or lack of it), +    down to individual method level. It is possible to make a, +        <para>Unlike EJB CMT, which is tied to JTA, the Spring Framework's, +        <para>You can apply the Spring Framework declarative transaction, +        <para>The Spring Framework offers declarative <link, +        <para>The Spring Framework enables you to customize transactional, +        <para>The Spring Framework does not support propagation of transaction, +      <title>Understanding the Spring Framework's declarative transaction, +      section explains the inner workings of the Spring Framework's, +      declarative transaction infrastructure in the event of, +      transaction-related issues.</para>, +      <para>The recommended way to indicate to the Spring Framework's, +      transaction infrastructure that a transaction's work is to be rolled, +      back is to throw an <exceptionname>Exception</exceptionname> from code, +      that is currently executing in the context of a transaction. The Spring, +      Framework's transaction infrastructure code, in its default, +      configuration, will catch any unhandled, +      <exceptionname>Exception</exceptionname> as it bubbles up the call, +      stack, and mark the transaction for rollback.<!--I changed to *can be configured* because next sentence says it does not do this by default in all cases. , +      <para>However, the Spring Framework's transaction infrastructure code,, +      by default, <emphasis>only</emphasis> mark a transaction for rollback in, +      exception is thrown. The following example tells the Spring Framework's, +      <para>When the Spring Framework's transaction infrastructure catches an, +      process is quite invasive, and tightly couples your code to the Spring, +    <para>For more information about the Spring Framework's transaction]