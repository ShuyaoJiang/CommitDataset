[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +import java.util.Comparator;, + * @author Rossen Stoyanchev, +		int result = SPECIFICITY_COMPARATOR.compare(this, otherPattern);, +		return (result == 0 && otherPattern != null ?, +				this.patternString.compareTo(otherPattern.patternString) : result);, +, +	public static final Comparator<PathPattern> SPECIFICITY_COMPARATOR = (p1, p2) -> {, +		// 1) null is sorted last, +		if (p2 == null) {, +			return -1;, +		}, +, +		// 2) catchall patterns are sorted last. If both catchall then the, +		// length is considered, +		if (p1.isCatchAll()) {, +			if (p2.isCatchAll()) {, +				int lenDifference = p1.getNormalizedLength() - p2.getNormalizedLength();, +				if (lenDifference != 0) {, +					return (lenDifference < 0) ? +1 : -1;, +				}, +			}, +			else {, +				return +1;, +			}, +		}, +		else if (p2.isCatchAll()) {, +			return -1;, +		}, +, +		// 3) This will sort such that if they differ in terms of wildcards or, +		// captured variable counts, the one with the most will be sorted last, +		int score = p1.getScore() - p2.getScore();, +		if (score != 0) {, +			return (score < 0) ? -1 : +1;, +		}, +, +		// 4) longer is better, +		int lenDifference = p1.getNormalizedLength() - p2.getNormalizedLength();, +		return Integer.compare(0, lenDifference);, +	};, +, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +import java.util.Comparator;, + * @author Rossen Stoyanchev, +		int result = SPECIFICITY_COMPARATOR.compare(this, otherPattern);, +		return (result == 0 && otherPattern != null ?, +				this.patternString.compareTo(otherPattern.patternString) : result);, +, +	public static final Comparator<PathPattern> SPECIFICITY_COMPARATOR = (p1, p2) -> {, +		// 1) null is sorted last, +		if (p2 == null) {, +			return -1;, +		}, +, +		// 2) catchall patterns are sorted last. If both catchall then the, +		// length is considered, +		if (p1.isCatchAll()) {, +			if (p2.isCatchAll()) {, +				int lenDifference = p1.getNormalizedLength() - p2.getNormalizedLength();, +				if (lenDifference != 0) {, +					return (lenDifference < 0) ? +1 : -1;, +				}, +			}, +			else {, +				return +1;, +			}, +		}, +		else if (p2.isCatchAll()) {, +			return -1;, +		}, +, +		// 3) This will sort such that if they differ in terms of wildcards or, +		// captured variable counts, the one with the most will be sorted last, +		int score = p1.getScore() - p2.getScore();, +		if (score != 0) {, +			return (score < 0) ? -1 : +1;, +		}, +, +		// 4) longer is better, +		int lenDifference = p1.getNormalizedLength() - p2.getNormalizedLength();, +		return Integer.compare(0, lenDifference);, +	};, +, +++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java, +		assertTrue(p1.compareTo(p2) != 0);, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +import java.util.Comparator;, + * @author Rossen Stoyanchev, +		int result = SPECIFICITY_COMPARATOR.compare(this, otherPattern);, +		return (result == 0 && otherPattern != null ?, +				this.patternString.compareTo(otherPattern.patternString) : result);, +, +	public static final Comparator<PathPattern> SPECIFICITY_COMPARATOR = (p1, p2) -> {, +		// 1) null is sorted last, +		if (p2 == null) {, +			return -1;, +		}, +, +		// 2) catchall patterns are sorted last. If both catchall then the]