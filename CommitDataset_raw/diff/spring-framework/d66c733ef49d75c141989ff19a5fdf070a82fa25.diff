[+++ b/build.gradle, +		testCompile("org.mockito:mockito-core:1.9.5"), +configure(allprojects.findAll{it.name in ["spring", "spring-jms", "spring-orm",, +		"spring-orm-hibernate4", "spring-oxm", "spring-struts", "spring-test",, +		"spring-test-mvc", "spring-tx", "spring-web", "spring-webmvc",, +		"spring-webmvc-portlet", "spring-webmvc-tiles3"]}) {, +	dependencies {, +		testCompile("org.easymock:easymock:${easymockVersion}"), +		testCompile "org.easymock:easymockclassextension:${easymockVersion}", +	}, +}, +, +++ b/build.gradle, +		testCompile("org.mockito:mockito-core:1.9.5"), +configure(allprojects.findAll{it.name in ["spring", "spring-jms", "spring-orm",, +		"spring-orm-hibernate4", "spring-oxm", "spring-struts", "spring-test",, +		"spring-test-mvc", "spring-tx", "spring-web", "spring-webmvc",, +		"spring-webmvc-portlet", "spring-webmvc-tiles3"]}) {, +	dependencies {, +		testCompile("org.easymock:easymock:${easymockVersion}"), +		testCompile "org.easymock:easymockclassextension:${easymockVersion}", +	}, +}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptorTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willReturn(ret);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.getMethod()).willReturn(Object.class.getMethod("hashCode", (Class[]) null));, +		given(mi.getThis()).willReturn(new Object());, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +++ b/build.gradle, +		testCompile("org.mockito:mockito-core:1.9.5"), +configure(allprojects.findAll{it.name in ["spring", "spring-jms", "spring-orm",, +		"spring-orm-hibernate4", "spring-oxm", "spring-struts", "spring-test",, +		"spring-test-mvc", "spring-tx", "spring-web", "spring-webmvc",, +		"spring-webmvc-portlet", "spring-webmvc-tiles3"]}) {, +	dependencies {, +		testCompile("org.easymock:easymock:${easymockVersion}"), +		testCompile "org.easymock:easymockclassextension:${easymockVersion}", +	}, +}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptorTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willReturn(ret);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.getMethod()).willReturn(Object.class.getMethod("hashCode", (Class[]) null));, +		given(mi.getThis()).willReturn(new Object());, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +		MethodInvocation mi = mock(MethodInvocation.class);, +		given(mi.proceed()).willThrow(ex);, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +		MethodInvocation methodInvocation = mock(MethodInvocation.class);, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString", new Class[]{}));, +		given(methodInvocation.getThis()).willReturn(this);, +		Log log = mock(Log.class);, +		given(log.isTraceEnabled()).willReturn(true);, +		verify(log, times(2)).trace(anyString());, +		MethodInvocation methodInvocation = mock(MethodInvocation.class);, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString", new Class[]{}));, +		given(methodInvocation.getThis()).willReturn(this);, +		given(methodInvocation.proceed()).willThrow(exception);, +		Log log = mock(Log.class);, +		given(log.isTraceEnabled()).willReturn(true);, +		verify(log).trace(anyString());, +		verify(log).trace(anyString(), eq(exception));, +		MethodInvocation methodInvocation = mock(MethodInvocation.class);, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString", new Class[0]));, +		given(methodInvocation.getThis()).willReturn(this);, +		given(methodInvocation.getArguments()).willReturn(new Object[]{"$ One \\$", new Long(2)});, +		given(methodInvocation.proceed()).willReturn("Hello!");, +		Log log = mock(Log.class);, +		given(log.isTraceEnabled()).willReturn(true);, +		verify(log, times(2)).trace(anyString());, +++ b/build.gradle, +		testCompile("org.mockito:mockito-core:1.9.5"), +configure(allprojects.findAll{it.name in ["spring", "spring-jms", "spring-orm",]