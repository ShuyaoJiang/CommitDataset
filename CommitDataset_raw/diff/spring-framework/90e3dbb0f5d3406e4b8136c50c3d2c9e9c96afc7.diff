[+++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.StringUtils;, + * Implementation of {@link HttpMessageConverter} that can read and write, + * {@link BufferedImage BufferedImages}., + * <p>By default, this converter can read all media types that are supported, + * by the {@linkplain ImageIO#getReaderMIMETypes() registered image readers},, + * and writes using the media type of the first available, + * {@linkplain javax.imageio.ImageIO#getWriterMIMETypes() registered image writer}., + * The latter can be overridden by setting the, + * {@link #setDefaultContentType defaultContentType} property., + * <p>If the {@link #setCacheDir cacheDir} property is set, this converter, + * will cache image data., + * <p>The {@link #process(ImageReadParam)} and {@link #process(ImageWriteParam)}, + * template methods allow subclasses to override Image I/O parameters., +			if (StringUtils.hasText(mediaType)) {, +		}, +		for (String mediaType : writerMediaTypes) {, +			if (StringUtils.hasText(mediaType)) {, +				this.defaultContentType = MediaType.parseMediaType(mediaType);, +				break;, +	}, +, +					"Content-Type [" + defaultContentType + "] is not supported by the Java Image I/O API");, +	 * Template method that allows for manipulating the {@link ImageReadParam}, +	 * before it is used to read an image., +	 * <p>The default implementation is empty., +	 * Template method that allows for manipulating the {@link ImageWriteParam}, +	 * before it is used to write an image., +	 * <p>The default implementation is empty.]