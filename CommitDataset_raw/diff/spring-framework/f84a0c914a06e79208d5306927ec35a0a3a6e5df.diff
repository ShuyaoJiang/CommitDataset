[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2015 the original author or authors., +			String name = element.getAttribute("content-negotiation-manager");, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +			if (!CONTENT_NEGOTIATION_MANAGER_BEAN_NAME.equals(name)) {, +				parserContext.getRegistry().registerAlias(name, CONTENT_NEGOTIATION_MANAGER_BEAN_NAME);, +			}, +			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2015 the original author or authors., +			String name = element.getAttribute("content-negotiation-manager");, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +			if (!CONTENT_NEGOTIATION_MANAGER_BEAN_NAME.equals(name)) {, +				parserContext.getRegistry().registerAlias(name, CONTENT_NEGOTIATION_MANAGER_BEAN_NAME);, +			}, +			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name) || context.getRegistry().isAlias(name)) {, +			values.add("contentNegotiationManager", new RuntimeBeanReference(name));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2015 the original author or authors., +			String name = element.getAttribute("content-negotiation-manager");, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +			if (!CONTENT_NEGOTIATION_MANAGER_BEAN_NAME.equals(name)) {, +				parserContext.getRegistry().registerAlias(name, CONTENT_NEGOTIATION_MANAGER_BEAN_NAME);, +			}, +			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name) || context.getRegistry().isAlias(name)) {, +			values.add("contentNegotiationManager", new RuntimeBeanReference(name));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +	public ContentNegotiationManager getContentNegotiationManager() {, +		return this.contentNegotiationManager;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2015 the original author or authors., +			String name = element.getAttribute("content-negotiation-manager");, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +			if (!CONTENT_NEGOTIATION_MANAGER_BEAN_NAME.equals(name)) {, +				parserContext.getRegistry().registerAlias(name, CONTENT_NEGOTIATION_MANAGER_BEAN_NAME);, +			}, +			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name) || context.getRegistry().isAlias(name)) {, +			values.add("contentNegotiationManager", new RuntimeBeanReference(name));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +	public ContentNegotiationManager getContentNegotiationManager() {, +		return this.contentNegotiationManager;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		loadBeanDefinitions("mvc-config-content-negotiation-manager.xml", 15);, +, +		ViewResolverComposite compositeResolver = this.appContext.getBean(ViewResolverComposite.class);, +		assertNotNull(compositeResolver);, +		assertEquals("Actual: " + compositeResolver.getViewResolvers(), 1, compositeResolver.getViewResolvers().size());, +, +		ViewResolver resolver = compositeResolver.getViewResolvers().get(0);, +		assertEquals(ContentNegotiatingViewResolver.class, resolver.getClass());, +		ContentNegotiatingViewResolver cnvr = (ContentNegotiatingViewResolver) resolver;, +		assertSame(manager, cnvr.getContentNegotiationManager());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2015 the original author or authors., +			String name = element.getAttribute("content-negotiation-manager");, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +			if (!CONTENT_NEGOTIATION_MANAGER_BEAN_NAME.equals(name)) {, +				parserContext.getRegistry().registerAlias(name, CONTENT_NEGOTIATION_MANAGER_BEAN_NAME);, +			}, +			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);, +			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));, +			contentNegotiationManagerRef = new RuntimeBeanReference(name);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name) || context.getRegistry().isAlias(name)) {, +			values.add("contentNegotiationManager", new RuntimeBeanReference(name));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +	public ContentNegotiationManager getContentNegotiationManager() {, +		return this.contentNegotiationManager;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		loadBeanDefinitions("mvc-config-content-negotiation-manager.xml", 15);, +]