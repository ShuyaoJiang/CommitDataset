[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper, + * around {@link ByteBuffer} that is similar to Netty's {@link io.netty.buffer.ByteBuf}, but that, + * can also be used on non-Netty platforms (i.e. Servlet)., +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * Expose this buffer's data as an {@link OutputStream}. Both data and write position are, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper, + * around {@link ByteBuffer} that is similar to Netty's {@link io.netty.buffer.ByteBuf}, but that, + * can also be used on non-Netty platforms (i.e. Servlet)., +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * Expose this buffer's data as an {@link OutputStream}. Both data and write position are, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	 * Wrap the given {@link ByteBuffer} in a {@code DataBuffer}. Unlike, +	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +	 * Wrap the given {@code byte} array in a {@code DataBuffer}. Unlike, + 	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper, + * around {@link ByteBuffer} that is similar to Netty's {@link io.netty.buffer.ByteBuf}, but that, + * can also be used on non-Netty platforms (i.e. Servlet)., +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * Expose this buffer's data as an {@link OutputStream}. Both data and write position are, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	 * Wrap the given {@link ByteBuffer} in a {@code DataBuffer}. Unlike, +	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +	 * Wrap the given {@code byte} array in a {@code DataBuffer}. Unlike, + 	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +++ b/src/docs/asciidoc/core.adoc, +include::core/core-databuffer-codec.adoc[leveloffset=+1], +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, + * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper, + * around {@link ByteBuffer} that is similar to Netty's {@link io.netty.buffer.ByteBuf}, but that, + * can also be used on non-Netty platforms (i.e. Servlet)., +	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are, +	 * Expose this buffer's data as an {@link OutputStream}. Both data and write position are, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	 * Wrap the given {@link ByteBuffer} in a {@code DataBuffer}. Unlike, +	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +	 * Wrap the given {@code byte} array in a {@code DataBuffer}. Unlike, + 	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory., +++ b/src/docs/asciidoc/core.adoc, +include::core/core-databuffer-codec.adoc[leveloffset=+1], +, +++ b/src/docs/asciidoc/core/core-databuffer-codec.adoc, +[[databuffers]], += Data Buffers and Codecs, +, +== Introduction, +, +The `DataBuffer` interface defines an abstraction over byte buffers., +The main reason for introducing it, and not use the standard `java.nio.ByteBuffer` instead, is Netty., +Netty does not use `ByteBuffer`, but instead offers `ByteBuf` as an alternative., +Spring's `DataBuffer` is a simple abstraction over `ByteBuf` that can also be used on non-Netty, +platforms (i.e. Servlet 3.1+)., +, +== `DataBufferFactory`, +, +The `DataBufferFactory` offers functionality to allocate new data buffers, as well as to wrap, +existing data., +The `allocate` methods allocate a new data buffer, with a default or given capacity., +Though `DataBuffer` implementation grow and shrink on demand, it is more efficient to give the, +capacity upfront, if known., +The `wrap` methods decorate an existing `ByteBuffer` or byte array., +Wrapping does not involve allocation: it simply decorates the given data with a `DataBuffer`, +implementation., +, +There are two implementation of `DataBufferFactory`: the `NettyDataBufferFactory` which is meant, +to be used on Netty platforms, such as Reactor Netty., +The other implementation, the `DefaultDataBufferFactory`, is used on other platforms, such as, +Servlet 3.1+ servers., +, +== The `DataBuffer` interface, +, +The `DataBuffer` interface is similar to `ByteBuffer`, but offers a number of advantages., +Similar to Netty's `ByteBuf`, the `DataBuffer` abstraction offers independent read and write, +positions., +This is different from the JDK's `ByteBuffer`, which only exposes one position for both reading and, +writing, and a separate `flip()` operation to switch between the two  I/O operations., +In general, the following invariant holds for the read position, write position, and the capacity:, +, +--, +`0` <= _read position_ <= _write position_ <= _capacity_, +--, +, +When reading bytes from the `DataBuffer`, the read position is automatically updated in accordance with, +the amount of data read from the buffer., +Similarly, when writing bytes to the `DataBuffer`, the write position is updated with the amount of, +data written to the buffer., +Also, when writing data, the capacity of a `DataBuffer` is automatically expanded, just like `StringBuilder`,, +`ArrayList`, and similar types., +, +Besides the reading and writing functionality mentioned above, the `DataBuffer` also has methods to, +view a (slice of a) buffer as `ByteBuffer`, `InputStream`, or `OutputStream`., +Additionally, it offers methods to determine the index of a given byte., +]