[+++ b/org.springframework.context/src/main/java/org/springframework/ui/lifecycle/WebBindAndValidateLifecycle.java, +		// TODO make message translation pluggable, +			MessageResolver message = builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				resolvableArg("label", getModelProperty(result))., +				arg("value", result.getUserValue())., +++ b/org.springframework.context/src/main/java/org/springframework/ui/lifecycle/WebBindAndValidateLifecycle.java, +		// TODO make message translation pluggable, +			MessageResolver message = builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				resolvableArg("label", getModelProperty(result))., +				arg("value", result.getUserValue())., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	public DefaultMessageResolver(Severity severity, String[] codes, Map<String, Object> args, String defaultText,, +			ExpressionParser expressionParser) {, +			context.addPropertyAccessor(new MessageArgumentAccessor(messageSource, locale));, +	static class MessageArgumentAccessor implements PropertyAccessor {, +		public MessageArgumentAccessor(MessageSource messageSource, Locale locale) {, +			return (((Map) target).containsKey(name));, +			Object o = ((Map) target).get(name);, +			if (o instanceof MessageSourceResolvable) {, +				String message = messageSource.getMessage((MessageSourceResolvable) o, locale);, +				return new TypedValue(message);, +			} else {, +				return new TypedValue(o);, +			}, +		public void write(EvaluationContext context, Object target, String name, Object newValue), +				throws AccessException {, +		public Class[] getSpecificTargetClasses() {, +			return new Class[] { Map.class };, +, +++ b/org.springframework.context/src/main/java/org/springframework/ui/lifecycle/WebBindAndValidateLifecycle.java, +		// TODO make message translation pluggable, +			MessageResolver message = builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				resolvableArg("label", getModelProperty(result))., +				arg("value", result.getUserValue())., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	public DefaultMessageResolver(Severity severity, String[] codes, Map<String, Object> args, String defaultText,, +			ExpressionParser expressionParser) {, +			context.addPropertyAccessor(new MessageArgumentAccessor(messageSource, locale));, +	static class MessageArgumentAccessor implements PropertyAccessor {, +		public MessageArgumentAccessor(MessageSource messageSource, Locale locale) {, +			return (((Map) target).containsKey(name));, +			Object o = ((Map) target).get(name);, +			if (o instanceof MessageSourceResolvable) {, +				String message = messageSource.getMessage((MessageSourceResolvable) o, locale);, +				return new TypedValue(message);, +			} else {, +				return new TypedValue(o);, +			}, +		public void write(EvaluationContext context, Object target, String name, Object newValue), +				throws AccessException {, +		public Class[] getSpecificTargetClasses() {, +			return new Class[] { Map.class };, +, +++ b/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/lifecycle/WebBindAndValidateLifecycle.java, +		// TODO make message translation pluggable, +			MessageResolver message = builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				resolvableArg("label", getModelProperty(result))., +				arg("value", result.getUserValue())., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	public DefaultMessageResolver(Severity severity, String[] codes, Map<String, Object> args, String defaultText,, +			ExpressionParser expressionParser) {, +			context.addPropertyAccessor(new MessageArgumentAccessor(messageSource, locale));, +	static class MessageArgumentAccessor implements PropertyAccessor {, +		public MessageArgumentAccessor(MessageSource messageSource, Locale locale) {, +			return (((Map) target).containsKey(name));, +			Object o = ((Map) target).get(name);, +			if (o instanceof MessageSourceResolvable) {, +				String message = messageSource.getMessage((MessageSourceResolvable) o, locale);, +				return new TypedValue(message);, +			} else {, +				return new TypedValue(o);, +			}, +		public void write(EvaluationContext context, Object target, String name, Object newValue), +				throws AccessException {, +		public Class[] getSpecificTargetClasses() {, +			return new Class[] { Map.class };, +, +++ b/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java, +++ b/org.springframework.context/src/test/java/org/springframework/ui/message/support/DefaultMessageContextTests.java]