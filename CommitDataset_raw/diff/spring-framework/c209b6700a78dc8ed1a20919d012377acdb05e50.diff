[+++ b/src/reference/docbook/mvc.xml, +      <para>Staring with Spring Framework 3.2, you can configure how Spring MVC, +      determines the requested media types from the client for request mapping, +      as well as for content negotiation purposes. The available options are, +      to check the file extension in the request URI, the "Accept" header,, +      a request parameter, as well as to fall back on a default content type., +      By default, file extension in the request URI is checked first and, +      the "Accept" header is checked next.</para>, +      <para>For file extensions in the request URI, the MVC Java config and, +      the MVC namespace, automatically register extensions such as, +      <filename>.json</filename>, <filename>.xml</filename>,, +      <filename>.rss</filename>, and <filename>.atom</filename> if the, +      corresponding dependencies such as Jackson, JAXB2, or Rome, +      are present on the classpath. Additional extensions may be not need, +      to be registered explicitly if they can be discovered via , +      <classname>ServletContext.getMimeType(String)</classname> or the, +      <emphasis>Java Activation Framework</emphasis>, +      (see <classname>javax.activation.MimetypesFileTypeMap</classname>).</para>, +      <para>Below is an example of customizing content negotiation, +      options through the MVC Java config:</para>, +     <para>In the MVC namespace, the <code>&lt;mvc:annotation-driven&gt;</code> element, +     has a <code>content-negotiation-manager</code> attribute, which expects a, +     <classname>ContentNegotiationManager</classname> that in turn can be created, +     with a <classname>ContentNegotiationManagerFactoryBean</classname>:</para>, +      <para>If not using the MVC Java config or the MVC namespace, you'll need, +      to create an instance of <classname>ContentNegotiationManager</classname>, +      and use it to configure, +      <classname>RequestMappingHandlerMapping</classname> for request mapping, +      purposes, and <classname>RequestMappingHandlerAdapter</classname> and, +      <classname>ExceptionHandlerExceptionResolver</classname> for, +      content negotiation purposes.</para>, +, +      <para>Note that <classname>ContentNegotiatingViewResolver</classname>, +      now can also be configured with a <code>ContentNegotiatingViewResolver</code>,, +      so you can use one instance throughout Spring MVC.</para>, +, +      <para>In more advanced cases, it may be useful to configure, +      multiple <classname>ContentNegotiationManager</classname> instances, +      that in turn may contain custom, +      <classname>ContentNegotiationStrategy</classname> implementations., +      For example you could configure, +      <classname>ExceptionHandlerExceptionResolver</classname> with, +      a <classname>ContentNegotiationManager</classname> that always, +      resolves the requested media type to <filename>"application/json"</filename>., +      Or you may want to plug a custom strategy that has some logic to select, +      a default content type (e.g. either XML or JSON) if no content, +      types were requested.</para>, +, +++ b/src/reference/docbook/mvc.xml, +      <para>Staring with Spring Framework 3.2, you can configure how Spring MVC, +      determines the requested media types from the client for request mapping, +      as well as for content negotiation purposes. The available options are, +      to check the file extension in the request URI, the "Accept" header,, +      a request parameter, as well as to fall back on a default content type., +      By default, file extension in the request URI is checked first and, +      the "Accept" header is checked next.</para>, +      <para>For file extensions in the request URI, the MVC Java config and, +      the MVC namespace, automatically register extensions such as, +      <filename>.json</filename>, <filename>.xml</filename>,, +      <filename>.rss</filename>, and <filename>.atom</filename> if the, +      corresponding dependencies such as Jackson, JAXB2, or Rome, +      are present on the classpath. Additional extensions may be not need, +      to be registered explicitly if they can be discovered via , +      <classname>ServletContext.getMimeType(String)</classname> or the, +      <emphasis>Java Activation Framework</emphasis>, +      (see <classname>javax.activation.MimetypesFileTypeMap</classname>).</para>, +      <para>Below is an example of customizing content negotiation, +      options through the MVC Java config:</para>, +     <para>In the MVC namespace, the <code>&lt;mvc:annotation-driven&gt;</code> element, +     has a <code>content-negotiation-manager</code> attribute, which expects a, +     <classname>ContentNegotiationManager</classname> that in turn can be created, +     with a <classname>ContentNegotiationManagerFactoryBean</classname>:</para>, +      <para>If not using the MVC Java config or the MVC namespace, you'll need, +      to create an instance of <classname>ContentNegotiationManager</classname>, +      and use it to configure, +      <classname>RequestMappingHandlerMapping</classname> for request mapping, +      purposes, and <classname>RequestMappingHandlerAdapter</classname> and, +      <classname>ExceptionHandlerExceptionResolver</classname> for, +      content negotiation purposes.</para>, +, +      <para>Note that <classname>ContentNegotiatingViewResolver</classname>, +      now can also be configured with a <code>ContentNegotiatingViewResolver</code>,, +      so you can use one instance throughout Spring MVC.</para>, +, +      <para>In more advanced cases, it may be useful to configure, +      multiple <classname>ContentNegotiationManager</classname> instances, +      that in turn may contain custom, +      <classname>ContentNegotiationStrategy</classname> implementations., +      For example you could configure, +      <classname>ExceptionHandlerExceptionResolver</classname> with, +      a <classname>ContentNegotiationManager</classname> that always, +      resolves the requested media type to <filename>"application/json"</filename>., +      Or you may want to plug a custom strategy that has some logic to select, +      a default content type (e.g. either XML or JSON) if no content, +      types were requested.</para>, +, +++ b/src/reference/docbook/new-in-3.2.xml, +    request. The available implementations are based on the file extension,, +    query parameter, the 'Accept' header, or a fixed content type., +    class to use when configuring content negotiation options.]