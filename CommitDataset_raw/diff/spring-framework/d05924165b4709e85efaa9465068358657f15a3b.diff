[+++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java, + * Copyright 2002-2018 the original author or authors., +import java.util.ListIterator;, +import org.springframework.lang.Nullable;, + * <p>Each instance of this class represents one link in the chain. The public, + * constructor {@link #DefaultWebFilterChain(WebHandler, List)}, + * initializes the full chain and represents its first link., + *, + * <p>This class is immutable and thread-safe. It can be created once and, + * re-used to handle request concurrently., + *, +	private final List<WebFilter> allFilters;, +	@Nullable, +	private final WebFilter currentFilter;, +, +	@Nullable, +	private final DefaultWebFilterChain next;, +	/**, +	 * Public constructor with the list of filters and the target handler to use., +	 * @param handler the target handler, +	 * @param filters the filters ahead of the handler, +	 * @since 5.1, +	 */, +	public DefaultWebFilterChain(WebHandler handler, List<WebFilter> filters) {, +		this.allFilters = Collections.unmodifiableList(filters);, +		DefaultWebFilterChain chain = initChain(filters, handler);, +		this.currentFilter = chain.currentFilter;, +		this.next = chain.next;, +	private static DefaultWebFilterChain initChain(List<WebFilter> filters, WebHandler handler) {, +		DefaultWebFilterChain chain = new DefaultWebFilterChain(filters, handler, null, null);, +		ListIterator<? extends WebFilter> iterator = filters.listIterator(filters.size());, +		while (iterator.hasPrevious()) {, +			chain = new DefaultWebFilterChain(filters, handler, iterator.previous(), chain);, +		}, +		return chain;, +	}, +, +	/**, +	 * Private constructor to represent one link in the chain., +	 */, +	private DefaultWebFilterChain(List<WebFilter> allFilters, WebHandler handler,, +			@Nullable WebFilter currentFilter, @Nullable DefaultWebFilterChain next) {, +, +		this.allFilters = allFilters;, +		this.currentFilter = currentFilter;, +		this.handler = handler;, +		this.next = next;, +	}, +, +	/**, +	 * Public constructor with the list of filters and the target handler to use., +	 * @param handler the target handler, +	 * @param filters the filters ahead of the handler, +	 * @deprecated as of 5.1 this constructor is deprecated in favor of, +	 * {@link #DefaultWebFilterChain(WebHandler, List)}., +	 */, +	@Deprecated, +	public DefaultWebFilterChain(WebHandler handler, WebFilter... filters) {, +		this(handler, Arrays.asList(filters));, +		return this.allFilters;, +		return Mono.defer(() ->, +				this.currentFilter != null && this.next != null ?, +						this.currentFilter.filter(exchange, this.next) :, +						this.handler.handle(exchange));, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java, + * Copyright 2002-2018 the original author or authors., +import java.util.ListIterator;, +import org.springframework.lang.Nullable;, + * <p>Each instance of this class represents one link in the chain. The public, + * constructor {@link #DefaultWebFilterChain(WebHandler, List)}, + * initializes the full chain and represents its first link., + *, + * <p>This class is immutable and thread-safe. It can be created once and, + * re-used to handle request concurrently., + *, +	private final List<WebFilter> allFilters;, +	@Nullable, +	private final WebFilter currentFilter;, +, +	@Nullable, +	private final DefaultWebFilterChain next;, +	/**, +	 * Public constructor with the list of filters and the target handler to use., +	 * @param handler the target handler, +	 * @param filters the filters ahead of the handler, +	 * @since 5.1, +	 */, +	public DefaultWebFilterChain(WebHandler handler, List<WebFilter> filters) {, +		this.allFilters = Collections.unmodifiableList(filters);, +		DefaultWebFilterChain chain = initChain(filters, handler);, +		this.currentFilter = chain.currentFilter;, +		this.next = chain.next;, +	private static DefaultWebFilterChain initChain(List<WebFilter> filters, WebHandler handler) {, +		DefaultWebFilterChain chain = new DefaultWebFilterChain(filters, handler, null, null);, +		ListIterator<? extends WebFilter> iterator = filters.listIterator(filters.size());, +		while (iterator.hasPrevious()) {, +			chain = new DefaultWebFilterChain(filters, handler, iterator.previous(), chain);, +		}, +		return chain;, +	}]