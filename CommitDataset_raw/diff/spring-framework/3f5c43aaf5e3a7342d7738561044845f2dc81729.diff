[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +	 * @param sourceValues the source values to bind, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +	 * @param sourceValues the source values to bind, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.context.MessageSource;, +import org.springframework.ui.message.MessageBuilder;, +import org.springframework.ui.message.ResolvableArgument;, +	private MessageSource messageSource;, +, +	/**, +	 * Configure the MessageSource that resolves localized {@link BindingResult} alert messages., +	 * @param messageSource the message source, +	 */, +	public void setMessageSource(MessageSource messageSource) {, +		this.messageSource = messageSource;, +	}, +	, +	/**, +	 * Configure the TypeConverter that converts values as required by Binding setValue and getValue attempts., +	 * For a setValue attempt, the TypeConverter will be asked to perform a conversion if the value parsed by the Binding's Formatter is not assignable to the target property type., +	 * For a getValue attempt, the TypeConverter will be asked to perform a conversion if the property type does not match the type T required by the Binding's Formatter., +	 * @param typeConverter the type converter used by the binding system, which is based on Spring EL, +	 * @see EvaluationContext#getTypeConverter(), +	 */, +	public void setTypeConverter(TypeConverter typeConverter) {, +		this.typeConverter = typeConverter;, +	}, +, + 	 * This hook allows the binder to pre-process the source values before binding occurs. , +-    * For example, a Binder might insert empty or default values for fields that are not present., +-    * As another example, a Binder might collapse multiple source values into a single source value. , +				// could occur if the property was not found or is not readable, +				// could occur if the property was not found or is not readable, +	class NoSuchBindingResult implements BindingResult {, +		, +					MessageBuilder builder = new MessageBuilder(messageSource);, +					builder.code(getCode());, +					builder.arg("label", new ResolvableArgument(property));, +					builder.arg("value", sourceValue);, +					builder.defaultMessage("Failed to bind to property '" + property, +							+ "'; no binding has been added for the property");, +					return builder.build();, +	class InvalidFormatResult implements BindingResult {, +		private Object sourceValue;, +		private ParseException cause;, +, +		public InvalidFormatResult(String property, Object sourceValue, ParseException cause) {, +			this.sourceValue = sourceValue;, +			this.cause = cause;, +			return sourceValue;, +					MessageBuilder builder = new MessageBuilder(messageSource);, +					builder.code(getCode());, +					builder.arg("label", new ResolvableArgument(property));, +					builder.arg("value", sourceValue);, +					builder.arg("errorOffset", cause.getErrorOffset());, +					builder.defaultMessage("Failed to bind to property '" + property + "'; the user value ", +							+ StylerUtils.style(sourceValue) + " has an invalid format and could no be parsed");, +					return builder.build();, +	class ExpressionEvaluationErrorResult implements BindingResult {, +		private Object sourceValue;, +		private EvaluationException cause;, +		public ExpressionEvaluationErrorResult(String property, Object sourceValue, EvaluationException cause) {, +			this.sourceValue = sourceValue;, +			this.cause = cause;, +			return sourceValue;, +					SpelMessage spelCode = ((SpelEvaluationException) cause).getMessageCode();, +						return "conversionFailed";, +				public Severity getSeverity() {, +					SpelMessage spelCode = ((SpelEvaluationException) cause).getMessageCode();, +				public String getMessage() {, +					SpelMessage spelCode = ((SpelEvaluationException) cause).getMessageCode();, +						AccessException accessException = (AccessException) cause.getCause();, +								MessageBuilder builder = new MessageBuilder(messageSource);, +								builder.code("conversionFailed");, +								builder.arg("label", new ResolvableArgument(property));, +								builder.arg("value", sourceValue);, +								builder.defaultMessage("Failed to bind to property '" + property + "'; user value ", +										+ StylerUtils.style(sourceValue) + " could not be converted to property type [", +										+ failure.getTargetType().getName() + "]");, +								return builder.build();, +						MessageBuilder builder = new MessageBuilder(messageSource);, +						builder.code(getCode());, +						builder.arg("label", new ResolvableArgument(property));, +						builder.arg("value", sourceValue);, +						builder.defaultMessage("Failed to bind to property '" + property + "'; no such property exists on model");, +						return builder.build();, +					MessageBuilder builder = new MessageBuilder(messageSource);, +					builder.code("couldNotSetValue");, +					builder.arg("label", new ResolvableArgument(property));, +					builder.arg("value", sourceValue);, +					builder.defaultMessage("Failed to bind to property '" + property + "'; reason = " + cause.getLocalizedMessage());, +					return builder.build();, +			};, +		}, +, +	}, +, +	class SuccessResult implements BindingResult {, +		private Object sourceValue;]