[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +				if (logger.isDebugEnabled()) {, +					if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +				if (logger.isDebugEnabled()) {, +					if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, +			if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +				if (logger.isDebugEnabled()) {, +					if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, +			if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (logger.isDebugEnabled()) {, +		if (logger.isDebugEnabled()) {, +		return "HTTP " + request.getMethod() + " \"" + request.getPath() + query + "\"";, +		if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +				if (logger.isDebugEnabled()) {, +					if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, +			if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (logger.isDebugEnabled()) {, +		if (logger.isDebugEnabled()) {, +		return "HTTP " + request.getMethod() + " \"" + request.getPath() + query + "\"";, +		if (logger.isDebugEnabled()) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFunctions.java, +			if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +import org.springframework.core.ResolvableType;, +							ResolvableType resolvableType = ResolvableType.forType(this.responseType);, +							logger.debug("Reading to [" + resolvableType + "]");, +							logger.debug("Reading to [" + className + "] as \"" + contentType + "\"");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +				logger.debug("Async result set but request already complete: " + formatRequestUri());, +			boolean isError = result instanceof Throwable;, +			logger.debug("Async " + (isError ? "error" : "result set") + ", dispatch to " + formatRequestUri());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +				if (logger.isDebugEnabled()) {, +					if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, +			if (logger.isDebugEnabled()) {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (logger.isDebugEnabled()) {, +		if (logger.isDebugEnabled()) {, +		return "HTTP " + request.getMethod() + " \"" + request.getPath() + query + "\"";, +		if (logger.isDebugEnabled()) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFunctions.java]