[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2016 the original author or authors., +				else if (!method.isBridge() && targetMethod.getParameterTypes().length == numParams) {, +					if (targetMethod.isBridge()) {, +						// Prefer regular method over bridge..., +						targetMethod = method;, +					}, +					"the least number of parameters but there were " +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2016 the original author or authors., +				else if (!method.isBridge() && targetMethod.getParameterTypes().length == numParams) {, +					if (targetMethod.isBridge()) {, +						// Prefer regular method over bridge..., +						targetMethod = method;, +					}, +					"the least number of parameters but there were " +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2016 the original author or authors., +			throw new BeanDefinitionValidationException("Could not find unique destroy method on bean with name '" +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2016 the original author or authors., +				else if (!method.isBridge() && targetMethod.getParameterTypes().length == numParams) {, +					if (targetMethod.isBridge()) {, +						// Prefer regular method over bridge..., +						targetMethod = method;, +					}, +					"the least number of parameters but there were " +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2016 the original author or authors., +			throw new BeanDefinitionValidationException("Could not find unique destroy method on bean with name '" +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	public static abstract class BaseClassWithDestroyMethod {, +, +		public abstract BaseClassWithDestroyMethod close();, +	}, +, +, +	public static class BeanWithDestroyMethod extends BaseClassWithDestroyMethod {, +		@Override, +		public BeanWithDestroyMethod close() {, +			return this;]