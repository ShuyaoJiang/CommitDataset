[+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/RecursiveAnnotationArrayVisitor.java, +import java.lang.annotation.Annotation;, +		else if (!this.attributes.containsKey(this.attributeName)) {, +			Class<? extends Annotation> annotationType = this.attributes.annotationType();, +			if (annotationType != null) {, +				try {, +					Class<?> attributeType = annotationType.getMethod(this.attributeName).getReturnType();, +					if (attributeType.isArray()) {, +						this.attributes.put(this.attributeName, Array.newInstance(attributeType.getComponentType(), 0));, +					}, +				}, +				catch (NoSuchMethodException ex) {, +					// Corresponding attribute method not found: cannot expose empty array., +				}, +			}, +		}, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/RecursiveAnnotationArrayVisitor.java, +import java.lang.annotation.Annotation;, +		else if (!this.attributes.containsKey(this.attributeName)) {, +			Class<? extends Annotation> annotationType = this.attributes.annotationType();, +			if (annotationType != null) {, +				try {, +					Class<?> attributeType = annotationType.getMethod(this.attributeName).getReturnType();, +					if (attributeType.isArray()) {, +						this.attributes.put(this.attributeName, Array.newInstance(attributeType.getComponentType(), 0));, +					}, +				}, +				catch (NoSuchMethodException ex) {, +					// Corresponding attribute method not found: cannot expose empty array., +				}, +			}, +		}, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, +			assertThat(new HashSet<>(allMeta), is(equalTo(new HashSet<Object>(Arrays.asList("direct", "")))));, +			assertEquals("", metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get("additional"));, +			assertEquals(0, ((String[]) metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get("additionalArray")).length);, +, +		String[] additionalArray() default "direct";, +	@DirectAnnotation(value = "direct", additional = "", additionalArray = {})]