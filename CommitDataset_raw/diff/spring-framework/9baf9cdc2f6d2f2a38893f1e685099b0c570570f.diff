[+++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +public abstract class AbstractApplicationEventMulticaster implements ApplicationEventMulticaster, BeanFactoryAware {, +	public void removeApplicationListener(ApplicationListener listener) {, +		this.defaultRetriever.applicationListeners.remove(listener);, +	}, +, +	public void removeApplicationListenerBean(String listenerBeanName) {, +		this.defaultRetriever.applicationListenerBeans.remove(listenerBeanName);, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +public abstract class AbstractApplicationEventMulticaster implements ApplicationEventMulticaster, BeanFactoryAware {, +	public void removeApplicationListener(ApplicationListener listener) {, +		this.defaultRetriever.applicationListeners.remove(listener);, +	}, +, +	public void removeApplicationListenerBean(String listenerBeanName) {, +		this.defaultRetriever.applicationListenerBeans.remove(listenerBeanName);, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Interface to be implemented by objects that can manage a number of, + * {@link ApplicationListener} objects, and publish events to them., + *, + * <p>An {@link org.springframework.context.ApplicationEventPublisher}, typically, + * a Spring {@link org.springframework.context.ApplicationContext}, can use an, + * ApplicationEventMulticaster as a delegate for actually publishing events., +	 * Add a listener bean to be notified of all events., +	 * Remove a listener from the notification list., +	 * @param listener the listener to remove, +	 */, +	void removeApplicationListener(ApplicationListener listener);, +, +	/**, +	 * Remove a listener bean from the notification list., +	 * @param listenerBeanName the name of the listener bean to add, +	 */, +	void removeApplicationListenerBean(String listenerBeanName);, +, +	/**]