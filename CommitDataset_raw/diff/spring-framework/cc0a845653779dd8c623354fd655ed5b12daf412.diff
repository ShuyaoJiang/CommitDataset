[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.Part;, + * @author Brian Clozel, +		else if(isMultipartFileArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			arg = multipartRequest.getFiles(name).toArray(new MultipartFile[0]);, +		}, +		else if (isPartArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = RequestPartResolver.resolvePart(servletRequest);, +		}, +	private boolean isPartArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && "javax.servlet.http.Part".equals(paramType.getName()));, +	}, +, +	private boolean isMultipartFileArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && MultipartFile.class.equals(paramType));, +	}, +, +	private static class RequestPartResolver {, +, +		public static Object resolvePart(HttpServletRequest servletRequest) throws Exception {, +			return servletRequest.getParts().toArray(new Part[servletRequest.getParts().size()]);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.Part;, + * @author Brian Clozel, +		else if(isMultipartFileArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			arg = multipartRequest.getFiles(name).toArray(new MultipartFile[0]);, +		}, +		else if (isPartArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = RequestPartResolver.resolvePart(servletRequest);, +		}, +	private boolean isPartArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && "javax.servlet.http.Part".equals(paramType.getName()));, +	}, +, +	private boolean isMultipartFileArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && MultipartFile.class.equals(paramType));, +	}, +, +	private static class RequestPartResolver {, +, +		public static Object resolvePart(HttpServletRequest servletRequest) throws Exception {, +			return servletRequest.getParts().toArray(new Part[servletRequest.getParts().size()]);, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Brian Clozel, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<String, Part>();, +		this.parts.add(part.getName(), part);, +		return this.parts.getFirst(name);, +		List<Part> result = new LinkedList<Part>();, +		for(List<Part> list : this.parts.values()) {, +			result.addAll(list);, +		}, +		return result;, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.Part;, + * @author Brian Clozel, +		else if(isMultipartFileArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			arg = multipartRequest.getFiles(name).toArray(new MultipartFile[0]);, +		}, +		else if (isPartArray(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = RequestPartResolver.resolvePart(servletRequest);, +		}, +	private boolean isPartArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && "javax.servlet.http.Part".equals(paramType.getName()));, +	}, +, +	private boolean isMultipartFileArray(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType().getComponentType();, +		return ((paramType != null) && MultipartFile.class.equals(paramType));, +	}, +, +	private static class RequestPartResolver {, +, +		public static Object resolvePart(HttpServletRequest servletRequest) throws Exception {, +			return servletRequest.getParts().toArray(new Part[servletRequest.getParts().size()]);]