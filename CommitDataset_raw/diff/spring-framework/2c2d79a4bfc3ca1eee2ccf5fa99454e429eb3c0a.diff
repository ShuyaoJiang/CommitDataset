[+++ b/spring-framework-reference/src/validation.xml, +			The system defines an SPI to implement type conversion logic, as well as an API to execute type conversions at runtime., +}]]></programlisting>, +				Take care to ensure your Converter implementation is thread-safe., +				These include converters from Strings to Numbers and other common types., +				Consider <classname>StringToInteger</classname> as an example Converter implementation:, +			<programlisting language="java">package org.springframework.core.convert.converters;, +public class StringToInteger implements Converter&lt;String, Integer&gt; {, +}</programlisting>, +				When you need to centralize the conversion logic for an entire class hierarchy, for example, when converting from String to java.lang.Enum objects, implement a <interfacename>ConverterFactory</interfacename>ConverterFactory:, +}]]></programlisting>, +				Parameterize S to be type you are converting from and R to be base type defining the <emphasis>range</emphasis> of classes you can convert to., +				Consider the <classname>StringToEnum</classname> ConverterFactory as an example:, +}]]></programlisting>, +}]]></programlisting>, +				Most ConversionService implementations also implement <interface>ConverterRegistry</interface>, which provides an SPI for registering converters., +			</para>, +			<note>, +				<para>, +			</note>, +				To override the default set of converters with your own custom converter(s), set the <code>converters</code> property:, +</bean>]]></programlisting>, +				To work with a ConversionService instance programatically, simply inject a reference to it like you would for any other bean:, +}]]></programlisting>, +			As discussed in the previous section, a Spring Container can be configured to use this system to bind bean property values., +			For example, when SpEL needs to coerce a <classname>Short</classname> to a <classname>Long</classname> to fullfill an, +			<function>expression.setValue()</function> attempt, the core.convert system performs the coersion., +			In general, use Converters when you need to implement general-purpose type, +			of a web application and need to apply <emphasis>two-way</emphasis> parsing, , +}]]></programlisting>, +				Parameterize T to be the type of object you are formatting, for example, <classname>java.lang.BigDecimal</classname>., +				Take care to ensure your Formatter implementation is thread-safe., +				Consider <classname>DateFormatter</classname> as an example <interfacename>Formatter</interfacename> implementation:				, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +					Then, to trigger formatting, simply annotate a property with @DecimalFormat in your model:, +}]]></programlisting>							, +}]]></programlisting>, +				A FormatterRegistry is designed to be instantiated at application startup, then shared between multiple threads., +			</para>, +			<note>, +				<para>, +			</note>, +    }]]></programlisting>, +				This applies the Formatter to the field and overrides any Formatter, +				that would have been applied by field type or annotation., +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>, +}]]></programlisting>					, +}]]></programlisting>, +}]]></programlisting>, +</bean>]]></programlisting>, +<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />]]></programlisting>]