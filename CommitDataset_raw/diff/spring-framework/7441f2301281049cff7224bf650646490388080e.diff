[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.lang.UsesJava7;, +import org.springframework.util.ClassUtils;, + * @see #setRemoveOnCancelPolicy(boolean), +	// Check for setRemoveOnCancelPolicy method - available on JDK 7 and higher, +	private static boolean hasRemoveOnCancelPolicyMethod = ClassUtils.hasMethod(, +			ScheduledThreadPoolExecutor.class, "setRemoveOnCancelPolicy", boolean.class);, +, +, +	private Boolean removeOnCancelPolicy;, +, +	 * Set the same property on ScheduledExecutorService available in JDK 1.7 or, +	 * higher. This property is ignored on JDK 1.6., +	 * Default is false., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +		if (executor instanceof ScheduledThreadPoolExecutor) {, +			configureRemoveOnCancelPolicy(((ScheduledThreadPoolExecutor) executor));, +		}, +, +	@UsesJava7 // guard setting removeOnCancelPolicy (safe with 1.6 due to hasRemoveOnCancelPolicyMethod check), +	private void configureRemoveOnCancelPolicy(ScheduledThreadPoolExecutor service) {, +		if (hasRemoveOnCancelPolicyMethod && this.removeOnCancelPolicy != null) {, +			service.setRemoveOnCancelPolicy(true);, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.lang.UsesJava7;, +import org.springframework.util.ClassUtils;, + * @see #setRemoveOnCancelPolicy(boolean), +	// Check for setRemoveOnCancelPolicy method - available on JDK 7 and higher, +	private static boolean hasRemoveOnCancelPolicyMethod = ClassUtils.hasMethod(, +			ScheduledThreadPoolExecutor.class, "setRemoveOnCancelPolicy", boolean.class);, +, +, +	private Boolean removeOnCancelPolicy;, +, +	 * Set the same property on ScheduledExecutorService available in JDK 1.7 or, +	 * higher. This property is ignored on JDK 1.6., +	 * Default is false., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +		if (executor instanceof ScheduledThreadPoolExecutor) {, +			configureRemoveOnCancelPolicy(((ScheduledThreadPoolExecutor) executor));, +		}, +, +	@UsesJava7 // guard setting removeOnCancelPolicy (safe with 1.6 due to hasRemoveOnCancelPolicyMethod check), +	private void configureRemoveOnCancelPolicy(ScheduledThreadPoolExecutor service) {, +		if (hasRemoveOnCancelPolicyMethod && this.removeOnCancelPolicy != null) {, +			service.setRemoveOnCancelPolicy(true);, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.lang.UsesJava7;, +import org.springframework.util.ClassUtils;, + * @see #setRemoveOnCancelPolicy(boolean), +	// Check for setRemoveOnCancelPolicy method - available on JDK 7 and higher, +	private static boolean hasRemoveOnCancelPolicyMethod = ClassUtils.hasMethod(, +			ScheduledThreadPoolExecutor.class, "setRemoveOnCancelPolicy", boolean.class);, +, +, +	private volatile Boolean removeOnCancelPolicy;, +, +	 * Set the same property on ScheduledExecutorService available in JDK 1.7 or, +	 * higher. This property is ignored on JDK 1.6., +	 * Default is false., +	 * <p><b>This setting can be modified at runtime, for example through JMX.</b>, +	 */, +	@UsesJava7 // guard setting removeOnCancelPolicy (safe with 1.6 due to hasRemoveOnCancelPolicyMethod check), +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {, +			configureRemoveOnCancelPolicy((ScheduledThreadPoolExecutor) this.scheduledExecutor);, +		}, +	}, +, +	@UsesJava7 // guard setting removeOnCancelPolicy (safe with 1.6 due to hasRemoveOnCancelPolicyMethod check), +	private void configureRemoveOnCancelPolicy(ScheduledThreadPoolExecutor service) {, +		if (hasRemoveOnCancelPolicyMethod && this.removeOnCancelPolicy != null) {, +			service.setRemoveOnCancelPolicy(true);, +		}, +	}, +, +	/**, +, +		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {, +			configureRemoveOnCancelPolicy(((ScheduledThreadPoolExecutor) this.scheduledExecutor));]