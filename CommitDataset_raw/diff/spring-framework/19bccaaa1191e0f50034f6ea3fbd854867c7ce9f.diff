[+++ b/spring-framework-reference/src/aop-api.xml, +          <para>Specify whether to use CGLIB (see below and also, +          <xref linkend="aop-pfb-proxy-types" />).</para>, +          also <xref linkend="aop-pfb-proxy-types" />).</para>, +          will be used (but see also <xref linkend="aop-pfb-proxy-types" />).</para>, +++ b/spring-framework-reference/src/aop-api.xml, +          <para>Specify whether to use CGLIB (see below and also, +          <xref linkend="aop-pfb-proxy-types" />).</para>, +          also <xref linkend="aop-pfb-proxy-types" />).</para>, +          will be used (but see also <xref linkend="aop-pfb-proxy-types" />).</para>, +++ b/spring-framework-reference/src/aop.xml, +        <para>See <xref linkend="aop-choosing" /> for a, +        more complete discussion of the whys and wherefores of each style.</para>, +      <emphasis>proxy-based</emphasis>. See <xref, +++ b/spring-framework-reference/src/aop-api.xml, +          <para>Specify whether to use CGLIB (see below and also, +          <xref linkend="aop-pfb-proxy-types" />).</para>, +          also <xref linkend="aop-pfb-proxy-types" />).</para>, +          will be used (but see also <xref linkend="aop-pfb-proxy-types" />).</para>, +++ b/spring-framework-reference/src/aop.xml, +        <para>See <xref linkend="aop-choosing" /> for a, +        more complete discussion of the whys and wherefores of each style.</para>, +      <emphasis>proxy-based</emphasis>. See <xref, +++ b/spring-framework-reference/src/beans.xml, +        <para>See <xref linkend="background-ioc" /></para>, +      <programlisting language="java">ApplicationContext context =, +    new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});</programlisting>, +      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;, +      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;, +  &lt;bean id="accountDao", +      class="org.springframework.samples.jpetstore.dao.ibatis.SqlMapAccountDao"&gt;, +ApplicationContext context =, +    new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});, +        created. Scopes are defined in <xref, +        <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans", +  &lt;bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource", +        destroy-method="close", +        <programlisting language="xml">&lt;bean id="mappings", +      class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;, +   <lineannotation>&lt;!-- a bean with id '<literal>theTargetBean</literal>' must exist; otherwise an exception will be thrown --&gt;</lineannotation>, +&lt;bean id="accountService"  <lineannotation>&lt;-- bean name is the same as the parent bean --&gt;</lineannotation>, +          &lt;ref parent="accountService"/&gt;  <lineannotation>&lt;!-- notice how we refer to the parent bean --&gt;</lineannotation>, +    <lineannotation>&lt;!-- insert other configuration and dependencies as required here --&gt;</lineannotation>, +      annotations, you may find <literal><xref, +      linkend="metadata-annotations-required" /></literal> to be of interest.</para>, +      <lineannotation>// notice the Spring API dependency!</lineannotation>, +      return this.applicationContext.getBean("command", Command.class);, +   public void setApplicationContext(ApplicationContext applicationContext), +                                                                    throws BeansException {, +    <note>, +      <title>Thread-scoped beans</title>, +      <para>As of Spring 3.0, a <emphasis>thread scope</emphasis> is available, but is, +      not registered by default. For more information, see the documentation for, +      <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/support/SimpleThreadScope.html">SimpleThreadScope</ulink>., +      For instructions on how to register this or any other custom scope, see, +      <xref linkend="beans-factory-scopes-custom-using"/>.</para>, +    </note>, +<lineannotation>&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</lineannotation>, +&lt;bean id="accountService" class="com.foo.DefaultAccountService" scope="singleton"/&gt;</programlisting>, +&lt;bean id="accountService" class="com.foo.DefaultAccountService" scope="prototype"/&gt;</programlisting>, +    &lt;listener-class&gt;, +        org.springframework.web.context.request.RequestContextListener, +    &lt;/listener-class&gt;, +        it as below.</para>, +        <note>, +            <para>The example below uses <literal>SimpleThreadScope</literal>, +            which is included with Spring, but not registered by default. The instructions, +            would be the same for your own custom <literal>Scope</literal> implementations.</para>, +        </note>, +        <programlisting language="java">, +Scope threadScope = new SimpleThreadScope();, +beanFactory.registerScope("<emphasis role="bold">thread</emphasis>", threadScope);</programlisting>, +        <programlisting language="xml">&lt;bean id="..." class="..." scope="thread"&gt;</programlisting>, +                    &lt;bean class="org.springframework.context.support.SimpleThreadScope"/&gt;, +    &lt;bean id="bar" class="x.y.Bar" scope="thread"&gt;, +      information, see <xref, +    public Object postProcessBeforeInitialization(Object bean, String beanName), +                                                                       throws BeansException {, +    public Object postProcessAfterInitialization(Object bean, String beanName), +                                                                       throws BeansException {, +        shown in <xref linkend="metadata-annotations-required" /> which demonstrates the, +        <xref linkend="beans-factory-extension-bpp" />.</para>, +    public void prepare(MovieCatalog movieCatalog,, +                        CustomerPreferenceDao customerPreferenceDao) {, +    public void prepare(<emphasis role="bold">@Qualifier("main")</emphasis> MovieCatalog movieCatalog,, +                        CustomerPreferenceDao customerPreferenceDao) {, +      <programlisting language="xml">&lt;bean id="customAutowireConfigurer", +       class="org.springframework.beans.factory.annotation.CustomAutowireConfigurer"&gt;, +      another alternative to those described in <link, +              <entry><literal>org.example.MyTypeFilter</literal></entry>, +              <interfacename>org.springframework.core.type, +              .TypeFilter</interfacename>, +      <programlisting language="xml">&lt;beans&gt;, +        &lt;context:exclude-filter type="annotation", +                                expression="org.springframework.stereotype.Repository"/&gt;, +      <programlisting language="java">@Component, +    public void doWork() {, +      code contained in its <methodname>doWork</methodname> method. However,, +      additional support for autowiring of <literal>@Bean</literal> methods:</para>, +    protected TestBean protectedInstance(@Qualifier("public") TestBean spouse,]