[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	 * Specify the set of profiles active for this {@code Environment}. Profiles are, +	 * Return the value of {@link System#getenv()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getenv(String)}., +	 * <p>Note that most {@link Environment} implementations will include this system, +	 * environment map as a default {@link PropertySource} to be searched. Therefore, it, +	 * is recommended that this method not be used directly unless bypassing other, +	 * property sources is expressly intended., +	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw, +	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access, +	 * to a property, {@code null} will be returned and an INFO-level log message will be, +	 * issued noting the exception., +	 * Return the value of {@link System#getProperties()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getProperty(String)}., +	 * <p>Note that most {@code Environment} implementations will include this system, +	 * properties map as a default {@link PropertySource} to be searched. Therefore, it is, +	 * recommended that this method not be used directly unless bypassing other property, +	 * sources is expressly intended., +	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw, +	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access, +	 * to a property, {@code null} will be returned and an INFO-level log message will be, +	 * issued noting the exception., +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	 * Specify the set of profiles active for this {@code Environment}. Profiles are, +	 * Return the value of {@link System#getenv()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getenv(String)}., +	 * <p>Note that most {@link Environment} implementations will include this system, +	 * environment map as a default {@link PropertySource} to be searched. Therefore, it, +	 * is recommended that this method not be used directly unless bypassing other, +	 * property sources is expressly intended., +	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw, +	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access, +	 * to a property, {@code null} will be returned and an INFO-level log message will be, +	 * issued noting the exception., +	 * Return the value of {@link System#getProperties()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getProperty(String)}., +	 * <p>Note that most {@code Environment} implementations will include this system, +	 * properties map as a default {@link PropertySource} to be searched. Therefore, it is, +	 * recommended that this method not be used directly unless bypassing other property, +	 * sources is expressly intended., +	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw, +	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access, +	 * to a property, {@code null} will be returned and an INFO-level log message will be, +	 * issued noting the exception., +++ b/org.springframework.core/src/main/java/org/springframework/core/env/Environment.java, + * Models two key aspects of the application environment: <em>profiles</em> and, + * <em>properties</em>., + * <p>A <em>profile</em> is a named, logical group of bean definitions to be registered, + * with the container only if the given profile is <em>active</em>. Beans may be assigned, + * to a profile whether defined in XML or via annotations; see the spring-beans 3.1 schema, + * or the {@link org.springframework.context.annotation.Profile @Profile} annotation for, + * syntax details. The role of the {@code Environment} object with relation to profiles is, + * in determining which profiles (if any) are currently {@linkplain #getActiveProfiles, + * active}, and which profiles (if any) should be {@linkplain #getDefaultProfiles active, + * by default}., + * <p><em>Properties</em> play an important role in almost all applications, and may, + * originate from a variety of sources: properties files, JVM system properties, system, + * environment variables, JNDI, servlet context parameters, ad-hoc Properties objects,, + * Maps, and so on. The role of the environment object with relation to properties is to, + * provide the user with a convenient service interface for configuring property sources, + * and resolving properties from them., + * org.springframework.context.EnvironmentAware EnvironmentAware} or {@code @Inject} the, + * {@code Environment} in order to query profile state or resolve properties directly., + * <p>In most cases, however, application-level beans should not need to interact with the, + * {@code Environment} directly but instead may have to have <code>${...}</code> property, + * values replaced by a property placeholder configurer such as, + * {@link org.springframework.context.support.PropertySourcesPlaceholderConfigurer, + * PropertySourcesPlaceholderConfigurer}, which itself is {@code EnvironmentAware} and, + * as of Spring 3.1 is registered by default when using, + * {@code <context:property-placeholder/>}., + * <p>Configuration of the environment object must be done through the, + * {@link ConfigurableEnvironment} interface, returned from all, + * {@code AbstractApplicationContext} subclass {@code getEnvironment()} methods. See, + * {@link DefaultEnvironment} for several examples of using the ConfigurableEnvironment, + * interface to manipulate property sources prior to application context refresh()., + * @see PropertyResolver, + * @see AbstractEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	 * Specify the set of profiles active for this {@code Environment}. Profiles are, +	 * Return the value of {@link System#getenv()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getenv(String)}., +	 * <p>Note that most {@link Environment} implementations will include this system, +	 * environment map as a default {@link PropertySource} to be searched. Therefore, it, +	 * is recommended that this method not be used directly unless bypassing other, +	 * property sources is expressly intended., +	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw, +	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access, +	 * to a property, {@code null} will be returned and an INFO-level log message will be, +	 * issued noting the exception., +	 * Return the value of {@link System#getProperties()} if allowed by the current, +	 * {@link SecurityManager}, otherwise return a map implementation that will attempt, +	 * to access individual keys using calls to {@link System#getProperty(String)}., +	 * <p>Note that most {@code Environment} implementations will include this system, +	 * properties map as a default {@link PropertySource} to be searched. Therefore, it is, +	 * recommended that this method not be used directly unless bypassing other property]