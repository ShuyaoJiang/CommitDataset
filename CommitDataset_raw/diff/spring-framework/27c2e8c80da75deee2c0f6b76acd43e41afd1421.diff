[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with, +	 * the {@link Bean} annotation., +		return (AnnotationUtils.findAnnotation(method, Bean.class) != null);, +		// By default, the bean name is the name of the @Bean-annotated method, +		// Check to see if the user has explicitly set a custom bean name..., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with, +	 * the {@link Bean} annotation., +		return (AnnotationUtils.findAnnotation(method, Bean.class) != null);, +		// By default, the bean name is the name of the @Bean-annotated method, +		// Check to see if the user has explicitly set a custom bean name..., +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationTests.java, + * Copyright 2002-2015 the original author or authors., +	basePackageClasses = TestBean.class,, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with, +	 * the {@link Bean} annotation., +		return (AnnotationUtils.findAnnotation(method, Bean.class) != null);, +		// By default, the bean name is the name of the @Bean-annotated method, +		// Check to see if the user has explicitly set a custom bean name..., +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationTests.java, + * Copyright 2002-2015 the original author or authors., +	basePackageClasses = TestBean.class,, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserBeanDefinitionDefaultsTests.java, + * Copyright 2002-2015 the original author or authors., +		catch (UnsatisfiedDependencyException ex) {, +		catch (UnsatisfiedDependencyException ex) {, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with, +	 * the {@link Bean} annotation., +		return (AnnotationUtils.findAnnotation(method, Bean.class) != null);, +		// By default, the bean name is the name of the @Bean-annotated method, +		// Check to see if the user has explicitly set a custom bean name..., +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationTests.java, + * Copyright 2002-2015 the original author or authors., +	basePackageClasses = TestBean.class,, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserBeanDefinitionDefaultsTests.java, + * Copyright 2002-2015 the original author or authors., +		catch (UnsatisfiedDependencyException ex) {, +		catch (UnsatisfiedDependencyException ex) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserScopedProxyTests.java, +, +, +, +, +, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with, +	 * the {@link Bean} annotation., +		return (AnnotationUtils.findAnnotation(method, Bean.class) != null);, +		// By default, the bean name is the name of the @Bean-annotated method, +		// Check to see if the user has explicitly set a custom bean name..., +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationTests.java, + * Copyright 2002-2015 the original author or authors., +	basePackageClasses = TestBean.class,, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserBeanDefinitionDefaultsTests.java, + * Copyright 2002-2015 the original author or authors., +		catch (UnsatisfiedDependencyException ex) {, +		catch (UnsatisfiedDependencyException ex) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserScopedProxyTests.java, +, +, +, +, +, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserTests.java, + * Copyright 2002-2015 the original author or authors., +	public @interface CustomAnnotation {, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<A> anns = new ArrayList<A>(1);, +		return (!anns.isEmpty() ? anns : null);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Return whether the given method is directly or indirectly annotated with]