[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, + * Copyright 2002-2010 the original author or authors., +import java.sql.ResultSetMetaData;, +import java.util.HashMap;, + * <p>Note: Since JDBC 4.0 it has been clarified that any methods using a String to identify the column should, + * be using the column label. The column label is assigned using the ALIAS keyword in the SQL query string. When the , + * query doesn't use an ALIAS the default label is the column name. Most JDBC ResultSet implementations follow this , + * new pattern but there are some exceptions such as the com.sun.rowset.CachedRowSetImpl which only uses the column, + * name ignoring any column labels. Since Spring 3.0.5 this class will translate column labels to the correct column , + * index to provide better support for the com.sun.rowset.CachedRowSetImpl which is the default implementation used by , + * the JdbcTemplate when working with RowSets. , + *, +	private final Map<String, Integer> columnLabelMap;, +, +		try {, +			ResultSetMetaData rsmd = resultSet.getMetaData();, +			if (rsmd != null) {, +				int columnCount = rsmd.getColumnCount();, +				this.columnLabelMap = new HashMap<String, Integer>(columnCount);, +				for (int i = 1; i <= columnCount; i++) {, +					columnLabelMap.put(rsmd.getColumnLabel(i), Integer.valueOf(i));, +				}, +			}, +			else {, +				this.columnLabelMap = new HashMap<String, Integer>(0);, +			}, +		} catch (SQLException se) {, +			throw new InvalidResultSetAccessException(se);, +		}, +		, +	public int findColumn(String columnLabel) throws InvalidResultSetAccessException {, +		Integer columnIndex = columnLabelMap.get(columnLabel);, +			if (columnIndex == null) {, +				columnIndex = this.resultSet.findColumn(columnLabel);, +			}, +		return columnIndex.intValue();, +	public BigDecimal getBigDecimal(String columnLabel) throws InvalidResultSetAccessException {, +		return getBigDecimal(findColumn(columnLabel));, +	public boolean getBoolean(String columnLabel) throws InvalidResultSetAccessException {, +		return getBoolean(findColumn(columnLabel));, +	public byte getByte(String columnLabel) throws InvalidResultSetAccessException {, +		return getByte(findColumn(columnLabel));, +	public Date getDate(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {, +		return getDate(findColumn(columnLabel), cal);, +	public Date getDate(String columnLabel) throws InvalidResultSetAccessException {, +		return getDate(findColumn(columnLabel));, +	public double getDouble(String columnLabel) throws InvalidResultSetAccessException {, +		return getDouble(findColumn(columnLabel));, +	public float getFloat(String columnLabel) throws InvalidResultSetAccessException {, +		return getFloat(findColumn(columnLabel));, +	public int getInt(String columnLabel) throws InvalidResultSetAccessException {, +		return getInt(findColumn(columnLabel));, +	public long getLong(String columnLabel) throws InvalidResultSetAccessException {, +		return getLong(findColumn(columnLabel));, +	public Object getObject(int i,  Map<String, Class<?>> map) throws InvalidResultSetAccessException {, +	public Object getObject(String columnLabel,  Map<String, Class<?>> map) throws InvalidResultSetAccessException {, +		return getObject(findColumn(columnLabel), map);, +	public Object getObject(String columnLabel) throws InvalidResultSetAccessException {, +		return getObject(findColumn(columnLabel));, +	public short getShort(String columnLabel) throws InvalidResultSetAccessException {, +		return getShort(findColumn(columnLabel));, +	public String getString(String columnLabel) throws InvalidResultSetAccessException {, +		return getString(findColumn(columnLabel));, +	public Time getTime(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {, +		return getTime(findColumn(columnLabel), cal);, +	public Time getTime(String columnLabel) throws InvalidResultSetAccessException {, +		return getTime(findColumn(columnLabel));, +	public Timestamp getTimestamp(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {, +		return getTimestamp(findColumn(columnLabel), cal);, +	public Timestamp getTimestamp(String columnLabel) throws InvalidResultSetAccessException {, +		return getTimestamp(findColumn(columnLabel));, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java, + * Copyright 2002-2010 the original author or authors., +import java.sql.ResultSetMetaData;, +import java.util.HashMap;, + * <p>Note: Since JDBC 4.0 it has been clarified that any methods using a String to identify the column should, + * be using the column label. The column label is assigned using the ALIAS keyword in the SQL query string. When the , + * query doesn't use an ALIAS the default label is the column name. Most JDBC ResultSet implementations follow this , + * new pattern but there are some exceptions such as the com.sun.rowset.CachedRowSetImpl which only uses the column, + * name ignoring any column labels. Since Spring 3.0.5 this class will translate column labels to the correct column , + * index to provide better support for the com.sun.rowset.CachedRowSetImpl which is the default implementation used by , + * the JdbcTemplate when working with RowSets. , + *, +	private final Map<String, Integer> columnLabelMap;, +, +		try {, +			ResultSetMetaData rsmd = resultSet.getMetaData();, +			if (rsmd != null) {, +				int columnCount = rsmd.getColumnCount();, +				this.columnLabelMap = new HashMap<String, Integer>(columnCount);, +				for (int i = 1; i <= columnCount; i++) {, +					columnLabelMap.put(rsmd.getColumnLabel(i), Integer.valueOf(i));, +				}, +			}, +			else {, +				this.columnLabelMap = new HashMap<String, Integer>(0);, +			}, +		} catch (SQLException se) {, +			throw new InvalidResultSetAccessException(se);, +		}]