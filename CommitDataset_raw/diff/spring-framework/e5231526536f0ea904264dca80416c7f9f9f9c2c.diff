[+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +	 * locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}, +	 * or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}, +					new SimplePropertyDescriptor(pd));, +		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors();, +		if (methodDescriptors != null) {, +			for (Method method : findCandidateWriteMethods(methodDescriptors)) {, +	}, +		return methodName.length() > 3 && methodName.startsWith("set") && Modifier.isPublic(method.getModifiers()) &&, +				(!void.class.isAssignableFrom(method.getReturnType()) || Modifier.isStatic(method.getModifiers())) &&, +				(nParams == 1 || (nParams == 2 && parameterTypes[0].equals(int.class)));, +		PropertyDescriptor existingPd = findExistingPropertyDescriptor(propertyName, propertyType);, +			if (existingPd == null) {, +				this.propertyDescriptors.add(new SimplePropertyDescriptor(propertyName, null, method));, +				existingPd.setWriteMethod(method);, +			if (existingPd == null) {, +						new SimpleIndexedPropertyDescriptor(propertyName, null, null, null, method));, +			else if (existingPd instanceof IndexedPropertyDescriptor) {, +				((IndexedPropertyDescriptor) existingPd).setIndexedWriteMethod(method);, +				this.propertyDescriptors.remove(existingPd);, +				this.propertyDescriptors.add(new SimpleIndexedPropertyDescriptor(, +						propertyName, existingPd.getReadMethod(), existingPd.getWriteMethod(), null, method));, +			throw new IllegalArgumentException("Write method must have exactly 1 or 2 parameters: " + method);, +	private PropertyDescriptor findExistingPropertyDescriptor(String propertyName, Class<?> propertyType) {, +						(candidateType.equals(propertyType) || candidateType.equals(propertyType.getComponentType()))) {, +						(candidateType.equals(propertyType) || propertyType.equals(candidateType.getComponentType()))) {, +		return Introspector.decapitalize(method.getName().substring(3, method.getName().length()));, +		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()]);, +class SimplePropertyDescriptor extends PropertyDescriptor {, +, +, +, +	public SimplePropertyDescriptor(PropertyDescriptor original) throws IntrospectionException {, +	public SimplePropertyDescriptor(String propertyName, Method readMethod, Method writeMethod) throws IntrospectionException {, +		this.readMethod = readMethod;, +		this.writeMethod = writeMethod;, +			}, +			catch (IntrospectionException ex) {, +				getClass().getSimpleName(), getName(), getPropertyType(), this.readMethod, this.writeMethod);, +, +, +, +, +	private Class<?> propertyEditorClass;, +	public SimpleIndexedPropertyDescriptor(IndexedPropertyDescriptor original) throws IntrospectionException {, +	public SimpleIndexedPropertyDescriptor(String propertyName, Method readMethod, Method writeMethod,, +				Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +		this.readMethod = readMethod;, +		this.writeMethod = writeMethod;, +		this.indexedReadMethod = indexedReadMethod;, +		this.indexedWriteMethod = indexedWriteMethod;, +		this.indexedPropertyType = findIndexedPropertyType(propertyName, this.propertyType, indexedReadMethod, indexedWriteMethod);, +			}, +			catch (IntrospectionException ex) {, +						getName(), getPropertyType(), this.indexedReadMethod, this.indexedWriteMethod);, +			}, +			catch (IntrospectionException ex) {, +	 * See java.beans.IndexedPropertyDescriptor#equals(java.lang.Object), +				getClass().getSimpleName(), getName(), getPropertyType(), getIndexedPropertyType(),, +				this.readMethod, this.writeMethod, this.indexedReadMethod, this.indexedWriteMethod);, +	 * See java.beans.FeatureDescriptor#FeatureDescriptor(FeatureDescriptor), +	public static Class<?> findPropertyType(Method readMethod, Method writeMethod) throws IntrospectionException {, +			Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +	 * See PropertyDescriptor#compareMethods, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +	 * locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}, +	 * or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}, +					new SimplePropertyDescriptor(pd));, +		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors();, +		if (methodDescriptors != null) {, +			for (Method method : findCandidateWriteMethods(methodDescriptors)) {, +	}, +		return methodName.length() > 3 && methodName.startsWith("set") && Modifier.isPublic(method.getModifiers()) &&, +				(!void.class.isAssignableFrom(method.getReturnType()) || Modifier.isStatic(method.getModifiers())) &&, +				(nParams == 1 || (nParams == 2 && parameterTypes[0].equals(int.class)));, +		PropertyDescriptor existingPd = findExistingPropertyDescriptor(propertyName, propertyType);, +			if (existingPd == null) {, +				this.propertyDescriptors.add(new SimplePropertyDescriptor(propertyName, null, method));, +				existingPd.setWriteMethod(method);, +			if (existingPd == null) {, +						new SimpleIndexedPropertyDescriptor(propertyName, null, null, null, method));, +			else if (existingPd instanceof IndexedPropertyDescriptor) {, +				((IndexedPropertyDescriptor) existingPd).setIndexedWriteMethod(method);, +				this.propertyDescriptors.remove(existingPd);, +				this.propertyDescriptors.add(new SimpleIndexedPropertyDescriptor(, +						propertyName, existingPd.getReadMethod(), existingPd.getWriteMethod(), null, method));, +			throw new IllegalArgumentException("Write method must have exactly 1 or 2 parameters: " + method);, +	private PropertyDescriptor findExistingPropertyDescriptor(String propertyName, Class<?> propertyType) {, +						(candidateType.equals(propertyType) || candidateType.equals(propertyType.getComponentType()))) {, +						(candidateType.equals(propertyType) || propertyType.equals(candidateType.getComponentType()))) {, +		return Introspector.decapitalize(method.getName().substring(3, method.getName().length()));, +		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()]);, +class SimplePropertyDescriptor extends PropertyDescriptor {, +, +, +, +	public SimplePropertyDescriptor(PropertyDescriptor original) throws IntrospectionException {, +	public SimplePropertyDescriptor(String propertyName, Method readMethod, Method writeMethod) throws IntrospectionException {, +		this.readMethod = readMethod;, +		this.writeMethod = writeMethod;]