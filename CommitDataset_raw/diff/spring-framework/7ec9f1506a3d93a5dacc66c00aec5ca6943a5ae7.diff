[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/URIEditor.java, + * <p>By default, this editor will encode Strings into URIs. For instance,, + * a space will be encoded into {@code %20}. This behavior can be changed, + * by setting calling the {@link #URIEditor(boolean)} constructor., + *, +	private final boolean encode;, +, +, +	 * Create a new, encoding URIEditor, converting "classpath:" locations into, +		this.encode = true;, +	 * Create a new URIEditor, converting "classpath:" locations into, +	 * standard URIs (not trying to resolve them into physical resources)., +	 *, +	 * @param encode indicates whether Strings will be encoded or not, +	 */, +	public URIEditor(boolean encode) {, +		this.classLoader = null;, +		this.encode = encode;, +	}, +, +, +	/**, +		this.encode = true;, +	}, +, +	/**, +	 * Create a new URIEditor, using the given ClassLoader to resolve, +	 * "classpath:" locations into physical resource URLs., +	 * @param classLoader the ClassLoader to use for resolving "classpath:" locations, +	 * (may be <code>null</code> to indicate the default ClassLoader), +	 * @param encode indicates whether Strings will be encoded or not, +	 */, +	public URIEditor(ClassLoader classLoader, boolean encode) {, +		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());, +		this.encode = encode;, +		if (encode && idx != -1) {, +			// not encoding or the value contains no scheme , fallback to default, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/URIEditor.java, + * <p>By default, this editor will encode Strings into URIs. For instance,, + * a space will be encoded into {@code %20}. This behavior can be changed, + * by setting calling the {@link #URIEditor(boolean)} constructor., + *, +	private final boolean encode;, +, +, +	 * Create a new, encoding URIEditor, converting "classpath:" locations into, +		this.encode = true;, +	 * Create a new URIEditor, converting "classpath:" locations into, +	 * standard URIs (not trying to resolve them into physical resources)., +	 *, +	 * @param encode indicates whether Strings will be encoded or not, +	 */, +	public URIEditor(boolean encode) {, +		this.classLoader = null;, +		this.encode = encode;, +	}, +, +, +	/**, +		this.encode = true;, +	}, +, +	/**, +	 * Create a new URIEditor, using the given ClassLoader to resolve, +	 * "classpath:" locations into physical resource URLs., +	 * @param classLoader the ClassLoader to use for resolving "classpath:" locations, +	 * (may be <code>null</code> to indicate the default ClassLoader), +	 * @param encode indicates whether Strings will be encoded or not, +	 */, +	public URIEditor(ClassLoader classLoader, boolean encode) {, +		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());, +		this.encode = encode;, +		if (encode && idx != -1) {, +			// not encoding or the value contains no scheme , fallback to default, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/propertyeditors/URIEditorTests.java, +	@Test, +	public void encodeAlreadyEncodedURI() throws Exception {, +		PropertyEditor uriEditor = new URIEditor(false);, +		uriEditor.setAsText("http://example.com/spaces%20and%20%E2%82%AC");, +		Object value = uriEditor.getValue();, +		assertTrue(value instanceof URI);, +		URI uri = (URI) value;, +		assertEquals(uri.toString(), uriEditor.getAsText());, +		assertEquals("http://example.com/spaces%20and%20%E2%82%AC", uri.toASCIIString());, +	}, +]