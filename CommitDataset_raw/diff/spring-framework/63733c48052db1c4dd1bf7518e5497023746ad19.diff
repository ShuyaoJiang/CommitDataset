[+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	 * Returns the configured value for whether XML external entities are allowed., +			xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", isProcessExternalEntities());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	 * Returns the configured value for whether XML external entities are allowed., +			xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", isProcessExternalEntities());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * This implementation inspects the given {@code Source} or {@code Result}, and, + * delegates further handling to overridable template methods., +	 * <p>The default implementation returns {@code null}., +			return unmarshalStreamSource((StreamSource) source);, +	 * <p>This implementation delegates to {@code unmarshalInputStream} or {@code unmarshalReader}., +			if (isProcessExternalEntities()) {, +			else {, +				InputSource inputSource = new InputSource(streamSource.getInputStream());, +				inputSource.setEncoding(getDefaultEncoding());, +				return unmarshalSaxSource(new SAXSource(inputSource));, +			}, +		}, +			if (isProcessExternalEntities()) {, +				return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getReader())));, +			}, +		}, +		else {, +			return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getSystemId())));, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	 * Returns the configured value for whether XML external entities are allowed., +			xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", isProcessExternalEntities());, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * This implementation inspects the given {@code Source} or {@code Result}, and, + * delegates further handling to overridable template methods., +	 * <p>The default implementation returns {@code null}., +			return unmarshalStreamSource((StreamSource) source);, +	 * <p>This implementation delegates to {@code unmarshalInputStream} or {@code unmarshalReader}., +			if (isProcessExternalEntities()) {, +			else {, +				InputSource inputSource = new InputSource(streamSource.getInputStream());, +				inputSource.setEncoding(getDefaultEncoding());, +				return unmarshalSaxSource(new SAXSource(inputSource));, +			}, +		}, +			if (isProcessExternalEntities()) {, +				return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getReader())));, +			}, +		}, +		else {, +			return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getSystemId())));, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +	protected Object unmarshalStreamSource(StreamSource streamSource) throws XmlMappingException, IOException {, +		if (streamSource.getInputStream() != null) {, +			return unmarshalInputStream(streamSource.getInputStream());, +		}, +		else if (streamSource.getReader() != null) {, +			return unmarshalReader(streamSource.getReader());, +		}, +		else {, +			throw new IllegalArgumentException("StreamSource contains neither InputStream nor Reader");, +		}]