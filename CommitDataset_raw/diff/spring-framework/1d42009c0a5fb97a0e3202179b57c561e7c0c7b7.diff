[+++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2016 the original author or authors., +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2016 the original author or authors., +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean containsProperty(String key) {, +		return (getProperty(key) != null);, +	}, +, +	@Override, +	public String getProperty(String key) {, +		return getProperty(key, String.class);, +	}, +	@Deprecated, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetValueType) {, +		throw new UnsupportedOperationException();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2016 the original author or authors., +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean containsProperty(String key) {, +		return (getProperty(key) != null);, +	}, +, +	@Override, +	public String getProperty(String key) {, +		return getProperty(key, String.class);, +	}, +	@Deprecated, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetValueType) {, +		throw new UnsupportedOperationException();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertyResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +	 * Return whether the given property key is available for resolution,, +	 * i.e. if the value for the given key is not {@code null}., +	 * Return the property value associated with the given key,, +	 * or {@code null} if the key cannot be resolved., +	 * Return the property value associated with the given key,, +	 * or {@code null} if the key cannot be resolved., +	 * Return the property value associated with the given key,, +	 * or {@code defaultValue} if the key cannot be resolved., +	 * @deprecated as of 4.3, in favor of {@link #getProperty} with manual conversion, +	 * to {@code Class} via the application's {@code ClassLoader}, +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2016 the original author or authors., +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean containsProperty(String key) {, +		return (getProperty(key) != null);, +	}, +, +	@Override, +	public String getProperty(String key) {, +		return getProperty(key, String.class);, +	}, +	@Deprecated, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetValueType) {, +		throw new UnsupportedOperationException();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertyResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +	 * Return whether the given property key is available for resolution,, +	 * i.e. if the value for the given key is not {@code null}., +	 * Return the property value associated with the given key,, +	 * or {@code null} if the key cannot be resolved., +	 * Return the property value associated with the given key,, +	 * or {@code null} if the key cannot be resolved., +	 * Return the property value associated with the given key,, +	 * or {@code defaultValue} if the key cannot be resolved., +	 * @deprecated as of 4.3, in favor of {@link #getProperty} with manual conversion, +	 * to {@code Class} via the application's {@code ClassLoader}, +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, + * @author Juergen Hoeller, +				if (logger.isTraceEnabled()) {, +					logger.trace(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()));, +					if (logger.isDebugEnabled()) {, +								key, propertySource.getName(), value.getClass().getSimpleName(), value));, +		if (logger.isDebugEnabled()) {, +			logger.debug(String.format("Could not find key '%s' in any property source", key));, +	@Deprecated]