[+++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2013 the original author or authors., + * @author Rossen Stoyanchev, +		// Optimization: use charAt instead of endsWith (SPR-11304), +++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2013 the original author or authors., + * @author Rossen Stoyanchev, +		// Optimization: use charAt instead of endsWith (SPR-11304), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, +	 * this setting to at least {@link #CACHE_CONNECTION} or {@link #CACHE_SESSION}, +	 * even in conjunction with an external transaction manager., +++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2013 the original author or authors., + * @author Rossen Stoyanchev, +		// Optimization: use charAt instead of endsWith (SPR-11304), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, +	 * this setting to at least {@link #CACHE_CONNECTION} or {@link #CACHE_SESSION}, +	 * even in conjunction with an external transaction manager., +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, +	 * <p>It is not required to specify a LoadTimeWeaver: Most providers will be able, +	 * to provide a subset of their functionality without class instrumentation as well,, +	 * or operate with their own VM agent specified on JVM startup. Furthermore,, +	 * DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver, +	 * if Spring's agent-based instrumentation is available at runtime., +					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex);, +++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2013 the original author or authors., + * @author Rossen Stoyanchev, +		// Optimization: use charAt instead of endsWith (SPR-11304), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, +	 * this setting to at least {@link #CACHE_CONNECTION} or {@link #CACHE_SESSION}, +	 * even in conjunction with an external transaction manager., +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, +	 * <p>It is not required to specify a LoadTimeWeaver: Most providers will be able, +	 * to provide a subset of their functionality without class instrumentation as well,, +	 * or operate with their own VM agent specified on JVM startup. Furthermore,, +	 * DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver, +	 * if Spring's agent-based instrumentation is available at runtime., +					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	private final UriComponents uriComponents;, +, +	private Principal principal;, +, +	private final List<RequestPostProcessor> postProcessors = new ArrayList<RequestPostProcessor>();, +		Assert.notNull(urlTemplate, "uriTemplate is required");, +		this.uriComponents = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(urlVariables).encode();, +	 * The context path, if specified, must match to the start of the request URI., +	 * @see <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getContextPath%28%29">HttpServletRequest.getContextPath()</a>, +	 * @see <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getServletPath%28%29">HttpServletRequest.getServletPath()</a>, +		if (this.principal == null) {, +			this.principal = parentBuilder.principal;, +		}, +, +		for (Cookie cookieToCheck : this.cookies) {, +			if (ObjectUtils.nullSafeEquals(cookieToCheck.getName(), cookie.getName())) {, +		request.setUserPrincipal(this.principal);, +			if (request == null) {, +				throw new IllegalStateException("Post-processor [" + postProcessor.getClass().getName() + "] returned null");, +			}, +			// ignore, +			// ignore, +		return (flashMapManager != null ? flashMapManager : new SessionFlashMapManager());, +++ b/spring-context/src/main/java/org/springframework/context/expression/EnvironmentAccessor.java, + * Copyright 2002-2013 the original author or authors., +	 * Read-only: returns {@code false}., +	 * Read-only: no-op., +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2013 the original author or authors., + * @author Rossen Stoyanchev, +		// Optimization: use charAt instead of endsWith (SPR-11304), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, +	 * this setting to at least {@link #CACHE_CONNECTION} or {@link #CACHE_SESSION}, +	 * even in conjunction with an external transaction manager., +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, +	 * <p>It is not required to specify a LoadTimeWeaver: Most providers will be able, +	 * to provide a subset of their functionality without class instrumentation as well,, +	 * or operate with their own VM agent specified on JVM startup. Furthermore,, +	 * DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver, +	 * if Spring's agent-based instrumentation is available at runtime.]