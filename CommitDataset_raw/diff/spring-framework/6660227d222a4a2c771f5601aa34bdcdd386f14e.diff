[+++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +		registry.addFormatterForFieldType(Calendar.class, dateFormatter);, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +		registry.addFormatterForFieldType(Calendar.class, dateFormatter);, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.format.datetime.joda;, +, +import java.util.TimeZone;, +, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +import org.joda.time.format.ISODateTimeFormat;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.format.annotation.DateTimeFormat.ISO;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link FactoryBean} that creates a Joda {@link DateTimeFormatter}. Formatters will be, + * created using the defined {@link #setPattern(String) pattern}, {@link #setIso(ISO) ISO}, + * or {@link #setStyle(String) style} (considered in that order)., + *, + * @author Phillip Webb, + * @see #getDateTimeFormatter(), + * @see #getDateTimeFormatter(DateTimeFormatter), + * @since 3.2, + */, +public class DateTimeFormatterFactory implements FactoryBean<DateTimeFormatter> {, +, +	private ISO iso;, +, +	private String style;, +, +	private String pattern;, +, +	private TimeZone timeZone;, +, +, +	/**, +	 * Create a new {@link DateTimeFormatterFactory} instance., +	 */, +	public DateTimeFormatterFactory() {, +	}, +, +	/**, +	 * Create a new {@link DateTimeFormatterFactory} instance., +	 * @param pattern the pattern to use to format date values, +	 */, +	public DateTimeFormatterFactory(String pattern) {, +		this.pattern = pattern;, +	}, +, +, +	public boolean isSingleton() {, +		return true;, +	}, +, +	public Class<?> getObjectType() {, +		return DateTimeFormatter.class;, +	}, +, +	public DateTimeFormatter getObject() throws Exception {, +		return getDateTimeFormatter();, +	}, +, +	/**, +	 * Get a new DateTimeFormatter using this factory. If no specific, +	 * {@link #setStyle(String) style} {@link #setIso(ISO) ISO} or, +	 * {@link #setPattern(String) pattern} have been defined the, +	 * {@link DateTimeFormat#mediumDateTime() medium date time format} will be used., +	 * @return a new date time formatter, +	 * @see #getObject(), +	 * @see #getDateTimeFormatter(DateTimeFormatter), +	 */, +	public DateTimeFormatter getDateTimeFormatter() {, +		return getDateTimeFormatter(DateTimeFormat.mediumDateTime());, +	}, +, +	/**, +	 * Get a new DateTimeFormatter using this factory. If no specific, +	 * {@link #setStyle(String) style} {@link #setIso(ISO) ISO} or, +	 * {@link #setPattern(String) pattern} have been defined the specific, +	 * {@code fallbackFormatter} will be used., +	 * @param fallbackFormatter the fall-back formatter to use when no specific factory]