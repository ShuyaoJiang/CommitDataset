[+++ b/src/reference/docbook/aop.xml, +        (summarized in the following table).</para>, +        as that. It accepts one of three possible values, summarized below,, +++ b/src/reference/docbook/aop.xml, +        (summarized in the following table).</para>, +        as that. It accepts one of three possible values, summarized below,, +++ b/src/reference/docbook/cache.xml, +	will apply a caching behavior checking whether the method has been already executed for the given arguments. If it has,, +		<para>Note that using <literal>@CachePut</literal> and <literal>@Cacheable</literal> annotations on the same method is generally discouraged because they have different behaviors. While the latter, +		causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update. This leads to unexpected behavior and with the exception of specific, +		caching behavior is added to the application through AOP. The configuration is intentionally similar, +		mentioned <link linkend="cache-annotation-enable">above</link>, the annotation-driven behavior needs to be enabled.</para>, +<!-- apply the cacheable behavior to all BookService interfaces -->, +++ b/src/reference/docbook/aop.xml, +        (summarized in the following table).</para>, +        as that. It accepts one of three possible values, summarized below,, +++ b/src/reference/docbook/cache.xml, +	will apply a caching behavior checking whether the method has been already executed for the given arguments. If it has,, +		<para>Note that using <literal>@CachePut</literal> and <literal>@Cacheable</literal> annotations on the same method is generally discouraged because they have different behaviors. While the latter, +		causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update. This leads to unexpected behavior and with the exception of specific, +		caching behavior is added to the application through AOP. The configuration is intentionally similar, +		mentioned <link linkend="cache-annotation-enable">above</link>, the annotation-driven behavior needs to be enabled.</para>, +<!-- apply the cacheable behavior to all BookService interfaces -->, +++ b/src/reference/docbook/dtd.xml, +	behavior for bigger applications., +++ b/src/reference/docbook/aop.xml, +        (summarized in the following table).</para>, +        as that. It accepts one of three possible values, summarized below,, +++ b/src/reference/docbook/cache.xml, +	will apply a caching behavior checking whether the method has been already executed for the given arguments. If it has,, +		<para>Note that using <literal>@CachePut</literal> and <literal>@Cacheable</literal> annotations on the same method is generally discouraged because they have different behaviors. While the latter, +		causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update. This leads to unexpected behavior and with the exception of specific, +		caching behavior is added to the application through AOP. The configuration is intentionally similar, +		mentioned <link linkend="cache-annotation-enable">above</link>, the annotation-driven behavior needs to be enabled.</para>, +<!-- apply the cacheable behavior to all BookService interfaces -->, +++ b/src/reference/docbook/dtd.xml, +	behavior for bigger applications., +++ b/src/reference/docbook/jdbc.xml, +      <para>The default behavior of the database initializer is to, +              <para>Rely on Spring BeanFactory default behavior, which is]