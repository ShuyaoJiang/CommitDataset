[+++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.core.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.core.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.ui.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.core.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.ui.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.View;, +		ModelAndViewContainer mavContainer = new ModelAndViewContainer();, +		modelFactory.initModel(webRequest, mavContainer, requestMethod);, +		requestMethod.invokeAndHandle(webRequest, mavContainer, sessionStatus);, +, +		modelFactory.updateModel(webRequest, mavContainer, sessionStatus);, +		, +		if (!mavContainer.isResolveView()) {, +			return null;, +		}, +		else {, +			ModelAndView mav = new ModelAndView().addAllObjects(mavContainer.getModel());, +			mav.setViewName(mavContainer.getViewName());, +			if (mavContainer.getView() != null) {, +				mav.setView((View) mavContainer.getView());, +			} , +	}, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.core.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.ui.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.View;, +		ModelAndViewContainer mavContainer = new ModelAndViewContainer();, +		modelFactory.initModel(webRequest, mavContainer, requestMethod);, +		requestMethod.invokeAndHandle(webRequest, mavContainer, sessionStatus);, +, +		modelFactory.updateModel(webRequest, mavContainer, sessionStatus);, +		, +		if (!mavContainer.isResolveView()) {, +			return null;, +		}, +		else {, +			ModelAndView mav = new ModelAndView().addAllObjects(mavContainer.getModel());, +			mav.setViewName(mavContainer.getViewName());, +			if (mavContainer.getView() != null) {, +				mav.setView((View) mavContainer.getView());, +			} , +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodExceptionResolver.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.View;, + * A {@link AbstractHandlerMethodExceptionResolver} that matches thrown exceptions to {@link ExceptionHandler}-annotated , + * methods. If a match is found the exception-handling method is invoked to process the request., + * <p>See {@link ExceptionHandler} for information on supported method arguments and return values for exception-handling , + * methods. You can customize method argument resolution and return value processing through the various bean properties , + * in this class., +	 * Set a custom ArgumentResolver to use for special method parameter types., +	 * <p>Note: this is provided for backward compatibility. The preferred way to do this is to , +	 * implement a {@link HandlerMethodArgumentResolver}., +	 * <p>Note: this is provided for backward compatibility. The preferred way to do this is to , +	 * implement a {@link HandlerMethodArgumentResolver}., +		returnValueHandlers.registerReturnValueHandler(new DefaultMethodReturnValueHandler(null));, +	/**, +	 * Attempts to find an {@link ExceptionHandler}-annotated method that can handle the thrown exception., +	 * The exception-handling method, if found, is invoked resulting in a {@link ModelAndView}., +	 * @return a {@link ModelAndView} if a matching exception-handling method was found, or {@code null} otherwise, +	 */, +, +					ModelAndViewContainer mavContainer = new ModelAndViewContainer();, +					exceptionHandler.invokeAndHandle(webRequest, mavContainer, ex);, +					, +					if (!mavContainer.isResolveView()) {, +						return new ModelAndView();, +					}, +					else {, +						ModelAndView mav = new ModelAndView().addAllObjects(mavContainer.getModel());, +						mav.setViewName(mavContainer.getViewName());, +						if (mavContainer.getView() != null) {, +							mav.setView((View) mavContainer.getView());, +						} , +						return mav;				, +					}, +	/**, +	 * @return an {@link ExceptionMethodMapping} for the the given handler method, never {@code null} , +	 */, +	 * MethodFilter that matches {@link ExceptionHandler @ExceptionHandler} methods., +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.core.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/.settings/org.eclipse.jdt.ui.prefs, +#Thu Apr 07 14:34:40 BST 2011, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.View;, +		ModelAndViewContainer mavContainer = new ModelAndViewContainer();, +		modelFactory.initModel(webRequest, mavContainer, requestMethod);, +		requestMethod.invokeAndHandle(webRequest, mavContainer, sessionStatus);]