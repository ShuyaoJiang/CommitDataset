[+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.unit;, +, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * A data size, such as '12MB'., + * <p>, + * This class models a size in terms of bytes and is immutable and thread-safe., + *, + * @author Stephane Nicoll, + * @since 5.1, + */, +public class DataSize implements Comparable<DataSize> {, +, +	/**, +	 * The pattern for parsing., +	 */, +	private static final Pattern PATTERN = Pattern.compile("^(\\d+)([a-zA-Z]{0,2})$");, +, +	/**, +	 * Bytes per KiloByte., +	 */, +	private static long BYTES_PER_KB = 1024;, +, +	/**, +	 * Bytes per MegaByte., +	 */, +	private static long BYTES_PER_MB = BYTES_PER_KB * 1024;, +, +	/**, +	 * Bytes per GigaByte., +	 */, +	private static long BYTES_PER_GB = BYTES_PER_MB * 1024;, +, +	/**, +	 * Bytes per TeraByte., +	 */, +	private static long BYTES_PER_TB = BYTES_PER_GB * 1024;, +, +, +	private final long bytes;, +, +	private DataSize(long bytes) {, +		this.bytes = bytes;, +	}, +, +, +	/**, +	 * Obtain a {@link DataSize} representing the specified number of bytes., +	 * @param bytes the number of bytes, +	 * @return a {@link DataSize}, +	 */, +	public static DataSize ofBytes(long bytes) {, +		return new DataSize(bytes);, +	}, +, +	/**, +	 * Obtain a {@link DataSize} representing the specified number of kilobytes., +	 * @param kiloBytes the number of kilobytes, +	 * @return a {@link DataSize}, +	 */, +	public static DataSize ofKiloBytes(long kiloBytes) {, +		return new DataSize(Math.multiplyExact(kiloBytes, BYTES_PER_KB));, +	}, +, +	/**, +	 * Obtain a {@link DataSize} representing the specified number of megabytes., +	 * @param megaBytes the number of megabytes, +	 * @return a {@link DataSize}, +	 */, +	public static DataSize ofMegaBytes(long megaBytes) {, +		return new DataSize(Math.multiplyExact(megaBytes, BYTES_PER_MB));, +	}, +, +	/**, +	 * Obtain a {@link DataSize} representing the specified number of gigabytes., +	 * @param gigaBytes the number of gigabytes, +	 * @return a {@link DataSize}]