[+++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Nov 04 16:30:57 GMT 2016, +++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Nov 04 16:30:57 GMT 2016, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import java.util.function.Consumer;, +import reactor.ipc.netty.http.client.HttpClientOptions;, +import reactor.ipc.netty.options.ClientOptions;, +import reactor.ipc.netty.http.client.HttpClient;, +import reactor.ipc.netty.http.client.HttpClientException;, +		this.httpClient = HttpClient.create();, +	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {, +				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse())), +++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Nov 04 16:30:57 GMT 2016, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import java.util.function.Consumer;, +import reactor.ipc.netty.http.client.HttpClientOptions;, +import reactor.ipc.netty.options.ClientOptions;, +import reactor.ipc.netty.http.client.HttpClient;, +import reactor.ipc.netty.http.client.HttpClientException;, +		this.httpClient = HttpClient.create();, +	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {, +				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +import reactor.ipc.netty.http.client.HttpClientRequest;, + * @see reactor.ipc.netty.http.client.HttpClient, +		this.bufferFactory = new NettyDataBufferFactory(httpRequest.channel().alloc());, +				.sendGroups(byteBufs));, +				.forEach(e -> this.httpRequest.requestHeaders().set(e.getKey(), e.getValue()));, +++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Nov 04 16:30:57 GMT 2016, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import java.util.function.Consumer;, +import reactor.ipc.netty.http.client.HttpClientOptions;, +import reactor.ipc.netty.options.ClientOptions;, +import reactor.ipc.netty.http.client.HttpClient;, +import reactor.ipc.netty.http.client.HttpClientException;, +		this.httpClient = HttpClient.create();, +	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {, +				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +import reactor.ipc.netty.http.client.HttpClientRequest;, + * @see reactor.ipc.netty.http.client.HttpClient, +		this.bufferFactory = new NettyDataBufferFactory(httpRequest.channel().alloc());, +				.sendGroups(byteBufs));, +				.forEach(e -> this.httpRequest.requestHeaders().set(e.getKey(), e.getValue()));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +import reactor.ipc.netty.http.client.HttpClientResponse;, + * @see reactor.ipc.netty.http.client.HttpClient, +	private final HttpClientResponse response;, +	public ReactorClientHttpResponse(HttpClientResponse response) {, +		this.dataBufferFactory = new NettyDataBufferFactory(response.channel().alloc());, +		this.response.responseHeaders(), +		             .entries(), +		             .forEach(e -> headers.add(e.getKey(), e.getValue()));, +++ b/build.gradle, +	ext.reactorNettyVersion    = '0.6.0.BUILD-SNAPSHOT', +		maven { url "https://repo.spring.io/snapshot" }, +++ b/gradle/wrapper/gradle-wrapper.properties, +#Fri Nov 04 16:30:57 GMT 2016, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import java.util.function.Consumer;, +import reactor.ipc.netty.http.client.HttpClientOptions;, +import reactor.ipc.netty.options.ClientOptions;, +import reactor.ipc.netty.http.client.HttpClient;, +import reactor.ipc.netty.http.client.HttpClientException;, +		this.httpClient = HttpClient.create();, +	public ReactorClientHttpConnector(Consumer<? super HttpClientOptions> clientOptions) {, +				.otherwise(HttpClientException.class, exc -> Mono.just(exc.getResponse())), +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +import reactor.ipc.netty.http.client.HttpClientRequest;, + * @see reactor.ipc.netty.http.client.HttpClient, +		this.bufferFactory = new NettyDataBufferFactory(httpRequest.channel().alloc());, +				.sendGroups(byteBufs));, +				.forEach(e -> this.httpRequest.requestHeaders().set(e.getKey(), e.getValue()));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +import reactor.ipc.netty.http.client.HttpClientResponse;, + * @see reactor.ipc.netty.http.client.HttpClient, +	private final HttpClientResponse response;, +	public ReactorClientHttpResponse(HttpClientResponse response) {, +		this.dataBufferFactory = new NettyDataBufferFactory(response.channel().alloc());, +		this.response.responseHeaders(), +		             .entries(), +		             .forEach(e -> headers.add(e.getKey(), e.getValue()));]