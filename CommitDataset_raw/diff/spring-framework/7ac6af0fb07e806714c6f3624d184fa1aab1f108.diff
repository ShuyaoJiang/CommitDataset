[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java, + * <p>When a handler starts an asynchronous request, the {@link DispatcherServlet}, + * normally does for a synchronous request, since the result of request handling, + * (e.g. ModelAndView) is likely not yet ready and will be produced concurrently, + * from another thread. In such scenarios, {@link #afterConcurrentHandlingStarted}, + * is invoked instead, allowing implementations to perform tasks such as cleaning, + * up thread-bound attributes before releasing the thread to the Servlet container., + * container for further processing. At this stage the {@code DispatcherServlet}, + * invokes {@code preHandle}, {@code postHandle}, and {@code afterCompletion}., + * is {@code "REQUEST"} or {@code "ASYNC"}., + * <p>Note that {@code HandlerInterceptor} implementations may need to do work, + * Instead, interceptors can register to track an asynchronous request through, +	 * the a handler is being executed concurrently., +	 * <p>Implementations may use the provided request and response but should, +	 * avoid modifying them in ways that would conflict with the concurrent, +	 * execution of the handler. A typical use of this method would be to, +	 * clean up thread-local variables., +	 * @param handler the handler (or {@link HandlerMethod}) that started async, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java, + * <p>When a handler starts an asynchronous request, the {@link DispatcherServlet}, + * normally does for a synchronous request, since the result of request handling, + * (e.g. ModelAndView) is likely not yet ready and will be produced concurrently, + * from another thread. In such scenarios, {@link #afterConcurrentHandlingStarted}, + * is invoked instead, allowing implementations to perform tasks such as cleaning, + * up thread-bound attributes before releasing the thread to the Servlet container., + * container for further processing. At this stage the {@code DispatcherServlet}, + * invokes {@code preHandle}, {@code postHandle}, and {@code afterCompletion}., + * is {@code "REQUEST"} or {@code "ASYNC"}., + * <p>Note that {@code HandlerInterceptor} implementations may need to do work, + * Instead, interceptors can register to track an asynchronous request through, +	 * the a handler is being executed concurrently., +	 * <p>Implementations may use the provided request and response but should, +	 * avoid modifying them in ways that would conflict with the concurrent, +	 * execution of the handler. A typical use of this method would be to, +	 * clean up thread-local variables., +	 * @param handler the handler (or {@link HandlerMethod}) that started async, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestBodyAdvice.java, + * Object and also allows for processing of the resulting Object before it is, + * passed into a controller method as an {@code @RequestBody} or an, + * {@code HttpEntity} method argument.]