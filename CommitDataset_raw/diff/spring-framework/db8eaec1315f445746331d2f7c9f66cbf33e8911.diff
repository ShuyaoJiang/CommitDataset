[+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +import java.util.Map;, +import org.springframework.util.ConcurrentReferenceHashMap;, +import org.springframework.util.ReflectionUtils.MethodFilter;, +	private static final Map<Method, Method> cache = new ConcurrentReferenceHashMap<>();, +, +		Method bridgedMethod = cache.get(bridgeMethod);, +		if (bridgedMethod == null) {, +			MethodFilter filter = candidateMethod ->, +					isBridgedCandidateFor(candidateMethod, bridgeMethod);, +			ReflectionUtils.doWithMethods(bridgeMethod.getDeclaringClass(), candidateMethods::add, filter);, +			if (!candidateMethods.isEmpty()) {, +				bridgedMethod = candidateMethods.size() == 1 ?, +						candidateMethods.get(0) :, +						searchCandidates(candidateMethods, bridgeMethod);, +			if (bridgedMethod == null) {, +				bridgedMethod = bridgeMethod;, +			cache.put(bridgeMethod, bridgedMethod);, +		}, +		return bridgedMethod;]