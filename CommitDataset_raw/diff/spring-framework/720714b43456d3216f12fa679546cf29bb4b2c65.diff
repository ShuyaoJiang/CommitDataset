[+++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.jdbc.core.SqlParameterValue;, +	 * Delete rows from the given table, using the provided {@code WHERE} clause., +	 * <p>If the provided {@code WHERE} clause contains text, it will be prefixed, +	 * with {@code " WHERE "} and then appended to the generated {@code DELETE}, +	 * statement. For example, if the provided table name is {@code "person"} and, +	 * the provided where clause is {@code "name = 'Bob' and age > 25"}, the, +	 * resulting SQL statement to execute will be, +	 * {@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}., +	 * <p>As an alternative to hard-coded values, the {@code "?"} placeholder can, +	 * be used within the {@code WHERE} clause, binding to the given arguments., +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableName the name of the table to delete rows in, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @param args arguments to bind to the query (leaving it to the PreparedStatement, +	 * to guess the corresponding SQL type); may also contain {@link SqlParameterValue}, +	 * objects which indicate not only the argument value but also the SQL type and, +	 * optionally the scale., +	 * @return the number of rows deleted from the table, +	 */, +	public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName,, +			String whereClause, Object... args) {, +		String sql = "DELETE FROM " + tableName;, +		if(StringUtils.hasText(whereClause)) {, +			sql += " WHERE " + whereClause;, +		}, +		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args), +				: jdbcTemplate.update(sql));, +		if (logger.isInfoEnabled()) {, +			logger.info("Deleted " + rowCount + " rows from table " + tableName);, +		}, +		return rowCount;, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.jdbc.core.SqlParameterValue;, +	 * Delete rows from the given table, using the provided {@code WHERE} clause., +	 * <p>If the provided {@code WHERE} clause contains text, it will be prefixed, +	 * with {@code " WHERE "} and then appended to the generated {@code DELETE}, +	 * statement. For example, if the provided table name is {@code "person"} and, +	 * the provided where clause is {@code "name = 'Bob' and age > 25"}, the, +	 * resulting SQL statement to execute will be, +	 * {@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}., +	 * <p>As an alternative to hard-coded values, the {@code "?"} placeholder can, +	 * be used within the {@code WHERE} clause, binding to the given arguments., +	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations, +	 * @param tableName the name of the table to delete rows in, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @param args arguments to bind to the query (leaving it to the PreparedStatement, +	 * to guess the corresponding SQL type); may also contain {@link SqlParameterValue}, +	 * objects which indicate not only the argument value but also the SQL type and, +	 * optionally the scale., +	 * @return the number of rows deleted from the table, +	 */, +	public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName,, +			String whereClause, Object... args) {, +		String sql = "DELETE FROM " + tableName;, +		if(StringUtils.hasText(whereClause)) {, +			sql += " WHERE " + whereClause;, +		}, +		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args), +				: jdbcTemplate.update(sql));, +		if (logger.isInfoEnabled()) {, +			logger.info("Deleted " + rowCount + " rows from table " + tableName);, +		}, +		return rowCount;, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/jdbc/JdbcTestUtilsTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.BDDMockito.given;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.runners.MockitoJUnitRunner;, +import org.springframework.jdbc.core.JdbcTemplate;, + * @author Phillip Webb, +@RunWith(MockitoJUnitRunner.class), +	@Mock, +	private JdbcTemplate jdbcTemplate;, +, +	@Test, +	public void testDeleteNoWhere() throws Exception {, +		given(jdbcTemplate.update("DELETE FROM person")).willReturn(10);, +		int deleted = JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, "person", null);, +		assertThat(deleted, equalTo(10));, +	}, +, +	@Test, +	public void testDeleteWhere() throws Exception {, +		given(jdbcTemplate.update("DELETE FROM person WHERE name = 'Bob' and age > 25")).willReturn(10);, +		int deleted = JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, "person", "name = 'Bob' and age > 25");, +		assertThat(deleted, equalTo(10));]