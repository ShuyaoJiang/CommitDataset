[+++ b/org.springframework.expression/.project, +		<buildCommand>, +			<name>structure101.java.eclipse.plugin.JDMEclipseBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<nature>structure101.java.eclipse.plugin.JDMEclipseNature</nature>, +++ b/org.springframework.expression/.project, +		<buildCommand>, +			<name>structure101.java.eclipse.plugin.JDMEclipseBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<nature>structure101.java.eclipse.plugin.JDMEclipseNature</nature>, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException;, +	public <T> T getValue(EvaluationContext context, Class<T> desiredResultType) throws EvaluationException;, +++ b/org.springframework.expression/.project, +		<buildCommand>, +			<name>structure101.java.eclipse.plugin.JDMEclipseBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<nature>structure101.java.eclipse.plugin.JDMEclipseNature</nature>, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException;, +	public <T> T getValue(EvaluationContext context, Class<T> desiredResultType) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, +	public <T> T getValue(EvaluationContext context, Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(context, value, expectedResultType);, +	public <T> T getValue(Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(null, value, expectedResultType);, +++ b/org.springframework.expression/.project, +		<buildCommand>, +			<name>structure101.java.eclipse.plugin.JDMEclipseBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<nature>structure101.java.eclipse.plugin.JDMEclipseNature</nature>, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException;, +	public <T> T getValue(EvaluationContext context, Class<T> desiredResultType) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, +	public <T> T getValue(EvaluationContext context, Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(context, value, expectedResultType);, +	public <T> T getValue(Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(null, value, expectedResultType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +	public <T> T getValue(EvaluationContext context, Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(context, value, expectedResultType);, +	public <T> T getValue(Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(null, value, expectedResultType);, +++ b/org.springframework.expression/.project, +		<buildCommand>, +			<name>structure101.java.eclipse.plugin.JDMEclipseBuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<nature>structure101.java.eclipse.plugin.JDMEclipseNature</nature>, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException;, +	public <T> T getValue(EvaluationContext context, Class<T> desiredResultType) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, +	public <T> T getValue(EvaluationContext context, Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(context, value, expectedResultType);, +	public <T> T getValue(Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(null, value, expectedResultType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +	public <T> T getValue(EvaluationContext context, Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(context, value, expectedResultType);, +	public <T> T getValue(Class<T> expectedResultType) throws EvaluationException {, +		return (T)ExpressionUtils.convert(null, value, expectedResultType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import java.util.HashMap;, +	/**, +	 * A new scope is entered when a function is called and it is used to hold the parameters to the function call.  If the names, +	 * of the parameters clash with those in a higher level scope, those in the higher level scope will not be accessible whilst, +	 * the function is executing.  When the function returns the scope is exited., +	 * , +	 * @author Andy Clement, +	 *, +	 */, +	static class VariableScope {, +, +		private final Map<String, Object> vars = new HashMap<String, Object>();, +, +		public VariableScope() { }, +, +		public VariableScope(Map<String, Object> arguments) {, +			if (arguments!=null) {, +				vars.putAll(arguments);, +			}, +		}, +		, +		public VariableScope(String name,Object value) {, +			vars.put(name,value);, +		}, +, +		public Object lookupVariable(String name) {, +			return vars.get(name);]