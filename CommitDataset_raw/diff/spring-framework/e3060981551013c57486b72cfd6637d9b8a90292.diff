[+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, +	private boolean bodyUsed = false;, +, +		this.bodyUsed = true;, +		if (this.bodyUsed) {, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, +	private boolean bodyUsed = false;, +, +		this.bodyUsed = true;, +		if (this.bodyUsed) {, +	}, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import org.springframework.http.HttpMethod;, +, + * A container for CORS configuration also providing methods to check actual or, + * or requested origin, HTTP method, and headers., +	/**, +	 * Default constructor., +	 */, +	/**, +	 * Configure origins to allow, e.g. "http://domain1.com". The special value, +	 * "*" allows all domains., +	 * <p>By default this is not set., +	 */, +	public void setAllowedOrigins(List<String> origins) {, +		this.allowedOrigins = origins;, +	 * Add an origin to allow., +	public void addAllowedOrigin(String origin) {, +		this.allowedOrigins.add(origin);, +	 * Return the configured origins to allow, possibly {@code null}., +	public List<String> getAllowedOrigins() {, +		return this.allowedOrigins;, +	 * Configure HTTP methods to allow, e.g. "GET", "POST", "PUT". The special, +	 * value "*" allows all method. When not set only "GET is allowed., +	 * <p>By default this is not set., +	public void setAllowedMethods(List<String> methods) {, +		this.allowedMethods = methods;, +	 * Add an HTTP method to allow., +	public void addAllowedMethod(String method) {, +		this.allowedMethods.add(method);, +	 * Return the allowed HTTP methods, possibly {@code null} in which case only, +	 * HTTP GET is allowed., +	public List<String> getAllowedMethods() {, +		return this.allowedMethods;, +	 * Configure the list of headers that a pre-flight request can list as allowed, +	 * for use during an actual request. The special value of "*" allows actual, +	 * requests to send any header. A header name is not required to be listed if, +	 * it is one of: Cache-Control, Content-Language, Expires, Last-Modified, Pragma., +	 * <p>By default this is not set., +	 * Add one actual request header to allow., +	 * Return the allowed actual request headers, possibly {@code null}., +	public List<String> getAllowedHeaders() {, +		return this.allowedHeaders;, +	 * Configure the list of response headers other than simple headers (i.e., +	 * Cache-Control, Content-Language, Content-Type, Expires, Last-Modified,, +	 * Pragma) that an actual response might have and can be exposed., +	 * <p>By default this is not set., +	 * Add a single response header to expose., +	 * Return the configured response headers to expose, possibly {@code null}., +	public List<String> getExposedHeaders() {, +		return this.exposedHeaders;, +	 * Whether user credentials are supported., +	 * <p>By default this is not set (i.e. user credentials not supported)., +	 * Return the configured allowCredentials, possibly {@code null}., +	 */, +	public Boolean getAllowCredentials() {, +		return this.allowCredentials;, +	}, +, +	/**, +	 * Configure how long, in seconds, the response from a pre-flight request, +	 * can be cached by clients., +	 * <p>By default this is not set., +	 */, +	public void setMaxAge(Long maxAge) {, +		this.maxAge = maxAge;, +	}, +, +	/**, +	 * Return the configure maxAge value, possibly {@code null}., +, +	 * Check the origin of the request against the configured allowed origins., +	 * @param requestOrigin the origin to check., +	 * @return the origin to use for the response, possibly {@code null} which, +	 * means the request origin is not allowed., +	public String checkOrigin(String requestOrigin) {, +		if (requestOrigin == null) {, +			return null;, +		}, +		List<String> allowedOrigins = this.allowedOrigins == null ?, +				new ArrayList<String>() : this.allowedOrigins;, +		if (allowedOrigins.contains("*")) {, +			if (this.allowCredentials == null || !this.allowCredentials) {, +				return "*";, +			} else {, +				return requestOrigin;, +			}, +		}, +		for (String allowedOrigin : allowedOrigins) {]