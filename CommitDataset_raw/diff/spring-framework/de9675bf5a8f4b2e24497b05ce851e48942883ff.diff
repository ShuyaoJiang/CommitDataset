[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String CONNECT_MESSAGE_HEADER = "simpConnectMessage";, +, +	public static final String HEART_BEAT_HEADER = "simpHeartbeat";, +, +, +	public static long[] getHeartbeat(Map<String, Object> headers) {, +		return (long[]) headers.get(HEART_BEAT_HEADER);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String CONNECT_MESSAGE_HEADER = "simpConnectMessage";, +, +	public static final String HEART_BEAT_HEADER = "simpHeartbeat";, +, +, +	public static long[] getHeartbeat(Map<String, Object> headers) {, +		return (long[]) headers.get(HEART_BEAT_HEADER);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +	public static final String CONNECT_MESSAGE_HEADER = "simpConnectMessage";, +, +	public static final String HEART_BEAT_HEADER = "simpHeartbeat";, +, +, +	public static long[] getHeartbeat(Map<String, Object> headers) {, +		return (long[]) headers.get(HEART_BEAT_HEADER);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	HEARTBEAT,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +import java.security.Principal;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ScheduledFuture;, +import org.springframework.scheduling.TaskScheduler;, +	private final Map<String, SessionInfo> sessions = new ConcurrentHashMap<String, SessionInfo>();, +, +	private TaskScheduler taskScheduler;, +, +	private long[] heartbeatValue;, +, +	private ScheduledFuture<?> heartbeatFuture;, +, +	 * Configure the {@link org.springframework.scheduling.TaskScheduler} to, +	 * use for providing heartbeat support. Setting this property also sets the, +	 * {@link #setHeartbeatValue heartbeatValue} to "10000, 10000"., +	 * <p>By default this is not set., +	 * @since 4.2, +	 */, +	public void setTaskScheduler(TaskScheduler taskScheduler) {, +		Assert.notNull(taskScheduler);, +		this.taskScheduler = taskScheduler;, +		if (this.heartbeatValue == null) {, +			this.heartbeatValue = new long[] {10000, 10000};, +		}, +	}, +, +	/**, +	 * Return the configured TaskScheduler., +	 */, +	public TaskScheduler getTaskScheduler() {, +		return this.taskScheduler;, +	}, +, +	/**, +	 * Configure the value for the heart-beat settings. The first number, +	 * represents how often the server will write or send a heartbeat., +	 * The second is how often the client should write. 0 means no heartbeats., +	 * <p>By default this is set to "0, 0" unless the {@link #setTaskScheduler, +	 * taskScheduler} in which case the default becomes "10000,10000", +	 * (in milliseconds)., +	 * @since 4.2, +	 */, +	public void setHeartbeatValue(long[] heartbeat) {, +		Assert.notNull(heartbeat);, +		this.heartbeatValue = heartbeat;, +	}, +, +	/**, +	 * The configured value for the heart-beat settings., +	 */, +	public long[] getHeartbeatValue() {, +		return this.heartbeatValue;, +	}, +, +	/**, +		if (getTaskScheduler() != null) {, +			long interval = initHeartbeatTaskDelay();, +			if (interval > 0) {, +				this.heartbeatFuture = this.taskScheduler.scheduleWithFixedDelay(new HeartbeatTask(), interval);, +			}, +		}, +		else {]