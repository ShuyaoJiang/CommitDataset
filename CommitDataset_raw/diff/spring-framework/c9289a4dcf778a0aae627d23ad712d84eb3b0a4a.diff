[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/httpHeaders");, +		@RequestMapping("/httpHeaders"), +		public void httpHeaders(HttpHeaders headers, Writer writer) throws IOException {, +			assertEquals("Invalid Content-Type", new MediaType("text", "html"), headers.getContentType());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/httpHeaders");, +		@RequestMapping("/httpHeaders"), +		public void httpHeaders(HttpHeaders headers, Writer writer) throws IOException {, +			assertEquals("Invalid Content-Type", new MediaType("text", "html"), headers.getContentType());, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +					if (HttpHeaders.class.isAssignableFrom(paramType)) {, +						args[i] = resolveHttpHeadersRequest(webRequest);, +					}, +					else if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) {, +		if (HttpHeaders.class.isAssignableFrom(paramType)) {, +			return resolveHttpHeadersRequest(webRequest);, +	private HttpHeaders resolveHttpHeadersRequest(NativeWebRequest webRequest) throws Exception {, +		HttpInputMessage inputMessage = createHttpInputMessage(webRequest);, +		return inputMessage.getHeaders();]