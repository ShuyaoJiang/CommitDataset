[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java, +import java.lang.reflect.Constructor;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.util.ClassUtils;, +	private static final Constructor<ServletWebSocketHttpExchange> exchangeConstructor;, +, +	private static final boolean undertow10Present;, +, +	static {, +		Class<ServletWebSocketHttpExchange> type = ServletWebSocketHttpExchange.class;, +		Class<?>[] paramTypes = new Class<?>[] {HttpServletRequest.class, HttpServletResponse.class, Set.class};, +		if (ClassUtils.hasConstructor(type, paramTypes)) {, +			exchangeConstructor = ClassUtils.getConstructorIfAvailable(type, paramTypes);, +			undertow10Present = false;, +		}, +		else {, +			paramTypes = new Class<?>[] {HttpServletRequest.class, HttpServletResponse.class};, +			exchangeConstructor = ClassUtils.getConstructorIfAvailable(type, paramTypes);, +			undertow10Present = true;, +		}, +	}, +, +	private static final String[] supportedVersions = new String[] {, +	private Set<WebSocketChannel> peerConnections;, +, +, +	public UndertowRequestUpgradeStrategy() {, +		if (undertow10Present) {, +			this.peerConnections = null;, +		}, +		else {, +			this.peerConnections = Collections.newSetFromMap(new ConcurrentHashMap<WebSocketChannel, Boolean>());, +		}, +	}, +, +, +		return supportedVersions;, +		final ServletWebSocketHttpExchange exchange = createHttpExchange(servletRequest, servletResponse);, +				if (peerConnections != null) {, +					peerConnections.add(channel);, +				}, +	private ServletWebSocketHttpExchange createHttpExchange(HttpServletRequest request, HttpServletResponse response) {, +		try {, +			return (this.peerConnections != null ?, +					exchangeConstructor.newInstance(request, response, this.peerConnections) :, +					exchangeConstructor.newInstance(request, response));, +		}, +		catch (Exception ex) {, +			throw new HandshakeFailureException("Failed to instantiate ServletWebSocketHttpExchange", ex);, +		}, +	}, +]