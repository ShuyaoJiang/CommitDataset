[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * with {@link org.springframework.web.bind.annotation.ResponseStatus}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * with {@link org.springframework.web.bind.annotation.ResponseStatus}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, + * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, +	 * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., +	 * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, +	 * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link DefaultHandlerExceptionResolver} for resolving known Spring exception types, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * with {@link org.springframework.web.bind.annotation.ResponseStatus}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, + * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, +	 * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., +	 * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, +	 * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link DefaultHandlerExceptionResolver} for resolving known Spring exception types, +++ b/src/docs/asciidoc/web/webflux.adoc, +The exception may match against a top-level exception being propagated (i.e. a direct, +`IOException` thrown), or against the immediate cause within a top-level wrapper exception, +(e.g. an `IOException` wrapped inside an `IllegalStateException`)., +For matching exception types, preferably declare the target exception as a method argument, +as shown above. Alternatively, the annotation declaration may narrow the exception types to, +match. We generally recommend to be as specific as possible in the argument signature and to, +declare your primary root exception mappings on a `@ControllerAdvice` prioritized with a, +corresponding order. See <<web.adoc#mvc-ann-exceptionhandler,the MVC section>> for details., +, +[NOTE], +====, +An `@ExceptionHandler` method in WebFlux supports the same method arguments and, +return values as an `@RequestMapping` method, with the exception of request body, +and `@ModelAttribute` related method arguments., +====, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * with {@link org.springframework.web.bind.annotation.ResponseStatus}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, + * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., + * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, + * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link ExceptionHandlerExceptionResolver} for handling exceptions through, +	 * {@link org.springframework.web.bind.annotation.ExceptionHandler} methods., +	 * <li>{@link ResponseStatusExceptionResolver} for exceptions annotated with, +	 * {@link org.springframework.web.bind.annotation.ResponseStatus}., +	 * <li>{@link DefaultHandlerExceptionResolver} for resolving known Spring exception types, +++ b/src/docs/asciidoc/web/webflux.adoc, +The exception may match against a top-level exception being propagated (i.e. a direct, +`IOException` thrown), or against the immediate cause within a top-level wrapper exception, +(e.g. an `IOException` wrapped inside an `IllegalStateException`)., +For matching exception types, preferably declare the target exception as a method argument, +as shown above. Alternatively, the annotation declaration may narrow the exception types to, +match. We generally recommend to be as specific as possible in the argument signature and to, +declare your primary root exception mappings on a `@ControllerAdvice` prioritized with a, +corresponding order. See <<web.adoc#mvc-ann-exceptionhandler,the MVC section>> for details., +, +[NOTE], +====, +An `@ExceptionHandler` method in WebFlux supports the same method arguments and, +return values as an `@RequestMapping` method, with the exception of request body, +and `@ModelAttribute` related method arguments., +====, +++ b/src/docs/asciidoc/web/webmvc.adoc, +The exception may match against a top-level exception being propagated (i.e. a direct, +`IOException` thrown), or against the immediate cause within a top-level wrapper exception, +(e.g. an `IOException` wrapped inside an `IllegalStateException`)., +, +For matching exception types, preferably declare the target exception as a method argument, +as shown above. When multiple exception methods match, a root exception match is generally, +preferred to a cause exception match. More specifically, the `ExceptionDepthComparator` is, +used to sort exceptions based on their depth from the thrown exception type., +, +Alternatively, the annotation declaration may narrow the exception types to match:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@ExceptionHandler({FileSystemException.class, RemoteException.class}), +	public ResponseEntity<String> handle(IOException ex) {, +		// ..., +	}, +----, +, +Or even a list of specific exception types with a very generic argument signature:]