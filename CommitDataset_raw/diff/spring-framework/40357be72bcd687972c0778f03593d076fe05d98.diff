[+++ b/spring-context/src/test/java/example/scannable/ServiceInvocationCounter.java, +		threadLocalCount.set(this.useCount);, +++ b/spring-context/src/test/java/example/scannable/ServiceInvocationCounter.java, +		threadLocalCount.set(this.useCount);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/config/SimpleMapScope.java, +		for (Iterator<Runnable> it = this.callbacks.iterator(); it.hasNext();) {, +			Runnable runnable = it.next();, +++ b/spring-context/src/test/java/example/scannable/ServiceInvocationCounter.java, +		threadLocalCount.set(this.useCount);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/config/SimpleMapScope.java, +		for (Iterator<Runnable> it = this.callbacks.iterator(); it.hasNext();) {, +			Runnable runnable = it.next();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassAndBFPPTests.java, +		assertThat(ConfigWithStaticBeanMethod.testBean(), not(sameInstance(ConfigWithStaticBeanMethod.testBean())));, +++ b/spring-context/src/test/java/example/scannable/ServiceInvocationCounter.java, +		threadLocalCount.set(this.useCount);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/config/SimpleMapScope.java, +		for (Iterator<Runnable> it = this.callbacks.iterator(); it.hasNext();) {, +			Runnable runnable = it.next();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassAndBFPPTests.java, +		assertThat(ConfigWithStaticBeanMethod.testBean(), not(sameInstance(ConfigWithStaticBeanMethod.testBean())));, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java, +		@SuppressWarnings("unchecked")]