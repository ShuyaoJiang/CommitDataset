[+++ b/spring-test-mvc/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import org.springframework.util.CollectionUtils;, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +, +	private final boolean hasNamespaces;, +, +		this.hasNamespaces = !CollectionUtils.isEmpty(namespaces);, +		factory.setNamespaceAware(this.hasNamespaces);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import org.springframework.util.CollectionUtils;, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +, +	private final boolean hasNamespaces;, +, +		this.hasNamespaces = !CollectionUtils.isEmpty(namespaces);, +		factory.setNamespaceAware(this.hasNamespaces);, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/XpathAssertionTests.java, +import static org.hamcrest.Matchers.*;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;, +import static org.springframework.web.bind.annotation.RequestMethod.*;, +, +	private static final Map<String, String> musicNamespace =, +			.andExpect(xpath(composer, musicNamespace, 1).exists()), +			.andExpect(xpath(composer, musicNamespace, 2).exists()), +			.andExpect(xpath(composer, musicNamespace, 3).exists()), +			.andExpect(xpath(composer, musicNamespace, 4).exists()), +			.andExpect(xpath(performer, musicNamespace, 1).exists()), +			.andExpect(xpath(performer, musicNamespace, 2).exists()), +			.andExpect(xpath(composer, musicNamespace, 1).node(notNullValue()));, +			.andExpect(xpath(composer, musicNamespace, 0).doesNotExist()), +			.andExpect(xpath(composer, musicNamespace, 5).doesNotExist()), +			.andExpect(xpath(performer, musicNamespace, 0).doesNotExist()), +			.andExpect(xpath(performer, musicNamespace, 3).doesNotExist()), +			.andExpect(xpath(composer, musicNamespace, 0).node(nullValue()));, +			.andExpect(xpath(composerName, musicNamespace, 1).string("Johann Sebastian Bach")), +			.andExpect(xpath(composerName, musicNamespace, 2).string("Johannes Brahms")), +			.andExpect(xpath(composerName, musicNamespace, 3).string("Edvard Grieg")), +			.andExpect(xpath(composerName, musicNamespace, 4).string("Robert Schumann")), +			.andExpect(xpath(performerName, musicNamespace, 1).string("Vladimir Ashkenazy")), +			.andExpect(xpath(performerName, musicNamespace, 2).string("Yehudi Menuhin")), +			.andExpect(xpath(composerName, musicNamespace, 1).string(equalTo("Johann Sebastian Bach"))) // Hamcrest.., +			.andExpect(xpath(composerName, musicNamespace, 1).string(startsWith("Johann"))), +			.andExpect(xpath(composerName, musicNamespace, 1).string(notNullValue()));, +			.andExpect(xpath(composerDouble, musicNamespace, 1).number(21d)), +			.andExpect(xpath(composerDouble, musicNamespace, 2).number(.0025)), +			.andExpect(xpath(composerDouble, musicNamespace, 3).number(1.6035)), +			.andExpect(xpath(composerDouble, musicNamespace, 4).number(Double.NaN)), +			.andExpect(xpath(composerDouble, musicNamespace, 1).number(equalTo(21d)))  // Hamcrest.., +			.andExpect(xpath(composerDouble, musicNamespace, 3).number(closeTo(1.6, .01)));, +			.andExpect(xpath(performerBooleanValue, musicNamespace, 1).booleanValue(false)), +			.andExpect(xpath(performerBooleanValue, musicNamespace, 2).booleanValue(true));, +			.andExpect(xpath("/ns:people/composers/composer", musicNamespace).nodeCount(4)), +			.andExpect(xpath("/ns:people/performers/performer", musicNamespace).nodeCount(2)), +			.andExpect(xpath("/ns:people/composers/composer", musicNamespace).nodeCount(equalTo(4))) // Hamcrest.., +			.andExpect(xpath("/ns:people/performers/performer", musicNamespace).nodeCount(equalTo(2)));, +	// SPR-10704, +, +	@Test, +	public void testFeedWithLinefeedChars() throws Exception {, +, +//		Map<String, String> namespace = Collections.singletonMap("ns", "");, +, +		standaloneSetup(new BlogFeedController()).build(), +			.perform(get("/blog.atom").accept(MediaType.APPLICATION_ATOM_XML)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_ATOM_XML)), +				.andExpect(xpath("//feed/title").string("Test Feed")), +				.andExpect(xpath("//feed/icon").string("http://www.example.com/favicon.ico"));, +	}, +, +, +, +	@Controller, +	public class BlogFeedController {, +, +		@RequestMapping(value="/blog.atom", method = { GET, HEAD }), +		@ResponseBody, +		public String listPublishedPosts() {, +			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n", +					+ "<feed xmlns=\"http://www.w3.org/2005/Atom\">\r\n", +					+ "  <title>Test Feed</title>\r\n", +					+ "  <icon>http://www.example.com/favicon.ico</icon>\r\n", +					+ "</feed>\r\n\r\n";, +		}, +	}, +]