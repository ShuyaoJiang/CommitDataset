[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +	protected abstract Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +	protected abstract Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> publisher) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +	protected abstract Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> publisher) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +			Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +	protected abstract Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<DataBuffer>> publisher) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +			Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +		Publisher<? extends Publisher<DataBuffer>> result = Flux.from(outputMessage.getBodyWithFlush());, +		Publisher<? extends Publisher<DataBuffer>> result = outputMessage.getBodyWithFlush();, +		Publisher<? extends Publisher<DataBuffer>> result = outputMessage.getBodyWithFlush();, +		Publisher<? extends Publisher<DataBuffer>> result = outputMessage.getBodyWithFlush();, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends Publisher<DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends Publisher<DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java]