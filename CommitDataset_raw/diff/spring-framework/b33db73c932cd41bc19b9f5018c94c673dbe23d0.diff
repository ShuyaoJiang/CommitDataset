[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +			String pathVarName = null;, +				else if (PathVariable.class.isInstance(paramAnn)) {, +					PathVariable pathVar = (PathVariable) paramAnn;, +					pathVarName = pathVar.value();, +				}, +			if (paramName == null && pathVarName == null) {, +			} else if (pathVarName != null) {, +				initBinderArgs[i] = resolvePathVariable(pathVarName, methodParam, webRequest, null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +			String pathVarName = null;, +				else if (PathVariable.class.isInstance(paramAnn)) {, +					PathVariable pathVar = (PathVariable) paramAnn;, +					pathVarName = pathVar.value();, +				}, +			if (paramName == null && pathVarName == null) {, +			} else if (pathVarName != null) {, +				initBinderArgs[i] = resolvePathVariable(pathVarName, methodParam, webRequest, null);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +			String pathVarName = null;, +				else if (PathVariable.class.isInstance(paramAnn)) {, +					PathVariable pathVar = (PathVariable) paramAnn;, +					pathVarName = pathVar.value();, +				}, +			if (paramName == null && pathVarName == null) {, +			} else if (pathVarName != null) {, +				initBinderArgs[i] = resolvePathVariable(pathVarName, methodParam, webRequest, null);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +package org.springframework.web.servlet.mvc.annotation;, +, +import java.io.IOException;, +import java.io.Writer;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletResponse;, +, +import static org.junit.Assert.assertEquals;, +import org.junit.Test;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.beans.propertyeditors.CustomDateEditor;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.mock.web.MockServletConfig;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.WebDataBinder;, +import org.springframework.web.bind.annotation.InitBinder;, +import org.springframework.web.bind.annotation.PathVariable;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +import org.springframework.web.servlet.DispatcherServlet;, +, +/** @author Arjen Poutsma */, +public class UriTemplateServletAnnotationControllerTests {, +, +	private DispatcherServlet servlet;, +, +	@Test, +	public void simple() throws Exception {, +		initServlet(SimpleUriTemplateController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42/bookings/21");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42-21", response.getContentAsString());, +	}, +	, +	@Test, +	public void binding() throws Exception {, +		initServlet(BindingUriTemplateController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42/dates/2008-11-18");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42", response.getContentAsString());, +	}, +, +	private void initServlet(final Class<?> controllerclass) throws ServletException {, +		servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent), +					throws BeansException {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(controllerclass));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +	}, +, +	@Controller, +	public static class SimpleUriTemplateController {, +, +		@RequestMapping("/hotels/{hotel}/bookings/{booking}")]