[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Failed to convert from type " + sourceType + " to type " + targetType + " for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Failed to convert from type " + sourceType + " to type " + targetType + " for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +		super("No converter found capable of converting from type " + sourceType + " to type " + targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Failed to convert from type " + sourceType + " to type " + targetType + " for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +		super("No converter found capable of converting from type " + sourceType + " to type " + targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.util.LinkedList;, +	private static CommonElement findCommonElement(Collection<?> values) {, +		Class<?> commonType = null;, +					commonType = value.getClass();, +				} else {, +					commonType = commonType(commonType, value.getClass());, +					if (commonType == Object.class) {, +		}, +		return new CommonElement(commonType, candidate);, +	}, +, +	private static Class<?> commonType(Class<?> commonType, Class<?> valueClass) {, +		LinkedList<Class<?>> classQueue = new LinkedList<Class<?>>();, +		classQueue.addFirst(commonType);, +		while (!classQueue.isEmpty()) {, +			Class<?> currentClass = classQueue.removeLast();, +			if (currentClass.isAssignableFrom(valueClass)) {, +				return currentClass;, +			}, +			Class<?>[] interfaces = currentClass.getInterfaces();, +			for (Class<?> ifc : interfaces) {, +				addInterfaceHierarchy(ifc, classQueue);, +			}, +			if (currentClass.getSuperclass() != null) {, +				classQueue.addFirst(currentClass.getSuperclass());, +			}, +		}, +		throw new IllegalStateException("Should never be invoked");	, +	}, +	, +	private static void addInterfaceHierarchy(Class<?> ifc, LinkedList<Class<?>> classQueue) {, +		classQueue.addFirst(ifc);, +		for (Class<?> inheritedIfc : ifc.getInterfaces()) {, +			addInterfaceHierarchy(inheritedIfc, classQueue);, +		}, +	public TypeDescriptor(Class<?> mapType, CommonElement commonKey, CommonElement commonValue) {, +		this.mapKeyType = applyCommonElement(commonKey);, +		this.mapValueType = applyCommonElement(commonValue);, +	public TypeDescriptor(Class<?> collectionType, CommonElement commonElement) {, +		this.elementType = applyCommonElement(commonElement);, +	private TypeDescriptor applyCommonElement(CommonElement commonElement) {, +		if (commonElement == null) {, +		if (commonElement.getValue() instanceof Collection<?>) {, +			Collection<?> collection = (Collection<?>) commonElement.getValue();, +			return new TypeDescriptor(commonElement.getType(), findCommonElement(collection));			, +		else if (commonElement.getValue() instanceof Map<?, ?>) {, +			Map<?, ?> map = (Map<?, ?>) commonElement.getValue();, +			return new TypeDescriptor(commonElement.getType(), findCommonElement(map.keySet()), findCommonElement(map.values()));, +			return TypeDescriptor.valueOf(commonElement.getType());, +	// inner classes, +	, +	private static class CommonElement {, +		, +		private Class<?> type;, +		, +		private Object value;, +, +		public CommonElement(Class<?> type, Object value) {, +			this.type = type;, +			this.value = value;, +		}, +, +		public Class<?> getType() {, +			return type;, +		}, +, +		public Object getValue() {, +			return value;, +		}, +		, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Failed to convert from type " + sourceType + " to type " + targetType + " for value '" + ObjectUtils.nullSafeToString(value) + "'", cause);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +		super("No converter found capable of converting from type " + sourceType + " to type " + targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.util.LinkedList;, +	private static CommonElement findCommonElement(Collection<?> values) {, +		Class<?> commonType = null;, +					commonType = value.getClass();, +				} else {, +					commonType = commonType(commonType, value.getClass());, +					if (commonType == Object.class) {, +		}, +		return new CommonElement(commonType, candidate);, +	}, +, +	private static Class<?> commonType(Class<?> commonType, Class<?> valueClass) {]