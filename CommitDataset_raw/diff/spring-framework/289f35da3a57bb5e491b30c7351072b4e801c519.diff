[+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canRead(contextClass, mediaType);, +	}, +, +	@Override, +	public boolean canWrite(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canWrite(contextClass, mediaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canRead(contextClass, mediaType);, +	}, +, +	@Override, +	public boolean canWrite(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canWrite(contextClass, mediaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canRead(Class, MediaType)} with additional ones, +	 * related to the generic type., +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canWrite(Class, MediaType)} with additional ones, +	 * related to the generic type., +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canRead(contextClass, mediaType);, +	}, +, +	@Override, +	public boolean canWrite(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canWrite(contextClass, mediaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canRead(Class, MediaType)} with additional ones, +	 * related to the generic type., +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canWrite(Class, MediaType)} with additional ones, +	 * related to the generic type., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canRead(contextClass, mediaType);, +	}, +, +	@Override, +	public boolean canWrite(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canWrite(contextClass, mediaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canRead(Class, MediaType)} with additional ones, +	 * related to the generic type., +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canWrite(Class, MediaType)} with additional ones, +	 * related to the generic type., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java, +	public boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canRead(contextClass, mediaType);, +	}, +, +	@Override, +	public boolean canWrite(Type type, Class<?> contextClass, MediaType mediaType) {, +		return canWrite(contextClass, mediaType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canRead(Class, MediaType)} with additional ones, +	 * related to the generic type., +	 * This method should perform the same checks than, +	 * {@link HttpMessageConverter#canWrite(Class, MediaType)} with additional ones, +	 * related to the generic type., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		Type returnValueType = getGenericType(returnType);, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);, +				if (messageConverter instanceof GenericHttpMessageConverter) {, +					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,, +							returnValueClass, selectedMediaType)) {, +							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,, +									returnValueType, selectedMediaType, outputMessage);, +							if (logger.isDebugEnabled()) {, +								logger.debug("Written [" + returnValue + "] as \"" +, +										selectedMediaType + "\" using [" + messageConverter + "]");, +						return;, +				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {, +					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,, +							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),, +							inputMessage, outputMessage);, +					if (returnValue != null) {, +						((HttpMessageConverter<T>) messageConverter).write(returnValue,, +								selectedMediaType, outputMessage);, +	 * Return the generic type of the {@code returnType} (or of the nested type if it is, +	 * a {@link HttpEntity})., +	 */]