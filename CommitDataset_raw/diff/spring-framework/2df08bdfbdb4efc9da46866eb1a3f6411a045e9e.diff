[+++ b/build.gradle, +    apply plugin: org.springframework.build.gradle.SplitPackageDetectorPlugin, +    diagnoseSplitPackages {, +        projectsToScan = project.subprojects - project(":spring-instrument-tomcat") // SPR-10150, +    }, +, +    check.dependsOn diagnoseSplitPackages, +, +++ b/build.gradle, +    apply plugin: org.springframework.build.gradle.SplitPackageDetectorPlugin, +    diagnoseSplitPackages {, +        projectsToScan = project.subprojects - project(":spring-instrument-tomcat") // SPR-10150, +    }, +, +    check.dependsOn diagnoseSplitPackages, +, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/SplitPackageDetectorPlugin.groovy, + * Copyright 2013 the original author or authors., +import org.gradle.api.DefaultTask, +import org.gradle.api.Plugin, +import org.gradle.api.Project, +import org.gradle.api.Task, +import org.gradle.api.artifacts.ProjectDependency, +import org.gradle.api.tasks.Input, +import org.gradle.api.tasks.TaskAction, +import org.gradle.plugins.ide.eclipse.model.EclipseClasspath, +        diagnoseSplitPackages.setDescription('Detects packages which will be split across JARs'), +    @Input, +    Set<Project> projectsToScan, +        def Map<Project, Project> mergeMap = [:], +        def projects = projectsToScan.findAll { it.plugins.findPlugin(org.springframework.build.gradle.MergePlugin) }.findAll { it.merge.into }, +            mergeMap.put(p, p.merge.into), +        def splitFound = new org.springframework.build.gradle.SplitPackageDetector(projectsToScan, mergeMap, project.logger).diagnoseSplitPackages();, +        assert !splitFound // see error log messages for details of split packages, +    private static final String PACKAGE_SEPARATOR = ".", +, +    private final Map<Project, Project> mergeMap, +, +    private final Map<Project, Set<String>> pkgMap = [:], +    SplitPackageDetector(projectsToScan, mergeMap, logger) {, +        this.mergeMap = mergeMap, +        projectsToScan.each { Project p ->, +            def dir = p.projectDir, +                pkgMap.put(p, packages), +        def projs = pkgMap.keySet().toArray(), +        def numProjects = projs.length, +        for (int i = 0; i < numProjects - 1; i++) {, +            for (int j = i + 1; j < numProjects - 1; j++) {, +                def pi = projs[i], +                def pkgi = new HashSet(pkgMap.get(pi)), +                def pj = projs[j], +                def pkgj = pkgMap.get(pj), +                pkgi.retainAll(pkgj), +                if (!pkgi.isEmpty() && mergeMap.get(pi) != pj && mergeMap.get(pj) != pi) {, +                    pkgi.each { pkg ->, +                        def readablePkg = pkg.substring(1).replaceAll(File.separator, PACKAGE_SEPARATOR), +                        logger.error("Package '$readablePkg' is split between $pi and $pj"), +                    }]