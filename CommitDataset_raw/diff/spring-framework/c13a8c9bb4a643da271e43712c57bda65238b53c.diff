[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import java.util.function.Function;, +import org.reactivestreams.Subscriber;, +import reactor.fn.BiConsumer;, +	private Function<Throwable, Throwable> errorMapper = new DispatcherHandlerExceptionMapper();, +, +	/**, +	 * Configure a function to map error signals from the {@code DispatcherHandler}., +	 * <p>By default this is set to {@link DispatcherHandlerExceptionMapper}., +	 * @param errorMapper the function, +	 */, +	public void setErrorMapper(Function<Throwable, Throwable> errorMapper) {, +		this.errorMapper = errorMapper;, +	}, +, +	/**, +	 * Return the configured function for mapping exceptions., +	 */, +	public Function<Throwable, Throwable> getErrorMapper() {, +		return this.errorMapper;, +	}, +, +		Publisher<Void> completionPublisher = Publishers.concatMap(resultPublisher, result -> {, +, +		return mapError(completionPublisher, this.errorMapper);, +	private static <E> Publisher<E> mapError(Publisher<E> source, Function<Throwable, Throwable> function) {, +		return Publishers.lift(source, null, new BiConsumer<Throwable, Subscriber<? super E>>() {, +			@Override, +			public void accept(Throwable throwable, Subscriber<? super E> subscriber) {, +				subscriber.onError(function.apply(throwable));, +			}, +		}, null);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import java.util.function.Function;, +import org.reactivestreams.Subscriber;, +import reactor.fn.BiConsumer;, +	private Function<Throwable, Throwable> errorMapper = new DispatcherHandlerExceptionMapper();, +, +	/**, +	 * Configure a function to map error signals from the {@code DispatcherHandler}., +	 * <p>By default this is set to {@link DispatcherHandlerExceptionMapper}., +	 * @param errorMapper the function, +	 */, +	public void setErrorMapper(Function<Throwable, Throwable> errorMapper) {, +		this.errorMapper = errorMapper;, +	}, +, +	/**, +	 * Return the configured function for mapping exceptions., +	 */, +	public Function<Throwable, Throwable> getErrorMapper() {, +		return this.errorMapper;, +	}, +, +		Publisher<Void> completionPublisher = Publishers.concatMap(resultPublisher, result -> {, +, +		return mapError(completionPublisher, this.errorMapper);, +	private static <E> Publisher<E> mapError(Publisher<E> source, Function<Throwable, Throwable> function) {, +		return Publishers.lift(source, null, new BiConsumer<Throwable, Subscriber<? super E>>() {, +			@Override, +			public void accept(Throwable throwable, Subscriber<? super E> subscriber) {, +				subscriber.onError(function.apply(throwable));, +			}, +		}, null);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapper.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive;, +, +import java.util.function.Function;, +, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.ResponseStatusException;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +import org.springframework.web.bind.annotation.ResponseStatus;, +, +/**, + * Map "standard" framework exceptions and, + * {@link ResponseStatus @ResponseStatus}-annotated exceptions to a, + * {@link ResponseStatusException}., + *, + * @author Rossen Stoyanchev]