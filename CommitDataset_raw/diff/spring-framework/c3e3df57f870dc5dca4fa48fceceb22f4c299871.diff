[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, + * Abstract base class for Jackson JSON 2.9 decoding., + * @author Arjen Poutsma, +, +, +			JsonParser parser = factory.createNonBlockingByteArrayParser();, +			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +			return Flux.from(input).flatMap(tokenizer).doFinally(t -> tokenizer.endOfInput());, +	private Flux<Object> decodeInternal(Flux<TokenBuffer> tokens, ResolvableType elementType,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, + * Abstract base class for Jackson JSON 2.9 decoding., + * @author Arjen Poutsma, +, +, +			JsonParser parser = factory.createNonBlockingByteArrayParser();, +			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +			return Flux.from(input).flatMap(tokenizer).doFinally(t -> tokenizer.endOfInput());, +	private Flux<Object> decodeInternal(Flux<TokenBuffer> tokens, ResolvableType elementType,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, + * {@link Function} to transform a JSON stream of arbitrary size, byte array, + * chunks into a {@code Flux<TokenBuffer>} where each token buffer is a, + * well-formed JSON object., +	private final ByteArrayFeeder inputFeeder;, +, +	 * @param tokenizeArrayElements if {@code true} and the "top level" JSON, +	 * object is an array, each element is returned individually, immediately, +	 * after it is received., +, +				updateDepth(token);, +	private void updateDepth(JsonToken token) {, +	}, +	public void endOfInput() {, +		this.inputFeeder.endOfInput();]