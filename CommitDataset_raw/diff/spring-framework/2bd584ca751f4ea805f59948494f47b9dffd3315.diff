[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2013 the original author or authors., + * Default implementation of the {@link LobHandler} interface., + * Invokes the direct accessor methods that {@code java.sql.ResultSet}, + * This does not apply to Oracle 9i's drivers at all; as of Oracle 10g,, + * it does work but may still come with LOB size limitations. Consider using, + * recent Oracle drivers even when working against an older database server., + * See the {@link LobHandler} javadoc for the full set of recommendations., + * explicitly set through the JDBC {@code setBlob} / {@code setClob} API:, + * for example, PostgreSQL's driver. Switch the {@link #setWrapAsLob "wrapAsLob"}, + * <p>Finally, primarily as a direct equivalent to {@link OracleLobHandler},, + * this LobHandler also supports the creation of temporary BLOB/CLOB objects., + * Consider switching the {@link #setCreateTemporaryLob "createTemporaryLob"}, + * property to "true" when "streamAsLob" happens to run into LOB size limitations., + *, + * <p>See the {@link LobHandler} interface javadoc for a summary of recommendations., +	private boolean createTemporaryLob = false;, +, +	 * / {@code setCharacterStream} method for setting the content. Switch this, +	 * to "true" for explicit Blob / Clob wrapping against JDBC drivers that, +	 * are known to require such wrapping (e.g. PostgreSQL's for access to OID, +	 * columns, whereas BYTEA columns need to be accessed the standard way)., +	 * Switch this to "true" for explicit JDBC 4.0 streaming, provided that your, +	/**, +	 * Specify whether to copy a byte array / String into a temporary JDBC, +	 * Blob / Clob object created through the JDBC 4.0 {@code createBlob} /, +	 * {@code createClob} methods., +	 * <p>Default is "false", using the common JDBC 2.0 {@code setBinaryStream}, +	 * / {@code setCharacterStream} method for setting the content. Switch this, +	 * to "true" for explicit Blob / Clob creation using JDBC 4.0., +	 * <p>This setting affects stream arguments as well as byte array / String, +	 * arguments, requiring JDBC 4.0 support. For supporting LOB content against, +	 * JDBC 3.0, check out the {@link #setWrapAsLob "wrapAsLob"} setting., +	 * @see java.sql.Connection#createBlob(), +	 * @see java.sql.Connection#createClob(), +	 */, +	public void setCreateTemporaryLob(boolean createTemporaryLob) {, +		this.createTemporaryLob = createTemporaryLob;, +	}, +, +		return (this.createTemporaryLob ? new TemporaryLobCreator() : new DefaultLobCreator());, +	 * Default LobCreator implementation as an inner class., +			if (streamAsLob) {, +			else if (wrapAsLob) {, +				if (asciiStream != null) {, +					ps.setClob(paramIndex, new PassThroughClob(asciiStream, contentLength));, +				}, +				else {, +					ps.setClob(paramIndex, (Clob) null);, +				}, +			}, +			// nothing to do when not creating temporary LOBs, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2013 the original author or authors., + * Default implementation of the {@link LobHandler} interface., + * Invokes the direct accessor methods that {@code java.sql.ResultSet}, + * This does not apply to Oracle 9i's drivers at all; as of Oracle 10g,, + * it does work but may still come with LOB size limitations. Consider using, + * recent Oracle drivers even when working against an older database server., + * See the {@link LobHandler} javadoc for the full set of recommendations., + * explicitly set through the JDBC {@code setBlob} / {@code setClob} API:, + * for example, PostgreSQL's driver. Switch the {@link #setWrapAsLob "wrapAsLob"}, + * <p>Finally, primarily as a direct equivalent to {@link OracleLobHandler},, + * this LobHandler also supports the creation of temporary BLOB/CLOB objects., + * Consider switching the {@link #setCreateTemporaryLob "createTemporaryLob"}, + * property to "true" when "streamAsLob" happens to run into LOB size limitations., + *, + * <p>See the {@link LobHandler} interface javadoc for a summary of recommendations., +	private boolean createTemporaryLob = false;, +, +	 * / {@code setCharacterStream} method for setting the content. Switch this, +	 * to "true" for explicit Blob / Clob wrapping against JDBC drivers that, +	 * are known to require such wrapping (e.g. PostgreSQL's for access to OID, +	 * columns, whereas BYTEA columns need to be accessed the standard way)., +	 * Switch this to "true" for explicit JDBC 4.0 streaming, provided that your, +	/**, +	 * Specify whether to copy a byte array / String into a temporary JDBC, +	 * Blob / Clob object created through the JDBC 4.0 {@code createBlob} /, +	 * {@code createClob} methods., +	 * <p>Default is "false", using the common JDBC 2.0 {@code setBinaryStream}, +	 * / {@code setCharacterStream} method for setting the content. Switch this, +	 * to "true" for explicit Blob / Clob creation using JDBC 4.0., +	 * <p>This setting affects stream arguments as well as byte array / String, +	 * arguments, requiring JDBC 4.0 support. For supporting LOB content against, +	 * JDBC 3.0, check out the {@link #setWrapAsLob "wrapAsLob"} setting., +	 * @see java.sql.Connection#createBlob(), +	 * @see java.sql.Connection#createClob(), +	 */, +	public void setCreateTemporaryLob(boolean createTemporaryLob) {, +		this.createTemporaryLob = createTemporaryLob;, +	}, +, +		return (this.createTemporaryLob ? new TemporaryLobCreator() : new DefaultLobCreator());, +	 * Default LobCreator implementation as an inner class., +			if (streamAsLob) {, +			else if (wrapAsLob) {, +				if (asciiStream != null) {, +					ps.setClob(paramIndex, new PassThroughClob(asciiStream, contentLength));, +				}, +				else {]