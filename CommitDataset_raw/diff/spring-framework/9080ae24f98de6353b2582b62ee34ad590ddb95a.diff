[+++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java, +		this.log.fatal(LogMessage.lazy(messageSupplier));, +		this.log.fatal(LogMessage.lazy(messageSupplier), cause);, +		this.log.error(LogMessage.lazy(messageSupplier));, +		this.log.error(LogMessage.lazy(messageSupplier), cause);, +		this.log.warn(LogMessage.lazy(messageSupplier));, +		this.log.warn(LogMessage.lazy(messageSupplier), cause);, +		this.log.info(LogMessage.lazy(messageSupplier));, +		this.log.info(LogMessage.lazy(messageSupplier), cause);, +		this.log.debug(LogMessage.lazy(messageSupplier));, +		this.log.debug(LogMessage.lazy(messageSupplier), cause);, +		this.log.trace(LogMessage.lazy(messageSupplier));, +		this.log.trace(LogMessage.lazy(messageSupplier), cause);, +++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java, +		this.log.fatal(LogMessage.lazy(messageSupplier));, +		this.log.fatal(LogMessage.lazy(messageSupplier), cause);, +		this.log.error(LogMessage.lazy(messageSupplier));, +		this.log.error(LogMessage.lazy(messageSupplier), cause);, +		this.log.warn(LogMessage.lazy(messageSupplier));, +		this.log.warn(LogMessage.lazy(messageSupplier), cause);, +		this.log.info(LogMessage.lazy(messageSupplier));, +		this.log.info(LogMessage.lazy(messageSupplier), cause);, +		this.log.debug(LogMessage.lazy(messageSupplier));, +		this.log.debug(LogMessage.lazy(messageSupplier), cause);, +		this.log.trace(LogMessage.lazy(messageSupplier));, +		this.log.trace(LogMessage.lazy(messageSupplier), cause);, +++ b/spring-core/src/main/java/org/springframework/core/log/LogMessage.java, + * for convenient lazy resolution of a given {@link Supplier} instance, + * (typically bound to a Java 8 lambda expression) or a printf-style, + * format string ({@link String#format})in its {@link #toString()}., + * @see #lazy(Supplier), + * @see #format(String, Object), + * @see #format(String, Object...), +public abstract class LogMessage implements CharSequence {, +	@Override, +	public int length() {, +		return toString().length();, +	@Override, +	public char charAt(int index) {, +		return toString().charAt(index);, +	}, +, +	@Override, +	public CharSequence subSequence(int start, int end) {, +		return toString().subSequence(start, end);, +	}, +			this.result = buildString();, +	abstract String buildString();, +, +, +	/**, +	 * Build a lazy resolution message from the given supplier., +	 * @param supplier the supplier (typically bound to a Java 8 lambda expression), +	 * @see #toString(), +	 */, +	public static LogMessage lazy(Supplier<? extends CharSequence> supplier) {, +		return new LazyMessage(supplier);, +	}, +, +	/**, +	 * Build a formatted message from the given format string and argument., +	 * @param format the format string (following {@link String#format} rules), +	 * @param arg1 the argument, +	 * @see String#format(String, Object...), +	 */, +	public static LogMessage format(String format, Object arg1) {, +		return new FormatMessage1(format, arg1);, +	}, +, +	/**, +	 * Build a formatted message from the given format string and arguments., +	 * @param format the format string (following {@link String#format} rules), +	 * @param arg1 the first argument, +	 * @param arg2 the second argument, +	 * @see String#format(String, Object...), +	 */, +	public static LogMessage format(String format, Object arg1, Object arg2) {, +		return new FormatMessage2(format, arg1, arg2);, +	}, +, +	/**, +	 * Build a formatted message from the given format string and arguments., +	 * @param format the format string (following {@link String#format} rules), +	 * @param arg1 the first argument, +	 * @param arg2 the second argument, +	 * @param arg3 the third argument, +	 * @see String#format(String, Object...), +	 */, +	public static LogMessage format(String format, Object arg1, Object arg2, Object arg3) {, +		return new FormatMessage3(format, arg1, arg2, arg3);, +	}, +, +	/**, +	 * Build a formatted message from the given format string and arguments., +	 * @param format the format string (following {@link String#format} rules), +	 * @param arg1 the first argument, +	 * @param arg2 the second argument, +	 * @param arg3 the third argument, +	 * @param arg4 the fourth argument, +	 * @see String#format(String, Object...)]