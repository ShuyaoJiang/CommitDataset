[+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterQueryTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collection;, +, +	public void setup() throws Exception {, +, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				"SELECT AGE FROM CUSTMR WHERE ID < :id", params);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				"SELECT AGE FROM CUSTMR WHERE ID < :id", params);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				"SELECT AGE FROM CUSTMR WHERE ID < :id", params);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				params, Integer.class);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +		Map<String, Object> map = template.queryForMap("SELECT AGE FROM CUSTMR WHERE ID < :id", params);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				params, new RowMapper<Object>() {, +		Map<String, Object> params = new HashMap<>();, +		params.put("id", 3);, +				params, Integer.class);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +				params, Integer.class);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("ids", Arrays.asList(3, 4));, +		Object o = template.queryForObject(sql, params, Integer.class);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("multiExpressionList", l1);, +				params, Integer.class);, +		MapSqlParameterSource params = new MapSqlParameterSource();, +		params.addValue("id", 3);, +		int i = template.queryForObject("SELECT AGE FROM CUSTMR WHERE ID = :id", params, Integer.class).intValue();, +		BeanPropertySqlParameterSource params = new BeanPropertySqlParameterSource(new ParameterBean(3));, +		long l = template.queryForObject("SELECT AGE FROM CUSTMR WHERE ID = :id", params, Long.class).longValue();, +	@Test, +	public void testQueryForLongWithParamBeanWithCollection() throws Exception {, +		given(resultSet.getMetaData()).willReturn(resultSetMetaData);, +		given(resultSet.next()).willReturn(true, false);, +		given(resultSet.getLong(1)).willReturn(87L);, +, +		BeanPropertySqlParameterSource params = new BeanPropertySqlParameterSource(new ParameterCollectionBean(3, 5));, +		long l = template.queryForObject("SELECT AGE FROM CUSTMR WHERE ID IN (:ids)", params, Long.class).longValue();, +, +		assertEquals("Return of a long", 87, l);, +		verify(connection).prepareStatement("SELECT AGE FROM CUSTMR WHERE ID IN (?, ?)");, +		verify(preparedStatement).setObject(1, 3);, +		verify(preparedStatement).setObject(2, 5);, +	}, +, +, +		private final int id;, +, +	static class ParameterCollectionBean {, +, +		private final Collection<Integer> ids;, +, +		public ParameterCollectionBean(Integer... ids) {, +			this.ids = Arrays.asList(ids);, +		}, +, +		public Collection<Integer> getIds() {, +			return ids;, +		}, +	}, +]