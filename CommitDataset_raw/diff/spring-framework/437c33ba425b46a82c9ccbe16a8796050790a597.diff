[+++ b/src/docs/asciidoc/web/webflux.adoc, +[[webflux-ann-modelattrib-method-args]], +==== @ModelAttribute, +[.small]#<<web.adoc#mvc-ann-modelattrib-method-args,Same in Spring MVC>>#, +, +Use the `@ModelAttribute` annotation on a method argument to access an attribute from the, +model, or have it instantiated if not present. The model attribute is also overlaid with, +values query parameters for form fields whose names match to field names. This is, +referred to as data binding and it saves you from having to deal with parsing and, +converting individual query parameters and form fields. For example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/owners/{ownerId}/pets/{petId}/edit"), +	public String processSubmit(**@ModelAttribute Pet pet**) { }, +----, +, +The `Pet` instance above is resolved as follows:, +, +* From the model if already added via <<webflux-ann-modelattrib-methods>>., +* From the HTTP session via <<webflux-ann-sessionattributes>>., +* From the invocation of a default constructor., +* From the invocation of a "primary constructor" with arguments matching to query, +parameters or form fields; argument names are determined via JavaBeans, +`@ConstructorProperties` or via runtime-retained parameter names in the bytecode., +, +After the model attribute instance is obtained, data binding is applied. The, +`WebExchangeDataBinder` class matches names of query parameters and form fields to field, +names on the target Object. Matching fields are populated after type conversion is applied, +where necessary. For more on data binding (and validation) see, +<<core.adoc#validation, Validation>>. For more on customizing data binding see, +<<webflux-ann-initbinder>>., +, +Data binding may result in errors. By default a `WebExchangeBindException` is raised but, +to check for such errors in the controller method, add a `BindingResult` argument, +immediately next to the `@ModelAttribute` as shown below:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/owners/{ownerId}/pets/{petId}/edit"), +	public String processSubmit(**@ModelAttribute("pet") Pet pet**, BindingResult result) {, +		if (result.hasErrors()) {, +			return "petForm";, +		}, +		// ..., +	}, +----, +, +Validation can be applied automatically after data binding by adding the, +`javax.validation.Valid` annotation or Spring's `@Validated` annotation (also see, +<<core.adoc#validation-beanvalidation, Bean validation>> and, +<<core.adoc#validation, Spring validation>>). For example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/owners/{ownerId}/pets/{petId}/edit"), +	public String processSubmit(**@Valid @ModelAttribute("pet") Pet pet**, BindingResult result) {, +		if (result.hasErrors()) {, +			return "petForm";, +		}, +		// ..., +	}, +----, +, +Spring WebFlux, unlike Spring MVC, supports reactive types in the model, e.g., +`Mono<Account>` or `io.reactivex.Single<Account>`. An `@ModelAttribute` argument can be, +declared with or without a reactive type wrapper, and it will be resolved accordingly,, +to the actual value if necessary. Note however that in order to use a `BindingResult`, +argument, you must declare the `@ModelAttribute` argument before it without a reactive, +type wrapper, as shown earlier. Alternatively, you can handle any errors through the, +reactive type:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/owners/{ownerId}/pets/{petId}/edit"), +	public Mono<String> processSubmit(@Valid @ModelAttribute("pet") Mono<Pet> petMono) {, +		return petMono, +			.flatMap(pet -> {, +				// ..., +			}), +			.onErrorResume(ex -> {, +				// ..., +			});, +	}, +----, +, +, +[[webflux-ann-sessionattributes]], +==== @SessionAttributes, +[.small]#<<web.adoc#mvc-ann-sessionattributes,Same in Spring MVC>>#, +, +`@SessionAttributes` is used to store model attributes in the `WebSession` between, +requests. It is a type-level annotation that declares session attributes used by a, +specific controller. This will typically list the names of model attributes or types of, +model attributes which should be transparently stored in the session for subsequent, +requests to access.]