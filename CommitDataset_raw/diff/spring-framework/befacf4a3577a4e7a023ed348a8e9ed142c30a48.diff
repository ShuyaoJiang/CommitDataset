[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +import java.util.Optional;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.http.MediaTypeFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private boolean useRegisteredExtensionsOnly = false;, +, +	private boolean ignoreUnknownExtensions = false;, +, +, +	/**, +	 * Whether to only use the registered mappings to look up file extensions,, +	 * or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}., +	 * <p>By default this is set to {@code false}., +	 */, +	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {, +		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;, +	}, +, +	public boolean isUseRegisteredExtensionsOnly() {, +		return this.useRegisteredExtensionsOnly;, +	}, +, +	/**, +	 * Whether to ignore requests with unknown file extension. Setting this to, +	 * {@code false} results in {@code HttpMediaTypeNotAcceptableException}., +	 * <p>By default this is set to {@literal false} but is overridden in, +	 * {@link PathExtensionContentNegotiationStrategy} to {@literal true}., +	 */, +	public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {, +		this.ignoreUnknownExtensions = ignoreUnknownExtensions;, +	}, +, +	public boolean isIgnoreUnknownExtensions() {, +		return this.ignoreUnknownExtensions;, +	}, +, +, +		if (logger.isTraceEnabled()) {, +			logger.trace("Requested MediaType='" + mediaType + "' based on key='" + key + "'.");, +		}, +		if (!isUseRegisteredExtensionsOnly()) {, +			Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key);, +			if (mediaType.isPresent()) {, +				return mediaType.get();, +			}, +		}, +		if (isIgnoreUnknownExtensions()) {, +		throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes());, +	}, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +import java.util.Optional;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.http.MediaTypeFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private boolean useRegisteredExtensionsOnly = false;, +, +	private boolean ignoreUnknownExtensions = false;, +, +, +	/**, +	 * Whether to only use the registered mappings to look up file extensions,, +	 * or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}., +	 * <p>By default this is set to {@code false}., +	 */, +	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {, +		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;, +	}, +, +	public boolean isUseRegisteredExtensionsOnly() {, +		return this.useRegisteredExtensionsOnly;, +	}, +, +	/**, +	 * Whether to ignore requests with unknown file extension. Setting this to, +	 * {@code false} results in {@code HttpMediaTypeNotAcceptableException}., +	 * <p>By default this is set to {@literal false} but is overridden in, +	 * {@link PathExtensionContentNegotiationStrategy} to {@literal true}., +	 */, +	public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {, +		this.ignoreUnknownExtensions = ignoreUnknownExtensions;, +	}, +, +	public boolean isIgnoreUnknownExtensions() {, +		return this.ignoreUnknownExtensions;, +	}, +, +, +		if (logger.isTraceEnabled()) {, +			logger.trace("Requested MediaType='" + mediaType + "' based on key='" + key + "'.");, +		}, +		if (!isUseRegisteredExtensionsOnly()) {, +			Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key);, +			if (mediaType.isPresent()) {]