[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public Object unless(int arg) {, +		return arg;, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public Object unless(int arg) {, +		return arg;, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	T unless(int arg);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public Object unless(int arg) {, +		return arg;, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	T unless(int arg);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * @author Phillip Webb, +	@Cacheable(value = "default", unless = "#result > 10"), +	public Long unless(int arg) {, +		return (long) arg;, +	}, +, +	@Override, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public Object unless(int arg) {, +		return arg;, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	T unless(int arg);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * @author Phillip Webb, +	@Cacheable(value = "default", unless = "#result > 10"), +	public Long unless(int arg) {, +		return (long) arg;, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +, +	/**, +	 * Spring Expression Language (SpEL) attribute used to veto the cache update., +	 * <p>Unlike {@link #condition()}, this expression is evaluated after the method, +	 * has been called and can therefore refer to the {@code result}. Default is "",, +	 * meaning that caching is never vetoed., +	 * @since 3.2, +	 */, +	String unless() default "";, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public Object unless(int arg) {, +		return arg;, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	T unless(int arg);, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * @author Phillip Webb, +	@Cacheable(value = "default", unless = "#result > 10"), +	public Long unless(int arg) {, +		return (long) arg;, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +, +	/**, +	 * Spring Expression Language (SpEL) attribute used to veto the cache update., +	 * <p>Unlike {@link #condition()}, this expression is evaluated after the method, +	 * has been called and can therefore refer to the {@code result}. Default is "",, +	 * meaning that caching is never vetoed.]