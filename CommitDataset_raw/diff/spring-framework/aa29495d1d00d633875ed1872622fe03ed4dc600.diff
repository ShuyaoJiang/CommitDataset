[+++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the original filename, or the empty String if no file has been chosen, +	 * in the multipart form, or {@code null} if not defined or not available, +++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the original filename, or the empty String if no file has been chosen, +	 * in the multipart form, or {@code null} if not defined or not available, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +	private boolean preserveFilename = false;, +, +	/**, +	 * Set whether to preserve the filename as sent by the client, not stripping off, +	 * path information in {@link CommonsMultipartFile#getOriginalFilename()}., +	 * <p>Default is "false", stripping off path information that may prefix the, +	 * actual filename e.g. from Opera. Switch this to "true" for preserving the, +	 * client-specified filename as-is, including potential path separators., +	 * @since 4.3.5, +	 * @see MultipartFile#getOriginalFilename(), +	 * @see CommonsMultipartFile#setPreserveFilename(boolean), +	 */, +	public void setPreserveFilename(boolean preserveFilename) {, +		this.preserveFilename = preserveFilename;, +	}, +, +				CommonsMultipartFile file = createMultipartFile(fileItem);, +	 * Create a {@link CommonsMultipartFile} wrapper for the given Commons {@link FileItem}., +	 * @param fileItem the Commons FileItem to wrap, +	 * @return the corresponding CommonsMultipartFile (potentially a custom subclass), +	 * @since 4.3.5, +	 * @see #setPreserveFilename(boolean), +	 * @see CommonsMultipartFile#setPreserveFilename(boolean), +	 */, +	protected CommonsMultipartFile createMultipartFile(FileItem fileItem) {, +		CommonsMultipartFile multipartFile = new CommonsMultipartFile(fileItem);, +		multipartFile.setPreserveFilename(this.preserveFilename);, +		return multipartFile;, +	}, +, +	/**, +, +++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the original filename, or the empty String if no file has been chosen, +	 * in the multipart form, or {@code null} if not defined or not available, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +	private boolean preserveFilename = false;, +, +	/**, +	 * Set whether to preserve the filename as sent by the client, not stripping off, +	 * path information in {@link CommonsMultipartFile#getOriginalFilename()}., +	 * <p>Default is "false", stripping off path information that may prefix the, +	 * actual filename e.g. from Opera. Switch this to "true" for preserving the, +	 * client-specified filename as-is, including potential path separators., +	 * @since 4.3.5, +	 * @see MultipartFile#getOriginalFilename(), +	 * @see CommonsMultipartFile#setPreserveFilename(boolean), +	 */, +	public void setPreserveFilename(boolean preserveFilename) {, +		this.preserveFilename = preserveFilename;, +	}, +, +				CommonsMultipartFile file = createMultipartFile(fileItem);, +	 * Create a {@link CommonsMultipartFile} wrapper for the given Commons {@link FileItem}., +	 * @param fileItem the Commons FileItem to wrap, +	 * @return the corresponding CommonsMultipartFile (potentially a custom subclass), +	 * @since 4.3.5, +	 * @see #setPreserveFilename(boolean), +	 * @see CommonsMultipartFile#setPreserveFilename(boolean), +	 */, +	protected CommonsMultipartFile createMultipartFile(FileItem fileItem) {, +		CommonsMultipartFile multipartFile = new CommonsMultipartFile(fileItem);, +		multipartFile.setPreserveFilename(this.preserveFilename);, +		return multipartFile;, +	}, +, +	/**, +, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, + * Copyright 2002-2016 the original author or authors., +	private boolean preserveFilename = false;, +, +	/**, +	 * Set whether to preserve the filename as sent by the client, not stripping off, +	 * path information in {@link CommonsMultipartFile#getOriginalFilename()}., +	 * <p>Default is "false", stripping off path information that may prefix the, +	 * actual filename e.g. from Opera. Switch this to "true" for preserving the, +	 * client-specified filename as-is, including potential path separators., +	 * @since 4.3.5, +	 * @see #getOriginalFilename(), +	 * @see CommonsMultipartResolver#setPreserveFilename(boolean), +	 */, +	public void setPreserveFilename(boolean preserveFilename) {, +		this.preserveFilename = preserveFilename;, +	}, +, +, +		if (this.preserveFilename) {, +			// Do not try to strip off a path..., +			return filename;]