[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.test.util.AssertionErrors;, +import static org.springframework.web.reactive.function.BodyExtractors.toDataBuffers;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +, +		public ResponseSpec exchange() {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange());, +		public <T> ResponseSpec exchange(BodyInserter<T, ? super ClientHttpRequest> inserter) {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(inserter));, +		public <T, S extends Publisher<T>> ResponseSpec exchange(S publisher, Class<T> elementClass) {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(publisher, elementClass));, +		}, +	private class DefaultResponseSpec implements ResponseSpec {, +, +		private final String requestId;, +, +		private final Mono<ClientResponse> responseMono;, +, +, +		public DefaultResponseSpec(String requestId, Mono<ClientResponse> responseMono) {, +			this.requestId = requestId;, +			this.responseMono = responseMono;, +, +		@Override, +		public <T> ExchangeResult<T> decodeEntity(Class<T> entityClass) {, +			return decodeEntity(ResolvableType.forClass(entityClass));, +		}, +, +		@Override, +		public <T> ExchangeResult<List<T>> decodeAndCollect(Class<T> elementClass) {, +			return decodeAndCollect(ResolvableType.forClass(elementClass));, +		}, +, +		@Override, +		public <T> ExchangeResult<Flux<T>> decodeFlux(Class<T> elementClass) {, +			return decodeFlux(ResolvableType.forClass(elementClass));, +		}, +, +		@Override, +		public <T> ExchangeResult<T> decodeEntity(ResolvableType elementType) {, +			return this.responseMono.then(response -> {, +				Mono<T> entityMono = response.body(toMono(elementType));, +				return entityMono.map(entity -> createTestExchange(entity, response));, +			}).block(getTimeout());, +		}, +, +		@Override, +		public <T> ExchangeResult<List<T>> decodeAndCollect(ResolvableType elementType) {, +			return this.responseMono.then(response -> {, +				Flux<T> entityFlux = response.body(toFlux(elementType));, +				return entityFlux.collectList().map(list -> createTestExchange(list, response));, +			}).block(getTimeout());, +		}, +, +		@Override, +		public <T> ExchangeResult<Flux<T>> decodeFlux(ResolvableType elementType) {, +			return this.responseMono.map(response -> {, +				Flux<T> entityFlux = response.body(toFlux(elementType));, +				return createTestExchange(entityFlux, response);, +			}).block(getTimeout());, +		}, +, +		@Override, +		public ExchangeResult<Void> expectNoBody() {, +			return this.responseMono.map(response -> {, +				DataBuffer buffer = response.body(toDataBuffers()).blockFirst(getTimeout());, +				AssertionErrors.assertTrue("Expected empty body", buffer == null);, +				ExchangeResult<Void> exchange = createTestExchange(null, response);, +				return exchange;, +			}).block(getTimeout());, +		}, +, +		private <T> ExchangeResult<T> createTestExchange(T body, ClientResponse response) {, +			WiretapConnector.Info wiretapInfo = connectorListener.retrieveRequest(requestId);, +			return new ExchangeResult<T>(, +					request.getMethod(), request.getURI(), request.getHeaders(),, +					response.statusCode(), response.headers().asHttpHeaders(), body);, +			Assert.notNull(info, "No match for request-id=" + requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.test.util.AssertionErrors;, +import static org.springframework.web.reactive.function.BodyExtractors.toDataBuffers;, +import static org.springframework.web.reactive.function.BodyExtractors.toFlux;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +, +		public ResponseSpec exchange() {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange());, +		public <T> ResponseSpec exchange(BodyInserter<T, ? super ClientHttpRequest> inserter) {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(inserter));, +		public <T, S extends Publisher<T>> ResponseSpec exchange(S publisher, Class<T> elementClass) {, +			return new DefaultResponseSpec(this.requestId, this.headerSpec.exchange(publisher, elementClass));, +		}]