[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java, + * Copyright 2002-2018 the original author or authors., +	private static final String[] START_SKIP = new String[] {"'", "\"", "--", "/*"};, +	private static final String[] STOP_SKIP = new String[] {"'", "\"", "\n", "*/"};, +, +	/**, +	 * Set of characters that qualify as parameter separators,, +	 * indicating that a parameter name in a SQL String has ended., +	 */, +	private static final String PARAMETER_SEPARATORS = "\"':&,;()[]|=+-*%/\\<>^";, +, +	/**, +	 * An index with separator flags per character code., +	 * Technically only needed between 34 and 124 at this point., +	 */, +	private static final boolean[] separatorIndex = new boolean[128];, +, +	static {, +		for (char c : PARAMETER_SEPARATORS.toCharArray()) {, +			separatorIndex[c] = true;, +		}, +	}, +		return (separatorIndex[c] || Character.isWhitespace(c));, +			params.add(new SqlParameter(, +					paramName, paramSource.getSqlType(paramName), paramSource.getTypeName(paramName)));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java, + * Copyright 2002-2018 the original author or authors., +	private static final String[] START_SKIP = new String[] {"'", "\"", "--", "/*"};, +	private static final String[] STOP_SKIP = new String[] {"'", "\"", "\n", "*/"};, +, +	/**, +	 * Set of characters that qualify as parameter separators,, +	 * indicating that a parameter name in a SQL String has ended., +	 */, +	private static final String PARAMETER_SEPARATORS = "\"':&,;()[]|=+-*%/\\<>^";, +, +	/**, +	 * An index with separator flags per character code., +	 * Technically only needed between 34 and 124 at this point., +	 */, +	private static final boolean[] separatorIndex = new boolean[128];, +, +	static {, +		for (char c : PARAMETER_SEPARATORS.toCharArray()) {, +			separatorIndex[c] = true;, +		}, +	}, +		return (separatorIndex[c] || Character.isWhitespace(c));, +			params.add(new SqlParameter(, +					paramName, paramSource.getSqlType(paramName), paramSource.getTypeName(paramName)));, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplateTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, + * @author Nikita Khateev, +	private static final String UPDATE_ARRAY_PARAMETERS =, +			"update customer set type = array[:typeIds] where id = :id";, +	private static final String UPDATE_ARRAY_PARAMETERS_PARSED =, +			"update customer set type = array[?, ?, ?] where id = ?";, +, +, +, +, +, +, +, +, +	public void testExecuteArray() throws SQLException {, +		given(preparedStatement.executeUpdate()).willReturn(1);, +, +		List<Integer> typeIds = Arrays.asList(1, 2, 3);, +, +		params.put("typeIds", typeIds);, +		params.put("id", 1);, +		Object result = namedParameterTemplate.execute(UPDATE_ARRAY_PARAMETERS, params,, +				(PreparedStatementCallback<Object>) ps -> {, +					assertEquals(preparedStatement, ps);, +					ps.executeUpdate();, +					return "result";, +				});, +, +		assertEquals("result", result);, +		verify(connection).prepareStatement(UPDATE_ARRAY_PARAMETERS_PARSED);, +		verify(preparedStatement).setObject(1, 1);, +		verify(preparedStatement).setObject(2, 2);, +		verify(preparedStatement).setObject(3, 3);, +		verify(preparedStatement).setObject(4, 1);, +		verify(preparedStatement).close();, +		verify(connection).close();, +	}, +, +	@Test]