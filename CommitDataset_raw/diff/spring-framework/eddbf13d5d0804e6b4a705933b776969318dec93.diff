[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +import java.util.concurrent.ConcurrentHashMap;, +	/**, +	 * Cache from name with factory bean prefix to stripped name without dereference., +	 * @since 5.1, +	 * @see BeanFactory#FACTORY_BEAN_PREFIX, +	 */, +	private static final Map<String, String> transformedBeanNameCache = new ConcurrentHashMap<>();, +, +		if (!name.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {, +			return name;, +		}, +		return transformedBeanNameCache.computeIfAbsent(name, beanName -> {, +			do {, +			while (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX));, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +import java.util.concurrent.ConcurrentHashMap;, +	/**, +	 * Cache from name with factory bean prefix to stripped name without dereference., +	 * @since 5.1, +	 * @see BeanFactory#FACTORY_BEAN_PREFIX, +	 */, +	private static final Map<String, String> transformedBeanNameCache = new ConcurrentHashMap<>();, +, +		if (!name.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {, +			return name;, +		}, +		return transformedBeanNameCache.computeIfAbsent(name, beanName -> {, +			do {, +			while (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX));, +		});, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/XmlListableBeanFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +, +	public void setup() {, +, +		Map map = new HashMap();, +		map.put("name", "Albert");, +		bd1.setPropertyValues(new MutablePropertyValues(map));, +, +		map = new HashMap();, +		map.put("name", "Roderick");, +		bd2.setPropertyValues(new MutablePropertyValues(map));, +		new XmlBeanDefinitionReader(this.factory).loadBeanDefinitions(new ClassPathResource("test.xml", getClass()));, +, +, +, +	public void lifecycleMethods() {, +	public void protectedLifecycleMethods() {, +	public void descriptionButNoProperties() {, +	public void autoAliasing() {, +	public void beanPostProcessor() {]