[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +				final Class<?> responseClass = (this.responseType instanceof Class) ?, +						(Class<?>) this.responseType : null;, +				final List<MediaType> allSupportedMediaTypes = getMessageConverters().stream(), +						.filter(converter -> canReadResponse(responseClass, converter)), +						.flatMap(this::getSupportedMediaTypes), +						.distinct(), +						.sorted(MediaType.SPECIFICITY_COMPARATOR), +						.collect(Collectors.toList());, +, +		private boolean canReadResponse(@Nullable Class<?> responseClass, HttpMessageConverter<?> converter) {, +			if (responseClass != null) {, +				return converter.canRead(responseClass, null);, +			}, +			else if (converter instanceof GenericHttpMessageConverter) {, +				GenericHttpMessageConverter<?> genericConverter =, +						(GenericHttpMessageConverter<?>) converter;, +				return genericConverter, +						.canRead(this.responseType, null, null);, +			}, +			return false;, +		private Stream<MediaType> getSupportedMediaTypes(HttpMessageConverter<?> messageConverter) {, +			return messageConverter.getSupportedMediaTypes(), +					.stream(), +					.map(mediaType -> {, +						if (mediaType.getCharset() != null) {, +							return new MediaType(mediaType.getType(), mediaType.getSubtype());, +						return mediaType;, +					});, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +				final Class<?> responseClass = (this.responseType instanceof Class) ?, +						(Class<?>) this.responseType : null;, +				final List<MediaType> allSupportedMediaTypes = getMessageConverters().stream(), +						.filter(converter -> canReadResponse(responseClass, converter)), +						.flatMap(this::getSupportedMediaTypes), +						.distinct(), +						.sorted(MediaType.SPECIFICITY_COMPARATOR), +						.collect(Collectors.toList());, +, +		private boolean canReadResponse(@Nullable Class<?> responseClass, HttpMessageConverter<?> converter) {, +			if (responseClass != null) {, +				return converter.canRead(responseClass, null);, +			}, +			else if (converter instanceof GenericHttpMessageConverter) {, +				GenericHttpMessageConverter<?> genericConverter =, +						(GenericHttpMessageConverter<?>) converter;, +				return genericConverter, +						.canRead(this.responseType, null, null);, +			}, +			return false;, +		private Stream<MediaType> getSupportedMediaTypes(HttpMessageConverter<?> messageConverter) {, +			return messageConverter.getSupportedMediaTypes(), +					.stream(), +					.map(mediaType -> {, +						if (mediaType.getCharset() != null) {, +							return new MediaType(mediaType.getType(), mediaType.getSubtype());, +						return mediaType;, +					});, +++ b/spring-web/src/test/java/org/springframework/web/client/RestTemplateTests.java, +import java.util.Arrays;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.fail;, +import static org.mockito.BDDMockito.any;, +import static org.mockito.BDDMockito.eq;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.BDDMockito.mock;, +import static org.mockito.BDDMockito.verify;, +import static org.mockito.BDDMockito.willThrow;, +import static org.springframework.http.HttpMethod.DELETE;, +import static org.springframework.http.HttpMethod.GET;, +import static org.springframework.http.HttpMethod.HEAD;, +import static org.springframework.http.HttpMethod.OPTIONS;, +import static org.springframework.http.HttpMethod.PATCH;, +import static org.springframework.http.HttpMethod.POST;, +import static org.springframework.http.HttpMethod.PUT;, +import static org.springframework.http.MediaType.parseMediaType;, + * @author Brian Clozel, +		mockSentRequest(GET, "http://example.com/hotels/42/bookings/21");, +		mockResponseStatus(HttpStatus.OK);, +		template.execute("http://example.com/hotels/{hotel}/bookings/{booking}", GET,, +				null, null, "42", "21");, +		mockSentRequest(GET, "http://example.com/-foo");, +		mockResponseStatus(HttpStatus.OK);, +		mockSentRequest(GET, "http://example.com/hotels/42/bookings/42");, +		mockResponseStatus(HttpStatus.OK);, +		mockSentRequest(GET, "http://example.com/-foo");, +		mockResponseStatus(HttpStatus.OK);, +		mockSentRequest(GET, url);, +		mockResponseStatus(HttpStatus.OK);, +		String url = "http://example.com";, +		mockSentRequest(GET, url);, +		mockResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR);, +				.given(errorHandler).handleError(new URI(url), GET, response);]