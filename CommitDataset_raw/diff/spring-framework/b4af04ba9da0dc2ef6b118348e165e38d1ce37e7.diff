[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		if (result[0] >= max || result[1] >= max) {, +			throw new IllegalArgumentException("Range exceeds maximum (" + max + "): " + field);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		if (result[0] >= max || result[1] >= max) {, +			throw new IllegalArgumentException("Range exceeds maximum (" + max + "): " + field);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +	, +	@Override, +	public String toString() {, +		return sequenceGenerator.toString();, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		if (result[0] >= max || result[1] >= max) {, +			throw new IllegalArgumentException("Range exceeds maximum (" + max + "): " + field);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +	, +	@Override, +	public String toString() {, +		return sequenceGenerator.toString();, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, +	@Test(expected = IllegalArgumentException.class), +	public void testSecondInvalid() throws Exception {, +		new CronTrigger("77 * * * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testSecondRangeInvalid() throws Exception {, +		new CronTrigger("44-77 * * * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testMinuteInvalid() throws Exception {, +		new CronTrigger("* 77 * * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testMinuteRangeInvalid() throws Exception {, +		new CronTrigger("* 44-77 * * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testHourInvalid() throws Exception {, +		new CronTrigger("* * 27 * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testHourRangeInvalid() throws Exception {, +		new CronTrigger("* * 23-28 * * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testDayInvalid() throws Exception {, +		new CronTrigger("* * * 45 * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testDayRangeInvalid() throws Exception {, +		new CronTrigger("* * * 28-45 * *", timeZone);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void testMonthInvalid() throws Exception {, +		new CronTrigger("* * * * 11-13 *", timeZone);, +	}, +]