[+++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2018 the original author or authors., + * Can be applied to {@code java.util.Date}, {@code java.util.Calendar}, {@code Long} (for, + * millisecond timestamps) as well as JSR-310 <code>java.time</code> and Joda-Time value types., + * @see java.time.format.DateTimeFormatter, +++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2018 the original author or authors., + * Can be applied to {@code java.util.Date}, {@code java.util.Calendar}, {@code Long} (for, + * millisecond timestamps) as well as JSR-310 <code>java.time</code> and Joda-Time value types., + * @see java.time.format.DateTimeFormatter, +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + * Copyright 2002-2018 the original author or authors., + * <p>Supports formatting by style or custom pattern string. Can be applied, + * to any JDK {@code Number} type such as {@code Double} and {@code Long}., +++ b/spring-context/src/main/java/org/springframework/format/annotation/DateTimeFormat.java, + * Copyright 2002-2018 the original author or authors., + * Can be applied to {@code java.util.Date}, {@code java.util.Calendar}, {@code Long} (for, + * millisecond timestamps) as well as JSR-310 <code>java.time</code> and Joda-Time value types., + * @see java.time.format.DateTimeFormatter, +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + * Copyright 2002-2018 the original author or authors., + * <p>Supports formatting by style or custom pattern string. Can be applied, + * to any JDK {@code Number} type such as {@code Double} and {@code Long}., +++ b/src/docs/asciidoc/core/core-validation.adoc, +* Setting properties on beans is done by using `PropertyEditor` implementations., +  When you use `String` as the value of a property of some bean that you declare, +  in an XML file, Spring (if the setter of the corresponding property has a `Class`, +  parameter) uses `ClassEditor` to try to resolve the parameter to a `Class` object., +When you need to centralize the conversion logic for an entire class hierarchy, +(for example, when converting from `String` to `Enum` objects), you can implement, +the __range__ of classes you can convert to. Then implement `getConverter(Class<T>)`,, +Consider the `StringToEnumConverterFactory` as an example:, +When you require a sophisticated `Converter` implementation, consider using the, +`GenericConverter` interface. With a more flexible but less strongly typed signature, +than `Converter`, a `GenericConverter` supports converting between multiple source and, +target types. In addition, a `GenericConverter` makes available source and target field, +context that you can use when you implement your conversion logic. Such context lets a, +type conversion be driven by a field annotation or by generic information declared on a, +field signature. The following listing shows the interface definition of `GenericConverter`:, +conversion logic -- for example, for converting between a `java.util.Date` and a `Long`., +You can use the `Formatter` SPI when you work in a client environment (such as a web, +application) and need to parse and print localized field values. The `ConversionService`, +provides a unified type conversion API for both SPIs., +`PercentStyleFormatter` to format `Number` objects that use a `java.text.NumberFormat`., +package. You can use `@NumberFormat` to format `Number` fields such as `Double` and, +`Long`, and `@DateTimeFormat` to format `java.util.Date`, `java.util.Calendar`, `Long`, +(for millisecond timestamps) as well as JSR-310 `java.time` and Joda-Time value types., +most environments. You can programmatically or declaratively configure this variant, +as a Spring bean, e.g. by using `FormattingConversionServiceFactoryBean`. Because this, +implementation also implements `ConversionService`, you can directly configure it]