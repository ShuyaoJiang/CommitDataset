[+++ b/.gitignore, +/build, +buildSrc/build, +/spring-*/build, +, +++ b/.gitignore, +/build, +buildSrc/build, +/spring-*/build, +, +++ b/build.gradle, +	apply plugin: "test-source-set-dependencies", +configure(subprojects - project(":spring-build-src")) { subproject ->, +configure(allprojects) {, +		testCompile("junit:junit:${junitVersion}"), +		testCompile("org.hamcrest:hamcrest-all:1.3"), +project("spring-build-src") {, +	description = "Exposes gradle buildSrc for IDE support", +	apply plugin: "groovy", +		compile gradleApi(), +		groovy localGroovy(), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		optional("xmlunit:xmlunit:1.3"), +		testCompile(project(":spring-core").sourceSets.test.output), +++ b/.gitignore, +/build, +buildSrc/build, +/spring-*/build, +, +++ b/build.gradle, +	apply plugin: "test-source-set-dependencies", +configure(subprojects - project(":spring-build-src")) { subproject ->, +configure(allprojects) {, +		testCompile("junit:junit:${junitVersion}"), +		testCompile("org.hamcrest:hamcrest-all:1.3"), +project("spring-build-src") {, +	description = "Exposes gradle buildSrc for IDE support", +	apply plugin: "groovy", +		compile gradleApi(), +		groovy localGroovy(), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +		optional("xmlunit:xmlunit:1.3"), +		testCompile(project(":spring-core").sourceSets.test.output), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.build.gradle, +, +import org.gradle.api.*, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.artifacts.ProjectDependency;, +import org.gradle.api.artifacts.maven.Conf2ScopeMapping, +import org.gradle.api.plugins.MavenPlugin, +import org.gradle.api.tasks.*, +import org.gradle.plugins.ide.eclipse.EclipsePlugin, +import org.gradle.plugins.ide.eclipse.model.EclipseClasspath;, +import org.gradle.plugins.ide.idea.IdeaPlugin, +import org.gradle.api.invocation.*, +, +, +/**, + * Gradle plugin that allows projects to merged together. Primarily developed to, + * allow Spring to support multiple multiple incompatible versions of third-party, + * dependencies (for example Hibernate v3 and v4)., + * <p>, + * The 'merge' extension should be used to define how projects are merged, for example:, + * <pre>, + * configure(subprojects) {, + *     apply plugin: MergePlugin, + * }, + *, + * project("myproject") {, + * }, + *, + * project("myproject-extra") {, + *     merge.into = project("myproject"), + * }, + * </pre>, + * <p>, + * This plugin adds two new configurations:]