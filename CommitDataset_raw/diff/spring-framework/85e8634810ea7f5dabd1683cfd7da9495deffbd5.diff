[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, + * Copyright 2002-2018 the original author or authors., +	public void setup() {, +	public void getHandlerDirectMatch() {, +	public void getHandlerGlobMatch() {, +	public void getHandlerEmptyPathMatch() {, +	public void getHandlerBestMatch() {, +	public void getHandlerRequestMethodNotAllowed() {, +	public void getHandlerRequestMethodMatchFalsePositive() {, +	public void getHandlerMediaTypeNotSupported() {, +	public void getHandlerTestInvalidContentType() {, +	public void getHandlerTestMediaTypeNotAcceptable() {, +	public void getHandlerTestRequestParamMismatch() {, +	public void getHandlerHttpOptions() {, +	public void getHandlerProducibleMediaTypesAttribute() {, +	public void handleMatchUriTemplateVariables() {, +	public void handleMatchUriTemplateVariablesDecode() {, +	public void handleMatchBestMatchingPatternAttribute() {, +	public void handleMatchBestMatchingPatternAttributeNoPatternsDefined() {, +	public void handleMatchMatrixVariables() {, +	public void handleMatchMatrixVariablesDecoding() {, +		MockServerHttpRequest request = method(HttpMethod.GET, URI.create("/cars;mvar=a%2Fb")).build();, +		handleMatch(exchange, "/{cars}");, +		MultiValueMap<String, String> matrixVariables = getMatrixVariables(exchange, "cars");, +		assertEquals("cars", uriVariables.get("cars"));, +	private void testHttpMediaTypeNotSupportedException(String url) {, +	private void testHttpOptions(String requestURI, Set<HttpMethod> allowedMethods) {, +	private void testMediaTypeNotAcceptable(String url) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, + * Copyright 2002-2018 the original author or authors., +	public void setup() {, +	public void getHandlerDirectMatch() {, +	public void getHandlerGlobMatch() {, +	public void getHandlerEmptyPathMatch() {, +	public void getHandlerBestMatch() {, +	public void getHandlerRequestMethodNotAllowed() {, +	public void getHandlerRequestMethodMatchFalsePositive() {, +	public void getHandlerMediaTypeNotSupported() {, +	public void getHandlerTestInvalidContentType() {, +	public void getHandlerTestMediaTypeNotAcceptable() {, +	public void getHandlerTestRequestParamMismatch() {, +	public void getHandlerHttpOptions() {, +	public void getHandlerProducibleMediaTypesAttribute() {, +	public void handleMatchUriTemplateVariables() {, +	public void handleMatchUriTemplateVariablesDecode() {, +	public void handleMatchBestMatchingPatternAttribute() {, +	public void handleMatchBestMatchingPatternAttributeNoPatternsDefined() {, +	public void handleMatchMatrixVariables() {, +	public void handleMatchMatrixVariablesDecoding() {, +		MockServerHttpRequest request = method(HttpMethod.GET, URI.create("/cars;mvar=a%2Fb")).build();, +		handleMatch(exchange, "/{cars}");, +		MultiValueMap<String, String> matrixVariables = getMatrixVariables(exchange, "cars");, +		assertEquals("cars", uriVariables.get("cars"));, +	private void testHttpMediaTypeNotSupportedException(String url) {, +	private void testHttpOptions(String requestURI, Set<HttpMethod> allowedMethods) {, +	private void testMediaTypeNotAcceptable(String url) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables);, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, + * Copyright 2002-2018 the original author or authors., +	public void setup() {, +	public void getHandlerDirectMatch() {, +	public void getHandlerGlobMatch() {, +	public void getHandlerEmptyPathMatch() {, +	public void getHandlerBestMatch() {, +	public void getHandlerRequestMethodNotAllowed() {, +	public void getHandlerRequestMethodMatchFalsePositive() {, +	public void getHandlerMediaTypeNotSupported() {, +	public void getHandlerTestInvalidContentType() {, +	public void getHandlerTestMediaTypeNotAcceptable() {, +	public void getHandlerTestRequestParamMismatch() {, +	public void getHandlerHttpOptions() {, +	public void getHandlerProducibleMediaTypesAttribute() {, +	public void handleMatchUriTemplateVariables() {, +	public void handleMatchUriTemplateVariablesDecode() {, +	public void handleMatchBestMatchingPatternAttribute() {, +	public void handleMatchBestMatchingPatternAttributeNoPatternsDefined() {, +	public void handleMatchMatrixVariables() {, +	public void handleMatchMatrixVariablesDecoding() {, +		MockServerHttpRequest request = method(HttpMethod.GET, URI.create("/cars;mvar=a%2Fb")).build();, +		handleMatch(exchange, "/{cars}");, +		MultiValueMap<String, String> matrixVariables = getMatrixVariables(exchange, "cars");, +		assertEquals("cars", uriVariables.get("cars"));, +	private void testHttpMediaTypeNotSupportedException(String url) {, +	private void testHttpOptions(String requestURI, Set<HttpMethod> allowedMethods) {, +	private void testMediaTypeNotAcceptable(String url) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables);, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables);, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMappingTests.java, +	@Test // SPR-10140, SPR-16867, +		handleMatch(request, "/{cars}", "/cars;mvar=a%2Fb");, +		MultiValueMap<String, String> matrixVariables = getMatrixVariables(request, "cars");, +		assertEquals("cars", uriVariables.get("cars"));]