[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.ConversionNotSupportedException;, +import org.springframework.beans.TypeMismatchException;, +			try {, +			catch (ConversionNotSupportedException ex) {, +				throw new MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(),, +						ex.getCause(), namedValueInfo.name, parameter);, +			}, +			catch (TypeMismatchException ex) {, +				throw new MethodArgumentTypeMismatchException(arg, ex.getRequiredType(),, +						ex.getCause(), namedValueInfo.name, parameter);, +, +			}, +		}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.ConversionNotSupportedException;, +import org.springframework.beans.TypeMismatchException;, +			try {, +			catch (ConversionNotSupportedException ex) {, +				throw new MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(),, +						ex.getCause(), namedValueInfo.name, parameter);, +			}, +			catch (TypeMismatchException ex) {, +				throw new MethodArgumentTypeMismatchException(arg, ex.getRequiredType(),, +						ex.getCause(), namedValueInfo.name, parameter);, +, +			}, +		}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MethodArgumentConversionNotSupportedException.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.method.annotation;, +, +import org.springframework.beans.ConversionNotSupportedException;, +import org.springframework.core.MethodParameter;, +, +/**, + * A ConversionNotSupportedException raised while resolving a method argument., + * Provides access to the target {@link org.springframework.core.MethodParameter, + * MethodParameter}., + *, + * @author Rossen Stoyanchev, + * @since 4.2, + */, +@SuppressWarnings("serial"), +public class MethodArgumentConversionNotSupportedException extends ConversionNotSupportedException {, +, +	private final String name;, +, +	private final MethodParameter parameter;, +, +, +	public MethodArgumentConversionNotSupportedException(Object value, Class<?> requiredType,, +			Throwable cause, String name, MethodParameter param) {, +, +		super(value, requiredType, cause);, +		this.name = name;, +		this.parameter = param;, +	}, +, +, +	/**, +	 * Return the name of the method argument., +	 */, +	public String getName() {, +		return this.name;, +	}, +, +	/**, +	 * Return the target method parameter., +	 */, +	public MethodParameter getParameter() {, +		return this.parameter;, +	}, +, +}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.ConversionNotSupportedException;, +import org.springframework.beans.TypeMismatchException;, +			try {, +			catch (ConversionNotSupportedException ex) {, +				throw new MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(),, +						ex.getCause(), namedValueInfo.name, parameter);, +			}]