[+++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, +import java.util.Arrays;, +import org.springframework.util.StringUtils;, +, + * <p>As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead, + * of plain {@link PropertySource}, exposing {@link #getPropertyNames()} based on the, + * accumulated property names from all contained sources (as far as possible)., + *, + * @author Juergen Hoeller, +public class CompositePropertySource extends EnumerablePropertySource<Object> {, +	@Override, +	public boolean containsProperty(String name) {, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource.containsProperty(name)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	@Override, +	public String[] getPropertyNames() {, +		Set<String> names = new LinkedHashSet<String>();, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource instanceof EnumerablePropertySource) {, +				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));, +			}, +		}, +		return StringUtils.toStringArray(names);, +	}, +, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, +import java.util.Arrays;, +import org.springframework.util.StringUtils;, +, + * <p>As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead, + * of plain {@link PropertySource}, exposing {@link #getPropertyNames()} based on the, + * accumulated property names from all contained sources (as far as possible)., + *, + * @author Juergen Hoeller, +public class CompositePropertySource extends EnumerablePropertySource<Object> {, +	@Override, +	public boolean containsProperty(String name) {, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource.containsProperty(name)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	@Override, +	public String[] getPropertyNames() {, +		Set<String> names = new LinkedHashSet<String>();, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource instanceof EnumerablePropertySource) {, +				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));, +			}, +		}, +		return StringUtils.toStringArray(names);, +	}, +, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +	@SuppressWarnings("unchecked"), +	protected EnumerablePropertySource(String name) {, +		super(name);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, +import java.util.Arrays;, +import org.springframework.util.StringUtils;, +, + * <p>As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead, + * of plain {@link PropertySource}, exposing {@link #getPropertyNames()} based on the, + * accumulated property names from all contained sources (as far as possible)., + *, + * @author Juergen Hoeller, +public class CompositePropertySource extends EnumerablePropertySource<Object> {, +	@Override, +	public boolean containsProperty(String name) {, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource.containsProperty(name)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	@Override, +	public String[] getPropertyNames() {, +		Set<String> names = new LinkedHashSet<String>();, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (propertySource instanceof EnumerablePropertySource) {, +				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));, +			}, +		}]