[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a new type descriptor for a bean property., +	 * Use this constructor when a target conversion point is a property on a Java class., +	 * @param beanClass the class that declares the property, +	 * @param property the property descriptor, +	 * If the object is a collection or map, this factory method will derive nested element or key/value types by introspecting the collection or map., +	 * The introspection algorithm derives nested element or key/value types by resolving the "common element type" across the collection or map., +	 * For example, if a Collection contained all java.lang.Integer elements, its element type would be java.lang.Integer., +	 * If a Collection contained several distinct number types all extending from java.lang.Number, its element type would be java.lang.Number., +	 * If a Collection contained a String and a java.util.Map element, its element type would be java.io.Serializable., +	 * Creates a type descriptor for a nested type declared within the method parameter., +	 * @param methodParameter the method parameter with a nestingLevel of 1, +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the method parameter., +	 * Creates a type descriptor for a nested type declared within the field., +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the field., +	 * Creates a type descriptor for a nested type declared within the property., +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the property., +	 * The annotations associated with this type descriptor, if any., +	 * @return the annotations, or an empty array if none., +	 * Obtain the annotation associated with this type descriptor of the specified type., +	 * @return the annotation, or null if no such annotation exists on this type descriptor., +	 * Is this type an array type?, +	 */, +	public boolean isArray() {, +		return getType().isArray();, +	}, +, +	/**, +	 * If this type is a {@link Collection} or array, returns the underlying element type., +	 * Returns Object.class if this type is a collection and the element type was not explicitly declared., +	 * The collection or array element type as a type descriptor., +	 * Returns {@link TypeDescriptor#NULL} if this type is not a collection or an array., +	 * Returns TypeDescriptor.valueOf(Object.class) if this type is a collection and the element type is not explicitly declared., +	 * If this type is a {@link Map}, returns the underlying key type., +	 * Returns Object.class if this type is a map and its key type was not explicitly declared., +	 * The map key type as a type descriptor., +	 * Returns {@link TypeDescriptor#NULL} if this type is not a map., +	 * Returns TypeDescriptor.valueOf(Object.class) if this type is a map and the key type is not explicitly declared., +	 * If this type is a {@link Map}, returns the underlying value type., +	 * Returns Object.class if this type is a map and its value type was not explicitly declared., +	 * The map value type as a type descriptor., +	 * Returns {@link TypeDescriptor#NULL} if this type is not a map., +	 * Returns TypeDescriptor.valueOf(Object.class) if this type is a map and the value type is not explicitly declared.]