[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2015 the original author or authors., + * Base class for {@code ContentNegotiationStrategy} implementations with the, + * steps to resolve a request to media types., + *, + * <p>First a key (e.g. "json", "pdf") must be extracted from the request (e.g., + * file extension, query param). The key must then be resolved to media type(s), + * through the base class {@link MappingMediaTypeFileExtensionResolver} which, + * stores such mappings., + *, + * <p>The method {@link #handleNoMatch} allow sub-classes to plug in additional, + * ways of looking up media types (e.g. through the Java Activation framework,, + * or {@link javax.servlet.ServletContext#getMimeType}. Media types resolved, + * via base classes are then added to the base class, + * {@link MappingMediaTypeFileExtensionResolver}, i.e. cached for new lookups., +public abstract class AbstractMappingContentNegotiationStrategy, +		extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy {, +	 * Create an instance with the given map of file extensions and media types., +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest), +			throws HttpMediaTypeNotAcceptableException {, +, +	 * Extract a key from the request to use to look up media types., +	 * @return the lookup key or {@code null}., +	 * Override to provide handling when a key is successfully resolved via, +	 * {@link #lookupMediaType}., +	protected void handleMatch(String key, MediaType mediaType) {, +	 * Override to provide handling when a key is not resolved via., +	 * {@link #lookupMediaType}. Sub-classes can take further steps to, +	 * determine the media type(s). If a MediaType is returned from, +	 * this method it will be added to the cache in the base class., +	protected MediaType handleNoMatch(NativeWebRequest request, String key), +			throws HttpMediaTypeNotAcceptableException {, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2015 the original author or authors., + * Base class for {@code ContentNegotiationStrategy} implementations with the, + * steps to resolve a request to media types., + *, + * <p>First a key (e.g. "json", "pdf") must be extracted from the request (e.g., + * file extension, query param). The key must then be resolved to media type(s), + * through the base class {@link MappingMediaTypeFileExtensionResolver} which, + * stores such mappings., + *, + * <p>The method {@link #handleNoMatch} allow sub-classes to plug in additional, + * ways of looking up media types (e.g. through the Java Activation framework,, + * or {@link javax.servlet.ServletContext#getMimeType}. Media types resolved, + * via base classes are then added to the base class, + * {@link MappingMediaTypeFileExtensionResolver}, i.e. cached for new lookups., +public abstract class AbstractMappingContentNegotiationStrategy, +		extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy {, +	 * Create an instance with the given map of file extensions and media types., +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest), +			throws HttpMediaTypeNotAcceptableException {, +, +	 * Extract a key from the request to use to look up media types., +	 * @return the lookup key or {@code null}., +	 * Override to provide handling when a key is successfully resolved via, +	 * {@link #lookupMediaType}., +	protected void handleMatch(String key, MediaType mediaType) {, +	 * Override to provide handling when a key is not resolved via., +	 * {@link #lookupMediaType}. Sub-classes can take further steps to, +	 * determine the media type(s). If a MediaType is returned from, +	 * this method it will be added to the cache in the base class., +	protected MediaType handleNoMatch(NativeWebRequest request, String key), +			throws HttpMediaTypeNotAcceptableException {, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * Copyright 2002-2015 the original author or authors., + * Central class to determine requested {@linkplain MediaType media types}, + * for a request. This is done by delegating to a list of configured, + * {@code ContentNegotiationStrategy} instances., + * <p>Also provides methods to look up file extensions for a media type., + * This is done by delegating to the list of configured, + * {@code MediaTypeFileExtensionResolver} instances., +public class ContentNegotiationManager implements ContentNegotiationStrategy,, +		MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL =, +			Collections.<MediaType>singletonList(MediaType.ALL);, +, +	private final List<ContentNegotiationStrategy> strategies =, +	private final Set<MediaTypeFileExtensionResolver> resolvers =, +	 * Create an instance with the given list of, +	 * {@code ContentNegotiationStrategy} strategies each of which may also be, +	 * an instance of {@code MediaTypeFileExtensionResolver}., +	 * @param strategies the strategies to use, +		this(Arrays.asList(strategies));, +	 * A collection-based alternative to, +	 * {@link #ContentNegotiationManager(ContentNegotiationStrategy...)}., +	 * @param strategies the strategies to use, +		this.strategies.addAll(strategies);, +		for (ContentNegotiationStrategy strategy : this.strategies) {, +				this.resolvers.add((MediaTypeFileExtensionResolver) strategy);, +	 * Register more {@code MediaTypeFileExtensionResolver} instances in addition, +	 * to those detected at construction., +	 * @param resolvers the resolvers to add, +		this.resolvers.addAll(Arrays.asList(resolvers));, +	public List<MediaType> resolveMediaTypes(NativeWebRequest request), +			throws HttpMediaTypeNotAcceptableException {]