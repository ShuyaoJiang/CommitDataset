[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +				// Bean name or resolved handler?, +				if (rawHandler instanceof String) {, +					String handlerName = (String) rawHandler;, +					rawHandler = getApplicationContext().getBean(handlerName);, +				}, +			// Bean name or resolved handler?, +			if (handler instanceof String) {, +				String handlerName = (String) handler;, +				handler = getApplicationContext().getBean(handlerName);, +			}, +			// Bean name or resolved handler?, +			if (handler instanceof String) {, +				String handlerName = (String) handler;, +				handler = getApplicationContext().getBean(handlerName);, +			}, +	public final Map<String, Object> getHandlerMap() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +				// Bean name or resolved handler?, +				if (rawHandler instanceof String) {, +					String handlerName = (String) rawHandler;, +					rawHandler = getApplicationContext().getBean(handlerName);, +				}, +			// Bean name or resolved handler?, +			if (handler instanceof String) {, +				String handlerName = (String) handler;, +				handler = getApplicationContext().getBean(handlerName);, +			}, +			// Bean name or resolved handler?, +			if (handler instanceof String) {, +				String handlerName = (String) handler;, +				handler = getApplicationContext().getBean(handlerName);, +			}, +	public final Map<String, Object> getHandlerMap() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +import org.springframework.web.bind.ServletRequestBindingException;, +		RequestMapping mapping = this.cachedMappings.get(handler.getClass());, +			mapping = AnnotationUtils.findAnnotation(handler.getClass(), RequestMapping.class);, +, +		String[] mappedHeaders = mapping.headers();, +		if (!ServletAnnotationMappingUtils.checkHeaders(mappedHeaders, request)) {, +			throw new ServletRequestBindingException("Header conditions \"" +, +					StringUtils.arrayToDelimitedString(mappedHeaders, ", ") +, +					"\" not met for actual request");, +		}]