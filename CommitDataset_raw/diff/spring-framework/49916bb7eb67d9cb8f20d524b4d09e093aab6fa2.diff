[+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ErrorHandler;, + * but adds minimal overhead. Specify an alternative task executor to have, +	private ErrorHandler errorHandler;, +, +	 * Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor}), +	 * to invoke each listener with., +	 * <p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},, +	 * executing all listeners synchronously in the calling thread., +	 * <p>Consider specifying an asynchronous task executor here to not block the, +	 * Return the current task executor for this multicaster., +	/**, +	 * Set the {@link ErrorHandler} to invoke in case of an exception thrown, +	 * from a listener., +	 * <p>Default is none, with a listener exception stopping the current, +	 * multicast and getting propagated to the publisher of the current event., +	 * In case of a {@link #setTaskExecutor task executor} specified, each, +	 * individual listener exception will get propagated to the executor but, +	 * won't necessarily stop execution of other listeners., +	 * <p>Consider setting an {@link ErrorHandler} implementation that catches, +	 * and logs exceptions (a la, +	 * {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER}), +	 * or an implementation that logs exceptions while nevertheless propagating them, +	 * ({@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})., +	 * @since 4.1, +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		this.errorHandler = errorHandler;, +	}, +, +	/**, +	 * Return the current error handler for this multicaster., +	 * @since 4.1, +	 */, +	protected ErrorHandler getErrorHandler() {, +		return this.errorHandler;, +	}, +, +		for (final ApplicationListener<?> listener : getApplicationListeners(event)) {, +						invokeListener(listener, event);, +				invokeListener(listener, event);, +			}, +		}, +	}, +, +	/**, +	 * Invoke the given listener with the given event., +	 * @param listener the ApplicationListener to invoke, +	 * @param event the current event to propagate, +	 * @since 4.1, +	 */, +	@SuppressWarnings({"unchecked", "rawtypes"}), +	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {, +		ErrorHandler errorHandler = getErrorHandler();, +		if (errorHandler != null) {, +			try {, +			catch (Throwable err) {, +				errorHandler.handleError(err);, +			}, +		}, +		else {, +			listener.onApplicationEvent(event);, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ErrorHandler;, + * but adds minimal overhead. Specify an alternative task executor to have, +	private ErrorHandler errorHandler;, +, +	 * Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor}), +	 * to invoke each listener with., +	 * <p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},, +	 * executing all listeners synchronously in the calling thread., +	 * <p>Consider specifying an asynchronous task executor here to not block the, +	 * Return the current task executor for this multicaster., +	/**, +	 * Set the {@link ErrorHandler} to invoke in case of an exception thrown, +	 * from a listener., +	 * <p>Default is none, with a listener exception stopping the current, +	 * multicast and getting propagated to the publisher of the current event., +	 * In case of a {@link #setTaskExecutor task executor} specified, each, +	 * individual listener exception will get propagated to the executor but, +	 * won't necessarily stop execution of other listeners., +	 * <p>Consider setting an {@link ErrorHandler} implementation that catches, +	 * and logs exceptions (a la, +	 * {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER}), +	 * or an implementation that logs exceptions while nevertheless propagating them, +	 * ({@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})., +	 * @since 4.1, +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		this.errorHandler = errorHandler;, +	}, +, +	/**, +	 * Return the current error handler for this multicaster., +	 * @since 4.1, +	 */, +	protected ErrorHandler getErrorHandler() {, +		return this.errorHandler;]