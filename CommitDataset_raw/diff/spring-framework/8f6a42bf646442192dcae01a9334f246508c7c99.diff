[+++ b/build.properties, +test.vm.args=-Xmx1024M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError, +++ b/build.properties, +test.vm.args=-Xmx1024M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, +++ b/build.properties, +test.vm.args=-Xmx1024M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedAttribute.class);, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedMetric.class);, +		Annotation ann = AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedOperation.class);, +		ManagedOperationParameters params = AnnotationUtils.findAnnotation(method, ManagedOperationParameters.class);, +++ b/build.properties, +test.vm.args=-Xmx1024M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedAttribute.class);, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedMetric.class);, +		Annotation ann = AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedOperation.class);, +		ManagedOperationParameters params = AnnotationUtils.findAnnotation(method, ManagedOperationParameters.class);, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +import javax.management.modelmbean.ModelMBeanInfo;, +import javax.management.modelmbean.ModelMBeanAttributeInfo;, +import javax.management.modelmbean.ModelMBeanOperationInfo;, +, +/** @author Rob Harrop */, +	public void testAttributeFromInterface() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanAttributeInfo attr = inf.getAttribute("Colour");, +		assertTrue("The name attribute should be writable", attr.isWritable());, +		assertTrue("The name attribute should be readable", attr.isReadable());, +	}, +, +	public void testOperationFromInterface() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("fromInterface");, +		assertNotNull(op);, +	}, +, +		return new AnnotationTestSubBean();, +	@Override, +	protected int getExpectedAttributeCount() {, +		return super.getExpectedAttributeCount() + 1;, +	}, +, +	@Override, +	protected int getExpectedOperationCount() {, +		return super.getExpectedOperationCount() + 3;, +	}, +++ b/build.properties, +test.vm.args=-Xmx1024M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedAttribute.class);, +				AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedMetric.class);, +		Annotation ann = AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedOperation.class);, +		ManagedOperationParameters params = AnnotationUtils.findAnnotation(method, ManagedOperationParameters.class);, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +import javax.management.modelmbean.ModelMBeanInfo;, +import javax.management.modelmbean.ModelMBeanAttributeInfo;, +import javax.management.modelmbean.ModelMBeanOperationInfo;, +, +/** @author Rob Harrop */, +	public void testAttributeFromInterface() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanAttributeInfo attr = inf.getAttribute("Colour");, +		assertTrue("The name attribute should be writable", attr.isWritable());, +		assertTrue("The name attribute should be readable", attr.isReadable());, +	}, +, +	public void testOperationFromInterface() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("fromInterface");, +		assertNotNull(op);, +	}, +, +		return new AnnotationTestSubBean();, +	@Override, +	protected int getExpectedAttributeCount() {, +		return super.getExpectedAttributeCount() + 1;, +	}, +, +	@Override, +	protected int getExpectedOperationCount() {, +		return super.getExpectedOperationCount() + 3;, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestSubBean.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]