[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		// Candidate constructors for autowiring?, +		// Preferred constructors for default construction?, +		ctors = mbd.getPreferredConstructors();, +		if (ctors != null) {, +			return autowireConstructor(beanName, mbd, ctors, null);, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		// Candidate constructors for autowiring?, +		// Preferred constructors for default construction?, +		ctors = mbd.getPreferredConstructors();, +		if (ctors != null) {, +			return autowireConstructor(beanName, mbd, ctors, null);, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import java.lang.reflect.Constructor;, +	 * Determine preferred constructors to use for default construction, if any., +	 * Constructor arguments will be autowired if necessary., +	 * @return one or more preferred constructors, or {@code null} if none, +	 * (in which case the regular no-arg default constructor will be called), +	 * @since 5.1, +	 */, +	@Nullable, +	public Constructor<?>[] getPreferredConstructors() {, +		return null;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		// Candidate constructors for autowiring?, +		// Preferred constructors for default construction?, +		ctors = mbd.getPreferredConstructors();, +		if (ctors != null) {, +			return autowireConstructor(beanName, mbd, ctors, null);, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import java.lang.reflect.Constructor;, +	 * Determine preferred constructors to use for default construction, if any., +	 * Constructor arguments will be autowired if necessary., +	 * @return one or more preferred constructors, or {@code null} if none, +	 * (in which case the regular no-arg default constructor will be called), +	 * @since 5.1, +	 */, +	@Nullable, +	public Constructor<?>[] getPreferredConstructors() {, +		return null;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	 * @param beanClass the class of the bean (resolving a public constructor, +	 * to be autowired, possibly simply the default constructor), +	 * @param customizers one or more callbacks for customizing the factory's, +	 * {@link BeanDefinition}, e.g. setting a lazy-init or primary flag, +	 * @param beanClass the class of the bean (resolving a public constructor, +	 * to be autowired, possibly simply the default constructor), +	public final <T> void registerBean(, +			@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers) {, +, +	 * @param customizers one or more callbacks for customizing the factory's, +	 * {@link BeanDefinition}, e.g. setting a lazy-init or primary flag, +	public final <T> void registerBean(, +			Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {, +, +	 * @param beanClass the class of the bean, +	 * @param supplier a callback for creating an instance of the bean (in case, +	 * of {@code null}, resolving a public constructor to be autowired instead), +	 * @param customizers one or more callbacks for customizing the factory's, +	 * {@link BeanDefinition}, e.g. setting a lazy-init or primary flag, +	public <T> void registerBean(@Nullable String beanName, Class<T> beanClass,, +			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {, +		ClassDerivedBeanDefinition beanDefinition = new ClassDerivedBeanDefinition(beanClass);, +		if (supplier != null) {, +			beanDefinition.setInstanceSupplier(supplier);, +		}, +		for (BeanDefinitionCustomizer customizer : customizers) {, +			customizer.customize(beanDefinition);, +		}, +, +	/**, +	 * {@link RootBeanDefinition} marker subclass for {@code #registerBean} based, +	 * registrations with flexible autowiring for public constructors., +	 */, +	@SuppressWarnings("serial"), +	private static class ClassDerivedBeanDefinition extends RootBeanDefinition {, +, +		public ClassDerivedBeanDefinition(Class<?> beanClass) {, +			super(beanClass);, +		}, +, +		public ClassDerivedBeanDefinition(ClassDerivedBeanDefinition original) {, +			super(original);, +		}]