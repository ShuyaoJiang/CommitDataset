[+++ b/src/docs/asciidoc/web/webflux.adoc, +Unlike the Servlet API "request parameter" concept that conflates query parameters, form, +`required` flag to `false` or by declaring the argument with a `java.util.Optional`, +When an `@RequestParam` annotation is declared on a `Map<String, String>` or, +Note that use of `@RequestParam` is optional -- for example, to set its attributes. By, +default any argument that is a simple value type, as determined by, +As is the case for many return values, `ResponseEntity` can be wrapped by a reactive type, +such as `Mono`. In case of a `Mono<ResponseEntity>` return type, an empty `Mono` will be, +so you don't need to chain your `Mono` with a `switchIfEmpty` / `defaultIfEmpty` for, +simple HTTP 404 responses. Here's an example of this:, +++ b/src/docs/asciidoc/web/webflux.adoc, +Unlike the Servlet API "request parameter" concept that conflates query parameters, form, +`required` flag to `false` or by declaring the argument with a `java.util.Optional`, +When an `@RequestParam` annotation is declared on a `Map<String, String>` or, +Note that use of `@RequestParam` is optional -- for example, to set its attributes. By, +default any argument that is a simple value type, as determined by, +As is the case for many return values, `ResponseEntity` can be wrapped by a reactive type, +such as `Mono`. In case of a `Mono<ResponseEntity>` return type, an empty `Mono` will be, +so you don't need to chain your `Mono` with a `switchIfEmpty` / `defaultIfEmpty` for, +simple HTTP 404 responses. Here's an example of this:, +++ b/src/docs/asciidoc/web/webmvc.adoc, +case will be automatically converted to a `ResponseEntity` with an empty body and an HTTP, +404 status, so you don't need to chain your optional with an `orElse` / `orElseGet` for, +simple HTTP 404 responses. Here's an example of this:]