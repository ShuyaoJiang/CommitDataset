[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +import java.util.function.Consumer;, +import org.springframework.lang.Nullable;, +public class JettyClientHttpConnector implements ClientHttpConnector {, +	 * Constructor with an {@link JettyResourceFactory} that will manage shared resources., +	 * @param resourceFactory the {@link JettyResourceFactory} to use, +	 * @param customizer the lambda used to customize the {@link HttpClient}, +	 */, +	public JettyClientHttpConnector(JettyResourceFactory resourceFactory, @Nullable Consumer<HttpClient> customizer) {, +		HttpClient httpClient = new HttpClient();, +		httpClient.setExecutor(resourceFactory.getExecutor());, +		httpClient.setByteBufferPool(resourceFactory.getByteBufferPool());, +		httpClient.setScheduler(resourceFactory.getScheduler());, +		if (customizer != null) {, +			customizer.accept(httpClient);, +		}, +		this.httpClient = httpClient;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +import java.util.function.Consumer;, +import org.springframework.lang.Nullable;, +public class JettyClientHttpConnector implements ClientHttpConnector {, +	 * Constructor with an {@link JettyResourceFactory} that will manage shared resources., +	 * @param resourceFactory the {@link JettyResourceFactory} to use, +	 * @param customizer the lambda used to customize the {@link HttpClient}, +	 */, +	public JettyClientHttpConnector(JettyResourceFactory resourceFactory, @Nullable Consumer<HttpClient> customizer) {, +		HttpClient httpClient = new HttpClient();, +		httpClient.setExecutor(resourceFactory.getExecutor());, +		httpClient.setByteBufferPool(resourceFactory.getByteBufferPool());, +		httpClient.setScheduler(resourceFactory.getScheduler());, +		if (customizer != null) {, +			customizer.accept(httpClient);, +		}, +		this.httpClient = httpClient;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyResourceFactory.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.client.reactive;, +, +, +import java.nio.ByteBuffer;, +import java.util.concurrent.Executor;, +, +import org.eclipse.jetty.io.ByteBufferPool;, +import org.eclipse.jetty.io.MappedByteBufferPool;, +import org.eclipse.jetty.util.ProcessorUtils;, +import org.eclipse.jetty.util.component.ContainerLifeCycle;, +import org.eclipse.jetty.util.thread.QueuedThreadPool;, +import org.eclipse.jetty.util.thread.ScheduledExecutorScheduler;, +import org.eclipse.jetty.util.thread.Scheduler;, +import org.eclipse.jetty.util.thread.ThreadPool;, +, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +, +/**, + * Factory to manage Jetty resources, i.e. {@link Executor}, {@link ByteBufferPool} and, + * {@link Scheduler}, within the lifecycle of a Spring {@code ApplicationContext}., + *, + * <p>This factory implements {@link InitializingBean} and {@link DisposableBean}, + * and is expected typically to be declared as a Spring-managed bean., + *, + * @author Sebastien Deleuze, + * @since 5.1, + */, +public class JettyResourceFactory implements InitializingBean, DisposableBean {, +, +	@Nullable, +	private Executor executor;, +, +	@Nullable, +	private ByteBufferPool byteBufferPool;, +, +	@Nullable, +	private Scheduler scheduler;, +, +	private String threadPrefix = "jetty-http";, +]