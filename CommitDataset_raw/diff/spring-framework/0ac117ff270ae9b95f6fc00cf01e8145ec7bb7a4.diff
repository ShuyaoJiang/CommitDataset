[+++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java, +	 * <p>Must return one of the {@code ISOLATION_XXX} constants defined on, +	 * {@link TransactionDefinition this interface}. Those constants are designed, +	 * to match the values of the same constants on {@link java.sql.Connection}., +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions. Consider switching the "validateExistingTransactions" flag to, +	 * "true" on your transaction manager if you'd like isolation level declarations, +	 * to get rejected when participating in an existing transaction with a different, +	 * isolation level., +	 * @see #ISOLATION_DEFAULT, +	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction, +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions., +	 * <p>The read-only flag applies to any transaction context, whether backed, +	 * by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/, +	 * {@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at, +	 * the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,, +	 * the flag will only apply to managed resources within the application,, +	 * such as a Hibernate {@code Session}., +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java, +	 * <p>Must return one of the {@code ISOLATION_XXX} constants defined on, +	 * {@link TransactionDefinition this interface}. Those constants are designed, +	 * to match the values of the same constants on {@link java.sql.Connection}., +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions. Consider switching the "validateExistingTransactions" flag to, +	 * "true" on your transaction manager if you'd like isolation level declarations, +	 * to get rejected when participating in an existing transaction with a different, +	 * isolation level., +	 * @see #ISOLATION_DEFAULT, +	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction, +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions., +	 * <p>The read-only flag applies to any transaction context, whether backed, +	 * by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/, +	 * {@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at, +	 * the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,, +	 * the flag will only apply to managed resources within the application,, +	 * such as a Hibernate {@code Session}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2018 the original author or authors., +	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or, +	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started, +	 * transactions. Consider switching the "validateExistingTransactions" flag to, +	 * "true" on your transaction manager if you'd like isolation level declarations, +	 * to get rejected when participating in an existing transaction with a different, +	 * isolation level., +	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction, +	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or, +	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started, +	 * transactions., +	 * A boolean flag that can be set to {@code true} if the transaction is, +	 * effectively read-only, allowing for corresponding optimizations at runtime., +	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly(), +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java, +	 * <p>Must return one of the {@code ISOLATION_XXX} constants defined on, +	 * {@link TransactionDefinition this interface}. Those constants are designed, +	 * to match the values of the same constants on {@link java.sql.Connection}., +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions. Consider switching the "validateExistingTransactions" flag to, +	 * "true" on your transaction manager if you'd like isolation level declarations, +	 * to get rejected when participating in an existing transaction with a different, +	 * isolation level., +	 * @see #ISOLATION_DEFAULT, +	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction, +	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or, +	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started, +	 * transactions., +	 * <p>The read-only flag applies to any transaction context, whether backed, +	 * by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/, +	 * {@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at, +	 * the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,, +	 * the flag will only apply to managed resources within the application,, +	 * such as a Hibernate {@code Session}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2018 the original author or authors., +	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or, +	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started, +	 * transactions. Consider switching the "validateExistingTransactions" flag to, +	 * "true" on your transaction manager if you'd like isolation level declarations, +	 * to get rejected when participating in an existing transaction with a different, +	 * isolation level., +	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction, +	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or, +	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started, +	 * transactions., +	 * A boolean flag that can be set to {@code true} if the transaction is, +	 * effectively read-only, allowing for corresponding optimizations at runtime., +	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly(), +++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java, + * Copyright 2002-2018 the original author or authors., +	 * @since 2.5.1, +	 * @since 2.5.1, +	 * @since 2.0, +	 * @since 2.0, +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java]