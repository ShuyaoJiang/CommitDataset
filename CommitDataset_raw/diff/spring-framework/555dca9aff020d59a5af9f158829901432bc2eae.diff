[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, + * Copyright 2002-2019 the original author or authors., +	public Method resolveMethod(Throwable exception) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, + * Copyright 2002-2019 the original author or authors., +	public Method resolveMethod(Throwable exception) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/AbstractMethodMessageHandler.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	private Predicate<Class<?>> handlerPredicate;, +, +	private final InvocableHelper invocableHelper = new InvocableHelper(this::createExceptionMethodResolverFor);, +	/**, +	 * Configure a predicate to decide if which beans in the Spring context, +	 * should be checked to see if they have message handling methods., +	 * <p>By default this is not set and sub-classes should configure it in, +	 * order to enable auto-detection of message handling methods., +	 */, +	public void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate) {, +		this.handlerPredicate = handlerPredicate;, +	}, +	/**, +	 * Return the {@link #setHandlerPredicate configured} handler predicate., +	 */, +	@Nullable, +	public Predicate<Class<?>> getHandlerPredicate() {, +		return this.handlerPredicate;, +	}, +		this.invocableHelper.setReactiveAdapterRegistry(registry);, +		return this.invocableHelper.getReactiveAdapterRegistry();, +		this.invocableHelper.registerExceptionHandlerAdvice(bean, resolver);, +		this.invocableHelper.addArgumentResolvers(resolvers);, +		this.invocableHelper.addReturnValueHandlers(handlers);, +		return this.invocableHelper.handleMessage(handlerMethod, message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractExceptionHandlerMethodResolver.java, + * Copyright 2002-2019 the original author or authors., +	public Method resolveMethod(Throwable exception) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/AbstractMethodMessageHandler.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	private Predicate<Class<?>> handlerPredicate;, +, +	private final InvocableHelper invocableHelper = new InvocableHelper(this::createExceptionMethodResolverFor);, +	/**, +	 * Configure a predicate to decide if which beans in the Spring context, +	 * should be checked to see if they have message handling methods., +	 * <p>By default this is not set and sub-classes should configure it in, +	 * order to enable auto-detection of message handling methods., +	 */, +	public void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate) {, +		this.handlerPredicate = handlerPredicate;, +	}, +	/**, +	 * Return the {@link #setHandlerPredicate configured} handler predicate., +	 */, +	@Nullable, +	public Predicate<Class<?>> getHandlerPredicate() {, +		return this.handlerPredicate;, +	}, +		this.invocableHelper.setReactiveAdapterRegistry(registry);, +		return this.invocableHelper.getReactiveAdapterRegistry();, +		this.invocableHelper.registerExceptionHandlerAdvice(bean, resolver);, +		this.invocableHelper.addArgumentResolvers(resolvers);, +		this.invocableHelper.addReturnValueHandlers(handlers);, +		return this.invocableHelper.handleMessage(handlerMethod, message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHelper.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.messaging.handler.invocation.reactive;, +, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.function.Function;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.lang.Nullable;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.handler.HandlerMethod;, +import org.springframework.messaging.handler.MessagingAdviceBean;]