[+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +				nettyMethod, this.uri.toString(), this.body.buffer());, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +				nettyMethod, this.uri.toString(), this.body.buffer());, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +	@Test, +	public void queryParameters() throws Exception {, +		URI uri = new URI(baseUrl + "/params?param1=value&param2=value1&param2=value2");, +		ClientHttpRequest request = factory.createRequest(uri, HttpMethod.GET);, +, +		ClientHttpResponse response = request.execute();, +		try {, +			assertEquals("Invalid status code", HttpStatus.OK, response.getStatusCode());, +		}, +		finally {, +			response.close();, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +				nettyMethod, this.uri.toString(), this.body.buffer());, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +	@Test, +	public void queryParameters() throws Exception {, +		URI uri = new URI(baseUrl + "/params?param1=value&param2=value1&param2=value2");, +		ClientHttpRequest request = factory.createRequest(uri, HttpMethod.GET);, +, +		ClientHttpResponse response = request.execute();, +		try {, +			assertEquals("Invalid status code", HttpStatus.OK, response.getStatusCode());, +		}, +		finally {, +			response.close();, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractJettyServerTestCase.java, +import java.util.Map;, +public abstract class AbstractJettyServerTestCase {, +		handler.addServlet(new ServletHolder(new ParameterServlet()), "/params");, +, +	@SuppressWarnings("serial"), +	private static class ParameterServlet extends HttpServlet {, +, +		@Override, +		protected void service(HttpServletRequest req, HttpServletResponse resp), +				throws ServletException, IOException {, +			Map<String, String[]> parameters = req.getParameterMap();, +			assertEquals(2, parameters.size());, +, +			String[] values = parameters.get("param1");, +			assertEquals(1, values.length);, +			assertEquals("value", values[0]);, +, +			values = parameters.get("param2");, +			assertEquals(2, values.length);, +			assertEquals("value1", values[0]);, +			assertEquals("value2", values[1]);, +, +			resp.setStatus(200);, +			resp.setContentLength(0);, +		}, +	}, +]