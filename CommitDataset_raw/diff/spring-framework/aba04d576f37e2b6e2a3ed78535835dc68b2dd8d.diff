[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/RedirectViewTests.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Collections;, +import java.util.LinkedHashMap;, +import org.junit.Before;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.BDDMockito.mock;, +import static org.mockito.BDDMockito.verify;, + * @author Rossen Stoyanchev, +	private MockHttpServletRequest request;, +, +	private MockHttpServletResponse response;, +, +, +	@Before, +	public void setUp() throws Exception {, +		this.request = new MockHttpServletRequest();, +		this.request.setContextPath("/context");, +		this.request.setCharacterEncoding(WebUtils.DEFAULT_CHARACTER_ENCODING);, +		this.request.setAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());, +		this.request.setAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE, new SessionFlashMapManager());, +		this.response = new MockHttpServletResponse();, +, +	}, +, +, +		rv.render(new HashMap<>(), request, response);, +		rv.render(new HashMap<>(), request, response);, +		rv.render(new HashMap<>(), request, response);, +		rv.render(new HashMap<>(), request, response);, +		rv.render(new HashMap<>(), request, response);, +	@SuppressWarnings("AssertEqualsBetweenInconvertibleTypes"), +		doTest(new HashMap<>(), url, false, url);, +		doTest(new HashMap<>(), url, true, "/context" + url);, +		Map<String, String> model = new HashMap<>();, +		Map<String, String> model = Collections.singletonMap("foo", "bar");, +, +		TestRedirectView rv = new TestRedirectView(url, false, model);, +		rv.setExposeModelAttributes(false);, +		rv.render(model, request, response);, +, +		assertEquals(url, this.response.getRedirectedUrl());, +		Map<String, String> model = new HashMap<>();, +		doTest(new HashMap<>(), url, true, "/context" + url);, +		Map<String, String> model = new HashMap<>();, +			String expectedUrlForEncoding = url + "?" + key + "=" + val + "&" + key2 + "=" + val2;, +			String expectedUrlForEncoding = url + "?" + key2 + "=" + val2 + "&" + key + "=" + val;, +		Map<String, String[]> model = new HashMap<>();, +			String expectedUrlForEncoding = url + "?" + key + "=" + val[0] + "&" + key + "=" + val[1];, +			String expectedUrlForEncoding = url + "?" + key + "=" + val[1] + "&" + key + "=" + val[0];, +		List<String> val = new ArrayList<>();, +		Map<String, List<String>> model = new HashMap<>();, +			String expectedUrlForEncoding = url + "?" + key + "=" + val.get(0) + "&" + key + "=" + val.get(1);, +			String expectedUrlForEncoding = url + "?" + key + "=" + val.get(1) + "&" + key + "=" + val.get(0);, +		Object val2 = 611;, +		Map<String, Object> model = new LinkedHashMap<>();, +		String expectedUrlForEncoding = url + "?" + key + "=" + val + "&" + key2 + "=" + val2;, +		rv.render(new HashMap<>(), request, response);, +	private void doTest(Map<String, ?> map, String url, boolean contextRelative, String expectedUrl), +, +		TestRedirectView rv = new TestRedirectView(url, contextRelative, map);, +		rv.render(map, request, response);, +, +		assertTrue("queryProperties() should have been called.", rv.queryPropertiesCalled);, +		assertEquals(expectedUrl, this.response.getRedirectedUrl());, +	private static class TestRedirectView extends RedirectView {, +		private Map<String, ?> expectedModel;, +, +		private boolean queryPropertiesCalled = false;, +, +, +		public TestRedirectView(String url, boolean contextRelative, Map<String, ?> expectedModel) {, +			super(url, contextRelative);, +			this.expectedModel = expectedModel;, +		}, +			assertTrue("Map and model must be equal.", this.expectedModel.equals(model));]