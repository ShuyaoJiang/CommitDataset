[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return inserter().insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return inserter().insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return inserter().insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +import java.time.Instant;, +import java.util.EnumSet;, +		private static final Set<HttpMethod> SAFE_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +, +		@Override, +		public final Mono<Void> writeTo(ServerWebExchange exchange, Context context) {, +			writeStatusAndHeaders(exchange.getResponse());, +, +			Instant lastModified = Instant.ofEpochMilli(headers().getLastModified());, +			HttpMethod httpMethod = exchange.getRequest().getMethod();, +			if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(headers().getETag(), lastModified)) {, +				return exchange.getResponse().setComplete();, +			}, +			else {, +				return writeToInternal(exchange, context);, +			}, +		}, +, +		private void writeStatusAndHeaders(ServerHttpResponse response) {, +		protected abstract Mono<Void> writeToInternal(ServerWebExchange exchange, Context context);, +, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return this.inserter.insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return inserter().insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java, +import java.time.Instant;, +import java.util.EnumSet;, +		private static final Set<HttpMethod> SAFE_METHODS = EnumSet.of(HttpMethod.GET, HttpMethod.HEAD);, +, +		@Override, +		public final Mono<Void> writeTo(ServerWebExchange exchange, Context context) {, +			writeStatusAndHeaders(exchange.getResponse());, +, +			Instant lastModified = Instant.ofEpochMilli(headers().getLastModified());, +			HttpMethod httpMethod = exchange.getRequest().getMethod();, +			if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(headers().getETag(), lastModified)) {, +				return exchange.getResponse().setComplete();, +			}, +			else {, +				return writeToInternal(exchange, context);, +			}, +		}, +, +		private void writeStatusAndHeaders(ServerHttpResponse response) {, +		protected abstract Mono<Void> writeToInternal(ServerWebExchange exchange, Context context);, +, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +		protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {, +			return this.inserter.insert(exchange.getResponse(), new BodyInserter.Context() {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilderTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.format.DateTimeFormatter;, +import java.time.temporal.ChronoUnit;, +import org.springframework.mock.http.server.reactive.test.MockServerHttpResponse;, +	@Test, +	public void notModifiedEtag() {, +		String etag = "\"foo\"";, +		EntityResponse<String> responseMono = EntityResponse.fromObject("bar"), +				.eTag(etag), +				.build(), +				.block();, +, +		MockServerHttpRequest request = MockServerHttpRequest.get("http://example.com"), +				.header(HttpHeaders.IF_NONE_MATCH, etag), +				.build();, +		MockServerWebExchange exchange = MockServerWebExchange.from(request);, +, +		responseMono.writeTo(exchange, DefaultServerResponseBuilderTests.EMPTY_CONTEXT);, +, +		MockServerHttpResponse response = exchange.getResponse();, +		assertEquals(HttpStatus.NOT_MODIFIED, response.getStatusCode());, +		StepVerifier.create(response.getBody()), +				.expectError(IllegalStateException.class), +				.verify();, +	}, +, +, +	@Test, +	public void notModifiedLastModified() {, +		ZonedDateTime now = ZonedDateTime.now();, +		ZonedDateTime oneMinuteBeforeNow = now.minus(1, ChronoUnit.MINUTES);]