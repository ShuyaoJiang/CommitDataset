[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any());, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +		given(variableResolver.resolveVariable(any())).willReturn(longType);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any());, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +		given(variableResolver.resolveVariable(any())).willReturn(longType);, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +				.given(messageConverter).toMessage(eq(message), any());, +		willThrow(DestinationResolutionException.class).given(jmsTemplate).send(eq(destination), any());, +		willThrow(MessageFormatException.class).given(messageConverter).toMessage(eq(message), any());, +		willThrow(MessageNotWriteableException.class).given(messageConverter).toMessage(eq(message), any());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq("unknownQueue"), any());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq(destination), any());, +		}).given(jmsTemplate).send(eq("myQueue"), any());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any());, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +		given(variableResolver.resolveVariable(any())).willReturn(longType);, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +				.given(messageConverter).toMessage(eq(message), any());, +		willThrow(DestinationResolutionException.class).given(jmsTemplate).send(eq(destination), any());, +		willThrow(MessageFormatException.class).given(messageConverter).toMessage(eq(message), any());, +		willThrow(MessageNotWriteableException.class).given(messageConverter).toMessage(eq(message), any());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq("unknownQueue"), any());, +		willThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq(destination), any());, +		}).given(jmsTemplate).send(eq("myQueue"), any());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java, +		verify(taskScheduler).schedule(taskCaptor.capture(), (Date) notNull());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any());, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +		given(variableResolver.resolveVariable(any())).willReturn(longType);, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());, +		given(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());, +		given(jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage);, +		verify(jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any());]