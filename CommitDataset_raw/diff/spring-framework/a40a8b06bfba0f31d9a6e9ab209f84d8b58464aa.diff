[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +	/**, +	 * Return the configured default {@code View}'s., +	 */, +		if (isViewNameOrReference(elementType, result)) {, +			Mono<Object> viewName = getDefaultViewNameMono(exchange, result);, +			viewMono = valueMono.otherwiseIfEmpty(viewName);, +			viewMono = valueMono.map(value -> updateModel(value, result)), +					.then(model -> getDefaultViewNameMono(exchange, result));, +		return viewMono.then(view -> {, +			if (view instanceof View) {, +				return ((View) view).render(result, null, exchange);, +			else if (view instanceof CharSequence) {, +				String viewName = view.toString();, +				return resolveAndRender(viewName, locale, result, exchange);, +				return Mono.error(new IllegalStateException("Unexpected view type"));, +	private boolean isViewNameOrReference(ResolvableType elementType, HandlerResult result) {, +	private Mono<Object> getDefaultViewNameMono(ServerWebExchange exchange, HandlerResult result) {, +		String defaultViewName = getDefaultViewName(result, exchange);, +			return Mono.error(new IllegalStateException(, +					"Handler [" + result.getHandler() + "] " +, +	protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange) {, +	private Object updateModel(Object value, HandlerResult result) {, +	private Mono<? extends Void> resolveAndRender(String viewName, Locale locale,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +	/**, +	 * Return the configured default {@code View}'s., +	 */, +		if (isViewNameOrReference(elementType, result)) {, +			Mono<Object> viewName = getDefaultViewNameMono(exchange, result);, +			viewMono = valueMono.otherwiseIfEmpty(viewName);, +			viewMono = valueMono.map(value -> updateModel(value, result)), +					.then(model -> getDefaultViewNameMono(exchange, result));, +		return viewMono.then(view -> {, +			if (view instanceof View) {, +				return ((View) view).render(result, null, exchange);, +			else if (view instanceof CharSequence) {, +				String viewName = view.toString();, +				return resolveAndRender(viewName, locale, result, exchange);, +				return Mono.error(new IllegalStateException("Unexpected view type"));, +	private boolean isViewNameOrReference(ResolvableType elementType, HandlerResult result) {, +	private Mono<Object> getDefaultViewNameMono(ServerWebExchange exchange, HandlerResult result) {, +		String defaultViewName = getDefaultViewName(result, exchange);, +			return Mono.error(new IllegalStateException(, +					"Handler [" + result.getHandler() + "] " +, +	protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange) {, +	private Object updateModel(Object value, HandlerResult result) {, +	private Mono<? extends Void> resolveAndRender(String viewName, Locale locale,, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, +	public void supports() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void viewNameMono() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("profile: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +				.assertValuesWith(buf -> assertEquals("account: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void modelReturnValue() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123, name=Joe}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void mapReturnValue() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123, name=Joe}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void modelAttributeAnnotationReturnValue() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123, name=Joe}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void objectReturnValue() throws Exception {, +				.assertValuesWith(buf -> assertEquals("account: {id=123, testBean=TestBean[name=Joe]}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void contentNegotiation() throws Exception {, +				.assertValuesWith(buf -> assertEquals("defaultView: {id=123}",, +						DataBufferTestUtils.dumpString(buf, Charset.forName("UTF-8"))));, +	public void contentNegotiationNotAcceptable() throws Exception {, +			ByteBuffer byteBuffer = ByteBuffer.wrap(value.getBytes(Charset.forName("UTF-8")));, +			DataBuffer dataBuffer = new DefaultDataBufferFactory().wrap(byteBuffer);, +			return response.writeWith(Flux.just(dataBuffer));]