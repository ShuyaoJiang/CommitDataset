[+++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, + * Copyright 2002-2011 the original author or authors., +	 * Adds a Formatter to format fields of the given type., +	 * Adds a Formatter to format fields of a specific type., +	 * The field type is implied by the parameterized Formatter instance., +	 * @param formatter the formatter to add, +	 * @see #addFormatterForFieldType(Class, Formatter), +	 */, +	void addFormatter(Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, + * Copyright 2002-2011 the original author or authors., +	 * Adds a Formatter to format fields of the given type., +	 * Adds a Formatter to format fields of a specific type., +	 * The field type is implied by the parameterized Formatter instance., +	 * @param formatter the formatter to add, +	 * @see #addFormatterForFieldType(Class, Formatter), +	 */, +	void addFormatter(Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2011 the original author or authors., +	public void addFormatter(Formatter<?> formatter) {, +		final Class<?> fieldType = GenericTypeResolver.resolveTypeArgument(formatter.getClass(), Formatter.class);, +		if (fieldType == null) {, +			throw new IllegalArgumentException("Unable to extract parameterized field type argument from Formatter [", +					+ formatter.getClass().getName() + "]; does the formatter parameterize the <T> generic type?");, +		}, +		addFormatterForFieldType(fieldType, formatter);, +	}, +, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		@SuppressWarnings("rawtypes"), +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, + * Copyright 2002-2011 the original author or authors., +	 * Adds a Formatter to format fields of the given type., +	 * Adds a Formatter to format fields of a specific type., +	 * The field type is implied by the parameterized Formatter instance., +	 * @param formatter the formatter to add, +	 * @see #addFormatterForFieldType(Class, Formatter), +	 */, +	void addFormatter(Formatter<?> formatter);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2011 the original author or authors., +	public void addFormatter(Formatter<?> formatter) {, +		final Class<?> fieldType = GenericTypeResolver.resolveTypeArgument(formatter.getClass(), Formatter.class);, +		if (fieldType == null) {, +			throw new IllegalArgumentException("Unable to extract parameterized field type argument from Formatter [", +					+ formatter.getClass().getName() + "]; does the formatter parameterize the <T> generic type?");, +		}, +		addFormatterForFieldType(fieldType, formatter);, +	}, +, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		@SuppressWarnings("rawtypes"), +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.format.Formatter;, + * and custom converters and formatters for common types such as numbers , + * and datetimes ., +	private Set<?> formatters;, +, +	 * Configure the set of custom converter objects that should be added., +	 * @param converters instances of , +	 * 		{@link org.springframework.core.convert.converter.Converter},, +	 * 		{@link org.springframework.core.convert.converter.ConverterFactory} or, +	 * 		{@link org.springframework.core.convert.converter.GenericConverter}., +	/**, +	 * Configure the set of custom formatter objects that should be added., +	 * @param formatters instances of {@link Formatter} or {@link AnnotationFormatterFactory}., +	 */, +	public void setFormatters(Set<?> formatters) {, +		this.formatters = formatters;, +	}, +, +		if (this.formatters != null) {, +			for (Object formatter : this.formatters) {, +				if (formatter instanceof Formatter<?>) {, +					this.conversionService.addFormatter((Formatter<?>) formatter);, +				} else if (formatter instanceof AnnotationFormatterFactory<?>) {, +					this.conversionService.addFormatterForFieldAnnotation((AnnotationFormatterFactory<?>) formatter);, +				} else {, +					throw new IllegalArgumentException(, +							"Custom formatters must be implementations of Formatter or AnnotationFormatterFactory");, +				}, +			}, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, + * Copyright 2002-2011 the original author or authors., +	 * Adds a Formatter to format fields of the given type., +	 * Adds a Formatter to format fields of a specific type., +	 * The field type is implied by the parameterized Formatter instance., +	 * @param formatter the formatter to add, +	 * @see #addFormatterForFieldType(Class, Formatter), +	 */, +	void addFormatter(Formatter<?> formatter);]