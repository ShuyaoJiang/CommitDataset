[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	public void testObjectFactoryFieldInjection() {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class));, +		ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testObjectFactoryConstructorInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryConstructorInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +, +		ObjectFactoryConstructorInjectionBean bean = (ObjectFactoryConstructorInjectionBean) bf.getBean("annotatedBean");, +		RootBeanDefinition annotatedBeanDefinition = new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class);, +		ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean");, +		ObjectFactoryFieldInjectionBean anotherBean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean");, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class));, +		ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean");, +		bean = (ObjectFactoryFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean);, +	public static class ObjectFactoryFieldInjectionBean implements Serializable {, +	@SuppressWarnings("serial"), +	public static class ObjectFactoryConstructorInjectionBean implements Serializable {, +, +		private final ObjectFactory<TestBean> testBeanFactory;, +, +		public ObjectFactoryConstructorInjectionBean(ObjectFactory<TestBean> testBeanFactory) {, +			this.testBeanFactory = testBeanFactory;, +		}, +, +		public TestBean getTestBean() {, +			return this.testBeanFactory.getObject();, +		}, +	}, +, +]