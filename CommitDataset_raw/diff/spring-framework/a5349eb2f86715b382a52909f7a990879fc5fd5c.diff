[+++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +import javax.xml.bind.DatatypeConverter;, + * <p>Adapts to either Java 8's {@link java.util.Base64} class or Apache Commons Codec's, + * {@link org.apache.commons.codec.binary.Base64} class. With neither Java 8 nor Commons, + * Codec present, {@link #encode}/{@link #decode} calls will throw an IllegalStateException., + * However, as of Spring 4.2, {@link #encodeToString} and {@link #decodeFromString} will, + * nevertheless work since they can delegate to the JAXB DatatypeConverter as a fallback., + * @see javax.xml.bind.DatatypeConverter#printBase64Binary, + * @see javax.xml.bind.DatatypeConverter#parseBase64Binary, +	 * Assert that Byte64 encoding between byte arrays is actually supported., +	private static void assertDelegateAvailable() {, +		Assert.state(delegate != null,, +				"Neither Java 8 nor Apache Commons Codec found - Base64 encoding between byte arrays not supported");, +	 * @throws IllegalStateException if Base64 encoding between byte arrays is not, +	 * supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime, +		assertDelegateAvailable();, +	 * Base64-decode the given byte array., +	 * @param src the encoded byte array (may be {@code null}), +	 * @return the original byte array (or {@code null} if the input was {@code null}), +	 * @throws IllegalStateException if Base64 encoding between byte arrays is not, +	 * supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime, +	 */, +	public static byte[] decode(byte[] src) {, +		assertDelegateAvailable();, +		return delegate.decode(src);, +	}, +, +	/**, +, +		if (delegate != null) {, +			// Full encoder available, +		else {, +			// JAXB fallback for String case, +			return DatatypeConverter.printBase64Binary(src);, +		}, +, +		if (delegate != null) {, +			// Full encoder available, +		else {, +			// JAXB fallback for String case, +			return DatatypeConverter.parseBase64Binary(src);, +		}, +	}, +++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +import javax.xml.bind.DatatypeConverter;, + * <p>Adapts to either Java 8's {@link java.util.Base64} class or Apache Commons Codec's, + * {@link org.apache.commons.codec.binary.Base64} class. With neither Java 8 nor Commons, + * Codec present, {@link #encode}/{@link #decode} calls will throw an IllegalStateException., + * However, as of Spring 4.2, {@link #encodeToString} and {@link #decodeFromString} will, + * nevertheless work since they can delegate to the JAXB DatatypeConverter as a fallback., + * @see javax.xml.bind.DatatypeConverter#printBase64Binary, + * @see javax.xml.bind.DatatypeConverter#parseBase64Binary, +	 * Assert that Byte64 encoding between byte arrays is actually supported., +	private static void assertDelegateAvailable() {, +		Assert.state(delegate != null,, +				"Neither Java 8 nor Apache Commons Codec found - Base64 encoding between byte arrays not supported");, +	 * @throws IllegalStateException if Base64 encoding between byte arrays is not, +	 * supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime, +		assertDelegateAvailable();, +	 * Base64-decode the given byte array., +	 * @param src the encoded byte array (may be {@code null}), +	 * @return the original byte array (or {@code null} if the input was {@code null}), +	 * @throws IllegalStateException if Base64 encoding between byte arrays is not, +	 * supported, i.e. neither Java 8 nor Apache Commons Codec is present at runtime, +	 */, +	public static byte[] decode(byte[] src) {, +		assertDelegateAvailable();, +		return delegate.decode(src);, +	}, +, +	/**, +, +		if (delegate != null) {, +			// Full encoder available, +		else {, +			// JAXB fallback for String case, +			return DatatypeConverter.printBase64Binary(src);, +		}, +, +		if (delegate != null) {, +			// Full encoder available, +		else {, +			// JAXB fallback for String case, +			return DatatypeConverter.parseBase64Binary(src);, +		}, +	}, +++ b/spring-core/src/test/java/org/springframework/util/Base64UtilsTests.java, +import javax.xml.bind.DatatypeConverter;, +, + * @since 4.2, +	public void encodeWithJdk8VsCommonsCodec() throws UnsupportedEncodingException {, +		assertArrayEquals(bytes, jdkDelegate.decode(jdkDelegate.encode(bytes)));, +		assertArrayEquals(bytes, commonsDelegate.decode(commonsDelegate.encode(bytes)));, +		assertArrayEquals(bytes, jdkDelegate.decode(jdkDelegate.encode(bytes)));, +		assertArrayEquals(bytes, commonsDelegate.decode(commonsDelegate.encode(bytes)));, +		assertArrayEquals(bytes, jdkDelegate.decode(jdkDelegate.encode(bytes)));, +		assertArrayEquals(bytes, commonsDelegate.decode(commonsDelegate.encode(bytes)));, +		assertArrayEquals(bytes, jdkDelegate.decode(jdkDelegate.encode(bytes)));, +		assertArrayEquals(bytes, commonsDelegate.decode(commonsDelegate.encode(bytes)));, +	}]