[+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, + * @author Rob Winch, +						.flatMap(this.getSessionStore()::updateLastAccessTime), +						.cast(DefaultWebSession.class), +						.map(session -> new DefaultWebSession(session, session.getLastAccessTime(), s -> saveSession(exchange, s))), +	private Mono<WebSession> retrieveSession(ServerWebExchange exchange) {, +	private Mono<WebSession> removeSessionIfExpired(ServerWebExchange exchange, WebSession session) {, +	private Mono<WebSession> createSession(ServerWebExchange exchange) {, +		return this.sessionStore.createWebSession();, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, + * @author Rob Winch, +						.flatMap(this.getSessionStore()::updateLastAccessTime), +						.cast(DefaultWebSession.class), +						.map(session -> new DefaultWebSession(session, session.getLastAccessTime(), s -> saveSession(exchange, s))), +	private Mono<WebSession> retrieveSession(ServerWebExchange exchange) {, +	private Mono<WebSession> removeSessionIfExpired(ServerWebExchange exchange, WebSession session) {, +	private Mono<WebSession> createSession(ServerWebExchange exchange) {, +		return this.sessionStore.createWebSession();, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.time.Clock;, +import java.time.Instant;, +import java.time.ZoneId;, +import org.springframework.util.Assert;, +import org.springframework.util.IdGenerator;, +import org.springframework.util.JdkIdGenerator;, + * @author Rob Winch, +	private static final IdGenerator idGenerator = new JdkIdGenerator();, +, +	private Clock clock = Clock.system(ZoneId.of("GMT"));, +, +	public Mono<WebSession> createWebSession() {, +		return Mono.fromSupplier(() ->, +				new DefaultWebSession(idGenerator, getClock(),, +						(oldId, session) -> this.changeSessionId(oldId, session),, +						this::storeSession));, +	}, +, +	public Mono<WebSession> updateLastAccessTime(WebSession webSession) {, +		return Mono.fromSupplier(() -> {, +			DefaultWebSession session = (DefaultWebSession) webSession;, +			Instant lastAccessTime = Instant.now(getClock());, +			return new DefaultWebSession(session, lastAccessTime);, +		});, +	}, +, +	/**, +	 * Configure the {@link Clock} to use to set lastAccessTime on every created, +	 * session and to calculate if it is expired., +	 * <p>This may be useful to align to different timezone or to set the clock, +	 * back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}, +	 * in order to simulate session expiration., +	 * <p>By default this is {@code Clock.system(ZoneId.of("GMT"))}., +	 * @param clock the clock to use, +	 */, +	public void setClock(Clock clock) {, +		Assert.notNull(clock, "'clock' is required.");, +		this.clock = clock;, +	}, +, +	/**, +	 * Return the configured clock for session lastAccessTime calculations., +	 */, +	public Clock getClock() {, +		return this.clock;, +	}, +, +	private Mono<Void> changeSessionId(String oldId, WebSession session) {, +		this.sessions.remove(oldId);, +		this.sessions.put(session.getId(), session);, +		return Mono.empty();, +	}, +, +	private Mono<Void> storeSession(WebSession session) {, +		this.sessions.put(session.getId(), session);, +		return Mono.empty();, +	}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, + * @author Rob Winch, +						.flatMap(this.getSessionStore()::updateLastAccessTime), +						.cast(DefaultWebSession.class), +						.map(session -> new DefaultWebSession(session, session.getLastAccessTime(), s -> saveSession(exchange, s))), +	private Mono<WebSession> retrieveSession(ServerWebExchange exchange) {, +	private Mono<WebSession> removeSessionIfExpired(ServerWebExchange exchange, WebSession session) {, +	private Mono<WebSession> createSession(ServerWebExchange exchange) {, +		return this.sessionStore.createWebSession();, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.time.Clock;, +import java.time.Instant;, +import java.time.ZoneId;, +import org.springframework.util.Assert;, +import org.springframework.util.IdGenerator;, +import org.springframework.util.JdkIdGenerator;, + * @author Rob Winch, +	private static final IdGenerator idGenerator = new JdkIdGenerator();, +, +	private Clock clock = Clock.system(ZoneId.of("GMT"));, +, +	public Mono<WebSession> createWebSession() {, +		return Mono.fromSupplier(() ->, +				new DefaultWebSession(idGenerator, getClock(),]