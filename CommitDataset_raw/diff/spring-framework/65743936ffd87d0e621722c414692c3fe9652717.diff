[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/InjectAnnotationBeanPostProcessorTests.java, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class));, +		ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean");, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class));, +		ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean");, +	public void testObjectFactoryFieldInjectionIntoPrototypeBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class, false));, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean"));, +		bf.registerBeanDefinition("testBean", bd);, +		bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class));, +, +		ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		ObjectFactoryQualifierFieldInjectionBean anotherBean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean");, +		assertNotSame(anotherBean, bean);, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +	}, +, +	@Test, +	public void testObjectFactoryMethodInjectionIntoPrototypeBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierMethodInjectionBean.class, false));, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean"));, +		bf.registerBeanDefinition("testBean", bd);, +		bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class));, +, +		ObjectFactoryQualifierMethodInjectionBean bean = (ObjectFactoryQualifierMethodInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		ObjectFactoryQualifierMethodInjectionBean anotherBean = (ObjectFactoryQualifierMethodInjectionBean) bf.getBean("annotatedBean");, +		assertNotSame(anotherBean, bean);, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +	}, +, +	@Test, +	public void testObjectFactoryWithBeanField() throws Exception {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class));, +		ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean");, +		bean = (ObjectFactoryFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean);, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testObjectFactoryWithBeanMethod() throws Exception {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryMethodInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +		bf.setSerializationId("test");, +, +		ObjectFactoryMethodInjectionBean bean = (ObjectFactoryMethodInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("testBean"), bean.getTestBean());, +		bean = (ObjectFactoryMethodInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean);, +	public static class ObjectFactoryFieldInjectionBean implements Serializable {, +	public static class ObjectFactoryMethodInjectionBean implements Serializable {, +, +		private Provider<TestBean> testBeanFactory;, +, +		@Inject, +		public void setTestBeanFactory(Provider<TestBean> testBeanFactory) {, +			this.testBeanFactory = testBeanFactory;, +		}, +, +		public TestBean getTestBean() {, +			return this.testBeanFactory.get();, +		}, +	}, +, +, +	public static class ObjectFactoryQualifierFieldInjectionBean {, +	public static class ObjectFactoryQualifierMethodInjectionBean {, +, +		private Provider<?> testBeanFactory;, +, +		@Inject, +		@Named("testBean"), +		public void setTestBeanFactory(Provider<?> testBeanFactory) {, +			this.testBeanFactory = testBeanFactory;, +		}, +, +		public TestBean getTestBean() {, +			return (TestBean) this.testBeanFactory.get();, +		}]