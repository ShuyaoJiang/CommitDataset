[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java, + * Copyright 2002-2017 the original author or authors., +import java.sql.Statement;, +	private boolean enforceReadOnly = false;, +, +	/**, +	 * Specify whether to enforce the read-only nature of a transaction, +	 * (as indicated by {@link TransactionDefinition#isReadOnly()}, +	 * through an explicit statement on the transactional connection:, +	 * "SET TRANSACTION READ ONLY" as understood by Oracle, MySQL and Postgres., +	 * <p>The exact treatment, including any SQL statement executed on the connection,, +	 * can be customized through through {@link #prepareTransactionalConnection}., +	 * <p>This mode of read-only handling goes beyond the {@link Connection#setReadOnly}, +	 * hint that Spring applies by default. In contrast to that standard JDBC hint,, +	 * "SET TRANSACTION READ ONLY" enforces an isolation-level-like connection mode, +	 * where data manipulation statements are strictly disallowed. Also, on Oracle,, +	 * this read-only mode provides read consistency for the entire transaction., +	 * <p>Note that older Oracle JDBC drivers (9i, 10g) used to enforce this read-only, +	 * mode even for {@code Connection.setReadOnly(true}. However, with recent drivers,, +	 * this strong enforcement needs to be applied explicitly, e.g. through this flag., +	 * @since 4.3.7, +	 * @see #prepareTransactionalConnection, +	 */, +	public void setEnforceReadOnly(boolean enforceReadOnly) {, +		this.enforceReadOnly = enforceReadOnly;, +	}, +, +	/**, +	 * Return whether to enforce the read-only nature of a transaction, +	 * through an explicit statement on the transactional connection., +	 * @since 4.3.7, +	 * @see #setEnforceReadOnly, +	 */, +	public boolean isEnforceReadOnly() {, +		return this.enforceReadOnly;, +	}, +, +, +			prepareTransactionalConnection(con, definition);, +			// Bind the connection holder to the thread., +		return TransactionSynchronizationManager.unbindResource(this.dataSource);, +		TransactionSynchronizationManager.bindResource(this.dataSource, suspendedResources);, +	 * Prepare the transactional {@code Connection} right after transaction begin., +	 * <p>The default implementation executes a "SET TRANSACTION READ ONLY" statement, +	 * if the {@link #setEnforceReadOnly "enforceReadOnly"} flag is set to {@code true}, +	 * and the transaction definition indicates a read-only transaction., +	 * <p>The "SET TRANSACTION READ ONLY" is understood by Oracle, MySQL and Postgres, +	 * and may work with other databases as well. If you'd like to adapt this treatment,, +	 * override this method accordingly., +	 * @param con the transactional JDBC Connection, +	 * @param definition the current transaction definition, +	 * @throws SQLException if thrown by JDBC API, +	 * @since 4.3.7, +	 * @see #setEnforceReadOnly, +	 */, +	protected void prepareTransactionalConnection(Connection con, TransactionDefinition definition), +			throws SQLException {, +, +		if (isEnforceReadOnly() && definition.isReadOnly()) {, +			Statement stmt = con.createStatement();, +			try {, +				stmt.executeUpdate("SET TRANSACTION READ ONLY");, +			}, +			finally {, +				stmt.close();, +			}, +		}, +	}, +, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java, + * Copyright 2002-2017 the original author or authors., +import java.sql.Statement;, +	private boolean enforceReadOnly = false;, +, +	/**, +	 * Specify whether to enforce the read-only nature of a transaction, +	 * (as indicated by {@link TransactionDefinition#isReadOnly()}, +	 * through an explicit statement on the transactional connection:, +	 * "SET TRANSACTION READ ONLY" as understood by Oracle, MySQL and Postgres., +	 * <p>The exact treatment, including any SQL statement executed on the connection,, +	 * can be customized through through {@link #prepareTransactionalConnection}., +	 * <p>This mode of read-only handling goes beyond the {@link Connection#setReadOnly}, +	 * hint that Spring applies by default. In contrast to that standard JDBC hint,, +	 * "SET TRANSACTION READ ONLY" enforces an isolation-level-like connection mode, +	 * where data manipulation statements are strictly disallowed. Also, on Oracle,, +	 * this read-only mode provides read consistency for the entire transaction., +	 * <p>Note that older Oracle JDBC drivers (9i, 10g) used to enforce this read-only, +	 * mode even for {@code Connection.setReadOnly(true}. However, with recent drivers,, +	 * this strong enforcement needs to be applied explicitly, e.g. through this flag., +	 * @since 4.3.7, +	 * @see #prepareTransactionalConnection, +	 */, +	public void setEnforceReadOnly(boolean enforceReadOnly) {, +		this.enforceReadOnly = enforceReadOnly;, +	}, +, +	/**, +	 * Return whether to enforce the read-only nature of a transaction]