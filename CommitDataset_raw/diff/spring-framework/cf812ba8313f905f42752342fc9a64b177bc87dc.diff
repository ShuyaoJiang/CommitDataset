[+++ b/src/docs/asciidoc/web/webflux.adoc, +The table below shows supported controller method return values. Note that reactive types, +from libraries such as Reactor, RxJava, <<webflux-reactive-libraries,or other>> are, +generally supported for all return values., +++ b/src/docs/asciidoc/web/webflux.adoc, +The table below shows supported controller method return values. Note that reactive types, +from libraries such as Reactor, RxJava, <<webflux-reactive-libraries,or other>> are, +generally supported for all return values., +++ b/src/docs/asciidoc/web/webmvc.adoc, +result of some event or callback. See <<mvc-ann-async>> and, +<<mvc-ann-async-deferredresult>>., +, +|`Callable<V>`, +|Produce any of the above return values asynchronously in a Spring MVC managed thread., +See <<mvc-ann-async>> and <<mvc-ann-async-callable>>., +See <<mvc-ann-async>> and <<mvc-ann-async-http-streaming>>., +`ResponseEntity`. See <<mvc-ann-async>> and <<mvc-ann-async-http-streaming>>., +See <<mvc-ann-async>> and <<mvc-ann-async-reactive-types>>., +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +Spring MVC has an extensive integration with Servlet 3.0 asynchronous request, +<<mvc-ann-async-processing,processing>>:, +, +* <<mvc-ann-async-deferredresult>> and <<mvc-ann-async-callable>> return values in, +controller method provide basic support for a single asynchronous return value., +* Controllers can <<mvc-ann-async-http-streaming,stream>> multiple values including, +<<mvc-ann-async-sse,SSE>> and <<mvc-ann-async-output-stream,raw data>>., +* Controllers can use reactive clients and return, +<<mvc-ann-async-reactive-types,reactive types>> for response handling., +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +==== Exception handling, +==== Interception, +[[mvc-ann-async-vs-webflux]], +==== Compared to WebFlux, +, +The Servlet API was originally built for sequential processing, i.e. making a single pass, +through the Filter-Servlet chain. The asynchronous request processing feature added in, +Servlet 3.0 allows applications to exit the Filter-Servlet chain but leave the response, +open, therefore breaking this thread-per-request model., +, +Spring MVC async support is built around that model. When a controller returns a, +`DeferredResult`, the Filter-Servlet chain is exited and the Servlet container thread is, +released. Later when the `DeferredResult` is set, an ASYNC dispatch (to the same URL) is, +made during which the controller is mapped again but not invoked. Instead the, +`DeferredResult` value is used to resume processing., +, +Spring WebFlux is not aware of the Servlet API nor does it such an asynchronous request, +processing feature because it is asynchronous by design. It processes each request in, +stages (continuations) rather than making a single pass through the callstack on a single, +thread. That means asynchronous handling is built into all framework contracts and is, +therefore intrinsically supported at all stages of request processing., +, +Essentially both Spring MVC and Spring WebFlux support asynchronous and, +<<mvc-ann-async-reactive-types>> for return values from controller methods. Spring MVC, +even supports streaming, including reactive back pressure, however individual writes to, +the response remain blocking (performed in a separate thread) and that is one major, +difference with WebFlux which relies on non-blocking I/O., +, +Another fundamental difference is that Spring MVC does not support asynchronous or, +reactive types in controller method arguments, e.g. `@RequestBody`, `@RequestPart`, and, +others, nor does it have any explicit support for asynchronous and reactive types as, +model attributes, all of which Spring WebFlux does support., +, +, +=== HTTP Streaming, +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +`DeferredResult` and `Callable` can be used for a single asynchronous return value., +What if you want to produce multiple asynchronous values and have those written to the, +response?, +, +, +[[mvc-ann-async-objects]], +==== Objects, +, +The `ResponseBodyEmitter` return value can be used to produce a stream of Objects, where, +each Object sent is serialized with an, +==== SSE, +==== Raw data, +=== Reactive types, +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +* A single-value promise is adapted to, and similar to using `DeferredResult`. Examples, +or `"text/event-stream"`, is adapted to, and similar to using `ResponseBodyEmitter` or, +to, and similar to using `DeferredResult<List<?>>`., +[.small]#<<mvc-ann-async-vs-webflux,Compared to WebFlux>>#, +The async request processing feature must be enabled at the Servlet container level., +The MVC config also exposes several options for asynchronous requests., +==== Servlet container, +Filter and Servlet declarations have an `asyncSupported` that needs to be set to true, +in order enable asynchronous request processing. In addition, Filter mappings should be, +declared to handle the ASYNC `javax.servlet.DispatchType`., +In Java configuration, when you use `AbstractAnnotationConfigDispatcherServletInitializer`, +to initialize the Servlet container, this is done automatically., +In `web.xml` configuration, add `<async-supported>true</async-supported>` to the, +`DispatcherServlet` and to `Filter` declarations, and also add, +`<dispatcher>ASYNC</dispatcher>` to filter mappings., +, +, +[[mvc-ann-async-configuration-spring-mvc]], +==== Spring MVC]