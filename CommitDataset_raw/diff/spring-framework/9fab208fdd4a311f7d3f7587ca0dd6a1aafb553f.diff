[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +		String destination = getDestination();, +		if (destination != null) {, +			sb.append(" destination=").append(destination);, +		String subscriptionId = getSubscriptionId();, +		if (subscriptionId != null) {, +			sb.append(" subscriptionId=").append(subscriptionId);, +		Principal user = getUser();, +		if (user != null) {, +			sb.append(" user=").append(user.getName());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +		String destination = getDestination();, +		if (destination != null) {, +			sb.append(" destination=").append(destination);, +		String subscriptionId = getSubscriptionId();, +		if (subscriptionId != null) {, +			sb.append(" subscriptionId=").append(subscriptionId);, +		Principal user = getUser();, +		if (user != null) {, +			sb.append(" user=").append(user.getName());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +						throw new StompConversionException(stompCommand +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +		String destination = getDestination();, +		if (destination != null) {, +			sb.append(" destination=").append(destination);, +		String subscriptionId = getSubscriptionId();, +		if (subscriptionId != null) {, +			sb.append(" subscriptionId=").append(subscriptionId);, +		Principal user = getUser();, +		if (user != null) {, +			sb.append(" user=").append(user.getName());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +						throw new StompConversionException(stompCommand +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +import java.security.Principal;, +		String destination = getDestination();, +		if (destination != null) {, +			setNativeHeader(STOMP_DESTINATION_HEADER, destination);, +		MimeType contentType = getContentType();, +		if (contentType != null) {, +			setNativeHeader(STOMP_CONTENT_TYPE_HEADER, contentType.toString());, +		SimpMessageType messageType = getMessageType();, +		if (messageType != SimpMessageType.MESSAGE) {, +			throw new IllegalStateException("Unexpected message type " + messageType);, +		StompCommand command = getCommand();, +		if (command == null) {, +		else if (!command.equals(StompCommand.SEND)) {, +			throw new IllegalStateException("Unexpected STOMP command " + command);, +		return command;, +		SimpMessageType messageType = getMessageType();, +		if (messageType != SimpMessageType.MESSAGE) {, +			throw new IllegalStateException("Unexpected message type " + messageType);, +			StompCommand command = getCommand();, +			if (command != null && StompCommand.MESSAGE.equals(command)) {, +		StompCommand command = getCommand();, +		if (StompCommand.SUBSCRIBE.equals(command)) {, +		else if (StompCommand.UNSUBSCRIBE.equals(command)) {, +		else if (StompCommand.SEND.equals(command)) {, +		else if (StompCommand.CONNECT.equals(command)) {, +			Principal user = getUser();, +			return "CONNECT" + (user != null ? " user=" + user.getName() : "") + appendSession();, +		else if (StompCommand.CONNECTED.equals(command)) {, +		else if (StompCommand.DISCONNECT.equals(command)) {, +			String receipt = getReceipt();, +			return "DISCONNECT" + (receipt != null ? " receipt=" + receipt : "") + appendSession();, +		MimeType mimeType = getContentType();, +		String contentType = (mimeType != null ? " " + mimeType.toString() : "");, +		if (bytes.length == 0 || mimeType == null || !isReadableContentType()) {, +		Charset charset = mimeType.getCharset();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, +		String destination = getDestination();, +		if (destination != null) {, +			sb.append(" destination=").append(destination);, +		String subscriptionId = getSubscriptionId();, +		if (subscriptionId != null) {, +			sb.append(" subscriptionId=").append(subscriptionId);, +		Principal user = getUser();, +		if (user != null) {, +			sb.append(" user=").append(user.getName());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +						throw new StompConversionException(stompCommand +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +import java.security.Principal;, +		String destination = getDestination();, +		if (destination != null) {, +			setNativeHeader(STOMP_DESTINATION_HEADER, destination);, +		MimeType contentType = getContentType();, +		if (contentType != null) {, +			setNativeHeader(STOMP_CONTENT_TYPE_HEADER, contentType.toString());, +		SimpMessageType messageType = getMessageType();, +		if (messageType != SimpMessageType.MESSAGE) {, +			throw new IllegalStateException("Unexpected message type " + messageType);, +		StompCommand command = getCommand();, +		if (command == null) {, +		else if (!command.equals(StompCommand.SEND)) {, +			throw new IllegalStateException("Unexpected STOMP command " + command);, +		return command;, +		SimpMessageType messageType = getMessageType();, +		if (messageType != SimpMessageType.MESSAGE) {]