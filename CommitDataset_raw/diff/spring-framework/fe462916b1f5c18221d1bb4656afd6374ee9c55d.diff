[+++ b/org.springframework.core/src/main/java/org/springframework/util/TypeUtils.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.reflect.GenericArrayType;, +		if (lhsType.equals(rhsType) || lhsType.equals(Object.class)) {, +		if (lhsType instanceof Class) {, +			Class lhsClass = (Class) lhsType;, +			if (rhsType instanceof Class) {, +				return ClassUtils.isAssignable(lhsClass, (Class) rhsType);, +			else if (rhsType instanceof ParameterizedType){, +				Type rhsRaw = ((ParameterizedType) rhsType).getRawType();, +				if (rhsRaw instanceof Class) {, +					return ClassUtils.isAssignable(lhsClass, (Class) rhsRaw);, +				}, +			}, +			else if (lhsClass.isArray() && rhsType instanceof GenericArrayType){, +				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();, +				return isAssignable(lhsClass.getComponentType(), rhsComponent);, +			}, +		}, +		if (lhsType instanceof ParameterizedType) {, +			if (rhsType instanceof Class) {, +				Type lhsRaw = ((ParameterizedType) lhsType).getRawType();, +				if (lhsRaw instanceof Class) {, +					return ClassUtils.isAssignable((Class) lhsRaw, (Class) rhsType);, +				}, +			}, +			else if (rhsType instanceof ParameterizedType) {, +		}, +		if (lhsType instanceof GenericArrayType) {, +			Type lhsComponent = ((GenericArrayType) lhsType).getGenericComponentType();, +			if (rhsType instanceof Class) {, +				Class rhsClass = (Class) rhsType;, +				if (rhsClass.isArray()) {, +					return isAssignable(lhsComponent, rhsClass.getComponentType());, +				}, +			}, +			else if (rhsType instanceof GenericArrayType) {, +				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();, +				return isAssignable(lhsComponent, rhsComponent);, +			}, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/util/TypeUtils.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.reflect.GenericArrayType;, +		if (lhsType.equals(rhsType) || lhsType.equals(Object.class)) {, +		if (lhsType instanceof Class) {, +			Class lhsClass = (Class) lhsType;, +			if (rhsType instanceof Class) {, +				return ClassUtils.isAssignable(lhsClass, (Class) rhsType);, +			else if (rhsType instanceof ParameterizedType){, +				Type rhsRaw = ((ParameterizedType) rhsType).getRawType();, +				if (rhsRaw instanceof Class) {, +					return ClassUtils.isAssignable(lhsClass, (Class) rhsRaw);, +				}, +			}, +			else if (lhsClass.isArray() && rhsType instanceof GenericArrayType){, +				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();, +				return isAssignable(lhsClass.getComponentType(), rhsComponent);, +			}, +		}, +		if (lhsType instanceof ParameterizedType) {, +			if (rhsType instanceof Class) {, +				Type lhsRaw = ((ParameterizedType) lhsType).getRawType();, +				if (lhsRaw instanceof Class) {, +					return ClassUtils.isAssignable((Class) lhsRaw, (Class) rhsType);, +				}, +			}, +			else if (rhsType instanceof ParameterizedType) {, +		}, +		if (lhsType instanceof GenericArrayType) {, +			Type lhsComponent = ((GenericArrayType) lhsType).getGenericComponentType();, +			if (rhsType instanceof Class) {, +				Class rhsClass = (Class) rhsType;, +				if (rhsClass.isArray()) {, +					return isAssignable(lhsComponent, rhsClass.getComponentType());, +				}, +			}, +			else if (rhsType instanceof GenericArrayType) {, +				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();, +				return isAssignable(lhsComponent, rhsComponent);, +			}, +		}, +++ b/org.springframework.core/src/test/java/org/springframework/util/TypeUtilsTests.java, + * Copyright 2002-2009 the original author or authors., +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, +public class TypeUtilsTests {, +	public static List<Number>[] array;, +, +	public static List<? extends Number>[] openArray;, +, +, +	@Test, +	public void withClasses() {, +	@Test, +	public void withParameterizedTypes() throws Exception {, +		assertTrue(TypeUtils.isAssignable(Object.class, objectsType));, +		assertTrue(TypeUtils.isAssignable(Object.class, openObjectsType));, +		assertTrue(TypeUtils.isAssignable(Object.class, stringsType));]